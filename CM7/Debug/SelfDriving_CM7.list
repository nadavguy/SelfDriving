
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009840  0801fff8  0801fff8  0002fff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029838  08029838  0004a3bc  2**0
                  CONTENTS
  4 .ARM          00000008  08029838  08029838  00039838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029840  08029840  0004a3bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029840  08029840  00039840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029844  08029844  00039844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2fc  24000000  08029848  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2fc  08033b44  0004a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a35c  08033ba4  0004a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a50c  2400a3bc  08033c04  0004a3bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240148c8  08033c04  000548c8  2**0
                  ALLOC
 13 .data_RAM_D2  00000000  30000000  30000000  0004a3bc  2**0
                  CONTENTS
 14 .bss_RAM_D2   00000000  30000000  30000000  0004a3bc  2**0
                  CONTENTS
 15 .openamp_section 0000008c  38000000  08033c04  00050000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0004a3bc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009ed5f  00000000  00000000  0004a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000d770  00000000  00000000  000e9149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002ea0  00000000  00000000  000f68c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002a08  00000000  00000000  000f9760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00053830  00000000  00000000  000fc168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005e5d8  00000000  00000000  0014f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001a0182  00000000  00000000  001adf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  0034e0f2  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d404  00000000  00000000  0034e148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a3bc 	.word	0x2400a3bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ffe0 	.word	0x0801ffe0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a3c0 	.word	0x2400a3c0
 80002dc:	0801ffe0 	.word	0x0801ffe0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400b050 	.word	0x2400b050
 8000acc:	2400a3d8 	.word	0x2400a3d8
 8000ad0:	2400b098 	.word	0x2400b098

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f017 fa9f 	bl	801801c <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400b098 	.word	0x2400b098
 8000b00:	2400b054 	.word	0x2400b054
 8000b04:	2400b050 	.word	0x2400b050

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400b054 	.word	0x2400b054

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f017 fa4e 	bl	8017fe0 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400b058 	.word	0x2400b058
 8000b60:	2400b054 	.word	0x2400b054

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f01a fc29 	bl	801b3d8 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400b04c 	.word	0x2400b04c
 8000b94:	2400a3d8 	.word	0x2400a3d8

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 fe22 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fe39 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	200c      	movs	r0, #12
 8000d06:	f001 fe1a 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f001 fe31 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58024400 	.word	0x58024400

08000d1c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <MX_ETH_Init+0x84>)
 8000d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d34:	22e1      	movs	r2, #225	; 0xe1
 8000d36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d4c:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_ETH_Init+0x8c>)
 8000d5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <MX_ETH_Init+0x90>)
 8000d60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d6c:	f003 fd9e 	bl	80048ac <HAL_ETH_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d76:	f000 fd06 	bl	8001786 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d7a:	2234      	movs	r2, #52	; 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d80:	f01a fb52 	bl	801b428 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2400af40 	.word	0x2400af40
 8000da0:	40028000 	.word	0x40028000
 8000da4:	2400a3dc 	.word	0x2400a3dc
 8000da8:	2400a35c 	.word	0x2400a35c
 8000dac:	2400a2fc 	.word	0x2400a2fc
 8000db0:	2400afc8 	.word	0x2400afc8

08000db4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a59      	ldr	r2, [pc, #356]	; (8000f38 <HAL_ETH_MspInit+0x184>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f040 80ab 	bne.w	8000f2e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dde:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de8:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e14:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1a:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eaa:	2332      	movs	r3, #50	; 0x32
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <HAL_ETH_MspInit+0x18c>)
 8000ec6:	f004 f907 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eca:	2386      	movs	r3, #134	; 0x86
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <HAL_ETH_MspInit+0x190>)
 8000ee6:	f004 f8f7 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efc:	230b      	movs	r3, #11
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4810      	ldr	r0, [pc, #64]	; (8000f48 <HAL_ETH_MspInit+0x194>)
 8000f08:	f004 f8e6 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_ETH_MspInit+0x198>)
 8000f2a:	f004 f8d5 	bl	80050d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40028000 	.word	0x40028000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020800 	.word	0x58020800
 8000f44:	58020000 	.word	0x58020000
 8000f48:	58020400 	.word	0x58020400
 8000f4c:	58021800 	.word	0x58021800

08000f50 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b93      	ldr	r3, [pc, #588]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	4a91      	ldr	r2, [pc, #580]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f76:	4b8f      	ldr	r3, [pc, #572]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f84:	4b8b      	ldr	r3, [pc, #556]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	4a8a      	ldr	r2, [pc, #552]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f94:	4b87      	ldr	r3, [pc, #540]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b84      	ldr	r3, [pc, #528]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a82      	ldr	r2, [pc, #520]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb2:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b7c      	ldr	r3, [pc, #496]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	4a7b      	ldr	r2, [pc, #492]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd0:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b75      	ldr	r3, [pc, #468]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a73      	ldr	r2, [pc, #460]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffc:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a6c      	ldr	r2, [pc, #432]	; (80011b4 <MX_GPIO_Init+0x264>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <MX_GPIO_Init+0x264>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <MX_GPIO_Init+0x264>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a64      	ldr	r2, [pc, #400]	; (80011b4 <MX_GPIO_Init+0x264>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <MX_GPIO_Init+0x264>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <MX_GPIO_Init+0x264>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a5d      	ldr	r2, [pc, #372]	; (80011b4 <MX_GPIO_Init+0x264>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <MX_GPIO_Init+0x264>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f244 0101 	movw	r1, #16385	; 0x4001
 800105c:	4856      	ldr	r0, [pc, #344]	; (80011b8 <MX_GPIO_Init+0x268>)
 800105e:	f004 fa03 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001068:	4854      	ldr	r0, [pc, #336]	; (80011bc <MX_GPIO_Init+0x26c>)
 800106a:	f004 f9fd 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_NRF_CE_Pin|GPIO_NRF_CS_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001074:	4852      	ldr	r0, [pc, #328]	; (80011c0 <MX_GPIO_Init+0x270>)
 8001076:	f004 f9f7 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001080:	4850      	ldr	r0, [pc, #320]	; (80011c4 <MX_GPIO_Init+0x274>)
 8001082:	f004 f9f1 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	484e      	ldr	r0, [pc, #312]	; (80011c8 <MX_GPIO_Init+0x278>)
 800108e:	f004 f9eb 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SD_CS_GPIO_Port, GPIO_SD_CS_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	484a      	ldr	r0, [pc, #296]	; (80011c0 <MX_GPIO_Init+0x270>)
 8001098:	f004 f9e6 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2102      	movs	r1, #2
 80010a0:	484a      	ldr	r0, [pc, #296]	; (80011cc <MX_GPIO_Init+0x27c>)
 80010a2:	f004 f9e1 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010a6:	f244 0301 	movw	r3, #16385	; 0x4001
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	483e      	ldr	r0, [pc, #248]	; (80011b8 <MX_GPIO_Init+0x268>)
 80010c0:	f004 f80a 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4837      	ldr	r0, [pc, #220]	; (80011bc <MX_GPIO_Init+0x26c>)
 80010de:	f003 fffb 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_NRF_CE_Pin|GPIO_NRF_CS_Pin;
 80010e2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <MX_GPIO_Init+0x270>)
 80010fc:	f003 ffec 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 8001100:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	482a      	ldr	r0, [pc, #168]	; (80011c4 <MX_GPIO_Init+0x274>)
 800111a:	f003 ffdd 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4824      	ldr	r0, [pc, #144]	; (80011c8 <MX_GPIO_Init+0x278>)
 8001138:	f003 ffce 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800113c:	2303      	movs	r3, #3
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_GPIO_Init+0x280>)
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x270>)
 8001150:	f003 ffc2 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SD_CS_Pin;
 8001154:	2310      	movs	r3, #16
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x270>)
 800116c:	f003 ffb4 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001170:	2302      	movs	r3, #2
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_GPIO_Init+0x27c>)
 8001188:	f003 ffa6 	bl	80050d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2006      	movs	r0, #6
 8001192:	f001 fbd4 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001196:	2006      	movs	r0, #6
 8001198:	f001 fbeb 	bl	8002972 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2007      	movs	r0, #7
 80011a2:	f001 fbcc 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f001 fbe3 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	; 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020400 	.word	0x58020400
 80011bc:	58021400 	.word	0x58021400
 80011c0:	58020c00 	.word	0x58020c00
 80011c4:	58021800 	.word	0x58021800
 80011c8:	58020000 	.word	0x58020000
 80011cc:	58021000 	.word	0x58021000
 80011d0:	11310000 	.word	0x11310000

080011d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C1_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_I2C1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <MX_I2C1_Init+0x7c>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C1_Init+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <MX_I2C1_Init+0x74>)
 8001210:	f005 ff00 	bl	8007014 <HAL_I2C_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800121a:	f000 fab4 	bl	8001786 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_I2C1_Init+0x74>)
 8001222:	f005 ffa1 	bl	8007168 <HAL_I2CEx_ConfigAnalogFilter>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800122c:	f000 faab 	bl	8001786 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_I2C1_Init+0x74>)
 8001234:	f005 ffe3 	bl	80071fe <HAL_I2CEx_ConfigDigitalFilter>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 faa2 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2400affc 	.word	0x2400affc
 800124c:	40005400 	.word	0x40005400
 8001250:	00301242 	.word	0x00301242

08001254 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b8      	sub	sp, #224	; 0xe0
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22bc      	movs	r2, #188	; 0xbc
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f01a f8d7 	bl	801b428 <memset>
  if(i2cHandle->Instance==I2C1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a29      	ldr	r2, [pc, #164]	; (8001324 <HAL_I2C_MspInit+0xd0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d14a      	bne.n	800131a <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001284:	2308      	movs	r3, #8
 8001286:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4618      	mov	r0, r3
 8001294:	f007 f806 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129e:	f000 fa72 	bl	8001786 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 80012c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012da:	2304      	movs	r3, #4
 80012dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e4:	4619      	mov	r1, r3
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_I2C_MspInit+0xd8>)
 80012e8:	f003 fef6 	bl	80050d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2104      	movs	r1, #4
 800130e:	201f      	movs	r0, #31
 8001310:	f001 fb15 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001314:	201f      	movs	r0, #31
 8001316:	f001 fb2c 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	37e0      	adds	r7, #224	; 0xe0
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40005400 	.word	0x40005400
 8001328:	58024400 	.word	0x58024400
 800132c:	58020400 	.word	0x58020400

08001330 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d101      	bne.n	800134a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <rpmsg_send+0x3c>)
 8001348:	e00c      	b.n	8001364 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f014 f8f9 	bl	8015554 <rpmsg_send_offchannel_raw>
 8001362:	4603      	mov	r3, r0
					 len, true);
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	fffff829 	.word	0xfffff829

08001370 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2220      	movs	r2, #32
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f01b f9ab 	bl	801c6e0 <strncpy>
	ept->addr = src;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 80013b2:	f000 f9c1 	bl	8001738 <MPU_Config>
	CPU_CACHE_Enable();
 80013b6:	f000 f951 	bl	800165c <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013ba:	e000      	b.n	80013be <main+0x12>
	{
		asm("nop");
 80013bc:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013be:	4b5b      	ldr	r3, [pc, #364]	; (800152c <main+0x180>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f8      	bne.n	80013bc <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f001 f907 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f8bd 	bl	800154c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <main+0x180>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a54      	ldr	r2, [pc, #336]	; (800152c <main+0x180>)
 80013da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b52      	ldr	r3, [pc, #328]	; (800152c <main+0x180>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f005 fdb5 	bl	8006f60 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f005 fdcb 	bl	8006f94 <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 80013fe:	4b4b      	ldr	r3, [pc, #300]	; (800152c <main+0x180>)
 8001400:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001404:	4a49      	ldr	r2, [pc, #292]	; (800152c <main+0x180>)
 8001406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800140a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <main+0x180>)
 8001410:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f7ff fd98 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f7ff fc54 	bl	8000ccc <MX_DMA_Init>
  MX_ETH_Init();
 8001424:	f7ff fc7a 	bl	8000d1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001428:	f000 ff16 	bl	8002258 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800142c:	f7ff fed2 	bl	80011d4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001430:	f000 fa5a 	bl	80018e8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001434:	f000 fdc8 	bl	8001fc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001438:	f000 fec2 	bl	80021c0 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800143c:	f019 fc68 	bl	801ad10 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8001440:	f000 f9a6 	bl	8001790 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001444:	f00c fab4 	bl	800d9b0 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001448:	f000 f9f8 	bl	800183c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	MAILBOX_Init();
 800144c:	f016 fc18 	bl	8017c80 <MAILBOX_Init>

	uint8_t initRes = initSDCard();
 8001450:	f015 fa88 	bl	8016964 <initSDCard>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]
	if (initRes == (uint8_t)FR_OK)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <main+0xb6>
	{
		createNewLogFile();
 800145e:	f015 facb 	bl	80169f8 <createNewLogFile>
	}
	sprintf(terminalBuffer,"Test terminal");
 8001462:	4933      	ldr	r1, [pc, #204]	; (8001530 <main+0x184>)
 8001464:	4833      	ldr	r0, [pc, #204]	; (8001534 <main+0x188>)
 8001466:	f01b f909 	bl	801c67c <siprintf>
	logData(terminalBuffer, false, false, false);
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	4830      	ldr	r0, [pc, #192]	; (8001534 <main+0x188>)
 8001472:	f015 fc0f 	bl	8016c94 <logData>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8001476:	2300      	movs	r3, #0
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	f04f 32ff 	mov.w	r2, #4294967295
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <main+0x18c>)
 8001488:	482c      	ldr	r0, [pc, #176]	; (800153c <main+0x190>)
 800148a:	f7ff ff71 	bl	8001370 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 800148e:	492c      	ldr	r1, [pc, #176]	; (8001540 <main+0x194>)
 8001490:	2000      	movs	r0, #0
 8001492:	f016 fd0f 	bl	8017eb4 <MX_OPENAMP_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <main+0xf4>
	{
		Error_Handler();
 800149c:	f000 f973 	bl	8001786 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <main+0x190>)
 80014a2:	f016 fdc7 	bl	8018034 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80014a6:	2204      	movs	r2, #4
 80014a8:	4926      	ldr	r1, [pc, #152]	; (8001544 <main+0x198>)
 80014aa:	4824      	ldr	r0, [pc, #144]	; (800153c <main+0x190>)
 80014ac:	f7ff ff40 	bl	8001330 <rpmsg_send>
 80014b0:	6138      	str	r0, [r7, #16]

	if (status < 0)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da01      	bge.n	80014bc <main+0x110>
	{
		Error_Handler();
 80014b8:	f000 f965 	bl	8001786 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
	while (message < 100)
 80014c0:	e011      	b.n	80014e6 <main+0x13a>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 80014c2:	f7ff fb07 	bl	8000ad4 <receive_message>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	73fb      	strb	r3, [r7, #15]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80014cc:	f107 030f 	add.w	r3, r7, #15
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <main+0x190>)
 80014d6:	f7ff ff2b 	bl	8001330 <rpmsg_send>
 80014da:	6138      	str	r0, [r7, #16]
		if (status < 0)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da01      	bge.n	80014e6 <main+0x13a>
		{
			Error_Handler();
 80014e2:	f000 f950 	bl	8001786 <Error_Handler>
	while (message < 100)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b63      	cmp	r3, #99	; 0x63
 80014ea:	d9ea      	bls.n	80014c2 <main+0x116>
	}



	//	isPortrait = true;
	screenInit();
 80014ec:	f015 fc72 	bl	8016dd4 <screenInit>
	screenClear();
 80014f0:	f015 fd4c 	bl	8016f8c <screenClear>
	renderCompleteFrame = true;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <main+0x19c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 80014fa:	f7ff faeb 	bl	8000ad4 <receive_message>
 80014fe:	4603      	mov	r3, r0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	73fb      	strb	r3, [r7, #15]
		screenUpdate(true);
 8001504:	2001      	movs	r0, #1
 8001506:	f015 ff61 	bl	80173cc <screenUpdate>
		displayNextFrame();
 800150a:	f016 fe37 	bl	801817c <displayNextFrame>
		message = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]

		monitorLogSize();
 8001512:	f015 fb93 	bl	8016c3c <monitorLogSize>
		sprintf(terminalBuffer,"Test terminal");
 8001516:	4906      	ldr	r1, [pc, #24]	; (8001530 <main+0x184>)
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <main+0x188>)
 800151a:	f01b f8af 	bl	801c67c <siprintf>
		logData(terminalBuffer, false, false, false);
 800151e:	2300      	movs	r3, #0
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <main+0x188>)
 8001526:	f015 fbb5 	bl	8016c94 <logData>
		message = receive_message();
 800152a:	e7e6      	b.n	80014fa <main+0x14e>
 800152c:	58024400 	.word	0x58024400
 8001530:	0801fff8 	.word	0x0801fff8
 8001534:	2400aa70 	.word	0x2400aa70
 8001538:	08020008 	.word	0x08020008
 800153c:	2400b058 	.word	0x2400b058
 8001540:	08000b29 	.word	0x08000b29
 8001544:	2400a3e4 	.word	0x2400a3e4
 8001548:	2400ae77 	.word	0x2400ae77

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b09c      	sub	sp, #112	; 0x70
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	224c      	movs	r2, #76	; 0x4c
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f019 ff64 	bl	801b428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2220      	movs	r2, #32
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f019 ff5e 	bl	801b428 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800156c:	2004      	movs	r0, #4
 800156e:	f005 fe93 	bl	8007298 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <SystemClock_Config+0x104>)
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	4a35      	ldr	r2, [pc, #212]	; (8001650 <SystemClock_Config+0x104>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <SystemClock_Config+0x104>)
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <SystemClock_Config+0x108>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001594:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <SystemClock_Config+0x108>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <SystemClock_Config+0x108>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015a8:	bf00      	nop
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <SystemClock_Config+0x108>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b6:	d1f8      	bne.n	80015aa <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <SystemClock_Config+0x10c>)
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f023 0303 	bic.w	r3, r3, #3
 80015c0:	4a25      	ldr	r2, [pc, #148]	; (8001658 <SystemClock_Config+0x10c>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	2302      	movs	r3, #2
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80015de:	2312      	movs	r3, #18
 80015e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015ee:	230c      	movs	r3, #12
 80015f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80015f2:	2302      	movs	r3, #2
 80015f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80015f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4618      	mov	r0, r3
 8001602:	f005 feb3 	bl	800736c <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800160c:	f000 f8bb 	bl	8001786 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	233f      	movs	r3, #63	; 0x3f
 8001612:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001614:	2303      	movs	r3, #3
 8001616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001624:	2340      	movs	r3, #64	; 0x40
 8001626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f006 faa8 	bl	8007b8c <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001642:	f000 f8a0 	bl	8001786 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3770      	adds	r7, #112	; 0x70
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58000400 	.word	0x58000400
 8001654:	58024800 	.word	0x58024800
 8001658:	58024400 	.word	0x58024400

0800165c <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11b      	bne.n	80016a6 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800166e:	f3bf 8f4f 	dsb	sy
}
 8001672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001674:	f3bf 8f6f 	isb	sy
}
 8001678:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 800167c:	2200      	movs	r2, #0
 800167e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001682:	f3bf 8f4f 	dsb	sy
}
 8001686:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001688:	f3bf 8f6f 	isb	sy
}
 800168c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800169a:	f3bf 8f4f 	dsb	sy
}
 800169e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a0:	f3bf 8f6f 	isb	sy
}
 80016a4:	e000      	b.n	80016a8 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016a6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d138      	bne.n	8001726 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80016bc:	f3bf 8f4f 	dsb	sy
}
 80016c0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 80016c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016c8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	0b5b      	lsrs	r3, r3, #13
 80016ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016d2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016dc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80016e6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016ec:	4911      	ldr	r1, [pc, #68]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e5      	bne.n	80016d4 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001708:	f3bf 8f4f 	dsb	sy
}
 800170c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <CPU_CACHE_Enable+0xd8>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800171a:	f3bf 8f4f 	dsb	sy
}
 800171e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001720:	f3bf 8f6f 	isb	sy
}
 8001724:	e000      	b.n	8001728 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001726:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 800173e:	f001 f933 	bl	80029a8 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001742:	2301      	movs	r3, #1
 8001744:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8001746:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800174a:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800174c:	230f      	movs	r3, #15
 800174e:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001750:	2303      	movs	r3, #3
 8001752:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800175c:	2301      	movs	r3, #1
 800175e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001760:	2300      	movs	r3, #0
 8001762:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001764:	2300      	movs	r3, #0
 8001766:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001770:	463b      	mov	r3, r7
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f950 	bl	8002a18 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001778:	2004      	movs	r0, #4
 800177a:	f001 f92d 	bl	80029d8 <HAL_MPU_Enable>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800178a:	b672      	cpsid	i
}
 800178c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800178e:	e7fe      	b.n	800178e <Error_Handler+0x8>

08001790 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <MX_SPI1_Init+0xa4>)
 8001796:	4a28      	ldr	r2, [pc, #160]	; (8001838 <MX_SPI1_Init+0xa8>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <MX_SPI1_Init+0xa4>)
 800179c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017aa:	2207      	movs	r2, #7
 80017ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017c4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80017c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <MX_SPI1_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_SPI1_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_SPI1_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_SPI1_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_SPI1_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_SPI1_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_SPI1_Init+0xa4>)
 8001822:	f008 f8a1 	bl	8009968 <HAL_SPI_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800182c:	f7ff ffab 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2400b1dc 	.word	0x2400b1dc
 8001838:	40013000 	.word	0x40013000

0800183c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <MX_SPI2_Init+0xa8>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001848:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800184c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001856:	2207      	movs	r2, #7
 8001858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_SPI2_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001868:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800186c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001870:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001874:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_SPI2_Init+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_SPI2_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_SPI2_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_SPI2_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_SPI2_Init+0xa4>)
 80018ce:	f008 f84b 	bl	8009968 <HAL_SPI_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80018d8:	f7ff ff55 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2400b0cc 	.word	0x2400b0cc
 80018e4:	40003800 	.word	0x40003800

080018e8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <MX_SPI3_Init+0xa8>)
 80018ee:	4a29      	ldr	r2, [pc, #164]	; (8001994 <MX_SPI3_Init+0xac>)
 80018f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <MX_SPI3_Init+0xa8>)
 80018f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <MX_SPI3_Init+0xa8>)
 80018fc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001900:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001904:	2207      	movs	r2, #7
 8001906:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_SPI3_Init+0xa8>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800191a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_SPI3_Init+0xa8>)
 800191e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001922:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_SPI3_Init+0xa8>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001938:	2200      	movs	r2, #0
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_SPI3_Init+0xa8>)
 800193e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001946:	2200      	movs	r2, #0
 8001948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_SPI3_Init+0xa8>)
 800194c:	2200      	movs	r2, #0
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001952:	2200      	movs	r2, #0
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001958:	2200      	movs	r2, #0
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_SPI3_Init+0xa8>)
 800195e:	2200      	movs	r2, #0
 8001960:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001964:	2200      	movs	r2, #0
 8001966:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_SPI3_Init+0xa8>)
 800196a:	2200      	movs	r2, #0
 800196c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001970:	2200      	movs	r2, #0
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_SPI3_Init+0xa8>)
 8001976:	2200      	movs	r2, #0
 8001978:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_SPI3_Init+0xa8>)
 800197c:	f007 fff4 	bl	8009968 <HAL_SPI_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001986:	f7ff fefe 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2400b154 	.word	0x2400b154
 8001994:	40003c00 	.word	0x40003c00

08001998 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0c0      	sub	sp, #256	; 0x100
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b4:	22bc      	movs	r2, #188	; 0xbc
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f019 fd35 	bl	801b428 <memset>
  if(spiHandle->Instance==SPI1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4aa9      	ldr	r2, [pc, #676]	; (8001c68 <HAL_SPI_MspInit+0x2d0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d16f      	bne.n	8001aa8 <HAL_SPI_MspInit+0x110>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d8:	4618      	mov	r0, r3
 80019da:	f006 fc63 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80019e4:	f7ff fecf 	bl	8001786 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e8:	4ba0      	ldr	r3, [pc, #640]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 80019ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ee:	4a9f      	ldr	r2, [pc, #636]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019f8:	4b9c      	ldr	r3, [pc, #624]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 80019fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b99      	ldr	r3, [pc, #612]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	4a97      	ldr	r2, [pc, #604]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a16:	4b95      	ldr	r3, [pc, #596]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a24:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	4a90      	ldr	r2, [pc, #576]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a34:	4b8d      	ldr	r3, [pc, #564]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_NRF_Pin|SPI1_MISO_NRF_Pin;
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a64:	4619      	mov	r1, r3
 8001a66:	4882      	ldr	r0, [pc, #520]	; (8001c70 <HAL_SPI_MspInit+0x2d8>)
 8001a68:	f003 fb36 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_NRF_Pin;
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a84:	2305      	movs	r3, #5
 8001a86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI1_MOSI_NRF_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4878      	ldr	r0, [pc, #480]	; (8001c74 <HAL_SPI_MspInit+0x2dc>)
 8001a92:	f003 fb21 	bl	80050d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2023      	movs	r0, #35	; 0x23
 8001a9c:	f000 ff4f 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001aa0:	2023      	movs	r0, #35	; 0x23
 8001aa2:	f000 ff66 	bl	8002972 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001aa6:	e0d9      	b.n	8001c5c <HAL_SPI_MspInit+0x2c4>
  else if(spiHandle->Instance==SPI2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <HAL_SPI_MspInit+0x2e0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d167      	bne.n	8001b82 <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 fbee 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001ace:	f7ff fe5a 	bl	8001786 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ad2:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad8:	4a64      	ldr	r2, [pc, #400]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ae2:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	623b      	str	r3, [r7, #32]
 8001aee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af0:	4b5e      	ldr	r3, [pc, #376]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a5d      	ldr	r2, [pc, #372]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b5a      	ldr	r3, [pc, #360]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b2c:	230c      	movs	r3, #12
 8001b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b44:	2305      	movs	r3, #5
 8001b46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b4e:	4619      	mov	r1, r3
 8001b50:	484a      	ldr	r0, [pc, #296]	; (8001c7c <HAL_SPI_MspInit+0x2e4>)
 8001b52:	f003 fac1 	bl	80050d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b56:	2308      	movs	r3, #8
 8001b58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b78:	4619      	mov	r1, r3
 8001b7a:	483e      	ldr	r0, [pc, #248]	; (8001c74 <HAL_SPI_MspInit+0x2dc>)
 8001b7c:	f003 faac 	bl	80050d8 <HAL_GPIO_Init>
}
 8001b80:	e06c      	b.n	8001c5c <HAL_SPI_MspInit+0x2c4>
  else if(spiHandle->Instance==SPI3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a3e      	ldr	r2, [pc, #248]	; (8001c80 <HAL_SPI_MspInit+0x2e8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d167      	bne.n	8001c5c <HAL_SPI_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fb81 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001ba8:	f7ff fded 	bl	8001786 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb2:	4a2e      	ldr	r2, [pc, #184]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_SPI_MspInit+0x2d4>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001c06:	2304      	movs	r3, #4
 8001c08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c1e:	2307      	movs	r3, #7
 8001c20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4816      	ldr	r0, [pc, #88]	; (8001c84 <HAL_SPI_MspInit+0x2ec>)
 8001c2c:	f003 fa54 	bl	80050d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 8001c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c54:	4619      	mov	r1, r3
 8001c56:	4809      	ldr	r0, [pc, #36]	; (8001c7c <HAL_SPI_MspInit+0x2e4>)
 8001c58:	f003 fa3e 	bl	80050d8 <HAL_GPIO_Init>
}
 8001c5c:	bf00      	nop
 8001c5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40013000 	.word	0x40013000
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	58020000 	.word	0x58020000
 8001c74:	58020c00 	.word	0x58020c00
 8001c78:	40003800 	.word	0x40003800
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	40003c00 	.word	0x40003c00
 8001c84:	58020400 	.word	0x58020400

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2104      	movs	r1, #4
 8001cb0:	2041      	movs	r0, #65	; 0x41
 8001cb2:	f000 fe44 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8001cb6:	2041      	movs	r0, #65	; 0x41
 8001cb8:	f000 fe5b 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	207d      	movs	r0, #125	; 0x7d
 8001cc2:	f000 fe3c 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001cc6:	207d      	movs	r0, #125	; 0x7d
 8001cc8:	f000 fe53 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2104      	movs	r1, #4
 8001cd0:	2094      	movs	r0, #148	; 0x94
 8001cd2:	f000 fe34 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8001cd6:	2094      	movs	r0, #148	; 0x94
 8001cd8:	f000 fe4b 	bl	8002972 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58024400 	.word	0x58024400

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 fcc4 	bl	80026c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f003 fbaa 	bl	800549a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f003 fba3 	bl	800549a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA1_Stream0_IRQHandler+0x10>)
 8001d5e:	f001 fc3f 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2400b3bc 	.word	0x2400b3bc

08001d6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA1_Stream1_IRQHandler+0x10>)
 8001d72:	f001 fc35 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2400b2b4 	.word	0x2400b2b4

08001d80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <I2C1_EV_IRQHandler+0x10>)
 8001d86:	f005 f9d5 	bl	8007134 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2400affc 	.word	0x2400affc

08001d94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <SPI1_IRQHandler+0x10>)
 8001d9a:	f008 fbc5 	bl	800a528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2400b1dc 	.word	0x2400b1dc

08001da8 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <OTG_FS_IRQHandler+0x10>)
 8001dbe:	f003 fdf1 	bl	80059a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	240145b4 	.word	0x240145b4

08001dcc <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001dd0:	f005 f906 	bl	8006fe0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d109      	bne.n	8001e0c <HAL_GPIO_EXTI_Callback+0x24>
	{
		A = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x48>)
 8001dfe:	f003 fb1b 	bl	8005438 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_GPIO_EXTI_Callback+0x3c>
	}
	else if (GPIO_Pin == GPIO_PIN_1)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d108      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		B = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x48>)
 8001e18:	f003 fb0e 	bl	8005438 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_GPIO_EXTI_Callback+0x50>)
 8001e22:	701a      	strb	r2, [r3, #0]
	}
	int a = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58020c00 	.word	0x58020c00
 8001e34:	2400b264 	.word	0x2400b264
 8001e38:	2400b265 	.word	0x2400b265

08001e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_kill>:

int _kill(int pid, int sig)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e56:	f019 fa73 	bl	801b340 <__errno>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2216      	movs	r2, #22
 8001e5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_exit>:

void _exit (int status)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffe7 	bl	8001e4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e7e:	e7fe      	b.n	8001e7e <_exit+0x12>

08001e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
	}

return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e009      	b.n	8001ee0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf1      	blt.n	8001ecc <_write+0x12>
	}
	return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_close>:

int _close(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_isatty>:

int _isatty(int file)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	return 1;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <_sbrk+0x5c>)
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <_sbrk+0x60>)
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <_sbrk+0x64>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <_sbrk+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d207      	bcs.n	8001f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f8c:	f019 f9d8 	bl	801b340 <__errno>
 8001f90:	4603      	mov	r3, r0
 8001f92:	220c      	movs	r2, #12
 8001f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e009      	b.n	8001fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <_sbrk+0x64>)
 8001fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	24040000 	.word	0x24040000
 8001fbc:	00000400 	.word	0x00000400
 8001fc0:	2400a3e8 	.word	0x2400a3e8
 8001fc4:	240148c8 	.word	0x240148c8

08001fc8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	; 0x58
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	222c      	movs	r2, #44	; 0x2c
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f019 fa17 	bl	801b428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffa:	4b40      	ldr	r3, [pc, #256]	; (80020fc <MX_TIM1_Init+0x134>)
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <MX_TIM1_Init+0x138>)
 8001ffe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <MX_TIM1_Init+0x134>)
 8002002:	224b      	movs	r2, #75	; 0x4b
 8002004:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <MX_TIM1_Init+0x134>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <MX_TIM1_Init+0x134>)
 800200e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002012:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <MX_TIM1_Init+0x134>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201a:	4b38      	ldr	r3, [pc, #224]	; (80020fc <MX_TIM1_Init+0x134>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <MX_TIM1_Init+0x134>)
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002026:	4835      	ldr	r0, [pc, #212]	; (80020fc <MX_TIM1_Init+0x134>)
 8002028:	f008 fd89 	bl	800ab3e <HAL_TIM_PWM_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002032:	f7ff fba8 	bl	8001786 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002046:	4619      	mov	r1, r3
 8002048:	482c      	ldr	r0, [pc, #176]	; (80020fc <MX_TIM1_Init+0x134>)
 800204a:	f009 fb75 	bl	800b738 <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002054:	f7ff fb97 	bl	8001786 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002058:	2360      	movs	r3, #96	; 0x60
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800205c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002066:	2300      	movs	r3, #0
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	481f      	ldr	r0, [pc, #124]	; (80020fc <MX_TIM1_Init+0x134>)
 8002080:	f008 febc 	bl	800adfc <HAL_TIM_PWM_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800208a:	f7ff fb7c 	bl	8001786 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002096:	2204      	movs	r2, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4818      	ldr	r0, [pc, #96]	; (80020fc <MX_TIM1_Init+0x134>)
 800209c:	f008 feae 	bl	800adfc <HAL_TIM_PWM_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80020a6:	f7ff fb6e 	bl	8001786 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <MX_TIM1_Init+0x134>)
 80020e0:	f009 fbb2 	bl	800b848 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80020ea:	f7ff fb4c 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <MX_TIM1_Init+0x134>)
 80020f0:	f000 f82a 	bl	8002148 <HAL_TIM_MspPostInit>

}
 80020f4:	bf00      	nop
 80020f6:	3758      	adds	r7, #88	; 0x58
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2400b268 	.word	0x2400b268
 8002100:	40010000 	.word	0x40010000

08002104 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <HAL_TIM_PWM_MspInit+0x3c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_TIM_PWM_MspInit+0x40>)
 8002118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_TIM_PWM_MspInit+0x40>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_TIM_PWM_MspInit+0x40>)
 8002128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40010000 	.word	0x40010000
 8002144:	58024400 	.word	0x58024400

08002148 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <HAL_TIM_MspPostInit+0x6c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d11f      	bne.n	80021aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_TIM_MspPostInit+0x70>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_TIM_MspPostInit+0x70>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_TIM_MspPostInit+0x70>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 8002188:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800218c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800219a:	2301      	movs	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_TIM_MspPostInit+0x74>)
 80021a6:	f002 ff97 	bl	80050d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58021000 	.word	0x58021000

080021c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <MX_USART1_UART_Init+0x94>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_USART1_UART_Init+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_USART1_UART_Init+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002208:	4811      	ldr	r0, [pc, #68]	; (8002250 <MX_USART1_UART_Init+0x90>)
 800220a:	f009 fb9b 	bl	800b944 <HAL_UART_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002214:	f7ff fab7 	bl	8001786 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002218:	2100      	movs	r1, #0
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <MX_USART1_UART_Init+0x90>)
 800221c:	f00a fb7e 	bl	800c91c <HAL_UARTEx_SetTxFifoThreshold>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002226:	f7ff faae 	bl	8001786 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800222a:	2100      	movs	r1, #0
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <MX_USART1_UART_Init+0x90>)
 800222e:	f00a fbb3 	bl	800c998 <HAL_UARTEx_SetRxFifoThreshold>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002238:	f7ff faa5 	bl	8001786 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800223c:	4804      	ldr	r0, [pc, #16]	; (8002250 <MX_USART1_UART_Init+0x90>)
 800223e:	f00a fb34 	bl	800c8aa <HAL_UARTEx_DisableFifoMode>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002248:	f7ff fa9d 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2400b434 	.word	0x2400b434
 8002254:	40011000 	.word	0x40011000

08002258 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 800225e:	4a23      	ldr	r2, [pc, #140]	; (80022ec <MX_USART3_UART_Init+0x94>)
 8002260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 8002264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 800229c:	2200      	movs	r2, #0
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022a0:	4811      	ldr	r0, [pc, #68]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 80022a2:	f009 fb4f 	bl	800b944 <HAL_UART_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022ac:	f7ff fa6b 	bl	8001786 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b0:	2100      	movs	r1, #0
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 80022b4:	f00a fb32 	bl	800c91c <HAL_UARTEx_SetTxFifoThreshold>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022be:	f7ff fa62 	bl	8001786 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c2:	2100      	movs	r1, #0
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 80022c6:	f00a fb67 	bl	800c998 <HAL_UARTEx_SetRxFifoThreshold>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80022d0:	f7ff fa59 	bl	8001786 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <MX_USART3_UART_Init+0x90>)
 80022d6:	f00a fae8 	bl	800c8aa <HAL_UARTEx_DisableFifoMode>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022e0:	f7ff fa51 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2400b32c 	.word	0x2400b32c
 80022ec:	40004800 	.word	0x40004800

080022f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0ba      	sub	sp, #232	; 0xe8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0318 	add.w	r3, r7, #24
 800230c:	22bc      	movs	r2, #188	; 0xbc
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f019 f889 	bl	801b428 <memset>
  if(uartHandle->Instance==USART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a83      	ldr	r2, [pc, #524]	; (8002528 <HAL_UART_MspInit+0x238>)
 800231c:	4293      	cmp	r3, r2
 800231e:	f040 8088 	bne.w	8002432 <HAL_UART_MspInit+0x142>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	4618      	mov	r0, r3
 8002332:	f005 ffb7 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800233c:	f7ff fa23 	bl	8001786 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002340:	4b7a      	ldr	r3, [pc, #488]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800237c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002396:	2304      	movs	r3, #4
 8002398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4863      	ldr	r0, [pc, #396]	; (8002530 <HAL_UART_MspInit+0x240>)
 80023a4:	f002 fe98 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a8:	2340      	movs	r3, #64	; 0x40
 80023aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c0:	2307      	movs	r3, #7
 80023c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4858      	ldr	r0, [pc, #352]	; (8002530 <HAL_UART_MspInit+0x240>)
 80023ce:	f002 fe83 	bl	80050d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80023d2:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_UART_MspInit+0x248>)
 80023d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023da:	2229      	movs	r2, #41	; 0x29
 80023dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023de:	4b55      	ldr	r3, [pc, #340]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ea:	4b52      	ldr	r3, [pc, #328]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f8:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <HAL_UART_MspInit+0x244>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023fe:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_UART_MspInit+0x244>)
 8002400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002404:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_UART_MspInit+0x244>)
 8002408:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800240c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_UART_MspInit+0x244>)
 8002410:	2200      	movs	r2, #0
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002414:	4847      	ldr	r0, [pc, #284]	; (8002534 <HAL_UART_MspInit+0x244>)
 8002416:	f000 fb43 	bl	8002aa0 <HAL_DMA_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8002420:	f7ff f9b1 	bl	8001786 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a43      	ldr	r2, [pc, #268]	; (8002534 <HAL_UART_MspInit+0x244>)
 8002428:	67da      	str	r2, [r3, #124]	; 0x7c
 800242a:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_UART_MspInit+0x244>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002430:	e075      	b.n	800251e <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a41      	ldr	r2, [pc, #260]	; (800253c <HAL_UART_MspInit+0x24c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d170      	bne.n	800251e <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	4618      	mov	r0, r3
 800244c:	f005 ff2a 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_UART_MspInit+0x16a>
      Error_Handler();
 8002456:	f7ff f996 	bl	8001786 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800245a:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_UART_MspInit+0x23c>)
 800245c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002460:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002466:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_UART_MspInit+0x23c>)
 800246c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_UART_MspInit+0x23c>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_UART_MspInit+0x23c>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_UART_MspInit+0x23c>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800249a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b0:	2307      	movs	r3, #7
 80024b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4820      	ldr	r0, [pc, #128]	; (8002540 <HAL_UART_MspInit+0x250>)
 80024be:	f002 fe0b 	bl	80050d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024c4:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_UART_MspInit+0x258>)
 80024c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024ca:	222d      	movs	r2, #45	; 0x2d
 80024cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_UART_MspInit+0x254>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002502:	4810      	ldr	r0, [pc, #64]	; (8002544 <HAL_UART_MspInit+0x254>)
 8002504:	f000 facc 	bl	8002aa0 <HAL_DMA_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_UART_MspInit+0x222>
      Error_Handler();
 800250e:	f7ff f93a 	bl	8001786 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_UART_MspInit+0x254>)
 8002516:	67da      	str	r2, [r3, #124]	; 0x7c
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_UART_MspInit+0x254>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800251e:	bf00      	nop
 8002520:	37e8      	adds	r7, #232	; 0xe8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40011000 	.word	0x40011000
 800252c:	58024400 	.word	0x58024400
 8002530:	58020400 	.word	0x58020400
 8002534:	2400b3bc 	.word	0x2400b3bc
 8002538:	40020010 	.word	0x40020010
 800253c:	40004800 	.word	0x40004800
 8002540:	58020c00 	.word	0x58020c00
 8002544:	2400b2b4 	.word	0x2400b2b4
 8002548:	40020028 	.word	0x40020028

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800254c:	f8df d05c 	ldr.w	sp, [pc, #92]	; 80025ac <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002550:	f7fe fb22 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002554:	4816      	ldr	r0, [pc, #88]	; (80025b0 <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 8002556:	4917      	ldr	r1, [pc, #92]	; (80025b4 <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 800256c:	4c14      	ldr	r4, [pc, #80]	; (80025c0 <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 800257a:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 800257c:	e003      	b.n	8002586 <LoopCopyDataInit_RAM_D2>

0800257e <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 8002580:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002582:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002584:	3104      	adds	r1, #4

08002586 <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 8002586:	4810      	ldr	r0, [pc, #64]	; (80025c8 <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 800258a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258c:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 800258e:	d3f6      	bcc.n	800257e <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 8002590:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 8002592:	e002      	b.n	800259a <LoopFillZerobss_RAM_D2>

08002594 <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 8002594:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002596:	f842 3b04 	str.w	r3, [r2], #4

0800259a <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 800259c:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 800259e:	d3f9      	bcc.n	8002594 <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 80025a0:	f018 fee6 	bl	801b370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a4:	f7fe ff02 	bl	80013ac <main>
  bx  lr
 80025a8:	4770      	bx	lr
 80025aa:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80025b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025b4:	2400a2fc 	.word	0x2400a2fc
  ldr r2, =_sidata
 80025b8:	08029848 	.word	0x08029848
  ldr r2, =_sbss
 80025bc:	2400a3bc 	.word	0x2400a3bc
  ldr r4, =_ebss
 80025c0:	240148c8 	.word	0x240148c8
  ldr  r3, =_siRAM_D2
 80025c4:	08033c04 	.word	0x08033c04
  ldr  r0, =_sRAM_D2
 80025c8:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 80025cc:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 80025d0:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 80025d4:	30000000 	.word	0x30000000

080025d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC3_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e2:	2003      	movs	r0, #3
 80025e4:	f000 f9a0 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025e8:	f005 fc86 	bl	8007ef8 <HAL_RCC_GetSysClockFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_Init+0x68>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	4913      	ldr	r1, [pc, #76]	; (8002648 <HAL_Init+0x6c>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_Init+0x68>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_Init+0x6c>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_Init+0x70>)
 800261e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <HAL_Init+0x74>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002626:	2000      	movs	r0, #0
 8002628:	f000 f814 	bl	8002654 <HAL_InitTick>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e002      	b.n	800263c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002636:	f7ff fb27 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400
 8002648:	080205f0 	.word	0x080205f0
 800264c:	24000004 	.word	0x24000004
 8002650:	24000000 	.word	0x24000000

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_InitTick+0x60>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e021      	b.n	80026ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_InitTick+0x64>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_InitTick+0x60>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	fbb3 f3f1 	udiv	r3, r3, r1
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f985 	bl	800298e <HAL_SYSTICK_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00e      	b.n	80026ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d80a      	bhi.n	80026aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f000 f94f 	bl	800293e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a0:	4a06      	ldr	r2, [pc, #24]	; (80026bc <HAL_InitTick+0x68>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	24000014 	.word	0x24000014
 80026b8:	24000000 	.word	0x24000000
 80026bc:	24000010 	.word	0x24000010

080026c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x20>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_IncTick+0x24>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	24000014 	.word	0x24000014
 80026e4:	2400b4c4 	.word	0x2400b4c4

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	2400b4c4 	.word	0x2400b4c4

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff ffee 	bl	80026e8 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002726:	bf00      	nop
 8002728:	f7ff ffde 	bl	80026e8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	24000014 	.word	0x24000014

08002748 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetREVID+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0c1b      	lsrs	r3, r3, #16
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	5c001000 	.word	0x5c001000

08002760 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002770:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	58000400 	.word	0x58000400

08002788 <__NVIC_SetPriorityGrouping>:
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	05fa0000 	.word	0x05fa0000

080027d0 <__NVIC_GetPriorityGrouping>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f7ff ff8e 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff29 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff40 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff90 	bl	800287c <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5f 	bl	8002828 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff33 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa4 	bl	80028e4 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029ac:	f3bf 8f5f 	dmb	sy
}
 80029b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_MPU_Disable+0x28>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <HAL_MPU_Disable+0x28>)
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029bc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_MPU_Disable+0x2c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00
 80029d4:	e000ed90 	.word	0xe000ed90

080029d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029e0:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <HAL_MPU_Enable+0x38>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_MPU_Enable+0x3c>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_MPU_Enable+0x3c>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029f6:	f3bf 8f4f 	dsb	sy
}
 80029fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029fc:	f3bf 8f6f 	isb	sy
}
 8002a00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed90 	.word	0xe000ed90
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	785a      	ldrb	r2, [r3, #1]
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_MPU_ConfigRegion+0x84>)
 8002a26:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d029      	beq.n	8002a84 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002a30:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <HAL_MPU_ConfigRegion+0x84>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7b1b      	ldrb	r3, [r3, #12]
 8002a3c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7adb      	ldrb	r3, [r3, #11]
 8002a42:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7a9b      	ldrb	r3, [r3, #10]
 8002a4a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7b5b      	ldrb	r3, [r3, #13]
 8002a52:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7b9b      	ldrb	r3, [r3, #14]
 8002a5a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7bdb      	ldrb	r3, [r3, #15]
 8002a62:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7a5b      	ldrb	r3, [r3, #9]
 8002a6a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7a1b      	ldrb	r3, [r3, #8]
 8002a72:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a74:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a7c:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a7e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a80:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a82:	e005      	b.n	8002a90 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_MPU_ConfigRegion+0x84>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_MPU_ConfigRegion+0x84>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed90 	.word	0xe000ed90

08002aa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fe1e 	bl	80026e8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e316      	b.n	80030e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <HAL_DMA_Init+0x1b8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a65      	ldr	r2, [pc, #404]	; (8002c5c <HAL_DMA_Init+0x1bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a63      	ldr	r2, [pc, #396]	; (8002c60 <HAL_DMA_Init+0x1c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a62      	ldr	r2, [pc, #392]	; (8002c64 <HAL_DMA_Init+0x1c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a60      	ldr	r2, [pc, #384]	; (8002c68 <HAL_DMA_Init+0x1c8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a5f      	ldr	r2, [pc, #380]	; (8002c6c <HAL_DMA_Init+0x1cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_DMA_Init+0x1d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_DMA_Init+0x1d4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_DMA_Init+0x1d8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <HAL_DMA_Init+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a57      	ldr	r2, [pc, #348]	; (8002c80 <HAL_DMA_Init+0x1e0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <HAL_DMA_Init+0x1e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a54      	ldr	r2, [pc, #336]	; (8002c88 <HAL_DMA_Init+0x1e8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a53      	ldr	r2, [pc, #332]	; (8002c8c <HAL_DMA_Init+0x1ec>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a51      	ldr	r2, [pc, #324]	; (8002c90 <HAL_DMA_Init+0x1f0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_Init+0xb8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a50      	ldr	r2, [pc, #320]	; (8002c94 <HAL_DMA_Init+0x1f4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_DMA_Init+0xbc>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_Init+0xbe>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 813b 	beq.w	8002dda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a37      	ldr	r2, [pc, #220]	; (8002c58 <HAL_DMA_Init+0x1b8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d04a      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <HAL_DMA_Init+0x1bc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d045      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_DMA_Init+0x1c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d040      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a33      	ldr	r2, [pc, #204]	; (8002c64 <HAL_DMA_Init+0x1c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d03b      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_DMA_Init+0x1c8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d036      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <HAL_DMA_Init+0x1cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d031      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <HAL_DMA_Init+0x1d0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02c      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_DMA_Init+0x1d4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d027      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_DMA_Init+0x1d8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <HAL_DMA_Init+0x1dc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01d      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_DMA_Init+0x1e0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <HAL_DMA_Init+0x1e4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_DMA_Init+0x1e8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <HAL_DMA_Init+0x1ec>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_DMA_Init+0x1f0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_DMA_Init+0x174>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_DMA_Init+0x1f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d108      	bne.n	8002c26 <HAL_DMA_Init+0x186>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e007      	b.n	8002c36 <HAL_DMA_Init+0x196>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c36:	e02f      	b.n	8002c98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c38:	f7ff fd56 	bl	80026e8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d928      	bls.n	8002c98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e246      	b.n	80030e6 <HAL_DMA_Init+0x646>
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1c8      	bne.n	8002c38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4b83      	ldr	r3, [pc, #524]	; (8002ec0 <HAL_DMA_Init+0x420>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d107      	bne.n	8002cfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002cfc:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <HAL_DMA_Init+0x424>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_DMA_Init+0x428>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d08:	d328      	bcc.n	8002d5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b28      	cmp	r3, #40	; 0x28
 8002d10:	d903      	bls.n	8002d1a <HAL_DMA_Init+0x27a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b2e      	cmp	r3, #46	; 0x2e
 8002d18:	d917      	bls.n	8002d4a <HAL_DMA_Init+0x2aa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d20:	d903      	bls.n	8002d2a <HAL_DMA_Init+0x28a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b42      	cmp	r3, #66	; 0x42
 8002d28:	d90f      	bls.n	8002d4a <HAL_DMA_Init+0x2aa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b46      	cmp	r3, #70	; 0x46
 8002d30:	d903      	bls.n	8002d3a <HAL_DMA_Init+0x29a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b48      	cmp	r3, #72	; 0x48
 8002d38:	d907      	bls.n	8002d4a <HAL_DMA_Init+0x2aa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b4e      	cmp	r3, #78	; 0x4e
 8002d40:	d905      	bls.n	8002d4e <HAL_DMA_Init+0x2ae>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b52      	cmp	r3, #82	; 0x52
 8002d48:	d801      	bhi.n	8002d4e <HAL_DMA_Init+0x2ae>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_DMA_Init+0x2b0>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d117      	bne.n	8002db6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f001 fbfd 	bl	8004598 <DMA_CheckFifoParam>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e197      	b.n	80030e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f001 fb38 	bl	8004434 <DMA_CalcBaseAndBitshift>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	e0cd      	b.n	8002f76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <HAL_DMA_Init+0x42c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a39      	ldr	r2, [pc, #228]	; (8002ed0 <HAL_DMA_Init+0x430>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01d      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <HAL_DMA_Init+0x434>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a36      	ldr	r2, [pc, #216]	; (8002ed8 <HAL_DMA_Init+0x438>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a35      	ldr	r2, [pc, #212]	; (8002edc <HAL_DMA_Init+0x43c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <HAL_DMA_Init+0x440>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a32      	ldr	r2, [pc, #200]	; (8002ee4 <HAL_DMA_Init+0x444>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_Init+0x38a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a30      	ldr	r2, [pc, #192]	; (8002ee8 <HAL_DMA_Init+0x448>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_DMA_Init+0x38e>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_DMA_Init+0x390>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8097 	beq.w	8002f64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_DMA_Init+0x42c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d021      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <HAL_DMA_Init+0x430>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01c      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_DMA_Init+0x434>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d017      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <HAL_DMA_Init+0x438>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d012      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_DMA_Init+0x43c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_DMA_Init+0x440>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d008      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_DMA_Init+0x444>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <HAL_DMA_Init+0x3e4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <HAL_DMA_Init+0x448>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_DMA_Init+0x44c>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d020      	beq.n	8002ef0 <HAL_DMA_Init+0x450>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d102      	bne.n	8002ebc <HAL_DMA_Init+0x41c>
 8002eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eba:	e01a      	b.n	8002ef2 <HAL_DMA_Init+0x452>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e018      	b.n	8002ef2 <HAL_DMA_Init+0x452>
 8002ec0:	fe10803f 	.word	0xfe10803f
 8002ec4:	5c001000 	.word	0x5c001000
 8002ec8:	ffff0000 	.word	0xffff0000
 8002ecc:	58025408 	.word	0x58025408
 8002ed0:	5802541c 	.word	0x5802541c
 8002ed4:	58025430 	.word	0x58025430
 8002ed8:	58025444 	.word	0x58025444
 8002edc:	58025458 	.word	0x58025458
 8002ee0:	5802546c 	.word	0x5802546c
 8002ee4:	58025480 	.word	0x58025480
 8002ee8:	58025494 	.word	0x58025494
 8002eec:	fffe000f 	.word	0xfffe000f
 8002ef0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68d2      	ldr	r2, [r2, #12]
 8002ef6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b6e      	ldr	r3, [pc, #440]	; (80030f0 <HAL_DMA_Init+0x650>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_DMA_Init+0x654>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	009a      	lsls	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 fa73 	bl	8004434 <DMA_CalcBaseAndBitshift>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	e008      	b.n	8002f76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0b7      	b.n	80030e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <HAL_DMA_Init+0x658>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d072      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5d      	ldr	r2, [pc, #372]	; (80030fc <HAL_DMA_Init+0x65c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d06d      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <HAL_DMA_Init+0x660>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d068      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5a      	ldr	r2, [pc, #360]	; (8003104 <HAL_DMA_Init+0x664>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d063      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a59      	ldr	r2, [pc, #356]	; (8003108 <HAL_DMA_Init+0x668>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d05e      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_DMA_Init+0x66c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d059      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a56      	ldr	r2, [pc, #344]	; (8003110 <HAL_DMA_Init+0x670>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d054      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a54      	ldr	r2, [pc, #336]	; (8003114 <HAL_DMA_Init+0x674>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d04f      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a53      	ldr	r2, [pc, #332]	; (8003118 <HAL_DMA_Init+0x678>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d04a      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a51      	ldr	r2, [pc, #324]	; (800311c <HAL_DMA_Init+0x67c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d045      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a50      	ldr	r2, [pc, #320]	; (8003120 <HAL_DMA_Init+0x680>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d040      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a4e      	ldr	r2, [pc, #312]	; (8003124 <HAL_DMA_Init+0x684>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d03b      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4d      	ldr	r2, [pc, #308]	; (8003128 <HAL_DMA_Init+0x688>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d036      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_DMA_Init+0x68c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d031      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <HAL_DMA_Init+0x690>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d02c      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_DMA_Init+0x694>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d027      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a47      	ldr	r2, [pc, #284]	; (8003138 <HAL_DMA_Init+0x698>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a45      	ldr	r2, [pc, #276]	; (800313c <HAL_DMA_Init+0x69c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a44      	ldr	r2, [pc, #272]	; (8003140 <HAL_DMA_Init+0x6a0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a42      	ldr	r2, [pc, #264]	; (8003144 <HAL_DMA_Init+0x6a4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a41      	ldr	r2, [pc, #260]	; (8003148 <HAL_DMA_Init+0x6a8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_DMA_Init+0x6ac>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3e      	ldr	r2, [pc, #248]	; (8003150 <HAL_DMA_Init+0x6b0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_Init+0x5c6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3c      	ldr	r2, [pc, #240]	; (8003154 <HAL_DMA_Init+0x6b4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_DMA_Init+0x5ca>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_DMA_Init+0x5cc>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d032      	beq.n	80030d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f001 fb0d 	bl	8004690 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d102      	bne.n	8003084 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003098:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_DMA_Init+0x624>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d80c      	bhi.n	80030c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f001 fb8a 	bl	80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	e008      	b.n	80030d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	a7fdabf8 	.word	0xa7fdabf8
 80030f4:	cccccccd 	.word	0xcccccccd
 80030f8:	40020010 	.word	0x40020010
 80030fc:	40020028 	.word	0x40020028
 8003100:	40020040 	.word	0x40020040
 8003104:	40020058 	.word	0x40020058
 8003108:	40020070 	.word	0x40020070
 800310c:	40020088 	.word	0x40020088
 8003110:	400200a0 	.word	0x400200a0
 8003114:	400200b8 	.word	0x400200b8
 8003118:	40020410 	.word	0x40020410
 800311c:	40020428 	.word	0x40020428
 8003120:	40020440 	.word	0x40020440
 8003124:	40020458 	.word	0x40020458
 8003128:	40020470 	.word	0x40020470
 800312c:	40020488 	.word	0x40020488
 8003130:	400204a0 	.word	0x400204a0
 8003134:	400204b8 	.word	0x400204b8
 8003138:	58025408 	.word	0x58025408
 800313c:	5802541c 	.word	0x5802541c
 8003140:	58025430 	.word	0x58025430
 8003144:	58025444 	.word	0x58025444
 8003148:	58025458 	.word	0x58025458
 800314c:	5802546c 	.word	0x5802546c
 8003150:	58025480 	.word	0x58025480
 8003154:	58025494 	.word	0x58025494

08003158 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e205      	b.n	8003576 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d004      	beq.n	8003180 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e1fa      	b.n	8003576 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a8c      	ldr	r2, [pc, #560]	; (80033b8 <HAL_DMA_Abort_IT+0x260>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04a      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a8b      	ldr	r2, [pc, #556]	; (80033bc <HAL_DMA_Abort_IT+0x264>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d045      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a89      	ldr	r2, [pc, #548]	; (80033c0 <HAL_DMA_Abort_IT+0x268>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d040      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a88      	ldr	r2, [pc, #544]	; (80033c4 <HAL_DMA_Abort_IT+0x26c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d03b      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a86      	ldr	r2, [pc, #536]	; (80033c8 <HAL_DMA_Abort_IT+0x270>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d036      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a85      	ldr	r2, [pc, #532]	; (80033cc <HAL_DMA_Abort_IT+0x274>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d031      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a83      	ldr	r2, [pc, #524]	; (80033d0 <HAL_DMA_Abort_IT+0x278>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d02c      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a82      	ldr	r2, [pc, #520]	; (80033d4 <HAL_DMA_Abort_IT+0x27c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d027      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <HAL_DMA_Abort_IT+0x280>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d022      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7f      	ldr	r2, [pc, #508]	; (80033dc <HAL_DMA_Abort_IT+0x284>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d01d      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7d      	ldr	r2, [pc, #500]	; (80033e0 <HAL_DMA_Abort_IT+0x288>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d018      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7c      	ldr	r2, [pc, #496]	; (80033e4 <HAL_DMA_Abort_IT+0x28c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_DMA_Abort_IT+0x290>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00e      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_DMA_Abort_IT+0x294>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_DMA_Abort_IT+0x298>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_DMA_Abort_IT+0xc8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a76      	ldr	r2, [pc, #472]	; (80033f4 <HAL_DMA_Abort_IT+0x29c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_DMA_Abort_IT+0xcc>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_DMA_Abort_IT+0xce>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d065      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2204      	movs	r2, #4
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a60      	ldr	r2, [pc, #384]	; (80033b8 <HAL_DMA_Abort_IT+0x260>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5e      	ldr	r2, [pc, #376]	; (80033bc <HAL_DMA_Abort_IT+0x264>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <HAL_DMA_Abort_IT+0x268>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_DMA_Abort_IT+0x26c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5a      	ldr	r2, [pc, #360]	; (80033c8 <HAL_DMA_Abort_IT+0x270>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_DMA_Abort_IT+0x274>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a57      	ldr	r2, [pc, #348]	; (80033d0 <HAL_DMA_Abort_IT+0x278>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a55      	ldr	r2, [pc, #340]	; (80033d4 <HAL_DMA_Abort_IT+0x27c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_DMA_Abort_IT+0x280>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_DMA_Abort_IT+0x284>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a51      	ldr	r2, [pc, #324]	; (80033e0 <HAL_DMA_Abort_IT+0x288>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <HAL_DMA_Abort_IT+0x28c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4e      	ldr	r2, [pc, #312]	; (80033e8 <HAL_DMA_Abort_IT+0x290>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4c      	ldr	r2, [pc, #304]	; (80033ec <HAL_DMA_Abort_IT+0x294>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_DMA_Abort_IT+0x298>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x17a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a49      	ldr	r2, [pc, #292]	; (80033f4 <HAL_DMA_Abort_IT+0x29c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <HAL_DMA_Abort_IT+0x18c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e147      	b.n	8003574 <HAL_DMA_Abort_IT+0x41c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e13e      	b.n	8003574 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 020e 	bic.w	r2, r2, #14
 8003304:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <HAL_DMA_Abort_IT+0x260>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <HAL_DMA_Abort_IT+0x264>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <HAL_DMA_Abort_IT+0x268>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_DMA_Abort_IT+0x26c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <HAL_DMA_Abort_IT+0x270>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <HAL_DMA_Abort_IT+0x274>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <HAL_DMA_Abort_IT+0x278>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_DMA_Abort_IT+0x27c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_DMA_Abort_IT+0x280>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_DMA_Abort_IT+0x284>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_DMA_Abort_IT+0x288>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_DMA_Abort_IT+0x28c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_DMA_Abort_IT+0x290>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_DMA_Abort_IT+0x294>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_DMA_Abort_IT+0x298>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x24e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_DMA_Abort_IT+0x29c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d128      	bne.n	80033f8 <HAL_DMA_Abort_IT+0x2a0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e027      	b.n	8003408 <HAL_DMA_Abort_IT+0x2b0>
 80033b8:	40020010 	.word	0x40020010
 80033bc:	40020028 	.word	0x40020028
 80033c0:	40020040 	.word	0x40020040
 80033c4:	40020058 	.word	0x40020058
 80033c8:	40020070 	.word	0x40020070
 80033cc:	40020088 	.word	0x40020088
 80033d0:	400200a0 	.word	0x400200a0
 80033d4:	400200b8 	.word	0x400200b8
 80033d8:	40020410 	.word	0x40020410
 80033dc:	40020428 	.word	0x40020428
 80033e0:	40020440 	.word	0x40020440
 80033e4:	40020458 	.word	0x40020458
 80033e8:	40020470 	.word	0x40020470
 80033ec:	40020488 	.word	0x40020488
 80033f0:	400204a0 	.word	0x400204a0
 80033f4:	400204b8 	.word	0x400204b8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_DMA_Abort_IT+0x428>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d072      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <HAL_DMA_Abort_IT+0x42c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d06d      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_DMA_Abort_IT+0x430>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d068      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_DMA_Abort_IT+0x434>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d063      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_DMA_Abort_IT+0x438>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d05e      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a55      	ldr	r2, [pc, #340]	; (8003594 <HAL_DMA_Abort_IT+0x43c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d059      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a53      	ldr	r2, [pc, #332]	; (8003598 <HAL_DMA_Abort_IT+0x440>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d054      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_DMA_Abort_IT+0x444>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04f      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <HAL_DMA_Abort_IT+0x448>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a4f      	ldr	r2, [pc, #316]	; (80035a4 <HAL_DMA_Abort_IT+0x44c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d045      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a4d      	ldr	r2, [pc, #308]	; (80035a8 <HAL_DMA_Abort_IT+0x450>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4c      	ldr	r2, [pc, #304]	; (80035ac <HAL_DMA_Abort_IT+0x454>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d03b      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_DMA_Abort_IT+0x458>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d036      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a49      	ldr	r2, [pc, #292]	; (80035b4 <HAL_DMA_Abort_IT+0x45c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a47      	ldr	r2, [pc, #284]	; (80035b8 <HAL_DMA_Abort_IT+0x460>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a46      	ldr	r2, [pc, #280]	; (80035bc <HAL_DMA_Abort_IT+0x464>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d027      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a44      	ldr	r2, [pc, #272]	; (80035c0 <HAL_DMA_Abort_IT+0x468>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a43      	ldr	r2, [pc, #268]	; (80035c4 <HAL_DMA_Abort_IT+0x46c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a41      	ldr	r2, [pc, #260]	; (80035c8 <HAL_DMA_Abort_IT+0x470>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a40      	ldr	r2, [pc, #256]	; (80035cc <HAL_DMA_Abort_IT+0x474>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3e      	ldr	r2, [pc, #248]	; (80035d0 <HAL_DMA_Abort_IT+0x478>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3d      	ldr	r2, [pc, #244]	; (80035d4 <HAL_DMA_Abort_IT+0x47c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <HAL_DMA_Abort_IT+0x480>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x3a0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_DMA_Abort_IT+0x484>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Abort_IT+0x3a4>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_DMA_Abort_IT+0x3a6>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d028      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2201      	movs	r2, #1
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003530:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003548:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003552:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8
 80035c0:	58025408 	.word	0x58025408
 80035c4:	5802541c 	.word	0x5802541c
 80035c8:	58025430 	.word	0x58025430
 80035cc:	58025444 	.word	0x58025444
 80035d0:	58025458 	.word	0x58025458
 80035d4:	5802546c 	.word	0x5802546c
 80035d8:	58025480 	.word	0x58025480
 80035dc:	58025494 	.word	0x58025494

080035e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ec:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_DMA_IRQHandler+0x1ac>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a67      	ldr	r2, [pc, #412]	; (8003790 <HAL_DMA_IRQHandler+0x1b0>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5f      	ldr	r2, [pc, #380]	; (8003794 <HAL_DMA_IRQHandler+0x1b4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_DMA_IRQHandler+0x1b8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5c      	ldr	r2, [pc, #368]	; (800379c <HAL_DMA_IRQHandler+0x1bc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a59      	ldr	r2, [pc, #356]	; (80037a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_DMA_IRQHandler+0x1c8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a56      	ldr	r2, [pc, #344]	; (80037ac <HAL_DMA_IRQHandler+0x1cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <HAL_DMA_IRQHandler+0x1d0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a53      	ldr	r2, [pc, #332]	; (80037b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a51      	ldr	r2, [pc, #324]	; (80037b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a50      	ldr	r2, [pc, #320]	; (80037bc <HAL_DMA_IRQHandler+0x1dc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a4e      	ldr	r2, [pc, #312]	; (80037c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4d      	ldr	r2, [pc, #308]	; (80037c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a4b      	ldr	r2, [pc, #300]	; (80037c8 <HAL_DMA_IRQHandler+0x1e8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a4a      	ldr	r2, [pc, #296]	; (80037cc <HAL_DMA_IRQHandler+0x1ec>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xd2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a48      	ldr	r2, [pc, #288]	; (80037d0 <HAL_DMA_IRQHandler+0x1f0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_IRQHandler+0xd6>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 842b 	beq.w	8003f14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2208      	movs	r2, #8
 80036c8:	409a      	lsls	r2, r3
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80a2 	beq.w	8003818 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <HAL_DMA_IRQHandler+0x1b4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04a      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_DMA_IRQHandler+0x1b8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d045      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	; (800379c <HAL_DMA_IRQHandler+0x1bc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d040      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <HAL_DMA_IRQHandler+0x1c0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d036      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <HAL_DMA_IRQHandler+0x1c8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d031      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a25      	ldr	r2, [pc, #148]	; (80037ac <HAL_DMA_IRQHandler+0x1cc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d027      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <HAL_DMA_IRQHandler+0x1d4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_DMA_IRQHandler+0x1dc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_DMA_IRQHandler+0x1e8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_DMA_IRQHandler+0x1ec>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_IRQHandler+0x194>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d12f      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x1f4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e02e      	b.n	80037e8 <HAL_DMA_IRQHandler+0x208>
 800378a:	bf00      	nop
 800378c:	24000000 	.word	0x24000000
 8003790:	1b4e81b5 	.word	0x1b4e81b5
 8003794:	40020010 	.word	0x40020010
 8003798:	40020028 	.word	0x40020028
 800379c:	40020040 	.word	0x40020040
 80037a0:	40020058 	.word	0x40020058
 80037a4:	40020070 	.word	0x40020070
 80037a8:	40020088 	.word	0x40020088
 80037ac:	400200a0 	.word	0x400200a0
 80037b0:	400200b8 	.word	0x400200b8
 80037b4:	40020410 	.word	0x40020410
 80037b8:	40020428 	.word	0x40020428
 80037bc:	40020440 	.word	0x40020440
 80037c0:	40020458 	.word	0x40020458
 80037c4:	40020470 	.word	0x40020470
 80037c8:	40020488 	.word	0x40020488
 80037cc:	400204a0 	.word	0x400204a0
 80037d0:	400204b8 	.word	0x400204b8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2208      	movs	r2, #8
 8003806:	409a      	lsls	r2, r3
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d06e      	beq.n	800390c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04a      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a67      	ldr	r2, [pc, #412]	; (80039dc <HAL_DMA_IRQHandler+0x3fc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d045      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a66      	ldr	r2, [pc, #408]	; (80039e0 <HAL_DMA_IRQHandler+0x400>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d040      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a64      	ldr	r2, [pc, #400]	; (80039e4 <HAL_DMA_IRQHandler+0x404>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03b      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_DMA_IRQHandler+0x408>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d036      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a61      	ldr	r2, [pc, #388]	; (80039ec <HAL_DMA_IRQHandler+0x40c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <HAL_DMA_IRQHandler+0x410>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02c      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5e      	ldr	r2, [pc, #376]	; (80039f4 <HAL_DMA_IRQHandler+0x414>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d027      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_DMA_IRQHandler+0x418>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_DMA_IRQHandler+0x41c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5a      	ldr	r2, [pc, #360]	; (8003a00 <HAL_DMA_IRQHandler+0x420>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a58      	ldr	r2, [pc, #352]	; (8003a04 <HAL_DMA_IRQHandler+0x424>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <HAL_DMA_IRQHandler+0x428>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a55      	ldr	r2, [pc, #340]	; (8003a0c <HAL_DMA_IRQHandler+0x42c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_DMA_IRQHandler+0x430>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2ee>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_DMA_IRQHandler+0x434>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10a      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x304>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e003      	b.n	80038ec <HAL_DMA_IRQHandler+0x30c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2201      	movs	r2, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	f043 0202 	orr.w	r2, r3, #2
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 808f 	beq.w	8003a40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04a      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <HAL_DMA_IRQHandler+0x3fc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d045      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <HAL_DMA_IRQHandler+0x400>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d040      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_DMA_IRQHandler+0x404>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d03b      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_DMA_IRQHandler+0x408>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d036      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <HAL_DMA_IRQHandler+0x40c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d031      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <HAL_DMA_IRQHandler+0x410>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02c      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_DMA_IRQHandler+0x414>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d027      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <HAL_DMA_IRQHandler+0x418>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_DMA_IRQHandler+0x41c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <HAL_DMA_IRQHandler+0x420>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d018      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_DMA_IRQHandler+0x424>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_DMA_IRQHandler+0x428>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_DMA_IRQHandler+0x42c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <HAL_DMA_IRQHandler+0x430>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x3e2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <HAL_DMA_IRQHandler+0x434>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d12a      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x438>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e023      	b.n	8003a20 <HAL_DMA_IRQHandler+0x440>
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2210      	movs	r2, #16
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a6 	beq.w	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a85      	ldr	r2, [pc, #532]	; (8003c70 <HAL_DMA_IRQHandler+0x690>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04a      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a83      	ldr	r2, [pc, #524]	; (8003c74 <HAL_DMA_IRQHandler+0x694>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a82      	ldr	r2, [pc, #520]	; (8003c78 <HAL_DMA_IRQHandler+0x698>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d040      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a80      	ldr	r2, [pc, #512]	; (8003c7c <HAL_DMA_IRQHandler+0x69c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7f      	ldr	r2, [pc, #508]	; (8003c80 <HAL_DMA_IRQHandler+0x6a0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d036      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a7d      	ldr	r2, [pc, #500]	; (8003c84 <HAL_DMA_IRQHandler+0x6a4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a7c      	ldr	r2, [pc, #496]	; (8003c88 <HAL_DMA_IRQHandler+0x6a8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d02c      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a7a      	ldr	r2, [pc, #488]	; (8003c8c <HAL_DMA_IRQHandler+0x6ac>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a79      	ldr	r2, [pc, #484]	; (8003c90 <HAL_DMA_IRQHandler+0x6b0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a77      	ldr	r2, [pc, #476]	; (8003c94 <HAL_DMA_IRQHandler+0x6b4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a76      	ldr	r2, [pc, #472]	; (8003c98 <HAL_DMA_IRQHandler+0x6b8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a74      	ldr	r2, [pc, #464]	; (8003c9c <HAL_DMA_IRQHandler+0x6bc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a73      	ldr	r2, [pc, #460]	; (8003ca0 <HAL_DMA_IRQHandler+0x6c0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a71      	ldr	r2, [pc, #452]	; (8003ca4 <HAL_DMA_IRQHandler+0x6c4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a70      	ldr	r2, [pc, #448]	; (8003ca8 <HAL_DMA_IRQHandler+0x6c8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x516>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_DMA_IRQHandler+0x6cc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10a      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x52c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e009      	b.n	8003b20 <HAL_DMA_IRQHandler+0x540>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d03e      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d108      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d024      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
 8003b60:	e01f      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01b      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
 8003b72:	e016      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2220      	movs	r2, #32
 8003bac:	409a      	lsls	r2, r3
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8110 	beq.w	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2c      	ldr	r2, [pc, #176]	; (8003c70 <HAL_DMA_IRQHandler+0x690>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <HAL_DMA_IRQHandler+0x694>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d045      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <HAL_DMA_IRQHandler+0x698>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d040      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <HAL_DMA_IRQHandler+0x69c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <HAL_DMA_IRQHandler+0x6a0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d036      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <HAL_DMA_IRQHandler+0x6a4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_DMA_IRQHandler+0x6a8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02c      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_DMA_IRQHandler+0x6ac>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d027      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_DMA_IRQHandler+0x6b0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_DMA_IRQHandler+0x6b4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01d      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_DMA_IRQHandler+0x6b8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_DMA_IRQHandler+0x6bc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_DMA_IRQHandler+0x6c0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_DMA_IRQHandler+0x6c4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_DMA_IRQHandler+0x6c8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x678>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_DMA_IRQHandler+0x6cc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d12b      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x6d0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e02a      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x6e4>
 8003c6e:	bf00      	nop
 8003c70:	40020010 	.word	0x40020010
 8003c74:	40020028 	.word	0x40020028
 8003c78:	40020040 	.word	0x40020040
 8003c7c:	40020058 	.word	0x40020058
 8003c80:	40020070 	.word	0x40020070
 8003c84:	40020088 	.word	0x40020088
 8003c88:	400200a0 	.word	0x400200a0
 8003c8c:	400200b8 	.word	0x400200b8
 8003c90:	40020410 	.word	0x40020410
 8003c94:	40020428 	.word	0x40020428
 8003c98:	40020440 	.word	0x40020440
 8003c9c:	40020458 	.word	0x40020458
 8003ca0:	40020470 	.word	0x40020470
 8003ca4:	40020488 	.word	0x40020488
 8003ca8:	400204a0 	.word	0x400204a0
 8003cac:	400204b8 	.word	0x400204b8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8087 	beq.w	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d139      	bne.n	8003d5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0216 	bic.w	r2, r2, #22
 8003cf4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x736>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	223f      	movs	r2, #63	; 0x3f
 8003d30:	409a      	lsls	r2, r3
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 834a 	beq.w	80043e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
          }
          return;
 8003d58:	e344      	b.n	80043e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d02c      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
 8003d86:	e027      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d023      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
 8003d98:	e01e      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0210 	bic.w	r2, r2, #16
 8003db6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8306 	beq.w	80043ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8088 	beq.w	8003f00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2204      	movs	r2, #4
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7a      	ldr	r2, [pc, #488]	; (8003fe8 <HAL_DMA_IRQHandler+0xa08>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04a      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a79      	ldr	r2, [pc, #484]	; (8003fec <HAL_DMA_IRQHandler+0xa0c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d045      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a77      	ldr	r2, [pc, #476]	; (8003ff0 <HAL_DMA_IRQHandler+0xa10>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d040      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a76      	ldr	r2, [pc, #472]	; (8003ff4 <HAL_DMA_IRQHandler+0xa14>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d03b      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a74      	ldr	r2, [pc, #464]	; (8003ff8 <HAL_DMA_IRQHandler+0xa18>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d036      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a73      	ldr	r2, [pc, #460]	; (8003ffc <HAL_DMA_IRQHandler+0xa1c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d031      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a71      	ldr	r2, [pc, #452]	; (8004000 <HAL_DMA_IRQHandler+0xa20>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02c      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_DMA_IRQHandler+0xa24>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d027      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6e      	ldr	r2, [pc, #440]	; (8004008 <HAL_DMA_IRQHandler+0xa28>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6d      	ldr	r2, [pc, #436]	; (800400c <HAL_DMA_IRQHandler+0xa2c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01d      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6b      	ldr	r2, [pc, #428]	; (8004010 <HAL_DMA_IRQHandler+0xa30>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6a      	ldr	r2, [pc, #424]	; (8004014 <HAL_DMA_IRQHandler+0xa34>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a68      	ldr	r2, [pc, #416]	; (8004018 <HAL_DMA_IRQHandler+0xa38>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a67      	ldr	r2, [pc, #412]	; (800401c <HAL_DMA_IRQHandler+0xa3c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a65      	ldr	r2, [pc, #404]	; (8004020 <HAL_DMA_IRQHandler+0xa40>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x8b8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a64      	ldr	r2, [pc, #400]	; (8004024 <HAL_DMA_IRQHandler+0xa44>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x8ca>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e007      	b.n	8003eba <HAL_DMA_IRQHandler+0x8da>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d307      	bcc.n	8003ed6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f2      	bne.n	8003eba <HAL_DMA_IRQHandler+0x8da>
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ed6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ef6:	e003      	b.n	8003f00 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8272 	beq.w	80043ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
 8003f12:	e26c      	b.n	80043ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a43      	ldr	r2, [pc, #268]	; (8004028 <HAL_DMA_IRQHandler+0xa48>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d022      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a42      	ldr	r2, [pc, #264]	; (800402c <HAL_DMA_IRQHandler+0xa4c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01d      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a40      	ldr	r2, [pc, #256]	; (8004030 <HAL_DMA_IRQHandler+0xa50>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d018      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a3f      	ldr	r2, [pc, #252]	; (8004034 <HAL_DMA_IRQHandler+0xa54>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3d      	ldr	r2, [pc, #244]	; (8004038 <HAL_DMA_IRQHandler+0xa58>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	; (800403c <HAL_DMA_IRQHandler+0xa5c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <HAL_DMA_IRQHandler+0xa60>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x984>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a39      	ldr	r2, [pc, #228]	; (8004044 <HAL_DMA_IRQHandler+0xa64>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d101      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x988>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x98a>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 823f 	beq.w	80043ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2204      	movs	r2, #4
 8003f82:	409a      	lsls	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80cd 	beq.w	8004128 <HAL_DMA_IRQHandler+0xb48>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80c7 	beq.w	8004128 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d049      	beq.n	8004048 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8210 	beq.w	80043e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd0:	e20a      	b.n	80043e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8206 	beq.w	80043e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fe4:	e200      	b.n	80043e8 <HAL_DMA_IRQHandler+0xe08>
 8003fe6:	bf00      	nop
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8
 8004028:	58025408 	.word	0x58025408
 800402c:	5802541c 	.word	0x5802541c
 8004030:	58025430 	.word	0x58025430
 8004034:	58025444 	.word	0x58025444
 8004038:	58025458 	.word	0x58025458
 800403c:	5802546c 	.word	0x5802546c
 8004040:	58025480 	.word	0x58025480
 8004044:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d160      	bne.n	8004114 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a8c      	ldr	r2, [pc, #560]	; (8004288 <HAL_DMA_IRQHandler+0xca8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04a      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a8a      	ldr	r2, [pc, #552]	; (800428c <HAL_DMA_IRQHandler+0xcac>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d045      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a89      	ldr	r2, [pc, #548]	; (8004290 <HAL_DMA_IRQHandler+0xcb0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d040      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a87      	ldr	r2, [pc, #540]	; (8004294 <HAL_DMA_IRQHandler+0xcb4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d03b      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a86      	ldr	r2, [pc, #536]	; (8004298 <HAL_DMA_IRQHandler+0xcb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d036      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a84      	ldr	r2, [pc, #528]	; (800429c <HAL_DMA_IRQHandler+0xcbc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d031      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <HAL_DMA_IRQHandler+0xcc0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d02c      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a81      	ldr	r2, [pc, #516]	; (80042a4 <HAL_DMA_IRQHandler+0xcc4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a80      	ldr	r2, [pc, #512]	; (80042a8 <HAL_DMA_IRQHandler+0xcc8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7e      	ldr	r2, [pc, #504]	; (80042ac <HAL_DMA_IRQHandler+0xccc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7d      	ldr	r2, [pc, #500]	; (80042b0 <HAL_DMA_IRQHandler+0xcd0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a7b      	ldr	r2, [pc, #492]	; (80042b4 <HAL_DMA_IRQHandler+0xcd4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_DMA_IRQHandler+0xcd8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a78      	ldr	r2, [pc, #480]	; (80042bc <HAL_DMA_IRQHandler+0xcdc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a77      	ldr	r2, [pc, #476]	; (80042c0 <HAL_DMA_IRQHandler+0xce0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xb12>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a75      	ldr	r2, [pc, #468]	; (80042c4 <HAL_DMA_IRQHandler+0xce4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d108      	bne.n	8004104 <HAL_DMA_IRQHandler+0xb24>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0208 	bic.w	r2, r2, #8
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e007      	b.n	8004114 <HAL_DMA_IRQHandler+0xb34>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0204 	bic.w	r2, r2, #4
 8004112:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8165 	beq.w	80043e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004126:	e15f      	b.n	80043e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	2202      	movs	r2, #2
 8004132:	409a      	lsls	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80c5 	beq.w	80042c8 <HAL_DMA_IRQHandler+0xce8>
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80bf 	beq.w	80042c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2202      	movs	r2, #2
 8004154:	409a      	lsls	r2, r3
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d018      	beq.n	8004196 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 813a 	beq.w	80043ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004180:	e134      	b.n	80043ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8130 	beq.w	80043ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004194:	e12a      	b.n	80043ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d168      	bne.n	8004272 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a38      	ldr	r2, [pc, #224]	; (8004288 <HAL_DMA_IRQHandler+0xca8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04a      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a37      	ldr	r2, [pc, #220]	; (800428c <HAL_DMA_IRQHandler+0xcac>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d045      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a35      	ldr	r2, [pc, #212]	; (8004290 <HAL_DMA_IRQHandler+0xcb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d040      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <HAL_DMA_IRQHandler+0xcb4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d03b      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a32      	ldr	r2, [pc, #200]	; (8004298 <HAL_DMA_IRQHandler+0xcb8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d036      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a31      	ldr	r2, [pc, #196]	; (800429c <HAL_DMA_IRQHandler+0xcbc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d031      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2f      	ldr	r2, [pc, #188]	; (80042a0 <HAL_DMA_IRQHandler+0xcc0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d02c      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2e      	ldr	r2, [pc, #184]	; (80042a4 <HAL_DMA_IRQHandler+0xcc4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d027      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2c      	ldr	r2, [pc, #176]	; (80042a8 <HAL_DMA_IRQHandler+0xcc8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2b      	ldr	r2, [pc, #172]	; (80042ac <HAL_DMA_IRQHandler+0xccc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01d      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <HAL_DMA_IRQHandler+0xcd0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <HAL_DMA_IRQHandler+0xcd4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <HAL_DMA_IRQHandler+0xcd8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a25      	ldr	r2, [pc, #148]	; (80042bc <HAL_DMA_IRQHandler+0xcdc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <HAL_DMA_IRQHandler+0xce0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_DMA_IRQHandler+0xc60>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <HAL_DMA_IRQHandler+0xce4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d108      	bne.n	8004252 <HAL_DMA_IRQHandler+0xc72>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0214 	bic.w	r2, r2, #20
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e007      	b.n	8004262 <HAL_DMA_IRQHandler+0xc82>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 020a 	bic.w	r2, r2, #10
 8004260:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80b8 	beq.w	80043ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004284:	e0b2      	b.n	80043ec <HAL_DMA_IRQHandler+0xe0c>
 8004286:	bf00      	nop
 8004288:	40020010 	.word	0x40020010
 800428c:	40020028 	.word	0x40020028
 8004290:	40020040 	.word	0x40020040
 8004294:	40020058 	.word	0x40020058
 8004298:	40020070 	.word	0x40020070
 800429c:	40020088 	.word	0x40020088
 80042a0:	400200a0 	.word	0x400200a0
 80042a4:	400200b8 	.word	0x400200b8
 80042a8:	40020410 	.word	0x40020410
 80042ac:	40020428 	.word	0x40020428
 80042b0:	40020440 	.word	0x40020440
 80042b4:	40020458 	.word	0x40020458
 80042b8:	40020470 	.word	0x40020470
 80042bc:	40020488 	.word	0x40020488
 80042c0:	400204a0 	.word	0x400204a0
 80042c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2208      	movs	r2, #8
 80042d2:	409a      	lsls	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8088 	beq.w	80043ee <HAL_DMA_IRQHandler+0xe0e>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8082 	beq.w	80043ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a41      	ldr	r2, [pc, #260]	; (80043f4 <HAL_DMA_IRQHandler+0xe14>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04a      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <HAL_DMA_IRQHandler+0xe18>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d045      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3e      	ldr	r2, [pc, #248]	; (80043fc <HAL_DMA_IRQHandler+0xe1c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3c      	ldr	r2, [pc, #240]	; (8004400 <HAL_DMA_IRQHandler+0xe20>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d03b      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <HAL_DMA_IRQHandler+0xe24>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d036      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a39      	ldr	r2, [pc, #228]	; (8004408 <HAL_DMA_IRQHandler+0xe28>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d031      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a38      	ldr	r2, [pc, #224]	; (800440c <HAL_DMA_IRQHandler+0xe2c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d02c      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a36      	ldr	r2, [pc, #216]	; (8004410 <HAL_DMA_IRQHandler+0xe30>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d027      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a35      	ldr	r2, [pc, #212]	; (8004414 <HAL_DMA_IRQHandler+0xe34>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a33      	ldr	r2, [pc, #204]	; (8004418 <HAL_DMA_IRQHandler+0xe38>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_DMA_IRQHandler+0xe3c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a30      	ldr	r2, [pc, #192]	; (8004420 <HAL_DMA_IRQHandler+0xe40>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_DMA_IRQHandler+0xe44>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <HAL_DMA_IRQHandler+0xe48>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2c      	ldr	r2, [pc, #176]	; (800442c <HAL_DMA_IRQHandler+0xe4c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_DMA_IRQHandler+0xdaa>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2a      	ldr	r2, [pc, #168]	; (8004430 <HAL_DMA_IRQHandler+0xe50>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d108      	bne.n	800439c <HAL_DMA_IRQHandler+0xdbc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 021c 	bic.w	r2, r2, #28
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e007      	b.n	80043ac <HAL_DMA_IRQHandler+0xdcc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 020e 	bic.w	r2, r2, #14
 80043aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
 80043e2:	e004      	b.n	80043ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80043e4:	bf00      	nop
 80043e6:	e002      	b.n	80043ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043ee:	3728      	adds	r7, #40	; 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40020010 	.word	0x40020010
 80043f8:	40020028 	.word	0x40020028
 80043fc:	40020040 	.word	0x40020040
 8004400:	40020058 	.word	0x40020058
 8004404:	40020070 	.word	0x40020070
 8004408:	40020088 	.word	0x40020088
 800440c:	400200a0 	.word	0x400200a0
 8004410:	400200b8 	.word	0x400200b8
 8004414:	40020410 	.word	0x40020410
 8004418:	40020428 	.word	0x40020428
 800441c:	40020440 	.word	0x40020440
 8004420:	40020458 	.word	0x40020458
 8004424:	40020470 	.word	0x40020470
 8004428:	40020488 	.word	0x40020488
 800442c:	400204a0 	.word	0x400204a0
 8004430:	400204b8 	.word	0x400204b8

08004434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a42      	ldr	r2, [pc, #264]	; (800454c <DMA_CalcBaseAndBitshift+0x118>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d04a      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a41      	ldr	r2, [pc, #260]	; (8004550 <DMA_CalcBaseAndBitshift+0x11c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d045      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3f      	ldr	r2, [pc, #252]	; (8004554 <DMA_CalcBaseAndBitshift+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d040      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3e      	ldr	r2, [pc, #248]	; (8004558 <DMA_CalcBaseAndBitshift+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d03b      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3c      	ldr	r2, [pc, #240]	; (800455c <DMA_CalcBaseAndBitshift+0x128>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d036      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <DMA_CalcBaseAndBitshift+0x12c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d031      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a39      	ldr	r2, [pc, #228]	; (8004564 <DMA_CalcBaseAndBitshift+0x130>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02c      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a38      	ldr	r2, [pc, #224]	; (8004568 <DMA_CalcBaseAndBitshift+0x134>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d027      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a36      	ldr	r2, [pc, #216]	; (800456c <DMA_CalcBaseAndBitshift+0x138>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a35      	ldr	r2, [pc, #212]	; (8004570 <DMA_CalcBaseAndBitshift+0x13c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <DMA_CalcBaseAndBitshift+0x140>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a32      	ldr	r2, [pc, #200]	; (8004578 <DMA_CalcBaseAndBitshift+0x144>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	; (800457c <DMA_CalcBaseAndBitshift+0x148>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <DMA_CalcBaseAndBitshift+0x14c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <DMA_CalcBaseAndBitshift+0x150>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <DMA_CalcBaseAndBitshift+0x154>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <DMA_CalcBaseAndBitshift+0xac>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <DMA_CalcBaseAndBitshift+0xae>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d024      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3b10      	subs	r3, #16
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <DMA_CalcBaseAndBitshift+0x158>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <DMA_CalcBaseAndBitshift+0x15c>)
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d908      	bls.n	8004520 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <DMA_CalcBaseAndBitshift+0x160>)
 8004516:	4013      	ands	r3, r2
 8004518:	1d1a      	adds	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	659a      	str	r2, [r3, #88]	; 0x58
 800451e:	e00d      	b.n	800453c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <DMA_CalcBaseAndBitshift+0x160>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
 800452e:	e005      	b.n	800453c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40020010 	.word	0x40020010
 8004550:	40020028 	.word	0x40020028
 8004554:	40020040 	.word	0x40020040
 8004558:	40020058 	.word	0x40020058
 800455c:	40020070 	.word	0x40020070
 8004560:	40020088 	.word	0x40020088
 8004564:	400200a0 	.word	0x400200a0
 8004568:	400200b8 	.word	0x400200b8
 800456c:	40020410 	.word	0x40020410
 8004570:	40020428 	.word	0x40020428
 8004574:	40020440 	.word	0x40020440
 8004578:	40020458 	.word	0x40020458
 800457c:	40020470 	.word	0x40020470
 8004580:	40020488 	.word	0x40020488
 8004584:	400204a0 	.word	0x400204a0
 8004588:	400204b8 	.word	0x400204b8
 800458c:	aaaaaaab 	.word	0xaaaaaaab
 8004590:	08020600 	.word	0x08020600
 8004594:	fffffc00 	.word	0xfffffc00

08004598 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d120      	bne.n	80045ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d858      	bhi.n	8004666 <DMA_CheckFifoParam+0xce>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x24>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	08004667 	.word	0x08004667
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d048      	beq.n	800466a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045dc:	e045      	b.n	800466a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e6:	d142      	bne.n	800466e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045ec:	e03f      	b.n	800466e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d123      	bne.n	8004640 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d838      	bhi.n	8004672 <DMA_CheckFifoParam+0xda>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <DMA_CheckFifoParam+0x70>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004619 	.word	0x08004619
 800460c:	0800461f 	.word	0x0800461f
 8004610:	08004619 	.word	0x08004619
 8004614:	08004631 	.word	0x08004631
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
        break;
 800461c:	e030      	b.n	8004680 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d025      	beq.n	8004676 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462e:	e022      	b.n	8004676 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463e:	e01c      	b.n	800467a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d902      	bls.n	800464e <DMA_CheckFifoParam+0xb6>
 8004648:	2b03      	cmp	r3, #3
 800464a:	d003      	beq.n	8004654 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800464c:	e018      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
        break;
 8004652:	e015      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
    break;
 8004664:	e00b      	b.n	800467e <DMA_CheckFifoParam+0xe6>
        break;
 8004666:	bf00      	nop
 8004668:	e00a      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e008      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e006      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
    break;
 800467e:	bf00      	nop
    }
  }

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a38      	ldr	r2, [pc, #224]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a36      	ldr	r2, [pc, #216]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01d      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a35      	ldr	r2, [pc, #212]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a32      	ldr	r2, [pc, #200]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a30      	ldr	r2, [pc, #192]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01a      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	3b08      	subs	r3, #8
 8004700:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a24      	ldr	r2, [pc, #144]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800471c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800472c:	e024      	b.n	8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3b10      	subs	r3, #16
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d806      	bhi.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d902      	bls.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3308      	adds	r3, #8
 8004754:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4b18      	ldr	r3, [pc, #96]	; (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004768:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2201      	movs	r2, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	58025408 	.word	0x58025408
 8004788:	5802541c 	.word	0x5802541c
 800478c:	58025430 	.word	0x58025430
 8004790:	58025444 	.word	0x58025444
 8004794:	58025458 	.word	0x58025458
 8004798:	5802546c 	.word	0x5802546c
 800479c:	58025480 	.word	0x58025480
 80047a0:	58025494 	.word	0x58025494
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	16009600 	.word	0x16009600
 80047ac:	58025880 	.word	0x58025880
 80047b0:	aaaaaaab 	.word	0xaaaaaaab
 80047b4:	400204b8 	.word	0x400204b8
 80047b8:	4002040f 	.word	0x4002040f
 80047bc:	10008200 	.word	0x10008200
 80047c0:	40020880 	.word	0x40020880

080047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d04a      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d847      	bhi.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a24      	ldr	r2, [pc, #144]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01d      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a21      	ldr	r2, [pc, #132]	; (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004834:	2300      	movs	r3, #0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800484c:	671a      	str	r2, [r3, #112]	; 0x70
 800484e:	e009      	b.n	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004862:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494
 800489c:	1600963f 	.word	0x1600963f
 80048a0:	58025940 	.word	0x58025940
 80048a4:	1000823f 	.word	0x1000823f
 80048a8:	40020940 	.word	0x40020940

080048ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e0c6      	b.n	8004a4c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fa74 	bl	8000db4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2223      	movs	r2, #35	; 0x23
 80048d0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d2:	4b60      	ldr	r3, [pc, #384]	; (8004a54 <HAL_ETH_Init+0x1a8>)
 80048d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048d8:	4a5e      	ldr	r2, [pc, #376]	; (8004a54 <HAL_ETH_Init+0x1a8>)
 80048da:	f043 0302 	orr.w	r3, r3, #2
 80048de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048e2:	4b5c      	ldr	r3, [pc, #368]	; (8004a54 <HAL_ETH_Init+0x1a8>)
 80048e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7a1b      	ldrb	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7fd ff31 	bl	8002760 <HAL_SYSCFG_ETHInterfaceSelect>
 80048fe:	e003      	b.n	8004908 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004900:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004904:	f7fd ff2c 	bl	8002760 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004920:	f7fd fee2 	bl	80026e8 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004926:	e00f      	b.n	8004948 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004928:	f7fd fede 	bl	80026e8 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004936:	d907      	bls.n	8004948 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2204      	movs	r2, #4
 800493c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	22e0      	movs	r2, #224	; 0xe0
 8004942:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e081      	b.n	8004a4c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e6      	bne.n	8004928 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fac0 	bl	8004ee0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004960:	f003 fc44 	bl	80081ec <HAL_RCC_GetHCLKFreq>
 8004964:	4603      	mov	r3, r0
 8004966:	4a3c      	ldr	r2, [pc, #240]	; (8004a58 <HAL_ETH_Init+0x1ac>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9a      	lsrs	r2, r3, #18
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3a01      	subs	r2, #1
 8004974:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa13 	bl	8004da4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004994:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004998:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	22e0      	movs	r2, #224	; 0xe0
 80049b0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e04a      	b.n	8004a4c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	f241 1308 	movw	r3, #4360	; 0x1108
 80049be:	4413      	add	r3, r2
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <HAL_ETH_Init+0x1b0>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6952      	ldr	r2, [r2, #20]
 80049ca:	0052      	lsls	r2, r2, #1
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	6809      	ldr	r1, [r1, #0]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	f241 1308 	movw	r3, #4360	; 0x1108
 80049d6:	440b      	add	r3, r1
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fad8 	bl	8004f90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fb1c 	bl	800501e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	3305      	adds	r3, #5
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	3303      	adds	r3, #3
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	061a      	lsls	r2, r3, #24
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	3302      	adds	r3, #2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a24:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004a32:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004a34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2210      	movs	r2, #16
 8004a42:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2210      	movs	r2, #16
 8004a48:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	58024400 	.word	0x58024400
 8004a58:	431bde83 	.word	0x431bde83
 8004a5c:	ffff8001 	.word	0xffff8001

08004a60 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004a72:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	791b      	ldrb	r3, [r3, #4]
 8004a78:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004a7a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	7b1b      	ldrb	r3, [r3, #12]
 8004a80:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a82:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	7b5b      	ldrb	r3, [r3, #13]
 8004a88:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a8a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	7b9b      	ldrb	r3, [r3, #14]
 8004a90:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7bdb      	ldrb	r3, [r3, #15]
 8004a98:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a9a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	7c12      	ldrb	r2, [r2, #16]
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	d102      	bne.n	8004aaa <ETH_SetMACConfig+0x4a>
 8004aa4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004aa8:	e000      	b.n	8004aac <ETH_SetMACConfig+0x4c>
 8004aaa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004aac:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	7c52      	ldrb	r2, [r2, #17]
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	d102      	bne.n	8004abc <ETH_SetMACConfig+0x5c>
 8004ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aba:	e000      	b.n	8004abe <ETH_SetMACConfig+0x5e>
 8004abc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004abe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	7c9b      	ldrb	r3, [r3, #18]
 8004ac4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004ac6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004acc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004ad2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	7f1b      	ldrb	r3, [r3, #28]
 8004ad8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004ada:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	7f5b      	ldrb	r3, [r3, #29]
 8004ae0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004ae2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	7f92      	ldrb	r2, [r2, #30]
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	d102      	bne.n	8004af2 <ETH_SetMACConfig+0x92>
 8004aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004af0:	e000      	b.n	8004af4 <ETH_SetMACConfig+0x94>
 8004af2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004af4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	7fdb      	ldrb	r3, [r3, #31]
 8004afa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004afc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d102      	bne.n	8004b0e <ETH_SetMACConfig+0xae>
 8004b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b0c:	e000      	b.n	8004b10 <ETH_SetMACConfig+0xb0>
 8004b0e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004b10:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004b16:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004b20:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <ETH_SetMACConfig+0x22c>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b4c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b54:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004b56:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b5e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004b60:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004b68:	2a00      	cmp	r2, #0
 8004b6a:	d102      	bne.n	8004b72 <ETH_SetMACConfig+0x112>
 8004b6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b70:	e000      	b.n	8004b74 <ETH_SetMACConfig+0x114>
 8004b72:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b74:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <ETH_SetMACConfig+0x230>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b98:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	; (8004c94 <ETH_SetMACConfig+0x234>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004bbc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004bc2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	d101      	bne.n	8004bd2 <ETH_SetMACConfig+0x172>
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	e000      	b.n	8004bd4 <ETH_SetMACConfig+0x174>
 8004bd2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004bd4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004be6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004bea:	4013      	ands	r3, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004bfc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004c04:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f023 0103 	bic.w	r1, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004c2a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	d101      	bne.n	8004c4e <ETH_SetMACConfig+0x1ee>
 8004c4a:	2240      	movs	r2, #64	; 0x40
 8004c4c:	e000      	b.n	8004c50 <ETH_SetMACConfig+0x1f0>
 8004c4e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004c50:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004c58:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c5a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004c62:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c70:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	00048083 	.word	0x00048083
 8004c90:	c0f88000 	.word	0xc0f88000
 8004c94:	fffffef0 	.word	0xfffffef0

08004c98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <ETH_SetDMAConfig+0xf8>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	6809      	ldr	r1, [r1, #0]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004cbe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004cca:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	7b1b      	ldrb	r3, [r3, #12]
 8004cd0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	f241 0304 	movw	r3, #4100	; 0x1004
 8004cde:	4413      	add	r3, r2
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <ETH_SetDMAConfig+0xfc>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6811      	ldr	r1, [r2, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	f241 0304 	movw	r3, #4100	; 0x1004
 8004cf2:	440b      	add	r3, r1
 8004cf4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	7b5b      	ldrb	r3, [r3, #13]
 8004cfa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <ETH_SetDMAConfig+0x100>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6811      	ldr	r1, [r2, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004d1e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	7d1b      	ldrb	r3, [r3, #20]
 8004d28:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004d2a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	7f5b      	ldrb	r3, [r3, #29]
 8004d30:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d3e:	4413      	add	r3, r2
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <ETH_SetDMAConfig+0x104>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d52:	440b      	add	r3, r1
 8004d54:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	7f1b      	ldrb	r3, [r3, #28]
 8004d5a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d6c:	4413      	add	r3, r2
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <ETH_SetDMAConfig+0x108>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6811      	ldr	r1, [r2, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d80:	440b      	add	r3, r1
 8004d82:	601a      	str	r2, [r3, #0]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	ffff87fd 	.word	0xffff87fd
 8004d94:	ffff2ffe 	.word	0xffff2ffe
 8004d98:	fffec000 	.word	0xfffec000
 8004d9c:	ffc0efef 	.word	0xffc0efef
 8004da0:	7fc0ffff 	.word	0x7fc0ffff

08004da4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b0a4      	sub	sp, #144	; 0x90
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004db2:	2300      	movs	r3, #0
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004de4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004dfc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004e00:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004e26:	2300      	movs	r3, #0
 8004e28:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e4e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004e60:	2302      	movs	r3, #2
 8004e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fde6 	bl	8004a60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e94:	2301      	movs	r3, #1
 8004e96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004eae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004eb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ebc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004ec4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fee1 	bl	8004c98 <ETH_SetDMAConfig>
}
 8004ed6:	bf00      	nop
 8004ed8:	3790      	adds	r7, #144	; 0x90
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004efa:	f003 f977 	bl	80081ec <HAL_RCC_GetHCLKFreq>
 8004efe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d908      	bls.n	8004f1a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d804      	bhi.n	8004f1a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e027      	b.n	8004f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d908      	bls.n	8004f34 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d204      	bcs.n	8004f34 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e01a      	b.n	8004f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d303      	bcc.n	8004f44 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d911      	bls.n	8004f68 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4a10      	ldr	r2, [pc, #64]	; (8004f88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d908      	bls.n	8004f5e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d804      	bhi.n	8004f5e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e005      	b.n	8004f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e000      	b.n	8004f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f68:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	01312cff 	.word	0x01312cff
 8004f80:	02160ebf 	.word	0x02160ebf
 8004f84:	03938700 	.word	0x03938700
 8004f88:	05f5e0ff 	.word	0x05f5e0ff
 8004f8c:	08f0d17f 	.word	0x08f0d17f

08004f90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e01d      	b.n	8004fda <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68d9      	ldr	r1, [r3, #12]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	440b      	add	r3, r1
 8004fae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	3206      	adds	r2, #6
 8004fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d9de      	bls.n	8004f9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	f241 132c 	movw	r3, #4396	; 0x112c
 8004fee:	4413      	add	r3, r2
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68d9      	ldr	r1, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	f241 1314 	movw	r3, #4372	; 0x1114
 8005000:	4413      	add	r3, r2
 8005002:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e024      	b.n	8005076 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6919      	ldr	r1, [r3, #16]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3310      	adds	r3, #16
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d9d7      	bls.n	800502c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	f241 1330 	movw	r3, #4400	; 0x1130
 80050a2:	4413      	add	r3, r2
 80050a4:	2203      	movs	r2, #3
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6919      	ldr	r1, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	f241 131c 	movw	r3, #4380	; 0x111c
 80050b4:	4413      	add	r3, r2
 80050b6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	f241 1328 	movw	r3, #4392	; 0x1128
 80050c8:	4413      	add	r3, r2
 80050ca:	6019      	str	r1, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050e6:	4b89      	ldr	r3, [pc, #548]	; (800530c <HAL_GPIO_Init+0x234>)
 80050e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ea:	e194      	b.n	8005416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	2101      	movs	r1, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8186 	beq.w	8005410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d00b      	beq.n	8005124 <HAL_GPIO_Init+0x4c>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d007      	beq.n	8005124 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005118:	2b11      	cmp	r3, #17
 800511a:	d003      	beq.n	8005124 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b12      	cmp	r3, #18
 8005122:	d130      	bne.n	8005186 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2203      	movs	r2, #3
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800515a:	2201      	movs	r2, #1
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0201 	and.w	r2, r3, #1
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0xee>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b12      	cmp	r3, #18
 80051c4:	d123      	bne.n	800520e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	220f      	movs	r2, #15
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	08da      	lsrs	r2, r3, #3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3208      	adds	r2, #8
 8005208:	69b9      	ldr	r1, [r7, #24]
 800520a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	2203      	movs	r2, #3
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 0203 	and.w	r2, r3, #3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80e0 	beq.w	8005410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005250:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <HAL_GPIO_Init+0x238>)
 8005252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005256:	4a2e      	ldr	r2, [pc, #184]	; (8005310 <HAL_GPIO_Init+0x238>)
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <HAL_GPIO_Init+0x238>)
 8005262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800526e:	4a29      	ldr	r2, [pc, #164]	; (8005314 <HAL_GPIO_Init+0x23c>)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	3302      	adds	r3, #2
 8005276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	220f      	movs	r2, #15
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_GPIO_Init+0x240>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d052      	beq.n	8005340 <HAL_GPIO_Init+0x268>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_GPIO_Init+0x244>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d031      	beq.n	8005306 <HAL_GPIO_Init+0x22e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_GPIO_Init+0x248>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <HAL_GPIO_Init+0x22a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <HAL_GPIO_Init+0x24c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d025      	beq.n	80052fe <HAL_GPIO_Init+0x226>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <HAL_GPIO_Init+0x250>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <HAL_GPIO_Init+0x222>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <HAL_GPIO_Init+0x254>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d019      	beq.n	80052f6 <HAL_GPIO_Init+0x21e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1a      	ldr	r2, [pc, #104]	; (8005330 <HAL_GPIO_Init+0x258>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_GPIO_Init+0x21a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a19      	ldr	r2, [pc, #100]	; (8005334 <HAL_GPIO_Init+0x25c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00d      	beq.n	80052ee <HAL_GPIO_Init+0x216>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a18      	ldr	r2, [pc, #96]	; (8005338 <HAL_GPIO_Init+0x260>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <HAL_GPIO_Init+0x212>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a17      	ldr	r2, [pc, #92]	; (800533c <HAL_GPIO_Init+0x264>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_GPIO_Init+0x20e>
 80052e2:	2309      	movs	r3, #9
 80052e4:	e02d      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052e6:	230a      	movs	r3, #10
 80052e8:	e02b      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052ea:	2308      	movs	r3, #8
 80052ec:	e029      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052ee:	2307      	movs	r3, #7
 80052f0:	e027      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052f2:	2306      	movs	r3, #6
 80052f4:	e025      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052f6:	2305      	movs	r3, #5
 80052f8:	e023      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e021      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052fe:	2303      	movs	r3, #3
 8005300:	e01f      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 8005302:	2302      	movs	r3, #2
 8005304:	e01d      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 8005306:	2301      	movs	r3, #1
 8005308:	e01b      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 800530a:	bf00      	nop
 800530c:	58000080 	.word	0x58000080
 8005310:	58024400 	.word	0x58024400
 8005314:	58000400 	.word	0x58000400
 8005318:	58020000 	.word	0x58020000
 800531c:	58020400 	.word	0x58020400
 8005320:	58020800 	.word	0x58020800
 8005324:	58020c00 	.word	0x58020c00
 8005328:	58021000 	.word	0x58021000
 800532c:	58021400 	.word	0x58021400
 8005330:	58021800 	.word	0x58021800
 8005334:	58021c00 	.word	0x58021c00
 8005338:	58022000 	.word	0x58022000
 800533c:	58022400 	.word	0x58022400
 8005340:	2300      	movs	r3, #0
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	f002 0203 	and.w	r2, r2, #3
 8005348:	0092      	lsls	r2, r2, #2
 800534a:	4093      	lsls	r3, r2
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005352:	4938      	ldr	r1, [pc, #224]	; (8005434 <HAL_GPIO_Init+0x35c>)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	089b      	lsrs	r3, r3, #2
 8005358:	3302      	adds	r3, #2
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3301      	adds	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	f47f ae63 	bne.w	80050ec <HAL_GPIO_Init+0x14>
  }
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	3724      	adds	r7, #36	; 0x24
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	58000400 	.word	0x58000400

08005438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
 8005454:	e001      	b.n	800545a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005478:	787b      	ldrb	r3, [r7, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005484:	e003      	b.n	800548e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	041a      	lsls	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	619a      	str	r2, [r3, #24]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fc fc91 	bl	8001de8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80054ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d0:	b08f      	sub	sp, #60	; 0x3c
 80054d2:	af0a      	add	r7, sp, #40	; 0x28
 80054d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e054      	b.n	800558a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f015 fc5c 	bl	801adb8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2203      	movs	r2, #3
 8005504:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f007 fb45 	bl	800cbae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	687e      	ldr	r6, [r7, #4]
 800552c:	466d      	mov	r5, sp
 800552e:	f106 0410 	add.w	r4, r6, #16
 8005532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800553e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005542:	1d33      	adds	r3, r6, #4
 8005544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f007 fab2 	bl	800cab0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f007 fb3c 	bl	800cbd0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	687e      	ldr	r6, [r7, #4]
 8005560:	466d      	mov	r5, sp
 8005562:	f106 0410 	add.w	r4, r6, #16
 8005566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800556a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800556c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800556e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005572:	e885 0003 	stmia.w	r5, {r0, r1}
 8005576:	1d33      	adds	r3, r6, #4
 8005578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800557a:	6838      	ldr	r0, [r7, #0]
 800557c:	f007 fc86 	bl	800ce8c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005592 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005592:	b590      	push	{r4, r7, lr}
 8005594:	b089      	sub	sp, #36	; 0x24
 8005596:	af04      	add	r7, sp, #16
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	4608      	mov	r0, r1
 800559c:	4611      	mov	r1, r2
 800559e:	461a      	mov	r2, r3
 80055a0:	4603      	mov	r3, r0
 80055a2:	70fb      	strb	r3, [r7, #3]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70bb      	strb	r3, [r7, #2]
 80055a8:	4613      	mov	r3, r2
 80055aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_HCD_HC_Init+0x28>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e076      	b.n	80056a8 <HAL_HCD_HC_Init+0x116>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	212c      	movs	r1, #44	; 0x2c
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	333d      	adds	r3, #61	; 0x3d
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	212c      	movs	r1, #44	; 0x2c
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	4413      	add	r3, r2
 80055e0:	3338      	adds	r3, #56	; 0x38
 80055e2:	787a      	ldrb	r2, [r7, #1]
 80055e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	212c      	movs	r1, #44	; 0x2c
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	3340      	adds	r3, #64	; 0x40
 80055f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80055f6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	212c      	movs	r1, #44	; 0x2c
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	3339      	adds	r3, #57	; 0x39
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	212c      	movs	r1, #44	; 0x2c
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	333f      	adds	r3, #63	; 0x3f
 8005618:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800561c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	78ba      	ldrb	r2, [r7, #2]
 8005622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005626:	b2d0      	uxtb	r0, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	333a      	adds	r3, #58	; 0x3a
 8005634:	4602      	mov	r2, r0
 8005636:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da09      	bge.n	8005654 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	212c      	movs	r1, #44	; 0x2c
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	333b      	adds	r3, #59	; 0x3b
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e008      	b.n	8005666 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	212c      	movs	r1, #44	; 0x2c
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	4413      	add	r3, r2
 8005660:	333b      	adds	r3, #59	; 0x3b
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	212c      	movs	r1, #44	; 0x2c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	333c      	adds	r3, #60	; 0x3c
 8005674:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005678:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	787c      	ldrb	r4, [r7, #1]
 8005680:	78ba      	ldrb	r2, [r7, #2]
 8005682:	78f9      	ldrb	r1, [r7, #3]
 8005684:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005686:	9302      	str	r3, [sp, #8]
 8005688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	4623      	mov	r3, r4
 8005696:	f007 fd4b 	bl	800d130 <USB_HC_Init>
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd90      	pop	{r4, r7, pc}

080056b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_HCD_HC_Halt+0x1e>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e00f      	b.n	80056ee <HAL_HCD_HC_Halt+0x3e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	4611      	mov	r1, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f007 ff87 	bl	800d5f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	4608      	mov	r0, r1
 8005702:	4611      	mov	r1, r2
 8005704:	461a      	mov	r2, r3
 8005706:	4603      	mov	r3, r0
 8005708:	70fb      	strb	r3, [r7, #3]
 800570a:	460b      	mov	r3, r1
 800570c:	70bb      	strb	r3, [r7, #2]
 800570e:	4613      	mov	r3, r2
 8005710:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	212c      	movs	r1, #44	; 0x2c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	333b      	adds	r3, #59	; 0x3b
 8005720:	78ba      	ldrb	r2, [r7, #2]
 8005722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	212c      	movs	r1, #44	; 0x2c
 800572a:	fb01 f303 	mul.w	r3, r1, r3
 800572e:	4413      	add	r3, r2
 8005730:	333f      	adds	r3, #63	; 0x3f
 8005732:	787a      	ldrb	r2, [r7, #1]
 8005734:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005736:	7c3b      	ldrb	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d112      	bne.n	8005762 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	212c      	movs	r1, #44	; 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	3342      	adds	r3, #66	; 0x42
 800574a:	2203      	movs	r2, #3
 800574c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	212c      	movs	r1, #44	; 0x2c
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	333d      	adds	r3, #61	; 0x3d
 800575c:	7f3a      	ldrb	r2, [r7, #28]
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	e008      	b.n	8005774 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	3342      	adds	r3, #66	; 0x42
 8005770:	2202      	movs	r2, #2
 8005772:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005774:	787b      	ldrb	r3, [r7, #1]
 8005776:	2b03      	cmp	r3, #3
 8005778:	f200 80c6 	bhi.w	8005908 <HAL_HCD_HC_SubmitRequest+0x210>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	08005795 	.word	0x08005795
 8005788:	080058f5 	.word	0x080058f5
 800578c:	080057f9 	.word	0x080057f9
 8005790:	08005877 	.word	0x08005877
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005794:	7c3b      	ldrb	r3, [r7, #16]
 8005796:	2b01      	cmp	r3, #1
 8005798:	f040 80b8 	bne.w	800590c <HAL_HCD_HC_SubmitRequest+0x214>
 800579c:	78bb      	ldrb	r3, [r7, #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 80b4 	bne.w	800590c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80057a4:	8b3b      	ldrh	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	212c      	movs	r1, #44	; 0x2c
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	3355      	adds	r3, #85	; 0x55
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	212c      	movs	r1, #44	; 0x2c
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	3355      	adds	r3, #85	; 0x55
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	212c      	movs	r1, #44	; 0x2c
 80057d6:	fb01 f303 	mul.w	r3, r1, r3
 80057da:	4413      	add	r3, r2
 80057dc:	3342      	adds	r3, #66	; 0x42
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80057e2:	e093      	b.n	800590c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	3342      	adds	r3, #66	; 0x42
 80057f2:	2202      	movs	r2, #2
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e089      	b.n	800590c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80057f8:	78bb      	ldrb	r3, [r7, #2]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11d      	bne.n	800583a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	212c      	movs	r1, #44	; 0x2c
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	3355      	adds	r3, #85	; 0x55
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	212c      	movs	r1, #44	; 0x2c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	3342      	adds	r3, #66	; 0x42
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005824:	e073      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3342      	adds	r3, #66	; 0x42
 8005834:	2202      	movs	r2, #2
 8005836:	701a      	strb	r2, [r3, #0]
      break;
 8005838:	e069      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	212c      	movs	r1, #44	; 0x2c
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	3354      	adds	r3, #84	; 0x54
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	212c      	movs	r1, #44	; 0x2c
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	3342      	adds	r3, #66	; 0x42
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
      break;
 8005860:	e055      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	212c      	movs	r1, #44	; 0x2c
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	4413      	add	r3, r2
 800586e:	3342      	adds	r3, #66	; 0x42
 8005870:	2202      	movs	r2, #2
 8005872:	701a      	strb	r2, [r3, #0]
      break;
 8005874:	e04b      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005876:	78bb      	ldrb	r3, [r7, #2]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11d      	bne.n	80058b8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	212c      	movs	r1, #44	; 0x2c
 8005882:	fb01 f303 	mul.w	r3, r1, r3
 8005886:	4413      	add	r3, r2
 8005888:	3355      	adds	r3, #85	; 0x55
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	212c      	movs	r1, #44	; 0x2c
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3342      	adds	r3, #66	; 0x42
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80058a2:	e034      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3342      	adds	r3, #66	; 0x42
 80058b2:	2202      	movs	r2, #2
 80058b4:	701a      	strb	r2, [r3, #0]
      break;
 80058b6:	e02a      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	212c      	movs	r1, #44	; 0x2c
 80058be:	fb01 f303 	mul.w	r3, r1, r3
 80058c2:	4413      	add	r3, r2
 80058c4:	3354      	adds	r3, #84	; 0x54
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	212c      	movs	r1, #44	; 0x2c
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	4413      	add	r3, r2
 80058d8:	3342      	adds	r3, #66	; 0x42
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
      break;
 80058de:	e016      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	212c      	movs	r1, #44	; 0x2c
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	4413      	add	r3, r2
 80058ec:	3342      	adds	r3, #66	; 0x42
 80058ee:	2202      	movs	r2, #2
 80058f0:	701a      	strb	r2, [r3, #0]
      break;
 80058f2:	e00c      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	212c      	movs	r1, #44	; 0x2c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	3342      	adds	r3, #66	; 0x42
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
      break;
 8005906:	e002      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005908:	bf00      	nop
 800590a:	e000      	b.n	800590e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800590c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	212c      	movs	r1, #44	; 0x2c
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	3344      	adds	r3, #68	; 0x44
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	8b3a      	ldrh	r2, [r7, #24]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	202c      	movs	r0, #44	; 0x2c
 8005928:	fb00 f303 	mul.w	r3, r0, r3
 800592c:	440b      	add	r3, r1
 800592e:	334c      	adds	r3, #76	; 0x4c
 8005930:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	212c      	movs	r1, #44	; 0x2c
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	3360      	adds	r3, #96	; 0x60
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	212c      	movs	r1, #44	; 0x2c
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	4413      	add	r3, r2
 8005950:	3350      	adds	r3, #80	; 0x50
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	212c      	movs	r1, #44	; 0x2c
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	3339      	adds	r3, #57	; 0x39
 8005964:	78fa      	ldrb	r2, [r7, #3]
 8005966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	212c      	movs	r1, #44	; 0x2c
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3361      	adds	r3, #97	; 0x61
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	222c      	movs	r2, #44	; 0x2c
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	3338      	adds	r3, #56	; 0x38
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	18d1      	adds	r1, r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	f007 fcda 	bl	800d34c <USB_HC_StartXfer>
 8005998:	4603      	mov	r3, r0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop

080059a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f007 fa23 	bl	800ce06 <USB_GetMode>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f040 80ef 	bne.w	8005ba6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f007 fa07 	bl	800cde0 <USB_ReadInterrupts>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80e5 	beq.w	8005ba4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f007 f9fe 	bl	800cde0 <USB_ReadInterrupts>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ee:	d104      	bne.n	80059fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80059f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f007 f9ee 	bl	800cde0 <USB_ReadInterrupts>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0e:	d104      	bne.n	8005a1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f007 f9de 	bl	800cde0 <USB_ReadInterrupts>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a2e:	d104      	bne.n	8005a3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f007 f9ce 	bl	800cde0 <USB_ReadInterrupts>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d103      	bne.n	8005a56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2202      	movs	r2, #2
 8005a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f007 f9c0 	bl	800cde0 <USB_ReadInterrupts>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6a:	d115      	bne.n	8005a98 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005a74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d108      	bne.n	8005a98 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f015 fa44 	bl	801af14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f007 fab0 	bl	800cff8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f007 f99f 	bl	800cde0 <USB_ReadInterrupts>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aac:	d102      	bne.n	8005ab4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 f9e3 	bl	8006e7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f007 f991 	bl	800cde0 <USB_ReadInterrupts>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d106      	bne.n	8005ad6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f015 fa07 	bl	801aedc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f007 f980 	bl	800cde0 <USB_ReadInterrupts>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d101      	bne.n	8005aee <HAL_HCD_IRQHandler+0x14a>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <HAL_HCD_IRQHandler+0x14c>
 8005aee:	2300      	movs	r3, #0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d012      	beq.n	8005b1a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0210 	bic.w	r2, r2, #16
 8005b02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 f8e6 	bl	8006cd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0210 	orr.w	r2, r2, #16
 8005b18:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f007 f95e 	bl	800cde0 <USB_ReadInterrupts>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b2e:	d13a      	bne.n	8005ba6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f007 fd4b 	bl	800d5d0 <USB_HC_ReadInterrupt>
 8005b3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	e025      	b.n	8005b8e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6c:	d106      	bne.n	8005b7c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f88f 	bl	8005c98 <HCD_HC_IN_IRQHandler>
 8005b7a:	e005      	b.n	8005b88 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fcaa 	bl	80064dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d3d4      	bcc.n	8005b42 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ba0:	615a      	str	r2, [r3, #20]
 8005ba2:	e000      	b.n	8005ba6 <HAL_HCD_IRQHandler+0x202>
      return;
 8005ba4:	bf00      	nop
    }
  }
}
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_HCD_Start+0x16>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e013      	b.n	8005bea <HAL_HCD_Start+0x3e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f006 ffdc 	bl	800cb8c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f007 fa46 	bl	800d06c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_HCD_Stop+0x16>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e00d      	b.n	8005c24 <HAL_HCD_Stop+0x32>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f007 fe45 	bl	800d8a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	212c      	movs	r1, #44	; 0x2c
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	3360      	adds	r3, #96	; 0x60
 8005c46:	781b      	ldrb	r3, [r3, #0]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3350      	adds	r3, #80	; 0x50
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f007 fa3f 	bl	800d10c <USB_GetCurrentFrame>
 8005c8e:	4603      	mov	r3, r0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d119      	bne.n	8005cfc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	60d3      	str	r3, [r2, #12]
 8005cfa:	e101      	b.n	8005f00 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d12:	d12b      	bne.n	8005d6c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	461a      	mov	r2, r3
 8005d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	212c      	movs	r1, #44	; 0x2c
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	3361      	adds	r3, #97	; 0x61
 8005d36:	2207      	movs	r2, #7
 8005d38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f007 fc44 	bl	800d5f2 <USB_HC_Halt>
 8005d6a:	e0c9      	b.n	8005f00 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d109      	bne.n	8005d96 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2320      	movs	r3, #32
 8005d92:	6093      	str	r3, [r2, #8]
 8005d94:	e0b4      	b.n	8005f00 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d133      	bne.n	8005e14 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3361      	adds	r3, #97	; 0x61
 8005dda:	2205      	movs	r2, #5
 8005ddc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	461a      	mov	r2, r3
 8005dec:	2310      	movs	r3, #16
 8005dee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2308      	movs	r3, #8
 8005e00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f007 fbf0 	bl	800d5f2 <USB_HC_Halt>
 8005e12:	e075      	b.n	8005f00 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d134      	bne.n	8005e96 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e46:	f043 0302 	orr.w	r3, r3, #2
 8005e4a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	212c      	movs	r1, #44	; 0x2c
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	3361      	adds	r3, #97	; 0x61
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e82:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f007 fbaf 	bl	800d5f2 <USB_HC_Halt>
 8005e94:	e034      	b.n	8005f00 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d129      	bne.n	8005f00 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec6:	f043 0302 	orr.w	r3, r3, #2
 8005eca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	212c      	movs	r1, #44	; 0x2c
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3361      	adds	r3, #97	; 0x61
 8005eda:	2206      	movs	r2, #6
 8005edc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f007 fb82 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	461a      	mov	r2, r3
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d122      	bne.n	8005f5e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f32:	f043 0302 	orr.w	r3, r3, #2
 8005f36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f007 fb55 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f54:	461a      	mov	r2, r3
 8005f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005f5c:	e2ba      	b.n	80064d4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f040 811b 	bne.w	80061ac <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d019      	beq.n	8005fb2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	212c      	movs	r1, #44	; 0x2c
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	3348      	adds	r3, #72	; 0x48
 8005f8c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	0159      	lsls	r1, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	440b      	add	r3, r1
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005fa0:	1ad2      	subs	r2, r2, r3
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	202c      	movs	r0, #44	; 0x2c
 8005fa8:	fb00 f303 	mul.w	r3, r0, r3
 8005fac:	440b      	add	r3, r1
 8005fae:	3350      	adds	r3, #80	; 0x50
 8005fb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	212c      	movs	r1, #44	; 0x2c
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3361      	adds	r3, #97	; 0x61
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	212c      	movs	r1, #44	; 0x2c
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	4413      	add	r3, r2
 8005fd0:	335c      	adds	r3, #92	; 0x5c
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	333f      	adds	r3, #63	; 0x3f
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	212c      	movs	r1, #44	; 0x2c
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	333f      	adds	r3, #63	; 0x3f
 800600a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800600c:	2b02      	cmp	r3, #2
 800600e:	d121      	bne.n	8006054 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	440a      	add	r2, r1
 8006026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f007 fad9 	bl	800d5f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604c:	461a      	mov	r2, r3
 800604e:	2310      	movs	r3, #16
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	e066      	b.n	8006122 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	333f      	adds	r3, #63	; 0x3f
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d127      	bne.n	80060b8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006086:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3360      	adds	r3, #96	; 0x60
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	b2d9      	uxtb	r1, r3
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	202c      	movs	r0, #44	; 0x2c
 80060a4:	fb00 f303 	mul.w	r3, r0, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	3360      	adds	r3, #96	; 0x60
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f014 ff3d 	bl	801af30 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060b6:	e034      	b.n	8006122 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	212c      	movs	r1, #44	; 0x2c
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	333f      	adds	r3, #63	; 0x3f
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d12a      	bne.n	8006122 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	212c      	movs	r1, #44	; 0x2c
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	3360      	adds	r3, #96	; 0x60
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	212c      	movs	r1, #44	; 0x2c
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	3354      	adds	r3, #84	; 0x54
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f083 0301 	eor.w	r3, r3, #1
 80060f2:	b2d8      	uxtb	r0, r3
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	212c      	movs	r1, #44	; 0x2c
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	4413      	add	r3, r2
 8006100:	3354      	adds	r3, #84	; 0x54
 8006102:	4602      	mov	r2, r0
 8006104:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	b2d9      	uxtb	r1, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	202c      	movs	r0, #44	; 0x2c
 8006110:	fb00 f303 	mul.w	r3, r0, r3
 8006114:	4413      	add	r3, r2
 8006116:	3360      	adds	r3, #96	; 0x60
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f014 ff07 	bl	801af30 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d12b      	bne.n	8006182 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	212c      	movs	r1, #44	; 0x2c
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	3348      	adds	r3, #72	; 0x48
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	202c      	movs	r0, #44	; 0x2c
 8006140:	fb00 f202 	mul.w	r2, r0, r2
 8006144:	440a      	add	r2, r1
 8006146:	3240      	adds	r2, #64	; 0x40
 8006148:	8812      	ldrh	r2, [r2, #0]
 800614a:	fbb3 f3f2 	udiv	r3, r3, r2
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 81be 	beq.w	80064d4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	212c      	movs	r1, #44	; 0x2c
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	3354      	adds	r3, #84	; 0x54
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2d8      	uxtb	r0, r3
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	212c      	movs	r1, #44	; 0x2c
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	3354      	adds	r3, #84	; 0x54
 800617c:	4602      	mov	r2, r0
 800617e:	701a      	strb	r2, [r3, #0]
}
 8006180:	e1a8      	b.n	80064d4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	212c      	movs	r1, #44	; 0x2c
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	3354      	adds	r3, #84	; 0x54
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f083 0301 	eor.w	r3, r3, #1
 8006196:	b2d8      	uxtb	r0, r3
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	212c      	movs	r1, #44	; 0x2c
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	3354      	adds	r3, #84	; 0x54
 80061a6:	4602      	mov	r2, r0
 80061a8:	701a      	strb	r2, [r3, #0]
}
 80061aa:	e193      	b.n	80064d4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	f040 8106 	bne.w	80063d0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061de:	f023 0302 	bic.w	r3, r3, #2
 80061e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	212c      	movs	r1, #44	; 0x2c
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	3361      	adds	r3, #97	; 0x61
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d109      	bne.n	800620c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	212c      	movs	r1, #44	; 0x2c
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	3360      	adds	r3, #96	; 0x60
 8006206:	2201      	movs	r2, #1
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	e0c9      	b.n	80063a0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	212c      	movs	r1, #44	; 0x2c
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	3361      	adds	r3, #97	; 0x61
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d109      	bne.n	8006234 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	212c      	movs	r1, #44	; 0x2c
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	3360      	adds	r3, #96	; 0x60
 800622e:	2205      	movs	r2, #5
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e0b5      	b.n	80063a0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	212c      	movs	r1, #44	; 0x2c
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3361      	adds	r3, #97	; 0x61
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d009      	beq.n	800625c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	212c      	movs	r1, #44	; 0x2c
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	3361      	adds	r3, #97	; 0x61
 8006256:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006258:	2b08      	cmp	r3, #8
 800625a:	d150      	bne.n	80062fe <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	212c      	movs	r1, #44	; 0x2c
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	4413      	add	r3, r2
 8006268:	335c      	adds	r3, #92	; 0x5c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	202c      	movs	r0, #44	; 0x2c
 8006274:	fb00 f303 	mul.w	r3, r0, r3
 8006278:	440b      	add	r3, r1
 800627a:	335c      	adds	r3, #92	; 0x5c
 800627c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	335c      	adds	r3, #92	; 0x5c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d912      	bls.n	80062b8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	212c      	movs	r1, #44	; 0x2c
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	335c      	adds	r3, #92	; 0x5c
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	212c      	movs	r1, #44	; 0x2c
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	4413      	add	r3, r2
 80062b0:	3360      	adds	r3, #96	; 0x60
 80062b2:	2204      	movs	r2, #4
 80062b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062b6:	e073      	b.n	80063a0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	212c      	movs	r1, #44	; 0x2c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	3360      	adds	r3, #96	; 0x60
 80062c6:	2202      	movs	r2, #2
 80062c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062e0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	461a      	mov	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062fc:	e050      	b.n	80063a0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	212c      	movs	r1, #44	; 0x2c
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	3361      	adds	r3, #97	; 0x61
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d122      	bne.n	8006358 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	212c      	movs	r1, #44	; 0x2c
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	4413      	add	r3, r2
 800631e:	3360      	adds	r3, #96	; 0x60
 8006320:	2202      	movs	r2, #2
 8006322:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800633a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006342:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	461a      	mov	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	e023      	b.n	80063a0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	212c      	movs	r1, #44	; 0x2c
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	4413      	add	r3, r2
 8006364:	3361      	adds	r3, #97	; 0x61
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b07      	cmp	r3, #7
 800636a:	d119      	bne.n	80063a0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	212c      	movs	r1, #44	; 0x2c
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	335c      	adds	r3, #92	; 0x5c
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	202c      	movs	r0, #44	; 0x2c
 8006384:	fb00 f303 	mul.w	r3, r0, r3
 8006388:	440b      	add	r3, r1
 800638a:	335c      	adds	r3, #92	; 0x5c
 800638c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	212c      	movs	r1, #44	; 0x2c
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	4413      	add	r3, r2
 800639a:	3360      	adds	r3, #96	; 0x60
 800639c:	2204      	movs	r2, #4
 800639e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	461a      	mov	r2, r3
 80063ae:	2302      	movs	r3, #2
 80063b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	b2d9      	uxtb	r1, r3
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	202c      	movs	r0, #44	; 0x2c
 80063bc:	fb00 f303 	mul.w	r3, r0, r3
 80063c0:	4413      	add	r3, r2
 80063c2:	3360      	adds	r3, #96	; 0x60
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f014 fdb1 	bl	801af30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80063ce:	e081      	b.n	80064d4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	2b10      	cmp	r3, #16
 80063e4:	d176      	bne.n	80064d4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	212c      	movs	r1, #44	; 0x2c
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	333f      	adds	r3, #63	; 0x3f
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d121      	bne.n	800643e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	212c      	movs	r1, #44	; 0x2c
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	4413      	add	r3, r2
 8006406:	335c      	adds	r3, #92	; 0x5c
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	440a      	add	r2, r1
 8006422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f007 f8db 	bl	800d5f2 <USB_HC_Halt>
 800643c:	e041      	b.n	80064c2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	212c      	movs	r1, #44	; 0x2c
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	4413      	add	r3, r2
 800644a:	333f      	adds	r3, #63	; 0x3f
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	333f      	adds	r3, #63	; 0x3f
 8006460:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006462:	2b02      	cmp	r3, #2
 8006464:	d12d      	bne.n	80064c2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	212c      	movs	r1, #44	; 0x2c
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	335c      	adds	r3, #92	; 0x5c
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d120      	bne.n	80064c2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	212c      	movs	r1, #44	; 0x2c
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	4413      	add	r3, r2
 800648c:	3361      	adds	r3, #97	; 0x61
 800648e:	2203      	movs	r2, #3
 8006490:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ac:	f043 0302 	orr.w	r3, r3, #2
 80064b0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f007 f898 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	461a      	mov	r2, r3
 80064d0:	2310      	movs	r3, #16
 80064d2:	6093      	str	r3, [r2, #8]
}
 80064d4:	bf00      	nop
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b04      	cmp	r3, #4
 800650a:	d119      	bne.n	8006540 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	461a      	mov	r2, r3
 800651a:	2304      	movs	r3, #4
 800651c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	440a      	add	r2, r1
 8006534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006538:	f043 0302 	orr.w	r3, r3, #2
 800653c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800653e:	e3c6      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d13e      	bne.n	80065d4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	461a      	mov	r2, r3
 8006564:	2320      	movs	r3, #32
 8006566:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	212c      	movs	r1, #44	; 0x2c
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	4413      	add	r3, r2
 8006574:	333d      	adds	r3, #61	; 0x3d
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	f040 83a8 	bne.w	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	212c      	movs	r1, #44	; 0x2c
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	4413      	add	r3, r2
 800658a:	333d      	adds	r3, #61	; 0x3d
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	212c      	movs	r1, #44	; 0x2c
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	4413      	add	r3, r2
 800659c:	3360      	adds	r3, #96	; 0x60
 800659e:	2202      	movs	r2, #2
 80065a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f007 f810 	bl	800d5f2 <USB_HC_Halt>
}
 80065d2:	e37c      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ea:	d122      	bne.n	8006632 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006606:	f043 0302 	orr.w	r3, r3, #2
 800660a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f006 ffeb 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800662e:	6093      	str	r3, [r2, #8]
}
 8006630:	e34d      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	4413      	add	r3, r2
 800663a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b01      	cmp	r3, #1
 8006646:	d150      	bne.n	80066ea <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	212c      	movs	r1, #44	; 0x2c
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	4413      	add	r3, r2
 8006654:	335c      	adds	r3, #92	; 0x5c
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d111      	bne.n	8006694 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	212c      	movs	r1, #44	; 0x2c
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	333d      	adds	r3, #61	; 0x3d
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f043 0302 	orr.w	r3, r3, #2
 80066b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f006 ff97 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	461a      	mov	r2, r3
 80066d2:	2301      	movs	r3, #1
 80066d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	212c      	movs	r1, #44	; 0x2c
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	3361      	adds	r3, #97	; 0x61
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]
}
 80066e8:	e2f1      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d13c      	bne.n	800677a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	212c      	movs	r1, #44	; 0x2c
 8006706:	fb01 f303 	mul.w	r3, r1, r3
 800670a:	4413      	add	r3, r2
 800670c:	3361      	adds	r3, #97	; 0x61
 800670e:	2204      	movs	r2, #4
 8006710:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	212c      	movs	r1, #44	; 0x2c
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	4413      	add	r3, r2
 800671e:	333d      	adds	r3, #61	; 0x3d
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	212c      	movs	r1, #44	; 0x2c
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	335c      	adds	r3, #92	; 0x5c
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	440a      	add	r2, r1
 800674c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006750:	f043 0302 	orr.w	r3, r3, #2
 8006754:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f006 ff46 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	461a      	mov	r2, r3
 8006774:	2340      	movs	r3, #64	; 0x40
 8006776:	6093      	str	r3, [r2, #8]
}
 8006778:	e2a9      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b08      	cmp	r3, #8
 800678e:	d12a      	bne.n	80067e6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	4413      	add	r3, r2
 8006798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679c:	461a      	mov	r2, r3
 800679e:	2308      	movs	r3, #8
 80067a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067bc:	f043 0302 	orr.w	r3, r3, #2
 80067c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f006 ff10 	bl	800d5f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	212c      	movs	r1, #44	; 0x2c
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	4413      	add	r3, r2
 80067de:	3361      	adds	r3, #97	; 0x61
 80067e0:	2205      	movs	r2, #5
 80067e2:	701a      	strb	r2, [r3, #0]
}
 80067e4:	e273      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d150      	bne.n	800689e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	212c      	movs	r1, #44	; 0x2c
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	335c      	adds	r3, #92	; 0x5c
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	212c      	movs	r1, #44	; 0x2c
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	3361      	adds	r3, #97	; 0x61
 800681c:	2203      	movs	r2, #3
 800681e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	212c      	movs	r1, #44	; 0x2c
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	333d      	adds	r3, #61	; 0x3d
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d112      	bne.n	800685a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	212c      	movs	r1, #44	; 0x2c
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	333c      	adds	r3, #60	; 0x3c
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d108      	bne.n	800685a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	212c      	movs	r1, #44	; 0x2c
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	4413      	add	r3, r2
 8006854:	333d      	adds	r3, #61	; 0x3d
 8006856:	2201      	movs	r2, #1
 8006858:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	4413      	add	r3, r2
 8006862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	440a      	add	r2, r1
 8006870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006874:	f043 0302 	orr.w	r3, r3, #2
 8006878:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f006 feb4 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	461a      	mov	r2, r3
 8006898:	2310      	movs	r3, #16
 800689a:	6093      	str	r3, [r2, #8]
}
 800689c:	e217      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	d174      	bne.n	800699e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d121      	bne.n	8006900 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	212c      	movs	r1, #44	; 0x2c
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	3361      	adds	r3, #97	; 0x61
 80068ca:	2206      	movs	r2, #6
 80068cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f006 fe7a 	bl	800d5f2 <USB_HC_Halt>
 80068fe:	e044      	b.n	800698a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	212c      	movs	r1, #44	; 0x2c
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	335c      	adds	r3, #92	; 0x5c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	202c      	movs	r0, #44	; 0x2c
 8006918:	fb00 f303 	mul.w	r3, r0, r3
 800691c:	440b      	add	r3, r1
 800691e:	335c      	adds	r3, #92	; 0x5c
 8006920:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	212c      	movs	r1, #44	; 0x2c
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	4413      	add	r3, r2
 800692e:	335c      	adds	r3, #92	; 0x5c
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d920      	bls.n	8006978 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	212c      	movs	r1, #44	; 0x2c
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	4413      	add	r3, r2
 8006942:	335c      	adds	r3, #92	; 0x5c
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	212c      	movs	r1, #44	; 0x2c
 800694e:	fb01 f303 	mul.w	r3, r1, r3
 8006952:	4413      	add	r3, r2
 8006954:	3360      	adds	r3, #96	; 0x60
 8006956:	2204      	movs	r2, #4
 8006958:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	b2d9      	uxtb	r1, r3
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	202c      	movs	r0, #44	; 0x2c
 8006964:	fb00 f303 	mul.w	r3, r0, r3
 8006968:	4413      	add	r3, r2
 800696a:	3360      	adds	r3, #96	; 0x60
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f014 fadd 	bl	801af30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006976:	e008      	b.n	800698a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	212c      	movs	r1, #44	; 0x2c
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	4413      	add	r3, r2
 8006984:	3360      	adds	r3, #96	; 0x60
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006996:	461a      	mov	r2, r3
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	6093      	str	r3, [r2, #8]
}
 800699c:	e197      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d134      	bne.n	8006a20 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f006 fe06 	bl	800d5f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	461a      	mov	r2, r3
 80069f4:	2310      	movs	r3, #16
 80069f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	461a      	mov	r2, r3
 8006a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	212c      	movs	r1, #44	; 0x2c
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	4413      	add	r3, r2
 8006a18:	3361      	adds	r3, #97	; 0x61
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	701a      	strb	r2, [r3, #0]
}
 8006a1e:	e156      	b.n	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	f040 814b 	bne.w	8006cce <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a52:	f023 0302 	bic.w	r3, r3, #2
 8006a56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	212c      	movs	r1, #44	; 0x2c
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	3361      	adds	r3, #97	; 0x61
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d179      	bne.n	8006b60 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	212c      	movs	r1, #44	; 0x2c
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	3360      	adds	r3, #96	; 0x60
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	212c      	movs	r1, #44	; 0x2c
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	333f      	adds	r3, #63	; 0x3f
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d00a      	beq.n	8006aa8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	212c      	movs	r1, #44	; 0x2c
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	333f      	adds	r3, #63	; 0x3f
 8006aa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	f040 80fc 	bne.w	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d142      	bne.n	8006b36 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	212c      	movs	r1, #44	; 0x2c
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	334c      	adds	r3, #76	; 0x4c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 80ed 	beq.w	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	212c      	movs	r1, #44	; 0x2c
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	334c      	adds	r3, #76	; 0x4c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	202c      	movs	r0, #44	; 0x2c
 8006adc:	fb00 f202 	mul.w	r2, r0, r2
 8006ae0:	440a      	add	r2, r1
 8006ae2:	3240      	adds	r2, #64	; 0x40
 8006ae4:	8812      	ldrh	r2, [r2, #0]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	202c      	movs	r0, #44	; 0x2c
 8006af0:	fb00 f202 	mul.w	r2, r0, r2
 8006af4:	440a      	add	r2, r1
 8006af6:	3240      	adds	r2, #64	; 0x40
 8006af8:	8812      	ldrh	r2, [r2, #0]
 8006afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80ca 	beq.w	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	212c      	movs	r1, #44	; 0x2c
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	3355      	adds	r3, #85	; 0x55
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	b2d8      	uxtb	r0, r3
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	212c      	movs	r1, #44	; 0x2c
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3355      	adds	r3, #85	; 0x55
 8006b30:	4602      	mov	r2, r0
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e0b4      	b.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	212c      	movs	r1, #44	; 0x2c
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	4413      	add	r3, r2
 8006b42:	3355      	adds	r3, #85	; 0x55
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2d8      	uxtb	r0, r3
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	212c      	movs	r1, #44	; 0x2c
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	3355      	adds	r3, #85	; 0x55
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e09f      	b.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	212c      	movs	r1, #44	; 0x2c
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3361      	adds	r3, #97	; 0x61
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d109      	bne.n	8006b88 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	212c      	movs	r1, #44	; 0x2c
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	3360      	adds	r3, #96	; 0x60
 8006b82:	2202      	movs	r2, #2
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	e08b      	b.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	3361      	adds	r3, #97	; 0x61
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d109      	bne.n	8006bb0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	212c      	movs	r1, #44	; 0x2c
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3360      	adds	r3, #96	; 0x60
 8006baa:	2202      	movs	r2, #2
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e077      	b.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	3361      	adds	r3, #97	; 0x61
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d109      	bne.n	8006bd8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	212c      	movs	r1, #44	; 0x2c
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	3360      	adds	r3, #96	; 0x60
 8006bd2:	2205      	movs	r2, #5
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e063      	b.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	212c      	movs	r1, #44	; 0x2c
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	3361      	adds	r3, #97	; 0x61
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d009      	beq.n	8006c00 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	212c      	movs	r1, #44	; 0x2c
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3361      	adds	r3, #97	; 0x61
 8006bfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d14f      	bne.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	212c      	movs	r1, #44	; 0x2c
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	335c      	adds	r3, #92	; 0x5c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	202c      	movs	r0, #44	; 0x2c
 8006c18:	fb00 f303 	mul.w	r3, r0, r3
 8006c1c:	440b      	add	r3, r1
 8006c1e:	335c      	adds	r3, #92	; 0x5c
 8006c20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	212c      	movs	r1, #44	; 0x2c
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	335c      	adds	r3, #92	; 0x5c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d912      	bls.n	8006c5c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	212c      	movs	r1, #44	; 0x2c
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	4413      	add	r3, r2
 8006c42:	335c      	adds	r3, #92	; 0x5c
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	212c      	movs	r1, #44	; 0x2c
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	3360      	adds	r3, #96	; 0x60
 8006c56:	2204      	movs	r2, #4
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	e021      	b.n	8006ca0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	212c      	movs	r1, #44	; 0x2c
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	3360      	adds	r3, #96	; 0x60
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cac:	461a      	mov	r2, r3
 8006cae:	2302      	movs	r3, #2
 8006cb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	b2d9      	uxtb	r1, r3
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	202c      	movs	r0, #44	; 0x2c
 8006cbc:	fb00 f303 	mul.w	r3, r0, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3360      	adds	r3, #96	; 0x60
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f014 f931 	bl	801af30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006cce:	bf00      	nop
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b08a      	sub	sp, #40	; 0x28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	0c5b      	lsrs	r3, r3, #17
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d004      	beq.n	8006d1c <HCD_RXQLVL_IRQHandler+0x46>
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b05      	cmp	r3, #5
 8006d16:	f000 80a9 	beq.w	8006e6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006d1a:	e0aa      	b.n	8006e72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80a6 	beq.w	8006e70 <HCD_RXQLVL_IRQHandler+0x19a>
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	212c      	movs	r1, #44	; 0x2c
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	3344      	adds	r3, #68	; 0x44
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 809b 	beq.w	8006e70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	212c      	movs	r1, #44	; 0x2c
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	3350      	adds	r3, #80	; 0x50
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	202c      	movs	r0, #44	; 0x2c
 8006d54:	fb00 f303 	mul.w	r3, r0, r3
 8006d58:	440b      	add	r3, r1
 8006d5a:	334c      	adds	r3, #76	; 0x4c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d87a      	bhi.n	8006e58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	212c      	movs	r1, #44	; 0x2c
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	3344      	adds	r3, #68	; 0x44
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	b292      	uxth	r2, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f005 ffd8 	bl	800cd30 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	212c      	movs	r1, #44	; 0x2c
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3344      	adds	r3, #68	; 0x44
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	441a      	add	r2, r3
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	202c      	movs	r0, #44	; 0x2c
 8006d9a:	fb00 f303 	mul.w	r3, r0, r3
 8006d9e:	440b      	add	r3, r1
 8006da0:	3344      	adds	r3, #68	; 0x44
 8006da2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	212c      	movs	r1, #44	; 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3350      	adds	r3, #80	; 0x50
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	441a      	add	r2, r3
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	202c      	movs	r0, #44	; 0x2c
 8006dbe:	fb00 f303 	mul.w	r3, r0, r3
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3350      	adds	r3, #80	; 0x50
 8006dc6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	0cdb      	lsrs	r3, r3, #19
 8006dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ddc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	212c      	movs	r1, #44	; 0x2c
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	3340      	adds	r3, #64	; 0x40
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d13c      	bne.n	8006e70 <HCD_RXQLVL_IRQHandler+0x19a>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d039      	beq.n	8006e70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	212c      	movs	r1, #44	; 0x2c
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	3354      	adds	r3, #84	; 0x54
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f083 0301 	eor.w	r3, r3, #1
 8006e42:	b2d8      	uxtb	r0, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	212c      	movs	r1, #44	; 0x2c
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	3354      	adds	r3, #84	; 0x54
 8006e52:	4602      	mov	r2, r0
 8006e54:	701a      	strb	r2, [r3, #0]
      break;
 8006e56:	e00b      	b.n	8006e70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	212c      	movs	r1, #44	; 0x2c
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	3360      	adds	r3, #96	; 0x60
 8006e66:	2204      	movs	r2, #4
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e001      	b.n	8006e70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006e6c:	bf00      	nop
 8006e6e:	e000      	b.n	8006e72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006e70:	bf00      	nop
  }
}
 8006e72:	bf00      	nop
 8006e74:	3728      	adds	r7, #40	; 0x28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ea6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d10b      	bne.n	8006eca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d102      	bne.n	8006ec2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f014 f81b 	bl	801aef8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d132      	bne.n	8006f3a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f043 0308 	orr.w	r3, r3, #8
 8006eda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d126      	bne.n	8006f34 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d113      	bne.n	8006f16 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ef8:	d106      	bne.n	8006f08 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2102      	movs	r1, #2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f006 f879 	bl	800cff8 <USB_InitFSLSPClkSel>
 8006f06:	e011      	b.n	8006f2c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f006 f872 	bl	800cff8 <USB_InitFSLSPClkSel>
 8006f14:	e00a      	b.n	8006f2c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d106      	bne.n	8006f2c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f24:	461a      	mov	r2, r3
 8006f26:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006f2a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f014 f80d 	bl	801af4c <HAL_HCD_PortEnabled_Callback>
 8006f32:	e002      	b.n	8006f3a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f014 f817 	bl	801af68 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d103      	bne.n	8006f4c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f043 0320 	orr.w	r3, r3, #32
 8006f4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f52:	461a      	mov	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6013      	str	r3, [r2, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006f68:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <HAL_HSEM_FastTake+0x2c>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3320      	adds	r3, #32
 8006f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f72:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <HAL_HSEM_FastTake+0x30>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d101      	bne.n	8006f7c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e000      	b.n	8006f7e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	58026400 	.word	0x58026400
 8006f90:	80000300 	.word	0x80000300

08006f94 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006f9e:	4906      	ldr	r1, [pc, #24]	; (8006fb8 <HAL_HSEM_Release+0x24>)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	58026400 	.word	0x58026400

08006fbc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <HAL_HSEM_ActivateNotification+0x20>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4904      	ldr	r1, [pc, #16]	; (8006fdc <HAL_HSEM_ActivateNotification+0x20>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	600b      	str	r3, [r1, #0]
#endif
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	58026500 	.word	0x58026500

08006fe0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <HAL_HSEM_IRQHandler+0x30>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <HAL_HSEM_IRQHandler+0x30>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	4906      	ldr	r1, [pc, #24]	; (8007010 <HAL_HSEM_IRQHandler+0x30>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006ffa:	4a05      	ldr	r2, [pc, #20]	; (8007010 <HAL_HSEM_IRQHandler+0x30>)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f010 fe2d 	bl	8017c60 <HAL_HSEM_FreeCallback>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	58026500 	.word	0x58026500

08007014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e07f      	b.n	8007126 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fa f90a 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0201 	bic.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d107      	bne.n	800708e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	e006      	b.n	800709c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800709a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d104      	bne.n	80070ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <HAL_I2C_Init+0x11c>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	ea42 0103 	orr.w	r1, r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	021a      	lsls	r2, r3, #8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69d9      	ldr	r1, [r3, #28]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	02008000 	.word	0x02008000

08007134 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
  }
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b20      	cmp	r3, #32
 800717c:	d138      	bne.n	80071f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007188:	2302      	movs	r3, #2
 800718a:	e032      	b.n	80071f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	; 0x24
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6819      	ldr	r1, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e000      	b.n	80071f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b20      	cmp	r3, #32
 8007212:	d139      	bne.n	8007288 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800721e:	2302      	movs	r3, #2
 8007220:	e033      	b.n	800728a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2224      	movs	r2, #36	; 0x24
 800722e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0201 	bic.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007250:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
  }
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80072a0:	4b29      	ldr	r3, [pc, #164]	; (8007348 <HAL_PWREx_ConfigSupply+0xb0>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	2b06      	cmp	r3, #6
 80072aa:	d00a      	beq.n	80072c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80072ac:	4b26      	ldr	r3, [pc, #152]	; (8007348 <HAL_PWREx_ConfigSupply+0xb0>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d001      	beq.n	80072be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e040      	b.n	8007340 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e03e      	b.n	8007340 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80072c2:	4b21      	ldr	r3, [pc, #132]	; (8007348 <HAL_PWREx_ConfigSupply+0xb0>)
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80072ca:	491f      	ldr	r1, [pc, #124]	; (8007348 <HAL_PWREx_ConfigSupply+0xb0>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80072d2:	f7fb fa09 	bl	80026e8 <HAL_GetTick>
 80072d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072d8:	e009      	b.n	80072ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80072da:	f7fb fa05 	bl	80026e8 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072e8:	d901      	bls.n	80072ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e028      	b.n	8007340 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <HAL_PWREx_ConfigSupply+0xb0>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fa:	d1ee      	bne.n	80072da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b1e      	cmp	r3, #30
 8007300:	d008      	beq.n	8007314 <HAL_PWREx_ConfigSupply+0x7c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b2e      	cmp	r3, #46	; 0x2e
 8007306:	d005      	beq.n	8007314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b1d      	cmp	r3, #29
 800730c:	d002      	beq.n	8007314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b2d      	cmp	r3, #45	; 0x2d
 8007312:	d114      	bne.n	800733e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007314:	f7fb f9e8 	bl	80026e8 <HAL_GetTick>
 8007318:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800731a:	e009      	b.n	8007330 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800731c:	f7fb f9e4 	bl	80026e8 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800732a:	d901      	bls.n	8007330 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e007      	b.n	8007340 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_PWREx_ConfigSupply+0xb0>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733c:	d1ee      	bne.n	800731c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	58024800 	.word	0x58024800

0800734c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a04      	ldr	r2, [pc, #16]	; (8007368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800735a:	60d3      	str	r3, [r2, #12]
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	58024800 	.word	0x58024800

0800736c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08c      	sub	sp, #48	; 0x30
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e3ff      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 8087 	beq.w	800749a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800738c:	4b99      	ldr	r3, [pc, #612]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007396:	4b97      	ldr	r3, [pc, #604]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d007      	beq.n	80073b2 <HAL_RCC_OscConfig+0x46>
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	2b18      	cmp	r3, #24
 80073a6:	d110      	bne.n	80073ca <HAL_RCC_OscConfig+0x5e>
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d10b      	bne.n	80073ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b2:	4b90      	ldr	r3, [pc, #576]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d06c      	beq.n	8007498 <HAL_RCC_OscConfig+0x12c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d168      	bne.n	8007498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e3d9      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d2:	d106      	bne.n	80073e2 <HAL_RCC_OscConfig+0x76>
 80073d4:	4b87      	ldr	r3, [pc, #540]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a86      	ldr	r2, [pc, #536]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	e02e      	b.n	8007440 <HAL_RCC_OscConfig+0xd4>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10c      	bne.n	8007404 <HAL_RCC_OscConfig+0x98>
 80073ea:	4b82      	ldr	r3, [pc, #520]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a81      	ldr	r2, [pc, #516]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	4b7f      	ldr	r3, [pc, #508]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a7e      	ldr	r2, [pc, #504]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80073fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	e01d      	b.n	8007440 <HAL_RCC_OscConfig+0xd4>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800740c:	d10c      	bne.n	8007428 <HAL_RCC_OscConfig+0xbc>
 800740e:	4b79      	ldr	r3, [pc, #484]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a78      	ldr	r2, [pc, #480]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	4b76      	ldr	r3, [pc, #472]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a75      	ldr	r2, [pc, #468]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	e00b      	b.n	8007440 <HAL_RCC_OscConfig+0xd4>
 8007428:	4b72      	ldr	r3, [pc, #456]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a71      	ldr	r2, [pc, #452]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800742e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4b6f      	ldr	r3, [pc, #444]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a6e      	ldr	r2, [pc, #440]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800743a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800743e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d013      	beq.n	8007470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fb f94e 	bl	80026e8 <HAL_GetTick>
 800744c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007450:	f7fb f94a 	bl	80026e8 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b64      	cmp	r3, #100	; 0x64
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e38d      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007462:	4b64      	ldr	r3, [pc, #400]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f0      	beq.n	8007450 <HAL_RCC_OscConfig+0xe4>
 800746e:	e014      	b.n	800749a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fb f93a 	bl	80026e8 <HAL_GetTick>
 8007474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007478:	f7fb f936 	bl	80026e8 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b64      	cmp	r3, #100	; 0x64
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e379      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800748a:	4b5a      	ldr	r3, [pc, #360]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f0      	bne.n	8007478 <HAL_RCC_OscConfig+0x10c>
 8007496:	e000      	b.n	800749a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80ae 	beq.w	8007604 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074a8:	4b52      	ldr	r3, [pc, #328]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074b2:	4b50      	ldr	r3, [pc, #320]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <HAL_RCC_OscConfig+0x162>
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	2b18      	cmp	r3, #24
 80074c2:	d13a      	bne.n	800753a <HAL_RCC_OscConfig+0x1ce>
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d135      	bne.n	800753a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074ce:	4b49      	ldr	r3, [pc, #292]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_RCC_OscConfig+0x17a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e34b      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074e6:	f7fb f92f 	bl	8002748 <HAL_GetREVID>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d817      	bhi.n	8007524 <HAL_RCC_OscConfig+0x1b8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d108      	bne.n	800750e <HAL_RCC_OscConfig+0x1a2>
 80074fc:	4b3d      	ldr	r3, [pc, #244]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007504:	4a3b      	ldr	r2, [pc, #236]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800750a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800750c:	e07a      	b.n	8007604 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800750e:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	031b      	lsls	r3, r3, #12
 800751c:	4935      	ldr	r1, [pc, #212]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800751e:	4313      	orrs	r3, r2
 8007520:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007522:	e06f      	b.n	8007604 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007524:	4b33      	ldr	r3, [pc, #204]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	061b      	lsls	r3, r3, #24
 8007532:	4930      	ldr	r1, [pc, #192]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007534:	4313      	orrs	r3, r2
 8007536:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007538:	e064      	b.n	8007604 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d045      	beq.n	80075ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007542:	4b2c      	ldr	r3, [pc, #176]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f023 0219 	bic.w	r2, r3, #25
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	4929      	ldr	r1, [pc, #164]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007550:	4313      	orrs	r3, r2
 8007552:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007554:	f7fb f8c8 	bl	80026e8 <HAL_GetTick>
 8007558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800755c:	f7fb f8c4 	bl	80026e8 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e307      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800756e:	4b21      	ldr	r3, [pc, #132]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757a:	f7fb f8e5 	bl	8002748 <HAL_GetREVID>
 800757e:	4603      	mov	r3, r0
 8007580:	f241 0203 	movw	r2, #4099	; 0x1003
 8007584:	4293      	cmp	r3, r2
 8007586:	d817      	bhi.n	80075b8 <HAL_RCC_OscConfig+0x24c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d108      	bne.n	80075a2 <HAL_RCC_OscConfig+0x236>
 8007590:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 800759a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759e:	6053      	str	r3, [r2, #4]
 80075a0:	e030      	b.n	8007604 <HAL_RCC_OscConfig+0x298>
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	031b      	lsls	r3, r3, #12
 80075b0:	4910      	ldr	r1, [pc, #64]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	604b      	str	r3, [r1, #4]
 80075b6:	e025      	b.n	8007604 <HAL_RCC_OscConfig+0x298>
 80075b8:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	061b      	lsls	r3, r3, #24
 80075c6:	490b      	ldr	r1, [pc, #44]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	604b      	str	r3, [r1, #4]
 80075cc:	e01a      	b.n	8007604 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <HAL_RCC_OscConfig+0x288>)
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075da:	f7fb f885 	bl	80026e8 <HAL_GetTick>
 80075de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e2:	f7fb f881 	bl	80026e8 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d903      	bls.n	80075f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e2c4      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
 80075f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075f8:	4ba4      	ldr	r3, [pc, #656]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1ee      	bne.n	80075e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80a9 	beq.w	8007764 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007612:	4b9e      	ldr	r3, [pc, #632]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800761c:	4b9b      	ldr	r3, [pc, #620]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b08      	cmp	r3, #8
 8007626:	d007      	beq.n	8007638 <HAL_RCC_OscConfig+0x2cc>
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b18      	cmp	r3, #24
 800762c:	d13a      	bne.n	80076a4 <HAL_RCC_OscConfig+0x338>
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d135      	bne.n	80076a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007638:	4b94      	ldr	r3, [pc, #592]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_RCC_OscConfig+0x2e4>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	2b80      	cmp	r3, #128	; 0x80
 800764a:	d001      	beq.n	8007650 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e296      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007650:	f7fb f87a 	bl	8002748 <HAL_GetREVID>
 8007654:	4603      	mov	r3, r0
 8007656:	f241 0203 	movw	r2, #4099	; 0x1003
 800765a:	4293      	cmp	r3, r2
 800765c:	d817      	bhi.n	800768e <HAL_RCC_OscConfig+0x322>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	2b20      	cmp	r3, #32
 8007664:	d108      	bne.n	8007678 <HAL_RCC_OscConfig+0x30c>
 8007666:	4b89      	ldr	r3, [pc, #548]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800766e:	4a87      	ldr	r2, [pc, #540]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007674:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007676:	e075      	b.n	8007764 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007678:	4b84      	ldr	r3, [pc, #528]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	069b      	lsls	r3, r3, #26
 8007686:	4981      	ldr	r1, [pc, #516]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007688:	4313      	orrs	r3, r2
 800768a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800768c:	e06a      	b.n	8007764 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800768e:	4b7f      	ldr	r3, [pc, #508]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	497b      	ldr	r1, [pc, #492]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076a2:	e05f      	b.n	8007764 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d042      	beq.n	8007732 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80076ac:	4b77      	ldr	r3, [pc, #476]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a76      	ldr	r2, [pc, #472]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80076b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fb f816 	bl	80026e8 <HAL_GetTick>
 80076bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80076c0:	f7fb f812 	bl	80026e8 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e255      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076d2:	4b6e      	ldr	r3, [pc, #440]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076de:	f7fb f833 	bl	8002748 <HAL_GetREVID>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d817      	bhi.n	800771c <HAL_RCC_OscConfig+0x3b0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d108      	bne.n	8007706 <HAL_RCC_OscConfig+0x39a>
 80076f4:	4b65      	ldr	r3, [pc, #404]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80076fc:	4a63      	ldr	r2, [pc, #396]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80076fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007702:	6053      	str	r3, [r2, #4]
 8007704:	e02e      	b.n	8007764 <HAL_RCC_OscConfig+0x3f8>
 8007706:	4b61      	ldr	r3, [pc, #388]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	069b      	lsls	r3, r3, #26
 8007714:	495d      	ldr	r1, [pc, #372]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007716:	4313      	orrs	r3, r2
 8007718:	604b      	str	r3, [r1, #4]
 800771a:	e023      	b.n	8007764 <HAL_RCC_OscConfig+0x3f8>
 800771c:	4b5b      	ldr	r3, [pc, #364]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	061b      	lsls	r3, r3, #24
 800772a:	4958      	ldr	r1, [pc, #352]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800772c:	4313      	orrs	r3, r2
 800772e:	60cb      	str	r3, [r1, #12]
 8007730:	e018      	b.n	8007764 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007732:	4b56      	ldr	r3, [pc, #344]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a55      	ldr	r2, [pc, #340]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800773c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773e:	f7fa ffd3 	bl	80026e8 <HAL_GetTick>
 8007742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007746:	f7fa ffcf 	bl	80026e8 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e212      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007758:	4b4c      	ldr	r3, [pc, #304]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f0      	bne.n	8007746 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d036      	beq.n	80077de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d019      	beq.n	80077ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007778:	4b44      	ldr	r3, [pc, #272]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	4a43      	ldr	r2, [pc, #268]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007784:	f7fa ffb0 	bl	80026e8 <HAL_GetTick>
 8007788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800778c:	f7fa ffac 	bl	80026e8 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e1ef      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800779e:	4b3b      	ldr	r3, [pc, #236]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80077a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0f0      	beq.n	800778c <HAL_RCC_OscConfig+0x420>
 80077aa:	e018      	b.n	80077de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ac:	4b37      	ldr	r3, [pc, #220]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80077ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b0:	4a36      	ldr	r2, [pc, #216]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b8:	f7fa ff96 	bl	80026e8 <HAL_GetTick>
 80077bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077c0:	f7fa ff92 	bl	80026e8 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e1d5      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077d2:	4b2e      	ldr	r3, [pc, #184]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80077d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f0      	bne.n	80077c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d036      	beq.n	8007858 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d019      	beq.n	8007826 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077f2:	4b26      	ldr	r3, [pc, #152]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a25      	ldr	r2, [pc, #148]	; (800788c <HAL_RCC_OscConfig+0x520>)
 80077f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077fe:	f7fa ff73 	bl	80026e8 <HAL_GetTick>
 8007802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007806:	f7fa ff6f 	bl	80026e8 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e1b2      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007818:	4b1c      	ldr	r3, [pc, #112]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x49a>
 8007824:	e018      	b.n	8007858 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007826:	4b19      	ldr	r3, [pc, #100]	; (800788c <HAL_RCC_OscConfig+0x520>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800782c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007830:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007832:	f7fa ff59 	bl	80026e8 <HAL_GetTick>
 8007836:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007838:	e008      	b.n	800784c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800783a:	f7fa ff55 	bl	80026e8 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e198      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <HAL_RCC_OscConfig+0x520>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f0      	bne.n	800783a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8085 	beq.w	8007970 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <HAL_RCC_OscConfig+0x524>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <HAL_RCC_OscConfig+0x524>)
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007872:	f7fa ff39 	bl	80026e8 <HAL_GetTick>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007878:	e00c      	b.n	8007894 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800787a:	f7fa ff35 	bl	80026e8 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b64      	cmp	r3, #100	; 0x64
 8007886:	d905      	bls.n	8007894 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e178      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
 800788c:	58024400 	.word	0x58024400
 8007890:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007894:	4b96      	ldr	r3, [pc, #600]	; (8007af0 <HAL_RCC_OscConfig+0x784>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0ec      	beq.n	800787a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d106      	bne.n	80078b6 <HAL_RCC_OscConfig+0x54a>
 80078a8:	4b92      	ldr	r3, [pc, #584]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	4a91      	ldr	r2, [pc, #580]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6713      	str	r3, [r2, #112]	; 0x70
 80078b4:	e02d      	b.n	8007912 <HAL_RCC_OscConfig+0x5a6>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x56c>
 80078be:	4b8d      	ldr	r3, [pc, #564]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c2:	4a8c      	ldr	r2, [pc, #560]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	6713      	str	r3, [r2, #112]	; 0x70
 80078ca:	4b8a      	ldr	r3, [pc, #552]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	4a89      	ldr	r2, [pc, #548]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078d0:	f023 0304 	bic.w	r3, r3, #4
 80078d4:	6713      	str	r3, [r2, #112]	; 0x70
 80078d6:	e01c      	b.n	8007912 <HAL_RCC_OscConfig+0x5a6>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b05      	cmp	r3, #5
 80078de:	d10c      	bne.n	80078fa <HAL_RCC_OscConfig+0x58e>
 80078e0:	4b84      	ldr	r3, [pc, #528]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	4a83      	ldr	r2, [pc, #524]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078e6:	f043 0304 	orr.w	r3, r3, #4
 80078ea:	6713      	str	r3, [r2, #112]	; 0x70
 80078ec:	4b81      	ldr	r3, [pc, #516]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f0:	4a80      	ldr	r2, [pc, #512]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	6713      	str	r3, [r2, #112]	; 0x70
 80078f8:	e00b      	b.n	8007912 <HAL_RCC_OscConfig+0x5a6>
 80078fa:	4b7e      	ldr	r3, [pc, #504]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80078fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fe:	4a7d      	ldr	r2, [pc, #500]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	6713      	str	r3, [r2, #112]	; 0x70
 8007906:	4b7b      	ldr	r3, [pc, #492]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790a:	4a7a      	ldr	r2, [pc, #488]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 800790c:	f023 0304 	bic.w	r3, r3, #4
 8007910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d015      	beq.n	8007946 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791a:	f7fa fee5 	bl	80026e8 <HAL_GetTick>
 800791e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007920:	e00a      	b.n	8007938 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007922:	f7fa fee1 	bl	80026e8 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	4293      	cmp	r3, r2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e122      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007938:	4b6e      	ldr	r3, [pc, #440]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0ee      	beq.n	8007922 <HAL_RCC_OscConfig+0x5b6>
 8007944:	e014      	b.n	8007970 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007946:	f7fa fecf 	bl	80026e8 <HAL_GetTick>
 800794a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800794c:	e00a      	b.n	8007964 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800794e:	f7fa fecb 	bl	80026e8 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	f241 3288 	movw	r2, #5000	; 0x1388
 800795c:	4293      	cmp	r3, r2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e10c      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007964:	4b63      	ldr	r3, [pc, #396]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ee      	bne.n	800794e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 8101 	beq.w	8007b7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800797a:	4b5e      	ldr	r3, [pc, #376]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007982:	2b18      	cmp	r3, #24
 8007984:	f000 80bc 	beq.w	8007b00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b02      	cmp	r3, #2
 800798e:	f040 8095 	bne.w	8007abc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007992:	4b58      	ldr	r3, [pc, #352]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a57      	ldr	r2, [pc, #348]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800799c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799e:	f7fa fea3 	bl	80026e8 <HAL_GetTick>
 80079a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a6:	f7fa fe9f 	bl	80026e8 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e0e2      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079b8:	4b4e      	ldr	r3, [pc, #312]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f0      	bne.n	80079a6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079c4:	4b4b      	ldr	r3, [pc, #300]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80079c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079c8:	4b4b      	ldr	r3, [pc, #300]	; (8007af8 <HAL_RCC_OscConfig+0x78c>)
 80079ca:	4013      	ands	r3, r2
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80079d4:	0112      	lsls	r2, r2, #4
 80079d6:	430a      	orrs	r2, r1
 80079d8:	4946      	ldr	r1, [pc, #280]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	628b      	str	r3, [r1, #40]	; 0x28
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	3b01      	subs	r3, #1
 80079e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ec:	3b01      	subs	r3, #1
 80079ee:	025b      	lsls	r3, r3, #9
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	3b01      	subs	r3, #1
 80079fa:	041b      	lsls	r3, r3, #16
 80079fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	3b01      	subs	r3, #1
 8007a08:	061b      	lsls	r3, r3, #24
 8007a0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a0e:	4939      	ldr	r1, [pc, #228]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007a14:	4b37      	ldr	r3, [pc, #220]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	4a36      	ldr	r2, [pc, #216]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a20:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a24:	4b35      	ldr	r3, [pc, #212]	; (8007afc <HAL_RCC_OscConfig+0x790>)
 8007a26:	4013      	ands	r3, r2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a2c:	00d2      	lsls	r2, r2, #3
 8007a2e:	4931      	ldr	r1, [pc, #196]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007a34:	4b2f      	ldr	r3, [pc, #188]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	f023 020c 	bic.w	r2, r3, #12
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	492c      	ldr	r1, [pc, #176]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007a46:	4b2b      	ldr	r3, [pc, #172]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	f023 0202 	bic.w	r2, r3, #2
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	4928      	ldr	r1, [pc, #160]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a58:	4b26      	ldr	r3, [pc, #152]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	4a25      	ldr	r2, [pc, #148]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a64:	4b23      	ldr	r3, [pc, #140]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a22      	ldr	r2, [pc, #136]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007a70:	4b20      	ldr	r3, [pc, #128]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007a7c:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	4a1c      	ldr	r2, [pc, #112]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a88:	4b1a      	ldr	r3, [pc, #104]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a94:	f7fa fe28 	bl	80026e8 <HAL_GetTick>
 8007a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a9c:	f7fa fe24 	bl	80026e8 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e067      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007aae:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0x730>
 8007aba:	e05f      	b.n	8007b7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0c      	ldr	r2, [pc, #48]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7fa fe0e 	bl	80026e8 <HAL_GetTick>
 8007acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ad0:	f7fa fe0a 	bl	80026e8 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e04d      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ae2:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <HAL_RCC_OscConfig+0x788>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x764>
 8007aee:	e045      	b.n	8007b7c <HAL_RCC_OscConfig+0x810>
 8007af0:	58024800 	.word	0x58024800
 8007af4:	58024400 	.word	0x58024400
 8007af8:	fffffc0c 	.word	0xfffffc0c
 8007afc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b00:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <HAL_RCC_OscConfig+0x81c>)
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b06:	4b20      	ldr	r3, [pc, #128]	; (8007b88 <HAL_RCC_OscConfig+0x81c>)
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d031      	beq.n	8007b78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f003 0203 	and.w	r2, r3, #3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d12a      	bne.n	8007b78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	091b      	lsrs	r3, r3, #4
 8007b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d122      	bne.n	8007b78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d11a      	bne.n	8007b78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	0a5b      	lsrs	r3, r3, #9
 8007b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d111      	bne.n	8007b78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d108      	bne.n	8007b78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	0e1b      	lsrs	r3, r3, #24
 8007b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3730      	adds	r7, #48	; 0x30
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	58024400 	.word	0x58024400

08007b8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e19c      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ba0:	4b8a      	ldr	r3, [pc, #552]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d910      	bls.n	8007bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bae:	4b87      	ldr	r3, [pc, #540]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f023 020f 	bic.w	r2, r3, #15
 8007bb6:	4985      	ldr	r1, [pc, #532]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bbe:	4b83      	ldr	r3, [pc, #524]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d001      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e184      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d010      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	4b7b      	ldr	r3, [pc, #492]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d908      	bls.n	8007bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007bec:	4b78      	ldr	r3, [pc, #480]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	4975      	ldr	r1, [pc, #468]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d010      	beq.n	8007c2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	4b70      	ldr	r3, [pc, #448]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d908      	bls.n	8007c2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c1a:	4b6d      	ldr	r3, [pc, #436]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	496a      	ldr	r1, [pc, #424]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d010      	beq.n	8007c5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	4b64      	ldr	r3, [pc, #400]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d908      	bls.n	8007c5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c48:	4b61      	ldr	r3, [pc, #388]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	495e      	ldr	r1, [pc, #376]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d010      	beq.n	8007c88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69da      	ldr	r2, [r3, #28]
 8007c6a:	4b59      	ldr	r3, [pc, #356]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d908      	bls.n	8007c88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007c76:	4b56      	ldr	r3, [pc, #344]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	4953      	ldr	r1, [pc, #332]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d010      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	4b4d      	ldr	r3, [pc, #308]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d908      	bls.n	8007cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ca4:	4b4a      	ldr	r3, [pc, #296]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f023 020f 	bic.w	r2, r3, #15
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4947      	ldr	r1, [pc, #284]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d055      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007cc2:	4b43      	ldr	r3, [pc, #268]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4940      	ldr	r1, [pc, #256]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d107      	bne.n	8007cec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cdc:	4b3c      	ldr	r3, [pc, #240]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d121      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0f6      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d107      	bne.n	8007d04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cf4:	4b36      	ldr	r3, [pc, #216]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d115      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0ea      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d107      	bne.n	8007d1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d0c:	4b30      	ldr	r3, [pc, #192]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d109      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0de      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d1c:	4b2c      	ldr	r3, [pc, #176]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e0d6      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d2c:	4b28      	ldr	r3, [pc, #160]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f023 0207 	bic.w	r2, r3, #7
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4925      	ldr	r1, [pc, #148]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3e:	f7fa fcd3 	bl	80026e8 <HAL_GetTick>
 8007d42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d44:	e00a      	b.n	8007d5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d46:	f7fa fccf 	bl	80026e8 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e0be      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d5c:	4b1c      	ldr	r3, [pc, #112]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1eb      	bne.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	4b14      	ldr	r3, [pc, #80]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d208      	bcs.n	8007d9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f023 020f 	bic.w	r2, r3, #15
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <HAL_RCC_ClockConfig+0x244>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d214      	bcs.n	8007dd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007daa:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f023 020f 	bic.w	r2, r3, #15
 8007db2:	4906      	ldr	r1, [pc, #24]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dba:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <HAL_RCC_ClockConfig+0x240>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d005      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e086      	b.n	8007eda <HAL_RCC_ClockConfig+0x34e>
 8007dcc:	52002000 	.word	0x52002000
 8007dd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d010      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	4b3f      	ldr	r3, [pc, #252]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d208      	bcs.n	8007e02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007df0:	4b3c      	ldr	r3, [pc, #240]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4939      	ldr	r1, [pc, #228]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695a      	ldr	r2, [r3, #20]
 8007e12:	4b34      	ldr	r3, [pc, #208]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d208      	bcs.n	8007e30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e1e:	4b31      	ldr	r3, [pc, #196]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	492e      	ldr	r1, [pc, #184]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	4b28      	ldr	r3, [pc, #160]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d208      	bcs.n	8007e5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e4c:	4b25      	ldr	r3, [pc, #148]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	4922      	ldr	r1, [pc, #136]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d010      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d208      	bcs.n	8007e8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	4917      	ldr	r1, [pc, #92]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e8c:	f000 f834 	bl	8007ef8 <HAL_RCC_GetSysClockFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	4912      	ldr	r1, [pc, #72]	; (8007ee8 <HAL_RCC_ClockConfig+0x35c>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	f003 031f 	and.w	r3, r3, #31
 8007ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <HAL_RCC_ClockConfig+0x358>)
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	; (8007ee8 <HAL_RCC_ClockConfig+0x35c>)
 8007eb4:	5cd3      	ldrb	r3, [r2, r3]
 8007eb6:	f003 031f 	and.w	r3, r3, #31
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <HAL_RCC_ClockConfig+0x360>)
 8007ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ec4:	4a0a      	ldr	r2, [pc, #40]	; (8007ef0 <HAL_RCC_ClockConfig+0x364>)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <HAL_RCC_ClockConfig+0x368>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fa fbc0 	bl	8002654 <HAL_InitTick>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	080205f0 	.word	0x080205f0
 8007eec:	24000004 	.word	0x24000004
 8007ef0:	24000000 	.word	0x24000000
 8007ef4:	24000010 	.word	0x24000010

08007ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007efe:	4bb3      	ldr	r3, [pc, #716]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f06:	2b18      	cmp	r3, #24
 8007f08:	f200 8155 	bhi.w	80081b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	080081b7 	.word	0x080081b7
 8007f1c:	080081b7 	.word	0x080081b7
 8007f20:	080081b7 	.word	0x080081b7
 8007f24:	080081b7 	.word	0x080081b7
 8007f28:	080081b7 	.word	0x080081b7
 8007f2c:	080081b7 	.word	0x080081b7
 8007f30:	080081b7 	.word	0x080081b7
 8007f34:	08007f9f 	.word	0x08007f9f
 8007f38:	080081b7 	.word	0x080081b7
 8007f3c:	080081b7 	.word	0x080081b7
 8007f40:	080081b7 	.word	0x080081b7
 8007f44:	080081b7 	.word	0x080081b7
 8007f48:	080081b7 	.word	0x080081b7
 8007f4c:	080081b7 	.word	0x080081b7
 8007f50:	080081b7 	.word	0x080081b7
 8007f54:	08007fa5 	.word	0x08007fa5
 8007f58:	080081b7 	.word	0x080081b7
 8007f5c:	080081b7 	.word	0x080081b7
 8007f60:	080081b7 	.word	0x080081b7
 8007f64:	080081b7 	.word	0x080081b7
 8007f68:	080081b7 	.word	0x080081b7
 8007f6c:	080081b7 	.word	0x080081b7
 8007f70:	080081b7 	.word	0x080081b7
 8007f74:	08007fab 	.word	0x08007fab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f78:	4b94      	ldr	r3, [pc, #592]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d009      	beq.n	8007f98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f84:	4b91      	ldr	r3, [pc, #580]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	4a90      	ldr	r2, [pc, #576]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007f96:	e111      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f98:	4b8d      	ldr	r3, [pc, #564]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f9a:	61bb      	str	r3, [r7, #24]
    break;
 8007f9c:	e10e      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007f9e:	4b8d      	ldr	r3, [pc, #564]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007fa0:	61bb      	str	r3, [r7, #24]
    break;
 8007fa2:	e10b      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007fa4:	4b8c      	ldr	r3, [pc, #560]	; (80081d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007fa6:	61bb      	str	r3, [r7, #24]
    break;
 8007fa8:	e108      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007faa:	4b88      	ldr	r3, [pc, #544]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007fb4:	4b85      	ldr	r3, [pc, #532]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007fc0:	4b82      	ldr	r3, [pc, #520]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007fca:	4b80      	ldr	r3, [pc, #512]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fce:	08db      	lsrs	r3, r3, #3
 8007fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80e1 	beq.w	80081b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	f000 8083 	beq.w	80080fc <HAL_RCC_GetSysClockFreq+0x204>
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	f200 80a1 	bhi.w	8008140 <HAL_RCC_GetSysClockFreq+0x248>
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_RCC_GetSysClockFreq+0x114>
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d056      	beq.n	80080b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800800a:	e099      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800800c:	4b6f      	ldr	r3, [pc, #444]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d02d      	beq.n	8008074 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008018:	4b6c      	ldr	r3, [pc, #432]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	08db      	lsrs	r3, r3, #3
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	4a6b      	ldr	r2, [pc, #428]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008024:	fa22 f303 	lsr.w	r3, r2, r3
 8008028:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008042:	4b62      	ldr	r3, [pc, #392]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008052:	ed97 6a02 	vldr	s12, [r7, #8]
 8008056:	eddf 5a61 	vldr	s11, [pc, #388]	; 80081dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800805a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008072:	e087      	b.n	8008184 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80081e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008086:	4b51      	ldr	r3, [pc, #324]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008096:	ed97 6a02 	vldr	s12, [r7, #8]
 800809a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80081dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800809e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080b6:	e065      	b.n	8008184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80081e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ca:	4b40      	ldr	r3, [pc, #256]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080da:	ed97 6a02 	vldr	s12, [r7, #8]
 80080de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80081dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80080e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080fa:	e043      	b.n	8008184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008106:	eddf 6a38 	vldr	s13, [pc, #224]	; 80081e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800810a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810e:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008122:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80081dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800813e:	e021      	b.n	8008184 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80081e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800814e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008152:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	ed97 6a02 	vldr	s12, [r7, #8]
 8008166:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80081dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800816a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008182:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008184:	4b11      	ldr	r3, [pc, #68]	; (80081cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008188:	0a5b      	lsrs	r3, r3, #9
 800818a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818e:	3301      	adds	r3, #1
 8008190:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800819c:	edd7 6a07 	vldr	s13, [r7, #28]
 80081a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081a8:	ee17 3a90 	vmov	r3, s15
 80081ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80081ae:	e005      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
    break;
 80081b4:	e002      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081b8:	61bb      	str	r3, [r7, #24]
    break;
 80081ba:	bf00      	nop
  }

  return sysclockfreq;
 80081bc:	69bb      	ldr	r3, [r7, #24]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3724      	adds	r7, #36	; 0x24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	003d0900 	.word	0x003d0900
 80081d8:	007a1200 	.word	0x007a1200
 80081dc:	46000000 	.word	0x46000000
 80081e0:	4c742400 	.word	0x4c742400
 80081e4:	4a742400 	.word	0x4a742400
 80081e8:	4af42400 	.word	0x4af42400

080081ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80081f2:	f7ff fe81 	bl	8007ef8 <HAL_RCC_GetSysClockFreq>
 80081f6:	4602      	mov	r2, r0
 80081f8:	4b10      	ldr	r3, [pc, #64]	; (800823c <HAL_RCC_GetHCLKFreq+0x50>)
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	490f      	ldr	r1, [pc, #60]	; (8008240 <HAL_RCC_GetHCLKFreq+0x54>)
 8008204:	5ccb      	ldrb	r3, [r1, r3]
 8008206:	f003 031f 	and.w	r3, r3, #31
 800820a:	fa22 f303 	lsr.w	r3, r2, r3
 800820e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <HAL_RCC_GetHCLKFreq+0x50>)
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <HAL_RCC_GetHCLKFreq+0x54>)
 800821a:	5cd3      	ldrb	r3, [r2, r3]
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	fa22 f303 	lsr.w	r3, r2, r3
 8008226:	4a07      	ldr	r2, [pc, #28]	; (8008244 <HAL_RCC_GetHCLKFreq+0x58>)
 8008228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800822a:	4a07      	ldr	r2, [pc, #28]	; (8008248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <HAL_RCC_GetHCLKFreq+0x58>)
 8008232:	681b      	ldr	r3, [r3, #0]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	58024400 	.word	0x58024400
 8008240:	080205f0 	.word	0x080205f0
 8008244:	24000004 	.word	0x24000004
 8008248:	24000000 	.word	0x24000000

0800824c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008250:	f7ff ffcc 	bl	80081ec <HAL_RCC_GetHCLKFreq>
 8008254:	4602      	mov	r2, r0
 8008256:	4b06      	ldr	r3, [pc, #24]	; (8008270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	091b      	lsrs	r3, r3, #4
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	4904      	ldr	r1, [pc, #16]	; (8008274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008262:	5ccb      	ldrb	r3, [r1, r3]
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800826c:	4618      	mov	r0, r3
 800826e:	bd80      	pop	{r7, pc}
 8008270:	58024400 	.word	0x58024400
 8008274:	080205f0 	.word	0x080205f0

08008278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800827c:	f7ff ffb6 	bl	80081ec <HAL_RCC_GetHCLKFreq>
 8008280:	4602      	mov	r2, r0
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	4904      	ldr	r1, [pc, #16]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800828e:	5ccb      	ldrb	r3, [r1, r3]
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008298:	4618      	mov	r0, r3
 800829a:	bd80      	pop	{r7, pc}
 800829c:	58024400 	.word	0x58024400
 80082a0:	080205f0 	.word	0x080205f0

080082a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082ac:	2300      	movs	r3, #0
 80082ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082b0:	2300      	movs	r3, #0
 80082b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d03f      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c8:	d02a      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80082ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082ce:	d824      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80082d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d4:	d018      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80082d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082da:	d81e      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80082e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e4:	d007      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80082e6:	e018      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e8:	4bab      	ldr	r3, [pc, #684]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	4aaa      	ldr	r2, [pc, #680]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80082f4:	e015      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	2102      	movs	r1, #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 f9cf 	bl	80096a0 <RCCEx_PLL2_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008306:	e00c      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3324      	adds	r3, #36	; 0x24
 800830c:	2102      	movs	r1, #2
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fa78 	bl	8009804 <RCCEx_PLL3_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008318:	e003      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	75fb      	strb	r3, [r7, #23]
      break;
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008328:	4b9b      	ldr	r3, [pc, #620]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800832a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008334:	4998      	ldr	r1, [pc, #608]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008336:	4313      	orrs	r3, r2
 8008338:	650b      	str	r3, [r1, #80]	; 0x50
 800833a:	e001      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d03d      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008350:	2b04      	cmp	r3, #4
 8008352:	d826      	bhi.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	08008371 	.word	0x08008371
 8008360:	0800837f 	.word	0x0800837f
 8008364:	08008391 	.word	0x08008391
 8008368:	080083a9 	.word	0x080083a9
 800836c:	080083a9 	.word	0x080083a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008370:	4b89      	ldr	r3, [pc, #548]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	4a88      	ldr	r2, [pc, #544]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800837a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800837c:	e015      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3304      	adds	r3, #4
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f001 f98b 	bl	80096a0 <RCCEx_PLL2_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800838e:	e00c      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3324      	adds	r3, #36	; 0x24
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fa34 	bl	8009804 <RCCEx_PLL3_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083a0:	e003      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	75fb      	strb	r3, [r7, #23]
      break;
 80083a6:	e000      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80083a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083b0:	4b79      	ldr	r3, [pc, #484]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	f023 0207 	bic.w	r2, r3, #7
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083bc:	4976      	ldr	r1, [pc, #472]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	650b      	str	r3, [r1, #80]	; 0x50
 80083c2:	e001      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d042      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083dc:	d02b      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80083de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e2:	d825      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80083e4:	2bc0      	cmp	r3, #192	; 0xc0
 80083e6:	d028      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80083e8:	2bc0      	cmp	r3, #192	; 0xc0
 80083ea:	d821      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80083ec:	2b80      	cmp	r3, #128	; 0x80
 80083ee:	d016      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80083f0:	2b80      	cmp	r3, #128	; 0x80
 80083f2:	d81d      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d007      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80083fc:	e018      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083fe:	4b66      	ldr	r3, [pc, #408]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	4a65      	ldr	r2, [pc, #404]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800840a:	e017      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3304      	adds	r3, #4
 8008410:	2100      	movs	r1, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f944 	bl	80096a0 <RCCEx_PLL2_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800841c:	e00e      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3324      	adds	r3, #36	; 0x24
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f001 f9ed 	bl	8009804 <RCCEx_PLL3_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800842e:	e005      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
      break;
 8008434:	e002      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008436:	bf00      	nop
 8008438:	e000      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800843a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008442:	4b55      	ldr	r3, [pc, #340]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844e:	4952      	ldr	r1, [pc, #328]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008450:	4313      	orrs	r3, r2
 8008452:	650b      	str	r3, [r1, #80]	; 0x50
 8008454:	e001      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008462:	2b00      	cmp	r3, #0
 8008464:	d049      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800846c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008470:	d030      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008476:	d82a      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008478:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800847c:	d02c      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800847e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008482:	d824      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008488:	d018      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800848a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800848e:	d81e      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008498:	d007      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800849a:	e018      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4b3e      	ldr	r3, [pc, #248]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4a3d      	ldr	r2, [pc, #244]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084a8:	e017      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 f8f5 	bl	80096a0 <RCCEx_PLL2_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084ba:	e00e      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 f99e 	bl	8009804 <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084cc:	e005      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
      break;
 80084d2:	e002      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80084d4:	bf00      	nop
 80084d6:	e000      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80084d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80084e0:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084ee:	492a      	ldr	r1, [pc, #168]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	658b      	str	r3, [r1, #88]	; 0x58
 80084f4:	e001      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008502:	2b00      	cmp	r3, #0
 8008504:	d04c      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800850c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008510:	d030      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008516:	d82a      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800851c:	d02c      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800851e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008522:	d824      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008528:	d018      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800852a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800852e:	d81e      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008538:	d007      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800853a:	e018      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800853c:	4b16      	ldr	r3, [pc, #88]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4a15      	ldr	r2, [pc, #84]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008548:	e017      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f001 f8a5 	bl	80096a0 <RCCEx_PLL2_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800855a:	e00e      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f94e 	bl	8009804 <RCCEx_PLL3_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800856c:	e005      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]
      break;
 8008572:	e002      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008574:	bf00      	nop
 8008576:	e000      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10d      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800858e:	4902      	ldr	r1, [pc, #8]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008590:	4313      	orrs	r3, r2
 8008592:	658b      	str	r3, [r1, #88]	; 0x58
 8008594:	e004      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008596:	bf00      	nop
 8008598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d032      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d01c      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80085b4:	2b30      	cmp	r3, #48	; 0x30
 80085b6:	d817      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d00c      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d813      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d016      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d10f      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c8:	4baf      	ldr	r3, [pc, #700]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085cc:	4aae      	ldr	r2, [pc, #696]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80085d4:	e00e      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3304      	adds	r3, #4
 80085da:	2102      	movs	r1, #2
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 f85f 	bl	80096a0 <RCCEx_PLL2_Config>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80085e6:	e005      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	75fb      	strb	r3, [r7, #23]
      break;
 80085ec:	e002      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80085ee:	bf00      	nop
 80085f0:	e000      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80085f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d109      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80085fa:	4ba3      	ldr	r3, [pc, #652]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008606:	49a0      	ldr	r1, [pc, #640]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008608:	4313      	orrs	r3, r2
 800860a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800860c:	e001      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d047      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008626:	d030      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800862c:	d82a      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800862e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008632:	d02c      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008638:	d824      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800863a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863e:	d018      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008644:	d81e      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864e:	d007      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008650:	e018      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008652:	4b8d      	ldr	r3, [pc, #564]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	4a8c      	ldr	r2, [pc, #560]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800865c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800865e:	e017      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3304      	adds	r3, #4
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f001 f81a 	bl	80096a0 <RCCEx_PLL2_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008670:	e00e      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3324      	adds	r3, #36	; 0x24
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f001 f8c3 	bl	8009804 <RCCEx_PLL3_Config>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008682:	e005      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	75fb      	strb	r3, [r7, #23]
      break;
 8008688:	e002      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800868e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008696:	4b7c      	ldr	r3, [pc, #496]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a2:	4979      	ldr	r1, [pc, #484]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	650b      	str	r3, [r1, #80]	; 0x50
 80086a8:	e001      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d049      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086c2:	d02e      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80086c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086c8:	d828      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80086ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086ce:	d02a      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80086d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086d4:	d822      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80086d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086da:	d026      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80086dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086e0:	d81c      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80086e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e6:	d010      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80086e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ec:	d816      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01d      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80086f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f6:	d111      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3304      	adds	r3, #4
 80086fc:	2101      	movs	r1, #1
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 ffce 	bl	80096a0 <RCCEx_PLL2_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008708:	e012      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3324      	adds	r3, #36	; 0x24
 800870e:	2101      	movs	r1, #1
 8008710:	4618      	mov	r0, r3
 8008712:	f001 f877 	bl	8009804 <RCCEx_PLL3_Config>
 8008716:	4603      	mov	r3, r0
 8008718:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800871a:	e009      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]
      break;
 8008720:	e006      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008722:	bf00      	nop
 8008724:	e004      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008726:	bf00      	nop
 8008728:	e002      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800872e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008736:	4b54      	ldr	r3, [pc, #336]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008742:	4951      	ldr	r1, [pc, #324]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008744:	4313      	orrs	r3, r2
 8008746:	650b      	str	r3, [r1, #80]	; 0x50
 8008748:	e001      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d04b      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008764:	d02e      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800876a:	d828      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008770:	d02a      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008776:	d822      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800877c:	d026      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800877e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008782:	d81c      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008788:	d010      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800878a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800878e:	d816      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01d      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008798:	d111      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3304      	adds	r3, #4
 800879e:	2101      	movs	r1, #1
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 ff7d 	bl	80096a0 <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087aa:	e012      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	2101      	movs	r1, #1
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 f826 	bl	8009804 <RCCEx_PLL3_Config>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087bc:	e009      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
      break;
 80087c2:	e006      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087c4:	bf00      	nop
 80087c6:	e004      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087c8:	bf00      	nop
 80087ca:	e002      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087cc:	bf00      	nop
 80087ce:	e000      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087d8:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087e6:	4928      	ldr	r1, [pc, #160]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	658b      	str	r3, [r1, #88]	; 0x58
 80087ec:	e001      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d02f      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008806:	d00e      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880c:	d814      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d015      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008816:	d10f      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008818:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a1a      	ldr	r2, [pc, #104]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800881e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008824:	e00c      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3304      	adds	r3, #4
 800882a:	2101      	movs	r1, #1
 800882c:	4618      	mov	r0, r3
 800882e:	f000 ff37 	bl	80096a0 <RCCEx_PLL2_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008836:	e003      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
      break;
 800883c:	e000      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800883e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d109      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008846:	4b10      	ldr	r3, [pc, #64]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008852:	490d      	ldr	r1, [pc, #52]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008854:	4313      	orrs	r3, r2
 8008856:	650b      	str	r3, [r1, #80]	; 0x50
 8008858:	e001      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d033      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	2b03      	cmp	r3, #3
 8008870:	d81c      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	080088b3 	.word	0x080088b3
 800887c:	0800888d 	.word	0x0800888d
 8008880:	0800889b 	.word	0x0800889b
 8008884:	080088b3 	.word	0x080088b3
 8008888:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800888c:	4bb8      	ldr	r3, [pc, #736]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	4ab7      	ldr	r2, [pc, #732]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008898:	e00c      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3304      	adds	r3, #4
 800889e:	2102      	movs	r1, #2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fefd 	bl	80096a0 <RCCEx_PLL2_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088aa:	e003      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]
      break;
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088ba:	4bad      	ldr	r3, [pc, #692]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	f023 0203 	bic.w	r2, r3, #3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c6:	49aa      	ldr	r1, [pc, #680]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088cc:	e001      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8086 	beq.w	80089ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088e0:	4ba4      	ldr	r3, [pc, #656]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4aa3      	ldr	r2, [pc, #652]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80088e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088ec:	f7f9 fefc 	bl	80026e8 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088f2:	e009      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088f4:	f7f9 fef8 	bl	80026e8 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b64      	cmp	r3, #100	; 0x64
 8008900:	d902      	bls.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
        break;
 8008906:	e005      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008908:	4b9a      	ldr	r3, [pc, #616]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008910:	2b00      	cmp	r3, #0
 8008912:	d0ef      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d166      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800891a:	4b95      	ldr	r3, [pc, #596]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800891c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008924:	4053      	eors	r3, r2
 8008926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800892e:	4b90      	ldr	r3, [pc, #576]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008936:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008938:	4b8d      	ldr	r3, [pc, #564]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800893a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893c:	4a8c      	ldr	r2, [pc, #560]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800893e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008942:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008944:	4b8a      	ldr	r3, [pc, #552]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008948:	4a89      	ldr	r2, [pc, #548]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800894a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008950:	4a87      	ldr	r2, [pc, #540]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800895c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008960:	d115      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008962:	f7f9 fec1 	bl	80026e8 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008968:	e00b      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800896a:	f7f9 febd 	bl	80026e8 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f241 3288 	movw	r2, #5000	; 0x1388
 8008978:	4293      	cmp	r3, r2
 800897a:	d902      	bls.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	75fb      	strb	r3, [r7, #23]
            break;
 8008980:	e005      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008982:	4b7b      	ldr	r3, [pc, #492]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0ed      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d126      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800899a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800899e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a2:	d10d      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80089a4:	4b72      	ldr	r3, [pc, #456]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089b2:	0919      	lsrs	r1, r3, #4
 80089b4:	4b70      	ldr	r3, [pc, #448]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80089b6:	400b      	ands	r3, r1
 80089b8:	496d      	ldr	r1, [pc, #436]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	610b      	str	r3, [r1, #16]
 80089be:	e005      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80089c0:	4b6b      	ldr	r3, [pc, #428]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	4a6a      	ldr	r2, [pc, #424]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80089ca:	6113      	str	r3, [r2, #16]
 80089cc:	4b68      	ldr	r3, [pc, #416]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089da:	4965      	ldr	r1, [pc, #404]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	670b      	str	r3, [r1, #112]	; 0x70
 80089e0:	e004      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	75bb      	strb	r3, [r7, #22]
 80089e6:	e001      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d07e      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089fc:	2b28      	cmp	r3, #40	; 0x28
 80089fe:	d867      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008a00:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008ad7 	.word	0x08008ad7
 8008a0c:	08008ad1 	.word	0x08008ad1
 8008a10:	08008ad1 	.word	0x08008ad1
 8008a14:	08008ad1 	.word	0x08008ad1
 8008a18:	08008ad1 	.word	0x08008ad1
 8008a1c:	08008ad1 	.word	0x08008ad1
 8008a20:	08008ad1 	.word	0x08008ad1
 8008a24:	08008ad1 	.word	0x08008ad1
 8008a28:	08008aad 	.word	0x08008aad
 8008a2c:	08008ad1 	.word	0x08008ad1
 8008a30:	08008ad1 	.word	0x08008ad1
 8008a34:	08008ad1 	.word	0x08008ad1
 8008a38:	08008ad1 	.word	0x08008ad1
 8008a3c:	08008ad1 	.word	0x08008ad1
 8008a40:	08008ad1 	.word	0x08008ad1
 8008a44:	08008ad1 	.word	0x08008ad1
 8008a48:	08008abf 	.word	0x08008abf
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008ad1 	.word	0x08008ad1
 8008a54:	08008ad1 	.word	0x08008ad1
 8008a58:	08008ad1 	.word	0x08008ad1
 8008a5c:	08008ad1 	.word	0x08008ad1
 8008a60:	08008ad1 	.word	0x08008ad1
 8008a64:	08008ad1 	.word	0x08008ad1
 8008a68:	08008ad7 	.word	0x08008ad7
 8008a6c:	08008ad1 	.word	0x08008ad1
 8008a70:	08008ad1 	.word	0x08008ad1
 8008a74:	08008ad1 	.word	0x08008ad1
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ad1 	.word	0x08008ad1
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	08008ad1 	.word	0x08008ad1
 8008a88:	08008ad7 	.word	0x08008ad7
 8008a8c:	08008ad1 	.word	0x08008ad1
 8008a90:	08008ad1 	.word	0x08008ad1
 8008a94:	08008ad1 	.word	0x08008ad1
 8008a98:	08008ad1 	.word	0x08008ad1
 8008a9c:	08008ad1 	.word	0x08008ad1
 8008aa0:	08008ad1 	.word	0x08008ad1
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	08008ad7 	.word	0x08008ad7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fdf4 	bl	80096a0 <RCCEx_PLL2_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008abc:	e00c      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3324      	adds	r3, #36	; 0x24
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fe9d 	bl	8009804 <RCCEx_PLL3_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ace:	e003      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad4:	e000      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d109      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aea:	4921      	ldr	r1, [pc, #132]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	654b      	str	r3, [r1, #84]	; 0x54
 8008af0:	e001      	b.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d03e      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b06:	2b05      	cmp	r3, #5
 8008b08:	d820      	bhi.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b53 	.word	0x08008b53
 8008b14:	08008b29 	.word	0x08008b29
 8008b18:	08008b3b 	.word	0x08008b3b
 8008b1c:	08008b53 	.word	0x08008b53
 8008b20:	08008b53 	.word	0x08008b53
 8008b24:	08008b53 	.word	0x08008b53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fdb6 	bl	80096a0 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b38:	e00c      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3324      	adds	r3, #36	; 0x24
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fe5f 	bl	8009804 <RCCEx_PLL3_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b4a:	e003      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d110      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	f023 0207 	bic.w	r2, r3, #7
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b66:	4902      	ldr	r1, [pc, #8]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	654b      	str	r3, [r1, #84]	; 0x54
 8008b6c:	e008      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	58024800 	.word	0x58024800
 8008b78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d039      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d820      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bdf 	.word	0x08008bdf
 8008ba0:	08008bb5 	.word	0x08008bb5
 8008ba4:	08008bc7 	.word	0x08008bc7
 8008ba8:	08008bdf 	.word	0x08008bdf
 8008bac:	08008bdf 	.word	0x08008bdf
 8008bb0:	08008bdf 	.word	0x08008bdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	2101      	movs	r1, #1
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fd70 	bl	80096a0 <RCCEx_PLL2_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008bc4:	e00c      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3324      	adds	r3, #36	; 0x24
 8008bca:	2101      	movs	r1, #1
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fe19 	bl	8009804 <RCCEx_PLL3_Config>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008bd6:	e003      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]
      break;
 8008bdc:	e000      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008be6:	4bb7      	ldr	r3, [pc, #732]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bea:	f023 0207 	bic.w	r2, r3, #7
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf4:	49b3      	ldr	r1, [pc, #716]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	658b      	str	r3, [r1, #88]	; 0x58
 8008bfa:	e001      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d04b      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c16:	d02e      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c1c:	d828      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c22:	d02a      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c28:	d822      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c2e:	d026      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c34:	d81c      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c3a:	d010      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c40:	d816      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d01d      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c4a:	d111      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fd24 	bl	80096a0 <RCCEx_PLL2_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008c5c:	e012      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3324      	adds	r3, #36	; 0x24
 8008c62:	2102      	movs	r1, #2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fdcd 	bl	8009804 <RCCEx_PLL3_Config>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008c6e:	e009      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	75fb      	strb	r3, [r7, #23]
      break;
 8008c74:	e006      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008c76:	bf00      	nop
 8008c78:	e004      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008c7a:	bf00      	nop
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c8a:	4b8e      	ldr	r3, [pc, #568]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c98:	498a      	ldr	r1, [pc, #552]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	654b      	str	r3, [r1, #84]	; 0x54
 8008c9e:	e001      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d04b      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008cba:	d02e      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008cbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008cc0:	d828      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc6:	d02a      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ccc:	d822      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cd2:	d026      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cd8:	d81c      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cde:	d010      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce4:	d816      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d01d      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cee:	d111      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fcd2 	bl	80096a0 <RCCEx_PLL2_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d00:	e012      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	3324      	adds	r3, #36	; 0x24
 8008d06:	2102      	movs	r1, #2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fd7b 	bl	8009804 <RCCEx_PLL3_Config>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d12:	e009      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
      break;
 8008d18:	e006      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d1a:	bf00      	nop
 8008d1c:	e004      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d1e:	bf00      	nop
 8008d20:	e002      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d22:	bf00      	nop
 8008d24:	e000      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d2e:	4b65      	ldr	r3, [pc, #404]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d3c:	4961      	ldr	r1, [pc, #388]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	658b      	str	r3, [r1, #88]	; 0x58
 8008d42:	e001      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d04b      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d5e:	d02e      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008d60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d64:	d828      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6a:	d02a      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d70:	d822      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008d72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d76:	d026      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008d78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d7c:	d81c      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d82:	d010      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d88:	d816      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01d      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d92:	d111      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3304      	adds	r3, #4
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fc80 	bl	80096a0 <RCCEx_PLL2_Config>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008da4:	e012      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3324      	adds	r3, #36	; 0x24
 8008daa:	2102      	movs	r1, #2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fd29 	bl	8009804 <RCCEx_PLL3_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008db6:	e009      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbc:	e006      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008dbe:	bf00      	nop
 8008dc0:	e004      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008dd2:	4b3c      	ldr	r3, [pc, #240]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008de0:	4938      	ldr	r1, [pc, #224]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	658b      	str	r3, [r1, #88]	; 0x58
 8008de6:	e001      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01a      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e02:	d10a      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3324      	adds	r3, #36	; 0x24
 8008e08:	2102      	movs	r1, #2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fcfa 	bl	8009804 <RCCEx_PLL3_Config>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e28:	4926      	ldr	r1, [pc, #152]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d01a      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e44:	d10a      	bne.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3324      	adds	r3, #36	; 0x24
 8008e4a:	2102      	movs	r1, #2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fcd9 	bl	8009804 <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e5c:	4b19      	ldr	r3, [pc, #100]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e6a:	4916      	ldr	r1, [pc, #88]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d036      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e86:	d01f      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e8c:	d817      	bhi.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e96:	d009      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008e98:	e011      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fbfd 	bl	80096a0 <RCCEx_PLL2_Config>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008eaa:	e00e      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3324      	adds	r3, #36	; 0x24
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fca6 	bl	8009804 <RCCEx_PLL3_Config>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ebc:	e005      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec2:	e002      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008ec4:	58024400 	.word	0x58024400
      break;
 8008ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ed0:	4b93      	ldr	r3, [pc, #588]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ede:	4990      	ldr	r1, [pc, #576]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	658b      	str	r3, [r1, #88]	; 0x58
 8008ee4:	e001      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d033      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f00:	d01c      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008f02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f06:	d816      	bhi.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f0c:	d003      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f12:	d007      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008f14:	e00f      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f16:	4b82      	ldr	r3, [pc, #520]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	4a81      	ldr	r2, [pc, #516]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f22:	e00c      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3324      	adds	r3, #36	; 0x24
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fc6a 	bl	8009804 <RCCEx_PLL3_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f34:	e003      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3a:	e000      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f44:	4b76      	ldr	r3, [pc, #472]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f52:	4973      	ldr	r1, [pc, #460]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	654b      	str	r3, [r1, #84]	; 0x54
 8008f58:	e001      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d029      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f76:	d007      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008f78:	e00f      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7a:	4b69      	ldr	r3, [pc, #420]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	4a68      	ldr	r2, [pc, #416]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008f86:	e00b      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fb86 	bl	80096a0 <RCCEx_PLL2_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008f98:	e002      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008fa6:	4b5e      	ldr	r3, [pc, #376]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb2:	495b      	ldr	r1, [pc, #364]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fb8:	e001      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3324      	adds	r3, #36	; 0x24
 8008fce:	2102      	movs	r1, #2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fc17 	bl	8009804 <RCCEx_PLL3_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d030      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ff4:	d017      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ffa:	d811      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009000:	d013      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009006:	d80b      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d010      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800900c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009010:	d106      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009012:	4b43      	ldr	r3, [pc, #268]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	4a42      	ldr	r2, [pc, #264]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800901c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800901e:	e007      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]
      break;
 8009024:	e004      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009026:	bf00      	nop
 8009028:	e002      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800902a:	bf00      	nop
 800902c:	e000      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800902e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009036:	4b3a      	ldr	r3, [pc, #232]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009042:	4937      	ldr	r1, [pc, #220]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	654b      	str	r3, [r1, #84]	; 0x54
 8009048:	e001      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904a:	7dfb      	ldrb	r3, [r7, #23]
 800904c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d008      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800905a:	4b31      	ldr	r3, [pc, #196]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800905c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	492e      	ldr	r1, [pc, #184]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d009      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009078:	4b29      	ldr	r3, [pc, #164]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009086:	4926      	ldr	r1, [pc, #152]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009088:	4313      	orrs	r3, r2
 800908a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009098:	4b21      	ldr	r3, [pc, #132]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800909a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a4:	491e      	ldr	r1, [pc, #120]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090b6:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	4a19      	ldr	r2, [pc, #100]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090c0:	6113      	str	r3, [r2, #16]
 80090c2:	4b17      	ldr	r3, [pc, #92]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090c4:	691a      	ldr	r2, [r3, #16]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80090cc:	4914      	ldr	r1, [pc, #80]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da08      	bge.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e6:	490e      	ldr	r1, [pc, #56]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d009      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090f8:	4b09      	ldr	r3, [pc, #36]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009106:	4906      	ldr	r1, [pc, #24]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009108:	4313      	orrs	r3, r2
 800910a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800910c:	7dbb      	ldrb	r3, [r7, #22]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	e000      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
}
 8009118:	4618      	mov	r0, r3
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	58024400 	.word	0x58024400

08009124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009128:	f7ff f860 	bl	80081ec <HAL_RCC_GetHCLKFreq>
 800912c:	4602      	mov	r2, r0
 800912e:	4b06      	ldr	r3, [pc, #24]	; (8009148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	091b      	lsrs	r3, r3, #4
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	4904      	ldr	r1, [pc, #16]	; (800914c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800913a:	5ccb      	ldrb	r3, [r1, r3]
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009144:	4618      	mov	r0, r3
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58024400 	.word	0x58024400
 800914c:	080205f0 	.word	0x080205f0

08009150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009150:	b480      	push	{r7}
 8009152:	b089      	sub	sp, #36	; 0x24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009158:	4ba1      	ldr	r3, [pc, #644]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009162:	4b9f      	ldr	r3, [pc, #636]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	0b1b      	lsrs	r3, r3, #12
 8009168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800916c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800916e:	4b9c      	ldr	r3, [pc, #624]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800917a:	4b99      	ldr	r3, [pc, #612]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800917c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	fb02 f303 	mul.w	r3, r2, r3
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8111 	beq.w	80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	f000 8083 	beq.w	80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	f200 80a1 	bhi.w	80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d056      	beq.n	8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091ba:	e099      	b.n	80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091bc:	4b88      	ldr	r3, [pc, #544]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d02d      	beq.n	8009224 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091c8:	4b85      	ldr	r3, [pc, #532]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	08db      	lsrs	r3, r3, #3
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	4a84      	ldr	r2, [pc, #528]	; (80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
 80091d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b7b      	ldr	r3, [pc, #492]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a03 	vldr	s12, [r7, #12]
 8009206:	eddf 5a78 	vldr	s11, [pc, #480]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009222:	e087      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80093ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b6a      	ldr	r3, [pc, #424]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a03 	vldr	s12, [r7, #12]
 800924a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009266:	e065      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009272:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927a:	4b59      	ldr	r3, [pc, #356]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800928a:	ed97 6a03 	vldr	s12, [r7, #12]
 800928e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800929a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800929e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092aa:	e043      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092be:	4b48      	ldr	r3, [pc, #288]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80092d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092ee:	e021      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009302:	4b37      	ldr	r3, [pc, #220]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009312:	ed97 6a03 	vldr	s12, [r7, #12]
 8009316:	eddf 5a34 	vldr	s11, [pc, #208]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800931a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009332:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009334:	4b2a      	ldr	r3, [pc, #168]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	0a5b      	lsrs	r3, r3, #9
 800933a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800934a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800934e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800935a:	ee17 2a90 	vmov	r2, s15
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009362:	4b1f      	ldr	r3, [pc, #124]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	0c1b      	lsrs	r3, r3, #16
 8009368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800937c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009388:	ee17 2a90 	vmov	r2, s15
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009390:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	0e1b      	lsrs	r3, r3, #24
 8009396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b6:	ee17 2a90 	vmov	r2, s15
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093be:	e008      	b.n	80093d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	609a      	str	r2, [r3, #8]
}
 80093d2:	bf00      	nop
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	58024400 	.word	0x58024400
 80093e4:	03d09000 	.word	0x03d09000
 80093e8:	46000000 	.word	0x46000000
 80093ec:	4c742400 	.word	0x4c742400
 80093f0:	4a742400 	.word	0x4a742400
 80093f4:	4af42400 	.word	0x4af42400

080093f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	; 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009400:	4ba1      	ldr	r3, [pc, #644]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800940a:	4b9f      	ldr	r3, [pc, #636]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	0d1b      	lsrs	r3, r3, #20
 8009410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009416:	4b9c      	ldr	r3, [pc, #624]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009422:	4b99      	ldr	r3, [pc, #612]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009426:	08db      	lsrs	r3, r3, #3
 8009428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 8111 	beq.w	8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b02      	cmp	r3, #2
 800944a:	f000 8083 	beq.w	8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b02      	cmp	r3, #2
 8009452:	f200 80a1 	bhi.w	8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d056      	beq.n	8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009462:	e099      	b.n	8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009464:	4b88      	ldr	r3, [pc, #544]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d02d      	beq.n	80094cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009470:	4b85      	ldr	r3, [pc, #532]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	08db      	lsrs	r3, r3, #3
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	4a84      	ldr	r2, [pc, #528]	; (800968c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949a:	4b7b      	ldr	r3, [pc, #492]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094ca:	e087      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009694 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80094da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094de:	4b6a      	ldr	r3, [pc, #424]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80094f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800950a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800950e:	e065      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800951e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009522:	4b59      	ldr	r3, [pc, #356]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009532:	ed97 6a03 	vldr	s12, [r7, #12]
 8009536:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800953a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800954a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009552:	e043      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800969c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009566:	4b48      	ldr	r3, [pc, #288]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009576:	ed97 6a03 	vldr	s12, [r7, #12]
 800957a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800957e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800958a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009596:	e021      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095aa:	4b37      	ldr	r3, [pc, #220]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80095be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80095dc:	4b2a      	ldr	r3, [pc, #168]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	0a5b      	lsrs	r3, r3, #9
 80095e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009602:	ee17 2a90 	vmov	r2, s15
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800960a:	4b1f      	ldr	r3, [pc, #124]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	0c1b      	lsrs	r3, r3, #16
 8009610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009624:	edd7 6a07 	vldr	s13, [r7, #28]
 8009628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800962c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009630:	ee17 2a90 	vmov	r2, s15
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009638:	4b13      	ldr	r3, [pc, #76]	; (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963c:	0e1b      	lsrs	r3, r3, #24
 800963e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800964e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009652:	edd7 6a07 	vldr	s13, [r7, #28]
 8009656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800965a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800965e:	ee17 2a90 	vmov	r2, s15
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009666:	e008      	b.n	800967a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	609a      	str	r2, [r3, #8]
}
 800967a:	bf00      	nop
 800967c:	3724      	adds	r7, #36	; 0x24
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	58024400 	.word	0x58024400
 800968c:	03d09000 	.word	0x03d09000
 8009690:	46000000 	.word	0x46000000
 8009694:	4c742400 	.word	0x4c742400
 8009698:	4a742400 	.word	0x4a742400
 800969c:	4af42400 	.word	0x4af42400

080096a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096ae:	4b53      	ldr	r3, [pc, #332]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d101      	bne.n	80096be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e099      	b.n	80097f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80096be:	4b4f      	ldr	r3, [pc, #316]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a4e      	ldr	r2, [pc, #312]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80096c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ca:	f7f9 f80d 	bl	80026e8 <HAL_GetTick>
 80096ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096d0:	e008      	b.n	80096e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80096d2:	f7f9 f809 	bl	80026e8 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d901      	bls.n	80096e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e086      	b.n	80097f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096e4:	4b45      	ldr	r3, [pc, #276]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f0      	bne.n	80096d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80096f0:	4b42      	ldr	r3, [pc, #264]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80096f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	031b      	lsls	r3, r3, #12
 80096fe:	493f      	ldr	r1, [pc, #252]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009700:	4313      	orrs	r3, r2
 8009702:	628b      	str	r3, [r1, #40]	; 0x28
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	3b01      	subs	r3, #1
 800970a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	3b01      	subs	r3, #1
 8009714:	025b      	lsls	r3, r3, #9
 8009716:	b29b      	uxth	r3, r3
 8009718:	431a      	orrs	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	3b01      	subs	r3, #1
 8009720:	041b      	lsls	r3, r3, #16
 8009722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	3b01      	subs	r3, #1
 800972e:	061b      	lsls	r3, r3, #24
 8009730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009734:	4931      	ldr	r1, [pc, #196]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009736:	4313      	orrs	r3, r2
 8009738:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800973a:	4b30      	ldr	r3, [pc, #192]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 800973c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	492d      	ldr	r1, [pc, #180]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009748:	4313      	orrs	r3, r2
 800974a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800974c:	4b2b      	ldr	r3, [pc, #172]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	f023 0220 	bic.w	r2, r3, #32
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	4928      	ldr	r1, [pc, #160]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 800975a:	4313      	orrs	r3, r2
 800975c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800975e:	4b27      	ldr	r3, [pc, #156]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	4a26      	ldr	r2, [pc, #152]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009764:	f023 0310 	bic.w	r3, r3, #16
 8009768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800976a:	4b24      	ldr	r3, [pc, #144]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 800976c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800976e:	4b24      	ldr	r3, [pc, #144]	; (8009800 <RCCEx_PLL2_Config+0x160>)
 8009770:	4013      	ands	r3, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	69d2      	ldr	r2, [r2, #28]
 8009776:	00d2      	lsls	r2, r2, #3
 8009778:	4920      	ldr	r1, [pc, #128]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 800977a:	4313      	orrs	r3, r2
 800977c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800977e:	4b1f      	ldr	r3, [pc, #124]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	4a1e      	ldr	r2, [pc, #120]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009784:	f043 0310 	orr.w	r3, r3, #16
 8009788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009790:	4b1a      	ldr	r3, [pc, #104]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4a19      	ldr	r2, [pc, #100]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 8009796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800979a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800979c:	e00f      	b.n	80097be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d106      	bne.n	80097b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80097a4:	4b15      	ldr	r3, [pc, #84]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	4a14      	ldr	r2, [pc, #80]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097b0:	e005      	b.n	80097be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80097b2:	4b12      	ldr	r3, [pc, #72]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	4a11      	ldr	r2, [pc, #68]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80097be:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a0e      	ldr	r2, [pc, #56]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ca:	f7f8 ff8d 	bl	80026e8 <HAL_GetTick>
 80097ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097d0:	e008      	b.n	80097e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80097d2:	f7f8 ff89 	bl	80026e8 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d901      	bls.n	80097e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e006      	b.n	80097f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <RCCEx_PLL2_Config+0x15c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0f0      	beq.n	80097d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	58024400 	.word	0x58024400
 8009800:	ffff0007 	.word	0xffff0007

08009804 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009812:	4b53      	ldr	r3, [pc, #332]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	2b03      	cmp	r3, #3
 800981c:	d101      	bne.n	8009822 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e099      	b.n	8009956 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009822:	4b4f      	ldr	r3, [pc, #316]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a4e      	ldr	r2, [pc, #312]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800982c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800982e:	f7f8 ff5b 	bl	80026e8 <HAL_GetTick>
 8009832:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009834:	e008      	b.n	8009848 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009836:	f7f8 ff57 	bl	80026e8 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d901      	bls.n	8009848 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e086      	b.n	8009956 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009848:	4b45      	ldr	r3, [pc, #276]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1f0      	bne.n	8009836 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009854:	4b42      	ldr	r3, [pc, #264]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	051b      	lsls	r3, r3, #20
 8009862:	493f      	ldr	r1, [pc, #252]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009864:	4313      	orrs	r3, r2
 8009866:	628b      	str	r3, [r1, #40]	; 0x28
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	3b01      	subs	r3, #1
 800986e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	3b01      	subs	r3, #1
 8009878:	025b      	lsls	r3, r3, #9
 800987a:	b29b      	uxth	r3, r3
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	3b01      	subs	r3, #1
 8009884:	041b      	lsls	r3, r3, #16
 8009886:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	3b01      	subs	r3, #1
 8009892:	061b      	lsls	r3, r3, #24
 8009894:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009898:	4931      	ldr	r1, [pc, #196]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 800989a:	4313      	orrs	r3, r2
 800989c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800989e:	4b30      	ldr	r3, [pc, #192]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	492d      	ldr	r1, [pc, #180]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80098b0:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	4928      	ldr	r1, [pc, #160]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80098c2:	4b27      	ldr	r3, [pc, #156]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	4a26      	ldr	r2, [pc, #152]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098ce:	4b24      	ldr	r3, [pc, #144]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098d2:	4b24      	ldr	r3, [pc, #144]	; (8009964 <RCCEx_PLL3_Config+0x160>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	69d2      	ldr	r2, [r2, #28]
 80098da:	00d2      	lsls	r2, r2, #3
 80098dc:	4920      	ldr	r1, [pc, #128]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80098e2:	4b1f      	ldr	r3, [pc, #124]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e6:	4a1e      	ldr	r2, [pc, #120]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80098f4:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	4a19      	ldr	r2, [pc, #100]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 80098fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80098fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009900:	e00f      	b.n	8009922 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d106      	bne.n	8009916 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009908:	4b15      	ldr	r3, [pc, #84]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	4a14      	ldr	r2, [pc, #80]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 800990e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009912:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009914:	e005      	b.n	8009922 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009916:	4b12      	ldr	r3, [pc, #72]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	4a11      	ldr	r2, [pc, #68]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 800991c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009920:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a0e      	ldr	r2, [pc, #56]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 8009928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800992c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800992e:	f7f8 fedb 	bl	80026e8 <HAL_GetTick>
 8009932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009934:	e008      	b.n	8009948 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009936:	f7f8 fed7 	bl	80026e8 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d901      	bls.n	8009948 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e006      	b.n	8009956 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <RCCEx_PLL3_Config+0x15c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0f0      	beq.n	8009936 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
 8009964:	ffff0007 	.word	0xffff0007

08009968 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e0eb      	b.n	8009b56 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a75      	ldr	r2, [pc, #468]	; (8009b60 <HAL_SPI_Init+0x1f8>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d00f      	beq.n	80099ae <HAL_SPI_Init+0x46>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a74      	ldr	r2, [pc, #464]	; (8009b64 <HAL_SPI_Init+0x1fc>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d00a      	beq.n	80099ae <HAL_SPI_Init+0x46>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a72      	ldr	r2, [pc, #456]	; (8009b68 <HAL_SPI_Init+0x200>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d005      	beq.n	80099ae <HAL_SPI_Init+0x46>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2b0f      	cmp	r3, #15
 80099a8:	d901      	bls.n	80099ae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e0d3      	b.n	8009b56 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f8aa 	bl	800ab08 <SPI_GetPacketSize>
 80099b4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a69      	ldr	r2, [pc, #420]	; (8009b60 <HAL_SPI_Init+0x1f8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00c      	beq.n	80099da <HAL_SPI_Init+0x72>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a67      	ldr	r2, [pc, #412]	; (8009b64 <HAL_SPI_Init+0x1fc>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d007      	beq.n	80099da <HAL_SPI_Init+0x72>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a66      	ldr	r2, [pc, #408]	; (8009b68 <HAL_SPI_Init+0x200>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d002      	beq.n	80099da <HAL_SPI_Init+0x72>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d811      	bhi.n	80099fe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80099de:	4a60      	ldr	r2, [pc, #384]	; (8009b60 <HAL_SPI_Init+0x1f8>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d009      	beq.n	80099f8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a5e      	ldr	r2, [pc, #376]	; (8009b64 <HAL_SPI_Init+0x1fc>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d004      	beq.n	80099f8 <HAL_SPI_Init+0x90>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a5d      	ldr	r2, [pc, #372]	; (8009b68 <HAL_SPI_Init+0x200>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d104      	bne.n	8009a02 <HAL_SPI_Init+0x9a>
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b10      	cmp	r3, #16
 80099fc:	d901      	bls.n	8009a02 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e0a9      	b.n	8009b56 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f7 ffbe 	bl	8001998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 0201 	bic.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a3c:	d119      	bne.n	8009a72 <HAL_SPI_Init+0x10a>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a46:	d103      	bne.n	8009a50 <HAL_SPI_Init+0xe8>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d008      	beq.n	8009a62 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10c      	bne.n	8009a72 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a60:	d107      	bne.n	8009a72 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69da      	ldr	r2, [r3, #28]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a84:	ea42 0103 	orr.w	r1, r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	430a      	orrs	r2, r1
 8009a92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ad2:	ea42 0103 	orr.w	r1, r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d113      	bne.n	8009b12 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009afc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 0201 	bic.w	r2, r2, #1
 8009b20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	40013000 	.word	0x40013000
 8009b64:	40003800 	.word	0x40003800
 8009b68:	40003c00 	.word	0x40003c00

08009b6c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3320      	adds	r3, #32
 8009b82:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_SPI_Transmit+0x2a>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e1d7      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b9e:	f7f8 fda3 	bl	80026e8 <HAL_GetTick>
 8009ba2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d007      	beq.n	8009bc0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009bbc:	7efb      	ldrb	r3, [r7, #27]
 8009bbe:	e1c2      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_SPI_Transmit+0x60>
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d107      	bne.n	8009bdc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009bd8:	7efb      	ldrb	r3, [r7, #27]
 8009bda:	e1b4      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2203      	movs	r2, #3
 8009be0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	88fa      	ldrh	r2, [r7, #6]
 8009bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	88fa      	ldrh	r2, [r7, #6]
 8009bfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009c2c:	d107      	bne.n	8009c3e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	4b96      	ldr	r3, [pc, #600]	; (8009ea0 <HAL_SPI_Transmit+0x334>)
 8009c46:	4013      	ands	r3, r2
 8009c48:	88f9      	ldrh	r1, [r7, #6]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	6812      	ldr	r2, [r2, #0]
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f042 0201 	orr.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c6a:	d107      	bne.n	8009c7c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b0f      	cmp	r3, #15
 8009c82:	d947      	bls.n	8009d14 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c84:	e03f      	b.n	8009d06 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d114      	bne.n	8009cbe <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca4:	1d1a      	adds	r2, r3, #4
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cbc:	e023      	b.n	8009d06 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cbe:	f7f8 fd13 	bl	80026e8 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d803      	bhi.n	8009cd6 <HAL_SPI_Transmit+0x16a>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d102      	bne.n	8009cdc <HAL_SPI_Transmit+0x170>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d114      	bne.n	8009d06 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fe45 	bl	800a96c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e11f      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1b9      	bne.n	8009c86 <HAL_SPI_Transmit+0x11a>
 8009d12:	e0f2      	b.n	8009efa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	f240 80e7 	bls.w	8009eec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009d1e:	e05d      	b.n	8009ddc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d132      	bne.n	8009d94 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d918      	bls.n	8009d6c <HAL_SPI_Transmit+0x200>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d014      	beq.n	8009d6c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6812      	ldr	r2, [r2, #0]
 8009d4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	1d1a      	adds	r2, r3, #4
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	3b02      	subs	r3, #2
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d6a:	e037      	b.n	8009ddc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d70:	881a      	ldrh	r2, [r3, #0]
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7a:	1c9a      	adds	r2, r3, #2
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d92:	e023      	b.n	8009ddc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d94:	f7f8 fca8 	bl	80026e8 <HAL_GetTick>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d803      	bhi.n	8009dac <HAL_SPI_Transmit+0x240>
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009daa:	d102      	bne.n	8009db2 <HAL_SPI_Transmit+0x246>
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d114      	bne.n	8009ddc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 fdda 	bl	800a96c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e0b4      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d19b      	bne.n	8009d20 <HAL_SPI_Transmit+0x1b4>
 8009de8:	e087      	b.n	8009efa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d155      	bne.n	8009ea4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d918      	bls.n	8009e36 <HAL_SPI_Transmit+0x2ca>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d914      	bls.n	8009e36 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6812      	ldr	r2, [r2, #0]
 8009e16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1c:	1d1a      	adds	r2, r3, #4
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b04      	subs	r3, #4
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e34:	e05a      	b.n	8009eec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d917      	bls.n	8009e72 <HAL_SPI_Transmit+0x306>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d013      	beq.n	8009e72 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e4e:	881a      	ldrh	r2, [r3, #0]
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e58:	1c9a      	adds	r2, r3, #2
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	3b02      	subs	r3, #2
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e70:	e03c      	b.n	8009eec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3320      	adds	r3, #32
 8009e7c:	7812      	ldrb	r2, [r2, #0]
 8009e7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e9c:	e026      	b.n	8009eec <HAL_SPI_Transmit+0x380>
 8009e9e:	bf00      	nop
 8009ea0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ea4:	f7f8 fc20 	bl	80026e8 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d803      	bhi.n	8009ebc <HAL_SPI_Transmit+0x350>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d102      	bne.n	8009ec2 <HAL_SPI_Transmit+0x356>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d114      	bne.n	8009eec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 fd52 	bl	800a96c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e02c      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f af78 	bne.w	8009dea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	2200      	movs	r2, #0
 8009f02:	2108      	movs	r1, #8
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 fdd1 	bl	800aaac <SPI_WaitOnFlagUntilTimeout>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d007      	beq.n	8009f20 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f16:	f043 0220 	orr.w	r2, r3, #32
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fd23 	bl	800a96c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e000      	b.n	8009f46 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009f44:	7efb      	ldrb	r3, [r7, #27]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop

08009f50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08e      	sub	sp, #56	; 0x38
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3320      	adds	r3, #32
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3330      	adds	r3, #48	; 0x30
 8009f72:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_SPI_TransmitReceive+0x32>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e2ce      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f8a:	f7f8 fbad 	bl	80026e8 <HAL_GetTick>
 8009f8e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009f90:	887b      	ldrh	r3, [r7, #2]
 8009f92:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009f94:	887b      	ldrh	r3, [r7, #2]
 8009f96:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f9e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009fa6:	7efb      	ldrb	r3, [r7, #27]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d014      	beq.n	8009fd6 <HAL_SPI_TransmitReceive+0x86>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fb2:	d106      	bne.n	8009fc2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <HAL_SPI_TransmitReceive+0x72>
 8009fbc:	7efb      	ldrb	r3, [r7, #27]
 8009fbe:	2b04      	cmp	r3, #4
 8009fc0:	d009      	beq.n	8009fd6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fd4:	e2a4      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_SPI_TransmitReceive+0x98>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <HAL_SPI_TransmitReceive+0x98>
 8009fe2:	887b      	ldrh	r3, [r7, #2]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d109      	bne.n	8009ffc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ffa:	e291      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b04      	cmp	r3, #4
 800a006:	d003      	beq.n	800a010 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2205      	movs	r2, #5
 800a00c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	887a      	ldrh	r2, [r7, #2]
 800a022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	887a      	ldrh	r2, [r7, #2]
 800a02a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	887a      	ldrh	r2, [r7, #2]
 800a038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	887a      	ldrh	r2, [r7, #2]
 800a040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	4b9f      	ldr	r3, [pc, #636]	; (800a2d4 <HAL_SPI_TransmitReceive+0x384>)
 800a058:	4013      	ands	r3, r2
 800a05a:	8879      	ldrh	r1, [r7, #2]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	430b      	orrs	r3, r1
 800a062:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0201 	orr.w	r2, r2, #1
 800a072:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a07c:	d107      	bne.n	800a08e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a08c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	2b0f      	cmp	r3, #15
 800a094:	d970      	bls.n	800a178 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a096:	e068      	b.n	800a16a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d11a      	bne.n	800a0dc <HAL_SPI_TransmitReceive+0x18c>
 800a0a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d017      	beq.n	800a0dc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0bc:	1d1a      	adds	r2, r3, #4
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0da:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	695a      	ldr	r2, [r3, #20]
 800a0e2:	f248 0308 	movw	r3, #32776	; 0x8008
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01a      	beq.n	800a122 <HAL_SPI_TransmitReceive+0x1d2>
 800a0ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d017      	beq.n	800a122 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a0fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a102:	1d1a      	adds	r2, r3, #4
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a10e:	b29b      	uxth	r3, r3
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a120:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a122:	f7f8 fae1 	bl	80026e8 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a12e:	429a      	cmp	r2, r3
 800a130:	d803      	bhi.n	800a13a <HAL_SPI_TransmitReceive+0x1ea>
 800a132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d102      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x1f0>
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d114      	bne.n	800a16a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 fc13 	bl	800a96c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e1da      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a16a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d193      	bne.n	800a098 <HAL_SPI_TransmitReceive+0x148>
 800a170:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d190      	bne.n	800a098 <HAL_SPI_TransmitReceive+0x148>
 800a176:	e1ac      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b07      	cmp	r3, #7
 800a17e:	f240 81a0 	bls.w	800a4c2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a182:	e0a9      	b.n	800a2d8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d139      	bne.n	800a206 <HAL_SPI_TransmitReceive+0x2b6>
 800a192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a194:	2b00      	cmp	r3, #0
 800a196:	d036      	beq.n	800a206 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a198:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d91c      	bls.n	800a1d8 <HAL_SPI_TransmitReceive+0x288>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d018      	beq.n	800a1d8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b6:	1d1a      	adds	r2, r3, #4
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b02      	subs	r3, #2
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a1d6:	e016      	b.n	800a206 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1dc:	881a      	ldrh	r2, [r3, #0]
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e6:	1c9a      	adds	r2, r3, #2
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a204:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d03a      	beq.n	800a28a <HAL_SPI_TransmitReceive+0x33a>
 800a214:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d037      	beq.n	800a28a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d018      	beq.n	800a25a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a232:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a238:	1d1a      	adds	r2, r3, #4
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a244:	b29b      	uxth	r3, r3
 800a246:	3b02      	subs	r3, #2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a256:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a258:	e017      	b.n	800a28a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a25e:	6a3a      	ldr	r2, [r7, #32]
 800a260:	8812      	ldrh	r2, [r2, #0]
 800a262:	b292      	uxth	r2, r2
 800a264:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a26a:	1c9a      	adds	r2, r3, #2
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a276:	b29b      	uxth	r3, r3
 800a278:	3b01      	subs	r3, #1
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a288:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a28a:	f7f8 fa2d 	bl	80026e8 <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a296:	429a      	cmp	r2, r3
 800a298:	d803      	bhi.n	800a2a2 <HAL_SPI_TransmitReceive+0x352>
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a0:	d102      	bne.n	800a2a8 <HAL_SPI_TransmitReceive+0x358>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d117      	bne.n	800a2d8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fb5f 	bl	800a96c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e126      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
 800a2d2:	bf00      	nop
 800a2d4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a2d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f47f af52 	bne.w	800a184 <HAL_SPI_TransmitReceive+0x234>
 800a2e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f47f af4e 	bne.w	800a184 <HAL_SPI_TransmitReceive+0x234>
 800a2e8:	e0f3      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	f003 0302 	and.w	r3, r3, #2
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d15a      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x45e>
 800a2f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d057      	beq.n	800a3ae <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a2fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a300:	2b03      	cmp	r3, #3
 800a302:	d91c      	bls.n	800a33e <HAL_SPI_TransmitReceive+0x3ee>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a308:	2b40      	cmp	r3, #64	; 0x40
 800a30a:	d918      	bls.n	800a33e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6812      	ldr	r2, [r2, #0]
 800a316:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a31c:	1d1a      	adds	r2, r3, #4
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b04      	subs	r3, #4
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a33a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a33c:	e037      	b.n	800a3ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a33e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a340:	2b01      	cmp	r3, #1
 800a342:	d91b      	bls.n	800a37c <HAL_SPI_TransmitReceive+0x42c>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a350:	881a      	ldrh	r2, [r3, #0]
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a35a:	1c9a      	adds	r2, r3, #2
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a366:	b29b      	uxth	r3, r3
 800a368:	3b02      	subs	r3, #2
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a378:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a37a:	e018      	b.n	800a3ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3320      	adds	r3, #32
 800a386:	7812      	ldrb	r2, [r2, #0]
 800a388:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	1c5a      	adds	r2, r3, #1
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d05e      	beq.n	800a47a <HAL_SPI_TransmitReceive+0x52a>
 800a3bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d05b      	beq.n	800a47a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d018      	beq.n	800a402 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b04      	subs	r3, #4
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a400:	e03b      	b.n	800a47a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a410:	d918      	bls.n	800a444 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a416:	6a3a      	ldr	r2, [r7, #32]
 800a418:	8812      	ldrh	r2, [r2, #0]
 800a41a:	b292      	uxth	r2, r2
 800a41c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a422:	1c9a      	adds	r2, r3, #2
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a42e:	b29b      	uxth	r3, r3
 800a430:	3b02      	subs	r3, #2
 800a432:	b29a      	uxth	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a440:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a442:	e01a      	b.n	800a47a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a450:	7812      	ldrb	r2, [r2, #0]
 800a452:	b2d2      	uxtb	r2, r2
 800a454:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b01      	subs	r3, #1
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a478:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a47a:	f7f8 f935 	bl	80026e8 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a486:	429a      	cmp	r2, r3
 800a488:	d803      	bhi.n	800a492 <HAL_SPI_TransmitReceive+0x542>
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d102      	bne.n	800a498 <HAL_SPI_TransmitReceive+0x548>
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	2b00      	cmp	r3, #0
 800a496:	d114      	bne.n	800a4c2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 fa67 	bl	800a96c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e02e      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a4c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f47f af10 	bne.w	800a2ea <HAL_SPI_TransmitReceive+0x39a>
 800a4ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f47f af0c 	bne.w	800a2ea <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2108      	movs	r1, #8
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f000 fae5 	bl	800aaac <SPI_WaitOnFlagUntilTimeout>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ee:	f043 0220 	orr.w	r2, r3, #32
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fa37 	bl	800a96c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e001      	b.n	800a520 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a51c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a520:	4618      	mov	r0, r3
 800a522:	3730      	adds	r7, #48	; 0x30
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a540:	6a3a      	ldr	r2, [r7, #32]
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	4013      	ands	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a550:	2300      	movs	r3, #0
 800a552:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a55a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3330      	adds	r3, #48	; 0x30
 800a562:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d113      	bne.n	800a596 <HAL_SPI_IRQHandler+0x6e>
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	f003 0320 	and.w	r3, r3, #32
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10e      	bne.n	800a596 <HAL_SPI_IRQHandler+0x6e>
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
    handled = 1UL;
 800a592:	2301      	movs	r3, #1
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10f      	bne.n	800a5c0 <HAL_SPI_IRQHandler+0x98>
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <HAL_SPI_IRQHandler+0x98>
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d105      	bne.n	800a5c0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
    handled = 1UL;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10f      	bne.n	800a5ea <HAL_SPI_IRQHandler+0xc2>
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	f003 0302 	and.w	r3, r3, #2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00a      	beq.n	800a5ea <HAL_SPI_IRQHandler+0xc2>
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	f003 0304 	and.w	r3, r3, #4
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
    handled = 1UL;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f040 816f 	bne.w	800a8d0 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 80a0 	beq.w	800a73e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	699a      	ldr	r2, [r3, #24]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0208 	orr.w	r2, r2, #8
 800a60c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0210 	orr.w	r2, r2, #16
 800a61c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	699a      	ldr	r2, [r3, #24]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a62c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	691a      	ldr	r2, [r3, #16]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0208 	bic.w	r2, r2, #8
 800a63c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00f      	beq.n	800a668 <HAL_SPI_IRQHandler+0x140>
 800a648:	7cfb      	ldrb	r3, [r7, #19]
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d004      	beq.n	800a658 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a652:	69db      	ldr	r3, [r3, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d007      	beq.n	800a668 <HAL_SPI_IRQHandler+0x140>
 800a658:	7cfb      	ldrb	r3, [r7, #19]
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d059      	beq.n	800a712 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d154      	bne.n	800a712 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d13d      	bne.n	800a6f2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a676:	e036      	b.n	800a6e6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	2b0f      	cmp	r3, #15
 800a67e:	d90b      	bls.n	800a698 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a68a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a690:	1d1a      	adds	r2, r3, #4
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	665a      	str	r2, [r3, #100]	; 0x64
 800a696:	e01d      	b.n	800a6d4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	2b07      	cmp	r3, #7
 800a69e:	d90b      	bls.n	800a6b8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	8812      	ldrh	r2, [r2, #0]
 800a6a8:	b292      	uxth	r2, r2
 800a6aa:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b0:	1c9a      	adds	r2, r3, #2
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	665a      	str	r2, [r3, #100]	; 0x64
 800a6b6:	e00d      	b.n	800a6d4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c4:	7812      	ldrb	r2, [r2, #0]
 800a6c6:	b2d2      	uxtb	r2, r2
 800a6c8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1c2      	bne.n	800a678 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f93a 	bl	800a96c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f90a 	bl	800a924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a710:	e0e3      	b.n	800a8da <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a712:	7cfb      	ldrb	r3, [r7, #19]
 800a714:	2b05      	cmp	r3, #5
 800a716:	d103      	bne.n	800a720 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f8f9 	bl	800a910 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a71e:	e0d9      	b.n	800a8d4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a720:	7cfb      	ldrb	r3, [r7, #19]
 800a722:	2b04      	cmp	r3, #4
 800a724:	d103      	bne.n	800a72e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f8e8 	bl	800a8fc <HAL_SPI_RxCpltCallback>
    return;
 800a72c:	e0d2      	b.n	800a8d4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a72e:	7cfb      	ldrb	r3, [r7, #19]
 800a730:	2b03      	cmp	r3, #3
 800a732:	f040 80cf 	bne.w	800a8d4 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f8d6 	bl	800a8e8 <HAL_SPI_TxCpltCallback>
    return;
 800a73c:	e0ca      	b.n	800a8d4 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00d      	beq.n	800a764 <HAL_SPI_IRQHandler+0x23c>
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	f003 0308 	and.w	r3, r3, #8
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d008      	beq.n	800a764 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	699a      	ldr	r2, [r3, #24]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a760:	619a      	str	r2, [r3, #24]

    return;
 800a762:	e0ba      	b.n	800a8da <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80b5 	beq.w	800a8da <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00f      	beq.n	800a79a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a780:	f043 0204 	orr.w	r2, r3, #4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	699a      	ldr	r2, [r3, #24]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a798:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00f      	beq.n	800a7c4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7aa:	f043 0201 	orr.w	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699a      	ldr	r2, [r3, #24]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00f      	beq.n	800a7ee <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7d4:	f043 0208 	orr.w	r2, r3, #8
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	f003 0320 	and.w	r3, r3, #32
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00f      	beq.n	800a818 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f042 0220 	orr.w	r2, r2, #32
 800a816:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d05a      	beq.n	800a8d8 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 0201 	bic.w	r2, r2, #1
 800a830:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6919      	ldr	r1, [r3, #16]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	4b28      	ldr	r3, [pc, #160]	; (800a8e0 <HAL_SPI_IRQHandler+0x3b8>)
 800a83e:	400b      	ands	r3, r1
 800a840:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a848:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a84c:	d138      	bne.n	800a8c0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a85c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a862:	2b00      	cmp	r3, #0
 800a864:	d013      	beq.n	800a88e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <HAL_SPI_IRQHandler+0x3bc>)
 800a86c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a872:	4618      	mov	r0, r3
 800a874:	f7f8 fc70 	bl	8003158 <HAL_DMA_Abort_IT>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a884:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a892:	2b00      	cmp	r3, #0
 800a894:	d020      	beq.n	800a8d8 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a89a:	4a12      	ldr	r2, [pc, #72]	; (800a8e4 <HAL_SPI_IRQHandler+0x3bc>)
 800a89c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7f8 fc58 	bl	8003158 <HAL_DMA_Abort_IT>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d014      	beq.n	800a8d8 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a8be:	e00b      	b.n	800a8d8 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f82b 	bl	800a924 <HAL_SPI_ErrorCallback>
    return;
 800a8ce:	e003      	b.n	800a8d8 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a8d0:	bf00      	nop
 800a8d2:	e002      	b.n	800a8da <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a8d4:	bf00      	nop
 800a8d6:	e000      	b.n	800a8da <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a8d8:	bf00      	nop
  }
}
 800a8da:	3728      	adds	r7, #40	; 0x28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	fffffc94 	.word	0xfffffc94
 800a8e4:	0800a939 	.word	0x0800a939

0800a8e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff ffe0 	bl	800a924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699a      	ldr	r2, [r3, #24]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0208 	orr.w	r2, r2, #8
 800a98a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699a      	ldr	r2, [r3, #24]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 0210 	orr.w	r2, r2, #16
 800a99a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6919      	ldr	r1, [r3, #16]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4b3c      	ldr	r3, [pc, #240]	; (800aaa8 <SPI_CloseTransfer+0x13c>)
 800a9b8:	400b      	ands	r3, r1
 800a9ba:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689a      	ldr	r2, [r3, #8]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a9ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d014      	beq.n	800aa02 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00f      	beq.n	800aa02 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f042 0220 	orr.w	r2, r2, #32
 800aa00:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d014      	beq.n	800aa38 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00f      	beq.n	800aa38 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa1e:	f043 0204 	orr.w	r2, r3, #4
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa36:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00f      	beq.n	800aa62 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa48:	f043 0201 	orr.w	r2, r3, #1
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa60:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00f      	beq.n	800aa8c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa72:	f043 0208 	orr.w	r2, r3, #8
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa8a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	fffffc90 	.word	0xfffffc90

0800aaac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	4613      	mov	r3, r2
 800aaba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aabc:	e010      	b.n	800aae0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aabe:	f7f7 fe13 	bl	80026e8 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d803      	bhi.n	800aad6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad4:	d102      	bne.n	800aadc <SPI_WaitOnFlagUntilTimeout+0x30>
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e00f      	b.n	800ab00 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	695a      	ldr	r2, [r3, #20]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	4013      	ands	r3, r2
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	bf0c      	ite	eq
 800aaf0:	2301      	moveq	r3, #1
 800aaf2:	2300      	movne	r3, #0
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d0df      	beq.n	800aabe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	3301      	adds	r3, #1
 800ab18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	3307      	adds	r3, #7
 800ab26:	08db      	lsrs	r3, r3, #3
 800ab28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e049      	b.n	800abe4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d106      	bne.n	800ab6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7f7 facd 	bl	8002104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f000 fa4d 	bl	800b01c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d109      	bne.n	800ac10 <HAL_TIM_PWM_Start+0x24>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	bf14      	ite	ne
 800ac08:	2301      	movne	r3, #1
 800ac0a:	2300      	moveq	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	e03c      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d109      	bne.n	800ac2a <HAL_TIM_PWM_Start+0x3e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	bf14      	ite	ne
 800ac22:	2301      	movne	r3, #1
 800ac24:	2300      	moveq	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	e02f      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d109      	bne.n	800ac44 <HAL_TIM_PWM_Start+0x58>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	bf14      	ite	ne
 800ac3c:	2301      	movne	r3, #1
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	e022      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b0c      	cmp	r3, #12
 800ac48:	d109      	bne.n	800ac5e <HAL_TIM_PWM_Start+0x72>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2300      	moveq	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	e015      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	d109      	bne.n	800ac78 <HAL_TIM_PWM_Start+0x8c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	bf14      	ite	ne
 800ac70:	2301      	movne	r3, #1
 800ac72:	2300      	moveq	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	e008      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e09c      	b.n	800adcc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <HAL_TIM_PWM_Start+0xb6>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca0:	e023      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d104      	bne.n	800acb2 <HAL_TIM_PWM_Start+0xc6>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acb0:	e01b      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d104      	bne.n	800acc2 <HAL_TIM_PWM_Start+0xd6>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acc0:	e013      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b0c      	cmp	r3, #12
 800acc6:	d104      	bne.n	800acd2 <HAL_TIM_PWM_Start+0xe6>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acd0:	e00b      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d104      	bne.n	800ace2 <HAL_TIM_PWM_Start+0xf6>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ace0:	e003      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2202      	movs	r2, #2
 800ace6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2201      	movs	r2, #1
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fcfa 	bl	800b6ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a35      	ldr	r2, [pc, #212]	; (800add4 <HAL_TIM_PWM_Start+0x1e8>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d013      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a34      	ldr	r2, [pc, #208]	; (800add8 <HAL_TIM_PWM_Start+0x1ec>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00e      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a32      	ldr	r2, [pc, #200]	; (800addc <HAL_TIM_PWM_Start+0x1f0>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a31      	ldr	r2, [pc, #196]	; (800ade0 <HAL_TIM_PWM_Start+0x1f4>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a2f      	ldr	r2, [pc, #188]	; (800ade4 <HAL_TIM_PWM_Start+0x1f8>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d101      	bne.n	800ad2e <HAL_TIM_PWM_Start+0x142>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_PWM_Start+0x144>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d007      	beq.n	800ad44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a22      	ldr	r2, [pc, #136]	; (800add4 <HAL_TIM_PWM_Start+0x1e8>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d01d      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad56:	d018      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a22      	ldr	r2, [pc, #136]	; (800ade8 <HAL_TIM_PWM_Start+0x1fc>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d013      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a21      	ldr	r2, [pc, #132]	; (800adec <HAL_TIM_PWM_Start+0x200>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d00e      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a1f      	ldr	r2, [pc, #124]	; (800adf0 <HAL_TIM_PWM_Start+0x204>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d009      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a17      	ldr	r2, [pc, #92]	; (800add8 <HAL_TIM_PWM_Start+0x1ec>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d004      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a1b      	ldr	r2, [pc, #108]	; (800adf4 <HAL_TIM_PWM_Start+0x208>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d115      	bne.n	800adb6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	4b19      	ldr	r3, [pc, #100]	; (800adf8 <HAL_TIM_PWM_Start+0x20c>)
 800ad92:	4013      	ands	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b06      	cmp	r3, #6
 800ad9a:	d015      	beq.n	800adc8 <HAL_TIM_PWM_Start+0x1dc>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ada2:	d011      	beq.n	800adc8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f042 0201 	orr.w	r2, r2, #1
 800adb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb4:	e008      	b.n	800adc8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f042 0201 	orr.w	r2, r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e000      	b.n	800adca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	40010000 	.word	0x40010000
 800add8:	40010400 	.word	0x40010400
 800addc:	40014000 	.word	0x40014000
 800ade0:	40014400 	.word	0x40014400
 800ade4:	40014800 	.word	0x40014800
 800ade8:	40000400 	.word	0x40000400
 800adec:	40000800 	.word	0x40000800
 800adf0:	40000c00 	.word	0x40000c00
 800adf4:	40001800 	.word	0x40001800
 800adf8:	00010007 	.word	0x00010007

0800adfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d101      	bne.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ae12:	2302      	movs	r3, #2
 800ae14:	e0fd      	b.n	800b012 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b14      	cmp	r3, #20
 800ae22:	f200 80f0 	bhi.w	800b006 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae81 	.word	0x0800ae81
 800ae30:	0800b007 	.word	0x0800b007
 800ae34:	0800b007 	.word	0x0800b007
 800ae38:	0800b007 	.word	0x0800b007
 800ae3c:	0800aec1 	.word	0x0800aec1
 800ae40:	0800b007 	.word	0x0800b007
 800ae44:	0800b007 	.word	0x0800b007
 800ae48:	0800b007 	.word	0x0800b007
 800ae4c:	0800af03 	.word	0x0800af03
 800ae50:	0800b007 	.word	0x0800b007
 800ae54:	0800b007 	.word	0x0800b007
 800ae58:	0800b007 	.word	0x0800b007
 800ae5c:	0800af43 	.word	0x0800af43
 800ae60:	0800b007 	.word	0x0800b007
 800ae64:	0800b007 	.word	0x0800b007
 800ae68:	0800b007 	.word	0x0800b007
 800ae6c:	0800af85 	.word	0x0800af85
 800ae70:	0800b007 	.word	0x0800b007
 800ae74:	0800b007 	.word	0x0800b007
 800ae78:	0800b007 	.word	0x0800b007
 800ae7c:	0800afc5 	.word	0x0800afc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 f962 	bl	800b150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699a      	ldr	r2, [r3, #24]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 0208 	orr.w	r2, r2, #8
 800ae9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f022 0204 	bic.w	r2, r2, #4
 800aeaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6999      	ldr	r1, [r3, #24]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	619a      	str	r2, [r3, #24]
      break;
 800aebe:	e0a3      	b.n	800b008 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 f9d2 	bl	800b270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	699a      	ldr	r2, [r3, #24]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6999      	ldr	r1, [r3, #24]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	021a      	lsls	r2, r3, #8
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	619a      	str	r2, [r3, #24]
      break;
 800af00:	e082      	b.n	800b008 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fa3b 	bl	800b384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69da      	ldr	r2, [r3, #28]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0208 	orr.w	r2, r2, #8
 800af1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	69da      	ldr	r2, [r3, #28]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0204 	bic.w	r2, r2, #4
 800af2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69d9      	ldr	r1, [r3, #28]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	61da      	str	r2, [r3, #28]
      break;
 800af40:	e062      	b.n	800b008 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 faa1 	bl	800b490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69da      	ldr	r2, [r3, #28]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69da      	ldr	r2, [r3, #28]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69d9      	ldr	r1, [r3, #28]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	021a      	lsls	r2, r3, #8
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	430a      	orrs	r2, r1
 800af80:	61da      	str	r2, [r3, #28]
      break;
 800af82:	e041      	b.n	800b008 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fae8 	bl	800b560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f042 0208 	orr.w	r2, r2, #8
 800af9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0204 	bic.w	r2, r2, #4
 800afae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afc2:	e021      	b.n	800b008 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fb2a 	bl	800b624 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	021a      	lsls	r2, r3, #8
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b004:	e000      	b.n	800b008 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop

0800b01c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a40      	ldr	r2, [pc, #256]	; (800b130 <TIM_Base_SetConfig+0x114>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d013      	beq.n	800b05c <TIM_Base_SetConfig+0x40>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b03a:	d00f      	beq.n	800b05c <TIM_Base_SetConfig+0x40>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a3d      	ldr	r2, [pc, #244]	; (800b134 <TIM_Base_SetConfig+0x118>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d00b      	beq.n	800b05c <TIM_Base_SetConfig+0x40>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a3c      	ldr	r2, [pc, #240]	; (800b138 <TIM_Base_SetConfig+0x11c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d007      	beq.n	800b05c <TIM_Base_SetConfig+0x40>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a3b      	ldr	r2, [pc, #236]	; (800b13c <TIM_Base_SetConfig+0x120>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d003      	beq.n	800b05c <TIM_Base_SetConfig+0x40>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a3a      	ldr	r2, [pc, #232]	; (800b140 <TIM_Base_SetConfig+0x124>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d108      	bne.n	800b06e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a2f      	ldr	r2, [pc, #188]	; (800b130 <TIM_Base_SetConfig+0x114>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d01f      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07c:	d01b      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a2c      	ldr	r2, [pc, #176]	; (800b134 <TIM_Base_SetConfig+0x118>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d017      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a2b      	ldr	r2, [pc, #172]	; (800b138 <TIM_Base_SetConfig+0x11c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a2a      	ldr	r2, [pc, #168]	; (800b13c <TIM_Base_SetConfig+0x120>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00f      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a29      	ldr	r2, [pc, #164]	; (800b140 <TIM_Base_SetConfig+0x124>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d00b      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a28      	ldr	r2, [pc, #160]	; (800b144 <TIM_Base_SetConfig+0x128>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d007      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a27      	ldr	r2, [pc, #156]	; (800b148 <TIM_Base_SetConfig+0x12c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d003      	beq.n	800b0b6 <TIM_Base_SetConfig+0x9a>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a26      	ldr	r2, [pc, #152]	; (800b14c <TIM_Base_SetConfig+0x130>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d108      	bne.n	800b0c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a10      	ldr	r2, [pc, #64]	; (800b130 <TIM_Base_SetConfig+0x114>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d00f      	beq.n	800b114 <TIM_Base_SetConfig+0xf8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a12      	ldr	r2, [pc, #72]	; (800b140 <TIM_Base_SetConfig+0x124>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d00b      	beq.n	800b114 <TIM_Base_SetConfig+0xf8>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a11      	ldr	r2, [pc, #68]	; (800b144 <TIM_Base_SetConfig+0x128>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d007      	beq.n	800b114 <TIM_Base_SetConfig+0xf8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a10      	ldr	r2, [pc, #64]	; (800b148 <TIM_Base_SetConfig+0x12c>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d003      	beq.n	800b114 <TIM_Base_SetConfig+0xf8>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a0f      	ldr	r2, [pc, #60]	; (800b14c <TIM_Base_SetConfig+0x130>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d103      	bne.n	800b11c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	691a      	ldr	r2, [r3, #16]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	615a      	str	r2, [r3, #20]
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	40010000 	.word	0x40010000
 800b134:	40000400 	.word	0x40000400
 800b138:	40000800 	.word	0x40000800
 800b13c:	40000c00 	.word	0x40000c00
 800b140:	40010400 	.word	0x40010400
 800b144:	40014000 	.word	0x40014000
 800b148:	40014400 	.word	0x40014400
 800b14c:	40014800 	.word	0x40014800

0800b150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b150:	b480      	push	{r7}
 800b152:	b087      	sub	sp, #28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	f023 0201 	bic.w	r2, r3, #1
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4b37      	ldr	r3, [pc, #220]	; (800b258 <TIM_OC1_SetConfig+0x108>)
 800b17c:	4013      	ands	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0303 	bic.w	r3, r3, #3
 800b186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f023 0302 	bic.w	r3, r3, #2
 800b198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a2d      	ldr	r2, [pc, #180]	; (800b25c <TIM_OC1_SetConfig+0x10c>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00f      	beq.n	800b1cc <TIM_OC1_SetConfig+0x7c>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a2c      	ldr	r2, [pc, #176]	; (800b260 <TIM_OC1_SetConfig+0x110>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <TIM_OC1_SetConfig+0x7c>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a2b      	ldr	r2, [pc, #172]	; (800b264 <TIM_OC1_SetConfig+0x114>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d007      	beq.n	800b1cc <TIM_OC1_SetConfig+0x7c>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a2a      	ldr	r2, [pc, #168]	; (800b268 <TIM_OC1_SetConfig+0x118>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_OC1_SetConfig+0x7c>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a29      	ldr	r2, [pc, #164]	; (800b26c <TIM_OC1_SetConfig+0x11c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d10c      	bne.n	800b1e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f023 0308 	bic.w	r3, r3, #8
 800b1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f023 0304 	bic.w	r3, r3, #4
 800b1e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a1c      	ldr	r2, [pc, #112]	; (800b25c <TIM_OC1_SetConfig+0x10c>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00f      	beq.n	800b20e <TIM_OC1_SetConfig+0xbe>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a1b      	ldr	r2, [pc, #108]	; (800b260 <TIM_OC1_SetConfig+0x110>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00b      	beq.n	800b20e <TIM_OC1_SetConfig+0xbe>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a1a      	ldr	r2, [pc, #104]	; (800b264 <TIM_OC1_SetConfig+0x114>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d007      	beq.n	800b20e <TIM_OC1_SetConfig+0xbe>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a19      	ldr	r2, [pc, #100]	; (800b268 <TIM_OC1_SetConfig+0x118>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <TIM_OC1_SetConfig+0xbe>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a18      	ldr	r2, [pc, #96]	; (800b26c <TIM_OC1_SetConfig+0x11c>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d111      	bne.n	800b232 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b21c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	4313      	orrs	r3, r2
 800b226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	4313      	orrs	r3, r2
 800b230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	621a      	str	r2, [r3, #32]
}
 800b24c:	bf00      	nop
 800b24e:	371c      	adds	r7, #28
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	fffeff8f 	.word	0xfffeff8f
 800b25c:	40010000 	.word	0x40010000
 800b260:	40010400 	.word	0x40010400
 800b264:	40014000 	.word	0x40014000
 800b268:	40014400 	.word	0x40014400
 800b26c:	40014800 	.word	0x40014800

0800b270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	f023 0210 	bic.w	r2, r3, #16
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4b34      	ldr	r3, [pc, #208]	; (800b36c <TIM_OC2_SetConfig+0xfc>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	f023 0320 	bic.w	r3, r3, #32
 800b2ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	011b      	lsls	r3, r3, #4
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a29      	ldr	r2, [pc, #164]	; (800b370 <TIM_OC2_SetConfig+0x100>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d003      	beq.n	800b2d8 <TIM_OC2_SetConfig+0x68>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a28      	ldr	r2, [pc, #160]	; (800b374 <TIM_OC2_SetConfig+0x104>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d10d      	bne.n	800b2f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a1e      	ldr	r2, [pc, #120]	; (800b370 <TIM_OC2_SetConfig+0x100>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d00f      	beq.n	800b31c <TIM_OC2_SetConfig+0xac>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a1d      	ldr	r2, [pc, #116]	; (800b374 <TIM_OC2_SetConfig+0x104>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d00b      	beq.n	800b31c <TIM_OC2_SetConfig+0xac>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a1c      	ldr	r2, [pc, #112]	; (800b378 <TIM_OC2_SetConfig+0x108>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d007      	beq.n	800b31c <TIM_OC2_SetConfig+0xac>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a1b      	ldr	r2, [pc, #108]	; (800b37c <TIM_OC2_SetConfig+0x10c>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d003      	beq.n	800b31c <TIM_OC2_SetConfig+0xac>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a1a      	ldr	r2, [pc, #104]	; (800b380 <TIM_OC2_SetConfig+0x110>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d113      	bne.n	800b344 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b32a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	4313      	orrs	r3, r2
 800b336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	4313      	orrs	r3, r2
 800b342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	621a      	str	r2, [r3, #32]
}
 800b35e:	bf00      	nop
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	feff8fff 	.word	0xfeff8fff
 800b370:	40010000 	.word	0x40010000
 800b374:	40010400 	.word	0x40010400
 800b378:	40014000 	.word	0x40014000
 800b37c:	40014400 	.word	0x40014400
 800b380:	40014800 	.word	0x40014800

0800b384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b384:	b480      	push	{r7}
 800b386:	b087      	sub	sp, #28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f023 0303 	bic.w	r3, r3, #3
 800b3ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a27      	ldr	r2, [pc, #156]	; (800b47c <TIM_OC3_SetConfig+0xf8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d003      	beq.n	800b3ea <TIM_OC3_SetConfig+0x66>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a26      	ldr	r2, [pc, #152]	; (800b480 <TIM_OC3_SetConfig+0xfc>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d10d      	bne.n	800b406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	021b      	lsls	r3, r3, #8
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <TIM_OC3_SetConfig+0xf8>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d00f      	beq.n	800b42e <TIM_OC3_SetConfig+0xaa>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a1b      	ldr	r2, [pc, #108]	; (800b480 <TIM_OC3_SetConfig+0xfc>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d00b      	beq.n	800b42e <TIM_OC3_SetConfig+0xaa>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a1a      	ldr	r2, [pc, #104]	; (800b484 <TIM_OC3_SetConfig+0x100>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d007      	beq.n	800b42e <TIM_OC3_SetConfig+0xaa>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a19      	ldr	r2, [pc, #100]	; (800b488 <TIM_OC3_SetConfig+0x104>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d003      	beq.n	800b42e <TIM_OC3_SetConfig+0xaa>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a18      	ldr	r2, [pc, #96]	; (800b48c <TIM_OC3_SetConfig+0x108>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d113      	bne.n	800b456 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b43c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	011b      	lsls	r3, r3, #4
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	4313      	orrs	r3, r2
 800b448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	011b      	lsls	r3, r3, #4
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	4313      	orrs	r3, r2
 800b454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	621a      	str	r2, [r3, #32]
}
 800b470:	bf00      	nop
 800b472:	371c      	adds	r7, #28
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	40010000 	.word	0x40010000
 800b480:	40010400 	.word	0x40010400
 800b484:	40014000 	.word	0x40014000
 800b488:	40014400 	.word	0x40014400
 800b48c:	40014800 	.word	0x40014800

0800b490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	021b      	lsls	r3, r3, #8
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	031b      	lsls	r3, r3, #12
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a18      	ldr	r2, [pc, #96]	; (800b54c <TIM_OC4_SetConfig+0xbc>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00f      	beq.n	800b510 <TIM_OC4_SetConfig+0x80>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a17      	ldr	r2, [pc, #92]	; (800b550 <TIM_OC4_SetConfig+0xc0>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00b      	beq.n	800b510 <TIM_OC4_SetConfig+0x80>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a16      	ldr	r2, [pc, #88]	; (800b554 <TIM_OC4_SetConfig+0xc4>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d007      	beq.n	800b510 <TIM_OC4_SetConfig+0x80>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a15      	ldr	r2, [pc, #84]	; (800b558 <TIM_OC4_SetConfig+0xc8>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <TIM_OC4_SetConfig+0x80>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a14      	ldr	r2, [pc, #80]	; (800b55c <TIM_OC4_SetConfig+0xcc>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d109      	bne.n	800b524 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	019b      	lsls	r3, r3, #6
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	4313      	orrs	r3, r2
 800b522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	621a      	str	r2, [r3, #32]
}
 800b53e:	bf00      	nop
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	40010000 	.word	0x40010000
 800b550:	40010400 	.word	0x40010400
 800b554:	40014000 	.word	0x40014000
 800b558:	40014400 	.word	0x40014400
 800b55c:	40014800 	.word	0x40014800

0800b560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b58e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	041b      	lsls	r3, r3, #16
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a17      	ldr	r2, [pc, #92]	; (800b610 <TIM_OC5_SetConfig+0xb0>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00f      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a16      	ldr	r2, [pc, #88]	; (800b614 <TIM_OC5_SetConfig+0xb4>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d00b      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a15      	ldr	r2, [pc, #84]	; (800b618 <TIM_OC5_SetConfig+0xb8>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d007      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a14      	ldr	r2, [pc, #80]	; (800b61c <TIM_OC5_SetConfig+0xbc>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d003      	beq.n	800b5d6 <TIM_OC5_SetConfig+0x76>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a13      	ldr	r2, [pc, #76]	; (800b620 <TIM_OC5_SetConfig+0xc0>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d109      	bne.n	800b5ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	021b      	lsls	r3, r3, #8
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	621a      	str	r2, [r3, #32]
}
 800b604:	bf00      	nop
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	40010000 	.word	0x40010000
 800b614:	40010400 	.word	0x40010400
 800b618:	40014000 	.word	0x40014000
 800b61c:	40014400 	.word	0x40014400
 800b620:	40014800 	.word	0x40014800

0800b624 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	021b      	lsls	r3, r3, #8
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	051b      	lsls	r3, r3, #20
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a18      	ldr	r2, [pc, #96]	; (800b6d8 <TIM_OC6_SetConfig+0xb4>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d00f      	beq.n	800b69c <TIM_OC6_SetConfig+0x78>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a17      	ldr	r2, [pc, #92]	; (800b6dc <TIM_OC6_SetConfig+0xb8>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d00b      	beq.n	800b69c <TIM_OC6_SetConfig+0x78>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <TIM_OC6_SetConfig+0xbc>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d007      	beq.n	800b69c <TIM_OC6_SetConfig+0x78>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a15      	ldr	r2, [pc, #84]	; (800b6e4 <TIM_OC6_SetConfig+0xc0>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d003      	beq.n	800b69c <TIM_OC6_SetConfig+0x78>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a14      	ldr	r2, [pc, #80]	; (800b6e8 <TIM_OC6_SetConfig+0xc4>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d109      	bne.n	800b6b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	029b      	lsls	r3, r3, #10
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	621a      	str	r2, [r3, #32]
}
 800b6ca:	bf00      	nop
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	40010000 	.word	0x40010000
 800b6dc:	40010400 	.word	0x40010400
 800b6e0:	40014000 	.word	0x40014000
 800b6e4:	40014400 	.word	0x40014400
 800b6e8:	40014800 	.word	0x40014800

0800b6ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f003 031f 	and.w	r3, r3, #31
 800b6fe:	2201      	movs	r2, #1
 800b700:	fa02 f303 	lsl.w	r3, r2, r3
 800b704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a1a      	ldr	r2, [r3, #32]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	43db      	mvns	r3, r3
 800b70e:	401a      	ands	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	fa01 f303 	lsl.w	r3, r1, r3
 800b724:	431a      	orrs	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
	...

0800b738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d101      	bne.n	800b750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b74c:	2302      	movs	r3, #2
 800b74e:	e068      	b.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a2e      	ldr	r2, [pc, #184]	; (800b830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d004      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a2d      	ldr	r2, [pc, #180]	; (800b834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d108      	bne.n	800b796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b78a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a1e      	ldr	r2, [pc, #120]	; (800b830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d01d      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c2:	d018      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a1b      	ldr	r2, [pc, #108]	; (800b838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d013      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a1a      	ldr	r2, [pc, #104]	; (800b83c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d00e      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a18      	ldr	r2, [pc, #96]	; (800b840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d009      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a13      	ldr	r2, [pc, #76]	; (800b834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d004      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a14      	ldr	r2, [pc, #80]	; (800b844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d10c      	bne.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	4313      	orrs	r3, r2
 800b806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	40010000 	.word	0x40010000
 800b834:	40010400 	.word	0x40010400
 800b838:	40000400 	.word	0x40000400
 800b83c:	40000800 	.word	0x40000800
 800b840:	40000c00 	.word	0x40000c00
 800b844:	40001800 	.word	0x40001800

0800b848 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b852:	2300      	movs	r3, #0
 800b854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b860:	2302      	movs	r3, #2
 800b862:	e065      	b.n	800b930 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	041b      	lsls	r3, r3, #16
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a16      	ldr	r2, [pc, #88]	; (800b93c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d004      	beq.n	800b8f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a14      	ldr	r2, [pc, #80]	; (800b940 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d115      	bne.n	800b91e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	051b      	lsls	r3, r3, #20
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	40010000 	.word	0x40010000
 800b940:	40010400 	.word	0x40010400

0800b944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e042      	b.n	800b9dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7f6 fcc1 	bl	80022f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2224      	movs	r2, #36	; 0x24
 800b972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 0201 	bic.w	r2, r2, #1
 800b984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f8c2 	bl	800bb10 <UART_SetConfig>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d101      	bne.n	800b996 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e022      	b.n	800b9dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fe16 	bl	800c5d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689a      	ldr	r2, [r3, #8]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f042 0201 	orr.w	r2, r2, #1
 800b9d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fe9d 	bl	800c714 <UART_CheckIdleState>
 800b9da:	4603      	mov	r3, r0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08a      	sub	sp, #40	; 0x28
 800b9e8:	af02      	add	r7, sp, #8
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	f040 8083 	bne.w	800bb06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <HAL_UART_Transmit+0x28>
 800ba06:	88fb      	ldrh	r3, [r7, #6]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e07b      	b.n	800bb08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <HAL_UART_Transmit+0x3a>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e074      	b.n	800bb08 <HAL_UART_Transmit+0x124>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2221      	movs	r2, #33	; 0x21
 800ba32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba36:	f7f6 fe57 	bl	80026e8 <HAL_GetTick>
 800ba3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	88fa      	ldrh	r2, [r7, #6]
 800ba40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	88fa      	ldrh	r2, [r7, #6]
 800ba48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba54:	d108      	bne.n	800ba68 <HAL_UART_Transmit+0x84>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d104      	bne.n	800ba68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	61bb      	str	r3, [r7, #24]
 800ba66:	e003      	b.n	800ba70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ba78:	e02c      	b.n	800bad4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2200      	movs	r2, #0
 800ba82:	2180      	movs	r1, #128	; 0x80
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f000 fe90 	bl	800c7aa <UART_WaitOnFlagUntilTimeout>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e039      	b.n	800bb08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10b      	bne.n	800bab2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	3302      	adds	r3, #2
 800baae:	61bb      	str	r3, [r7, #24]
 800bab0:	e007      	b.n	800bac2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	781a      	ldrb	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	3301      	adds	r3, #1
 800bac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bac8:	b29b      	uxth	r3, r3
 800baca:	3b01      	subs	r3, #1
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bada:	b29b      	uxth	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1cc      	bne.n	800ba7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2200      	movs	r2, #0
 800bae8:	2140      	movs	r1, #64	; 0x40
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fe5d 	bl	800c7aa <UART_WaitOnFlagUntilTimeout>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800baf6:	2303      	movs	r3, #3
 800baf8:	e006      	b.n	800bb08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2220      	movs	r2, #32
 800bafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e000      	b.n	800bb08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bb06:	2302      	movs	r3, #2
  }
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb10:	b5b0      	push	{r4, r5, r7, lr}
 800bb12:	b08e      	sub	sp, #56	; 0x38
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	431a      	orrs	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	4bbf      	ldr	r3, [pc, #764]	; (800be3c <UART_SetConfig+0x32c>)
 800bb3e:	4013      	ands	r3, r2
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb46:	430b      	orrs	r3, r1
 800bb48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68da      	ldr	r2, [r3, #12]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4ab5      	ldr	r2, [pc, #724]	; (800be40 <UART_SetConfig+0x330>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d004      	beq.n	800bb7a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb76:	4313      	orrs	r3, r2
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689a      	ldr	r2, [r3, #8]
 800bb80:	4bb0      	ldr	r3, [pc, #704]	; (800be44 <UART_SetConfig+0x334>)
 800bb82:	4013      	ands	r3, r2
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	6812      	ldr	r2, [r2, #0]
 800bb88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb8a:	430b      	orrs	r3, r1
 800bb8c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	f023 010f 	bic.w	r1, r3, #15
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4aa7      	ldr	r2, [pc, #668]	; (800be48 <UART_SetConfig+0x338>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d176      	bne.n	800bc9c <UART_SetConfig+0x18c>
 800bbae:	4ba7      	ldr	r3, [pc, #668]	; (800be4c <UART_SetConfig+0x33c>)
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbb6:	2b28      	cmp	r3, #40	; 0x28
 800bbb8:	d86c      	bhi.n	800bc94 <UART_SetConfig+0x184>
 800bbba:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <UART_SetConfig+0xb0>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bc65 	.word	0x0800bc65
 800bbc4:	0800bc95 	.word	0x0800bc95
 800bbc8:	0800bc95 	.word	0x0800bc95
 800bbcc:	0800bc95 	.word	0x0800bc95
 800bbd0:	0800bc95 	.word	0x0800bc95
 800bbd4:	0800bc95 	.word	0x0800bc95
 800bbd8:	0800bc95 	.word	0x0800bc95
 800bbdc:	0800bc95 	.word	0x0800bc95
 800bbe0:	0800bc6d 	.word	0x0800bc6d
 800bbe4:	0800bc95 	.word	0x0800bc95
 800bbe8:	0800bc95 	.word	0x0800bc95
 800bbec:	0800bc95 	.word	0x0800bc95
 800bbf0:	0800bc95 	.word	0x0800bc95
 800bbf4:	0800bc95 	.word	0x0800bc95
 800bbf8:	0800bc95 	.word	0x0800bc95
 800bbfc:	0800bc95 	.word	0x0800bc95
 800bc00:	0800bc75 	.word	0x0800bc75
 800bc04:	0800bc95 	.word	0x0800bc95
 800bc08:	0800bc95 	.word	0x0800bc95
 800bc0c:	0800bc95 	.word	0x0800bc95
 800bc10:	0800bc95 	.word	0x0800bc95
 800bc14:	0800bc95 	.word	0x0800bc95
 800bc18:	0800bc95 	.word	0x0800bc95
 800bc1c:	0800bc95 	.word	0x0800bc95
 800bc20:	0800bc7d 	.word	0x0800bc7d
 800bc24:	0800bc95 	.word	0x0800bc95
 800bc28:	0800bc95 	.word	0x0800bc95
 800bc2c:	0800bc95 	.word	0x0800bc95
 800bc30:	0800bc95 	.word	0x0800bc95
 800bc34:	0800bc95 	.word	0x0800bc95
 800bc38:	0800bc95 	.word	0x0800bc95
 800bc3c:	0800bc95 	.word	0x0800bc95
 800bc40:	0800bc85 	.word	0x0800bc85
 800bc44:	0800bc95 	.word	0x0800bc95
 800bc48:	0800bc95 	.word	0x0800bc95
 800bc4c:	0800bc95 	.word	0x0800bc95
 800bc50:	0800bc95 	.word	0x0800bc95
 800bc54:	0800bc95 	.word	0x0800bc95
 800bc58:	0800bc95 	.word	0x0800bc95
 800bc5c:	0800bc95 	.word	0x0800bc95
 800bc60:	0800bc8d 	.word	0x0800bc8d
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc6a:	e222      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc6c:	2304      	movs	r3, #4
 800bc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc72:	e21e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc74:	2308      	movs	r3, #8
 800bc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7a:	e21a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc7c:	2310      	movs	r3, #16
 800bc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc82:	e216      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc84:	2320      	movs	r3, #32
 800bc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8a:	e212      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc8c:	2340      	movs	r3, #64	; 0x40
 800bc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc92:	e20e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc94:	2380      	movs	r3, #128	; 0x80
 800bc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9a:	e20a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a6b      	ldr	r2, [pc, #428]	; (800be50 <UART_SetConfig+0x340>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d130      	bne.n	800bd08 <UART_SetConfig+0x1f8>
 800bca6:	4b69      	ldr	r3, [pc, #420]	; (800be4c <UART_SetConfig+0x33c>)
 800bca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	2b05      	cmp	r3, #5
 800bcb0:	d826      	bhi.n	800bd00 <UART_SetConfig+0x1f0>
 800bcb2:	a201      	add	r2, pc, #4	; (adr r2, 800bcb8 <UART_SetConfig+0x1a8>)
 800bcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb8:	0800bcd1 	.word	0x0800bcd1
 800bcbc:	0800bcd9 	.word	0x0800bcd9
 800bcc0:	0800bce1 	.word	0x0800bce1
 800bcc4:	0800bce9 	.word	0x0800bce9
 800bcc8:	0800bcf1 	.word	0x0800bcf1
 800bccc:	0800bcf9 	.word	0x0800bcf9
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd6:	e1ec      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bcd8:	2304      	movs	r3, #4
 800bcda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcde:	e1e8      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bce0:	2308      	movs	r3, #8
 800bce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bce6:	e1e4      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bce8:	2310      	movs	r3, #16
 800bcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcee:	e1e0      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bcf0:	2320      	movs	r3, #32
 800bcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf6:	e1dc      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfe:	e1d8      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd00:	2380      	movs	r3, #128	; 0x80
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e1d4      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a51      	ldr	r2, [pc, #324]	; (800be54 <UART_SetConfig+0x344>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d130      	bne.n	800bd74 <UART_SetConfig+0x264>
 800bd12:	4b4e      	ldr	r3, [pc, #312]	; (800be4c <UART_SetConfig+0x33c>)
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	d826      	bhi.n	800bd6c <UART_SetConfig+0x25c>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <UART_SetConfig+0x214>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd3d 	.word	0x0800bd3d
 800bd28:	0800bd45 	.word	0x0800bd45
 800bd2c:	0800bd4d 	.word	0x0800bd4d
 800bd30:	0800bd55 	.word	0x0800bd55
 800bd34:	0800bd5d 	.word	0x0800bd5d
 800bd38:	0800bd65 	.word	0x0800bd65
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd42:	e1b6      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd44:	2304      	movs	r3, #4
 800bd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4a:	e1b2      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd4c:	2308      	movs	r3, #8
 800bd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd52:	e1ae      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd54:	2310      	movs	r3, #16
 800bd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5a:	e1aa      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd62:	e1a6      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd64:	2340      	movs	r3, #64	; 0x40
 800bd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6a:	e1a2      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd6c:	2380      	movs	r3, #128	; 0x80
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e19e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a37      	ldr	r2, [pc, #220]	; (800be58 <UART_SetConfig+0x348>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d130      	bne.n	800bde0 <UART_SetConfig+0x2d0>
 800bd7e:	4b33      	ldr	r3, [pc, #204]	; (800be4c <UART_SetConfig+0x33c>)
 800bd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd82:	f003 0307 	and.w	r3, r3, #7
 800bd86:	2b05      	cmp	r3, #5
 800bd88:	d826      	bhi.n	800bdd8 <UART_SetConfig+0x2c8>
 800bd8a:	a201      	add	r2, pc, #4	; (adr r2, 800bd90 <UART_SetConfig+0x280>)
 800bd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd90:	0800bda9 	.word	0x0800bda9
 800bd94:	0800bdb1 	.word	0x0800bdb1
 800bd98:	0800bdb9 	.word	0x0800bdb9
 800bd9c:	0800bdc1 	.word	0x0800bdc1
 800bda0:	0800bdc9 	.word	0x0800bdc9
 800bda4:	0800bdd1 	.word	0x0800bdd1
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdae:	e180      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb6:	e17c      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bdb8:	2308      	movs	r3, #8
 800bdba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdbe:	e178      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bdc0:	2310      	movs	r3, #16
 800bdc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc6:	e174      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bdc8:	2320      	movs	r3, #32
 800bdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdce:	e170      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bdd0:	2340      	movs	r3, #64	; 0x40
 800bdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd6:	e16c      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bdd8:	2380      	movs	r3, #128	; 0x80
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdde:	e168      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a1d      	ldr	r2, [pc, #116]	; (800be5c <UART_SetConfig+0x34c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d142      	bne.n	800be70 <UART_SetConfig+0x360>
 800bdea:	4b18      	ldr	r3, [pc, #96]	; (800be4c <UART_SetConfig+0x33c>)
 800bdec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d838      	bhi.n	800be68 <UART_SetConfig+0x358>
 800bdf6:	a201      	add	r2, pc, #4	; (adr r2, 800bdfc <UART_SetConfig+0x2ec>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be15 	.word	0x0800be15
 800be00:	0800be1d 	.word	0x0800be1d
 800be04:	0800be25 	.word	0x0800be25
 800be08:	0800be2d 	.word	0x0800be2d
 800be0c:	0800be35 	.word	0x0800be35
 800be10:	0800be61 	.word	0x0800be61
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be1a:	e14a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be22:	e146      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be2a:	e142      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be32:	e13e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3a:	e13a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be3c:	cfff69f3 	.word	0xcfff69f3
 800be40:	58000c00 	.word	0x58000c00
 800be44:	11fff4ff 	.word	0x11fff4ff
 800be48:	40011000 	.word	0x40011000
 800be4c:	58024400 	.word	0x58024400
 800be50:	40004400 	.word	0x40004400
 800be54:	40004800 	.word	0x40004800
 800be58:	40004c00 	.word	0x40004c00
 800be5c:	40005000 	.word	0x40005000
 800be60:	2340      	movs	r3, #64	; 0x40
 800be62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be66:	e124      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be68:	2380      	movs	r3, #128	; 0x80
 800be6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be6e:	e120      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4acc      	ldr	r2, [pc, #816]	; (800c1a8 <UART_SetConfig+0x698>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d176      	bne.n	800bf68 <UART_SetConfig+0x458>
 800be7a:	4bcc      	ldr	r3, [pc, #816]	; (800c1ac <UART_SetConfig+0x69c>)
 800be7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be82:	2b28      	cmp	r3, #40	; 0x28
 800be84:	d86c      	bhi.n	800bf60 <UART_SetConfig+0x450>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <UART_SetConfig+0x37c>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800bf31 	.word	0x0800bf31
 800be90:	0800bf61 	.word	0x0800bf61
 800be94:	0800bf61 	.word	0x0800bf61
 800be98:	0800bf61 	.word	0x0800bf61
 800be9c:	0800bf61 	.word	0x0800bf61
 800bea0:	0800bf61 	.word	0x0800bf61
 800bea4:	0800bf61 	.word	0x0800bf61
 800bea8:	0800bf61 	.word	0x0800bf61
 800beac:	0800bf39 	.word	0x0800bf39
 800beb0:	0800bf61 	.word	0x0800bf61
 800beb4:	0800bf61 	.word	0x0800bf61
 800beb8:	0800bf61 	.word	0x0800bf61
 800bebc:	0800bf61 	.word	0x0800bf61
 800bec0:	0800bf61 	.word	0x0800bf61
 800bec4:	0800bf61 	.word	0x0800bf61
 800bec8:	0800bf61 	.word	0x0800bf61
 800becc:	0800bf41 	.word	0x0800bf41
 800bed0:	0800bf61 	.word	0x0800bf61
 800bed4:	0800bf61 	.word	0x0800bf61
 800bed8:	0800bf61 	.word	0x0800bf61
 800bedc:	0800bf61 	.word	0x0800bf61
 800bee0:	0800bf61 	.word	0x0800bf61
 800bee4:	0800bf61 	.word	0x0800bf61
 800bee8:	0800bf61 	.word	0x0800bf61
 800beec:	0800bf49 	.word	0x0800bf49
 800bef0:	0800bf61 	.word	0x0800bf61
 800bef4:	0800bf61 	.word	0x0800bf61
 800bef8:	0800bf61 	.word	0x0800bf61
 800befc:	0800bf61 	.word	0x0800bf61
 800bf00:	0800bf61 	.word	0x0800bf61
 800bf04:	0800bf61 	.word	0x0800bf61
 800bf08:	0800bf61 	.word	0x0800bf61
 800bf0c:	0800bf51 	.word	0x0800bf51
 800bf10:	0800bf61 	.word	0x0800bf61
 800bf14:	0800bf61 	.word	0x0800bf61
 800bf18:	0800bf61 	.word	0x0800bf61
 800bf1c:	0800bf61 	.word	0x0800bf61
 800bf20:	0800bf61 	.word	0x0800bf61
 800bf24:	0800bf61 	.word	0x0800bf61
 800bf28:	0800bf61 	.word	0x0800bf61
 800bf2c:	0800bf59 	.word	0x0800bf59
 800bf30:	2301      	movs	r3, #1
 800bf32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf36:	e0bc      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf38:	2304      	movs	r3, #4
 800bf3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf3e:	e0b8      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf40:	2308      	movs	r3, #8
 800bf42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf46:	e0b4      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf48:	2310      	movs	r3, #16
 800bf4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf4e:	e0b0      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf50:	2320      	movs	r3, #32
 800bf52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf56:	e0ac      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf58:	2340      	movs	r3, #64	; 0x40
 800bf5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf5e:	e0a8      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf60:	2380      	movs	r3, #128	; 0x80
 800bf62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf66:	e0a4      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a90      	ldr	r2, [pc, #576]	; (800c1b0 <UART_SetConfig+0x6a0>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d130      	bne.n	800bfd4 <UART_SetConfig+0x4c4>
 800bf72:	4b8e      	ldr	r3, [pc, #568]	; (800c1ac <UART_SetConfig+0x69c>)
 800bf74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b05      	cmp	r3, #5
 800bf7c:	d826      	bhi.n	800bfcc <UART_SetConfig+0x4bc>
 800bf7e:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <UART_SetConfig+0x474>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800bf9d 	.word	0x0800bf9d
 800bf88:	0800bfa5 	.word	0x0800bfa5
 800bf8c:	0800bfad 	.word	0x0800bfad
 800bf90:	0800bfb5 	.word	0x0800bfb5
 800bf94:	0800bfbd 	.word	0x0800bfbd
 800bf98:	0800bfc5 	.word	0x0800bfc5
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfa2:	e086      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfa4:	2304      	movs	r3, #4
 800bfa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfaa:	e082      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfac:	2308      	movs	r3, #8
 800bfae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfb2:	e07e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfba:	e07a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfbc:	2320      	movs	r3, #32
 800bfbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfc2:	e076      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfc4:	2340      	movs	r3, #64	; 0x40
 800bfc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfca:	e072      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfcc:	2380      	movs	r3, #128	; 0x80
 800bfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfd2:	e06e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a76      	ldr	r2, [pc, #472]	; (800c1b4 <UART_SetConfig+0x6a4>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d130      	bne.n	800c040 <UART_SetConfig+0x530>
 800bfde:	4b73      	ldr	r3, [pc, #460]	; (800c1ac <UART_SetConfig+0x69c>)
 800bfe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe2:	f003 0307 	and.w	r3, r3, #7
 800bfe6:	2b05      	cmp	r3, #5
 800bfe8:	d826      	bhi.n	800c038 <UART_SetConfig+0x528>
 800bfea:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <UART_SetConfig+0x4e0>)
 800bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff0:	0800c009 	.word	0x0800c009
 800bff4:	0800c011 	.word	0x0800c011
 800bff8:	0800c019 	.word	0x0800c019
 800bffc:	0800c021 	.word	0x0800c021
 800c000:	0800c029 	.word	0x0800c029
 800c004:	0800c031 	.word	0x0800c031
 800c008:	2300      	movs	r3, #0
 800c00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c00e:	e050      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c010:	2304      	movs	r3, #4
 800c012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c016:	e04c      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c018:	2308      	movs	r3, #8
 800c01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c01e:	e048      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c020:	2310      	movs	r3, #16
 800c022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c026:	e044      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c028:	2320      	movs	r3, #32
 800c02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02e:	e040      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c030:	2340      	movs	r3, #64	; 0x40
 800c032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c036:	e03c      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c038:	2380      	movs	r3, #128	; 0x80
 800c03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03e:	e038      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a5c      	ldr	r2, [pc, #368]	; (800c1b8 <UART_SetConfig+0x6a8>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d130      	bne.n	800c0ac <UART_SetConfig+0x59c>
 800c04a:	4b58      	ldr	r3, [pc, #352]	; (800c1ac <UART_SetConfig+0x69c>)
 800c04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c04e:	f003 0307 	and.w	r3, r3, #7
 800c052:	2b05      	cmp	r3, #5
 800c054:	d826      	bhi.n	800c0a4 <UART_SetConfig+0x594>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <UART_SetConfig+0x54c>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c075 	.word	0x0800c075
 800c060:	0800c07d 	.word	0x0800c07d
 800c064:	0800c085 	.word	0x0800c085
 800c068:	0800c08d 	.word	0x0800c08d
 800c06c:	0800c095 	.word	0x0800c095
 800c070:	0800c09d 	.word	0x0800c09d
 800c074:	2302      	movs	r3, #2
 800c076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c07a:	e01a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c07c:	2304      	movs	r3, #4
 800c07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c082:	e016      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c084:	2308      	movs	r3, #8
 800c086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c08a:	e012      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c08c:	2310      	movs	r3, #16
 800c08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c092:	e00e      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c094:	2320      	movs	r3, #32
 800c096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c09a:	e00a      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c09c:	2340      	movs	r3, #64	; 0x40
 800c09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0a2:	e006      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c0a4:	2380      	movs	r3, #128	; 0x80
 800c0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0aa:	e002      	b.n	800c0b2 <UART_SetConfig+0x5a2>
 800c0ac:	2380      	movs	r3, #128	; 0x80
 800c0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a40      	ldr	r2, [pc, #256]	; (800c1b8 <UART_SetConfig+0x6a8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	f040 80ef 	bne.w	800c29c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c0be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0c2:	2b20      	cmp	r3, #32
 800c0c4:	dc46      	bgt.n	800c154 <UART_SetConfig+0x644>
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	f2c0 8081 	blt.w	800c1ce <UART_SetConfig+0x6be>
 800c0cc:	3b02      	subs	r3, #2
 800c0ce:	2b1e      	cmp	r3, #30
 800c0d0:	d87d      	bhi.n	800c1ce <UART_SetConfig+0x6be>
 800c0d2:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <UART_SetConfig+0x5c8>)
 800c0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d8:	0800c15b 	.word	0x0800c15b
 800c0dc:	0800c1cf 	.word	0x0800c1cf
 800c0e0:	0800c163 	.word	0x0800c163
 800c0e4:	0800c1cf 	.word	0x0800c1cf
 800c0e8:	0800c1cf 	.word	0x0800c1cf
 800c0ec:	0800c1cf 	.word	0x0800c1cf
 800c0f0:	0800c173 	.word	0x0800c173
 800c0f4:	0800c1cf 	.word	0x0800c1cf
 800c0f8:	0800c1cf 	.word	0x0800c1cf
 800c0fc:	0800c1cf 	.word	0x0800c1cf
 800c100:	0800c1cf 	.word	0x0800c1cf
 800c104:	0800c1cf 	.word	0x0800c1cf
 800c108:	0800c1cf 	.word	0x0800c1cf
 800c10c:	0800c1cf 	.word	0x0800c1cf
 800c110:	0800c183 	.word	0x0800c183
 800c114:	0800c1cf 	.word	0x0800c1cf
 800c118:	0800c1cf 	.word	0x0800c1cf
 800c11c:	0800c1cf 	.word	0x0800c1cf
 800c120:	0800c1cf 	.word	0x0800c1cf
 800c124:	0800c1cf 	.word	0x0800c1cf
 800c128:	0800c1cf 	.word	0x0800c1cf
 800c12c:	0800c1cf 	.word	0x0800c1cf
 800c130:	0800c1cf 	.word	0x0800c1cf
 800c134:	0800c1cf 	.word	0x0800c1cf
 800c138:	0800c1cf 	.word	0x0800c1cf
 800c13c:	0800c1cf 	.word	0x0800c1cf
 800c140:	0800c1cf 	.word	0x0800c1cf
 800c144:	0800c1cf 	.word	0x0800c1cf
 800c148:	0800c1cf 	.word	0x0800c1cf
 800c14c:	0800c1cf 	.word	0x0800c1cf
 800c150:	0800c1c1 	.word	0x0800c1c1
 800c154:	2b40      	cmp	r3, #64	; 0x40
 800c156:	d036      	beq.n	800c1c6 <UART_SetConfig+0x6b6>
 800c158:	e039      	b.n	800c1ce <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c15a:	f7fc ffe3 	bl	8009124 <HAL_RCCEx_GetD3PCLK1Freq>
 800c15e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c160:	e03b      	b.n	800c1da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c162:	f107 0314 	add.w	r3, r7, #20
 800c166:	4618      	mov	r0, r3
 800c168:	f7fc fff2 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c170:	e033      	b.n	800c1da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c172:	f107 0308 	add.w	r3, r7, #8
 800c176:	4618      	mov	r0, r3
 800c178:	f7fd f93e 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c180:	e02b      	b.n	800c1da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c182:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <UART_SetConfig+0x69c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0320 	and.w	r3, r3, #32
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d009      	beq.n	800c1a2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <UART_SetConfig+0x69c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	08db      	lsrs	r3, r3, #3
 800c194:	f003 0303 	and.w	r3, r3, #3
 800c198:	4a08      	ldr	r2, [pc, #32]	; (800c1bc <UART_SetConfig+0x6ac>)
 800c19a:	fa22 f303 	lsr.w	r3, r2, r3
 800c19e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1a0:	e01b      	b.n	800c1da <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c1a2:	4b06      	ldr	r3, [pc, #24]	; (800c1bc <UART_SetConfig+0x6ac>)
 800c1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1a6:	e018      	b.n	800c1da <UART_SetConfig+0x6ca>
 800c1a8:	40011400 	.word	0x40011400
 800c1ac:	58024400 	.word	0x58024400
 800c1b0:	40007800 	.word	0x40007800
 800c1b4:	40007c00 	.word	0x40007c00
 800c1b8:	58000c00 	.word	0x58000c00
 800c1bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1c0:	4bc4      	ldr	r3, [pc, #784]	; (800c4d4 <UART_SetConfig+0x9c4>)
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1c4:	e009      	b.n	800c1da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1cc:	e005      	b.n	800c1da <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c1d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 81da 	beq.w	800c596 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e6:	4abc      	ldr	r2, [pc, #752]	; (800c4d8 <UART_SetConfig+0x9c8>)
 800c1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1f4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	4413      	add	r3, r2
 800c200:	6a3a      	ldr	r2, [r7, #32]
 800c202:	429a      	cmp	r2, r3
 800c204:	d305      	bcc.n	800c212 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c20c:	6a3a      	ldr	r2, [r7, #32]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d903      	bls.n	800c21a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c218:	e1bd      	b.n	800c596 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	4618      	mov	r0, r3
 800c21e:	f04f 0100 	mov.w	r1, #0
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	4aac      	ldr	r2, [pc, #688]	; (800c4d8 <UART_SetConfig+0x9c8>)
 800c228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	f7f4 fa79 	bl	8000728 <__aeabi_uldivmod>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	4610      	mov	r0, r2
 800c23c:	4619      	mov	r1, r3
 800c23e:	f04f 0200 	mov.w	r2, #0
 800c242:	f04f 0300 	mov.w	r3, #0
 800c246:	020b      	lsls	r3, r1, #8
 800c248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c24c:	0202      	lsls	r2, r0, #8
 800c24e:	6879      	ldr	r1, [r7, #4]
 800c250:	6849      	ldr	r1, [r1, #4]
 800c252:	0849      	lsrs	r1, r1, #1
 800c254:	4608      	mov	r0, r1
 800c256:	f04f 0100 	mov.w	r1, #0
 800c25a:	1814      	adds	r4, r2, r0
 800c25c:	eb43 0501 	adc.w	r5, r3, r1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	461a      	mov	r2, r3
 800c266:	f04f 0300 	mov.w	r3, #0
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	f7f4 fa5b 	bl	8000728 <__aeabi_uldivmod>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4613      	mov	r3, r2
 800c278:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c280:	d308      	bcc.n	800c294 <UART_SetConfig+0x784>
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c288:	d204      	bcs.n	800c294 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c290:	60da      	str	r2, [r3, #12]
 800c292:	e180      	b.n	800c596 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c29a:	e17c      	b.n	800c596 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2a4:	f040 80bf 	bne.w	800c426 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c2a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	dc49      	bgt.n	800c344 <UART_SetConfig+0x834>
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	db7c      	blt.n	800c3ae <UART_SetConfig+0x89e>
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	d87a      	bhi.n	800c3ae <UART_SetConfig+0x89e>
 800c2b8:	a201      	add	r2, pc, #4	; (adr r2, 800c2c0 <UART_SetConfig+0x7b0>)
 800c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2be:	bf00      	nop
 800c2c0:	0800c34b 	.word	0x0800c34b
 800c2c4:	0800c353 	.word	0x0800c353
 800c2c8:	0800c3af 	.word	0x0800c3af
 800c2cc:	0800c3af 	.word	0x0800c3af
 800c2d0:	0800c35b 	.word	0x0800c35b
 800c2d4:	0800c3af 	.word	0x0800c3af
 800c2d8:	0800c3af 	.word	0x0800c3af
 800c2dc:	0800c3af 	.word	0x0800c3af
 800c2e0:	0800c36b 	.word	0x0800c36b
 800c2e4:	0800c3af 	.word	0x0800c3af
 800c2e8:	0800c3af 	.word	0x0800c3af
 800c2ec:	0800c3af 	.word	0x0800c3af
 800c2f0:	0800c3af 	.word	0x0800c3af
 800c2f4:	0800c3af 	.word	0x0800c3af
 800c2f8:	0800c3af 	.word	0x0800c3af
 800c2fc:	0800c3af 	.word	0x0800c3af
 800c300:	0800c37b 	.word	0x0800c37b
 800c304:	0800c3af 	.word	0x0800c3af
 800c308:	0800c3af 	.word	0x0800c3af
 800c30c:	0800c3af 	.word	0x0800c3af
 800c310:	0800c3af 	.word	0x0800c3af
 800c314:	0800c3af 	.word	0x0800c3af
 800c318:	0800c3af 	.word	0x0800c3af
 800c31c:	0800c3af 	.word	0x0800c3af
 800c320:	0800c3af 	.word	0x0800c3af
 800c324:	0800c3af 	.word	0x0800c3af
 800c328:	0800c3af 	.word	0x0800c3af
 800c32c:	0800c3af 	.word	0x0800c3af
 800c330:	0800c3af 	.word	0x0800c3af
 800c334:	0800c3af 	.word	0x0800c3af
 800c338:	0800c3af 	.word	0x0800c3af
 800c33c:	0800c3af 	.word	0x0800c3af
 800c340:	0800c3a1 	.word	0x0800c3a1
 800c344:	2b40      	cmp	r3, #64	; 0x40
 800c346:	d02e      	beq.n	800c3a6 <UART_SetConfig+0x896>
 800c348:	e031      	b.n	800c3ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c34a:	f7fb ff7f 	bl	800824c <HAL_RCC_GetPCLK1Freq>
 800c34e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c350:	e033      	b.n	800c3ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c352:	f7fb ff91 	bl	8008278 <HAL_RCC_GetPCLK2Freq>
 800c356:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c358:	e02f      	b.n	800c3ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c35a:	f107 0314 	add.w	r3, r7, #20
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fc fef6 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c368:	e027      	b.n	800c3ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c36a:	f107 0308 	add.w	r3, r7, #8
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd f842 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c378:	e01f      	b.n	800c3ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c37a:	4b58      	ldr	r3, [pc, #352]	; (800c4dc <UART_SetConfig+0x9cc>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 0320 	and.w	r3, r3, #32
 800c382:	2b00      	cmp	r3, #0
 800c384:	d009      	beq.n	800c39a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c386:	4b55      	ldr	r3, [pc, #340]	; (800c4dc <UART_SetConfig+0x9cc>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	08db      	lsrs	r3, r3, #3
 800c38c:	f003 0303 	and.w	r3, r3, #3
 800c390:	4a53      	ldr	r2, [pc, #332]	; (800c4e0 <UART_SetConfig+0x9d0>)
 800c392:	fa22 f303 	lsr.w	r3, r2, r3
 800c396:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c398:	e00f      	b.n	800c3ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c39a:	4b51      	ldr	r3, [pc, #324]	; (800c4e0 <UART_SetConfig+0x9d0>)
 800c39c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c39e:	e00c      	b.n	800c3ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3a0:	4b4c      	ldr	r3, [pc, #304]	; (800c4d4 <UART_SetConfig+0x9c4>)
 800c3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3a4:	e009      	b.n	800c3ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3ac:	e005      	b.n	800c3ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c3b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 80ea 	beq.w	800c596 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c6:	4a44      	ldr	r2, [pc, #272]	; (800c4d8 <UART_SetConfig+0x9c8>)
 800c3c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3d4:	005a      	lsls	r2, r3, #1
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	085b      	lsrs	r3, r3, #1
 800c3dc:	441a      	add	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	2b0f      	cmp	r3, #15
 800c3ee:	d916      	bls.n	800c41e <UART_SetConfig+0x90e>
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f6:	d212      	bcs.n	800c41e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	f023 030f 	bic.w	r3, r3, #15
 800c400:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	085b      	lsrs	r3, r3, #1
 800c406:	b29b      	uxth	r3, r3
 800c408:	f003 0307 	and.w	r3, r3, #7
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c410:	4313      	orrs	r3, r2
 800c412:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c41a:	60da      	str	r2, [r3, #12]
 800c41c:	e0bb      	b.n	800c596 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c424:	e0b7      	b.n	800c596 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c42a:	2b20      	cmp	r3, #32
 800c42c:	dc4a      	bgt.n	800c4c4 <UART_SetConfig+0x9b4>
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f2c0 8086 	blt.w	800c540 <UART_SetConfig+0xa30>
 800c434:	2b20      	cmp	r3, #32
 800c436:	f200 8083 	bhi.w	800c540 <UART_SetConfig+0xa30>
 800c43a:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <UART_SetConfig+0x930>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c4cb 	.word	0x0800c4cb
 800c444:	0800c4e5 	.word	0x0800c4e5
 800c448:	0800c541 	.word	0x0800c541
 800c44c:	0800c541 	.word	0x0800c541
 800c450:	0800c4ed 	.word	0x0800c4ed
 800c454:	0800c541 	.word	0x0800c541
 800c458:	0800c541 	.word	0x0800c541
 800c45c:	0800c541 	.word	0x0800c541
 800c460:	0800c4fd 	.word	0x0800c4fd
 800c464:	0800c541 	.word	0x0800c541
 800c468:	0800c541 	.word	0x0800c541
 800c46c:	0800c541 	.word	0x0800c541
 800c470:	0800c541 	.word	0x0800c541
 800c474:	0800c541 	.word	0x0800c541
 800c478:	0800c541 	.word	0x0800c541
 800c47c:	0800c541 	.word	0x0800c541
 800c480:	0800c50d 	.word	0x0800c50d
 800c484:	0800c541 	.word	0x0800c541
 800c488:	0800c541 	.word	0x0800c541
 800c48c:	0800c541 	.word	0x0800c541
 800c490:	0800c541 	.word	0x0800c541
 800c494:	0800c541 	.word	0x0800c541
 800c498:	0800c541 	.word	0x0800c541
 800c49c:	0800c541 	.word	0x0800c541
 800c4a0:	0800c541 	.word	0x0800c541
 800c4a4:	0800c541 	.word	0x0800c541
 800c4a8:	0800c541 	.word	0x0800c541
 800c4ac:	0800c541 	.word	0x0800c541
 800c4b0:	0800c541 	.word	0x0800c541
 800c4b4:	0800c541 	.word	0x0800c541
 800c4b8:	0800c541 	.word	0x0800c541
 800c4bc:	0800c541 	.word	0x0800c541
 800c4c0:	0800c533 	.word	0x0800c533
 800c4c4:	2b40      	cmp	r3, #64	; 0x40
 800c4c6:	d037      	beq.n	800c538 <UART_SetConfig+0xa28>
 800c4c8:	e03a      	b.n	800c540 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4ca:	f7fb febf 	bl	800824c <HAL_RCC_GetPCLK1Freq>
 800c4ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c4d0:	e03c      	b.n	800c54c <UART_SetConfig+0xa3c>
 800c4d2:	bf00      	nop
 800c4d4:	003d0900 	.word	0x003d0900
 800c4d8:	08020608 	.word	0x08020608
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4e4:	f7fb fec8 	bl	8008278 <HAL_RCC_GetPCLK2Freq>
 800c4e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c4ea:	e02f      	b.n	800c54c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fc fe2d 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4fa:	e027      	b.n	800c54c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4fc:	f107 0308 	add.w	r3, r7, #8
 800c500:	4618      	mov	r0, r3
 800c502:	f7fc ff79 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c50a:	e01f      	b.n	800c54c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c50c:	4b2c      	ldr	r3, [pc, #176]	; (800c5c0 <UART_SetConfig+0xab0>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0320 	and.w	r3, r3, #32
 800c514:	2b00      	cmp	r3, #0
 800c516:	d009      	beq.n	800c52c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c518:	4b29      	ldr	r3, [pc, #164]	; (800c5c0 <UART_SetConfig+0xab0>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	08db      	lsrs	r3, r3, #3
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	4a28      	ldr	r2, [pc, #160]	; (800c5c4 <UART_SetConfig+0xab4>)
 800c524:	fa22 f303 	lsr.w	r3, r2, r3
 800c528:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c52a:	e00f      	b.n	800c54c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c52c:	4b25      	ldr	r3, [pc, #148]	; (800c5c4 <UART_SetConfig+0xab4>)
 800c52e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c530:	e00c      	b.n	800c54c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c532:	4b25      	ldr	r3, [pc, #148]	; (800c5c8 <UART_SetConfig+0xab8>)
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c536:	e009      	b.n	800c54c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c53e:	e005      	b.n	800c54c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c540:	2300      	movs	r3, #0
 800c542:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c54a:	bf00      	nop
    }

    if (pclk != 0U)
 800c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d021      	beq.n	800c596 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c556:	4a1d      	ldr	r2, [pc, #116]	; (800c5cc <UART_SetConfig+0xabc>)
 800c558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c55c:	461a      	mov	r2, r3
 800c55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c560:	fbb3 f2f2 	udiv	r2, r3, r2
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	085b      	lsrs	r3, r3, #1
 800c56a:	441a      	add	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
 800c574:	b29b      	uxth	r3, r3
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	2b0f      	cmp	r3, #15
 800c57c:	d908      	bls.n	800c590 <UART_SetConfig+0xa80>
 800c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c584:	d204      	bcs.n	800c590 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c58c:	60da      	str	r2, [r3, #12]
 800c58e:	e002      	b.n	800c596 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c5b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3738      	adds	r7, #56	; 0x38
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	58024400 	.word	0x58024400
 800c5c4:	03d09000 	.word	0x03d09000
 800c5c8:	003d0900 	.word	0x003d0900
 800c5cc:	08020608 	.word	0x08020608

0800c5d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00a      	beq.n	800c5fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fe:	f003 0302 	and.w	r3, r3, #2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	430a      	orrs	r2, r1
 800c61a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c620:	f003 0304 	and.w	r3, r3, #4
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00a      	beq.n	800c63e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	430a      	orrs	r2, r1
 800c63c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	f003 0308 	and.w	r3, r3, #8
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	430a      	orrs	r2, r1
 800c65e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c664:	f003 0310 	and.w	r3, r3, #16
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00a      	beq.n	800c682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c686:	f003 0320 	and.w	r3, r3, #32
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00a      	beq.n	800c6a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d01a      	beq.n	800c6e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ce:	d10a      	bne.n	800c6e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	430a      	orrs	r2, r1
 800c6e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00a      	beq.n	800c708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	430a      	orrs	r2, r1
 800c706:	605a      	str	r2, [r3, #4]
  }
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af02      	add	r7, sp, #8
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c724:	f7f5 ffe0 	bl	80026e8 <HAL_GetTick>
 800c728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0308 	and.w	r3, r3, #8
 800c734:	2b08      	cmp	r3, #8
 800c736:	d10e      	bne.n	800c756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f82f 	bl	800c7aa <UART_WaitOnFlagUntilTimeout>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	e025      	b.n	800c7a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b04      	cmp	r3, #4
 800c762:	d10e      	bne.n	800c782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f819 	bl	800c7aa <UART_WaitOnFlagUntilTimeout>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c77e:	2303      	movs	r3, #3
 800c780:	e00f      	b.n	800c7a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2220      	movs	r2, #32
 800c786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	60f8      	str	r0, [r7, #12]
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	603b      	str	r3, [r7, #0]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ba:	e062      	b.n	800c882 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d05e      	beq.n	800c882 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7c4:	f7f5 ff90 	bl	80026e8 <HAL_GetTick>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d302      	bcc.n	800c7da <UART_WaitOnFlagUntilTimeout+0x30>
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d11d      	bne.n	800c816 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c7e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f022 0201 	bic.w	r2, r2, #1
 800c7f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2220      	movs	r2, #32
 800c7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2220      	movs	r2, #32
 800c806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e045      	b.n	800c8a2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	d02e      	beq.n	800c882 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c82e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c832:	d126      	bne.n	800c882 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c83c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c84c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f022 0201 	bic.w	r2, r2, #1
 800c85c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2220      	movs	r2, #32
 800c862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2220      	movs	r2, #32
 800c86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2220      	movs	r2, #32
 800c872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e00f      	b.n	800c8a2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	69da      	ldr	r2, [r3, #28]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4013      	ands	r3, r2
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	429a      	cmp	r2, r3
 800c890:	bf0c      	ite	eq
 800c892:	2301      	moveq	r3, #1
 800c894:	2300      	movne	r3, #0
 800c896:	b2db      	uxtb	r3, r3
 800c898:	461a      	mov	r2, r3
 800c89a:	79fb      	ldrb	r3, [r7, #7]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d08d      	beq.n	800c7bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b085      	sub	sp, #20
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d101      	bne.n	800c8c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c8bc:	2302      	movs	r3, #2
 800c8be:	e027      	b.n	800c910 <HAL_UARTEx_DisableFifoMode+0x66>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2224      	movs	r2, #36	; 0x24
 800c8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 0201 	bic.w	r2, r2, #1
 800c8e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2220      	movs	r2, #32
 800c902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c930:	2302      	movs	r3, #2
 800c932:	e02d      	b.n	800c990 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2224      	movs	r2, #36	; 0x24
 800c940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f022 0201 	bic.w	r2, r2, #1
 800c95a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	430a      	orrs	r2, r1
 800c96e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f84f 	bl	800ca14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2220      	movs	r2, #32
 800c982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d101      	bne.n	800c9b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	e02d      	b.n	800ca0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2224      	movs	r2, #36	; 0x24
 800c9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f022 0201 	bic.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f811 	bl	800ca14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d108      	bne.n	800ca36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca34:	e031      	b.n	800ca9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca36:	2310      	movs	r3, #16
 800ca38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca3a:	2310      	movs	r3, #16
 800ca3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	0e5b      	lsrs	r3, r3, #25
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	f003 0307 	and.w	r3, r3, #7
 800ca4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	0f5b      	lsrs	r3, r3, #29
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	7b3a      	ldrb	r2, [r7, #12]
 800ca62:	4911      	ldr	r1, [pc, #68]	; (800caa8 <UARTEx_SetNbDataToProcess+0x94>)
 800ca64:	5c8a      	ldrb	r2, [r1, r2]
 800ca66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca6a:	7b3a      	ldrb	r2, [r7, #12]
 800ca6c:	490f      	ldr	r1, [pc, #60]	; (800caac <UARTEx_SetNbDataToProcess+0x98>)
 800ca6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	7b7a      	ldrb	r2, [r7, #13]
 800ca80:	4909      	ldr	r1, [pc, #36]	; (800caa8 <UARTEx_SetNbDataToProcess+0x94>)
 800ca82:	5c8a      	ldrb	r2, [r1, r2]
 800ca84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca88:	7b7a      	ldrb	r2, [r7, #13]
 800ca8a:	4908      	ldr	r1, [pc, #32]	; (800caac <UARTEx_SetNbDataToProcess+0x98>)
 800ca8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	08020620 	.word	0x08020620
 800caac:	08020628 	.word	0x08020628

0800cab0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cab0:	b084      	sub	sp, #16
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b084      	sub	sp, #16
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	f107 001c 	add.w	r0, r7, #28
 800cabe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d120      	bne.n	800cb0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cacc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	68da      	ldr	r2, [r3, #12]
 800cad8:	4b2a      	ldr	r3, [pc, #168]	; (800cb84 <USB_CoreInit+0xd4>)
 800cada:	4013      	ands	r3, r2
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800caec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d105      	bne.n	800cafe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f990 	bl	800ce24 <USB_CoreReset>
 800cb04:	4603      	mov	r3, r0
 800cb06:	73fb      	strb	r3, [r7, #15]
 800cb08:	e01a      	b.n	800cb40 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f984 	bl	800ce24 <USB_CoreReset>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	639a      	str	r2, [r3, #56]	; 0x38
 800cb32:	e005      	b.n	800cb40 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d116      	bne.n	800cb74 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb54:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <USB_CoreInit+0xd8>)
 800cb56:	4313      	orrs	r3, r2
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f043 0206 	orr.w	r2, r3, #6
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f043 0220 	orr.w	r2, r3, #32
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb80:	b004      	add	sp, #16
 800cb82:	4770      	bx	lr
 800cb84:	ffbdffbf 	.word	0xffbdffbf
 800cb88:	03ee0000 	.word	0x03ee0000

0800cb8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	f043 0201 	orr.w	r2, r3, #1
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b083      	sub	sp, #12
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f023 0201 	bic.w	r2, r3, #1
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cbe8:	78fb      	ldrb	r3, [r7, #3]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d106      	bne.n	800cbfc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60da      	str	r2, [r3, #12]
 800cbfa:	e00b      	b.n	800cc14 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cbfc:	78fb      	ldrb	r3, [r7, #3]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	60da      	str	r2, [r3, #12]
 800cc0e:	e001      	b.n	800cc14 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e003      	b.n	800cc1c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cc14:	2032      	movs	r0, #50	; 0x32
 800cc16:	f7f5 fd73 	bl	8002700 <HAL_Delay>

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	019b      	lsls	r3, r3, #6
 800cc36:	f043 0220 	orr.w	r2, r3, #32
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a09      	ldr	r2, [pc, #36]	; (800cc6c <USB_FlushTxFifo+0x48>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d901      	bls.n	800cc50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e006      	b.n	800cc5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b20      	cmp	r3, #32
 800cc5a:	d0f0      	beq.n	800cc3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	00030d40 	.word	0x00030d40

0800cc70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2210      	movs	r2, #16
 800cc80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3301      	adds	r3, #1
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4a09      	ldr	r2, [pc, #36]	; (800ccb0 <USB_FlushRxFifo+0x40>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d901      	bls.n	800cc94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cc90:	2303      	movs	r3, #3
 800cc92:	e006      	b.n	800cca2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	f003 0310 	and.w	r3, r3, #16
 800cc9c:	2b10      	cmp	r3, #16
 800cc9e:	d0f0      	beq.n	800cc82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	00030d40 	.word	0x00030d40

0800ccb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b089      	sub	sp, #36	; 0x24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	71fb      	strb	r3, [r7, #7]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ccd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d123      	bne.n	800cd22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ccda:	88bb      	ldrh	r3, [r7, #4]
 800ccdc:	3303      	adds	r3, #3
 800ccde:	089b      	lsrs	r3, r3, #2
 800cce0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cce2:	2300      	movs	r3, #0
 800cce4:	61bb      	str	r3, [r7, #24]
 800cce6:	e018      	b.n	800cd1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	031a      	lsls	r2, r3, #12
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	3301      	adds	r3, #1
 800cd06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	3301      	adds	r3, #1
 800cd12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	3301      	adds	r3, #1
 800cd18:	61bb      	str	r3, [r7, #24]
 800cd1a:	69ba      	ldr	r2, [r7, #24]
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d3e2      	bcc.n	800cce8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3724      	adds	r7, #36	; 0x24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b08b      	sub	sp, #44	; 0x2c
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cd46:	88fb      	ldrh	r3, [r7, #6]
 800cd48:	089b      	lsrs	r3, r3, #2
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	f003 0303 	and.w	r3, r3, #3
 800cd54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd56:	2300      	movs	r3, #0
 800cd58:	623b      	str	r3, [r7, #32]
 800cd5a:	e014      	b.n	800cd86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	3301      	adds	r3, #1
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd76:	3301      	adds	r3, #1
 800cd78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	3301      	adds	r3, #1
 800cd84:	623b      	str	r3, [r7, #32]
 800cd86:	6a3a      	ldr	r2, [r7, #32]
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d3e6      	bcc.n	800cd5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd8e:	8bfb      	ldrh	r3, [r7, #30]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01e      	beq.n	800cdd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd94:	2300      	movs	r3, #0
 800cd96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f107 0310 	add.w	r3, r7, #16
 800cda4:	6812      	ldr	r2, [r2, #0]
 800cda6:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	701a      	strb	r2, [r3, #0]
      i++;
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	623b      	str	r3, [r7, #32]
      pDest++;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cdc6:	8bfb      	ldrh	r3, [r7, #30]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cdcc:	8bfb      	ldrh	r3, [r7, #30]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1ea      	bne.n	800cda8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	372c      	adds	r7, #44	; 0x2c
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	f003 0301 	and.w	r3, r3, #1
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
	...

0800ce24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4a13      	ldr	r2, [pc, #76]	; (800ce88 <USB_CoreReset+0x64>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d901      	bls.n	800ce42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	e01b      	b.n	800ce7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	daf2      	bge.n	800ce30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	f043 0201 	orr.w	r2, r3, #1
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4a09      	ldr	r2, [pc, #36]	; (800ce88 <USB_CoreReset+0x64>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d901      	bls.n	800ce6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e006      	b.n	800ce7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d0f0      	beq.n	800ce5a <USB_CoreReset+0x36>

  return HAL_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	00030d40 	.word	0x00030d40

0800ce8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	f107 001c 	add.w	r0, r7, #28
 800ce9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cea8:	461a      	mov	r2, r3
 800ceaa:	2300      	movs	r3, #0
 800ceac:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d018      	beq.n	800cf04 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d10a      	bne.n	800ceee <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cee6:	f043 0304 	orr.w	r3, r3, #4
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	e014      	b.n	800cf18 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cefc:	f023 0304 	bic.w	r3, r3, #4
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	e009      	b.n	800cf18 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf12:	f023 0304 	bic.w	r3, r3, #4
 800cf16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cf18:	2110      	movs	r1, #16
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fe82 	bl	800cc24 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff fea5 	bl	800cc70 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	e015      	b.n	800cf58 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	015a      	lsls	r2, r3, #5
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4413      	add	r3, r2
 800cf34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf38:	461a      	mov	r2, r3
 800cf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	3301      	adds	r3, #1
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d3e5      	bcc.n	800cf2c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cf60:	2101      	movs	r1, #1
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f882 	bl	800d06c <USB_DriveVbus>

  HAL_Delay(200U);
 800cf68:	20c8      	movs	r0, #200	; 0xc8
 800cf6a:	f7f5 fbc9 	bl	8002700 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00b      	beq.n	800cfa0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a14      	ldr	r2, [pc, #80]	; (800cfe4 <USB_HostInit+0x158>)
 800cf94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a13      	ldr	r2, [pc, #76]	; (800cfe8 <USB_HostInit+0x15c>)
 800cf9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cf9e:	e009      	b.n	800cfb4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2280      	movs	r2, #128	; 0x80
 800cfa4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a10      	ldr	r2, [pc, #64]	; (800cfec <USB_HostInit+0x160>)
 800cfaa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a10      	ldr	r2, [pc, #64]	; (800cff0 <USB_HostInit+0x164>)
 800cfb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d105      	bne.n	800cfc6 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	f043 0210 	orr.w	r2, r3, #16
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	699a      	ldr	r2, [r3, #24]
 800cfca:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <USB_HostInit+0x168>)
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfde:	b004      	add	sp, #16
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	01000200 	.word	0x01000200
 800cfe8:	00e00300 	.word	0x00e00300
 800cfec:	00600080 	.word	0x00600080
 800cff0:	004000e0 	.word	0x004000e0
 800cff4:	a3200008 	.word	0xa3200008

0800cff8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	460b      	mov	r3, r1
 800d002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d016:	f023 0303 	bic.w	r3, r3, #3
 800d01a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	f003 0303 	and.w	r3, r3, #3
 800d02a:	68f9      	ldr	r1, [r7, #12]
 800d02c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d030:	4313      	orrs	r3, r2
 800d032:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d107      	bne.n	800d04a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d040:	461a      	mov	r2, r3
 800d042:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d046:	6053      	str	r3, [r2, #4]
 800d048:	e009      	b.n	800d05e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d04a:	78fb      	ldrb	r3, [r7, #3]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d106      	bne.n	800d05e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d056:	461a      	mov	r2, r3
 800d058:	f241 7370 	movw	r3, #6000	; 0x1770
 800d05c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d07c:	2300      	movs	r3, #0
 800d07e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d090:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d109      	bne.n	800d0b0 <USB_DriveVbus+0x44>
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d106      	bne.n	800d0b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d0aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d0ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0ba:	d109      	bne.n	800d0d0 <USB_DriveVbus+0x64>
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d106      	bne.n	800d0d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d0ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	0c5b      	lsrs	r3, r3, #17
 800d0fc:	f003 0303 	and.w	r3, r3, #3
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	b29b      	uxth	r3, r3
}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
	...

0800d130 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	4608      	mov	r0, r1
 800d13a:	4611      	mov	r1, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	4603      	mov	r3, r0
 800d140:	70fb      	strb	r3, [r7, #3]
 800d142:	460b      	mov	r3, r1
 800d144:	70bb      	strb	r3, [r7, #2]
 800d146:	4613      	mov	r3, r2
 800d148:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d152:	78fb      	ldrb	r3, [r7, #3]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d15e:	461a      	mov	r2, r3
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d166:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d87e      	bhi.n	800d26c <USB_HC_Init+0x13c>
 800d16e:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <USB_HC_Init+0x44>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d185 	.word	0x0800d185
 800d178:	0800d22f 	.word	0x0800d22f
 800d17c:	0800d185 	.word	0x0800d185
 800d180:	0800d1f1 	.word	0x0800d1f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d190:	461a      	mov	r2, r3
 800d192:	f240 439d 	movw	r3, #1181	; 0x49d
 800d196:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d198:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	da10      	bge.n	800d1c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	0151      	lsls	r1, r2, #5
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	440a      	add	r2, r1
 800d1b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d1c0:	e057      	b.n	800d272 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d051      	beq.n	800d272 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d1ce:	78fb      	ldrb	r3, [r7, #3]
 800d1d0:	015a      	lsls	r2, r3, #5
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	78fa      	ldrb	r2, [r7, #3]
 800d1de:	0151      	lsls	r1, r2, #5
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	440a      	add	r2, r1
 800d1e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d1ec:	60d3      	str	r3, [r2, #12]
      break;
 800d1ee:	e040      	b.n	800d272 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	015a      	lsls	r2, r3, #5
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	f240 639d 	movw	r3, #1693	; 0x69d
 800d202:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d204:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	da34      	bge.n	800d276 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d20c:	78fb      	ldrb	r3, [r7, #3]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	4413      	add	r3, r2
 800d214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	78fa      	ldrb	r2, [r7, #3]
 800d21c:	0151      	lsls	r1, r2, #5
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	440a      	add	r2, r1
 800d222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d22a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d22c:	e023      	b.n	800d276 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d22e:	78fb      	ldrb	r3, [r7, #3]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	4413      	add	r3, r2
 800d236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d23a:	461a      	mov	r2, r3
 800d23c:	f240 2325 	movw	r3, #549	; 0x225
 800d240:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d242:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d246:	2b00      	cmp	r3, #0
 800d248:	da17      	bge.n	800d27a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d24a:	78fb      	ldrb	r3, [r7, #3]
 800d24c:	015a      	lsls	r2, r3, #5
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	4413      	add	r3, r2
 800d252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	78fa      	ldrb	r2, [r7, #3]
 800d25a:	0151      	lsls	r1, r2, #5
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	440a      	add	r2, r1
 800d260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d264:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d268:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d26a:	e006      	b.n	800d27a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	77fb      	strb	r3, [r7, #31]
      break;
 800d270:	e004      	b.n	800d27c <USB_HC_Init+0x14c>
      break;
 800d272:	bf00      	nop
 800d274:	e002      	b.n	800d27c <USB_HC_Init+0x14c>
      break;
 800d276:	bf00      	nop
 800d278:	e000      	b.n	800d27c <USB_HC_Init+0x14c>
      break;
 800d27a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	78fb      	ldrb	r3, [r7, #3]
 800d286:	f003 030f 	and.w	r3, r3, #15
 800d28a:	2101      	movs	r1, #1
 800d28c:	fa01 f303 	lsl.w	r3, r1, r3
 800d290:	6939      	ldr	r1, [r7, #16]
 800d292:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d296:	4313      	orrs	r3, r2
 800d298:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d2a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	da03      	bge.n	800d2b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d2ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2b2:	61bb      	str	r3, [r7, #24]
 800d2b4:	e001      	b.n	800d2ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ff0f 	bl	800d0de <USB_GetHostSpeed>
 800d2c0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d2c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d106      	bne.n	800d2d8 <USB_HC_Init+0x1a8>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d003      	beq.n	800d2d8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d2d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	e001      	b.n	800d2dc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d2dc:	787b      	ldrb	r3, [r7, #1]
 800d2de:	059b      	lsls	r3, r3, #22
 800d2e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d2e4:	78bb      	ldrb	r3, [r7, #2]
 800d2e6:	02db      	lsls	r3, r3, #11
 800d2e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d2ec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d2ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2f2:	049b      	lsls	r3, r3, #18
 800d2f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d2f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d2fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d2fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d300:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d306:	78fb      	ldrb	r3, [r7, #3]
 800d308:	0159      	lsls	r1, r3, #5
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	440b      	add	r3, r1
 800d30e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d312:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d318:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d31a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d10f      	bne.n	800d342 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d322:	78fb      	ldrb	r3, [r7, #3]
 800d324:	015a      	lsls	r2, r3, #5
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	4413      	add	r3, r2
 800d32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	78fa      	ldrb	r2, [r7, #3]
 800d332:	0151      	lsls	r1, r2, #5
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	440a      	add	r2, r1
 800d338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d33c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d340:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d342:	7ffb      	ldrb	r3, [r7, #31]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3720      	adds	r7, #32
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b08c      	sub	sp, #48	; 0x30
 800d350:	af02      	add	r7, sp, #8
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	4613      	mov	r3, r2
 800d358:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d364:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d368:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d372:	2b00      	cmp	r3, #0
 800d374:	d02d      	beq.n	800d3d2 <USB_HC_StartXfer+0x86>
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	791b      	ldrb	r3, [r3, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d129      	bne.n	800d3d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d37e:	79fb      	ldrb	r3, [r7, #7]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d117      	bne.n	800d3b4 <USB_HC_StartXfer+0x68>
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	79db      	ldrb	r3, [r3, #7]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <USB_HC_StartXfer+0x48>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	79db      	ldrb	r3, [r3, #7]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d10f      	bne.n	800d3b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	0151      	lsls	r1, r2, #5
 800d3a6:	6a3a      	ldr	r2, [r7, #32]
 800d3a8:	440a      	add	r2, r1
 800d3aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10b      	bne.n	800d3d2 <USB_HC_StartXfer+0x86>
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	795b      	ldrb	r3, [r3, #5]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d107      	bne.n	800d3d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	785b      	ldrb	r3, [r3, #1]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f000 fa2f 	bl	800d82c <USB_DoPing>
      return HAL_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e0f8      	b.n	800d5c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d018      	beq.n	800d40c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	8912      	ldrh	r2, [r2, #8]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	8912      	ldrh	r2, [r2, #8]
 800d3ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d3f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d3f2:	8b7b      	ldrh	r3, [r7, #26]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d90b      	bls.n	800d410 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d3f8:	8b7b      	ldrh	r3, [r7, #26]
 800d3fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d3fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	8912      	ldrh	r2, [r2, #8]
 800d402:	fb02 f203 	mul.w	r2, r2, r3
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	611a      	str	r2, [r3, #16]
 800d40a:	e001      	b.n	800d410 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d40c:	2301      	movs	r3, #1
 800d40e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	78db      	ldrb	r3, [r3, #3]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d007      	beq.n	800d428 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d41a:	68ba      	ldr	r2, [r7, #8]
 800d41c:	8912      	ldrh	r2, [r2, #8]
 800d41e:	fb02 f203 	mul.w	r2, r2, r3
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	611a      	str	r2, [r3, #16]
 800d426:	e003      	b.n	800d430 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	695a      	ldr	r2, [r3, #20]
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d43a:	04d9      	lsls	r1, r3, #19
 800d43c:	4b63      	ldr	r3, [pc, #396]	; (800d5cc <USB_HC_StartXfer+0x280>)
 800d43e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d440:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	7a9b      	ldrb	r3, [r3, #10]
 800d446:	075b      	lsls	r3, r3, #29
 800d448:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d44c:	69f9      	ldr	r1, [r7, #28]
 800d44e:	0148      	lsls	r0, r1, #5
 800d450:	6a39      	ldr	r1, [r7, #32]
 800d452:	4401      	add	r1, r0
 800d454:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d458:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d45a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d45c:	79fb      	ldrb	r3, [r7, #7]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	68d9      	ldr	r1, [r3, #12]
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	6a3b      	ldr	r3, [r7, #32]
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d472:	460a      	mov	r2, r1
 800d474:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	bf0c      	ite	eq
 800d486:	2301      	moveq	r3, #1
 800d488:	2300      	movne	r3, #0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	4413      	add	r3, r2
 800d496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	69fa      	ldr	r2, [r7, #28]
 800d49e:	0151      	lsls	r1, r2, #5
 800d4a0:	6a3a      	ldr	r2, [r7, #32]
 800d4a2:	440a      	add	r2, r1
 800d4a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	015a      	lsls	r2, r3, #5
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	7e7b      	ldrb	r3, [r7, #25]
 800d4be:	075b      	lsls	r3, r3, #29
 800d4c0:	69f9      	ldr	r1, [r7, #28]
 800d4c2:	0148      	lsls	r0, r1, #5
 800d4c4:	6a39      	ldr	r1, [r7, #32]
 800d4c6:	4401      	add	r1, r0
 800d4c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	78db      	ldrb	r3, [r3, #3]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d004      	beq.n	800d4fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4f6:	613b      	str	r3, [r7, #16]
 800d4f8:	e003      	b.n	800d502 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d500:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d508:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	6a3b      	ldr	r3, [r7, #32]
 800d510:	4413      	add	r3, r2
 800d512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d516:	461a      	mov	r2, r3
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	e04e      	b.n	800d5c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	78db      	ldrb	r3, [r3, #3]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d149      	bne.n	800d5c2 <USB_HC_StartXfer+0x276>
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d045      	beq.n	800d5c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	79db      	ldrb	r3, [r3, #7]
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d830      	bhi.n	800d5a0 <USB_HC_StartXfer+0x254>
 800d53e:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <USB_HC_StartXfer+0x1f8>)
 800d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d544:	0800d555 	.word	0x0800d555
 800d548:	0800d579 	.word	0x0800d579
 800d54c:	0800d555 	.word	0x0800d555
 800d550:	0800d579 	.word	0x0800d579
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	3303      	adds	r3, #3
 800d55a:	089b      	lsrs	r3, r3, #2
 800d55c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d55e:	8afa      	ldrh	r2, [r7, #22]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	b29b      	uxth	r3, r3
 800d566:	429a      	cmp	r2, r3
 800d568:	d91c      	bls.n	800d5a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	699b      	ldr	r3, [r3, #24]
 800d56e:	f043 0220 	orr.w	r2, r3, #32
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	619a      	str	r2, [r3, #24]
        }
        break;
 800d576:	e015      	b.n	800d5a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	3303      	adds	r3, #3
 800d57e:	089b      	lsrs	r3, r3, #2
 800d580:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d582:	8afa      	ldrh	r2, [r7, #22]
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	429a      	cmp	r2, r3
 800d590:	d90a      	bls.n	800d5a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d59e:	e003      	b.n	800d5a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d5a0:	bf00      	nop
 800d5a2:	e002      	b.n	800d5aa <USB_HC_StartXfer+0x25e>
        break;
 800d5a4:	bf00      	nop
 800d5a6:	e000      	b.n	800d5aa <USB_HC_StartXfer+0x25e>
        break;
 800d5a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	68d9      	ldr	r1, [r3, #12]
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	785a      	ldrb	r2, [r3, #1]
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	9000      	str	r0, [sp, #0]
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f7ff fb79 	bl	800ccb4 <USB_WritePacket>
  }

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3728      	adds	r7, #40	; 0x28
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	1ff80000 	.word	0x1ff80000

0800d5d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5e2:	695b      	ldr	r3, [r3, #20]
 800d5e4:	b29b      	uxth	r3, r3
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b089      	sub	sp, #36	; 0x24
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d602:	78fb      	ldrb	r3, [r7, #3]
 800d604:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	015a      	lsls	r2, r3, #5
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	4413      	add	r3, r2
 800d612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	0c9b      	lsrs	r3, r3, #18
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	015a      	lsls	r2, r3, #5
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	4413      	add	r3, r2
 800d628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	0fdb      	lsrs	r3, r3, #31
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	f003 0320 	and.w	r3, r3, #32
 800d63e:	2b20      	cmp	r3, #32
 800d640:	d104      	bne.n	800d64c <USB_HC_Halt+0x5a>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	e0e8      	b.n	800d81e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <USB_HC_Halt+0x66>
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	2b02      	cmp	r3, #2
 800d656:	d173      	bne.n	800d740 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	015a      	lsls	r2, r3, #5
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	4413      	add	r3, r2
 800d660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	0151      	lsls	r1, r2, #5
 800d66a:	69ba      	ldr	r2, [r7, #24]
 800d66c:	440a      	add	r2, r1
 800d66e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d676:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	f003 0320 	and.w	r3, r3, #32
 800d680:	2b00      	cmp	r3, #0
 800d682:	f040 80cb 	bne.w	800d81c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d143      	bne.n	800d71a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	0151      	lsls	r1, r2, #5
 800d6a4:	69ba      	ldr	r2, [r7, #24]
 800d6a6:	440a      	add	r2, r1
 800d6a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	015a      	lsls	r2, r3, #5
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	0151      	lsls	r1, r2, #5
 800d6c4:	69ba      	ldr	r2, [r7, #24]
 800d6c6:	440a      	add	r2, r1
 800d6c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	015a      	lsls	r2, r3, #5
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	4413      	add	r3, r2
 800d6da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	0151      	lsls	r1, r2, #5
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	440a      	add	r2, r1
 800d6e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6f0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	61fb      	str	r3, [r7, #28]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6fe:	d81d      	bhi.n	800d73c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	4413      	add	r3, r2
 800d708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d716:	d0ec      	beq.n	800d6f2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d718:	e080      	b.n	800d81c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	015a      	lsls	r2, r3, #5
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	4413      	add	r3, r2
 800d722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	697a      	ldr	r2, [r7, #20]
 800d72a:	0151      	lsls	r1, r2, #5
 800d72c:	69ba      	ldr	r2, [r7, #24]
 800d72e:	440a      	add	r2, r1
 800d730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d738:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d73a:	e06f      	b.n	800d81c <USB_HC_Halt+0x22a>
            break;
 800d73c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d73e:	e06d      	b.n	800d81c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	015a      	lsls	r2, r3, #5
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	4413      	add	r3, r2
 800d748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	0151      	lsls	r1, r2, #5
 800d752:	69ba      	ldr	r2, [r7, #24]
 800d754:	440a      	add	r2, r1
 800d756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d75a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d75e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d143      	bne.n	800d7f8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	015a      	lsls	r2, r3, #5
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	4413      	add	r3, r2
 800d778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	0151      	lsls	r1, r2, #5
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	440a      	add	r2, r1
 800d786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d78a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d78e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	4413      	add	r3, r2
 800d798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	0151      	lsls	r1, r2, #5
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	440a      	add	r2, r1
 800d7a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	0151      	lsls	r1, r2, #5
 800d7c2:	69ba      	ldr	r2, [r7, #24]
 800d7c4:	440a      	add	r2, r1
 800d7c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d7ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	61fb      	str	r3, [r7, #28]
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7dc:	d81d      	bhi.n	800d81a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	015a      	lsls	r2, r3, #5
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7f4:	d0ec      	beq.n	800d7d0 <USB_HC_Halt+0x1de>
 800d7f6:	e011      	b.n	800d81c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	0151      	lsls	r1, r2, #5
 800d80a:	69ba      	ldr	r2, [r7, #24]
 800d80c:	440a      	add	r2, r1
 800d80e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	e000      	b.n	800d81c <USB_HC_Halt+0x22a>
          break;
 800d81a:	bf00      	nop
    }
  }

  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3724      	adds	r7, #36	; 0x24
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
	...

0800d82c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b087      	sub	sp, #28
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d83c:	78fb      	ldrb	r3, [r7, #3]
 800d83e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d840:	2301      	movs	r3, #1
 800d842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	04da      	lsls	r2, r3, #19
 800d848:	4b15      	ldr	r3, [pc, #84]	; (800d8a0 <USB_DoPing+0x74>)
 800d84a:	4013      	ands	r3, r2
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	0151      	lsls	r1, r2, #5
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	440a      	add	r2, r1
 800d854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d85c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	015a      	lsls	r2, r3, #5
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	4413      	add	r3, r2
 800d866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d874:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d87c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	4413      	add	r3, r2
 800d886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d88a:	461a      	mov	r2, r3
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	371c      	adds	r7, #28
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	1ff80000 	.word	0x1ff80000

0800d8a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff f97a 	bl	800cbae <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d8ba:	2110      	movs	r1, #16
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff f9b1 	bl	800cc24 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7ff f9d4 	bl	800cc70 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	e01f      	b.n	800d90e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	015a      	lsls	r2, r3, #5
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d8e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d8f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d902:	461a      	mov	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	3301      	adds	r3, #1
 800d90c:	613b      	str	r3, [r7, #16]
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	2b0f      	cmp	r3, #15
 800d912:	d9dc      	bls.n	800d8ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	e034      	b.n	800d984 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	4413      	add	r3, r2
 800d922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d930:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d938:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d940:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	015a      	lsls	r2, r3, #5
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	4413      	add	r3, r2
 800d94a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d94e:	461a      	mov	r2, r3
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	3301      	adds	r3, #1
 800d958:	617b      	str	r3, [r7, #20]
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d960:	d80c      	bhi.n	800d97c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	015a      	lsls	r2, r3, #5
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	4413      	add	r3, r2
 800d96a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d978:	d0ec      	beq.n	800d954 <USB_StopHost+0xb0>
 800d97a:	e000      	b.n	800d97e <USB_StopHost+0xda>
        break;
 800d97c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	3301      	adds	r3, #1
 800d982:	613b      	str	r3, [r7, #16]
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2b0f      	cmp	r3, #15
 800d988:	d9c7      	bls.n	800d91a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d990:	461a      	mov	r2, r3
 800d992:	f04f 33ff 	mov.w	r3, #4294967295
 800d996:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f04f 32ff 	mov.w	r2, #4294967295
 800d99e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7ff f8f3 	bl	800cb8c <USB_EnableGlobalInt>

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d9b4:	4904      	ldr	r1, [pc, #16]	; (800d9c8 <MX_FATFS_Init+0x18>)
 800d9b6:	4805      	ldr	r0, [pc, #20]	; (800d9cc <MX_FATFS_Init+0x1c>)
 800d9b8:	f006 fc20 	bl	80141fc <FATFS_LinkDriver>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	461a      	mov	r2, r3
 800d9c0:	4b03      	ldr	r3, [pc, #12]	; (800d9d0 <MX_FATFS_Init+0x20>)
 800d9c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d9c4:	bf00      	nop
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	2400b4c8 	.word	0x2400b4c8
 800d9cc:	24000018 	.word	0x24000018
 800d9d0:	2400b4cc 	.word	0x2400b4cc

0800d9d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d9d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 f9d9 	bl	800dda8 <USER_SPI_initialize>
 800d9f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	4603      	mov	r3, r0
 800da08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return USER_SPI_status(pdrv); //ADD THIS LINE
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f000 fab5 	bl	800df7c <USER_SPI_status>
 800da12:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800da14:	4618      	mov	r0, r3
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	607a      	str	r2, [r7, #4]
 800da26:	603b      	str	r3, [r7, #0]
 800da28:	4603      	mov	r3, r0
 800da2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800da2c:	7bf8      	ldrb	r0, [r7, #15]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	68b9      	ldr	r1, [r7, #8]
 800da34:	f000 fab8 	bl	800dfa8 <USER_SPI_read>
 800da38:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	603b      	str	r3, [r7, #0]
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800da52:	7bf8      	ldrb	r0, [r7, #15]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	68b9      	ldr	r1, [r7, #8]
 800da5a:	f000 fb0b 	bl	800e074 <USER_SPI_write>
 800da5e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	603a      	str	r2, [r7, #0]
 800da72:	71fb      	strb	r3, [r7, #7]
 800da74:	460b      	mov	r3, r1
 800da76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800da78:	79b9      	ldrb	r1, [r7, #6]
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 fb74 	bl	800e16c <USER_SPI_ioctl>
 800da84:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800da86:	4618      	mov	r0, r3
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
	...

0800da90 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800da98:	f7f4 fe26 	bl	80026e8 <HAL_GetTick>
 800da9c:	4603      	mov	r3, r0
 800da9e:	4a04      	ldr	r2, [pc, #16]	; (800dab0 <SPI_Timer_On+0x20>)
 800daa0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800daa2:	4a04      	ldr	r2, [pc, #16]	; (800dab4 <SPI_Timer_On+0x24>)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6013      	str	r3, [r2, #0]
}
 800daa8:	bf00      	nop
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	2400b934 	.word	0x2400b934
 800dab4:	2400b938 	.word	0x2400b938

0800dab8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800dab8:	b580      	push	{r7, lr}
 800daba:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800dabc:	f7f4 fe14 	bl	80026e8 <HAL_GetTick>
 800dac0:	4602      	mov	r2, r0
 800dac2:	4b06      	ldr	r3, [pc, #24]	; (800dadc <SPI_Timer_Status+0x24>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	1ad2      	subs	r2, r2, r3
 800dac8:	4b05      	ldr	r3, [pc, #20]	; (800dae0 <SPI_Timer_Status+0x28>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	429a      	cmp	r2, r3
 800dace:	bf34      	ite	cc
 800dad0:	2301      	movcc	r3, #1
 800dad2:	2300      	movcs	r3, #0
 800dad4:	b2db      	uxtb	r3, r3
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	2400b934 	.word	0x2400b934
 800dae0:	2400b938 	.word	0x2400b938

0800dae4 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi (BYTE dat	/* Data to send */)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af02      	add	r7, sp, #8
 800daea:	4603      	mov	r3, r0
 800daec:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800daee:	f107 020f 	add.w	r2, r7, #15
 800daf2:	1df9      	adds	r1, r7, #7
 800daf4:	2332      	movs	r3, #50	; 0x32
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	2301      	movs	r3, #1
 800dafa:	4804      	ldr	r0, [pc, #16]	; (800db0c <xchg_spi+0x28>)
 800dafc:	f7fc fa28 	bl	8009f50 <HAL_SPI_TransmitReceive>
    return rxDat;
 800db00:	7bfb      	ldrb	r3, [r7, #15]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	2400b0cc 	.word	0x2400b0cc

0800db10 <rcvr_spi_multi>:


/* Receive multiple byte */
static void rcvr_spi_multi (BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */)
{
 800db10:	b590      	push	{r4, r7, lr}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++)
 800db1a:	2300      	movs	r3, #0
 800db1c:	60fb      	str	r3, [r7, #12]
 800db1e:	e00a      	b.n	800db36 <rcvr_spi_multi+0x26>
	{
		*(buff+i) = xchg_spi(0xFF);
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	18d4      	adds	r4, r2, r3
 800db26:	20ff      	movs	r0, #255	; 0xff
 800db28:	f7ff ffdc 	bl	800dae4 <xchg_spi>
 800db2c:	4603      	mov	r3, r0
 800db2e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	3301      	adds	r3, #1
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d3f0      	bcc.n	800db20 <rcvr_spi_multi+0x10>
	}
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	bd90      	pop	{r4, r7, pc}

0800db48 <xmit_spi_multi>:

#if _USE_WRITE
/* Send multiple byte */
static void xmit_spi_multi (const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++)
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	e009      	b.n	800db6c <xmit_spi_multi+0x24>
	{
		xchg_spi(*(buff+i));
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	4413      	add	r3, r2
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff ffbf 	bl	800dae4 <xchg_spi>
	for(UINT i=0; i<btx; i++)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3301      	adds	r3, #1
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d3f1      	bcc.n	800db58 <xmit_spi_multi+0x10>
	}
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b086      	sub	sp, #24
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800db86:	f7f4 fdaf 	bl	80026e8 <HAL_GetTick>
 800db8a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800db90:	20ff      	movs	r0, #255	; 0xff
 800db92:	f7ff ffa7 	bl	800dae4 <xchg_spi>
 800db96:	4603      	mov	r3, r0
 800db98:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
 800db9c:	2bff      	cmp	r3, #255	; 0xff
 800db9e:	d007      	beq.n	800dbb0 <wait_ready+0x32>
 800dba0:	f7f4 fda2 	bl	80026e8 <HAL_GetTick>
 800dba4:	4602      	mov	r2, r0
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	693a      	ldr	r2, [r7, #16]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d8ef      	bhi.n	800db90 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	2bff      	cmp	r3, #255	; 0xff
 800dbb4:	bf0c      	ite	eq
 800dbb6:	2301      	moveq	r3, #1
 800dbb8:	2300      	movne	r3, #0
 800dbba:	b2db      	uxtb	r3, r3
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void despiselect (void)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800dbc8:	2201      	movs	r2, #1
 800dbca:	2110      	movs	r1, #16
 800dbcc:	4803      	ldr	r0, [pc, #12]	; (800dbdc <despiselect+0x18>)
 800dbce:	f7f7 fc4b 	bl	8005468 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800dbd2:	20ff      	movs	r0, #255	; 0xff
 800dbd4:	f7ff ff86 	bl	800dae4 <xchg_spi>

}
 800dbd8:	bf00      	nop
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	58020c00 	.word	0x58020c00

0800dbe0 <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	2110      	movs	r1, #16
 800dbe8:	4809      	ldr	r0, [pc, #36]	; (800dc10 <spiselect+0x30>)
 800dbea:	f7f7 fc3d 	bl	8005468 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800dbee:	20ff      	movs	r0, #255	; 0xff
 800dbf0:	f7ff ff78 	bl	800dae4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800dbf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dbf8:	f7ff ffc1 	bl	800db7e <wait_ready>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <spiselect+0x26>
 800dc02:	2301      	movs	r3, #1
 800dc04:	e002      	b.n	800dc0c <spiselect+0x2c>

	despiselect();
 800dc06:	f7ff ffdd 	bl	800dbc4 <despiselect>
	return 0;	/* Timeout */
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	58020c00 	.word	0x58020c00

0800dc14 <rcvr_datablock>:
/*-----------------------------------------------------------------------*/

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800dc1e:	20c8      	movs	r0, #200	; 0xc8
 800dc20:	f7ff ff36 	bl	800da90 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800dc24:	20ff      	movs	r0, #255	; 0xff
 800dc26:	f7ff ff5d 	bl	800dae4 <xchg_spi>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800dc2e:	7bfb      	ldrb	r3, [r7, #15]
 800dc30:	2bff      	cmp	r3, #255	; 0xff
 800dc32:	d104      	bne.n	800dc3e <rcvr_datablock+0x2a>
 800dc34:	f7ff ff40 	bl	800dab8 <SPI_Timer_Status>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1f2      	bne.n	800dc24 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	2bfe      	cmp	r3, #254	; 0xfe
 800dc42:	d001      	beq.n	800dc48 <rcvr_datablock+0x34>
 800dc44:	2300      	movs	r3, #0
 800dc46:	e00a      	b.n	800dc5e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ff60 	bl	800db10 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800dc50:	20ff      	movs	r0, #255	; 0xff
 800dc52:	f7ff ff47 	bl	800dae4 <xchg_spi>
 800dc56:	20ff      	movs	r0, #255	; 0xff
 800dc58:	f7ff ff44 	bl	800dae4 <xchg_spi>

	return 1;						/* Function succeeded */
 800dc5c:	2301      	movs	r3, #1
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <xmit_datablock>:

#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800dc72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc76:	f7ff ff82 	bl	800db7e <wait_ready>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <xmit_datablock+0x1e>
 800dc80:	2300      	movs	r3, #0
 800dc82:	e01e      	b.n	800dcc2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800dc84:	78fb      	ldrb	r3, [r7, #3]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7ff ff2c 	bl	800dae4 <xchg_spi>
	if (token != 0xFD)
 800dc8c:	78fb      	ldrb	r3, [r7, #3]
 800dc8e:	2bfd      	cmp	r3, #253	; 0xfd
 800dc90:	d016      	beq.n	800dcc0 <xmit_datablock+0x5a>
	{				/* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512);		/* Data */
 800dc92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff ff56 	bl	800db48 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800dc9c:	20ff      	movs	r0, #255	; 0xff
 800dc9e:	f7ff ff21 	bl	800dae4 <xchg_spi>
 800dca2:	20ff      	movs	r0, #255	; 0xff
 800dca4:	f7ff ff1e 	bl	800dae4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800dca8:	20ff      	movs	r0, #255	; 0xff
 800dcaa:	f7ff ff1b 	bl	800dae4 <xchg_spi>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	f003 031f 	and.w	r3, r3, #31
 800dcb8:	2b05      	cmp	r3, #5
 800dcba:	d001      	beq.n	800dcc0 <xmit_datablock+0x5a>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	e000      	b.n	800dcc2 <xmit_datablock+0x5c>
	}
	return 1;
 800dcc0:	2301      	movs	r3, #1
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	6039      	str	r1, [r7, #0]
 800dcd4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80)
 800dcd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	da0e      	bge.n	800dcfc <send_cmd+0x32>
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dce4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800dce6:	2100      	movs	r1, #0
 800dce8:	2037      	movs	r0, #55	; 0x37
 800dcea:	f7ff ffee 	bl	800dcca <send_cmd>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d901      	bls.n	800dcfc <send_cmd+0x32>
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	e051      	b.n	800dda0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12)
 800dcfc:	79fb      	ldrb	r3, [r7, #7]
 800dcfe:	2b0c      	cmp	r3, #12
 800dd00:	d008      	beq.n	800dd14 <send_cmd+0x4a>
	{
		despiselect();
 800dd02:	f7ff ff5f 	bl	800dbc4 <despiselect>
		if (!spiselect()) return 0xFF;
 800dd06:	f7ff ff6b 	bl	800dbe0 <spiselect>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <send_cmd+0x4a>
 800dd10:	23ff      	movs	r3, #255	; 0xff
 800dd12:	e045      	b.n	800dda0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7ff fee1 	bl	800dae4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	0e1b      	lsrs	r3, r3, #24
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff fedb 	bl	800dae4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	0c1b      	lsrs	r3, r3, #16
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff fed5 	bl	800dae4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	0a1b      	lsrs	r3, r3, #8
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fecf 	bl	800dae4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff feca 	bl	800dae4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800dd50:	2301      	movs	r3, #1
 800dd52:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d101      	bne.n	800dd5e <send_cmd+0x94>
 800dd5a:	2395      	movs	r3, #149	; 0x95
 800dd5c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800dd5e:	79fb      	ldrb	r3, [r7, #7]
 800dd60:	2b08      	cmp	r3, #8
 800dd62:	d101      	bne.n	800dd68 <send_cmd+0x9e>
 800dd64:	2387      	movs	r3, #135	; 0x87
 800dd66:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800dd68:	7bfb      	ldrb	r3, [r7, #15]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7ff feba 	bl	800dae4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	2b0c      	cmp	r3, #12
 800dd74:	d102      	bne.n	800dd7c <send_cmd+0xb2>
 800dd76:	20ff      	movs	r0, #255	; 0xff
 800dd78:	f7ff feb4 	bl	800dae4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800dd7c:	230a      	movs	r3, #10
 800dd7e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800dd80:	20ff      	movs	r0, #255	; 0xff
 800dd82:	f7ff feaf 	bl	800dae4 <xchg_spi>
 800dd86:	4603      	mov	r3, r0
 800dd88:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800dd8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	da05      	bge.n	800dd9e <send_cmd+0xd4>
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	73fb      	strb	r3, [r7, #15]
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1f0      	bne.n	800dd80 <send_cmd+0xb6>

	return res;							/* Return received response */
 800dd9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <USER_SPI_initialize>:
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */)
{
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <USER_SPI_initialize+0x14>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e0d4      	b.n	800df66 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ddbc:	4b6c      	ldr	r3, [pc, #432]	; (800df70 <USER_SPI_initialize+0x1c8>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	f003 0302 	and.w	r3, r3, #2
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <USER_SPI_initialize+0x2a>
 800ddca:	4b69      	ldr	r3, [pc, #420]	; (800df70 <USER_SPI_initialize+0x1c8>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	e0c9      	b.n	800df66 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800ddd2:	4b68      	ldr	r3, [pc, #416]	; (800df74 <USER_SPI_initialize+0x1cc>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	4b66      	ldr	r3, [pc, #408]	; (800df74 <USER_SPI_initialize+0x1cc>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 800dde0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800dde2:	230a      	movs	r3, #10
 800dde4:	73fb      	strb	r3, [r7, #15]
 800dde6:	e005      	b.n	800ddf4 <USER_SPI_initialize+0x4c>
 800dde8:	20ff      	movs	r0, #255	; 0xff
 800ddea:	f7ff fe7b 	bl	800dae4 <xchg_spi>
 800ddee:	7bfb      	ldrb	r3, [r7, #15]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	73fb      	strb	r3, [r7, #15]
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1f6      	bne.n	800dde8 <USER_SPI_initialize+0x40>

	ty = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800ddfe:	2100      	movs	r1, #0
 800de00:	2000      	movs	r0, #0
 800de02:	f7ff ff62 	bl	800dcca <send_cmd>
 800de06:	4603      	mov	r3, r0
 800de08:	2b01      	cmp	r3, #1
 800de0a:	f040 808b 	bne.w	800df24 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800de0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800de12:	f7ff fe3d 	bl	800da90 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800de16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800de1a:	2008      	movs	r0, #8
 800de1c:	f7ff ff55 	bl	800dcca <send_cmd>
 800de20:	4603      	mov	r3, r0
 800de22:	2b01      	cmp	r3, #1
 800de24:	d151      	bne.n	800deca <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800de26:	2300      	movs	r3, #0
 800de28:	73fb      	strb	r3, [r7, #15]
 800de2a:	e00d      	b.n	800de48 <USER_SPI_initialize+0xa0>
 800de2c:	7bfc      	ldrb	r4, [r7, #15]
 800de2e:	20ff      	movs	r0, #255	; 0xff
 800de30:	f7ff fe58 	bl	800dae4 <xchg_spi>
 800de34:	4603      	mov	r3, r0
 800de36:	461a      	mov	r2, r3
 800de38:	f107 0310 	add.w	r3, r7, #16
 800de3c:	4423      	add	r3, r4
 800de3e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	3301      	adds	r3, #1
 800de46:	73fb      	strb	r3, [r7, #15]
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d9ee      	bls.n	800de2c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800de4e:	7abb      	ldrb	r3, [r7, #10]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d167      	bne.n	800df24 <USER_SPI_initialize+0x17c>
 800de54:	7afb      	ldrb	r3, [r7, #11]
 800de56:	2baa      	cmp	r3, #170	; 0xaa
 800de58:	d164      	bne.n	800df24 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800de5a:	bf00      	nop
 800de5c:	f7ff fe2c 	bl	800dab8 <SPI_Timer_Status>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d007      	beq.n	800de76 <USER_SPI_initialize+0xce>
 800de66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800de6a:	20a9      	movs	r0, #169	; 0xa9
 800de6c:	f7ff ff2d 	bl	800dcca <send_cmd>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1f2      	bne.n	800de5c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800de76:	f7ff fe1f 	bl	800dab8 <SPI_Timer_Status>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d051      	beq.n	800df24 <USER_SPI_initialize+0x17c>
 800de80:	2100      	movs	r1, #0
 800de82:	203a      	movs	r0, #58	; 0x3a
 800de84:	f7ff ff21 	bl	800dcca <send_cmd>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d14a      	bne.n	800df24 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800de8e:	2300      	movs	r3, #0
 800de90:	73fb      	strb	r3, [r7, #15]
 800de92:	e00d      	b.n	800deb0 <USER_SPI_initialize+0x108>
 800de94:	7bfc      	ldrb	r4, [r7, #15]
 800de96:	20ff      	movs	r0, #255	; 0xff
 800de98:	f7ff fe24 	bl	800dae4 <xchg_spi>
 800de9c:	4603      	mov	r3, r0
 800de9e:	461a      	mov	r2, r3
 800dea0:	f107 0310 	add.w	r3, r7, #16
 800dea4:	4423      	add	r3, r4
 800dea6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	3301      	adds	r3, #1
 800deae:	73fb      	strb	r3, [r7, #15]
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d9ee      	bls.n	800de94 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800deb6:	7a3b      	ldrb	r3, [r7, #8]
 800deb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800debc:	2b00      	cmp	r3, #0
 800debe:	d001      	beq.n	800dec4 <USER_SPI_initialize+0x11c>
 800dec0:	230c      	movs	r3, #12
 800dec2:	e000      	b.n	800dec6 <USER_SPI_initialize+0x11e>
 800dec4:	2304      	movs	r3, #4
 800dec6:	737b      	strb	r3, [r7, #13]
 800dec8:	e02c      	b.n	800df24 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800deca:	2100      	movs	r1, #0
 800decc:	20a9      	movs	r0, #169	; 0xa9
 800dece:	f7ff fefc 	bl	800dcca <send_cmd>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d804      	bhi.n	800dee2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800ded8:	2302      	movs	r3, #2
 800deda:	737b      	strb	r3, [r7, #13]
 800dedc:	23a9      	movs	r3, #169	; 0xa9
 800dede:	73bb      	strb	r3, [r7, #14]
 800dee0:	e003      	b.n	800deea <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800dee2:	2301      	movs	r3, #1
 800dee4:	737b      	strb	r3, [r7, #13]
 800dee6:	2301      	movs	r3, #1
 800dee8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800deea:	bf00      	nop
 800deec:	f7ff fde4 	bl	800dab8 <SPI_Timer_Status>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d007      	beq.n	800df06 <USER_SPI_initialize+0x15e>
 800def6:	7bbb      	ldrb	r3, [r7, #14]
 800def8:	2100      	movs	r1, #0
 800defa:	4618      	mov	r0, r3
 800defc:	f7ff fee5 	bl	800dcca <send_cmd>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1f2      	bne.n	800deec <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800df06:	f7ff fdd7 	bl	800dab8 <SPI_Timer_Status>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d007      	beq.n	800df20 <USER_SPI_initialize+0x178>
 800df10:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df14:	2010      	movs	r0, #16
 800df16:	f7ff fed8 	bl	800dcca <send_cmd>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <USER_SPI_initialize+0x17c>
				ty = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800df24:	4a14      	ldr	r2, [pc, #80]	; (800df78 <USER_SPI_initialize+0x1d0>)
 800df26:	7b7b      	ldrb	r3, [r7, #13]
 800df28:	7013      	strb	r3, [r2, #0]
	despiselect();
 800df2a:	f7ff fe4b 	bl	800dbc4 <despiselect>

	if (ty) {			/* OK */
 800df2e:	7b7b      	ldrb	r3, [r7, #13]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d012      	beq.n	800df5a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800df34:	4b0f      	ldr	r3, [pc, #60]	; (800df74 <USER_SPI_initialize+0x1cc>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800df3e:	4b0d      	ldr	r3, [pc, #52]	; (800df74 <USER_SPI_initialize+0x1cc>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800df46:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800df48:	4b09      	ldr	r3, [pc, #36]	; (800df70 <USER_SPI_initialize+0x1c8>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f023 0301 	bic.w	r3, r3, #1
 800df52:	b2da      	uxtb	r2, r3
 800df54:	4b06      	ldr	r3, [pc, #24]	; (800df70 <USER_SPI_initialize+0x1c8>)
 800df56:	701a      	strb	r2, [r3, #0]
 800df58:	e002      	b.n	800df60 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800df5a:	4b05      	ldr	r3, [pc, #20]	; (800df70 <USER_SPI_initialize+0x1c8>)
 800df5c:	2201      	movs	r2, #1
 800df5e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800df60:	4b03      	ldr	r3, [pc, #12]	; (800df70 <USER_SPI_initialize+0x1c8>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	b2db      	uxtb	r3, r3
}
 800df66:	4618      	mov	r0, r3
 800df68:	3714      	adds	r7, #20
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd90      	pop	{r4, r7, pc}
 800df6e:	bf00      	nop
 800df70:	2400002c 	.word	0x2400002c
 800df74:	2400b0cc 	.word	0x2400b0cc
 800df78:	2400a3ec 	.word	0x2400a3ec

0800df7c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	4603      	mov	r3, r0
 800df84:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800df86:	79fb      	ldrb	r3, [r7, #7]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <USER_SPI_status+0x14>
 800df8c:	2301      	movs	r3, #1
 800df8e:	e002      	b.n	800df96 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800df90:	4b04      	ldr	r3, [pc, #16]	; (800dfa4 <USER_SPI_status+0x28>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	b2db      	uxtb	r3, r3
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	2400002c 	.word	0x2400002c

0800dfa8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60b9      	str	r1, [r7, #8]
 800dfb0:	607a      	str	r2, [r7, #4]
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <USER_SPI_read+0x1c>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d101      	bne.n	800dfc8 <USER_SPI_read+0x20>
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	e04d      	b.n	800e064 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800dfc8:	4b28      	ldr	r3, [pc, #160]	; (800e06c <USER_SPI_read+0xc4>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <USER_SPI_read+0x32>
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	e044      	b.n	800e064 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800dfda:	4b25      	ldr	r3, [pc, #148]	; (800e070 <USER_SPI_read+0xc8>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	f003 0308 	and.w	r3, r3, #8
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d102      	bne.n	800dfec <USER_SPI_read+0x44>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	025b      	lsls	r3, r3, #9
 800dfea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d111      	bne.n	800e016 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800dff2:	6879      	ldr	r1, [r7, #4]
 800dff4:	2011      	movs	r0, #17
 800dff6:	f7ff fe68 	bl	800dcca <send_cmd>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d129      	bne.n	800e054 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e000:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e004:	68b8      	ldr	r0, [r7, #8]
 800e006:	f7ff fe05 	bl	800dc14 <rcvr_datablock>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d021      	beq.n	800e054 <USER_SPI_read+0xac>
			count = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	603b      	str	r3, [r7, #0]
 800e014:	e01e      	b.n	800e054 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e016:	6879      	ldr	r1, [r7, #4]
 800e018:	2012      	movs	r0, #18
 800e01a:	f7ff fe56 	bl	800dcca <send_cmd>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d117      	bne.n	800e054 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e024:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e028:	68b8      	ldr	r0, [r7, #8]
 800e02a:	f7ff fdf3 	bl	800dc14 <rcvr_datablock>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00a      	beq.n	800e04a <USER_SPI_read+0xa2>
				buff += 512;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e03a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	3b01      	subs	r3, #1
 800e040:	603b      	str	r3, [r7, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1ed      	bne.n	800e024 <USER_SPI_read+0x7c>
 800e048:	e000      	b.n	800e04c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e04a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e04c:	2100      	movs	r1, #0
 800e04e:	200c      	movs	r0, #12
 800e050:	f7ff fe3b 	bl	800dcca <send_cmd>
		}
	}
	despiselect();
 800e054:	f7ff fdb6 	bl	800dbc4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	bf14      	ite	ne
 800e05e:	2301      	movne	r3, #1
 800e060:	2300      	moveq	r3, #0
 800e062:	b2db      	uxtb	r3, r3
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	2400002c 	.word	0x2400002c
 800e070:	2400a3ec 	.word	0x2400a3ec

0800e074 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607a      	str	r2, [r7, #4]
 800e07e:	603b      	str	r3, [r7, #0]
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e084:	7bfb      	ldrb	r3, [r7, #15]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d102      	bne.n	800e090 <USER_SPI_write+0x1c>
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d101      	bne.n	800e094 <USER_SPI_write+0x20>
 800e090:	2304      	movs	r3, #4
 800e092:	e063      	b.n	800e15c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e094:	4b33      	ldr	r3, [pc, #204]	; (800e164 <USER_SPI_write+0xf0>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <USER_SPI_write+0x32>
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e05a      	b.n	800e15c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e0a6:	4b2f      	ldr	r3, [pc, #188]	; (800e164 <USER_SPI_write+0xf0>)
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f003 0304 	and.w	r3, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <USER_SPI_write+0x44>
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	e051      	b.n	800e15c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e0b8:	4b2b      	ldr	r3, [pc, #172]	; (800e168 <USER_SPI_write+0xf4>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	f003 0308 	and.w	r3, r3, #8
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <USER_SPI_write+0x56>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	025b      	lsls	r3, r3, #9
 800e0c8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d110      	bne.n	800e0f2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e0d0:	6879      	ldr	r1, [r7, #4]
 800e0d2:	2018      	movs	r0, #24
 800e0d4:	f7ff fdf9 	bl	800dcca <send_cmd>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d136      	bne.n	800e14c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e0de:	21fe      	movs	r1, #254	; 0xfe
 800e0e0:	68b8      	ldr	r0, [r7, #8]
 800e0e2:	f7ff fdc0 	bl	800dc66 <xmit_datablock>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d02f      	beq.n	800e14c <USER_SPI_write+0xd8>
			count = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	e02c      	b.n	800e14c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e0f2:	4b1d      	ldr	r3, [pc, #116]	; (800e168 <USER_SPI_write+0xf4>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	f003 0306 	and.w	r3, r3, #6
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d003      	beq.n	800e106 <USER_SPI_write+0x92>
 800e0fe:	6839      	ldr	r1, [r7, #0]
 800e100:	2097      	movs	r0, #151	; 0x97
 800e102:	f7ff fde2 	bl	800dcca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	2019      	movs	r0, #25
 800e10a:	f7ff fdde 	bl	800dcca <send_cmd>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d11b      	bne.n	800e14c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e114:	21fc      	movs	r1, #252	; 0xfc
 800e116:	68b8      	ldr	r0, [r7, #8]
 800e118:	f7ff fda5 	bl	800dc66 <xmit_datablock>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00a      	beq.n	800e138 <USER_SPI_write+0xc4>
				buff += 512;
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e128:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	603b      	str	r3, [r7, #0]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1ee      	bne.n	800e114 <USER_SPI_write+0xa0>
 800e136:	e000      	b.n	800e13a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e138:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e13a:	21fd      	movs	r1, #253	; 0xfd
 800e13c:	2000      	movs	r0, #0
 800e13e:	f7ff fd92 	bl	800dc66 <xmit_datablock>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <USER_SPI_write+0xd8>
 800e148:	2301      	movs	r3, #1
 800e14a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e14c:	f7ff fd3a 	bl	800dbc4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	bf14      	ite	ne
 800e156:	2301      	movne	r3, #1
 800e158:	2300      	moveq	r3, #0
 800e15a:	b2db      	uxtb	r3, r3
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	2400002c 	.word	0x2400002c
 800e168:	2400a3ec 	.word	0x2400a3ec

0800e16c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08c      	sub	sp, #48	; 0x30
 800e170:	af00      	add	r7, sp, #0
 800e172:	4603      	mov	r3, r0
 800e174:	603a      	str	r2, [r7, #0]
 800e176:	71fb      	strb	r3, [r7, #7]
 800e178:	460b      	mov	r3, r1
 800e17a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <USER_SPI_ioctl+0x1a>
 800e182:	2304      	movs	r3, #4
 800e184:	e15a      	b.n	800e43c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e186:	4baf      	ldr	r3, [pc, #700]	; (800e444 <USER_SPI_ioctl+0x2d8>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <USER_SPI_ioctl+0x2c>
 800e194:	2303      	movs	r3, #3
 800e196:	e151      	b.n	800e43c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800e19e:	79bb      	ldrb	r3, [r7, #6]
 800e1a0:	2b04      	cmp	r3, #4
 800e1a2:	f200 8136 	bhi.w	800e412 <USER_SPI_ioctl+0x2a6>
 800e1a6:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <USER_SPI_ioctl+0x40>)
 800e1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ac:	0800e1c1 	.word	0x0800e1c1
 800e1b0:	0800e1d5 	.word	0x0800e1d5
 800e1b4:	0800e413 	.word	0x0800e413
 800e1b8:	0800e281 	.word	0x0800e281
 800e1bc:	0800e377 	.word	0x0800e377
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e1c0:	f7ff fd0e 	bl	800dbe0 <spiselect>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f000 8127 	beq.w	800e41a <USER_SPI_ioctl+0x2ae>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e1d2:	e122      	b.n	800e41a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	2009      	movs	r0, #9
 800e1d8:	f7ff fd77 	bl	800dcca <send_cmd>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f040 811d 	bne.w	800e41e <USER_SPI_ioctl+0x2b2>
 800e1e4:	f107 030c 	add.w	r3, r7, #12
 800e1e8:	2110      	movs	r1, #16
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff fd12 	bl	800dc14 <rcvr_datablock>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f000 8113 	beq.w	800e41e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e1f8:	7b3b      	ldrb	r3, [r7, #12]
 800e1fa:	099b      	lsrs	r3, r3, #6
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d111      	bne.n	800e226 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e202:	7d7b      	ldrb	r3, [r7, #21]
 800e204:	461a      	mov	r2, r3
 800e206:	7d3b      	ldrb	r3, [r7, #20]
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	4413      	add	r3, r2
 800e20c:	461a      	mov	r2, r3
 800e20e:	7cfb      	ldrb	r3, [r7, #19]
 800e210:	041b      	lsls	r3, r3, #16
 800e212:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800e216:	4413      	add	r3, r2
 800e218:	3301      	adds	r3, #1
 800e21a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	029a      	lsls	r2, r3, #10
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	e028      	b.n	800e278 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e226:	7c7b      	ldrb	r3, [r7, #17]
 800e228:	f003 030f 	and.w	r3, r3, #15
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	7dbb      	ldrb	r3, [r7, #22]
 800e230:	09db      	lsrs	r3, r3, #7
 800e232:	b2db      	uxtb	r3, r3
 800e234:	4413      	add	r3, r2
 800e236:	b2da      	uxtb	r2, r3
 800e238:	7d7b      	ldrb	r3, [r7, #21]
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	f003 0306 	and.w	r3, r3, #6
 800e242:	b2db      	uxtb	r3, r3
 800e244:	4413      	add	r3, r2
 800e246:	b2db      	uxtb	r3, r3
 800e248:	3302      	adds	r3, #2
 800e24a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e24e:	7d3b      	ldrb	r3, [r7, #20]
 800e250:	099b      	lsrs	r3, r3, #6
 800e252:	b2db      	uxtb	r3, r3
 800e254:	461a      	mov	r2, r3
 800e256:	7cfb      	ldrb	r3, [r7, #19]
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	441a      	add	r2, r3
 800e25c:	7cbb      	ldrb	r3, [r7, #18]
 800e25e:	029b      	lsls	r3, r3, #10
 800e260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e264:	4413      	add	r3, r2
 800e266:	3301      	adds	r3, #1
 800e268:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e26a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e26e:	3b09      	subs	r3, #9
 800e270:	69fa      	ldr	r2, [r7, #28]
 800e272:	409a      	lsls	r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e27e:	e0ce      	b.n	800e41e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e280:	4b71      	ldr	r3, [pc, #452]	; (800e448 <USER_SPI_ioctl+0x2dc>)
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	f003 0304 	and.w	r3, r3, #4
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d031      	beq.n	800e2f0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e28c:	2100      	movs	r1, #0
 800e28e:	208d      	movs	r0, #141	; 0x8d
 800e290:	f7ff fd1b 	bl	800dcca <send_cmd>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	f040 80c3 	bne.w	800e422 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e29c:	20ff      	movs	r0, #255	; 0xff
 800e29e:	f7ff fc21 	bl	800dae4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e2a2:	f107 030c 	add.w	r3, r7, #12
 800e2a6:	2110      	movs	r1, #16
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7ff fcb3 	bl	800dc14 <rcvr_datablock>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 80b6 	beq.w	800e422 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e2b6:	2330      	movs	r3, #48	; 0x30
 800e2b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e2bc:	e007      	b.n	800e2ce <USER_SPI_ioctl+0x162>
 800e2be:	20ff      	movs	r0, #255	; 0xff
 800e2c0:	f7ff fc10 	bl	800dae4 <xchg_spi>
 800e2c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e2ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1f3      	bne.n	800e2be <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e2d6:	7dbb      	ldrb	r3, [r7, #22]
 800e2d8:	091b      	lsrs	r3, r3, #4
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	461a      	mov	r2, r3
 800e2de:	2310      	movs	r3, #16
 800e2e0:	fa03 f202 	lsl.w	r2, r3, r2
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e2ee:	e098      	b.n	800e422 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	2009      	movs	r0, #9
 800e2f4:	f7ff fce9 	bl	800dcca <send_cmd>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f040 8091 	bne.w	800e422 <USER_SPI_ioctl+0x2b6>
 800e300:	f107 030c 	add.w	r3, r7, #12
 800e304:	2110      	movs	r1, #16
 800e306:	4618      	mov	r0, r3
 800e308:	f7ff fc84 	bl	800dc14 <rcvr_datablock>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f000 8087 	beq.w	800e422 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e314:	4b4c      	ldr	r3, [pc, #304]	; (800e448 <USER_SPI_ioctl+0x2dc>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	f003 0302 	and.w	r3, r3, #2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d012      	beq.n	800e346 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e320:	7dbb      	ldrb	r3, [r7, #22]
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800e328:	7dfa      	ldrb	r2, [r7, #23]
 800e32a:	09d2      	lsrs	r2, r2, #7
 800e32c:	b2d2      	uxtb	r2, r2
 800e32e:	4413      	add	r3, r2
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	7e7b      	ldrb	r3, [r7, #25]
 800e334:	099b      	lsrs	r3, r3, #6
 800e336:	b2db      	uxtb	r3, r3
 800e338:	3b01      	subs	r3, #1
 800e33a:	fa02 f303 	lsl.w	r3, r2, r3
 800e33e:	461a      	mov	r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	e013      	b.n	800e36e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e346:	7dbb      	ldrb	r3, [r7, #22]
 800e348:	109b      	asrs	r3, r3, #2
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	f003 031f 	and.w	r3, r3, #31
 800e350:	3301      	adds	r3, #1
 800e352:	7dfa      	ldrb	r2, [r7, #23]
 800e354:	00d2      	lsls	r2, r2, #3
 800e356:	f002 0218 	and.w	r2, r2, #24
 800e35a:	7df9      	ldrb	r1, [r7, #23]
 800e35c:	0949      	lsrs	r1, r1, #5
 800e35e:	b2c9      	uxtb	r1, r1
 800e360:	440a      	add	r2, r1
 800e362:	3201      	adds	r2, #1
 800e364:	fb02 f303 	mul.w	r3, r2, r3
 800e368:	461a      	mov	r2, r3
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e374:	e055      	b.n	800e422 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e376:	4b34      	ldr	r3, [pc, #208]	; (800e448 <USER_SPI_ioctl+0x2dc>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	f003 0306 	and.w	r3, r3, #6
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d051      	beq.n	800e426 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e382:	f107 020c 	add.w	r2, r7, #12
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	210b      	movs	r1, #11
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7ff feee 	bl	800e16c <USER_SPI_ioctl>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d149      	bne.n	800e42a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e396:	7b3b      	ldrb	r3, [r7, #12]
 800e398:	099b      	lsrs	r3, r3, #6
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d104      	bne.n	800e3aa <USER_SPI_ioctl+0x23e>
 800e3a0:	7dbb      	ldrb	r3, [r7, #22]
 800e3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d041      	beq.n	800e42e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	623b      	str	r3, [r7, #32]
 800e3ae:	6a3b      	ldr	r3, [r7, #32]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800e3ba:	4b23      	ldr	r3, [pc, #140]	; (800e448 <USER_SPI_ioctl+0x2dc>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	f003 0308 	and.w	r3, r3, #8
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d105      	bne.n	800e3d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	025b      	lsls	r3, r3, #9
 800e3ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	025b      	lsls	r3, r3, #9
 800e3d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e3d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3d4:	2020      	movs	r0, #32
 800e3d6:	f7ff fc78 	bl	800dcca <send_cmd>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d128      	bne.n	800e432 <USER_SPI_ioctl+0x2c6>
 800e3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3e2:	2021      	movs	r0, #33	; 0x21
 800e3e4:	f7ff fc71 	bl	800dcca <send_cmd>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d121      	bne.n	800e432 <USER_SPI_ioctl+0x2c6>
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	2026      	movs	r0, #38	; 0x26
 800e3f2:	f7ff fc6a 	bl	800dcca <send_cmd>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d11a      	bne.n	800e432 <USER_SPI_ioctl+0x2c6>
 800e3fc:	f247 5030 	movw	r0, #30000	; 0x7530
 800e400:	f7ff fbbd 	bl	800db7e <wait_ready>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d013      	beq.n	800e432 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e40a:	2300      	movs	r3, #0
 800e40c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e410:	e00f      	b.n	800e432 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e412:	2304      	movs	r3, #4
 800e414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e418:	e00c      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		break;
 800e41a:	bf00      	nop
 800e41c:	e00a      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		break;
 800e41e:	bf00      	nop
 800e420:	e008      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		break;
 800e422:	bf00      	nop
 800e424:	e006      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e426:	bf00      	nop
 800e428:	e004      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e42a:	bf00      	nop
 800e42c:	e002      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e42e:	bf00      	nop
 800e430:	e000      	b.n	800e434 <USER_SPI_ioctl+0x2c8>
		break;
 800e432:	bf00      	nop
	}

	despiselect();
 800e434:	f7ff fbc6 	bl	800dbc4 <despiselect>

	return res;
 800e438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3730      	adds	r7, #48	; 0x30
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	2400002c 	.word	0x2400002c
 800e448:	2400a3ec 	.word	0x2400a3ec

0800e44c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 800e456:	1df9      	adds	r1, r7, #7
 800e458:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e45c:	2201      	movs	r2, #1
 800e45e:	4803      	ldr	r0, [pc, #12]	; (800e46c <DEV_SPI_WRite+0x20>)
 800e460:	f7fb fb84 	bl	8009b6c <HAL_SPI_Transmit>
}
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	2400b154 	.word	0x2400b154

0800e470 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800e474:	2201      	movs	r2, #1
 800e476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e47a:	480a      	ldr	r0, [pc, #40]	; (800e4a4 <DEV_Module_Init+0x34>)
 800e47c:	f7f6 fff4 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 800e480:	2201      	movs	r2, #1
 800e482:	2140      	movs	r1, #64	; 0x40
 800e484:	4807      	ldr	r0, [pc, #28]	; (800e4a4 <DEV_Module_Init+0x34>)
 800e486:	f7f6 ffef 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800e48a:	2201      	movs	r2, #1
 800e48c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e490:	4805      	ldr	r0, [pc, #20]	; (800e4a8 <DEV_Module_Init+0x38>)
 800e492:	f7f6 ffe9 	bl	8005468 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800e496:	2100      	movs	r1, #0
 800e498:	4804      	ldr	r0, [pc, #16]	; (800e4ac <DEV_Module_Init+0x3c>)
 800e49a:	f7fc fba7 	bl	800abec <HAL_TIM_PWM_Start>
		return 0;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	58021800 	.word	0x58021800
 800e4a8:	58021400 	.word	0x58021400
 800e4ac:	2400b268 	.word	0x2400b268

0800e4b0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800e4b0:	b590      	push	{r4, r7, lr}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	461a      	mov	r2, r3
 800e4be:	4623      	mov	r3, r4
 800e4c0:	80fb      	strh	r3, [r7, #6]
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	80bb      	strh	r3, [r7, #4]
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	807b      	strh	r3, [r7, #2]
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800e4ce:	4a1c      	ldr	r2, [pc, #112]	; (800e540 <Paint_NewImage+0x90>)
 800e4d0:	88fb      	ldrh	r3, [r7, #6]
 800e4d2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800e4d4:	4a1a      	ldr	r2, [pc, #104]	; (800e540 <Paint_NewImage+0x90>)
 800e4d6:	88bb      	ldrh	r3, [r7, #4]
 800e4d8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800e4da:	4a19      	ldr	r2, [pc, #100]	; (800e540 <Paint_NewImage+0x90>)
 800e4dc:	883b      	ldrh	r3, [r7, #0]
 800e4de:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800e4e0:	4a17      	ldr	r2, [pc, #92]	; (800e540 <Paint_NewImage+0x90>)
 800e4e2:	88fb      	ldrh	r3, [r7, #6]
 800e4e4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800e4e6:	4a16      	ldr	r2, [pc, #88]	; (800e540 <Paint_NewImage+0x90>)
 800e4e8:	88bb      	ldrh	r3, [r7, #4]
 800e4ea:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800e4ec:	4b14      	ldr	r3, [pc, #80]	; (800e540 <Paint_NewImage+0x90>)
 800e4ee:	8a5b      	ldrh	r3, [r3, #18]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4b12      	ldr	r3, [pc, #72]	; (800e540 <Paint_NewImage+0x90>)
 800e4f6:	8a9b      	ldrh	r3, [r3, #20]
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4811      	ldr	r0, [pc, #68]	; (800e544 <Paint_NewImage+0x94>)
 800e4fe:	f00d ffe5 	bl	801c4cc <iprintf>
   
    Paint.Rotate = Rotate;
 800e502:	4a0f      	ldr	r2, [pc, #60]	; (800e540 <Paint_NewImage+0x90>)
 800e504:	887b      	ldrh	r3, [r7, #2]
 800e506:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800e508:	4b0d      	ldr	r3, [pc, #52]	; (800e540 <Paint_NewImage+0x90>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800e50e:	887b      	ldrh	r3, [r7, #2]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <Paint_NewImage+0x6a>
 800e514:	887b      	ldrh	r3, [r7, #2]
 800e516:	2bb4      	cmp	r3, #180	; 0xb4
 800e518:	d106      	bne.n	800e528 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800e51a:	4a09      	ldr	r2, [pc, #36]	; (800e540 <Paint_NewImage+0x90>)
 800e51c:	88fb      	ldrh	r3, [r7, #6]
 800e51e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800e520:	4a07      	ldr	r2, [pc, #28]	; (800e540 <Paint_NewImage+0x90>)
 800e522:	88bb      	ldrh	r3, [r7, #4]
 800e524:	80d3      	strh	r3, [r2, #6]
 800e526:	e006      	b.n	800e536 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800e528:	4a05      	ldr	r2, [pc, #20]	; (800e540 <Paint_NewImage+0x90>)
 800e52a:	88bb      	ldrh	r3, [r7, #4]
 800e52c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800e52e:	4a04      	ldr	r2, [pc, #16]	; (800e540 <Paint_NewImage+0x90>)
 800e530:	88fb      	ldrh	r3, [r7, #6]
 800e532:	80d3      	strh	r3, [r2, #6]
    }
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd90      	pop	{r4, r7, pc}
 800e53e:	bf00      	nop
 800e540:	2400b940 	.word	0x2400b940
 800e544:	08020020 	.word	0x08020020

0800e548 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800e550:	4a04      	ldr	r2, [pc, #16]	; (800e564 <Paint_SetClearFuntion+0x1c>)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6013      	str	r3, [r2, #0]
}
 800e556:	bf00      	nop
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	2400b958 	.word	0x2400b958

0800e568 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800e570:	4a04      	ldr	r2, [pc, #16]	; (800e584 <Paint_SetDisplayFuntion+0x1c>)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6013      	str	r3, [r2, #0]
}
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	2400b93c 	.word	0x2400b93c

0800e588 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	4603      	mov	r3, r0
 800e590:	80fb      	strh	r3, [r7, #6]
 800e592:	460b      	mov	r3, r1
 800e594:	80bb      	strh	r3, [r7, #4]
 800e596:	4613      	mov	r3, r2
 800e598:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800e59a:	4b50      	ldr	r3, [pc, #320]	; (800e6dc <Paint_SetPixel+0x154>)
 800e59c:	889b      	ldrh	r3, [r3, #4]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	88fa      	ldrh	r2, [r7, #6]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d805      	bhi.n	800e5b2 <Paint_SetPixel+0x2a>
 800e5a6:	4b4d      	ldr	r3, [pc, #308]	; (800e6dc <Paint_SetPixel+0x154>)
 800e5a8:	88db      	ldrh	r3, [r3, #6]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	88ba      	ldrh	r2, [r7, #4]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d903      	bls.n	800e5ba <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800e5b2:	484b      	ldr	r0, [pc, #300]	; (800e6e0 <Paint_SetPixel+0x158>)
 800e5b4:	f00e f810 	bl	801c5d8 <puts>
        return;
 800e5b8:	e08c      	b.n	800e6d4 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800e5ba:	4b48      	ldr	r3, [pc, #288]	; (800e6dc <Paint_SetPixel+0x154>)
 800e5bc:	89db      	ldrh	r3, [r3, #14]
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e5c4:	d02d      	beq.n	800e622 <Paint_SetPixel+0x9a>
 800e5c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e5ca:	f300 8080 	bgt.w	800e6ce <Paint_SetPixel+0x146>
 800e5ce:	2bb4      	cmp	r3, #180	; 0xb4
 800e5d0:	d016      	beq.n	800e600 <Paint_SetPixel+0x78>
 800e5d2:	2bb4      	cmp	r3, #180	; 0xb4
 800e5d4:	dc7b      	bgt.n	800e6ce <Paint_SetPixel+0x146>
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <Paint_SetPixel+0x58>
 800e5da:	2b5a      	cmp	r3, #90	; 0x5a
 800e5dc:	d005      	beq.n	800e5ea <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800e5de:	e076      	b.n	800e6ce <Paint_SetPixel+0x146>
        X = Xpoint;
 800e5e0:	88fb      	ldrh	r3, [r7, #6]
 800e5e2:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800e5e4:	88bb      	ldrh	r3, [r7, #4]
 800e5e6:	81bb      	strh	r3, [r7, #12]
        break;
 800e5e8:	e026      	b.n	800e638 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800e5ea:	4b3c      	ldr	r3, [pc, #240]	; (800e6dc <Paint_SetPixel+0x154>)
 800e5ec:	891b      	ldrh	r3, [r3, #8]
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	88bb      	ldrh	r3, [r7, #4]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800e5fa:	88fb      	ldrh	r3, [r7, #6]
 800e5fc:	81bb      	strh	r3, [r7, #12]
        break;
 800e5fe:	e01b      	b.n	800e638 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800e600:	4b36      	ldr	r3, [pc, #216]	; (800e6dc <Paint_SetPixel+0x154>)
 800e602:	891b      	ldrh	r3, [r3, #8]
 800e604:	b29a      	uxth	r2, r3
 800e606:	88fb      	ldrh	r3, [r7, #6]
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	3b01      	subs	r3, #1
 800e60e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800e610:	4b32      	ldr	r3, [pc, #200]	; (800e6dc <Paint_SetPixel+0x154>)
 800e612:	895b      	ldrh	r3, [r3, #10]
 800e614:	b29a      	uxth	r2, r3
 800e616:	88bb      	ldrh	r3, [r7, #4]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	3b01      	subs	r3, #1
 800e61e:	81bb      	strh	r3, [r7, #12]
        break;
 800e620:	e00a      	b.n	800e638 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800e622:	88bb      	ldrh	r3, [r7, #4]
 800e624:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800e626:	4b2d      	ldr	r3, [pc, #180]	; (800e6dc <Paint_SetPixel+0x154>)
 800e628:	895b      	ldrh	r3, [r3, #10]
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	88fb      	ldrh	r3, [r7, #6]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	b29b      	uxth	r3, r3
 800e632:	3b01      	subs	r3, #1
 800e634:	81bb      	strh	r3, [r7, #12]
        break;
 800e636:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800e638:	4b28      	ldr	r3, [pc, #160]	; (800e6dc <Paint_SetPixel+0x154>)
 800e63a:	8a1b      	ldrh	r3, [r3, #16]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d847      	bhi.n	800e6d2 <Paint_SetPixel+0x14a>
 800e642:	a201      	add	r2, pc, #4	; (adr r2, 800e648 <Paint_SetPixel+0xc0>)
 800e644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e648:	0800e69f 	.word	0x0800e69f
 800e64c:	0800e659 	.word	0x0800e659
 800e650:	0800e66b 	.word	0x0800e66b
 800e654:	0800e67d 	.word	0x0800e67d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800e658:	4b20      	ldr	r3, [pc, #128]	; (800e6dc <Paint_SetPixel+0x154>)
 800e65a:	891b      	ldrh	r3, [r3, #8]
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	89fb      	ldrh	r3, [r7, #14]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	b29b      	uxth	r3, r3
 800e664:	3b01      	subs	r3, #1
 800e666:	81fb      	strh	r3, [r7, #14]
        break;
 800e668:	e01a      	b.n	800e6a0 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800e66a:	4b1c      	ldr	r3, [pc, #112]	; (800e6dc <Paint_SetPixel+0x154>)
 800e66c:	895b      	ldrh	r3, [r3, #10]
 800e66e:	b29a      	uxth	r2, r3
 800e670:	89bb      	ldrh	r3, [r7, #12]
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	b29b      	uxth	r3, r3
 800e676:	3b01      	subs	r3, #1
 800e678:	81bb      	strh	r3, [r7, #12]
        break;
 800e67a:	e011      	b.n	800e6a0 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800e67c:	4b17      	ldr	r3, [pc, #92]	; (800e6dc <Paint_SetPixel+0x154>)
 800e67e:	891b      	ldrh	r3, [r3, #8]
 800e680:	b29a      	uxth	r2, r3
 800e682:	89fb      	ldrh	r3, [r7, #14]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	b29b      	uxth	r3, r3
 800e688:	3b01      	subs	r3, #1
 800e68a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800e68c:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <Paint_SetPixel+0x154>)
 800e68e:	895b      	ldrh	r3, [r3, #10]
 800e690:	b29a      	uxth	r2, r3
 800e692:	89bb      	ldrh	r3, [r7, #12]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	b29b      	uxth	r3, r3
 800e698:	3b01      	subs	r3, #1
 800e69a:	81bb      	strh	r3, [r7, #12]
        break;
 800e69c:	e000      	b.n	800e6a0 <Paint_SetPixel+0x118>
        break;
 800e69e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800e6a0:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <Paint_SetPixel+0x154>)
 800e6a2:	891b      	ldrh	r3, [r3, #8]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	89fa      	ldrh	r2, [r7, #14]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d805      	bhi.n	800e6b8 <Paint_SetPixel+0x130>
 800e6ac:	4b0b      	ldr	r3, [pc, #44]	; (800e6dc <Paint_SetPixel+0x154>)
 800e6ae:	895b      	ldrh	r3, [r3, #10]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	89ba      	ldrh	r2, [r7, #12]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d903      	bls.n	800e6c0 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800e6b8:	4809      	ldr	r0, [pc, #36]	; (800e6e0 <Paint_SetPixel+0x158>)
 800e6ba:	f00d ff8d 	bl	801c5d8 <puts>
        return;
 800e6be:	e009      	b.n	800e6d4 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800e6c0:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <Paint_SetPixel+0x15c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	887a      	ldrh	r2, [r7, #2]
 800e6c6:	89b9      	ldrh	r1, [r7, #12]
 800e6c8:	89f8      	ldrh	r0, [r7, #14]
 800e6ca:	4798      	blx	r3
 800e6cc:	e002      	b.n	800e6d4 <Paint_SetPixel+0x14c>
        return;
 800e6ce:	bf00      	nop
 800e6d0:	e000      	b.n	800e6d4 <Paint_SetPixel+0x14c>
        return;
 800e6d2:	bf00      	nop
}
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2400b940 	.word	0x2400b940
 800e6e0:	08020120 	.word	0x08020120
 800e6e4:	2400b93c 	.word	0x2400b93c

0800e6e8 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800e6f2:	4b04      	ldr	r3, [pc, #16]	; (800e704 <Paint_Clear+0x1c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	88fa      	ldrh	r2, [r7, #6]
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	4798      	blx	r3
}
 800e6fc:	bf00      	nop
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	2400b958 	.word	0x2400b958

0800e708 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800e708:	b590      	push	{r4, r7, lr}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	4604      	mov	r4, r0
 800e710:	4608      	mov	r0, r1
 800e712:	4611      	mov	r1, r2
 800e714:	461a      	mov	r2, r3
 800e716:	4623      	mov	r3, r4
 800e718:	80fb      	strh	r3, [r7, #6]
 800e71a:	4603      	mov	r3, r0
 800e71c:	80bb      	strh	r3, [r7, #4]
 800e71e:	460b      	mov	r3, r1
 800e720:	807b      	strh	r3, [r7, #2]
 800e722:	4613      	mov	r3, r2
 800e724:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800e726:	88bb      	ldrh	r3, [r7, #4]
 800e728:	81bb      	strh	r3, [r7, #12]
 800e72a:	e012      	b.n	800e752 <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 800e72c:	88fb      	ldrh	r3, [r7, #6]
 800e72e:	81fb      	strh	r3, [r7, #14]
 800e730:	e008      	b.n	800e744 <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800e732:	8c3a      	ldrh	r2, [r7, #32]
 800e734:	89b9      	ldrh	r1, [r7, #12]
 800e736:	89fb      	ldrh	r3, [r7, #14]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff ff25 	bl	800e588 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800e73e:	89fb      	ldrh	r3, [r7, #14]
 800e740:	3301      	adds	r3, #1
 800e742:	81fb      	strh	r3, [r7, #14]
 800e744:	89fa      	ldrh	r2, [r7, #14]
 800e746:	887b      	ldrh	r3, [r7, #2]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d3f2      	bcc.n	800e732 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 800e74c:	89bb      	ldrh	r3, [r7, #12]
 800e74e:	3301      	adds	r3, #1
 800e750:	81bb      	strh	r3, [r7, #12]
 800e752:	89ba      	ldrh	r2, [r7, #12]
 800e754:	883b      	ldrh	r3, [r7, #0]
 800e756:	429a      	cmp	r2, r3
 800e758:	d3e8      	bcc.n	800e72c <Paint_ClearWindows+0x24>
        }
    }
}
 800e75a:	bf00      	nop
 800e75c:	bf00      	nop
 800e75e:	3714      	adds	r7, #20
 800e760:	46bd      	mov	sp, r7
 800e762:	bd90      	pop	{r4, r7, pc}

0800e764 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 800e764:	b590      	push	{r4, r7, lr}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4604      	mov	r4, r0
 800e76c:	4608      	mov	r0, r1
 800e76e:	4611      	mov	r1, r2
 800e770:	461a      	mov	r2, r3
 800e772:	4623      	mov	r3, r4
 800e774:	80fb      	strh	r3, [r7, #6]
 800e776:	4603      	mov	r3, r0
 800e778:	80bb      	strh	r3, [r7, #4]
 800e77a:	460b      	mov	r3, r1
 800e77c:	807b      	strh	r3, [r7, #2]
 800e77e:	4613      	mov	r3, r2
 800e780:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800e782:	4b44      	ldr	r3, [pc, #272]	; (800e894 <Paint_DrawPoint+0x130>)
 800e784:	889b      	ldrh	r3, [r3, #4]
 800e786:	b29b      	uxth	r3, r3
 800e788:	88fa      	ldrh	r2, [r7, #6]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d805      	bhi.n	800e79a <Paint_DrawPoint+0x36>
 800e78e:	4b41      	ldr	r3, [pc, #260]	; (800e894 <Paint_DrawPoint+0x130>)
 800e790:	88db      	ldrh	r3, [r3, #6]
 800e792:	b29b      	uxth	r3, r3
 800e794:	88ba      	ldrh	r2, [r7, #4]
 800e796:	429a      	cmp	r2, r3
 800e798:	d903      	bls.n	800e7a2 <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800e79a:	483f      	ldr	r0, [pc, #252]	; (800e898 <Paint_DrawPoint+0x134>)
 800e79c:	f00d ff1c 	bl	801c5d8 <puts>
        return;
 800e7a0:	e074      	b.n	800e88c <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 800e7a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d144      	bne.n	800e834 <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	81fb      	strh	r3, [r7, #14]
 800e7ae:	e039      	b.n	800e824 <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	81bb      	strh	r3, [r7, #12]
 800e7b4:	e029      	b.n	800e80a <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800e7b6:	88fa      	ldrh	r2, [r7, #6]
 800e7b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e7bc:	441a      	add	r2, r3
 800e7be:	787b      	ldrb	r3, [r7, #1]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	db28      	blt.n	800e818 <Paint_DrawPoint+0xb4>
 800e7c6:	88ba      	ldrh	r2, [r7, #4]
 800e7c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e7cc:	441a      	add	r2, r3
 800e7ce:	787b      	ldrb	r3, [r7, #1]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	db20      	blt.n	800e818 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800e7d6:	89fa      	ldrh	r2, [r7, #14]
 800e7d8:	88fb      	ldrh	r3, [r7, #6]
 800e7da:	4413      	add	r3, r2
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	787b      	ldrb	r3, [r7, #1]
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	b298      	uxth	r0, r3
 800e7e6:	89ba      	ldrh	r2, [r7, #12]
 800e7e8:	88bb      	ldrh	r3, [r7, #4]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	787b      	ldrb	r3, [r7, #1]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	1ad3      	subs	r3, r2, r3
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	887a      	ldrh	r2, [r7, #2]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f7ff fec5 	bl	800e588 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800e7fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e802:	b29b      	uxth	r3, r3
 800e804:	3301      	adds	r3, #1
 800e806:	b29b      	uxth	r3, r3
 800e808:	81bb      	strh	r3, [r7, #12]
 800e80a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e80e:	787b      	ldrb	r3, [r7, #1]
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	3b01      	subs	r3, #1
 800e814:	429a      	cmp	r2, r3
 800e816:	dbce      	blt.n	800e7b6 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800e818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	3301      	adds	r3, #1
 800e820:	b29b      	uxth	r3, r3
 800e822:	81fb      	strh	r3, [r7, #14]
 800e824:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e828:	787b      	ldrb	r3, [r7, #1]
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	3b01      	subs	r3, #1
 800e82e:	429a      	cmp	r2, r3
 800e830:	dbbe      	blt.n	800e7b0 <Paint_DrawPoint+0x4c>
 800e832:	e02b      	b.n	800e88c <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800e834:	2300      	movs	r3, #0
 800e836:	81fb      	strh	r3, [r7, #14]
 800e838:	e023      	b.n	800e882 <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800e83a:	2300      	movs	r3, #0
 800e83c:	81bb      	strh	r3, [r7, #12]
 800e83e:	e015      	b.n	800e86c <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800e840:	89fa      	ldrh	r2, [r7, #14]
 800e842:	88fb      	ldrh	r3, [r7, #6]
 800e844:	4413      	add	r3, r2
 800e846:	b29b      	uxth	r3, r3
 800e848:	3b01      	subs	r3, #1
 800e84a:	b298      	uxth	r0, r3
 800e84c:	89ba      	ldrh	r2, [r7, #12]
 800e84e:	88bb      	ldrh	r3, [r7, #4]
 800e850:	4413      	add	r3, r2
 800e852:	b29b      	uxth	r3, r3
 800e854:	3b01      	subs	r3, #1
 800e856:	b29b      	uxth	r3, r3
 800e858:	887a      	ldrh	r2, [r7, #2]
 800e85a:	4619      	mov	r1, r3
 800e85c:	f7ff fe94 	bl	800e588 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800e860:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e864:	b29b      	uxth	r3, r3
 800e866:	3301      	adds	r3, #1
 800e868:	b29b      	uxth	r3, r3
 800e86a:	81bb      	strh	r3, [r7, #12]
 800e86c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e870:	787b      	ldrb	r3, [r7, #1]
 800e872:	429a      	cmp	r2, r3
 800e874:	dbe4      	blt.n	800e840 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800e876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	3301      	adds	r3, #1
 800e87e:	b29b      	uxth	r3, r3
 800e880:	81fb      	strh	r3, [r7, #14]
 800e882:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e886:	787b      	ldrb	r3, [r7, #1]
 800e888:	429a      	cmp	r2, r3
 800e88a:	dbd6      	blt.n	800e83a <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd90      	pop	{r4, r7, pc}
 800e892:	bf00      	nop
 800e894:	2400b940 	.word	0x2400b940
 800e898:	08020148 	.word	0x08020148

0800e89c <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800e89c:	b590      	push	{r4, r7, lr}
 800e89e:	b08d      	sub	sp, #52	; 0x34
 800e8a0:	af02      	add	r7, sp, #8
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	4623      	mov	r3, r4
 800e8ac:	80fb      	strh	r3, [r7, #6]
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	80bb      	strh	r3, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	807b      	strh	r3, [r7, #2]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800e8ba:	4b4d      	ldr	r3, [pc, #308]	; (800e9f0 <Paint_DrawLine+0x154>)
 800e8bc:	889b      	ldrh	r3, [r3, #4]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	88fa      	ldrh	r2, [r7, #6]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d811      	bhi.n	800e8ea <Paint_DrawLine+0x4e>
 800e8c6:	4b4a      	ldr	r3, [pc, #296]	; (800e9f0 <Paint_DrawLine+0x154>)
 800e8c8:	88db      	ldrh	r3, [r3, #6]
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	88ba      	ldrh	r2, [r7, #4]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d80b      	bhi.n	800e8ea <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800e8d2:	4b47      	ldr	r3, [pc, #284]	; (800e9f0 <Paint_DrawLine+0x154>)
 800e8d4:	889b      	ldrh	r3, [r3, #4]
 800e8d6:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800e8d8:	887a      	ldrh	r2, [r7, #2]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d805      	bhi.n	800e8ea <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800e8de:	4b44      	ldr	r3, [pc, #272]	; (800e9f0 <Paint_DrawLine+0x154>)
 800e8e0:	88db      	ldrh	r3, [r3, #6]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	883a      	ldrh	r2, [r7, #0]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d903      	bls.n	800e8f2 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800e8ea:	4842      	ldr	r0, [pc, #264]	; (800e9f4 <Paint_DrawLine+0x158>)
 800e8ec:	f00d fe74 	bl	801c5d8 <puts>
        return;
 800e8f0:	e07b      	b.n	800e9ea <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 800e8f2:	88fb      	ldrh	r3, [r7, #6]
 800e8f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800e8f6:	88bb      	ldrh	r3, [r7, #4]
 800e8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800e8fa:	887a      	ldrh	r2, [r7, #2]
 800e8fc:	88fb      	ldrh	r3, [r7, #6]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	2b00      	cmp	r3, #0
 800e902:	bfb8      	it	lt
 800e904:	425b      	neglt	r3, r3
 800e906:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800e908:	883a      	ldrh	r2, [r7, #0]
 800e90a:	88bb      	ldrh	r3, [r7, #4]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	bfb8      	it	lt
 800e912:	425b      	neglt	r3, r3
 800e914:	425b      	negs	r3, r3
 800e916:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800e918:	88fa      	ldrh	r2, [r7, #6]
 800e91a:	887b      	ldrh	r3, [r7, #2]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d201      	bcs.n	800e924 <Paint_DrawLine+0x88>
 800e920:	2301      	movs	r3, #1
 800e922:	e001      	b.n	800e928 <Paint_DrawLine+0x8c>
 800e924:	f04f 33ff 	mov.w	r3, #4294967295
 800e928:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800e92a:	88ba      	ldrh	r2, [r7, #4]
 800e92c:	883b      	ldrh	r3, [r7, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d201      	bcs.n	800e936 <Paint_DrawLine+0x9a>
 800e932:	2301      	movs	r3, #1
 800e934:	e001      	b.n	800e93a <Paint_DrawLine+0x9e>
 800e936:	f04f 33ff 	mov.w	r3, #4294967295
 800e93a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800e93c:	69ba      	ldr	r2, [r7, #24]
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	4413      	add	r3, r2
 800e942:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800e944:	2300      	movs	r3, #0
 800e946:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 800e948:	7ffb      	ldrb	r3, [r7, #31]
 800e94a:	3301      	adds	r3, #1
 800e94c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800e94e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e952:	2b01      	cmp	r3, #1
 800e954:	d118      	bne.n	800e988 <Paint_DrawLine+0xec>
 800e956:	7ffa      	ldrb	r2, [r7, #31]
 800e958:	4b27      	ldr	r3, [pc, #156]	; (800e9f8 <Paint_DrawLine+0x15c>)
 800e95a:	fba3 1302 	umull	r1, r3, r3, r2
 800e95e:	0859      	lsrs	r1, r3, #1
 800e960:	460b      	mov	r3, r1
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	440b      	add	r3, r1
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10c      	bne.n	800e988 <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800e96e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e972:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e974:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800e976:	2201      	movs	r2, #1
 800e978:	9200      	str	r2, [sp, #0]
 800e97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e97e:	f7ff fef1 	bl	800e764 <Paint_DrawPoint>
            Dotted_Len = 0;
 800e982:	2300      	movs	r3, #0
 800e984:	77fb      	strb	r3, [r7, #31]
 800e986:	e008      	b.n	800e99a <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800e988:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e98c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e98e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e990:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800e992:	2401      	movs	r4, #1
 800e994:	9400      	str	r4, [sp, #0]
 800e996:	f7ff fee5 	bl	800e764 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800e99a:	6a3b      	ldr	r3, [r7, #32]
 800e99c:	005b      	lsls	r3, r3, #1
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	dc0c      	bgt.n	800e9be <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 800e9a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e9a6:	887b      	ldrh	r3, [r7, #2]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d01b      	beq.n	800e9e4 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 800e9ac:	6a3a      	ldr	r2, [r7, #32]
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9ba:	4413      	add	r3, r2
 800e9bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 800e9be:	6a3b      	ldr	r3, [r7, #32]
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	dbbf      	blt.n	800e948 <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 800e9c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9ca:	883b      	ldrh	r3, [r7, #0]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d00b      	beq.n	800e9e8 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800e9d0:	6a3a      	ldr	r2, [r7, #32]
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9de:	4413      	add	r3, r2
 800e9e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800e9e2:	e7b1      	b.n	800e948 <Paint_DrawLine+0xac>
                break;
 800e9e4:	bf00      	nop
 800e9e6:	e000      	b.n	800e9ea <Paint_DrawLine+0x14e>
                break;
 800e9e8:	bf00      	nop
        }
    }
}
 800e9ea:	372c      	adds	r7, #44	; 0x2c
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd90      	pop	{r4, r7, pc}
 800e9f0:	2400b940 	.word	0x2400b940
 800e9f4:	08020188 	.word	0x08020188
 800e9f8:	aaaaaaab 	.word	0xaaaaaaab

0800e9fc <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 800e9fc:	b590      	push	{r4, r7, lr}
 800e9fe:	b089      	sub	sp, #36	; 0x24
 800ea00:	af04      	add	r7, sp, #16
 800ea02:	4604      	mov	r4, r0
 800ea04:	4608      	mov	r0, r1
 800ea06:	4611      	mov	r1, r2
 800ea08:	461a      	mov	r2, r3
 800ea0a:	4623      	mov	r3, r4
 800ea0c:	80fb      	strh	r3, [r7, #6]
 800ea0e:	4603      	mov	r3, r0
 800ea10:	80bb      	strh	r3, [r7, #4]
 800ea12:	460b      	mov	r3, r1
 800ea14:	807b      	strh	r3, [r7, #2]
 800ea16:	4613      	mov	r3, r2
 800ea18:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800ea1a:	4b3a      	ldr	r3, [pc, #232]	; (800eb04 <Paint_DrawRectangle+0x108>)
 800ea1c:	889b      	ldrh	r3, [r3, #4]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	88fa      	ldrh	r2, [r7, #6]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d811      	bhi.n	800ea4a <Paint_DrawRectangle+0x4e>
 800ea26:	4b37      	ldr	r3, [pc, #220]	; (800eb04 <Paint_DrawRectangle+0x108>)
 800ea28:	88db      	ldrh	r3, [r3, #6]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	88ba      	ldrh	r2, [r7, #4]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d80b      	bhi.n	800ea4a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800ea32:	4b34      	ldr	r3, [pc, #208]	; (800eb04 <Paint_DrawRectangle+0x108>)
 800ea34:	889b      	ldrh	r3, [r3, #4]
 800ea36:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800ea38:	887a      	ldrh	r2, [r7, #2]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d805      	bhi.n	800ea4a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800ea3e:	4b31      	ldr	r3, [pc, #196]	; (800eb04 <Paint_DrawRectangle+0x108>)
 800ea40:	88db      	ldrh	r3, [r3, #6]
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	883a      	ldrh	r2, [r7, #0]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d903      	bls.n	800ea52 <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 800ea4a:	482f      	ldr	r0, [pc, #188]	; (800eb08 <Paint_DrawRectangle+0x10c>)
 800ea4c:	f00d fdc4 	bl	801c5d8 <puts>
        return;
 800ea50:	e054      	b.n	800eafc <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 800ea52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d018      	beq.n	800ea8c <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800ea5a:	88bb      	ldrh	r3, [r7, #4]
 800ea5c:	81fb      	strh	r3, [r7, #14]
 800ea5e:	e010      	b.n	800ea82 <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 800ea60:	89fc      	ldrh	r4, [r7, #14]
 800ea62:	887a      	ldrh	r2, [r7, #2]
 800ea64:	89f9      	ldrh	r1, [r7, #14]
 800ea66:	88f8      	ldrh	r0, [r7, #6]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	9302      	str	r3, [sp, #8]
 800ea6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea70:	9301      	str	r3, [sp, #4]
 800ea72:	8c3b      	ldrh	r3, [r7, #32]
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	4623      	mov	r3, r4
 800ea78:	f7ff ff10 	bl	800e89c <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800ea7c:	89fb      	ldrh	r3, [r7, #14]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	81fb      	strh	r3, [r7, #14]
 800ea82:	89fa      	ldrh	r2, [r7, #14]
 800ea84:	883b      	ldrh	r3, [r7, #0]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d3ea      	bcc.n	800ea60 <Paint_DrawRectangle+0x64>
 800ea8a:	e037      	b.n	800eafc <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800ea8c:	88bc      	ldrh	r4, [r7, #4]
 800ea8e:	887a      	ldrh	r2, [r7, #2]
 800ea90:	88b9      	ldrh	r1, [r7, #4]
 800ea92:	88f8      	ldrh	r0, [r7, #6]
 800ea94:	2300      	movs	r3, #0
 800ea96:	9302      	str	r3, [sp, #8]
 800ea98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea9c:	9301      	str	r3, [sp, #4]
 800ea9e:	8c3b      	ldrh	r3, [r7, #32]
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	4623      	mov	r3, r4
 800eaa4:	f7ff fefa 	bl	800e89c <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800eaa8:	883c      	ldrh	r4, [r7, #0]
 800eaaa:	88fa      	ldrh	r2, [r7, #6]
 800eaac:	88b9      	ldrh	r1, [r7, #4]
 800eaae:	88f8      	ldrh	r0, [r7, #6]
 800eab0:	2300      	movs	r3, #0
 800eab2:	9302      	str	r3, [sp, #8]
 800eab4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	8c3b      	ldrh	r3, [r7, #32]
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	4623      	mov	r3, r4
 800eac0:	f7ff feec 	bl	800e89c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800eac4:	88bc      	ldrh	r4, [r7, #4]
 800eac6:	887a      	ldrh	r2, [r7, #2]
 800eac8:	8839      	ldrh	r1, [r7, #0]
 800eaca:	8878      	ldrh	r0, [r7, #2]
 800eacc:	2300      	movs	r3, #0
 800eace:	9302      	str	r3, [sp, #8]
 800ead0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	8c3b      	ldrh	r3, [r7, #32]
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	4623      	mov	r3, r4
 800eadc:	f7ff fede 	bl	800e89c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800eae0:	883c      	ldrh	r4, [r7, #0]
 800eae2:	88fa      	ldrh	r2, [r7, #6]
 800eae4:	8839      	ldrh	r1, [r7, #0]
 800eae6:	8878      	ldrh	r0, [r7, #2]
 800eae8:	2300      	movs	r3, #0
 800eaea:	9302      	str	r3, [sp, #8]
 800eaec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eaf0:	9301      	str	r3, [sp, #4]
 800eaf2:	8c3b      	ldrh	r3, [r7, #32]
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	4623      	mov	r3, r4
 800eaf8:	f7ff fed0 	bl	800e89c <Paint_DrawLine>
    }
}
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd90      	pop	{r4, r7, pc}
 800eb02:	bf00      	nop
 800eb04:	2400b940 	.word	0x2400b940
 800eb08:	080201c8 	.word	0x080201c8

0800eb0c <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b087      	sub	sp, #28
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	4604      	mov	r4, r0
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4623      	mov	r3, r4
 800eb1c:	80fb      	strh	r3, [r7, #6]
 800eb1e:	4603      	mov	r3, r0
 800eb20:	80bb      	strh	r3, [r7, #4]
 800eb22:	460b      	mov	r3, r1
 800eb24:	807b      	strh	r3, [r7, #2]
 800eb26:	4613      	mov	r3, r2
 800eb28:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800eb2a:	4b68      	ldr	r3, [pc, #416]	; (800eccc <Paint_DrawCircle+0x1c0>)
 800eb2c:	889b      	ldrh	r3, [r3, #4]
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	88fa      	ldrh	r2, [r7, #6]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d805      	bhi.n	800eb42 <Paint_DrawCircle+0x36>
 800eb36:	4b65      	ldr	r3, [pc, #404]	; (800eccc <Paint_DrawCircle+0x1c0>)
 800eb38:	88db      	ldrh	r3, [r3, #6]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	88ba      	ldrh	r2, [r7, #4]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d303      	bcc.n	800eb4a <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800eb42:	4863      	ldr	r0, [pc, #396]	; (800ecd0 <Paint_DrawCircle+0x1c4>)
 800eb44:	f00d fd48 	bl	801c5d8 <puts>
        return;
 800eb48:	e16b      	b.n	800ee22 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800eb4e:	887b      	ldrh	r3, [r7, #2]
 800eb50:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800eb52:	887b      	ldrh	r3, [r7, #2]
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	f1c3 0303 	rsb	r3, r3, #3
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800eb60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	f040 8155 	bne.w	800ee14 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800eb6a:	e0a6      	b.n	800ecba <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800eb6c:	89fb      	ldrh	r3, [r7, #14]
 800eb6e:	813b      	strh	r3, [r7, #8]
 800eb70:	e075      	b.n	800ec5e <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800eb72:	89fa      	ldrh	r2, [r7, #14]
 800eb74:	88fb      	ldrh	r3, [r7, #6]
 800eb76:	4413      	add	r3, r2
 800eb78:	b298      	uxth	r0, r3
 800eb7a:	893a      	ldrh	r2, [r7, #8]
 800eb7c:	88bb      	ldrh	r3, [r7, #4]
 800eb7e:	4413      	add	r3, r2
 800eb80:	b299      	uxth	r1, r3
 800eb82:	883a      	ldrh	r2, [r7, #0]
 800eb84:	2301      	movs	r3, #1
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	2301      	movs	r3, #1
 800eb8a:	f7ff fdeb 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800eb8e:	89fb      	ldrh	r3, [r7, #14]
 800eb90:	88fa      	ldrh	r2, [r7, #6]
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	b298      	uxth	r0, r3
 800eb96:	893a      	ldrh	r2, [r7, #8]
 800eb98:	88bb      	ldrh	r3, [r7, #4]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	b299      	uxth	r1, r3
 800eb9e:	883a      	ldrh	r2, [r7, #0]
 800eba0:	2301      	movs	r3, #1
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	2301      	movs	r3, #1
 800eba6:	f7ff fddd 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800ebaa:	893b      	ldrh	r3, [r7, #8]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	b298      	uxth	r0, r3
 800ebb2:	89fa      	ldrh	r2, [r7, #14]
 800ebb4:	88bb      	ldrh	r3, [r7, #4]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	b299      	uxth	r1, r3
 800ebba:	883a      	ldrh	r2, [r7, #0]
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	f7ff fdcf 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800ebc6:	893b      	ldrh	r3, [r7, #8]
 800ebc8:	88fa      	ldrh	r2, [r7, #6]
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	b298      	uxth	r0, r3
 800ebce:	89fb      	ldrh	r3, [r7, #14]
 800ebd0:	88ba      	ldrh	r2, [r7, #4]
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	b299      	uxth	r1, r3
 800ebd6:	883a      	ldrh	r2, [r7, #0]
 800ebd8:	2301      	movs	r3, #1
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	2301      	movs	r3, #1
 800ebde:	f7ff fdc1 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800ebe2:	89fb      	ldrh	r3, [r7, #14]
 800ebe4:	88fa      	ldrh	r2, [r7, #6]
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	b298      	uxth	r0, r3
 800ebea:	893b      	ldrh	r3, [r7, #8]
 800ebec:	88ba      	ldrh	r2, [r7, #4]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	b299      	uxth	r1, r3
 800ebf2:	883a      	ldrh	r2, [r7, #0]
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	f7ff fdb3 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800ebfe:	89fa      	ldrh	r2, [r7, #14]
 800ec00:	88fb      	ldrh	r3, [r7, #6]
 800ec02:	4413      	add	r3, r2
 800ec04:	b298      	uxth	r0, r3
 800ec06:	893b      	ldrh	r3, [r7, #8]
 800ec08:	88ba      	ldrh	r2, [r7, #4]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	b299      	uxth	r1, r3
 800ec0e:	883a      	ldrh	r2, [r7, #0]
 800ec10:	2301      	movs	r3, #1
 800ec12:	9300      	str	r3, [sp, #0]
 800ec14:	2301      	movs	r3, #1
 800ec16:	f7ff fda5 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800ec1a:	893a      	ldrh	r2, [r7, #8]
 800ec1c:	88fb      	ldrh	r3, [r7, #6]
 800ec1e:	4413      	add	r3, r2
 800ec20:	b298      	uxth	r0, r3
 800ec22:	89fb      	ldrh	r3, [r7, #14]
 800ec24:	88ba      	ldrh	r2, [r7, #4]
 800ec26:	1ad3      	subs	r3, r2, r3
 800ec28:	b299      	uxth	r1, r3
 800ec2a:	883a      	ldrh	r2, [r7, #0]
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	2301      	movs	r3, #1
 800ec32:	f7ff fd97 	bl	800e764 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800ec36:	893a      	ldrh	r2, [r7, #8]
 800ec38:	88fb      	ldrh	r3, [r7, #6]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	b298      	uxth	r0, r3
 800ec3e:	89fa      	ldrh	r2, [r7, #14]
 800ec40:	88bb      	ldrh	r3, [r7, #4]
 800ec42:	4413      	add	r3, r2
 800ec44:	b299      	uxth	r1, r3
 800ec46:	883a      	ldrh	r2, [r7, #0]
 800ec48:	2301      	movs	r3, #1
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f7ff fd89 	bl	800e764 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800ec52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	3301      	adds	r3, #1
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	813b      	strh	r3, [r7, #8]
 800ec5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ec62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	dd83      	ble.n	800eb72 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800ec6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	da09      	bge.n	800ec86 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 800ec72:	89fb      	ldrh	r3, [r7, #14]
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	897b      	ldrh	r3, [r7, #10]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	3306      	adds	r3, #6
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	817b      	strh	r3, [r7, #10]
 800ec84:	e013      	b.n	800ecae <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800ec86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ec8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	897b      	ldrh	r3, [r7, #10]
 800ec98:	4413      	add	r3, r2
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	330a      	adds	r3, #10
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800eca2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800ecae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800ecba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ecbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	f77f af52 	ble.w	800eb6c <Paint_DrawCircle+0x60>
 800ecc8:	e0ab      	b.n	800ee22 <Paint_DrawCircle+0x316>
 800ecca:	bf00      	nop
 800eccc:	2400b940 	.word	0x2400b940
 800ecd0:	080201f8 	.word	0x080201f8
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800ecd4:	89fa      	ldrh	r2, [r7, #14]
 800ecd6:	88fb      	ldrh	r3, [r7, #6]
 800ecd8:	4413      	add	r3, r2
 800ecda:	b298      	uxth	r0, r3
 800ecdc:	89ba      	ldrh	r2, [r7, #12]
 800ecde:	88bb      	ldrh	r3, [r7, #4]
 800ece0:	4413      	add	r3, r2
 800ece2:	b299      	uxth	r1, r3
 800ece4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ece8:	883a      	ldrh	r2, [r7, #0]
 800ecea:	2401      	movs	r4, #1
 800ecec:	9400      	str	r4, [sp, #0]
 800ecee:	f7ff fd39 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
 800ecf4:	88fa      	ldrh	r2, [r7, #6]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	b298      	uxth	r0, r3
 800ecfa:	89ba      	ldrh	r2, [r7, #12]
 800ecfc:	88bb      	ldrh	r3, [r7, #4]
 800ecfe:	4413      	add	r3, r2
 800ed00:	b299      	uxth	r1, r3
 800ed02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed06:	883a      	ldrh	r2, [r7, #0]
 800ed08:	2401      	movs	r4, #1
 800ed0a:	9400      	str	r4, [sp, #0]
 800ed0c:	f7ff fd2a 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800ed10:	89bb      	ldrh	r3, [r7, #12]
 800ed12:	88fa      	ldrh	r2, [r7, #6]
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	b298      	uxth	r0, r3
 800ed18:	89fa      	ldrh	r2, [r7, #14]
 800ed1a:	88bb      	ldrh	r3, [r7, #4]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	b299      	uxth	r1, r3
 800ed20:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed24:	883a      	ldrh	r2, [r7, #0]
 800ed26:	2401      	movs	r4, #1
 800ed28:	9400      	str	r4, [sp, #0]
 800ed2a:	f7ff fd1b 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800ed2e:	89bb      	ldrh	r3, [r7, #12]
 800ed30:	88fa      	ldrh	r2, [r7, #6]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	b298      	uxth	r0, r3
 800ed36:	89fb      	ldrh	r3, [r7, #14]
 800ed38:	88ba      	ldrh	r2, [r7, #4]
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b299      	uxth	r1, r3
 800ed3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed42:	883a      	ldrh	r2, [r7, #0]
 800ed44:	2401      	movs	r4, #1
 800ed46:	9400      	str	r4, [sp, #0]
 800ed48:	f7ff fd0c 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800ed4c:	89fb      	ldrh	r3, [r7, #14]
 800ed4e:	88fa      	ldrh	r2, [r7, #6]
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	b298      	uxth	r0, r3
 800ed54:	89bb      	ldrh	r3, [r7, #12]
 800ed56:	88ba      	ldrh	r2, [r7, #4]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	b299      	uxth	r1, r3
 800ed5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed60:	883a      	ldrh	r2, [r7, #0]
 800ed62:	2401      	movs	r4, #1
 800ed64:	9400      	str	r4, [sp, #0]
 800ed66:	f7ff fcfd 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800ed6a:	89fa      	ldrh	r2, [r7, #14]
 800ed6c:	88fb      	ldrh	r3, [r7, #6]
 800ed6e:	4413      	add	r3, r2
 800ed70:	b298      	uxth	r0, r3
 800ed72:	89bb      	ldrh	r3, [r7, #12]
 800ed74:	88ba      	ldrh	r2, [r7, #4]
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	b299      	uxth	r1, r3
 800ed7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed7e:	883a      	ldrh	r2, [r7, #0]
 800ed80:	2401      	movs	r4, #1
 800ed82:	9400      	str	r4, [sp, #0]
 800ed84:	f7ff fcee 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800ed88:	89ba      	ldrh	r2, [r7, #12]
 800ed8a:	88fb      	ldrh	r3, [r7, #6]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	b298      	uxth	r0, r3
 800ed90:	89fb      	ldrh	r3, [r7, #14]
 800ed92:	88ba      	ldrh	r2, [r7, #4]
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	b299      	uxth	r1, r3
 800ed98:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed9c:	883a      	ldrh	r2, [r7, #0]
 800ed9e:	2401      	movs	r4, #1
 800eda0:	9400      	str	r4, [sp, #0]
 800eda2:	f7ff fcdf 	bl	800e764 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800eda6:	89ba      	ldrh	r2, [r7, #12]
 800eda8:	88fb      	ldrh	r3, [r7, #6]
 800edaa:	4413      	add	r3, r2
 800edac:	b298      	uxth	r0, r3
 800edae:	89fa      	ldrh	r2, [r7, #14]
 800edb0:	88bb      	ldrh	r3, [r7, #4]
 800edb2:	4413      	add	r3, r2
 800edb4:	b299      	uxth	r1, r3
 800edb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edba:	883a      	ldrh	r2, [r7, #0]
 800edbc:	2401      	movs	r4, #1
 800edbe:	9400      	str	r4, [sp, #0]
 800edc0:	f7ff fcd0 	bl	800e764 <Paint_DrawPoint>

            if (Esp < 0 )
 800edc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	da09      	bge.n	800ede0 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 800edcc:	89fb      	ldrh	r3, [r7, #14]
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	897b      	ldrh	r3, [r7, #10]
 800edd4:	4413      	add	r3, r2
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	3306      	adds	r3, #6
 800edda:	b29b      	uxth	r3, r3
 800eddc:	817b      	strh	r3, [r7, #10]
 800edde:	e013      	b.n	800ee08 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800ede0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ede4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	b29b      	uxth	r3, r3
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	b29a      	uxth	r2, r3
 800edf0:	897b      	ldrh	r3, [r7, #10]
 800edf2:	4413      	add	r3, r2
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	330a      	adds	r3, #10
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800edfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	3b01      	subs	r3, #1
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800ee08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	3301      	adds	r3, #1
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800ee14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ee18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	f77f af59 	ble.w	800ecd4 <Paint_DrawCircle+0x1c8>
        }
    }
}
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd90      	pop	{r4, r7, pc}

0800ee28 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b088      	sub	sp, #32
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	607b      	str	r3, [r7, #4]
 800ee30:	4603      	mov	r3, r0
 800ee32:	81fb      	strh	r3, [r7, #14]
 800ee34:	460b      	mov	r3, r1
 800ee36:	81bb      	strh	r3, [r7, #12]
 800ee38:	4613      	mov	r3, r2
 800ee3a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800ee3c:	4b3f      	ldr	r3, [pc, #252]	; (800ef3c <Paint_DrawChar+0x114>)
 800ee3e:	889b      	ldrh	r3, [r3, #4]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	89fa      	ldrh	r2, [r7, #14]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d805      	bhi.n	800ee54 <Paint_DrawChar+0x2c>
 800ee48:	4b3c      	ldr	r3, [pc, #240]	; (800ef3c <Paint_DrawChar+0x114>)
 800ee4a:	88db      	ldrh	r3, [r3, #6]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	89ba      	ldrh	r2, [r7, #12]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d903      	bls.n	800ee5c <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800ee54:	483a      	ldr	r0, [pc, #232]	; (800ef40 <Paint_DrawChar+0x118>)
 800ee56:	f00d fbbf 	bl	801c5d8 <puts>
        return;
 800ee5a:	e06b      	b.n	800ef34 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800ee5c:	7afb      	ldrb	r3, [r7, #11]
 800ee5e:	3b20      	subs	r3, #32
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	88d2      	ldrh	r2, [r2, #6]
 800ee64:	fb02 f303 	mul.w	r3, r2, r3
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	8892      	ldrh	r2, [r2, #4]
 800ee6c:	08d2      	lsrs	r2, r2, #3
 800ee6e:	b292      	uxth	r2, r2
 800ee70:	4611      	mov	r1, r2
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	8892      	ldrh	r2, [r2, #4]
 800ee76:	f002 0207 	and.w	r2, r2, #7
 800ee7a:	b292      	uxth	r2, r2
 800ee7c:	2a00      	cmp	r2, #0
 800ee7e:	bf14      	ite	ne
 800ee80:	2201      	movne	r2, #1
 800ee82:	2200      	moveq	r2, #0
 800ee84:	b2d2      	uxtb	r2, r2
 800ee86:	440a      	add	r2, r1
 800ee88:	fb02 f303 	mul.w	r3, r2, r3
 800ee8c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	4413      	add	r3, r2
 800ee96:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 800ee98:	2300      	movs	r3, #0
 800ee9a:	837b      	strh	r3, [r7, #26]
 800ee9c:	e045      	b.n	800ef2a <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 800ee9e:	2300      	movs	r3, #0
 800eea0:	833b      	strh	r3, [r7, #24]
 800eea2:	e030      	b.n	800ef06 <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	4619      	mov	r1, r3
 800eeaa:	8b3b      	ldrh	r3, [r7, #24]
 800eeac:	f003 0307 	and.w	r3, r3, #7
 800eeb0:	2280      	movs	r2, #128	; 0x80
 800eeb2:	fa42 f303 	asr.w	r3, r2, r3
 800eeb6:	400b      	ands	r3, r1
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00c      	beq.n	800eed6 <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800eebc:	89fa      	ldrh	r2, [r7, #14]
 800eebe:	8b3b      	ldrh	r3, [r7, #24]
 800eec0:	4413      	add	r3, r2
 800eec2:	b298      	uxth	r0, r3
 800eec4:	89ba      	ldrh	r2, [r7, #12]
 800eec6:	8b7b      	ldrh	r3, [r7, #26]
 800eec8:	4413      	add	r3, r2
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800eece:	4619      	mov	r1, r3
 800eed0:	f7ff fb5a 	bl	800e588 <Paint_SetPixel>
 800eed4:	e00b      	b.n	800eeee <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800eed6:	89fa      	ldrh	r2, [r7, #14]
 800eed8:	8b3b      	ldrh	r3, [r7, #24]
 800eeda:	4413      	add	r3, r2
 800eedc:	b298      	uxth	r0, r3
 800eede:	89ba      	ldrh	r2, [r7, #12]
 800eee0:	8b7b      	ldrh	r3, [r7, #26]
 800eee2:	4413      	add	r3, r2
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eee8:	4619      	mov	r1, r3
 800eeea:	f7ff fb4d 	bl	800e588 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800eeee:	8b3b      	ldrh	r3, [r7, #24]
 800eef0:	f003 0307 	and.w	r3, r3, #7
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	2b07      	cmp	r3, #7
 800eef8:	d102      	bne.n	800ef00 <Paint_DrawChar+0xd8>
            {
                ptr++;
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	3301      	adds	r3, #1
 800eefe:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 800ef00:	8b3b      	ldrh	r3, [r7, #24]
 800ef02:	3301      	adds	r3, #1
 800ef04:	833b      	strh	r3, [r7, #24]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	889b      	ldrh	r3, [r3, #4]
 800ef0a:	8b3a      	ldrh	r2, [r7, #24]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d3c9      	bcc.n	800eea4 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	889b      	ldrh	r3, [r3, #4]
 800ef14:	f003 0307 	and.w	r3, r3, #7
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d002      	beq.n	800ef24 <Paint_DrawChar+0xfc>
        {
            ptr++;
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	3301      	adds	r3, #1
 800ef22:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 800ef24:	8b7b      	ldrh	r3, [r7, #26]
 800ef26:	3301      	adds	r3, #1
 800ef28:	837b      	strh	r3, [r7, #26]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	88db      	ldrh	r3, [r3, #6]
 800ef2e:	8b7a      	ldrh	r2, [r7, #26]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d3b4      	bcc.n	800ee9e <Paint_DrawChar+0x76>
        }
    }// Write all
}
 800ef34:	3720      	adds	r7, #32
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	2400b940 	.word	0x2400b940
 800ef40:	0802023c 	.word	0x0802023c

0800ef44 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b088      	sub	sp, #32
 800ef48:	af02      	add	r7, sp, #8
 800ef4a:	60ba      	str	r2, [r7, #8]
 800ef4c:	607b      	str	r3, [r7, #4]
 800ef4e:	4603      	mov	r3, r0
 800ef50:	81fb      	strh	r3, [r7, #14]
 800ef52:	460b      	mov	r3, r1
 800ef54:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800ef56:	89fb      	ldrh	r3, [r7, #14]
 800ef58:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800ef5a:	89bb      	ldrh	r3, [r7, #12]
 800ef5c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800ef5e:	4b23      	ldr	r3, [pc, #140]	; (800efec <Paint_DrawString_EN+0xa8>)
 800ef60:	889b      	ldrh	r3, [r3, #4]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	89fa      	ldrh	r2, [r7, #14]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d805      	bhi.n	800ef76 <Paint_DrawString_EN+0x32>
 800ef6a:	4b20      	ldr	r3, [pc, #128]	; (800efec <Paint_DrawString_EN+0xa8>)
 800ef6c:	88db      	ldrh	r3, [r3, #6]
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	89ba      	ldrh	r2, [r7, #12]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d933      	bls.n	800efde <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800ef76:	481e      	ldr	r0, [pc, #120]	; (800eff0 <Paint_DrawString_EN+0xac>)
 800ef78:	f00d fb2e 	bl	801c5d8 <puts>
        return;
 800ef7c:	e033      	b.n	800efe6 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 800ef7e:	8afb      	ldrh	r3, [r7, #22]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	8892      	ldrh	r2, [r2, #4]
 800ef84:	4413      	add	r3, r2
 800ef86:	4a19      	ldr	r2, [pc, #100]	; (800efec <Paint_DrawString_EN+0xa8>)
 800ef88:	8892      	ldrh	r2, [r2, #4]
 800ef8a:	b292      	uxth	r2, r2
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	dd06      	ble.n	800ef9e <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 800ef90:	89fb      	ldrh	r3, [r7, #14]
 800ef92:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	88da      	ldrh	r2, [r3, #6]
 800ef98:	8abb      	ldrh	r3, [r7, #20]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 800ef9e:	8abb      	ldrh	r3, [r7, #20]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	88d2      	ldrh	r2, [r2, #6]
 800efa4:	4413      	add	r3, r2
 800efa6:	4a11      	ldr	r2, [pc, #68]	; (800efec <Paint_DrawString_EN+0xa8>)
 800efa8:	88d2      	ldrh	r2, [r2, #6]
 800efaa:	b292      	uxth	r2, r2
 800efac:	4293      	cmp	r3, r2
 800efae:	dd03      	ble.n	800efb8 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 800efb0:	89fb      	ldrh	r3, [r7, #14]
 800efb2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800efb4:	89bb      	ldrh	r3, [r7, #12]
 800efb6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	781a      	ldrb	r2, [r3, #0]
 800efbc:	8ab9      	ldrh	r1, [r7, #20]
 800efbe:	8af8      	ldrh	r0, [r7, #22]
 800efc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	8c3b      	ldrh	r3, [r7, #32]
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f7ff ff2d 	bl	800ee28 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	3301      	adds	r3, #1
 800efd2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	889a      	ldrh	r2, [r3, #4]
 800efd8:	8afb      	ldrh	r3, [r7, #22]
 800efda:	4413      	add	r3, r2
 800efdc:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1cb      	bne.n	800ef7e <Paint_DrawString_EN+0x3a>
    }
}
 800efe6:	3718      	adds	r7, #24
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	2400b940 	.word	0x2400b940
 800eff0:	0802027c 	.word	0x0802027c

0800eff4 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800eff4:	b590      	push	{r4, r7, lr}
 800eff6:	b0cb      	sub	sp, #300	; 0x12c
 800eff8:	af02      	add	r7, sp, #8
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	f107 0108 	add.w	r1, r7, #8
 800f002:	ed81 0b00 	vstr	d0, [r1]
 800f006:	4611      	mov	r1, r2
 800f008:	1d3a      	adds	r2, r7, #4
 800f00a:	6013      	str	r3, [r2, #0]
 800f00c:	f107 0316 	add.w	r3, r7, #22
 800f010:	4622      	mov	r2, r4
 800f012:	801a      	strh	r2, [r3, #0]
 800f014:	f107 0314 	add.w	r3, r7, #20
 800f018:	4602      	mov	r2, r0
 800f01a:	801a      	strh	r2, [r3, #0]
 800f01c:	f107 0313 	add.w	r3, r7, #19
 800f020:	460a      	mov	r2, r1
 800f022:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 800f024:	f107 031c 	add.w	r3, r7, #28
 800f028:	2200      	movs	r2, #0
 800f02a:	601a      	str	r2, [r3, #0]
 800f02c:	3304      	adds	r3, #4
 800f02e:	22fb      	movs	r2, #251	; 0xfb
 800f030:	2100      	movs	r1, #0
 800f032:	4618      	mov	r0, r3
 800f034:	f00c f9f8 	bl	801b428 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 800f038:	f107 0313 	add.w	r3, r7, #19
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	1c99      	adds	r1, r3, #2
 800f040:	f107 001c 	add.w	r0, r7, #28
 800f044:	f107 0308 	add.w	r3, r7, #8
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	e9cd 2300 	strd	r2, r3, [sp]
 800f050:	460a      	mov	r2, r1
 800f052:	4930      	ldr	r1, [pc, #192]	; (800f114 <Paint_DrawFloatNum+0x120>)
 800f054:	f00d fb12 	bl	801c67c <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 800f058:	f107 031c 	add.w	r3, r7, #28
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7f1 f949 	bl	80002f4 <strlen>
 800f062:	4603      	mov	r3, r0
 800f064:	4618      	mov	r0, r3
 800f066:	f00c f9a7 	bl	801b3b8 <malloc>
 800f06a:	4603      	mov	r3, r0
 800f06c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 800f070:	f107 031c 	add.w	r3, r7, #28
 800f074:	4618      	mov	r0, r3
 800f076:	f7f1 f93d 	bl	80002f4 <strlen>
 800f07a:	4603      	mov	r3, r0
 800f07c:	1e9a      	subs	r2, r3, #2
 800f07e:	f107 031c 	add.w	r3, r7, #28
 800f082:	4619      	mov	r1, r3
 800f084:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f088:	f00c f9a6 	bl	801b3d8 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 800f08c:	f107 031c 	add.w	r3, r7, #28
 800f090:	4618      	mov	r0, r3
 800f092:	f7f1 f92f 	bl	80002f4 <strlen>
 800f096:	4603      	mov	r3, r0
 800f098:	3b02      	subs	r3, #2
 800f09a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f09e:	4413      	add	r3, r2
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800f0a4:	f107 031c 	add.w	r3, r7, #28
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7f1 f923 	bl	80002f4 <strlen>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	3b03      	subs	r3, #3
 800f0b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f0b6:	4413      	add	r3, r2
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	2b2e      	cmp	r3, #46	; 0x2e
 800f0bc:	d10b      	bne.n	800f0d6 <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800f0be:	f107 031c 	add.w	r3, r7, #28
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7f1 f916 	bl	80002f4 <strlen>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	3b03      	subs	r3, #3
 800f0cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f0d0:	4413      	add	r3, r2
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 800f0d6:	1d3b      	adds	r3, r7, #4
 800f0d8:	f107 0214 	add.w	r2, r7, #20
 800f0dc:	8811      	ldrh	r1, [r2, #0]
 800f0de:	f107 0216 	add.w	r2, r7, #22
 800f0e2:	8810      	ldrh	r0, [r2, #0]
 800f0e4:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 800f0e8:	9201      	str	r2, [sp, #4]
 800f0ea:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800f0ee:	9200      	str	r2, [sp, #0]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f0f6:	f7ff ff25 	bl	800ef44 <Paint_DrawString_EN>
    free(pStr);
 800f0fa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f0fe:	f00c f963 	bl	801b3c8 <free>
    pStr=NULL;
 800f102:	2300      	movs	r3, #0
 800f104:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 800f108:	bf00      	nop
 800f10a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd90      	pop	{r4, r7, pc}
 800f112:	bf00      	nop
 800f114:	08020300 	.word	0x08020300

0800f118 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800f118:	b590      	push	{r4, r7, lr}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	4608      	mov	r0, r1
 800f122:	4611      	mov	r1, r2
 800f124:	461a      	mov	r2, r3
 800f126:	4603      	mov	r3, r0
 800f128:	817b      	strh	r3, [r7, #10]
 800f12a:	460b      	mov	r3, r1
 800f12c:	813b      	strh	r3, [r7, #8]
 800f12e:	4613      	mov	r3, r2
 800f130:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 800f132:	2300      	movs	r3, #0
 800f134:	613b      	str	r3, [r7, #16]
 800f136:	e049      	b.n	800f1cc <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 800f138:	2300      	movs	r3, #0
 800f13a:	617b      	str	r3, [r7, #20]
 800f13c:	e03f      	b.n	800f1be <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800f13e:	897a      	ldrh	r2, [r7, #10]
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	4413      	add	r3, r2
 800f144:	4a26      	ldr	r2, [pc, #152]	; (800f1e0 <Paint_DrawImage+0xc8>)
 800f146:	8912      	ldrh	r2, [r2, #8]
 800f148:	b292      	uxth	r2, r2
 800f14a:	4293      	cmp	r3, r2
 800f14c:	da34      	bge.n	800f1b8 <Paint_DrawImage+0xa0>
 800f14e:	893a      	ldrh	r2, [r7, #8]
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	4413      	add	r3, r2
 800f154:	4a22      	ldr	r2, [pc, #136]	; (800f1e0 <Paint_DrawImage+0xc8>)
 800f156:	8952      	ldrh	r2, [r2, #10]
 800f158:	b292      	uxth	r2, r2
 800f15a:	4293      	cmp	r3, r2
 800f15c:	da2c      	bge.n	800f1b8 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	b29a      	uxth	r2, r3
 800f162:	897b      	ldrh	r3, [r7, #10]
 800f164:	4413      	add	r3, r2
 800f166:	b298      	uxth	r0, r3
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	893b      	ldrh	r3, [r7, #8]
 800f16e:	4413      	add	r3, r2
 800f170:	b29c      	uxth	r4, r3
 800f172:	88fb      	ldrh	r3, [r7, #6]
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	fb02 f303 	mul.w	r3, r2, r3
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	461a      	mov	r2, r3
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	005b      	lsls	r3, r3, #1
 800f182:	4413      	add	r3, r2
 800f184:	3301      	adds	r3, #1
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	4413      	add	r3, r2
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	021b      	lsls	r3, r3, #8
 800f18e:	b21a      	sxth	r2, r3
 800f190:	88fb      	ldrh	r3, [r7, #6]
 800f192:	6939      	ldr	r1, [r7, #16]
 800f194:	fb01 f303 	mul.w	r3, r1, r3
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	4619      	mov	r1, r3
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	005b      	lsls	r3, r3, #1
 800f1a0:	440b      	add	r3, r1
 800f1a2:	68f9      	ldr	r1, [r7, #12]
 800f1a4:	440b      	add	r3, r1
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	b21b      	sxth	r3, r3
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	b21b      	sxth	r3, r3
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4621      	mov	r1, r4
 800f1b4:	f7ff f9e8 	bl	800e588 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	617b      	str	r3, [r7, #20]
 800f1be:	88fb      	ldrh	r3, [r7, #6]
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	dbbb      	blt.n	800f13e <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	613b      	str	r3, [r7, #16]
 800f1cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	dbb1      	blt.n	800f138 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop
 800f1d8:	371c      	adds	r7, #28
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd90      	pop	{r4, r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	2400b940 	.word	0x2400b940

0800f1e4 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f1ee:	480d      	ldr	r0, [pc, #52]	; (800f224 <LCD_1IN8_Reset+0x40>)
 800f1f0:	f7f6 f93a 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800f1f4:	2064      	movs	r0, #100	; 0x64
 800f1f6:	f7f3 fa83 	bl	8002700 <HAL_Delay>
    LCD_1IN8_RST_0;
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f200:	4808      	ldr	r0, [pc, #32]	; (800f224 <LCD_1IN8_Reset+0x40>)
 800f202:	f7f6 f931 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800f206:	2064      	movs	r0, #100	; 0x64
 800f208:	f7f3 fa7a 	bl	8002700 <HAL_Delay>
    LCD_1IN8_RST_1;
 800f20c:	2201      	movs	r2, #1
 800f20e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f212:	4804      	ldr	r0, [pc, #16]	; (800f224 <LCD_1IN8_Reset+0x40>)
 800f214:	f7f6 f928 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800f218:	2064      	movs	r0, #100	; 0x64
 800f21a:	f7f3 fa71 	bl	8002700 <HAL_Delay>
}
 800f21e:	bf00      	nop
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	58021400 	.word	0x58021400

0800f228 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800f232:	2200      	movs	r2, #0
 800f234:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f238:	4807      	ldr	r0, [pc, #28]	; (800f258 <LCD_1IN8_WriteReg+0x30>)
 800f23a:	f7f6 f915 	bl	8005468 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800f23e:	2200      	movs	r2, #0
 800f240:	2140      	movs	r1, #64	; 0x40
 800f242:	4805      	ldr	r0, [pc, #20]	; (800f258 <LCD_1IN8_WriteReg+0x30>)
 800f244:	f7f6 f910 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff f8fe 	bl	800e44c <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	58021800 	.word	0x58021800

0800f25c <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800f266:	2201      	movs	r2, #1
 800f268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f26c:	480a      	ldr	r0, [pc, #40]	; (800f298 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f26e:	f7f6 f8fb 	bl	8005468 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800f272:	2200      	movs	r2, #0
 800f274:	2140      	movs	r1, #64	; 0x40
 800f276:	4808      	ldr	r0, [pc, #32]	; (800f298 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f278:	f7f6 f8f6 	bl	8005468 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800f27c:	79fb      	ldrb	r3, [r7, #7]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff f8e4 	bl	800e44c <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 800f284:	2201      	movs	r2, #1
 800f286:	2140      	movs	r1, #64	; 0x40
 800f288:	4803      	ldr	r0, [pc, #12]	; (800f298 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f28a:	f7f6 f8ed 	bl	8005468 <HAL_GPIO_WritePin>
}
 800f28e:	bf00      	nop
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	58021800 	.word	0x58021800

0800f29c <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	6039      	str	r1, [r7, #0]
 800f2a6:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f2ae:	480f      	ldr	r0, [pc, #60]	; (800f2ec <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 800f2b0:	f7f6 f8da 	bl	8005468 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	e00e      	b.n	800f2d8 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800f2ba:	88fb      	ldrh	r3, [r7, #6]
 800f2bc:	0a1b      	lsrs	r3, r3, #8
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff f8c2 	bl	800e44c <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800f2c8:	88fb      	ldrh	r3, [r7, #6]
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7ff f8bd 	bl	800e44c <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	60fb      	str	r3, [r7, #12]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d3ec      	bcc.n	800f2ba <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 800f2e0:	bf00      	nop
 800f2e2:	bf00      	nop
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	58021800 	.word	0x58021800

0800f2f0 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800f2f4:	20b1      	movs	r0, #177	; 0xb1
 800f2f6:	f7ff ff97 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f2fa:	2001      	movs	r0, #1
 800f2fc:	f7ff ffae 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f300:	202c      	movs	r0, #44	; 0x2c
 800f302:	f7ff ffab 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f306:	202d      	movs	r0, #45	; 0x2d
 800f308:	f7ff ffa8 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 800f30c:	20b2      	movs	r0, #178	; 0xb2
 800f30e:	f7ff ff8b 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f312:	2001      	movs	r0, #1
 800f314:	f7ff ffa2 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f318:	202c      	movs	r0, #44	; 0x2c
 800f31a:	f7ff ff9f 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f31e:	202d      	movs	r0, #45	; 0x2d
 800f320:	f7ff ff9c 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800f324:	20b3      	movs	r0, #179	; 0xb3
 800f326:	f7ff ff7f 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f32a:	2001      	movs	r0, #1
 800f32c:	f7ff ff96 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f330:	202c      	movs	r0, #44	; 0x2c
 800f332:	f7ff ff93 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f336:	202d      	movs	r0, #45	; 0x2d
 800f338:	f7ff ff90 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f33c:	2001      	movs	r0, #1
 800f33e:	f7ff ff8d 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f342:	202c      	movs	r0, #44	; 0x2c
 800f344:	f7ff ff8a 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f348:	202d      	movs	r0, #45	; 0x2d
 800f34a:	f7ff ff87 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800f34e:	20b4      	movs	r0, #180	; 0xb4
 800f350:	f7ff ff6a 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f354:	2007      	movs	r0, #7
 800f356:	f7ff ff81 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800f35a:	20c0      	movs	r0, #192	; 0xc0
 800f35c:	f7ff ff64 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 800f360:	20a2      	movs	r0, #162	; 0xa2
 800f362:	f7ff ff7b 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800f366:	2002      	movs	r0, #2
 800f368:	f7ff ff78 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 800f36c:	2084      	movs	r0, #132	; 0x84
 800f36e:	f7ff ff75 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800f372:	20c1      	movs	r0, #193	; 0xc1
 800f374:	f7ff ff58 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 800f378:	20c5      	movs	r0, #197	; 0xc5
 800f37a:	f7ff ff6f 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800f37e:	20c2      	movs	r0, #194	; 0xc2
 800f380:	f7ff ff52 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 800f384:	200a      	movs	r0, #10
 800f386:	f7ff ff69 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f38a:	2000      	movs	r0, #0
 800f38c:	f7ff ff66 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 800f390:	20c3      	movs	r0, #195	; 0xc3
 800f392:	f7ff ff49 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800f396:	208a      	movs	r0, #138	; 0x8a
 800f398:	f7ff ff60 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 800f39c:	202a      	movs	r0, #42	; 0x2a
 800f39e:	f7ff ff5d 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800f3a2:	20c4      	movs	r0, #196	; 0xc4
 800f3a4:	f7ff ff40 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800f3a8:	208a      	movs	r0, #138	; 0x8a
 800f3aa:	f7ff ff57 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800f3ae:	20ee      	movs	r0, #238	; 0xee
 800f3b0:	f7ff ff54 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 800f3b4:	20c5      	movs	r0, #197	; 0xc5
 800f3b6:	f7ff ff37 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800f3ba:	200e      	movs	r0, #14
 800f3bc:	f7ff ff4e 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 800f3c0:	20e0      	movs	r0, #224	; 0xe0
 800f3c2:	f7ff ff31 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f3c6:	200f      	movs	r0, #15
 800f3c8:	f7ff ff48 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800f3cc:	201a      	movs	r0, #26
 800f3ce:	f7ff ff45 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f3d2:	200f      	movs	r0, #15
 800f3d4:	f7ff ff42 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 800f3d8:	2018      	movs	r0, #24
 800f3da:	f7ff ff3f 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 800f3de:	202f      	movs	r0, #47	; 0x2f
 800f3e0:	f7ff ff3c 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 800f3e4:	2028      	movs	r0, #40	; 0x28
 800f3e6:	f7ff ff39 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 800f3ea:	2020      	movs	r0, #32
 800f3ec:	f7ff ff36 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 800f3f0:	2022      	movs	r0, #34	; 0x22
 800f3f2:	f7ff ff33 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800f3f6:	201f      	movs	r0, #31
 800f3f8:	f7ff ff30 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800f3fc:	201b      	movs	r0, #27
 800f3fe:	f7ff ff2d 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800f402:	2023      	movs	r0, #35	; 0x23
 800f404:	f7ff ff2a 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 800f408:	2037      	movs	r0, #55	; 0x37
 800f40a:	f7ff ff27 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f40e:	2000      	movs	r0, #0
 800f410:	f7ff ff24 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f414:	2007      	movs	r0, #7
 800f416:	f7ff ff21 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800f41a:	2002      	movs	r0, #2
 800f41c:	f7ff ff1e 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800f420:	2010      	movs	r0, #16
 800f422:	f7ff ff1b 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800f426:	20e1      	movs	r0, #225	; 0xe1
 800f428:	f7ff fefe 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f42c:	200f      	movs	r0, #15
 800f42e:	f7ff ff15 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800f432:	201b      	movs	r0, #27
 800f434:	f7ff ff12 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f438:	200f      	movs	r0, #15
 800f43a:	f7ff ff0f 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800f43e:	2017      	movs	r0, #23
 800f440:	f7ff ff0c 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 800f444:	2033      	movs	r0, #51	; 0x33
 800f446:	f7ff ff09 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800f44a:	202c      	movs	r0, #44	; 0x2c
 800f44c:	f7ff ff06 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 800f450:	2029      	movs	r0, #41	; 0x29
 800f452:	f7ff ff03 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800f456:	202e      	movs	r0, #46	; 0x2e
 800f458:	f7ff ff00 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800f45c:	2030      	movs	r0, #48	; 0x30
 800f45e:	f7ff fefd 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800f462:	2030      	movs	r0, #48	; 0x30
 800f464:	f7ff fefa 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 800f468:	2039      	movs	r0, #57	; 0x39
 800f46a:	f7ff fef7 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800f46e:	203f      	movs	r0, #63	; 0x3f
 800f470:	f7ff fef4 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f474:	2000      	movs	r0, #0
 800f476:	f7ff fef1 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f47a:	2007      	movs	r0, #7
 800f47c:	f7ff feee 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 800f480:	2003      	movs	r0, #3
 800f482:	f7ff feeb 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800f486:	2010      	movs	r0, #16
 800f488:	f7ff fee8 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 800f48c:	20f0      	movs	r0, #240	; 0xf0
 800f48e:	f7ff fecb 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f492:	2001      	movs	r0, #1
 800f494:	f7ff fee2 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 800f498:	20f6      	movs	r0, #246	; 0xf6
 800f49a:	f7ff fec5 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f49e:	2000      	movs	r0, #0
 800f4a0:	f7ff fedc 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 800f4a4:	203a      	movs	r0, #58	; 0x3a
 800f4a6:	f7ff febf 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800f4aa:	2005      	movs	r0, #5
 800f4ac:	f7ff fed6 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

}
 800f4b0:	bf00      	nop
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800f4be:	4a34      	ldr	r2, [pc, #208]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d008      	beq.n	800f4dc <LCD_1IN8_SetGramScanWay+0x28>
 800f4ca:	79fb      	ldrb	r3, [r7, #7]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d005      	beq.n	800f4dc <LCD_1IN8_SetGramScanWay+0x28>
 800f4d0:	79fb      	ldrb	r3, [r7, #7]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d002      	beq.n	800f4dc <LCD_1IN8_SetGramScanWay+0x28>
 800f4d6:	79fb      	ldrb	r3, [r7, #7]
 800f4d8:	2b03      	cmp	r3, #3
 800f4da:	d10c      	bne.n	800f4f6 <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 800f4dc:	4b2c      	ldr	r3, [pc, #176]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4de:	2280      	movs	r2, #128	; 0x80
 800f4e0:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 800f4e2:	4b2b      	ldr	r3, [pc, #172]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4e4:	22a0      	movs	r2, #160	; 0xa0
 800f4e6:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 800f4e8:	4b29      	ldr	r3, [pc, #164]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 800f4ee:	4b28      	ldr	r3, [pc, #160]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	811a      	strh	r2, [r3, #8]
 800f4f4:	e00b      	b.n	800f50e <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800f4f6:	4b26      	ldr	r3, [pc, #152]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4f8:	22a0      	movs	r2, #160	; 0xa0
 800f4fa:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 800f4fc:	4b24      	ldr	r3, [pc, #144]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f4fe:	2280      	movs	r2, #128	; 0x80
 800f500:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800f502:	4b23      	ldr	r3, [pc, #140]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f504:	2201      	movs	r2, #1
 800f506:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 800f508:	4b21      	ldr	r3, [pc, #132]	; (800f590 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f50a:	2202      	movs	r2, #2
 800f50c:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 800f50e:	2300      	movs	r3, #0
 800f510:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	2b07      	cmp	r3, #7
 800f516:	d82b      	bhi.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
 800f518:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <LCD_1IN8_SetGramScanWay+0x6c>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f541 	.word	0x0800f541
 800f524:	0800f547 	.word	0x0800f547
 800f528:	0800f54d 	.word	0x0800f54d
 800f52c:	0800f553 	.word	0x0800f553
 800f530:	0800f559 	.word	0x0800f559
 800f534:	0800f55f 	.word	0x0800f55f
 800f538:	0800f565 	.word	0x0800f565
 800f53c:	0800f56b 	.word	0x0800f56b
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800f540:	2300      	movs	r3, #0
 800f542:	81fb      	strh	r3, [r7, #14]
        break;
 800f544:	e014      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800f546:	2380      	movs	r3, #128	; 0x80
 800f548:	81fb      	strh	r3, [r7, #14]
        break;
 800f54a:	e011      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800f54c:	2340      	movs	r3, #64	; 0x40
 800f54e:	81fb      	strh	r3, [r7, #14]
        break;
 800f550:	e00e      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800f552:	23c0      	movs	r3, #192	; 0xc0
 800f554:	81fb      	strh	r3, [r7, #14]
        break;
 800f556:	e00b      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800f558:	2320      	movs	r3, #32
 800f55a:	81fb      	strh	r3, [r7, #14]
        break;
 800f55c:	e008      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800f55e:	2360      	movs	r3, #96	; 0x60
 800f560:	81fb      	strh	r3, [r7, #14]
        break;
 800f562:	e005      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 800f564:	23a0      	movs	r3, #160	; 0xa0
 800f566:	81fb      	strh	r3, [r7, #14]
        break;
 800f568:	e002      	b.n	800f570 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800f56a:	23e0      	movs	r3, #224	; 0xe0
 800f56c:	81fb      	strh	r3, [r7, #14]
        break;
 800f56e:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 800f570:	2036      	movs	r0, #54	; 0x36
 800f572:	f7ff fe59 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800f576:	89fb      	ldrh	r3, [r7, #14]
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	f023 0308 	bic.w	r3, r3, #8
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	4618      	mov	r0, r3
 800f582:	f7ff fe6b 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

}
 800f586:	bf00      	nop
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	2400b95c 	.word	0x2400b95c

0800f594 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	4603      	mov	r3, r0
 800f59c:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800f59e:	f7ff fe21 	bl	800f1e4 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800f5a2:	f7ff fea5 	bl	800f2f0 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff ff83 	bl	800f4b4 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800f5ae:	20c8      	movs	r0, #200	; 0xc8
 800f5b0:	f7f3 f8a6 	bl	8002700 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 800f5b4:	2011      	movs	r0, #17
 800f5b6:	f7ff fe37 	bl	800f228 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800f5ba:	2078      	movs	r0, #120	; 0x78
 800f5bc:	f7f3 f8a0 	bl	8002700 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 800f5c0:	2029      	movs	r0, #41	; 0x29
 800f5c2:	f7ff fe31 	bl	800f228 <LCD_1IN8_WriteReg>
}
 800f5c6:	bf00      	nop
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
	...

0800f5d0 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 800f5d0:	b590      	push	{r4, r7, lr}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	4608      	mov	r0, r1
 800f5da:	4611      	mov	r1, r2
 800f5dc:	461a      	mov	r2, r3
 800f5de:	4623      	mov	r3, r4
 800f5e0:	80fb      	strh	r3, [r7, #6]
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	80bb      	strh	r3, [r7, #4]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	807b      	strh	r3, [r7, #2]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 800f5ee:	202a      	movs	r0, #42	; 0x2a
 800f5f0:	f7ff fe1a 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f7ff fe31 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 800f5fa:	88fb      	ldrh	r3, [r7, #6]
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	4b1e      	ldr	r3, [pc, #120]	; (800f678 <LCD_1IN8_SetWindows+0xa8>)
 800f600:	88db      	ldrh	r3, [r3, #6]
 800f602:	b2db      	uxtb	r3, r3
 800f604:	4413      	add	r3, r2
 800f606:	b2db      	uxtb	r3, r3
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fe27 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 800f60e:	2000      	movs	r0, #0
 800f610:	f7ff fe24 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 800f614:	887b      	ldrh	r3, [r7, #2]
 800f616:	b2da      	uxtb	r2, r3
 800f618:	4b17      	ldr	r3, [pc, #92]	; (800f678 <LCD_1IN8_SetWindows+0xa8>)
 800f61a:	88db      	ldrh	r3, [r3, #6]
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	4413      	add	r3, r2
 800f620:	b2db      	uxtb	r3, r3
 800f622:	3b01      	subs	r3, #1
 800f624:	b2db      	uxtb	r3, r3
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff fe18 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 800f62c:	202b      	movs	r0, #43	; 0x2b
 800f62e:	f7ff fdfb 	bl	800f228 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800f632:	2000      	movs	r0, #0
 800f634:	f7ff fe12 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800f638:	88bb      	ldrh	r3, [r7, #4]
 800f63a:	b2da      	uxtb	r2, r3
 800f63c:	4b0e      	ldr	r3, [pc, #56]	; (800f678 <LCD_1IN8_SetWindows+0xa8>)
 800f63e:	891b      	ldrh	r3, [r3, #8]
 800f640:	b2db      	uxtb	r3, r3
 800f642:	4413      	add	r3, r2
 800f644:	b2db      	uxtb	r3, r3
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fe08 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800f64c:	2000      	movs	r0, #0
 800f64e:	f7ff fe05 	bl	800f25c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800f652:	883b      	ldrh	r3, [r7, #0]
 800f654:	b2da      	uxtb	r2, r3
 800f656:	4b08      	ldr	r3, [pc, #32]	; (800f678 <LCD_1IN8_SetWindows+0xa8>)
 800f658:	891b      	ldrh	r3, [r3, #8]
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	4413      	add	r3, r2
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	3b01      	subs	r3, #1
 800f662:	b2db      	uxtb	r3, r3
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fdf9 	bl	800f25c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 800f66a:	202c      	movs	r0, #44	; 0x2c
 800f66c:	f7ff fddc 	bl	800f228 <LCD_1IN8_WriteReg>

}
 800f670:	bf00      	nop
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	bd90      	pop	{r4, r7, pc}
 800f678:	2400b95c 	.word	0x2400b95c

0800f67c <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	460a      	mov	r2, r1
 800f686:	80fb      	strh	r3, [r7, #6]
 800f688:	4613      	mov	r3, r2
 800f68a:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 800f68c:	88bb      	ldrh	r3, [r7, #4]
 800f68e:	88fa      	ldrh	r2, [r7, #6]
 800f690:	88b9      	ldrh	r1, [r7, #4]
 800f692:	88f8      	ldrh	r0, [r7, #6]
 800f694:	f7ff ff9c 	bl	800f5d0 <LCD_1IN8_SetWindows>
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	80fb      	strh	r3, [r7, #6]
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	80bb      	strh	r3, [r7, #4]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 800f6b2:	88bb      	ldrh	r3, [r7, #4]
 800f6b4:	887a      	ldrh	r2, [r7, #2]
 800f6b6:	fb02 f203 	mul.w	r2, r2, r3
 800f6ba:	88fb      	ldrh	r3, [r7, #6]
 800f6bc:	4611      	mov	r1, r2
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff fdec 	bl	800f29c <LCD_1IN8_WriteData_NLen16Bit>
}
 800f6c4:	bf00      	nop
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	80fb      	strh	r3, [r7, #6]
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	80bb      	strh	r3, [r7, #4]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 800f6de:	4b1b      	ldr	r3, [pc, #108]	; (800f74c <LCD_1IN8_DrawPaint+0x80>)
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	88fa      	ldrh	r2, [r7, #6]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d82d      	bhi.n	800f744 <LCD_1IN8_DrawPaint+0x78>
 800f6e8:	4b18      	ldr	r3, [pc, #96]	; (800f74c <LCD_1IN8_DrawPaint+0x80>)
 800f6ea:	885b      	ldrh	r3, [r3, #2]
 800f6ec:	88ba      	ldrh	r2, [r7, #4]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d828      	bhi.n	800f744 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 800f6f2:	4b17      	ldr	r3, [pc, #92]	; (800f750 <LCD_1IN8_DrawPaint+0x84>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	f083 0301 	eor.w	r3, r3, #1
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00c      	beq.n	800f71a <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 800f700:	88ba      	ldrh	r2, [r7, #4]
 800f702:	88fb      	ldrh	r3, [r7, #6]
 800f704:	4611      	mov	r1, r2
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff ffb8 	bl	800f67c <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 800f70c:	887b      	ldrh	r3, [r7, #2]
 800f70e:	2201      	movs	r2, #1
 800f710:	2101      	movs	r1, #1
 800f712:	4618      	mov	r0, r3
 800f714:	f7ff ffc4 	bl	800f6a0 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 800f718:	e014      	b.n	800f744 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 800f71a:	887b      	ldrh	r3, [r7, #2]
 800f71c:	0a1b      	lsrs	r3, r3, #8
 800f71e:	b299      	uxth	r1, r3
 800f720:	88bb      	ldrh	r3, [r7, #4]
 800f722:	01da      	lsls	r2, r3, #7
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	4413      	add	r3, r2
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	b2c9      	uxtb	r1, r1
 800f72c:	4a09      	ldr	r2, [pc, #36]	; (800f754 <LCD_1IN8_DrawPaint+0x88>)
 800f72e:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 800f730:	88bb      	ldrh	r3, [r7, #4]
 800f732:	01da      	lsls	r2, r3, #7
 800f734:	88fb      	ldrh	r3, [r7, #6]
 800f736:	4413      	add	r3, r2
 800f738:	005b      	lsls	r3, r3, #1
 800f73a:	3301      	adds	r3, #1
 800f73c:	887a      	ldrh	r2, [r7, #2]
 800f73e:	b2d1      	uxtb	r1, r2
 800f740:	4a04      	ldr	r2, [pc, #16]	; (800f754 <LCD_1IN8_DrawPaint+0x88>)
 800f742:	54d1      	strb	r1, [r2, r3]
}
 800f744:	bf00      	nop
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	2400b95c 	.word	0x2400b95c
 800f750:	2400ae77 	.word	0x2400ae77
 800f754:	24000090 	.word	0x24000090

0800f758 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 800f762:	4b1a      	ldr	r3, [pc, #104]	; (800f7cc <LCD_1IN8_Clear+0x74>)
 800f764:	881a      	ldrh	r2, [r3, #0]
 800f766:	4b19      	ldr	r3, [pc, #100]	; (800f7cc <LCD_1IN8_Clear+0x74>)
 800f768:	885b      	ldrh	r3, [r3, #2]
 800f76a:	2100      	movs	r1, #0
 800f76c:	2000      	movs	r0, #0
 800f76e:	f7ff ff2f 	bl	800f5d0 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 800f772:	2201      	movs	r2, #1
 800f774:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f778:	4815      	ldr	r0, [pc, #84]	; (800f7d0 <LCD_1IN8_Clear+0x78>)
 800f77a:	f7f5 fe75 	bl	8005468 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800f77e:	2300      	movs	r3, #0
 800f780:	81fb      	strh	r3, [r7, #14]
 800f782:	e019      	b.n	800f7b8 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800f784:	2300      	movs	r3, #0
 800f786:	81bb      	strh	r3, [r7, #12]
 800f788:	e00e      	b.n	800f7a8 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 800f78a:	88fb      	ldrh	r3, [r7, #6]
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fe fe5c 	bl	800e44c <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 800f794:	88fb      	ldrh	r3, [r7, #6]
 800f796:	0a1b      	lsrs	r3, r3, #8
 800f798:	b29b      	uxth	r3, r3
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fe fe55 	bl	800e44c <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800f7a2:	89bb      	ldrh	r3, [r7, #12]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	81bb      	strh	r3, [r7, #12]
 800f7a8:	4b08      	ldr	r3, [pc, #32]	; (800f7cc <LCD_1IN8_Clear+0x74>)
 800f7aa:	885b      	ldrh	r3, [r3, #2]
 800f7ac:	89ba      	ldrh	r2, [r7, #12]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d3eb      	bcc.n	800f78a <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800f7b2:	89fb      	ldrh	r3, [r7, #14]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	81fb      	strh	r3, [r7, #14]
 800f7b8:	4b04      	ldr	r3, [pc, #16]	; (800f7cc <LCD_1IN8_Clear+0x74>)
 800f7ba:	881b      	ldrh	r3, [r3, #0]
 800f7bc:	89fa      	ldrh	r2, [r7, #14]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d3e0      	bcc.n	800f784 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 800f7c2:	bf00      	nop
 800f7c4:	bf00      	nop
 800f7c6:	3710      	adds	r7, #16
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	2400b95c 	.word	0x2400b95c
 800f7d0:	58021800 	.word	0x58021800

0800f7d4 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	4603      	mov	r3, r0
 800f7dc:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 800f7de:	4a04      	ldr	r2, [pc, #16]	; (800f7f0 <LCD_1IN8_SetBackLight+0x1c>)
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	6353      	str	r3, [r2, #52]	; 0x34
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr
 800f7f0:	40010000 	.word	0x40010000

0800f7f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f7f4:	b590      	push	{r4, r7, lr}
 800f7f6:	b089      	sub	sp, #36	; 0x24
 800f7f8:	af04      	add	r7, sp, #16
 800f7fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	2202      	movs	r2, #2
 800f800:	2102      	movs	r1, #2
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fcb8 	bl	8010178 <USBH_FindInterface>
 800f808:	4603      	mov	r3, r0
 800f80a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	2bff      	cmp	r3, #255	; 0xff
 800f810:	d002      	beq.n	800f818 <USBH_CDC_InterfaceInit+0x24>
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d901      	bls.n	800f81c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f818:	2302      	movs	r3, #2
 800f81a:	e15a      	b.n	800fad2 <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
 800f81e:	4619      	mov	r1, r3
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 fc89 	bl	8010138 <USBH_SelectInterface>
 800f826:	4603      	mov	r3, r0
 800f828:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f82a:	7bbb      	ldrb	r3, [r7, #14]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f830:	2302      	movs	r3, #2
 800f832:	e14e      	b.n	800fad2 <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f83a:	4413      	add	r3, r2
 800f83c:	681c      	ldr	r4, [r3, #0]
 800f83e:	2050      	movs	r0, #80	; 0x50
 800f840:	f00b fdba 	bl	801b3b8 <malloc>
 800f844:	4603      	mov	r3, r0
 800f846:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f84e:	4413      	add	r3, r2
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	69db      	ldr	r3, [r3, #28]
 800f854:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d101      	bne.n	800f860 <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f85c:	2302      	movs	r3, #2
 800f85e:	e138      	b.n	800fad2 <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f860:	2250      	movs	r2, #80	; 0x50
 800f862:	2100      	movs	r1, #0
 800f864:	68b8      	ldr	r0, [r7, #8]
 800f866:	f00b fddf 	bl	801b428 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	211a      	movs	r1, #26
 800f870:	fb01 f303 	mul.w	r3, r1, r3
 800f874:	441a      	add	r2, r3
 800f876:	f643 138e 	movw	r3, #14734	; 0x398e
 800f87a:	4413      	add	r3, r2
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	b25b      	sxtb	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	da17      	bge.n	800f8b4 <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f884:	7bfb      	ldrb	r3, [r7, #15]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	211a      	movs	r1, #26
 800f88a:	fb01 f303 	mul.w	r3, r1, r3
 800f88e:	441a      	add	r2, r3
 800f890:	f643 138e 	movw	r3, #14734	; 0x398e
 800f894:	4413      	add	r3, r2
 800f896:	781a      	ldrb	r2, [r3, #0]
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f89c:	7bfb      	ldrb	r3, [r7, #15]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	211a      	movs	r1, #26
 800f8a2:	fb01 f303 	mul.w	r3, r1, r3
 800f8a6:	441a      	add	r2, r3
 800f8a8:	f643 1390 	movw	r3, #14736	; 0x3990
 800f8ac:	4413      	add	r3, r2
 800f8ae:	881a      	ldrh	r2, [r3, #0]
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	785b      	ldrb	r3, [r3, #1]
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f001 f80f 	bl	80108de <USBH_AllocPipe>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	7819      	ldrb	r1, [r3, #0]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	7858      	ldrb	r0, [r3, #1]
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	f643 135c 	movw	r3, #14684	; 0x395c
 800f8d6:	4413      	add	r3, r2
 800f8d8:	781c      	ldrb	r4, [r3, #0]
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	f643 135d 	movw	r3, #14685	; 0x395d
 800f8e0:	4413      	add	r3, r2
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	68ba      	ldr	r2, [r7, #8]
 800f8e6:	8952      	ldrh	r2, [r2, #10]
 800f8e8:	9202      	str	r2, [sp, #8]
 800f8ea:	2203      	movs	r2, #3
 800f8ec:	9201      	str	r2, [sp, #4]
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	4623      	mov	r3, r4
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 ffc3 	bl	8010880 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	2200      	movs	r2, #0
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f00b fc80 	bl	801b208 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f908:	2300      	movs	r3, #0
 800f90a:	2200      	movs	r2, #0
 800f90c:	210a      	movs	r1, #10
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 fc32 	bl	8010178 <USBH_FindInterface>
 800f914:	4603      	mov	r3, r0
 800f916:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f918:	7bfb      	ldrb	r3, [r7, #15]
 800f91a:	2bff      	cmp	r3, #255	; 0xff
 800f91c:	d002      	beq.n	800f924 <USBH_CDC_InterfaceInit+0x130>
 800f91e:	7bfb      	ldrb	r3, [r7, #15]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d901      	bls.n	800f928 <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f924:	2302      	movs	r3, #2
 800f926:	e0d4      	b.n	800fad2 <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f928:	7bfb      	ldrb	r3, [r7, #15]
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	211a      	movs	r1, #26
 800f92e:	fb01 f303 	mul.w	r3, r1, r3
 800f932:	441a      	add	r2, r3
 800f934:	f643 138e 	movw	r3, #14734	; 0x398e
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	b25b      	sxtb	r3, r3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	da18      	bge.n	800f974 <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f942:	7bfb      	ldrb	r3, [r7, #15]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	211a      	movs	r1, #26
 800f948:	fb01 f303 	mul.w	r3, r1, r3
 800f94c:	441a      	add	r2, r3
 800f94e:	f643 138e 	movw	r3, #14734	; 0x398e
 800f952:	4413      	add	r3, r2
 800f954:	781a      	ldrb	r2, [r3, #0]
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	211a      	movs	r1, #26
 800f960:	fb01 f303 	mul.w	r3, r1, r3
 800f964:	441a      	add	r2, r3
 800f966:	f643 1390 	movw	r3, #14736	; 0x3990
 800f96a:	4413      	add	r3, r2
 800f96c:	881a      	ldrh	r2, [r3, #0]
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	835a      	strh	r2, [r3, #26]
 800f972:	e017      	b.n	800f9a4 <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f974:	7bfb      	ldrb	r3, [r7, #15]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	211a      	movs	r1, #26
 800f97a:	fb01 f303 	mul.w	r3, r1, r3
 800f97e:	441a      	add	r2, r3
 800f980:	f643 138e 	movw	r3, #14734	; 0x398e
 800f984:	4413      	add	r3, r2
 800f986:	781a      	ldrb	r2, [r3, #0]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	211a      	movs	r1, #26
 800f992:	fb01 f303 	mul.w	r3, r1, r3
 800f996:	441a      	add	r2, r3
 800f998:	f643 1390 	movw	r3, #14736	; 0x3990
 800f99c:	4413      	add	r3, r2
 800f99e:	881a      	ldrh	r2, [r3, #0]
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	211a      	movs	r1, #26
 800f9aa:	fb01 f303 	mul.w	r3, r1, r3
 800f9ae:	441a      	add	r2, r3
 800f9b0:	f643 1396 	movw	r3, #14742	; 0x3996
 800f9b4:	4413      	add	r3, r2
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	b25b      	sxtb	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	da18      	bge.n	800f9f0 <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	211a      	movs	r1, #26
 800f9c4:	fb01 f303 	mul.w	r3, r1, r3
 800f9c8:	441a      	add	r2, r3
 800f9ca:	f643 1396 	movw	r3, #14742	; 0x3996
 800f9ce:	4413      	add	r3, r2
 800f9d0:	781a      	ldrb	r2, [r3, #0]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	211a      	movs	r1, #26
 800f9dc:	fb01 f303 	mul.w	r3, r1, r3
 800f9e0:	441a      	add	r2, r3
 800f9e2:	f643 1398 	movw	r3, #14744	; 0x3998
 800f9e6:	4413      	add	r3, r2
 800f9e8:	881a      	ldrh	r2, [r3, #0]
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	835a      	strh	r2, [r3, #26]
 800f9ee:	e017      	b.n	800fa20 <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f9f0:	7bfb      	ldrb	r3, [r7, #15]
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	211a      	movs	r1, #26
 800f9f6:	fb01 f303 	mul.w	r3, r1, r3
 800f9fa:	441a      	add	r2, r3
 800f9fc:	f643 1396 	movw	r3, #14742	; 0x3996
 800fa00:	4413      	add	r3, r2
 800fa02:	781a      	ldrb	r2, [r3, #0]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	211a      	movs	r1, #26
 800fa0e:	fb01 f303 	mul.w	r3, r1, r3
 800fa12:	441a      	add	r2, r3
 800fa14:	f643 1398 	movw	r3, #14744	; 0x3998
 800fa18:	4413      	add	r3, r2
 800fa1a:	881a      	ldrh	r2, [r3, #0]
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	7b9b      	ldrb	r3, [r3, #14]
 800fa24:	4619      	mov	r1, r3
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 ff59 	bl	80108de <USBH_AllocPipe>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	461a      	mov	r2, r3
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	7bdb      	ldrb	r3, [r3, #15]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 ff4f 	bl	80108de <USBH_AllocPipe>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	7b59      	ldrb	r1, [r3, #13]
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	7b98      	ldrb	r0, [r3, #14]
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	f643 135c 	movw	r3, #14684	; 0x395c
 800fa56:	4413      	add	r3, r2
 800fa58:	781c      	ldrb	r4, [r3, #0]
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	f643 135d 	movw	r3, #14685	; 0x395d
 800fa60:	4413      	add	r3, r2
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	8b12      	ldrh	r2, [r2, #24]
 800fa68:	9202      	str	r2, [sp, #8]
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	9201      	str	r2, [sp, #4]
 800fa6e:	9300      	str	r3, [sp, #0]
 800fa70:	4623      	mov	r3, r4
 800fa72:	4602      	mov	r2, r0
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 ff03 	bl	8010880 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	7b19      	ldrb	r1, [r3, #12]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	7bd8      	ldrb	r0, [r3, #15]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	f643 135c 	movw	r3, #14684	; 0x395c
 800fa88:	4413      	add	r3, r2
 800fa8a:	781c      	ldrb	r4, [r3, #0]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	f643 135d 	movw	r3, #14685	; 0x395d
 800fa92:	4413      	add	r3, r2
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	8b52      	ldrh	r2, [r2, #26]
 800fa9a:	9202      	str	r2, [sp, #8]
 800fa9c:	2202      	movs	r2, #2
 800fa9e:	9201      	str	r2, [sp, #4]
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	4623      	mov	r3, r4
 800faa4:	4602      	mov	r2, r0
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 feea 	bl	8010880 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	7b5b      	ldrb	r3, [r3, #13]
 800fab8:	2200      	movs	r2, #0
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f00b fba3 	bl	801b208 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	7b1b      	ldrb	r3, [r3, #12]
 800fac6:	2200      	movs	r2, #0
 800fac8:	4619      	mov	r1, r3
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f00b fb9c 	bl	801b208 <USBH_LL_SetToggle>

  return USBH_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3714      	adds	r7, #20
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd90      	pop	{r4, r7, pc}

0800fada <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b084      	sub	sp, #16
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fae8:	4413      	add	r3, r2
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	69db      	ldr	r3, [r3, #28]
 800faee:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00e      	beq.n	800fb16 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fedd 	bl	80108be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	4619      	mov	r1, r3
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f000 ff09 	bl	8010922 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	7b1b      	ldrb	r3, [r3, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00e      	beq.n	800fb3c <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	7b1b      	ldrb	r3, [r3, #12]
 800fb22:	4619      	mov	r1, r3
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 feca 	bl	80108be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	7b1b      	ldrb	r3, [r3, #12]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fef6 	bl	8010922 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	7b5b      	ldrb	r3, [r3, #13]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00e      	beq.n	800fb62 <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	7b5b      	ldrb	r3, [r3, #13]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 feb7 	bl	80108be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	7b5b      	ldrb	r3, [r3, #13]
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fee3 	bl	8010922 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fb68:	4413      	add	r3, r2
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	69db      	ldr	r3, [r3, #28]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00f      	beq.n	800fb92 <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fb78:	4413      	add	r3, r2
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f00b fc22 	bl	801b3c8 <free>
    phost->pActiveClass->pData = 0U;
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fb8a:	4413      	add	r3, r2
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fbaa:	4413      	add	r3, r2
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	69db      	ldr	r3, [r3, #28]
 800fbb0:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	3340      	adds	r3, #64	; 0x40
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 f8b6 	bl	800fd2a <GetLineCoding>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800fbc2:	7afb      	ldrb	r3, [r7, #11]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d107      	bne.n	800fbd8 <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	f643 2314 	movw	r3, #14868	; 0x3a14
 800fbce:	4413      	add	r3, r2
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2102      	movs	r1, #2
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800fbd8:	7afb      	ldrb	r3, [r7, #11]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fbec:	2301      	movs	r3, #1
 800fbee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fbfa:	4413      	add	r3, r2
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fc08:	2b04      	cmp	r3, #4
 800fc0a:	d877      	bhi.n	800fcfc <USBH_CDC_Process+0x118>
 800fc0c:	a201      	add	r2, pc, #4	; (adr r2, 800fc14 <USBH_CDC_Process+0x30>)
 800fc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc12:	bf00      	nop
 800fc14:	0800fc29 	.word	0x0800fc29
 800fc18:	0800fc2f 	.word	0x0800fc2f
 800fc1c:	0800fc5f 	.word	0x0800fc5f
 800fc20:	0800fcd3 	.word	0x0800fcd3
 800fc24:	0800fce1 	.word	0x0800fce1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	73fb      	strb	r3, [r7, #15]
      break;
 800fc2c:	e06d      	b.n	800fd0a <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc32:	4619      	mov	r1, r3
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 f897 	bl	800fd68 <SetLineCoding>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fc3e:	7bbb      	ldrb	r3, [r7, #14]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d104      	bne.n	800fc4e <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	2202      	movs	r2, #2
 800fc48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fc4c:	e058      	b.n	800fd00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800fc4e:	7bbb      	ldrb	r3, [r7, #14]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d055      	beq.n	800fd00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	2204      	movs	r2, #4
 800fc58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fc5c:	e050      	b.n	800fd00 <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	3340      	adds	r3, #64	; 0x40
 800fc62:	4619      	mov	r1, r3
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f860 	bl	800fd2a <GetLineCoding>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fc6e:	7bbb      	ldrb	r3, [r7, #14]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d126      	bne.n	800fcc2 <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc86:	791b      	ldrb	r3, [r3, #4]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d13b      	bne.n	800fd04 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc96:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d133      	bne.n	800fd04 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fca6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d12b      	bne.n	800fd04 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcb4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d124      	bne.n	800fd04 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f95c 	bl	800ff78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fcc0:	e020      	b.n	800fd04 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 800fcc2:	7bbb      	ldrb	r3, [r7, #14]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d01d      	beq.n	800fd04 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	2204      	movs	r2, #4
 800fccc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fcd0:	e018      	b.n	800fd04 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f867 	bl	800fda6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f8dc 	bl	800fe96 <CDC_ProcessReception>
      break;
 800fcde:	e014      	b.n	800fd0a <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800fce0:	2100      	movs	r1, #0
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fb49 	bl	801037a <USBH_ClrFeature>
 800fce8:	4603      	mov	r3, r0
 800fcea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fcec:	7bbb      	ldrb	r3, [r7, #14]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10a      	bne.n	800fd08 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800fcfa:	e005      	b.n	800fd08 <USBH_CDC_Process+0x124>

    default:
      break;
 800fcfc:	bf00      	nop
 800fcfe:	e004      	b.n	800fd0a <USBH_CDC_Process+0x126>
      break;
 800fd00:	bf00      	nop
 800fd02:	e002      	b.n	800fd0a <USBH_CDC_Process+0x126>
      break;
 800fd04:	bf00      	nop
 800fd06:	e000      	b.n	800fd0a <USBH_CDC_Process+0x126>
      break;
 800fd08:	bf00      	nop

  }

  return status;
 800fd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800fd1c:	2300      	movs	r3, #0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr

0800fd2a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b082      	sub	sp, #8
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
 800fd32:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	22a1      	movs	r2, #161	; 0xa1
 800fd38:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2221      	movs	r2, #33	; 0x21
 800fd3e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2207      	movs	r2, #7
 800fd50:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2207      	movs	r2, #7
 800fd56:	4619      	mov	r1, r3
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 fb32 	bl	80103c2 <USBH_CtlReq>
 800fd5e:	4603      	mov	r3, r0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2221      	movs	r2, #33	; 0x21
 800fd76:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2220      	movs	r2, #32
 800fd7c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2200      	movs	r2, #0
 800fd82:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2207      	movs	r2, #7
 800fd8e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	2207      	movs	r2, #7
 800fd94:	4619      	mov	r1, r3
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fb13 	bl	80103c2 <USBH_CtlReq>
 800fd9c:	4603      	mov	r3, r0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b086      	sub	sp, #24
 800fdaa:	af02      	add	r7, sp, #8
 800fdac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fdb4:	4413      	add	r3, r2
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	69db      	ldr	r3, [r3, #28]
 800fdba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d002      	beq.n	800fdd0 <CDC_ProcessTransmission+0x2a>
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	d023      	beq.n	800fe16 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800fdce:	e05e      	b.n	800fe8e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	8b12      	ldrh	r2, [r2, #24]
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d90b      	bls.n	800fdf4 <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	69d9      	ldr	r1, [r3, #28]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	8b1a      	ldrh	r2, [r3, #24]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	7b5b      	ldrb	r3, [r3, #13]
 800fde8:	2001      	movs	r0, #1
 800fdea:	9000      	str	r0, [sp, #0]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fd02 	bl	80107f6 <USBH_BulkSendData>
 800fdf2:	e00b      	b.n	800fe0c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	7b5b      	ldrb	r3, [r3, #13]
 800fe02:	2001      	movs	r0, #1
 800fe04:	9000      	str	r0, [sp, #0]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fcf5 	bl	80107f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2202      	movs	r2, #2
 800fe10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fe14:	e03b      	b.n	800fe8e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	7b5b      	ldrb	r3, [r3, #13]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f00b f9c5 	bl	801b1ac <USBH_LL_GetURBState>
 800fe22:	4603      	mov	r3, r0
 800fe24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800fe26:	7afb      	ldrb	r3, [r7, #11]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d128      	bne.n	800fe7e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	8b12      	ldrh	r2, [r2, #24]
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d90e      	bls.n	800fe56 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	8b12      	ldrh	r2, [r2, #24]
 800fe40:	1a9a      	subs	r2, r3, r2
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	69db      	ldr	r3, [r3, #28]
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	8b12      	ldrh	r2, [r2, #24]
 800fe4e:	441a      	add	r2, r3
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	61da      	str	r2, [r3, #28]
 800fe54:	e002      	b.n	800fe5c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fe6c:	e00e      	b.n	800fe8c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 f86a 	bl	800ff50 <USBH_CDC_TransmitCallback>
      break;
 800fe7c:	e006      	b.n	800fe8c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800fe7e:	7afb      	ldrb	r3, [r7, #11]
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	d103      	bne.n	800fe8c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fe8c:	bf00      	nop
  }
}
 800fe8e:	bf00      	nop
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b086      	sub	sp, #24
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fea4:	4413      	add	r3, r2
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	69db      	ldr	r3, [r3, #28]
 800feaa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800feac:	2300      	movs	r3, #0
 800feae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	d002      	beq.n	800fec0 <CDC_ProcessReception+0x2a>
 800feba:	2b04      	cmp	r3, #4
 800febc:	d00e      	beq.n	800fedc <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 800febe:	e043      	b.n	800ff48 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	6a19      	ldr	r1, [r3, #32]
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	8b5a      	ldrh	r2, [r3, #26]
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	7b1b      	ldrb	r3, [r3, #12]
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fcb9 	bl	8010844 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	2204      	movs	r2, #4
 800fed6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800feda:	e035      	b.n	800ff48 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	7b1b      	ldrb	r3, [r3, #12]
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f00b f962 	bl	801b1ac <USBH_LL_GetURBState>
 800fee8:	4603      	mov	r3, r0
 800feea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800feec:	7cfb      	ldrb	r3, [r7, #19]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d129      	bne.n	800ff46 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	7b1b      	ldrb	r3, [r3, #12]
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f00b f8bd 	bl	801b078 <USBH_LL_GetLastXferSize>
 800fefe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d016      	beq.n	800ff38 <CDC_ProcessReception+0xa2>
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	8b5b      	ldrh	r3, [r3, #26]
 800ff0e:	461a      	mov	r2, r3
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d910      	bls.n	800ff38 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	1ad2      	subs	r2, r2, r3
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	6a1a      	ldr	r2, [r3, #32]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	441a      	add	r2, r3
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	2203      	movs	r2, #3
 800ff32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ff36:	e006      	b.n	800ff46 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 f80f 	bl	800ff64 <USBH_CDC_ReceiveCallback>
      break;
 800ff46:	bf00      	nop
  }
}
 800ff48:	bf00      	nop
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4613      	mov	r3, r2
 800ff98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	e038      	b.n	8010016 <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	f643 230c 	movw	r3, #14860	; 0x3a0c
 800ffaa:	4413      	add	r3, r2
 800ffac:	79fa      	ldrb	r2, [r7, #7]
 800ffae:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800ffb6:	4413      	add	r3, r2
 800ffb8:	2200      	movs	r2, #0
 800ffba:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f000 f829 	bl	801001e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	f643 1363 	movw	r3, #14691	; 0x3963
 800ffd2:	4413      	add	r3, r2
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	f643 1360 	movw	r3, #14688	; 0x3960
 800ffde:	4413      	add	r3, r2
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	f643 1361 	movw	r3, #14689	; 0x3961
 800ffea:	4413      	add	r3, r2
 800ffec:	2200      	movs	r2, #0
 800ffee:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	f643 1362 	movw	r3, #14690	; 0x3962
 800fff6:	4413      	add	r3, r2
 800fff8:	2200      	movs	r2, #0
 800fffa:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d005      	beq.n	801000e <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	f643 2314 	movw	r3, #14868	; 0x3a14
 8010008:	4413      	add	r3, r2
 801000a:	68ba      	ldr	r2, [r7, #8]
 801000c:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f00a ffb8 	bl	801af84 <USBH_LL_Init>

  return USBH_OK;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801001e:	b480      	push	{r7}
 8010020:	b085      	sub	sp, #20
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010026:	2300      	movs	r3, #0
 8010028:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801002a:	2300      	movs	r3, #0
 801002c:	60fb      	str	r3, [r7, #12]
 801002e:	e00a      	b.n	8010046 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	4413      	add	r3, r2
 801003c:	2200      	movs	r2, #0
 801003e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	3301      	adds	r3, #1
 8010044:	60fb      	str	r3, [r7, #12]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b0e      	cmp	r3, #14
 801004a:	d9f1      	bls.n	8010030 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801004c:	2300      	movs	r3, #0
 801004e:	60fb      	str	r3, [r7, #12]
 8010050:	e009      	b.n	8010066 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	4413      	add	r3, r2
 8010058:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801005c:	2200      	movs	r2, #0
 801005e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	3301      	adds	r3, #1
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 801006c:	d3f1      	bcc.n	8010052 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2201      	movs	r2, #1
 801007e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010086:	4413      	add	r3, r2
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2240      	movs	r2, #64	; 0x40
 8010096:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	f643 135c 	movw	r3, #14684	; 0x395c
 80100a4:	4413      	add	r3, r2
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	f643 135d 	movw	r3, #14685	; 0x395d
 80100b0:	4413      	add	r3, r2
 80100b2:	2201      	movs	r2, #1
 80100b4:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	f643 135f 	movw	r3, #14687	; 0x395f
 80100bc:	4413      	add	r3, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	f643 135e 	movw	r3, #14686	; 0x395e
 80100c8:	4413      	add	r3, r2
 80100ca:	2200      	movs	r2, #0
 80100cc:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80100e6:	2300      	movs	r3, #0
 80100e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d01a      	beq.n	8010126 <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d111      	bne.n	8010120 <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	1c59      	adds	r1, r3, #1
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 801010c:	6011      	str	r1, [r2, #0]
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801011a:	2300      	movs	r3, #0
 801011c:	73fb      	strb	r3, [r7, #15]
 801011e:	e004      	b.n	801012a <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010120:	2302      	movs	r3, #2
 8010122:	73fb      	strb	r3, [r7, #15]
 8010124:	e001      	b.n	801012a <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010126:	2302      	movs	r3, #2
 8010128:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801012a:	7bfb      	ldrb	r3, [r7, #15]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3714      	adds	r7, #20
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	460b      	mov	r3, r1
 8010142:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010144:	2300      	movs	r3, #0
 8010146:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	f643 137c 	movw	r3, #14716	; 0x397c
 801014e:	4413      	add	r3, r2
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	78fa      	ldrb	r2, [r7, #3]
 8010154:	429a      	cmp	r2, r3
 8010156:	d206      	bcs.n	8010166 <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	f643 1364 	movw	r3, #14692	; 0x3964
 801015e:	4413      	add	r3, r2
 8010160:	78fa      	ldrb	r2, [r7, #3]
 8010162:	701a      	strb	r2, [r3, #0]
 8010164:	e001      	b.n	801016a <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010166:	2302      	movs	r3, #2
 8010168:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801016a:	7bfb      	ldrb	r3, [r7, #15]
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010178:	b480      	push	{r7}
 801017a:	b087      	sub	sp, #28
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	4608      	mov	r0, r1
 8010182:	4611      	mov	r1, r2
 8010184:	461a      	mov	r2, r3
 8010186:	4603      	mov	r3, r0
 8010188:	70fb      	strb	r3, [r7, #3]
 801018a:	460b      	mov	r3, r1
 801018c:	70bb      	strb	r3, [r7, #2]
 801018e:	4613      	mov	r3, r2
 8010190:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010192:	2300      	movs	r3, #0
 8010194:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8010196:	2300      	movs	r3, #0
 8010198:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	f643 1378 	movw	r3, #14712	; 0x3978
 80101a0:	4413      	add	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80101a4:	e025      	b.n	80101f2 <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80101a6:	7dfb      	ldrb	r3, [r7, #23]
 80101a8:	221a      	movs	r2, #26
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
 80101ae:	3308      	adds	r3, #8
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	4413      	add	r3, r2
 80101b4:	3302      	adds	r3, #2
 80101b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	795b      	ldrb	r3, [r3, #5]
 80101bc:	78fa      	ldrb	r2, [r7, #3]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d002      	beq.n	80101c8 <USBH_FindInterface+0x50>
 80101c2:	78fb      	ldrb	r3, [r7, #3]
 80101c4:	2bff      	cmp	r3, #255	; 0xff
 80101c6:	d111      	bne.n	80101ec <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80101cc:	78ba      	ldrb	r2, [r7, #2]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d002      	beq.n	80101d8 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80101d2:	78bb      	ldrb	r3, [r7, #2]
 80101d4:	2bff      	cmp	r3, #255	; 0xff
 80101d6:	d109      	bne.n	80101ec <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80101dc:	787a      	ldrb	r2, [r7, #1]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d002      	beq.n	80101e8 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80101e2:	787b      	ldrb	r3, [r7, #1]
 80101e4:	2bff      	cmp	r3, #255	; 0xff
 80101e6:	d101      	bne.n	80101ec <USBH_FindInterface+0x74>
    {
      return  if_ix;
 80101e8:	7dfb      	ldrb	r3, [r7, #23]
 80101ea:	e006      	b.n	80101fa <USBH_FindInterface+0x82>
    }
    if_ix++;
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	3301      	adds	r3, #1
 80101f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80101f2:	7dfb      	ldrb	r3, [r7, #23]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d9d6      	bls.n	80101a6 <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 80101f8:	23ff      	movs	r3, #255	; 0xff
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	371c      	adds	r7, #28
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr

08010206 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b082      	sub	sp, #8
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f00a fef8 	bl	801b004 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8010214:	2101      	movs	r1, #1
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f00a ffdd 	bl	801b1d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010226:	b480      	push	{r7}
 8010228:	b083      	sub	sp, #12
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010236:	4413      	add	r3, r2
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	601a      	str	r2, [r3, #0]
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010256:	4413      	add	r3, r2
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	1c5a      	adds	r2, r3, #1
 801025c:	6879      	ldr	r1, [r7, #4]
 801025e:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010262:	440b      	add	r3, r1
 8010264:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 f804 	bl	8010274 <USBH_HandleSof>
}
 801026c:	bf00      	nop
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b0b      	cmp	r3, #11
 8010284:	d10e      	bne.n	80102a4 <USBH_HandleSof+0x30>
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801028c:	4413      	add	r3, r2
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d007      	beq.n	80102a4 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801029a:	4413      	add	r3, r2
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	4798      	blx	r3
  }
}
 80102a4:	bf00      	nop
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	f643 1363 	movw	r3, #14691	; 0x3963
 80102ba:	4413      	add	r3, r2
 80102bc:	2201      	movs	r2, #1
 80102be:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80102c0:	bf00      	nop
}
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	f643 1363 	movw	r3, #14691	; 0x3963
 80102da:	4413      	add	r3, r2
 80102dc:	2200      	movs	r2, #0
 80102de:	701a      	strb	r2, [r3, #0]

  return;
 80102e0:	bf00      	nop
}
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	f643 1360 	movw	r3, #14688	; 0x3960
 80102fa:	4413      	add	r3, r2
 80102fc:	2201      	movs	r2, #1
 80102fe:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	f643 1361 	movw	r3, #14689	; 0x3961
 8010306:	4413      	add	r3, r2
 8010308:	2200      	movs	r2, #0
 801030a:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	f643 1362 	movw	r3, #14690	; 0x3962
 8010312:	4413      	add	r3, r2
 8010314:	2200      	movs	r2, #0
 8010316:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010318:	2300      	movs	r3, #0
}
 801031a:	4618      	mov	r0, r3
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b082      	sub	sp, #8
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	f643 1361 	movw	r3, #14689	; 0x3961
 8010334:	4413      	add	r3, r2
 8010336:	2201      	movs	r2, #1
 8010338:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	f643 1360 	movw	r3, #14688	; 0x3960
 8010340:	4413      	add	r3, r2
 8010342:	2200      	movs	r2, #0
 8010344:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	f643 1363 	movw	r3, #14691	; 0x3963
 801034c:	4413      	add	r3, r2
 801034e:	2200      	movs	r2, #0
 8010350:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f00a fe73 	bl	801b03e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	791b      	ldrb	r3, [r3, #4]
 801035c:	4619      	mov	r1, r3
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 fadf 	bl	8010922 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	795b      	ldrb	r3, [r3, #5]
 8010368:	4619      	mov	r1, r3
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 fad9 	bl	8010922 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b082      	sub	sp, #8
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
 8010382:	460b      	mov	r3, r1
 8010384:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	789b      	ldrb	r3, [r3, #2]
 801038a:	2b01      	cmp	r3, #1
 801038c:	d10f      	bne.n	80103ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2202      	movs	r2, #2
 8010392:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2201      	movs	r2, #1
 8010398:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80103a0:	78fb      	ldrb	r3, [r7, #3]
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80103ae:	2200      	movs	r2, #0
 80103b0:	2100      	movs	r1, #0
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 f805 	bl	80103c2 <USBH_CtlReq>
 80103b8:	4603      	mov	r3, r0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b086      	sub	sp, #24
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	60f8      	str	r0, [r7, #12]
 80103ca:	60b9      	str	r1, [r7, #8]
 80103cc:	4613      	mov	r3, r2
 80103ce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80103d0:	2301      	movs	r3, #1
 80103d2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	789b      	ldrb	r3, [r3, #2]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d002      	beq.n	80103e2 <USBH_CtlReq+0x20>
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d00f      	beq.n	8010400 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80103e0:	e027      	b.n	8010432 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	68ba      	ldr	r2, [r7, #8]
 80103e6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	88fa      	ldrh	r2, [r7, #6]
 80103ec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2201      	movs	r2, #1
 80103f2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2202      	movs	r2, #2
 80103f8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80103fa:	2301      	movs	r3, #1
 80103fc:	75fb      	strb	r3, [r7, #23]
      break;
 80103fe:	e018      	b.n	8010432 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010400:	68f8      	ldr	r0, [r7, #12]
 8010402:	f000 f81b 	bl	801043c <USBH_HandleControl>
 8010406:	4603      	mov	r3, r0
 8010408:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801040a:	7dfb      	ldrb	r3, [r7, #23]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <USBH_CtlReq+0x54>
 8010410:	7dfb      	ldrb	r3, [r7, #23]
 8010412:	2b03      	cmp	r3, #3
 8010414:	d106      	bne.n	8010424 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2201      	movs	r2, #1
 801041a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2200      	movs	r2, #0
 8010420:	761a      	strb	r2, [r3, #24]
      break;
 8010422:	e005      	b.n	8010430 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010424:	7dfb      	ldrb	r3, [r7, #23]
 8010426:	2b02      	cmp	r3, #2
 8010428:	d102      	bne.n	8010430 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2201      	movs	r2, #1
 801042e:	709a      	strb	r2, [r3, #2]
      break;
 8010430:	bf00      	nop
  }
  return status;
 8010432:	7dfb      	ldrb	r3, [r7, #23]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3718      	adds	r7, #24
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b086      	sub	sp, #24
 8010440:	af02      	add	r7, sp, #8
 8010442:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010444:	2301      	movs	r3, #1
 8010446:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010448:	2300      	movs	r3, #0
 801044a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7e1b      	ldrb	r3, [r3, #24]
 8010450:	3b01      	subs	r3, #1
 8010452:	2b0a      	cmp	r3, #10
 8010454:	f200 8160 	bhi.w	8010718 <USBH_HandleControl+0x2dc>
 8010458:	a201      	add	r2, pc, #4	; (adr r2, 8010460 <USBH_HandleControl+0x24>)
 801045a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045e:	bf00      	nop
 8010460:	0801048d 	.word	0x0801048d
 8010464:	080104a7 	.word	0x080104a7
 8010468:	08010511 	.word	0x08010511
 801046c:	0801053b 	.word	0x0801053b
 8010470:	08010573 	.word	0x08010573
 8010474:	080105a1 	.word	0x080105a1
 8010478:	080105f3 	.word	0x080105f3
 801047c:	08010619 	.word	0x08010619
 8010480:	08010655 	.word	0x08010655
 8010484:	0801067f 	.word	0x0801067f
 8010488:	080106bd 	.word	0x080106bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f103 0110 	add.w	r1, r3, #16
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	795b      	ldrb	r3, [r3, #5]
 8010496:	461a      	mov	r2, r3
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f94d 	bl	8010738 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2202      	movs	r2, #2
 80104a2:	761a      	strb	r2, [r3, #24]
      break;
 80104a4:	e143      	b.n	801072e <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	795b      	ldrb	r3, [r3, #5]
 80104aa:	4619      	mov	r1, r3
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f00a fe7d 	bl	801b1ac <USBH_LL_GetURBState>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80104b6:	7bbb      	ldrb	r3, [r7, #14]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d11e      	bne.n	80104fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	7c1b      	ldrb	r3, [r3, #16]
 80104c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80104c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	8adb      	ldrh	r3, [r3, #22]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80104ce:	7b7b      	ldrb	r3, [r7, #13]
 80104d0:	2b80      	cmp	r3, #128	; 0x80
 80104d2:	d103      	bne.n	80104dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2203      	movs	r2, #3
 80104d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80104da:	e11f      	b.n	801071c <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2205      	movs	r2, #5
 80104e0:	761a      	strb	r2, [r3, #24]
      break;
 80104e2:	e11b      	b.n	801071c <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 80104e4:	7b7b      	ldrb	r3, [r7, #13]
 80104e6:	2b80      	cmp	r3, #128	; 0x80
 80104e8:	d103      	bne.n	80104f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2209      	movs	r2, #9
 80104ee:	761a      	strb	r2, [r3, #24]
      break;
 80104f0:	e114      	b.n	801071c <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2207      	movs	r2, #7
 80104f6:	761a      	strb	r2, [r3, #24]
      break;
 80104f8:	e110      	b.n	801071c <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80104fa:	7bbb      	ldrb	r3, [r7, #14]
 80104fc:	2b04      	cmp	r3, #4
 80104fe:	d003      	beq.n	8010508 <USBH_HandleControl+0xcc>
 8010500:	7bbb      	ldrb	r3, [r7, #14]
 8010502:	2b02      	cmp	r3, #2
 8010504:	f040 810a 	bne.w	801071c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	220b      	movs	r2, #11
 801050c:	761a      	strb	r2, [r3, #24]
      break;
 801050e:	e105      	b.n	801071c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010516:	4413      	add	r3, r2
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6899      	ldr	r1, [r3, #8]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	899a      	ldrh	r2, [r3, #12]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	791b      	ldrb	r3, [r3, #4]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 f944 	bl	80107ba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2204      	movs	r2, #4
 8010536:	761a      	strb	r2, [r3, #24]
      break;
 8010538:	e0f9      	b.n	801072e <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	791b      	ldrb	r3, [r3, #4]
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f00a fe33 	bl	801b1ac <USBH_LL_GetURBState>
 8010546:	4603      	mov	r3, r0
 8010548:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801054a:	7bbb      	ldrb	r3, [r7, #14]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d102      	bne.n	8010556 <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2209      	movs	r2, #9
 8010554:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010556:	7bbb      	ldrb	r3, [r7, #14]
 8010558:	2b05      	cmp	r3, #5
 801055a:	d102      	bne.n	8010562 <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801055c:	2303      	movs	r3, #3
 801055e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010560:	e0de      	b.n	8010720 <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 8010562:	7bbb      	ldrb	r3, [r7, #14]
 8010564:	2b04      	cmp	r3, #4
 8010566:	f040 80db 	bne.w	8010720 <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	220b      	movs	r2, #11
 801056e:	761a      	strb	r2, [r3, #24]
      break;
 8010570:	e0d6      	b.n	8010720 <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6899      	ldr	r1, [r3, #8]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	899a      	ldrh	r2, [r3, #12]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	795b      	ldrb	r3, [r3, #5]
 801057e:	2001      	movs	r0, #1
 8010580:	9000      	str	r0, [sp, #0]
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f8f2 	bl	801076c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	f643 2304 	movw	r3, #14852	; 0x3a04
 801058e:	4413      	add	r3, r2
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2206      	movs	r2, #6
 801059c:	761a      	strb	r2, [r3, #24]
      break;
 801059e:	e0c6      	b.n	801072e <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	795b      	ldrb	r3, [r3, #5]
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f00a fe00 	bl	801b1ac <USBH_LL_GetURBState>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80105b0:	7bbb      	ldrb	r3, [r7, #14]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d103      	bne.n	80105be <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2207      	movs	r2, #7
 80105ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80105bc:	e0b2      	b.n	8010724 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 80105be:	7bbb      	ldrb	r3, [r7, #14]
 80105c0:	2b05      	cmp	r3, #5
 80105c2:	d105      	bne.n	80105d0 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	220c      	movs	r2, #12
 80105c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80105ca:	2303      	movs	r3, #3
 80105cc:	73fb      	strb	r3, [r7, #15]
      break;
 80105ce:	e0a9      	b.n	8010724 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80105d0:	7bbb      	ldrb	r3, [r7, #14]
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d103      	bne.n	80105de <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2205      	movs	r2, #5
 80105da:	761a      	strb	r2, [r3, #24]
      break;
 80105dc:	e0a2      	b.n	8010724 <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 80105de:	7bbb      	ldrb	r3, [r7, #14]
 80105e0:	2b04      	cmp	r3, #4
 80105e2:	f040 809f 	bne.w	8010724 <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	220b      	movs	r2, #11
 80105ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80105ec:	2302      	movs	r3, #2
 80105ee:	73fb      	strb	r3, [r7, #15]
      break;
 80105f0:	e098      	b.n	8010724 <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	791b      	ldrb	r3, [r3, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	2100      	movs	r1, #0
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f8dd 	bl	80107ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010606:	4413      	add	r3, r2
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2208      	movs	r2, #8
 8010614:	761a      	strb	r2, [r3, #24]

      break;
 8010616:	e08a      	b.n	801072e <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	791b      	ldrb	r3, [r3, #4]
 801061c:	4619      	mov	r1, r3
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f00a fdc4 	bl	801b1ac <USBH_LL_GetURBState>
 8010624:	4603      	mov	r3, r0
 8010626:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010628:	7bbb      	ldrb	r3, [r7, #14]
 801062a:	2b01      	cmp	r3, #1
 801062c:	d105      	bne.n	801063a <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	220d      	movs	r2, #13
 8010632:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010638:	e076      	b.n	8010728 <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	2b04      	cmp	r3, #4
 801063e:	d103      	bne.n	8010648 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	220b      	movs	r2, #11
 8010644:	761a      	strb	r2, [r3, #24]
      break;
 8010646:	e06f      	b.n	8010728 <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 8010648:	7bbb      	ldrb	r3, [r7, #14]
 801064a:	2b05      	cmp	r3, #5
 801064c:	d16c      	bne.n	8010728 <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 801064e:	2303      	movs	r3, #3
 8010650:	73fb      	strb	r3, [r7, #15]
      break;
 8010652:	e069      	b.n	8010728 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	795b      	ldrb	r3, [r3, #5]
 8010658:	2201      	movs	r2, #1
 801065a:	9200      	str	r2, [sp, #0]
 801065c:	2200      	movs	r2, #0
 801065e:	2100      	movs	r1, #0
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 f883 	bl	801076c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	f643 2304 	movw	r3, #14852	; 0x3a04
 801066c:	4413      	add	r3, r2
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	b29a      	uxth	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	220a      	movs	r2, #10
 801067a:	761a      	strb	r2, [r3, #24]
      break;
 801067c:	e057      	b.n	801072e <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	795b      	ldrb	r3, [r3, #5]
 8010682:	4619      	mov	r1, r3
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f00a fd91 	bl	801b1ac <USBH_LL_GetURBState>
 801068a:	4603      	mov	r3, r0
 801068c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801068e:	7bbb      	ldrb	r3, [r7, #14]
 8010690:	2b01      	cmp	r3, #1
 8010692:	d105      	bne.n	80106a0 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 8010694:	2300      	movs	r3, #0
 8010696:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	220d      	movs	r2, #13
 801069c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801069e:	e045      	b.n	801072c <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80106a0:	7bbb      	ldrb	r3, [r7, #14]
 80106a2:	2b02      	cmp	r3, #2
 80106a4:	d103      	bne.n	80106ae <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2209      	movs	r2, #9
 80106aa:	761a      	strb	r2, [r3, #24]
      break;
 80106ac:	e03e      	b.n	801072c <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 80106ae:	7bbb      	ldrb	r3, [r7, #14]
 80106b0:	2b04      	cmp	r3, #4
 80106b2:	d13b      	bne.n	801072c <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	220b      	movs	r2, #11
 80106b8:	761a      	strb	r2, [r3, #24]
      break;
 80106ba:	e037      	b.n	801072c <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	7e5b      	ldrb	r3, [r3, #25]
 80106c0:	3301      	adds	r3, #1
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	765a      	strb	r2, [r3, #25]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	7e5b      	ldrb	r3, [r3, #25]
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d806      	bhi.n	80106de <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2201      	movs	r2, #1
 80106da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80106dc:	e027      	b.n	801072e <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	f643 2314 	movw	r3, #14868	; 0x3a14
 80106e4:	4413      	add	r3, r2
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2106      	movs	r1, #6
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	795b      	ldrb	r3, [r3, #5]
 80106f8:	4619      	mov	r1, r3
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 f911 	bl	8010922 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	791b      	ldrb	r3, [r3, #4]
 8010704:	4619      	mov	r1, r3
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 f90b 	bl	8010922 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010712:	2302      	movs	r3, #2
 8010714:	73fb      	strb	r3, [r7, #15]
      break;
 8010716:	e00a      	b.n	801072e <USBH_HandleControl+0x2f2>

    default:
      break;
 8010718:	bf00      	nop
 801071a:	e008      	b.n	801072e <USBH_HandleControl+0x2f2>
      break;
 801071c:	bf00      	nop
 801071e:	e006      	b.n	801072e <USBH_HandleControl+0x2f2>
      break;
 8010720:	bf00      	nop
 8010722:	e004      	b.n	801072e <USBH_HandleControl+0x2f2>
      break;
 8010724:	bf00      	nop
 8010726:	e002      	b.n	801072e <USBH_HandleControl+0x2f2>
      break;
 8010728:	bf00      	nop
 801072a:	e000      	b.n	801072e <USBH_HandleControl+0x2f2>
      break;
 801072c:	bf00      	nop
  }

  return status;
 801072e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b088      	sub	sp, #32
 801073c:	af04      	add	r7, sp, #16
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	4613      	mov	r3, r2
 8010744:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010746:	79f9      	ldrb	r1, [r7, #7]
 8010748:	2300      	movs	r3, #0
 801074a:	9303      	str	r3, [sp, #12]
 801074c:	2308      	movs	r3, #8
 801074e:	9302      	str	r3, [sp, #8]
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	2300      	movs	r3, #0
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	2300      	movs	r3, #0
 801075a:	2200      	movs	r2, #0
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f00a fcf2 	bl	801b146 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8010762:	2300      	movs	r3, #0
}
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b088      	sub	sp, #32
 8010770:	af04      	add	r7, sp, #16
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	4611      	mov	r1, r2
 8010778:	461a      	mov	r2, r3
 801077a:	460b      	mov	r3, r1
 801077c:	80fb      	strh	r3, [r7, #6]
 801077e:	4613      	mov	r3, r2
 8010780:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	f643 135d 	movw	r3, #14685	; 0x395d
 8010788:	4413      	add	r3, r2
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d001      	beq.n	8010794 <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 8010790:	2300      	movs	r3, #0
 8010792:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010794:	7979      	ldrb	r1, [r7, #5]
 8010796:	7e3b      	ldrb	r3, [r7, #24]
 8010798:	9303      	str	r3, [sp, #12]
 801079a:	88fb      	ldrh	r3, [r7, #6]
 801079c:	9302      	str	r3, [sp, #8]
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	9301      	str	r3, [sp, #4]
 80107a2:	2301      	movs	r3, #1
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	2300      	movs	r3, #0
 80107a8:	2200      	movs	r2, #0
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	f00a fccb 	bl	801b146 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b088      	sub	sp, #32
 80107be:	af04      	add	r7, sp, #16
 80107c0:	60f8      	str	r0, [r7, #12]
 80107c2:	60b9      	str	r1, [r7, #8]
 80107c4:	4611      	mov	r1, r2
 80107c6:	461a      	mov	r2, r3
 80107c8:	460b      	mov	r3, r1
 80107ca:	80fb      	strh	r3, [r7, #6]
 80107cc:	4613      	mov	r3, r2
 80107ce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80107d0:	7979      	ldrb	r1, [r7, #5]
 80107d2:	2300      	movs	r3, #0
 80107d4:	9303      	str	r3, [sp, #12]
 80107d6:	88fb      	ldrh	r3, [r7, #6]
 80107d8:	9302      	str	r3, [sp, #8]
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	2301      	movs	r3, #1
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	2300      	movs	r3, #0
 80107e4:	2201      	movs	r2, #1
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f00a fcad 	bl	801b146 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80107ec:	2300      	movs	r3, #0

}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b088      	sub	sp, #32
 80107fa:	af04      	add	r7, sp, #16
 80107fc:	60f8      	str	r0, [r7, #12]
 80107fe:	60b9      	str	r1, [r7, #8]
 8010800:	4611      	mov	r1, r2
 8010802:	461a      	mov	r2, r3
 8010804:	460b      	mov	r3, r1
 8010806:	80fb      	strh	r3, [r7, #6]
 8010808:	4613      	mov	r3, r2
 801080a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801080c:	68fa      	ldr	r2, [r7, #12]
 801080e:	f643 135d 	movw	r3, #14685	; 0x395d
 8010812:	4413      	add	r3, r2
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d001      	beq.n	801081e <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 801081a:	2300      	movs	r3, #0
 801081c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801081e:	7979      	ldrb	r1, [r7, #5]
 8010820:	7e3b      	ldrb	r3, [r7, #24]
 8010822:	9303      	str	r3, [sp, #12]
 8010824:	88fb      	ldrh	r3, [r7, #6]
 8010826:	9302      	str	r3, [sp, #8]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	2301      	movs	r3, #1
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	2302      	movs	r3, #2
 8010832:	2200      	movs	r2, #0
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f00a fc86 	bl	801b146 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b088      	sub	sp, #32
 8010848:	af04      	add	r7, sp, #16
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	4611      	mov	r1, r2
 8010850:	461a      	mov	r2, r3
 8010852:	460b      	mov	r3, r1
 8010854:	80fb      	strh	r3, [r7, #6]
 8010856:	4613      	mov	r3, r2
 8010858:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801085a:	7979      	ldrb	r1, [r7, #5]
 801085c:	2300      	movs	r3, #0
 801085e:	9303      	str	r3, [sp, #12]
 8010860:	88fb      	ldrh	r3, [r7, #6]
 8010862:	9302      	str	r3, [sp, #8]
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	2301      	movs	r3, #1
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	2302      	movs	r3, #2
 801086e:	2201      	movs	r2, #1
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f00a fc68 	bl	801b146 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b086      	sub	sp, #24
 8010884:	af04      	add	r7, sp, #16
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	4608      	mov	r0, r1
 801088a:	4611      	mov	r1, r2
 801088c:	461a      	mov	r2, r3
 801088e:	4603      	mov	r3, r0
 8010890:	70fb      	strb	r3, [r7, #3]
 8010892:	460b      	mov	r3, r1
 8010894:	70bb      	strb	r3, [r7, #2]
 8010896:	4613      	mov	r3, r2
 8010898:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801089a:	7878      	ldrb	r0, [r7, #1]
 801089c:	78ba      	ldrb	r2, [r7, #2]
 801089e:	78f9      	ldrb	r1, [r7, #3]
 80108a0:	8b3b      	ldrh	r3, [r7, #24]
 80108a2:	9302      	str	r3, [sp, #8]
 80108a4:	7d3b      	ldrb	r3, [r7, #20]
 80108a6:	9301      	str	r3, [sp, #4]
 80108a8:	7c3b      	ldrb	r3, [r7, #16]
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	4603      	mov	r3, r0
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f00a fbf7 	bl	801b0a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80108b4:	2300      	movs	r3, #0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b082      	sub	sp, #8
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	460b      	mov	r3, r1
 80108c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80108ca:	78fb      	ldrb	r3, [r7, #3]
 80108cc:	4619      	mov	r1, r3
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f00a fc18 	bl	801b104 <USBH_LL_ClosePipe>

  return USBH_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	460b      	mov	r3, r1
 80108e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f839 	bl	8010962 <USBH_GetFreePipe>
 80108f0:	4603      	mov	r3, r0
 80108f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80108f4:	89fb      	ldrh	r3, [r7, #14]
 80108f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d00b      	beq.n	8010916 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80108fe:	78fa      	ldrb	r2, [r7, #3]
 8010900:	89fb      	ldrh	r3, [r7, #14]
 8010902:	f003 030f 	and.w	r3, r3, #15
 8010906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801090a:	6879      	ldr	r1, [r7, #4]
 801090c:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010916:	89fb      	ldrh	r3, [r7, #14]
 8010918:	b2db      	uxtb	r3, r3
}
 801091a:	4618      	mov	r0, r3
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010922:	b480      	push	{r7}
 8010924:	b083      	sub	sp, #12
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	460b      	mov	r3, r1
 801092c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801092e:	78fb      	ldrb	r3, [r7, #3]
 8010930:	2b0a      	cmp	r3, #10
 8010932:	d80f      	bhi.n	8010954 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010934:	78fb      	ldrb	r3, [r7, #3]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 801093c:	009b      	lsls	r3, r3, #2
 801093e:	4413      	add	r3, r2
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	78fb      	ldrb	r3, [r7, #3]
 8010944:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	440b      	add	r3, r1
 8010952:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	370c      	adds	r7, #12
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr

08010962 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010962:	b480      	push	{r7}
 8010964:	b085      	sub	sp, #20
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801096a:	2300      	movs	r3, #0
 801096c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801096e:	2300      	movs	r3, #0
 8010970:	73fb      	strb	r3, [r7, #15]
 8010972:	e010      	b.n	8010996 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4413      	add	r3, r2
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010986:	2b00      	cmp	r3, #0
 8010988:	d102      	bne.n	8010990 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 801098a:	7bfb      	ldrb	r3, [r7, #15]
 801098c:	b29b      	uxth	r3, r3
 801098e:	e007      	b.n	80109a0 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8010990:	7bfb      	ldrb	r3, [r7, #15]
 8010992:	3301      	adds	r3, #1
 8010994:	73fb      	strb	r3, [r7, #15]
 8010996:	7bfb      	ldrb	r3, [r7, #15]
 8010998:	2b0a      	cmp	r3, #10
 801099a:	d9eb      	bls.n	8010974 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801099c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3714      	adds	r7, #20
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	4603      	mov	r3, r0
 80109b4:	6039      	str	r1, [r7, #0]
 80109b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80109b8:	88fb      	ldrh	r3, [r7, #6]
 80109ba:	2b7f      	cmp	r3, #127	; 0x7f
 80109bc:	d802      	bhi.n	80109c4 <ff_convert+0x18>
		c = chr;
 80109be:	88fb      	ldrh	r3, [r7, #6]
 80109c0:	81fb      	strh	r3, [r7, #14]
 80109c2:	e025      	b.n	8010a10 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00b      	beq.n	80109e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80109ca:	88fb      	ldrh	r3, [r7, #6]
 80109cc:	2bff      	cmp	r3, #255	; 0xff
 80109ce:	d805      	bhi.n	80109dc <ff_convert+0x30>
 80109d0:	88fb      	ldrh	r3, [r7, #6]
 80109d2:	3b80      	subs	r3, #128	; 0x80
 80109d4:	4a12      	ldr	r2, [pc, #72]	; (8010a20 <ff_convert+0x74>)
 80109d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109da:	e000      	b.n	80109de <ff_convert+0x32>
 80109dc:	2300      	movs	r3, #0
 80109de:	81fb      	strh	r3, [r7, #14]
 80109e0:	e016      	b.n	8010a10 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80109e2:	2300      	movs	r3, #0
 80109e4:	81fb      	strh	r3, [r7, #14]
 80109e6:	e009      	b.n	80109fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80109e8:	89fb      	ldrh	r3, [r7, #14]
 80109ea:	4a0d      	ldr	r2, [pc, #52]	; (8010a20 <ff_convert+0x74>)
 80109ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109f0:	88fa      	ldrh	r2, [r7, #6]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d006      	beq.n	8010a04 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80109f6:	89fb      	ldrh	r3, [r7, #14]
 80109f8:	3301      	adds	r3, #1
 80109fa:	81fb      	strh	r3, [r7, #14]
 80109fc:	89fb      	ldrh	r3, [r7, #14]
 80109fe:	2b7f      	cmp	r3, #127	; 0x7f
 8010a00:	d9f2      	bls.n	80109e8 <ff_convert+0x3c>
 8010a02:	e000      	b.n	8010a06 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010a04:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010a06:	89fb      	ldrh	r3, [r7, #14]
 8010a08:	3380      	adds	r3, #128	; 0x80
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010a10:	89fb      	ldrh	r3, [r7, #14]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	08028d9c 	.word	0x08028d9c

08010a24 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b087      	sub	sp, #28
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010a2e:	88fb      	ldrh	r3, [r7, #6]
 8010a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a34:	d201      	bcs.n	8010a3a <ff_wtoupper+0x16>
 8010a36:	4b3e      	ldr	r3, [pc, #248]	; (8010b30 <ff_wtoupper+0x10c>)
 8010a38:	e000      	b.n	8010a3c <ff_wtoupper+0x18>
 8010a3a:	4b3e      	ldr	r3, [pc, #248]	; (8010b34 <ff_wtoupper+0x110>)
 8010a3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	1c9a      	adds	r2, r3, #2
 8010a42:	617a      	str	r2, [r7, #20]
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010a48:	8a7b      	ldrh	r3, [r7, #18]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d068      	beq.n	8010b20 <ff_wtoupper+0xfc>
 8010a4e:	88fa      	ldrh	r2, [r7, #6]
 8010a50:	8a7b      	ldrh	r3, [r7, #18]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d364      	bcc.n	8010b20 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	1c9a      	adds	r2, r3, #2
 8010a5a:	617a      	str	r2, [r7, #20]
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	823b      	strh	r3, [r7, #16]
 8010a60:	8a3b      	ldrh	r3, [r7, #16]
 8010a62:	0a1b      	lsrs	r3, r3, #8
 8010a64:	81fb      	strh	r3, [r7, #14]
 8010a66:	8a3b      	ldrh	r3, [r7, #16]
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010a6c:	88fa      	ldrh	r2, [r7, #6]
 8010a6e:	8a79      	ldrh	r1, [r7, #18]
 8010a70:	8a3b      	ldrh	r3, [r7, #16]
 8010a72:	440b      	add	r3, r1
 8010a74:	429a      	cmp	r2, r3
 8010a76:	da49      	bge.n	8010b0c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010a78:	89fb      	ldrh	r3, [r7, #14]
 8010a7a:	2b08      	cmp	r3, #8
 8010a7c:	d84f      	bhi.n	8010b1e <ff_wtoupper+0xfa>
 8010a7e:	a201      	add	r2, pc, #4	; (adr r2, 8010a84 <ff_wtoupper+0x60>)
 8010a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a84:	08010aa9 	.word	0x08010aa9
 8010a88:	08010abb 	.word	0x08010abb
 8010a8c:	08010ad1 	.word	0x08010ad1
 8010a90:	08010ad9 	.word	0x08010ad9
 8010a94:	08010ae1 	.word	0x08010ae1
 8010a98:	08010ae9 	.word	0x08010ae9
 8010a9c:	08010af1 	.word	0x08010af1
 8010aa0:	08010af9 	.word	0x08010af9
 8010aa4:	08010b01 	.word	0x08010b01
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010aa8:	88fa      	ldrh	r2, [r7, #6]
 8010aaa:	8a7b      	ldrh	r3, [r7, #18]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	697a      	ldr	r2, [r7, #20]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	80fb      	strh	r3, [r7, #6]
 8010ab8:	e027      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010aba:	88fa      	ldrh	r2, [r7, #6]
 8010abc:	8a7b      	ldrh	r3, [r7, #18]
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	88fa      	ldrh	r2, [r7, #6]
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	80fb      	strh	r3, [r7, #6]
 8010ace:	e01c      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010ad0:	88fb      	ldrh	r3, [r7, #6]
 8010ad2:	3b10      	subs	r3, #16
 8010ad4:	80fb      	strh	r3, [r7, #6]
 8010ad6:	e018      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010ad8:	88fb      	ldrh	r3, [r7, #6]
 8010ada:	3b20      	subs	r3, #32
 8010adc:	80fb      	strh	r3, [r7, #6]
 8010ade:	e014      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010ae0:	88fb      	ldrh	r3, [r7, #6]
 8010ae2:	3b30      	subs	r3, #48	; 0x30
 8010ae4:	80fb      	strh	r3, [r7, #6]
 8010ae6:	e010      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010ae8:	88fb      	ldrh	r3, [r7, #6]
 8010aea:	3b1a      	subs	r3, #26
 8010aec:	80fb      	strh	r3, [r7, #6]
 8010aee:	e00c      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010af0:	88fb      	ldrh	r3, [r7, #6]
 8010af2:	3308      	adds	r3, #8
 8010af4:	80fb      	strh	r3, [r7, #6]
 8010af6:	e008      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010af8:	88fb      	ldrh	r3, [r7, #6]
 8010afa:	3b50      	subs	r3, #80	; 0x50
 8010afc:	80fb      	strh	r3, [r7, #6]
 8010afe:	e004      	b.n	8010b0a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010b00:	88fb      	ldrh	r3, [r7, #6]
 8010b02:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010b06:	80fb      	strh	r3, [r7, #6]
 8010b08:	bf00      	nop
			}
			break;
 8010b0a:	e008      	b.n	8010b1e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010b0c:	89fb      	ldrh	r3, [r7, #14]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d195      	bne.n	8010a3e <ff_wtoupper+0x1a>
 8010b12:	8a3b      	ldrh	r3, [r7, #16]
 8010b14:	005b      	lsls	r3, r3, #1
 8010b16:	697a      	ldr	r2, [r7, #20]
 8010b18:	4413      	add	r3, r2
 8010b1a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b1c:	e78f      	b.n	8010a3e <ff_wtoupper+0x1a>
			break;
 8010b1e:	bf00      	nop
	}

	return chr;
 8010b20:	88fb      	ldrh	r3, [r7, #6]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	371c      	adds	r7, #28
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	08028e9c 	.word	0x08028e9c
 8010b34:	08029090 	.word	0x08029090

08010b38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010b42:	79fb      	ldrb	r3, [r7, #7]
 8010b44:	4a08      	ldr	r2, [pc, #32]	; (8010b68 <disk_status+0x30>)
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	79fa      	ldrb	r2, [r7, #7]
 8010b50:	4905      	ldr	r1, [pc, #20]	; (8010b68 <disk_status+0x30>)
 8010b52:	440a      	add	r2, r1
 8010b54:	7a12      	ldrb	r2, [r2, #8]
 8010b56:	4610      	mov	r0, r2
 8010b58:	4798      	blx	r3
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3710      	adds	r7, #16
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	2400a618 	.word	0x2400a618

08010b6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	4a0d      	ldr	r2, [pc, #52]	; (8010bb4 <disk_initialize+0x48>)
 8010b7e:	5cd3      	ldrb	r3, [r2, r3]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d111      	bne.n	8010ba8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	4a0b      	ldr	r2, [pc, #44]	; (8010bb4 <disk_initialize+0x48>)
 8010b88:	2101      	movs	r1, #1
 8010b8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010b8c:	79fb      	ldrb	r3, [r7, #7]
 8010b8e:	4a09      	ldr	r2, [pc, #36]	; (8010bb4 <disk_initialize+0x48>)
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	79fa      	ldrb	r2, [r7, #7]
 8010b9a:	4906      	ldr	r1, [pc, #24]	; (8010bb4 <disk_initialize+0x48>)
 8010b9c:	440a      	add	r2, r1
 8010b9e:	7a12      	ldrb	r2, [r2, #8]
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	4798      	blx	r3
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	2400a618 	.word	0x2400a618

08010bb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010bb8:	b590      	push	{r4, r7, lr}
 8010bba:	b087      	sub	sp, #28
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60b9      	str	r1, [r7, #8]
 8010bc0:	607a      	str	r2, [r7, #4]
 8010bc2:	603b      	str	r3, [r7, #0]
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
 8010bca:	4a0a      	ldr	r2, [pc, #40]	; (8010bf4 <disk_read+0x3c>)
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	4413      	add	r3, r2
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	689c      	ldr	r4, [r3, #8]
 8010bd4:	7bfb      	ldrb	r3, [r7, #15]
 8010bd6:	4a07      	ldr	r2, [pc, #28]	; (8010bf4 <disk_read+0x3c>)
 8010bd8:	4413      	add	r3, r2
 8010bda:	7a18      	ldrb	r0, [r3, #8]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	68b9      	ldr	r1, [r7, #8]
 8010be2:	47a0      	blx	r4
 8010be4:	4603      	mov	r3, r0
 8010be6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	371c      	adds	r7, #28
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd90      	pop	{r4, r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	2400a618 	.word	0x2400a618

08010bf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010bf8:	b590      	push	{r4, r7, lr}
 8010bfa:	b087      	sub	sp, #28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60b9      	str	r1, [r7, #8]
 8010c00:	607a      	str	r2, [r7, #4]
 8010c02:	603b      	str	r3, [r7, #0]
 8010c04:	4603      	mov	r3, r0
 8010c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010c08:	7bfb      	ldrb	r3, [r7, #15]
 8010c0a:	4a0a      	ldr	r2, [pc, #40]	; (8010c34 <disk_write+0x3c>)
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	4413      	add	r3, r2
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	68dc      	ldr	r4, [r3, #12]
 8010c14:	7bfb      	ldrb	r3, [r7, #15]
 8010c16:	4a07      	ldr	r2, [pc, #28]	; (8010c34 <disk_write+0x3c>)
 8010c18:	4413      	add	r3, r2
 8010c1a:	7a18      	ldrb	r0, [r3, #8]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	68b9      	ldr	r1, [r7, #8]
 8010c22:	47a0      	blx	r4
 8010c24:	4603      	mov	r3, r0
 8010c26:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	371c      	adds	r7, #28
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd90      	pop	{r4, r7, pc}
 8010c32:	bf00      	nop
 8010c34:	2400a618 	.word	0x2400a618

08010c38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	603a      	str	r2, [r7, #0]
 8010c42:	71fb      	strb	r3, [r7, #7]
 8010c44:	460b      	mov	r3, r1
 8010c46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	4a09      	ldr	r2, [pc, #36]	; (8010c70 <disk_ioctl+0x38>)
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	4413      	add	r3, r2
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	79fa      	ldrb	r2, [r7, #7]
 8010c56:	4906      	ldr	r1, [pc, #24]	; (8010c70 <disk_ioctl+0x38>)
 8010c58:	440a      	add	r2, r1
 8010c5a:	7a10      	ldrb	r0, [r2, #8]
 8010c5c:	79b9      	ldrb	r1, [r7, #6]
 8010c5e:	683a      	ldr	r2, [r7, #0]
 8010c60:	4798      	blx	r3
 8010c62:	4603      	mov	r3, r0
 8010c64:	73fb      	strb	r3, [r7, #15]
  return res;
 8010c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	2400a618 	.word	0x2400a618

08010c74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010c74:	b480      	push	{r7}
 8010c76:	b085      	sub	sp, #20
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010c84:	89fb      	ldrh	r3, [r7, #14]
 8010c86:	021b      	lsls	r3, r3, #8
 8010c88:	b21a      	sxth	r2, r3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	b21b      	sxth	r3, r3
 8010c90:	4313      	orrs	r3, r2
 8010c92:	b21b      	sxth	r3, r3
 8010c94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010c96:	89fb      	ldrh	r3, [r7, #14]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3714      	adds	r7, #20
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	3303      	adds	r3, #3
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	021b      	lsls	r3, r3, #8
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	3202      	adds	r2, #2
 8010cbc:	7812      	ldrb	r2, [r2, #0]
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	021b      	lsls	r3, r3, #8
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	3201      	adds	r2, #1
 8010cca:	7812      	ldrb	r2, [r2, #0]
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	021b      	lsls	r3, r3, #8
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	7812      	ldrb	r2, [r2, #0]
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	60fb      	str	r3, [r7, #12]
	return rv;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3714      	adds	r7, #20
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr

08010cea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010cea:	b480      	push	{r7}
 8010cec:	b083      	sub	sp, #12
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	1c5a      	adds	r2, r3, #1
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	887a      	ldrh	r2, [r7, #2]
 8010cfe:	b2d2      	uxtb	r2, r2
 8010d00:	701a      	strb	r2, [r3, #0]
 8010d02:	887b      	ldrh	r3, [r7, #2]
 8010d04:	0a1b      	lsrs	r3, r3, #8
 8010d06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	1c5a      	adds	r2, r3, #1
 8010d0c:	607a      	str	r2, [r7, #4]
 8010d0e:	887a      	ldrh	r2, [r7, #2]
 8010d10:	b2d2      	uxtb	r2, r2
 8010d12:	701a      	strb	r2, [r3, #0]
}
 8010d14:	bf00      	nop
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	1c5a      	adds	r2, r3, #1
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	683a      	ldr	r2, [r7, #0]
 8010d32:	b2d2      	uxtb	r2, r2
 8010d34:	701a      	strb	r2, [r3, #0]
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	0a1b      	lsrs	r3, r3, #8
 8010d3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	607a      	str	r2, [r7, #4]
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	b2d2      	uxtb	r2, r2
 8010d46:	701a      	strb	r2, [r3, #0]
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	0a1b      	lsrs	r3, r3, #8
 8010d4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	1c5a      	adds	r2, r3, #1
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	683a      	ldr	r2, [r7, #0]
 8010d56:	b2d2      	uxtb	r2, r2
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	0a1b      	lsrs	r3, r3, #8
 8010d5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	607a      	str	r2, [r7, #4]
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	b2d2      	uxtb	r2, r2
 8010d6a:	701a      	strb	r2, [r3, #0]
}
 8010d6c:	bf00      	nop
 8010d6e:	370c      	adds	r7, #12
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr

08010d78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010d78:	b480      	push	{r7}
 8010d7a:	b087      	sub	sp, #28
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00d      	beq.n	8010dae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010d92:	693a      	ldr	r2, [r7, #16]
 8010d94:	1c53      	adds	r3, r2, #1
 8010d96:	613b      	str	r3, [r7, #16]
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	1c59      	adds	r1, r3, #1
 8010d9c:	6179      	str	r1, [r7, #20]
 8010d9e:	7812      	ldrb	r2, [r2, #0]
 8010da0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3b01      	subs	r3, #1
 8010da6:	607b      	str	r3, [r7, #4]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1f1      	bne.n	8010d92 <mem_cpy+0x1a>
	}
}
 8010dae:	bf00      	nop
 8010db0:	371c      	adds	r7, #28
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr

08010dba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010dba:	b480      	push	{r7}
 8010dbc:	b087      	sub	sp, #28
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	60f8      	str	r0, [r7, #12]
 8010dc2:	60b9      	str	r1, [r7, #8]
 8010dc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	617a      	str	r2, [r7, #20]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	b2d2      	uxtb	r2, r2
 8010dd4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	607b      	str	r3, [r7, #4]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1f3      	bne.n	8010dca <mem_set+0x10>
}
 8010de2:	bf00      	nop
 8010de4:	bf00      	nop
 8010de6:	371c      	adds	r7, #28
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010df0:	b480      	push	{r7}
 8010df2:	b089      	sub	sp, #36	; 0x24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	61fb      	str	r3, [r7, #28]
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010e04:	2300      	movs	r3, #0
 8010e06:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	1c5a      	adds	r2, r3, #1
 8010e0c:	61fa      	str	r2, [r7, #28]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	4619      	mov	r1, r3
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	1c5a      	adds	r2, r3, #1
 8010e16:	61ba      	str	r2, [r7, #24]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	1acb      	subs	r3, r1, r3
 8010e1c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3b01      	subs	r3, #1
 8010e22:	607b      	str	r3, [r7, #4]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d002      	beq.n	8010e30 <mem_cmp+0x40>
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d0eb      	beq.n	8010e08 <mem_cmp+0x18>

	return r;
 8010e30:	697b      	ldr	r3, [r7, #20]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3724      	adds	r7, #36	; 0x24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr

08010e3e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010e3e:	b480      	push	{r7}
 8010e40:	b083      	sub	sp, #12
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
 8010e46:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010e48:	e002      	b.n	8010e50 <chk_chr+0x12>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	607b      	str	r3, [r7, #4]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <chk_chr+0x26>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d1f2      	bne.n	8010e4a <chk_chr+0xc>
	return *str;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	781b      	ldrb	r3, [r3, #0]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010e7e:	2300      	movs	r3, #0
 8010e80:	60bb      	str	r3, [r7, #8]
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	60fb      	str	r3, [r7, #12]
 8010e86:	e029      	b.n	8010edc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010e88:	4a27      	ldr	r2, [pc, #156]	; (8010f28 <chk_lock+0xb4>)
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	011b      	lsls	r3, r3, #4
 8010e8e:	4413      	add	r3, r2
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d01d      	beq.n	8010ed2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010e96:	4a24      	ldr	r2, [pc, #144]	; (8010f28 <chk_lock+0xb4>)
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	011b      	lsls	r3, r3, #4
 8010e9c:	4413      	add	r3, r2
 8010e9e:	681a      	ldr	r2, [r3, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d116      	bne.n	8010ed6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010ea8:	4a1f      	ldr	r2, [pc, #124]	; (8010f28 <chk_lock+0xb4>)
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	011b      	lsls	r3, r3, #4
 8010eae:	4413      	add	r3, r2
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d10c      	bne.n	8010ed6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ebc:	4a1a      	ldr	r2, [pc, #104]	; (8010f28 <chk_lock+0xb4>)
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	011b      	lsls	r3, r3, #4
 8010ec2:	4413      	add	r3, r2
 8010ec4:	3308      	adds	r3, #8
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d102      	bne.n	8010ed6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ed0:	e007      	b.n	8010ee2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	60fb      	str	r3, [r7, #12]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d9d2      	bls.n	8010e88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	d109      	bne.n	8010efc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d102      	bne.n	8010ef4 <chk_lock+0x80>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	2b02      	cmp	r3, #2
 8010ef2:	d101      	bne.n	8010ef8 <chk_lock+0x84>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	e010      	b.n	8010f1a <chk_lock+0xa6>
 8010ef8:	2312      	movs	r3, #18
 8010efa:	e00e      	b.n	8010f1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d108      	bne.n	8010f14 <chk_lock+0xa0>
 8010f02:	4a09      	ldr	r2, [pc, #36]	; (8010f28 <chk_lock+0xb4>)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	011b      	lsls	r3, r3, #4
 8010f08:	4413      	add	r3, r2
 8010f0a:	330c      	adds	r3, #12
 8010f0c:	881b      	ldrh	r3, [r3, #0]
 8010f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f12:	d101      	bne.n	8010f18 <chk_lock+0xa4>
 8010f14:	2310      	movs	r3, #16
 8010f16:	e000      	b.n	8010f1a <chk_lock+0xa6>
 8010f18:	2300      	movs	r3, #0
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	2400a3f8 	.word	0x2400a3f8

08010f2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010f32:	2300      	movs	r3, #0
 8010f34:	607b      	str	r3, [r7, #4]
 8010f36:	e002      	b.n	8010f3e <enq_lock+0x12>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	607b      	str	r3, [r7, #4]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d806      	bhi.n	8010f52 <enq_lock+0x26>
 8010f44:	4a09      	ldr	r2, [pc, #36]	; (8010f6c <enq_lock+0x40>)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	011b      	lsls	r3, r3, #4
 8010f4a:	4413      	add	r3, r2
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1f2      	bne.n	8010f38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2b02      	cmp	r3, #2
 8010f56:	bf14      	ite	ne
 8010f58:	2301      	movne	r3, #1
 8010f5a:	2300      	moveq	r3, #0
 8010f5c:	b2db      	uxtb	r3, r3
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	2400a3f8 	.word	0x2400a3f8

08010f70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	e01f      	b.n	8010fc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010f80:	4a41      	ldr	r2, [pc, #260]	; (8011088 <inc_lock+0x118>)
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	011b      	lsls	r3, r3, #4
 8010f86:	4413      	add	r3, r2
 8010f88:	681a      	ldr	r2, [r3, #0]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d113      	bne.n	8010fba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010f92:	4a3d      	ldr	r2, [pc, #244]	; (8011088 <inc_lock+0x118>)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	011b      	lsls	r3, r3, #4
 8010f98:	4413      	add	r3, r2
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d109      	bne.n	8010fba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010fa6:	4a38      	ldr	r2, [pc, #224]	; (8011088 <inc_lock+0x118>)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	011b      	lsls	r3, r3, #4
 8010fac:	4413      	add	r3, r2
 8010fae:	3308      	adds	r3, #8
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d006      	beq.n	8010fc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d9dc      	bls.n	8010f80 <inc_lock+0x10>
 8010fc6:	e000      	b.n	8010fca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010fc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d132      	bne.n	8011036 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	e002      	b.n	8010fdc <inc_lock+0x6c>
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	60fb      	str	r3, [r7, #12]
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d806      	bhi.n	8010ff0 <inc_lock+0x80>
 8010fe2:	4a29      	ldr	r2, [pc, #164]	; (8011088 <inc_lock+0x118>)
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	011b      	lsls	r3, r3, #4
 8010fe8:	4413      	add	r3, r2
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d1f2      	bne.n	8010fd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	d101      	bne.n	8010ffa <inc_lock+0x8a>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	e040      	b.n	801107c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	4922      	ldr	r1, [pc, #136]	; (8011088 <inc_lock+0x118>)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	011b      	lsls	r3, r3, #4
 8011004:	440b      	add	r3, r1
 8011006:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	689a      	ldr	r2, [r3, #8]
 801100c:	491e      	ldr	r1, [pc, #120]	; (8011088 <inc_lock+0x118>)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	011b      	lsls	r3, r3, #4
 8011012:	440b      	add	r3, r1
 8011014:	3304      	adds	r3, #4
 8011016:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	695a      	ldr	r2, [r3, #20]
 801101c:	491a      	ldr	r1, [pc, #104]	; (8011088 <inc_lock+0x118>)
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	011b      	lsls	r3, r3, #4
 8011022:	440b      	add	r3, r1
 8011024:	3308      	adds	r3, #8
 8011026:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011028:	4a17      	ldr	r2, [pc, #92]	; (8011088 <inc_lock+0x118>)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	011b      	lsls	r3, r3, #4
 801102e:	4413      	add	r3, r2
 8011030:	330c      	adds	r3, #12
 8011032:	2200      	movs	r2, #0
 8011034:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d009      	beq.n	8011050 <inc_lock+0xe0>
 801103c:	4a12      	ldr	r2, [pc, #72]	; (8011088 <inc_lock+0x118>)
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	011b      	lsls	r3, r3, #4
 8011042:	4413      	add	r3, r2
 8011044:	330c      	adds	r3, #12
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d001      	beq.n	8011050 <inc_lock+0xe0>
 801104c:	2300      	movs	r3, #0
 801104e:	e015      	b.n	801107c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d108      	bne.n	8011068 <inc_lock+0xf8>
 8011056:	4a0c      	ldr	r2, [pc, #48]	; (8011088 <inc_lock+0x118>)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	011b      	lsls	r3, r3, #4
 801105c:	4413      	add	r3, r2
 801105e:	330c      	adds	r3, #12
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	3301      	adds	r3, #1
 8011064:	b29a      	uxth	r2, r3
 8011066:	e001      	b.n	801106c <inc_lock+0xfc>
 8011068:	f44f 7280 	mov.w	r2, #256	; 0x100
 801106c:	4906      	ldr	r1, [pc, #24]	; (8011088 <inc_lock+0x118>)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	011b      	lsls	r3, r3, #4
 8011072:	440b      	add	r3, r1
 8011074:	330c      	adds	r3, #12
 8011076:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	3301      	adds	r3, #1
}
 801107c:	4618      	mov	r0, r3
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr
 8011088:	2400a3f8 	.word	0x2400a3f8

0801108c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801108c:	b480      	push	{r7}
 801108e:	b085      	sub	sp, #20
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3b01      	subs	r3, #1
 8011098:	607b      	str	r3, [r7, #4]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d825      	bhi.n	80110ec <dec_lock+0x60>
		n = Files[i].ctr;
 80110a0:	4a17      	ldr	r2, [pc, #92]	; (8011100 <dec_lock+0x74>)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	011b      	lsls	r3, r3, #4
 80110a6:	4413      	add	r3, r2
 80110a8:	330c      	adds	r3, #12
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80110ae:	89fb      	ldrh	r3, [r7, #14]
 80110b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110b4:	d101      	bne.n	80110ba <dec_lock+0x2e>
 80110b6:	2300      	movs	r3, #0
 80110b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80110ba:	89fb      	ldrh	r3, [r7, #14]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <dec_lock+0x3a>
 80110c0:	89fb      	ldrh	r3, [r7, #14]
 80110c2:	3b01      	subs	r3, #1
 80110c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80110c6:	4a0e      	ldr	r2, [pc, #56]	; (8011100 <dec_lock+0x74>)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	011b      	lsls	r3, r3, #4
 80110cc:	4413      	add	r3, r2
 80110ce:	330c      	adds	r3, #12
 80110d0:	89fa      	ldrh	r2, [r7, #14]
 80110d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80110d4:	89fb      	ldrh	r3, [r7, #14]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d105      	bne.n	80110e6 <dec_lock+0x5a>
 80110da:	4a09      	ldr	r2, [pc, #36]	; (8011100 <dec_lock+0x74>)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	011b      	lsls	r3, r3, #4
 80110e0:	4413      	add	r3, r2
 80110e2:	2200      	movs	r2, #0
 80110e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80110e6:	2300      	movs	r3, #0
 80110e8:	737b      	strb	r3, [r7, #13]
 80110ea:	e001      	b.n	80110f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80110ec:	2302      	movs	r3, #2
 80110ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80110f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3714      	adds	r7, #20
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	2400a3f8 	.word	0x2400a3f8

08011104 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801110c:	2300      	movs	r3, #0
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	e010      	b.n	8011134 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011112:	4a0d      	ldr	r2, [pc, #52]	; (8011148 <clear_lock+0x44>)
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	011b      	lsls	r3, r3, #4
 8011118:	4413      	add	r3, r2
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	429a      	cmp	r2, r3
 8011120:	d105      	bne.n	801112e <clear_lock+0x2a>
 8011122:	4a09      	ldr	r2, [pc, #36]	; (8011148 <clear_lock+0x44>)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	4413      	add	r3, r2
 801112a:	2200      	movs	r2, #0
 801112c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	3301      	adds	r3, #1
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2b01      	cmp	r3, #1
 8011138:	d9eb      	bls.n	8011112 <clear_lock+0xe>
	}
}
 801113a:	bf00      	nop
 801113c:	bf00      	nop
 801113e:	3714      	adds	r7, #20
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr
 8011148:	2400a3f8 	.word	0x2400a3f8

0801114c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	78db      	ldrb	r3, [r3, #3]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d034      	beq.n	80111ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011164:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	7858      	ldrb	r0, [r3, #1]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011170:	2301      	movs	r3, #1
 8011172:	697a      	ldr	r2, [r7, #20]
 8011174:	f7ff fd40 	bl	8010bf8 <disk_write>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d002      	beq.n	8011184 <sync_window+0x38>
			res = FR_DISK_ERR;
 801117e:	2301      	movs	r3, #1
 8011180:	73fb      	strb	r3, [r7, #15]
 8011182:	e022      	b.n	80111ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801118e:	697a      	ldr	r2, [r7, #20]
 8011190:	1ad2      	subs	r2, r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	69db      	ldr	r3, [r3, #28]
 8011196:	429a      	cmp	r2, r3
 8011198:	d217      	bcs.n	80111ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	789b      	ldrb	r3, [r3, #2]
 801119e:	613b      	str	r3, [r7, #16]
 80111a0:	e010      	b.n	80111c4 <sync_window+0x78>
					wsect += fs->fsize;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	69db      	ldr	r3, [r3, #28]
 80111a6:	697a      	ldr	r2, [r7, #20]
 80111a8:	4413      	add	r3, r2
 80111aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	7858      	ldrb	r0, [r3, #1]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80111b6:	2301      	movs	r3, #1
 80111b8:	697a      	ldr	r2, [r7, #20]
 80111ba:	f7ff fd1d 	bl	8010bf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	3b01      	subs	r3, #1
 80111c2:	613b      	str	r3, [r7, #16]
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d8eb      	bhi.n	80111a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80111ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3718      	adds	r7, #24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80111de:	2300      	movs	r3, #0
 80111e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d01b      	beq.n	8011224 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7ff ffad 	bl	801114c <sync_window>
 80111f2:	4603      	mov	r3, r0
 80111f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80111f6:	7bfb      	ldrb	r3, [r7, #15]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d113      	bne.n	8011224 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	7858      	ldrb	r0, [r3, #1]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011206:	2301      	movs	r3, #1
 8011208:	683a      	ldr	r2, [r7, #0]
 801120a:	f7ff fcd5 	bl	8010bb8 <disk_read>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	d004      	beq.n	801121e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011214:	f04f 33ff 	mov.w	r3, #4294967295
 8011218:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801121a:	2301      	movs	r3, #1
 801121c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	683a      	ldr	r2, [r7, #0]
 8011222:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011224:	7bfb      	ldrb	r3, [r7, #15]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3710      	adds	r7, #16
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
	...

08011230 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f7ff ff87 	bl	801114c <sync_window>
 801123e:	4603      	mov	r3, r0
 8011240:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011242:	7bfb      	ldrb	r3, [r7, #15]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d158      	bne.n	80112fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2b03      	cmp	r3, #3
 801124e:	d148      	bne.n	80112e2 <sync_fs+0xb2>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	791b      	ldrb	r3, [r3, #4]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d144      	bne.n	80112e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3334      	adds	r3, #52	; 0x34
 801125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011260:	2100      	movs	r1, #0
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff fda9 	bl	8010dba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	3334      	adds	r3, #52	; 0x34
 801126c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011270:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011274:	4618      	mov	r0, r3
 8011276:	f7ff fd38 	bl	8010cea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	3334      	adds	r3, #52	; 0x34
 801127e:	4921      	ldr	r1, [pc, #132]	; (8011304 <sync_fs+0xd4>)
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fd4d 	bl	8010d20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	3334      	adds	r3, #52	; 0x34
 801128a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801128e:	491e      	ldr	r1, [pc, #120]	; (8011308 <sync_fs+0xd8>)
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff fd45 	bl	8010d20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	3334      	adds	r3, #52	; 0x34
 801129a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	4619      	mov	r1, r3
 80112a4:	4610      	mov	r0, r2
 80112a6:	f7ff fd3b 	bl	8010d20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3334      	adds	r3, #52	; 0x34
 80112ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	4619      	mov	r1, r3
 80112b8:	4610      	mov	r0, r2
 80112ba:	f7ff fd31 	bl	8010d20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6a1b      	ldr	r3, [r3, #32]
 80112c2:	1c5a      	adds	r2, r3, #1
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	7858      	ldrb	r0, [r3, #1]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80112d6:	2301      	movs	r3, #1
 80112d8:	f7ff fc8e 	bl	8010bf8 <disk_write>
			fs->fsi_flag = 0;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2200      	movs	r2, #0
 80112e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	785b      	ldrb	r3, [r3, #1]
 80112e6:	2200      	movs	r2, #0
 80112e8:	2100      	movs	r1, #0
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7ff fca4 	bl	8010c38 <disk_ioctl>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d001      	beq.n	80112fa <sync_fs+0xca>
 80112f6:	2301      	movs	r3, #1
 80112f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80112fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	41615252 	.word	0x41615252
 8011308:	61417272 	.word	0x61417272

0801130c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	3b02      	subs	r3, #2
 801131a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	699b      	ldr	r3, [r3, #24]
 8011320:	3b02      	subs	r3, #2
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	429a      	cmp	r2, r3
 8011326:	d301      	bcc.n	801132c <clust2sect+0x20>
 8011328:	2300      	movs	r3, #0
 801132a:	e008      	b.n	801133e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	895b      	ldrh	r3, [r3, #10]
 8011330:	461a      	mov	r2, r3
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	fb03 f202 	mul.w	r2, r3, r2
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	4413      	add	r3, r2
}
 801133e:	4618      	mov	r0, r3
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801134a:	b580      	push	{r7, lr}
 801134c:	b086      	sub	sp, #24
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
 8011352:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2b01      	cmp	r3, #1
 801135e:	d904      	bls.n	801136a <get_fat+0x20>
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	699b      	ldr	r3, [r3, #24]
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d302      	bcc.n	8011370 <get_fat+0x26>
		val = 1;	/* Internal error */
 801136a:	2301      	movs	r3, #1
 801136c:	617b      	str	r3, [r7, #20]
 801136e:	e08f      	b.n	8011490 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011370:	f04f 33ff 	mov.w	r3, #4294967295
 8011374:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	2b03      	cmp	r3, #3
 801137c:	d062      	beq.n	8011444 <get_fat+0xfa>
 801137e:	2b03      	cmp	r3, #3
 8011380:	dc7c      	bgt.n	801147c <get_fat+0x132>
 8011382:	2b01      	cmp	r3, #1
 8011384:	d002      	beq.n	801138c <get_fat+0x42>
 8011386:	2b02      	cmp	r3, #2
 8011388:	d042      	beq.n	8011410 <get_fat+0xc6>
 801138a:	e077      	b.n	801147c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	60fb      	str	r3, [r7, #12]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	085b      	lsrs	r3, r3, #1
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	4413      	add	r3, r2
 8011398:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	0a5b      	lsrs	r3, r3, #9
 80113a2:	4413      	add	r3, r2
 80113a4:	4619      	mov	r1, r3
 80113a6:	6938      	ldr	r0, [r7, #16]
 80113a8:	f7ff ff14 	bl	80111d4 <move_window>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d167      	bne.n	8011482 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	1c5a      	adds	r2, r3, #1
 80113b6:	60fa      	str	r2, [r7, #12]
 80113b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113bc:	693a      	ldr	r2, [r7, #16]
 80113be:	4413      	add	r3, r2
 80113c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80113c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	0a5b      	lsrs	r3, r3, #9
 80113ce:	4413      	add	r3, r2
 80113d0:	4619      	mov	r1, r3
 80113d2:	6938      	ldr	r0, [r7, #16]
 80113d4:	f7ff fefe 	bl	80111d4 <move_window>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d153      	bne.n	8011486 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113e4:	693a      	ldr	r2, [r7, #16]
 80113e6:	4413      	add	r3, r2
 80113e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80113ec:	021b      	lsls	r3, r3, #8
 80113ee:	461a      	mov	r2, r3
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	4313      	orrs	r3, r2
 80113f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d002      	beq.n	8011406 <get_fat+0xbc>
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	091b      	lsrs	r3, r3, #4
 8011404:	e002      	b.n	801140c <get_fat+0xc2>
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801140c:	617b      	str	r3, [r7, #20]
			break;
 801140e:	e03f      	b.n	8011490 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	0a1b      	lsrs	r3, r3, #8
 8011418:	4413      	add	r3, r2
 801141a:	4619      	mov	r1, r3
 801141c:	6938      	ldr	r0, [r7, #16]
 801141e:	f7ff fed9 	bl	80111d4 <move_window>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d130      	bne.n	801148a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	005b      	lsls	r3, r3, #1
 8011432:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011436:	4413      	add	r3, r2
 8011438:	4618      	mov	r0, r3
 801143a:	f7ff fc1b 	bl	8010c74 <ld_word>
 801143e:	4603      	mov	r3, r0
 8011440:	617b      	str	r3, [r7, #20]
			break;
 8011442:	e025      	b.n	8011490 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	09db      	lsrs	r3, r3, #7
 801144c:	4413      	add	r3, r2
 801144e:	4619      	mov	r1, r3
 8011450:	6938      	ldr	r0, [r7, #16]
 8011452:	f7ff febf 	bl	80111d4 <move_window>
 8011456:	4603      	mov	r3, r0
 8011458:	2b00      	cmp	r3, #0
 801145a:	d118      	bne.n	801148e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801146a:	4413      	add	r3, r2
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff fc19 	bl	8010ca4 <ld_dword>
 8011472:	4603      	mov	r3, r0
 8011474:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011478:	617b      	str	r3, [r7, #20]
			break;
 801147a:	e009      	b.n	8011490 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801147c:	2301      	movs	r3, #1
 801147e:	617b      	str	r3, [r7, #20]
 8011480:	e006      	b.n	8011490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011482:	bf00      	nop
 8011484:	e004      	b.n	8011490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011486:	bf00      	nop
 8011488:	e002      	b.n	8011490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801148a:	bf00      	nop
 801148c:	e000      	b.n	8011490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801148e:	bf00      	nop
		}
	}

	return val;
 8011490:	697b      	ldr	r3, [r7, #20]
}
 8011492:	4618      	mov	r0, r3
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}

0801149a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801149a:	b590      	push	{r4, r7, lr}
 801149c:	b089      	sub	sp, #36	; 0x24
 801149e:	af00      	add	r7, sp, #0
 80114a0:	60f8      	str	r0, [r7, #12]
 80114a2:	60b9      	str	r1, [r7, #8]
 80114a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80114a6:	2302      	movs	r3, #2
 80114a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	f240 80d2 	bls.w	8011656 <put_fat+0x1bc>
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	699b      	ldr	r3, [r3, #24]
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	f080 80cc 	bcs.w	8011656 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	2b03      	cmp	r3, #3
 80114c4:	f000 8096 	beq.w	80115f4 <put_fat+0x15a>
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	f300 80cd 	bgt.w	8011668 <put_fat+0x1ce>
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d002      	beq.n	80114d8 <put_fat+0x3e>
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	d06e      	beq.n	80115b4 <put_fat+0x11a>
 80114d6:	e0c7      	b.n	8011668 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	61bb      	str	r3, [r7, #24]
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	085b      	lsrs	r3, r3, #1
 80114e0:	69ba      	ldr	r2, [r7, #24]
 80114e2:	4413      	add	r3, r2
 80114e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	0a5b      	lsrs	r3, r3, #9
 80114ee:	4413      	add	r3, r2
 80114f0:	4619      	mov	r1, r3
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f7ff fe6e 	bl	80111d4 <move_window>
 80114f8:	4603      	mov	r3, r0
 80114fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114fc:	7ffb      	ldrb	r3, [r7, #31]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f040 80ab 	bne.w	801165a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	1c59      	adds	r1, r3, #1
 801150e:	61b9      	str	r1, [r7, #24]
 8011510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011514:	4413      	add	r3, r2
 8011516:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	f003 0301 	and.w	r3, r3, #1
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00d      	beq.n	801153e <put_fat+0xa4>
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	b25b      	sxtb	r3, r3
 8011528:	f003 030f 	and.w	r3, r3, #15
 801152c:	b25a      	sxtb	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	b2db      	uxtb	r3, r3
 8011532:	011b      	lsls	r3, r3, #4
 8011534:	b25b      	sxtb	r3, r3
 8011536:	4313      	orrs	r3, r2
 8011538:	b25b      	sxtb	r3, r3
 801153a:	b2db      	uxtb	r3, r3
 801153c:	e001      	b.n	8011542 <put_fat+0xa8>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	b2db      	uxtb	r3, r3
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2201      	movs	r2, #1
 801154a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	0a5b      	lsrs	r3, r3, #9
 8011554:	4413      	add	r3, r2
 8011556:	4619      	mov	r1, r3
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7ff fe3b 	bl	80111d4 <move_window>
 801155e:	4603      	mov	r3, r0
 8011560:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011562:	7ffb      	ldrb	r3, [r7, #31]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d17a      	bne.n	801165e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011574:	4413      	add	r3, r2
 8011576:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	f003 0301 	and.w	r3, r3, #1
 801157e:	2b00      	cmp	r3, #0
 8011580:	d003      	beq.n	801158a <put_fat+0xf0>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	091b      	lsrs	r3, r3, #4
 8011586:	b2db      	uxtb	r3, r3
 8011588:	e00e      	b.n	80115a8 <put_fat+0x10e>
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	b25b      	sxtb	r3, r3
 8011590:	f023 030f 	bic.w	r3, r3, #15
 8011594:	b25a      	sxtb	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	0a1b      	lsrs	r3, r3, #8
 801159a:	b25b      	sxtb	r3, r3
 801159c:	f003 030f 	and.w	r3, r3, #15
 80115a0:	b25b      	sxtb	r3, r3
 80115a2:	4313      	orrs	r3, r2
 80115a4:	b25b      	sxtb	r3, r3
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	697a      	ldr	r2, [r7, #20]
 80115aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2201      	movs	r2, #1
 80115b0:	70da      	strb	r2, [r3, #3]
			break;
 80115b2:	e059      	b.n	8011668 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	0a1b      	lsrs	r3, r3, #8
 80115bc:	4413      	add	r3, r2
 80115be:	4619      	mov	r1, r3
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f7ff fe07 	bl	80111d4 <move_window>
 80115c6:	4603      	mov	r3, r0
 80115c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80115ca:	7ffb      	ldrb	r3, [r7, #31]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d148      	bne.n	8011662 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80115de:	4413      	add	r3, r2
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	b292      	uxth	r2, r2
 80115e4:	4611      	mov	r1, r2
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fb7f 	bl	8010cea <st_word>
			fs->wflag = 1;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2201      	movs	r2, #1
 80115f0:	70da      	strb	r2, [r3, #3]
			break;
 80115f2:	e039      	b.n	8011668 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	09db      	lsrs	r3, r3, #7
 80115fc:	4413      	add	r3, r2
 80115fe:	4619      	mov	r1, r3
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f7ff fde7 	bl	80111d4 <move_window>
 8011606:	4603      	mov	r3, r0
 8011608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801160a:	7ffb      	ldrb	r3, [r7, #31]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d12a      	bne.n	8011666 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011624:	4413      	add	r3, r2
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff fb3c 	bl	8010ca4 <ld_dword>
 801162c:	4603      	mov	r3, r0
 801162e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011632:	4323      	orrs	r3, r4
 8011634:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011644:	4413      	add	r3, r2
 8011646:	6879      	ldr	r1, [r7, #4]
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff fb69 	bl	8010d20 <st_dword>
			fs->wflag = 1;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2201      	movs	r2, #1
 8011652:	70da      	strb	r2, [r3, #3]
			break;
 8011654:	e008      	b.n	8011668 <put_fat+0x1ce>
		}
	}
 8011656:	bf00      	nop
 8011658:	e006      	b.n	8011668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801165a:	bf00      	nop
 801165c:	e004      	b.n	8011668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801165e:	bf00      	nop
 8011660:	e002      	b.n	8011668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011662:	bf00      	nop
 8011664:	e000      	b.n	8011668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011666:	bf00      	nop
	return res;
 8011668:	7ffb      	ldrb	r3, [r7, #31]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3724      	adds	r7, #36	; 0x24
 801166e:	46bd      	mov	sp, r7
 8011670:	bd90      	pop	{r4, r7, pc}

08011672 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b088      	sub	sp, #32
 8011676:	af00      	add	r7, sp, #0
 8011678:	60f8      	str	r0, [r7, #12]
 801167a:	60b9      	str	r1, [r7, #8]
 801167c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d904      	bls.n	8011698 <remove_chain+0x26>
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	699b      	ldr	r3, [r3, #24]
 8011692:	68ba      	ldr	r2, [r7, #8]
 8011694:	429a      	cmp	r2, r3
 8011696:	d301      	bcc.n	801169c <remove_chain+0x2a>
 8011698:	2302      	movs	r3, #2
 801169a:	e04b      	b.n	8011734 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00c      	beq.n	80116bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80116a2:	f04f 32ff 	mov.w	r2, #4294967295
 80116a6:	6879      	ldr	r1, [r7, #4]
 80116a8:	69b8      	ldr	r0, [r7, #24]
 80116aa:	f7ff fef6 	bl	801149a <put_fat>
 80116ae:	4603      	mov	r3, r0
 80116b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80116b2:	7ffb      	ldrb	r3, [r7, #31]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d001      	beq.n	80116bc <remove_chain+0x4a>
 80116b8:	7ffb      	ldrb	r3, [r7, #31]
 80116ba:	e03b      	b.n	8011734 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80116bc:	68b9      	ldr	r1, [r7, #8]
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f7ff fe43 	bl	801134a <get_fat>
 80116c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d031      	beq.n	8011730 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d101      	bne.n	80116d6 <remove_chain+0x64>
 80116d2:	2302      	movs	r3, #2
 80116d4:	e02e      	b.n	8011734 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116dc:	d101      	bne.n	80116e2 <remove_chain+0x70>
 80116de:	2301      	movs	r3, #1
 80116e0:	e028      	b.n	8011734 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80116e2:	2200      	movs	r2, #0
 80116e4:	68b9      	ldr	r1, [r7, #8]
 80116e6:	69b8      	ldr	r0, [r7, #24]
 80116e8:	f7ff fed7 	bl	801149a <put_fat>
 80116ec:	4603      	mov	r3, r0
 80116ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80116f0:	7ffb      	ldrb	r3, [r7, #31]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d001      	beq.n	80116fa <remove_chain+0x88>
 80116f6:	7ffb      	ldrb	r3, [r7, #31]
 80116f8:	e01c      	b.n	8011734 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	695a      	ldr	r2, [r3, #20]
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	699b      	ldr	r3, [r3, #24]
 8011702:	3b02      	subs	r3, #2
 8011704:	429a      	cmp	r2, r3
 8011706:	d20b      	bcs.n	8011720 <remove_chain+0xae>
			fs->free_clst++;
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	695b      	ldr	r3, [r3, #20]
 801170c:	1c5a      	adds	r2, r3, #1
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	791b      	ldrb	r3, [r3, #4]
 8011716:	f043 0301 	orr.w	r3, r3, #1
 801171a:	b2da      	uxtb	r2, r3
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	699b      	ldr	r3, [r3, #24]
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	429a      	cmp	r2, r3
 801172c:	d3c6      	bcc.n	80116bc <remove_chain+0x4a>
 801172e:	e000      	b.n	8011732 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011730:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3720      	adds	r7, #32
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b088      	sub	sp, #32
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10d      	bne.n	801176e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d004      	beq.n	8011768 <create_chain+0x2c>
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	699b      	ldr	r3, [r3, #24]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	429a      	cmp	r2, r3
 8011766:	d31b      	bcc.n	80117a0 <create_chain+0x64>
 8011768:	2301      	movs	r3, #1
 801176a:	61bb      	str	r3, [r7, #24]
 801176c:	e018      	b.n	80117a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7ff fdea 	bl	801134a <get_fat>
 8011776:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2b01      	cmp	r3, #1
 801177c:	d801      	bhi.n	8011782 <create_chain+0x46>
 801177e:	2301      	movs	r3, #1
 8011780:	e070      	b.n	8011864 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011788:	d101      	bne.n	801178e <create_chain+0x52>
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	e06a      	b.n	8011864 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	699b      	ldr	r3, [r3, #24]
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	429a      	cmp	r2, r3
 8011796:	d201      	bcs.n	801179c <create_chain+0x60>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	e063      	b.n	8011864 <create_chain+0x128>
		scl = clst;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	3301      	adds	r3, #1
 80117a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	699b      	ldr	r3, [r3, #24]
 80117ae:	69fa      	ldr	r2, [r7, #28]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d307      	bcc.n	80117c4 <create_chain+0x88>
				ncl = 2;
 80117b4:	2302      	movs	r3, #2
 80117b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80117b8:	69fa      	ldr	r2, [r7, #28]
 80117ba:	69bb      	ldr	r3, [r7, #24]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d901      	bls.n	80117c4 <create_chain+0x88>
 80117c0:	2300      	movs	r3, #0
 80117c2:	e04f      	b.n	8011864 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80117c4:	69f9      	ldr	r1, [r7, #28]
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7ff fdbf 	bl	801134a <get_fat>
 80117cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00e      	beq.n	80117f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d003      	beq.n	80117e2 <create_chain+0xa6>
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e0:	d101      	bne.n	80117e6 <create_chain+0xaa>
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	e03e      	b.n	8011864 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80117e6:	69fa      	ldr	r2, [r7, #28]
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d1da      	bne.n	80117a4 <create_chain+0x68>
 80117ee:	2300      	movs	r3, #0
 80117f0:	e038      	b.n	8011864 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80117f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80117f4:	f04f 32ff 	mov.w	r2, #4294967295
 80117f8:	69f9      	ldr	r1, [r7, #28]
 80117fa:	6938      	ldr	r0, [r7, #16]
 80117fc:	f7ff fe4d 	bl	801149a <put_fat>
 8011800:	4603      	mov	r3, r0
 8011802:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011804:	7dfb      	ldrb	r3, [r7, #23]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d109      	bne.n	801181e <create_chain+0xe2>
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d006      	beq.n	801181e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011810:	69fa      	ldr	r2, [r7, #28]
 8011812:	6839      	ldr	r1, [r7, #0]
 8011814:	6938      	ldr	r0, [r7, #16]
 8011816:	f7ff fe40 	bl	801149a <put_fat>
 801181a:	4603      	mov	r3, r0
 801181c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801181e:	7dfb      	ldrb	r3, [r7, #23]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d116      	bne.n	8011852 <create_chain+0x116>
		fs->last_clst = ncl;
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	69fa      	ldr	r2, [r7, #28]
 8011828:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	695a      	ldr	r2, [r3, #20]
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	699b      	ldr	r3, [r3, #24]
 8011832:	3b02      	subs	r3, #2
 8011834:	429a      	cmp	r2, r3
 8011836:	d804      	bhi.n	8011842 <create_chain+0x106>
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	1e5a      	subs	r2, r3, #1
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	791b      	ldrb	r3, [r3, #4]
 8011846:	f043 0301 	orr.w	r3, r3, #1
 801184a:	b2da      	uxtb	r2, r3
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	711a      	strb	r2, [r3, #4]
 8011850:	e007      	b.n	8011862 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d102      	bne.n	801185e <create_chain+0x122>
 8011858:	f04f 33ff 	mov.w	r3, #4294967295
 801185c:	e000      	b.n	8011860 <create_chain+0x124>
 801185e:	2301      	movs	r3, #1
 8011860:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011862:	69fb      	ldr	r3, [r7, #28]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3720      	adds	r7, #32
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801186c:	b480      	push	{r7}
 801186e:	b087      	sub	sp, #28
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011880:	3304      	adds	r3, #4
 8011882:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	0a5b      	lsrs	r3, r3, #9
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	8952      	ldrh	r2, [r2, #10]
 801188c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011890:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	1d1a      	adds	r2, r3, #4
 8011896:	613a      	str	r2, [r7, #16]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d101      	bne.n	80118a6 <clmt_clust+0x3a>
 80118a2:	2300      	movs	r3, #0
 80118a4:	e010      	b.n	80118c8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80118a6:	697a      	ldr	r2, [r7, #20]
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d307      	bcc.n	80118be <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80118ae:	697a      	ldr	r2, [r7, #20]
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	1ad3      	subs	r3, r2, r3
 80118b4:	617b      	str	r3, [r7, #20]
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	3304      	adds	r3, #4
 80118ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118bc:	e7e9      	b.n	8011892 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80118be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	4413      	add	r3, r2
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	371c      	adds	r7, #28
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr

080118d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80118ea:	d204      	bcs.n	80118f6 <dir_sdi+0x22>
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	f003 031f 	and.w	r3, r3, #31
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <dir_sdi+0x26>
		return FR_INT_ERR;
 80118f6:	2302      	movs	r3, #2
 80118f8:	e063      	b.n	80119c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	683a      	ldr	r2, [r7, #0]
 80118fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	689b      	ldr	r3, [r3, #8]
 8011904:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d106      	bne.n	801191a <dir_sdi+0x46>
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	2b02      	cmp	r3, #2
 8011912:	d902      	bls.n	801191a <dir_sdi+0x46>
		clst = fs->dirbase;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011918:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10c      	bne.n	801193a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	095b      	lsrs	r3, r3, #5
 8011924:	693a      	ldr	r2, [r7, #16]
 8011926:	8912      	ldrh	r2, [r2, #8]
 8011928:	4293      	cmp	r3, r2
 801192a:	d301      	bcc.n	8011930 <dir_sdi+0x5c>
 801192c:	2302      	movs	r3, #2
 801192e:	e048      	b.n	80119c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	61da      	str	r2, [r3, #28]
 8011938:	e029      	b.n	801198e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	895b      	ldrh	r3, [r3, #10]
 801193e:	025b      	lsls	r3, r3, #9
 8011940:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011942:	e019      	b.n	8011978 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6979      	ldr	r1, [r7, #20]
 8011948:	4618      	mov	r0, r3
 801194a:	f7ff fcfe 	bl	801134a <get_fat>
 801194e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011956:	d101      	bne.n	801195c <dir_sdi+0x88>
 8011958:	2301      	movs	r3, #1
 801195a:	e032      	b.n	80119c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d904      	bls.n	801196c <dir_sdi+0x98>
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	699b      	ldr	r3, [r3, #24]
 8011966:	697a      	ldr	r2, [r7, #20]
 8011968:	429a      	cmp	r2, r3
 801196a:	d301      	bcc.n	8011970 <dir_sdi+0x9c>
 801196c:	2302      	movs	r3, #2
 801196e:	e028      	b.n	80119c2 <dir_sdi+0xee>
			ofs -= csz;
 8011970:	683a      	ldr	r2, [r7, #0]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	1ad3      	subs	r3, r2, r3
 8011976:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011978:	683a      	ldr	r2, [r7, #0]
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	429a      	cmp	r2, r3
 801197e:	d2e1      	bcs.n	8011944 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011980:	6979      	ldr	r1, [r7, #20]
 8011982:	6938      	ldr	r0, [r7, #16]
 8011984:	f7ff fcc2 	bl	801130c <clust2sect>
 8011988:	4602      	mov	r2, r0
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	697a      	ldr	r2, [r7, #20]
 8011992:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	69db      	ldr	r3, [r3, #28]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d101      	bne.n	80119a0 <dir_sdi+0xcc>
 801199c:	2302      	movs	r3, #2
 801199e:	e010      	b.n	80119c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	69da      	ldr	r2, [r3, #28]
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	0a5b      	lsrs	r3, r3, #9
 80119a8:	441a      	add	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119ba:	441a      	add	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3718      	adds	r7, #24
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b086      	sub	sp, #24
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
 80119d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	695b      	ldr	r3, [r3, #20]
 80119de:	3320      	adds	r3, #32
 80119e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	69db      	ldr	r3, [r3, #28]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d003      	beq.n	80119f2 <dir_next+0x28>
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80119f0:	d301      	bcc.n	80119f6 <dir_next+0x2c>
 80119f2:	2304      	movs	r3, #4
 80119f4:	e0aa      	b.n	8011b4c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f040 8098 	bne.w	8011b32 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	69db      	ldr	r3, [r3, #28]
 8011a06:	1c5a      	adds	r2, r3, #1
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d10b      	bne.n	8011a2c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	095b      	lsrs	r3, r3, #5
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	8912      	ldrh	r2, [r2, #8]
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	f0c0 8088 	bcc.w	8011b32 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2200      	movs	r2, #0
 8011a26:	61da      	str	r2, [r3, #28]
 8011a28:	2304      	movs	r3, #4
 8011a2a:	e08f      	b.n	8011b4c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	0a5b      	lsrs	r3, r3, #9
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	8952      	ldrh	r2, [r2, #10]
 8011a34:	3a01      	subs	r2, #1
 8011a36:	4013      	ands	r3, r2
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d17a      	bne.n	8011b32 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	4619      	mov	r1, r3
 8011a44:	4610      	mov	r0, r2
 8011a46:	f7ff fc80 	bl	801134a <get_fat>
 8011a4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d801      	bhi.n	8011a56 <dir_next+0x8c>
 8011a52:	2302      	movs	r3, #2
 8011a54:	e07a      	b.n	8011b4c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5c:	d101      	bne.n	8011a62 <dir_next+0x98>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e074      	b.n	8011b4c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	699b      	ldr	r3, [r3, #24]
 8011a66:	697a      	ldr	r2, [r7, #20]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d358      	bcc.n	8011b1e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d104      	bne.n	8011a7c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	61da      	str	r2, [r3, #28]
 8011a78:	2304      	movs	r3, #4
 8011a7a:	e067      	b.n	8011b4c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	699b      	ldr	r3, [r3, #24]
 8011a82:	4619      	mov	r1, r3
 8011a84:	4610      	mov	r0, r2
 8011a86:	f7ff fe59 	bl	801173c <create_chain>
 8011a8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d101      	bne.n	8011a96 <dir_next+0xcc>
 8011a92:	2307      	movs	r3, #7
 8011a94:	e05a      	b.n	8011b4c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d101      	bne.n	8011aa0 <dir_next+0xd6>
 8011a9c:	2302      	movs	r3, #2
 8011a9e:	e055      	b.n	8011b4c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa6:	d101      	bne.n	8011aac <dir_next+0xe2>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e04f      	b.n	8011b4c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f7ff fb4d 	bl	801114c <sync_window>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d001      	beq.n	8011abc <dir_next+0xf2>
 8011ab8:	2301      	movs	r3, #1
 8011aba:	e047      	b.n	8011b4c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	3334      	adds	r3, #52	; 0x34
 8011ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff f977 	bl	8010dba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011acc:	2300      	movs	r3, #0
 8011ace:	613b      	str	r3, [r7, #16]
 8011ad0:	6979      	ldr	r1, [r7, #20]
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f7ff fc1a 	bl	801130c <clust2sect>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	631a      	str	r2, [r3, #48]	; 0x30
 8011ade:	e012      	b.n	8011b06 <dir_next+0x13c>
						fs->wflag = 1;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7ff fb30 	bl	801114c <sync_window>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d001      	beq.n	8011af6 <dir_next+0x12c>
 8011af2:	2301      	movs	r3, #1
 8011af4:	e02a      	b.n	8011b4c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	3301      	adds	r3, #1
 8011afa:	613b      	str	r3, [r7, #16]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	631a      	str	r2, [r3, #48]	; 0x30
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	895b      	ldrh	r3, [r3, #10]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d3e6      	bcc.n	8011ae0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	1ad2      	subs	r2, r2, r3
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	697a      	ldr	r2, [r7, #20]
 8011b22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011b24:	6979      	ldr	r1, [r7, #20]
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f7ff fbf0 	bl	801130c <clust2sect>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b44:	441a      	add	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3718      	adds	r7, #24
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011b64:	2100      	movs	r1, #0
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7ff feb4 	bl	80118d4 <dir_sdi>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b70:	7dfb      	ldrb	r3, [r7, #23]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d12b      	bne.n	8011bce <dir_alloc+0x7a>
		n = 0;
 8011b76:	2300      	movs	r3, #0
 8011b78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	69db      	ldr	r3, [r3, #28]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f7ff fb27 	bl	80111d4 <move_window>
 8011b86:	4603      	mov	r3, r0
 8011b88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b8a:	7dfb      	ldrb	r3, [r7, #23]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d11d      	bne.n	8011bcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6a1b      	ldr	r3, [r3, #32]
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	2be5      	cmp	r3, #229	; 0xe5
 8011b98:	d004      	beq.n	8011ba4 <dir_alloc+0x50>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a1b      	ldr	r3, [r3, #32]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d107      	bne.n	8011bb4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	613b      	str	r3, [r7, #16]
 8011baa:	693a      	ldr	r2, [r7, #16]
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d102      	bne.n	8011bb8 <dir_alloc+0x64>
 8011bb2:	e00c      	b.n	8011bce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011bb8:	2101      	movs	r1, #1
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7ff ff05 	bl	80119ca <dir_next>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011bc4:	7dfb      	ldrb	r3, [r7, #23]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d0d7      	beq.n	8011b7a <dir_alloc+0x26>
 8011bca:	e000      	b.n	8011bce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011bcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011bce:	7dfb      	ldrb	r3, [r7, #23]
 8011bd0:	2b04      	cmp	r3, #4
 8011bd2:	d101      	bne.n	8011bd8 <dir_alloc+0x84>
 8011bd4:	2307      	movs	r3, #7
 8011bd6:	75fb      	strb	r3, [r7, #23]
	return res;
 8011bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3718      	adds	r7, #24
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	331a      	adds	r3, #26
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7ff f83f 	bl	8010c74 <ld_word>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	2b03      	cmp	r3, #3
 8011c00:	d109      	bne.n	8011c16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	3314      	adds	r3, #20
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7ff f834 	bl	8010c74 <ld_word>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	041b      	lsls	r3, r3, #16
 8011c10:	68fa      	ldr	r2, [r7, #12]
 8011c12:	4313      	orrs	r3, r2
 8011c14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011c16:	68fb      	ldr	r3, [r7, #12]
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	331a      	adds	r3, #26
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	b292      	uxth	r2, r2
 8011c34:	4611      	mov	r1, r2
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7ff f857 	bl	8010cea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d109      	bne.n	8011c58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	f103 0214 	add.w	r2, r3, #20
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	0c1b      	lsrs	r3, r3, #16
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	4619      	mov	r1, r3
 8011c52:	4610      	mov	r0, r2
 8011c54:	f7ff f849 	bl	8010cea <st_word>
	}
}
 8011c58:	bf00      	nop
 8011c5a:	3710      	adds	r7, #16
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011c60:	b590      	push	{r4, r7, lr}
 8011c62:	b087      	sub	sp, #28
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	331a      	adds	r3, #26
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7ff f800 	bl	8010c74 <ld_word>
 8011c74:	4603      	mov	r3, r0
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d001      	beq.n	8011c7e <cmp_lfn+0x1e>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	e059      	b.n	8011d32 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c86:	1e5a      	subs	r2, r3, #1
 8011c88:	4613      	mov	r3, r2
 8011c8a:	005b      	lsls	r3, r3, #1
 8011c8c:	4413      	add	r3, r2
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011c94:	2301      	movs	r3, #1
 8011c96:	81fb      	strh	r3, [r7, #14]
 8011c98:	2300      	movs	r3, #0
 8011c9a:	613b      	str	r3, [r7, #16]
 8011c9c:	e033      	b.n	8011d06 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011c9e:	4a27      	ldr	r2, [pc, #156]	; (8011d3c <cmp_lfn+0xdc>)
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	4413      	add	r3, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe ffe1 	bl	8010c74 <ld_word>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011cb6:	89fb      	ldrh	r3, [r7, #14]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d01a      	beq.n	8011cf2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8011cc0:	d812      	bhi.n	8011ce8 <cmp_lfn+0x88>
 8011cc2:	89bb      	ldrh	r3, [r7, #12]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe fead 	bl	8010a24 <ff_wtoupper>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	461c      	mov	r4, r3
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	1c5a      	adds	r2, r3, #1
 8011cd2:	617a      	str	r2, [r7, #20]
 8011cd4:	005b      	lsls	r3, r3, #1
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	4413      	add	r3, r2
 8011cda:	881b      	ldrh	r3, [r3, #0]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fe fea1 	bl	8010a24 <ff_wtoupper>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	429c      	cmp	r4, r3
 8011ce6:	d001      	beq.n	8011cec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011ce8:	2300      	movs	r3, #0
 8011cea:	e022      	b.n	8011d32 <cmp_lfn+0xd2>
			}
			wc = uc;
 8011cec:	89bb      	ldrh	r3, [r7, #12]
 8011cee:	81fb      	strh	r3, [r7, #14]
 8011cf0:	e006      	b.n	8011d00 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011cf2:	89bb      	ldrh	r3, [r7, #12]
 8011cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d001      	beq.n	8011d00 <cmp_lfn+0xa0>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	e018      	b.n	8011d32 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	3301      	adds	r3, #1
 8011d04:	613b      	str	r3, [r7, #16]
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	2b0c      	cmp	r3, #12
 8011d0a:	d9c8      	bls.n	8011c9e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00b      	beq.n	8011d30 <cmp_lfn+0xd0>
 8011d18:	89fb      	ldrh	r3, [r7, #14]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d008      	beq.n	8011d30 <cmp_lfn+0xd0>
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	4413      	add	r3, r2
 8011d26:	881b      	ldrh	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <cmp_lfn+0xd0>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	e000      	b.n	8011d32 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011d30:	2301      	movs	r3, #1
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	371c      	adds	r7, #28
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd90      	pop	{r4, r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	080291cc 	.word	0x080291cc

08011d40 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b086      	sub	sp, #24
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	331a      	adds	r3, #26
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe ff90 	bl	8010c74 <ld_word>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <pick_lfn+0x1e>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	e04d      	b.n	8011dfa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d66:	1e5a      	subs	r2, r3, #1
 8011d68:	4613      	mov	r3, r2
 8011d6a:	005b      	lsls	r3, r3, #1
 8011d6c:	4413      	add	r3, r2
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	4413      	add	r3, r2
 8011d72:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011d74:	2301      	movs	r3, #1
 8011d76:	81fb      	strh	r3, [r7, #14]
 8011d78:	2300      	movs	r3, #0
 8011d7a:	613b      	str	r3, [r7, #16]
 8011d7c:	e028      	b.n	8011dd0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011d7e:	4a21      	ldr	r2, [pc, #132]	; (8011e04 <pick_lfn+0xc4>)
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	4413      	add	r3, r2
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	461a      	mov	r2, r3
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe ff71 	bl	8010c74 <ld_word>
 8011d92:	4603      	mov	r3, r0
 8011d94:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011d96:	89fb      	ldrh	r3, [r7, #14]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00f      	beq.n	8011dbc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	2bfe      	cmp	r3, #254	; 0xfe
 8011da0:	d901      	bls.n	8011da6 <pick_lfn+0x66>
 8011da2:	2300      	movs	r3, #0
 8011da4:	e029      	b.n	8011dfa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011da6:	89bb      	ldrh	r3, [r7, #12]
 8011da8:	81fb      	strh	r3, [r7, #14]
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	1c5a      	adds	r2, r3, #1
 8011dae:	617a      	str	r2, [r7, #20]
 8011db0:	005b      	lsls	r3, r3, #1
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	4413      	add	r3, r2
 8011db6:	89fa      	ldrh	r2, [r7, #14]
 8011db8:	801a      	strh	r2, [r3, #0]
 8011dba:	e006      	b.n	8011dca <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011dbc:	89bb      	ldrh	r3, [r7, #12]
 8011dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	d001      	beq.n	8011dca <pick_lfn+0x8a>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e017      	b.n	8011dfa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	3301      	adds	r3, #1
 8011dce:	613b      	str	r3, [r7, #16]
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	2b0c      	cmp	r3, #12
 8011dd4:	d9d3      	bls.n	8011d7e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00a      	beq.n	8011df8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2bfe      	cmp	r3, #254	; 0xfe
 8011de6:	d901      	bls.n	8011dec <pick_lfn+0xac>
 8011de8:	2300      	movs	r3, #0
 8011dea:	e006      	b.n	8011dfa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	4413      	add	r3, r2
 8011df4:	2200      	movs	r2, #0
 8011df6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011df8:	2301      	movs	r3, #1
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3718      	adds	r7, #24
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	080291cc 	.word	0x080291cc

08011e08 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b088      	sub	sp, #32
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	4611      	mov	r1, r2
 8011e14:	461a      	mov	r2, r3
 8011e16:	460b      	mov	r3, r1
 8011e18:	71fb      	strb	r3, [r7, #7]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	330d      	adds	r3, #13
 8011e22:	79ba      	ldrb	r2, [r7, #6]
 8011e24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	330b      	adds	r3, #11
 8011e2a:	220f      	movs	r2, #15
 8011e2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	330c      	adds	r3, #12
 8011e32:	2200      	movs	r2, #0
 8011e34:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	331a      	adds	r3, #26
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7fe ff54 	bl	8010cea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011e42:	79fb      	ldrb	r3, [r7, #7]
 8011e44:	1e5a      	subs	r2, r3, #1
 8011e46:	4613      	mov	r3, r2
 8011e48:	005b      	lsls	r3, r3, #1
 8011e4a:	4413      	add	r3, r2
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4413      	add	r3, r2
 8011e50:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	82fb      	strh	r3, [r7, #22]
 8011e56:	2300      	movs	r3, #0
 8011e58:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011e5a:	8afb      	ldrh	r3, [r7, #22]
 8011e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e60:	4293      	cmp	r3, r2
 8011e62:	d007      	beq.n	8011e74 <put_lfn+0x6c>
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	1c5a      	adds	r2, r3, #1
 8011e68:	61fa      	str	r2, [r7, #28]
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	4413      	add	r3, r2
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011e74:	4a17      	ldr	r2, [pc, #92]	; (8011ed4 <put_lfn+0xcc>)
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	4413      	add	r3, r2
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	4413      	add	r3, r2
 8011e82:	8afa      	ldrh	r2, [r7, #22]
 8011e84:	4611      	mov	r1, r2
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fe ff2f 	bl	8010cea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e8c:	8afb      	ldrh	r3, [r7, #22]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d102      	bne.n	8011e98 <put_lfn+0x90>
 8011e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e96:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	61bb      	str	r3, [r7, #24]
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	2b0c      	cmp	r3, #12
 8011ea2:	d9da      	bls.n	8011e5a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011ea4:	8afb      	ldrh	r3, [r7, #22]
 8011ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d006      	beq.n	8011ebc <put_lfn+0xb4>
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	005b      	lsls	r3, r3, #1
 8011eb2:	68fa      	ldr	r2, [r7, #12]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d103      	bne.n	8011ec4 <put_lfn+0xbc>
 8011ebc:	79fb      	ldrb	r3, [r7, #7]
 8011ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ec2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	79fa      	ldrb	r2, [r7, #7]
 8011ec8:	701a      	strb	r2, [r3, #0]
}
 8011eca:	bf00      	nop
 8011ecc:	3720      	adds	r7, #32
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	080291cc 	.word	0x080291cc

08011ed8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b08c      	sub	sp, #48	; 0x30
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
 8011ee4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011ee6:	220b      	movs	r2, #11
 8011ee8:	68b9      	ldr	r1, [r7, #8]
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f7fe ff44 	bl	8010d78 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	2b05      	cmp	r3, #5
 8011ef4:	d929      	bls.n	8011f4a <gen_numname+0x72>
		sr = seq;
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011efa:	e020      	b.n	8011f3e <gen_numname+0x66>
			wc = *lfn++;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	1c9a      	adds	r2, r3, #2
 8011f00:	607a      	str	r2, [r7, #4]
 8011f02:	881b      	ldrh	r3, [r3, #0]
 8011f04:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011f06:	2300      	movs	r3, #0
 8011f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f0a:	e015      	b.n	8011f38 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	005a      	lsls	r2, r3, #1
 8011f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	4413      	add	r3, r2
 8011f18:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011f1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f1c:	085b      	lsrs	r3, r3, #1
 8011f1e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d003      	beq.n	8011f32 <gen_numname+0x5a>
 8011f2a:	69fa      	ldr	r2, [r7, #28]
 8011f2c:	4b31      	ldr	r3, [pc, #196]	; (8011ff4 <gen_numname+0x11c>)
 8011f2e:	4053      	eors	r3, r2
 8011f30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f34:	3301      	adds	r3, #1
 8011f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3a:	2b0f      	cmp	r3, #15
 8011f3c:	d9e6      	bls.n	8011f0c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d1da      	bne.n	8011efc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011f4a:	2307      	movs	r3, #7
 8011f4c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	f003 030f 	and.w	r3, r3, #15
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	3330      	adds	r3, #48	; 0x30
 8011f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f62:	2b39      	cmp	r3, #57	; 0x39
 8011f64:	d904      	bls.n	8011f70 <gen_numname+0x98>
 8011f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f6a:	3307      	adds	r3, #7
 8011f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f72:	1e5a      	subs	r2, r3, #1
 8011f74:	62ba      	str	r2, [r7, #40]	; 0x28
 8011f76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011f80:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	091b      	lsrs	r3, r3, #4
 8011f88:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1de      	bne.n	8011f4e <gen_numname+0x76>
	ns[i] = '~';
 8011f90:	f107 0214 	add.w	r2, r7, #20
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	4413      	add	r3, r2
 8011f98:	227e      	movs	r2, #126	; 0x7e
 8011f9a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8011fa0:	e002      	b.n	8011fa8 <gen_numname+0xd0>
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8011fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d205      	bcs.n	8011fbc <gen_numname+0xe4>
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	4413      	add	r3, r2
 8011fb6:	781b      	ldrb	r3, [r3, #0]
 8011fb8:	2b20      	cmp	r3, #32
 8011fba:	d1f2      	bne.n	8011fa2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	2b07      	cmp	r3, #7
 8011fc0:	d808      	bhi.n	8011fd4 <gen_numname+0xfc>
 8011fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc4:	1c5a      	adds	r2, r3, #1
 8011fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8011fc8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011fcc:	4413      	add	r3, r2
 8011fce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011fd2:	e000      	b.n	8011fd6 <gen_numname+0xfe>
 8011fd4:	2120      	movs	r1, #32
 8011fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd8:	1c5a      	adds	r2, r3, #1
 8011fda:	627a      	str	r2, [r7, #36]	; 0x24
 8011fdc:	68fa      	ldr	r2, [r7, #12]
 8011fde:	4413      	add	r3, r2
 8011fe0:	460a      	mov	r2, r1
 8011fe2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	2b07      	cmp	r3, #7
 8011fe8:	d9e8      	bls.n	8011fbc <gen_numname+0xe4>
}
 8011fea:	bf00      	nop
 8011fec:	bf00      	nop
 8011fee:	3730      	adds	r7, #48	; 0x30
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	00011021 	.word	0x00011021

08011ff8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b085      	sub	sp, #20
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012004:	230b      	movs	r3, #11
 8012006:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012008:	7bfb      	ldrb	r3, [r7, #15]
 801200a:	b2da      	uxtb	r2, r3
 801200c:	0852      	lsrs	r2, r2, #1
 801200e:	01db      	lsls	r3, r3, #7
 8012010:	4313      	orrs	r3, r2
 8012012:	b2da      	uxtb	r2, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	1c59      	adds	r1, r3, #1
 8012018:	6079      	str	r1, [r7, #4]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	4413      	add	r3, r2
 801201e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	3b01      	subs	r3, #1
 8012024:	60bb      	str	r3, [r7, #8]
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d1ed      	bne.n	8012008 <sum_sfn+0x10>
	return sum;
 801202c:	7bfb      	ldrb	r3, [r7, #15]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3714      	adds	r7, #20
 8012032:	46bd      	mov	sp, r7
 8012034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012038:	4770      	bx	lr

0801203a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b086      	sub	sp, #24
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
 8012042:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012044:	2304      	movs	r3, #4
 8012046:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801204e:	23ff      	movs	r3, #255	; 0xff
 8012050:	757b      	strb	r3, [r7, #21]
 8012052:	23ff      	movs	r3, #255	; 0xff
 8012054:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012056:	e081      	b.n	801215c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	69db      	ldr	r3, [r3, #28]
 801205c:	4619      	mov	r1, r3
 801205e:	6938      	ldr	r0, [r7, #16]
 8012060:	f7ff f8b8 	bl	80111d4 <move_window>
 8012064:	4603      	mov	r3, r0
 8012066:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012068:	7dfb      	ldrb	r3, [r7, #23]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d17c      	bne.n	8012168 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6a1b      	ldr	r3, [r3, #32]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012076:	7dbb      	ldrb	r3, [r7, #22]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d102      	bne.n	8012082 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801207c:	2304      	movs	r3, #4
 801207e:	75fb      	strb	r3, [r7, #23]
 8012080:	e077      	b.n	8012172 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6a1b      	ldr	r3, [r3, #32]
 8012086:	330b      	adds	r3, #11
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801208e:	73fb      	strb	r3, [r7, #15]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	7bfa      	ldrb	r2, [r7, #15]
 8012094:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012096:	7dbb      	ldrb	r3, [r7, #22]
 8012098:	2be5      	cmp	r3, #229	; 0xe5
 801209a:	d00e      	beq.n	80120ba <dir_read+0x80>
 801209c:	7dbb      	ldrb	r3, [r7, #22]
 801209e:	2b2e      	cmp	r3, #46	; 0x2e
 80120a0:	d00b      	beq.n	80120ba <dir_read+0x80>
 80120a2:	7bfb      	ldrb	r3, [r7, #15]
 80120a4:	f023 0320 	bic.w	r3, r3, #32
 80120a8:	2b08      	cmp	r3, #8
 80120aa:	bf0c      	ite	eq
 80120ac:	2301      	moveq	r3, #1
 80120ae:	2300      	movne	r3, #0
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	461a      	mov	r2, r3
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d002      	beq.n	80120c0 <dir_read+0x86>
				ord = 0xFF;
 80120ba:	23ff      	movs	r3, #255	; 0xff
 80120bc:	757b      	strb	r3, [r7, #21]
 80120be:	e044      	b.n	801214a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80120c0:	7bfb      	ldrb	r3, [r7, #15]
 80120c2:	2b0f      	cmp	r3, #15
 80120c4:	d12f      	bne.n	8012126 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80120c6:	7dbb      	ldrb	r3, [r7, #22]
 80120c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00d      	beq.n	80120ec <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a1b      	ldr	r3, [r3, #32]
 80120d4:	7b5b      	ldrb	r3, [r3, #13]
 80120d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80120d8:	7dbb      	ldrb	r3, [r7, #22]
 80120da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80120de:	75bb      	strb	r3, [r7, #22]
 80120e0:	7dbb      	ldrb	r3, [r7, #22]
 80120e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	695a      	ldr	r2, [r3, #20]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80120ec:	7dba      	ldrb	r2, [r7, #22]
 80120ee:	7d7b      	ldrb	r3, [r7, #21]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d115      	bne.n	8012120 <dir_read+0xe6>
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6a1b      	ldr	r3, [r3, #32]
 80120f8:	330d      	adds	r3, #13
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	7d3a      	ldrb	r2, [r7, #20]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d10e      	bne.n	8012120 <dir_read+0xe6>
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	68da      	ldr	r2, [r3, #12]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6a1b      	ldr	r3, [r3, #32]
 801210a:	4619      	mov	r1, r3
 801210c:	4610      	mov	r0, r2
 801210e:	f7ff fe17 	bl	8011d40 <pick_lfn>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d003      	beq.n	8012120 <dir_read+0xe6>
 8012118:	7d7b      	ldrb	r3, [r7, #21]
 801211a:	3b01      	subs	r3, #1
 801211c:	b2db      	uxtb	r3, r3
 801211e:	e000      	b.n	8012122 <dir_read+0xe8>
 8012120:	23ff      	movs	r3, #255	; 0xff
 8012122:	757b      	strb	r3, [r7, #21]
 8012124:	e011      	b.n	801214a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012126:	7d7b      	ldrb	r3, [r7, #21]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d109      	bne.n	8012140 <dir_read+0x106>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a1b      	ldr	r3, [r3, #32]
 8012130:	4618      	mov	r0, r3
 8012132:	f7ff ff61 	bl	8011ff8 <sum_sfn>
 8012136:	4603      	mov	r3, r0
 8012138:	461a      	mov	r2, r3
 801213a:	7d3b      	ldrb	r3, [r7, #20]
 801213c:	4293      	cmp	r3, r2
 801213e:	d015      	beq.n	801216c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f04f 32ff 	mov.w	r2, #4294967295
 8012146:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8012148:	e010      	b.n	801216c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801214a:	2100      	movs	r1, #0
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7ff fc3c 	bl	80119ca <dir_next>
 8012152:	4603      	mov	r3, r0
 8012154:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012156:	7dfb      	ldrb	r3, [r7, #23]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d109      	bne.n	8012170 <dir_read+0x136>
	while (dp->sect) {
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	69db      	ldr	r3, [r3, #28]
 8012160:	2b00      	cmp	r3, #0
 8012162:	f47f af79 	bne.w	8012058 <dir_read+0x1e>
 8012166:	e004      	b.n	8012172 <dir_read+0x138>
		if (res != FR_OK) break;
 8012168:	bf00      	nop
 801216a:	e002      	b.n	8012172 <dir_read+0x138>
					break;
 801216c:	bf00      	nop
 801216e:	e000      	b.n	8012172 <dir_read+0x138>
		if (res != FR_OK) break;
 8012170:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012172:	7dfb      	ldrb	r3, [r7, #23]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <dir_read+0x144>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	61da      	str	r2, [r3, #28]
	return res;
 801217e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012180:	4618      	mov	r0, r3
 8012182:	3718      	adds	r7, #24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b086      	sub	sp, #24
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012196:	2100      	movs	r1, #0
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff fb9b 	bl	80118d4 <dir_sdi>
 801219e:	4603      	mov	r3, r0
 80121a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d001      	beq.n	80121ac <dir_find+0x24>
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	e0a9      	b.n	8012300 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80121ac:	23ff      	movs	r3, #255	; 0xff
 80121ae:	753b      	strb	r3, [r7, #20]
 80121b0:	7d3b      	ldrb	r3, [r7, #20]
 80121b2:	757b      	strb	r3, [r7, #21]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f04f 32ff 	mov.w	r2, #4294967295
 80121ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	69db      	ldr	r3, [r3, #28]
 80121c0:	4619      	mov	r1, r3
 80121c2:	6938      	ldr	r0, [r7, #16]
 80121c4:	f7ff f806 	bl	80111d4 <move_window>
 80121c8:	4603      	mov	r3, r0
 80121ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80121cc:	7dfb      	ldrb	r3, [r7, #23]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f040 8090 	bne.w	80122f4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a1b      	ldr	r3, [r3, #32]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80121dc:	7dbb      	ldrb	r3, [r7, #22]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d102      	bne.n	80121e8 <dir_find+0x60>
 80121e2:	2304      	movs	r3, #4
 80121e4:	75fb      	strb	r3, [r7, #23]
 80121e6:	e08a      	b.n	80122fe <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6a1b      	ldr	r3, [r3, #32]
 80121ec:	330b      	adds	r3, #11
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121f4:	73fb      	strb	r3, [r7, #15]
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7bfa      	ldrb	r2, [r7, #15]
 80121fa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80121fc:	7dbb      	ldrb	r3, [r7, #22]
 80121fe:	2be5      	cmp	r3, #229	; 0xe5
 8012200:	d007      	beq.n	8012212 <dir_find+0x8a>
 8012202:	7bfb      	ldrb	r3, [r7, #15]
 8012204:	f003 0308 	and.w	r3, r3, #8
 8012208:	2b00      	cmp	r3, #0
 801220a:	d009      	beq.n	8012220 <dir_find+0x98>
 801220c:	7bfb      	ldrb	r3, [r7, #15]
 801220e:	2b0f      	cmp	r3, #15
 8012210:	d006      	beq.n	8012220 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012212:	23ff      	movs	r3, #255	; 0xff
 8012214:	757b      	strb	r3, [r7, #21]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f04f 32ff 	mov.w	r2, #4294967295
 801221c:	631a      	str	r2, [r3, #48]	; 0x30
 801221e:	e05e      	b.n	80122de <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012220:	7bfb      	ldrb	r3, [r7, #15]
 8012222:	2b0f      	cmp	r3, #15
 8012224:	d136      	bne.n	8012294 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012230:	2b00      	cmp	r3, #0
 8012232:	d154      	bne.n	80122de <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012234:	7dbb      	ldrb	r3, [r7, #22]
 8012236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00d      	beq.n	801225a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6a1b      	ldr	r3, [r3, #32]
 8012242:	7b5b      	ldrb	r3, [r3, #13]
 8012244:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012246:	7dbb      	ldrb	r3, [r7, #22]
 8012248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801224c:	75bb      	strb	r3, [r7, #22]
 801224e:	7dbb      	ldrb	r3, [r7, #22]
 8012250:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	695a      	ldr	r2, [r3, #20]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801225a:	7dba      	ldrb	r2, [r7, #22]
 801225c:	7d7b      	ldrb	r3, [r7, #21]
 801225e:	429a      	cmp	r2, r3
 8012260:	d115      	bne.n	801228e <dir_find+0x106>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a1b      	ldr	r3, [r3, #32]
 8012266:	330d      	adds	r3, #13
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	7d3a      	ldrb	r2, [r7, #20]
 801226c:	429a      	cmp	r2, r3
 801226e:	d10e      	bne.n	801228e <dir_find+0x106>
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	68da      	ldr	r2, [r3, #12]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6a1b      	ldr	r3, [r3, #32]
 8012278:	4619      	mov	r1, r3
 801227a:	4610      	mov	r0, r2
 801227c:	f7ff fcf0 	bl	8011c60 <cmp_lfn>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d003      	beq.n	801228e <dir_find+0x106>
 8012286:	7d7b      	ldrb	r3, [r7, #21]
 8012288:	3b01      	subs	r3, #1
 801228a:	b2db      	uxtb	r3, r3
 801228c:	e000      	b.n	8012290 <dir_find+0x108>
 801228e:	23ff      	movs	r3, #255	; 0xff
 8012290:	757b      	strb	r3, [r7, #21]
 8012292:	e024      	b.n	80122de <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012294:	7d7b      	ldrb	r3, [r7, #21]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d109      	bne.n	80122ae <dir_find+0x126>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6a1b      	ldr	r3, [r3, #32]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff feaa 	bl	8011ff8 <sum_sfn>
 80122a4:	4603      	mov	r3, r0
 80122a6:	461a      	mov	r2, r3
 80122a8:	7d3b      	ldrb	r3, [r7, #20]
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d024      	beq.n	80122f8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122b4:	f003 0301 	and.w	r3, r3, #1
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10a      	bne.n	80122d2 <dir_find+0x14a>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6a18      	ldr	r0, [r3, #32]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	3324      	adds	r3, #36	; 0x24
 80122c4:	220b      	movs	r2, #11
 80122c6:	4619      	mov	r1, r3
 80122c8:	f7fe fd92 	bl	8010df0 <mem_cmp>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d014      	beq.n	80122fc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80122d2:	23ff      	movs	r3, #255	; 0xff
 80122d4:	757b      	strb	r3, [r7, #21]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f04f 32ff 	mov.w	r2, #4294967295
 80122dc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80122de:	2100      	movs	r1, #0
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff fb72 	bl	80119ca <dir_next>
 80122e6:	4603      	mov	r3, r0
 80122e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f43f af65 	beq.w	80121bc <dir_find+0x34>
 80122f2:	e004      	b.n	80122fe <dir_find+0x176>
		if (res != FR_OK) break;
 80122f4:	bf00      	nop
 80122f6:	e002      	b.n	80122fe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80122f8:	bf00      	nop
 80122fa:	e000      	b.n	80122fe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80122fc:	bf00      	nop

	return res;
 80122fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012300:	4618      	mov	r0, r3
 8012302:	3718      	adds	r7, #24
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b08c      	sub	sp, #48	; 0x30
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801231c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d001      	beq.n	8012328 <dir_register+0x20>
 8012324:	2306      	movs	r3, #6
 8012326:	e0e0      	b.n	80124ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012328:	2300      	movs	r3, #0
 801232a:	627b      	str	r3, [r7, #36]	; 0x24
 801232c:	e002      	b.n	8012334 <dir_register+0x2c>
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	3301      	adds	r3, #1
 8012332:	627b      	str	r3, [r7, #36]	; 0x24
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	68da      	ldr	r2, [r3, #12]
 8012338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	4413      	add	r3, r2
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d1f4      	bne.n	801232e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801234a:	f107 030c 	add.w	r3, r7, #12
 801234e:	220c      	movs	r2, #12
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe fd11 	bl	8010d78 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012356:	7dfb      	ldrb	r3, [r7, #23]
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d032      	beq.n	80123c6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2240      	movs	r2, #64	; 0x40
 8012364:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012368:	2301      	movs	r3, #1
 801236a:	62bb      	str	r3, [r7, #40]	; 0x28
 801236c:	e016      	b.n	801239c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	68da      	ldr	r2, [r3, #12]
 8012378:	f107 010c 	add.w	r1, r7, #12
 801237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237e:	f7ff fdab 	bl	8011ed8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7ff ff00 	bl	8012188 <dir_find>
 8012388:	4603      	mov	r3, r0
 801238a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801238e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012398:	3301      	adds	r3, #1
 801239a:	62bb      	str	r3, [r7, #40]	; 0x28
 801239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239e:	2b63      	cmp	r3, #99	; 0x63
 80123a0:	d9e5      	bls.n	801236e <dir_register+0x66>
 80123a2:	e000      	b.n	80123a6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80123a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80123a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a8:	2b64      	cmp	r3, #100	; 0x64
 80123aa:	d101      	bne.n	80123b0 <dir_register+0xa8>
 80123ac:	2307      	movs	r3, #7
 80123ae:	e09c      	b.n	80124ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80123b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b4:	2b04      	cmp	r3, #4
 80123b6:	d002      	beq.n	80123be <dir_register+0xb6>
 80123b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123bc:	e095      	b.n	80124ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80123be:	7dfa      	ldrb	r2, [r7, #23]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80123c6:	7dfb      	ldrb	r3, [r7, #23]
 80123c8:	f003 0302 	and.w	r3, r3, #2
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d007      	beq.n	80123e0 <dir_register+0xd8>
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	330c      	adds	r3, #12
 80123d4:	4a47      	ldr	r2, [pc, #284]	; (80124f4 <dir_register+0x1ec>)
 80123d6:	fba2 2303 	umull	r2, r3, r2, r3
 80123da:	089b      	lsrs	r3, r3, #2
 80123dc:	3301      	adds	r3, #1
 80123de:	e000      	b.n	80123e2 <dir_register+0xda>
 80123e0:	2301      	movs	r3, #1
 80123e2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80123e4:	6a39      	ldr	r1, [r7, #32]
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7ff fbb4 	bl	8011b54 <dir_alloc>
 80123ec:	4603      	mov	r3, r0
 80123ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80123f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d148      	bne.n	801248c <dir_register+0x184>
 80123fa:	6a3b      	ldr	r3, [r7, #32]
 80123fc:	3b01      	subs	r3, #1
 80123fe:	623b      	str	r3, [r7, #32]
 8012400:	6a3b      	ldr	r3, [r7, #32]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d042      	beq.n	801248c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	695a      	ldr	r2, [r3, #20]
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	015b      	lsls	r3, r3, #5
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	4619      	mov	r1, r3
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7ff fa5e 	bl	80118d4 <dir_sdi>
 8012418:	4603      	mov	r3, r0
 801241a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801241e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012422:	2b00      	cmp	r3, #0
 8012424:	d132      	bne.n	801248c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	3324      	adds	r3, #36	; 0x24
 801242a:	4618      	mov	r0, r3
 801242c:	f7ff fde4 	bl	8011ff8 <sum_sfn>
 8012430:	4603      	mov	r3, r0
 8012432:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	69db      	ldr	r3, [r3, #28]
 8012438:	4619      	mov	r1, r3
 801243a:	69f8      	ldr	r0, [r7, #28]
 801243c:	f7fe feca 	bl	80111d4 <move_window>
 8012440:	4603      	mov	r3, r0
 8012442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8012446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801244a:	2b00      	cmp	r3, #0
 801244c:	d11d      	bne.n	801248a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801244e:	69fb      	ldr	r3, [r7, #28]
 8012450:	68d8      	ldr	r0, [r3, #12]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6a19      	ldr	r1, [r3, #32]
 8012456:	6a3b      	ldr	r3, [r7, #32]
 8012458:	b2da      	uxtb	r2, r3
 801245a:	7efb      	ldrb	r3, [r7, #27]
 801245c:	f7ff fcd4 	bl	8011e08 <put_lfn>
				fs->wflag = 1;
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	2201      	movs	r2, #1
 8012464:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012466:	2100      	movs	r1, #0
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff faae 	bl	80119ca <dir_next>
 801246e:	4603      	mov	r3, r0
 8012470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8012474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012478:	2b00      	cmp	r3, #0
 801247a:	d107      	bne.n	801248c <dir_register+0x184>
 801247c:	6a3b      	ldr	r3, [r7, #32]
 801247e:	3b01      	subs	r3, #1
 8012480:	623b      	str	r3, [r7, #32]
 8012482:	6a3b      	ldr	r3, [r7, #32]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1d5      	bne.n	8012434 <dir_register+0x12c>
 8012488:	e000      	b.n	801248c <dir_register+0x184>
				if (res != FR_OK) break;
 801248a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801248c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012490:	2b00      	cmp	r3, #0
 8012492:	d128      	bne.n	80124e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	69db      	ldr	r3, [r3, #28]
 8012498:	4619      	mov	r1, r3
 801249a:	69f8      	ldr	r0, [r7, #28]
 801249c:	f7fe fe9a 	bl	80111d4 <move_window>
 80124a0:	4603      	mov	r3, r0
 80124a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80124a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d11b      	bne.n	80124e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6a1b      	ldr	r3, [r3, #32]
 80124b2:	2220      	movs	r2, #32
 80124b4:	2100      	movs	r1, #0
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fe fc7f 	bl	8010dba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6a18      	ldr	r0, [r3, #32]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	3324      	adds	r3, #36	; 0x24
 80124c4:	220b      	movs	r2, #11
 80124c6:	4619      	mov	r1, r3
 80124c8:	f7fe fc56 	bl	8010d78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	330c      	adds	r3, #12
 80124d8:	f002 0218 	and.w	r2, r2, #24
 80124dc:	b2d2      	uxtb	r2, r2
 80124de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	2201      	movs	r2, #1
 80124e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80124e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3730      	adds	r7, #48	; 0x30
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	4ec4ec4f 	.word	0x4ec4ec4f

080124f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b088      	sub	sp, #32
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	2200      	movs	r2, #0
 801250c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	69db      	ldr	r3, [r3, #28]
 8012512:	2b00      	cmp	r3, #0
 8012514:	f000 80c9 	beq.w	80126aa <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012520:	d032      	beq.n	8012588 <get_fileinfo+0x90>
			i = j = 0;
 8012522:	2300      	movs	r3, #0
 8012524:	61bb      	str	r3, [r7, #24]
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801252a:	e01b      	b.n	8012564 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801252c:	89fb      	ldrh	r3, [r7, #14]
 801252e:	2100      	movs	r1, #0
 8012530:	4618      	mov	r0, r3
 8012532:	f7fe fa3b 	bl	80109ac <ff_convert>
 8012536:	4603      	mov	r3, r0
 8012538:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801253a:	89fb      	ldrh	r3, [r7, #14]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d102      	bne.n	8012546 <get_fileinfo+0x4e>
 8012540:	2300      	movs	r3, #0
 8012542:	61fb      	str	r3, [r7, #28]
 8012544:	e01a      	b.n	801257c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	2bfe      	cmp	r3, #254	; 0xfe
 801254a:	d902      	bls.n	8012552 <get_fileinfo+0x5a>
 801254c:	2300      	movs	r3, #0
 801254e:	61fb      	str	r3, [r7, #28]
 8012550:	e014      	b.n	801257c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	61fa      	str	r2, [r7, #28]
 8012558:	89fa      	ldrh	r2, [r7, #14]
 801255a:	b2d1      	uxtb	r1, r2
 801255c:	683a      	ldr	r2, [r7, #0]
 801255e:	4413      	add	r3, r2
 8012560:	460a      	mov	r2, r1
 8012562:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	68da      	ldr	r2, [r3, #12]
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	1c59      	adds	r1, r3, #1
 801256c:	61b9      	str	r1, [r7, #24]
 801256e:	005b      	lsls	r3, r3, #1
 8012570:	4413      	add	r3, r2
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	81fb      	strh	r3, [r7, #14]
 8012576:	89fb      	ldrh	r3, [r7, #14]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d1d7      	bne.n	801252c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801257c:	683a      	ldr	r2, [r7, #0]
 801257e:	69fb      	ldr	r3, [r7, #28]
 8012580:	4413      	add	r3, r2
 8012582:	3316      	adds	r3, #22
 8012584:	2200      	movs	r2, #0
 8012586:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	61bb      	str	r3, [r7, #24]
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012590:	683a      	ldr	r2, [r7, #0]
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	4413      	add	r3, r2
 8012596:	3316      	adds	r3, #22
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801259c:	e04c      	b.n	8012638 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6a1a      	ldr	r2, [r3, #32]
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	1c59      	adds	r1, r3, #1
 80125a6:	61f9      	str	r1, [r7, #28]
 80125a8:	4413      	add	r3, r2
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80125ae:	7dfb      	ldrb	r3, [r7, #23]
 80125b0:	2b20      	cmp	r3, #32
 80125b2:	d100      	bne.n	80125b6 <get_fileinfo+0xbe>
 80125b4:	e040      	b.n	8012638 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
 80125b8:	2b05      	cmp	r3, #5
 80125ba:	d101      	bne.n	80125c0 <get_fileinfo+0xc8>
 80125bc:	23e5      	movs	r3, #229	; 0xe5
 80125be:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	2b09      	cmp	r3, #9
 80125c4:	d10f      	bne.n	80125e6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80125c6:	89bb      	ldrh	r3, [r7, #12]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d105      	bne.n	80125d8 <get_fileinfo+0xe0>
 80125cc:	683a      	ldr	r2, [r7, #0]
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	4413      	add	r3, r2
 80125d2:	3316      	adds	r3, #22
 80125d4:	222e      	movs	r2, #46	; 0x2e
 80125d6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	61ba      	str	r2, [r7, #24]
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	4413      	add	r3, r2
 80125e2:	222e      	movs	r2, #46	; 0x2e
 80125e4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80125e6:	683a      	ldr	r2, [r7, #0]
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	4413      	add	r3, r2
 80125ec:	3309      	adds	r3, #9
 80125ee:	7dfa      	ldrb	r2, [r7, #23]
 80125f0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80125f2:	89bb      	ldrh	r3, [r7, #12]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d11c      	bne.n	8012632 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80125f8:	7dfb      	ldrb	r3, [r7, #23]
 80125fa:	2b40      	cmp	r3, #64	; 0x40
 80125fc:	d913      	bls.n	8012626 <get_fileinfo+0x12e>
 80125fe:	7dfb      	ldrb	r3, [r7, #23]
 8012600:	2b5a      	cmp	r3, #90	; 0x5a
 8012602:	d810      	bhi.n	8012626 <get_fileinfo+0x12e>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6a1b      	ldr	r3, [r3, #32]
 8012608:	330c      	adds	r3, #12
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	461a      	mov	r2, r3
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	2b08      	cmp	r3, #8
 8012612:	d901      	bls.n	8012618 <get_fileinfo+0x120>
 8012614:	2310      	movs	r3, #16
 8012616:	e000      	b.n	801261a <get_fileinfo+0x122>
 8012618:	2308      	movs	r3, #8
 801261a:	4013      	ands	r3, r2
 801261c:	2b00      	cmp	r3, #0
 801261e:	d002      	beq.n	8012626 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8012620:	7dfb      	ldrb	r3, [r7, #23]
 8012622:	3320      	adds	r3, #32
 8012624:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8012626:	683a      	ldr	r2, [r7, #0]
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	4413      	add	r3, r2
 801262c:	3316      	adds	r3, #22
 801262e:	7dfa      	ldrb	r2, [r7, #23]
 8012630:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	3301      	adds	r3, #1
 8012636:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	2b0a      	cmp	r3, #10
 801263c:	d9af      	bls.n	801259e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801263e:	89bb      	ldrh	r3, [r7, #12]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d10d      	bne.n	8012660 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8012644:	683a      	ldr	r2, [r7, #0]
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	4413      	add	r3, r2
 801264a:	3316      	adds	r3, #22
 801264c:	2200      	movs	r2, #0
 801264e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a1b      	ldr	r3, [r3, #32]
 8012654:	330c      	adds	r3, #12
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d101      	bne.n	8012660 <get_fileinfo+0x168>
 801265c:	2300      	movs	r3, #0
 801265e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012660:	683a      	ldr	r2, [r7, #0]
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	4413      	add	r3, r2
 8012666:	3309      	adds	r3, #9
 8012668:	2200      	movs	r2, #0
 801266a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6a1b      	ldr	r3, [r3, #32]
 8012670:	7ada      	ldrb	r2, [r3, #11]
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a1b      	ldr	r3, [r3, #32]
 801267a:	331c      	adds	r3, #28
 801267c:	4618      	mov	r0, r3
 801267e:	f7fe fb11 	bl	8010ca4 <ld_dword>
 8012682:	4602      	mov	r2, r0
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6a1b      	ldr	r3, [r3, #32]
 801268c:	3316      	adds	r3, #22
 801268e:	4618      	mov	r0, r3
 8012690:	f7fe fb08 	bl	8010ca4 <ld_dword>
 8012694:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	b29a      	uxth	r2, r3
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	80da      	strh	r2, [r3, #6]
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	0c1b      	lsrs	r3, r3, #16
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	809a      	strh	r2, [r3, #4]
 80126a8:	e000      	b.n	80126ac <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80126aa:	bf00      	nop
}
 80126ac:	3720      	adds	r7, #32
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
	...

080126b4 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	1c59      	adds	r1, r3, #1
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	6011      	str	r1, [r2, #0]
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80126ca:	89fb      	ldrh	r3, [r7, #14]
 80126cc:	2b60      	cmp	r3, #96	; 0x60
 80126ce:	d905      	bls.n	80126dc <get_achar+0x28>
 80126d0:	89fb      	ldrh	r3, [r7, #14]
 80126d2:	2b7a      	cmp	r3, #122	; 0x7a
 80126d4:	d802      	bhi.n	80126dc <get_achar+0x28>
 80126d6:	89fb      	ldrh	r3, [r7, #14]
 80126d8:	3b20      	subs	r3, #32
 80126da:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80126dc:	89fb      	ldrh	r3, [r7, #14]
 80126de:	2b7f      	cmp	r3, #127	; 0x7f
 80126e0:	d904      	bls.n	80126ec <get_achar+0x38>
 80126e2:	89fb      	ldrh	r3, [r7, #14]
 80126e4:	3b80      	subs	r3, #128	; 0x80
 80126e6:	4a05      	ldr	r2, [pc, #20]	; (80126fc <get_achar+0x48>)
 80126e8:	5cd3      	ldrb	r3, [r2, r3]
 80126ea:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80126ec:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3714      	adds	r7, #20
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	0802914c 	.word	0x0802914c

08012700 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b08a      	sub	sp, #40	; 0x28
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801270e:	e009      	b.n	8012724 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8012710:	f107 0308 	add.w	r3, r7, #8
 8012714:	4618      	mov	r0, r3
 8012716:	f7ff ffcd 	bl	80126b4 <get_achar>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d101      	bne.n	8012724 <pattern_matching+0x24>
 8012720:	2300      	movs	r3, #0
 8012722:	e064      	b.n	80127ee <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	1e5a      	subs	r2, r3, #1
 8012728:	607a      	str	r2, [r7, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1f0      	bne.n	8012710 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d104      	bne.n	8012740 <pattern_matching+0x40>
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <pattern_matching+0x40>
 801273c:	2301      	movs	r3, #1
 801273e:	e056      	b.n	80127ee <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	617b      	str	r3, [r7, #20]
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b3f      	cmp	r3, #63	; 0x3f
 801274e:	d003      	beq.n	8012758 <pattern_matching+0x58>
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	2b2a      	cmp	r3, #42	; 0x2a
 8012756:	d126      	bne.n	80127a6 <pattern_matching+0xa6>
				nm = nx = 0;
 8012758:	2300      	movs	r3, #0
 801275a:	61fb      	str	r3, [r7, #28]
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	1c5a      	adds	r2, r3, #1
 8012764:	617a      	str	r2, [r7, #20]
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b3f      	cmp	r3, #63	; 0x3f
 801276a:	d103      	bne.n	8012774 <pattern_matching+0x74>
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	3301      	adds	r3, #1
 8012770:	623b      	str	r3, [r7, #32]
 8012772:	e001      	b.n	8012778 <pattern_matching+0x78>
 8012774:	2301      	movs	r3, #1
 8012776:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b3f      	cmp	r3, #63	; 0x3f
 801277e:	d0ef      	beq.n	8012760 <pattern_matching+0x60>
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	2b2a      	cmp	r3, #42	; 0x2a
 8012786:	d0eb      	beq.n	8012760 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8012788:	6978      	ldr	r0, [r7, #20]
 801278a:	6939      	ldr	r1, [r7, #16]
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	6a3a      	ldr	r2, [r7, #32]
 8012790:	f7ff ffb6 	bl	8012700 <pattern_matching>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <pattern_matching+0x9e>
 801279a:	2301      	movs	r3, #1
 801279c:	e027      	b.n	80127ee <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80127a4:	e017      	b.n	80127d6 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80127a6:	f107 0314 	add.w	r3, r7, #20
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7ff ff82 	bl	80126b4 <get_achar>
 80127b0:	4603      	mov	r3, r0
 80127b2:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80127b4:	f107 0310 	add.w	r3, r7, #16
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7ff ff7b 	bl	80126b4 <get_achar>
 80127be:	4603      	mov	r3, r0
 80127c0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80127c2:	8b7a      	ldrh	r2, [r7, #26]
 80127c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d104      	bne.n	80127d4 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80127ca:	8b7b      	ldrh	r3, [r7, #26]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1bb      	bne.n	8012748 <pattern_matching+0x48>
 80127d0:	2301      	movs	r3, #1
 80127d2:	e00c      	b.n	80127ee <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80127d4:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80127d6:	f107 0308 	add.w	r3, r7, #8
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff ff6a 	bl	80126b4 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <pattern_matching+0xec>
 80127e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d1a9      	bne.n	8012740 <pattern_matching+0x40>

	return 0;
 80127ec:	2300      	movs	r3, #0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3728      	adds	r7, #40	; 0x28
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
	...

080127f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b08a      	sub	sp, #40	; 0x28
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	613b      	str	r3, [r7, #16]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	60fb      	str	r3, [r7, #12]
 8012810:	2300      	movs	r3, #0
 8012812:	617b      	str	r3, [r7, #20]
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	1c5a      	adds	r2, r3, #1
 801281c:	61ba      	str	r2, [r7, #24]
 801281e:	693a      	ldr	r2, [r7, #16]
 8012820:	4413      	add	r3, r2
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012828:	2b1f      	cmp	r3, #31
 801282a:	d940      	bls.n	80128ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801282c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801282e:	2b2f      	cmp	r3, #47	; 0x2f
 8012830:	d006      	beq.n	8012840 <create_name+0x48>
 8012832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012834:	2b5c      	cmp	r3, #92	; 0x5c
 8012836:	d110      	bne.n	801285a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012838:	e002      	b.n	8012840 <create_name+0x48>
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	3301      	adds	r3, #1
 801283e:	61bb      	str	r3, [r7, #24]
 8012840:	693a      	ldr	r2, [r7, #16]
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	4413      	add	r3, r2
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	2b2f      	cmp	r3, #47	; 0x2f
 801284a:	d0f6      	beq.n	801283a <create_name+0x42>
 801284c:	693a      	ldr	r2, [r7, #16]
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	4413      	add	r3, r2
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2b5c      	cmp	r3, #92	; 0x5c
 8012856:	d0f0      	beq.n	801283a <create_name+0x42>
			break;
 8012858:	e02a      	b.n	80128b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	2bfe      	cmp	r3, #254	; 0xfe
 801285e:	d901      	bls.n	8012864 <create_name+0x6c>
 8012860:	2306      	movs	r3, #6
 8012862:	e177      	b.n	8012b54 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012866:	b2db      	uxtb	r3, r3
 8012868:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801286a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801286c:	2101      	movs	r1, #1
 801286e:	4618      	mov	r0, r3
 8012870:	f7fe f89c 	bl	80109ac <ff_convert>
 8012874:	4603      	mov	r3, r0
 8012876:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <create_name+0x8a>
 801287e:	2306      	movs	r3, #6
 8012880:	e168      	b.n	8012b54 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012884:	2b7f      	cmp	r3, #127	; 0x7f
 8012886:	d809      	bhi.n	801289c <create_name+0xa4>
 8012888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801288a:	4619      	mov	r1, r3
 801288c:	48b3      	ldr	r0, [pc, #716]	; (8012b5c <create_name+0x364>)
 801288e:	f7fe fad6 	bl	8010e3e <chk_chr>
 8012892:	4603      	mov	r3, r0
 8012894:	2b00      	cmp	r3, #0
 8012896:	d001      	beq.n	801289c <create_name+0xa4>
 8012898:	2306      	movs	r3, #6
 801289a:	e15b      	b.n	8012b54 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	1c5a      	adds	r2, r3, #1
 80128a0:	617a      	str	r2, [r7, #20]
 80128a2:	005b      	lsls	r3, r3, #1
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	4413      	add	r3, r2
 80128a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80128aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80128ac:	e7b4      	b.n	8012818 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80128ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80128b0:	693a      	ldr	r2, [r7, #16]
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	441a      	add	r2, r3
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80128ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128bc:	2b1f      	cmp	r3, #31
 80128be:	d801      	bhi.n	80128c4 <create_name+0xcc>
 80128c0:	2304      	movs	r3, #4
 80128c2:	e000      	b.n	80128c6 <create_name+0xce>
 80128c4:	2300      	movs	r3, #0
 80128c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80128ca:	e011      	b.n	80128f0 <create_name+0xf8>
		w = lfn[di - 1];
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80128d2:	4413      	add	r3, r2
 80128d4:	005b      	lsls	r3, r3, #1
 80128d6:	68fa      	ldr	r2, [r7, #12]
 80128d8:	4413      	add	r3, r2
 80128da:	881b      	ldrh	r3, [r3, #0]
 80128dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80128de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128e0:	2b20      	cmp	r3, #32
 80128e2:	d002      	beq.n	80128ea <create_name+0xf2>
 80128e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128e6:	2b2e      	cmp	r3, #46	; 0x2e
 80128e8:	d106      	bne.n	80128f8 <create_name+0x100>
		di--;
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	3b01      	subs	r3, #1
 80128ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1ea      	bne.n	80128cc <create_name+0xd4>
 80128f6:	e000      	b.n	80128fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80128f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	68fa      	ldr	r2, [r7, #12]
 8012900:	4413      	add	r3, r2
 8012902:	2200      	movs	r2, #0
 8012904:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d101      	bne.n	8012910 <create_name+0x118>
 801290c:	2306      	movs	r3, #6
 801290e:	e121      	b.n	8012b54 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	3324      	adds	r3, #36	; 0x24
 8012914:	220b      	movs	r2, #11
 8012916:	2120      	movs	r1, #32
 8012918:	4618      	mov	r0, r3
 801291a:	f7fe fa4e 	bl	8010dba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801291e:	2300      	movs	r3, #0
 8012920:	61bb      	str	r3, [r7, #24]
 8012922:	e002      	b.n	801292a <create_name+0x132>
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	3301      	adds	r3, #1
 8012928:	61bb      	str	r3, [r7, #24]
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	68fa      	ldr	r2, [r7, #12]
 8012930:	4413      	add	r3, r2
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	2b20      	cmp	r3, #32
 8012936:	d0f5      	beq.n	8012924 <create_name+0x12c>
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	005b      	lsls	r3, r3, #1
 801293c:	68fa      	ldr	r2, [r7, #12]
 801293e:	4413      	add	r3, r2
 8012940:	881b      	ldrh	r3, [r3, #0]
 8012942:	2b2e      	cmp	r3, #46	; 0x2e
 8012944:	d0ee      	beq.n	8012924 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d009      	beq.n	8012960 <create_name+0x168>
 801294c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012950:	f043 0303 	orr.w	r3, r3, #3
 8012954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012958:	e002      	b.n	8012960 <create_name+0x168>
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	3b01      	subs	r3, #1
 801295e:	617b      	str	r3, [r7, #20]
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d009      	beq.n	801297a <create_name+0x182>
 8012966:	697a      	ldr	r2, [r7, #20]
 8012968:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801296c:	4413      	add	r3, r2
 801296e:	005b      	lsls	r3, r3, #1
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	4413      	add	r3, r2
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	2b2e      	cmp	r3, #46	; 0x2e
 8012978:	d1ef      	bne.n	801295a <create_name+0x162>

	i = b = 0; ni = 8;
 801297a:	2300      	movs	r3, #0
 801297c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012980:	2300      	movs	r3, #0
 8012982:	623b      	str	r3, [r7, #32]
 8012984:	2308      	movs	r3, #8
 8012986:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	1c5a      	adds	r2, r3, #1
 801298c:	61ba      	str	r2, [r7, #24]
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	4413      	add	r3, r2
 8012994:	881b      	ldrh	r3, [r3, #0]
 8012996:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801299a:	2b00      	cmp	r3, #0
 801299c:	f000 8090 	beq.w	8012ac0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80129a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129a2:	2b20      	cmp	r3, #32
 80129a4:	d006      	beq.n	80129b4 <create_name+0x1bc>
 80129a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129a8:	2b2e      	cmp	r3, #46	; 0x2e
 80129aa:	d10a      	bne.n	80129c2 <create_name+0x1ca>
 80129ac:	69ba      	ldr	r2, [r7, #24]
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d006      	beq.n	80129c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80129b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129b8:	f043 0303 	orr.w	r3, r3, #3
 80129bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129c0:	e07d      	b.n	8012abe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80129c2:	6a3a      	ldr	r2, [r7, #32]
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d203      	bcs.n	80129d2 <create_name+0x1da>
 80129ca:	69ba      	ldr	r2, [r7, #24]
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d123      	bne.n	8012a1a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	2b0b      	cmp	r3, #11
 80129d6:	d106      	bne.n	80129e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80129d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129dc:	f043 0303 	orr.w	r3, r3, #3
 80129e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129e4:	e06f      	b.n	8012ac6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80129e6:	69ba      	ldr	r2, [r7, #24]
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d005      	beq.n	80129fa <create_name+0x202>
 80129ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129f2:	f043 0303 	orr.w	r3, r3, #3
 80129f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80129fa:	69ba      	ldr	r2, [r7, #24]
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d860      	bhi.n	8012ac4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	61bb      	str	r3, [r7, #24]
 8012a06:	2308      	movs	r3, #8
 8012a08:	623b      	str	r3, [r7, #32]
 8012a0a:	230b      	movs	r3, #11
 8012a0c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012a0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a12:	009b      	lsls	r3, r3, #2
 8012a14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012a18:	e051      	b.n	8012abe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8012a1e:	d914      	bls.n	8012a4a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a22:	2100      	movs	r1, #0
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fd ffc1 	bl	80109ac <ff_convert>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d004      	beq.n	8012a3e <create_name+0x246>
 8012a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a36:	3b80      	subs	r3, #128	; 0x80
 8012a38:	4a49      	ldr	r2, [pc, #292]	; (8012b60 <create_name+0x368>)
 8012a3a:	5cd3      	ldrb	r3, [r2, r3]
 8012a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a42:	f043 0302 	orr.w	r3, r3, #2
 8012a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d007      	beq.n	8012a60 <create_name+0x268>
 8012a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a52:	4619      	mov	r1, r3
 8012a54:	4843      	ldr	r0, [pc, #268]	; (8012b64 <create_name+0x36c>)
 8012a56:	f7fe f9f2 	bl	8010e3e <chk_chr>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d008      	beq.n	8012a72 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012a60:	235f      	movs	r3, #95	; 0x5f
 8012a62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a68:	f043 0303 	orr.w	r3, r3, #3
 8012a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a70:	e01b      	b.n	8012aaa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a74:	2b40      	cmp	r3, #64	; 0x40
 8012a76:	d909      	bls.n	8012a8c <create_name+0x294>
 8012a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a7a:	2b5a      	cmp	r3, #90	; 0x5a
 8012a7c:	d806      	bhi.n	8012a8c <create_name+0x294>
					b |= 2;
 8012a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a82:	f043 0302 	orr.w	r3, r3, #2
 8012a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012a8a:	e00e      	b.n	8012aaa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a8e:	2b60      	cmp	r3, #96	; 0x60
 8012a90:	d90b      	bls.n	8012aaa <create_name+0x2b2>
 8012a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a94:	2b7a      	cmp	r3, #122	; 0x7a
 8012a96:	d808      	bhi.n	8012aaa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012a98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a9c:	f043 0301 	orr.w	r3, r3, #1
 8012aa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012aa6:	3b20      	subs	r3, #32
 8012aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012aaa:	6a3b      	ldr	r3, [r7, #32]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	623a      	str	r2, [r7, #32]
 8012ab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ab2:	b2d1      	uxtb	r1, r2
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	460a      	mov	r2, r1
 8012aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012abe:	e763      	b.n	8012988 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012ac0:	bf00      	nop
 8012ac2:	e000      	b.n	8012ac6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8012ac4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012acc:	2be5      	cmp	r3, #229	; 0xe5
 8012ace:	d103      	bne.n	8012ad8 <create_name+0x2e0>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2205      	movs	r2, #5
 8012ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	2b08      	cmp	r3, #8
 8012adc:	d104      	bne.n	8012ae8 <create_name+0x2f0>
 8012ade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012aec:	f003 030c 	and.w	r3, r3, #12
 8012af0:	2b0c      	cmp	r3, #12
 8012af2:	d005      	beq.n	8012b00 <create_name+0x308>
 8012af4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012af8:	f003 0303 	and.w	r3, r3, #3
 8012afc:	2b03      	cmp	r3, #3
 8012afe:	d105      	bne.n	8012b0c <create_name+0x314>
 8012b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b04:	f043 0302 	orr.w	r3, r3, #2
 8012b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b10:	f003 0302 	and.w	r3, r3, #2
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d117      	bne.n	8012b48 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012b18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b1c:	f003 0303 	and.w	r3, r3, #3
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d105      	bne.n	8012b30 <create_name+0x338>
 8012b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b28:	f043 0310 	orr.w	r3, r3, #16
 8012b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b34:	f003 030c 	and.w	r3, r3, #12
 8012b38:	2b04      	cmp	r3, #4
 8012b3a:	d105      	bne.n	8012b48 <create_name+0x350>
 8012b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b40:	f043 0308 	orr.w	r3, r3, #8
 8012b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012b4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8012b52:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3728      	adds	r7, #40	; 0x28
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	08020318 	.word	0x08020318
 8012b60:	0802914c 	.word	0x0802914c
 8012b64:	08020324 	.word	0x08020324

08012b68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012b7c:	e002      	b.n	8012b84 <follow_path+0x1c>
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	3301      	adds	r3, #1
 8012b82:	603b      	str	r3, [r7, #0]
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	2b2f      	cmp	r3, #47	; 0x2f
 8012b8a:	d0f8      	beq.n	8012b7e <follow_path+0x16>
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b5c      	cmp	r3, #92	; 0x5c
 8012b92:	d0f4      	beq.n	8012b7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	2200      	movs	r2, #0
 8012b98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b1f      	cmp	r3, #31
 8012ba0:	d80a      	bhi.n	8012bb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2280      	movs	r2, #128	; 0x80
 8012ba6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012baa:	2100      	movs	r1, #0
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7fe fe91 	bl	80118d4 <dir_sdi>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	75fb      	strb	r3, [r7, #23]
 8012bb6:	e043      	b.n	8012c40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012bb8:	463b      	mov	r3, r7
 8012bba:	4619      	mov	r1, r3
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f7ff fe1b 	bl	80127f8 <create_name>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012bc6:	7dfb      	ldrb	r3, [r7, #23]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d134      	bne.n	8012c36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff fadb 	bl	8012188 <dir_find>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012bdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012bde:	7dfb      	ldrb	r3, [r7, #23]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d00a      	beq.n	8012bfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012be4:	7dfb      	ldrb	r3, [r7, #23]
 8012be6:	2b04      	cmp	r3, #4
 8012be8:	d127      	bne.n	8012c3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012bea:	7afb      	ldrb	r3, [r7, #11]
 8012bec:	f003 0304 	and.w	r3, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d122      	bne.n	8012c3a <follow_path+0xd2>
 8012bf4:	2305      	movs	r3, #5
 8012bf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012bf8:	e01f      	b.n	8012c3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012bfa:	7afb      	ldrb	r3, [r7, #11]
 8012bfc:	f003 0304 	and.w	r3, r3, #4
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d11c      	bne.n	8012c3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	799b      	ldrb	r3, [r3, #6]
 8012c08:	f003 0310 	and.w	r3, r3, #16
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d102      	bne.n	8012c16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012c10:	2305      	movs	r3, #5
 8012c12:	75fb      	strb	r3, [r7, #23]
 8012c14:	e014      	b.n	8012c40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	695b      	ldr	r3, [r3, #20]
 8012c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c24:	4413      	add	r3, r2
 8012c26:	4619      	mov	r1, r3
 8012c28:	68f8      	ldr	r0, [r7, #12]
 8012c2a:	f7fe ffda 	bl	8011be2 <ld_clust>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c34:	e7c0      	b.n	8012bb8 <follow_path+0x50>
			if (res != FR_OK) break;
 8012c36:	bf00      	nop
 8012c38:	e002      	b.n	8012c40 <follow_path+0xd8>
				break;
 8012c3a:	bf00      	nop
 8012c3c:	e000      	b.n	8012c40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c3e:	bf00      	nop
			}
		}
	}

	return res;
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3718      	adds	r7, #24
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012c4a:	b480      	push	{r7}
 8012c4c:	b087      	sub	sp, #28
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012c52:	f04f 33ff 	mov.w	r3, #4294967295
 8012c56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d031      	beq.n	8012cc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	617b      	str	r3, [r7, #20]
 8012c66:	e002      	b.n	8012c6e <get_ldnumber+0x24>
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	617b      	str	r3, [r7, #20]
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	2b1f      	cmp	r3, #31
 8012c74:	d903      	bls.n	8012c7e <get_ldnumber+0x34>
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	2b3a      	cmp	r3, #58	; 0x3a
 8012c7c:	d1f4      	bne.n	8012c68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b3a      	cmp	r3, #58	; 0x3a
 8012c84:	d11c      	bne.n	8012cc0 <get_ldnumber+0x76>
			tp = *path;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	1c5a      	adds	r2, r3, #1
 8012c90:	60fa      	str	r2, [r7, #12]
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	3b30      	subs	r3, #48	; 0x30
 8012c96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	2b09      	cmp	r3, #9
 8012c9c:	d80e      	bhi.n	8012cbc <get_ldnumber+0x72>
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d10a      	bne.n	8012cbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d107      	bne.n	8012cbc <get_ldnumber+0x72>
					vol = (int)i;
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	697a      	ldr	r2, [r7, #20]
 8012cba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	e002      	b.n	8012cc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012cc4:	693b      	ldr	r3, [r7, #16]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	371c      	adds	r7, #28
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr
	...

08012cd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	70da      	strb	r2, [r3, #3]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012cec:	6839      	ldr	r1, [r7, #0]
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7fe fa70 	bl	80111d4 <move_window>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <check_fs+0x2a>
 8012cfa:	2304      	movs	r3, #4
 8012cfc:	e038      	b.n	8012d70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	3334      	adds	r3, #52	; 0x34
 8012d02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fd ffb4 	bl	8010c74 <ld_word>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	461a      	mov	r2, r3
 8012d10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d001      	beq.n	8012d1c <check_fs+0x48>
 8012d18:	2303      	movs	r3, #3
 8012d1a:	e029      	b.n	8012d70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d22:	2be9      	cmp	r3, #233	; 0xe9
 8012d24:	d009      	beq.n	8012d3a <check_fs+0x66>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d2c:	2beb      	cmp	r3, #235	; 0xeb
 8012d2e:	d11e      	bne.n	8012d6e <check_fs+0x9a>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012d36:	2b90      	cmp	r3, #144	; 0x90
 8012d38:	d119      	bne.n	8012d6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	3334      	adds	r3, #52	; 0x34
 8012d3e:	3336      	adds	r3, #54	; 0x36
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fd ffaf 	bl	8010ca4 <ld_dword>
 8012d46:	4603      	mov	r3, r0
 8012d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012d4c:	4a0a      	ldr	r2, [pc, #40]	; (8012d78 <check_fs+0xa4>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d101      	bne.n	8012d56 <check_fs+0x82>
 8012d52:	2300      	movs	r3, #0
 8012d54:	e00c      	b.n	8012d70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3334      	adds	r3, #52	; 0x34
 8012d5a:	3352      	adds	r3, #82	; 0x52
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fd ffa1 	bl	8010ca4 <ld_dword>
 8012d62:	4603      	mov	r3, r0
 8012d64:	4a05      	ldr	r2, [pc, #20]	; (8012d7c <check_fs+0xa8>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d101      	bne.n	8012d6e <check_fs+0x9a>
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	e000      	b.n	8012d70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012d6e:	2302      	movs	r3, #2
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	00544146 	.word	0x00544146
 8012d7c:	33544146 	.word	0x33544146

08012d80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b096      	sub	sp, #88	; 0x58
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	4613      	mov	r3, r2
 8012d8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	2200      	movs	r2, #0
 8012d92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	f7ff ff58 	bl	8012c4a <get_ldnumber>
 8012d9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	da01      	bge.n	8012da6 <find_volume+0x26>
 8012da2:	230b      	movs	r3, #11
 8012da4:	e231      	b.n	801320a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012da6:	4aa8      	ldr	r2, [pc, #672]	; (8013048 <find_volume+0x2c8>)
 8012da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d101      	bne.n	8012dba <find_volume+0x3a>
 8012db6:	230c      	movs	r3, #12
 8012db8:	e227      	b.n	801320a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012dc0:	79fb      	ldrb	r3, [r7, #7]
 8012dc2:	f023 0301 	bic.w	r3, r3, #1
 8012dc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d01a      	beq.n	8012e06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd2:	785b      	ldrb	r3, [r3, #1]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fd feaf 	bl	8010b38 <disk_status>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012de4:	f003 0301 	and.w	r3, r3, #1
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10c      	bne.n	8012e06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012dec:	79fb      	ldrb	r3, [r7, #7]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d007      	beq.n	8012e02 <find_volume+0x82>
 8012df2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012df6:	f003 0304 	and.w	r3, r3, #4
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d001      	beq.n	8012e02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012dfe:	230a      	movs	r3, #10
 8012e00:	e203      	b.n	801320a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8012e02:	2300      	movs	r3, #0
 8012e04:	e201      	b.n	801320a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e08:	2200      	movs	r2, #0
 8012e0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e0e:	b2da      	uxtb	r2, r3
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e16:	785b      	ldrb	r3, [r3, #1]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fd fea7 	bl	8010b6c <disk_initialize>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012e24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e28:	f003 0301 	and.w	r3, r3, #1
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d001      	beq.n	8012e34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012e30:	2303      	movs	r3, #3
 8012e32:	e1ea      	b.n	801320a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012e34:	79fb      	ldrb	r3, [r7, #7]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d007      	beq.n	8012e4a <find_volume+0xca>
 8012e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e3e:	f003 0304 	and.w	r3, r3, #4
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d001      	beq.n	8012e4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012e46:	230a      	movs	r3, #10
 8012e48:	e1df      	b.n	801320a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e52:	f7ff ff3f 	bl	8012cd4 <check_fs>
 8012e56:	4603      	mov	r3, r0
 8012e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d14b      	bne.n	8012efc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012e64:	2300      	movs	r3, #0
 8012e66:	643b      	str	r3, [r7, #64]	; 0x40
 8012e68:	e01f      	b.n	8012eaa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e72:	011b      	lsls	r3, r3, #4
 8012e74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012e78:	4413      	add	r3, r2
 8012e7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7e:	3304      	adds	r3, #4
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d006      	beq.n	8012e94 <find_volume+0x114>
 8012e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e88:	3308      	adds	r3, #8
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fd ff0a 	bl	8010ca4 <ld_dword>
 8012e90:	4602      	mov	r2, r0
 8012e92:	e000      	b.n	8012e96 <find_volume+0x116>
 8012e94:	2200      	movs	r2, #0
 8012e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012e9e:	440b      	add	r3, r1
 8012ea0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8012eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eac:	2b03      	cmp	r3, #3
 8012eae:	d9dc      	bls.n	8012e6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d002      	beq.n	8012ec0 <find_volume+0x140>
 8012eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ec8:	4413      	add	r3, r2
 8012eca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ece:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d005      	beq.n	8012ee2 <find_volume+0x162>
 8012ed6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012eda:	f7ff fefb 	bl	8012cd4 <check_fs>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	e000      	b.n	8012ee4 <find_volume+0x164>
 8012ee2:	2303      	movs	r3, #3
 8012ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d905      	bls.n	8012efc <find_volume+0x17c>
 8012ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8012ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef8:	2b03      	cmp	r3, #3
 8012efa:	d9e1      	bls.n	8012ec0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f00:	2b04      	cmp	r3, #4
 8012f02:	d101      	bne.n	8012f08 <find_volume+0x188>
 8012f04:	2301      	movs	r3, #1
 8012f06:	e180      	b.n	801320a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	d901      	bls.n	8012f14 <find_volume+0x194>
 8012f10:	230d      	movs	r3, #13
 8012f12:	e17a      	b.n	801320a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f16:	3334      	adds	r3, #52	; 0x34
 8012f18:	330b      	adds	r3, #11
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7fd feaa 	bl	8010c74 <ld_word>
 8012f20:	4603      	mov	r3, r0
 8012f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f26:	d001      	beq.n	8012f2c <find_volume+0x1ac>
 8012f28:	230d      	movs	r3, #13
 8012f2a:	e16e      	b.n	801320a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	3334      	adds	r3, #52	; 0x34
 8012f30:	3316      	adds	r3, #22
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fd fe9e 	bl	8010c74 <ld_word>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d106      	bne.n	8012f50 <find_volume+0x1d0>
 8012f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f44:	3334      	adds	r3, #52	; 0x34
 8012f46:	3324      	adds	r3, #36	; 0x24
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7fd feab 	bl	8010ca4 <ld_dword>
 8012f4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012f54:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f62:	789b      	ldrb	r3, [r3, #2]
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d005      	beq.n	8012f74 <find_volume+0x1f4>
 8012f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6a:	789b      	ldrb	r3, [r3, #2]
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	d001      	beq.n	8012f74 <find_volume+0x1f4>
 8012f70:	230d      	movs	r3, #13
 8012f72:	e14a      	b.n	801320a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f76:	789b      	ldrb	r3, [r3, #2]
 8012f78:	461a      	mov	r2, r3
 8012f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f7c:	fb02 f303 	mul.w	r3, r2, r3
 8012f80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	895b      	ldrh	r3, [r3, #10]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d008      	beq.n	8012fa8 <find_volume+0x228>
 8012f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f98:	895b      	ldrh	r3, [r3, #10]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9e:	895b      	ldrh	r3, [r3, #10]
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	4013      	ands	r3, r2
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d001      	beq.n	8012fac <find_volume+0x22c>
 8012fa8:	230d      	movs	r3, #13
 8012faa:	e12e      	b.n	801320a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fae:	3334      	adds	r3, #52	; 0x34
 8012fb0:	3311      	adds	r3, #17
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fd fe5e 	bl	8010c74 <ld_word>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	461a      	mov	r2, r3
 8012fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc2:	891b      	ldrh	r3, [r3, #8]
 8012fc4:	f003 030f 	and.w	r3, r3, #15
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d001      	beq.n	8012fd2 <find_volume+0x252>
 8012fce:	230d      	movs	r3, #13
 8012fd0:	e11b      	b.n	801320a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd4:	3334      	adds	r3, #52	; 0x34
 8012fd6:	3313      	adds	r3, #19
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7fd fe4b 	bl	8010c74 <ld_word>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d106      	bne.n	8012ff6 <find_volume+0x276>
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	3334      	adds	r3, #52	; 0x34
 8012fec:	3320      	adds	r3, #32
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fd fe58 	bl	8010ca4 <ld_dword>
 8012ff4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff8:	3334      	adds	r3, #52	; 0x34
 8012ffa:	330e      	adds	r3, #14
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7fd fe39 	bl	8010c74 <ld_word>
 8013002:	4603      	mov	r3, r0
 8013004:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013008:	2b00      	cmp	r3, #0
 801300a:	d101      	bne.n	8013010 <find_volume+0x290>
 801300c:	230d      	movs	r3, #13
 801300e:	e0fc      	b.n	801320a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013010:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013014:	4413      	add	r3, r2
 8013016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013018:	8912      	ldrh	r2, [r2, #8]
 801301a:	0912      	lsrs	r2, r2, #4
 801301c:	b292      	uxth	r2, r2
 801301e:	4413      	add	r3, r2
 8013020:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013026:	429a      	cmp	r2, r3
 8013028:	d201      	bcs.n	801302e <find_volume+0x2ae>
 801302a:	230d      	movs	r3, #13
 801302c:	e0ed      	b.n	801320a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801302e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013036:	8952      	ldrh	r2, [r2, #10]
 8013038:	fbb3 f3f2 	udiv	r3, r3, r2
 801303c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013040:	2b00      	cmp	r3, #0
 8013042:	d103      	bne.n	801304c <find_volume+0x2cc>
 8013044:	230d      	movs	r3, #13
 8013046:	e0e0      	b.n	801320a <find_volume+0x48a>
 8013048:	2400a3f0 	.word	0x2400a3f0
		fmt = FS_FAT32;
 801304c:	2303      	movs	r3, #3
 801304e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013054:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013058:	4293      	cmp	r3, r2
 801305a:	d802      	bhi.n	8013062 <find_volume+0x2e2>
 801305c:	2302      	movs	r3, #2
 801305e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013064:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013068:	4293      	cmp	r3, r2
 801306a:	d802      	bhi.n	8013072 <find_volume+0x2f2>
 801306c:	2301      	movs	r3, #1
 801306e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013074:	1c9a      	adds	r2, r3, #2
 8013076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013078:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801307e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013080:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013084:	441a      	add	r2, r3
 8013086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013088:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801308a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308e:	441a      	add	r2, r3
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8013094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013098:	2b03      	cmp	r3, #3
 801309a:	d11e      	bne.n	80130da <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309e:	3334      	adds	r3, #52	; 0x34
 80130a0:	332a      	adds	r3, #42	; 0x2a
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7fd fde6 	bl	8010c74 <ld_word>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <find_volume+0x332>
 80130ae:	230d      	movs	r3, #13
 80130b0:	e0ab      	b.n	801320a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80130b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b4:	891b      	ldrh	r3, [r3, #8]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d001      	beq.n	80130be <find_volume+0x33e>
 80130ba:	230d      	movs	r3, #13
 80130bc:	e0a5      	b.n	801320a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80130be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c0:	3334      	adds	r3, #52	; 0x34
 80130c2:	332c      	adds	r3, #44	; 0x2c
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fd fded 	bl	8010ca4 <ld_dword>
 80130ca:	4602      	mov	r2, r0
 80130cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	699b      	ldr	r3, [r3, #24]
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	647b      	str	r3, [r7, #68]	; 0x44
 80130d8:	e01f      	b.n	801311a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80130da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130dc:	891b      	ldrh	r3, [r3, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d101      	bne.n	80130e6 <find_volume+0x366>
 80130e2:	230d      	movs	r3, #13
 80130e4:	e091      	b.n	801320a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80130e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130ec:	441a      	add	r2, r3
 80130ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80130f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	d103      	bne.n	8013102 <find_volume+0x382>
 80130fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fc:	699b      	ldr	r3, [r3, #24]
 80130fe:	005b      	lsls	r3, r3, #1
 8013100:	e00a      	b.n	8013118 <find_volume+0x398>
 8013102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013104:	699a      	ldr	r2, [r3, #24]
 8013106:	4613      	mov	r3, r2
 8013108:	005b      	lsls	r3, r3, #1
 801310a:	4413      	add	r3, r2
 801310c:	085a      	lsrs	r2, r3, #1
 801310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013110:	699b      	ldr	r3, [r3, #24]
 8013112:	f003 0301 	and.w	r3, r3, #1
 8013116:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013118:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311c:	69da      	ldr	r2, [r3, #28]
 801311e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013120:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013124:	0a5b      	lsrs	r3, r3, #9
 8013126:	429a      	cmp	r2, r3
 8013128:	d201      	bcs.n	801312e <find_volume+0x3ae>
 801312a:	230d      	movs	r3, #13
 801312c:	e06d      	b.n	801320a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013130:	f04f 32ff 	mov.w	r2, #4294967295
 8013134:	615a      	str	r2, [r3, #20]
 8013136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013138:	695a      	ldr	r2, [r3, #20]
 801313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013140:	2280      	movs	r2, #128	; 0x80
 8013142:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013148:	2b03      	cmp	r3, #3
 801314a:	d149      	bne.n	80131e0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314e:	3334      	adds	r3, #52	; 0x34
 8013150:	3330      	adds	r3, #48	; 0x30
 8013152:	4618      	mov	r0, r3
 8013154:	f7fd fd8e 	bl	8010c74 <ld_word>
 8013158:	4603      	mov	r3, r0
 801315a:	2b01      	cmp	r3, #1
 801315c:	d140      	bne.n	80131e0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801315e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013160:	3301      	adds	r3, #1
 8013162:	4619      	mov	r1, r3
 8013164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013166:	f7fe f835 	bl	80111d4 <move_window>
 801316a:	4603      	mov	r3, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	d137      	bne.n	80131e0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013172:	2200      	movs	r2, #0
 8013174:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013178:	3334      	adds	r3, #52	; 0x34
 801317a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801317e:	4618      	mov	r0, r3
 8013180:	f7fd fd78 	bl	8010c74 <ld_word>
 8013184:	4603      	mov	r3, r0
 8013186:	461a      	mov	r2, r3
 8013188:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801318c:	429a      	cmp	r2, r3
 801318e:	d127      	bne.n	80131e0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	3334      	adds	r3, #52	; 0x34
 8013194:	4618      	mov	r0, r3
 8013196:	f7fd fd85 	bl	8010ca4 <ld_dword>
 801319a:	4603      	mov	r3, r0
 801319c:	4a1d      	ldr	r2, [pc, #116]	; (8013214 <find_volume+0x494>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d11e      	bne.n	80131e0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80131a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a4:	3334      	adds	r3, #52	; 0x34
 80131a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fd fd7a 	bl	8010ca4 <ld_dword>
 80131b0:	4603      	mov	r3, r0
 80131b2:	4a19      	ldr	r2, [pc, #100]	; (8013218 <find_volume+0x498>)
 80131b4:	4293      	cmp	r3, r2
 80131b6:	d113      	bne.n	80131e0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80131b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ba:	3334      	adds	r3, #52	; 0x34
 80131bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fd fd6f 	bl	8010ca4 <ld_dword>
 80131c6:	4602      	mov	r2, r0
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80131cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ce:	3334      	adds	r3, #52	; 0x34
 80131d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7fd fd65 	bl	8010ca4 <ld_dword>
 80131da:	4602      	mov	r2, r0
 80131dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131de:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80131e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80131e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80131e8:	4b0c      	ldr	r3, [pc, #48]	; (801321c <find_volume+0x49c>)
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	3301      	adds	r3, #1
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	4b0a      	ldr	r3, [pc, #40]	; (801321c <find_volume+0x49c>)
 80131f2:	801a      	strh	r2, [r3, #0]
 80131f4:	4b09      	ldr	r3, [pc, #36]	; (801321c <find_volume+0x49c>)
 80131f6:	881a      	ldrh	r2, [r3, #0]
 80131f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80131fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fe:	4a08      	ldr	r2, [pc, #32]	; (8013220 <find_volume+0x4a0>)
 8013200:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013202:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013204:	f7fd ff7e 	bl	8011104 <clear_lock>
#endif
	return FR_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3758      	adds	r7, #88	; 0x58
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	41615252 	.word	0x41615252
 8013218:	61417272 	.word	0x61417272
 801321c:	2400a3f4 	.word	0x2400a3f4
 8013220:	2400a418 	.word	0x2400a418

08013224 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801322e:	2309      	movs	r3, #9
 8013230:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d01c      	beq.n	8013272 <validate+0x4e>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d018      	beq.n	8013272 <validate+0x4e>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d013      	beq.n	8013272 <validate+0x4e>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	889a      	ldrh	r2, [r3, #4]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	88db      	ldrh	r3, [r3, #6]
 8013254:	429a      	cmp	r2, r3
 8013256:	d10c      	bne.n	8013272 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	785b      	ldrb	r3, [r3, #1]
 801325e:	4618      	mov	r0, r3
 8013260:	f7fd fc6a 	bl	8010b38 <disk_status>
 8013264:	4603      	mov	r3, r0
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <validate+0x4e>
			res = FR_OK;
 801326e:	2300      	movs	r3, #0
 8013270:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013272:	7bfb      	ldrb	r3, [r7, #15]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <validate+0x5a>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	e000      	b.n	8013280 <validate+0x5c>
 801327e:	2300      	movs	r3, #0
 8013280:	683a      	ldr	r2, [r7, #0]
 8013282:	6013      	str	r3, [r2, #0]
	return res;
 8013284:	7bfb      	ldrb	r3, [r7, #15]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
	...

08013290 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	4613      	mov	r3, r2
 801329c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80132a2:	f107 0310 	add.w	r3, r7, #16
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7ff fccf 	bl	8012c4a <get_ldnumber>
 80132ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	da01      	bge.n	80132b8 <f_mount+0x28>
 80132b4:	230b      	movs	r3, #11
 80132b6:	e02b      	b.n	8013310 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80132b8:	4a17      	ldr	r2, [pc, #92]	; (8013318 <f_mount+0x88>)
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d005      	beq.n	80132d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80132c8:	69b8      	ldr	r0, [r7, #24]
 80132ca:	f7fd ff1b 	bl	8011104 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80132ce:	69bb      	ldr	r3, [r7, #24]
 80132d0:	2200      	movs	r2, #0
 80132d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d002      	beq.n	80132e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2200      	movs	r2, #0
 80132de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	490d      	ldr	r1, [pc, #52]	; (8013318 <f_mount+0x88>)
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d002      	beq.n	80132f6 <f_mount+0x66>
 80132f0:	79fb      	ldrb	r3, [r7, #7]
 80132f2:	2b01      	cmp	r3, #1
 80132f4:	d001      	beq.n	80132fa <f_mount+0x6a>
 80132f6:	2300      	movs	r3, #0
 80132f8:	e00a      	b.n	8013310 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80132fa:	f107 010c 	add.w	r1, r7, #12
 80132fe:	f107 0308 	add.w	r3, r7, #8
 8013302:	2200      	movs	r2, #0
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff fd3b 	bl	8012d80 <find_volume>
 801330a:	4603      	mov	r3, r0
 801330c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3720      	adds	r7, #32
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	2400a3f0 	.word	0x2400a3f0

0801331c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b09a      	sub	sp, #104	; 0x68
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	4613      	mov	r3, r2
 8013328:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <f_open+0x18>
 8013330:	2309      	movs	r3, #9
 8013332:	e1ad      	b.n	8013690 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013334:	79fb      	ldrb	r3, [r7, #7]
 8013336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801333a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801333c:	79fa      	ldrb	r2, [r7, #7]
 801333e:	f107 0110 	add.w	r1, r7, #16
 8013342:	f107 0308 	add.w	r3, r7, #8
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff fd1a 	bl	8012d80 <find_volume>
 801334c:	4603      	mov	r3, r0
 801334e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8013352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013356:	2b00      	cmp	r3, #0
 8013358:	f040 8191 	bne.w	801367e <f_open+0x362>
		dj.obj.fs = fs;
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013360:	68ba      	ldr	r2, [r7, #8]
 8013362:	f107 0314 	add.w	r3, r7, #20
 8013366:	4611      	mov	r1, r2
 8013368:	4618      	mov	r0, r3
 801336a:	f7ff fbfd 	bl	8012b68 <follow_path>
 801336e:	4603      	mov	r3, r0
 8013370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013374:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013378:	2b00      	cmp	r3, #0
 801337a:	d11a      	bne.n	80133b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801337c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013380:	b25b      	sxtb	r3, r3
 8013382:	2b00      	cmp	r3, #0
 8013384:	da03      	bge.n	801338e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013386:	2306      	movs	r3, #6
 8013388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801338c:	e011      	b.n	80133b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801338e:	79fb      	ldrb	r3, [r7, #7]
 8013390:	f023 0301 	bic.w	r3, r3, #1
 8013394:	2b00      	cmp	r3, #0
 8013396:	bf14      	ite	ne
 8013398:	2301      	movne	r3, #1
 801339a:	2300      	moveq	r3, #0
 801339c:	b2db      	uxtb	r3, r3
 801339e:	461a      	mov	r2, r3
 80133a0:	f107 0314 	add.w	r3, r7, #20
 80133a4:	4611      	mov	r1, r2
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fd fd64 	bl	8010e74 <chk_lock>
 80133ac:	4603      	mov	r3, r0
 80133ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80133b2:	79fb      	ldrb	r3, [r7, #7]
 80133b4:	f003 031c 	and.w	r3, r3, #28
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d07f      	beq.n	80134bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80133bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d017      	beq.n	80133f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80133c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80133c8:	2b04      	cmp	r3, #4
 80133ca:	d10e      	bne.n	80133ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80133cc:	f7fd fdae 	bl	8010f2c <enq_lock>
 80133d0:	4603      	mov	r3, r0
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d006      	beq.n	80133e4 <f_open+0xc8>
 80133d6:	f107 0314 	add.w	r3, r7, #20
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe ff94 	bl	8012308 <dir_register>
 80133e0:	4603      	mov	r3, r0
 80133e2:	e000      	b.n	80133e6 <f_open+0xca>
 80133e4:	2312      	movs	r3, #18
 80133e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80133ea:	79fb      	ldrb	r3, [r7, #7]
 80133ec:	f043 0308 	orr.w	r3, r3, #8
 80133f0:	71fb      	strb	r3, [r7, #7]
 80133f2:	e010      	b.n	8013416 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80133f4:	7ebb      	ldrb	r3, [r7, #26]
 80133f6:	f003 0311 	and.w	r3, r3, #17
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d003      	beq.n	8013406 <f_open+0xea>
					res = FR_DENIED;
 80133fe:	2307      	movs	r3, #7
 8013400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013404:	e007      	b.n	8013416 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013406:	79fb      	ldrb	r3, [r7, #7]
 8013408:	f003 0304 	and.w	r3, r3, #4
 801340c:	2b00      	cmp	r3, #0
 801340e:	d002      	beq.n	8013416 <f_open+0xfa>
 8013410:	2308      	movs	r3, #8
 8013412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801341a:	2b00      	cmp	r3, #0
 801341c:	d168      	bne.n	80134f0 <f_open+0x1d4>
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	f003 0308 	and.w	r3, r3, #8
 8013424:	2b00      	cmp	r3, #0
 8013426:	d063      	beq.n	80134f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013428:	f7fa fad4 	bl	800d9d4 <get_fattime>
 801342c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013430:	330e      	adds	r3, #14
 8013432:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013434:	4618      	mov	r0, r3
 8013436:	f7fd fc73 	bl	8010d20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801343c:	3316      	adds	r3, #22
 801343e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013440:	4618      	mov	r0, r3
 8013442:	f7fd fc6d 	bl	8010d20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013448:	330b      	adds	r3, #11
 801344a:	2220      	movs	r2, #32
 801344c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013452:	4611      	mov	r1, r2
 8013454:	4618      	mov	r0, r3
 8013456:	f7fe fbc4 	bl	8011be2 <ld_clust>
 801345a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013460:	2200      	movs	r2, #0
 8013462:	4618      	mov	r0, r3
 8013464:	f7fe fbdc 	bl	8011c20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346a:	331c      	adds	r3, #28
 801346c:	2100      	movs	r1, #0
 801346e:	4618      	mov	r0, r3
 8013470:	f7fd fc56 	bl	8010d20 <st_dword>
					fs->wflag = 1;
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	2201      	movs	r2, #1
 8013478:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801347c:	2b00      	cmp	r3, #0
 801347e:	d037      	beq.n	80134f0 <f_open+0x1d4>
						dw = fs->winsect;
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013484:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013486:	f107 0314 	add.w	r3, r7, #20
 801348a:	2200      	movs	r2, #0
 801348c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801348e:	4618      	mov	r0, r3
 8013490:	f7fe f8ef 	bl	8011672 <remove_chain>
 8013494:	4603      	mov	r3, r0
 8013496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801349a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d126      	bne.n	80134f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7fd fe94 	bl	80111d4 <move_window>
 80134ac:	4603      	mov	r3, r0
 80134ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80134b6:	3a01      	subs	r2, #1
 80134b8:	611a      	str	r2, [r3, #16]
 80134ba:	e019      	b.n	80134f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80134bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d115      	bne.n	80134f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80134c4:	7ebb      	ldrb	r3, [r7, #26]
 80134c6:	f003 0310 	and.w	r3, r3, #16
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d003      	beq.n	80134d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80134ce:	2304      	movs	r3, #4
 80134d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80134d4:	e00c      	b.n	80134f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	f003 0302 	and.w	r3, r3, #2
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d007      	beq.n	80134f0 <f_open+0x1d4>
 80134e0:	7ebb      	ldrb	r3, [r7, #26]
 80134e2:	f003 0301 	and.w	r3, r3, #1
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d002      	beq.n	80134f0 <f_open+0x1d4>
						res = FR_DENIED;
 80134ea:	2307      	movs	r3, #7
 80134ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80134f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d128      	bne.n	801354a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80134f8:	79fb      	ldrb	r3, [r7, #7]
 80134fa:	f003 0308 	and.w	r3, r3, #8
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d003      	beq.n	801350a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013502:	79fb      	ldrb	r3, [r7, #7]
 8013504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013508:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013518:	79fb      	ldrb	r3, [r7, #7]
 801351a:	f023 0301 	bic.w	r3, r3, #1
 801351e:	2b00      	cmp	r3, #0
 8013520:	bf14      	ite	ne
 8013522:	2301      	movne	r3, #1
 8013524:	2300      	moveq	r3, #0
 8013526:	b2db      	uxtb	r3, r3
 8013528:	461a      	mov	r2, r3
 801352a:	f107 0314 	add.w	r3, r7, #20
 801352e:	4611      	mov	r1, r2
 8013530:	4618      	mov	r0, r3
 8013532:	f7fd fd1d 	bl	8010f70 <inc_lock>
 8013536:	4602      	mov	r2, r0
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	691b      	ldr	r3, [r3, #16]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d102      	bne.n	801354a <f_open+0x22e>
 8013544:	2302      	movs	r3, #2
 8013546:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801354a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801354e:	2b00      	cmp	r3, #0
 8013550:	f040 8095 	bne.w	801367e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013558:	4611      	mov	r1, r2
 801355a:	4618      	mov	r0, r3
 801355c:	f7fe fb41 	bl	8011be2 <ld_clust>
 8013560:	4602      	mov	r2, r0
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013568:	331c      	adds	r3, #28
 801356a:	4618      	mov	r0, r3
 801356c:	f7fd fb9a 	bl	8010ca4 <ld_dword>
 8013570:	4602      	mov	r2, r0
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2200      	movs	r2, #0
 801357a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	88da      	ldrh	r2, [r3, #6]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	79fa      	ldrb	r2, [r7, #7]
 801358e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2200      	movs	r2, #0
 80135a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	3330      	adds	r3, #48	; 0x30
 80135a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135aa:	2100      	movs	r1, #0
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7fd fc04 	bl	8010dba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80135b2:	79fb      	ldrb	r3, [r7, #7]
 80135b4:	f003 0320 	and.w	r3, r3, #32
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d060      	beq.n	801367e <f_open+0x362>
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d05c      	beq.n	801367e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	68da      	ldr	r2, [r3, #12]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	895b      	ldrh	r3, [r3, #10]
 80135d0:	025b      	lsls	r3, r3, #9
 80135d2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	689b      	ldr	r3, [r3, #8]
 80135d8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80135e0:	e016      	b.n	8013610 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7fd feaf 	bl	801134a <get_fat>
 80135ec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80135ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d802      	bhi.n	80135fa <f_open+0x2de>
 80135f4:	2302      	movs	r3, #2
 80135f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80135fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80135fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013600:	d102      	bne.n	8013608 <f_open+0x2ec>
 8013602:	2301      	movs	r3, #1
 8013604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013614:	2b00      	cmp	r3, #0
 8013616:	d103      	bne.n	8013620 <f_open+0x304>
 8013618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801361a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801361c:	429a      	cmp	r2, r3
 801361e:	d8e0      	bhi.n	80135e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013624:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013626:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801362a:	2b00      	cmp	r3, #0
 801362c:	d127      	bne.n	801367e <f_open+0x362>
 801362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013634:	2b00      	cmp	r3, #0
 8013636:	d022      	beq.n	801367e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801363c:	4618      	mov	r0, r3
 801363e:	f7fd fe65 	bl	801130c <clust2sect>
 8013642:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013646:	2b00      	cmp	r3, #0
 8013648:	d103      	bne.n	8013652 <f_open+0x336>
						res = FR_INT_ERR;
 801364a:	2302      	movs	r3, #2
 801364c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013650:	e015      	b.n	801367e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013654:	0a5a      	lsrs	r2, r3, #9
 8013656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013658:	441a      	add	r2, r3
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	7858      	ldrb	r0, [r3, #1]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6a1a      	ldr	r2, [r3, #32]
 801366c:	2301      	movs	r3, #1
 801366e:	f7fd faa3 	bl	8010bb8 <disk_read>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <f_open+0x362>
 8013678:	2301      	movs	r3, #1
 801367a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801367e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013682:	2b00      	cmp	r3, #0
 8013684:	d002      	beq.n	801368c <f_open+0x370>
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2200      	movs	r2, #0
 801368a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801368c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8013690:	4618      	mov	r0, r3
 8013692:	3768      	adds	r7, #104	; 0x68
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}

08013698 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b08e      	sub	sp, #56	; 0x38
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
 80136a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	2200      	movs	r2, #0
 80136ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f107 0214 	add.w	r2, r7, #20
 80136b6:	4611      	mov	r1, r2
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff fdb3 	bl	8013224 <validate>
 80136be:	4603      	mov	r3, r0
 80136c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80136c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d107      	bne.n	80136dc <f_read+0x44>
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	7d5b      	ldrb	r3, [r3, #21]
 80136d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80136d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d002      	beq.n	80136e2 <f_read+0x4a>
 80136dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136e0:	e115      	b.n	801390e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	7d1b      	ldrb	r3, [r3, #20]
 80136e6:	f003 0301 	and.w	r3, r3, #1
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d101      	bne.n	80136f2 <f_read+0x5a>
 80136ee:	2307      	movs	r3, #7
 80136f0:	e10d      	b.n	801390e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	68da      	ldr	r2, [r3, #12]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	699b      	ldr	r3, [r3, #24]
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	6a3b      	ldr	r3, [r7, #32]
 8013702:	429a      	cmp	r2, r3
 8013704:	f240 80fe 	bls.w	8013904 <f_read+0x26c>
 8013708:	6a3b      	ldr	r3, [r7, #32]
 801370a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801370c:	e0fa      	b.n	8013904 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	699b      	ldr	r3, [r3, #24]
 8013712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013716:	2b00      	cmp	r3, #0
 8013718:	f040 80c6 	bne.w	80138a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	699b      	ldr	r3, [r3, #24]
 8013720:	0a5b      	lsrs	r3, r3, #9
 8013722:	697a      	ldr	r2, [r7, #20]
 8013724:	8952      	ldrh	r2, [r2, #10]
 8013726:	3a01      	subs	r2, #1
 8013728:	4013      	ands	r3, r2
 801372a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d12f      	bne.n	8013792 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	699b      	ldr	r3, [r3, #24]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d103      	bne.n	8013742 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	689b      	ldr	r3, [r3, #8]
 801373e:	633b      	str	r3, [r7, #48]	; 0x30
 8013740:	e013      	b.n	801376a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013746:	2b00      	cmp	r3, #0
 8013748:	d007      	beq.n	801375a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	4619      	mov	r1, r3
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f7fe f88b 	bl	801186c <clmt_clust>
 8013756:	6338      	str	r0, [r7, #48]	; 0x30
 8013758:	e007      	b.n	801376a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801375a:	68fa      	ldr	r2, [r7, #12]
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	69db      	ldr	r3, [r3, #28]
 8013760:	4619      	mov	r1, r3
 8013762:	4610      	mov	r0, r2
 8013764:	f7fd fdf1 	bl	801134a <get_fat>
 8013768:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376c:	2b01      	cmp	r3, #1
 801376e:	d804      	bhi.n	801377a <f_read+0xe2>
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2202      	movs	r2, #2
 8013774:	755a      	strb	r2, [r3, #21]
 8013776:	2302      	movs	r3, #2
 8013778:	e0c9      	b.n	801390e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013780:	d104      	bne.n	801378c <f_read+0xf4>
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2201      	movs	r2, #1
 8013786:	755a      	strb	r2, [r3, #21]
 8013788:	2301      	movs	r3, #1
 801378a:	e0c0      	b.n	801390e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013790:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013792:	697a      	ldr	r2, [r7, #20]
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	69db      	ldr	r3, [r3, #28]
 8013798:	4619      	mov	r1, r3
 801379a:	4610      	mov	r0, r2
 801379c:	f7fd fdb6 	bl	801130c <clust2sect>
 80137a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d104      	bne.n	80137b2 <f_read+0x11a>
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2202      	movs	r2, #2
 80137ac:	755a      	strb	r2, [r3, #21]
 80137ae:	2302      	movs	r3, #2
 80137b0:	e0ad      	b.n	801390e <f_read+0x276>
			sect += csect;
 80137b2:	69ba      	ldr	r2, [r7, #24]
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	4413      	add	r3, r2
 80137b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	0a5b      	lsrs	r3, r3, #9
 80137be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80137c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d039      	beq.n	801383a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80137c6:	69fa      	ldr	r2, [r7, #28]
 80137c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ca:	4413      	add	r3, r2
 80137cc:	697a      	ldr	r2, [r7, #20]
 80137ce:	8952      	ldrh	r2, [r2, #10]
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d905      	bls.n	80137e0 <f_read+0x148>
					cc = fs->csize - csect;
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	895b      	ldrh	r3, [r3, #10]
 80137d8:	461a      	mov	r2, r3
 80137da:	69fb      	ldr	r3, [r7, #28]
 80137dc:	1ad3      	subs	r3, r2, r3
 80137de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	7858      	ldrb	r0, [r3, #1]
 80137e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e6:	69ba      	ldr	r2, [r7, #24]
 80137e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137ea:	f7fd f9e5 	bl	8010bb8 <disk_read>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d004      	beq.n	80137fe <f_read+0x166>
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2201      	movs	r2, #1
 80137f8:	755a      	strb	r2, [r3, #21]
 80137fa:	2301      	movs	r3, #1
 80137fc:	e087      	b.n	801390e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	7d1b      	ldrb	r3, [r3, #20]
 8013802:	b25b      	sxtb	r3, r3
 8013804:	2b00      	cmp	r3, #0
 8013806:	da14      	bge.n	8013832 <f_read+0x19a>
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	6a1a      	ldr	r2, [r3, #32]
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013812:	429a      	cmp	r2, r3
 8013814:	d90d      	bls.n	8013832 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	6a1a      	ldr	r2, [r3, #32]
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	1ad3      	subs	r3, r2, r3
 801381e:	025b      	lsls	r3, r3, #9
 8013820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013822:	18d0      	adds	r0, r2, r3
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	3330      	adds	r3, #48	; 0x30
 8013828:	f44f 7200 	mov.w	r2, #512	; 0x200
 801382c:	4619      	mov	r1, r3
 801382e:	f7fd faa3 	bl	8010d78 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013834:	025b      	lsls	r3, r3, #9
 8013836:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013838:	e050      	b.n	80138dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6a1b      	ldr	r3, [r3, #32]
 801383e:	69ba      	ldr	r2, [r7, #24]
 8013840:	429a      	cmp	r2, r3
 8013842:	d02e      	beq.n	80138a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	7d1b      	ldrb	r3, [r3, #20]
 8013848:	b25b      	sxtb	r3, r3
 801384a:	2b00      	cmp	r3, #0
 801384c:	da18      	bge.n	8013880 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	7858      	ldrb	r0, [r3, #1]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6a1a      	ldr	r2, [r3, #32]
 801385c:	2301      	movs	r3, #1
 801385e:	f7fd f9cb 	bl	8010bf8 <disk_write>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	d004      	beq.n	8013872 <f_read+0x1da>
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2201      	movs	r2, #1
 801386c:	755a      	strb	r2, [r3, #21]
 801386e:	2301      	movs	r3, #1
 8013870:	e04d      	b.n	801390e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	7d1b      	ldrb	r3, [r3, #20]
 8013876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801387a:	b2da      	uxtb	r2, r3
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	7858      	ldrb	r0, [r3, #1]
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801388a:	2301      	movs	r3, #1
 801388c:	69ba      	ldr	r2, [r7, #24]
 801388e:	f7fd f993 	bl	8010bb8 <disk_read>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d004      	beq.n	80138a2 <f_read+0x20a>
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2201      	movs	r2, #1
 801389c:	755a      	strb	r2, [r3, #21]
 801389e:	2301      	movs	r3, #1
 80138a0:	e035      	b.n	801390e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	69ba      	ldr	r2, [r7, #24]
 80138a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	699b      	ldr	r3, [r3, #24]
 80138ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80138b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80138b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d901      	bls.n	80138c2 <f_read+0x22a>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	699b      	ldr	r3, [r3, #24]
 80138cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138d0:	4413      	add	r3, r2
 80138d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138d4:	4619      	mov	r1, r3
 80138d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138d8:	f7fd fa4e 	bl	8010d78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80138dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e0:	4413      	add	r3, r2
 80138e2:	627b      	str	r3, [r7, #36]	; 0x24
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	699a      	ldr	r2, [r3, #24]
 80138e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ea:	441a      	add	r2, r3
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	619a      	str	r2, [r3, #24]
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f6:	441a      	add	r2, r3
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	601a      	str	r2, [r3, #0]
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013900:	1ad3      	subs	r3, r2, r3
 8013902:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	f47f af01 	bne.w	801370e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801390c:	2300      	movs	r3, #0
}
 801390e:	4618      	mov	r0, r3
 8013910:	3738      	adds	r7, #56	; 0x38
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}

08013916 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013916:	b580      	push	{r7, lr}
 8013918:	b08c      	sub	sp, #48	; 0x30
 801391a:	af00      	add	r7, sp, #0
 801391c:	60f8      	str	r0, [r7, #12]
 801391e:	60b9      	str	r1, [r7, #8]
 8013920:	607a      	str	r2, [r7, #4]
 8013922:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	2200      	movs	r2, #0
 801392c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	f107 0210 	add.w	r2, r7, #16
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff fc74 	bl	8013224 <validate>
 801393c:	4603      	mov	r3, r0
 801393e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013946:	2b00      	cmp	r3, #0
 8013948:	d107      	bne.n	801395a <f_write+0x44>
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	7d5b      	ldrb	r3, [r3, #21]
 801394e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013956:	2b00      	cmp	r3, #0
 8013958:	d002      	beq.n	8013960 <f_write+0x4a>
 801395a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801395e:	e14b      	b.n	8013bf8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	7d1b      	ldrb	r3, [r3, #20]
 8013964:	f003 0302 	and.w	r3, r3, #2
 8013968:	2b00      	cmp	r3, #0
 801396a:	d101      	bne.n	8013970 <f_write+0x5a>
 801396c:	2307      	movs	r3, #7
 801396e:	e143      	b.n	8013bf8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	699a      	ldr	r2, [r3, #24]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	441a      	add	r2, r3
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	699b      	ldr	r3, [r3, #24]
 801397c:	429a      	cmp	r2, r3
 801397e:	f080 812d 	bcs.w	8013bdc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	699b      	ldr	r3, [r3, #24]
 8013986:	43db      	mvns	r3, r3
 8013988:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801398a:	e127      	b.n	8013bdc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	699b      	ldr	r3, [r3, #24]
 8013990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013994:	2b00      	cmp	r3, #0
 8013996:	f040 80e3 	bne.w	8013b60 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	699b      	ldr	r3, [r3, #24]
 801399e:	0a5b      	lsrs	r3, r3, #9
 80139a0:	693a      	ldr	r2, [r7, #16]
 80139a2:	8952      	ldrh	r2, [r2, #10]
 80139a4:	3a01      	subs	r2, #1
 80139a6:	4013      	ands	r3, r2
 80139a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d143      	bne.n	8013a38 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	699b      	ldr	r3, [r3, #24]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10c      	bne.n	80139d2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80139be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d11a      	bne.n	80139fa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2100      	movs	r1, #0
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fd feb7 	bl	801173c <create_chain>
 80139ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80139d0:	e013      	b.n	80139fa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d007      	beq.n	80139ea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	699b      	ldr	r3, [r3, #24]
 80139de:	4619      	mov	r1, r3
 80139e0:	68f8      	ldr	r0, [r7, #12]
 80139e2:	f7fd ff43 	bl	801186c <clmt_clust>
 80139e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80139e8:	e007      	b.n	80139fa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	69db      	ldr	r3, [r3, #28]
 80139f0:	4619      	mov	r1, r3
 80139f2:	4610      	mov	r0, r2
 80139f4:	f7fd fea2 	bl	801173c <create_chain>
 80139f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80139fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	f000 80f2 	beq.w	8013be6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d104      	bne.n	8013a12 <f_write+0xfc>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2202      	movs	r2, #2
 8013a0c:	755a      	strb	r2, [r3, #21]
 8013a0e:	2302      	movs	r3, #2
 8013a10:	e0f2      	b.n	8013bf8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a18:	d104      	bne.n	8013a24 <f_write+0x10e>
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	755a      	strb	r2, [r3, #21]
 8013a20:	2301      	movs	r3, #1
 8013a22:	e0e9      	b.n	8013bf8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	689b      	ldr	r3, [r3, #8]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d102      	bne.n	8013a38 <f_write+0x122>
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	7d1b      	ldrb	r3, [r3, #20]
 8013a3c:	b25b      	sxtb	r3, r3
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	da18      	bge.n	8013a74 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	7858      	ldrb	r0, [r3, #1]
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6a1a      	ldr	r2, [r3, #32]
 8013a50:	2301      	movs	r3, #1
 8013a52:	f7fd f8d1 	bl	8010bf8 <disk_write>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d004      	beq.n	8013a66 <f_write+0x150>
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2201      	movs	r2, #1
 8013a60:	755a      	strb	r2, [r3, #21]
 8013a62:	2301      	movs	r3, #1
 8013a64:	e0c8      	b.n	8013bf8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	7d1b      	ldrb	r3, [r3, #20]
 8013a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a6e:	b2da      	uxtb	r2, r3
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013a74:	693a      	ldr	r2, [r7, #16]
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	69db      	ldr	r3, [r3, #28]
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	4610      	mov	r0, r2
 8013a7e:	f7fd fc45 	bl	801130c <clust2sect>
 8013a82:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d104      	bne.n	8013a94 <f_write+0x17e>
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2202      	movs	r2, #2
 8013a8e:	755a      	strb	r2, [r3, #21]
 8013a90:	2302      	movs	r3, #2
 8013a92:	e0b1      	b.n	8013bf8 <f_write+0x2e2>
			sect += csect;
 8013a94:	697a      	ldr	r2, [r7, #20]
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	4413      	add	r3, r2
 8013a9a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	0a5b      	lsrs	r3, r3, #9
 8013aa0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d03c      	beq.n	8013b22 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013aa8:	69ba      	ldr	r2, [r7, #24]
 8013aaa:	6a3b      	ldr	r3, [r7, #32]
 8013aac:	4413      	add	r3, r2
 8013aae:	693a      	ldr	r2, [r7, #16]
 8013ab0:	8952      	ldrh	r2, [r2, #10]
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d905      	bls.n	8013ac2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	895b      	ldrh	r3, [r3, #10]
 8013aba:	461a      	mov	r2, r3
 8013abc:	69bb      	ldr	r3, [r7, #24]
 8013abe:	1ad3      	subs	r3, r2, r3
 8013ac0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	7858      	ldrb	r0, [r3, #1]
 8013ac6:	6a3b      	ldr	r3, [r7, #32]
 8013ac8:	697a      	ldr	r2, [r7, #20]
 8013aca:	69f9      	ldr	r1, [r7, #28]
 8013acc:	f7fd f894 	bl	8010bf8 <disk_write>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d004      	beq.n	8013ae0 <f_write+0x1ca>
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	755a      	strb	r2, [r3, #21]
 8013adc:	2301      	movs	r3, #1
 8013ade:	e08b      	b.n	8013bf8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6a1a      	ldr	r2, [r3, #32]
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	1ad3      	subs	r3, r2, r3
 8013ae8:	6a3a      	ldr	r2, [r7, #32]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d915      	bls.n	8013b1a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6a1a      	ldr	r2, [r3, #32]
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	1ad3      	subs	r3, r2, r3
 8013afc:	025b      	lsls	r3, r3, #9
 8013afe:	69fa      	ldr	r2, [r7, #28]
 8013b00:	4413      	add	r3, r2
 8013b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b06:	4619      	mov	r1, r3
 8013b08:	f7fd f936 	bl	8010d78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	7d1b      	ldrb	r3, [r3, #20]
 8013b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b14:	b2da      	uxtb	r2, r3
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b1a:	6a3b      	ldr	r3, [r7, #32]
 8013b1c:	025b      	lsls	r3, r3, #9
 8013b1e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013b20:	e03f      	b.n	8013ba2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6a1b      	ldr	r3, [r3, #32]
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d016      	beq.n	8013b5a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	699a      	ldr	r2, [r3, #24]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d210      	bcs.n	8013b5a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	7858      	ldrb	r0, [r3, #1]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b42:	2301      	movs	r3, #1
 8013b44:	697a      	ldr	r2, [r7, #20]
 8013b46:	f7fd f837 	bl	8010bb8 <disk_read>
 8013b4a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d004      	beq.n	8013b5a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2201      	movs	r2, #1
 8013b54:	755a      	strb	r2, [r3, #21]
 8013b56:	2301      	movs	r3, #1
 8013b58:	e04e      	b.n	8013bf8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	697a      	ldr	r2, [r7, #20]
 8013b5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	699b      	ldr	r3, [r3, #24]
 8013b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013b6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d901      	bls.n	8013b7a <f_write+0x264>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	699b      	ldr	r3, [r3, #24]
 8013b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b88:	4413      	add	r3, r2
 8013b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b8c:	69f9      	ldr	r1, [r7, #28]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fd f8f2 	bl	8010d78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	7d1b      	ldrb	r3, [r3, #20]
 8013b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b9c:	b2da      	uxtb	r2, r3
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013ba2:	69fa      	ldr	r2, [r7, #28]
 8013ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba6:	4413      	add	r3, r2
 8013ba8:	61fb      	str	r3, [r7, #28]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	699a      	ldr	r2, [r3, #24]
 8013bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb0:	441a      	add	r2, r3
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	619a      	str	r2, [r3, #24]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	68da      	ldr	r2, [r3, #12]
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	699b      	ldr	r3, [r3, #24]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	bf38      	it	cc
 8013bc2:	461a      	movcc	r2, r3
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	60da      	str	r2, [r3, #12]
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bce:	441a      	add	r2, r3
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	601a      	str	r2, [r3, #0]
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f47f aed4 	bne.w	801398c <f_write+0x76>
 8013be4:	e000      	b.n	8013be8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013be6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	7d1b      	ldrb	r3, [r3, #20]
 8013bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bf0:	b2da      	uxtb	r2, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013bf6:	2300      	movs	r3, #0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3730      	adds	r7, #48	; 0x30
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b086      	sub	sp, #24
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f107 0208 	add.w	r2, r7, #8
 8013c0e:	4611      	mov	r1, r2
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7ff fb07 	bl	8013224 <validate>
 8013c16:	4603      	mov	r3, r0
 8013c18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c1a:	7dfb      	ldrb	r3, [r7, #23]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d168      	bne.n	8013cf2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	7d1b      	ldrb	r3, [r3, #20]
 8013c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d062      	beq.n	8013cf2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7d1b      	ldrb	r3, [r3, #20]
 8013c30:	b25b      	sxtb	r3, r3
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	da15      	bge.n	8013c62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	7858      	ldrb	r0, [r3, #1]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6a1a      	ldr	r2, [r3, #32]
 8013c44:	2301      	movs	r3, #1
 8013c46:	f7fc ffd7 	bl	8010bf8 <disk_write>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d001      	beq.n	8013c54 <f_sync+0x54>
 8013c50:	2301      	movs	r3, #1
 8013c52:	e04f      	b.n	8013cf4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	7d1b      	ldrb	r3, [r3, #20]
 8013c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c62:	f7f9 feb7 	bl	800d9d4 <get_fattime>
 8013c66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c6e:	4619      	mov	r1, r3
 8013c70:	4610      	mov	r0, r2
 8013c72:	f7fd faaf 	bl	80111d4 <move_window>
 8013c76:	4603      	mov	r3, r0
 8013c78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013c7a:	7dfb      	ldrb	r3, [r7, #23]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d138      	bne.n	8013cf2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	330b      	adds	r3, #11
 8013c8a:	781a      	ldrb	r2, [r3, #0]
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	330b      	adds	r3, #11
 8013c90:	f042 0220 	orr.w	r2, r2, #32
 8013c94:	b2d2      	uxtb	r2, r2
 8013c96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6818      	ldr	r0, [r3, #0]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	689b      	ldr	r3, [r3, #8]
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	68f9      	ldr	r1, [r7, #12]
 8013ca4:	f7fd ffbc 	bl	8011c20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f103 021c 	add.w	r2, r3, #28
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	f7fd f833 	bl	8010d20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	3316      	adds	r3, #22
 8013cbe:	6939      	ldr	r1, [r7, #16]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fd f82d 	bl	8010d20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	3312      	adds	r3, #18
 8013cca:	2100      	movs	r1, #0
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7fd f80c 	bl	8010cea <st_word>
					fs->wflag = 1;
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7fd faa8 	bl	8011230 <sync_fs>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	7d1b      	ldrb	r3, [r3, #20]
 8013ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cec:	b2da      	uxtb	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3718      	adds	r7, #24
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f7ff ff7b 	bl	8013c00 <f_sync>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d0e:	7bfb      	ldrb	r3, [r7, #15]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d118      	bne.n	8013d46 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f107 0208 	add.w	r2, r7, #8
 8013d1a:	4611      	mov	r1, r2
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7ff fa81 	bl	8013224 <validate>
 8013d22:	4603      	mov	r3, r0
 8013d24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d26:	7bfb      	ldrb	r3, [r7, #15]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d10c      	bne.n	8013d46 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	691b      	ldr	r3, [r3, #16]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fd f9ab 	bl	801108c <dec_lock>
 8013d36:	4603      	mov	r3, r0
 8013d38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013d3a:	7bfb      	ldrb	r3, [r7, #15]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d102      	bne.n	8013d46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2200      	movs	r2, #0
 8013d44:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3710      	adds	r7, #16
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}

08013d50 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d101      	bne.n	8013d64 <f_opendir+0x14>
 8013d60:	2309      	movs	r3, #9
 8013d62:	e064      	b.n	8013e2e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013d68:	f107 010c 	add.w	r1, r7, #12
 8013d6c:	463b      	mov	r3, r7
 8013d6e:	2200      	movs	r2, #0
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7ff f805 	bl	8012d80 <find_volume>
 8013d76:	4603      	mov	r3, r0
 8013d78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d7a:	7dfb      	ldrb	r3, [r7, #23]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d14f      	bne.n	8013e20 <f_opendir+0xd0>
		obj->fs = fs;
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	4619      	mov	r1, r3
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f7fe feec 	bl	8012b68 <follow_path>
 8013d90:	4603      	mov	r3, r0
 8013d92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013d94:	7dfb      	ldrb	r3, [r7, #23]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d13d      	bne.n	8013e16 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013da0:	b25b      	sxtb	r3, r3
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	db12      	blt.n	8013dcc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	799b      	ldrb	r3, [r3, #6]
 8013daa:	f003 0310 	and.w	r3, r3, #16
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d00a      	beq.n	8013dc8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6a1b      	ldr	r3, [r3, #32]
 8013db8:	4619      	mov	r1, r3
 8013dba:	4610      	mov	r0, r2
 8013dbc:	f7fd ff11 	bl	8011be2 <ld_clust>
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	609a      	str	r2, [r3, #8]
 8013dc6:	e001      	b.n	8013dcc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013dc8:	2305      	movs	r3, #5
 8013dca:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013dcc:	7dfb      	ldrb	r3, [r7, #23]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d121      	bne.n	8013e16 <f_opendir+0xc6>
				obj->id = fs->id;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	88da      	ldrh	r2, [r3, #6]
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013dda:	2100      	movs	r1, #0
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7fd fd79 	bl	80118d4 <dir_sdi>
 8013de2:	4603      	mov	r3, r0
 8013de4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d114      	bne.n	8013e16 <f_opendir+0xc6>
					if (obj->sclust) {
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d00d      	beq.n	8013e10 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013df4:	2100      	movs	r1, #0
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7fd f8ba 	bl	8010f70 <inc_lock>
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d105      	bne.n	8013e16 <f_opendir+0xc6>
 8013e0a:	2312      	movs	r3, #18
 8013e0c:	75fb      	strb	r3, [r7, #23]
 8013e0e:	e002      	b.n	8013e16 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	2200      	movs	r2, #0
 8013e14:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013e16:	7dfb      	ldrb	r3, [r7, #23]
 8013e18:	2b04      	cmp	r3, #4
 8013e1a:	d101      	bne.n	8013e20 <f_opendir+0xd0>
 8013e1c:	2305      	movs	r3, #5
 8013e1e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013e20:	7dfb      	ldrb	r3, [r7, #23]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d002      	beq.n	8013e2c <f_opendir+0xdc>
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3718      	adds	r7, #24
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b084      	sub	sp, #16
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f107 0208 	add.w	r2, r7, #8
 8013e44:	4611      	mov	r1, r2
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff f9ec 	bl	8013224 <validate>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013e50:	7bfb      	ldrb	r3, [r7, #15]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d110      	bne.n	8013e78 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d006      	beq.n	8013e6c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fd f912 	bl	801108c <dec_lock>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013e6c:	7bfb      	ldrb	r3, [r7, #15]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d102      	bne.n	8013e78 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8013e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3710      	adds	r7, #16
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b084      	sub	sp, #16
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f107 0208 	add.w	r2, r7, #8
 8013e92:	4611      	mov	r1, r2
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7ff f9c5 	bl	8013224 <validate>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013e9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d126      	bne.n	8013ef2 <f_readdir+0x70>
		if (!fno) {
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d106      	bne.n	8013eb8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013eaa:	2100      	movs	r1, #0
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7fd fd11 	bl	80118d4 <dir_sdi>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	73fb      	strb	r3, [r7, #15]
 8013eb6:	e01c      	b.n	8013ef2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013eb8:	2100      	movs	r1, #0
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7fe f8bd 	bl	801203a <dir_read>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013ec4:	7bfb      	ldrb	r3, [r7, #15]
 8013ec6:	2b04      	cmp	r3, #4
 8013ec8:	d101      	bne.n	8013ece <f_readdir+0x4c>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d10e      	bne.n	8013ef2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013ed4:	6839      	ldr	r1, [r7, #0]
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f7fe fb0e 	bl	80124f8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013edc:	2100      	movs	r1, #0
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7fd fd73 	bl	80119ca <dir_next>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013ee8:	7bfb      	ldrb	r3, [r7, #15]
 8013eea:	2b04      	cmp	r3, #4
 8013eec:	d101      	bne.n	8013ef2 <f_readdir+0x70>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3710      	adds	r7, #16
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f7ff ffba 	bl	8013e82 <f_readdir>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8013f12:	7bfb      	ldrb	r3, [r7, #15]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d114      	bne.n	8013f42 <f_findnext+0x46>
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d011      	beq.n	8013f42 <f_findnext+0x46>
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	7d9b      	ldrb	r3, [r3, #22]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d00d      	beq.n	8013f42 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	f103 0116 	add.w	r1, r3, #22
 8013f30:	2300      	movs	r3, #0
 8013f32:	2200      	movs	r2, #0
 8013f34:	f7fe fbe4 	bl	8012700 <pattern_matching>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d100      	bne.n	8013f40 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8013f3e:	e7e2      	b.n	8013f06 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8013f40:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8013f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3710      	adds	r7, #16
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b086      	sub	sp, #24
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	60f8      	str	r0, [r7, #12]
 8013f54:	60b9      	str	r1, [r7, #8]
 8013f56:	607a      	str	r2, [r7, #4]
 8013f58:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8013f60:	6879      	ldr	r1, [r7, #4]
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	f7ff fef4 	bl	8013d50 <f_opendir>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d105      	bne.n	8013f7e <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8013f72:	68b9      	ldr	r1, [r7, #8]
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f7ff ffc1 	bl	8013efc <f_findnext>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8013f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3718      	adds	r7, #24
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b092      	sub	sp, #72	; 0x48
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013f92:	f107 010c 	add.w	r1, r7, #12
 8013f96:	1d3b      	adds	r3, r7, #4
 8013f98:	2200      	movs	r2, #0
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fe fef0 	bl	8012d80 <find_volume>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8013fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d11f      	bne.n	8013fee <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	f107 030c 	add.w	r3, r7, #12
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fe fdd6 	bl	8012b68 <follow_path>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 8013fc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d111      	bne.n	8013fee <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8013fca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013fce:	b25b      	sxtb	r3, r3
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	da03      	bge.n	8013fdc <f_stat+0x54>
				res = FR_INVALID_NAME;
 8013fd4:	2306      	movs	r3, #6
 8013fd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013fda:	e008      	b.n	8013fee <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d005      	beq.n	8013fee <f_stat+0x66>
 8013fe2:	f107 030c 	add.w	r3, r7, #12
 8013fe6:	6839      	ldr	r1, [r7, #0]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fe fa85 	bl	80124f8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8013fee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3748      	adds	r7, #72	; 0x48
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8013ffa:	b580      	push	{r7, lr}
 8013ffc:	b092      	sub	sp, #72	; 0x48
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	60f8      	str	r0, [r7, #12]
 8014002:	60b9      	str	r1, [r7, #8]
 8014004:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014006:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801400a:	f107 030c 	add.w	r3, r7, #12
 801400e:	2200      	movs	r2, #0
 8014010:	4618      	mov	r0, r3
 8014012:	f7fe feb5 	bl	8012d80 <find_volume>
 8014016:	4603      	mov	r3, r0
 8014018:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801401c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014020:	2b00      	cmp	r3, #0
 8014022:	f040 8099 	bne.w	8014158 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8014026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402e:	695a      	ldr	r2, [r3, #20]
 8014030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014032:	699b      	ldr	r3, [r3, #24]
 8014034:	3b02      	subs	r3, #2
 8014036:	429a      	cmp	r2, r3
 8014038:	d804      	bhi.n	8014044 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403c:	695a      	ldr	r2, [r3, #20]
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	601a      	str	r2, [r3, #0]
 8014042:	e089      	b.n	8014158 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8014044:	2300      	movs	r3, #0
 8014046:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8014048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	2b01      	cmp	r3, #1
 801404e:	d128      	bne.n	80140a2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8014050:	2302      	movs	r3, #2
 8014052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014056:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8014058:	f107 0314 	add.w	r3, r7, #20
 801405c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801405e:	4618      	mov	r0, r3
 8014060:	f7fd f973 	bl	801134a <get_fat>
 8014064:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d103      	bne.n	8014076 <f_getfree+0x7c>
 801406e:	2301      	movs	r3, #1
 8014070:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014074:	e063      	b.n	801413e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	2b01      	cmp	r3, #1
 801407a:	d103      	bne.n	8014084 <f_getfree+0x8a>
 801407c:	2302      	movs	r3, #2
 801407e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014082:	e05c      	b.n	801413e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8014084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014086:	2b00      	cmp	r3, #0
 8014088:	d102      	bne.n	8014090 <f_getfree+0x96>
 801408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801408c:	3301      	adds	r3, #1
 801408e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8014090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014092:	3301      	adds	r3, #1
 8014094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014098:	699b      	ldr	r3, [r3, #24]
 801409a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801409c:	429a      	cmp	r2, r3
 801409e:	d3db      	bcc.n	8014058 <f_getfree+0x5e>
 80140a0:	e04d      	b.n	801413e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80140a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a4:	699b      	ldr	r3, [r3, #24]
 80140a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ac:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80140ae:	2300      	movs	r3, #0
 80140b0:	637b      	str	r3, [r7, #52]	; 0x34
 80140b2:	2300      	movs	r3, #0
 80140b4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80140b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d113      	bne.n	80140e4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80140bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c0:	1c5a      	adds	r2, r3, #1
 80140c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80140c4:	4619      	mov	r1, r3
 80140c6:	f7fd f885 	bl	80111d4 <move_window>
 80140ca:	4603      	mov	r3, r0
 80140cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80140d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d131      	bne.n	801413c <f_getfree+0x142>
							p = fs->win;
 80140d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140da:	3334      	adds	r3, #52	; 0x34
 80140dc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80140de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140e2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80140e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d10f      	bne.n	801410c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80140ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140ee:	f7fc fdc1 	bl	8010c74 <ld_word>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d102      	bne.n	80140fe <f_getfree+0x104>
 80140f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140fa:	3301      	adds	r3, #1
 80140fc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80140fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014100:	3302      	adds	r3, #2
 8014102:	633b      	str	r3, [r7, #48]	; 0x30
 8014104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014106:	3b02      	subs	r3, #2
 8014108:	637b      	str	r3, [r7, #52]	; 0x34
 801410a:	e010      	b.n	801412e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801410c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801410e:	f7fc fdc9 	bl	8010ca4 <ld_dword>
 8014112:	4603      	mov	r3, r0
 8014114:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014118:	2b00      	cmp	r3, #0
 801411a:	d102      	bne.n	8014122 <f_getfree+0x128>
 801411c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801411e:	3301      	adds	r3, #1
 8014120:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8014122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014124:	3304      	adds	r3, #4
 8014126:	633b      	str	r3, [r7, #48]	; 0x30
 8014128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801412a:	3b04      	subs	r3, #4
 801412c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014130:	3b01      	subs	r3, #1
 8014132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1bd      	bne.n	80140b6 <f_getfree+0xbc>
 801413a:	e000      	b.n	801413e <f_getfree+0x144>
							if (res != FR_OK) break;
 801413c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014142:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8014144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014148:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414c:	791a      	ldrb	r2, [r3, #4]
 801414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014150:	f042 0201 	orr.w	r2, r2, #1
 8014154:	b2d2      	uxtb	r2, r2
 8014156:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8014158:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801415c:	4618      	mov	r0, r3
 801415e:	3748      	adds	r7, #72	; 0x48
 8014160:	46bd      	mov	sp, r7
 8014162:	bd80      	pop	{r7, pc}

08014164 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014164:	b480      	push	{r7}
 8014166:	b087      	sub	sp, #28
 8014168:	af00      	add	r7, sp, #0
 801416a:	60f8      	str	r0, [r7, #12]
 801416c:	60b9      	str	r1, [r7, #8]
 801416e:	4613      	mov	r3, r2
 8014170:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014172:	2301      	movs	r3, #1
 8014174:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014176:	2300      	movs	r3, #0
 8014178:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801417a:	4b1f      	ldr	r3, [pc, #124]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 801417c:	7a5b      	ldrb	r3, [r3, #9]
 801417e:	b2db      	uxtb	r3, r3
 8014180:	2b00      	cmp	r3, #0
 8014182:	d131      	bne.n	80141e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014184:	4b1c      	ldr	r3, [pc, #112]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 8014186:	7a5b      	ldrb	r3, [r3, #9]
 8014188:	b2db      	uxtb	r3, r3
 801418a:	461a      	mov	r2, r3
 801418c:	4b1a      	ldr	r3, [pc, #104]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 801418e:	2100      	movs	r1, #0
 8014190:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014192:	4b19      	ldr	r3, [pc, #100]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 8014194:	7a5b      	ldrb	r3, [r3, #9]
 8014196:	b2db      	uxtb	r3, r3
 8014198:	4a17      	ldr	r2, [pc, #92]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	68fa      	ldr	r2, [r7, #12]
 80141a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80141a2:	4b15      	ldr	r3, [pc, #84]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 80141a4:	7a5b      	ldrb	r3, [r3, #9]
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	461a      	mov	r2, r3
 80141aa:	4b13      	ldr	r3, [pc, #76]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 80141ac:	4413      	add	r3, r2
 80141ae:	79fa      	ldrb	r2, [r7, #7]
 80141b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80141b2:	4b11      	ldr	r3, [pc, #68]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 80141b4:	7a5b      	ldrb	r3, [r3, #9]
 80141b6:	b2db      	uxtb	r3, r3
 80141b8:	1c5a      	adds	r2, r3, #1
 80141ba:	b2d1      	uxtb	r1, r2
 80141bc:	4a0e      	ldr	r2, [pc, #56]	; (80141f8 <FATFS_LinkDriverEx+0x94>)
 80141be:	7251      	strb	r1, [r2, #9]
 80141c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80141c2:	7dbb      	ldrb	r3, [r7, #22]
 80141c4:	3330      	adds	r3, #48	; 0x30
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	3301      	adds	r3, #1
 80141d0:	223a      	movs	r2, #58	; 0x3a
 80141d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	3302      	adds	r3, #2
 80141d8:	222f      	movs	r2, #47	; 0x2f
 80141da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	3303      	adds	r3, #3
 80141e0:	2200      	movs	r2, #0
 80141e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80141e4:	2300      	movs	r3, #0
 80141e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80141e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	371c      	adds	r7, #28
 80141ee:	46bd      	mov	sp, r7
 80141f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f4:	4770      	bx	lr
 80141f6:	bf00      	nop
 80141f8:	2400a618 	.word	0x2400a618

080141fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014206:	2200      	movs	r2, #0
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff ffaa 	bl	8014164 <FATFS_LinkDriverEx>
 8014210:	4603      	mov	r3, r0
}
 8014212:	4618      	mov	r0, r3
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 801421a:	b480      	push	{r7}
 801421c:	b083      	sub	sp, #12
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	605a      	str	r2, [r3, #4]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	685a      	ldr	r2, [r3, #4]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	601a      	str	r2, [r3, #0]
}
 8014230:	bf00      	nop
 8014232:	370c      	adds	r7, #12
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr

0801423c <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 801423c:	b480      	push	{r7}
 801423e:	b083      	sub	sp, #12
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	685a      	ldr	r2, [r3, #4]
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	687a      	ldr	r2, [r7, #4]
 8014252:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	683a      	ldr	r2, [r7, #0]
 801425a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	683a      	ldr	r2, [r7, #0]
 8014262:	601a      	str	r2, [r3, #0]
}
 8014264:	bf00      	nop
 8014266:	370c      	adds	r7, #12
 8014268:	46bd      	mov	sp, r7
 801426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426e:	4770      	bx	lr

08014270 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 801427a:	6839      	ldr	r1, [r7, #0]
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7ff ffdd 	bl	801423c <metal_list_add_before>
}
 8014282:	bf00      	nop
 8014284:	3708      	adds	r7, #8
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}

0801428a <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 801428a:	b580      	push	{r7, lr}
 801428c:	b082      	sub	sp, #8
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8014294:	6839      	ldr	r1, [r7, #0]
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f001 ff8a 	bl	80161b0 <metal_machine_cache_flush>
}
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80142ae:	6839      	ldr	r1, [r7, #0]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f001 ff88 	bl	80161c6 <metal_machine_cache_invalidate>
}
 80142b6:	bf00      	nop
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b082      	sub	sp, #8
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80142c8:	6839      	ldr	r1, [r7, #0]
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f7ff ffdd 	bl	801428a <__metal_cache_flush>
}
 80142d0:	bf00      	nop
 80142d2:	3708      	adds	r7, #8
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80142e2:	6839      	ldr	r1, [r7, #0]
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f7ff ffdd 	bl	80142a4 <__metal_cache_invalidate>
}
 80142ea:	bf00      	nop
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
	...

080142f4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d008      	beq.n	8014314 <metal_bus_register+0x20>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d004      	beq.n	8014314 <metal_bus_register+0x20>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <metal_bus_register+0x26>
		return -EINVAL;
 8014314:	f06f 0315 	mvn.w	r3, #21
 8014318:	e026      	b.n	8014368 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2100      	movs	r1, #0
 8014320:	4618      	mov	r0, r3
 8014322:	f000 f82b 	bl	801437c <metal_bus_find>
 8014326:	4603      	mov	r3, r0
 8014328:	2b00      	cmp	r3, #0
 801432a:	d102      	bne.n	8014332 <metal_bus_register+0x3e>
		return -EEXIST;
 801432c:	f06f 0310 	mvn.w	r3, #16
 8014330:	e01a      	b.n	8014368 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	331c      	adds	r3, #28
 8014336:	4618      	mov	r0, r3
 8014338:	f7ff ff6f 	bl	801421a <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	3324      	adds	r3, #36	; 0x24
 8014340:	4619      	mov	r1, r3
 8014342:	480b      	ldr	r0, [pc, #44]	; (8014370 <metal_bus_register+0x7c>)
 8014344:	f7ff ff94 	bl	8014270 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8014348:	4b0a      	ldr	r3, [pc, #40]	; (8014374 <metal_bus_register+0x80>)
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	2b06      	cmp	r3, #6
 801434e:	d90a      	bls.n	8014366 <metal_bus_register+0x72>
 8014350:	4b08      	ldr	r3, [pc, #32]	; (8014374 <metal_bus_register+0x80>)
 8014352:	685b      	ldr	r3, [r3, #4]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d006      	beq.n	8014366 <metal_bus_register+0x72>
 8014358:	4b06      	ldr	r3, [pc, #24]	; (8014374 <metal_bus_register+0x80>)
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	687a      	ldr	r2, [r7, #4]
 801435e:	6812      	ldr	r2, [r2, #0]
 8014360:	4905      	ldr	r1, [pc, #20]	; (8014378 <metal_bus_register+0x84>)
 8014362:	2007      	movs	r0, #7
 8014364:	4798      	blx	r3
	return 0;
 8014366:	2300      	movs	r3, #0
}
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	2400b970 	.word	0x2400b970
 8014374:	2400b968 	.word	0x2400b968
 8014378:	08020360 	.word	0x08020360

0801437c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8014386:	4b13      	ldr	r3, [pc, #76]	; (80143d4 <metal_bus_find+0x58>)
 8014388:	689b      	ldr	r3, [r3, #8]
 801438a:	60fb      	str	r3, [r7, #12]
 801438c:	e017      	b.n	80143be <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	3b24      	subs	r3, #36	; 0x24
 8014392:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	6879      	ldr	r1, [r7, #4]
 801439a:	4618      	mov	r0, r3
 801439c:	f7eb ffa0 	bl	80002e0 <strcmp>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d003      	beq.n	80143ae <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	60fb      	str	r3, [r7, #12]
 80143ac:	e007      	b.n	80143be <metal_bus_find+0x42>
			continue;
		if (result)
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d002      	beq.n	80143ba <metal_bus_find+0x3e>
			*result = bus;
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	68ba      	ldr	r2, [r7, #8]
 80143b8:	601a      	str	r2, [r3, #0]
		return 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	e005      	b.n	80143ca <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	4a05      	ldr	r2, [pc, #20]	; (80143d8 <metal_bus_find+0x5c>)
 80143c2:	4293      	cmp	r3, r2
 80143c4:	d1e3      	bne.n	801438e <metal_bus_find+0x12>
	}
	return -ENOENT;
 80143c6:	f06f 0301 	mvn.w	r3, #1
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	2400b968 	.word	0x2400b968
 80143d8:	2400b970 	.word	0x2400b970

080143dc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b086      	sub	sp, #24
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00d      	beq.n	801440a <metal_device_open+0x2e>
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d009      	beq.n	801440a <metal_device_open+0x2e>
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d006      	beq.n	801440a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d002      	beq.n	801440a <metal_device_open+0x2e>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d102      	bne.n	8014410 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 801440a:	f06f 0315 	mvn.w	r3, #21
 801440e:	e01f      	b.n	8014450 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8014410:	f107 0310 	add.w	r3, r7, #16
 8014414:	4619      	mov	r1, r3
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f7ff ffb0 	bl	801437c <metal_bus_find>
 801441c:	6178      	str	r0, [r7, #20]
	if (error)
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d001      	beq.n	8014428 <metal_device_open+0x4c>
		return error;
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	e013      	b.n	8014450 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	689b      	ldr	r3, [r3, #8]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d102      	bne.n	8014436 <metal_device_open+0x5a>
		return -ENODEV;
 8014430:	f06f 0312 	mvn.w	r3, #18
 8014434:	e00c      	b.n	8014450 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	689b      	ldr	r3, [r3, #8]
 801443a:	6938      	ldr	r0, [r7, #16]
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	68b9      	ldr	r1, [r7, #8]
 8014440:	4798      	blx	r3
 8014442:	6178      	str	r0, [r7, #20]
	if (error)
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d001      	beq.n	801444e <metal_device_open+0x72>
		return error;
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	e000      	b.n	8014450 <metal_device_open+0x74>

	return 0;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	3718      	adds	r7, #24
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d008      	beq.n	801447a <metal_register_generic_device+0x22>
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d003      	beq.n	801447a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8014476:	2b02      	cmp	r3, #2
 8014478:	d902      	bls.n	8014480 <metal_register_generic_device+0x28>
		return -EINVAL;
 801447a:	f06f 0315 	mvn.w	r3, #21
 801447e:	e009      	b.n	8014494 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	4a06      	ldr	r2, [pc, #24]	; (801449c <metal_register_generic_device+0x44>)
 8014484:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	336c      	adds	r3, #108	; 0x6c
 801448a:	4619      	mov	r1, r3
 801448c:	4804      	ldr	r0, [pc, #16]	; (80144a0 <metal_register_generic_device+0x48>)
 801448e:	f7ff feef 	bl	8014270 <metal_list_add_tail>
			    &device->node);
	return 0;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3708      	adds	r7, #8
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	24000060 	.word	0x24000060
 80144a0:	2400b980 	.word	0x2400b980

080144a4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b086      	sub	sp, #24
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80144b0:	4b12      	ldr	r3, [pc, #72]	; (80144fc <metal_generic_dev_open+0x58>)
 80144b2:	699b      	ldr	r3, [r3, #24]
 80144b4:	617b      	str	r3, [r7, #20]
 80144b6:	e017      	b.n	80144e8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	3b6c      	subs	r3, #108	; 0x6c
 80144bc:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	68b9      	ldr	r1, [r7, #8]
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7eb ff0b 	bl	80002e0 <strcmp>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d003      	beq.n	80144d8 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	617b      	str	r3, [r7, #20]
 80144d6:	e007      	b.n	80144e8 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	693a      	ldr	r2, [r7, #16]
 80144dc:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 80144de:	6938      	ldr	r0, [r7, #16]
 80144e0:	f000 f88c 	bl	80145fc <metal_generic_dev_sys_open>
 80144e4:	4603      	mov	r3, r0
 80144e6:	e005      	b.n	80144f4 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	4a05      	ldr	r2, [pc, #20]	; (8014500 <metal_generic_dev_open+0x5c>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d1e3      	bne.n	80144b8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 80144f0:	f06f 0312 	mvn.w	r3, #18
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3718      	adds	r7, #24
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}
 80144fc:	2400b968 	.word	0x2400b968
 8014500:	2400b980 	.word	0x2400b980

08014504 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b086      	sub	sp, #24
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8014512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	429a      	cmp	r2, r3
 8014518:	d009      	beq.n	801452e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 801451a:	6a3a      	ldr	r2, [r7, #32]
 801451c:	4613      	mov	r3, r2
 801451e:	005b      	lsls	r3, r3, #1
 8014520:	4413      	add	r3, r2
 8014522:	009b      	lsls	r3, r3, #2
 8014524:	461a      	mov	r2, r3
 8014526:	6839      	ldr	r1, [r7, #0]
 8014528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801452a:	f006 ff55 	bl	801b3d8 <memcpy>
	for (i = 0; i < nents_in; i++) {
 801452e:	2300      	movs	r3, #0
 8014530:	617b      	str	r3, [r7, #20]
 8014532:	e02f      	b.n	8014594 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b02      	cmp	r3, #2
 8014538:	d114      	bne.n	8014564 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 801453a:	697a      	ldr	r2, [r7, #20]
 801453c:	4613      	mov	r3, r2
 801453e:	005b      	lsls	r3, r3, #1
 8014540:	4413      	add	r3, r2
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	461a      	mov	r2, r3
 8014546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014548:	4413      	add	r3, r2
 801454a:	6818      	ldr	r0, [r3, #0]
 801454c:	697a      	ldr	r2, [r7, #20]
 801454e:	4613      	mov	r3, r2
 8014550:	005b      	lsls	r3, r3, #1
 8014552:	4413      	add	r3, r2
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	461a      	mov	r2, r3
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	4413      	add	r3, r2
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	4619      	mov	r1, r3
 8014560:	f7ff fead 	bl	80142be <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8014564:	697a      	ldr	r2, [r7, #20]
 8014566:	4613      	mov	r3, r2
 8014568:	005b      	lsls	r3, r3, #1
 801456a:	4413      	add	r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	461a      	mov	r2, r3
 8014570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014572:	4413      	add	r3, r2
 8014574:	6818      	ldr	r0, [r3, #0]
 8014576:	697a      	ldr	r2, [r7, #20]
 8014578:	4613      	mov	r3, r2
 801457a:	005b      	lsls	r3, r3, #1
 801457c:	4413      	add	r3, r2
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	461a      	mov	r2, r3
 8014582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014584:	4413      	add	r3, r2
 8014586:	689b      	ldr	r3, [r3, #8]
 8014588:	4619      	mov	r1, r3
 801458a:	f7ff fea5 	bl	80142d8 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	3301      	adds	r3, #1
 8014592:	617b      	str	r3, [r7, #20]
 8014594:	697a      	ldr	r2, [r7, #20]
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	429a      	cmp	r2, r3
 801459a:	dbcb      	blt.n	8014534 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 801459c:	6a3b      	ldr	r3, [r7, #32]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3718      	adds	r7, #24
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}

080145a6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 80145a6:	b580      	push	{r7, lr}
 80145a8:	b086      	sub	sp, #24
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	60f8      	str	r0, [r7, #12]
 80145ae:	60b9      	str	r1, [r7, #8]
 80145b0:	607a      	str	r2, [r7, #4]
 80145b2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 80145b4:	2300      	movs	r3, #0
 80145b6:	617b      	str	r3, [r7, #20]
 80145b8:	e017      	b.n	80145ea <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	4613      	mov	r3, r2
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	009b      	lsls	r3, r3, #2
 80145c4:	461a      	mov	r2, r3
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	4413      	add	r3, r2
 80145ca:	6818      	ldr	r0, [r3, #0]
 80145cc:	697a      	ldr	r2, [r7, #20]
 80145ce:	4613      	mov	r3, r2
 80145d0:	005b      	lsls	r3, r3, #1
 80145d2:	4413      	add	r3, r2
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	461a      	mov	r2, r3
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	4413      	add	r3, r2
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	4619      	mov	r1, r3
 80145e0:	f7ff fe7a 	bl	80142d8 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	3301      	adds	r3, #1
 80145e8:	617b      	str	r3, [r7, #20]
 80145ea:	697a      	ldr	r2, [r7, #20]
 80145ec:	6a3b      	ldr	r3, [r7, #32]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	dbe3      	blt.n	80145ba <metal_generic_dev_dma_unmap+0x14>
	}
}
 80145f2:	bf00      	nop
 80145f4:	bf00      	nop
 80145f6:	3718      	adds	r7, #24
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8014604:	2300      	movs	r3, #0
 8014606:	60fb      	str	r3, [r7, #12]
 8014608:	e013      	b.n	8014632 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 801460a:	68fa      	ldr	r2, [r7, #12]
 801460c:	4613      	mov	r3, r2
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	4413      	add	r3, r2
 8014612:	011b      	lsls	r3, r3, #4
 8014614:	3308      	adds	r3, #8
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	4413      	add	r3, r2
 801461a:	3304      	adds	r3, #4
 801461c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	689b      	ldr	r3, [r3, #8]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d00b      	beq.n	801463e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8014626:	68b8      	ldr	r0, [r7, #8]
 8014628:	f000 f81e 	bl	8014668 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	3301      	adds	r3, #1
 8014630:	60fb      	str	r3, [r7, #12]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	689b      	ldr	r3, [r3, #8]
 8014636:	68fa      	ldr	r2, [r7, #12]
 8014638:	429a      	cmp	r2, r3
 801463a:	d3e6      	bcc.n	801460a <metal_generic_dev_sys_open+0xe>
 801463c:	e000      	b.n	8014640 <metal_generic_dev_sys_open+0x44>
			break;
 801463e:	bf00      	nop
	}

	return 0;
 8014640:	2300      	movs	r3, #0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
	...

0801464c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8014654:	4803      	ldr	r0, [pc, #12]	; (8014664 <metal_sys_init+0x18>)
 8014656:	f7ff fe4d 	bl	80142f4 <metal_bus_register>
	return 0;
 801465a:	2300      	movs	r3, #0
}
 801465c:	4618      	mov	r0, r3
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	24000060 	.word	0x24000060

08014668 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b086      	sub	sp, #24
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	689b      	ldr	r3, [r3, #8]
 801467a:	613b      	str	r3, [r7, #16]
	if (psize) {
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d02c      	beq.n	80146dc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	68db      	ldr	r3, [r3, #12]
 8014686:	693a      	ldr	r2, [r7, #16]
 8014688:	fa22 f303 	lsr.w	r3, r2, r3
 801468c:	2b00      	cmp	r3, #0
 801468e:	d005      	beq.n	801469c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	2201      	movs	r2, #1
 8014696:	fa02 f303 	lsl.w	r3, r2, r3
 801469a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 801469c:	2300      	movs	r3, #0
 801469e:	617b      	str	r3, [r7, #20]
 80146a0:	e013      	b.n	80146ca <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685a      	ldr	r2, [r3, #4]
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	4413      	add	r3, r2
 80146ac:	6819      	ldr	r1, [r3, #0]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	695b      	ldr	r3, [r3, #20]
 80146b2:	693a      	ldr	r2, [r7, #16]
 80146b4:	68f8      	ldr	r0, [r7, #12]
 80146b6:	f001 fd91 	bl	80161dc <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	009b      	lsls	r3, r3, #2
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	4413      	add	r3, r2
 80146c2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	3301      	adds	r3, #1
 80146c8:	617b      	str	r3, [r7, #20]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	689a      	ldr	r2, [r3, #8]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	68db      	ldr	r3, [r3, #12]
 80146d2:	fa22 f303 	lsr.w	r3, r2, r3
 80146d6:	697a      	ldr	r2, [r7, #20]
 80146d8:	429a      	cmp	r2, r3
 80146da:	d9e2      	bls.n	80146a2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 80146dc:	bf00      	nop
 80146de:	3718      	adds	r7, #24
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <metal_list_init>:
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	605a      	str	r2, [r3, #4]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	685a      	ldr	r2, [r3, #4]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	601a      	str	r2, [r3, #0]
}
 80146fa:	bf00      	nop
 80146fc:	370c      	adds	r7, #12
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr
	...

08014708 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
	int error = 0;
 8014710:	2300      	movs	r3, #0
 8014712:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8014714:	2220      	movs	r2, #32
 8014716:	2100      	movs	r1, #0
 8014718:	4810      	ldr	r0, [pc, #64]	; (801475c <metal_init+0x54>)
 801471a:	f006 fe85 	bl	801b428 <memset>

	_metal.common.log_handler   = params->log_handler;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	4a0e      	ldr	r2, [pc, #56]	; (801475c <metal_init+0x54>)
 8014724:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	791a      	ldrb	r2, [r3, #4]
 801472a:	4b0c      	ldr	r3, [pc, #48]	; (801475c <metal_init+0x54>)
 801472c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 801472e:	480c      	ldr	r0, [pc, #48]	; (8014760 <metal_init+0x58>)
 8014730:	f7ff ffd8 	bl	80146e4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8014734:	480b      	ldr	r0, [pc, #44]	; (8014764 <metal_init+0x5c>)
 8014736:	f7ff ffd5 	bl	80146e4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 801473a:	480b      	ldr	r0, [pc, #44]	; (8014768 <metal_init+0x60>)
 801473c:	f7ff ffd2 	bl	80146e4 <metal_list_init>

	error = metal_sys_init(params);
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f7ff ff83 	bl	801464c <metal_sys_init>
 8014746:	60f8      	str	r0, [r7, #12]
	if (error)
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d001      	beq.n	8014752 <metal_init+0x4a>
		return error;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	e000      	b.n	8014754 <metal_init+0x4c>

	return error;
 8014752:	68fb      	ldr	r3, [r7, #12]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3710      	adds	r7, #16
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	2400b968 	.word	0x2400b968
 8014760:	2400b970 	.word	0x2400b970
 8014764:	2400b978 	.word	0x2400b978
 8014768:	2400b980 	.word	0x2400b980

0801476c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 801477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801477e:	d009      	beq.n	8014794 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	689b      	ldr	r3, [r3, #8]
 8014784:	683a      	ldr	r2, [r7, #0]
 8014786:	429a      	cmp	r2, r3
 8014788:	d804      	bhi.n	8014794 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	4413      	add	r3, r2
 8014792:	e000      	b.n	8014796 <metal_io_virt+0x2a>
 8014794:	2300      	movs	r3, #0
}
 8014796:	4618      	mov	r0, r3
 8014798:	370c      	adds	r7, #12
 801479a:	46bd      	mov	sp, r7
 801479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a0:	4770      	bx	lr

080147a2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 80147a2:	b5b0      	push	{r4, r5, r7, lr}
 80147a4:	b08a      	sub	sp, #40	; 0x28
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	60f8      	str	r0, [r7, #12]
 80147aa:	60b9      	str	r1, [r7, #8]
 80147ac:	607a      	str	r2, [r7, #4]
 80147ae:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 80147b0:	f107 0310 	add.w	r3, r7, #16
 80147b4:	2200      	movs	r2, #0
 80147b6:	601a      	str	r2, [r3, #0]
 80147b8:	605a      	str	r2, [r3, #4]
 80147ba:	609a      	str	r2, [r3, #8]
 80147bc:	60da      	str	r2, [r3, #12]
 80147be:	611a      	str	r2, [r3, #16]
 80147c0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	68ba      	ldr	r2, [r7, #8]
 80147c6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	605a      	str	r2, [r3, #4]
	io->size = size;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	683a      	ldr	r2, [r7, #0]
 80147d2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147d8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 80147da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147dc:	2b1f      	cmp	r3, #31
 80147de:	d904      	bls.n	80147ea <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f04f 32ff 	mov.w	r2, #4294967295
 80147e6:	611a      	str	r2, [r3, #16]
 80147e8:	e006      	b.n	80147f8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 80147ea:	2201      	movs	r2, #1
 80147ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ee:	fa02 f303 	lsl.w	r3, r2, r3
 80147f2:	1e5a      	subs	r2, r3, #1
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147fc:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 80147fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00b      	beq.n	801481c <metal_io_init+0x7a>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014808:	f103 0418 	add.w	r4, r3, #24
 801480c:	4615      	mov	r5, r2
 801480e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014812:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014816:	e884 0003 	stmia.w	r4, {r0, r1}
 801481a:	e00a      	b.n	8014832 <metal_io_init+0x90>
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f103 0418 	add.w	r4, r3, #24
 8014822:	f107 0510 	add.w	r5, r7, #16
 8014826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801482a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801482e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f7ff ff18 	bl	8014668 <metal_sys_io_mem_map>
}
 8014838:	bf00      	nop
 801483a:	3728      	adds	r7, #40	; 0x28
 801483c:	46bd      	mov	sp, r7
 801483e:	bdb0      	pop	{r4, r5, r7, pc}

08014840 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8014840:	b590      	push	{r4, r7, lr}
 8014842:	b08b      	sub	sp, #44	; 0x2c
 8014844:	af02      	add	r7, sp, #8
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
 801484c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 801484e:	68b9      	ldr	r1, [r7, #8]
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f7ff ff8b 	bl	801476c <metal_io_virt>
 8014856:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	689b      	ldr	r3, [r3, #8]
 8014860:	68ba      	ldr	r2, [r7, #8]
 8014862:	429a      	cmp	r2, r3
 8014864:	d902      	bls.n	801486c <metal_io_block_read+0x2c>
		return -ERANGE;
 8014866:	f06f 0321 	mvn.w	r3, #33	; 0x21
 801486a:	e05c      	b.n	8014926 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 801486c:	683a      	ldr	r2, [r7, #0]
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	441a      	add	r2, r3
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	429a      	cmp	r2, r3
 8014878:	d904      	bls.n	8014884 <metal_io_block_read+0x44>
		len = io->size - offset;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	689a      	ldr	r2, [r3, #8]
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	1ad3      	subs	r3, r2, r3
 8014882:	603b      	str	r3, [r7, #0]
	retlen = len;
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6a1b      	ldr	r3, [r3, #32]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d00a      	beq.n	80148a6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	6a1c      	ldr	r4, [r3, #32]
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	2305      	movs	r3, #5
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	68b9      	ldr	r1, [r7, #8]
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	47a0      	blx	r4
 80148a2:	6178      	str	r0, [r7, #20]
 80148a4:	e03e      	b.n	8014924 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 80148a6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 80148aa:	e00c      	b.n	80148c6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	701a      	strb	r2, [r3, #0]
			dest++;
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	3301      	adds	r3, #1
 80148b8:	61bb      	str	r3, [r7, #24]
			ptr++;
 80148ba:	69fb      	ldr	r3, [r7, #28]
 80148bc:	3301      	adds	r3, #1
 80148be:	61fb      	str	r3, [r7, #28]
			len--;
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	3b01      	subs	r3, #1
 80148c4:	603b      	str	r3, [r7, #0]
		while ( len && (
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d017      	beq.n	80148fc <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 80148cc:	69bb      	ldr	r3, [r7, #24]
 80148ce:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1ea      	bne.n	80148ac <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d1e5      	bne.n	80148ac <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80148e0:	e00c      	b.n	80148fc <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	3304      	adds	r3, #4
 80148ee:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 80148f0:	69fb      	ldr	r3, [r7, #28]
 80148f2:	3304      	adds	r3, #4
 80148f4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	3b04      	subs	r3, #4
 80148fa:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	2b03      	cmp	r3, #3
 8014900:	dcef      	bgt.n	80148e2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8014902:	e00c      	b.n	801491e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8014904:	69fb      	ldr	r3, [r7, #28]
 8014906:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8014908:	69bb      	ldr	r3, [r7, #24]
 801490a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	3301      	adds	r3, #1
 8014910:	61bb      	str	r3, [r7, #24]
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	3301      	adds	r3, #1
 8014916:	61fb      	str	r3, [r7, #28]
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	3b01      	subs	r3, #1
 801491c:	603b      	str	r3, [r7, #0]
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d1ef      	bne.n	8014904 <metal_io_block_read+0xc4>
	}
	return retlen;
 8014924:	697b      	ldr	r3, [r7, #20]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3724      	adds	r7, #36	; 0x24
 801492a:	46bd      	mov	sp, r7
 801492c:	bd90      	pop	{r4, r7, pc}

0801492e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 801492e:	b590      	push	{r4, r7, lr}
 8014930:	b08b      	sub	sp, #44	; 0x2c
 8014932:	af02      	add	r7, sp, #8
 8014934:	60f8      	str	r0, [r7, #12]
 8014936:	60b9      	str	r1, [r7, #8]
 8014938:	607a      	str	r2, [r7, #4]
 801493a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 801493c:	68b9      	ldr	r1, [r7, #8]
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f7ff ff14 	bl	801476c <metal_io_virt>
 8014944:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	689b      	ldr	r3, [r3, #8]
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	429a      	cmp	r2, r3
 8014952:	d902      	bls.n	801495a <metal_io_block_write+0x2c>
		return -ERANGE;
 8014954:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8014958:	e05b      	b.n	8014a12 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 801495a:	683a      	ldr	r2, [r7, #0]
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	441a      	add	r2, r3
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	689b      	ldr	r3, [r3, #8]
 8014964:	429a      	cmp	r2, r3
 8014966:	d904      	bls.n	8014972 <metal_io_block_write+0x44>
		len = io->size - offset;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	689a      	ldr	r2, [r3, #8]
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	1ad3      	subs	r3, r2, r3
 8014970:	603b      	str	r3, [r7, #0]
	retlen = len;
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801497a:	2b00      	cmp	r3, #0
 801497c:	d017      	beq.n	80149ae <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	9300      	str	r3, [sp, #0]
 8014986:	2305      	movs	r3, #5
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	68b9      	ldr	r1, [r7, #8]
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	47a0      	blx	r4
 8014990:	6178      	str	r0, [r7, #20]
 8014992:	e03d      	b.n	8014a10 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	701a      	strb	r2, [r3, #0]
			ptr++;
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	3301      	adds	r3, #1
 80149a0:	61fb      	str	r3, [r7, #28]
			source++;
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	3301      	adds	r3, #1
 80149a6:	61bb      	str	r3, [r7, #24]
			len--;
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	3b01      	subs	r3, #1
 80149ac:	603b      	str	r3, [r7, #0]
		while ( len && (
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d017      	beq.n	80149e4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d1ea      	bne.n	8014994 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 80149be:	69bb      	ldr	r3, [r7, #24]
 80149c0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d1e5      	bne.n	8014994 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80149c8:	e00c      	b.n	80149e4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	69fb      	ldr	r3, [r7, #28]
 80149d0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	3304      	adds	r3, #4
 80149d6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	3304      	adds	r3, #4
 80149dc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	3b04      	subs	r3, #4
 80149e2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	2b03      	cmp	r3, #3
 80149e8:	dcef      	bgt.n	80149ca <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 80149ea:	e00c      	b.n	8014a06 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80149ec:	69bb      	ldr	r3, [r7, #24]
 80149ee:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80149f0:	69fb      	ldr	r3, [r7, #28]
 80149f2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	3301      	adds	r3, #1
 80149f8:	61fb      	str	r3, [r7, #28]
 80149fa:	69bb      	ldr	r3, [r7, #24]
 80149fc:	3301      	adds	r3, #1
 80149fe:	61bb      	str	r3, [r7, #24]
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	3b01      	subs	r3, #1
 8014a04:	603b      	str	r3, [r7, #0]
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1ef      	bne.n	80149ec <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8014a0c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8014a10:	697b      	ldr	r3, [r7, #20]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3724      	adds	r7, #36	; 0x24
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd90      	pop	{r4, r7, pc}

08014a1a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8014a1a:	b590      	push	{r4, r7, lr}
 8014a1c:	b08b      	sub	sp, #44	; 0x2c
 8014a1e:	af02      	add	r7, sp, #8
 8014a20:	60f8      	str	r0, [r7, #12]
 8014a22:	60b9      	str	r1, [r7, #8]
 8014a24:	603b      	str	r3, [r7, #0]
 8014a26:	4613      	mov	r3, r2
 8014a28:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8014a2a:	68b9      	ldr	r1, [r7, #8]
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f7ff fe9d 	bl	801476c <metal_io_virt>
 8014a32:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	689b      	ldr	r3, [r3, #8]
 8014a3c:	68ba      	ldr	r2, [r7, #8]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d902      	bls.n	8014a48 <metal_io_block_set+0x2e>
		return -ERANGE;
 8014a42:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8014a46:	e05d      	b.n	8014b04 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8014a48:	683a      	ldr	r2, [r7, #0]
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	441a      	add	r2, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	689b      	ldr	r3, [r3, #8]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d904      	bls.n	8014a60 <metal_io_block_set+0x46>
		len = io->size - offset;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	689a      	ldr	r2, [r3, #8]
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d009      	beq.n	8014a80 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8014a70:	79fa      	ldrb	r2, [r7, #7]
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	2305      	movs	r3, #5
 8014a78:	68b9      	ldr	r1, [r7, #8]
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	47a0      	blx	r4
 8014a7e:	e040      	b.n	8014b02 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8014a80:	79fb      	ldrb	r3, [r7, #7]
 8014a82:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8014a84:	2301      	movs	r3, #1
 8014a86:	617b      	str	r3, [r7, #20]
 8014a88:	e00a      	b.n	8014aa0 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8014a8a:	79fa      	ldrb	r2, [r7, #7]
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	00db      	lsls	r3, r3, #3
 8014a90:	fa02 f303 	lsl.w	r3, r2, r3
 8014a94:	69ba      	ldr	r2, [r7, #24]
 8014a96:	4313      	orrs	r3, r2
 8014a98:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	617b      	str	r3, [r7, #20]
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	2b03      	cmp	r3, #3
 8014aa4:	d9f1      	bls.n	8014a8a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8014aa6:	e008      	b.n	8014aba <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	79fa      	ldrb	r2, [r7, #7]
 8014aac:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8014aae:	69fb      	ldr	r3, [r7, #28]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	61fb      	str	r3, [r7, #28]
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	3b01      	subs	r3, #1
 8014ab8:	603b      	str	r3, [r7, #0]
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d00e      	beq.n	8014ade <metal_io_block_set+0xc4>
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	f003 0303 	and.w	r3, r3, #3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d1ee      	bne.n	8014aa8 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8014aca:	e008      	b.n	8014ade <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	3304      	adds	r3, #4
 8014ad6:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	3b04      	subs	r3, #4
 8014adc:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	2b03      	cmp	r3, #3
 8014ae2:	dcf3      	bgt.n	8014acc <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8014ae4:	e008      	b.n	8014af8 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	79fa      	ldrb	r2, [r7, #7]
 8014aea:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	3301      	adds	r3, #1
 8014af0:	61fb      	str	r3, [r7, #28]
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	3b01      	subs	r3, #1
 8014af6:	603b      	str	r3, [r7, #0]
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d1f3      	bne.n	8014ae6 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8014afe:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8014b02:	693b      	ldr	r3, [r7, #16]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3724      	adds	r7, #36	; 0x24
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd90      	pop	{r4, r7, pc}

08014b0c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8014b0c:	b40e      	push	{r1, r2, r3}
 8014b0e:	b480      	push	{r7}
 8014b10:	b082      	sub	sp, #8
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	4603      	mov	r3, r0
 8014b16:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	b003      	add	sp, #12
 8014b24:	4770      	bx	lr

08014b26 <metal_io_virt>:
{
 8014b26:	b480      	push	{r7}
 8014b28:	b083      	sub	sp, #12
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	6078      	str	r0, [r7, #4]
 8014b2e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8014b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b38:	d009      	beq.n	8014b4e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d804      	bhi.n	8014b4e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	4413      	add	r3, r2
 8014b4c:	e000      	b.n	8014b50 <metal_io_virt+0x2a>
 8014b4e:	2300      	movs	r3, #0
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	370c      	adds	r7, #12
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr

08014b5c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b085      	sub	sp, #20
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
 8014b64:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	1ad3      	subs	r3, r2, r3
 8014b6e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d201      	bcs.n	8014b7e <metal_io_virt_to_offset+0x22>
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	e001      	b.n	8014b82 <metal_io_virt_to_offset+0x26>
 8014b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3714      	adds	r7, #20
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr
	...

08014b90 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8014b90:	b590      	push	{r4, r7, lr}
 8014b92:	b08d      	sub	sp, #52	; 0x34
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	603b      	str	r3, [r7, #0]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8014ba0:	68b9      	ldr	r1, [r7, #8]
 8014ba2:	68f8      	ldr	r0, [r7, #12]
 8014ba4:	f7ff ffbf 	bl	8014b26 <metal_io_virt>
 8014ba8:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	699b      	ldr	r3, [r3, #24]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d009      	beq.n	8014bc6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	699c      	ldr	r4, [r3, #24]
 8014bb6:	79fa      	ldrb	r2, [r7, #7]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	68b9      	ldr	r1, [r7, #8]
 8014bbc:	68f8      	ldr	r0, [r7, #12]
 8014bbe:	47a0      	blx	r4
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	e057      	b.n	8014c76 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8014bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d011      	beq.n	8014bf0 <metal_io_read+0x60>
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d10e      	bne.n	8014bf0 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8014bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd8:	f3bf 8f5b 	dmb	ish
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	f3bf 8f5b 	dmb	ish
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	76fb      	strb	r3, [r7, #27]
 8014be6:	7efb      	ldrb	r3, [r7, #27]
 8014be8:	b2da      	uxtb	r2, r3
 8014bea:	f04f 0300 	mov.w	r3, #0
 8014bee:	e042      	b.n	8014c76 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 8014bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d011      	beq.n	8014c1a <metal_io_read+0x8a>
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	2b02      	cmp	r3, #2
 8014bfa:	d10e      	bne.n	8014c1a <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8014bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8014c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c02:	f3bf 8f5b 	dmb	ish
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	f3bf 8f5b 	dmb	ish
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	833b      	strh	r3, [r7, #24]
 8014c10:	8b3b      	ldrh	r3, [r7, #24]
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	f04f 0300 	mov.w	r3, #0
 8014c18:	e02d      	b.n	8014c76 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8014c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d010      	beq.n	8014c42 <metal_io_read+0xb2>
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	2b04      	cmp	r3, #4
 8014c24:	d10d      	bne.n	8014c42 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8014c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c28:	623b      	str	r3, [r7, #32]
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	f3bf 8f5b 	dmb	ish
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	f3bf 8f5b 	dmb	ish
 8014c36:	617b      	str	r3, [r7, #20]
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	f04f 0300 	mov.w	r3, #0
 8014c40:	e019      	b.n	8014c76 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8014c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d010      	beq.n	8014c6a <metal_io_read+0xda>
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	2b04      	cmp	r3, #4
 8014c4c:	d10d      	bne.n	8014c6a <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8014c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c50:	61fb      	str	r3, [r7, #28]
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	f3bf 8f5b 	dmb	ish
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f3bf 8f5b 	dmb	ish
 8014c5e:	613b      	str	r3, [r7, #16]
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	461a      	mov	r2, r3
 8014c64:	f04f 0300 	mov.w	r3, #0
 8014c68:	e005      	b.n	8014c76 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8014c6a:	4b05      	ldr	r3, [pc, #20]	; (8014c80 <metal_io_read+0xf0>)
 8014c6c:	4a05      	ldr	r2, [pc, #20]	; (8014c84 <metal_io_read+0xf4>)
 8014c6e:	21f0      	movs	r1, #240	; 0xf0
 8014c70:	4805      	ldr	r0, [pc, #20]	; (8014c88 <metal_io_read+0xf8>)
 8014c72:	f006 fb43 	bl	801b2fc <__assert_func>
	return 0; /* quiet compiler */
}
 8014c76:	4610      	mov	r0, r2
 8014c78:	4619      	mov	r1, r3
 8014c7a:	3734      	adds	r7, #52	; 0x34
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd90      	pop	{r4, r7, pc}
 8014c80:	0802041c 	.word	0x0802041c
 8014c84:	08029220 	.word	0x08029220
 8014c88:	08020420 	.word	0x08020420

08014c8c <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8014c8c:	b590      	push	{r4, r7, lr}
 8014c8e:	b08f      	sub	sp, #60	; 0x3c
 8014c90:	af02      	add	r7, sp, #8
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8014c9a:	68b9      	ldr	r1, [r7, #8]
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	f7ff ff42 	bl	8014b26 <metal_io_virt>
 8014ca2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	69db      	ldr	r3, [r3, #28]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00c      	beq.n	8014cc6 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	69dc      	ldr	r4, [r3, #28]
 8014cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cb2:	9301      	str	r3, [sp, #4]
 8014cb4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014cb8:	9300      	str	r3, [sp, #0]
 8014cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014cbe:	68b9      	ldr	r1, [r7, #8]
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8014cc4:	e04e      	b.n	8014d64 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8014cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00e      	beq.n	8014cea <metal_io_write+0x5e>
 8014ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d10b      	bne.n	8014cea <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8014cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014cd6:	783b      	ldrb	r3, [r7, #0]
 8014cd8:	76fb      	strb	r3, [r7, #27]
 8014cda:	7efa      	ldrb	r2, [r7, #27]
 8014cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cde:	f3bf 8f5b 	dmb	ish
 8014ce2:	701a      	strb	r2, [r3, #0]
 8014ce4:	f3bf 8f5b 	dmb	ish
 8014ce8:	e03c      	b.n	8014d64 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8014cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00e      	beq.n	8014d0e <metal_io_write+0x82>
 8014cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cf2:	2b02      	cmp	r3, #2
 8014cf4:	d10b      	bne.n	8014d0e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8014cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8014cfa:	883b      	ldrh	r3, [r7, #0]
 8014cfc:	833b      	strh	r3, [r7, #24]
 8014cfe:	8b3a      	ldrh	r2, [r7, #24]
 8014d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d02:	f3bf 8f5b 	dmb	ish
 8014d06:	801a      	strh	r2, [r3, #0]
 8014d08:	f3bf 8f5b 	dmb	ish
 8014d0c:	e02a      	b.n	8014d64 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8014d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00e      	beq.n	8014d32 <metal_io_write+0xa6>
 8014d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d16:	2b04      	cmp	r3, #4
 8014d18:	d10b      	bne.n	8014d32 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8014d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1c:	623b      	str	r3, [r7, #32]
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	617b      	str	r3, [r7, #20]
 8014d22:	697a      	ldr	r2, [r7, #20]
 8014d24:	6a3b      	ldr	r3, [r7, #32]
 8014d26:	f3bf 8f5b 	dmb	ish
 8014d2a:	601a      	str	r2, [r3, #0]
 8014d2c:	f3bf 8f5b 	dmb	ish
 8014d30:	e018      	b.n	8014d64 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8014d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00e      	beq.n	8014d56 <metal_io_write+0xca>
 8014d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d3a:	2b04      	cmp	r3, #4
 8014d3c:	d10b      	bne.n	8014d56 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d40:	61fb      	str	r3, [r7, #28]
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	613b      	str	r3, [r7, #16]
 8014d46:	693a      	ldr	r2, [r7, #16]
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	f3bf 8f5b 	dmb	ish
 8014d4e:	601a      	str	r2, [r3, #0]
 8014d50:	f3bf 8f5b 	dmb	ish
 8014d54:	e006      	b.n	8014d64 <metal_io_write+0xd8>
		metal_assert (0);
 8014d56:	4b05      	ldr	r3, [pc, #20]	; (8014d6c <metal_io_write+0xe0>)
 8014d58:	4a05      	ldr	r2, [pc, #20]	; (8014d70 <metal_io_write+0xe4>)
 8014d5a:	f44f 7189 	mov.w	r1, #274	; 0x112
 8014d5e:	4805      	ldr	r0, [pc, #20]	; (8014d74 <metal_io_write+0xe8>)
 8014d60:	f006 facc 	bl	801b2fc <__assert_func>
}
 8014d64:	bf00      	nop
 8014d66:	3734      	adds	r7, #52	; 0x34
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd90      	pop	{r4, r7, pc}
 8014d6c:	0802041c 	.word	0x0802041c
 8014d70:	08029230 	.word	0x08029230
 8014d74:	08020420 	.word	0x08020420

08014d78 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f006 fb19 	bl	801b3b8 <malloc>
 8014d86:	4603      	mov	r3, r0
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
	free(ptr);
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f006 fb15 	bl	801b3c8 <free>
}
 8014d9e:	bf00      	nop
 8014da0:	3708      	adds	r7, #8
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b084      	sub	sp, #16
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	3307      	adds	r3, #7
 8014db2:	00db      	lsls	r3, r3, #3
 8014db4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f7ff ffde 	bl	8014d78 <metal_allocate_memory>
 8014dbc:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d004      	beq.n	8014dce <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8014dc4:	68fa      	ldr	r2, [r7, #12]
 8014dc6:	2100      	movs	r1, #0
 8014dc8:	68b8      	ldr	r0, [r7, #8]
 8014dca:	f006 fb2d 	bl	801b428 <memset>
	}

	return vqs;
 8014dce:	68bb      	ldr	r3, [r7, #8]
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3710      	adds	r7, #16
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b086      	sub	sp, #24
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	891b      	ldrh	r3, [r3, #8]
 8014de4:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	3b18      	subs	r3, #24
 8014df0:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014df6:	697a      	ldr	r2, [r7, #20]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d905      	bls.n	8014e08 <rproc_virtio_virtqueue_notify+0x30>
 8014dfc:	4b0d      	ldr	r3, [pc, #52]	; (8014e34 <rproc_virtio_virtqueue_notify+0x5c>)
 8014dfe:	4a0e      	ldr	r2, [pc, #56]	; (8014e38 <rproc_virtio_virtqueue_notify+0x60>)
 8014e00:	2133      	movs	r1, #51	; 0x33
 8014e02:	480e      	ldr	r0, [pc, #56]	; (8014e3c <rproc_virtio_virtqueue_notify+0x64>)
 8014e04:	f006 fa7a 	bl	801b2fc <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014e0c:	697a      	ldr	r2, [r7, #20]
 8014e0e:	4613      	mov	r3, r2
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	4413      	add	r3, r2
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	440b      	add	r3, r1
 8014e18:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	691b      	ldr	r3, [r3, #16]
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	6810      	ldr	r0, [r2, #0]
 8014e22:	68ba      	ldr	r2, [r7, #8]
 8014e24:	6912      	ldr	r2, [r2, #16]
 8014e26:	4611      	mov	r1, r2
 8014e28:	4798      	blx	r3
}
 8014e2a:	bf00      	nop
 8014e2c:	3718      	adds	r7, #24
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	08020468 	.word	0x08020468
 8014e38:	08029200 	.word	0x08029200
 8014e3c:	08020484 	.word	0x08020484

08014e40 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	3b18      	subs	r3, #24
 8014e4c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	3318      	adds	r3, #24
 8014e5e:	4619      	mov	r1, r3
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f7ff fe7b 	bl	8014b5c <metal_io_virt_to_offset>
 8014e66:	4601      	mov	r1, r0
 8014e68:	2301      	movs	r3, #1
 8014e6a:	2205      	movs	r2, #5
 8014e6c:	68f8      	ldr	r0, [r7, #12]
 8014e6e:	f7ff fe8f 	bl	8014b90 <metal_io_read>
 8014e72:	4602      	mov	r2, r0
 8014e74:	460b      	mov	r3, r1
 8014e76:	4613      	mov	r3, r2
 8014e78:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8014e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b088      	sub	sp, #32
 8014e88:	af02      	add	r7, sp, #8
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	3b18      	subs	r3, #24
 8014e94:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	689b      	ldr	r3, [r3, #8]
 8014e9a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	3318      	adds	r3, #24
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f7ff fe57 	bl	8014b5c <metal_io_virt_to_offset>
 8014eae:	4601      	mov	r1, r0
 8014eb0:	78fa      	ldrb	r2, [r7, #3]
 8014eb2:	f04f 0300 	mov.w	r3, #0
 8014eb6:	2001      	movs	r0, #1
 8014eb8:	9001      	str	r0, [sp, #4]
 8014eba:	2005      	movs	r0, #5
 8014ebc:	9000      	str	r0, [sp, #0]
 8014ebe:	68f8      	ldr	r0, [r7, #12]
 8014ec0:	f7ff fee4 	bl	8014c8c <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	691b      	ldr	r3, [r3, #16]
 8014ec8:	697a      	ldr	r2, [r7, #20]
 8014eca:	6810      	ldr	r0, [r2, #0]
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	6812      	ldr	r2, [r2, #0]
 8014ed0:	4611      	mov	r1, r2
 8014ed2:	4798      	blx	r3
}
 8014ed4:	bf00      	nop
 8014ed6:	3718      	adds	r7, #24
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b086      	sub	sp, #24
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	3b18      	subs	r3, #24
 8014ee8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	689b      	ldr	r3, [r3, #8]
 8014eee:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	68db      	ldr	r3, [r3, #12]
 8014ef4:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	330c      	adds	r3, #12
 8014efa:	4619      	mov	r1, r3
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f7ff fe2d 	bl	8014b5c <metal_io_virt_to_offset>
 8014f02:	4601      	mov	r1, r0
 8014f04:	2304      	movs	r3, #4
 8014f06:	2205      	movs	r2, #5
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f7ff fe41 	bl	8014b90 <metal_io_read>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	460b      	mov	r3, r1
 8014f12:	4613      	mov	r3, r2
 8014f14:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8014f16:	68bb      	ldr	r3, [r7, #8]
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3718      	adds	r7, #24
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b088      	sub	sp, #32
 8014f24:	af02      	add	r7, sp, #8
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	3b18      	subs	r3, #24
 8014f2e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	330c      	adds	r3, #12
 8014f40:	4619      	mov	r1, r3
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f7ff fe0a 	bl	8014b5c <metal_io_virt_to_offset>
 8014f48:	4601      	mov	r1, r0
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	f04f 0300 	mov.w	r3, #0
 8014f52:	2004      	movs	r0, #4
 8014f54:	9001      	str	r0, [sp, #4]
 8014f56:	2005      	movs	r0, #5
 8014f58:	9000      	str	r0, [sp, #0]
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	f7ff fe96 	bl	8014c8c <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	691b      	ldr	r3, [r3, #16]
 8014f64:	697a      	ldr	r2, [r7, #20]
 8014f66:	6810      	ldr	r0, [r2, #0]
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	6812      	ldr	r2, [r2, #0]
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	4798      	blx	r3
}
 8014f70:	bf00      	nop
 8014f72:	3718      	adds	r7, #24
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8014f82:	2300      	movs	r3, #0
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	370c      	adds	r7, #12
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr

08014f90 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8014f90:	b480      	push	{r7}
 8014f92:	b085      	sub	sp, #20
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
 8014f9c:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8014f9e:	bf00      	nop
 8014fa0:	3714      	adds	r7, #20
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr

08014faa <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8014faa:	b480      	push	{r7}
 8014fac:	b085      	sub	sp, #20
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	60f8      	str	r0, [r7, #12]
 8014fb2:	60b9      	str	r1, [r7, #8]
 8014fb4:	607a      	str	r2, [r7, #4]
 8014fb6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8014fb8:	bf00      	nop
 8014fba:	3714      	adds	r7, #20
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc2:	4770      	bx	lr

08014fc4 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	699b      	ldr	r3, [r3, #24]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d103      	bne.n	8014fdc <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8014fd4:	2140      	movs	r1, #64	; 0x40
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f7ff ff54 	bl	8014e84 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8014fdc:	bf00      	nop
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b08e      	sub	sp, #56	; 0x38
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
 8014ff0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8014ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff8:	7e5b      	ldrb	r3, [r3, #25]
 8014ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8014ffc:	2050      	movs	r0, #80	; 0x50
 8014ffe:	f7ff febb 	bl	8014d78 <metal_allocate_memory>
 8015002:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 801500a:	2300      	movs	r3, #0
 801500c:	e092      	b.n	8015134 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 801500e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015010:	4613      	mov	r3, r2
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	4413      	add	r3, r2
 8015016:	00db      	lsls	r3, r3, #3
 8015018:	4618      	mov	r0, r3
 801501a:	f7ff fead 	bl	8014d78 <metal_allocate_memory>
 801501e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8015020:	6a3b      	ldr	r3, [r7, #32]
 8015022:	2b00      	cmp	r3, #0
 8015024:	f000 8081 	beq.w	801512a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8015028:	2250      	movs	r2, #80	; 0x50
 801502a:	2100      	movs	r1, #0
 801502c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801502e:	f006 f9fb 	bl	801b428 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8015032:	2218      	movs	r2, #24
 8015034:	2100      	movs	r1, #0
 8015036:	6a38      	ldr	r0, [r7, #32]
 8015038:	f006 f9f6 	bl	801b428 <memset>
	vdev = &rpvdev->vdev;
 801503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503e:	3318      	adds	r3, #24
 8015040:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8015042:	2300      	movs	r3, #0
 8015044:	637b      	str	r3, [r7, #52]	; 0x34
 8015046:	e025      	b.n	8015094 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8015048:	2300      	movs	r3, #0
 801504a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 801504c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801504e:	4613      	mov	r3, r2
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	4413      	add	r3, r2
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	3318      	adds	r3, #24
 8015058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801505a:	4413      	add	r3, r2
 801505c:	3304      	adds	r3, #4
 801505e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d102      	bne.n	801506c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	689b      	ldr	r3, [r3, #8]
 801506a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 801506c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801506e:	f7ff fe9a 	bl	8014da6 <virtqueue_allocate>
 8015072:	6178      	str	r0, [r7, #20]
		if (!vq)
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d031      	beq.n	80150de <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 801507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801507c:	4613      	mov	r3, r2
 801507e:	005b      	lsls	r3, r3, #1
 8015080:	4413      	add	r3, r2
 8015082:	00db      	lsls	r3, r3, #3
 8015084:	461a      	mov	r2, r3
 8015086:	6a3b      	ldr	r3, [r7, #32]
 8015088:	4413      	add	r3, r2
 801508a:	697a      	ldr	r2, [r7, #20]
 801508c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 801508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015090:	3301      	adds	r3, #1
 8015092:	637b      	str	r3, [r7, #52]	; 0x34
 8015094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015098:	429a      	cmp	r2, r3
 801509a:	d3d5      	bcc.n	8015048 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80150a0:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80150a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150a6:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	6a3a      	ldr	r2, [r7, #32]
 80150ac:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 80150ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150b2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 80150b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b6:	683a      	ldr	r2, [r7, #0]
 80150b8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	68ba      	ldr	r2, [r7, #8]
 80150be:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80150c0:	69fb      	ldr	r3, [r7, #28]
 80150c2:	68fa      	ldr	r2, [r7, #12]
 80150c4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 80150c6:	69fb      	ldr	r3, [r7, #28]
 80150c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150ca:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 80150cc:	69fb      	ldr	r3, [r7, #28]
 80150ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150d0:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 80150d2:	69fb      	ldr	r3, [r7, #28]
 80150d4:	4a19      	ldr	r2, [pc, #100]	; (801513c <rproc_virtio_create_vdev+0x158>)
 80150d6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 80150d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150da:	3318      	adds	r3, #24
 80150dc:	e02a      	b.n	8015134 <rproc_virtio_create_vdev+0x150>
			goto err1;
 80150de:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 80150e0:	2300      	movs	r3, #0
 80150e2:	637b      	str	r3, [r7, #52]	; 0x34
 80150e4:	e019      	b.n	801511a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 80150e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	461a      	mov	r2, r3
 80150f2:	6a3b      	ldr	r3, [r7, #32]
 80150f4:	4413      	add	r3, r2
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d00b      	beq.n	8015114 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 80150fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150fe:	4613      	mov	r3, r2
 8015100:	005b      	lsls	r3, r3, #1
 8015102:	4413      	add	r3, r2
 8015104:	00db      	lsls	r3, r3, #3
 8015106:	461a      	mov	r2, r3
 8015108:	6a3b      	ldr	r3, [r7, #32]
 801510a:	4413      	add	r3, r2
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4618      	mov	r0, r3
 8015110:	f7ff fe3e 	bl	8014d90 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8015114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015116:	3301      	adds	r3, #1
 8015118:	637b      	str	r3, [r7, #52]	; 0x34
 801511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801511e:	429a      	cmp	r2, r3
 8015120:	d3e1      	bcc.n	80150e6 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8015122:	6a38      	ldr	r0, [r7, #32]
 8015124:	f7ff fe34 	bl	8014d90 <metal_free_memory>
 8015128:	e000      	b.n	801512c <rproc_virtio_create_vdev+0x148>
		goto err0;
 801512a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 801512c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801512e:	f7ff fe2f 	bl	8014d90 <metal_free_memory>
	return NULL;
 8015132:	2300      	movs	r3, #0
}
 8015134:	4618      	mov	r0, r3
 8015136:	3738      	adds	r7, #56	; 0x38
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	080291dc 	.word	0x080291dc

08015140 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8015140:	b480      	push	{r7}
 8015142:	b087      	sub	sp, #28
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
 801514c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015152:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8015154:	68ba      	ldr	r2, [r7, #8]
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	429a      	cmp	r2, r3
 801515a:	d302      	bcc.n	8015162 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 801515c:	f06f 0301 	mvn.w	r3, #1
 8015160:	e019      	b.n	8015196 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015166:	68ba      	ldr	r2, [r7, #8]
 8015168:	4613      	mov	r3, r2
 801516a:	005b      	lsls	r3, r3, #1
 801516c:	4413      	add	r3, r2
 801516e:	00db      	lsls	r3, r3, #3
 8015170:	440b      	add	r3, r1
 8015172:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	6a3a      	ldr	r2, [r7, #32]
 8015178:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	683a      	ldr	r2, [r7, #0]
 8015184:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	b29a      	uxth	r2, r3
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015192:	609a      	str	r2, [r3, #8]

	return 0;
 8015194:	2300      	movs	r3, #0
}
 8015196:	4618      	mov	r0, r3
 8015198:	371c      	adds	r7, #28
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr

080151a2 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b086      	sub	sp, #24
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	6078      	str	r0, [r7, #4]
 80151aa:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d102      	bne.n	80151b8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 80151b2:	f06f 0315 	mvn.w	r3, #21
 80151b6:	e02c      	b.n	8015212 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	683a      	ldr	r2, [r7, #0]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d101      	bne.n	80151c6 <rproc_virtio_notified+0x24>
		return 0;
 80151c2:	2300      	movs	r3, #0
 80151c4:	e025      	b.n	8015212 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151ca:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80151cc:	2300      	movs	r3, #0
 80151ce:	617b      	str	r3, [r7, #20]
 80151d0:	e01a      	b.n	8015208 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80151d6:	697a      	ldr	r2, [r7, #20]
 80151d8:	4613      	mov	r3, r2
 80151da:	005b      	lsls	r3, r3, #1
 80151dc:	4413      	add	r3, r2
 80151de:	00db      	lsls	r3, r3, #3
 80151e0:	440b      	add	r3, r1
 80151e2:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	691b      	ldr	r3, [r3, #16]
 80151e8:	683a      	ldr	r2, [r7, #0]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d003      	beq.n	80151f6 <rproc_virtio_notified+0x54>
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151f4:	d105      	bne.n	8015202 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80151fc:	68b8      	ldr	r0, [r7, #8]
 80151fe:	f001 fb58 	bl	80168b2 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	3301      	adds	r3, #1
 8015206:	617b      	str	r3, [r7, #20]
 8015208:	697a      	ldr	r2, [r7, #20]
 801520a:	693b      	ldr	r3, [r7, #16]
 801520c:	429a      	cmp	r2, r3
 801520e:	d3e0      	bcc.n	80151d2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8015210:	2300      	movs	r3, #0
}
 8015212:	4618      	mov	r0, r3
 8015214:	3718      	adds	r7, #24
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 801521a:	b580      	push	{r7, lr}
 801521c:	b084      	sub	sp, #16
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	699b      	ldr	r3, [r3, #24]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d00a      	beq.n	8015240 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f7ff fe08 	bl	8014e40 <rproc_virtio_get_status>
 8015230:	4603      	mov	r3, r0
 8015232:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8015234:	7bfb      	ldrb	r3, [r7, #15]
 8015236:	f003 0304 	and.w	r3, r3, #4
 801523a:	2b00      	cmp	r3, #0
 801523c:	d102      	bne.n	8015244 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 801523e:	e7f4      	b.n	801522a <rproc_virtio_wait_remote_ready+0x10>
		return;
 8015240:	bf00      	nop
 8015242:	e000      	b.n	8015246 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8015244:	bf00      	nop
	}
}
 8015246:	3710      	adds	r7, #16
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8015254:	bf00      	nop
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2201      	movs	r2, #1
 801525a:	4611      	mov	r1, r2
 801525c:	f3bf 8f5b 	dmb	ish
 8015260:	e8d3 2f4f 	ldrexb	r2, [r3]
 8015264:	e8c3 1f40 	strexb	r0, r1, [r3]
 8015268:	2800      	cmp	r0, #0
 801526a:	d1f9      	bne.n	8015260 <__metal_mutex_acquire+0x14>
 801526c:	f3bf 8f5b 	dmb	ish
 8015270:	b2d3      	uxtb	r3, r2
 8015272:	2b00      	cmp	r3, #0
 8015274:	d1ef      	bne.n	8015256 <__metal_mutex_acquire+0xa>
		;
	}
}
 8015276:	bf00      	nop
 8015278:	bf00      	nop
 801527a:	370c      	adds	r7, #12
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f3bf 8f5b 	dmb	ish
 8015292:	2200      	movs	r2, #0
 8015294:	701a      	strb	r2, [r3, #0]
 8015296:	f3bf 8f5b 	dmb	ish
}
 801529a:	bf00      	nop
 801529c:	370c      	adds	r7, #12
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr

080152a6 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b082      	sub	sp, #8
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7ff ffcc 	bl	801524c <__metal_mutex_acquire>
}
 80152b4:	bf00      	nop
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f7ff ffdd 	bl	8015284 <__metal_mutex_release>
}
 80152ca:	bf00      	nop
 80152cc:	3708      	adds	r7, #8
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <metal_list_add_before>:
{
 80152d2:	b480      	push	{r7}
 80152d4:	b083      	sub	sp, #12
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	685a      	ldr	r2, [r3, #4]
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	683a      	ldr	r2, [r7, #0]
 80152f0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	601a      	str	r2, [r3, #0]
}
 80152fa:	bf00      	nop
 80152fc:	370c      	adds	r7, #12
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr

08015306 <metal_list_add_tail>:
{
 8015306:	b580      	push	{r7, lr}
 8015308:	b082      	sub	sp, #8
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
 801530e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8015310:	6839      	ldr	r1, [r7, #0]
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f7ff ffdd 	bl	80152d2 <metal_list_add_before>
}
 8015318:	bf00      	nop
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8015320:	b480      	push	{r7}
 8015322:	b083      	sub	sp, #12
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	6852      	ldr	r2, [r2, #4]
 8015330:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	685b      	ldr	r3, [r3, #4]
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	6812      	ldr	r2, [r2, #0]
 801533a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	605a      	str	r2, [r3, #4]
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	685a      	ldr	r2, [r3, #4]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	601a      	str	r2, [r3, #0]
}
 801534a:	bf00      	nop
 801534c:	370c      	adds	r7, #12
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr

08015356 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8015356:	b480      	push	{r7}
 8015358:	b083      	sub	sp, #12
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	095b      	lsrs	r3, r3, #5
 8015364:	009a      	lsls	r2, r3, #2
 8015366:	6879      	ldr	r1, [r7, #4]
 8015368:	440a      	add	r2, r1
 801536a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 801536c:	683a      	ldr	r2, [r7, #0]
 801536e:	f002 021f 	and.w	r2, r2, #31
 8015372:	2001      	movs	r0, #1
 8015374:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8015378:	009b      	lsls	r3, r3, #2
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	4403      	add	r3, r0
 801537e:	430a      	orrs	r2, r1
 8015380:	601a      	str	r2, [r3, #0]
}
 8015382:	bf00      	nop
 8015384:	370c      	adds	r7, #12
 8015386:	46bd      	mov	sp, r7
 8015388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538c:	4770      	bx	lr

0801538e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 801538e:	b480      	push	{r7}
 8015390:	b083      	sub	sp, #12
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
 8015396:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	095b      	lsrs	r3, r3, #5
 801539c:	009b      	lsls	r3, r3, #2
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	4413      	add	r3, r2
 80153a2:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	f003 031f 	and.w	r3, r3, #31
 80153aa:	2101      	movs	r1, #1
 80153ac:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80153b0:	4013      	ands	r3, r2
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80153be:	b480      	push	{r7}
 80153c0:	b083      	sub	sp, #12
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	095b      	lsrs	r3, r3, #5
 80153cc:	009a      	lsls	r2, r3, #2
 80153ce:	6879      	ldr	r1, [r7, #4]
 80153d0:	440a      	add	r2, r1
 80153d2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80153d4:	683a      	ldr	r2, [r7, #0]
 80153d6:	f002 021f 	and.w	r2, r2, #31
 80153da:	2001      	movs	r0, #1
 80153dc:	fa00 f202 	lsl.w	r2, r0, r2
 80153e0:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80153e2:	009b      	lsls	r3, r3, #2
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	4403      	add	r3, r0
 80153e8:	400a      	ands	r2, r1
 80153ea:	601a      	str	r2, [r3, #0]
}
 80153ec:	bf00      	nop
 80153ee:	370c      	adds	r7, #12
 80153f0:	46bd      	mov	sp, r7
 80153f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f6:	4770      	bx	lr

080153f8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8015402:	6839      	ldr	r1, [r7, #0]
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7ff ffc2 	bl	801538e <metal_bitmap_is_bit_set>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	bf0c      	ite	eq
 8015410:	2301      	moveq	r3, #1
 8015412:	2300      	movne	r3, #0
 8015414:	b2db      	uxtb	r3, r3
}
 8015416:	4618      	mov	r0, r3
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 801541e:	b580      	push	{r7, lr}
 8015420:	b086      	sub	sp, #24
 8015422:	af00      	add	r7, sp, #0
 8015424:	60f8      	str	r0, [r7, #12]
 8015426:	60b9      	str	r1, [r7, #8]
 8015428:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	617b      	str	r3, [r7, #20]
 801542e:	e002      	b.n	8015436 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	3301      	adds	r3, #1
 8015434:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8015436:	697a      	ldr	r2, [r7, #20]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	429a      	cmp	r2, r3
 801543c:	d207      	bcs.n	801544e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	4619      	mov	r1, r3
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f7ff ffd8 	bl	80153f8 <metal_bitmap_is_bit_clear>
 8015448:	4603      	mov	r3, r0
 801544a:	2b00      	cmp	r3, #0
 801544c:	d0f0      	beq.n	8015430 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 801544e:	697b      	ldr	r3, [r7, #20]
}
 8015450:	4618      	mov	r0, r3
 8015452:	3718      	adds	r7, #24
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <rpmsg_init_ept>:
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	607a      	str	r2, [r7, #4]
 8015464:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	2220      	movs	r2, #32
 801546a:	68b9      	ldr	r1, [r7, #8]
 801546c:	4618      	mov	r0, r3
 801546e:	f007 f937 	bl	801c6e0 <strncpy>
	ept->addr = src;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	683a      	ldr	r2, [r7, #0]
 801547c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	69ba      	ldr	r2, [r7, #24]
 8015482:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	69fa      	ldr	r2, [r7, #28]
 8015488:	631a      	str	r2, [r3, #48]	; 0x30
}
 801548a:	bf00      	nop
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b084      	sub	sp, #16
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
 801549a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 801549c:	f04f 33ff 	mov.w	r3, #4294967295
 80154a0:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	461a      	mov	r2, r3
 80154a6:	2100      	movs	r1, #0
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7ff ffb8 	bl	801541e <metal_bitmap_next_clear_bit>
 80154ae:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	68ba      	ldr	r2, [r7, #8]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d206      	bcs.n	80154c6 <rpmsg_get_address+0x34>
		addr = nextbit;
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	4619      	mov	r1, r3
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f7ff ff48 	bl	8015356 <metal_bitmap_set_bit>
	}

	return addr;
 80154c6:	68fb      	ldr	r3, [r7, #12]
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3710      	adds	r7, #16
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	da03      	bge.n	80154ec <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 80154e4:	6879      	ldr	r1, [r7, #4]
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	f7ff ff69 	bl	80153be <metal_bitmap_clear_bit>
}
 80154ec:	bf00      	nop
 80154ee:	3710      	adds	r7, #16
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	429a      	cmp	r2, r3
 8015506:	da05      	bge.n	8015514 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8015508:	6879      	ldr	r1, [r7, #4]
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	f7ff ff3f 	bl	801538e <metal_bitmap_is_bit_set>
 8015510:	4603      	mov	r3, r0
 8015512:	e000      	b.n	8015516 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8015514:	4b02      	ldr	r3, [pc, #8]	; (8015520 <rpmsg_is_address_set+0x2c>)
}
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	fffff82d 	.word	0xfffff82d

08015524 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b084      	sub	sp, #16
 8015528:	af00      	add	r7, sp, #0
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	429a      	cmp	r2, r3
 8015536:	da05      	bge.n	8015544 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8015538:	6879      	ldr	r1, [r7, #4]
 801553a:	68f8      	ldr	r0, [r7, #12]
 801553c:	f7ff ff0b 	bl	8015356 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8015540:	2300      	movs	r3, #0
 8015542:	e000      	b.n	8015546 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8015544:	4b02      	ldr	r3, [pc, #8]	; (8015550 <rpmsg_set_address+0x2c>)
	}
}
 8015546:	4618      	mov	r0, r3
 8015548:	3710      	adds	r7, #16
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}
 801554e:	bf00      	nop
 8015550:	fffff82d 	.word	0xfffff82d

08015554 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8015554:	b590      	push	{r4, r7, lr}
 8015556:	b089      	sub	sp, #36	; 0x24
 8015558:	af02      	add	r7, sp, #8
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	60b9      	str	r1, [r7, #8]
 801555e:	607a      	str	r2, [r7, #4]
 8015560:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d00a      	beq.n	801557e <rpmsg_send_offchannel_raw+0x2a>
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	6a1b      	ldr	r3, [r3, #32]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d006      	beq.n	801557e <rpmsg_send_offchannel_raw+0x2a>
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d003      	beq.n	801557e <rpmsg_send_offchannel_raw+0x2a>
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801557c:	d101      	bne.n	8015582 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 801557e:	4b0d      	ldr	r3, [pc, #52]	; (80155b4 <rpmsg_send_offchannel_raw+0x60>)
 8015580:	e014      	b.n	80155ac <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6a1b      	ldr	r3, [r3, #32]
 8015586:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801558c:	2b00      	cmp	r3, #0
 801558e:	d00c      	beq.n	80155aa <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8015594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015596:	9301      	str	r3, [sp, #4]
 8015598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	687a      	ldr	r2, [r7, #4]
 80155a0:	68b9      	ldr	r1, [r7, #8]
 80155a2:	6978      	ldr	r0, [r7, #20]
 80155a4:	47a0      	blx	r4
 80155a6:	4603      	mov	r3, r0
 80155a8:	e000      	b.n	80155ac <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 80155aa:	4b02      	ldr	r3, [pc, #8]	; (80155b4 <rpmsg_send_offchannel_raw+0x60>)
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	371c      	adds	r7, #28
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd90      	pop	{r4, r7, pc}
 80155b4:	fffff82d 	.word	0xfffff82d

080155b8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b090      	sub	sp, #64	; 0x40
 80155bc:	af02      	add	r7, sp, #8
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 80155cc:	6879      	ldr	r1, [r7, #4]
 80155ce:	f107 030c 	add.w	r3, r7, #12
 80155d2:	2220      	movs	r2, #32
 80155d4:	4618      	mov	r0, r3
 80155d6:	f007 f883 	bl	801c6e0 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80155de:	f107 030c 	add.w	r3, r7, #12
 80155e2:	2201      	movs	r2, #1
 80155e4:	9201      	str	r2, [sp, #4]
 80155e6:	2228      	movs	r2, #40	; 0x28
 80155e8:	9200      	str	r2, [sp, #0]
 80155ea:	2235      	movs	r2, #53	; 0x35
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7ff ffb1 	bl	8015554 <rpmsg_send_offchannel_raw>
 80155f2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 80155f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	da01      	bge.n	80155fe <rpmsg_send_ns_message+0x46>
		return ret;
 80155fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155fc:	e000      	b.n	8015600 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 80155fe:	2300      	movs	r3, #0
}
 8015600:	4618      	mov	r0, r3
 8015602:	3738      	adds	r7, #56	; 0x38
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b088      	sub	sp, #32
 801560c:	af00      	add	r7, sp, #0
 801560e:	60f8      	str	r0, [r7, #12]
 8015610:	60b9      	str	r1, [r7, #8]
 8015612:	607a      	str	r2, [r7, #4]
 8015614:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	61fb      	str	r3, [r7, #28]
 801561c:	e04b      	b.n	80156b6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 801561e:	2300      	movs	r3, #0
 8015620:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	3b34      	subs	r3, #52	; 0x34
 8015626:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801562e:	d006      	beq.n	801563e <rpmsg_get_endpoint+0x36>
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015634:	687a      	ldr	r2, [r7, #4]
 8015636:	429a      	cmp	r2, r3
 8015638:	d101      	bne.n	801563e <rpmsg_get_endpoint+0x36>
			return ept;
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	e040      	b.n	80156c0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015642:	687a      	ldr	r2, [r7, #4]
 8015644:	429a      	cmp	r2, r3
 8015646:	d106      	bne.n	8015656 <rpmsg_get_endpoint+0x4e>
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	429a      	cmp	r2, r3
 8015650:	d101      	bne.n	8015656 <rpmsg_get_endpoint+0x4e>
			return ept;
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	e034      	b.n	80156c0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d00c      	beq.n	8015676 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	2220      	movs	r2, #32
 8015660:	68b9      	ldr	r1, [r7, #8]
 8015662:	4618      	mov	r0, r3
 8015664:	f007 f82a 	bl	801c6bc <strncmp>
 8015668:	4603      	mov	r3, r0
 801566a:	2b00      	cmp	r3, #0
 801566c:	bf0c      	ite	eq
 801566e:	2301      	moveq	r3, #1
 8015670:	2300      	movne	r3, #0
 8015672:	b2db      	uxtb	r3, r3
 8015674:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d018      	beq.n	80156ae <rpmsg_get_endpoint+0xa6>
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d015      	beq.n	80156ae <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015688:	d006      	beq.n	8015698 <rpmsg_get_endpoint+0x90>
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d101      	bne.n	8015698 <rpmsg_get_endpoint+0x90>
			return ept;
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	e013      	b.n	80156c0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801569e:	d107      	bne.n	80156b0 <rpmsg_get_endpoint+0xa8>
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156a8:	d102      	bne.n	80156b0 <rpmsg_get_endpoint+0xa8>
			return ept;
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	e008      	b.n	80156c0 <rpmsg_get_endpoint+0xb8>
			continue;
 80156ae:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	61fb      	str	r3, [r7, #28]
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	69fa      	ldr	r2, [r7, #28]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d1af      	bne.n	801561e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 80156be:	2300      	movs	r3, #0
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3720      	adds	r7, #32
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b084      	sub	sp, #16
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d016      	beq.n	8015704 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6a1b      	ldr	r3, [r3, #32]
 80156da:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156e4:	d008      	beq.n	80156f8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80156f0:	461a      	mov	r2, r3
 80156f2:	2180      	movs	r1, #128	; 0x80
 80156f4:	f7ff feec 	bl	80154d0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	3334      	adds	r3, #52	; 0x34
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7ff fe0f 	bl	8015320 <metal_list_del>
 8015702:	e000      	b.n	8015706 <rpmsg_unregister_endpoint+0x3e>
		return;
 8015704:	bf00      	nop
}
 8015706:	3710      	adds	r7, #16
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 801571c:	687a      	ldr	r2, [r7, #4]
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	3334      	adds	r3, #52	; 0x34
 8015722:	4619      	mov	r1, r3
 8015724:	4610      	mov	r0, r2
 8015726:	f7ff fdee 	bl	8015306 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 801572a:	2300      	movs	r3, #0
}
 801572c:	4618      	mov	r0, r3
 801572e:	3708      	adds	r7, #8
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}

08015734 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b088      	sub	sp, #32
 8015738:	af02      	add	r7, sp, #8
 801573a:	60f8      	str	r0, [r7, #12]
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
 8015740:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	613b      	str	r3, [r7, #16]

	if (!ept)
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d101      	bne.n	8015750 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 801574c:	4b37      	ldr	r3, [pc, #220]	; (801582c <rpmsg_create_ept+0xf8>)
 801574e:	e068      	b.n	8015822 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	3358      	adds	r3, #88	; 0x58
 8015754:	4618      	mov	r0, r3
 8015756:	f7ff fda6 	bl	80152a6 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015760:	d018      	beq.n	8015794 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	3348      	adds	r3, #72	; 0x48
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	2180      	movs	r1, #128	; 0x80
 801576a:	4618      	mov	r0, r3
 801576c:	f7ff fec2 	bl	80154f4 <rpmsg_is_address_set>
 8015770:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d107      	bne.n	8015788 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	3348      	adds	r3, #72	; 0x48
 801577c:	683a      	ldr	r2, [r7, #0]
 801577e:	2180      	movs	r1, #128	; 0x80
 8015780:	4618      	mov	r0, r3
 8015782:	f7ff fecf 	bl	8015524 <rpmsg_set_address>
 8015786:	e00c      	b.n	80157a2 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	2b00      	cmp	r3, #0
 801578c:	dd40      	ble.n	8015810 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 801578e:	2300      	movs	r3, #0
 8015790:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8015792:	e040      	b.n	8015816 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	3348      	adds	r3, #72	; 0x48
 8015798:	2180      	movs	r1, #128	; 0x80
 801579a:	4618      	mov	r0, r3
 801579c:	f7ff fe79 	bl	8015492 <rpmsg_get_address>
 80157a0:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 80157a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a4:	9301      	str	r3, [sp, #4]
 80157a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a8:	9300      	str	r3, [sp, #0]
 80157aa:	6a3b      	ldr	r3, [r7, #32]
 80157ac:	693a      	ldr	r2, [r7, #16]
 80157ae:	6879      	ldr	r1, [r7, #4]
 80157b0:	68f8      	ldr	r0, [r7, #12]
 80157b2:	f7ff fe51 	bl	8015458 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 80157b6:	68f9      	ldr	r1, [r7, #12]
 80157b8:	68b8      	ldr	r0, [r7, #8]
 80157ba:	f7ff ffa7 	bl	801570c <rpmsg_register_endpoint>
 80157be:	6178      	str	r0, [r7, #20]
	if (status < 0)
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	da06      	bge.n	80157d4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	3348      	adds	r3, #72	; 0x48
 80157ca:	693a      	ldr	r2, [r7, #16]
 80157cc:	2180      	movs	r1, #128	; 0x80
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7ff fe7e 	bl	80154d0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d11c      	bne.n	8015814 <rpmsg_create_ept+0xe0>
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157e2:	d117      	bne.n	8015814 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	3358      	adds	r3, #88	; 0x58
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7ff fd67 	bl	80152bc <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 80157ee:	2100      	movs	r1, #0
 80157f0:	68f8      	ldr	r0, [r7, #12]
 80157f2:	f7ff fee1 	bl	80155b8 <rpmsg_send_ns_message>
 80157f6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	3358      	adds	r3, #88	; 0x58
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7ff fd52 	bl	80152a6 <metal_mutex_acquire>
		if (status)
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d005      	beq.n	8015814 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	f7ff ff5d 	bl	80156c8 <rpmsg_unregister_endpoint>
 801580e:	e002      	b.n	8015816 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8015810:	bf00      	nop
 8015812:	e000      	b.n	8015816 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8015814:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	3358      	adds	r3, #88	; 0x58
 801581a:	4618      	mov	r0, r3
 801581c:	f7ff fd4e 	bl	80152bc <metal_mutex_release>
	return status;
 8015820:	697b      	ldr	r3, [r7, #20]
}
 8015822:	4618      	mov	r0, r3
 8015824:	3718      	adds	r7, #24
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop
 801582c:	fffff82d 	.word	0xfffff82d

08015830 <__metal_cache_invalidate>:
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 801583a:	6839      	ldr	r1, [r7, #0]
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f000 fcc2 	bl	80161c6 <metal_machine_cache_invalidate>
}
 8015842:	bf00      	nop
 8015844:	3708      	adds	r7, #8
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <metal_cache_invalidate>:
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b082      	sub	sp, #8
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
 8015852:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8015854:	6839      	ldr	r1, [r7, #0]
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f7ff ffea 	bl	8015830 <__metal_cache_invalidate>
}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 801586c:	2300      	movs	r3, #0
}
 801586e:	4618      	mov	r0, r3
 8015870:	370c      	adds	r7, #12
 8015872:	46bd      	mov	sp, r7
 8015874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015878:	4770      	bx	lr

0801587a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 801587a:	b580      	push	{r7, lr}
 801587c:	b082      	sub	sp, #8
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f7ff ffee 	bl	8015864 <__metal_sleep_usec>
 8015888:	4603      	mov	r3, r0
}
 801588a:	4618      	mov	r0, r3
 801588c:	3708      	adds	r7, #8
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <metal_list_init>:
{
 8015892:	b480      	push	{r7}
 8015894:	b083      	sub	sp, #12
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	605a      	str	r2, [r3, #4]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	685a      	ldr	r2, [r3, #4]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	601a      	str	r2, [r3, #0]
}
 80158a8:	bf00      	nop
 80158aa:	370c      	adds	r7, #12
 80158ac:	46bd      	mov	sp, r7
 80158ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b2:	4770      	bx	lr

080158b4 <metal_io_virt_to_offset>:
{
 80158b4:	b480      	push	{r7}
 80158b6:	b085      	sub	sp, #20
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	683a      	ldr	r2, [r7, #0]
 80158c4:	1ad3      	subs	r3, r2, r3
 80158c6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	689b      	ldr	r3, [r3, #8]
 80158cc:	68fa      	ldr	r2, [r7, #12]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d201      	bcs.n	80158d6 <metal_io_virt_to_offset+0x22>
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	e001      	b.n	80158da <metal_io_virt_to_offset+0x26>
 80158d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3714      	adds	r7, #20
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr

080158e6 <__metal_mutex_init>:
{
 80158e6:	b480      	push	{r7}
 80158e8:	b085      	sub	sp, #20
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	60fb      	str	r3, [r7, #12]
 80158f2:	2300      	movs	r3, #0
 80158f4:	60bb      	str	r3, [r7, #8]
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	461a      	mov	r2, r3
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f3bf 8f5b 	dmb	ish
 8015900:	601a      	str	r2, [r3, #0]
 8015902:	f3bf 8f5b 	dmb	ish
}
 8015906:	bf00      	nop
 8015908:	3714      	adds	r7, #20
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr

08015912 <__metal_mutex_acquire>:
{
 8015912:	b480      	push	{r7}
 8015914:	b083      	sub	sp, #12
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 801591a:	bf00      	nop
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2201      	movs	r2, #1
 8015920:	4611      	mov	r1, r2
 8015922:	f3bf 8f5b 	dmb	ish
 8015926:	e8d3 2f4f 	ldrexb	r2, [r3]
 801592a:	e8c3 1f40 	strexb	r0, r1, [r3]
 801592e:	2800      	cmp	r0, #0
 8015930:	d1f9      	bne.n	8015926 <__metal_mutex_acquire+0x14>
 8015932:	f3bf 8f5b 	dmb	ish
 8015936:	b2d3      	uxtb	r3, r2
 8015938:	2b00      	cmp	r3, #0
 801593a:	d1ef      	bne.n	801591c <__metal_mutex_acquire+0xa>
}
 801593c:	bf00      	nop
 801593e:	bf00      	nop
 8015940:	370c      	adds	r7, #12
 8015942:	46bd      	mov	sp, r7
 8015944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015948:	4770      	bx	lr

0801594a <__metal_mutex_release>:
{
 801594a:	b480      	push	{r7}
 801594c:	b083      	sub	sp, #12
 801594e:	af00      	add	r7, sp, #0
 8015950:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f3bf 8f5b 	dmb	ish
 8015958:	2200      	movs	r2, #0
 801595a:	701a      	strb	r2, [r3, #0]
 801595c:	f3bf 8f5b 	dmb	ish
}
 8015960:	bf00      	nop
 8015962:	370c      	adds	r7, #12
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <metal_mutex_init>:
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f7ff ffb6 	bl	80158e6 <__metal_mutex_init>
}
 801597a:	bf00      	nop
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}

08015982 <metal_mutex_acquire>:
{
 8015982:	b580      	push	{r7, lr}
 8015984:	b082      	sub	sp, #8
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7ff ffc1 	bl	8015912 <__metal_mutex_acquire>
}
 8015990:	bf00      	nop
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <metal_mutex_release>:
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f7ff ffd2 	bl	801594a <__metal_mutex_release>
}
 80159a6:	bf00      	nop
 80159a8:	3708      	adds	r7, #8
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <rpmsg_init_ept>:
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b084      	sub	sp, #16
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	60f8      	str	r0, [r7, #12]
 80159b6:	60b9      	str	r1, [r7, #8]
 80159b8:	607a      	str	r2, [r7, #4]
 80159ba:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	2220      	movs	r2, #32
 80159c0:	68b9      	ldr	r1, [r7, #8]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f006 fe8c 	bl	801c6e0 <strncpy>
	ept->addr = src;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	683a      	ldr	r2, [r7, #0]
 80159d2:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	69ba      	ldr	r2, [r7, #24]
 80159d8:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	69fa      	ldr	r2, [r7, #28]
 80159de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80159e0:	bf00      	nop
 80159e2:	3710      	adds	r7, #16
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80159f4:	699b      	ldr	r3, [r3, #24]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	370c      	adds	r7, #12
 80159fa:	46bd      	mov	sp, r7
 80159fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a00:	4770      	bx	lr

08015a02 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b082      	sub	sp, #8
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a12:	6a1b      	ldr	r3, [r3, #32]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015a1a:	78f9      	ldrb	r1, [r7, #3]
 8015a1c:	4610      	mov	r0, r2
 8015a1e:	4798      	blx	r3
}
 8015a20:	bf00      	nop
 8015a22:	3708      	adds	r7, #8
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a34:	6a1b      	ldr	r3, [r3, #32]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	687a      	ldr	r2, [r7, #4]
 8015a3a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	4798      	blx	r3
 8015a40:	4603      	mov	r3, r0
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3708      	adds	r7, #8
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}

08015a4a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b082      	sub	sp, #8
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a56:	6a1b      	ldr	r3, [r3, #32]
 8015a58:	689b      	ldr	r3, [r3, #8]
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015a5e:	4610      	mov	r0, r2
 8015a60:	4798      	blx	r3
 8015a62:	4603      	mov	r3, r0
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b086      	sub	sp, #24
 8015a70:	af02      	add	r7, sp, #8
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	607a      	str	r2, [r7, #4]
 8015a78:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015a7e:	68b9      	ldr	r1, [r7, #8]
 8015a80:	69bb      	ldr	r3, [r7, #24]
 8015a82:	9300      	str	r3, [sp, #0]
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	f000 fbf2 	bl	8016270 <virtio_create_virtqueues>
 8015a8c:	4603      	mov	r3, r0
					callbacks);
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b082      	sub	sp, #8
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
 8015a9e:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8015aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa4:	683a      	ldr	r2, [r7, #0]
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f7ff fdad 	bl	8015608 <rpmsg_get_endpoint>
 8015aae:	4603      	mov	r3, r0
}
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	3708      	adds	r7, #8
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b085      	sub	sp, #20
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	683a      	ldr	r2, [r7, #0]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d901      	bls.n	8015ad0 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8015acc:	2300      	movs	r3, #0
 8015ace:	e00f      	b.n	8015af0 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681a      	ldr	r2, [r3, #0]
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6899      	ldr	r1, [r3, #8]
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	685b      	ldr	r3, [r3, #4]
 8015adc:	1acb      	subs	r3, r1, r3
 8015ade:	4413      	add	r3, r2
 8015ae0:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	685a      	ldr	r2, [r3, #4]
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	1ad2      	subs	r2, r2, r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	605a      	str	r2, [r3, #4]

	return buffer;
 8015aee:	68fb      	ldr	r3, [r7, #12]
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3714      	adds	r7, #20
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr

08015afc <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b085      	sub	sp, #20
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d01d      	beq.n	8015b4a <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	68ba      	ldr	r2, [r7, #8]
 8015b12:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f003 0303 	and.w	r3, r3, #3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d004      	beq.n	8015b28 <rpmsg_virtio_init_shm_pool+0x2c>
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f023 0303 	bic.w	r3, r3, #3
 8015b24:	3304      	adds	r3, #4
 8015b26:	e000      	b.n	8015b2a <rpmsg_virtio_init_shm_pool+0x2e>
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f003 0303 	and.w	r3, r3, #3
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d004      	beq.n	8015b42 <rpmsg_virtio_init_shm_pool+0x46>
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f023 0303 	bic.w	r3, r3, #3
 8015b3e:	3304      	adds	r3, #4
 8015b40:	e000      	b.n	8015b44 <rpmsg_virtio_init_shm_pool+0x48>
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	68fa      	ldr	r2, [r7, #12]
 8015b46:	6053      	str	r3, [r2, #4]
 8015b48:	e000      	b.n	8015b4c <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8015b4a:	bf00      	nop
}
 8015b4c:	3714      	adds	r7, #20
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b54:	4770      	bx	lr

08015b56 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b08a      	sub	sp, #40	; 0x28
 8015b5a:	af02      	add	r7, sp, #8
 8015b5c:	60f8      	str	r0, [r7, #12]
 8015b5e:	60b9      	str	r1, [r7, #8]
 8015b60:	607a      	str	r2, [r7, #4]
 8015b62:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015b64:	68f8      	ldr	r0, [r7, #12]
 8015b66:	f7ff ff3f 	bl	80159e8 <rpmsg_virtio_get_role>
 8015b6a:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015b6c:	69fb      	ldr	r3, [r7, #28]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d10d      	bne.n	8015b8e <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8015b72:	68bb      	ldr	r3, [r7, #8]
 8015b74:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015b7e:	f107 0114 	add.w	r1, r7, #20
 8015b82:	68bb      	ldr	r3, [r7, #8]
 8015b84:	9300      	str	r3, [sp, #0]
 8015b86:	2301      	movs	r3, #1
 8015b88:	2200      	movs	r2, #0
 8015b8a:	f000 fcc0 	bl	801650e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8015b8e:	bf00      	nop
 8015b90:	3720      	adds	r7, #32
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}

08015b96 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8015b96:	b580      	push	{r7, lr}
 8015b98:	b08a      	sub	sp, #40	; 0x28
 8015b9a:	af02      	add	r7, sp, #8
 8015b9c:	60f8      	str	r0, [r7, #12]
 8015b9e:	60b9      	str	r1, [r7, #8]
 8015ba0:	607a      	str	r2, [r7, #4]
 8015ba2:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015ba4:	68f8      	ldr	r0, [r7, #12]
 8015ba6:	f7ff ff1f 	bl	80159e8 <rpmsg_virtio_get_role>
 8015baa:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d10f      	bne.n	8015bd2 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8015bb2:	68bb      	ldr	r3, [r7, #8]
 8015bb4:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8015bbe:	f107 0114 	add.w	r1, r7, #20
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	2200      	movs	r2, #0
 8015bca:	f000 fca0 	bl	801650e <virtqueue_add_buffer>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	e000      	b.n	8015bd4 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8015bd2:	2300      	movs	r3, #0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3720      	adds	r7, #32
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b086      	sub	sp, #24
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015be8:	68f8      	ldr	r0, [r7, #12]
 8015bea:	f7ff fefd 	bl	80159e8 <rpmsg_virtio_get_role>
 8015bee:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d116      	bne.n	8015c28 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	68b9      	ldr	r1, [r7, #8]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f000 fcc7 	bl	8016596 <virtqueue_get_buffer>
 8015c08:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d10b      	bne.n	8015c28 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7ff ff4d 	bl	8015ab8 <rpmsg_virtio_shm_pool_get_buffer>
 8015c1e:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c26:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8015c28:	697b      	ldr	r3, [r7, #20]
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3718      	adds	r7, #24
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}

08015c32 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8015c32:	b580      	push	{r7, lr}
 8015c34:	b086      	sub	sp, #24
 8015c36:	af00      	add	r7, sp, #0
 8015c38:	60f8      	str	r0, [r7, #12]
 8015c3a:	60b9      	str	r1, [r7, #8]
 8015c3c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f7ff fed2 	bl	80159e8 <rpmsg_virtio_get_role>
 8015c44:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d107      	bne.n	8015c60 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	68b9      	ldr	r1, [r7, #8]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f000 fc9c 	bl	8016596 <virtqueue_get_buffer>
 8015c5e:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d005      	beq.n	8015c72 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	6978      	ldr	r0, [r7, #20]
 8015c6e:	f7ff fdec 	bl	801584a <metal_cache_invalidate>
	}

	return data;
 8015c72:	697b      	ldr	r3, [r7, #20]
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	3718      	adds	r7, #24
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f7ff feaf 	bl	80159e8 <rpmsg_virtio_get_role>
 8015c8a:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d102      	bne.n	8015c9c <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8015c96:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8015c9a:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
	...

08015ca8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b090      	sub	sp, #64	; 0x40
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	607a      	str	r2, [r7, #4]
 8015cb4:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8015cc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cc4:	f7ff feb0 	bl	8015a28 <rpmsg_virtio_get_status>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8015ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cce:	f003 0304 	and.w	r3, r3, #4
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d101      	bne.n	8015cda <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8015cd6:	4b45      	ldr	r3, [pc, #276]	; (8015dec <rpmsg_virtio_send_offchannel_raw+0x144>)
 8015cd8:	e083      	b.n	8015de2 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8015cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d003      	beq.n	8015ce8 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8015ce0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8015ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ce6:	e001      	b.n	8015cec <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	3358      	adds	r3, #88	; 0x58
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7ff fe46 	bl	8015982 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8015cf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cf8:	f7ff ffc0 	bl	8015c7c <_rpmsg_virtio_get_buffer_size>
 8015cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8015cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	429a      	cmp	r2, r3
 8015d04:	dc08      	bgt.n	8015d18 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8015d06:	f107 0216 	add.w	r2, r7, #22
 8015d0a:	f107 0310 	add.w	r3, r7, #16
 8015d0e:	4619      	mov	r1, r3
 8015d10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015d12:	f7ff ff63 	bl	8015bdc <rpmsg_virtio_get_tx_buffer>
 8015d16:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	3358      	adds	r3, #88	; 0x58
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7ff fe3b 	bl	8015998 <metal_mutex_release>
		if (buffer || !tick_count)
 8015d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d10e      	bne.n	8015d46 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8015d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d00b      	beq.n	8015d46 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8015d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d001      	beq.n	8015d38 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8015d34:	4b2e      	ldr	r3, [pc, #184]	; (8015df0 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8015d36:	e054      	b.n	8015de2 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8015d38:	200a      	movs	r0, #10
 8015d3a:	f7ff fd9e 	bl	801587a <metal_sleep_usec>
		tick_count--;
 8015d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d40:	3b01      	subs	r3, #1
 8015d42:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8015d44:	e7d2      	b.n	8015cec <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8015d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d101      	bne.n	8015d50 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8015d4c:	4b29      	ldr	r3, [pc, #164]	; (8015df4 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8015d4e:	e048      	b.n	8015de2 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8015d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8015d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d66:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8015d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d6c:	f7ff fda2 	bl	80158b4 <metal_io_virt_to_offset>
 8015d70:	4601      	mov	r1, r0
 8015d72:	f107 0218 	add.w	r2, r7, #24
 8015d76:	2310      	movs	r3, #16
 8015d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d7a:	f7fe fdd8 	bl	801492e <metal_io_block_write>
 8015d7e:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8015d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d82:	2b10      	cmp	r3, #16
 8015d84:	d000      	beq.n	8015d88 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8015d86:	e7fe      	b.n	8015d86 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8015d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d8a:	3310      	adds	r3, #16
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d90:	f7ff fd90 	bl	80158b4 <metal_io_virt_to_offset>
 8015d94:	4601      	mov	r1, r0
 8015d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d98:	683a      	ldr	r2, [r7, #0]
 8015d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d9c:	f7fe fdc7 	bl	801492e <metal_io_block_write>
 8015da0:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8015da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d000      	beq.n	8015dac <rpmsg_virtio_send_offchannel_raw+0x104>
 8015daa:	e7fe      	b.n	8015daa <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	3358      	adds	r3, #88	; 0x58
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7ff fde6 	bl	8015982 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8015db6:	693a      	ldr	r2, [r7, #16]
 8015db8:	8afb      	ldrh	r3, [r7, #22]
 8015dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015dbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015dbe:	f7ff feea 	bl	8015b96 <rpmsg_virtio_enqueue_buffer>
 8015dc2:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d000      	beq.n	8015dcc <rpmsg_virtio_send_offchannel_raw+0x124>
 8015dca:	e7fe      	b.n	8015dca <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8015dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 fc5a 	bl	801668a <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	3358      	adds	r3, #88	; 0x58
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7ff fddc 	bl	8015998 <metal_mutex_release>

	return size;
 8015de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3740      	adds	r7, #64	; 0x40
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}
 8015dea:	bf00      	nop
 8015dec:	fffff82c 	.word	0xfffff82c
 8015df0:	fffff82b 	.word	0xfffff82b
 8015df4:	fffff82e 	.word	0xfffff82e

08015df8 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8015e00:	bf00      	nop
 8015e02:	370c      	adds	r7, #12
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr

08015e0c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8015e0c:	b590      	push	{r4, r7, lr}
 8015e0e:	b08d      	sub	sp, #52	; 0x34
 8015e10:	af02      	add	r7, sp, #8
 8015e12:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8015e1a:	6a3b      	ldr	r3, [r7, #32]
 8015e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e1e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8015e20:	69fb      	ldr	r3, [r7, #28]
 8015e22:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8015e24:	69bb      	ldr	r3, [r7, #24]
 8015e26:	3358      	adds	r3, #88	; 0x58
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7ff fdaa 	bl	8015982 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8015e2e:	f107 020a 	add.w	r2, r7, #10
 8015e32:	f107 030c 	add.w	r3, r7, #12
 8015e36:	4619      	mov	r1, r3
 8015e38:	69f8      	ldr	r0, [r7, #28]
 8015e3a:	f7ff fefa 	bl	8015c32 <rpmsg_virtio_get_rx_buffer>
 8015e3e:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8015e40:	69bb      	ldr	r3, [r7, #24]
 8015e42:	3358      	adds	r3, #88	; 0x58
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7ff fda7 	bl	8015998 <metal_mutex_release>

	while (rp_hdr) {
 8015e4a:	e04c      	b.n	8015ee6 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8015e4c:	69bb      	ldr	r3, [r7, #24]
 8015e4e:	3358      	adds	r3, #88	; 0x58
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7ff fd96 	bl	8015982 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8015e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	69b8      	ldr	r0, [r7, #24]
 8015e5e:	f7ff fe1a 	bl	8015a96 <rpmsg_get_ept_from_addr>
 8015e62:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8015e64:	69bb      	ldr	r3, [r7, #24]
 8015e66:	3358      	adds	r3, #88	; 0x58
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7ff fd95 	bl	8015998 <metal_mutex_release>

		if (!ept)
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d03c      	beq.n	8015eee <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e7c:	d103      	bne.n	8015e86 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8015e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e80:	681a      	ldr	r2, [r3, #0]
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8c:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	899b      	ldrh	r3, [r3, #12]
 8015e94:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8015e96:	4618      	mov	r0, r3
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ea0:	9300      	str	r3, [sp, #0]
 8015ea2:	4613      	mov	r3, r2
 8015ea4:	4602      	mov	r2, r0
 8015ea6:	6978      	ldr	r0, [r7, #20]
 8015ea8:	47a0      	blx	r4
 8015eaa:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d000      	beq.n	8015eb4 <rpmsg_virtio_rx_callback+0xa8>
 8015eb2:	e7fe      	b.n	8015eb2 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	3358      	adds	r3, #88	; 0x58
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ff fd62 	bl	8015982 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8015ebe:	68fa      	ldr	r2, [r7, #12]
 8015ec0:	897b      	ldrh	r3, [r7, #10]
 8015ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ec4:	69f8      	ldr	r0, [r7, #28]
 8015ec6:	f7ff fe46 	bl	8015b56 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8015eca:	f107 020a 	add.w	r2, r7, #10
 8015ece:	f107 030c 	add.w	r3, r7, #12
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	69f8      	ldr	r0, [r7, #28]
 8015ed6:	f7ff feac 	bl	8015c32 <rpmsg_virtio_get_rx_buffer>
 8015eda:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	3358      	adds	r3, #88	; 0x58
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ff fd59 	bl	8015998 <metal_mutex_release>
	while (rp_hdr) {
 8015ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d1af      	bne.n	8015e4c <rpmsg_virtio_rx_callback+0x40>
 8015eec:	e000      	b.n	8015ef0 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8015eee:	bf00      	nop
	}
}
 8015ef0:	372c      	adds	r7, #44	; 0x2c
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd90      	pop	{r4, r7, pc}

08015ef6 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8015ef6:	b580      	push	{r7, lr}
 8015ef8:	b092      	sub	sp, #72	; 0x48
 8015efa:	af00      	add	r7, sp, #0
 8015efc:	60f8      	str	r0, [r7, #12]
 8015efe:	60b9      	str	r1, [r7, #8]
 8015f00:	607a      	str	r2, [r7, #4]
 8015f02:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	6a1b      	ldr	r3, [r3, #32]
 8015f08:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8015f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f0c:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8015f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f12:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2b28      	cmp	r3, #40	; 0x28
 8015f1c:	d001      	beq.n	8015f22 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	e057      	b.n	8015fd2 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8015f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8015f24:	4619      	mov	r1, r3
 8015f26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015f28:	f7ff fcc4 	bl	80158b4 <metal_io_virt_to_offset>
 8015f2c:	4601      	mov	r1, r0
 8015f2e:	f107 0210 	add.w	r2, r7, #16
 8015f32:	2320      	movs	r3, #32
 8015f34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015f36:	f7fe fc83 	bl	8014840 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8015f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f3c:	6a1b      	ldr	r3, [r3, #32]
 8015f3e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8015f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f42:	3358      	adds	r3, #88	; 0x58
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7ff fd1c 	bl	8015982 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8015f4a:	f107 0110 	add.w	r1, r7, #16
 8015f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f50:	f04f 32ff 	mov.w	r2, #4294967295
 8015f54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015f56:	f7ff fb57 	bl	8015608 <rpmsg_get_endpoint>
 8015f5a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8015f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f60:	f003 0301 	and.w	r3, r3, #1
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d017      	beq.n	8015f98 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8015f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d003      	beq.n	8015f76 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8015f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f70:	f04f 32ff 	mov.w	r2, #4294967295
 8015f74:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8015f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f78:	3358      	adds	r3, #88	; 0x58
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7ff fd0c 	bl	8015998 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8015f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d024      	beq.n	8015fd0 <rpmsg_virtio_ns_callback+0xda>
 8015f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d020      	beq.n	8015fd0 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8015f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f92:	68f8      	ldr	r0, [r7, #12]
 8015f94:	4798      	blx	r3
 8015f96:	e01b      	b.n	8015fd0 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8015f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d110      	bne.n	8015fc0 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8015f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fa0:	3358      	adds	r3, #88	; 0x58
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7ff fcf8 	bl	8015998 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8015fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d00f      	beq.n	8015fd0 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8015fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fb4:	f107 0110 	add.w	r1, r7, #16
 8015fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015fba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015fbc:	4798      	blx	r3
 8015fbe:	e007      	b.n	8015fd0 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8015fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015fc4:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8015fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fc8:	3358      	adds	r3, #88	; 0x58
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7ff fce4 	bl	8015998 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8015fd0:	2300      	movs	r3, #0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3748      	adds	r7, #72	; 0x48
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
	...

08015fdc <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b094      	sub	sp, #80	; 0x50
 8015fe0:	af02      	add	r7, sp, #8
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	60b9      	str	r1, [r7, #8]
 8015fe6:	607a      	str	r2, [r7, #4]
 8015fe8:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 8015fee:	2264      	movs	r2, #100	; 0x64
 8015ff0:	2100      	movs	r1, #0
 8015ff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015ff4:	f005 fa18 	bl	801b428 <memset>
	metal_mutex_init(&rdev->lock);
 8015ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ffa:	3358      	adds	r3, #88	; 0x58
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7ff fcb5 	bl	801596c <metal_mutex_init>
	rvdev->vdev = vdev;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	68ba      	ldr	r2, [r7, #8]
 8016006:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8016008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	68fa      	ldr	r2, [r7, #12]
 8016012:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8016014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016016:	4a5d      	ldr	r2, [pc, #372]	; (801618c <rpmsg_init_vdev+0x1b0>)
 8016018:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 801601a:	68f8      	ldr	r0, [r7, #12]
 801601c:	f7ff fce4 	bl	80159e8 <rpmsg_virtio_get_role>
 8016020:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016024:	2b00      	cmp	r3, #0
 8016026:	d120      	bne.n	801606a <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8016028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801602a:	2b00      	cmp	r3, #0
 801602c:	d101      	bne.n	8016032 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 801602e:	4b58      	ldr	r3, [pc, #352]	; (8016190 <rpmsg_init_vdev+0x1b4>)
 8016030:	e0a7      	b.n	8016182 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 8016032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016034:	689b      	ldr	r3, [r3, #8]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d101      	bne.n	801603e <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 801603a:	4b56      	ldr	r3, [pc, #344]	; (8016194 <rpmsg_init_vdev+0x1b8>)
 801603c:	e0a1      	b.n	8016182 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016042:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 8016044:	4b54      	ldr	r3, [pc, #336]	; (8016198 <rpmsg_init_vdev+0x1bc>)
 8016046:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8016048:	4b54      	ldr	r3, [pc, #336]	; (801619c <rpmsg_init_vdev+0x1c0>)
 801604a:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 801604c:	4b54      	ldr	r3, [pc, #336]	; (80161a0 <rpmsg_init_vdev+0x1c4>)
 801604e:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8016050:	4b54      	ldr	r3, [pc, #336]	; (80161a4 <rpmsg_init_vdev+0x1c8>)
 8016052:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016062:	3318      	adds	r3, #24
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	683a      	ldr	r2, [r7, #0]
 801606e:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8016070:	f107 0220 	add.w	r2, r7, #32
 8016074:	f107 0318 	add.w	r3, r7, #24
 8016078:	9300      	str	r3, [sp, #0]
 801607a:	4613      	mov	r3, r2
 801607c:	2202      	movs	r2, #2
 801607e:	2100      	movs	r1, #0
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7ff fcf3 	bl	8015a6c <rpmsg_virtio_create_virtqueues>
 8016086:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8016088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801608a:	2b00      	cmp	r3, #0
 801608c:	d001      	beq.n	8016092 <rpmsg_init_vdev+0xb6>
		return status;
 801608e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016090:	e077      	b.n	8016182 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8016092:	2300      	movs	r3, #0
 8016094:	643b      	str	r3, [r7, #64]	; 0x40
 8016096:	e00f      	b.n	80160b8 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801609c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801609e:	4613      	mov	r3, r2
 80160a0:	005b      	lsls	r3, r3, #1
 80160a2:	4413      	add	r3, r2
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	440b      	add	r3, r1
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 80160ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ae:	683a      	ldr	r2, [r7, #0]
 80160b0:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80160b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160b4:	3301      	adds	r3, #1
 80160b6:	643b      	str	r3, [r7, #64]	; 0x40
 80160b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160ba:	2b01      	cmp	r3, #1
 80160bc:	d9ec      	bls.n	8016098 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80160be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d137      	bne.n	8016134 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 80160c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80160c8:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80160ca:	2300      	movs	r3, #0
 80160cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160ce:	e02a      	b.n	8016126 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 80160d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80160d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80160d6:	f7ff fcef 	bl	8015ab8 <rpmsg_virtio_shm_pool_get_buffer>
 80160da:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 80160dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d101      	bne.n	80160e6 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 80160e2:	4b2c      	ldr	r3, [pc, #176]	; (8016194 <rpmsg_init_vdev+0x1b8>)
 80160e4:	e04d      	b.n	8016182 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 80160e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e8:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 80160ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160ec:	6838      	ldr	r0, [r7, #0]
 80160ee:	f7ff fbe1 	bl	80158b4 <metal_io_virt_to_offset>
 80160f2:	4601      	mov	r1, r0
 80160f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80160f8:	2200      	movs	r2, #0
 80160fa:	6838      	ldr	r0, [r7, #0]
 80160fc:	f7fe fc8d 	bl	8014a1a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016104:	f107 0110 	add.w	r1, r7, #16
 8016108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610a:	9300      	str	r3, [sp, #0]
 801610c:	2301      	movs	r3, #1
 801610e:	2200      	movs	r2, #0
 8016110:	f000 f9fd 	bl	801650e <virtqueue_add_buffer>
 8016114:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8016116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016118:	2b00      	cmp	r3, #0
 801611a:	d001      	beq.n	8016120 <rpmsg_init_vdev+0x144>
				return status;
 801611c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801611e:	e030      	b.n	8016182 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8016120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016122:	3301      	adds	r3, #1
 8016124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801612a:	895b      	ldrh	r3, [r3, #10]
 801612c:	461a      	mov	r2, r3
 801612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016130:	4293      	cmp	r3, r2
 8016132:	d3cd      	bcc.n	80160d0 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8016134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016136:	4618      	mov	r0, r3
 8016138:	f7ff fbab 	bl	8015892 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f7ff fc84 	bl	8015a4a <rpmsg_virtio_get_features>
 8016142:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8016144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016146:	f003 0301 	and.w	r3, r3, #1
 801614a:	2b00      	cmp	r3, #0
 801614c:	d011      	beq.n	8016172 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 801614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016150:	f103 0008 	add.w	r0, r3, #8
 8016154:	2300      	movs	r3, #0
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	4b13      	ldr	r3, [pc, #76]	; (80161a8 <rpmsg_init_vdev+0x1cc>)
 801615a:	9300      	str	r3, [sp, #0]
 801615c:	2335      	movs	r3, #53	; 0x35
 801615e:	2235      	movs	r2, #53	; 0x35
 8016160:	4912      	ldr	r1, [pc, #72]	; (80161ac <rpmsg_init_vdev+0x1d0>)
 8016162:	f7ff fc24 	bl	80159ae <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8016166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016168:	3308      	adds	r3, #8
 801616a:	4619      	mov	r1, r3
 801616c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801616e:	f7ff facd 	bl	801570c <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8016172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016174:	2b00      	cmp	r3, #0
 8016176:	d103      	bne.n	8016180 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8016178:	2104      	movs	r1, #4
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	f7ff fc41 	bl	8015a02 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8016180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016182:	4618      	mov	r0, r3
 8016184:	3748      	adds	r7, #72	; 0x48
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	08015ca9 	.word	0x08015ca9
 8016190:	fffff82d 	.word	0xfffff82d
 8016194:	fffff82e 	.word	0xfffff82e
 8016198:	08020508 	.word	0x08020508
 801619c:	08020510 	.word	0x08020510
 80161a0:	08015e0d 	.word	0x08015e0d
 80161a4:	08015df9 	.word	0x08015df9
 80161a8:	08015ef7 	.word	0x08015ef7
 80161ac:	08020518 	.word	0x08020518

080161b0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 80161b0:	b480      	push	{r7}
 80161b2:	b083      	sub	sp, #12
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80161ba:	bf00      	nop
 80161bc:	370c      	adds	r7, #12
 80161be:	46bd      	mov	sp, r7
 80161c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c4:	4770      	bx	lr

080161c6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 80161c6:	b480      	push	{r7}
 80161c8:	b083      	sub	sp, #12
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	6078      	str	r0, [r7, #4]
 80161ce:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80161d0:	bf00      	nop
 80161d2:	370c      	adds	r7, #12
 80161d4:	46bd      	mov	sp, r7
 80161d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161da:	4770      	bx	lr

080161dc <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 80161dc:	b480      	push	{r7}
 80161de:	b085      	sub	sp, #20
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	607a      	str	r2, [r7, #4]
 80161e8:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 80161ea:	68fb      	ldr	r3, [r7, #12]
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	3714      	adds	r7, #20
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr

080161f8 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b085      	sub	sp, #20
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	011b      	lsls	r3, r3, #4
 8016206:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3303      	adds	r3, #3
 801620c:	005a      	lsls	r2, r3, #1
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	4413      	add	r3, r2
 8016212:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8016214:	68fa      	ldr	r2, [r7, #12]
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	4413      	add	r3, r2
 801621a:	1e5a      	subs	r2, r3, #1
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	425b      	negs	r3, r3
 8016220:	4013      	ands	r3, r2
 8016222:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	4413      	add	r3, r2
 801622c:	3306      	adds	r3, #6
 801622e:	60fb      	str	r3, [r7, #12]

	return size;
 8016230:	68fb      	ldr	r3, [r7, #12]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3714      	adds	r7, #20
 8016236:	46bd      	mov	sp, r7
 8016238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623c:	4770      	bx	lr

0801623e <metal_io_virt_to_offset>:
{
 801623e:	b480      	push	{r7}
 8016240:	b085      	sub	sp, #20
 8016242:	af00      	add	r7, sp, #0
 8016244:	6078      	str	r0, [r7, #4]
 8016246:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	683a      	ldr	r2, [r7, #0]
 801624e:	1ad3      	subs	r3, r2, r3
 8016250:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	689b      	ldr	r3, [r3, #8]
 8016256:	68fa      	ldr	r2, [r7, #12]
 8016258:	429a      	cmp	r2, r3
 801625a:	d201      	bcs.n	8016260 <metal_io_virt_to_offset+0x22>
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	e001      	b.n	8016264 <metal_io_virt_to_offset+0x26>
 8016260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016264:	4618      	mov	r0, r3
 8016266:	3714      	adds	r7, #20
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8016270:	b590      	push	{r4, r7, lr}
 8016272:	b091      	sub	sp, #68	; 0x44
 8016274:	af04      	add	r7, sp, #16
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	607a      	str	r2, [r7, #4]
 801627c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016282:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016288:	429a      	cmp	r2, r3
 801628a:	d902      	bls.n	8016292 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 801628c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8016290:	e053      	b.n	801633a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8016292:	2300      	movs	r3, #0
 8016294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016296:	e04b      	b.n	8016330 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801629c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801629e:	4613      	mov	r3, r2
 80162a0:	005b      	lsls	r3, r3, #1
 80162a2:	4413      	add	r3, r2
 80162a4:	00db      	lsls	r3, r3, #3
 80162a6:	440b      	add	r3, r1
 80162a8:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 80162aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ac:	3304      	adds	r3, #4
 80162ae:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	699b      	ldr	r3, [r3, #24]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d118      	bne.n	80162ea <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 80162b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ba:	695b      	ldr	r3, [r3, #20]
 80162bc:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 80162be:	6a3b      	ldr	r3, [r7, #32]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	4619      	mov	r1, r3
 80162c4:	69f8      	ldr	r0, [r7, #28]
 80162c6:	f7ff ffba 	bl	801623e <metal_io_virt_to_offset>
 80162ca:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 80162cc:	6a3b      	ldr	r3, [r7, #32]
 80162ce:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 80162d0:	461a      	mov	r2, r3
 80162d2:	6a3b      	ldr	r3, [r7, #32]
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	4619      	mov	r1, r3
 80162d8:	4610      	mov	r0, r2
 80162da:	f7ff ff8d 	bl	80161f8 <vring_size>
 80162de:	4603      	mov	r3, r0
 80162e0:	2200      	movs	r2, #0
 80162e2:	69b9      	ldr	r1, [r7, #24]
 80162e4:	69f8      	ldr	r0, [r7, #28]
 80162e6:	f7fe fb98 	bl	8014a1a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80162ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ec:	b298      	uxth	r0, r3
 80162ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f0:	009b      	lsls	r3, r3, #2
 80162f2:	683a      	ldr	r2, [r7, #0]
 80162f4:	4413      	add	r3, r2
 80162f6:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80162f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fa:	009b      	lsls	r3, r3, #2
 80162fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80162fe:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8016300:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8016306:	6a12      	ldr	r2, [r2, #32]
 8016308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801630a:	6809      	ldr	r1, [r1, #0]
 801630c:	9102      	str	r1, [sp, #8]
 801630e:	9201      	str	r2, [sp, #4]
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	6a3b      	ldr	r3, [r7, #32]
 8016314:	4622      	mov	r2, r4
 8016316:	4601      	mov	r1, r0
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f000 f8c4 	bl	80164a6 <virtqueue_create>
 801631e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d001      	beq.n	801632a <virtio_create_virtqueues+0xba>
			return ret;
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	e007      	b.n	801633a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 801632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632c:	3301      	adds	r3, #1
 801632e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	429a      	cmp	r2, r3
 8016336:	d3af      	bcc.n	8016298 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8016338:	2300      	movs	r3, #0
}
 801633a:	4618      	mov	r0, r3
 801633c:	3734      	adds	r7, #52	; 0x34
 801633e:	46bd      	mov	sp, r7
 8016340:	bd90      	pop	{r4, r7, pc}

08016342 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8016342:	b480      	push	{r7}
 8016344:	b085      	sub	sp, #20
 8016346:	af00      	add	r7, sp, #0
 8016348:	60f8      	str	r0, [r7, #12]
 801634a:	60b9      	str	r1, [r7, #8]
 801634c:	607a      	str	r2, [r7, #4]
 801634e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	68ba      	ldr	r2, [r7, #8]
 8016354:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	687a      	ldr	r2, [r7, #4]
 801635a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	011b      	lsls	r3, r3, #4
 8016360:	687a      	ldr	r2, [r7, #4]
 8016362:	441a      	add	r2, r3
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	689a      	ldr	r2, [r3, #8]
 801636c:	68bb      	ldr	r3, [r7, #8]
 801636e:	005b      	lsls	r3, r3, #1
 8016370:	4413      	add	r3, r2
 8016372:	3304      	adds	r3, #4
 8016374:	461a      	mov	r2, r3
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 801637a:	1c5a      	adds	r2, r3, #1
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	425b      	negs	r3, r3
 8016380:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8016382:	461a      	mov	r2, r3
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	60da      	str	r2, [r3, #12]
}
 8016388:	bf00      	nop
 801638a:	3714      	adds	r7, #20
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr

08016394 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8016394:	b480      	push	{r7}
 8016396:	b083      	sub	sp, #12
 8016398:	af00      	add	r7, sp, #0
 801639a:	4603      	mov	r3, r0
 801639c:	80fb      	strh	r3, [r7, #6]
 801639e:	460b      	mov	r3, r1
 80163a0:	80bb      	strh	r3, [r7, #4]
 80163a2:	4613      	mov	r3, r2
 80163a4:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 80163a6:	88ba      	ldrh	r2, [r7, #4]
 80163a8:	88fb      	ldrh	r3, [r7, #6]
 80163aa:	1ad3      	subs	r3, r2, r3
 80163ac:	b29b      	uxth	r3, r3
 80163ae:	3b01      	subs	r3, #1
 80163b0:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 80163b2:	88b9      	ldrh	r1, [r7, #4]
 80163b4:	887b      	ldrh	r3, [r7, #2]
 80163b6:	1acb      	subs	r3, r1, r3
 80163b8:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 80163ba:	429a      	cmp	r2, r3
 80163bc:	bf34      	ite	cc
 80163be:	2301      	movcc	r3, #1
 80163c0:	2300      	movcs	r3, #0
 80163c2:	b2db      	uxtb	r3, r3
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	370c      	adds	r7, #12
 80163c8:	46bd      	mov	sp, r7
 80163ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ce:	4770      	bx	lr

080163d0 <metal_io_virt_to_offset>:
{
 80163d0:	b480      	push	{r7}
 80163d2:	b085      	sub	sp, #20
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	683a      	ldr	r2, [r7, #0]
 80163e0:	1ad3      	subs	r3, r2, r3
 80163e2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	689b      	ldr	r3, [r3, #8]
 80163e8:	68fa      	ldr	r2, [r7, #12]
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d201      	bcs.n	80163f2 <metal_io_virt_to_offset+0x22>
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	e001      	b.n	80163f6 <metal_io_virt_to_offset+0x26>
 80163f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3714      	adds	r7, #20
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr

08016402 <metal_io_phys>:
{
 8016402:	b480      	push	{r7}
 8016404:	b085      	sub	sp, #20
 8016406:	af00      	add	r7, sp, #0
 8016408:	6078      	str	r0, [r7, #4]
 801640a:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8016410:	2b1f      	cmp	r3, #31
 8016412:	d805      	bhi.n	8016420 <metal_io_phys+0x1e>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	683a      	ldr	r2, [r7, #0]
 801641a:	fa22 f303 	lsr.w	r3, r2, r3
 801641e:	e000      	b.n	8016422 <metal_io_phys+0x20>
 8016420:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8016422:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8016428:	2b00      	cmp	r3, #0
 801642a:	d010      	beq.n	801644e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	689b      	ldr	r3, [r3, #8]
 8016430:	683a      	ldr	r2, [r7, #0]
 8016432:	429a      	cmp	r2, r3
 8016434:	d80b      	bhi.n	801644e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	685a      	ldr	r2, [r3, #4]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	009b      	lsls	r3, r3, #2
 801643e:	4413      	add	r3, r2
 8016440:	681a      	ldr	r2, [r3, #0]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6919      	ldr	r1, [r3, #16]
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 801644a:	4413      	add	r3, r2
 801644c:	e001      	b.n	8016452 <metal_io_phys+0x50>
 801644e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016452:	4618      	mov	r0, r3
 8016454:	3714      	adds	r7, #20
 8016456:	46bd      	mov	sp, r7
 8016458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645c:	4770      	bx	lr

0801645e <metal_io_virt_to_phys>:
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b082      	sub	sp, #8
 8016462:	af00      	add	r7, sp, #0
 8016464:	6078      	str	r0, [r7, #4]
 8016466:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8016468:	6839      	ldr	r1, [r7, #0]
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7ff ffb0 	bl	80163d0 <metal_io_virt_to_offset>
 8016470:	4603      	mov	r3, r0
 8016472:	4619      	mov	r1, r3
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f7ff ffc4 	bl	8016402 <metal_io_phys>
 801647a:	4603      	mov	r3, r0
}
 801647c:	4618      	mov	r0, r3
 801647e:	3708      	adds	r7, #8
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b084      	sub	sp, #16
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016492:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8016494:	6839      	ldr	r1, [r7, #0]
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	f7ff ffe1 	bl	801645e <metal_io_virt_to_phys>
 801649c:	4603      	mov	r3, r0
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}

080164a6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 80164a6:	b580      	push	{r7, lr}
 80164a8:	b086      	sub	sp, #24
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	60f8      	str	r0, [r7, #12]
 80164ae:	607a      	str	r2, [r7, #4]
 80164b0:	603b      	str	r3, [r7, #0]
 80164b2:	460b      	mov	r3, r1
 80164b4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 80164b6:	2300      	movs	r3, #0
 80164b8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d121      	bne.n	8016504 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 80164c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c2:	68fa      	ldr	r2, [r7, #12]
 80164c4:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 80164c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c8:	687a      	ldr	r2, [r7, #4]
 80164ca:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 80164cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ce:	897a      	ldrh	r2, [r7, #10]
 80164d0:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	891a      	ldrh	r2, [r3, #8]
 80164d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d8:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 80164da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164dc:	895a      	ldrh	r2, [r3, #10]
 80164de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e0:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 80164e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e4:	6a3a      	ldr	r2, [r7, #32]
 80164e6:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 80164e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164ec:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	6819      	ldr	r1, [r3, #0]
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	461a      	mov	r2, r3
 80164f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164fa:	f000 f97a 	bl	80167f2 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 80164fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016500:	f000 f899 	bl	8016636 <virtqueue_disable_cb>
	}

	return (status);
 8016504:	697b      	ldr	r3, [r7, #20]
}
 8016506:	4618      	mov	r0, r3
 8016508:	3718      	adds	r7, #24
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}

0801650e <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 801650e:	b580      	push	{r7, lr}
 8016510:	b08a      	sub	sp, #40	; 0x28
 8016512:	af02      	add	r7, sp, #8
 8016514:	60f8      	str	r0, [r7, #12]
 8016516:	60b9      	str	r1, [r7, #8]
 8016518:	607a      	str	r2, [r7, #4]
 801651a:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 801651c:	2300      	movs	r3, #0
 801651e:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8016520:	2300      	movs	r3, #0
 8016522:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8016524:	687a      	ldr	r2, [r7, #4]
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	4413      	add	r3, r2
 801652a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 801652c:	69bb      	ldr	r3, [r7, #24]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d12c      	bne.n	801658c <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8016536:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8016538:	8a7b      	ldrh	r3, [r7, #18]
 801653a:	3307      	adds	r3, #7
 801653c:	00db      	lsls	r3, r3, #3
 801653e:	68fa      	ldr	r2, [r7, #12]
 8016540:	4413      	add	r3, r2
 8016542:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8016544:	69fb      	ldr	r3, [r7, #28]
 8016546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016548:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	b29a      	uxth	r2, r3
 801654e:	69fb      	ldr	r3, [r7, #28]
 8016550:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	69d9      	ldr	r1, [r3, #28]
 8016556:	8a7a      	ldrh	r2, [r7, #18]
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	9301      	str	r3, [sp, #4]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f000 f8a7 	bl	80166b6 <vq_ring_add_buffer>
 8016568:	4603      	mov	r3, r0
 801656a:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	8a3a      	ldrh	r2, [r7, #16]
 8016570:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	b29b      	uxth	r3, r3
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	b29a      	uxth	r2, r3
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8016582:	8a7b      	ldrh	r3, [r7, #18]
 8016584:	4619      	mov	r1, r3
 8016586:	68f8      	ldr	r0, [r7, #12]
 8016588:	f000 f966 	bl	8016858 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 801658c:	69bb      	ldr	r3, [r7, #24]
}
 801658e:	4618      	mov	r0, r3
 8016590:	3720      	adds	r7, #32
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}

08016596 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8016596:	b580      	push	{r7, lr}
 8016598:	b088      	sub	sp, #32
 801659a:	af00      	add	r7, sp, #0
 801659c:	60f8      	str	r0, [r7, #12]
 801659e:	60b9      	str	r1, [r7, #8]
 80165a0:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d006      	beq.n	80165b6 <virtqueue_get_buffer+0x20>
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165b0:	885b      	ldrh	r3, [r3, #2]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d101      	bne.n	80165ba <virtqueue_get_buffer+0x24>
		return (NULL);
 80165b6:	2300      	movs	r3, #0
 80165b8:	e039      	b.n	801662e <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80165be:	1c5a      	adds	r2, r3, #1
 80165c0:	b291      	uxth	r1, r2
 80165c2:	68fa      	ldr	r2, [r7, #12]
 80165c4:	8651      	strh	r1, [r2, #50]	; 0x32
 80165c6:	b21a      	sxth	r2, r3
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	895b      	ldrh	r3, [r3, #10]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	b21b      	sxth	r3, r3
 80165d2:	4013      	ands	r3, r2
 80165d4:	b21b      	sxth	r3, r3
 80165d6:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80165dc:	8bfb      	ldrh	r3, [r7, #30]
 80165de:	00db      	lsls	r3, r3, #3
 80165e0:	4413      	add	r3, r2
 80165e2:	3304      	adds	r3, #4
 80165e4:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 80165e6:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 80165ea:	69bb      	ldr	r3, [r7, #24]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	82fb      	strh	r3, [r7, #22]
	if (len)
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d003      	beq.n	80165fe <virtqueue_get_buffer+0x68>
		*len = uep->len;
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	685a      	ldr	r2, [r3, #4]
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 80165fe:	8afb      	ldrh	r3, [r7, #22]
 8016600:	4619      	mov	r1, r3
 8016602:	68f8      	ldr	r0, [r7, #12]
 8016604:	f000 f8ae 	bl	8016764 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8016608:	8afa      	ldrh	r2, [r7, #22]
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	3207      	adds	r2, #7
 801660e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8016612:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8016614:	8afa      	ldrh	r2, [r7, #22]
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	3207      	adds	r2, #7
 801661a:	2100      	movs	r1, #0
 801661c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d002      	beq.n	801662c <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	8bfa      	ldrh	r2, [r7, #30]
 801662a:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 801662c:	693b      	ldr	r3, [r7, #16]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3720      	adds	r7, #32
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}

08016636 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8016636:	b480      	push	{r7}
 8016638:	b083      	sub	sp, #12
 801663a:	af00      	add	r7, sp, #0
 801663c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	68db      	ldr	r3, [r3, #12]
 8016642:	f003 0302 	and.w	r3, r3, #2
 8016646:	2b00      	cmp	r3, #0
 8016648:	d010      	beq.n	801666c <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	895b      	ldrh	r3, [r3, #10]
 8016652:	1ad3      	subs	r3, r2, r3
 8016654:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	6a1a      	ldr	r2, [r3, #32]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 801665e:	3901      	subs	r1, #1
 8016660:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	460a      	mov	r2, r1
 8016668:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 801666a:	e008      	b.n	801667e <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	6a1b      	ldr	r3, [r3, #32]
 8016670:	881a      	ldrh	r2, [r3, #0]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6a1b      	ldr	r3, [r3, #32]
 8016676:	f042 0201 	orr.w	r2, r2, #1
 801667a:	b292      	uxth	r2, r2
 801667c:	801a      	strh	r2, [r3, #0]
}
 801667e:	bf00      	nop
 8016680:	370c      	adds	r7, #12
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 801668a:	b580      	push	{r7, lr}
 801668c:	b082      	sub	sp, #8
 801668e:	af00      	add	r7, sp, #0
 8016690:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8016692:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	f000 f91d 	bl	80168d6 <vq_ring_must_notify_host>
 801669c:	4603      	mov	r3, r0
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d002      	beq.n	80166a8 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f000 f94d 	bl	8016942 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2200      	movs	r2, #0
 80166ac:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 80166ae:	bf00      	nop
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}

080166b6 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 80166b6:	b580      	push	{r7, lr}
 80166b8:	b088      	sub	sp, #32
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	60f8      	str	r0, [r7, #12]
 80166be:	60b9      	str	r1, [r7, #8]
 80166c0:	603b      	str	r3, [r7, #0]
 80166c2:	4613      	mov	r3, r2
 80166c4:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 80166c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80166c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ca:	4413      	add	r3, r2
 80166cc:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80166ce:	2300      	movs	r3, #0
 80166d0:	61fb      	str	r3, [r7, #28]
 80166d2:	88fb      	ldrh	r3, [r7, #6]
 80166d4:	837b      	strh	r3, [r7, #26]
 80166d6:	e03c      	b.n	8016752 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 80166d8:	8b7b      	ldrh	r3, [r7, #26]
 80166da:	011b      	lsls	r3, r3, #4
 80166dc:	68ba      	ldr	r2, [r7, #8]
 80166de:	4413      	add	r3, r2
 80166e0:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	00db      	lsls	r3, r3, #3
 80166e6:	683a      	ldr	r2, [r7, #0]
 80166e8:	4413      	add	r3, r2
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4619      	mov	r1, r3
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f7ff fec8 	bl	8016484 <virtqueue_virt_to_phys>
 80166f4:	4603      	mov	r3, r0
 80166f6:	461a      	mov	r2, r3
 80166f8:	f04f 0300 	mov.w	r3, #0
 80166fc:	6939      	ldr	r1, [r7, #16]
 80166fe:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 8016702:	69fb      	ldr	r3, [r7, #28]
 8016704:	00db      	lsls	r3, r3, #3
 8016706:	683a      	ldr	r2, [r7, #0]
 8016708:	4413      	add	r3, r2
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	461a      	mov	r2, r3
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	2200      	movs	r2, #0
 8016716:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	3b01      	subs	r3, #1
 801671c:	69fa      	ldr	r2, [r7, #28]
 801671e:	429a      	cmp	r2, r3
 8016720:	da06      	bge.n	8016730 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	899b      	ldrh	r3, [r3, #12]
 8016726:	f043 0301 	orr.w	r3, r3, #1
 801672a:	b29a      	uxth	r2, r3
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8016730:	69fa      	ldr	r2, [r7, #28]
 8016732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016734:	429a      	cmp	r2, r3
 8016736:	db06      	blt.n	8016746 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	899b      	ldrh	r3, [r3, #12]
 801673c:	f043 0302 	orr.w	r3, r3, #2
 8016740:	b29a      	uxth	r2, r3
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8016746:	69fb      	ldr	r3, [r7, #28]
 8016748:	3301      	adds	r3, #1
 801674a:	61fb      	str	r3, [r7, #28]
 801674c:	693b      	ldr	r3, [r7, #16]
 801674e:	89db      	ldrh	r3, [r3, #14]
 8016750:	837b      	strh	r3, [r7, #26]
 8016752:	69fa      	ldr	r2, [r7, #28]
 8016754:	697b      	ldr	r3, [r7, #20]
 8016756:	429a      	cmp	r2, r3
 8016758:	dbbe      	blt.n	80166d8 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 801675a:	8b7b      	ldrh	r3, [r7, #26]
}
 801675c:	4618      	mov	r0, r3
 801675e:	3720      	adds	r7, #32
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8016764:	b480      	push	{r7}
 8016766:	b085      	sub	sp, #20
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	460b      	mov	r3, r1
 801676e:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	69da      	ldr	r2, [r3, #28]
 8016774:	887b      	ldrh	r3, [r7, #2]
 8016776:	011b      	lsls	r3, r3, #4
 8016778:	4413      	add	r3, r2
 801677a:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 801677c:	887b      	ldrh	r3, [r7, #2]
 801677e:	3307      	adds	r3, #7
 8016780:	00db      	lsls	r3, r3, #3
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	4413      	add	r3, r2
 8016786:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	889b      	ldrh	r3, [r3, #4]
 8016790:	4413      	add	r3, r2
 8016792:	b29a      	uxth	r2, r3
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	889b      	ldrh	r3, [r3, #4]
 801679c:	3b01      	subs	r3, #1
 801679e:	b29a      	uxth	r2, r3
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	899b      	ldrh	r3, [r3, #12]
 80167a8:	f003 0304 	and.w	r3, r3, #4
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d113      	bne.n	80167d8 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 80167b0:	e00c      	b.n	80167cc <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	69da      	ldr	r2, [r3, #28]
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	89db      	ldrh	r3, [r3, #14]
 80167ba:	011b      	lsls	r3, r3, #4
 80167bc:	4413      	add	r3, r2
 80167be:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	889b      	ldrh	r3, [r3, #4]
 80167c4:	3b01      	subs	r3, #1
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	899b      	ldrh	r3, [r3, #12]
 80167d0:	f003 0301 	and.w	r3, r3, #1
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d1ec      	bne.n	80167b2 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	887a      	ldrh	r2, [r7, #2]
 80167e4:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80167e6:	bf00      	nop
 80167e8:	3714      	adds	r7, #20
 80167ea:	46bd      	mov	sp, r7
 80167ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f0:	4770      	bx	lr

080167f2 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 80167f2:	b580      	push	{r7, lr}
 80167f4:	b088      	sub	sp, #32
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	60f8      	str	r0, [r7, #12]
 80167fa:	60b9      	str	r1, [r7, #8]
 80167fc:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	895b      	ldrh	r3, [r3, #10]
 8016802:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	3318      	adds	r3, #24
 8016808:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 801680a:	69b9      	ldr	r1, [r7, #24]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	68ba      	ldr	r2, [r7, #8]
 8016810:	6978      	ldr	r0, [r7, #20]
 8016812:	f7ff fd96 	bl	8016342 <vring_init>

	for (i = 0; i < size - 1; i++)
 8016816:	2300      	movs	r3, #0
 8016818:	61fb      	str	r3, [r7, #28]
 801681a:	e00c      	b.n	8016836 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	b29a      	uxth	r2, r3
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	6859      	ldr	r1, [r3, #4]
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	011b      	lsls	r3, r3, #4
 8016828:	440b      	add	r3, r1
 801682a:	3201      	adds	r2, #1
 801682c:	b292      	uxth	r2, r2
 801682e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	3301      	adds	r3, #1
 8016834:	61fb      	str	r3, [r7, #28]
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	3b01      	subs	r3, #1
 801683a:	69fa      	ldr	r2, [r7, #28]
 801683c:	429a      	cmp	r2, r3
 801683e:	dbed      	blt.n	801681c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	685a      	ldr	r2, [r3, #4]
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	011b      	lsls	r3, r3, #4
 8016848:	4413      	add	r3, r2
 801684a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801684e:	81da      	strh	r2, [r3, #14]
}
 8016850:	bf00      	nop
 8016852:	3720      	adds	r7, #32
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}

08016858 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8016858:	b480      	push	{r7}
 801685a:	b085      	sub	sp, #20
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	460b      	mov	r3, r1
 8016862:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	6a1b      	ldr	r3, [r3, #32]
 8016868:	885b      	ldrh	r3, [r3, #2]
 801686a:	b21a      	sxth	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	895b      	ldrh	r3, [r3, #10]
 8016870:	3b01      	subs	r3, #1
 8016872:	b29b      	uxth	r3, r3
 8016874:	b21b      	sxth	r3, r3
 8016876:	4013      	ands	r3, r2
 8016878:	b21b      	sxth	r3, r3
 801687a:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6a1a      	ldr	r2, [r3, #32]
 8016880:	89fb      	ldrh	r3, [r7, #14]
 8016882:	005b      	lsls	r3, r3, #1
 8016884:	4413      	add	r3, r2
 8016886:	887a      	ldrh	r2, [r7, #2]
 8016888:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 801688a:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6a1b      	ldr	r3, [r3, #32]
 8016892:	885a      	ldrh	r2, [r3, #2]
 8016894:	3201      	adds	r2, #1
 8016896:	b292      	uxth	r2, r2
 8016898:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801689e:	3301      	adds	r3, #1
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80168a6:	bf00      	nop
 80168a8:	3714      	adds	r7, #20
 80168aa:	46bd      	mov	sp, r7
 80168ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b0:	4770      	bx	lr

080168b2 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 80168b2:	b580      	push	{r7, lr}
 80168b4:	b082      	sub	sp, #8
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 80168ba:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	691b      	ldr	r3, [r3, #16]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d003      	beq.n	80168ce <virtqueue_notification+0x1c>
		vq->callback(vq);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	691b      	ldr	r3, [r3, #16]
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	4798      	blx	r3
}
 80168ce:	bf00      	nop
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}

080168d6 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 80168d6:	b580      	push	{r7, lr}
 80168d8:	b084      	sub	sp, #16
 80168da:	af00      	add	r7, sp, #0
 80168dc:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	68db      	ldr	r3, [r3, #12]
 80168e2:	f003 0302 	and.w	r3, r3, #2
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d01d      	beq.n	8016926 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6a1b      	ldr	r3, [r3, #32]
 80168ee:	885b      	ldrh	r3, [r3, #2]
 80168f0:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80168f6:	89fa      	ldrh	r2, [r7, #14]
 80168f8:	1ad3      	subs	r3, r2, r3
 80168fa:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	699b      	ldr	r3, [r3, #24]
 8016904:	00db      	lsls	r3, r3, #3
 8016906:	4413      	add	r3, r2
 8016908:	685b      	ldr	r3, [r3, #4]
 801690a:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 801690c:	89ba      	ldrh	r2, [r7, #12]
 801690e:	89f9      	ldrh	r1, [r7, #14]
 8016910:	897b      	ldrh	r3, [r7, #10]
 8016912:	4618      	mov	r0, r3
 8016914:	f7ff fd3e 	bl	8016394 <vring_need_event>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	bf14      	ite	ne
 801691e:	2301      	movne	r3, #1
 8016920:	2300      	moveq	r3, #0
 8016922:	b2db      	uxtb	r3, r3
 8016924:	e009      	b.n	801693a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801692a:	881b      	ldrh	r3, [r3, #0]
 801692c:	f003 0301 	and.w	r3, r3, #1
 8016930:	2b00      	cmp	r3, #0
 8016932:	bf0c      	ite	eq
 8016934:	2301      	moveq	r3, #1
 8016936:	2300      	movne	r3, #0
 8016938:	b2db      	uxtb	r3, r3
}
 801693a:	4618      	mov	r0, r3
 801693c:	3710      	adds	r7, #16
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}

08016942 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8016942:	b580      	push	{r7, lr}
 8016944:	b082      	sub	sp, #8
 8016946:	af00      	add	r7, sp, #0
 8016948:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	695b      	ldr	r3, [r3, #20]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d003      	beq.n	801695a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	695b      	ldr	r3, [r3, #20]
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	4798      	blx	r3
}
 801695a:	bf00      	nop
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
	...

08016964 <initSDCard>:
char logBuffer[16384] = "";
char terminalBuffer[1024] = "";


uint8_t initSDCard(void)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	af00      	add	r7, sp, #0

	//Open the file system
	fres = f_mount(&FatFs, "", 0); //1=mount now
 8016968:	2200      	movs	r2, #0
 801696a:	491c      	ldr	r1, [pc, #112]	; (80169dc <initSDCard+0x78>)
 801696c:	481c      	ldr	r0, [pc, #112]	; (80169e0 <initSDCard+0x7c>)
 801696e:	f7fc fc8f 	bl	8013290 <f_mount>
 8016972:	4603      	mov	r3, r0
 8016974:	461a      	mov	r2, r3
 8016976:	4b1b      	ldr	r3, [pc, #108]	; (80169e4 <initSDCard+0x80>)
 8016978:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 801697a:	4b1a      	ldr	r3, [pc, #104]	; (80169e4 <initSDCard+0x80>)
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d002      	beq.n	8016988 <initSDCard+0x24>
	{
		//	myprintf("f_mount error (%i)\r\n", fres);
		return (uint8_t)fres;
 8016982:	4b18      	ldr	r3, [pc, #96]	; (80169e4 <initSDCard+0x80>)
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	e026      	b.n	80169d6 <initSDCard+0x72>
	}


	//  fres = f_mkfs("\\", FM_FAT32, 0, buffer, sizeof(buffer));
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8016988:	4a17      	ldr	r2, [pc, #92]	; (80169e8 <initSDCard+0x84>)
 801698a:	4918      	ldr	r1, [pc, #96]	; (80169ec <initSDCard+0x88>)
 801698c:	4813      	ldr	r0, [pc, #76]	; (80169dc <initSDCard+0x78>)
 801698e:	f7fd fb34 	bl	8013ffa <f_getfree>
 8016992:	4603      	mov	r3, r0
 8016994:	461a      	mov	r2, r3
 8016996:	4b13      	ldr	r3, [pc, #76]	; (80169e4 <initSDCard+0x80>)
 8016998:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 801699a:	4b12      	ldr	r3, [pc, #72]	; (80169e4 <initSDCard+0x80>)
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d002      	beq.n	80169a8 <initSDCard+0x44>
	{
		//	myprintf("f_getfree error (%i)\r\n", fres);
		return (uint8_t)fres;
 80169a2:	4b10      	ldr	r3, [pc, #64]	; (80169e4 <initSDCard+0x80>)
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	e016      	b.n	80169d6 <initSDCard+0x72>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80169a8:	4b0f      	ldr	r3, [pc, #60]	; (80169e8 <initSDCard+0x84>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	699b      	ldr	r3, [r3, #24]
 80169ae:	3b02      	subs	r3, #2
 80169b0:	4a0d      	ldr	r2, [pc, #52]	; (80169e8 <initSDCard+0x84>)
 80169b2:	6812      	ldr	r2, [r2, #0]
 80169b4:	8952      	ldrh	r2, [r2, #10]
 80169b6:	fb02 f303 	mul.w	r3, r2, r3
 80169ba:	4a0d      	ldr	r2, [pc, #52]	; (80169f0 <initSDCard+0x8c>)
 80169bc:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 80169be:	4b0a      	ldr	r3, [pc, #40]	; (80169e8 <initSDCard+0x84>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	895b      	ldrh	r3, [r3, #10]
 80169c4:	461a      	mov	r2, r3
 80169c6:	4b09      	ldr	r3, [pc, #36]	; (80169ec <initSDCard+0x88>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	fb03 f302 	mul.w	r3, r3, r2
 80169ce:	4a09      	ldr	r2, [pc, #36]	; (80169f4 <initSDCard+0x90>)
 80169d0:	6013      	str	r3, [r2, #0]
	return (uint8_t)fres;
 80169d2:	4b04      	ldr	r3, [pc, #16]	; (80169e4 <initSDCard+0x80>)
 80169d4:	781b      	ldrb	r3, [r3, #0]
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	0802051c 	.word	0x0802051c
 80169e0:	2400b988 	.word	0x2400b988
 80169e4:	2400bdc4 	.word	0x2400bdc4
 80169e8:	2400bbbc 	.word	0x2400bbbc
 80169ec:	2400bff8 	.word	0x2400bff8
 80169f0:	2400bffc 	.word	0x2400bffc
 80169f4:	2400bbc0 	.word	0x2400bbc0

080169f8 <createNewLogFile>:

void createNewLogFile(void)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b088      	sub	sp, #32
 80169fc:	af00      	add	r7, sp, #0
	unsigned int BytesWritten = 0;
 80169fe:	2300      	movs	r3, #0
 8016a00:	61fb      	str	r3, [r7, #28]
	unsigned int BytesRead = 0;
 8016a02:	2300      	movs	r3, #0
 8016a04:	61bb      	str	r3, [r7, #24]
	char localIndex[6] = "";
 8016a06:	2300      	movs	r3, #0
 8016a08:	613b      	str	r3, [r7, #16]
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	82bb      	strh	r3, [r7, #20]

	fres = f_open(&fil, "Index.txt", FA_READ);
 8016a0e:	2201      	movs	r2, #1
 8016a10:	4957      	ldr	r1, [pc, #348]	; (8016b70 <createNewLogFile+0x178>)
 8016a12:	4858      	ldr	r0, [pc, #352]	; (8016b74 <createNewLogFile+0x17c>)
 8016a14:	f7fc fc82 	bl	801331c <f_open>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4b56      	ldr	r3, [pc, #344]	; (8016b78 <createNewLogFile+0x180>)
 8016a1e:	701a      	strb	r2, [r3, #0]
	fres = f_read(&fil, &FileReadBuffer, sizeof(FileReadBuffer), &BytesRead);
 8016a20:	f107 0318 	add.w	r3, r7, #24
 8016a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016a28:	4954      	ldr	r1, [pc, #336]	; (8016b7c <createNewLogFile+0x184>)
 8016a2a:	4852      	ldr	r0, [pc, #328]	; (8016b74 <createNewLogFile+0x17c>)
 8016a2c:	f7fc fe34 	bl	8013698 <f_read>
 8016a30:	4603      	mov	r3, r0
 8016a32:	461a      	mov	r2, r3
 8016a34:	4b50      	ldr	r3, [pc, #320]	; (8016b78 <createNewLogFile+0x180>)
 8016a36:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8016a38:	4b4f      	ldr	r3, [pc, #316]	; (8016b78 <createNewLogFile+0x180>)
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d021      	beq.n	8016a84 <createNewLogFile+0x8c>
	{

		do
		{
			HAL_Delay(1);
 8016a40:	2001      	movs	r0, #1
 8016a42:	f7eb fe5d 	bl	8002700 <HAL_Delay>
			fres = f_open(&fil, "Index.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8016a46:	221a      	movs	r2, #26
 8016a48:	4949      	ldr	r1, [pc, #292]	; (8016b70 <createNewLogFile+0x178>)
 8016a4a:	484a      	ldr	r0, [pc, #296]	; (8016b74 <createNewLogFile+0x17c>)
 8016a4c:	f7fc fc66 	bl	801331c <f_open>
 8016a50:	4603      	mov	r3, r0
 8016a52:	461a      	mov	r2, r3
 8016a54:	4b48      	ldr	r3, [pc, #288]	; (8016b78 <createNewLogFile+0x180>)
 8016a56:	701a      	strb	r2, [r3, #0]
		} while ( (fres != FR_OK) );
 8016a58:	4b47      	ldr	r3, [pc, #284]	; (8016b78 <createNewLogFile+0x180>)
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d1ef      	bne.n	8016a40 <createNewLogFile+0x48>

		fres = f_write(&fil, "00000\t", strlen("00000\t"), &BytesWritten);
 8016a60:	f107 031c 	add.w	r3, r7, #28
 8016a64:	2206      	movs	r2, #6
 8016a66:	4946      	ldr	r1, [pc, #280]	; (8016b80 <createNewLogFile+0x188>)
 8016a68:	4842      	ldr	r0, [pc, #264]	; (8016b74 <createNewLogFile+0x17c>)
 8016a6a:	f7fc ff54 	bl	8013916 <f_write>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	461a      	mov	r2, r3
 8016a72:	4b41      	ldr	r3, [pc, #260]	; (8016b78 <createNewLogFile+0x180>)
 8016a74:	701a      	strb	r2, [r3, #0]
		fres = f_close(&fil);
 8016a76:	483f      	ldr	r0, [pc, #252]	; (8016b74 <createNewLogFile+0x17c>)
 8016a78:	f7fd f940 	bl	8013cfc <f_close>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	461a      	mov	r2, r3
 8016a80:	4b3d      	ldr	r3, [pc, #244]	; (8016b78 <createNewLogFile+0x180>)
 8016a82:	701a      	strb	r2, [r3, #0]
	}
	if (BytesRead == 6)
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	2b06      	cmp	r3, #6
 8016a88:	d112      	bne.n	8016ab0 <createNewLogFile+0xb8>
	{
		memcpy(localIndex, FileReadBuffer, 5);
 8016a8a:	f107 0310 	add.w	r3, r7, #16
 8016a8e:	2205      	movs	r2, #5
 8016a90:	493a      	ldr	r1, [pc, #232]	; (8016b7c <createNewLogFile+0x184>)
 8016a92:	4618      	mov	r0, r3
 8016a94:	f004 fca0 	bl	801b3d8 <memcpy>
		localIndex[5] = '\0';
 8016a98:	2300      	movs	r3, #0
 8016a9a:	757b      	strb	r3, [r7, #21]
		previousLogIndex = atoi(localIndex);
 8016a9c:	f107 0310 	add.w	r3, r7, #16
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f004 fc49 	bl	801b338 <atoi>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	4b36      	ldr	r3, [pc, #216]	; (8016b84 <createNewLogFile+0x18c>)
 8016aac:	601a      	str	r2, [r3, #0]
 8016aae:	e002      	b.n	8016ab6 <createNewLogFile+0xbe>
	}
	else
	{
		//TODO: what if br is not 6
		// recreate index, etc.
		previousLogIndex = 0;
 8016ab0:	4b34      	ldr	r3, [pc, #208]	; (8016b84 <createNewLogFile+0x18c>)
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	601a      	str	r2, [r3, #0]
	}
	fres = f_close(&fil);
 8016ab6:	482f      	ldr	r0, [pc, #188]	; (8016b74 <createNewLogFile+0x17c>)
 8016ab8:	f7fd f920 	bl	8013cfc <f_close>
 8016abc:	4603      	mov	r3, r0
 8016abe:	461a      	mov	r2, r3
 8016ac0:	4b2d      	ldr	r3, [pc, #180]	; (8016b78 <createNewLogFile+0x180>)
 8016ac2:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "Index.txt", FA_OPEN_EXISTING | FA_WRITE);
 8016ac4:	2202      	movs	r2, #2
 8016ac6:	492a      	ldr	r1, [pc, #168]	; (8016b70 <createNewLogFile+0x178>)
 8016ac8:	482a      	ldr	r0, [pc, #168]	; (8016b74 <createNewLogFile+0x17c>)
 8016aca:	f7fc fc27 	bl	801331c <f_open>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	4b29      	ldr	r3, [pc, #164]	; (8016b78 <createNewLogFile+0x180>)
 8016ad4:	701a      	strb	r2, [r3, #0]

	if (previousLogIndex + 1 < 100000)
 8016ad6:	4b2b      	ldr	r3, [pc, #172]	; (8016b84 <createNewLogFile+0x18c>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	3301      	adds	r3, #1
 8016adc:	4a2a      	ldr	r2, [pc, #168]	; (8016b88 <createNewLogFile+0x190>)
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	d902      	bls.n	8016ae8 <createNewLogFile+0xf0>
	{

	}
	else
	{
		previousLogIndex = 0;
 8016ae2:	4b28      	ldr	r3, [pc, #160]	; (8016b84 <createNewLogFile+0x18c>)
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	601a      	str	r2, [r3, #0]
	}
	previousLogIndex++;
 8016ae8:	4b26      	ldr	r3, [pc, #152]	; (8016b84 <createNewLogFile+0x18c>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	3301      	adds	r3, #1
 8016aee:	4a25      	ldr	r2, [pc, #148]	; (8016b84 <createNewLogFile+0x18c>)
 8016af0:	6013      	str	r3, [r2, #0]

	char localString[16] = "";
 8016af2:	2300      	movs	r3, #0
 8016af4:	603b      	str	r3, [r7, #0]
 8016af6:	1d3b      	adds	r3, r7, #4
 8016af8:	2200      	movs	r2, #0
 8016afa:	601a      	str	r2, [r3, #0]
 8016afc:	605a      	str	r2, [r3, #4]
 8016afe:	609a      	str	r2, [r3, #8]
	sprintf(localString, "%05ld\t",previousLogIndex);
 8016b00:	4b20      	ldr	r3, [pc, #128]	; (8016b84 <createNewLogFile+0x18c>)
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	463b      	mov	r3, r7
 8016b06:	4921      	ldr	r1, [pc, #132]	; (8016b8c <createNewLogFile+0x194>)
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f005 fdb7 	bl	801c67c <siprintf>
	//
	fres = f_write(&fil, localString, strlen(localString), &BytesWritten);
 8016b0e:	463b      	mov	r3, r7
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7e9 fbef 	bl	80002f4 <strlen>
 8016b16:	4602      	mov	r2, r0
 8016b18:	f107 031c 	add.w	r3, r7, #28
 8016b1c:	4639      	mov	r1, r7
 8016b1e:	4815      	ldr	r0, [pc, #84]	; (8016b74 <createNewLogFile+0x17c>)
 8016b20:	f7fc fef9 	bl	8013916 <f_write>
 8016b24:	4603      	mov	r3, r0
 8016b26:	461a      	mov	r2, r3
 8016b28:	4b13      	ldr	r3, [pc, #76]	; (8016b78 <createNewLogFile+0x180>)
 8016b2a:	701a      	strb	r2, [r3, #0]
	f_close(&fil);
 8016b2c:	4811      	ldr	r0, [pc, #68]	; (8016b74 <createNewLogFile+0x17c>)
 8016b2e:	f7fd f8e5 	bl	8013cfc <f_close>

	sprintf(currentLogFilename,"LOG_%05ld.CSV", previousLogIndex);
 8016b32:	4b14      	ldr	r3, [pc, #80]	; (8016b84 <createNewLogFile+0x18c>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	461a      	mov	r2, r3
 8016b38:	4915      	ldr	r1, [pc, #84]	; (8016b90 <createNewLogFile+0x198>)
 8016b3a:	4816      	ldr	r0, [pc, #88]	; (8016b94 <createNewLogFile+0x19c>)
 8016b3c:	f005 fd9e 	bl	801c67c <siprintf>
	fres = f_open(&fil, currentLogFilename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8016b40:	221a      	movs	r2, #26
 8016b42:	4914      	ldr	r1, [pc, #80]	; (8016b94 <createNewLogFile+0x19c>)
 8016b44:	480b      	ldr	r0, [pc, #44]	; (8016b74 <createNewLogFile+0x17c>)
 8016b46:	f7fc fbe9 	bl	801331c <f_open>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	461a      	mov	r2, r3
 8016b4e:	4b0a      	ldr	r3, [pc, #40]	; (8016b78 <createNewLogFile+0x180>)
 8016b50:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8016b52:	4b09      	ldr	r3, [pc, #36]	; (8016b78 <createNewLogFile+0x180>)
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d103      	bne.n	8016b62 <createNewLogFile+0x16a>
	{
		isValidLog = true;
 8016b5a:	4b0f      	ldr	r3, [pc, #60]	; (8016b98 <createNewLogFile+0x1a0>)
 8016b5c:	2201      	movs	r2, #1
 8016b5e:	701a      	strb	r2, [r3, #0]
	else
	{
		isValidLog = false;
	}

}
 8016b60:	e002      	b.n	8016b68 <createNewLogFile+0x170>
		isValidLog = false;
 8016b62:	4b0d      	ldr	r3, [pc, #52]	; (8016b98 <createNewLogFile+0x1a0>)
 8016b64:	2200      	movs	r2, #0
 8016b66:	701a      	strb	r2, [r3, #0]
}
 8016b68:	bf00      	nop
 8016b6a:	3720      	adds	r7, #32
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}
 8016b70:	08020520 	.word	0x08020520
 8016b74:	2400bdc8 	.word	0x2400bdc8
 8016b78:	2400bdc4 	.word	0x2400bdc4
 8016b7c:	2400a624 	.word	0x2400a624
 8016b80:	0802052c 	.word	0x0802052c
 8016b84:	2400aa24 	.word	0x2400aa24
 8016b88:	0001869f 	.word	0x0001869f
 8016b8c:	08020534 	.word	0x08020534
 8016b90:	0802053c 	.word	0x0802053c
 8016b94:	2400aa30 	.word	0x2400aa30
 8016b98:	2400aa2c 	.word	0x2400aa2c

08016b9c <closeLogFile>:

void closeLogFile(void)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	af00      	add	r7, sp, #0
	f_sync(&fil);
 8016ba0:	4803      	ldr	r0, [pc, #12]	; (8016bb0 <closeLogFile+0x14>)
 8016ba2:	f7fd f82d 	bl	8013c00 <f_sync>
	f_close(&fil);
 8016ba6:	4802      	ldr	r0, [pc, #8]	; (8016bb0 <closeLogFile+0x14>)
 8016ba8:	f7fd f8a8 	bl	8013cfc <f_close>
}
 8016bac:	bf00      	nop
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	2400bdc8 	.word	0x2400bdc8

08016bb4 <getCurrentLogSize>:
		fres = f_write(&fil, logBuffer, strlen(logBuffer), &BytesWritten);
	}
}

uint32_t getCurrentLogSize(void)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b0d4      	sub	sp, #336	; 0x150
 8016bb8:	af00      	add	r7, sp, #0
    FILINFO fno1;
    DIR dp1;
    f_opendir(&dp1, "\\");
 8016bba:	463b      	mov	r3, r7
 8016bbc:	491c      	ldr	r1, [pc, #112]	; (8016c30 <getCurrentLogSize+0x7c>)
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7fd f8c6 	bl	8013d50 <f_opendir>
    f_findfirst(&dp1, &fno1, "\\", "LOG_*");
 8016bc4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8016bc8:	4638      	mov	r0, r7
 8016bca:	4b1a      	ldr	r3, [pc, #104]	; (8016c34 <getCurrentLogSize+0x80>)
 8016bcc:	4a18      	ldr	r2, [pc, #96]	; (8016c30 <getCurrentLogSize+0x7c>)
 8016bce:	f7fd f9bd 	bl	8013f4c <f_findfirst>
    while( (f_findnext(&dp1, &fno1) == FR_OK) && (fno1.fname[0] != 0x00) )
 8016bd2:	e013      	b.n	8016bfc <getCurrentLogSize+0x48>
    {
    	f_stat("\\", &fno1);
 8016bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016bd8:	4619      	mov	r1, r3
 8016bda:	4815      	ldr	r0, [pc, #84]	; (8016c30 <getCurrentLogSize+0x7c>)
 8016bdc:	f7fd f9d4 	bl	8013f88 <f_stat>
    	if(strcmp(currentLogFilename, fno1.fname) == 0)
 8016be0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016be4:	3316      	adds	r3, #22
 8016be6:	4619      	mov	r1, r3
 8016be8:	4813      	ldr	r0, [pc, #76]	; (8016c38 <getCurrentLogSize+0x84>)
 8016bea:	f7e9 fb79 	bl	80002e0 <strcmp>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d103      	bne.n	8016bfc <getCurrentLogSize+0x48>
    	{
    		return fno1.fsize;
 8016bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	e013      	b.n	8016c24 <getCurrentLogSize+0x70>
    while( (f_findnext(&dp1, &fno1) == FR_OK) && (fno1.fname[0] != 0x00) )
 8016bfc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8016c00:	463b      	mov	r3, r7
 8016c02:	4611      	mov	r1, r2
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7fd f979 	bl	8013efc <f_findnext>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d104      	bne.n	8016c1a <getCurrentLogSize+0x66>
 8016c10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c14:	7d9b      	ldrb	r3, [r3, #22]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d1dc      	bne.n	8016bd4 <getCurrentLogSize+0x20>
    	}
    }
    f_closedir(&dp1);
 8016c1a:	463b      	mov	r3, r7
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7fd f90a 	bl	8013e36 <f_closedir>
    return 0;
 8016c22:	2300      	movs	r3, #0
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}
 8016c2e:	bf00      	nop
 8016c30:	0802054c 	.word	0x0802054c
 8016c34:	08020550 	.word	0x08020550
 8016c38:	2400aa30 	.word	0x2400aa30

08016c3c <monitorLogSize>:

void monitorLogSize(void)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - lastFileSizeCheck > 10000) && (isValidLog) )
 8016c40:	f7eb fd52 	bl	80026e8 <HAL_GetTick>
 8016c44:	4602      	mov	r2, r0
 8016c46:	4b0f      	ldr	r3, [pc, #60]	; (8016c84 <monitorLogSize+0x48>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	1ad3      	subs	r3, r2, r3
 8016c4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8016c50:	4293      	cmp	r3, r2
 8016c52:	d915      	bls.n	8016c80 <monitorLogSize+0x44>
 8016c54:	4b0c      	ldr	r3, [pc, #48]	; (8016c88 <monitorLogSize+0x4c>)
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d011      	beq.n	8016c80 <monitorLogSize+0x44>
	{
		f_sync(&fil);
 8016c5c:	480b      	ldr	r0, [pc, #44]	; (8016c8c <monitorLogSize+0x50>)
 8016c5e:	f7fc ffcf 	bl	8013c00 <f_sync>
		if (getCurrentLogSize() > MAX_LOG_SIZE)
 8016c62:	f7ff ffa7 	bl	8016bb4 <getCurrentLogSize>
 8016c66:	4603      	mov	r3, r0
 8016c68:	4a09      	ldr	r2, [pc, #36]	; (8016c90 <monitorLogSize+0x54>)
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	d903      	bls.n	8016c76 <monitorLogSize+0x3a>
		{
			closeLogFile();
 8016c6e:	f7ff ff95 	bl	8016b9c <closeLogFile>
			createNewLogFile();
 8016c72:	f7ff fec1 	bl	80169f8 <createNewLogFile>
		}
		lastFileSizeCheck = HAL_GetTick();
 8016c76:	f7eb fd37 	bl	80026e8 <HAL_GetTick>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	4a01      	ldr	r2, [pc, #4]	; (8016c84 <monitorLogSize+0x48>)
 8016c7e:	6013      	str	r3, [r2, #0]
	}
}
 8016c80:	bf00      	nop
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	2400aa28 	.word	0x2400aa28
 8016c88:	2400aa2c 	.word	0x2400aa2c
 8016c8c:	2400bdc8 	.word	0x2400bdc8
 8016c90:	017d7840 	.word	0x017d7840

08016c94 <logData>:
	f_closedir(&dp1);
//	logData("EOD", false, true, true);
}

void logData(char *dataToLog, bool doNotShowOnDisplay, bool displayOnly, bool doNotDisplayTime)
{
 8016c94:	b590      	push	{r4, r7, lr}
 8016c96:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	1d3c      	adds	r4, r7, #4
 8016c9e:	6020      	str	r0, [r4, #0]
 8016ca0:	460c      	mov	r4, r1
 8016ca2:	4610      	mov	r0, r2
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	1cfb      	adds	r3, r7, #3
 8016ca8:	4622      	mov	r2, r4
 8016caa:	701a      	strb	r2, [r3, #0]
 8016cac:	1cbb      	adds	r3, r7, #2
 8016cae:	4602      	mov	r2, r0
 8016cb0:	701a      	strb	r2, [r3, #0]
 8016cb2:	1c7b      	adds	r3, r7, #1
 8016cb4:	460a      	mov	r2, r1
 8016cb6:	701a      	strb	r2, [r3, #0]
    char localString[1024] = "";
 8016cb8:	f107 0310 	add.w	r3, r7, #16
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	601a      	str	r2, [r3, #0]
 8016cc0:	3304      	adds	r3, #4
 8016cc2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f004 fbad 	bl	801b428 <memset>
    unsigned int BytesWritten = 0;
 8016cce:	f107 030c 	add.w	r3, r7, #12
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	601a      	str	r2, [r3, #0]

    if ( (strcmp(dataToLog,"") != 0) && (!doNotDisplayTime) )
 8016cd6:	1d3b      	adds	r3, r7, #4
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	781b      	ldrb	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d011      	beq.n	8016d04 <logData+0x70>
 8016ce0:	1c7b      	adds	r3, r7, #1
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	f083 0301 	eor.w	r3, r3, #1
 8016ce8:	b2db      	uxtb	r3, r3
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d00a      	beq.n	8016d04 <logData+0x70>
    {
        sprintf(localString, "%s, %s\r\n", CT(), dataToLog);
 8016cee:	f003 ffef 	bl	801acd0 <CT>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	1d3b      	adds	r3, r7, #4
 8016cf6:	f107 0010 	add.w	r0, r7, #16
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	4930      	ldr	r1, [pc, #192]	; (8016dc0 <logData+0x12c>)
 8016cfe:	f005 fcbd 	bl	801c67c <siprintf>
 8016d02:	e016      	b.n	8016d32 <logData+0x9e>
    }
    else if ( (strcmp(dataToLog,"") != 0) && (doNotDisplayTime) )
 8016d04:	1d3b      	adds	r3, r7, #4
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d00b      	beq.n	8016d26 <logData+0x92>
 8016d0e:	1c7b      	adds	r3, r7, #1
 8016d10:	781b      	ldrb	r3, [r3, #0]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d007      	beq.n	8016d26 <logData+0x92>
    {
        sprintf(localString, "%s\r\n", dataToLog);
 8016d16:	1d3b      	adds	r3, r7, #4
 8016d18:	f107 0010 	add.w	r0, r7, #16
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	4929      	ldr	r1, [pc, #164]	; (8016dc4 <logData+0x130>)
 8016d20:	f005 fcac 	bl	801c67c <siprintf>
 8016d24:	e005      	b.n	8016d32 <logData+0x9e>
    }
    else
    {
        sprintf(localString, "\r\n");
 8016d26:	f107 0310 	add.w	r3, r7, #16
 8016d2a:	4927      	ldr	r1, [pc, #156]	; (8016dc8 <logData+0x134>)
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f005 fca5 	bl	801c67c <siprintf>
    }
    //TODO: disable sessionUnlocked and replace with debugLevel
    if ( (displayOnly) /*&& (!isInfwUpdateMode)*/ )
 8016d32:	1cbb      	adds	r3, r7, #2
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d00d      	beq.n	8016d56 <logData+0xc2>
    {
//    	CDC_Transmit_FS((uint8_t*)localString, strlen(localString));
    	HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
 8016d3a:	f107 0310 	add.w	r3, r7, #16
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7e9 fad8 	bl	80002f4 <strlen>
 8016d44:	4603      	mov	r3, r0
 8016d46:	b29a      	uxth	r2, r3
 8016d48:	f107 0110 	add.w	r1, r7, #16
 8016d4c:	230a      	movs	r3, #10
 8016d4e:	481f      	ldr	r0, [pc, #124]	; (8016dcc <logData+0x138>)
 8016d50:	f7f4 fe48 	bl	800b9e4 <HAL_UART_Transmit>
    	{
//    		CDC_Transmit_FS((uint8_t*)localString, strlen(localString));
    		HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
    	}
    }
}
 8016d54:	e02e      	b.n	8016db4 <logData+0x120>
    else if (!displayOnly || !doNotShowOnDisplay)
 8016d56:	1cbb      	adds	r3, r7, #2
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	f083 0301 	eor.w	r3, r3, #1
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d106      	bne.n	8016d72 <logData+0xde>
 8016d64:	1cfb      	adds	r3, r7, #3
 8016d66:	781b      	ldrb	r3, [r3, #0]
 8016d68:	f083 0301 	eor.w	r3, r3, #1
 8016d6c:	b2db      	uxtb	r3, r3
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d020      	beq.n	8016db4 <logData+0x120>
    	f_write(&fil, localString, strlen(localString), &BytesWritten);
 8016d72:	f107 0310 	add.w	r3, r7, #16
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7e9 fabc 	bl	80002f4 <strlen>
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	f107 030c 	add.w	r3, r7, #12
 8016d82:	f107 0110 	add.w	r1, r7, #16
 8016d86:	4812      	ldr	r0, [pc, #72]	; (8016dd0 <logData+0x13c>)
 8016d88:	f7fc fdc5 	bl	8013916 <f_write>
    	if ( (!doNotShowOnDisplay) /*&& (!isInfwUpdateMode)*/ )
 8016d8c:	1cfb      	adds	r3, r7, #3
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	f083 0301 	eor.w	r3, r3, #1
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d00c      	beq.n	8016db4 <logData+0x120>
    		HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
 8016d9a:	f107 0310 	add.w	r3, r7, #16
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7e9 faa8 	bl	80002f4 <strlen>
 8016da4:	4603      	mov	r3, r0
 8016da6:	b29a      	uxth	r2, r3
 8016da8:	f107 0110 	add.w	r1, r7, #16
 8016dac:	230a      	movs	r3, #10
 8016dae:	4807      	ldr	r0, [pc, #28]	; (8016dcc <logData+0x138>)
 8016db0:	f7f4 fe18 	bl	800b9e4 <HAL_UART_Transmit>
}
 8016db4:	bf00      	nop
 8016db6:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd90      	pop	{r4, r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	08020558 	.word	0x08020558
 8016dc4:	08020564 	.word	0x08020564
 8016dc8:	0802056c 	.word	0x0802056c
 8016dcc:	2400b32c 	.word	0x2400b32c
 8016dd0:	2400bdc8 	.word	0x2400bdc8

08016dd4 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af02      	add	r7, sp, #8
	isPortrait = true;
 8016dda:	4b63      	ldr	r3, [pc, #396]	; (8016f68 <screenInit+0x194>)
 8016ddc:	2201      	movs	r2, #1
 8016dde:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 8016de0:	f7f7 fb46 	bl	800e470 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 8016de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016de8:	f7f8 fcf4 	bl	800f7d4 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 8016dec:	4b5e      	ldr	r3, [pc, #376]	; (8016f68 <screenInit+0x194>)
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d00d      	beq.n	8016e10 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 8016df4:	2000      	movs	r0, #0
 8016df6:	f7f8 fbcd 	bl	800f594 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	f7f8 fcac 	bl	800f758 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8016e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e04:	2200      	movs	r2, #0
 8016e06:	21a0      	movs	r1, #160	; 0xa0
 8016e08:	2080      	movs	r0, #128	; 0x80
 8016e0a:	f7f7 fb51 	bl	800e4b0 <Paint_NewImage>
 8016e0e:	e00c      	b.n	8016e2a <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 8016e10:	2005      	movs	r0, #5
 8016e12:	f7f8 fbbf 	bl	800f594 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8016e16:	2000      	movs	r0, #0
 8016e18:	f7f8 fc9e 	bl	800f758 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8016e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e20:	2200      	movs	r2, #0
 8016e22:	2180      	movs	r1, #128	; 0x80
 8016e24:	20a0      	movs	r0, #160	; 0xa0
 8016e26:	f7f7 fb43 	bl	800e4b0 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 8016e2a:	4850      	ldr	r0, [pc, #320]	; (8016f6c <screenInit+0x198>)
 8016e2c:	f7f7 fb8c 	bl	800e548 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8016e30:	484f      	ldr	r0, [pc, #316]	; (8016f70 <screenInit+0x19c>)
 8016e32:	f7f7 fb99 	bl	800e568 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 8016e36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016e3a:	f7f7 fc55 	bl	800e6e8 <Paint_Clear>
	DEV_Delay_ms(1000);
 8016e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016e42:	f7eb fc5d 	bl	8002700 <HAL_Delay>

	if (isPortrait)
 8016e46:	4b48      	ldr	r3, [pc, #288]	; (8016f68 <screenInit+0x194>)
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d042      	beq.n	8016ed4 <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 8016e4e:	2380      	movs	r3, #128	; 0x80
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	2380      	movs	r3, #128	; 0x80
 8016e54:	2200      	movs	r2, #0
 8016e56:	2100      	movs	r1, #0
 8016e58:	4846      	ldr	r0, [pc, #280]	; (8016f74 <screenInit+0x1a0>)
 8016e5a:	f7f8 f95d 	bl	800f118 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 8016e5e:	2300      	movs	r3, #0
 8016e60:	9301      	str	r3, [sp, #4]
 8016e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e66:	9300      	str	r3, [sp, #0]
 8016e68:	4b43      	ldr	r3, [pc, #268]	; (8016f78 <screenInit+0x1a4>)
 8016e6a:	4a44      	ldr	r2, [pc, #272]	; (8016f7c <screenInit+0x1a8>)
 8016e6c:	2182      	movs	r1, #130	; 0x82
 8016e6e:	2001      	movs	r0, #1
 8016e70:	f7f8 f868 	bl	800ef44 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 8016e74:	4b42      	ldr	r3, [pc, #264]	; (8016f80 <screenInit+0x1ac>)
 8016e76:	edd3 7a00 	vldr	s15, [r3]
 8016e7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e82:	9301      	str	r3, [sp, #4]
 8016e84:	2300      	movs	r3, #0
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	4b3b      	ldr	r3, [pc, #236]	; (8016f78 <screenInit+0x1a4>)
 8016e8a:	2202      	movs	r2, #2
 8016e8c:	eeb0 0b47 	vmov.f64	d0, d7
 8016e90:	218e      	movs	r1, #142	; 0x8e
 8016e92:	2001      	movs	r0, #1
 8016e94:	f7f8 f8ae 	bl	800eff4 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 8016e98:	2300      	movs	r3, #0
 8016e9a:	9301      	str	r3, [sp, #4]
 8016e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	4b35      	ldr	r3, [pc, #212]	; (8016f78 <screenInit+0x1a4>)
 8016ea4:	4a37      	ldr	r2, [pc, #220]	; (8016f84 <screenInit+0x1b0>)
 8016ea6:	2182      	movs	r1, #130	; 0x82
 8016ea8:	2046      	movs	r0, #70	; 0x46
 8016eaa:	f7f8 f84b 	bl	800ef44 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 8016eae:	4b36      	ldr	r3, [pc, #216]	; (8016f88 <screenInit+0x1b4>)
 8016eb0:	edd3 7a00 	vldr	s15, [r3]
 8016eb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ebc:	9301      	str	r3, [sp, #4]
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	9300      	str	r3, [sp, #0]
 8016ec2:	4b2d      	ldr	r3, [pc, #180]	; (8016f78 <screenInit+0x1a4>)
 8016ec4:	2202      	movs	r2, #2
 8016ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8016eca:	218e      	movs	r1, #142	; 0x8e
 8016ecc:	2046      	movs	r0, #70	; 0x46
 8016ece:	f7f8 f891 	bl	800eff4 <Paint_DrawFloatNum>
 8016ed2:	e041      	b.n	8016f58 <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 8016ed4:	2380      	movs	r3, #128	; 0x80
 8016ed6:	9300      	str	r3, [sp, #0]
 8016ed8:	2380      	movs	r3, #128	; 0x80
 8016eda:	2200      	movs	r2, #0
 8016edc:	2110      	movs	r1, #16
 8016ede:	4825      	ldr	r0, [pc, #148]	; (8016f74 <screenInit+0x1a0>)
 8016ee0:	f7f8 f91a 	bl	800f118 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	9301      	str	r3, [sp, #4]
 8016ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016eec:	9300      	str	r3, [sp, #0]
 8016eee:	4b22      	ldr	r3, [pc, #136]	; (8016f78 <screenInit+0x1a4>)
 8016ef0:	4a22      	ldr	r2, [pc, #136]	; (8016f7c <screenInit+0x1a8>)
 8016ef2:	2162      	movs	r1, #98	; 0x62
 8016ef4:	2001      	movs	r0, #1
 8016ef6:	f7f8 f825 	bl	800ef44 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 8016efa:	4b21      	ldr	r3, [pc, #132]	; (8016f80 <screenInit+0x1ac>)
 8016efc:	edd3 7a00 	vldr	s15, [r3]
 8016f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f08:	9301      	str	r3, [sp, #4]
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	4b1a      	ldr	r3, [pc, #104]	; (8016f78 <screenInit+0x1a4>)
 8016f10:	2202      	movs	r2, #2
 8016f12:	eeb0 0b47 	vmov.f64	d0, d7
 8016f16:	216e      	movs	r1, #110	; 0x6e
 8016f18:	2001      	movs	r0, #1
 8016f1a:	f7f8 f86b 	bl	800eff4 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 8016f1e:	2300      	movs	r3, #0
 8016f20:	9301      	str	r3, [sp, #4]
 8016f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f26:	9300      	str	r3, [sp, #0]
 8016f28:	4b13      	ldr	r3, [pc, #76]	; (8016f78 <screenInit+0x1a4>)
 8016f2a:	4a16      	ldr	r2, [pc, #88]	; (8016f84 <screenInit+0x1b0>)
 8016f2c:	2162      	movs	r1, #98	; 0x62
 8016f2e:	2068      	movs	r0, #104	; 0x68
 8016f30:	f7f8 f808 	bl	800ef44 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 8016f34:	4b14      	ldr	r3, [pc, #80]	; (8016f88 <screenInit+0x1b4>)
 8016f36:	edd3 7a00 	vldr	s15, [r3]
 8016f3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f42:	9301      	str	r3, [sp, #4]
 8016f44:	2300      	movs	r3, #0
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	4b0b      	ldr	r3, [pc, #44]	; (8016f78 <screenInit+0x1a4>)
 8016f4a:	2202      	movs	r2, #2
 8016f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8016f50:	216e      	movs	r1, #110	; 0x6e
 8016f52:	207c      	movs	r0, #124	; 0x7c
 8016f54:	f7f8 f84e 	bl	800eff4 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 8016f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016f5c:	f7eb fbd0 	bl	8002700 <HAL_Delay>
}
 8016f60:	bf00      	nop
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}
 8016f66:	bf00      	nop
 8016f68:	2400008c 	.word	0x2400008c
 8016f6c:	0800f759 	.word	0x0800f759
 8016f70:	0800f6cd 	.word	0x0800f6cd
 8016f74:	08020d9c 	.word	0x08020d9c
 8016f78:	24000030 	.word	0x24000030
 8016f7c:	08020570 	.word	0x08020570
 8016f80:	24000008 	.word	0x24000008
 8016f84:	08020578 	.word	0x08020578
 8016f88:	2400000c 	.word	0x2400000c

08016f8c <screenClear>:

void screenClear(void)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	af00      	add	r7, sp, #0
	if (isPortrait)
 8016f90:	4b0e      	ldr	r3, [pc, #56]	; (8016fcc <screenClear+0x40>)
 8016f92:	781b      	ldrb	r3, [r3, #0]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d007      	beq.n	8016fa8 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8016f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	21a0      	movs	r1, #160	; 0xa0
 8016fa0:	2080      	movs	r0, #128	; 0x80
 8016fa2:	f7f7 fa85 	bl	800e4b0 <Paint_NewImage>
 8016fa6:	e006      	b.n	8016fb6 <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8016fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016fac:	2200      	movs	r2, #0
 8016fae:	2180      	movs	r1, #128	; 0x80
 8016fb0:	20a0      	movs	r0, #160	; 0xa0
 8016fb2:	f7f7 fa7d 	bl	800e4b0 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 8016fb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016fba:	f7f7 fb95 	bl	800e6e8 <Paint_Clear>
	DEV_Delay_ms(1000);
 8016fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016fc2:	f7eb fb9d 	bl	8002700 <HAL_Delay>
}
 8016fc6:	bf00      	nop
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	2400008c 	.word	0x2400008c

08016fd0 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 8016fd0:	b590      	push	{r4, r7, lr}
 8016fd2:	b089      	sub	sp, #36	; 0x24
 8016fd4:	af02      	add	r7, sp, #8
 8016fd6:	60ba      	str	r2, [r7, #8]
 8016fd8:	461a      	mov	r2, r3
 8016fda:	4603      	mov	r3, r0
 8016fdc:	81fb      	strh	r3, [r7, #14]
 8016fde:	460b      	mov	r3, r1
 8016fe0:	81bb      	strh	r3, [r7, #12]
 8016fe2:	4613      	mov	r3, r2
 8016fe4:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 8016fea:	89fa      	ldrh	r2, [r7, #14]
 8016fec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016ff0:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8016ff2:	fb01 f303 	mul.w	r3, r1, r3
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	da00      	bge.n	8016ffc <centeredString+0x2c>
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	105b      	asrs	r3, r3, #1
 8016ffe:	425b      	negs	r3, r3
 8017000:	4413      	add	r3, r2
 8017002:	ee07 3a90 	vmov	s15, r3
 8017006:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801700a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8017168 <centeredString+0x198>
 801700e:	eeb0 0b47 	vmov.f64	d0, d7
 8017012:	f008 febb 	bl	801fd8c <fmax>
 8017016:	eeb0 7b40 	vmov.f64	d7, d0
 801701a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801701e:	edc7 7a00 	vstr	s15, [r7]
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 8017026:	4b52      	ldr	r3, [pc, #328]	; (8017170 <centeredString+0x1a0>)
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	f083 0301 	eor.w	r3, r3, #1
 801702e:	b2db      	uxtb	r3, r3
 8017030:	2b00      	cmp	r3, #0
 8017032:	d018      	beq.n	8017066 <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 8017034:	7dfb      	ldrb	r3, [r7, #23]
 8017036:	b298      	uxth	r0, r3
 8017038:	7dfb      	ldrb	r3, [r7, #23]
 801703a:	b29a      	uxth	r2, r3
 801703c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017040:	b299      	uxth	r1, r3
 8017042:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017044:	fb11 f303 	smulbb	r3, r1, r3
 8017048:	b29b      	uxth	r3, r3
 801704a:	4413      	add	r3, r2
 801704c:	b29c      	uxth	r4, r3
 801704e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017050:	89bb      	ldrh	r3, [r7, #12]
 8017052:	4413      	add	r3, r2
 8017054:	b29b      	uxth	r3, r3
 8017056:	89b9      	ldrh	r1, [r7, #12]
 8017058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801705c:	9200      	str	r2, [sp, #0]
 801705e:	4622      	mov	r2, r4
 8017060:	f7f7 fb52 	bl	800e708 <Paint_ClearWindows>
 8017064:	e04e      	b.n	8017104 <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 8017066:	4b42      	ldr	r3, [pc, #264]	; (8017170 <centeredString+0x1a0>)
 8017068:	781b      	ldrb	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d026      	beq.n	80170bc <centeredString+0xec>
 801706e:	4b41      	ldr	r3, [pc, #260]	; (8017174 <centeredString+0x1a4>)
 8017070:	781b      	ldrb	r3, [r3, #0]
 8017072:	f083 0301 	eor.w	r3, r3, #1
 8017076:	b2db      	uxtb	r3, r3
 8017078:	2b00      	cmp	r3, #0
 801707a:	d01f      	beq.n	80170bc <centeredString+0xec>
 801707c:	4b3e      	ldr	r3, [pc, #248]	; (8017178 <centeredString+0x1a8>)
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	f083 0301 	eor.w	r3, r3, #1
 8017084:	b2db      	uxtb	r3, r3
 8017086:	2b00      	cmp	r3, #0
 8017088:	d018      	beq.n	80170bc <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 801708a:	7dfb      	ldrb	r3, [r7, #23]
 801708c:	b298      	uxth	r0, r3
 801708e:	7dfb      	ldrb	r3, [r7, #23]
 8017090:	b29a      	uxth	r2, r3
 8017092:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017096:	b299      	uxth	r1, r3
 8017098:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801709a:	fb11 f303 	smulbb	r3, r1, r3
 801709e:	b29b      	uxth	r3, r3
 80170a0:	4413      	add	r3, r2
 80170a2:	b29c      	uxth	r4, r3
 80170a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80170a6:	89bb      	ldrh	r3, [r7, #12]
 80170a8:	4413      	add	r3, r2
 80170aa:	b29a      	uxth	r2, r3
 80170ac:	89b9      	ldrh	r1, [r7, #12]
 80170ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	4613      	mov	r3, r2
 80170b4:	4622      	mov	r2, r4
 80170b6:	f7f7 fb27 	bl	800e708 <Paint_ClearWindows>
 80170ba:	e023      	b.n	8017104 <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 80170bc:	4b2c      	ldr	r3, [pc, #176]	; (8017170 <centeredString+0x1a0>)
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d01f      	beq.n	8017104 <centeredString+0x134>
 80170c4:	4b2b      	ldr	r3, [pc, #172]	; (8017174 <centeredString+0x1a4>)
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d103      	bne.n	80170d4 <centeredString+0x104>
 80170cc:	4b2a      	ldr	r3, [pc, #168]	; (8017178 <centeredString+0x1a8>)
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d017      	beq.n	8017104 <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 80170d4:	7dfb      	ldrb	r3, [r7, #23]
 80170d6:	b298      	uxth	r0, r3
 80170d8:	7dfb      	ldrb	r3, [r7, #23]
 80170da:	b29a      	uxth	r2, r3
 80170dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170e0:	b299      	uxth	r1, r3
 80170e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170e4:	fb11 f303 	smulbb	r3, r1, r3
 80170e8:	b29b      	uxth	r3, r3
 80170ea:	4413      	add	r3, r2
 80170ec:	b29c      	uxth	r4, r3
 80170ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80170f0:	89bb      	ldrh	r3, [r7, #12]
 80170f2:	4413      	add	r3, r2
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	89b9      	ldrh	r1, [r7, #12]
 80170f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170fc:	9200      	str	r2, [sp, #0]
 80170fe:	4622      	mov	r2, r4
 8017100:	f7f7 fb02 	bl	800e708 <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 8017104:	68b8      	ldr	r0, [r7, #8]
 8017106:	f7e9 f8f5 	bl	80002f4 <strlen>
 801710a:	4603      	mov	r3, r0
 801710c:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 801710e:	89fc      	ldrh	r4, [r7, #14]
 8017110:	68b8      	ldr	r0, [r7, #8]
 8017112:	f7e9 f8ef 	bl	80002f4 <strlen>
 8017116:	4603      	mov	r3, r0
 8017118:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801711a:	fb02 f303 	mul.w	r3, r2, r3
 801711e:	085b      	lsrs	r3, r3, #1
 8017120:	1ae3      	subs	r3, r4, r3
 8017122:	ee07 3a90 	vmov	s15, r3
 8017126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801712a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8017168 <centeredString+0x198>
 801712e:	eeb0 0b47 	vmov.f64	d0, d7
 8017132:	f008 fe2b 	bl	801fd8c <fmax>
 8017136:	eeb0 7b40 	vmov.f64	d7, d0
 801713a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801713e:	edc7 7a00 	vstr	s15, [r7]
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 8017146:	7dfb      	ldrb	r3, [r7, #23]
 8017148:	b298      	uxth	r0, r3
 801714a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801714e:	89b9      	ldrh	r1, [r7, #12]
 8017150:	88fb      	ldrh	r3, [r7, #6]
 8017152:	9301      	str	r3, [sp, #4]
 8017154:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017156:	9300      	str	r3, [sp, #0]
 8017158:	4613      	mov	r3, r2
 801715a:	68ba      	ldr	r2, [r7, #8]
 801715c:	f7f7 fef2 	bl	800ef44 <Paint_DrawString_EN>
}
 8017160:	bf00      	nop
 8017162:	371c      	adds	r7, #28
 8017164:	46bd      	mov	sp, r7
 8017166:	bd90      	pop	{r4, r7, pc}
	...
 8017170:	2400ae77 	.word	0x2400ae77
 8017174:	2400ae71 	.word	0x2400ae71
 8017178:	2400ae76 	.word	0x2400ae76

0801717c <showAngles>:

void showAngles(void)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b08a      	sub	sp, #40	; 0x28
 8017180:	af02      	add	r7, sp, #8
	char localT[32] = "";
 8017182:	2300      	movs	r3, #0
 8017184:	603b      	str	r3, [r7, #0]
 8017186:	1d3b      	adds	r3, r7, #4
 8017188:	2200      	movs	r2, #0
 801718a:	601a      	str	r2, [r3, #0]
 801718c:	605a      	str	r2, [r3, #4]
 801718e:	609a      	str	r2, [r3, #8]
 8017190:	60da      	str	r2, [r3, #12]
 8017192:	611a      	str	r2, [r3, #16]
 8017194:	615a      	str	r2, [r3, #20]
 8017196:	619a      	str	r2, [r3, #24]

	snprintf(localT,sizeof(localT),"R: %04.3f", receivedAnglesData->bodyAngles.Roll);
 8017198:	4b2a      	ldr	r3, [pc, #168]	; (8017244 <showAngles+0xc8>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	edd3 7a01 	vldr	s15, [r3, #4]
 80171a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80171a4:	463b      	mov	r3, r7
 80171a6:	ed8d 7b00 	vstr	d7, [sp]
 80171aa:	4a27      	ldr	r2, [pc, #156]	; (8017248 <showAngles+0xcc>)
 80171ac:	2120      	movs	r1, #32
 80171ae:	4618      	mov	r0, r3
 80171b0:	f005 fa30 	bl	801c614 <sniprintf>
	Paint_DrawString_EN(VerticalRollChasisX, VerticalRollChasisY, (char *)localT, &Font8, WHITE, BLACK);
 80171b4:	463a      	mov	r2, r7
 80171b6:	2300      	movs	r3, #0
 80171b8:	9301      	str	r3, [sp, #4]
 80171ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171be:	9300      	str	r3, [sp, #0]
 80171c0:	4b22      	ldr	r3, [pc, #136]	; (801724c <showAngles+0xd0>)
 80171c2:	218c      	movs	r1, #140	; 0x8c
 80171c4:	2002      	movs	r0, #2
 80171c6:	f7f7 febd 	bl	800ef44 <Paint_DrawString_EN>

	memset(localT,0,32);
 80171ca:	463b      	mov	r3, r7
 80171cc:	2220      	movs	r2, #32
 80171ce:	2100      	movs	r1, #0
 80171d0:	4618      	mov	r0, r3
 80171d2:	f004 f929 	bl	801b428 <memset>
	snprintf(localT,sizeof(localT),"P: %04.3f", receivedAnglesData->bodyAngles.Pitch);
 80171d6:	4b1b      	ldr	r3, [pc, #108]	; (8017244 <showAngles+0xc8>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	edd3 7a02 	vldr	s15, [r3, #8]
 80171de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80171e2:	463b      	mov	r3, r7
 80171e4:	ed8d 7b00 	vstr	d7, [sp]
 80171e8:	4a19      	ldr	r2, [pc, #100]	; (8017250 <showAngles+0xd4>)
 80171ea:	2120      	movs	r1, #32
 80171ec:	4618      	mov	r0, r3
 80171ee:	f005 fa11 	bl	801c614 <sniprintf>
	Paint_DrawString_EN(VerticalPitchChasisX, VerticalPitchChasisY, (char *)localT, &Font8, WHITE, BLACK);
 80171f2:	463a      	mov	r2, r7
 80171f4:	2300      	movs	r3, #0
 80171f6:	9301      	str	r3, [sp, #4]
 80171f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171fc:	9300      	str	r3, [sp, #0]
 80171fe:	4b13      	ldr	r3, [pc, #76]	; (801724c <showAngles+0xd0>)
 8017200:	218c      	movs	r1, #140	; 0x8c
 8017202:	2044      	movs	r0, #68	; 0x44
 8017204:	f7f7 fe9e 	bl	800ef44 <Paint_DrawString_EN>

	memset(localT,0,32);
 8017208:	463b      	mov	r3, r7
 801720a:	2220      	movs	r2, #32
 801720c:	2100      	movs	r1, #0
 801720e:	4618      	mov	r0, r3
 8017210:	f004 f90a 	bl	801b428 <memset>
	snprintf(localT,sizeof(localT),"Y: %04.3f", receivedAnglesData->bodyAngles.Yaw);
 8017214:	4b0b      	ldr	r3, [pc, #44]	; (8017244 <showAngles+0xc8>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	edd3 7a03 	vldr	s15, [r3, #12]
 801721c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017220:	463b      	mov	r3, r7
 8017222:	ed8d 7b00 	vstr	d7, [sp]
 8017226:	4a0b      	ldr	r2, [pc, #44]	; (8017254 <showAngles+0xd8>)
 8017228:	2120      	movs	r1, #32
 801722a:	4618      	mov	r0, r3
 801722c:	f005 f9f2 	bl	801c614 <sniprintf>
//	Paint_DrawString_EN(VerticalYawChasisX, VerticalYawChasisY, (char *)localT, &Font8, WHITE, BLACK);
	memset(localT,0,32);
 8017230:	463b      	mov	r3, r7
 8017232:	2220      	movs	r2, #32
 8017234:	2100      	movs	r1, #0
 8017236:	4618      	mov	r0, r3
 8017238:	f004 f8f6 	bl	801b428 <memset>
}
 801723c:	bf00      	nop
 801723e:	3720      	adds	r7, #32
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	2400b04c 	.word	0x2400b04c
 8017248:	08020580 	.word	0x08020580
 801724c:	24000038 	.word	0x24000038
 8017250:	0802058c 	.word	0x0802058c
 8017254:	08020598 	.word	0x08020598

08017258 <showLIDAR>:

void showLIDAR(void)
{
 8017258:	b590      	push	{r4, r7, lr}
 801725a:	b085      	sub	sp, #20
 801725c:	af04      	add	r7, sp, #16
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 50, BLUE, DOT_PIXEL_2X2, DRAW_FILL_EMPTY );
 801725e:	2300      	movs	r3, #0
 8017260:	9301      	str	r3, [sp, #4]
 8017262:	2302      	movs	r3, #2
 8017264:	9300      	str	r3, [sp, #0]
 8017266:	231f      	movs	r3, #31
 8017268:	2232      	movs	r2, #50	; 0x32
 801726a:	214c      	movs	r1, #76	; 0x4c
 801726c:	2040      	movs	r0, #64	; 0x40
 801726e:	f7f7 fc4d 	bl	800eb0c <Paint_DrawCircle>
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 1, RED, DOT_PIXEL_2X2, DRAW_FILL_FULL );
 8017272:	2301      	movs	r3, #1
 8017274:	9301      	str	r3, [sp, #4]
 8017276:	2302      	movs	r3, #2
 8017278:	9300      	str	r3, [sp, #0]
 801727a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801727e:	2201      	movs	r2, #1
 8017280:	214c      	movs	r1, #76	; 0x4c
 8017282:	2040      	movs	r0, #64	; 0x40
 8017284:	f7f7 fc42 	bl	800eb0c <Paint_DrawCircle>

	if (HAL_GetTick() - lastLidarBoresight >= 40)
 8017288:	f7eb fa2e 	bl	80026e8 <HAL_GetTick>
 801728c:	4602      	mov	r2, r0
 801728e:	4b48      	ldr	r3, [pc, #288]	; (80173b0 <showLIDAR+0x158>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	1ad3      	subs	r3, r2, r3
 8017294:	2b27      	cmp	r3, #39	; 0x27
 8017296:	d927      	bls.n	80172e8 <showLIDAR+0x90>
	{
		currentLidarAngle = (float)((uint32_t)(1.8 * (HAL_GetTick() - lastLidarBoresight)) % (360));
 8017298:	f7eb fa26 	bl	80026e8 <HAL_GetTick>
 801729c:	4602      	mov	r2, r0
 801729e:	4b44      	ldr	r3, [pc, #272]	; (80173b0 <showLIDAR+0x158>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	1ad3      	subs	r3, r2, r3
 80172a4:	ee07 3a90 	vmov	s15, r3
 80172a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80172ac:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8017398 <showLIDAR+0x140>
 80172b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80172b8:	ee17 2a90 	vmov	r2, s15
 80172bc:	08d3      	lsrs	r3, r2, #3
 80172be:	493d      	ldr	r1, [pc, #244]	; (80173b4 <showLIDAR+0x15c>)
 80172c0:	fba1 1303 	umull	r1, r3, r1, r3
 80172c4:	089b      	lsrs	r3, r3, #2
 80172c6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80172ca:	fb01 f303 	mul.w	r3, r1, r3
 80172ce:	1ad3      	subs	r3, r2, r3
 80172d0:	ee07 3a90 	vmov	s15, r3
 80172d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80172d8:	4b37      	ldr	r3, [pc, #220]	; (80173b8 <showLIDAR+0x160>)
 80172da:	edc3 7a00 	vstr	s15, [r3]
		lastLidarBoresight = HAL_GetTick();
 80172de:	f7eb fa03 	bl	80026e8 <HAL_GetTick>
 80172e2:	4603      	mov	r3, r0
 80172e4:	4a32      	ldr	r2, [pc, #200]	; (80173b0 <showLIDAR+0x158>)
 80172e6:	6013      	str	r3, [r2, #0]
	}
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 80172e8:	4b34      	ldr	r3, [pc, #208]	; (80173bc <showLIDAR+0x164>)
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80172f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80172f4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80173a0 <showLIDAR+0x148>
 80172f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80172fc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80173a8 <showLIDAR+0x150>
 8017300:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8017304:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017308:	eeb0 0a67 	vmov.f32	s0, s15
 801730c:	f008 fc90 	bl	801fc30 <cosf>
 8017310:	eef0 7a40 	vmov.f32	s15, s0
 8017314:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80173c0 <showLIDAR+0x168>
 8017318:	ee67 7a87 	vmul.f32	s15, s15, s14
 801731c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80173c4 <showLIDAR+0x16c>
 8017320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017328:	ee17 3a90 	vmov	r3, s15
 801732c:	b29c      	uxth	r4, r3
			lidarCenterY + lidarRadius * sinf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD), DARKBLUE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 801732e:	4b23      	ldr	r3, [pc, #140]	; (80173bc <showLIDAR+0x164>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	edd3 7a03 	vldr	s15, [r3, #12]
 8017336:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801733a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80173a0 <showLIDAR+0x148>
 801733e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017342:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80173a8 <showLIDAR+0x150>
 8017346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801734a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801734e:	eeb0 0a67 	vmov.f32	s0, s15
 8017352:	f008 fda5 	bl	801fea0 <sinf>
 8017356:	eef0 7a40 	vmov.f32	s15, s0
 801735a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80173c0 <showLIDAR+0x168>
 801735e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017362:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80173c8 <showLIDAR+0x170>
 8017366:	ee77 7a87 	vadd.f32	s15, s15, s14
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 801736a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801736e:	ee17 3a90 	vmov	r3, s15
 8017372:	b29b      	uxth	r3, r3
 8017374:	2200      	movs	r2, #0
 8017376:	9202      	str	r2, [sp, #8]
 8017378:	2201      	movs	r2, #1
 801737a:	9201      	str	r2, [sp, #4]
 801737c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8017380:	9200      	str	r2, [sp, #0]
 8017382:	4622      	mov	r2, r4
 8017384:	214c      	movs	r1, #76	; 0x4c
 8017386:	2040      	movs	r0, #64	; 0x40
 8017388:	f7f7 fa88 	bl	800e89c <Paint_DrawLine>

}
 801738c:	bf00      	nop
 801738e:	3704      	adds	r7, #4
 8017390:	46bd      	mov	sp, r7
 8017392:	bd90      	pop	{r4, r7, pc}
 8017394:	f3af 8000 	nop.w
 8017398:	cccccccd 	.word	0xcccccccd
 801739c:	3ffccccc 	.word	0x3ffccccc
 80173a0:	54442d18 	.word	0x54442d18
 80173a4:	400921fb 	.word	0x400921fb
 80173a8:	00000000 	.word	0x00000000
 80173ac:	40668000 	.word	0x40668000
 80173b0:	2400ae7c 	.word	0x2400ae7c
 80173b4:	16c16c17 	.word	0x16c16c17
 80173b8:	2400ae80 	.word	0x2400ae80
 80173bc:	2400b04c 	.word	0x2400b04c
 80173c0:	42480000 	.word	0x42480000
 80173c4:	42800000 	.word	0x42800000
 80173c8:	42980000 	.word	0x42980000

080173cc <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	4603      	mov	r3, r0
 80173d4:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 80173d6:	4b21      	ldr	r3, [pc, #132]	; (801745c <screenUpdate+0x90>)
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	f083 0301 	eor.w	r3, r3, #1
 80173de:	b2db      	uxtb	r3, r3
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00e      	beq.n	8017402 <screenUpdate+0x36>
 80173e4:	4b1e      	ldr	r3, [pc, #120]	; (8017460 <screenUpdate+0x94>)
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	f083 0301 	eor.w	r3, r3, #1
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d007      	beq.n	8017402 <screenUpdate+0x36>
	{
		createEmptyFrame(false);
 80173f2:	2000      	movs	r0, #0
 80173f4:	f000 fe80 	bl	80180f8 <createEmptyFrame>
		showAngles();
 80173f8:	f7ff fec0 	bl	801717c <showAngles>
		showLIDAR();
 80173fc:	f7ff ff2c 	bl	8017258 <showLIDAR>
 8017400:	e01f      	b.n	8017442 <screenUpdate+0x76>
	}
	else if (isMenuDisplayed)
 8017402:	4b16      	ldr	r3, [pc, #88]	; (801745c <screenUpdate+0x90>)
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d01b      	beq.n	8017442 <screenUpdate+0x76>
	{
		if (shouldRenderMenu)
 801740a:	4b16      	ldr	r3, [pc, #88]	; (8017464 <screenUpdate+0x98>)
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d00a      	beq.n	8017428 <screenUpdate+0x5c>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 8017412:	4b15      	ldr	r3, [pc, #84]	; (8017468 <screenUpdate+0x9c>)
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	4a15      	ldr	r2, [pc, #84]	; (801746c <screenUpdate+0xa0>)
 8017418:	7812      	ldrb	r2, [r2, #0]
 801741a:	4611      	mov	r1, r2
 801741c:	4618      	mov	r0, r3
 801741e:	f000 f82d 	bl	801747c <drawMenu>
			shouldRenderMenu = false;
 8017422:	4b10      	ldr	r3, [pc, #64]	; (8017464 <screenUpdate+0x98>)
 8017424:	2200      	movs	r2, #0
 8017426:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 8017428:	4b11      	ldr	r3, [pc, #68]	; (8017470 <screenUpdate+0xa4>)
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d008      	beq.n	8017442 <screenUpdate+0x76>
		{
			drawItem(false, itemDrawDirection);
 8017430:	4b10      	ldr	r3, [pc, #64]	; (8017474 <screenUpdate+0xa8>)
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	4619      	mov	r1, r3
 8017436:	2000      	movs	r0, #0
 8017438:	f000 f9c4 	bl	80177c4 <drawItem>
			shouldRenderItem = false;
 801743c:	4b0c      	ldr	r3, [pc, #48]	; (8017470 <screenUpdate+0xa4>)
 801743e:	2200      	movs	r2, #0
 8017440:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 8017442:	4b0d      	ldr	r3, [pc, #52]	; (8017478 <screenUpdate+0xac>)
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d004      	beq.n	8017454 <screenUpdate+0x88>
	{
		drawPopup();
 801744a:	f000 fa7b 	bl	8017944 <drawPopup>
		shouldRenderPopup = false;
 801744e:	4b0a      	ldr	r3, [pc, #40]	; (8017478 <screenUpdate+0xac>)
 8017450:	2200      	movs	r2, #0
 8017452:	701a      	strb	r2, [r3, #0]
	}
}
 8017454:	bf00      	nop
 8017456:	3708      	adds	r7, #8
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	2400ae71 	.word	0x2400ae71
 8017460:	2400ae76 	.word	0x2400ae76
 8017464:	2400ae70 	.word	0x2400ae70
 8017468:	2400ae72 	.word	0x2400ae72
 801746c:	2400008d 	.word	0x2400008d
 8017470:	2400ae73 	.word	0x2400ae73
 8017474:	2400008e 	.word	0x2400008e
 8017478:	2400ae75 	.word	0x2400ae75

0801747c <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 801747c:	b5b0      	push	{r4, r5, r7, lr}
 801747e:	b08a      	sub	sp, #40	; 0x28
 8017480:	af04      	add	r7, sp, #16
 8017482:	4603      	mov	r3, r0
 8017484:	460a      	mov	r2, r1
 8017486:	71fb      	strb	r3, [r7, #7]
 8017488:	4613      	mov	r3, r2
 801748a:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 801748c:	79fb      	ldrb	r3, [r7, #7]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 8017492:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017496:	f7f7 f927 	bl	800e6e8 <Paint_Clear>
		createEmptyFrame(true);
 801749a:	2001      	movs	r0, #1
 801749c:	f000 fe2c 	bl	80180f8 <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 80174a0:	2300      	movs	r3, #0
 80174a2:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 80174a4:	2300      	movs	r3, #0
 80174a6:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 80174a8:	2300      	movs	r3, #0
 80174aa:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 80174ac:	2300      	movs	r3, #0
 80174ae:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 80174b4:	4b89      	ldr	r3, [pc, #548]	; (80176dc <drawMenu+0x260>)
 80174b6:	781b      	ldrb	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d009      	beq.n	80174d0 <drawMenu+0x54>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 80174bc:	2302      	movs	r3, #2
 80174be:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 80174c0:	230c      	movs	r3, #12
 80174c2:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 80174c4:	230e      	movs	r3, #14
 80174c6:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 80174c8:	237c      	movs	r3, #124	; 0x7c
 80174ca:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 80174cc:	2340      	movs	r3, #64	; 0x40
 80174ce:	74fb      	strb	r3, [r7, #19]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	if (howToDraw == FULL)
 80174d0:	79bb      	ldrb	r3, [r7, #6]
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	f040 809f 	bne.w	8017616 <drawMenu+0x19a>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 80174d8:	2300      	movs	r3, #0
 80174da:	60fb      	str	r3, [r7, #12]
 80174dc:	e08a      	b.n	80175f4 <drawMenu+0x178>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80174de:	7dfb      	ldrb	r3, [r7, #23]
 80174e0:	b298      	uxth	r0, r3
 80174e2:	7dbb      	ldrb	r3, [r7, #22]
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	7d7b      	ldrb	r3, [r7, #21]
 80174e8:	b299      	uxth	r1, r3
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	fb11 f303 	smulbb	r3, r1, r3
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	4413      	add	r3, r2
 80174f6:	b29c      	uxth	r4, r3
 80174f8:	7dfb      	ldrb	r3, [r7, #23]
 80174fa:	b29a      	uxth	r2, r3
 80174fc:	7d3b      	ldrb	r3, [r7, #20]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	4413      	add	r3, r2
 8017502:	b29d      	uxth	r5, r3
 8017504:	7dbb      	ldrb	r3, [r7, #22]
 8017506:	b29a      	uxth	r2, r3
 8017508:	7d7b      	ldrb	r3, [r7, #21]
 801750a:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8017510:	b29b      	uxth	r3, r3
 8017512:	fb11 f303 	smulbb	r3, r1, r3
 8017516:	b29b      	uxth	r3, r3
 8017518:	4413      	add	r3, r2
 801751a:	b29b      	uxth	r3, r3
 801751c:	2200      	movs	r2, #0
 801751e:	9202      	str	r2, [sp, #8]
 8017520:	2201      	movs	r2, #1
 8017522:	9201      	str	r2, [sp, #4]
 8017524:	2200      	movs	r2, #0
 8017526:	9200      	str	r2, [sp, #0]
 8017528:	462a      	mov	r2, r5
 801752a:	4621      	mov	r1, r4
 801752c:	f7f7 fa66 	bl	800e9fc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 8017530:	4b6b      	ldr	r3, [pc, #428]	; (80176e0 <drawMenu+0x264>)
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	461a      	mov	r2, r3
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	4293      	cmp	r3, r2
 801753a:	d12c      	bne.n	8017596 <drawMenu+0x11a>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 801753c:	7cfb      	ldrb	r3, [r7, #19]
 801753e:	b29c      	uxth	r4, r3
 8017540:	7dbb      	ldrb	r3, [r7, #22]
 8017542:	b29a      	uxth	r2, r3
 8017544:	7d7b      	ldrb	r3, [r7, #21]
 8017546:	b299      	uxth	r1, r3
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	b29b      	uxth	r3, r3
 801754c:	fb11 f303 	smulbb	r3, r1, r3
 8017550:	b29b      	uxth	r3, r3
 8017552:	4413      	add	r3, r2
 8017554:	b29b      	uxth	r3, r3
 8017556:	3301      	adds	r3, #1
 8017558:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 801755a:	4b61      	ldr	r3, [pc, #388]	; (80176e0 <drawMenu+0x264>)
 801755c:	785b      	ldrb	r3, [r3, #1]
 801755e:	4619      	mov	r1, r3
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	330a      	adds	r3, #10
 8017564:	011a      	lsls	r2, r3, #4
 8017566:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 801756a:	fb03 f301 	mul.w	r3, r3, r1
 801756e:	4413      	add	r3, r2
 8017570:	4a5c      	ldr	r2, [pc, #368]	; (80176e4 <drawMenu+0x268>)
 8017572:	4413      	add	r3, r2
 8017574:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 8017576:	495c      	ldr	r1, [pc, #368]	; (80176e8 <drawMenu+0x26c>)
 8017578:	ab02      	add	r3, sp, #8
 801757a:	c903      	ldmia	r1, {r0, r1}
 801757c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017580:	2310      	movs	r3, #16
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017588:	9300      	str	r3, [sp, #0]
 801758a:	2300      	movs	r3, #0
 801758c:	4629      	mov	r1, r5
 801758e:	4620      	mov	r0, r4
 8017590:	f7ff fd1e 	bl	8016fd0 <centeredString>
 8017594:	e02b      	b.n	80175ee <drawMenu+0x172>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 8017596:	7cfb      	ldrb	r3, [r7, #19]
 8017598:	b29c      	uxth	r4, r3
 801759a:	7dbb      	ldrb	r3, [r7, #22]
 801759c:	b29a      	uxth	r2, r3
 801759e:	7d7b      	ldrb	r3, [r7, #21]
 80175a0:	b299      	uxth	r1, r3
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	fb11 f303 	smulbb	r3, r1, r3
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	4413      	add	r3, r2
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	3301      	adds	r3, #1
 80175b2:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 80175b4:	4b4a      	ldr	r3, [pc, #296]	; (80176e0 <drawMenu+0x264>)
 80175b6:	785b      	ldrb	r3, [r3, #1]
 80175b8:	4619      	mov	r1, r3
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	330a      	adds	r3, #10
 80175be:	011a      	lsls	r2, r3, #4
 80175c0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80175c4:	fb03 f301 	mul.w	r3, r3, r1
 80175c8:	4413      	add	r3, r2
 80175ca:	4a46      	ldr	r2, [pc, #280]	; (80176e4 <drawMenu+0x268>)
 80175cc:	4413      	add	r3, r2
 80175ce:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 80175d0:	4945      	ldr	r1, [pc, #276]	; (80176e8 <drawMenu+0x26c>)
 80175d2:	ab02      	add	r3, sp, #8
 80175d4:	c903      	ldmia	r1, {r0, r1}
 80175d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80175da:	2310      	movs	r3, #16
 80175dc:	9301      	str	r3, [sp, #4]
 80175de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	2300      	movs	r3, #0
 80175e6:	4629      	mov	r1, r5
 80175e8:	4620      	mov	r0, r4
 80175ea:	f7ff fcf1 	bl	8016fd0 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	3301      	adds	r3, #1
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	4b3a      	ldr	r3, [pc, #232]	; (80176e0 <drawMenu+0x264>)
 80175f6:	785b      	ldrb	r3, [r3, #1]
 80175f8:	4619      	mov	r1, r3
 80175fa:	4a3a      	ldr	r2, [pc, #232]	; (80176e4 <drawMenu+0x268>)
 80175fc:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8017600:	fb03 f301 	mul.w	r3, r3, r1
 8017604:	4413      	add	r3, r2
 8017606:	33a1      	adds	r3, #161	; 0xa1
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	461a      	mov	r2, r3
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	4293      	cmp	r3, r2
 8017610:	f6ff af65 	blt.w	80174de <drawMenu+0x62>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 8017614:	e0cb      	b.n	80177ae <drawMenu+0x332>
	else if (howToDraw == UP)
 8017616:	79bb      	ldrb	r3, [r7, #6]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d167      	bne.n	80176ec <drawMenu+0x270>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 801761c:	7cfb      	ldrb	r3, [r7, #19]
 801761e:	b29c      	uxth	r4, r3
 8017620:	7dbb      	ldrb	r3, [r7, #22]
 8017622:	b29a      	uxth	r2, r3
 8017624:	7d7b      	ldrb	r3, [r7, #21]
 8017626:	b299      	uxth	r1, r3
 8017628:	4b2d      	ldr	r3, [pc, #180]	; (80176e0 <drawMenu+0x264>)
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	3301      	adds	r3, #1
 801762e:	b29b      	uxth	r3, r3
 8017630:	fb11 f303 	smulbb	r3, r1, r3
 8017634:	b29b      	uxth	r3, r3
 8017636:	4413      	add	r3, r2
 8017638:	b29b      	uxth	r3, r3
 801763a:	3301      	adds	r3, #1
 801763c:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 801763e:	4b28      	ldr	r3, [pc, #160]	; (80176e0 <drawMenu+0x264>)
 8017640:	785b      	ldrb	r3, [r3, #1]
 8017642:	4619      	mov	r1, r3
 8017644:	4b26      	ldr	r3, [pc, #152]	; (80176e0 <drawMenu+0x264>)
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	3301      	adds	r3, #1
 801764a:	330a      	adds	r3, #10
 801764c:	011a      	lsls	r2, r3, #4
 801764e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8017652:	fb03 f301 	mul.w	r3, r3, r1
 8017656:	4413      	add	r3, r2
 8017658:	4a22      	ldr	r2, [pc, #136]	; (80176e4 <drawMenu+0x268>)
 801765a:	4413      	add	r3, r2
 801765c:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 801765e:	4922      	ldr	r1, [pc, #136]	; (80176e8 <drawMenu+0x26c>)
 8017660:	ab02      	add	r3, sp, #8
 8017662:	c903      	ldmia	r1, {r0, r1}
 8017664:	e883 0003 	stmia.w	r3, {r0, r1}
 8017668:	2310      	movs	r3, #16
 801766a:	9301      	str	r3, [sp, #4]
 801766c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017670:	9300      	str	r3, [sp, #0]
 8017672:	2300      	movs	r3, #0
 8017674:	4629      	mov	r1, r5
 8017676:	4620      	mov	r0, r4
 8017678:	f7ff fcaa 	bl	8016fd0 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 801767c:	7cfb      	ldrb	r3, [r7, #19]
 801767e:	b29c      	uxth	r4, r3
 8017680:	7dbb      	ldrb	r3, [r7, #22]
 8017682:	b29a      	uxth	r2, r3
 8017684:	7d7b      	ldrb	r3, [r7, #21]
 8017686:	b299      	uxth	r1, r3
 8017688:	4b15      	ldr	r3, [pc, #84]	; (80176e0 <drawMenu+0x264>)
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	b29b      	uxth	r3, r3
 801768e:	fb11 f303 	smulbb	r3, r1, r3
 8017692:	b29b      	uxth	r3, r3
 8017694:	4413      	add	r3, r2
 8017696:	b29b      	uxth	r3, r3
 8017698:	3301      	adds	r3, #1
 801769a:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 801769c:	4b10      	ldr	r3, [pc, #64]	; (80176e0 <drawMenu+0x264>)
 801769e:	785b      	ldrb	r3, [r3, #1]
 80176a0:	4619      	mov	r1, r3
 80176a2:	4b0f      	ldr	r3, [pc, #60]	; (80176e0 <drawMenu+0x264>)
 80176a4:	781b      	ldrb	r3, [r3, #0]
 80176a6:	330a      	adds	r3, #10
 80176a8:	011a      	lsls	r2, r3, #4
 80176aa:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80176ae:	fb03 f301 	mul.w	r3, r3, r1
 80176b2:	4413      	add	r3, r2
 80176b4:	4a0b      	ldr	r2, [pc, #44]	; (80176e4 <drawMenu+0x268>)
 80176b6:	4413      	add	r3, r2
 80176b8:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 80176ba:	490b      	ldr	r1, [pc, #44]	; (80176e8 <drawMenu+0x26c>)
 80176bc:	ab02      	add	r3, sp, #8
 80176be:	c903      	ldmia	r1, {r0, r1}
 80176c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80176c4:	2310      	movs	r3, #16
 80176c6:	9301      	str	r3, [sp, #4]
 80176c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80176cc:	9300      	str	r3, [sp, #0]
 80176ce:	2300      	movs	r3, #0
 80176d0:	4629      	mov	r1, r5
 80176d2:	4620      	mov	r0, r4
 80176d4:	f7ff fc7c 	bl	8016fd0 <centeredString>
}
 80176d8:	e069      	b.n	80177ae <drawMenu+0x332>
 80176da:	bf00      	nop
 80176dc:	2400008c 	.word	0x2400008c
 80176e0:	2400b09c 	.word	0x2400b09c
 80176e4:	2400f698 	.word	0x2400f698
 80176e8:	24000030 	.word	0x24000030
	else if (howToDraw == DOWN)
 80176ec:	79bb      	ldrb	r3, [r7, #6]
 80176ee:	2b01      	cmp	r3, #1
 80176f0:	d15d      	bne.n	80177ae <drawMenu+0x332>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 80176f2:	7cfb      	ldrb	r3, [r7, #19]
 80176f4:	b29c      	uxth	r4, r3
 80176f6:	7dbb      	ldrb	r3, [r7, #22]
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	7d7b      	ldrb	r3, [r7, #21]
 80176fc:	b299      	uxth	r1, r3
 80176fe:	4b2e      	ldr	r3, [pc, #184]	; (80177b8 <drawMenu+0x33c>)
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	3b01      	subs	r3, #1
 8017704:	b29b      	uxth	r3, r3
 8017706:	fb11 f303 	smulbb	r3, r1, r3
 801770a:	b29b      	uxth	r3, r3
 801770c:	4413      	add	r3, r2
 801770e:	b29b      	uxth	r3, r3
 8017710:	3301      	adds	r3, #1
 8017712:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 8017714:	4b28      	ldr	r3, [pc, #160]	; (80177b8 <drawMenu+0x33c>)
 8017716:	785b      	ldrb	r3, [r3, #1]
 8017718:	4619      	mov	r1, r3
 801771a:	4b27      	ldr	r3, [pc, #156]	; (80177b8 <drawMenu+0x33c>)
 801771c:	781b      	ldrb	r3, [r3, #0]
 801771e:	3b01      	subs	r3, #1
 8017720:	330a      	adds	r3, #10
 8017722:	011a      	lsls	r2, r3, #4
 8017724:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8017728:	fb03 f301 	mul.w	r3, r3, r1
 801772c:	4413      	add	r3, r2
 801772e:	4a23      	ldr	r2, [pc, #140]	; (80177bc <drawMenu+0x340>)
 8017730:	4413      	add	r3, r2
 8017732:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 8017734:	4922      	ldr	r1, [pc, #136]	; (80177c0 <drawMenu+0x344>)
 8017736:	ab02      	add	r3, sp, #8
 8017738:	c903      	ldmia	r1, {r0, r1}
 801773a:	e883 0003 	stmia.w	r3, {r0, r1}
 801773e:	2310      	movs	r3, #16
 8017740:	9301      	str	r3, [sp, #4]
 8017742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017746:	9300      	str	r3, [sp, #0]
 8017748:	2300      	movs	r3, #0
 801774a:	4629      	mov	r1, r5
 801774c:	4620      	mov	r0, r4
 801774e:	f7ff fc3f 	bl	8016fd0 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8017752:	7cfb      	ldrb	r3, [r7, #19]
 8017754:	b29c      	uxth	r4, r3
 8017756:	7dbb      	ldrb	r3, [r7, #22]
 8017758:	b29a      	uxth	r2, r3
 801775a:	7d7b      	ldrb	r3, [r7, #21]
 801775c:	b299      	uxth	r1, r3
 801775e:	4b16      	ldr	r3, [pc, #88]	; (80177b8 <drawMenu+0x33c>)
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	b29b      	uxth	r3, r3
 8017764:	fb11 f303 	smulbb	r3, r1, r3
 8017768:	b29b      	uxth	r3, r3
 801776a:	4413      	add	r3, r2
 801776c:	b29b      	uxth	r3, r3
 801776e:	3301      	adds	r3, #1
 8017770:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 8017772:	4b11      	ldr	r3, [pc, #68]	; (80177b8 <drawMenu+0x33c>)
 8017774:	785b      	ldrb	r3, [r3, #1]
 8017776:	4619      	mov	r1, r3
 8017778:	4b0f      	ldr	r3, [pc, #60]	; (80177b8 <drawMenu+0x33c>)
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	330a      	adds	r3, #10
 801777e:	011a      	lsls	r2, r3, #4
 8017780:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8017784:	fb03 f301 	mul.w	r3, r3, r1
 8017788:	4413      	add	r3, r2
 801778a:	4a0c      	ldr	r2, [pc, #48]	; (80177bc <drawMenu+0x340>)
 801778c:	4413      	add	r3, r2
 801778e:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8017790:	490b      	ldr	r1, [pc, #44]	; (80177c0 <drawMenu+0x344>)
 8017792:	ab02      	add	r3, sp, #8
 8017794:	c903      	ldmia	r1, {r0, r1}
 8017796:	e883 0003 	stmia.w	r3, {r0, r1}
 801779a:	2310      	movs	r3, #16
 801779c:	9301      	str	r3, [sp, #4]
 801779e:	f24c 6318 	movw	r3, #50712	; 0xc618
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	2300      	movs	r3, #0
 80177a6:	4629      	mov	r1, r5
 80177a8:	4620      	mov	r0, r4
 80177aa:	f7ff fc11 	bl	8016fd0 <centeredString>
}
 80177ae:	bf00      	nop
 80177b0:	3718      	adds	r7, #24
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bdb0      	pop	{r4, r5, r7, pc}
 80177b6:	bf00      	nop
 80177b8:	2400b09c 	.word	0x2400b09c
 80177bc:	2400f698 	.word	0x2400f698
 80177c0:	24000030 	.word	0x24000030

080177c4 <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	4603      	mov	r3, r0
 80177cc:	460a      	mov	r2, r1
 80177ce:	71fb      	strb	r3, [r7, #7]
 80177d0:	4613      	mov	r3, r2
 80177d2:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 80177d4:	79fb      	ldrb	r3, [r7, #7]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d106      	bne.n	80177e8 <drawItem+0x24>
 80177da:	4b53      	ldr	r3, [pc, #332]	; (8017928 <drawItem+0x164>)
 80177dc:	781b      	ldrb	r3, [r3, #0]
 80177de:	f083 0301 	eor.w	r3, r3, #1
 80177e2:	b2db      	uxtb	r3, r3
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d006      	beq.n	80177f6 <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 80177e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80177ec:	f7f6 ff7c 	bl	800e6e8 <Paint_Clear>
		createEmptyFrame(true);
 80177f0:	2001      	movs	r0, #1
 80177f2:	f000 fc81 	bl	80180f8 <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 80177f6:	4b4d      	ldr	r3, [pc, #308]	; (801792c <drawItem+0x168>)
 80177f8:	7b1b      	ldrb	r3, [r3, #12]
 80177fa:	3b01      	subs	r3, #1
 80177fc:	4a4b      	ldr	r2, [pc, #300]	; (801792c <drawItem+0x168>)
 80177fe:	4413      	add	r3, r2
 8017800:	789b      	ldrb	r3, [r3, #2]
 8017802:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 8017804:	4b49      	ldr	r3, [pc, #292]	; (801792c <drawItem+0x168>)
 8017806:	7b1b      	ldrb	r3, [r3, #12]
 8017808:	3b01      	subs	r3, #1
 801780a:	4a48      	ldr	r2, [pc, #288]	; (801792c <drawItem+0x168>)
 801780c:	4413      	add	r3, r2
 801780e:	79db      	ldrb	r3, [r3, #7]
 8017810:	4619      	mov	r1, r3
 8017812:	4a47      	ldr	r2, [pc, #284]	; (8017930 <drawItem+0x16c>)
 8017814:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8017818:	fb03 f300 	mul.w	r3, r3, r0
 801781c:	4413      	add	r3, r2
 801781e:	440b      	add	r3, r1
 8017820:	3380      	adds	r3, #128	; 0x80
 8017822:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8017824:	2b02      	cmp	r3, #2
 8017826:	d130      	bne.n	801788a <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 8017828:	4b3f      	ldr	r3, [pc, #252]	; (8017928 <drawItem+0x164>)
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	f083 0301 	eor.w	r3, r3, #1
 8017830:	b2db      	uxtb	r3, r3
 8017832:	2b00      	cmp	r3, #0
 8017834:	d022      	beq.n	801787c <drawItem+0xb8>
		{
			multiplierIndex = 0;
 8017836:	4b3f      	ldr	r3, [pc, #252]	; (8017934 <drawItem+0x170>)
 8017838:	2200      	movs	r2, #0
 801783a:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 801783c:	4b3b      	ldr	r3, [pc, #236]	; (801792c <drawItem+0x168>)
 801783e:	7b1b      	ldrb	r3, [r3, #12]
 8017840:	3b01      	subs	r3, #1
 8017842:	4a3a      	ldr	r2, [pc, #232]	; (801792c <drawItem+0x168>)
 8017844:	4413      	add	r3, r2
 8017846:	789b      	ldrb	r3, [r3, #2]
 8017848:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 801784a:	4b38      	ldr	r3, [pc, #224]	; (801792c <drawItem+0x168>)
 801784c:	7b1b      	ldrb	r3, [r3, #12]
 801784e:	3b01      	subs	r3, #1
 8017850:	4a36      	ldr	r2, [pc, #216]	; (801792c <drawItem+0x168>)
 8017852:	4413      	add	r3, r2
 8017854:	79db      	ldrb	r3, [r3, #7]
 8017856:	4619      	mov	r1, r3
 8017858:	4a35      	ldr	r2, [pc, #212]	; (8017930 <drawItem+0x16c>)
 801785a:	23a9      	movs	r3, #169	; 0xa9
 801785c:	fb03 f300 	mul.w	r3, r3, r0
 8017860:	440b      	add	r3, r1
 8017862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8017866:	f44f 7204 	mov.w	r2, #528	; 0x210
 801786a:	4619      	mov	r1, r3
 801786c:	4832      	ldr	r0, [pc, #200]	; (8017938 <drawItem+0x174>)
 801786e:	f003 fdb3 	bl	801b3d8 <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 8017872:	4b31      	ldr	r3, [pc, #196]	; (8017938 <drawItem+0x174>)
 8017874:	7b9b      	ldrb	r3, [r3, #14]
 8017876:	461a      	mov	r2, r3
 8017878:	4b30      	ldr	r3, [pc, #192]	; (801793c <drawItem+0x178>)
 801787a:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 801787c:	4b2a      	ldr	r3, [pc, #168]	; (8017928 <drawItem+0x164>)
 801787e:	2201      	movs	r2, #1
 8017880:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 8017882:	79bb      	ldrb	r3, [r7, #6]
 8017884:	4618      	mov	r0, r3
 8017886:	f000 fc9b 	bl	80181c0 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 801788a:	4b28      	ldr	r3, [pc, #160]	; (801792c <drawItem+0x168>)
 801788c:	7b1b      	ldrb	r3, [r3, #12]
 801788e:	3b01      	subs	r3, #1
 8017890:	4a26      	ldr	r2, [pc, #152]	; (801792c <drawItem+0x168>)
 8017892:	4413      	add	r3, r2
 8017894:	789b      	ldrb	r3, [r3, #2]
 8017896:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 8017898:	4b24      	ldr	r3, [pc, #144]	; (801792c <drawItem+0x168>)
 801789a:	7b1b      	ldrb	r3, [r3, #12]
 801789c:	3b01      	subs	r3, #1
 801789e:	4a23      	ldr	r2, [pc, #140]	; (801792c <drawItem+0x168>)
 80178a0:	4413      	add	r3, r2
 80178a2:	79db      	ldrb	r3, [r3, #7]
 80178a4:	4619      	mov	r1, r3
 80178a6:	4a22      	ldr	r2, [pc, #136]	; (8017930 <drawItem+0x16c>)
 80178a8:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80178ac:	fb03 f300 	mul.w	r3, r3, r0
 80178b0:	4413      	add	r3, r2
 80178b2:	440b      	add	r3, r1
 80178b4:	3380      	adds	r3, #128	; 0x80
 80178b6:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 80178b8:	2b08      	cmp	r3, #8
 80178ba:	d131      	bne.n	8017920 <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 80178bc:	4b1a      	ldr	r3, [pc, #104]	; (8017928 <drawItem+0x164>)
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	f083 0301 	eor.w	r3, r3, #1
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d023      	beq.n	8017912 <drawItem+0x14e>
		{
			multiplierIndex = 0;
 80178ca:	4b1a      	ldr	r3, [pc, #104]	; (8017934 <drawItem+0x170>)
 80178cc:	2200      	movs	r2, #0
 80178ce:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 80178d0:	4b16      	ldr	r3, [pc, #88]	; (801792c <drawItem+0x168>)
 80178d2:	7b1b      	ldrb	r3, [r3, #12]
 80178d4:	3b01      	subs	r3, #1
 80178d6:	4a15      	ldr	r2, [pc, #84]	; (801792c <drawItem+0x168>)
 80178d8:	4413      	add	r3, r2
 80178da:	789b      	ldrb	r3, [r3, #2]
 80178dc:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 80178de:	4b13      	ldr	r3, [pc, #76]	; (801792c <drawItem+0x168>)
 80178e0:	7b1b      	ldrb	r3, [r3, #12]
 80178e2:	3b01      	subs	r3, #1
 80178e4:	4a11      	ldr	r2, [pc, #68]	; (801792c <drawItem+0x168>)
 80178e6:	4413      	add	r3, r2
 80178e8:	79db      	ldrb	r3, [r3, #7]
 80178ea:	4619      	mov	r1, r3
 80178ec:	4a10      	ldr	r2, [pc, #64]	; (8017930 <drawItem+0x16c>)
 80178ee:	23a9      	movs	r3, #169	; 0xa9
 80178f0:	fb03 f300 	mul.w	r3, r3, r0
 80178f4:	440b      	add	r3, r1
 80178f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 80178fa:	f240 420c 	movw	r2, #1036	; 0x40c
 80178fe:	4619      	mov	r1, r3
 8017900:	480f      	ldr	r0, [pc, #60]	; (8017940 <drawItem+0x17c>)
 8017902:	f003 fd69 	bl	801b3d8 <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 8017906:	4b0e      	ldr	r3, [pc, #56]	; (8017940 <drawItem+0x17c>)
 8017908:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 801790c:	461a      	mov	r2, r3
 801790e:	4b0b      	ldr	r3, [pc, #44]	; (801793c <drawItem+0x178>)
 8017910:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 8017912:	4b05      	ldr	r3, [pc, #20]	; (8017928 <drawItem+0x164>)
 8017914:	2201      	movs	r2, #1
 8017916:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 8017918:	79bb      	ldrb	r3, [r7, #6]
 801791a:	4618      	mov	r0, r3
 801791c:	f001 ff80 	bl	8019820 <updateStringItem>
	}
}
 8017920:	bf00      	nop
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	2400ae74 	.word	0x2400ae74
 801792c:	2400b09c 	.word	0x2400b09c
 8017930:	2400f698 	.word	0x2400f698
 8017934:	2400a110 	.word	0x2400a110
 8017938:	2400c294 	.word	0x2400c294
 801793c:	2400af1c 	.word	0x2400af1c
 8017940:	2400c4a8 	.word	0x2400c4a8

08017944 <drawPopup>:

void drawPopup(void)
{
 8017944:	b5b0      	push	{r4, r5, r7, lr}
 8017946:	b088      	sub	sp, #32
 8017948:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 801794a:	2300      	movs	r3, #0
 801794c:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 801794e:	2300      	movs	r3, #0
 8017950:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 8017952:	2300      	movs	r3, #0
 8017954:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 8017956:	2300      	movs	r3, #0
 8017958:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 801795a:	2300      	movs	r3, #0
 801795c:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 801795e:	2300      	movs	r3, #0
 8017960:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 8017962:	2300      	movs	r3, #0
 8017964:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 8017966:	4ba3      	ldr	r3, [pc, #652]	; (8017bf4 <drawPopup+0x2b0>)
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d00d      	beq.n	801798a <drawPopup+0x46>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 801796e:	2302      	movs	r3, #2
 8017970:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 8017972:	230c      	movs	r3, #12
 8017974:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 8017976:	230e      	movs	r3, #14
 8017978:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 801797a:	237c      	movs	r3, #124	; 0x7c
 801797c:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 801797e:	2340      	movs	r3, #64	; 0x40
 8017980:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 8017982:	2364      	movs	r3, #100	; 0x64
 8017984:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 8017986:	2356      	movs	r3, #86	; 0x56
 8017988:	727b      	strb	r3, [r7, #9]
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
//		PopupRectangleHeight = HorizontalPopupRectangleHeight;
//		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
	}

	isPopupDisplayed = true;
 801798a:	4b9b      	ldr	r3, [pc, #620]	; (8017bf8 <drawPopup+0x2b4>)
 801798c:	2201      	movs	r2, #1
 801798e:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 8017990:	4b9a      	ldr	r3, [pc, #616]	; (8017bfc <drawPopup+0x2b8>)
 8017992:	2200      	movs	r2, #0
 8017994:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 8017996:	4b9a      	ldr	r3, [pc, #616]	; (8017c00 <drawPopup+0x2bc>)
 8017998:	2200      	movs	r2, #0
 801799a:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 801799c:	4b99      	ldr	r3, [pc, #612]	; (8017c04 <drawPopup+0x2c0>)
 801799e:	781b      	ldrb	r3, [r3, #0]
 80179a0:	2b02      	cmp	r3, #2
 80179a2:	f040 8097 	bne.w	8017ad4 <drawPopup+0x190>
	{
		Paint_Clear(WHITE);
 80179a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80179aa:	f7f6 fe9d 	bl	800e6e8 <Paint_Clear>
		createEmptyFrame(true);
 80179ae:	2001      	movs	r0, #1
 80179b0:	f000 fba2 	bl	80180f8 <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 80179b4:	7bfb      	ldrb	r3, [r7, #15]
 80179b6:	b298      	uxth	r0, r3
 80179b8:	7bbb      	ldrb	r3, [r7, #14]
 80179ba:	b299      	uxth	r1, r3
 80179bc:	7bfb      	ldrb	r3, [r7, #15]
 80179be:	b29a      	uxth	r2, r3
 80179c0:	7b3b      	ldrb	r3, [r7, #12]
 80179c2:	b29b      	uxth	r3, r3
 80179c4:	4413      	add	r3, r2
 80179c6:	b29c      	uxth	r4, r3
 80179c8:	7bbb      	ldrb	r3, [r7, #14]
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	7abb      	ldrb	r3, [r7, #10]
 80179ce:	b29b      	uxth	r3, r3
 80179d0:	4413      	add	r3, r2
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	2200      	movs	r2, #0
 80179d6:	9202      	str	r2, [sp, #8]
 80179d8:	2201      	movs	r2, #1
 80179da:	9201      	str	r2, [sp, #4]
 80179dc:	2200      	movs	r2, #0
 80179de:	9200      	str	r2, [sp, #0]
 80179e0:	4622      	mov	r2, r4
 80179e2:	f7f7 f80b 	bl	800e9fc <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 80179e6:	4b88      	ldr	r3, [pc, #544]	; (8017c08 <drawPopup+0x2c4>)
 80179e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d020      	beq.n	8017a32 <drawPopup+0xee>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 80179f0:	7bfb      	ldrb	r3, [r7, #15]
 80179f2:	b298      	uxth	r0, r3
 80179f4:	7bbb      	ldrb	r3, [r7, #14]
 80179f6:	b29a      	uxth	r2, r3
 80179f8:	7a7b      	ldrb	r3, [r7, #9]
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	4413      	add	r3, r2
 80179fe:	b299      	uxth	r1, r3
 8017a00:	7bfb      	ldrb	r3, [r7, #15]
 8017a02:	b29a      	uxth	r2, r3
 8017a04:	7b3b      	ldrb	r3, [r7, #12]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	4413      	add	r3, r2
 8017a0a:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 8017a0c:	7bbb      	ldrb	r3, [r7, #14]
 8017a0e:	b29a      	uxth	r2, r3
 8017a10:	7a7b      	ldrb	r3, [r7, #9]
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	4413      	add	r3, r2
 8017a16:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 8017a18:	7b7b      	ldrb	r3, [r7, #13]
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	4413      	add	r3, r2
 8017a1e:	b29b      	uxth	r3, r3
 8017a20:	2200      	movs	r2, #0
 8017a22:	9202      	str	r2, [sp, #8]
 8017a24:	2201      	movs	r2, #1
 8017a26:	9201      	str	r2, [sp, #4]
 8017a28:	2200      	movs	r2, #0
 8017a2a:	9200      	str	r2, [sp, #0]
 8017a2c:	4622      	mov	r2, r4
 8017a2e:	f7f6 ffe5 	bl	800e9fc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8017a32:	7bfb      	ldrb	r3, [r7, #15]
 8017a34:	b298      	uxth	r0, r3
 8017a36:	7bbb      	ldrb	r3, [r7, #14]
 8017a38:	b29a      	uxth	r2, r3
 8017a3a:	7abb      	ldrb	r3, [r7, #10]
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	4413      	add	r3, r2
 8017a40:	b299      	uxth	r1, r3
 8017a42:	7bfb      	ldrb	r3, [r7, #15]
 8017a44:	b29a      	uxth	r2, r3
 8017a46:	7b3b      	ldrb	r3, [r7, #12]
 8017a48:	b29b      	uxth	r3, r3
 8017a4a:	4413      	add	r3, r2
 8017a4c:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 8017a4e:	7bbb      	ldrb	r3, [r7, #14]
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	7abb      	ldrb	r3, [r7, #10]
 8017a54:	b29b      	uxth	r3, r3
 8017a56:	4413      	add	r3, r2
 8017a58:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8017a5a:	7b7b      	ldrb	r3, [r7, #13]
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	4413      	add	r3, r2
 8017a60:	b29b      	uxth	r3, r3
 8017a62:	2200      	movs	r2, #0
 8017a64:	9202      	str	r2, [sp, #8]
 8017a66:	2201      	movs	r2, #1
 8017a68:	9201      	str	r2, [sp, #4]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	9200      	str	r2, [sp, #0]
 8017a6e:	4622      	mov	r2, r4
 8017a70:	f7f6 ffc4 	bl	800e9fc <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 8017a74:	2300      	movs	r3, #0
 8017a76:	607b      	str	r3, [r7, #4]
 8017a78:	e026      	b.n	8017ac8 <drawPopup+0x184>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8017a7a:	7afb      	ldrb	r3, [r7, #11]
 8017a7c:	b29c      	uxth	r4, r3
 8017a7e:	7bbb      	ldrb	r3, [r7, #14]
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	7b7b      	ldrb	r3, [r7, #13]
 8017a84:	b299      	uxth	r1, r3
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	fb11 f303 	smulbb	r3, r1, r3
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	4413      	add	r3, r2
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	3301      	adds	r3, #1
 8017a98:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	011b      	lsls	r3, r3, #4
 8017a9e:	4a5a      	ldr	r2, [pc, #360]	; (8017c08 <drawPopup+0x2c4>)
 8017aa0:	4413      	add	r3, r2
 8017aa2:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8017aa4:	4959      	ldr	r1, [pc, #356]	; (8017c0c <drawPopup+0x2c8>)
 8017aa6:	ab02      	add	r3, sp, #8
 8017aa8:	c903      	ldmia	r1, {r0, r1}
 8017aaa:	e883 0003 	stmia.w	r3, {r0, r1}
 8017aae:	2310      	movs	r3, #16
 8017ab0:	9301      	str	r3, [sp, #4]
 8017ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ab6:	9300      	str	r3, [sp, #0]
 8017ab8:	2300      	movs	r3, #0
 8017aba:	4629      	mov	r1, r5
 8017abc:	4620      	mov	r0, r4
 8017abe:	f7ff fa87 	bl	8016fd0 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	3301      	adds	r3, #1
 8017ac6:	607b      	str	r3, [r7, #4]
 8017ac8:	4b4f      	ldr	r3, [pc, #316]	; (8017c08 <drawPopup+0x2c4>)
 8017aca:	785b      	ldrb	r3, [r3, #1]
 8017acc:	3b02      	subs	r3, #2
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	dbd2      	blt.n	8017a7a <drawPopup+0x136>
		}
	}

	if (popupToShow.isQuestion)
 8017ad4:	4b4c      	ldr	r3, [pc, #304]	; (8017c08 <drawPopup+0x2c4>)
 8017ad6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	f000 8098 	beq.w	8017c10 <drawPopup+0x2cc>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 8017ae0:	4b48      	ldr	r3, [pc, #288]	; (8017c04 <drawPopup+0x2c0>)
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	2b02      	cmp	r3, #2
 8017ae6:	d003      	beq.n	8017af0 <drawPopup+0x1ac>
 8017ae8:	4b46      	ldr	r3, [pc, #280]	; (8017c04 <drawPopup+0x2c0>)
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d140      	bne.n	8017b72 <drawPopup+0x22e>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8017af0:	7afb      	ldrb	r3, [r7, #11]
 8017af2:	b29c      	uxth	r4, r3
 8017af4:	7bbb      	ldrb	r3, [r7, #14]
 8017af6:	b29a      	uxth	r2, r3
 8017af8:	7a7b      	ldrb	r3, [r7, #9]
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	4413      	add	r3, r2
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	3301      	adds	r3, #1
 8017b02:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 8017b04:	4b40      	ldr	r3, [pc, #256]	; (8017c08 <drawPopup+0x2c4>)
 8017b06:	785b      	ldrb	r3, [r3, #1]
 8017b08:	3b02      	subs	r3, #2
 8017b0a:	011b      	lsls	r3, r3, #4
 8017b0c:	4a3e      	ldr	r2, [pc, #248]	; (8017c08 <drawPopup+0x2c4>)
 8017b0e:	4413      	add	r3, r2
 8017b10:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8017b12:	493e      	ldr	r1, [pc, #248]	; (8017c0c <drawPopup+0x2c8>)
 8017b14:	ab02      	add	r3, sp, #8
 8017b16:	c903      	ldmia	r1, {r0, r1}
 8017b18:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b1c:	2310      	movs	r3, #16
 8017b1e:	9301      	str	r3, [sp, #4]
 8017b20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017b24:	9300      	str	r3, [sp, #0]
 8017b26:	2300      	movs	r3, #0
 8017b28:	4629      	mov	r1, r5
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f7ff fa50 	bl	8016fd0 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017b30:	7afb      	ldrb	r3, [r7, #11]
 8017b32:	b29c      	uxth	r4, r3
 8017b34:	7bbb      	ldrb	r3, [r7, #14]
 8017b36:	b29a      	uxth	r2, r3
 8017b38:	7abb      	ldrb	r3, [r7, #10]
 8017b3a:	b29b      	uxth	r3, r3
 8017b3c:	4413      	add	r3, r2
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	3301      	adds	r3, #1
 8017b42:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 8017b44:	4b30      	ldr	r3, [pc, #192]	; (8017c08 <drawPopup+0x2c4>)
 8017b46:	785b      	ldrb	r3, [r3, #1]
 8017b48:	3b01      	subs	r3, #1
 8017b4a:	011b      	lsls	r3, r3, #4
 8017b4c:	4a2e      	ldr	r2, [pc, #184]	; (8017c08 <drawPopup+0x2c4>)
 8017b4e:	4413      	add	r3, r2
 8017b50:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017b52:	492e      	ldr	r1, [pc, #184]	; (8017c0c <drawPopup+0x2c8>)
 8017b54:	ab02      	add	r3, sp, #8
 8017b56:	c903      	ldmia	r1, {r0, r1}
 8017b58:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b5c:	2310      	movs	r3, #16
 8017b5e:	9301      	str	r3, [sp, #4]
 8017b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b64:	9300      	str	r3, [sp, #0]
 8017b66:	2300      	movs	r3, #0
 8017b68:	4629      	mov	r1, r5
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7ff fa30 	bl	8016fd0 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 8017b70:	e06e      	b.n	8017c50 <drawPopup+0x30c>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8017b72:	7afb      	ldrb	r3, [r7, #11]
 8017b74:	b29c      	uxth	r4, r3
 8017b76:	7bbb      	ldrb	r3, [r7, #14]
 8017b78:	b29a      	uxth	r2, r3
 8017b7a:	7a7b      	ldrb	r3, [r7, #9]
 8017b7c:	b29b      	uxth	r3, r3
 8017b7e:	4413      	add	r3, r2
 8017b80:	b29b      	uxth	r3, r3
 8017b82:	3301      	adds	r3, #1
 8017b84:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 8017b86:	4b20      	ldr	r3, [pc, #128]	; (8017c08 <drawPopup+0x2c4>)
 8017b88:	785b      	ldrb	r3, [r3, #1]
 8017b8a:	3b02      	subs	r3, #2
 8017b8c:	011b      	lsls	r3, r3, #4
 8017b8e:	4a1e      	ldr	r2, [pc, #120]	; (8017c08 <drawPopup+0x2c4>)
 8017b90:	4413      	add	r3, r2
 8017b92:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8017b94:	491d      	ldr	r1, [pc, #116]	; (8017c0c <drawPopup+0x2c8>)
 8017b96:	ab02      	add	r3, sp, #8
 8017b98:	c903      	ldmia	r1, {r0, r1}
 8017b9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b9e:	2310      	movs	r3, #16
 8017ba0:	9301      	str	r3, [sp, #4]
 8017ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ba6:	9300      	str	r3, [sp, #0]
 8017ba8:	2300      	movs	r3, #0
 8017baa:	4629      	mov	r1, r5
 8017bac:	4620      	mov	r0, r4
 8017bae:	f7ff fa0f 	bl	8016fd0 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017bb2:	7afb      	ldrb	r3, [r7, #11]
 8017bb4:	b29c      	uxth	r4, r3
 8017bb6:	7bbb      	ldrb	r3, [r7, #14]
 8017bb8:	b29a      	uxth	r2, r3
 8017bba:	7abb      	ldrb	r3, [r7, #10]
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	4413      	add	r3, r2
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 8017bc6:	4b10      	ldr	r3, [pc, #64]	; (8017c08 <drawPopup+0x2c4>)
 8017bc8:	785b      	ldrb	r3, [r3, #1]
 8017bca:	3b01      	subs	r3, #1
 8017bcc:	011b      	lsls	r3, r3, #4
 8017bce:	4a0e      	ldr	r2, [pc, #56]	; (8017c08 <drawPopup+0x2c4>)
 8017bd0:	4413      	add	r3, r2
 8017bd2:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017bd4:	490d      	ldr	r1, [pc, #52]	; (8017c0c <drawPopup+0x2c8>)
 8017bd6:	ab02      	add	r3, sp, #8
 8017bd8:	c903      	ldmia	r1, {r0, r1}
 8017bda:	e883 0003 	stmia.w	r3, {r0, r1}
 8017bde:	2310      	movs	r3, #16
 8017be0:	9301      	str	r3, [sp, #4]
 8017be2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017be6:	9300      	str	r3, [sp, #0]
 8017be8:	2300      	movs	r3, #0
 8017bea:	4629      	mov	r1, r5
 8017bec:	4620      	mov	r0, r4
 8017bee:	f7ff f9ef 	bl	8016fd0 <centeredString>
}
 8017bf2:	e02d      	b.n	8017c50 <drawPopup+0x30c>
 8017bf4:	2400008c 	.word	0x2400008c
 8017bf8:	2400ae76 	.word	0x2400ae76
 8017bfc:	2400ae74 	.word	0x2400ae74
 8017c00:	2400ae71 	.word	0x2400ae71
 8017c04:	2400008f 	.word	0x2400008f
 8017c08:	2400cad8 	.word	0x2400cad8
 8017c0c:	24000030 	.word	0x24000030
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017c10:	7afb      	ldrb	r3, [r7, #11]
 8017c12:	b29c      	uxth	r4, r3
 8017c14:	7bbb      	ldrb	r3, [r7, #14]
 8017c16:	b29a      	uxth	r2, r3
 8017c18:	7abb      	ldrb	r3, [r7, #10]
 8017c1a:	b29b      	uxth	r3, r3
 8017c1c:	4413      	add	r3, r2
 8017c1e:	b29b      	uxth	r3, r3
 8017c20:	3301      	adds	r3, #1
 8017c22:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 8017c24:	4b0c      	ldr	r3, [pc, #48]	; (8017c58 <drawPopup+0x314>)
 8017c26:	785b      	ldrb	r3, [r3, #1]
 8017c28:	3b01      	subs	r3, #1
 8017c2a:	011b      	lsls	r3, r3, #4
 8017c2c:	4a0a      	ldr	r2, [pc, #40]	; (8017c58 <drawPopup+0x314>)
 8017c2e:	4413      	add	r3, r2
 8017c30:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017c32:	490a      	ldr	r1, [pc, #40]	; (8017c5c <drawPopup+0x318>)
 8017c34:	ab02      	add	r3, sp, #8
 8017c36:	c903      	ldmia	r1, {r0, r1}
 8017c38:	e883 0003 	stmia.w	r3, {r0, r1}
 8017c3c:	2310      	movs	r3, #16
 8017c3e:	9301      	str	r3, [sp, #4]
 8017c40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017c44:	9300      	str	r3, [sp, #0]
 8017c46:	2300      	movs	r3, #0
 8017c48:	4629      	mov	r1, r5
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	f7ff f9c0 	bl	8016fd0 <centeredString>
}
 8017c50:	bf00      	nop
 8017c52:	3710      	adds	r7, #16
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bdb0      	pop	{r4, r5, r7, pc}
 8017c58:	2400cad8 	.word	0x2400cad8
 8017c5c:	24000030 	.word	0x24000030

08017c60 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8017c68:	4b04      	ldr	r3, [pc, #16]	; (8017c7c <HAL_HSEM_FreeCallback+0x1c>)
 8017c6a:	2201      	movs	r2, #1
 8017c6c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8017c6e:	2002      	movs	r0, #2
 8017c70:	f7ef f9a4 	bl	8006fbc <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8017c74:	bf00      	nop
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	2400ae84 	.word	0x2400ae84

08017c80 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8017c86:	4b0b      	ldr	r3, [pc, #44]	; (8017cb4 <MAILBOX_Init+0x34>)
 8017c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017c8c:	4a09      	ldr	r2, [pc, #36]	; (8017cb4 <MAILBOX_Init+0x34>)
 8017c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8017c96:	4b07      	ldr	r3, [pc, #28]	; (8017cb4 <MAILBOX_Init+0x34>)
 8017c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017ca0:	607b      	str	r3, [r7, #4]
 8017ca2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8017ca4:	2002      	movs	r0, #2
 8017ca6:	f7ef f989 	bl	8006fbc <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8017caa:	2300      	movs	r3, #0
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3708      	adds	r7, #8
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	58024400 	.word	0x58024400

08017cb8 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8017cc0:	4b09      	ldr	r3, [pc, #36]	; (8017ce8 <MAILBOX_Poll+0x30>)
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d108      	bne.n	8017cda <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8017cc8:	2100      	movs	r1, #0
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7fd fa69 	bl	80151a2 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8017cd0:	4b05      	ldr	r3, [pc, #20]	; (8017ce8 <MAILBOX_Poll+0x30>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	601a      	str	r2, [r3, #0]
    return 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	e001      	b.n	8017cde <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8017cda:	f06f 030a 	mvn.w	r3, #10
}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	3708      	adds	r7, #8
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	bf00      	nop
 8017ce8:	2400ae84 	.word	0x2400ae84

08017cec <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8017cf6:	2000      	movs	r0, #0
 8017cf8:	f7ef f932 	bl	8006f60 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	2000      	movs	r0, #0
 8017d00:	f7ef f948 	bl	8006f94 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8017d04:	2300      	movs	r3, #0
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3708      	adds	r7, #8
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8017d0e:	b480      	push	{r7}
 8017d10:	b083      	sub	sp, #12
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d1e:	d006      	beq.n	8017d2e <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8017d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d28:	d001      	beq.n	8017d2e <is_rpmsg_ept_ready+0x20>
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	e000      	b.n	8017d30 <is_rpmsg_ept_ready+0x22>
 8017d2e:	2300      	movs	r3, #0
}
 8017d30:	4618      	mov	r0, r3
 8017d32:	370c      	adds	r7, #12
 8017d34:	46bd      	mov	sp, r7
 8017d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3a:	4770      	bx	lr

08017d3c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8017d3c:	b480      	push	{r7}
 8017d3e:	b083      	sub	sp, #12
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8017d4a:	683a      	ldr	r2, [r7, #0]
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d209      	bcs.n	8017d64 <metal_device_io_region+0x28>
 8017d50:	683a      	ldr	r2, [r7, #0]
 8017d52:	4613      	mov	r3, r2
 8017d54:	005b      	lsls	r3, r3, #1
 8017d56:	4413      	add	r3, r2
 8017d58:	011b      	lsls	r3, r3, #4
 8017d5a:	3308      	adds	r3, #8
 8017d5c:	687a      	ldr	r2, [r7, #4]
 8017d5e:	4413      	add	r3, r2
 8017d60:	3304      	adds	r3, #4
 8017d62:	e000      	b.n	8017d66 <metal_device_io_region+0x2a>
 8017d64:	2300      	movs	r3, #0
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	370c      	adds	r7, #12
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d70:	4770      	bx	lr
	...

08017d74 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8017d74:	b590      	push	{r4, r7, lr}
 8017d76:	b08d      	sub	sp, #52	; 0x34
 8017d78:	af04      	add	r7, sp, #16
 8017d7a:	6078      	str	r0, [r7, #4]
  int status = 0;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8017d80:	2300      	movs	r3, #0
 8017d82:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8017d84:	4a41      	ldr	r2, [pc, #260]	; (8017e8c <OPENAMP_shmem_init+0x118>)
 8017d86:	f107 0310 	add.w	r3, r7, #16
 8017d8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d8e:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8017d92:	2300      	movs	r3, #0
 8017d94:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8017d96:	2300      	movs	r3, #0
 8017d98:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8017d9a:	f107 0310 	add.w	r3, r7, #16
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7fc fcb2 	bl	8014708 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8017da4:	483a      	ldr	r0, [pc, #232]	; (8017e90 <OPENAMP_shmem_init+0x11c>)
 8017da6:	f7fc fb57 	bl	8014458 <metal_register_generic_device>
 8017daa:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8017dac:	69fb      	ldr	r3, [r7, #28]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d001      	beq.n	8017db6 <OPENAMP_shmem_init+0x42>
    return status;
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	e066      	b.n	8017e84 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8017db6:	f107 0318 	add.w	r3, r7, #24
 8017dba:	461a      	mov	r2, r3
 8017dbc:	4935      	ldr	r1, [pc, #212]	; (8017e94 <OPENAMP_shmem_init+0x120>)
 8017dbe:	4836      	ldr	r0, [pc, #216]	; (8017e98 <OPENAMP_shmem_init+0x124>)
 8017dc0:	f7fc fb0c 	bl	80143dc <metal_device_open>
 8017dc4:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8017dc6:	69fb      	ldr	r3, [r7, #28]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d001      	beq.n	8017dd0 <OPENAMP_shmem_init+0x5c>
    return status;
 8017dcc:	69fb      	ldr	r3, [r7, #28]
 8017dce:	e059      	b.n	8017e84 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8017dd0:	4a32      	ldr	r2, [pc, #200]	; (8017e9c <OPENAMP_shmem_init+0x128>)
 8017dd2:	4b33      	ldr	r3, [pc, #204]	; (8017ea0 <OPENAMP_shmem_init+0x12c>)
 8017dd4:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8017dd6:	69bb      	ldr	r3, [r7, #24]
 8017dd8:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8017ddc:	4a31      	ldr	r2, [pc, #196]	; (8017ea4 <OPENAMP_shmem_init+0x130>)
 8017dde:	4b2f      	ldr	r3, [pc, #188]	; (8017e9c <OPENAMP_shmem_init+0x128>)
 8017de0:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8017de2:	461a      	mov	r2, r3
 8017de4:	2300      	movs	r3, #0
 8017de6:	9302      	str	r3, [sp, #8]
 8017de8:	2300      	movs	r3, #0
 8017dea:	9301      	str	r3, [sp, #4]
 8017dec:	f04f 33ff 	mov.w	r3, #4294967295
 8017df0:	9300      	str	r3, [sp, #0]
 8017df2:	4613      	mov	r3, r2
 8017df4:	4a2a      	ldr	r2, [pc, #168]	; (8017ea0 <OPENAMP_shmem_init+0x12c>)
 8017df6:	4929      	ldr	r1, [pc, #164]	; (8017e9c <OPENAMP_shmem_init+0x128>)
 8017df8:	f7fc fcd3 	bl	80147a2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8017dfc:	69bb      	ldr	r3, [r7, #24]
 8017dfe:	2100      	movs	r1, #0
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7ff ff9b 	bl	8017d3c <metal_device_io_region>
 8017e06:	4603      	mov	r3, r0
 8017e08:	4a27      	ldr	r2, [pc, #156]	; (8017ea8 <OPENAMP_shmem_init+0x134>)
 8017e0a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8017e0c:	4b26      	ldr	r3, [pc, #152]	; (8017ea8 <OPENAMP_shmem_init+0x134>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d102      	bne.n	8017e1a <OPENAMP_shmem_init+0xa6>
    return -1;
 8017e14:	f04f 33ff 	mov.w	r3, #4294967295
 8017e18:	e034      	b.n	8017e84 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8017e1a:	f107 0208 	add.w	r2, r7, #8
 8017e1e:	f107 030c 	add.w	r3, r7, #12
 8017e22:	4619      	mov	r1, r3
 8017e24:	6878      	ldr	r0, [r7, #4]
 8017e26:	f000 f91d 	bl	8018064 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	4a1f      	ldr	r2, [pc, #124]	; (8017eac <OPENAMP_shmem_init+0x138>)
 8017e2e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8017e30:	4b1e      	ldr	r3, [pc, #120]	; (8017eac <OPENAMP_shmem_init+0x138>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d102      	bne.n	8017e3e <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8017e38:	f04f 33ff 	mov.w	r3, #4294967295
 8017e3c:	e022      	b.n	8017e84 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8017e44:	4b19      	ldr	r3, [pc, #100]	; (8017eac <OPENAMP_shmem_init+0x138>)
 8017e46:	6819      	ldr	r1, [r3, #0]
 8017e48:	4b18      	ldr	r3, [pc, #96]	; (8017eac <OPENAMP_shmem_init+0x138>)
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	461c      	mov	r4, r3
 8017e50:	2300      	movs	r3, #0
 8017e52:	9302      	str	r3, [sp, #8]
 8017e54:	2300      	movs	r3, #0
 8017e56:	9301      	str	r3, [sp, #4]
 8017e58:	f04f 33ff 	mov.w	r3, #4294967295
 8017e5c:	9300      	str	r3, [sp, #0]
 8017e5e:	4623      	mov	r3, r4
 8017e60:	f7fc fc9f 	bl	80147a2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8017e64:	69bb      	ldr	r3, [r7, #24]
 8017e66:	2101      	movs	r1, #1
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f7ff ff67 	bl	8017d3c <metal_device_io_region>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	4a0f      	ldr	r2, [pc, #60]	; (8017eb0 <OPENAMP_shmem_init+0x13c>)
 8017e72:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8017e74:	4b0e      	ldr	r3, [pc, #56]	; (8017eb0 <OPENAMP_shmem_init+0x13c>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d102      	bne.n	8017e82 <OPENAMP_shmem_init+0x10e>
    return -1;
 8017e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e80:	e000      	b.n	8017e84 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8017e82:	2300      	movs	r3, #0
}
 8017e84:	4618      	mov	r0, r3
 8017e86:	3724      	adds	r7, #36	; 0x24
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	bd90      	pop	{r4, r7, pc}
 8017e8c:	080205b8 	.word	0x080205b8
 8017e90:	2400a090 	.word	0x2400a090
 8017e94:	080205a4 	.word	0x080205a4
 8017e98:	080205b0 	.word	0x080205b0
 8017e9c:	38000400 	.word	0x38000400
 8017ea0:	2400af18 	.word	0x2400af18
 8017ea4:	38010000 	.word	0x38010000
 8017ea8:	2400ae88 	.word	0x2400ae88
 8017eac:	2400ae90 	.word	0x2400ae90
 8017eb0:	2400ae8c 	.word	0x2400ae8c

08017eb4 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8017eb4:	b590      	push	{r4, r7, lr}
 8017eb6:	b08b      	sub	sp, #44	; 0x2c
 8017eb8:	af04      	add	r7, sp, #16
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	613b      	str	r3, [r7, #16]
  int status = 0;
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8017eca:	f7ff fed9 	bl	8017c80 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	f7ff ff50 	bl	8017d74 <OPENAMP_shmem_init>
 8017ed4:	60f8      	str	r0, [r7, #12]
  if(status)
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d001      	beq.n	8017ee0 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	e06a      	b.n	8017fb6 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	4b37      	ldr	r3, [pc, #220]	; (8017fc0 <MX_OPENAMP_Init+0x10c>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	f103 0218 	add.w	r2, r3, #24
 8017eea:	4b36      	ldr	r3, [pc, #216]	; (8017fc4 <MX_OPENAMP_Init+0x110>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	2100      	movs	r1, #0
 8017ef0:	9102      	str	r1, [sp, #8]
 8017ef2:	4935      	ldr	r1, [pc, #212]	; (8017fc8 <MX_OPENAMP_Init+0x114>)
 8017ef4:	9101      	str	r1, [sp, #4]
 8017ef6:	2100      	movs	r1, #0
 8017ef8:	9100      	str	r1, [sp, #0]
 8017efa:	21ff      	movs	r1, #255	; 0xff
 8017efc:	f7fd f872 	bl	8014fe4 <rproc_virtio_create_vdev>
 8017f00:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8017f02:	693b      	ldr	r3, [r7, #16]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d102      	bne.n	8017f0e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8017f08:	f04f 33ff 	mov.w	r3, #4294967295
 8017f0c:	e053      	b.n	8017fb6 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8017f0e:	6938      	ldr	r0, [r7, #16]
 8017f10:	f7fd f983 	bl	801521a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8017f14:	4b2a      	ldr	r3, [pc, #168]	; (8017fc0 <MX_OPENAMP_Init+0x10c>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	3334      	adds	r3, #52	; 0x34
 8017f1a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8017f20:	697b      	ldr	r3, [r7, #20]
 8017f22:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8017f24:	461c      	mov	r4, r3
 8017f26:	4b29      	ldr	r3, [pc, #164]	; (8017fcc <MX_OPENAMP_Init+0x118>)
 8017f28:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8017f2a:	697a      	ldr	r2, [r7, #20]
 8017f2c:	6892      	ldr	r2, [r2, #8]
 8017f2e:	6979      	ldr	r1, [r7, #20]
 8017f30:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8017f32:	9102      	str	r1, [sp, #8]
 8017f34:	9201      	str	r2, [sp, #4]
 8017f36:	9300      	str	r3, [sp, #0]
 8017f38:	4623      	mov	r3, r4
 8017f3a:	4602      	mov	r2, r0
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	6938      	ldr	r0, [r7, #16]
 8017f40:	f7fd f8fe 	bl	8015140 <rproc_virtio_init_vring>
 8017f44:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d001      	beq.n	8017f50 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	e032      	b.n	8017fb6 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8017f50:	4b1b      	ldr	r3, [pc, #108]	; (8017fc0 <MX_OPENAMP_Init+0x10c>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	3348      	adds	r3, #72	; 0x48
 8017f56:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8017f60:	461c      	mov	r4, r3
 8017f62:	4b1a      	ldr	r3, [pc, #104]	; (8017fcc <MX_OPENAMP_Init+0x118>)
 8017f64:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8017f66:	697a      	ldr	r2, [r7, #20]
 8017f68:	6892      	ldr	r2, [r2, #8]
 8017f6a:	6979      	ldr	r1, [r7, #20]
 8017f6c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8017f6e:	9102      	str	r1, [sp, #8]
 8017f70:	9201      	str	r2, [sp, #4]
 8017f72:	9300      	str	r3, [sp, #0]
 8017f74:	4623      	mov	r3, r4
 8017f76:	4602      	mov	r2, r0
 8017f78:	2101      	movs	r1, #1
 8017f7a:	6938      	ldr	r0, [r7, #16]
 8017f7c:	f7fd f8e0 	bl	8015140 <rproc_virtio_init_vring>
 8017f80:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d001      	beq.n	8017f8c <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	e014      	b.n	8017fb6 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8017f8c:	4b10      	ldr	r3, [pc, #64]	; (8017fd0 <MX_OPENAMP_Init+0x11c>)
 8017f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017f92:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8017f94:	4a0f      	ldr	r2, [pc, #60]	; (8017fd4 <MX_OPENAMP_Init+0x120>)
 8017f96:	4b0e      	ldr	r3, [pc, #56]	; (8017fd0 <MX_OPENAMP_Init+0x11c>)
 8017f98:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	480e      	ldr	r0, [pc, #56]	; (8017fd8 <MX_OPENAMP_Init+0x124>)
 8017f9e:	f7fd fdad 	bl	8015afc <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8017fa2:	4b0a      	ldr	r3, [pc, #40]	; (8017fcc <MX_OPENAMP_Init+0x118>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4a0c      	ldr	r2, [pc, #48]	; (8017fd8 <MX_OPENAMP_Init+0x124>)
 8017fa8:	9200      	str	r2, [sp, #0]
 8017faa:	683a      	ldr	r2, [r7, #0]
 8017fac:	6939      	ldr	r1, [r7, #16]
 8017fae:	480b      	ldr	r0, [pc, #44]	; (8017fdc <MX_OPENAMP_Init+0x128>)
 8017fb0:	f7fe f814 	bl	8015fdc <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8017fb4:	2300      	movs	r3, #0
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	371c      	adds	r7, #28
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd90      	pop	{r4, r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	2400ae90 	.word	0x2400ae90
 8017fc4:	2400ae8c 	.word	0x2400ae8c
 8017fc8:	08017ced 	.word	0x08017ced
 8017fcc:	2400ae88 	.word	0x2400ae88
 8017fd0:	38000400 	.word	0x38000400
 8017fd4:	38010000 	.word	0x38010000
 8017fd8:	2400ae94 	.word	0x2400ae94
 8017fdc:	2400aea0 	.word	0x2400aea0

08017fe0 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08a      	sub	sp, #40	; 0x28
 8017fe4:	af04      	add	r7, sp, #16
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
 8017fec:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8017ff2:	6a3b      	ldr	r3, [r7, #32]
 8017ff4:	9302      	str	r3, [sp, #8]
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	9301      	str	r3, [sp, #4]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	9300      	str	r3, [sp, #0]
 8017ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8018002:	68ba      	ldr	r2, [r7, #8]
 8018004:	4904      	ldr	r1, [pc, #16]	; (8018018 <OPENAMP_create_endpoint+0x38>)
 8018006:	68f8      	ldr	r0, [r7, #12]
 8018008:	f7fd fb94 	bl	8015734 <rpmsg_create_ept>
 801800c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 801800e:	697b      	ldr	r3, [r7, #20]
}
 8018010:	4618      	mov	r0, r3
 8018012:	3718      	adds	r7, #24
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	2400aea0 	.word	0x2400aea0

0801801c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8018020:	4b03      	ldr	r3, [pc, #12]	; (8018030 <OPENAMP_check_for_message+0x14>)
 8018022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018024:	4618      	mov	r0, r3
 8018026:	f7ff fe47 	bl	8017cb8 <MAILBOX_Poll>
}
 801802a:	bf00      	nop
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	2400aea0 	.word	0x2400aea0

08018034 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b082      	sub	sp, #8
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 801803c:	e004      	b.n	8018048 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 801803e:	4b08      	ldr	r3, [pc, #32]	; (8018060 <OPENAMP_Wait_EndPointready+0x2c>)
 8018040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018042:	4618      	mov	r0, r3
 8018044:	f7ff fe38 	bl	8017cb8 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8018048:	6878      	ldr	r0, [r7, #4]
 801804a:	f7ff fe60 	bl	8017d0e <is_rpmsg_ept_ready>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d0f4      	beq.n	801803e <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8018054:	bf00      	nop
 8018056:	bf00      	nop
 8018058:	3708      	adds	r7, #8
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
 801805e:	bf00      	nop
 8018060:	2400aea0 	.word	0x2400aea0

08018064 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b084      	sub	sp, #16
 8018068:	af00      	add	r7, sp, #0
 801806a:	60f8      	str	r0, [r7, #12]
 801806c:	60b9      	str	r1, [r7, #8]
 801806e:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8018070:	228c      	movs	r2, #140	; 0x8c
 8018072:	2100      	movs	r1, #0
 8018074:	481e      	ldr	r0, [pc, #120]	; (80180f0 <resource_table_init+0x8c>)
 8018076:	f003 f9d7 	bl	801b428 <memset>
	resource_table.num = 1;
 801807a:	4b1d      	ldr	r3, [pc, #116]	; (80180f0 <resource_table_init+0x8c>)
 801807c:	2201      	movs	r2, #1
 801807e:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8018080:	4b1b      	ldr	r3, [pc, #108]	; (80180f0 <resource_table_init+0x8c>)
 8018082:	2201      	movs	r2, #1
 8018084:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 8018086:	4b1a      	ldr	r3, [pc, #104]	; (80180f0 <resource_table_init+0x8c>)
 8018088:	2218      	movs	r2, #24
 801808a:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 801808c:	4b19      	ldr	r3, [pc, #100]	; (80180f4 <resource_table_init+0x90>)
 801808e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018092:	4a17      	ldr	r2, [pc, #92]	; (80180f0 <resource_table_init+0x8c>)
 8018094:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 8018096:	4b16      	ldr	r3, [pc, #88]	; (80180f0 <resource_table_init+0x8c>)
 8018098:	2204      	movs	r2, #4
 801809a:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 801809c:	4b14      	ldr	r3, [pc, #80]	; (80180f0 <resource_table_init+0x8c>)
 801809e:	2204      	movs	r2, #4
 80180a0:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80180a2:	4b13      	ldr	r3, [pc, #76]	; (80180f0 <resource_table_init+0x8c>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80180a8:	4a12      	ldr	r2, [pc, #72]	; (80180f4 <resource_table_init+0x90>)
 80180aa:	4b11      	ldr	r3, [pc, #68]	; (80180f0 <resource_table_init+0x8c>)
 80180ac:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 80180ae:	4b10      	ldr	r3, [pc, #64]	; (80180f0 <resource_table_init+0x8c>)
 80180b0:	2204      	movs	r2, #4
 80180b2:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 80180b4:	4b0e      	ldr	r3, [pc, #56]	; (80180f0 <resource_table_init+0x8c>)
 80180b6:	2204      	movs	r2, #4
 80180b8:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 80180ba:	4b0d      	ldr	r3, [pc, #52]	; (80180f0 <resource_table_init+0x8c>)
 80180bc:	2201      	movs	r2, #1
 80180be:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 80180c0:	4b0b      	ldr	r3, [pc, #44]	; (80180f0 <resource_table_init+0x8c>)
 80180c2:	2203      	movs	r2, #3
 80180c4:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 80180c6:	4b0a      	ldr	r3, [pc, #40]	; (80180f0 <resource_table_init+0x8c>)
 80180c8:	2207      	movs	r2, #7
 80180ca:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 80180cc:	4b08      	ldr	r3, [pc, #32]	; (80180f0 <resource_table_init+0x8c>)
 80180ce:	2202      	movs	r2, #2
 80180d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 80180d4:	4b06      	ldr	r3, [pc, #24]	; (80180f0 <resource_table_init+0x8c>)
 80180d6:	2201      	movs	r2, #1
 80180d8:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	228c      	movs	r2, #140	; 0x8c
 80180de:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 80180e0:	68bb      	ldr	r3, [r7, #8]
 80180e2:	4a03      	ldr	r2, [pc, #12]	; (80180f0 <resource_table_init+0x8c>)
 80180e4:	601a      	str	r2, [r3, #0]
}
 80180e6:	bf00      	nop
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	38000000 	.word	0x38000000
 80180f4:	38000400 	.word	0x38000400

080180f8 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	4603      	mov	r3, r0
 8018100:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 8018102:	79fb      	ldrb	r3, [r7, #7]
 8018104:	f083 0301 	eor.w	r3, r3, #1
 8018108:	b2db      	uxtb	r3, r3
 801810a:	2b00      	cmp	r3, #0
 801810c:	d024      	beq.n	8018158 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 801810e:	4b19      	ldr	r3, [pc, #100]	; (8018174 <createEmptyFrame+0x7c>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	461a      	mov	r2, r3
 8018114:	2100      	movs	r1, #0
 8018116:	4818      	ldr	r0, [pc, #96]	; (8018178 <createEmptyFrame+0x80>)
 8018118:	f003 f986 	bl	801b428 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 801811c:	2300      	movs	r3, #0
 801811e:	60fb      	str	r3, [r7, #12]
 8018120:	e011      	b.n	8018146 <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8018128:	005b      	lsls	r3, r3, #1
 801812a:	4a13      	ldr	r2, [pc, #76]	; (8018178 <createEmptyFrame+0x80>)
 801812c:	21ff      	movs	r1, #255	; 0xff
 801812e:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8018136:	005b      	lsls	r3, r3, #1
 8018138:	3301      	adds	r3, #1
 801813a:	4a0f      	ldr	r2, [pc, #60]	; (8018178 <createEmptyFrame+0x80>)
 801813c:	21ff      	movs	r1, #255	; 0xff
 801813e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	3301      	adds	r3, #1
 8018144:	60fb      	str	r3, [r7, #12]
 8018146:	4b0b      	ldr	r3, [pc, #44]	; (8018174 <createEmptyFrame+0x7c>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 801814e:	085a      	lsrs	r2, r3, #1
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	429a      	cmp	r2, r3
 8018154:	d8e5      	bhi.n	8018122 <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 8018156:	e009      	b.n	801816c <createEmptyFrame+0x74>
	else if (isMenuFrame)
 8018158:	79fb      	ldrb	r3, [r7, #7]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d006      	beq.n	801816c <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 801815e:	4b05      	ldr	r3, [pc, #20]	; (8018174 <createEmptyFrame+0x7c>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	461a      	mov	r2, r3
 8018164:	21ff      	movs	r1, #255	; 0xff
 8018166:	4804      	ldr	r0, [pc, #16]	; (8018178 <createEmptyFrame+0x80>)
 8018168:	f003 f95e 	bl	801b428 <memset>
}
 801816c:	bf00      	nop
 801816e:	3710      	adds	r7, #16
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}
 8018174:	2400a10c 	.word	0x2400a10c
 8018178:	24000090 	.word	0x24000090

0801817c <displayNextFrame>:

void displayNextFrame(void)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 8018180:	f7ea fab2 	bl	80026e8 <HAL_GetTick>
 8018184:	4602      	mov	r2, r0
 8018186:	4b0a      	ldr	r3, [pc, #40]	; (80181b0 <displayNextFrame+0x34>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	1ad3      	subs	r3, r2, r3
 801818c:	2b1e      	cmp	r3, #30
 801818e:	d90d      	bls.n	80181ac <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 8018190:	4b08      	ldr	r3, [pc, #32]	; (80181b4 <displayNextFrame+0x38>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	b29a      	uxth	r2, r3
 8018196:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801819a:	4907      	ldr	r1, [pc, #28]	; (80181b8 <displayNextFrame+0x3c>)
 801819c:	4807      	ldr	r0, [pc, #28]	; (80181bc <displayNextFrame+0x40>)
 801819e:	f7f1 fce5 	bl	8009b6c <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 80181a2:	f7ea faa1 	bl	80026e8 <HAL_GetTick>
 80181a6:	4603      	mov	r3, r0
 80181a8:	4a01      	ldr	r2, [pc, #4]	; (80181b0 <displayNextFrame+0x34>)
 80181aa:	6013      	str	r3, [r2, #0]
	}
}
 80181ac:	bf00      	nop
 80181ae:	bd80      	pop	{r7, pc}
 80181b0:	2400ae78 	.word	0x2400ae78
 80181b4:	2400a10c 	.word	0x2400a10c
 80181b8:	24000090 	.word	0x24000090
 80181bc:	2400b154 	.word	0x2400b154

080181c0 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 80181c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181c2:	b08f      	sub	sp, #60	; 0x3c
 80181c4:	af04      	add	r7, sp, #16
 80181c6:	4603      	mov	r3, r0
 80181c8:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 80181ca:	2300      	movs	r3, #0
 80181cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 80181d0:	2300      	movs	r3, #0
 80181d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 80181d6:	2300      	movs	r3, #0
 80181d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 80181dc:	2300      	movs	r3, #0
 80181de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 80181e2:	2300      	movs	r3, #0
 80181e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 80181e8:	4b0b      	ldr	r3, [pc, #44]	; (8018218 <updateUint16Item+0x58>)
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d00e      	beq.n	801820e <updateUint16Item+0x4e>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 80181f0:	2302      	movs	r3, #2
 80181f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 80181f6:	230c      	movs	r3, #12
 80181f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 80181fc:	230e      	movs	r3, #14
 80181fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8018202:	237c      	movs	r3, #124	; 0x7c
 8018204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8018208:	2340      	movs	r3, #64	; 0x40
 801820a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 801820e:	2300      	movs	r3, #0
 8018210:	61fb      	str	r3, [r7, #28]
 8018212:	f001 baf3 	b.w	80197fc <updateUint16Item+0x163c>
 8018216:	bf00      	nop
 8018218:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	2b01      	cmp	r3, #1
 8018220:	dc58      	bgt.n	80182d4 <updateUint16Item+0x114>
 8018222:	79fb      	ldrb	r3, [r7, #7]
 8018224:	2b02      	cmp	r3, #2
 8018226:	d155      	bne.n	80182d4 <updateUint16Item+0x114>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801822c:	b298      	uxth	r0, r3
 801822e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018232:	b29a      	uxth	r2, r3
 8018234:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018238:	b299      	uxth	r1, r3
 801823a:	69fb      	ldr	r3, [r7, #28]
 801823c:	b29b      	uxth	r3, r3
 801823e:	fb11 f303 	smulbb	r3, r1, r3
 8018242:	b29b      	uxth	r3, r3
 8018244:	4413      	add	r3, r2
 8018246:	b29c      	uxth	r4, r3
 8018248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801824c:	b29a      	uxth	r2, r3
 801824e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018252:	b29b      	uxth	r3, r3
 8018254:	4413      	add	r3, r2
 8018256:	b29d      	uxth	r5, r3
 8018258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801825c:	b29a      	uxth	r2, r3
 801825e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018262:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018268:	b29b      	uxth	r3, r3
 801826a:	fb11 f303 	smulbb	r3, r1, r3
 801826e:	b29b      	uxth	r3, r3
 8018270:	4413      	add	r3, r2
 8018272:	b29b      	uxth	r3, r3
 8018274:	2200      	movs	r2, #0
 8018276:	9202      	str	r2, [sp, #8]
 8018278:	2201      	movs	r2, #1
 801827a:	9201      	str	r2, [sp, #4]
 801827c:	2200      	movs	r2, #0
 801827e:	9200      	str	r2, [sp, #0]
 8018280:	462a      	mov	r2, r5
 8018282:	4621      	mov	r1, r4
 8018284:	f7f6 fbba 	bl	800e9fc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8018288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801828c:	b29c      	uxth	r4, r3
 801828e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018292:	b29a      	uxth	r2, r3
 8018294:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018298:	b299      	uxth	r1, r3
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	b29b      	uxth	r3, r3
 801829e:	fb11 f303 	smulbb	r3, r1, r3
 80182a2:	b29b      	uxth	r3, r3
 80182a4:	4413      	add	r3, r2
 80182a6:	b29b      	uxth	r3, r3
 80182a8:	3301      	adds	r3, #1
 80182aa:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 80182ac:	69fb      	ldr	r3, [r7, #28]
 80182ae:	3301      	adds	r3, #1
 80182b0:	011b      	lsls	r3, r3, #4
 80182b2:	4a9f      	ldr	r2, [pc, #636]	; (8018530 <updateUint16Item+0x370>)
 80182b4:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80182b6:	499f      	ldr	r1, [pc, #636]	; (8018534 <updateUint16Item+0x374>)
 80182b8:	ab02      	add	r3, sp, #8
 80182ba:	c903      	ldmia	r1, {r0, r1}
 80182bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80182c0:	2310      	movs	r3, #16
 80182c2:	9301      	str	r3, [sp, #4]
 80182c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182c8:	9300      	str	r3, [sp, #0]
 80182ca:	2300      	movs	r3, #0
 80182cc:	4629      	mov	r1, r5
 80182ce:	4620      	mov	r0, r4
 80182d0:	f7fe fe7e 	bl	8016fd0 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	2b01      	cmp	r3, #1
 80182d8:	f340 87ed 	ble.w	80192b6 <updateUint16Item+0x10f6>
 80182dc:	4b94      	ldr	r3, [pc, #592]	; (8018530 <updateUint16Item+0x370>)
 80182de:	7bdb      	ldrb	r3, [r3, #15]
 80182e0:	3b02      	subs	r3, #2
 80182e2:	69fa      	ldr	r2, [r7, #28]
 80182e4:	429a      	cmp	r2, r3
 80182e6:	f280 87e6 	bge.w	80192b6 <updateUint16Item+0x10f6>
		{
			if (howToDraw == FULL)
 80182ea:	79fb      	ldrb	r3, [r7, #7]
 80182ec:	2b02      	cmp	r3, #2
 80182ee:	d168      	bne.n	80183c2 <updateUint16Item+0x202>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80182f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182f4:	b298      	uxth	r0, r3
 80182f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80182fa:	b29a      	uxth	r2, r3
 80182fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018300:	b299      	uxth	r1, r3
 8018302:	69fb      	ldr	r3, [r7, #28]
 8018304:	b29b      	uxth	r3, r3
 8018306:	fb11 f303 	smulbb	r3, r1, r3
 801830a:	b29b      	uxth	r3, r3
 801830c:	4413      	add	r3, r2
 801830e:	b29c      	uxth	r4, r3
 8018310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018314:	b29a      	uxth	r2, r3
 8018316:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801831a:	085b      	lsrs	r3, r3, #1
 801831c:	b2db      	uxtb	r3, r3
 801831e:	b29b      	uxth	r3, r3
 8018320:	4413      	add	r3, r2
 8018322:	b29d      	uxth	r5, r3
 8018324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018328:	b29a      	uxth	r2, r3
 801832a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801832e:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8018330:	69fb      	ldr	r3, [r7, #28]
 8018332:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018334:	b29b      	uxth	r3, r3
 8018336:	fb11 f303 	smulbb	r3, r1, r3
 801833a:	b29b      	uxth	r3, r3
 801833c:	4413      	add	r3, r2
 801833e:	b29b      	uxth	r3, r3
 8018340:	2200      	movs	r2, #0
 8018342:	9202      	str	r2, [sp, #8]
 8018344:	2201      	movs	r2, #1
 8018346:	9201      	str	r2, [sp, #4]
 8018348:	2200      	movs	r2, #0
 801834a:	9200      	str	r2, [sp, #0]
 801834c:	462a      	mov	r2, r5
 801834e:	4621      	mov	r1, r4
 8018350:	f7f6 fb54 	bl	800e9fc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 8018354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018358:	b29a      	uxth	r2, r3
 801835a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801835e:	085b      	lsrs	r3, r3, #1
 8018360:	b2db      	uxtb	r3, r3
 8018362:	b29b      	uxth	r3, r3
 8018364:	4413      	add	r3, r2
 8018366:	b298      	uxth	r0, r3
 8018368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801836c:	b29a      	uxth	r2, r3
 801836e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018372:	b299      	uxth	r1, r3
 8018374:	69fb      	ldr	r3, [r7, #28]
 8018376:	b29b      	uxth	r3, r3
 8018378:	fb11 f303 	smulbb	r3, r1, r3
 801837c:	b29b      	uxth	r3, r3
 801837e:	4413      	add	r3, r2
 8018380:	b29c      	uxth	r4, r3
 8018382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018386:	b29a      	uxth	r2, r3
 8018388:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801838c:	b29b      	uxth	r3, r3
 801838e:	4413      	add	r3, r2
 8018390:	b29d      	uxth	r5, r3
 8018392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018396:	b29a      	uxth	r2, r3
 8018398:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801839c:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801839e:	69fb      	ldr	r3, [r7, #28]
 80183a0:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	fb11 f303 	smulbb	r3, r1, r3
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	4413      	add	r3, r2
 80183ac:	b29b      	uxth	r3, r3
 80183ae:	2200      	movs	r2, #0
 80183b0:	9202      	str	r2, [sp, #8]
 80183b2:	2201      	movs	r2, #1
 80183b4:	9201      	str	r2, [sp, #4]
 80183b6:	2200      	movs	r2, #0
 80183b8:	9200      	str	r2, [sp, #0]
 80183ba:	462a      	mov	r2, r5
 80183bc:	4621      	mov	r1, r4
 80183be:	f7f6 fb1d 	bl	800e9fc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 80183c2:	69fb      	ldr	r3, [r7, #28]
 80183c4:	2b02      	cmp	r3, #2
 80183c6:	f040 83b6 	bne.w	8018b36 <updateUint16Item+0x976>
			{
				char localString[8] = "";
 80183ca:	2300      	movs	r3, #0
 80183cc:	617b      	str	r3, [r7, #20]
 80183ce:	2300      	movs	r3, #0
 80183d0:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 80183d2:	4b57      	ldr	r3, [pc, #348]	; (8018530 <updateUint16Item+0x370>)
 80183d4:	891b      	ldrh	r3, [r3, #8]
 80183d6:	461a      	mov	r2, r3
 80183d8:	f107 0314 	add.w	r3, r7, #20
 80183dc:	4956      	ldr	r1, [pc, #344]	; (8018538 <updateUint16Item+0x378>)
 80183de:	4618      	mov	r0, r3
 80183e0:	f004 f94c 	bl	801c67c <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 80183e4:	4b55      	ldr	r3, [pc, #340]	; (801853c <updateUint16Item+0x37c>)
 80183e6:	781b      	ldrb	r3, [r3, #0]
 80183e8:	2b02      	cmp	r3, #2
 80183ea:	f040 81cd 	bne.w	8018788 <updateUint16Item+0x5c8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 80183ee:	79fb      	ldrb	r3, [r7, #7]
 80183f0:	2b03      	cmp	r3, #3
 80183f2:	d003      	beq.n	80183fc <updateUint16Item+0x23c>
 80183f4:	79fb      	ldrb	r3, [r7, #7]
 80183f6:	2b02      	cmp	r3, #2
 80183f8:	f040 80a2 	bne.w	8018540 <updateUint16Item+0x380>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80183fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018400:	b29b      	uxth	r3, r3
 8018402:	3301      	adds	r3, #1
 8018404:	b298      	uxth	r0, r3
 8018406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801840a:	b29a      	uxth	r2, r3
 801840c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018410:	b299      	uxth	r1, r3
 8018412:	69fb      	ldr	r3, [r7, #28]
 8018414:	b29b      	uxth	r3, r3
 8018416:	fb11 f303 	smulbb	r3, r1, r3
 801841a:	b29b      	uxth	r3, r3
 801841c:	4413      	add	r3, r2
 801841e:	b29b      	uxth	r3, r3
 8018420:	3301      	adds	r3, #1
 8018422:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8018424:	69fb      	ldr	r3, [r7, #28]
 8018426:	3301      	adds	r3, #1
 8018428:	011b      	lsls	r3, r3, #4
 801842a:	4a41      	ldr	r2, [pc, #260]	; (8018530 <updateUint16Item+0x370>)
 801842c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801842e:	2300      	movs	r3, #0
 8018430:	9301      	str	r3, [sp, #4]
 8018432:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018436:	9300      	str	r3, [sp, #0]
 8018438:	4b3e      	ldr	r3, [pc, #248]	; (8018534 <updateUint16Item+0x374>)
 801843a:	f7f6 fd83 	bl	800ef44 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801843e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018442:	b29a      	uxth	r2, r3
 8018444:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018448:	085b      	lsrs	r3, r3, #1
 801844a:	b2db      	uxtb	r3, r3
 801844c:	b29b      	uxth	r3, r3
 801844e:	4413      	add	r3, r2
 8018450:	b29b      	uxth	r3, r3
 8018452:	3301      	adds	r3, #1
 8018454:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018456:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801845a:	b29a      	uxth	r2, r3
 801845c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018460:	b299      	uxth	r1, r3
 8018462:	69fb      	ldr	r3, [r7, #28]
 8018464:	b29b      	uxth	r3, r3
 8018466:	fb11 f303 	smulbb	r3, r1, r3
 801846a:	b29b      	uxth	r3, r3
 801846c:	4413      	add	r3, r2
 801846e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018470:	3301      	adds	r3, #1
 8018472:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018478:	b29a      	uxth	r2, r3
 801847a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801847e:	085b      	lsrs	r3, r3, #1
 8018480:	b2db      	uxtb	r3, r3
 8018482:	b29b      	uxth	r3, r3
 8018484:	4413      	add	r3, r2
 8018486:	b29c      	uxth	r4, r3
 8018488:	69fb      	ldr	r3, [r7, #28]
 801848a:	3301      	adds	r3, #1
 801848c:	011b      	lsls	r3, r3, #4
 801848e:	4a28      	ldr	r2, [pc, #160]	; (8018530 <updateUint16Item+0x370>)
 8018490:	4413      	add	r3, r2
 8018492:	4618      	mov	r0, r3
 8018494:	f7e7 ff2e 	bl	80002f4 <strlen>
 8018498:	4603      	mov	r3, r0
 801849a:	b29a      	uxth	r2, r3
 801849c:	4b25      	ldr	r3, [pc, #148]	; (8018534 <updateUint16Item+0x374>)
 801849e:	889b      	ldrh	r3, [r3, #4]
 80184a0:	fb12 f303 	smulbb	r3, r2, r3
 80184a4:	b29b      	uxth	r3, r3
 80184a6:	4423      	add	r3, r4
 80184a8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80184aa:	3301      	adds	r3, #1
 80184ac:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80184ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80184b8:	b299      	uxth	r1, r3
 80184ba:	69fb      	ldr	r3, [r7, #28]
 80184bc:	b29b      	uxth	r3, r3
 80184be:	fb11 f303 	smulbb	r3, r1, r3
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	4413      	add	r3, r2
 80184c6:	b29a      	uxth	r2, r3
 80184c8:	4b1a      	ldr	r3, [pc, #104]	; (8018534 <updateUint16Item+0x374>)
 80184ca:	88db      	ldrh	r3, [r3, #6]
 80184cc:	4413      	add	r3, r2
 80184ce:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80184d0:	3301      	adds	r3, #1
 80184d2:	b29b      	uxth	r3, r3
 80184d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80184d8:	9200      	str	r2, [sp, #0]
 80184da:	4602      	mov	r2, r0
 80184dc:	4631      	mov	r1, r6
 80184de:	4628      	mov	r0, r5
 80184e0:	f7f6 f912 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80184e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184e8:	b29a      	uxth	r2, r3
 80184ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80184ee:	085b      	lsrs	r3, r3, #1
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	4413      	add	r3, r2
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	3301      	adds	r3, #1
 80184fa:	b298      	uxth	r0, r3
 80184fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018500:	b29a      	uxth	r2, r3
 8018502:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018506:	b299      	uxth	r1, r3
 8018508:	69fb      	ldr	r3, [r7, #28]
 801850a:	b29b      	uxth	r3, r3
 801850c:	fb11 f303 	smulbb	r3, r1, r3
 8018510:	b29b      	uxth	r3, r3
 8018512:	4413      	add	r3, r2
 8018514:	b29b      	uxth	r3, r3
 8018516:	3301      	adds	r3, #1
 8018518:	b299      	uxth	r1, r3
 801851a:	f107 0214 	add.w	r2, r7, #20
 801851e:	2300      	movs	r3, #0
 8018520:	9301      	str	r3, [sp, #4]
 8018522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018526:	9300      	str	r3, [sp, #0]
 8018528:	4b02      	ldr	r3, [pc, #8]	; (8018534 <updateUint16Item+0x374>)
 801852a:	f7f6 fd0b 	bl	800ef44 <Paint_DrawString_EN>
 801852e:	e302      	b.n	8018b36 <updateUint16Item+0x976>
 8018530:	2400c294 	.word	0x2400c294
 8018534:	24000030 	.word	0x24000030
 8018538:	080205cc 	.word	0x080205cc
 801853c:	2400b09c 	.word	0x2400b09c
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8018540:	79fb      	ldrb	r3, [r7, #7]
 8018542:	2b01      	cmp	r3, #1
 8018544:	f040 808c 	bne.w	8018660 <updateUint16Item+0x4a0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801854c:	b29b      	uxth	r3, r3
 801854e:	3301      	adds	r3, #1
 8018550:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018556:	b29a      	uxth	r2, r3
 8018558:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801855c:	b299      	uxth	r1, r3
 801855e:	69fb      	ldr	r3, [r7, #28]
 8018560:	b29b      	uxth	r3, r3
 8018562:	fb11 f303 	smulbb	r3, r1, r3
 8018566:	b29b      	uxth	r3, r3
 8018568:	4413      	add	r3, r2
 801856a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801856c:	3301      	adds	r3, #1
 801856e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018574:	b29c      	uxth	r4, r3
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	3301      	adds	r3, #1
 801857a:	011b      	lsls	r3, r3, #4
 801857c:	4a80      	ldr	r2, [pc, #512]	; (8018780 <updateUint16Item+0x5c0>)
 801857e:	4413      	add	r3, r2
 8018580:	4618      	mov	r0, r3
 8018582:	f7e7 feb7 	bl	80002f4 <strlen>
 8018586:	4603      	mov	r3, r0
 8018588:	b29a      	uxth	r2, r3
 801858a:	4b7e      	ldr	r3, [pc, #504]	; (8018784 <updateUint16Item+0x5c4>)
 801858c:	889b      	ldrh	r3, [r3, #4]
 801858e:	fb12 f303 	smulbb	r3, r2, r3
 8018592:	b29b      	uxth	r3, r3
 8018594:	4423      	add	r3, r4
 8018596:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018598:	3301      	adds	r3, #1
 801859a:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801859c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185a0:	b29a      	uxth	r2, r3
 80185a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80185a6:	b299      	uxth	r1, r3
 80185a8:	69fb      	ldr	r3, [r7, #28]
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	fb11 f303 	smulbb	r3, r1, r3
 80185b0:	b29b      	uxth	r3, r3
 80185b2:	4413      	add	r3, r2
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	4b73      	ldr	r3, [pc, #460]	; (8018784 <updateUint16Item+0x5c4>)
 80185b8:	88db      	ldrh	r3, [r3, #6]
 80185ba:	4413      	add	r3, r2
 80185bc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80185be:	3301      	adds	r3, #1
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185c6:	9200      	str	r2, [sp, #0]
 80185c8:	4602      	mov	r2, r0
 80185ca:	4631      	mov	r1, r6
 80185cc:	4628      	mov	r0, r5
 80185ce:	f7f6 f89b 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80185d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	3301      	adds	r3, #1
 80185da:	b298      	uxth	r0, r3
 80185dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185e0:	b29a      	uxth	r2, r3
 80185e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80185e6:	b299      	uxth	r1, r3
 80185e8:	69fb      	ldr	r3, [r7, #28]
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	fb11 f303 	smulbb	r3, r1, r3
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	4413      	add	r3, r2
 80185f4:	b29b      	uxth	r3, r3
 80185f6:	3301      	adds	r3, #1
 80185f8:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 80185fa:	69fb      	ldr	r3, [r7, #28]
 80185fc:	3301      	adds	r3, #1
 80185fe:	011b      	lsls	r3, r3, #4
 8018600:	4a5f      	ldr	r2, [pc, #380]	; (8018780 <updateUint16Item+0x5c0>)
 8018602:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018604:	2300      	movs	r3, #0
 8018606:	9301      	str	r3, [sp, #4]
 8018608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801860c:	9300      	str	r3, [sp, #0]
 801860e:	4b5d      	ldr	r3, [pc, #372]	; (8018784 <updateUint16Item+0x5c4>)
 8018610:	f7f6 fc98 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018618:	b29a      	uxth	r2, r3
 801861a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801861e:	085b      	lsrs	r3, r3, #1
 8018620:	b2db      	uxtb	r3, r3
 8018622:	b29b      	uxth	r3, r3
 8018624:	4413      	add	r3, r2
 8018626:	b29b      	uxth	r3, r3
 8018628:	3301      	adds	r3, #1
 801862a:	b298      	uxth	r0, r3
 801862c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018630:	b29a      	uxth	r2, r3
 8018632:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018636:	b299      	uxth	r1, r3
 8018638:	69fb      	ldr	r3, [r7, #28]
 801863a:	b29b      	uxth	r3, r3
 801863c:	fb11 f303 	smulbb	r3, r1, r3
 8018640:	b29b      	uxth	r3, r3
 8018642:	4413      	add	r3, r2
 8018644:	b29b      	uxth	r3, r3
 8018646:	3301      	adds	r3, #1
 8018648:	b299      	uxth	r1, r3
 801864a:	f107 0214 	add.w	r2, r7, #20
 801864e:	2300      	movs	r3, #0
 8018650:	9301      	str	r3, [sp, #4]
 8018652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	4b4a      	ldr	r3, [pc, #296]	; (8018784 <updateUint16Item+0x5c4>)
 801865a:	f7f6 fc73 	bl	800ef44 <Paint_DrawString_EN>
 801865e:	e26a      	b.n	8018b36 <updateUint16Item+0x976>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 8018660:	79fb      	ldrb	r3, [r7, #7]
 8018662:	2b00      	cmp	r3, #0
 8018664:	f040 8267 	bne.w	8018b36 <updateUint16Item+0x976>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801866c:	b29b      	uxth	r3, r3
 801866e:	3301      	adds	r3, #1
 8018670:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018672:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018676:	b29a      	uxth	r2, r3
 8018678:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801867c:	b299      	uxth	r1, r3
 801867e:	69fb      	ldr	r3, [r7, #28]
 8018680:	b29b      	uxth	r3, r3
 8018682:	fb11 f303 	smulbb	r3, r1, r3
 8018686:	b29b      	uxth	r3, r3
 8018688:	4413      	add	r3, r2
 801868a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801868c:	3301      	adds	r3, #1
 801868e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018694:	b29c      	uxth	r4, r3
 8018696:	69fb      	ldr	r3, [r7, #28]
 8018698:	3301      	adds	r3, #1
 801869a:	011b      	lsls	r3, r3, #4
 801869c:	4a38      	ldr	r2, [pc, #224]	; (8018780 <updateUint16Item+0x5c0>)
 801869e:	4413      	add	r3, r2
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7e7 fe27 	bl	80002f4 <strlen>
 80186a6:	4603      	mov	r3, r0
 80186a8:	b29a      	uxth	r2, r3
 80186aa:	4b36      	ldr	r3, [pc, #216]	; (8018784 <updateUint16Item+0x5c4>)
 80186ac:	889b      	ldrh	r3, [r3, #4]
 80186ae:	fb12 f303 	smulbb	r3, r2, r3
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	4423      	add	r3, r4
 80186b6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80186b8:	3301      	adds	r3, #1
 80186ba:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80186bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80186c0:	b29a      	uxth	r2, r3
 80186c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80186c6:	b299      	uxth	r1, r3
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	fb11 f303 	smulbb	r3, r1, r3
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	4413      	add	r3, r2
 80186d4:	b29a      	uxth	r2, r3
 80186d6:	4b2b      	ldr	r3, [pc, #172]	; (8018784 <updateUint16Item+0x5c4>)
 80186d8:	88db      	ldrh	r3, [r3, #6]
 80186da:	4413      	add	r3, r2
 80186dc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80186de:	3301      	adds	r3, #1
 80186e0:	b29b      	uxth	r3, r3
 80186e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186e6:	9200      	str	r2, [sp, #0]
 80186e8:	4602      	mov	r2, r0
 80186ea:	4631      	mov	r1, r6
 80186ec:	4628      	mov	r0, r5
 80186ee:	f7f6 f80b 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80186f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186f6:	b29b      	uxth	r3, r3
 80186f8:	3301      	adds	r3, #1
 80186fa:	b298      	uxth	r0, r3
 80186fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018700:	b29a      	uxth	r2, r3
 8018702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018706:	b299      	uxth	r1, r3
 8018708:	69fb      	ldr	r3, [r7, #28]
 801870a:	b29b      	uxth	r3, r3
 801870c:	fb11 f303 	smulbb	r3, r1, r3
 8018710:	b29b      	uxth	r3, r3
 8018712:	4413      	add	r3, r2
 8018714:	b29b      	uxth	r3, r3
 8018716:	3301      	adds	r3, #1
 8018718:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801871a:	69fb      	ldr	r3, [r7, #28]
 801871c:	3301      	adds	r3, #1
 801871e:	011b      	lsls	r3, r3, #4
 8018720:	4a17      	ldr	r2, [pc, #92]	; (8018780 <updateUint16Item+0x5c0>)
 8018722:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018724:	2300      	movs	r3, #0
 8018726:	9301      	str	r3, [sp, #4]
 8018728:	f24c 6318 	movw	r3, #50712	; 0xc618
 801872c:	9300      	str	r3, [sp, #0]
 801872e:	4b15      	ldr	r3, [pc, #84]	; (8018784 <updateUint16Item+0x5c4>)
 8018730:	f7f6 fc08 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018738:	b29a      	uxth	r2, r3
 801873a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801873e:	085b      	lsrs	r3, r3, #1
 8018740:	b2db      	uxtb	r3, r3
 8018742:	b29b      	uxth	r3, r3
 8018744:	4413      	add	r3, r2
 8018746:	b29b      	uxth	r3, r3
 8018748:	3301      	adds	r3, #1
 801874a:	b298      	uxth	r0, r3
 801874c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018750:	b29a      	uxth	r2, r3
 8018752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018756:	b299      	uxth	r1, r3
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	b29b      	uxth	r3, r3
 801875c:	fb11 f303 	smulbb	r3, r1, r3
 8018760:	b29b      	uxth	r3, r3
 8018762:	4413      	add	r3, r2
 8018764:	b29b      	uxth	r3, r3
 8018766:	3301      	adds	r3, #1
 8018768:	b299      	uxth	r1, r3
 801876a:	f107 0214 	add.w	r2, r7, #20
 801876e:	2300      	movs	r3, #0
 8018770:	9301      	str	r3, [sp, #4]
 8018772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018776:	9300      	str	r3, [sp, #0]
 8018778:	4b02      	ldr	r3, [pc, #8]	; (8018784 <updateUint16Item+0x5c4>)
 801877a:	f7f6 fbe3 	bl	800ef44 <Paint_DrawString_EN>
 801877e:	e1da      	b.n	8018b36 <updateUint16Item+0x976>
 8018780:	2400c294 	.word	0x2400c294
 8018784:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 8018788:	4ba1      	ldr	r3, [pc, #644]	; (8018a10 <updateUint16Item+0x850>)
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	2b0b      	cmp	r3, #11
 801878e:	f040 8147 	bne.w	8018a20 <updateUint16Item+0x860>
				{
					if (howToDraw == RIGHT)
 8018792:	79fb      	ldrb	r3, [r7, #7]
 8018794:	2b04      	cmp	r3, #4
 8018796:	f040 808c 	bne.w	80188b2 <updateUint16Item+0x6f2>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801879a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801879e:	b29b      	uxth	r3, r3
 80187a0:	3301      	adds	r3, #1
 80187a2:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80187a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80187a8:	b29a      	uxth	r2, r3
 80187aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80187ae:	b299      	uxth	r1, r3
 80187b0:	69fb      	ldr	r3, [r7, #28]
 80187b2:	b29b      	uxth	r3, r3
 80187b4:	fb11 f303 	smulbb	r3, r1, r3
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	4413      	add	r3, r2
 80187bc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80187be:	3301      	adds	r3, #1
 80187c0:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 80187c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187c6:	b29c      	uxth	r4, r3
 80187c8:	69fb      	ldr	r3, [r7, #28]
 80187ca:	3301      	adds	r3, #1
 80187cc:	011b      	lsls	r3, r3, #4
 80187ce:	4a91      	ldr	r2, [pc, #580]	; (8018a14 <updateUint16Item+0x854>)
 80187d0:	4413      	add	r3, r2
 80187d2:	4618      	mov	r0, r3
 80187d4:	f7e7 fd8e 	bl	80002f4 <strlen>
 80187d8:	4603      	mov	r3, r0
 80187da:	b29a      	uxth	r2, r3
 80187dc:	4b8e      	ldr	r3, [pc, #568]	; (8018a18 <updateUint16Item+0x858>)
 80187de:	889b      	ldrh	r3, [r3, #4]
 80187e0:	fb12 f303 	smulbb	r3, r2, r3
 80187e4:	b29b      	uxth	r3, r3
 80187e6:	4423      	add	r3, r4
 80187e8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80187ea:	3301      	adds	r3, #1
 80187ec:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80187ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80187f2:	b29a      	uxth	r2, r3
 80187f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80187f8:	b299      	uxth	r1, r3
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	b29b      	uxth	r3, r3
 80187fe:	fb11 f303 	smulbb	r3, r1, r3
 8018802:	b29b      	uxth	r3, r3
 8018804:	4413      	add	r3, r2
 8018806:	b29a      	uxth	r2, r3
 8018808:	4b83      	ldr	r3, [pc, #524]	; (8018a18 <updateUint16Item+0x858>)
 801880a:	88db      	ldrh	r3, [r3, #6]
 801880c:	4413      	add	r3, r2
 801880e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018810:	3301      	adds	r3, #1
 8018812:	b29b      	uxth	r3, r3
 8018814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018818:	9200      	str	r2, [sp, #0]
 801881a:	4602      	mov	r2, r0
 801881c:	4631      	mov	r1, r6
 801881e:	4628      	mov	r0, r5
 8018820:	f7f5 ff72 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018828:	b29b      	uxth	r3, r3
 801882a:	3301      	adds	r3, #1
 801882c:	b298      	uxth	r0, r3
 801882e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018832:	b29a      	uxth	r2, r3
 8018834:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018838:	b299      	uxth	r1, r3
 801883a:	69fb      	ldr	r3, [r7, #28]
 801883c:	b29b      	uxth	r3, r3
 801883e:	fb11 f303 	smulbb	r3, r1, r3
 8018842:	b29b      	uxth	r3, r3
 8018844:	4413      	add	r3, r2
 8018846:	b29b      	uxth	r3, r3
 8018848:	3301      	adds	r3, #1
 801884a:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	3301      	adds	r3, #1
 8018850:	011b      	lsls	r3, r3, #4
 8018852:	4a70      	ldr	r2, [pc, #448]	; (8018a14 <updateUint16Item+0x854>)
 8018854:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018856:	2300      	movs	r3, #0
 8018858:	9301      	str	r3, [sp, #4]
 801885a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801885e:	9300      	str	r3, [sp, #0]
 8018860:	4b6d      	ldr	r3, [pc, #436]	; (8018a18 <updateUint16Item+0x858>)
 8018862:	f7f6 fb6f 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801886a:	b29a      	uxth	r2, r3
 801886c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018870:	085b      	lsrs	r3, r3, #1
 8018872:	b2db      	uxtb	r3, r3
 8018874:	b29b      	uxth	r3, r3
 8018876:	4413      	add	r3, r2
 8018878:	b29b      	uxth	r3, r3
 801887a:	3301      	adds	r3, #1
 801887c:	b298      	uxth	r0, r3
 801887e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018882:	b29a      	uxth	r2, r3
 8018884:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018888:	b299      	uxth	r1, r3
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	b29b      	uxth	r3, r3
 801888e:	fb11 f303 	smulbb	r3, r1, r3
 8018892:	b29b      	uxth	r3, r3
 8018894:	4413      	add	r3, r2
 8018896:	b29b      	uxth	r3, r3
 8018898:	3301      	adds	r3, #1
 801889a:	b299      	uxth	r1, r3
 801889c:	f107 0214 	add.w	r2, r7, #20
 80188a0:	2300      	movs	r3, #0
 80188a2:	9301      	str	r3, [sp, #4]
 80188a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80188a8:	9300      	str	r3, [sp, #0]
 80188aa:	4b5b      	ldr	r3, [pc, #364]	; (8018a18 <updateUint16Item+0x858>)
 80188ac:	f7f6 fb4a 	bl	800ef44 <Paint_DrawString_EN>
 80188b0:	e141      	b.n	8018b36 <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 80188b2:	79fb      	ldrb	r3, [r7, #7]
 80188b4:	2b01      	cmp	r3, #1
 80188b6:	d158      	bne.n	801896a <updateUint16Item+0x7aa>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 80188b8:	4b56      	ldr	r3, [pc, #344]	; (8018a14 <updateUint16Item+0x854>)
 80188ba:	899a      	ldrh	r2, [r3, #12]
 80188bc:	4b55      	ldr	r3, [pc, #340]	; (8018a14 <updateUint16Item+0x854>)
 80188be:	891b      	ldrh	r3, [r3, #8]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d21f      	bcs.n	8018904 <updateUint16Item+0x744>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 80188c4:	4b53      	ldr	r3, [pc, #332]	; (8018a14 <updateUint16Item+0x854>)
 80188c6:	891b      	ldrh	r3, [r3, #8]
 80188c8:	461a      	mov	r2, r3
 80188ca:	4b52      	ldr	r3, [pc, #328]	; (8018a14 <updateUint16Item+0x854>)
 80188cc:	899b      	ldrh	r3, [r3, #12]
 80188ce:	1ad3      	subs	r3, r2, r3
 80188d0:	ee07 3a90 	vmov	s15, r3
 80188d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80188d8:	4b4e      	ldr	r3, [pc, #312]	; (8018a14 <updateUint16Item+0x854>)
 80188da:	889b      	ldrh	r3, [r3, #4]
 80188dc:	ee06 3a90 	vmov	s13, r3
 80188e0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80188e4:	eeb0 1b46 	vmov.f64	d1, d6
 80188e8:	eeb0 0b47 	vmov.f64	d0, d7
 80188ec:	f007 fa4e 	bl	801fd8c <fmax>
 80188f0:	eeb0 7b40 	vmov.f64	d7, d0
 80188f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80188f8:	ee17 3a90 	vmov	r3, s15
 80188fc:	b29a      	uxth	r2, r3
 80188fe:	4b45      	ldr	r3, [pc, #276]	; (8018a14 <updateUint16Item+0x854>)
 8018900:	811a      	strh	r2, [r3, #8]
 8018902:	e003      	b.n	801890c <updateUint16Item+0x74c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 8018904:	4b43      	ldr	r3, [pc, #268]	; (8018a14 <updateUint16Item+0x854>)
 8018906:	889a      	ldrh	r2, [r3, #4]
 8018908:	4b42      	ldr	r3, [pc, #264]	; (8018a14 <updateUint16Item+0x854>)
 801890a:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 801890c:	4b41      	ldr	r3, [pc, #260]	; (8018a14 <updateUint16Item+0x854>)
 801890e:	891b      	ldrh	r3, [r3, #8]
 8018910:	461a      	mov	r2, r3
 8018912:	f107 0314 	add.w	r3, r7, #20
 8018916:	4941      	ldr	r1, [pc, #260]	; (8018a1c <updateUint16Item+0x85c>)
 8018918:	4618      	mov	r0, r3
 801891a:	f003 feaf 	bl	801c67c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801891e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018922:	b29a      	uxth	r2, r3
 8018924:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018928:	085b      	lsrs	r3, r3, #1
 801892a:	b2db      	uxtb	r3, r3
 801892c:	b29b      	uxth	r3, r3
 801892e:	4413      	add	r3, r2
 8018930:	b29b      	uxth	r3, r3
 8018932:	3301      	adds	r3, #1
 8018934:	b298      	uxth	r0, r3
 8018936:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801893a:	b29a      	uxth	r2, r3
 801893c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018940:	b299      	uxth	r1, r3
 8018942:	69fb      	ldr	r3, [r7, #28]
 8018944:	b29b      	uxth	r3, r3
 8018946:	fb11 f303 	smulbb	r3, r1, r3
 801894a:	b29b      	uxth	r3, r3
 801894c:	4413      	add	r3, r2
 801894e:	b29b      	uxth	r3, r3
 8018950:	3301      	adds	r3, #1
 8018952:	b299      	uxth	r1, r3
 8018954:	f107 0214 	add.w	r2, r7, #20
 8018958:	2300      	movs	r3, #0
 801895a:	9301      	str	r3, [sp, #4]
 801895c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018960:	9300      	str	r3, [sp, #0]
 8018962:	4b2d      	ldr	r3, [pc, #180]	; (8018a18 <updateUint16Item+0x858>)
 8018964:	f7f6 faee 	bl	800ef44 <Paint_DrawString_EN>
 8018968:	e0e5      	b.n	8018b36 <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 801896a:	79fb      	ldrb	r3, [r7, #7]
 801896c:	2b00      	cmp	r3, #0
 801896e:	f040 80e2 	bne.w	8018b36 <updateUint16Item+0x976>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 8018972:	4b28      	ldr	r3, [pc, #160]	; (8018a14 <updateUint16Item+0x854>)
 8018974:	891b      	ldrh	r3, [r3, #8]
 8018976:	461a      	mov	r2, r3
 8018978:	4b26      	ldr	r3, [pc, #152]	; (8018a14 <updateUint16Item+0x854>)
 801897a:	899b      	ldrh	r3, [r3, #12]
 801897c:	4413      	add	r3, r2
 801897e:	ee07 3a90 	vmov	s15, r3
 8018982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018986:	4b23      	ldr	r3, [pc, #140]	; (8018a14 <updateUint16Item+0x854>)
 8018988:	88db      	ldrh	r3, [r3, #6]
 801898a:	ee06 3a90 	vmov	s13, r3
 801898e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018992:	eeb0 1b46 	vmov.f64	d1, d6
 8018996:	eeb0 0b47 	vmov.f64	d0, d7
 801899a:	f007 fa12 	bl	801fdc2 <fmin>
 801899e:	eeb0 7b40 	vmov.f64	d7, d0
 80189a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80189a6:	ee17 3a90 	vmov	r3, s15
 80189aa:	b29a      	uxth	r2, r3
 80189ac:	4b19      	ldr	r3, [pc, #100]	; (8018a14 <updateUint16Item+0x854>)
 80189ae:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 80189b0:	4b18      	ldr	r3, [pc, #96]	; (8018a14 <updateUint16Item+0x854>)
 80189b2:	891b      	ldrh	r3, [r3, #8]
 80189b4:	461a      	mov	r2, r3
 80189b6:	f107 0314 	add.w	r3, r7, #20
 80189ba:	4918      	ldr	r1, [pc, #96]	; (8018a1c <updateUint16Item+0x85c>)
 80189bc:	4618      	mov	r0, r3
 80189be:	f003 fe5d 	bl	801c67c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80189c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189c6:	b29a      	uxth	r2, r3
 80189c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80189cc:	085b      	lsrs	r3, r3, #1
 80189ce:	b2db      	uxtb	r3, r3
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	4413      	add	r3, r2
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	3301      	adds	r3, #1
 80189d8:	b298      	uxth	r0, r3
 80189da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189de:	b29a      	uxth	r2, r3
 80189e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80189e4:	b299      	uxth	r1, r3
 80189e6:	69fb      	ldr	r3, [r7, #28]
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	fb11 f303 	smulbb	r3, r1, r3
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	4413      	add	r3, r2
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	3301      	adds	r3, #1
 80189f6:	b299      	uxth	r1, r3
 80189f8:	f107 0214 	add.w	r2, r7, #20
 80189fc:	2300      	movs	r3, #0
 80189fe:	9301      	str	r3, [sp, #4]
 8018a00:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018a04:	9300      	str	r3, [sp, #0]
 8018a06:	4b04      	ldr	r3, [pc, #16]	; (8018a18 <updateUint16Item+0x858>)
 8018a08:	f7f6 fa9c 	bl	800ef44 <Paint_DrawString_EN>
 8018a0c:	e093      	b.n	8018b36 <updateUint16Item+0x976>
 8018a0e:	bf00      	nop
 8018a10:	2400b09c 	.word	0x2400b09c
 8018a14:	2400c294 	.word	0x2400c294
 8018a18:	24000030 	.word	0x24000030
 8018a1c:	080205cc 	.word	0x080205cc
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8018a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	3301      	adds	r3, #1
 8018a28:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018a2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a2e:	b29a      	uxth	r2, r3
 8018a30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018a34:	b299      	uxth	r1, r3
 8018a36:	69fb      	ldr	r3, [r7, #28]
 8018a38:	b29b      	uxth	r3, r3
 8018a3a:	fb11 f303 	smulbb	r3, r1, r3
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	4413      	add	r3, r2
 8018a42:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8018a44:	3301      	adds	r3, #1
 8018a46:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a4c:	b29c      	uxth	r4, r3
 8018a4e:	69fb      	ldr	r3, [r7, #28]
 8018a50:	3301      	adds	r3, #1
 8018a52:	011b      	lsls	r3, r3, #4
 8018a54:	4a93      	ldr	r2, [pc, #588]	; (8018ca4 <updateUint16Item+0xae4>)
 8018a56:	4413      	add	r3, r2
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f7e7 fc4b 	bl	80002f4 <strlen>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	b29a      	uxth	r2, r3
 8018a62:	4b91      	ldr	r3, [pc, #580]	; (8018ca8 <updateUint16Item+0xae8>)
 8018a64:	889b      	ldrh	r3, [r3, #4]
 8018a66:	fb12 f303 	smulbb	r3, r2, r3
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	4423      	add	r3, r4
 8018a6e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8018a70:	3301      	adds	r3, #1
 8018a72:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a78:	b29a      	uxth	r2, r3
 8018a7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018a7e:	b299      	uxth	r1, r3
 8018a80:	69fb      	ldr	r3, [r7, #28]
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	fb11 f303 	smulbb	r3, r1, r3
 8018a88:	b29b      	uxth	r3, r3
 8018a8a:	4413      	add	r3, r2
 8018a8c:	b29a      	uxth	r2, r3
 8018a8e:	4b86      	ldr	r3, [pc, #536]	; (8018ca8 <updateUint16Item+0xae8>)
 8018a90:	88db      	ldrh	r3, [r3, #6]
 8018a92:	4413      	add	r3, r2
 8018a94:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8018a96:	3301      	adds	r3, #1
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a9e:	9200      	str	r2, [sp, #0]
 8018aa0:	4602      	mov	r2, r0
 8018aa2:	4631      	mov	r1, r6
 8018aa4:	4628      	mov	r0, r5
 8018aa6:	f7f5 fe2f 	bl	800e708 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aae:	b29b      	uxth	r3, r3
 8018ab0:	3301      	adds	r3, #1
 8018ab2:	b298      	uxth	r0, r3
 8018ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ab8:	b29a      	uxth	r2, r3
 8018aba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018abe:	b299      	uxth	r1, r3
 8018ac0:	69fb      	ldr	r3, [r7, #28]
 8018ac2:	b29b      	uxth	r3, r3
 8018ac4:	fb11 f303 	smulbb	r3, r1, r3
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	4413      	add	r3, r2
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	3301      	adds	r3, #1
 8018ad0:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8018ad2:	69fb      	ldr	r3, [r7, #28]
 8018ad4:	3301      	adds	r3, #1
 8018ad6:	011b      	lsls	r3, r3, #4
 8018ad8:	4a72      	ldr	r2, [pc, #456]	; (8018ca4 <updateUint16Item+0xae4>)
 8018ada:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018adc:	2300      	movs	r3, #0
 8018ade:	9301      	str	r3, [sp, #4]
 8018ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ae4:	9300      	str	r3, [sp, #0]
 8018ae6:	4b70      	ldr	r3, [pc, #448]	; (8018ca8 <updateUint16Item+0xae8>)
 8018ae8:	f7f6 fa2c 	bl	800ef44 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018af0:	b29a      	uxth	r2, r3
 8018af2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018af6:	085b      	lsrs	r3, r3, #1
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	4413      	add	r3, r2
 8018afe:	b29b      	uxth	r3, r3
 8018b00:	3301      	adds	r3, #1
 8018b02:	b298      	uxth	r0, r3
 8018b04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b08:	b29a      	uxth	r2, r3
 8018b0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018b0e:	b299      	uxth	r1, r3
 8018b10:	69fb      	ldr	r3, [r7, #28]
 8018b12:	b29b      	uxth	r3, r3
 8018b14:	fb11 f303 	smulbb	r3, r1, r3
 8018b18:	b29b      	uxth	r3, r3
 8018b1a:	4413      	add	r3, r2
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	3301      	adds	r3, #1
 8018b20:	b299      	uxth	r1, r3
 8018b22:	f107 0214 	add.w	r2, r7, #20
 8018b26:	2300      	movs	r3, #0
 8018b28:	9301      	str	r3, [sp, #4]
 8018b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	4b5d      	ldr	r3, [pc, #372]	; (8018ca8 <updateUint16Item+0xae8>)
 8018b32:	f7f6 fa07 	bl	800ef44 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 8018b36:	69fb      	ldr	r3, [r7, #28]
 8018b38:	2b03      	cmp	r3, #3
 8018b3a:	f040 83bc 	bne.w	80192b6 <updateUint16Item+0x10f6>
			{
				char localString[8] = "";
 8018b3e:	2300      	movs	r3, #0
 8018b40:	60fb      	str	r3, [r7, #12]
 8018b42:	2300      	movs	r3, #0
 8018b44:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 8018b46:	4b57      	ldr	r3, [pc, #348]	; (8018ca4 <updateUint16Item+0xae4>)
 8018b48:	899b      	ldrh	r3, [r3, #12]
 8018b4a:	461a      	mov	r2, r3
 8018b4c:	f107 030c 	add.w	r3, r7, #12
 8018b50:	4956      	ldr	r1, [pc, #344]	; (8018cac <updateUint16Item+0xaec>)
 8018b52:	4618      	mov	r0, r3
 8018b54:	f003 fd92 	bl	801c67c <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 8018b58:	4b55      	ldr	r3, [pc, #340]	; (8018cb0 <updateUint16Item+0xaf0>)
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	2b03      	cmp	r3, #3
 8018b5e:	f040 81cd 	bne.w	8018efc <updateUint16Item+0xd3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8018b62:	79fb      	ldrb	r3, [r7, #7]
 8018b64:	2b03      	cmp	r3, #3
 8018b66:	d003      	beq.n	8018b70 <updateUint16Item+0x9b0>
 8018b68:	79fb      	ldrb	r3, [r7, #7]
 8018b6a:	2b02      	cmp	r3, #2
 8018b6c:	f040 80a2 	bne.w	8018cb4 <updateUint16Item+0xaf4>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b74:	b29b      	uxth	r3, r3
 8018b76:	3301      	adds	r3, #1
 8018b78:	b298      	uxth	r0, r3
 8018b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b7e:	b29a      	uxth	r2, r3
 8018b80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018b84:	b299      	uxth	r1, r3
 8018b86:	69fb      	ldr	r3, [r7, #28]
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	fb11 f303 	smulbb	r3, r1, r3
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	4413      	add	r3, r2
 8018b92:	b29b      	uxth	r3, r3
 8018b94:	3301      	adds	r3, #1
 8018b96:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8018b98:	69fb      	ldr	r3, [r7, #28]
 8018b9a:	3301      	adds	r3, #1
 8018b9c:	011b      	lsls	r3, r3, #4
 8018b9e:	4a41      	ldr	r2, [pc, #260]	; (8018ca4 <updateUint16Item+0xae4>)
 8018ba0:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	9301      	str	r3, [sp, #4]
 8018ba6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018baa:	9300      	str	r3, [sp, #0]
 8018bac:	4b3e      	ldr	r3, [pc, #248]	; (8018ca8 <updateUint16Item+0xae8>)
 8018bae:	f7f6 f9c9 	bl	800ef44 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bb6:	b29a      	uxth	r2, r3
 8018bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018bbc:	085b      	lsrs	r3, r3, #1
 8018bbe:	b2db      	uxtb	r3, r3
 8018bc0:	b29b      	uxth	r3, r3
 8018bc2:	4413      	add	r3, r2
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	3301      	adds	r3, #1
 8018bc8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018bca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bce:	b29a      	uxth	r2, r3
 8018bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018bd4:	b299      	uxth	r1, r3
 8018bd6:	69fb      	ldr	r3, [r7, #28]
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	fb11 f303 	smulbb	r3, r1, r3
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	4413      	add	r3, r2
 8018be2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018be4:	3301      	adds	r3, #1
 8018be6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bec:	b29a      	uxth	r2, r3
 8018bee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018bf2:	085b      	lsrs	r3, r3, #1
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	4413      	add	r3, r2
 8018bfa:	b29c      	uxth	r4, r3
 8018bfc:	69fb      	ldr	r3, [r7, #28]
 8018bfe:	3301      	adds	r3, #1
 8018c00:	011b      	lsls	r3, r3, #4
 8018c02:	4a28      	ldr	r2, [pc, #160]	; (8018ca4 <updateUint16Item+0xae4>)
 8018c04:	4413      	add	r3, r2
 8018c06:	4618      	mov	r0, r3
 8018c08:	f7e7 fb74 	bl	80002f4 <strlen>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	b29a      	uxth	r2, r3
 8018c10:	4b25      	ldr	r3, [pc, #148]	; (8018ca8 <updateUint16Item+0xae8>)
 8018c12:	889b      	ldrh	r3, [r3, #4]
 8018c14:	fb12 f303 	smulbb	r3, r2, r3
 8018c18:	b29b      	uxth	r3, r3
 8018c1a:	4423      	add	r3, r4
 8018c1c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018c1e:	3301      	adds	r3, #1
 8018c20:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018c22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018c2c:	b299      	uxth	r1, r3
 8018c2e:	69fb      	ldr	r3, [r7, #28]
 8018c30:	b29b      	uxth	r3, r3
 8018c32:	fb11 f303 	smulbb	r3, r1, r3
 8018c36:	b29b      	uxth	r3, r3
 8018c38:	4413      	add	r3, r2
 8018c3a:	b29a      	uxth	r2, r3
 8018c3c:	4b1a      	ldr	r3, [pc, #104]	; (8018ca8 <updateUint16Item+0xae8>)
 8018c3e:	88db      	ldrh	r3, [r3, #6]
 8018c40:	4413      	add	r3, r2
 8018c42:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018c44:	3301      	adds	r3, #1
 8018c46:	b29b      	uxth	r3, r3
 8018c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c4c:	9200      	str	r2, [sp, #0]
 8018c4e:	4602      	mov	r2, r0
 8018c50:	4631      	mov	r1, r6
 8018c52:	4628      	mov	r0, r5
 8018c54:	f7f5 fd58 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c5c:	b29a      	uxth	r2, r3
 8018c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c62:	085b      	lsrs	r3, r3, #1
 8018c64:	b2db      	uxtb	r3, r3
 8018c66:	b29b      	uxth	r3, r3
 8018c68:	4413      	add	r3, r2
 8018c6a:	b29b      	uxth	r3, r3
 8018c6c:	3301      	adds	r3, #1
 8018c6e:	b298      	uxth	r0, r3
 8018c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018c74:	b29a      	uxth	r2, r3
 8018c76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018c7a:	b299      	uxth	r1, r3
 8018c7c:	69fb      	ldr	r3, [r7, #28]
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	fb11 f303 	smulbb	r3, r1, r3
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	4413      	add	r3, r2
 8018c88:	b29b      	uxth	r3, r3
 8018c8a:	3301      	adds	r3, #1
 8018c8c:	b299      	uxth	r1, r3
 8018c8e:	f107 020c 	add.w	r2, r7, #12
 8018c92:	2300      	movs	r3, #0
 8018c94:	9301      	str	r3, [sp, #4]
 8018c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c9a:	9300      	str	r3, [sp, #0]
 8018c9c:	4b02      	ldr	r3, [pc, #8]	; (8018ca8 <updateUint16Item+0xae8>)
 8018c9e:	f7f6 f951 	bl	800ef44 <Paint_DrawString_EN>
 8018ca2:	e308      	b.n	80192b6 <updateUint16Item+0x10f6>
 8018ca4:	2400c294 	.word	0x2400c294
 8018ca8:	24000030 	.word	0x24000030
 8018cac:	080205cc 	.word	0x080205cc
 8018cb0:	2400b09c 	.word	0x2400b09c
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8018cb4:	79fb      	ldrb	r3, [r7, #7]
 8018cb6:	2b01      	cmp	r3, #1
 8018cb8:	f040 808c 	bne.w	8018dd4 <updateUint16Item+0xc14>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	3301      	adds	r3, #1
 8018cc4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018cc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018cd0:	b299      	uxth	r1, r3
 8018cd2:	69fb      	ldr	r3, [r7, #28]
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	fb11 f303 	smulbb	r3, r1, r3
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	4413      	add	r3, r2
 8018cde:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018ce0:	3301      	adds	r3, #1
 8018ce2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ce8:	b29c      	uxth	r4, r3
 8018cea:	69fb      	ldr	r3, [r7, #28]
 8018cec:	3301      	adds	r3, #1
 8018cee:	011b      	lsls	r3, r3, #4
 8018cf0:	4a80      	ldr	r2, [pc, #512]	; (8018ef4 <updateUint16Item+0xd34>)
 8018cf2:	4413      	add	r3, r2
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f7e7 fafd 	bl	80002f4 <strlen>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	4b7e      	ldr	r3, [pc, #504]	; (8018ef8 <updateUint16Item+0xd38>)
 8018d00:	889b      	ldrh	r3, [r3, #4]
 8018d02:	fb12 f303 	smulbb	r3, r2, r3
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	4423      	add	r3, r4
 8018d0a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018d0c:	3301      	adds	r3, #1
 8018d0e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018d10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018d14:	b29a      	uxth	r2, r3
 8018d16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018d1a:	b299      	uxth	r1, r3
 8018d1c:	69fb      	ldr	r3, [r7, #28]
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	fb11 f303 	smulbb	r3, r1, r3
 8018d24:	b29b      	uxth	r3, r3
 8018d26:	4413      	add	r3, r2
 8018d28:	b29a      	uxth	r2, r3
 8018d2a:	4b73      	ldr	r3, [pc, #460]	; (8018ef8 <updateUint16Item+0xd38>)
 8018d2c:	88db      	ldrh	r3, [r3, #6]
 8018d2e:	4413      	add	r3, r2
 8018d30:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018d32:	3301      	adds	r3, #1
 8018d34:	b29b      	uxth	r3, r3
 8018d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d3a:	9200      	str	r2, [sp, #0]
 8018d3c:	4602      	mov	r2, r0
 8018d3e:	4631      	mov	r1, r6
 8018d40:	4628      	mov	r0, r5
 8018d42:	f7f5 fce1 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d4a:	b29b      	uxth	r3, r3
 8018d4c:	3301      	adds	r3, #1
 8018d4e:	b298      	uxth	r0, r3
 8018d50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018d54:	b29a      	uxth	r2, r3
 8018d56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018d5a:	b299      	uxth	r1, r3
 8018d5c:	69fb      	ldr	r3, [r7, #28]
 8018d5e:	b29b      	uxth	r3, r3
 8018d60:	fb11 f303 	smulbb	r3, r1, r3
 8018d64:	b29b      	uxth	r3, r3
 8018d66:	4413      	add	r3, r2
 8018d68:	b29b      	uxth	r3, r3
 8018d6a:	3301      	adds	r3, #1
 8018d6c:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8018d6e:	69fb      	ldr	r3, [r7, #28]
 8018d70:	3301      	adds	r3, #1
 8018d72:	011b      	lsls	r3, r3, #4
 8018d74:	4a5f      	ldr	r2, [pc, #380]	; (8018ef4 <updateUint16Item+0xd34>)
 8018d76:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018d78:	2300      	movs	r3, #0
 8018d7a:	9301      	str	r3, [sp, #4]
 8018d7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018d80:	9300      	str	r3, [sp, #0]
 8018d82:	4b5d      	ldr	r3, [pc, #372]	; (8018ef8 <updateUint16Item+0xd38>)
 8018d84:	f7f6 f8de 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018d92:	085b      	lsrs	r3, r3, #1
 8018d94:	b2db      	uxtb	r3, r3
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	4413      	add	r3, r2
 8018d9a:	b29b      	uxth	r3, r3
 8018d9c:	3301      	adds	r3, #1
 8018d9e:	b298      	uxth	r0, r3
 8018da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018da4:	b29a      	uxth	r2, r3
 8018da6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018daa:	b299      	uxth	r1, r3
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	fb11 f303 	smulbb	r3, r1, r3
 8018db4:	b29b      	uxth	r3, r3
 8018db6:	4413      	add	r3, r2
 8018db8:	b29b      	uxth	r3, r3
 8018dba:	3301      	adds	r3, #1
 8018dbc:	b299      	uxth	r1, r3
 8018dbe:	f107 020c 	add.w	r2, r7, #12
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	9301      	str	r3, [sp, #4]
 8018dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	4b4a      	ldr	r3, [pc, #296]	; (8018ef8 <updateUint16Item+0xd38>)
 8018dce:	f7f6 f8b9 	bl	800ef44 <Paint_DrawString_EN>
 8018dd2:	e270      	b.n	80192b6 <updateUint16Item+0x10f6>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 8018dd4:	79fb      	ldrb	r3, [r7, #7]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	f040 826d 	bne.w	80192b6 <updateUint16Item+0x10f6>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018de0:	b29b      	uxth	r3, r3
 8018de2:	3301      	adds	r3, #1
 8018de4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018df0:	b299      	uxth	r1, r3
 8018df2:	69fb      	ldr	r3, [r7, #28]
 8018df4:	b29b      	uxth	r3, r3
 8018df6:	fb11 f303 	smulbb	r3, r1, r3
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	4413      	add	r3, r2
 8018dfe:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018e00:	3301      	adds	r3, #1
 8018e02:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e08:	b29c      	uxth	r4, r3
 8018e0a:	69fb      	ldr	r3, [r7, #28]
 8018e0c:	3301      	adds	r3, #1
 8018e0e:	011b      	lsls	r3, r3, #4
 8018e10:	4a38      	ldr	r2, [pc, #224]	; (8018ef4 <updateUint16Item+0xd34>)
 8018e12:	4413      	add	r3, r2
 8018e14:	4618      	mov	r0, r3
 8018e16:	f7e7 fa6d 	bl	80002f4 <strlen>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	4b36      	ldr	r3, [pc, #216]	; (8018ef8 <updateUint16Item+0xd38>)
 8018e20:	889b      	ldrh	r3, [r3, #4]
 8018e22:	fb12 f303 	smulbb	r3, r2, r3
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	4423      	add	r3, r4
 8018e2a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018e2c:	3301      	adds	r3, #1
 8018e2e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e34:	b29a      	uxth	r2, r3
 8018e36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018e3a:	b299      	uxth	r1, r3
 8018e3c:	69fb      	ldr	r3, [r7, #28]
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	fb11 f303 	smulbb	r3, r1, r3
 8018e44:	b29b      	uxth	r3, r3
 8018e46:	4413      	add	r3, r2
 8018e48:	b29a      	uxth	r2, r3
 8018e4a:	4b2b      	ldr	r3, [pc, #172]	; (8018ef8 <updateUint16Item+0xd38>)
 8018e4c:	88db      	ldrh	r3, [r3, #6]
 8018e4e:	4413      	add	r3, r2
 8018e50:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018e52:	3301      	adds	r3, #1
 8018e54:	b29b      	uxth	r3, r3
 8018e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e5a:	9200      	str	r2, [sp, #0]
 8018e5c:	4602      	mov	r2, r0
 8018e5e:	4631      	mov	r1, r6
 8018e60:	4628      	mov	r0, r5
 8018e62:	f7f5 fc51 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	b298      	uxth	r0, r3
 8018e70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e74:	b29a      	uxth	r2, r3
 8018e76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018e7a:	b299      	uxth	r1, r3
 8018e7c:	69fb      	ldr	r3, [r7, #28]
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	fb11 f303 	smulbb	r3, r1, r3
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	4413      	add	r3, r2
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	3301      	adds	r3, #1
 8018e8c:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8018e8e:	69fb      	ldr	r3, [r7, #28]
 8018e90:	3301      	adds	r3, #1
 8018e92:	011b      	lsls	r3, r3, #4
 8018e94:	4a17      	ldr	r2, [pc, #92]	; (8018ef4 <updateUint16Item+0xd34>)
 8018e96:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018e98:	2300      	movs	r3, #0
 8018e9a:	9301      	str	r3, [sp, #4]
 8018e9c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018ea0:	9300      	str	r3, [sp, #0]
 8018ea2:	4b15      	ldr	r3, [pc, #84]	; (8018ef8 <updateUint16Item+0xd38>)
 8018ea4:	f7f6 f84e 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018eac:	b29a      	uxth	r2, r3
 8018eae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018eb2:	085b      	lsrs	r3, r3, #1
 8018eb4:	b2db      	uxtb	r3, r3
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	4413      	add	r3, r2
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	3301      	adds	r3, #1
 8018ebe:	b298      	uxth	r0, r3
 8018ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ec4:	b29a      	uxth	r2, r3
 8018ec6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018eca:	b299      	uxth	r1, r3
 8018ecc:	69fb      	ldr	r3, [r7, #28]
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	fb11 f303 	smulbb	r3, r1, r3
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	4413      	add	r3, r2
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	3301      	adds	r3, #1
 8018edc:	b299      	uxth	r1, r3
 8018ede:	f107 020c 	add.w	r2, r7, #12
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	9301      	str	r3, [sp, #4]
 8018ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018eea:	9300      	str	r3, [sp, #0]
 8018eec:	4b02      	ldr	r3, [pc, #8]	; (8018ef8 <updateUint16Item+0xd38>)
 8018eee:	f7f6 f829 	bl	800ef44 <Paint_DrawString_EN>
 8018ef2:	e1e0      	b.n	80192b6 <updateUint16Item+0x10f6>
 8018ef4:	2400c294 	.word	0x2400c294
 8018ef8:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 8018efc:	4ba2      	ldr	r3, [pc, #648]	; (8019188 <updateUint16Item+0xfc8>)
 8018efe:	781b      	ldrb	r3, [r3, #0]
 8018f00:	2b0c      	cmp	r3, #12
 8018f02:	f040 814d 	bne.w	80191a0 <updateUint16Item+0xfe0>
				{
					if (howToDraw == RIGHT)
 8018f06:	79fb      	ldrb	r3, [r7, #7]
 8018f08:	2b04      	cmp	r3, #4
 8018f0a:	f040 808c 	bne.w	8019026 <updateUint16Item+0xe66>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f12:	b29b      	uxth	r3, r3
 8018f14:	3301      	adds	r3, #1
 8018f16:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f1c:	b29a      	uxth	r2, r3
 8018f1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018f22:	b299      	uxth	r1, r3
 8018f24:	69fb      	ldr	r3, [r7, #28]
 8018f26:	b29b      	uxth	r3, r3
 8018f28:	fb11 f303 	smulbb	r3, r1, r3
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	4413      	add	r3, r2
 8018f30:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018f32:	3301      	adds	r3, #1
 8018f34:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f3a:	b29c      	uxth	r4, r3
 8018f3c:	69fb      	ldr	r3, [r7, #28]
 8018f3e:	3301      	adds	r3, #1
 8018f40:	011b      	lsls	r3, r3, #4
 8018f42:	4a92      	ldr	r2, [pc, #584]	; (801918c <updateUint16Item+0xfcc>)
 8018f44:	4413      	add	r3, r2
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7e7 f9d4 	bl	80002f4 <strlen>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	b29a      	uxth	r2, r3
 8018f50:	4b8f      	ldr	r3, [pc, #572]	; (8019190 <updateUint16Item+0xfd0>)
 8018f52:	889b      	ldrh	r3, [r3, #4]
 8018f54:	fb12 f303 	smulbb	r3, r2, r3
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	4423      	add	r3, r4
 8018f5c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018f5e:	3301      	adds	r3, #1
 8018f60:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018f6c:	b299      	uxth	r1, r3
 8018f6e:	69fb      	ldr	r3, [r7, #28]
 8018f70:	b29b      	uxth	r3, r3
 8018f72:	fb11 f303 	smulbb	r3, r1, r3
 8018f76:	b29b      	uxth	r3, r3
 8018f78:	4413      	add	r3, r2
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	4b84      	ldr	r3, [pc, #528]	; (8019190 <updateUint16Item+0xfd0>)
 8018f7e:	88db      	ldrh	r3, [r3, #6]
 8018f80:	4413      	add	r3, r2
 8018f82:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018f84:	3301      	adds	r3, #1
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f8c:	9200      	str	r2, [sp, #0]
 8018f8e:	4602      	mov	r2, r0
 8018f90:	4631      	mov	r1, r6
 8018f92:	4628      	mov	r0, r5
 8018f94:	f7f5 fbb8 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f9c:	b29b      	uxth	r3, r3
 8018f9e:	3301      	adds	r3, #1
 8018fa0:	b298      	uxth	r0, r3
 8018fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fa6:	b29a      	uxth	r2, r3
 8018fa8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018fac:	b299      	uxth	r1, r3
 8018fae:	69fb      	ldr	r3, [r7, #28]
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	fb11 f303 	smulbb	r3, r1, r3
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	4413      	add	r3, r2
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	3301      	adds	r3, #1
 8018fbe:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8018fc0:	69fb      	ldr	r3, [r7, #28]
 8018fc2:	3301      	adds	r3, #1
 8018fc4:	011b      	lsls	r3, r3, #4
 8018fc6:	4a71      	ldr	r2, [pc, #452]	; (801918c <updateUint16Item+0xfcc>)
 8018fc8:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018fca:	2300      	movs	r3, #0
 8018fcc:	9301      	str	r3, [sp, #4]
 8018fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018fd2:	9300      	str	r3, [sp, #0]
 8018fd4:	4b6e      	ldr	r3, [pc, #440]	; (8019190 <updateUint16Item+0xfd0>)
 8018fd6:	f7f5 ffb5 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018fde:	b29a      	uxth	r2, r3
 8018fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018fe4:	085b      	lsrs	r3, r3, #1
 8018fe6:	b2db      	uxtb	r3, r3
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	4413      	add	r3, r2
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	3301      	adds	r3, #1
 8018ff0:	b298      	uxth	r0, r3
 8018ff2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ff6:	b29a      	uxth	r2, r3
 8018ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018ffc:	b299      	uxth	r1, r3
 8018ffe:	69fb      	ldr	r3, [r7, #28]
 8019000:	b29b      	uxth	r3, r3
 8019002:	fb11 f303 	smulbb	r3, r1, r3
 8019006:	b29b      	uxth	r3, r3
 8019008:	4413      	add	r3, r2
 801900a:	b29b      	uxth	r3, r3
 801900c:	3301      	adds	r3, #1
 801900e:	b299      	uxth	r1, r3
 8019010:	f107 020c 	add.w	r2, r7, #12
 8019014:	2300      	movs	r3, #0
 8019016:	9301      	str	r3, [sp, #4]
 8019018:	f24c 6318 	movw	r3, #50712	; 0xc618
 801901c:	9300      	str	r3, [sp, #0]
 801901e:	4b5c      	ldr	r3, [pc, #368]	; (8019190 <updateUint16Item+0xfd0>)
 8019020:	f7f5 ff90 	bl	800ef44 <Paint_DrawString_EN>
 8019024:	e147      	b.n	80192b6 <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019026:	79fb      	ldrb	r3, [r7, #7]
 8019028:	2b01      	cmp	r3, #1
 801902a:	d155      	bne.n	80190d8 <updateUint16Item+0xf18>
					{
						if (multiplierIndex >= 1)
 801902c:	4b59      	ldr	r3, [pc, #356]	; (8019194 <updateUint16Item+0xfd4>)
 801902e:	781b      	ldrb	r3, [r3, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d017      	beq.n	8019064 <updateUint16Item+0xea4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 8019034:	4b57      	ldr	r3, [pc, #348]	; (8019194 <updateUint16Item+0xfd4>)
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	3b01      	subs	r3, #1
 801903a:	ee07 3a90 	vmov	s15, r3
 801903e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019042:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8019180 <updateUint16Item+0xfc0>
 8019046:	eeb0 0b47 	vmov.f64	d0, d7
 801904a:	f006 fe9f 	bl	801fd8c <fmax>
 801904e:	eeb0 7b40 	vmov.f64	d7, d0
 8019052:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019056:	edc7 7a00 	vstr	s15, [r7]
 801905a:	683b      	ldr	r3, [r7, #0]
 801905c:	b2da      	uxtb	r2, r3
 801905e:	4b4d      	ldr	r3, [pc, #308]	; (8019194 <updateUint16Item+0xfd4>)
 8019060:	701a      	strb	r2, [r3, #0]
 8019062:	e002      	b.n	801906a <updateUint16Item+0xeaa>
						}
						else
						{
							multiplierIndex = 0;
 8019064:	4b4b      	ldr	r3, [pc, #300]	; (8019194 <updateUint16Item+0xfd4>)
 8019066:	2200      	movs	r2, #0
 8019068:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 801906a:	4b4a      	ldr	r3, [pc, #296]	; (8019194 <updateUint16Item+0xfd4>)
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	461a      	mov	r2, r3
 8019070:	4b49      	ldr	r3, [pc, #292]	; (8019198 <updateUint16Item+0xfd8>)
 8019072:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8019076:	4b45      	ldr	r3, [pc, #276]	; (801918c <updateUint16Item+0xfcc>)
 8019078:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 801907a:	4b44      	ldr	r3, [pc, #272]	; (801918c <updateUint16Item+0xfcc>)
 801907c:	899b      	ldrh	r3, [r3, #12]
 801907e:	461a      	mov	r2, r3
 8019080:	f107 030c 	add.w	r3, r7, #12
 8019084:	4945      	ldr	r1, [pc, #276]	; (801919c <updateUint16Item+0xfdc>)
 8019086:	4618      	mov	r0, r3
 8019088:	f003 faf8 	bl	801c67c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801908c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019090:	b29a      	uxth	r2, r3
 8019092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019096:	085b      	lsrs	r3, r3, #1
 8019098:	b2db      	uxtb	r3, r3
 801909a:	b29b      	uxth	r3, r3
 801909c:	4413      	add	r3, r2
 801909e:	b29b      	uxth	r3, r3
 80190a0:	3301      	adds	r3, #1
 80190a2:	b298      	uxth	r0, r3
 80190a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190a8:	b29a      	uxth	r2, r3
 80190aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80190ae:	b299      	uxth	r1, r3
 80190b0:	69fb      	ldr	r3, [r7, #28]
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	fb11 f303 	smulbb	r3, r1, r3
 80190b8:	b29b      	uxth	r3, r3
 80190ba:	4413      	add	r3, r2
 80190bc:	b29b      	uxth	r3, r3
 80190be:	3301      	adds	r3, #1
 80190c0:	b299      	uxth	r1, r3
 80190c2:	f107 020c 	add.w	r2, r7, #12
 80190c6:	2300      	movs	r3, #0
 80190c8:	9301      	str	r3, [sp, #4]
 80190ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80190ce:	9300      	str	r3, [sp, #0]
 80190d0:	4b2f      	ldr	r3, [pc, #188]	; (8019190 <updateUint16Item+0xfd0>)
 80190d2:	f7f5 ff37 	bl	800ef44 <Paint_DrawString_EN>
 80190d6:	e0ee      	b.n	80192b6 <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 80190d8:	79fb      	ldrb	r3, [r7, #7]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	f040 80eb 	bne.w	80192b6 <updateUint16Item+0x10f6>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 80190e0:	4b2c      	ldr	r3, [pc, #176]	; (8019194 <updateUint16Item+0xfd4>)
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	3301      	adds	r3, #1
 80190e6:	ee07 3a90 	vmov	s15, r3
 80190ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80190ee:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 80190f2:	eeb0 0b47 	vmov.f64	d0, d7
 80190f6:	f006 fe64 	bl	801fdc2 <fmin>
 80190fa:	eeb0 7b40 	vmov.f64	d7, d0
 80190fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019102:	edc7 7a00 	vstr	s15, [r7]
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	b2da      	uxtb	r2, r3
 801910a:	4b22      	ldr	r3, [pc, #136]	; (8019194 <updateUint16Item+0xfd4>)
 801910c:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 801910e:	4b21      	ldr	r3, [pc, #132]	; (8019194 <updateUint16Item+0xfd4>)
 8019110:	781b      	ldrb	r3, [r3, #0]
 8019112:	461a      	mov	r2, r3
 8019114:	4b20      	ldr	r3, [pc, #128]	; (8019198 <updateUint16Item+0xfd8>)
 8019116:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801911a:	4b1c      	ldr	r3, [pc, #112]	; (801918c <updateUint16Item+0xfcc>)
 801911c:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 801911e:	4b1b      	ldr	r3, [pc, #108]	; (801918c <updateUint16Item+0xfcc>)
 8019120:	899b      	ldrh	r3, [r3, #12]
 8019122:	461a      	mov	r2, r3
 8019124:	f107 030c 	add.w	r3, r7, #12
 8019128:	491c      	ldr	r1, [pc, #112]	; (801919c <updateUint16Item+0xfdc>)
 801912a:	4618      	mov	r0, r3
 801912c:	f003 faa6 	bl	801c67c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019134:	b29a      	uxth	r2, r3
 8019136:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801913a:	085b      	lsrs	r3, r3, #1
 801913c:	b2db      	uxtb	r3, r3
 801913e:	b29b      	uxth	r3, r3
 8019140:	4413      	add	r3, r2
 8019142:	b29b      	uxth	r3, r3
 8019144:	3301      	adds	r3, #1
 8019146:	b298      	uxth	r0, r3
 8019148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801914c:	b29a      	uxth	r2, r3
 801914e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019152:	b299      	uxth	r1, r3
 8019154:	69fb      	ldr	r3, [r7, #28]
 8019156:	b29b      	uxth	r3, r3
 8019158:	fb11 f303 	smulbb	r3, r1, r3
 801915c:	b29b      	uxth	r3, r3
 801915e:	4413      	add	r3, r2
 8019160:	b29b      	uxth	r3, r3
 8019162:	3301      	adds	r3, #1
 8019164:	b299      	uxth	r1, r3
 8019166:	f107 020c 	add.w	r2, r7, #12
 801916a:	2300      	movs	r3, #0
 801916c:	9301      	str	r3, [sp, #4]
 801916e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019172:	9300      	str	r3, [sp, #0]
 8019174:	4b06      	ldr	r3, [pc, #24]	; (8019190 <updateUint16Item+0xfd0>)
 8019176:	f7f5 fee5 	bl	800ef44 <Paint_DrawString_EN>
 801917a:	e09c      	b.n	80192b6 <updateUint16Item+0x10f6>
 801917c:	f3af 8000 	nop.w
	...
 8019188:	2400b09c 	.word	0x2400b09c
 801918c:	2400c294 	.word	0x2400c294
 8019190:	24000030 	.word	0x24000030
 8019194:	2400a110 	.word	0x2400a110
 8019198:	2400a114 	.word	0x2400a114
 801919c:	080205cc 	.word	0x080205cc
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 80191a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	3301      	adds	r3, #1
 80191a8:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80191aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191ae:	b29a      	uxth	r2, r3
 80191b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80191b4:	b299      	uxth	r1, r3
 80191b6:	69fb      	ldr	r3, [r7, #28]
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	fb11 f303 	smulbb	r3, r1, r3
 80191be:	b29b      	uxth	r3, r3
 80191c0:	4413      	add	r3, r2
 80191c2:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 80191c4:	3301      	adds	r3, #1
 80191c6:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 80191c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191cc:	b29c      	uxth	r4, r3
 80191ce:	69fb      	ldr	r3, [r7, #28]
 80191d0:	3301      	adds	r3, #1
 80191d2:	011b      	lsls	r3, r3, #4
 80191d4:	4a9c      	ldr	r2, [pc, #624]	; (8019448 <updateUint16Item+0x1288>)
 80191d6:	4413      	add	r3, r2
 80191d8:	4618      	mov	r0, r3
 80191da:	f7e7 f88b 	bl	80002f4 <strlen>
 80191de:	4603      	mov	r3, r0
 80191e0:	b29a      	uxth	r2, r3
 80191e2:	4b9a      	ldr	r3, [pc, #616]	; (801944c <updateUint16Item+0x128c>)
 80191e4:	889b      	ldrh	r3, [r3, #4]
 80191e6:	fb12 f303 	smulbb	r3, r2, r3
 80191ea:	b29b      	uxth	r3, r3
 80191ec:	4423      	add	r3, r4
 80191ee:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 80191f0:	3301      	adds	r3, #1
 80191f2:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80191f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191f8:	b29a      	uxth	r2, r3
 80191fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80191fe:	b299      	uxth	r1, r3
 8019200:	69fb      	ldr	r3, [r7, #28]
 8019202:	b29b      	uxth	r3, r3
 8019204:	fb11 f303 	smulbb	r3, r1, r3
 8019208:	b29b      	uxth	r3, r3
 801920a:	4413      	add	r3, r2
 801920c:	b29a      	uxth	r2, r3
 801920e:	4b8f      	ldr	r3, [pc, #572]	; (801944c <updateUint16Item+0x128c>)
 8019210:	88db      	ldrh	r3, [r3, #6]
 8019212:	4413      	add	r3, r2
 8019214:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019216:	3301      	adds	r3, #1
 8019218:	b29b      	uxth	r3, r3
 801921a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801921e:	9200      	str	r2, [sp, #0]
 8019220:	4602      	mov	r2, r0
 8019222:	4631      	mov	r1, r6
 8019224:	4628      	mov	r0, r5
 8019226:	f7f5 fa6f 	bl	800e708 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801922a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801922e:	b29b      	uxth	r3, r3
 8019230:	3301      	adds	r3, #1
 8019232:	b298      	uxth	r0, r3
 8019234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019238:	b29a      	uxth	r2, r3
 801923a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801923e:	b299      	uxth	r1, r3
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	b29b      	uxth	r3, r3
 8019244:	fb11 f303 	smulbb	r3, r1, r3
 8019248:	b29b      	uxth	r3, r3
 801924a:	4413      	add	r3, r2
 801924c:	b29b      	uxth	r3, r3
 801924e:	3301      	adds	r3, #1
 8019250:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8019252:	69fb      	ldr	r3, [r7, #28]
 8019254:	3301      	adds	r3, #1
 8019256:	011b      	lsls	r3, r3, #4
 8019258:	4a7b      	ldr	r2, [pc, #492]	; (8019448 <updateUint16Item+0x1288>)
 801925a:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801925c:	2300      	movs	r3, #0
 801925e:	9301      	str	r3, [sp, #4]
 8019260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019264:	9300      	str	r3, [sp, #0]
 8019266:	4b79      	ldr	r3, [pc, #484]	; (801944c <updateUint16Item+0x128c>)
 8019268:	f7f5 fe6c 	bl	800ef44 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801926c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019270:	b29a      	uxth	r2, r3
 8019272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019276:	085b      	lsrs	r3, r3, #1
 8019278:	b2db      	uxtb	r3, r3
 801927a:	b29b      	uxth	r3, r3
 801927c:	4413      	add	r3, r2
 801927e:	b29b      	uxth	r3, r3
 8019280:	3301      	adds	r3, #1
 8019282:	b298      	uxth	r0, r3
 8019284:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019288:	b29a      	uxth	r2, r3
 801928a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801928e:	b299      	uxth	r1, r3
 8019290:	69fb      	ldr	r3, [r7, #28]
 8019292:	b29b      	uxth	r3, r3
 8019294:	fb11 f303 	smulbb	r3, r1, r3
 8019298:	b29b      	uxth	r3, r3
 801929a:	4413      	add	r3, r2
 801929c:	b29b      	uxth	r3, r3
 801929e:	3301      	adds	r3, #1
 80192a0:	b299      	uxth	r1, r3
 80192a2:	f107 020c 	add.w	r2, r7, #12
 80192a6:	2300      	movs	r3, #0
 80192a8:	9301      	str	r3, [sp, #4]
 80192aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80192ae:	9300      	str	r3, [sp, #0]
 80192b0:	4b66      	ldr	r3, [pc, #408]	; (801944c <updateUint16Item+0x128c>)
 80192b2:	f7f5 fe47 	bl	800ef44 <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 80192b6:	4b64      	ldr	r3, [pc, #400]	; (8019448 <updateUint16Item+0x1288>)
 80192b8:	7bdb      	ldrb	r3, [r3, #15]
 80192ba:	3b02      	subs	r3, #2
 80192bc:	69fa      	ldr	r2, [r7, #28]
 80192be:	429a      	cmp	r2, r3
 80192c0:	f2c0 8299 	blt.w	80197f6 <updateUint16Item+0x1636>
 80192c4:	4b60      	ldr	r3, [pc, #384]	; (8019448 <updateUint16Item+0x1288>)
 80192c6:	7bdb      	ldrb	r3, [r3, #15]
 80192c8:	461a      	mov	r2, r3
 80192ca:	69fb      	ldr	r3, [r7, #28]
 80192cc:	4293      	cmp	r3, r2
 80192ce:	f280 8292 	bge.w	80197f6 <updateUint16Item+0x1636>
		{
			if (howToDraw == FULL)
 80192d2:	79fb      	ldrb	r3, [r7, #7]
 80192d4:	2b02      	cmp	r3, #2
 80192d6:	f040 8084 	bne.w	80193e2 <updateUint16Item+0x1222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80192da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192de:	b298      	uxth	r0, r3
 80192e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80192e4:	b29a      	uxth	r2, r3
 80192e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80192ea:	b299      	uxth	r1, r3
 80192ec:	69fb      	ldr	r3, [r7, #28]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	fb11 f303 	smulbb	r3, r1, r3
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	4413      	add	r3, r2
 80192f8:	b29c      	uxth	r4, r3
 80192fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192fe:	b29a      	uxth	r2, r3
 8019300:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019304:	b29b      	uxth	r3, r3
 8019306:	4413      	add	r3, r2
 8019308:	b29d      	uxth	r5, r3
 801930a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801930e:	b29a      	uxth	r2, r3
 8019310:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019314:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8019316:	69fb      	ldr	r3, [r7, #28]
 8019318:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801931a:	b29b      	uxth	r3, r3
 801931c:	fb11 f303 	smulbb	r3, r1, r3
 8019320:	b29b      	uxth	r3, r3
 8019322:	4413      	add	r3, r2
 8019324:	b29b      	uxth	r3, r3
 8019326:	2200      	movs	r2, #0
 8019328:	9202      	str	r2, [sp, #8]
 801932a:	2201      	movs	r2, #1
 801932c:	9201      	str	r2, [sp, #4]
 801932e:	2200      	movs	r2, #0
 8019330:	9200      	str	r2, [sp, #0]
 8019332:	462a      	mov	r2, r5
 8019334:	4621      	mov	r1, r4
 8019336:	f7f5 fb61 	bl	800e9fc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 801933a:	4b45      	ldr	r3, [pc, #276]	; (8019450 <updateUint16Item+0x1290>)
 801933c:	781b      	ldrb	r3, [r3, #0]
 801933e:	461a      	mov	r2, r3
 8019340:	69fb      	ldr	r3, [r7, #28]
 8019342:	4293      	cmp	r3, r2
 8019344:	d126      	bne.n	8019394 <updateUint16Item+0x11d4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801934a:	b29c      	uxth	r4, r3
 801934c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019350:	b29a      	uxth	r2, r3
 8019352:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019356:	b299      	uxth	r1, r3
 8019358:	69fb      	ldr	r3, [r7, #28]
 801935a:	b29b      	uxth	r3, r3
 801935c:	fb11 f303 	smulbb	r3, r1, r3
 8019360:	b29b      	uxth	r3, r3
 8019362:	4413      	add	r3, r2
 8019364:	b29b      	uxth	r3, r3
 8019366:	3301      	adds	r3, #1
 8019368:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801936a:	69fb      	ldr	r3, [r7, #28]
 801936c:	3301      	adds	r3, #1
 801936e:	011b      	lsls	r3, r3, #4
 8019370:	4a35      	ldr	r2, [pc, #212]	; (8019448 <updateUint16Item+0x1288>)
 8019372:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019374:	4935      	ldr	r1, [pc, #212]	; (801944c <updateUint16Item+0x128c>)
 8019376:	ab02      	add	r3, sp, #8
 8019378:	c903      	ldmia	r1, {r0, r1}
 801937a:	e883 0003 	stmia.w	r3, {r0, r1}
 801937e:	2310      	movs	r3, #16
 8019380:	9301      	str	r3, [sp, #4]
 8019382:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019386:	9300      	str	r3, [sp, #0]
 8019388:	2300      	movs	r3, #0
 801938a:	4629      	mov	r1, r5
 801938c:	4620      	mov	r0, r4
 801938e:	f7fd fe1f 	bl	8016fd0 <centeredString>
 8019392:	e230      	b.n	80197f6 <updateUint16Item+0x1636>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019398:	b29c      	uxth	r4, r3
 801939a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801939e:	b29a      	uxth	r2, r3
 80193a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80193a4:	b299      	uxth	r1, r3
 80193a6:	69fb      	ldr	r3, [r7, #28]
 80193a8:	b29b      	uxth	r3, r3
 80193aa:	fb11 f303 	smulbb	r3, r1, r3
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	4413      	add	r3, r2
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	3301      	adds	r3, #1
 80193b6:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 80193b8:	69fb      	ldr	r3, [r7, #28]
 80193ba:	3301      	adds	r3, #1
 80193bc:	011b      	lsls	r3, r3, #4
 80193be:	4a22      	ldr	r2, [pc, #136]	; (8019448 <updateUint16Item+0x1288>)
 80193c0:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80193c2:	4922      	ldr	r1, [pc, #136]	; (801944c <updateUint16Item+0x128c>)
 80193c4:	ab02      	add	r3, sp, #8
 80193c6:	c903      	ldmia	r1, {r0, r1}
 80193c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80193cc:	2310      	movs	r3, #16
 80193ce:	9301      	str	r3, [sp, #4]
 80193d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80193d4:	9300      	str	r3, [sp, #0]
 80193d6:	2300      	movs	r3, #0
 80193d8:	4629      	mov	r1, r5
 80193da:	4620      	mov	r0, r4
 80193dc:	f7fd fdf8 	bl	8016fd0 <centeredString>
 80193e0:	e209      	b.n	80197f6 <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == DOWN)
 80193e2:	79fb      	ldrb	r3, [r7, #7]
 80193e4:	2b01      	cmp	r3, #1
 80193e6:	f040 80d1 	bne.w	801958c <updateUint16Item+0x13cc>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 80193ea:	4b19      	ldr	r3, [pc, #100]	; (8019450 <updateUint16Item+0x1290>)
 80193ec:	781b      	ldrb	r3, [r3, #0]
 80193ee:	2b04      	cmp	r3, #4
 80193f0:	d130      	bne.n	8019454 <updateUint16Item+0x1294>
 80193f2:	69fb      	ldr	r3, [r7, #28]
 80193f4:	2b04      	cmp	r3, #4
 80193f6:	d12d      	bne.n	8019454 <updateUint16Item+0x1294>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80193f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80193fc:	b29c      	uxth	r4, r3
 80193fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019402:	b29a      	uxth	r2, r3
 8019404:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019408:	b299      	uxth	r1, r3
 801940a:	69fb      	ldr	r3, [r7, #28]
 801940c:	b29b      	uxth	r3, r3
 801940e:	fb11 f303 	smulbb	r3, r1, r3
 8019412:	b29b      	uxth	r3, r3
 8019414:	4413      	add	r3, r2
 8019416:	b29b      	uxth	r3, r3
 8019418:	3301      	adds	r3, #1
 801941a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801941c:	69fb      	ldr	r3, [r7, #28]
 801941e:	3301      	adds	r3, #1
 8019420:	011b      	lsls	r3, r3, #4
 8019422:	4a09      	ldr	r2, [pc, #36]	; (8019448 <updateUint16Item+0x1288>)
 8019424:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019426:	4909      	ldr	r1, [pc, #36]	; (801944c <updateUint16Item+0x128c>)
 8019428:	ab02      	add	r3, sp, #8
 801942a:	c903      	ldmia	r1, {r0, r1}
 801942c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019430:	2310      	movs	r3, #16
 8019432:	9301      	str	r3, [sp, #4]
 8019434:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019438:	9300      	str	r3, [sp, #0]
 801943a:	2300      	movs	r3, #0
 801943c:	4629      	mov	r1, r5
 801943e:	4620      	mov	r0, r4
 8019440:	f7fd fdc6 	bl	8016fd0 <centeredString>
 8019444:	e1d7      	b.n	80197f6 <updateUint16Item+0x1636>
 8019446:	bf00      	nop
 8019448:	2400c294 	.word	0x2400c294
 801944c:	24000030 	.word	0x24000030
 8019450:	2400b09c 	.word	0x2400b09c
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 8019454:	4b90      	ldr	r3, [pc, #576]	; (8019698 <updateUint16Item+0x14d8>)
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	2b05      	cmp	r3, #5
 801945a:	f040 81cc 	bne.w	80197f6 <updateUint16Item+0x1636>
 801945e:	69fb      	ldr	r3, [r7, #28]
 8019460:	2b05      	cmp	r3, #5
 8019462:	f040 81c8 	bne.w	80197f6 <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 8019466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801946a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801946c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019470:	b29a      	uxth	r2, r3
 8019472:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019476:	b299      	uxth	r1, r3
 8019478:	69fb      	ldr	r3, [r7, #28]
 801947a:	3b01      	subs	r3, #1
 801947c:	b29b      	uxth	r3, r3
 801947e:	fb11 f303 	smulbb	r3, r1, r3
 8019482:	b29b      	uxth	r3, r3
 8019484:	4413      	add	r3, r2
 8019486:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 8019488:	3301      	adds	r3, #1
 801948a:	b29e      	uxth	r6, r3
 801948c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019490:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 8019492:	69fb      	ldr	r3, [r7, #28]
 8019494:	3b01      	subs	r3, #1
 8019496:	3301      	adds	r3, #1
 8019498:	011b      	lsls	r3, r3, #4
 801949a:	4a80      	ldr	r2, [pc, #512]	; (801969c <updateUint16Item+0x14dc>)
 801949c:	4413      	add	r3, r2
 801949e:	4618      	mov	r0, r3
 80194a0:	f7e6 ff28 	bl	80002f4 <strlen>
 80194a4:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 80194a6:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 80194a8:	4b7d      	ldr	r3, [pc, #500]	; (80196a0 <updateUint16Item+0x14e0>)
 80194aa:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 80194ac:	fb12 f303 	smulbb	r3, r2, r3
 80194b0:	b29b      	uxth	r3, r3
 80194b2:	4423      	add	r3, r4
 80194b4:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 80194b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194ba:	b29a      	uxth	r2, r3
 80194bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80194c0:	b299      	uxth	r1, r3
 80194c2:	69fb      	ldr	r3, [r7, #28]
 80194c4:	3b01      	subs	r3, #1
 80194c6:	b29b      	uxth	r3, r3
 80194c8:	fb11 f303 	smulbb	r3, r1, r3
 80194cc:	b29b      	uxth	r3, r3
 80194ce:	4413      	add	r3, r2
 80194d0:	b29a      	uxth	r2, r3
 80194d2:	4b73      	ldr	r3, [pc, #460]	; (80196a0 <updateUint16Item+0x14e0>)
 80194d4:	88db      	ldrh	r3, [r3, #6]
 80194d6:	4413      	add	r3, r2
 80194d8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 80194da:	3301      	adds	r3, #1
 80194dc:	b29b      	uxth	r3, r3
 80194de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194e2:	9200      	str	r2, [sp, #0]
 80194e4:	4602      	mov	r2, r0
 80194e6:	4631      	mov	r1, r6
 80194e8:	4628      	mov	r0, r5
 80194ea:	f7f5 f90d 	bl	800e708 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 80194ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194f2:	b29c      	uxth	r4, r3
 80194f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194f8:	b29a      	uxth	r2, r3
 80194fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80194fe:	b299      	uxth	r1, r3
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	3b01      	subs	r3, #1
 8019504:	b29b      	uxth	r3, r3
 8019506:	fb11 f303 	smulbb	r3, r1, r3
 801950a:	b29b      	uxth	r3, r3
 801950c:	4413      	add	r3, r2
 801950e:	b29b      	uxth	r3, r3
 8019510:	3301      	adds	r3, #1
 8019512:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 8019514:	69fb      	ldr	r3, [r7, #28]
 8019516:	3b01      	subs	r3, #1
 8019518:	3301      	adds	r3, #1
 801951a:	011b      	lsls	r3, r3, #4
 801951c:	4a5f      	ldr	r2, [pc, #380]	; (801969c <updateUint16Item+0x14dc>)
 801951e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8019520:	495f      	ldr	r1, [pc, #380]	; (80196a0 <updateUint16Item+0x14e0>)
 8019522:	ab02      	add	r3, sp, #8
 8019524:	c903      	ldmia	r1, {r0, r1}
 8019526:	e883 0003 	stmia.w	r3, {r0, r1}
 801952a:	2310      	movs	r3, #16
 801952c:	9301      	str	r3, [sp, #4]
 801952e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019532:	9300      	str	r3, [sp, #0]
 8019534:	2300      	movs	r3, #0
 8019536:	4629      	mov	r1, r5
 8019538:	4620      	mov	r0, r4
 801953a:	f7fd fd49 	bl	8016fd0 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801953e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019542:	b29c      	uxth	r4, r3
 8019544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019548:	b29a      	uxth	r2, r3
 801954a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801954e:	b299      	uxth	r1, r3
 8019550:	69fb      	ldr	r3, [r7, #28]
 8019552:	b29b      	uxth	r3, r3
 8019554:	fb11 f303 	smulbb	r3, r1, r3
 8019558:	b29b      	uxth	r3, r3
 801955a:	4413      	add	r3, r2
 801955c:	b29b      	uxth	r3, r3
 801955e:	3301      	adds	r3, #1
 8019560:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 8019562:	69fb      	ldr	r3, [r7, #28]
 8019564:	3301      	adds	r3, #1
 8019566:	011b      	lsls	r3, r3, #4
 8019568:	4a4c      	ldr	r2, [pc, #304]	; (801969c <updateUint16Item+0x14dc>)
 801956a:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801956c:	494c      	ldr	r1, [pc, #304]	; (80196a0 <updateUint16Item+0x14e0>)
 801956e:	ab02      	add	r3, sp, #8
 8019570:	c903      	ldmia	r1, {r0, r1}
 8019572:	e883 0003 	stmia.w	r3, {r0, r1}
 8019576:	2310      	movs	r3, #16
 8019578:	9301      	str	r3, [sp, #4]
 801957a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801957e:	9300      	str	r3, [sp, #0]
 8019580:	2300      	movs	r3, #0
 8019582:	4629      	mov	r1, r5
 8019584:	4620      	mov	r0, r4
 8019586:	f7fd fd23 	bl	8016fd0 <centeredString>
 801958a:	e134      	b.n	80197f6 <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == UP)
 801958c:	79fb      	ldrb	r3, [r7, #7]
 801958e:	2b00      	cmp	r3, #0
 8019590:	f040 8131 	bne.w	80197f6 <updateUint16Item+0x1636>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 8019594:	4b40      	ldr	r3, [pc, #256]	; (8019698 <updateUint16Item+0x14d8>)
 8019596:	781b      	ldrb	r3, [r3, #0]
 8019598:	2b03      	cmp	r3, #3
 801959a:	f040 8083 	bne.w	80196a4 <updateUint16Item+0x14e4>
 801959e:	69fb      	ldr	r3, [r7, #28]
 80195a0:	2b04      	cmp	r3, #4
 80195a2:	d17f      	bne.n	80196a4 <updateUint16Item+0x14e4>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 80195a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195a8:	b29c      	uxth	r4, r3
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	3301      	adds	r3, #1
 80195ae:	011b      	lsls	r3, r3, #4
 80195b0:	4a3a      	ldr	r2, [pc, #232]	; (801969c <updateUint16Item+0x14dc>)
 80195b2:	4413      	add	r3, r2
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7e6 fe9d 	bl	80002f4 <strlen>
 80195ba:	4603      	mov	r3, r0
 80195bc:	4a38      	ldr	r2, [pc, #224]	; (80196a0 <updateUint16Item+0x14e0>)
 80195be:	8892      	ldrh	r2, [r2, #4]
 80195c0:	fb02 f303 	mul.w	r3, r2, r3
 80195c4:	085b      	lsrs	r3, r3, #1
 80195c6:	b29b      	uxth	r3, r3
 80195c8:	1ae3      	subs	r3, r4, r3
 80195ca:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80195cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195d0:	b29a      	uxth	r2, r3
 80195d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80195d6:	b299      	uxth	r1, r3
 80195d8:	69fb      	ldr	r3, [r7, #28]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	fb11 f303 	smulbb	r3, r1, r3
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	4413      	add	r3, r2
 80195e4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 80195e6:	3301      	adds	r3, #1
 80195e8:	b29e      	uxth	r6, r3
 80195ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195ee:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	3301      	adds	r3, #1
 80195f4:	011b      	lsls	r3, r3, #4
 80195f6:	4a29      	ldr	r2, [pc, #164]	; (801969c <updateUint16Item+0x14dc>)
 80195f8:	4413      	add	r3, r2
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7e6 fe7a 	bl	80002f4 <strlen>
 8019600:	4603      	mov	r3, r0
 8019602:	4a27      	ldr	r2, [pc, #156]	; (80196a0 <updateUint16Item+0x14e0>)
 8019604:	8892      	ldrh	r2, [r2, #4]
 8019606:	fb02 f303 	mul.w	r3, r2, r3
 801960a:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801960c:	b29b      	uxth	r3, r3
 801960e:	4423      	add	r3, r4
 8019610:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019612:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019616:	b29a      	uxth	r2, r3
 8019618:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801961c:	b299      	uxth	r1, r3
 801961e:	69fb      	ldr	r3, [r7, #28]
 8019620:	b29b      	uxth	r3, r3
 8019622:	fb11 f303 	smulbb	r3, r1, r3
 8019626:	b29b      	uxth	r3, r3
 8019628:	4413      	add	r3, r2
 801962a:	b29a      	uxth	r2, r3
 801962c:	4b1c      	ldr	r3, [pc, #112]	; (80196a0 <updateUint16Item+0x14e0>)
 801962e:	88db      	ldrh	r3, [r3, #6]
 8019630:	4413      	add	r3, r2
 8019632:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8019634:	3301      	adds	r3, #1
 8019636:	b29b      	uxth	r3, r3
 8019638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801963c:	9200      	str	r2, [sp, #0]
 801963e:	4602      	mov	r2, r0
 8019640:	4631      	mov	r1, r6
 8019642:	4628      	mov	r0, r5
 8019644:	f7f5 f860 	bl	800e708 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801964c:	b29c      	uxth	r4, r3
 801964e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019652:	b29a      	uxth	r2, r3
 8019654:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019658:	b299      	uxth	r1, r3
 801965a:	69fb      	ldr	r3, [r7, #28]
 801965c:	b29b      	uxth	r3, r3
 801965e:	fb11 f303 	smulbb	r3, r1, r3
 8019662:	b29b      	uxth	r3, r3
 8019664:	4413      	add	r3, r2
 8019666:	b29b      	uxth	r3, r3
 8019668:	3301      	adds	r3, #1
 801966a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801966c:	69fb      	ldr	r3, [r7, #28]
 801966e:	3301      	adds	r3, #1
 8019670:	011b      	lsls	r3, r3, #4
 8019672:	4a0a      	ldr	r2, [pc, #40]	; (801969c <updateUint16Item+0x14dc>)
 8019674:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019676:	490a      	ldr	r1, [pc, #40]	; (80196a0 <updateUint16Item+0x14e0>)
 8019678:	ab02      	add	r3, sp, #8
 801967a:	c903      	ldmia	r1, {r0, r1}
 801967c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019680:	2310      	movs	r3, #16
 8019682:	9301      	str	r3, [sp, #4]
 8019684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019688:	9300      	str	r3, [sp, #0]
 801968a:	2300      	movs	r3, #0
 801968c:	4629      	mov	r1, r5
 801968e:	4620      	mov	r0, r4
 8019690:	f7fd fc9e 	bl	8016fd0 <centeredString>
 8019694:	e0af      	b.n	80197f6 <updateUint16Item+0x1636>
 8019696:	bf00      	nop
 8019698:	2400b09c 	.word	0x2400b09c
 801969c:	2400c294 	.word	0x2400c294
 80196a0:	24000030 	.word	0x24000030
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 80196a4:	4b5b      	ldr	r3, [pc, #364]	; (8019814 <updateUint16Item+0x1654>)
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	2b04      	cmp	r3, #4
 80196aa:	f040 80a4 	bne.w	80197f6 <updateUint16Item+0x1636>
 80196ae:	69fb      	ldr	r3, [r7, #28]
 80196b0:	2b05      	cmp	r3, #5
 80196b2:	f040 80a0 	bne.w	80197f6 <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 80196b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80196ba:	b29c      	uxth	r4, r3
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	3301      	adds	r3, #1
 80196c0:	011b      	lsls	r3, r3, #4
 80196c2:	4a55      	ldr	r2, [pc, #340]	; (8019818 <updateUint16Item+0x1658>)
 80196c4:	4413      	add	r3, r2
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7e6 fe14 	bl	80002f4 <strlen>
 80196cc:	4603      	mov	r3, r0
 80196ce:	4a53      	ldr	r2, [pc, #332]	; (801981c <updateUint16Item+0x165c>)
 80196d0:	8892      	ldrh	r2, [r2, #4]
 80196d2:	fb02 f303 	mul.w	r3, r2, r3
 80196d6:	085b      	lsrs	r3, r3, #1
 80196d8:	b29b      	uxth	r3, r3
 80196da:	1ae3      	subs	r3, r4, r3
 80196dc:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80196de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196e2:	b29a      	uxth	r2, r3
 80196e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80196e8:	b299      	uxth	r1, r3
 80196ea:	69fb      	ldr	r3, [r7, #28]
 80196ec:	b29b      	uxth	r3, r3
 80196ee:	fb11 f303 	smulbb	r3, r1, r3
 80196f2:	b29b      	uxth	r3, r3
 80196f4:	4413      	add	r3, r2
 80196f6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 80196f8:	3301      	adds	r3, #1
 80196fa:	b29e      	uxth	r6, r3
 80196fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019700:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 8019702:	69fb      	ldr	r3, [r7, #28]
 8019704:	3301      	adds	r3, #1
 8019706:	011b      	lsls	r3, r3, #4
 8019708:	4a43      	ldr	r2, [pc, #268]	; (8019818 <updateUint16Item+0x1658>)
 801970a:	4413      	add	r3, r2
 801970c:	4618      	mov	r0, r3
 801970e:	f7e6 fdf1 	bl	80002f4 <strlen>
 8019712:	4603      	mov	r3, r0
 8019714:	4a41      	ldr	r2, [pc, #260]	; (801981c <updateUint16Item+0x165c>)
 8019716:	8892      	ldrh	r2, [r2, #4]
 8019718:	fb02 f303 	mul.w	r3, r2, r3
 801971c:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801971e:	b29b      	uxth	r3, r3
 8019720:	4423      	add	r3, r4
 8019722:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019728:	b29a      	uxth	r2, r3
 801972a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801972e:	b299      	uxth	r1, r3
 8019730:	69fb      	ldr	r3, [r7, #28]
 8019732:	b29b      	uxth	r3, r3
 8019734:	fb11 f303 	smulbb	r3, r1, r3
 8019738:	b29b      	uxth	r3, r3
 801973a:	4413      	add	r3, r2
 801973c:	b29a      	uxth	r2, r3
 801973e:	4b37      	ldr	r3, [pc, #220]	; (801981c <updateUint16Item+0x165c>)
 8019740:	88db      	ldrh	r3, [r3, #6]
 8019742:	4413      	add	r3, r2
 8019744:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8019746:	3301      	adds	r3, #1
 8019748:	b29b      	uxth	r3, r3
 801974a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801974e:	9200      	str	r2, [sp, #0]
 8019750:	4602      	mov	r2, r0
 8019752:	4631      	mov	r1, r6
 8019754:	4628      	mov	r0, r5
 8019756:	f7f4 ffd7 	bl	800e708 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801975a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801975e:	b29c      	uxth	r4, r3
 8019760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019764:	b29a      	uxth	r2, r3
 8019766:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801976a:	b299      	uxth	r1, r3
 801976c:	69fb      	ldr	r3, [r7, #28]
 801976e:	b29b      	uxth	r3, r3
 8019770:	fb11 f303 	smulbb	r3, r1, r3
 8019774:	b29b      	uxth	r3, r3
 8019776:	4413      	add	r3, r2
 8019778:	b29b      	uxth	r3, r3
 801977a:	3301      	adds	r3, #1
 801977c:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801977e:	69fb      	ldr	r3, [r7, #28]
 8019780:	3301      	adds	r3, #1
 8019782:	011b      	lsls	r3, r3, #4
 8019784:	4a24      	ldr	r2, [pc, #144]	; (8019818 <updateUint16Item+0x1658>)
 8019786:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019788:	4924      	ldr	r1, [pc, #144]	; (801981c <updateUint16Item+0x165c>)
 801978a:	ab02      	add	r3, sp, #8
 801978c:	c903      	ldmia	r1, {r0, r1}
 801978e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019792:	2310      	movs	r3, #16
 8019794:	9301      	str	r3, [sp, #4]
 8019796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801979a:	9300      	str	r3, [sp, #0]
 801979c:	2300      	movs	r3, #0
 801979e:	4629      	mov	r1, r5
 80197a0:	4620      	mov	r0, r4
 80197a2:	f7fd fc15 	bl	8016fd0 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 80197a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80197aa:	b29c      	uxth	r4, r3
 80197ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80197b0:	b29a      	uxth	r2, r3
 80197b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80197b6:	b299      	uxth	r1, r3
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	3b01      	subs	r3, #1
 80197bc:	b29b      	uxth	r3, r3
 80197be:	fb11 f303 	smulbb	r3, r1, r3
 80197c2:	b29b      	uxth	r3, r3
 80197c4:	4413      	add	r3, r2
 80197c6:	b29b      	uxth	r3, r3
 80197c8:	3301      	adds	r3, #1
 80197ca:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 80197cc:	69fb      	ldr	r3, [r7, #28]
 80197ce:	3b01      	subs	r3, #1
 80197d0:	3301      	adds	r3, #1
 80197d2:	011b      	lsls	r3, r3, #4
 80197d4:	4a10      	ldr	r2, [pc, #64]	; (8019818 <updateUint16Item+0x1658>)
 80197d6:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 80197d8:	4910      	ldr	r1, [pc, #64]	; (801981c <updateUint16Item+0x165c>)
 80197da:	ab02      	add	r3, sp, #8
 80197dc:	c903      	ldmia	r1, {r0, r1}
 80197de:	e883 0003 	stmia.w	r3, {r0, r1}
 80197e2:	2310      	movs	r3, #16
 80197e4:	9301      	str	r3, [sp, #4]
 80197e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80197ea:	9300      	str	r3, [sp, #0]
 80197ec:	2300      	movs	r3, #0
 80197ee:	4629      	mov	r1, r5
 80197f0:	4620      	mov	r0, r4
 80197f2:	f7fd fbed 	bl	8016fd0 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 80197f6:	69fb      	ldr	r3, [r7, #28]
 80197f8:	3301      	adds	r3, #1
 80197fa:	61fb      	str	r3, [r7, #28]
 80197fc:	4b06      	ldr	r3, [pc, #24]	; (8019818 <updateUint16Item+0x1658>)
 80197fe:	7bdb      	ldrb	r3, [r3, #15]
 8019800:	461a      	mov	r2, r3
 8019802:	69fb      	ldr	r3, [r7, #28]
 8019804:	4293      	cmp	r3, r2
 8019806:	f6fe ad09 	blt.w	801821c <updateUint16Item+0x5c>
				}
			}
		}
	}
}
 801980a:	bf00      	nop
 801980c:	bf00      	nop
 801980e:	372c      	adds	r7, #44	; 0x2c
 8019810:	46bd      	mov	sp, r7
 8019812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019814:	2400b09c 	.word	0x2400b09c
 8019818:	2400c294 	.word	0x2400c294
 801981c:	24000030 	.word	0x24000030

08019820 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 8019820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019822:	b08d      	sub	sp, #52	; 0x34
 8019824:	af04      	add	r7, sp, #16
 8019826:	4603      	mov	r3, r0
 8019828:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 801982a:	2300      	movs	r3, #0
 801982c:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 801982e:	2300      	movs	r3, #0
 8019830:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 8019832:	2300      	movs	r3, #0
 8019834:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 8019836:	2300      	movs	r3, #0
 8019838:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 801983a:	2300      	movs	r3, #0
 801983c:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 801983e:	4b09      	ldr	r3, [pc, #36]	; (8019864 <updateStringItem+0x44>)
 8019840:	781b      	ldrb	r3, [r3, #0]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d009      	beq.n	801985a <updateStringItem+0x3a>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8019846:	2302      	movs	r3, #2
 8019848:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 801984a:	230c      	movs	r3, #12
 801984c:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 801984e:	230e      	movs	r3, #14
 8019850:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8019852:	237c      	movs	r3, #124	; 0x7c
 8019854:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8019856:	2340      	movs	r3, #64	; 0x40
 8019858:	76fb      	strb	r3, [r7, #27]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801985a:	2300      	movs	r3, #0
 801985c:	617b      	str	r3, [r7, #20]
 801985e:	f001 ba23 	b.w	801aca8 <updateStringItem+0x1488>
 8019862:	bf00      	nop
 8019864:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 8019868:	697b      	ldr	r3, [r7, #20]
 801986a:	2b01      	cmp	r3, #1
 801986c:	dc50      	bgt.n	8019910 <updateStringItem+0xf0>
 801986e:	79fb      	ldrb	r3, [r7, #7]
 8019870:	2b02      	cmp	r3, #2
 8019872:	d14d      	bne.n	8019910 <updateStringItem+0xf0>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019874:	7ffb      	ldrb	r3, [r7, #31]
 8019876:	b298      	uxth	r0, r3
 8019878:	7fbb      	ldrb	r3, [r7, #30]
 801987a:	b29a      	uxth	r2, r3
 801987c:	7f7b      	ldrb	r3, [r7, #29]
 801987e:	b299      	uxth	r1, r3
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	b29b      	uxth	r3, r3
 8019884:	fb11 f303 	smulbb	r3, r1, r3
 8019888:	b29b      	uxth	r3, r3
 801988a:	4413      	add	r3, r2
 801988c:	b29c      	uxth	r4, r3
 801988e:	7ffb      	ldrb	r3, [r7, #31]
 8019890:	b29a      	uxth	r2, r3
 8019892:	7f3b      	ldrb	r3, [r7, #28]
 8019894:	b29b      	uxth	r3, r3
 8019896:	4413      	add	r3, r2
 8019898:	b29d      	uxth	r5, r3
 801989a:	7fbb      	ldrb	r3, [r7, #30]
 801989c:	b29a      	uxth	r2, r3
 801989e:	7f7b      	ldrb	r3, [r7, #29]
 80198a0:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 80198a2:	697b      	ldr	r3, [r7, #20]
 80198a4:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	fb11 f303 	smulbb	r3, r1, r3
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	4413      	add	r3, r2
 80198b0:	b29b      	uxth	r3, r3
 80198b2:	2200      	movs	r2, #0
 80198b4:	9202      	str	r2, [sp, #8]
 80198b6:	2201      	movs	r2, #1
 80198b8:	9201      	str	r2, [sp, #4]
 80198ba:	2200      	movs	r2, #0
 80198bc:	9200      	str	r2, [sp, #0]
 80198be:	462a      	mov	r2, r5
 80198c0:	4621      	mov	r1, r4
 80198c2:	f7f5 f89b 	bl	800e9fc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80198c6:	7efb      	ldrb	r3, [r7, #27]
 80198c8:	b29c      	uxth	r4, r3
 80198ca:	7fbb      	ldrb	r3, [r7, #30]
 80198cc:	b29a      	uxth	r2, r3
 80198ce:	7f7b      	ldrb	r3, [r7, #29]
 80198d0:	b299      	uxth	r1, r3
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	b29b      	uxth	r3, r3
 80198d6:	fb11 f303 	smulbb	r3, r1, r3
 80198da:	b29b      	uxth	r3, r3
 80198dc:	4413      	add	r3, r2
 80198de:	b29b      	uxth	r3, r3
 80198e0:	3301      	adds	r3, #1
 80198e2:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	011b      	lsls	r3, r3, #4
 80198e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80198ec:	4a8e      	ldr	r2, [pc, #568]	; (8019b28 <updateStringItem+0x308>)
 80198ee:	4413      	add	r3, r2
 80198f0:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80198f2:	498e      	ldr	r1, [pc, #568]	; (8019b2c <updateStringItem+0x30c>)
 80198f4:	ab02      	add	r3, sp, #8
 80198f6:	c903      	ldmia	r1, {r0, r1}
 80198f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80198fc:	2310      	movs	r3, #16
 80198fe:	9301      	str	r3, [sp, #4]
 8019900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019904:	9300      	str	r3, [sp, #0]
 8019906:	2300      	movs	r3, #0
 8019908:	4629      	mov	r1, r5
 801990a:	4620      	mov	r0, r4
 801990c:	f7fd fb60 	bl	8016fd0 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 8019910:	697b      	ldr	r3, [r7, #20]
 8019912:	2b01      	cmp	r3, #1
 8019914:	f340 873c 	ble.w	801a790 <updateStringItem+0xf70>
 8019918:	4b83      	ldr	r3, [pc, #524]	; (8019b28 <updateStringItem+0x308>)
 801991a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801991e:	3b02      	subs	r3, #2
 8019920:	697a      	ldr	r2, [r7, #20]
 8019922:	429a      	cmp	r2, r3
 8019924:	f280 8734 	bge.w	801a790 <updateStringItem+0xf70>
		{
			if (howToDraw == FULL)
 8019928:	79fb      	ldrb	r3, [r7, #7]
 801992a:	2b02      	cmp	r3, #2
 801992c:	d159      	bne.n	80199e2 <updateStringItem+0x1c2>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801992e:	7ffb      	ldrb	r3, [r7, #31]
 8019930:	b298      	uxth	r0, r3
 8019932:	7fbb      	ldrb	r3, [r7, #30]
 8019934:	b29a      	uxth	r2, r3
 8019936:	7f7b      	ldrb	r3, [r7, #29]
 8019938:	b299      	uxth	r1, r3
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	b29b      	uxth	r3, r3
 801993e:	fb11 f303 	smulbb	r3, r1, r3
 8019942:	b29b      	uxth	r3, r3
 8019944:	4413      	add	r3, r2
 8019946:	b29c      	uxth	r4, r3
 8019948:	7ffb      	ldrb	r3, [r7, #31]
 801994a:	b29a      	uxth	r2, r3
 801994c:	7f3b      	ldrb	r3, [r7, #28]
 801994e:	085b      	lsrs	r3, r3, #1
 8019950:	b2db      	uxtb	r3, r3
 8019952:	b29b      	uxth	r3, r3
 8019954:	4413      	add	r3, r2
 8019956:	b29d      	uxth	r5, r3
 8019958:	7fbb      	ldrb	r3, [r7, #30]
 801995a:	b29a      	uxth	r2, r3
 801995c:	7f7b      	ldrb	r3, [r7, #29]
 801995e:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8019960:	697b      	ldr	r3, [r7, #20]
 8019962:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019964:	b29b      	uxth	r3, r3
 8019966:	fb11 f303 	smulbb	r3, r1, r3
 801996a:	b29b      	uxth	r3, r3
 801996c:	4413      	add	r3, r2
 801996e:	b29b      	uxth	r3, r3
 8019970:	2200      	movs	r2, #0
 8019972:	9202      	str	r2, [sp, #8]
 8019974:	2201      	movs	r2, #1
 8019976:	9201      	str	r2, [sp, #4]
 8019978:	2200      	movs	r2, #0
 801997a:	9200      	str	r2, [sp, #0]
 801997c:	462a      	mov	r2, r5
 801997e:	4621      	mov	r1, r4
 8019980:	f7f5 f83c 	bl	800e9fc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 8019984:	7ffb      	ldrb	r3, [r7, #31]
 8019986:	b29a      	uxth	r2, r3
 8019988:	7f3b      	ldrb	r3, [r7, #28]
 801998a:	085b      	lsrs	r3, r3, #1
 801998c:	b2db      	uxtb	r3, r3
 801998e:	b29b      	uxth	r3, r3
 8019990:	4413      	add	r3, r2
 8019992:	b298      	uxth	r0, r3
 8019994:	7fbb      	ldrb	r3, [r7, #30]
 8019996:	b29a      	uxth	r2, r3
 8019998:	7f7b      	ldrb	r3, [r7, #29]
 801999a:	b299      	uxth	r1, r3
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	b29b      	uxth	r3, r3
 80199a0:	fb11 f303 	smulbb	r3, r1, r3
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	4413      	add	r3, r2
 80199a8:	b29c      	uxth	r4, r3
 80199aa:	7ffb      	ldrb	r3, [r7, #31]
 80199ac:	b29a      	uxth	r2, r3
 80199ae:	7f3b      	ldrb	r3, [r7, #28]
 80199b0:	b29b      	uxth	r3, r3
 80199b2:	4413      	add	r3, r2
 80199b4:	b29d      	uxth	r5, r3
 80199b6:	7fbb      	ldrb	r3, [r7, #30]
 80199b8:	b29a      	uxth	r2, r3
 80199ba:	7f7b      	ldrb	r3, [r7, #29]
 80199bc:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	fb11 f303 	smulbb	r3, r1, r3
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	4413      	add	r3, r2
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	2200      	movs	r2, #0
 80199d0:	9202      	str	r2, [sp, #8]
 80199d2:	2201      	movs	r2, #1
 80199d4:	9201      	str	r2, [sp, #4]
 80199d6:	2200      	movs	r2, #0
 80199d8:	9200      	str	r2, [sp, #0]
 80199da:	462a      	mov	r2, r5
 80199dc:	4621      	mov	r1, r4
 80199de:	f7f5 f80d 	bl	800e9fc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 80199e2:	697b      	ldr	r3, [r7, #20]
 80199e4:	2b02      	cmp	r3, #2
 80199e6:	f040 8371 	bne.w	801a0cc <updateStringItem+0x8ac>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 80199ea:	4b51      	ldr	r3, [pc, #324]	; (8019b30 <updateStringItem+0x310>)
 80199ec:	781b      	ldrb	r3, [r3, #0]
 80199ee:	2b02      	cmp	r3, #2
 80199f0:	f040 81ba 	bne.w	8019d68 <updateStringItem+0x548>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 80199f4:	79fb      	ldrb	r3, [r7, #7]
 80199f6:	2b03      	cmp	r3, #3
 80199f8:	d003      	beq.n	8019a02 <updateStringItem+0x1e2>
 80199fa:	79fb      	ldrb	r3, [r7, #7]
 80199fc:	2b02      	cmp	r3, #2
 80199fe:	f040 8099 	bne.w	8019b34 <updateStringItem+0x314>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a02:	7ffb      	ldrb	r3, [r7, #31]
 8019a04:	b29b      	uxth	r3, r3
 8019a06:	3301      	adds	r3, #1
 8019a08:	b298      	uxth	r0, r3
 8019a0a:	7fbb      	ldrb	r3, [r7, #30]
 8019a0c:	b29a      	uxth	r2, r3
 8019a0e:	7f7b      	ldrb	r3, [r7, #29]
 8019a10:	b299      	uxth	r1, r3
 8019a12:	697b      	ldr	r3, [r7, #20]
 8019a14:	b29b      	uxth	r3, r3
 8019a16:	fb11 f303 	smulbb	r3, r1, r3
 8019a1a:	b29b      	uxth	r3, r3
 8019a1c:	4413      	add	r3, r2
 8019a1e:	b29b      	uxth	r3, r3
 8019a20:	3301      	adds	r3, #1
 8019a22:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	011b      	lsls	r3, r3, #4
 8019a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019a2c:	4a3e      	ldr	r2, [pc, #248]	; (8019b28 <updateStringItem+0x308>)
 8019a2e:	4413      	add	r3, r2
 8019a30:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a32:	2300      	movs	r3, #0
 8019a34:	9301      	str	r3, [sp, #4]
 8019a36:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019a3a:	9300      	str	r3, [sp, #0]
 8019a3c:	4b3b      	ldr	r3, [pc, #236]	; (8019b2c <updateStringItem+0x30c>)
 8019a3e:	f7f5 fa81 	bl	800ef44 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019a42:	7ffb      	ldrb	r3, [r7, #31]
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	7f3b      	ldrb	r3, [r7, #28]
 8019a48:	085b      	lsrs	r3, r3, #1
 8019a4a:	b2db      	uxtb	r3, r3
 8019a4c:	b29b      	uxth	r3, r3
 8019a4e:	4413      	add	r3, r2
 8019a50:	b29b      	uxth	r3, r3
 8019a52:	3301      	adds	r3, #1
 8019a54:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a56:	7fbb      	ldrb	r3, [r7, #30]
 8019a58:	b29a      	uxth	r2, r3
 8019a5a:	7f7b      	ldrb	r3, [r7, #29]
 8019a5c:	b299      	uxth	r1, r3
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	fb11 f303 	smulbb	r3, r1, r3
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	4413      	add	r3, r2
 8019a6a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019a6c:	3301      	adds	r3, #1
 8019a6e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 8019a70:	7ffb      	ldrb	r3, [r7, #31]
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	7f3b      	ldrb	r3, [r7, #28]
 8019a76:	085b      	lsrs	r3, r3, #1
 8019a78:	b2db      	uxtb	r3, r3
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	4413      	add	r3, r2
 8019a7e:	b29c      	uxth	r4, r3
 8019a80:	4b29      	ldr	r3, [pc, #164]	; (8019b28 <updateStringItem+0x308>)
 8019a82:	799b      	ldrb	r3, [r3, #6]
 8019a84:	011b      	lsls	r3, r3, #4
 8019a86:	3308      	adds	r3, #8
 8019a88:	4a27      	ldr	r2, [pc, #156]	; (8019b28 <updateStringItem+0x308>)
 8019a8a:	4413      	add	r3, r2
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7e6 fc31 	bl	80002f4 <strlen>
 8019a92:	4603      	mov	r3, r0
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	4b25      	ldr	r3, [pc, #148]	; (8019b2c <updateStringItem+0x30c>)
 8019a98:	889b      	ldrh	r3, [r3, #4]
 8019a9a:	fb12 f303 	smulbb	r3, r2, r3
 8019a9e:	b29b      	uxth	r3, r3
 8019aa0:	4423      	add	r3, r4
 8019aa2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019aa8:	7fbb      	ldrb	r3, [r7, #30]
 8019aaa:	b29a      	uxth	r2, r3
 8019aac:	7f7b      	ldrb	r3, [r7, #29]
 8019aae:	b299      	uxth	r1, r3
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	fb11 f303 	smulbb	r3, r1, r3
 8019ab8:	b29b      	uxth	r3, r3
 8019aba:	4413      	add	r3, r2
 8019abc:	b29a      	uxth	r2, r3
 8019abe:	4b1b      	ldr	r3, [pc, #108]	; (8019b2c <updateStringItem+0x30c>)
 8019ac0:	88db      	ldrh	r3, [r3, #6]
 8019ac2:	4413      	add	r3, r2
 8019ac4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	b29b      	uxth	r3, r3
 8019aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ace:	9200      	str	r2, [sp, #0]
 8019ad0:	4602      	mov	r2, r0
 8019ad2:	4631      	mov	r1, r6
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	f7f4 fe17 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019ada:	7ffb      	ldrb	r3, [r7, #31]
 8019adc:	b29a      	uxth	r2, r3
 8019ade:	7f3b      	ldrb	r3, [r7, #28]
 8019ae0:	085b      	lsrs	r3, r3, #1
 8019ae2:	b2db      	uxtb	r3, r3
 8019ae4:	b29b      	uxth	r3, r3
 8019ae6:	4413      	add	r3, r2
 8019ae8:	b29b      	uxth	r3, r3
 8019aea:	3301      	adds	r3, #1
 8019aec:	b298      	uxth	r0, r3
 8019aee:	7fbb      	ldrb	r3, [r7, #30]
 8019af0:	b29a      	uxth	r2, r3
 8019af2:	7f7b      	ldrb	r3, [r7, #29]
 8019af4:	b299      	uxth	r1, r3
 8019af6:	697b      	ldr	r3, [r7, #20]
 8019af8:	b29b      	uxth	r3, r3
 8019afa:	fb11 f303 	smulbb	r3, r1, r3
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	4413      	add	r3, r2
 8019b02:	b29b      	uxth	r3, r3
 8019b04:	3301      	adds	r3, #1
 8019b06:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 8019b08:	4b07      	ldr	r3, [pc, #28]	; (8019b28 <updateStringItem+0x308>)
 8019b0a:	799b      	ldrb	r3, [r3, #6]
 8019b0c:	011b      	lsls	r3, r3, #4
 8019b0e:	3308      	adds	r3, #8
 8019b10:	4a05      	ldr	r2, [pc, #20]	; (8019b28 <updateStringItem+0x308>)
 8019b12:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b14:	2300      	movs	r3, #0
 8019b16:	9301      	str	r3, [sp, #4]
 8019b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b1c:	9300      	str	r3, [sp, #0]
 8019b1e:	4b03      	ldr	r3, [pc, #12]	; (8019b2c <updateStringItem+0x30c>)
 8019b20:	f7f5 fa10 	bl	800ef44 <Paint_DrawString_EN>
 8019b24:	e2d2      	b.n	801a0cc <updateStringItem+0x8ac>
 8019b26:	bf00      	nop
 8019b28:	2400c4a8 	.word	0x2400c4a8
 8019b2c:	24000030 	.word	0x24000030
 8019b30:	2400b09c 	.word	0x2400b09c
					}
					else if (howToDraw == DOWN)
 8019b34:	79fb      	ldrb	r3, [r7, #7]
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	f040 8087 	bne.w	8019c4a <updateStringItem+0x42a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b3c:	7ffb      	ldrb	r3, [r7, #31]
 8019b3e:	b29b      	uxth	r3, r3
 8019b40:	3301      	adds	r3, #1
 8019b42:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b44:	7fbb      	ldrb	r3, [r7, #30]
 8019b46:	b29a      	uxth	r2, r3
 8019b48:	7f7b      	ldrb	r3, [r7, #29]
 8019b4a:	b299      	uxth	r1, r3
 8019b4c:	697b      	ldr	r3, [r7, #20]
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	fb11 f303 	smulbb	r3, r1, r3
 8019b54:	b29b      	uxth	r3, r3
 8019b56:	4413      	add	r3, r2
 8019b58:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b5a:	3301      	adds	r3, #1
 8019b5c:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8019b5e:	7ffb      	ldrb	r3, [r7, #31]
 8019b60:	b29c      	uxth	r4, r3
 8019b62:	697b      	ldr	r3, [r7, #20]
 8019b64:	011b      	lsls	r3, r3, #4
 8019b66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019b6a:	4a7d      	ldr	r2, [pc, #500]	; (8019d60 <updateStringItem+0x540>)
 8019b6c:	4413      	add	r3, r2
 8019b6e:	3304      	adds	r3, #4
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7e6 fbbf 	bl	80002f4 <strlen>
 8019b76:	4603      	mov	r3, r0
 8019b78:	b29a      	uxth	r2, r3
 8019b7a:	4b7a      	ldr	r3, [pc, #488]	; (8019d64 <updateStringItem+0x544>)
 8019b7c:	889b      	ldrh	r3, [r3, #4]
 8019b7e:	fb12 f303 	smulbb	r3, r2, r3
 8019b82:	b29b      	uxth	r3, r3
 8019b84:	4423      	add	r3, r4
 8019b86:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b88:	3301      	adds	r3, #1
 8019b8a:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019b8c:	7fbb      	ldrb	r3, [r7, #30]
 8019b8e:	b29a      	uxth	r2, r3
 8019b90:	7f7b      	ldrb	r3, [r7, #29]
 8019b92:	b299      	uxth	r1, r3
 8019b94:	697b      	ldr	r3, [r7, #20]
 8019b96:	b29b      	uxth	r3, r3
 8019b98:	fb11 f303 	smulbb	r3, r1, r3
 8019b9c:	b29b      	uxth	r3, r3
 8019b9e:	4413      	add	r3, r2
 8019ba0:	b29a      	uxth	r2, r3
 8019ba2:	4b70      	ldr	r3, [pc, #448]	; (8019d64 <updateStringItem+0x544>)
 8019ba4:	88db      	ldrh	r3, [r3, #6]
 8019ba6:	4413      	add	r3, r2
 8019ba8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019baa:	3301      	adds	r3, #1
 8019bac:	b29b      	uxth	r3, r3
 8019bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019bb2:	9200      	str	r2, [sp, #0]
 8019bb4:	4602      	mov	r2, r0
 8019bb6:	4631      	mov	r1, r6
 8019bb8:	4628      	mov	r0, r5
 8019bba:	f7f4 fda5 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019bbe:	7ffb      	ldrb	r3, [r7, #31]
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	b298      	uxth	r0, r3
 8019bc6:	7fbb      	ldrb	r3, [r7, #30]
 8019bc8:	b29a      	uxth	r2, r3
 8019bca:	7f7b      	ldrb	r3, [r7, #29]
 8019bcc:	b299      	uxth	r1, r3
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	b29b      	uxth	r3, r3
 8019bd2:	fb11 f303 	smulbb	r3, r1, r3
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	4413      	add	r3, r2
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	3301      	adds	r3, #1
 8019bde:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 8019be0:	697b      	ldr	r3, [r7, #20]
 8019be2:	011b      	lsls	r3, r3, #4
 8019be4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019be8:	4a5d      	ldr	r2, [pc, #372]	; (8019d60 <updateStringItem+0x540>)
 8019bea:	4413      	add	r3, r2
 8019bec:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019bee:	2300      	movs	r3, #0
 8019bf0:	9301      	str	r3, [sp, #4]
 8019bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019bf6:	9300      	str	r3, [sp, #0]
 8019bf8:	4b5a      	ldr	r3, [pc, #360]	; (8019d64 <updateStringItem+0x544>)
 8019bfa:	f7f5 f9a3 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019bfe:	7ffb      	ldrb	r3, [r7, #31]
 8019c00:	b29a      	uxth	r2, r3
 8019c02:	7f3b      	ldrb	r3, [r7, #28]
 8019c04:	085b      	lsrs	r3, r3, #1
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	b29b      	uxth	r3, r3
 8019c0a:	4413      	add	r3, r2
 8019c0c:	b29b      	uxth	r3, r3
 8019c0e:	3301      	adds	r3, #1
 8019c10:	b298      	uxth	r0, r3
 8019c12:	7fbb      	ldrb	r3, [r7, #30]
 8019c14:	b29a      	uxth	r2, r3
 8019c16:	7f7b      	ldrb	r3, [r7, #29]
 8019c18:	b299      	uxth	r1, r3
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	b29b      	uxth	r3, r3
 8019c1e:	fb11 f303 	smulbb	r3, r1, r3
 8019c22:	b29b      	uxth	r3, r3
 8019c24:	4413      	add	r3, r2
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	3301      	adds	r3, #1
 8019c2a:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 8019c2c:	4b4c      	ldr	r3, [pc, #304]	; (8019d60 <updateStringItem+0x540>)
 8019c2e:	799b      	ldrb	r3, [r3, #6]
 8019c30:	011b      	lsls	r3, r3, #4
 8019c32:	3308      	adds	r3, #8
 8019c34:	4a4a      	ldr	r2, [pc, #296]	; (8019d60 <updateStringItem+0x540>)
 8019c36:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019c38:	2300      	movs	r3, #0
 8019c3a:	9301      	str	r3, [sp, #4]
 8019c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c40:	9300      	str	r3, [sp, #0]
 8019c42:	4b48      	ldr	r3, [pc, #288]	; (8019d64 <updateStringItem+0x544>)
 8019c44:	f7f5 f97e 	bl	800ef44 <Paint_DrawString_EN>
 8019c48:	e240      	b.n	801a0cc <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 8019c4a:	79fb      	ldrb	r3, [r7, #7]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	f040 823d 	bne.w	801a0cc <updateStringItem+0x8ac>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019c52:	7ffb      	ldrb	r3, [r7, #31]
 8019c54:	b29b      	uxth	r3, r3
 8019c56:	3301      	adds	r3, #1
 8019c58:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019c5a:	7fbb      	ldrb	r3, [r7, #30]
 8019c5c:	b29a      	uxth	r2, r3
 8019c5e:	7f7b      	ldrb	r3, [r7, #29]
 8019c60:	b299      	uxth	r1, r3
 8019c62:	697b      	ldr	r3, [r7, #20]
 8019c64:	b29b      	uxth	r3, r3
 8019c66:	fb11 f303 	smulbb	r3, r1, r3
 8019c6a:	b29b      	uxth	r3, r3
 8019c6c:	4413      	add	r3, r2
 8019c6e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019c70:	3301      	adds	r3, #1
 8019c72:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8019c74:	7ffb      	ldrb	r3, [r7, #31]
 8019c76:	b29c      	uxth	r4, r3
 8019c78:	697b      	ldr	r3, [r7, #20]
 8019c7a:	011b      	lsls	r3, r3, #4
 8019c7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019c80:	4a37      	ldr	r2, [pc, #220]	; (8019d60 <updateStringItem+0x540>)
 8019c82:	4413      	add	r3, r2
 8019c84:	3304      	adds	r3, #4
 8019c86:	4618      	mov	r0, r3
 8019c88:	f7e6 fb34 	bl	80002f4 <strlen>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	b29a      	uxth	r2, r3
 8019c90:	4b34      	ldr	r3, [pc, #208]	; (8019d64 <updateStringItem+0x544>)
 8019c92:	889b      	ldrh	r3, [r3, #4]
 8019c94:	fb12 f303 	smulbb	r3, r2, r3
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	4423      	add	r3, r4
 8019c9c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019ca2:	7fbb      	ldrb	r3, [r7, #30]
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	7f7b      	ldrb	r3, [r7, #29]
 8019ca8:	b299      	uxth	r1, r3
 8019caa:	697b      	ldr	r3, [r7, #20]
 8019cac:	b29b      	uxth	r3, r3
 8019cae:	fb11 f303 	smulbb	r3, r1, r3
 8019cb2:	b29b      	uxth	r3, r3
 8019cb4:	4413      	add	r3, r2
 8019cb6:	b29a      	uxth	r2, r3
 8019cb8:	4b2a      	ldr	r3, [pc, #168]	; (8019d64 <updateStringItem+0x544>)
 8019cba:	88db      	ldrh	r3, [r3, #6]
 8019cbc:	4413      	add	r3, r2
 8019cbe:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019cc0:	3301      	adds	r3, #1
 8019cc2:	b29b      	uxth	r3, r3
 8019cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019cc8:	9200      	str	r2, [sp, #0]
 8019cca:	4602      	mov	r2, r0
 8019ccc:	4631      	mov	r1, r6
 8019cce:	4628      	mov	r0, r5
 8019cd0:	f7f4 fd1a 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019cd4:	7ffb      	ldrb	r3, [r7, #31]
 8019cd6:	b29b      	uxth	r3, r3
 8019cd8:	3301      	adds	r3, #1
 8019cda:	b298      	uxth	r0, r3
 8019cdc:	7fbb      	ldrb	r3, [r7, #30]
 8019cde:	b29a      	uxth	r2, r3
 8019ce0:	7f7b      	ldrb	r3, [r7, #29]
 8019ce2:	b299      	uxth	r1, r3
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	b29b      	uxth	r3, r3
 8019ce8:	fb11 f303 	smulbb	r3, r1, r3
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	4413      	add	r3, r2
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	011b      	lsls	r3, r3, #4
 8019cfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019cfe:	4a18      	ldr	r2, [pc, #96]	; (8019d60 <updateStringItem+0x540>)
 8019d00:	4413      	add	r3, r2
 8019d02:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d04:	2300      	movs	r3, #0
 8019d06:	9301      	str	r3, [sp, #4]
 8019d08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019d0c:	9300      	str	r3, [sp, #0]
 8019d0e:	4b15      	ldr	r3, [pc, #84]	; (8019d64 <updateStringItem+0x544>)
 8019d10:	f7f5 f918 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d14:	7ffb      	ldrb	r3, [r7, #31]
 8019d16:	b29a      	uxth	r2, r3
 8019d18:	7f3b      	ldrb	r3, [r7, #28]
 8019d1a:	085b      	lsrs	r3, r3, #1
 8019d1c:	b2db      	uxtb	r3, r3
 8019d1e:	b29b      	uxth	r3, r3
 8019d20:	4413      	add	r3, r2
 8019d22:	b29b      	uxth	r3, r3
 8019d24:	3301      	adds	r3, #1
 8019d26:	b298      	uxth	r0, r3
 8019d28:	7fbb      	ldrb	r3, [r7, #30]
 8019d2a:	b29a      	uxth	r2, r3
 8019d2c:	7f7b      	ldrb	r3, [r7, #29]
 8019d2e:	b299      	uxth	r1, r3
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	fb11 f303 	smulbb	r3, r1, r3
 8019d38:	b29b      	uxth	r3, r3
 8019d3a:	4413      	add	r3, r2
 8019d3c:	b29b      	uxth	r3, r3
 8019d3e:	3301      	adds	r3, #1
 8019d40:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 8019d42:	4b07      	ldr	r3, [pc, #28]	; (8019d60 <updateStringItem+0x540>)
 8019d44:	799b      	ldrb	r3, [r3, #6]
 8019d46:	011b      	lsls	r3, r3, #4
 8019d48:	3308      	adds	r3, #8
 8019d4a:	4a05      	ldr	r2, [pc, #20]	; (8019d60 <updateStringItem+0x540>)
 8019d4c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d4e:	2300      	movs	r3, #0
 8019d50:	9301      	str	r3, [sp, #4]
 8019d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d56:	9300      	str	r3, [sp, #0]
 8019d58:	4b02      	ldr	r3, [pc, #8]	; (8019d64 <updateStringItem+0x544>)
 8019d5a:	f7f5 f8f3 	bl	800ef44 <Paint_DrawString_EN>
 8019d5e:	e1b5      	b.n	801a0cc <updateStringItem+0x8ac>
 8019d60:	2400c4a8 	.word	0x2400c4a8
 8019d64:	24000030 	.word	0x24000030
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 8019d68:	4b92      	ldr	r3, [pc, #584]	; (8019fb4 <updateStringItem+0x794>)
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	2b0b      	cmp	r3, #11
 8019d6e:	f040 8127 	bne.w	8019fc0 <updateStringItem+0x7a0>
				{
					if (howToDraw == RIGHT)
 8019d72:	79fb      	ldrb	r3, [r7, #7]
 8019d74:	2b04      	cmp	r3, #4
 8019d76:	f040 8087 	bne.w	8019e88 <updateStringItem+0x668>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d7a:	7ffb      	ldrb	r3, [r7, #31]
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	3301      	adds	r3, #1
 8019d80:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d82:	7fbb      	ldrb	r3, [r7, #30]
 8019d84:	b29a      	uxth	r2, r3
 8019d86:	7f7b      	ldrb	r3, [r7, #29]
 8019d88:	b299      	uxth	r1, r3
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	b29b      	uxth	r3, r3
 8019d8e:	fb11 f303 	smulbb	r3, r1, r3
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	4413      	add	r3, r2
 8019d96:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d98:	3301      	adds	r3, #1
 8019d9a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8019d9c:	7ffb      	ldrb	r3, [r7, #31]
 8019d9e:	b29c      	uxth	r4, r3
 8019da0:	697b      	ldr	r3, [r7, #20]
 8019da2:	011b      	lsls	r3, r3, #4
 8019da4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019da8:	4a83      	ldr	r2, [pc, #524]	; (8019fb8 <updateStringItem+0x798>)
 8019daa:	4413      	add	r3, r2
 8019dac:	3304      	adds	r3, #4
 8019dae:	4618      	mov	r0, r3
 8019db0:	f7e6 faa0 	bl	80002f4 <strlen>
 8019db4:	4603      	mov	r3, r0
 8019db6:	b29a      	uxth	r2, r3
 8019db8:	4b80      	ldr	r3, [pc, #512]	; (8019fbc <updateStringItem+0x79c>)
 8019dba:	889b      	ldrh	r3, [r3, #4]
 8019dbc:	fb12 f303 	smulbb	r3, r2, r3
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	4423      	add	r3, r4
 8019dc4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019dc6:	3301      	adds	r3, #1
 8019dc8:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019dca:	7fbb      	ldrb	r3, [r7, #30]
 8019dcc:	b29a      	uxth	r2, r3
 8019dce:	7f7b      	ldrb	r3, [r7, #29]
 8019dd0:	b299      	uxth	r1, r3
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	fb11 f303 	smulbb	r3, r1, r3
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	4413      	add	r3, r2
 8019dde:	b29a      	uxth	r2, r3
 8019de0:	4b76      	ldr	r3, [pc, #472]	; (8019fbc <updateStringItem+0x79c>)
 8019de2:	88db      	ldrh	r3, [r3, #6]
 8019de4:	4413      	add	r3, r2
 8019de6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019de8:	3301      	adds	r3, #1
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019df0:	9200      	str	r2, [sp, #0]
 8019df2:	4602      	mov	r2, r0
 8019df4:	4631      	mov	r1, r6
 8019df6:	4628      	mov	r0, r5
 8019df8:	f7f4 fc86 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019dfc:	7ffb      	ldrb	r3, [r7, #31]
 8019dfe:	b29b      	uxth	r3, r3
 8019e00:	3301      	adds	r3, #1
 8019e02:	b298      	uxth	r0, r3
 8019e04:	7fbb      	ldrb	r3, [r7, #30]
 8019e06:	b29a      	uxth	r2, r3
 8019e08:	7f7b      	ldrb	r3, [r7, #29]
 8019e0a:	b299      	uxth	r1, r3
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	fb11 f303 	smulbb	r3, r1, r3
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	4413      	add	r3, r2
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 8019e1e:	697b      	ldr	r3, [r7, #20]
 8019e20:	011b      	lsls	r3, r3, #4
 8019e22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019e26:	4a64      	ldr	r2, [pc, #400]	; (8019fb8 <updateStringItem+0x798>)
 8019e28:	4413      	add	r3, r2
 8019e2a:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	9301      	str	r3, [sp, #4]
 8019e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e34:	9300      	str	r3, [sp, #0]
 8019e36:	4b61      	ldr	r3, [pc, #388]	; (8019fbc <updateStringItem+0x79c>)
 8019e38:	f7f5 f884 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e3c:	7ffb      	ldrb	r3, [r7, #31]
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	7f3b      	ldrb	r3, [r7, #28]
 8019e42:	085b      	lsrs	r3, r3, #1
 8019e44:	b2db      	uxtb	r3, r3
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	4413      	add	r3, r2
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	3301      	adds	r3, #1
 8019e4e:	b298      	uxth	r0, r3
 8019e50:	7fbb      	ldrb	r3, [r7, #30]
 8019e52:	b29a      	uxth	r2, r3
 8019e54:	7f7b      	ldrb	r3, [r7, #29]
 8019e56:	b299      	uxth	r1, r3
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	fb11 f303 	smulbb	r3, r1, r3
 8019e60:	b29b      	uxth	r3, r3
 8019e62:	4413      	add	r3, r2
 8019e64:	b29b      	uxth	r3, r3
 8019e66:	3301      	adds	r3, #1
 8019e68:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 8019e6a:	4b53      	ldr	r3, [pc, #332]	; (8019fb8 <updateStringItem+0x798>)
 8019e6c:	799b      	ldrb	r3, [r3, #6]
 8019e6e:	011b      	lsls	r3, r3, #4
 8019e70:	3308      	adds	r3, #8
 8019e72:	4a51      	ldr	r2, [pc, #324]	; (8019fb8 <updateStringItem+0x798>)
 8019e74:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e76:	2300      	movs	r3, #0
 8019e78:	9301      	str	r3, [sp, #4]
 8019e7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019e7e:	9300      	str	r3, [sp, #0]
 8019e80:	4b4e      	ldr	r3, [pc, #312]	; (8019fbc <updateStringItem+0x79c>)
 8019e82:	f7f5 f85f 	bl	800ef44 <Paint_DrawString_EN>
 8019e86:	e121      	b.n	801a0cc <updateStringItem+0x8ac>
					}
					else if (howToDraw == DOWN)
 8019e88:	79fb      	ldrb	r3, [r7, #7]
 8019e8a:	2b01      	cmp	r3, #1
 8019e8c:	d146      	bne.n	8019f1c <updateStringItem+0x6fc>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 8019e8e:	4b4a      	ldr	r3, [pc, #296]	; (8019fb8 <updateStringItem+0x798>)
 8019e90:	799b      	ldrb	r3, [r3, #6]
 8019e92:	461a      	mov	r2, r3
 8019e94:	4b48      	ldr	r3, [pc, #288]	; (8019fb8 <updateStringItem+0x798>)
 8019e96:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8019e9a:	1ad3      	subs	r3, r2, r3
 8019e9c:	ee07 3a90 	vmov	s15, r3
 8019ea0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019ea4:	4b44      	ldr	r3, [pc, #272]	; (8019fb8 <updateStringItem+0x798>)
 8019ea6:	791b      	ldrb	r3, [r3, #4]
 8019ea8:	ee06 3a90 	vmov	s13, r3
 8019eac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019eb0:	eeb0 1b46 	vmov.f64	d1, d6
 8019eb4:	eeb0 0b47 	vmov.f64	d0, d7
 8019eb8:	f005 ff68 	bl	801fd8c <fmax>
 8019ebc:	eeb0 7b40 	vmov.f64	d7, d0
 8019ec0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019ec4:	edc7 7a00 	vstr	s15, [r7]
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	b2da      	uxtb	r2, r3
 8019ecc:	4b3a      	ldr	r3, [pc, #232]	; (8019fb8 <updateStringItem+0x798>)
 8019ece:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019ed0:	7ffb      	ldrb	r3, [r7, #31]
 8019ed2:	b29a      	uxth	r2, r3
 8019ed4:	7f3b      	ldrb	r3, [r7, #28]
 8019ed6:	085b      	lsrs	r3, r3, #1
 8019ed8:	b2db      	uxtb	r3, r3
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	4413      	add	r3, r2
 8019ede:	b29b      	uxth	r3, r3
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	b298      	uxth	r0, r3
 8019ee4:	7fbb      	ldrb	r3, [r7, #30]
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	7f7b      	ldrb	r3, [r7, #29]
 8019eea:	b299      	uxth	r1, r3
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	fb11 f303 	smulbb	r3, r1, r3
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	4413      	add	r3, r2
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	3301      	adds	r3, #1
 8019efc:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 8019efe:	4b2e      	ldr	r3, [pc, #184]	; (8019fb8 <updateStringItem+0x798>)
 8019f00:	799b      	ldrb	r3, [r3, #6]
 8019f02:	011b      	lsls	r3, r3, #4
 8019f04:	3308      	adds	r3, #8
 8019f06:	4a2c      	ldr	r2, [pc, #176]	; (8019fb8 <updateStringItem+0x798>)
 8019f08:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	9301      	str	r3, [sp, #4]
 8019f0e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019f12:	9300      	str	r3, [sp, #0]
 8019f14:	4b29      	ldr	r3, [pc, #164]	; (8019fbc <updateStringItem+0x79c>)
 8019f16:	f7f5 f815 	bl	800ef44 <Paint_DrawString_EN>
 8019f1a:	e0d7      	b.n	801a0cc <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 8019f1c:	79fb      	ldrb	r3, [r7, #7]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	f040 80d4 	bne.w	801a0cc <updateStringItem+0x8ac>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 8019f24:	4b24      	ldr	r3, [pc, #144]	; (8019fb8 <updateStringItem+0x798>)
 8019f26:	799b      	ldrb	r3, [r3, #6]
 8019f28:	461a      	mov	r2, r3
 8019f2a:	4b23      	ldr	r3, [pc, #140]	; (8019fb8 <updateStringItem+0x798>)
 8019f2c:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8019f30:	4413      	add	r3, r2
 8019f32:	ee07 3a90 	vmov	s15, r3
 8019f36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019f3a:	4b1f      	ldr	r3, [pc, #124]	; (8019fb8 <updateStringItem+0x798>)
 8019f3c:	795b      	ldrb	r3, [r3, #5]
 8019f3e:	ee06 3a90 	vmov	s13, r3
 8019f42:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019f46:	eeb0 1b46 	vmov.f64	d1, d6
 8019f4a:	eeb0 0b47 	vmov.f64	d0, d7
 8019f4e:	f005 ff38 	bl	801fdc2 <fmin>
 8019f52:	eeb0 7b40 	vmov.f64	d7, d0
 8019f56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019f5a:	edc7 7a00 	vstr	s15, [r7]
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	b2da      	uxtb	r2, r3
 8019f62:	4b15      	ldr	r3, [pc, #84]	; (8019fb8 <updateStringItem+0x798>)
 8019f64:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f66:	7ffb      	ldrb	r3, [r7, #31]
 8019f68:	b29a      	uxth	r2, r3
 8019f6a:	7f3b      	ldrb	r3, [r7, #28]
 8019f6c:	085b      	lsrs	r3, r3, #1
 8019f6e:	b2db      	uxtb	r3, r3
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	4413      	add	r3, r2
 8019f74:	b29b      	uxth	r3, r3
 8019f76:	3301      	adds	r3, #1
 8019f78:	b298      	uxth	r0, r3
 8019f7a:	7fbb      	ldrb	r3, [r7, #30]
 8019f7c:	b29a      	uxth	r2, r3
 8019f7e:	7f7b      	ldrb	r3, [r7, #29]
 8019f80:	b299      	uxth	r1, r3
 8019f82:	697b      	ldr	r3, [r7, #20]
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	fb11 f303 	smulbb	r3, r1, r3
 8019f8a:	b29b      	uxth	r3, r3
 8019f8c:	4413      	add	r3, r2
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	3301      	adds	r3, #1
 8019f92:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 8019f94:	4b08      	ldr	r3, [pc, #32]	; (8019fb8 <updateStringItem+0x798>)
 8019f96:	799b      	ldrb	r3, [r3, #6]
 8019f98:	011b      	lsls	r3, r3, #4
 8019f9a:	3308      	adds	r3, #8
 8019f9c:	4a06      	ldr	r2, [pc, #24]	; (8019fb8 <updateStringItem+0x798>)
 8019f9e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	9301      	str	r3, [sp, #4]
 8019fa4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019fa8:	9300      	str	r3, [sp, #0]
 8019faa:	4b04      	ldr	r3, [pc, #16]	; (8019fbc <updateStringItem+0x79c>)
 8019fac:	f7f4 ffca 	bl	800ef44 <Paint_DrawString_EN>
 8019fb0:	e08c      	b.n	801a0cc <updateStringItem+0x8ac>
 8019fb2:	bf00      	nop
 8019fb4:	2400b09c 	.word	0x2400b09c
 8019fb8:	2400c4a8 	.word	0x2400c4a8
 8019fbc:	24000030 	.word	0x24000030
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019fc0:	7ffb      	ldrb	r3, [r7, #31]
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019fc8:	7fbb      	ldrb	r3, [r7, #30]
 8019fca:	b29a      	uxth	r2, r3
 8019fcc:	7f7b      	ldrb	r3, [r7, #29]
 8019fce:	b299      	uxth	r1, r3
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	b29b      	uxth	r3, r3
 8019fd4:	fb11 f303 	smulbb	r3, r1, r3
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	4413      	add	r3, r2
 8019fdc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019fde:	3301      	adds	r3, #1
 8019fe0:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8019fe2:	7ffb      	ldrb	r3, [r7, #31]
 8019fe4:	b29c      	uxth	r4, r3
 8019fe6:	697b      	ldr	r3, [r7, #20]
 8019fe8:	011b      	lsls	r3, r3, #4
 8019fea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019fee:	4a8e      	ldr	r2, [pc, #568]	; (801a228 <updateStringItem+0xa08>)
 8019ff0:	4413      	add	r3, r2
 8019ff2:	3304      	adds	r3, #4
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	f7e6 f97d 	bl	80002f4 <strlen>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	b29a      	uxth	r2, r3
 8019ffe:	4b8b      	ldr	r3, [pc, #556]	; (801a22c <updateStringItem+0xa0c>)
 801a000:	889b      	ldrh	r3, [r3, #4]
 801a002:	fb12 f303 	smulbb	r3, r2, r3
 801a006:	b29b      	uxth	r3, r3
 801a008:	4423      	add	r3, r4
 801a00a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a00c:	3301      	adds	r3, #1
 801a00e:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a010:	7fbb      	ldrb	r3, [r7, #30]
 801a012:	b29a      	uxth	r2, r3
 801a014:	7f7b      	ldrb	r3, [r7, #29]
 801a016:	b299      	uxth	r1, r3
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	fb11 f303 	smulbb	r3, r1, r3
 801a020:	b29b      	uxth	r3, r3
 801a022:	4413      	add	r3, r2
 801a024:	b29a      	uxth	r2, r3
 801a026:	4b81      	ldr	r3, [pc, #516]	; (801a22c <updateStringItem+0xa0c>)
 801a028:	88db      	ldrh	r3, [r3, #6]
 801a02a:	4413      	add	r3, r2
 801a02c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a02e:	3301      	adds	r3, #1
 801a030:	b29b      	uxth	r3, r3
 801a032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a036:	9200      	str	r2, [sp, #0]
 801a038:	4602      	mov	r2, r0
 801a03a:	4631      	mov	r1, r6
 801a03c:	4628      	mov	r0, r5
 801a03e:	f7f4 fb63 	bl	800e708 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a042:	7ffb      	ldrb	r3, [r7, #31]
 801a044:	b29b      	uxth	r3, r3
 801a046:	3301      	adds	r3, #1
 801a048:	b298      	uxth	r0, r3
 801a04a:	7fbb      	ldrb	r3, [r7, #30]
 801a04c:	b29a      	uxth	r2, r3
 801a04e:	7f7b      	ldrb	r3, [r7, #29]
 801a050:	b299      	uxth	r1, r3
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	b29b      	uxth	r3, r3
 801a056:	fb11 f303 	smulbb	r3, r1, r3
 801a05a:	b29b      	uxth	r3, r3
 801a05c:	4413      	add	r3, r2
 801a05e:	b29b      	uxth	r3, r3
 801a060:	3301      	adds	r3, #1
 801a062:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	011b      	lsls	r3, r3, #4
 801a068:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a06c:	4a6e      	ldr	r2, [pc, #440]	; (801a228 <updateStringItem+0xa08>)
 801a06e:	4413      	add	r3, r2
 801a070:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a072:	2300      	movs	r3, #0
 801a074:	9301      	str	r3, [sp, #4]
 801a076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a07a:	9300      	str	r3, [sp, #0]
 801a07c:	4b6b      	ldr	r3, [pc, #428]	; (801a22c <updateStringItem+0xa0c>)
 801a07e:	f7f4 ff61 	bl	800ef44 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a082:	7ffb      	ldrb	r3, [r7, #31]
 801a084:	b29a      	uxth	r2, r3
 801a086:	7f3b      	ldrb	r3, [r7, #28]
 801a088:	085b      	lsrs	r3, r3, #1
 801a08a:	b2db      	uxtb	r3, r3
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	4413      	add	r3, r2
 801a090:	b29b      	uxth	r3, r3
 801a092:	3301      	adds	r3, #1
 801a094:	b298      	uxth	r0, r3
 801a096:	7fbb      	ldrb	r3, [r7, #30]
 801a098:	b29a      	uxth	r2, r3
 801a09a:	7f7b      	ldrb	r3, [r7, #29]
 801a09c:	b299      	uxth	r1, r3
 801a09e:	697b      	ldr	r3, [r7, #20]
 801a0a0:	b29b      	uxth	r3, r3
 801a0a2:	fb11 f303 	smulbb	r3, r1, r3
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	4413      	add	r3, r2
 801a0aa:	b29b      	uxth	r3, r3
 801a0ac:	3301      	adds	r3, #1
 801a0ae:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801a0b0:	4b5d      	ldr	r3, [pc, #372]	; (801a228 <updateStringItem+0xa08>)
 801a0b2:	799b      	ldrb	r3, [r3, #6]
 801a0b4:	011b      	lsls	r3, r3, #4
 801a0b6:	3308      	adds	r3, #8
 801a0b8:	4a5b      	ldr	r2, [pc, #364]	; (801a228 <updateStringItem+0xa08>)
 801a0ba:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a0bc:	2300      	movs	r3, #0
 801a0be:	9301      	str	r3, [sp, #4]
 801a0c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a0c4:	9300      	str	r3, [sp, #0]
 801a0c6:	4b59      	ldr	r3, [pc, #356]	; (801a22c <updateStringItem+0xa0c>)
 801a0c8:	f7f4 ff3c 	bl	800ef44 <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 801a0cc:	697b      	ldr	r3, [r7, #20]
 801a0ce:	2b03      	cmp	r3, #3
 801a0d0:	f040 835e 	bne.w	801a790 <updateStringItem+0xf70>
			{
				char localString[8] = "";
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	60fb      	str	r3, [r7, #12]
 801a0d8:	2300      	movs	r3, #0
 801a0da:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 801a0dc:	4b52      	ldr	r3, [pc, #328]	; (801a228 <updateStringItem+0xa08>)
 801a0de:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	f107 030c 	add.w	r3, r7, #12
 801a0e8:	4951      	ldr	r1, [pc, #324]	; (801a230 <updateStringItem+0xa10>)
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f002 fac6 	bl	801c67c <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 801a0f0:	4b50      	ldr	r3, [pc, #320]	; (801a234 <updateStringItem+0xa14>)
 801a0f2:	781b      	ldrb	r3, [r3, #0]
 801a0f4:	2b03      	cmp	r3, #3
 801a0f6:	f040 81b1 	bne.w	801a45c <updateStringItem+0xc3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 801a0fa:	79fb      	ldrb	r3, [r7, #7]
 801a0fc:	2b03      	cmp	r3, #3
 801a0fe:	d003      	beq.n	801a108 <updateStringItem+0x8e8>
 801a100:	79fb      	ldrb	r3, [r7, #7]
 801a102:	2b02      	cmp	r3, #2
 801a104:	f040 8098 	bne.w	801a238 <updateStringItem+0xa18>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a108:	7ffb      	ldrb	r3, [r7, #31]
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	3301      	adds	r3, #1
 801a10e:	b298      	uxth	r0, r3
 801a110:	7fbb      	ldrb	r3, [r7, #30]
 801a112:	b29a      	uxth	r2, r3
 801a114:	7f7b      	ldrb	r3, [r7, #29]
 801a116:	b299      	uxth	r1, r3
 801a118:	697b      	ldr	r3, [r7, #20]
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	fb11 f303 	smulbb	r3, r1, r3
 801a120:	b29b      	uxth	r3, r3
 801a122:	4413      	add	r3, r2
 801a124:	b29b      	uxth	r3, r3
 801a126:	3301      	adds	r3, #1
 801a128:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a12a:	697b      	ldr	r3, [r7, #20]
 801a12c:	011b      	lsls	r3, r3, #4
 801a12e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a132:	4a3d      	ldr	r2, [pc, #244]	; (801a228 <updateStringItem+0xa08>)
 801a134:	4413      	add	r3, r2
 801a136:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a138:	2300      	movs	r3, #0
 801a13a:	9301      	str	r3, [sp, #4]
 801a13c:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a140:	9300      	str	r3, [sp, #0]
 801a142:	4b3a      	ldr	r3, [pc, #232]	; (801a22c <updateStringItem+0xa0c>)
 801a144:	f7f4 fefe 	bl	800ef44 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801a148:	7ffb      	ldrb	r3, [r7, #31]
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	7f3b      	ldrb	r3, [r7, #28]
 801a14e:	085b      	lsrs	r3, r3, #1
 801a150:	b2db      	uxtb	r3, r3
 801a152:	b29b      	uxth	r3, r3
 801a154:	4413      	add	r3, r2
 801a156:	b29b      	uxth	r3, r3
 801a158:	3301      	adds	r3, #1
 801a15a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a15c:	7fbb      	ldrb	r3, [r7, #30]
 801a15e:	b29a      	uxth	r2, r3
 801a160:	7f7b      	ldrb	r3, [r7, #29]
 801a162:	b299      	uxth	r1, r3
 801a164:	697b      	ldr	r3, [r7, #20]
 801a166:	b29b      	uxth	r3, r3
 801a168:	fb11 f303 	smulbb	r3, r1, r3
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	4413      	add	r3, r2
 801a170:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801a172:	3301      	adds	r3, #1
 801a174:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801a176:	7ffb      	ldrb	r3, [r7, #31]
 801a178:	b29a      	uxth	r2, r3
 801a17a:	7f3b      	ldrb	r3, [r7, #28]
 801a17c:	085b      	lsrs	r3, r3, #1
 801a17e:	b2db      	uxtb	r3, r3
 801a180:	b29b      	uxth	r3, r3
 801a182:	4413      	add	r3, r2
 801a184:	b29c      	uxth	r4, r3
 801a186:	697b      	ldr	r3, [r7, #20]
 801a188:	011b      	lsls	r3, r3, #4
 801a18a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a18e:	4a26      	ldr	r2, [pc, #152]	; (801a228 <updateStringItem+0xa08>)
 801a190:	4413      	add	r3, r2
 801a192:	3304      	adds	r3, #4
 801a194:	4618      	mov	r0, r3
 801a196:	f7e6 f8ad 	bl	80002f4 <strlen>
 801a19a:	4603      	mov	r3, r0
 801a19c:	b29a      	uxth	r2, r3
 801a19e:	4b23      	ldr	r3, [pc, #140]	; (801a22c <updateStringItem+0xa0c>)
 801a1a0:	889b      	ldrh	r3, [r3, #4]
 801a1a2:	fb12 f303 	smulbb	r3, r2, r3
 801a1a6:	b29b      	uxth	r3, r3
 801a1a8:	4423      	add	r3, r4
 801a1aa:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801a1ac:	3301      	adds	r3, #1
 801a1ae:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a1b0:	7fbb      	ldrb	r3, [r7, #30]
 801a1b2:	b29a      	uxth	r2, r3
 801a1b4:	7f7b      	ldrb	r3, [r7, #29]
 801a1b6:	b299      	uxth	r1, r3
 801a1b8:	697b      	ldr	r3, [r7, #20]
 801a1ba:	b29b      	uxth	r3, r3
 801a1bc:	fb11 f303 	smulbb	r3, r1, r3
 801a1c0:	b29b      	uxth	r3, r3
 801a1c2:	4413      	add	r3, r2
 801a1c4:	b29a      	uxth	r2, r3
 801a1c6:	4b19      	ldr	r3, [pc, #100]	; (801a22c <updateStringItem+0xa0c>)
 801a1c8:	88db      	ldrh	r3, [r3, #6]
 801a1ca:	4413      	add	r3, r2
 801a1cc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a1d6:	9200      	str	r2, [sp, #0]
 801a1d8:	4602      	mov	r2, r0
 801a1da:	4631      	mov	r1, r6
 801a1dc:	4628      	mov	r0, r5
 801a1de:	f7f4 fa93 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a1e2:	7ffb      	ldrb	r3, [r7, #31]
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	7f3b      	ldrb	r3, [r7, #28]
 801a1e8:	085b      	lsrs	r3, r3, #1
 801a1ea:	b2db      	uxtb	r3, r3
 801a1ec:	b29b      	uxth	r3, r3
 801a1ee:	4413      	add	r3, r2
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	b298      	uxth	r0, r3
 801a1f6:	7fbb      	ldrb	r3, [r7, #30]
 801a1f8:	b29a      	uxth	r2, r3
 801a1fa:	7f7b      	ldrb	r3, [r7, #29]
 801a1fc:	b299      	uxth	r1, r3
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	b29b      	uxth	r3, r3
 801a202:	fb11 f303 	smulbb	r3, r1, r3
 801a206:	b29b      	uxth	r3, r3
 801a208:	4413      	add	r3, r2
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	3301      	adds	r3, #1
 801a20e:	b299      	uxth	r1, r3
 801a210:	f107 020c 	add.w	r2, r7, #12
 801a214:	2300      	movs	r3, #0
 801a216:	9301      	str	r3, [sp, #4]
 801a218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a21c:	9300      	str	r3, [sp, #0]
 801a21e:	4b03      	ldr	r3, [pc, #12]	; (801a22c <updateStringItem+0xa0c>)
 801a220:	f7f4 fe90 	bl	800ef44 <Paint_DrawString_EN>
 801a224:	e2b4      	b.n	801a790 <updateStringItem+0xf70>
 801a226:	bf00      	nop
 801a228:	2400c4a8 	.word	0x2400c4a8
 801a22c:	24000030 	.word	0x24000030
 801a230:	080205e4 	.word	0x080205e4
 801a234:	2400b09c 	.word	0x2400b09c
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 801a238:	79fb      	ldrb	r3, [r7, #7]
 801a23a:	2b01      	cmp	r3, #1
 801a23c:	f040 8083 	bne.w	801a346 <updateStringItem+0xb26>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a240:	7ffb      	ldrb	r3, [r7, #31]
 801a242:	b29b      	uxth	r3, r3
 801a244:	3301      	adds	r3, #1
 801a246:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a248:	7fbb      	ldrb	r3, [r7, #30]
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	7f7b      	ldrb	r3, [r7, #29]
 801a24e:	b299      	uxth	r1, r3
 801a250:	697b      	ldr	r3, [r7, #20]
 801a252:	b29b      	uxth	r3, r3
 801a254:	fb11 f303 	smulbb	r3, r1, r3
 801a258:	b29b      	uxth	r3, r3
 801a25a:	4413      	add	r3, r2
 801a25c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a25e:	3301      	adds	r3, #1
 801a260:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801a262:	7ffb      	ldrb	r3, [r7, #31]
 801a264:	b29c      	uxth	r4, r3
 801a266:	697b      	ldr	r3, [r7, #20]
 801a268:	011b      	lsls	r3, r3, #4
 801a26a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a26e:	4a79      	ldr	r2, [pc, #484]	; (801a454 <updateStringItem+0xc34>)
 801a270:	4413      	add	r3, r2
 801a272:	3304      	adds	r3, #4
 801a274:	4618      	mov	r0, r3
 801a276:	f7e6 f83d 	bl	80002f4 <strlen>
 801a27a:	4603      	mov	r3, r0
 801a27c:	b29a      	uxth	r2, r3
 801a27e:	4b76      	ldr	r3, [pc, #472]	; (801a458 <updateStringItem+0xc38>)
 801a280:	889b      	ldrh	r3, [r3, #4]
 801a282:	fb12 f303 	smulbb	r3, r2, r3
 801a286:	b29b      	uxth	r3, r3
 801a288:	4423      	add	r3, r4
 801a28a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a28c:	3301      	adds	r3, #1
 801a28e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a290:	7fbb      	ldrb	r3, [r7, #30]
 801a292:	b29a      	uxth	r2, r3
 801a294:	7f7b      	ldrb	r3, [r7, #29]
 801a296:	b299      	uxth	r1, r3
 801a298:	697b      	ldr	r3, [r7, #20]
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	fb11 f303 	smulbb	r3, r1, r3
 801a2a0:	b29b      	uxth	r3, r3
 801a2a2:	4413      	add	r3, r2
 801a2a4:	b29a      	uxth	r2, r3
 801a2a6:	4b6c      	ldr	r3, [pc, #432]	; (801a458 <updateStringItem+0xc38>)
 801a2a8:	88db      	ldrh	r3, [r3, #6]
 801a2aa:	4413      	add	r3, r2
 801a2ac:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a2ae:	3301      	adds	r3, #1
 801a2b0:	b29b      	uxth	r3, r3
 801a2b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a2b6:	9200      	str	r2, [sp, #0]
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	4631      	mov	r1, r6
 801a2bc:	4628      	mov	r0, r5
 801a2be:	f7f4 fa23 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a2c2:	7ffb      	ldrb	r3, [r7, #31]
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	b298      	uxth	r0, r3
 801a2ca:	7fbb      	ldrb	r3, [r7, #30]
 801a2cc:	b29a      	uxth	r2, r3
 801a2ce:	7f7b      	ldrb	r3, [r7, #29]
 801a2d0:	b299      	uxth	r1, r3
 801a2d2:	697b      	ldr	r3, [r7, #20]
 801a2d4:	b29b      	uxth	r3, r3
 801a2d6:	fb11 f303 	smulbb	r3, r1, r3
 801a2da:	b29b      	uxth	r3, r3
 801a2dc:	4413      	add	r3, r2
 801a2de:	b29b      	uxth	r3, r3
 801a2e0:	3301      	adds	r3, #1
 801a2e2:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a2e4:	697b      	ldr	r3, [r7, #20]
 801a2e6:	011b      	lsls	r3, r3, #4
 801a2e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a2ec:	4a59      	ldr	r2, [pc, #356]	; (801a454 <updateStringItem+0xc34>)
 801a2ee:	4413      	add	r3, r2
 801a2f0:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	9301      	str	r3, [sp, #4]
 801a2f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a2fa:	9300      	str	r3, [sp, #0]
 801a2fc:	4b56      	ldr	r3, [pc, #344]	; (801a458 <updateStringItem+0xc38>)
 801a2fe:	f7f4 fe21 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a302:	7ffb      	ldrb	r3, [r7, #31]
 801a304:	b29a      	uxth	r2, r3
 801a306:	7f3b      	ldrb	r3, [r7, #28]
 801a308:	085b      	lsrs	r3, r3, #1
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	b29b      	uxth	r3, r3
 801a30e:	4413      	add	r3, r2
 801a310:	b29b      	uxth	r3, r3
 801a312:	3301      	adds	r3, #1
 801a314:	b298      	uxth	r0, r3
 801a316:	7fbb      	ldrb	r3, [r7, #30]
 801a318:	b29a      	uxth	r2, r3
 801a31a:	7f7b      	ldrb	r3, [r7, #29]
 801a31c:	b299      	uxth	r1, r3
 801a31e:	697b      	ldr	r3, [r7, #20]
 801a320:	b29b      	uxth	r3, r3
 801a322:	fb11 f303 	smulbb	r3, r1, r3
 801a326:	b29b      	uxth	r3, r3
 801a328:	4413      	add	r3, r2
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	3301      	adds	r3, #1
 801a32e:	b299      	uxth	r1, r3
 801a330:	f107 020c 	add.w	r2, r7, #12
 801a334:	2300      	movs	r3, #0
 801a336:	9301      	str	r3, [sp, #4]
 801a338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a33c:	9300      	str	r3, [sp, #0]
 801a33e:	4b46      	ldr	r3, [pc, #280]	; (801a458 <updateStringItem+0xc38>)
 801a340:	f7f4 fe00 	bl	800ef44 <Paint_DrawString_EN>
 801a344:	e224      	b.n	801a790 <updateStringItem+0xf70>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 801a346:	79fb      	ldrb	r3, [r7, #7]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	f040 8221 	bne.w	801a790 <updateStringItem+0xf70>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a34e:	7ffb      	ldrb	r3, [r7, #31]
 801a350:	b29b      	uxth	r3, r3
 801a352:	3301      	adds	r3, #1
 801a354:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a356:	7fbb      	ldrb	r3, [r7, #30]
 801a358:	b29a      	uxth	r2, r3
 801a35a:	7f7b      	ldrb	r3, [r7, #29]
 801a35c:	b299      	uxth	r1, r3
 801a35e:	697b      	ldr	r3, [r7, #20]
 801a360:	b29b      	uxth	r3, r3
 801a362:	fb11 f303 	smulbb	r3, r1, r3
 801a366:	b29b      	uxth	r3, r3
 801a368:	4413      	add	r3, r2
 801a36a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a36c:	3301      	adds	r3, #1
 801a36e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801a370:	7ffb      	ldrb	r3, [r7, #31]
 801a372:	b29c      	uxth	r4, r3
 801a374:	697b      	ldr	r3, [r7, #20]
 801a376:	011b      	lsls	r3, r3, #4
 801a378:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a37c:	4a35      	ldr	r2, [pc, #212]	; (801a454 <updateStringItem+0xc34>)
 801a37e:	4413      	add	r3, r2
 801a380:	3304      	adds	r3, #4
 801a382:	4618      	mov	r0, r3
 801a384:	f7e5 ffb6 	bl	80002f4 <strlen>
 801a388:	4603      	mov	r3, r0
 801a38a:	b29a      	uxth	r2, r3
 801a38c:	4b32      	ldr	r3, [pc, #200]	; (801a458 <updateStringItem+0xc38>)
 801a38e:	889b      	ldrh	r3, [r3, #4]
 801a390:	fb12 f303 	smulbb	r3, r2, r3
 801a394:	b29b      	uxth	r3, r3
 801a396:	4423      	add	r3, r4
 801a398:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a39a:	3301      	adds	r3, #1
 801a39c:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a39e:	7fbb      	ldrb	r3, [r7, #30]
 801a3a0:	b29a      	uxth	r2, r3
 801a3a2:	7f7b      	ldrb	r3, [r7, #29]
 801a3a4:	b299      	uxth	r1, r3
 801a3a6:	697b      	ldr	r3, [r7, #20]
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	fb11 f303 	smulbb	r3, r1, r3
 801a3ae:	b29b      	uxth	r3, r3
 801a3b0:	4413      	add	r3, r2
 801a3b2:	b29a      	uxth	r2, r3
 801a3b4:	4b28      	ldr	r3, [pc, #160]	; (801a458 <updateStringItem+0xc38>)
 801a3b6:	88db      	ldrh	r3, [r3, #6]
 801a3b8:	4413      	add	r3, r2
 801a3ba:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a3bc:	3301      	adds	r3, #1
 801a3be:	b29b      	uxth	r3, r3
 801a3c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3c4:	9200      	str	r2, [sp, #0]
 801a3c6:	4602      	mov	r2, r0
 801a3c8:	4631      	mov	r1, r6
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	f7f4 f99c 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a3d0:	7ffb      	ldrb	r3, [r7, #31]
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	3301      	adds	r3, #1
 801a3d6:	b298      	uxth	r0, r3
 801a3d8:	7fbb      	ldrb	r3, [r7, #30]
 801a3da:	b29a      	uxth	r2, r3
 801a3dc:	7f7b      	ldrb	r3, [r7, #29]
 801a3de:	b299      	uxth	r1, r3
 801a3e0:	697b      	ldr	r3, [r7, #20]
 801a3e2:	b29b      	uxth	r3, r3
 801a3e4:	fb11 f303 	smulbb	r3, r1, r3
 801a3e8:	b29b      	uxth	r3, r3
 801a3ea:	4413      	add	r3, r2
 801a3ec:	b29b      	uxth	r3, r3
 801a3ee:	3301      	adds	r3, #1
 801a3f0:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a3f2:	697b      	ldr	r3, [r7, #20]
 801a3f4:	011b      	lsls	r3, r3, #4
 801a3f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a3fa:	4a16      	ldr	r2, [pc, #88]	; (801a454 <updateStringItem+0xc34>)
 801a3fc:	4413      	add	r3, r2
 801a3fe:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a400:	2300      	movs	r3, #0
 801a402:	9301      	str	r3, [sp, #4]
 801a404:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a408:	9300      	str	r3, [sp, #0]
 801a40a:	4b13      	ldr	r3, [pc, #76]	; (801a458 <updateStringItem+0xc38>)
 801a40c:	f7f4 fd9a 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a410:	7ffb      	ldrb	r3, [r7, #31]
 801a412:	b29a      	uxth	r2, r3
 801a414:	7f3b      	ldrb	r3, [r7, #28]
 801a416:	085b      	lsrs	r3, r3, #1
 801a418:	b2db      	uxtb	r3, r3
 801a41a:	b29b      	uxth	r3, r3
 801a41c:	4413      	add	r3, r2
 801a41e:	b29b      	uxth	r3, r3
 801a420:	3301      	adds	r3, #1
 801a422:	b298      	uxth	r0, r3
 801a424:	7fbb      	ldrb	r3, [r7, #30]
 801a426:	b29a      	uxth	r2, r3
 801a428:	7f7b      	ldrb	r3, [r7, #29]
 801a42a:	b299      	uxth	r1, r3
 801a42c:	697b      	ldr	r3, [r7, #20]
 801a42e:	b29b      	uxth	r3, r3
 801a430:	fb11 f303 	smulbb	r3, r1, r3
 801a434:	b29b      	uxth	r3, r3
 801a436:	4413      	add	r3, r2
 801a438:	b29b      	uxth	r3, r3
 801a43a:	3301      	adds	r3, #1
 801a43c:	b299      	uxth	r1, r3
 801a43e:	f107 020c 	add.w	r2, r7, #12
 801a442:	2300      	movs	r3, #0
 801a444:	9301      	str	r3, [sp, #4]
 801a446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a44a:	9300      	str	r3, [sp, #0]
 801a44c:	4b02      	ldr	r3, [pc, #8]	; (801a458 <updateStringItem+0xc38>)
 801a44e:	f7f4 fd79 	bl	800ef44 <Paint_DrawString_EN>
 801a452:	e19d      	b.n	801a790 <updateStringItem+0xf70>
 801a454:	2400c4a8 	.word	0x2400c4a8
 801a458:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 801a45c:	4b85      	ldr	r3, [pc, #532]	; (801a674 <updateStringItem+0xe54>)
 801a45e:	781b      	ldrb	r3, [r3, #0]
 801a460:	2b0c      	cmp	r3, #12
 801a462:	f040 8113 	bne.w	801a68c <updateStringItem+0xe6c>
				{
					if (howToDraw == RIGHT)
 801a466:	79fb      	ldrb	r3, [r7, #7]
 801a468:	2b04      	cmp	r3, #4
 801a46a:	f040 8083 	bne.w	801a574 <updateStringItem+0xd54>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a46e:	7ffb      	ldrb	r3, [r7, #31]
 801a470:	b29b      	uxth	r3, r3
 801a472:	3301      	adds	r3, #1
 801a474:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a476:	7fbb      	ldrb	r3, [r7, #30]
 801a478:	b29a      	uxth	r2, r3
 801a47a:	7f7b      	ldrb	r3, [r7, #29]
 801a47c:	b299      	uxth	r1, r3
 801a47e:	697b      	ldr	r3, [r7, #20]
 801a480:	b29b      	uxth	r3, r3
 801a482:	fb11 f303 	smulbb	r3, r1, r3
 801a486:	b29b      	uxth	r3, r3
 801a488:	4413      	add	r3, r2
 801a48a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a48c:	3301      	adds	r3, #1
 801a48e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801a490:	7ffb      	ldrb	r3, [r7, #31]
 801a492:	b29c      	uxth	r4, r3
 801a494:	697b      	ldr	r3, [r7, #20]
 801a496:	011b      	lsls	r3, r3, #4
 801a498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a49c:	4a76      	ldr	r2, [pc, #472]	; (801a678 <updateStringItem+0xe58>)
 801a49e:	4413      	add	r3, r2
 801a4a0:	3304      	adds	r3, #4
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7e5 ff26 	bl	80002f4 <strlen>
 801a4a8:	4603      	mov	r3, r0
 801a4aa:	b29a      	uxth	r2, r3
 801a4ac:	4b73      	ldr	r3, [pc, #460]	; (801a67c <updateStringItem+0xe5c>)
 801a4ae:	889b      	ldrh	r3, [r3, #4]
 801a4b0:	fb12 f303 	smulbb	r3, r2, r3
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	4423      	add	r3, r4
 801a4b8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a4ba:	3301      	adds	r3, #1
 801a4bc:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a4be:	7fbb      	ldrb	r3, [r7, #30]
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	7f7b      	ldrb	r3, [r7, #29]
 801a4c4:	b299      	uxth	r1, r3
 801a4c6:	697b      	ldr	r3, [r7, #20]
 801a4c8:	b29b      	uxth	r3, r3
 801a4ca:	fb11 f303 	smulbb	r3, r1, r3
 801a4ce:	b29b      	uxth	r3, r3
 801a4d0:	4413      	add	r3, r2
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	4b69      	ldr	r3, [pc, #420]	; (801a67c <updateStringItem+0xe5c>)
 801a4d6:	88db      	ldrh	r3, [r3, #6]
 801a4d8:	4413      	add	r3, r2
 801a4da:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a4dc:	3301      	adds	r3, #1
 801a4de:	b29b      	uxth	r3, r3
 801a4e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4e4:	9200      	str	r2, [sp, #0]
 801a4e6:	4602      	mov	r2, r0
 801a4e8:	4631      	mov	r1, r6
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	f7f4 f90c 	bl	800e708 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a4f0:	7ffb      	ldrb	r3, [r7, #31]
 801a4f2:	b29b      	uxth	r3, r3
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	b298      	uxth	r0, r3
 801a4f8:	7fbb      	ldrb	r3, [r7, #30]
 801a4fa:	b29a      	uxth	r2, r3
 801a4fc:	7f7b      	ldrb	r3, [r7, #29]
 801a4fe:	b299      	uxth	r1, r3
 801a500:	697b      	ldr	r3, [r7, #20]
 801a502:	b29b      	uxth	r3, r3
 801a504:	fb11 f303 	smulbb	r3, r1, r3
 801a508:	b29b      	uxth	r3, r3
 801a50a:	4413      	add	r3, r2
 801a50c:	b29b      	uxth	r3, r3
 801a50e:	3301      	adds	r3, #1
 801a510:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801a512:	697b      	ldr	r3, [r7, #20]
 801a514:	011b      	lsls	r3, r3, #4
 801a516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a51a:	4a57      	ldr	r2, [pc, #348]	; (801a678 <updateStringItem+0xe58>)
 801a51c:	4413      	add	r3, r2
 801a51e:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a520:	2300      	movs	r3, #0
 801a522:	9301      	str	r3, [sp, #4]
 801a524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a528:	9300      	str	r3, [sp, #0]
 801a52a:	4b54      	ldr	r3, [pc, #336]	; (801a67c <updateStringItem+0xe5c>)
 801a52c:	f7f4 fd0a 	bl	800ef44 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a530:	7ffb      	ldrb	r3, [r7, #31]
 801a532:	b29a      	uxth	r2, r3
 801a534:	7f3b      	ldrb	r3, [r7, #28]
 801a536:	085b      	lsrs	r3, r3, #1
 801a538:	b2db      	uxtb	r3, r3
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	4413      	add	r3, r2
 801a53e:	b29b      	uxth	r3, r3
 801a540:	3301      	adds	r3, #1
 801a542:	b298      	uxth	r0, r3
 801a544:	7fbb      	ldrb	r3, [r7, #30]
 801a546:	b29a      	uxth	r2, r3
 801a548:	7f7b      	ldrb	r3, [r7, #29]
 801a54a:	b299      	uxth	r1, r3
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	b29b      	uxth	r3, r3
 801a550:	fb11 f303 	smulbb	r3, r1, r3
 801a554:	b29b      	uxth	r3, r3
 801a556:	4413      	add	r3, r2
 801a558:	b29b      	uxth	r3, r3
 801a55a:	3301      	adds	r3, #1
 801a55c:	b299      	uxth	r1, r3
 801a55e:	f107 020c 	add.w	r2, r7, #12
 801a562:	2300      	movs	r3, #0
 801a564:	9301      	str	r3, [sp, #4]
 801a566:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a56a:	9300      	str	r3, [sp, #0]
 801a56c:	4b43      	ldr	r3, [pc, #268]	; (801a67c <updateStringItem+0xe5c>)
 801a56e:	f7f4 fce9 	bl	800ef44 <Paint_DrawString_EN>
 801a572:	e10d      	b.n	801a790 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801a574:	79fb      	ldrb	r3, [r7, #7]
 801a576:	2b01      	cmp	r3, #1
 801a578:	d136      	bne.n	801a5e8 <updateStringItem+0xdc8>
					{

						multiplierIndex = 0;
 801a57a:	4b41      	ldr	r3, [pc, #260]	; (801a680 <updateStringItem+0xe60>)
 801a57c:	2200      	movs	r2, #0
 801a57e:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 801a580:	4b3f      	ldr	r3, [pc, #252]	; (801a680 <updateStringItem+0xe60>)
 801a582:	781b      	ldrb	r3, [r3, #0]
 801a584:	461a      	mov	r2, r3
 801a586:	4b3f      	ldr	r3, [pc, #252]	; (801a684 <updateStringItem+0xe64>)
 801a588:	5c9a      	ldrb	r2, [r3, r2]
 801a58a:	4b3b      	ldr	r3, [pc, #236]	; (801a678 <updateStringItem+0xe58>)
 801a58c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 801a590:	4b39      	ldr	r3, [pc, #228]	; (801a678 <updateStringItem+0xe58>)
 801a592:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801a596:	461a      	mov	r2, r3
 801a598:	f107 030c 	add.w	r3, r7, #12
 801a59c:	493a      	ldr	r1, [pc, #232]	; (801a688 <updateStringItem+0xe68>)
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f002 f86c 	bl	801c67c <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a5a4:	7ffb      	ldrb	r3, [r7, #31]
 801a5a6:	b29a      	uxth	r2, r3
 801a5a8:	7f3b      	ldrb	r3, [r7, #28]
 801a5aa:	085b      	lsrs	r3, r3, #1
 801a5ac:	b2db      	uxtb	r3, r3
 801a5ae:	b29b      	uxth	r3, r3
 801a5b0:	4413      	add	r3, r2
 801a5b2:	b29b      	uxth	r3, r3
 801a5b4:	3301      	adds	r3, #1
 801a5b6:	b298      	uxth	r0, r3
 801a5b8:	7fbb      	ldrb	r3, [r7, #30]
 801a5ba:	b29a      	uxth	r2, r3
 801a5bc:	7f7b      	ldrb	r3, [r7, #29]
 801a5be:	b299      	uxth	r1, r3
 801a5c0:	697b      	ldr	r3, [r7, #20]
 801a5c2:	b29b      	uxth	r3, r3
 801a5c4:	fb11 f303 	smulbb	r3, r1, r3
 801a5c8:	b29b      	uxth	r3, r3
 801a5ca:	4413      	add	r3, r2
 801a5cc:	b29b      	uxth	r3, r3
 801a5ce:	3301      	adds	r3, #1
 801a5d0:	b299      	uxth	r1, r3
 801a5d2:	f107 020c 	add.w	r2, r7, #12
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	9301      	str	r3, [sp, #4]
 801a5da:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a5de:	9300      	str	r3, [sp, #0]
 801a5e0:	4b26      	ldr	r3, [pc, #152]	; (801a67c <updateStringItem+0xe5c>)
 801a5e2:	f7f4 fcaf 	bl	800ef44 <Paint_DrawString_EN>
 801a5e6:	e0d3      	b.n	801a790 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 801a5e8:	79fb      	ldrb	r3, [r7, #7]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	f040 80d0 	bne.w	801a790 <updateStringItem+0xf70>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 801a5f0:	4b23      	ldr	r3, [pc, #140]	; (801a680 <updateStringItem+0xe60>)
 801a5f2:	781b      	ldrb	r3, [r3, #0]
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	ee07 3a90 	vmov	s15, r3
 801a5fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a5fe:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 801a602:	eeb0 0b47 	vmov.f64	d0, d7
 801a606:	f005 fbdc 	bl	801fdc2 <fmin>
 801a60a:	eeb0 7b40 	vmov.f64	d7, d0
 801a60e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801a612:	edc7 7a00 	vstr	s15, [r7]
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	b2da      	uxtb	r2, r3
 801a61a:	4b19      	ldr	r3, [pc, #100]	; (801a680 <updateStringItem+0xe60>)
 801a61c:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 801a61e:	4b18      	ldr	r3, [pc, #96]	; (801a680 <updateStringItem+0xe60>)
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	461a      	mov	r2, r3
 801a624:	4b17      	ldr	r3, [pc, #92]	; (801a684 <updateStringItem+0xe64>)
 801a626:	5c9a      	ldrb	r2, [r3, r2]
 801a628:	4b13      	ldr	r3, [pc, #76]	; (801a678 <updateStringItem+0xe58>)
 801a62a:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a62e:	7ffb      	ldrb	r3, [r7, #31]
 801a630:	b29a      	uxth	r2, r3
 801a632:	7f3b      	ldrb	r3, [r7, #28]
 801a634:	085b      	lsrs	r3, r3, #1
 801a636:	b2db      	uxtb	r3, r3
 801a638:	b29b      	uxth	r3, r3
 801a63a:	4413      	add	r3, r2
 801a63c:	b29b      	uxth	r3, r3
 801a63e:	3301      	adds	r3, #1
 801a640:	b298      	uxth	r0, r3
 801a642:	7fbb      	ldrb	r3, [r7, #30]
 801a644:	b29a      	uxth	r2, r3
 801a646:	7f7b      	ldrb	r3, [r7, #29]
 801a648:	b299      	uxth	r1, r3
 801a64a:	697b      	ldr	r3, [r7, #20]
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	fb11 f303 	smulbb	r3, r1, r3
 801a652:	b29b      	uxth	r3, r3
 801a654:	4413      	add	r3, r2
 801a656:	b29b      	uxth	r3, r3
 801a658:	3301      	adds	r3, #1
 801a65a:	b299      	uxth	r1, r3
 801a65c:	f107 020c 	add.w	r2, r7, #12
 801a660:	2300      	movs	r3, #0
 801a662:	9301      	str	r3, [sp, #4]
 801a664:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a668:	9300      	str	r3, [sp, #0]
 801a66a:	4b04      	ldr	r3, [pc, #16]	; (801a67c <updateStringItem+0xe5c>)
 801a66c:	f7f4 fc6a 	bl	800ef44 <Paint_DrawString_EN>
 801a670:	e08e      	b.n	801a790 <updateStringItem+0xf70>
 801a672:	bf00      	nop
 801a674:	2400b09c 	.word	0x2400b09c
 801a678:	2400c4a8 	.word	0x2400c4a8
 801a67c:	24000030 	.word	0x24000030
 801a680:	2400a110 	.word	0x2400a110
 801a684:	2400a124 	.word	0x2400a124
 801a688:	080205e4 	.word	0x080205e4
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a68c:	7ffb      	ldrb	r3, [r7, #31]
 801a68e:	b29b      	uxth	r3, r3
 801a690:	3301      	adds	r3, #1
 801a692:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a694:	7fbb      	ldrb	r3, [r7, #30]
 801a696:	b29a      	uxth	r2, r3
 801a698:	7f7b      	ldrb	r3, [r7, #29]
 801a69a:	b299      	uxth	r1, r3
 801a69c:	697b      	ldr	r3, [r7, #20]
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	fb11 f303 	smulbb	r3, r1, r3
 801a6a4:	b29b      	uxth	r3, r3
 801a6a6:	4413      	add	r3, r2
 801a6a8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801a6ae:	7ffb      	ldrb	r3, [r7, #31]
 801a6b0:	b29c      	uxth	r4, r3
 801a6b2:	697b      	ldr	r3, [r7, #20]
 801a6b4:	011b      	lsls	r3, r3, #4
 801a6b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a6ba:	4a95      	ldr	r2, [pc, #596]	; (801a910 <updateStringItem+0x10f0>)
 801a6bc:	4413      	add	r3, r2
 801a6be:	3304      	adds	r3, #4
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f7e5 fe17 	bl	80002f4 <strlen>
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	b29a      	uxth	r2, r3
 801a6ca:	4b92      	ldr	r3, [pc, #584]	; (801a914 <updateStringItem+0x10f4>)
 801a6cc:	889b      	ldrh	r3, [r3, #4]
 801a6ce:	fb12 f303 	smulbb	r3, r2, r3
 801a6d2:	b29b      	uxth	r3, r3
 801a6d4:	4423      	add	r3, r4
 801a6d6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a6d8:	3301      	adds	r3, #1
 801a6da:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a6dc:	7fbb      	ldrb	r3, [r7, #30]
 801a6de:	b29a      	uxth	r2, r3
 801a6e0:	7f7b      	ldrb	r3, [r7, #29]
 801a6e2:	b299      	uxth	r1, r3
 801a6e4:	697b      	ldr	r3, [r7, #20]
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	fb11 f303 	smulbb	r3, r1, r3
 801a6ec:	b29b      	uxth	r3, r3
 801a6ee:	4413      	add	r3, r2
 801a6f0:	b29a      	uxth	r2, r3
 801a6f2:	4b88      	ldr	r3, [pc, #544]	; (801a914 <updateStringItem+0x10f4>)
 801a6f4:	88db      	ldrh	r3, [r3, #6]
 801a6f6:	4413      	add	r3, r2
 801a6f8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a702:	9200      	str	r2, [sp, #0]
 801a704:	4602      	mov	r2, r0
 801a706:	4631      	mov	r1, r6
 801a708:	4628      	mov	r0, r5
 801a70a:	f7f3 fffd 	bl	800e708 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a70e:	7ffb      	ldrb	r3, [r7, #31]
 801a710:	b29b      	uxth	r3, r3
 801a712:	3301      	adds	r3, #1
 801a714:	b298      	uxth	r0, r3
 801a716:	7fbb      	ldrb	r3, [r7, #30]
 801a718:	b29a      	uxth	r2, r3
 801a71a:	7f7b      	ldrb	r3, [r7, #29]
 801a71c:	b299      	uxth	r1, r3
 801a71e:	697b      	ldr	r3, [r7, #20]
 801a720:	b29b      	uxth	r3, r3
 801a722:	fb11 f303 	smulbb	r3, r1, r3
 801a726:	b29b      	uxth	r3, r3
 801a728:	4413      	add	r3, r2
 801a72a:	b29b      	uxth	r3, r3
 801a72c:	3301      	adds	r3, #1
 801a72e:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	011b      	lsls	r3, r3, #4
 801a734:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a738:	4a75      	ldr	r2, [pc, #468]	; (801a910 <updateStringItem+0x10f0>)
 801a73a:	4413      	add	r3, r2
 801a73c:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a73e:	2300      	movs	r3, #0
 801a740:	9301      	str	r3, [sp, #4]
 801a742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	4b72      	ldr	r3, [pc, #456]	; (801a914 <updateStringItem+0x10f4>)
 801a74a:	f7f4 fbfb 	bl	800ef44 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a74e:	7ffb      	ldrb	r3, [r7, #31]
 801a750:	b29a      	uxth	r2, r3
 801a752:	7f3b      	ldrb	r3, [r7, #28]
 801a754:	085b      	lsrs	r3, r3, #1
 801a756:	b2db      	uxtb	r3, r3
 801a758:	b29b      	uxth	r3, r3
 801a75a:	4413      	add	r3, r2
 801a75c:	b29b      	uxth	r3, r3
 801a75e:	3301      	adds	r3, #1
 801a760:	b298      	uxth	r0, r3
 801a762:	7fbb      	ldrb	r3, [r7, #30]
 801a764:	b29a      	uxth	r2, r3
 801a766:	7f7b      	ldrb	r3, [r7, #29]
 801a768:	b299      	uxth	r1, r3
 801a76a:	697b      	ldr	r3, [r7, #20]
 801a76c:	b29b      	uxth	r3, r3
 801a76e:	fb11 f303 	smulbb	r3, r1, r3
 801a772:	b29b      	uxth	r3, r3
 801a774:	4413      	add	r3, r2
 801a776:	b29b      	uxth	r3, r3
 801a778:	3301      	adds	r3, #1
 801a77a:	b299      	uxth	r1, r3
 801a77c:	f107 020c 	add.w	r2, r7, #12
 801a780:	2300      	movs	r3, #0
 801a782:	9301      	str	r3, [sp, #4]
 801a784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a788:	9300      	str	r3, [sp, #0]
 801a78a:	4b62      	ldr	r3, [pc, #392]	; (801a914 <updateStringItem+0x10f4>)
 801a78c:	f7f4 fbda 	bl	800ef44 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 801a790:	4b5f      	ldr	r3, [pc, #380]	; (801a910 <updateStringItem+0x10f0>)
 801a792:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801a796:	3b02      	subs	r3, #2
 801a798:	697a      	ldr	r2, [r7, #20]
 801a79a:	429a      	cmp	r2, r3
 801a79c:	f2c0 8281 	blt.w	801aca2 <updateStringItem+0x1482>
 801a7a0:	4b5b      	ldr	r3, [pc, #364]	; (801a910 <updateStringItem+0x10f0>)
 801a7a2:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801a7a6:	461a      	mov	r2, r3
 801a7a8:	697b      	ldr	r3, [r7, #20]
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	f280 8279 	bge.w	801aca2 <updateStringItem+0x1482>
		{
			if (howToDraw == FULL)
 801a7b0:	79fb      	ldrb	r3, [r7, #7]
 801a7b2:	2b02      	cmp	r3, #2
 801a7b4:	d17a      	bne.n	801a8ac <updateStringItem+0x108c>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801a7b6:	7ffb      	ldrb	r3, [r7, #31]
 801a7b8:	b298      	uxth	r0, r3
 801a7ba:	7fbb      	ldrb	r3, [r7, #30]
 801a7bc:	b29a      	uxth	r2, r3
 801a7be:	7f7b      	ldrb	r3, [r7, #29]
 801a7c0:	b299      	uxth	r1, r3
 801a7c2:	697b      	ldr	r3, [r7, #20]
 801a7c4:	b29b      	uxth	r3, r3
 801a7c6:	fb11 f303 	smulbb	r3, r1, r3
 801a7ca:	b29b      	uxth	r3, r3
 801a7cc:	4413      	add	r3, r2
 801a7ce:	b29c      	uxth	r4, r3
 801a7d0:	7ffb      	ldrb	r3, [r7, #31]
 801a7d2:	b29a      	uxth	r2, r3
 801a7d4:	7f3b      	ldrb	r3, [r7, #28]
 801a7d6:	b29b      	uxth	r3, r3
 801a7d8:	4413      	add	r3, r2
 801a7da:	b29d      	uxth	r5, r3
 801a7dc:	7fbb      	ldrb	r3, [r7, #30]
 801a7de:	b29a      	uxth	r2, r3
 801a7e0:	7f7b      	ldrb	r3, [r7, #29]
 801a7e2:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	fb11 f303 	smulbb	r3, r1, r3
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	4413      	add	r3, r2
 801a7f2:	b29b      	uxth	r3, r3
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	9202      	str	r2, [sp, #8]
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	9201      	str	r2, [sp, #4]
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	9200      	str	r2, [sp, #0]
 801a800:	462a      	mov	r2, r5
 801a802:	4621      	mov	r1, r4
 801a804:	f7f4 f8fa 	bl	800e9fc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 801a808:	4b43      	ldr	r3, [pc, #268]	; (801a918 <updateStringItem+0x10f8>)
 801a80a:	781b      	ldrb	r3, [r3, #0]
 801a80c:	461a      	mov	r2, r3
 801a80e:	697b      	ldr	r3, [r7, #20]
 801a810:	4293      	cmp	r3, r2
 801a812:	d125      	bne.n	801a860 <updateStringItem+0x1040>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a814:	7efb      	ldrb	r3, [r7, #27]
 801a816:	b29c      	uxth	r4, r3
 801a818:	7fbb      	ldrb	r3, [r7, #30]
 801a81a:	b29a      	uxth	r2, r3
 801a81c:	7f7b      	ldrb	r3, [r7, #29]
 801a81e:	b299      	uxth	r1, r3
 801a820:	697b      	ldr	r3, [r7, #20]
 801a822:	b29b      	uxth	r3, r3
 801a824:	fb11 f303 	smulbb	r3, r1, r3
 801a828:	b29b      	uxth	r3, r3
 801a82a:	4413      	add	r3, r2
 801a82c:	b29b      	uxth	r3, r3
 801a82e:	3301      	adds	r3, #1
 801a830:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	011b      	lsls	r3, r3, #4
 801a836:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a83a:	4a35      	ldr	r2, [pc, #212]	; (801a910 <updateStringItem+0x10f0>)
 801a83c:	4413      	add	r3, r2
 801a83e:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a840:	4934      	ldr	r1, [pc, #208]	; (801a914 <updateStringItem+0x10f4>)
 801a842:	ab02      	add	r3, sp, #8
 801a844:	c903      	ldmia	r1, {r0, r1}
 801a846:	e883 0003 	stmia.w	r3, {r0, r1}
 801a84a:	2310      	movs	r3, #16
 801a84c:	9301      	str	r3, [sp, #4]
 801a84e:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a852:	9300      	str	r3, [sp, #0]
 801a854:	2300      	movs	r3, #0
 801a856:	4629      	mov	r1, r5
 801a858:	4620      	mov	r0, r4
 801a85a:	f7fc fbb9 	bl	8016fd0 <centeredString>
 801a85e:	e220      	b.n	801aca2 <updateStringItem+0x1482>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a860:	7efb      	ldrb	r3, [r7, #27]
 801a862:	b29c      	uxth	r4, r3
 801a864:	7fbb      	ldrb	r3, [r7, #30]
 801a866:	b29a      	uxth	r2, r3
 801a868:	7f7b      	ldrb	r3, [r7, #29]
 801a86a:	b299      	uxth	r1, r3
 801a86c:	697b      	ldr	r3, [r7, #20]
 801a86e:	b29b      	uxth	r3, r3
 801a870:	fb11 f303 	smulbb	r3, r1, r3
 801a874:	b29b      	uxth	r3, r3
 801a876:	4413      	add	r3, r2
 801a878:	b29b      	uxth	r3, r3
 801a87a:	3301      	adds	r3, #1
 801a87c:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 801a87e:	697b      	ldr	r3, [r7, #20]
 801a880:	011b      	lsls	r3, r3, #4
 801a882:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a886:	4a22      	ldr	r2, [pc, #136]	; (801a910 <updateStringItem+0x10f0>)
 801a888:	4413      	add	r3, r2
 801a88a:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a88c:	4921      	ldr	r1, [pc, #132]	; (801a914 <updateStringItem+0x10f4>)
 801a88e:	ab02      	add	r3, sp, #8
 801a890:	c903      	ldmia	r1, {r0, r1}
 801a892:	e883 0003 	stmia.w	r3, {r0, r1}
 801a896:	2310      	movs	r3, #16
 801a898:	9301      	str	r3, [sp, #4]
 801a89a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a89e:	9300      	str	r3, [sp, #0]
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	4629      	mov	r1, r5
 801a8a4:	4620      	mov	r0, r4
 801a8a6:	f7fc fb93 	bl	8016fd0 <centeredString>
 801a8aa:	e1fa      	b.n	801aca2 <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == DOWN)
 801a8ac:	79fb      	ldrb	r3, [r7, #7]
 801a8ae:	2b01      	cmp	r3, #1
 801a8b0:	f040 80ca 	bne.w	801aa48 <updateStringItem+0x1228>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 801a8b4:	4b18      	ldr	r3, [pc, #96]	; (801a918 <updateStringItem+0x10f8>)
 801a8b6:	781b      	ldrb	r3, [r3, #0]
 801a8b8:	2b04      	cmp	r3, #4
 801a8ba:	d12f      	bne.n	801a91c <updateStringItem+0x10fc>
 801a8bc:	697b      	ldr	r3, [r7, #20]
 801a8be:	2b04      	cmp	r3, #4
 801a8c0:	d12c      	bne.n	801a91c <updateStringItem+0x10fc>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a8c2:	7efb      	ldrb	r3, [r7, #27]
 801a8c4:	b29c      	uxth	r4, r3
 801a8c6:	7fbb      	ldrb	r3, [r7, #30]
 801a8c8:	b29a      	uxth	r2, r3
 801a8ca:	7f7b      	ldrb	r3, [r7, #29]
 801a8cc:	b299      	uxth	r1, r3
 801a8ce:	697b      	ldr	r3, [r7, #20]
 801a8d0:	b29b      	uxth	r3, r3
 801a8d2:	fb11 f303 	smulbb	r3, r1, r3
 801a8d6:	b29b      	uxth	r3, r3
 801a8d8:	4413      	add	r3, r2
 801a8da:	b29b      	uxth	r3, r3
 801a8dc:	3301      	adds	r3, #1
 801a8de:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a8e0:	697b      	ldr	r3, [r7, #20]
 801a8e2:	011b      	lsls	r3, r3, #4
 801a8e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a8e8:	4a09      	ldr	r2, [pc, #36]	; (801a910 <updateStringItem+0x10f0>)
 801a8ea:	4413      	add	r3, r2
 801a8ec:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a8ee:	4909      	ldr	r1, [pc, #36]	; (801a914 <updateStringItem+0x10f4>)
 801a8f0:	ab02      	add	r3, sp, #8
 801a8f2:	c903      	ldmia	r1, {r0, r1}
 801a8f4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a8f8:	2310      	movs	r3, #16
 801a8fa:	9301      	str	r3, [sp, #4]
 801a8fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a900:	9300      	str	r3, [sp, #0]
 801a902:	2300      	movs	r3, #0
 801a904:	4629      	mov	r1, r5
 801a906:	4620      	mov	r0, r4
 801a908:	f7fc fb62 	bl	8016fd0 <centeredString>
 801a90c:	e1c9      	b.n	801aca2 <updateStringItem+0x1482>
 801a90e:	bf00      	nop
 801a910:	2400c4a8 	.word	0x2400c4a8
 801a914:	24000030 	.word	0x24000030
 801a918:	2400b09c 	.word	0x2400b09c
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 801a91c:	4b8b      	ldr	r3, [pc, #556]	; (801ab4c <updateStringItem+0x132c>)
 801a91e:	781b      	ldrb	r3, [r3, #0]
 801a920:	2b05      	cmp	r3, #5
 801a922:	f040 81be 	bne.w	801aca2 <updateStringItem+0x1482>
 801a926:	697b      	ldr	r3, [r7, #20]
 801a928:	2b05      	cmp	r3, #5
 801a92a:	f040 81ba 	bne.w	801aca2 <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 801a92e:	7efb      	ldrb	r3, [r7, #27]
 801a930:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a932:	7fbb      	ldrb	r3, [r7, #30]
 801a934:	b29a      	uxth	r2, r3
 801a936:	7f7b      	ldrb	r3, [r7, #29]
 801a938:	b299      	uxth	r1, r3
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	3b01      	subs	r3, #1
 801a93e:	b29b      	uxth	r3, r3
 801a940:	fb11 f303 	smulbb	r3, r1, r3
 801a944:	b29b      	uxth	r3, r3
 801a946:	4413      	add	r3, r2
 801a948:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801a94a:	3301      	adds	r3, #1
 801a94c:	b29e      	uxth	r6, r3
 801a94e:	7efb      	ldrb	r3, [r7, #27]
 801a950:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 801a952:	697b      	ldr	r3, [r7, #20]
 801a954:	3b01      	subs	r3, #1
 801a956:	011b      	lsls	r3, r3, #4
 801a958:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a95c:	4a7c      	ldr	r2, [pc, #496]	; (801ab50 <updateStringItem+0x1330>)
 801a95e:	4413      	add	r3, r2
 801a960:	3304      	adds	r3, #4
 801a962:	4618      	mov	r0, r3
 801a964:	f7e5 fcc6 	bl	80002f4 <strlen>
 801a968:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 801a96a:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 801a96c:	4b79      	ldr	r3, [pc, #484]	; (801ab54 <updateStringItem+0x1334>)
 801a96e:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 801a970:	fb12 f303 	smulbb	r3, r2, r3
 801a974:	b29b      	uxth	r3, r3
 801a976:	4423      	add	r3, r4
 801a978:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 801a97a:	7fbb      	ldrb	r3, [r7, #30]
 801a97c:	b29a      	uxth	r2, r3
 801a97e:	7f7b      	ldrb	r3, [r7, #29]
 801a980:	b299      	uxth	r1, r3
 801a982:	697b      	ldr	r3, [r7, #20]
 801a984:	3b01      	subs	r3, #1
 801a986:	b29b      	uxth	r3, r3
 801a988:	fb11 f303 	smulbb	r3, r1, r3
 801a98c:	b29b      	uxth	r3, r3
 801a98e:	4413      	add	r3, r2
 801a990:	b29a      	uxth	r2, r3
 801a992:	4b70      	ldr	r3, [pc, #448]	; (801ab54 <updateStringItem+0x1334>)
 801a994:	88db      	ldrh	r3, [r3, #6]
 801a996:	4413      	add	r3, r2
 801a998:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801a99a:	3301      	adds	r3, #1
 801a99c:	b29b      	uxth	r3, r3
 801a99e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a9a2:	9200      	str	r2, [sp, #0]
 801a9a4:	4602      	mov	r2, r0
 801a9a6:	4631      	mov	r1, r6
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	f7f3 fead 	bl	800e708 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a9ae:	7efb      	ldrb	r3, [r7, #27]
 801a9b0:	b29c      	uxth	r4, r3
 801a9b2:	7fbb      	ldrb	r3, [r7, #30]
 801a9b4:	b29a      	uxth	r2, r3
 801a9b6:	7f7b      	ldrb	r3, [r7, #29]
 801a9b8:	b299      	uxth	r1, r3
 801a9ba:	697b      	ldr	r3, [r7, #20]
 801a9bc:	3b01      	subs	r3, #1
 801a9be:	b29b      	uxth	r3, r3
 801a9c0:	fb11 f303 	smulbb	r3, r1, r3
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	4413      	add	r3, r2
 801a9c8:	b29b      	uxth	r3, r3
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 801a9ce:	697b      	ldr	r3, [r7, #20]
 801a9d0:	3b01      	subs	r3, #1
 801a9d2:	011b      	lsls	r3, r3, #4
 801a9d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a9d8:	4a5d      	ldr	r2, [pc, #372]	; (801ab50 <updateStringItem+0x1330>)
 801a9da:	4413      	add	r3, r2
 801a9dc:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a9de:	495d      	ldr	r1, [pc, #372]	; (801ab54 <updateStringItem+0x1334>)
 801a9e0:	ab02      	add	r3, sp, #8
 801a9e2:	c903      	ldmia	r1, {r0, r1}
 801a9e4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a9e8:	2310      	movs	r3, #16
 801a9ea:	9301      	str	r3, [sp, #4]
 801a9ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9f0:	9300      	str	r3, [sp, #0]
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	4629      	mov	r1, r5
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7fc faea 	bl	8016fd0 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a9fc:	7efb      	ldrb	r3, [r7, #27]
 801a9fe:	b29c      	uxth	r4, r3
 801aa00:	7fbb      	ldrb	r3, [r7, #30]
 801aa02:	b29a      	uxth	r2, r3
 801aa04:	7f7b      	ldrb	r3, [r7, #29]
 801aa06:	b299      	uxth	r1, r3
 801aa08:	697b      	ldr	r3, [r7, #20]
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	fb11 f303 	smulbb	r3, r1, r3
 801aa10:	b29b      	uxth	r3, r3
 801aa12:	4413      	add	r3, r2
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	3301      	adds	r3, #1
 801aa18:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801aa1a:	697b      	ldr	r3, [r7, #20]
 801aa1c:	011b      	lsls	r3, r3, #4
 801aa1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aa22:	4a4b      	ldr	r2, [pc, #300]	; (801ab50 <updateStringItem+0x1330>)
 801aa24:	4413      	add	r3, r2
 801aa26:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801aa28:	494a      	ldr	r1, [pc, #296]	; (801ab54 <updateStringItem+0x1334>)
 801aa2a:	ab02      	add	r3, sp, #8
 801aa2c:	c903      	ldmia	r1, {r0, r1}
 801aa2e:	e883 0003 	stmia.w	r3, {r0, r1}
 801aa32:	2310      	movs	r3, #16
 801aa34:	9301      	str	r3, [sp, #4]
 801aa36:	f24c 6318 	movw	r3, #50712	; 0xc618
 801aa3a:	9300      	str	r3, [sp, #0]
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	4629      	mov	r1, r5
 801aa40:	4620      	mov	r0, r4
 801aa42:	f7fc fac5 	bl	8016fd0 <centeredString>
 801aa46:	e12c      	b.n	801aca2 <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == UP)
 801aa48:	79fb      	ldrb	r3, [r7, #7]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	f040 8129 	bne.w	801aca2 <updateStringItem+0x1482>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 801aa50:	4b3e      	ldr	r3, [pc, #248]	; (801ab4c <updateStringItem+0x132c>)
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	2b03      	cmp	r3, #3
 801aa56:	d17f      	bne.n	801ab58 <updateStringItem+0x1338>
 801aa58:	697b      	ldr	r3, [r7, #20]
 801aa5a:	2b04      	cmp	r3, #4
 801aa5c:	d17c      	bne.n	801ab58 <updateStringItem+0x1338>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801aa5e:	7efb      	ldrb	r3, [r7, #27]
 801aa60:	b29c      	uxth	r4, r3
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	011b      	lsls	r3, r3, #4
 801aa66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aa6a:	4a39      	ldr	r2, [pc, #228]	; (801ab50 <updateStringItem+0x1330>)
 801aa6c:	4413      	add	r3, r2
 801aa6e:	3304      	adds	r3, #4
 801aa70:	4618      	mov	r0, r3
 801aa72:	f7e5 fc3f 	bl	80002f4 <strlen>
 801aa76:	4603      	mov	r3, r0
 801aa78:	4a36      	ldr	r2, [pc, #216]	; (801ab54 <updateStringItem+0x1334>)
 801aa7a:	8892      	ldrh	r2, [r2, #4]
 801aa7c:	fb02 f303 	mul.w	r3, r2, r3
 801aa80:	085b      	lsrs	r3, r3, #1
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	1ae3      	subs	r3, r4, r3
 801aa86:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aa88:	7fbb      	ldrb	r3, [r7, #30]
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	7f7b      	ldrb	r3, [r7, #29]
 801aa8e:	b299      	uxth	r1, r3
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	b29b      	uxth	r3, r3
 801aa94:	fb11 f303 	smulbb	r3, r1, r3
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	4413      	add	r3, r2
 801aa9c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801aa9e:	3301      	adds	r3, #1
 801aaa0:	b29e      	uxth	r6, r3
 801aaa2:	7efb      	ldrb	r3, [r7, #27]
 801aaa4:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801aaa6:	697b      	ldr	r3, [r7, #20]
 801aaa8:	011b      	lsls	r3, r3, #4
 801aaaa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aaae:	4a28      	ldr	r2, [pc, #160]	; (801ab50 <updateStringItem+0x1330>)
 801aab0:	4413      	add	r3, r2
 801aab2:	3304      	adds	r3, #4
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7e5 fc1d 	bl	80002f4 <strlen>
 801aaba:	4603      	mov	r3, r0
 801aabc:	4a25      	ldr	r2, [pc, #148]	; (801ab54 <updateStringItem+0x1334>)
 801aabe:	8892      	ldrh	r2, [r2, #4]
 801aac0:	fb02 f303 	mul.w	r3, r2, r3
 801aac4:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801aac6:	b29b      	uxth	r3, r3
 801aac8:	4423      	add	r3, r4
 801aaca:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801aacc:	7fbb      	ldrb	r3, [r7, #30]
 801aace:	b29a      	uxth	r2, r3
 801aad0:	7f7b      	ldrb	r3, [r7, #29]
 801aad2:	b299      	uxth	r1, r3
 801aad4:	697b      	ldr	r3, [r7, #20]
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	fb11 f303 	smulbb	r3, r1, r3
 801aadc:	b29b      	uxth	r3, r3
 801aade:	4413      	add	r3, r2
 801aae0:	b29a      	uxth	r2, r3
 801aae2:	4b1c      	ldr	r3, [pc, #112]	; (801ab54 <updateStringItem+0x1334>)
 801aae4:	88db      	ldrh	r3, [r3, #6]
 801aae6:	4413      	add	r3, r2
 801aae8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801aaea:	3301      	adds	r3, #1
 801aaec:	b29b      	uxth	r3, r3
 801aaee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aaf2:	9200      	str	r2, [sp, #0]
 801aaf4:	4602      	mov	r2, r0
 801aaf6:	4631      	mov	r1, r6
 801aaf8:	4628      	mov	r0, r5
 801aafa:	f7f3 fe05 	bl	800e708 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aafe:	7efb      	ldrb	r3, [r7, #27]
 801ab00:	b29c      	uxth	r4, r3
 801ab02:	7fbb      	ldrb	r3, [r7, #30]
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	7f7b      	ldrb	r3, [r7, #29]
 801ab08:	b299      	uxth	r1, r3
 801ab0a:	697b      	ldr	r3, [r7, #20]
 801ab0c:	b29b      	uxth	r3, r3
 801ab0e:	fb11 f303 	smulbb	r3, r1, r3
 801ab12:	b29b      	uxth	r3, r3
 801ab14:	4413      	add	r3, r2
 801ab16:	b29b      	uxth	r3, r3
 801ab18:	3301      	adds	r3, #1
 801ab1a:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801ab1c:	697b      	ldr	r3, [r7, #20]
 801ab1e:	011b      	lsls	r3, r3, #4
 801ab20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ab24:	4a0a      	ldr	r2, [pc, #40]	; (801ab50 <updateStringItem+0x1330>)
 801ab26:	4413      	add	r3, r2
 801ab28:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ab2a:	490a      	ldr	r1, [pc, #40]	; (801ab54 <updateStringItem+0x1334>)
 801ab2c:	ab02      	add	r3, sp, #8
 801ab2e:	c903      	ldmia	r1, {r0, r1}
 801ab30:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab34:	2310      	movs	r3, #16
 801ab36:	9301      	str	r3, [sp, #4]
 801ab38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab3c:	9300      	str	r3, [sp, #0]
 801ab3e:	2300      	movs	r3, #0
 801ab40:	4629      	mov	r1, r5
 801ab42:	4620      	mov	r0, r4
 801ab44:	f7fc fa44 	bl	8016fd0 <centeredString>
 801ab48:	e0ab      	b.n	801aca2 <updateStringItem+0x1482>
 801ab4a:	bf00      	nop
 801ab4c:	2400b09c 	.word	0x2400b09c
 801ab50:	2400c4a8 	.word	0x2400c4a8
 801ab54:	24000030 	.word	0x24000030
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 801ab58:	4b5a      	ldr	r3, [pc, #360]	; (801acc4 <updateStringItem+0x14a4>)
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	2b04      	cmp	r3, #4
 801ab5e:	f040 80a0 	bne.w	801aca2 <updateStringItem+0x1482>
 801ab62:	697b      	ldr	r3, [r7, #20]
 801ab64:	2b05      	cmp	r3, #5
 801ab66:	f040 809c 	bne.w	801aca2 <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801ab6a:	7efb      	ldrb	r3, [r7, #27]
 801ab6c:	b29c      	uxth	r4, r3
 801ab6e:	697b      	ldr	r3, [r7, #20]
 801ab70:	011b      	lsls	r3, r3, #4
 801ab72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ab76:	4a54      	ldr	r2, [pc, #336]	; (801acc8 <updateStringItem+0x14a8>)
 801ab78:	4413      	add	r3, r2
 801ab7a:	3304      	adds	r3, #4
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	f7e5 fbb9 	bl	80002f4 <strlen>
 801ab82:	4603      	mov	r3, r0
 801ab84:	4a51      	ldr	r2, [pc, #324]	; (801accc <updateStringItem+0x14ac>)
 801ab86:	8892      	ldrh	r2, [r2, #4]
 801ab88:	fb02 f303 	mul.w	r3, r2, r3
 801ab8c:	085b      	lsrs	r3, r3, #1
 801ab8e:	b29b      	uxth	r3, r3
 801ab90:	1ae3      	subs	r3, r4, r3
 801ab92:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ab94:	7fbb      	ldrb	r3, [r7, #30]
 801ab96:	b29a      	uxth	r2, r3
 801ab98:	7f7b      	ldrb	r3, [r7, #29]
 801ab9a:	b299      	uxth	r1, r3
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	fb11 f303 	smulbb	r3, r1, r3
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	4413      	add	r3, r2
 801aba8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801abaa:	3301      	adds	r3, #1
 801abac:	b29e      	uxth	r6, r3
 801abae:	7efb      	ldrb	r3, [r7, #27]
 801abb0:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801abb2:	697b      	ldr	r3, [r7, #20]
 801abb4:	011b      	lsls	r3, r3, #4
 801abb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801abba:	4a43      	ldr	r2, [pc, #268]	; (801acc8 <updateStringItem+0x14a8>)
 801abbc:	4413      	add	r3, r2
 801abbe:	3304      	adds	r3, #4
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7e5 fb97 	bl	80002f4 <strlen>
 801abc6:	4603      	mov	r3, r0
 801abc8:	4a40      	ldr	r2, [pc, #256]	; (801accc <updateStringItem+0x14ac>)
 801abca:	8892      	ldrh	r2, [r2, #4]
 801abcc:	fb02 f303 	mul.w	r3, r2, r3
 801abd0:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801abd2:	b29b      	uxth	r3, r3
 801abd4:	4423      	add	r3, r4
 801abd6:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801abd8:	7fbb      	ldrb	r3, [r7, #30]
 801abda:	b29a      	uxth	r2, r3
 801abdc:	7f7b      	ldrb	r3, [r7, #29]
 801abde:	b299      	uxth	r1, r3
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	fb11 f303 	smulbb	r3, r1, r3
 801abe8:	b29b      	uxth	r3, r3
 801abea:	4413      	add	r3, r2
 801abec:	b29a      	uxth	r2, r3
 801abee:	4b37      	ldr	r3, [pc, #220]	; (801accc <updateStringItem+0x14ac>)
 801abf0:	88db      	ldrh	r3, [r3, #6]
 801abf2:	4413      	add	r3, r2
 801abf4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801abf6:	3301      	adds	r3, #1
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801abfe:	9200      	str	r2, [sp, #0]
 801ac00:	4602      	mov	r2, r0
 801ac02:	4631      	mov	r1, r6
 801ac04:	4628      	mov	r0, r5
 801ac06:	f7f3 fd7f 	bl	800e708 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ac0a:	7efb      	ldrb	r3, [r7, #27]
 801ac0c:	b29c      	uxth	r4, r3
 801ac0e:	7fbb      	ldrb	r3, [r7, #30]
 801ac10:	b29a      	uxth	r2, r3
 801ac12:	7f7b      	ldrb	r3, [r7, #29]
 801ac14:	b299      	uxth	r1, r3
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	fb11 f303 	smulbb	r3, r1, r3
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	4413      	add	r3, r2
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	3301      	adds	r3, #1
 801ac26:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801ac28:	697b      	ldr	r3, [r7, #20]
 801ac2a:	011b      	lsls	r3, r3, #4
 801ac2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ac30:	4a25      	ldr	r2, [pc, #148]	; (801acc8 <updateStringItem+0x14a8>)
 801ac32:	4413      	add	r3, r2
 801ac34:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ac36:	4925      	ldr	r1, [pc, #148]	; (801accc <updateStringItem+0x14ac>)
 801ac38:	ab02      	add	r3, sp, #8
 801ac3a:	c903      	ldmia	r1, {r0, r1}
 801ac3c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ac40:	2310      	movs	r3, #16
 801ac42:	9301      	str	r3, [sp, #4]
 801ac44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac48:	9300      	str	r3, [sp, #0]
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	4629      	mov	r1, r5
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f7fc f9be 	bl	8016fd0 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801ac54:	7efb      	ldrb	r3, [r7, #27]
 801ac56:	b29c      	uxth	r4, r3
 801ac58:	7fbb      	ldrb	r3, [r7, #30]
 801ac5a:	b29a      	uxth	r2, r3
 801ac5c:	7f7b      	ldrb	r3, [r7, #29]
 801ac5e:	b299      	uxth	r1, r3
 801ac60:	697b      	ldr	r3, [r7, #20]
 801ac62:	3b01      	subs	r3, #1
 801ac64:	b29b      	uxth	r3, r3
 801ac66:	fb11 f303 	smulbb	r3, r1, r3
 801ac6a:	b29b      	uxth	r3, r3
 801ac6c:	4413      	add	r3, r2
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	3301      	adds	r3, #1
 801ac72:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801ac74:	697b      	ldr	r3, [r7, #20]
 801ac76:	3b01      	subs	r3, #1
 801ac78:	011b      	lsls	r3, r3, #4
 801ac7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ac7e:	4a12      	ldr	r2, [pc, #72]	; (801acc8 <updateStringItem+0x14a8>)
 801ac80:	4413      	add	r3, r2
 801ac82:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801ac84:	4911      	ldr	r1, [pc, #68]	; (801accc <updateStringItem+0x14ac>)
 801ac86:	ab02      	add	r3, sp, #8
 801ac88:	c903      	ldmia	r1, {r0, r1}
 801ac8a:	e883 0003 	stmia.w	r3, {r0, r1}
 801ac8e:	2310      	movs	r3, #16
 801ac90:	9301      	str	r3, [sp, #4]
 801ac92:	f24c 6318 	movw	r3, #50712	; 0xc618
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	2300      	movs	r3, #0
 801ac9a:	4629      	mov	r1, r5
 801ac9c:	4620      	mov	r0, r4
 801ac9e:	f7fc f997 	bl	8016fd0 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	3301      	adds	r3, #1
 801aca6:	617b      	str	r3, [r7, #20]
 801aca8:	4b07      	ldr	r3, [pc, #28]	; (801acc8 <updateStringItem+0x14a8>)
 801acaa:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801acae:	461a      	mov	r2, r3
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	4293      	cmp	r3, r2
 801acb4:	f6fe add8 	blt.w	8019868 <updateStringItem+0x48>
				}
			}
		}
	}
}
 801acb8:	bf00      	nop
 801acba:	bf00      	nop
 801acbc:	3724      	adds	r7, #36	; 0x24
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acc2:	bf00      	nop
 801acc4:	2400b09c 	.word	0x2400b09c
 801acc8:	2400c4a8 	.word	0x2400c4a8
 801accc:	24000030 	.word	0x24000030

0801acd0 <CT>:
#include "main.h"

char CTime[20] = {0};

char *CT()
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	af00      	add	r7, sp, #0
	sprintf(CTime,"%7.3f", (float)HAL_GetTick()/1000.0);
 801acd4:	f7e7 fd08 	bl	80026e8 <HAL_GetTick>
 801acd8:	ee07 0a90 	vmov	s15, r0
 801acdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ace0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801ace4:	ed9f 6b06 	vldr	d6, [pc, #24]	; 801ad00 <CT+0x30>
 801ace8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801acec:	ec53 2b15 	vmov	r2, r3, d5
 801acf0:	4905      	ldr	r1, [pc, #20]	; (801ad08 <CT+0x38>)
 801acf2:	4806      	ldr	r0, [pc, #24]	; (801ad0c <CT+0x3c>)
 801acf4:	f001 fcc2 	bl	801c67c <siprintf>
    return CTime;
 801acf8:	4b04      	ldr	r3, [pc, #16]	; (801ad0c <CT+0x3c>)
}
 801acfa:	4618      	mov	r0, r3
 801acfc:	bd80      	pop	{r7, pc}
 801acfe:	bf00      	nop
 801ad00:	00000000 	.word	0x00000000
 801ad04:	408f4000 	.word	0x408f4000
 801ad08:	080205e8 	.word	0x080205e8
 801ad0c:	2400af20 	.word	0x2400af20

0801ad10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801ad14:	2201      	movs	r2, #1
 801ad16:	490e      	ldr	r1, [pc, #56]	; (801ad50 <MX_USB_HOST_Init+0x40>)
 801ad18:	480e      	ldr	r0, [pc, #56]	; (801ad54 <MX_USB_HOST_Init+0x44>)
 801ad1a:	f7f5 f937 	bl	800ff8c <USBH_Init>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d001      	beq.n	801ad28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801ad24:	f7e6 fd2f 	bl	8001786 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801ad28:	490b      	ldr	r1, [pc, #44]	; (801ad58 <MX_USB_HOST_Init+0x48>)
 801ad2a:	480a      	ldr	r0, [pc, #40]	; (801ad54 <MX_USB_HOST_Init+0x44>)
 801ad2c:	f7f5 f9d6 	bl	80100dc <USBH_RegisterClass>
 801ad30:	4603      	mov	r3, r0
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d001      	beq.n	801ad3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801ad36:	f7e6 fd26 	bl	8001786 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801ad3a:	4806      	ldr	r0, [pc, #24]	; (801ad54 <MX_USB_HOST_Init+0x44>)
 801ad3c:	f7f5 fa63 	bl	8010206 <USBH_Start>
 801ad40:	4603      	mov	r3, r0
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d001      	beq.n	801ad4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801ad46:	f7e6 fd1e 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801ad4a:	bf00      	nop
 801ad4c:	bd80      	pop	{r7, pc}
 801ad4e:	bf00      	nop
 801ad50:	0801ad5d 	.word	0x0801ad5d
 801ad54:	24010b5c 	.word	0x24010b5c
 801ad58:	24000040 	.word	0x24000040

0801ad5c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801ad5c:	b480      	push	{r7}
 801ad5e:	b083      	sub	sp, #12
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	6078      	str	r0, [r7, #4]
 801ad64:	460b      	mov	r3, r1
 801ad66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801ad68:	78fb      	ldrb	r3, [r7, #3]
 801ad6a:	3b01      	subs	r3, #1
 801ad6c:	2b04      	cmp	r3, #4
 801ad6e:	d819      	bhi.n	801ada4 <USBH_UserProcess+0x48>
 801ad70:	a201      	add	r2, pc, #4	; (adr r2, 801ad78 <USBH_UserProcess+0x1c>)
 801ad72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad76:	bf00      	nop
 801ad78:	0801ada5 	.word	0x0801ada5
 801ad7c:	0801ad95 	.word	0x0801ad95
 801ad80:	0801ada5 	.word	0x0801ada5
 801ad84:	0801ad9d 	.word	0x0801ad9d
 801ad88:	0801ad8d 	.word	0x0801ad8d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801ad8c:	4b09      	ldr	r3, [pc, #36]	; (801adb4 <USBH_UserProcess+0x58>)
 801ad8e:	2203      	movs	r2, #3
 801ad90:	701a      	strb	r2, [r3, #0]
  break;
 801ad92:	e008      	b.n	801ada6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801ad94:	4b07      	ldr	r3, [pc, #28]	; (801adb4 <USBH_UserProcess+0x58>)
 801ad96:	2202      	movs	r2, #2
 801ad98:	701a      	strb	r2, [r3, #0]
  break;
 801ad9a:	e004      	b.n	801ada6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801ad9c:	4b05      	ldr	r3, [pc, #20]	; (801adb4 <USBH_UserProcess+0x58>)
 801ad9e:	2201      	movs	r2, #1
 801ada0:	701a      	strb	r2, [r3, #0]
  break;
 801ada2:	e000      	b.n	801ada6 <USBH_UserProcess+0x4a>

  default:
  break;
 801ada4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801ada6:	bf00      	nop
 801ada8:	370c      	adds	r7, #12
 801adaa:	46bd      	mov	sp, r7
 801adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb0:	4770      	bx	lr
 801adb2:	bf00      	nop
 801adb4:	2400af34 	.word	0x2400af34

0801adb8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b0b8      	sub	sp, #224	; 0xe0
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801adc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801adc4:	2200      	movs	r2, #0
 801adc6:	601a      	str	r2, [r3, #0]
 801adc8:	605a      	str	r2, [r3, #4]
 801adca:	609a      	str	r2, [r3, #8]
 801adcc:	60da      	str	r2, [r3, #12]
 801adce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801add0:	f107 0310 	add.w	r3, r7, #16
 801add4:	22bc      	movs	r2, #188	; 0xbc
 801add6:	2100      	movs	r1, #0
 801add8:	4618      	mov	r0, r3
 801adda:	f000 fb25 	bl	801b428 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	4a3b      	ldr	r2, [pc, #236]	; (801aed0 <HAL_HCD_MspInit+0x118>)
 801ade4:	4293      	cmp	r3, r2
 801ade6:	d16e      	bne.n	801aec6 <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801ade8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801adec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801adee:	2301      	movs	r3, #1
 801adf0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 801adf2:	2312      	movs	r3, #18
 801adf4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801adf6:	2302      	movs	r3, #2
 801adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 801adfa:	2303      	movs	r3, #3
 801adfc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801adfe:	2302      	movs	r3, #2
 801ae00:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801ae02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801ae06:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 801ae08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801ae0c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801ae0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801ae12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ae16:	f107 0310 	add.w	r3, r7, #16
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	f7ed fa42 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 801ae20:	4603      	mov	r3, r0
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d001      	beq.n	801ae2a <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 801ae26:	f7e6 fcae 	bl	8001786 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801ae2a:	f7ec fa8f 	bl	800734c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ae2e:	4b29      	ldr	r3, [pc, #164]	; (801aed4 <HAL_HCD_MspInit+0x11c>)
 801ae30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ae34:	4a27      	ldr	r2, [pc, #156]	; (801aed4 <HAL_HCD_MspInit+0x11c>)
 801ae36:	f043 0301 	orr.w	r3, r3, #1
 801ae3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ae3e:	4b25      	ldr	r3, [pc, #148]	; (801aed4 <HAL_HCD_MspInit+0x11c>)
 801ae40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ae44:	f003 0301 	and.w	r3, r3, #1
 801ae48:	60fb      	str	r3, [r7, #12]
 801ae4a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801ae4c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801ae50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ae54:	2302      	movs	r3, #2
 801ae56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ae60:	2300      	movs	r3, #0
 801ae62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801ae66:	230a      	movs	r3, #10
 801ae68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ae6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801ae70:	4619      	mov	r1, r3
 801ae72:	4819      	ldr	r0, [pc, #100]	; (801aed8 <HAL_HCD_MspInit+0x120>)
 801ae74:	f7ea f930 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801ae78:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ae7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ae80:	2300      	movs	r3, #0
 801ae82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae86:	2300      	movs	r3, #0
 801ae88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ae8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801ae90:	4619      	mov	r1, r3
 801ae92:	4811      	ldr	r0, [pc, #68]	; (801aed8 <HAL_HCD_MspInit+0x120>)
 801ae94:	f7ea f920 	bl	80050d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ae98:	4b0e      	ldr	r3, [pc, #56]	; (801aed4 <HAL_HCD_MspInit+0x11c>)
 801ae9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ae9e:	4a0d      	ldr	r2, [pc, #52]	; (801aed4 <HAL_HCD_MspInit+0x11c>)
 801aea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801aea4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801aea8:	4b0a      	ldr	r3, [pc, #40]	; (801aed4 <HAL_HCD_MspInit+0x11c>)
 801aeaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801aeae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801aeb2:	60bb      	str	r3, [r7, #8]
 801aeb4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	2100      	movs	r1, #0
 801aeba:	2065      	movs	r0, #101	; 0x65
 801aebc:	f7e7 fd3f 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801aec0:	2065      	movs	r0, #101	; 0x65
 801aec2:	f7e7 fd56 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801aec6:	bf00      	nop
 801aec8:	37e0      	adds	r7, #224	; 0xe0
 801aeca:	46bd      	mov	sp, r7
 801aecc:	bd80      	pop	{r7, pc}
 801aece:	bf00      	nop
 801aed0:	40080000 	.word	0x40080000
 801aed4:	58024400 	.word	0x58024400
 801aed8:	58020000 	.word	0x58020000

0801aedc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7f5 f9ac 	bl	8010248 <USBH_LL_IncTimer>
}
 801aef0:	bf00      	nop
 801aef2:	3708      	adds	r7, #8
 801aef4:	46bd      	mov	sp, r7
 801aef6:	bd80      	pop	{r7, pc}

0801aef8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b082      	sub	sp, #8
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801af06:	4618      	mov	r0, r3
 801af08:	f7f5 f9f0 	bl	80102ec <USBH_LL_Connect>
}
 801af0c:	bf00      	nop
 801af0e:	3708      	adds	r7, #8
 801af10:	46bd      	mov	sp, r7
 801af12:	bd80      	pop	{r7, pc}

0801af14 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801af22:	4618      	mov	r0, r3
 801af24:	f7f5 f9ff 	bl	8010326 <USBH_LL_Disconnect>
}
 801af28:	bf00      	nop
 801af2a:	3708      	adds	r7, #8
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}

0801af30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801af30:	b480      	push	{r7}
 801af32:	b083      	sub	sp, #12
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	460b      	mov	r3, r1
 801af3a:	70fb      	strb	r3, [r7, #3]
 801af3c:	4613      	mov	r3, r2
 801af3e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801af40:	bf00      	nop
 801af42:	370c      	adds	r7, #12
 801af44:	46bd      	mov	sp, r7
 801af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4a:	4770      	bx	lr

0801af4c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b082      	sub	sp, #8
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801af5a:	4618      	mov	r0, r3
 801af5c:	f7f5 f9a6 	bl	80102ac <USBH_LL_PortEnabled>
}
 801af60:	bf00      	nop
 801af62:	3708      	adds	r7, #8
 801af64:	46bd      	mov	sp, r7
 801af66:	bd80      	pop	{r7, pc}

0801af68 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801af76:	4618      	mov	r0, r3
 801af78:	f7f5 f9a8 	bl	80102cc <USBH_LL_PortDisabled>
}
 801af7c:	bf00      	nop
 801af7e:	3708      	adds	r7, #8
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}

0801af84 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b082      	sub	sp, #8
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801af8c:	687a      	ldr	r2, [r7, #4]
 801af8e:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801af92:	4413      	add	r3, r2
 801af94:	781b      	ldrb	r3, [r3, #0]
 801af96:	2b01      	cmp	r3, #1
 801af98:	d12b      	bne.n	801aff2 <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801af9a:	4a18      	ldr	r2, [pc, #96]	; (801affc <USBH_LL_Init+0x78>)
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801afa2:	687a      	ldr	r2, [r7, #4]
 801afa4:	f643 2310 	movw	r3, #14864	; 0x3a10
 801afa8:	4413      	add	r3, r2
 801afaa:	4a14      	ldr	r2, [pc, #80]	; (801affc <USBH_LL_Init+0x78>)
 801afac:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801afae:	4b13      	ldr	r3, [pc, #76]	; (801affc <USBH_LL_Init+0x78>)
 801afb0:	4a13      	ldr	r2, [pc, #76]	; (801b000 <USBH_LL_Init+0x7c>)
 801afb2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 801afb4:	4b11      	ldr	r3, [pc, #68]	; (801affc <USBH_LL_Init+0x78>)
 801afb6:	2210      	movs	r2, #16
 801afb8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801afba:	4b10      	ldr	r3, [pc, #64]	; (801affc <USBH_LL_Init+0x78>)
 801afbc:	2201      	movs	r2, #1
 801afbe:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801afc0:	4b0e      	ldr	r3, [pc, #56]	; (801affc <USBH_LL_Init+0x78>)
 801afc2:	2200      	movs	r2, #0
 801afc4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801afc6:	4b0d      	ldr	r3, [pc, #52]	; (801affc <USBH_LL_Init+0x78>)
 801afc8:	2202      	movs	r2, #2
 801afca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801afcc:	4b0b      	ldr	r3, [pc, #44]	; (801affc <USBH_LL_Init+0x78>)
 801afce:	2200      	movs	r2, #0
 801afd0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801afd2:	480a      	ldr	r0, [pc, #40]	; (801affc <USBH_LL_Init+0x78>)
 801afd4:	f7ea fa7b 	bl	80054ce <HAL_HCD_Init>
 801afd8:	4603      	mov	r3, r0
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d001      	beq.n	801afe2 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 801afde:	f7e6 fbd2 	bl	8001786 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801afe2:	4806      	ldr	r0, [pc, #24]	; (801affc <USBH_LL_Init+0x78>)
 801afe4:	f7ea fe4a 	bl	8005c7c <HAL_HCD_GetCurrentFrame>
 801afe8:	4603      	mov	r3, r0
 801afea:	4619      	mov	r1, r3
 801afec:	6878      	ldr	r0, [r7, #4]
 801afee:	f7f5 f91a 	bl	8010226 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801aff2:	2300      	movs	r3, #0
}
 801aff4:	4618      	mov	r0, r3
 801aff6:	3708      	adds	r7, #8
 801aff8:	46bd      	mov	sp, r7
 801affa:	bd80      	pop	{r7, pc}
 801affc:	240145b4 	.word	0x240145b4
 801b000:	40080000 	.word	0x40080000

0801b004 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b084      	sub	sp, #16
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b00c:	2300      	movs	r3, #0
 801b00e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b010:	2300      	movs	r3, #0
 801b012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801b014:	687a      	ldr	r2, [r7, #4]
 801b016:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b01a:	4413      	add	r3, r2
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4618      	mov	r0, r3
 801b020:	f7ea fdc4 	bl	8005bac <HAL_HCD_Start>
 801b024:	4603      	mov	r3, r0
 801b026:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b028:	7bfb      	ldrb	r3, [r7, #15]
 801b02a:	4618      	mov	r0, r3
 801b02c:	f000 f91e 	bl	801b26c <USBH_Get_USB_Status>
 801b030:	4603      	mov	r3, r0
 801b032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b034:	7bbb      	ldrb	r3, [r7, #14]
}
 801b036:	4618      	mov	r0, r3
 801b038:	3710      	adds	r7, #16
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd80      	pop	{r7, pc}

0801b03e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801b03e:	b580      	push	{r7, lr}
 801b040:	b084      	sub	sp, #16
 801b042:	af00      	add	r7, sp, #0
 801b044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b046:	2300      	movs	r3, #0
 801b048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b04a:	2300      	movs	r3, #0
 801b04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b054:	4413      	add	r3, r2
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	4618      	mov	r0, r3
 801b05a:	f7ea fdca 	bl	8005bf2 <HAL_HCD_Stop>
 801b05e:	4603      	mov	r3, r0
 801b060:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b062:	7bfb      	ldrb	r3, [r7, #15]
 801b064:	4618      	mov	r0, r3
 801b066:	f000 f901 	bl	801b26c <USBH_Get_USB_Status>
 801b06a:	4603      	mov	r3, r0
 801b06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b06e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b070:	4618      	mov	r0, r3
 801b072:	3710      	adds	r7, #16
 801b074:	46bd      	mov	sp, r7
 801b076:	bd80      	pop	{r7, pc}

0801b078 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	460b      	mov	r3, r1
 801b082:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801b084:	687a      	ldr	r2, [r7, #4]
 801b086:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b08a:	4413      	add	r3, r2
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	78fa      	ldrb	r2, [r7, #3]
 801b090:	4611      	mov	r1, r2
 801b092:	4618      	mov	r0, r3
 801b094:	f7ea fdde 	bl	8005c54 <HAL_HCD_HC_GetXferCount>
 801b098:	4603      	mov	r3, r0
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3708      	adds	r7, #8
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}

0801b0a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801b0a2:	b590      	push	{r4, r7, lr}
 801b0a4:	b089      	sub	sp, #36	; 0x24
 801b0a6:	af04      	add	r7, sp, #16
 801b0a8:	6078      	str	r0, [r7, #4]
 801b0aa:	4608      	mov	r0, r1
 801b0ac:	4611      	mov	r1, r2
 801b0ae:	461a      	mov	r2, r3
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	70fb      	strb	r3, [r7, #3]
 801b0b4:	460b      	mov	r3, r1
 801b0b6:	70bb      	strb	r3, [r7, #2]
 801b0b8:	4613      	mov	r3, r2
 801b0ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b0c0:	2300      	movs	r3, #0
 801b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801b0c4:	687a      	ldr	r2, [r7, #4]
 801b0c6:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b0ca:	4413      	add	r3, r2
 801b0cc:	6818      	ldr	r0, [r3, #0]
 801b0ce:	787c      	ldrb	r4, [r7, #1]
 801b0d0:	78ba      	ldrb	r2, [r7, #2]
 801b0d2:	78f9      	ldrb	r1, [r7, #3]
 801b0d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b0d6:	9302      	str	r3, [sp, #8]
 801b0d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b0dc:	9301      	str	r3, [sp, #4]
 801b0de:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b0e2:	9300      	str	r3, [sp, #0]
 801b0e4:	4623      	mov	r3, r4
 801b0e6:	f7ea fa54 	bl	8005592 <HAL_HCD_HC_Init>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801b0ee:	7bfb      	ldrb	r3, [r7, #15]
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f000 f8bb 	bl	801b26c <USBH_Get_USB_Status>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3714      	adds	r7, #20
 801b100:	46bd      	mov	sp, r7
 801b102:	bd90      	pop	{r4, r7, pc}

0801b104 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b084      	sub	sp, #16
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
 801b10c:	460b      	mov	r3, r1
 801b10e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b110:	2300      	movs	r3, #0
 801b112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b114:	2300      	movs	r3, #0
 801b116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801b118:	687a      	ldr	r2, [r7, #4]
 801b11a:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b11e:	4413      	add	r3, r2
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	78fa      	ldrb	r2, [r7, #3]
 801b124:	4611      	mov	r1, r2
 801b126:	4618      	mov	r0, r3
 801b128:	f7ea fac2 	bl	80056b0 <HAL_HCD_HC_Halt>
 801b12c:	4603      	mov	r3, r0
 801b12e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b130:	7bfb      	ldrb	r3, [r7, #15]
 801b132:	4618      	mov	r0, r3
 801b134:	f000 f89a 	bl	801b26c <USBH_Get_USB_Status>
 801b138:	4603      	mov	r3, r0
 801b13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b13c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b13e:	4618      	mov	r0, r3
 801b140:	3710      	adds	r7, #16
 801b142:	46bd      	mov	sp, r7
 801b144:	bd80      	pop	{r7, pc}

0801b146 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801b146:	b590      	push	{r4, r7, lr}
 801b148:	b089      	sub	sp, #36	; 0x24
 801b14a:	af04      	add	r7, sp, #16
 801b14c:	6078      	str	r0, [r7, #4]
 801b14e:	4608      	mov	r0, r1
 801b150:	4611      	mov	r1, r2
 801b152:	461a      	mov	r2, r3
 801b154:	4603      	mov	r3, r0
 801b156:	70fb      	strb	r3, [r7, #3]
 801b158:	460b      	mov	r3, r1
 801b15a:	70bb      	strb	r3, [r7, #2]
 801b15c:	4613      	mov	r3, r2
 801b15e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b160:	2300      	movs	r3, #0
 801b162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b164:	2300      	movs	r3, #0
 801b166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801b168:	687a      	ldr	r2, [r7, #4]
 801b16a:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b16e:	4413      	add	r3, r2
 801b170:	6818      	ldr	r0, [r3, #0]
 801b172:	787c      	ldrb	r4, [r7, #1]
 801b174:	78ba      	ldrb	r2, [r7, #2]
 801b176:	78f9      	ldrb	r1, [r7, #3]
 801b178:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b17c:	9303      	str	r3, [sp, #12]
 801b17e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b180:	9302      	str	r3, [sp, #8]
 801b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b184:	9301      	str	r3, [sp, #4]
 801b186:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	4623      	mov	r3, r4
 801b18e:	f7ea fab3 	bl	80056f8 <HAL_HCD_HC_SubmitRequest>
 801b192:	4603      	mov	r3, r0
 801b194:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801b196:	7bfb      	ldrb	r3, [r7, #15]
 801b198:	4618      	mov	r0, r3
 801b19a:	f000 f867 	bl	801b26c <USBH_Get_USB_Status>
 801b19e:	4603      	mov	r3, r0
 801b1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	3714      	adds	r7, #20
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	bd90      	pop	{r4, r7, pc}

0801b1ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b082      	sub	sp, #8
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
 801b1b4:	460b      	mov	r3, r1
 801b1b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801b1b8:	687a      	ldr	r2, [r7, #4]
 801b1ba:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b1be:	4413      	add	r3, r2
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	78fa      	ldrb	r2, [r7, #3]
 801b1c4:	4611      	mov	r1, r2
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f7ea fd30 	bl	8005c2c <HAL_HCD_HC_GetURBState>
 801b1cc:	4603      	mov	r3, r0
}
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	3708      	adds	r7, #8
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}

0801b1d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801b1d6:	b580      	push	{r7, lr}
 801b1d8:	b082      	sub	sp, #8
 801b1da:	af00      	add	r7, sp, #0
 801b1dc:	6078      	str	r0, [r7, #4]
 801b1de:	460b      	mov	r3, r1
 801b1e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801b1e2:	687a      	ldr	r2, [r7, #4]
 801b1e4:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801b1e8:	4413      	add	r3, r2
 801b1ea:	781b      	ldrb	r3, [r3, #0]
 801b1ec:	2b01      	cmp	r3, #1
 801b1ee:	d103      	bne.n	801b1f8 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 801b1f0:	78fb      	ldrb	r3, [r7, #3]
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	f000 f866 	bl	801b2c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801b1f8:	20c8      	movs	r0, #200	; 0xc8
 801b1fa:	f7e7 fa81 	bl	8002700 <HAL_Delay>
  return USBH_OK;
 801b1fe:	2300      	movs	r3, #0
}
 801b200:	4618      	mov	r0, r3
 801b202:	3708      	adds	r7, #8
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}

0801b208 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801b208:	b480      	push	{r7}
 801b20a:	b085      	sub	sp, #20
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
 801b210:	460b      	mov	r3, r1
 801b212:	70fb      	strb	r3, [r7, #3]
 801b214:	4613      	mov	r3, r2
 801b216:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801b218:	687a      	ldr	r2, [r7, #4]
 801b21a:	f643 2310 	movw	r3, #14864	; 0x3a10
 801b21e:	4413      	add	r3, r2
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801b224:	78fb      	ldrb	r3, [r7, #3]
 801b226:	68fa      	ldr	r2, [r7, #12]
 801b228:	212c      	movs	r1, #44	; 0x2c
 801b22a:	fb01 f303 	mul.w	r3, r1, r3
 801b22e:	4413      	add	r3, r2
 801b230:	333b      	adds	r3, #59	; 0x3b
 801b232:	781b      	ldrb	r3, [r3, #0]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d009      	beq.n	801b24c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801b238:	78fb      	ldrb	r3, [r7, #3]
 801b23a:	68fa      	ldr	r2, [r7, #12]
 801b23c:	212c      	movs	r1, #44	; 0x2c
 801b23e:	fb01 f303 	mul.w	r3, r1, r3
 801b242:	4413      	add	r3, r2
 801b244:	3354      	adds	r3, #84	; 0x54
 801b246:	78ba      	ldrb	r2, [r7, #2]
 801b248:	701a      	strb	r2, [r3, #0]
 801b24a:	e008      	b.n	801b25e <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801b24c:	78fb      	ldrb	r3, [r7, #3]
 801b24e:	68fa      	ldr	r2, [r7, #12]
 801b250:	212c      	movs	r1, #44	; 0x2c
 801b252:	fb01 f303 	mul.w	r3, r1, r3
 801b256:	4413      	add	r3, r2
 801b258:	3355      	adds	r3, #85	; 0x55
 801b25a:	78ba      	ldrb	r2, [r7, #2]
 801b25c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801b25e:	2300      	movs	r3, #0
}
 801b260:	4618      	mov	r0, r3
 801b262:	3714      	adds	r7, #20
 801b264:	46bd      	mov	sp, r7
 801b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26a:	4770      	bx	lr

0801b26c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b26c:	b480      	push	{r7}
 801b26e:	b085      	sub	sp, #20
 801b270:	af00      	add	r7, sp, #0
 801b272:	4603      	mov	r3, r0
 801b274:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b276:	2300      	movs	r3, #0
 801b278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b27a:	79fb      	ldrb	r3, [r7, #7]
 801b27c:	2b03      	cmp	r3, #3
 801b27e:	d817      	bhi.n	801b2b0 <USBH_Get_USB_Status+0x44>
 801b280:	a201      	add	r2, pc, #4	; (adr r2, 801b288 <USBH_Get_USB_Status+0x1c>)
 801b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b286:	bf00      	nop
 801b288:	0801b299 	.word	0x0801b299
 801b28c:	0801b29f 	.word	0x0801b29f
 801b290:	0801b2a5 	.word	0x0801b2a5
 801b294:	0801b2ab 	.word	0x0801b2ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801b298:	2300      	movs	r3, #0
 801b29a:	73fb      	strb	r3, [r7, #15]
    break;
 801b29c:	e00b      	b.n	801b2b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801b29e:	2302      	movs	r3, #2
 801b2a0:	73fb      	strb	r3, [r7, #15]
    break;
 801b2a2:	e008      	b.n	801b2b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 801b2a8:	e005      	b.n	801b2b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801b2aa:	2302      	movs	r3, #2
 801b2ac:	73fb      	strb	r3, [r7, #15]
    break;
 801b2ae:	e002      	b.n	801b2b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801b2b0:	2302      	movs	r3, #2
 801b2b2:	73fb      	strb	r3, [r7, #15]
    break;
 801b2b4:	bf00      	nop
  }
  return usb_status;
 801b2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	3714      	adds	r7, #20
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c2:	4770      	bx	lr

0801b2c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b084      	sub	sp, #16
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801b2ce:	79fb      	ldrb	r3, [r7, #7]
 801b2d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801b2d2:	79fb      	ldrb	r3, [r7, #7]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d102      	bne.n	801b2de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801b2d8:	2301      	movs	r3, #1
 801b2da:	73fb      	strb	r3, [r7, #15]
 801b2dc:	e001      	b.n	801b2e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801b2de:	2300      	movs	r3, #0
 801b2e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 801b2e2:	7bfb      	ldrb	r3, [r7, #15]
 801b2e4:	461a      	mov	r2, r3
 801b2e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b2ea:	4803      	ldr	r0, [pc, #12]	; (801b2f8 <MX_DriverVbusFS+0x34>)
 801b2ec:	f7ea f8bc 	bl	8005468 <HAL_GPIO_WritePin>
}
 801b2f0:	bf00      	nop
 801b2f2:	3710      	adds	r7, #16
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}
 801b2f8:	58020000 	.word	0x58020000

0801b2fc <__assert_func>:
 801b2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b2fe:	4614      	mov	r4, r2
 801b300:	461a      	mov	r2, r3
 801b302:	4b09      	ldr	r3, [pc, #36]	; (801b328 <__assert_func+0x2c>)
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	4605      	mov	r5, r0
 801b308:	68d8      	ldr	r0, [r3, #12]
 801b30a:	b14c      	cbz	r4, 801b320 <__assert_func+0x24>
 801b30c:	4b07      	ldr	r3, [pc, #28]	; (801b32c <__assert_func+0x30>)
 801b30e:	9100      	str	r1, [sp, #0]
 801b310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b314:	4906      	ldr	r1, [pc, #24]	; (801b330 <__assert_func+0x34>)
 801b316:	462b      	mov	r3, r5
 801b318:	f000 f818 	bl	801b34c <fiprintf>
 801b31c:	f002 f93c 	bl	801d598 <abort>
 801b320:	4b04      	ldr	r3, [pc, #16]	; (801b334 <__assert_func+0x38>)
 801b322:	461c      	mov	r4, r3
 801b324:	e7f3      	b.n	801b30e <__assert_func+0x12>
 801b326:	bf00      	nop
 801b328:	2400a128 	.word	0x2400a128
 801b32c:	0802923f 	.word	0x0802923f
 801b330:	0802924c 	.word	0x0802924c
 801b334:	0802927a 	.word	0x0802927a

0801b338 <atoi>:
 801b338:	220a      	movs	r2, #10
 801b33a:	2100      	movs	r1, #0
 801b33c:	f002 b862 	b.w	801d404 <strtol>

0801b340 <__errno>:
 801b340:	4b01      	ldr	r3, [pc, #4]	; (801b348 <__errno+0x8>)
 801b342:	6818      	ldr	r0, [r3, #0]
 801b344:	4770      	bx	lr
 801b346:	bf00      	nop
 801b348:	2400a128 	.word	0x2400a128

0801b34c <fiprintf>:
 801b34c:	b40e      	push	{r1, r2, r3}
 801b34e:	b503      	push	{r0, r1, lr}
 801b350:	4601      	mov	r1, r0
 801b352:	ab03      	add	r3, sp, #12
 801b354:	4805      	ldr	r0, [pc, #20]	; (801b36c <fiprintf+0x20>)
 801b356:	f853 2b04 	ldr.w	r2, [r3], #4
 801b35a:	6800      	ldr	r0, [r0, #0]
 801b35c:	9301      	str	r3, [sp, #4]
 801b35e:	f000 f93f 	bl	801b5e0 <_vfiprintf_r>
 801b362:	b002      	add	sp, #8
 801b364:	f85d eb04 	ldr.w	lr, [sp], #4
 801b368:	b003      	add	sp, #12
 801b36a:	4770      	bx	lr
 801b36c:	2400a128 	.word	0x2400a128

0801b370 <__libc_init_array>:
 801b370:	b570      	push	{r4, r5, r6, lr}
 801b372:	4d0d      	ldr	r5, [pc, #52]	; (801b3a8 <__libc_init_array+0x38>)
 801b374:	4c0d      	ldr	r4, [pc, #52]	; (801b3ac <__libc_init_array+0x3c>)
 801b376:	1b64      	subs	r4, r4, r5
 801b378:	10a4      	asrs	r4, r4, #2
 801b37a:	2600      	movs	r6, #0
 801b37c:	42a6      	cmp	r6, r4
 801b37e:	d109      	bne.n	801b394 <__libc_init_array+0x24>
 801b380:	4d0b      	ldr	r5, [pc, #44]	; (801b3b0 <__libc_init_array+0x40>)
 801b382:	4c0c      	ldr	r4, [pc, #48]	; (801b3b4 <__libc_init_array+0x44>)
 801b384:	f004 fe2c 	bl	801ffe0 <_init>
 801b388:	1b64      	subs	r4, r4, r5
 801b38a:	10a4      	asrs	r4, r4, #2
 801b38c:	2600      	movs	r6, #0
 801b38e:	42a6      	cmp	r6, r4
 801b390:	d105      	bne.n	801b39e <__libc_init_array+0x2e>
 801b392:	bd70      	pop	{r4, r5, r6, pc}
 801b394:	f855 3b04 	ldr.w	r3, [r5], #4
 801b398:	4798      	blx	r3
 801b39a:	3601      	adds	r6, #1
 801b39c:	e7ee      	b.n	801b37c <__libc_init_array+0xc>
 801b39e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3a2:	4798      	blx	r3
 801b3a4:	3601      	adds	r6, #1
 801b3a6:	e7f2      	b.n	801b38e <__libc_init_array+0x1e>
 801b3a8:	08029840 	.word	0x08029840
 801b3ac:	08029840 	.word	0x08029840
 801b3b0:	08029840 	.word	0x08029840
 801b3b4:	08029844 	.word	0x08029844

0801b3b8 <malloc>:
 801b3b8:	4b02      	ldr	r3, [pc, #8]	; (801b3c4 <malloc+0xc>)
 801b3ba:	4601      	mov	r1, r0
 801b3bc:	6818      	ldr	r0, [r3, #0]
 801b3be:	f000 b88b 	b.w	801b4d8 <_malloc_r>
 801b3c2:	bf00      	nop
 801b3c4:	2400a128 	.word	0x2400a128

0801b3c8 <free>:
 801b3c8:	4b02      	ldr	r3, [pc, #8]	; (801b3d4 <free+0xc>)
 801b3ca:	4601      	mov	r1, r0
 801b3cc:	6818      	ldr	r0, [r3, #0]
 801b3ce:	f000 b833 	b.w	801b438 <_free_r>
 801b3d2:	bf00      	nop
 801b3d4:	2400a128 	.word	0x2400a128

0801b3d8 <memcpy>:
 801b3d8:	440a      	add	r2, r1
 801b3da:	4291      	cmp	r1, r2
 801b3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801b3e0:	d100      	bne.n	801b3e4 <memcpy+0xc>
 801b3e2:	4770      	bx	lr
 801b3e4:	b510      	push	{r4, lr}
 801b3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b3ee:	4291      	cmp	r1, r2
 801b3f0:	d1f9      	bne.n	801b3e6 <memcpy+0xe>
 801b3f2:	bd10      	pop	{r4, pc}

0801b3f4 <memmove>:
 801b3f4:	4288      	cmp	r0, r1
 801b3f6:	b510      	push	{r4, lr}
 801b3f8:	eb01 0402 	add.w	r4, r1, r2
 801b3fc:	d902      	bls.n	801b404 <memmove+0x10>
 801b3fe:	4284      	cmp	r4, r0
 801b400:	4623      	mov	r3, r4
 801b402:	d807      	bhi.n	801b414 <memmove+0x20>
 801b404:	1e43      	subs	r3, r0, #1
 801b406:	42a1      	cmp	r1, r4
 801b408:	d008      	beq.n	801b41c <memmove+0x28>
 801b40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b412:	e7f8      	b.n	801b406 <memmove+0x12>
 801b414:	4402      	add	r2, r0
 801b416:	4601      	mov	r1, r0
 801b418:	428a      	cmp	r2, r1
 801b41a:	d100      	bne.n	801b41e <memmove+0x2a>
 801b41c:	bd10      	pop	{r4, pc}
 801b41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b426:	e7f7      	b.n	801b418 <memmove+0x24>

0801b428 <memset>:
 801b428:	4402      	add	r2, r0
 801b42a:	4603      	mov	r3, r0
 801b42c:	4293      	cmp	r3, r2
 801b42e:	d100      	bne.n	801b432 <memset+0xa>
 801b430:	4770      	bx	lr
 801b432:	f803 1b01 	strb.w	r1, [r3], #1
 801b436:	e7f9      	b.n	801b42c <memset+0x4>

0801b438 <_free_r>:
 801b438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b43a:	2900      	cmp	r1, #0
 801b43c:	d048      	beq.n	801b4d0 <_free_r+0x98>
 801b43e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b442:	9001      	str	r0, [sp, #4]
 801b444:	2b00      	cmp	r3, #0
 801b446:	f1a1 0404 	sub.w	r4, r1, #4
 801b44a:	bfb8      	it	lt
 801b44c:	18e4      	addlt	r4, r4, r3
 801b44e:	f003 fc5d 	bl	801ed0c <__malloc_lock>
 801b452:	4a20      	ldr	r2, [pc, #128]	; (801b4d4 <_free_r+0x9c>)
 801b454:	9801      	ldr	r0, [sp, #4]
 801b456:	6813      	ldr	r3, [r2, #0]
 801b458:	4615      	mov	r5, r2
 801b45a:	b933      	cbnz	r3, 801b46a <_free_r+0x32>
 801b45c:	6063      	str	r3, [r4, #4]
 801b45e:	6014      	str	r4, [r2, #0]
 801b460:	b003      	add	sp, #12
 801b462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b466:	f003 bc57 	b.w	801ed18 <__malloc_unlock>
 801b46a:	42a3      	cmp	r3, r4
 801b46c:	d90b      	bls.n	801b486 <_free_r+0x4e>
 801b46e:	6821      	ldr	r1, [r4, #0]
 801b470:	1862      	adds	r2, r4, r1
 801b472:	4293      	cmp	r3, r2
 801b474:	bf04      	itt	eq
 801b476:	681a      	ldreq	r2, [r3, #0]
 801b478:	685b      	ldreq	r3, [r3, #4]
 801b47a:	6063      	str	r3, [r4, #4]
 801b47c:	bf04      	itt	eq
 801b47e:	1852      	addeq	r2, r2, r1
 801b480:	6022      	streq	r2, [r4, #0]
 801b482:	602c      	str	r4, [r5, #0]
 801b484:	e7ec      	b.n	801b460 <_free_r+0x28>
 801b486:	461a      	mov	r2, r3
 801b488:	685b      	ldr	r3, [r3, #4]
 801b48a:	b10b      	cbz	r3, 801b490 <_free_r+0x58>
 801b48c:	42a3      	cmp	r3, r4
 801b48e:	d9fa      	bls.n	801b486 <_free_r+0x4e>
 801b490:	6811      	ldr	r1, [r2, #0]
 801b492:	1855      	adds	r5, r2, r1
 801b494:	42a5      	cmp	r5, r4
 801b496:	d10b      	bne.n	801b4b0 <_free_r+0x78>
 801b498:	6824      	ldr	r4, [r4, #0]
 801b49a:	4421      	add	r1, r4
 801b49c:	1854      	adds	r4, r2, r1
 801b49e:	42a3      	cmp	r3, r4
 801b4a0:	6011      	str	r1, [r2, #0]
 801b4a2:	d1dd      	bne.n	801b460 <_free_r+0x28>
 801b4a4:	681c      	ldr	r4, [r3, #0]
 801b4a6:	685b      	ldr	r3, [r3, #4]
 801b4a8:	6053      	str	r3, [r2, #4]
 801b4aa:	4421      	add	r1, r4
 801b4ac:	6011      	str	r1, [r2, #0]
 801b4ae:	e7d7      	b.n	801b460 <_free_r+0x28>
 801b4b0:	d902      	bls.n	801b4b8 <_free_r+0x80>
 801b4b2:	230c      	movs	r3, #12
 801b4b4:	6003      	str	r3, [r0, #0]
 801b4b6:	e7d3      	b.n	801b460 <_free_r+0x28>
 801b4b8:	6825      	ldr	r5, [r4, #0]
 801b4ba:	1961      	adds	r1, r4, r5
 801b4bc:	428b      	cmp	r3, r1
 801b4be:	bf04      	itt	eq
 801b4c0:	6819      	ldreq	r1, [r3, #0]
 801b4c2:	685b      	ldreq	r3, [r3, #4]
 801b4c4:	6063      	str	r3, [r4, #4]
 801b4c6:	bf04      	itt	eq
 801b4c8:	1949      	addeq	r1, r1, r5
 801b4ca:	6021      	streq	r1, [r4, #0]
 801b4cc:	6054      	str	r4, [r2, #4]
 801b4ce:	e7c7      	b.n	801b460 <_free_r+0x28>
 801b4d0:	b003      	add	sp, #12
 801b4d2:	bd30      	pop	{r4, r5, pc}
 801b4d4:	2400af38 	.word	0x2400af38

0801b4d8 <_malloc_r>:
 801b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4da:	1ccd      	adds	r5, r1, #3
 801b4dc:	f025 0503 	bic.w	r5, r5, #3
 801b4e0:	3508      	adds	r5, #8
 801b4e2:	2d0c      	cmp	r5, #12
 801b4e4:	bf38      	it	cc
 801b4e6:	250c      	movcc	r5, #12
 801b4e8:	2d00      	cmp	r5, #0
 801b4ea:	4606      	mov	r6, r0
 801b4ec:	db01      	blt.n	801b4f2 <_malloc_r+0x1a>
 801b4ee:	42a9      	cmp	r1, r5
 801b4f0:	d903      	bls.n	801b4fa <_malloc_r+0x22>
 801b4f2:	230c      	movs	r3, #12
 801b4f4:	6033      	str	r3, [r6, #0]
 801b4f6:	2000      	movs	r0, #0
 801b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4fa:	f003 fc07 	bl	801ed0c <__malloc_lock>
 801b4fe:	4921      	ldr	r1, [pc, #132]	; (801b584 <_malloc_r+0xac>)
 801b500:	680a      	ldr	r2, [r1, #0]
 801b502:	4614      	mov	r4, r2
 801b504:	b99c      	cbnz	r4, 801b52e <_malloc_r+0x56>
 801b506:	4f20      	ldr	r7, [pc, #128]	; (801b588 <_malloc_r+0xb0>)
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	b923      	cbnz	r3, 801b516 <_malloc_r+0x3e>
 801b50c:	4621      	mov	r1, r4
 801b50e:	4630      	mov	r0, r6
 801b510:	f001 f86a 	bl	801c5e8 <_sbrk_r>
 801b514:	6038      	str	r0, [r7, #0]
 801b516:	4629      	mov	r1, r5
 801b518:	4630      	mov	r0, r6
 801b51a:	f001 f865 	bl	801c5e8 <_sbrk_r>
 801b51e:	1c43      	adds	r3, r0, #1
 801b520:	d123      	bne.n	801b56a <_malloc_r+0x92>
 801b522:	230c      	movs	r3, #12
 801b524:	6033      	str	r3, [r6, #0]
 801b526:	4630      	mov	r0, r6
 801b528:	f003 fbf6 	bl	801ed18 <__malloc_unlock>
 801b52c:	e7e3      	b.n	801b4f6 <_malloc_r+0x1e>
 801b52e:	6823      	ldr	r3, [r4, #0]
 801b530:	1b5b      	subs	r3, r3, r5
 801b532:	d417      	bmi.n	801b564 <_malloc_r+0x8c>
 801b534:	2b0b      	cmp	r3, #11
 801b536:	d903      	bls.n	801b540 <_malloc_r+0x68>
 801b538:	6023      	str	r3, [r4, #0]
 801b53a:	441c      	add	r4, r3
 801b53c:	6025      	str	r5, [r4, #0]
 801b53e:	e004      	b.n	801b54a <_malloc_r+0x72>
 801b540:	6863      	ldr	r3, [r4, #4]
 801b542:	42a2      	cmp	r2, r4
 801b544:	bf0c      	ite	eq
 801b546:	600b      	streq	r3, [r1, #0]
 801b548:	6053      	strne	r3, [r2, #4]
 801b54a:	4630      	mov	r0, r6
 801b54c:	f003 fbe4 	bl	801ed18 <__malloc_unlock>
 801b550:	f104 000b 	add.w	r0, r4, #11
 801b554:	1d23      	adds	r3, r4, #4
 801b556:	f020 0007 	bic.w	r0, r0, #7
 801b55a:	1ac2      	subs	r2, r0, r3
 801b55c:	d0cc      	beq.n	801b4f8 <_malloc_r+0x20>
 801b55e:	1a1b      	subs	r3, r3, r0
 801b560:	50a3      	str	r3, [r4, r2]
 801b562:	e7c9      	b.n	801b4f8 <_malloc_r+0x20>
 801b564:	4622      	mov	r2, r4
 801b566:	6864      	ldr	r4, [r4, #4]
 801b568:	e7cc      	b.n	801b504 <_malloc_r+0x2c>
 801b56a:	1cc4      	adds	r4, r0, #3
 801b56c:	f024 0403 	bic.w	r4, r4, #3
 801b570:	42a0      	cmp	r0, r4
 801b572:	d0e3      	beq.n	801b53c <_malloc_r+0x64>
 801b574:	1a21      	subs	r1, r4, r0
 801b576:	4630      	mov	r0, r6
 801b578:	f001 f836 	bl	801c5e8 <_sbrk_r>
 801b57c:	3001      	adds	r0, #1
 801b57e:	d1dd      	bne.n	801b53c <_malloc_r+0x64>
 801b580:	e7cf      	b.n	801b522 <_malloc_r+0x4a>
 801b582:	bf00      	nop
 801b584:	2400af38 	.word	0x2400af38
 801b588:	2400af3c 	.word	0x2400af3c

0801b58c <__sfputc_r>:
 801b58c:	6893      	ldr	r3, [r2, #8]
 801b58e:	3b01      	subs	r3, #1
 801b590:	2b00      	cmp	r3, #0
 801b592:	b410      	push	{r4}
 801b594:	6093      	str	r3, [r2, #8]
 801b596:	da08      	bge.n	801b5aa <__sfputc_r+0x1e>
 801b598:	6994      	ldr	r4, [r2, #24]
 801b59a:	42a3      	cmp	r3, r4
 801b59c:	db01      	blt.n	801b5a2 <__sfputc_r+0x16>
 801b59e:	290a      	cmp	r1, #10
 801b5a0:	d103      	bne.n	801b5aa <__sfputc_r+0x1e>
 801b5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5a6:	f001 bf37 	b.w	801d418 <__swbuf_r>
 801b5aa:	6813      	ldr	r3, [r2, #0]
 801b5ac:	1c58      	adds	r0, r3, #1
 801b5ae:	6010      	str	r0, [r2, #0]
 801b5b0:	7019      	strb	r1, [r3, #0]
 801b5b2:	4608      	mov	r0, r1
 801b5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5b8:	4770      	bx	lr

0801b5ba <__sfputs_r>:
 801b5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5bc:	4606      	mov	r6, r0
 801b5be:	460f      	mov	r7, r1
 801b5c0:	4614      	mov	r4, r2
 801b5c2:	18d5      	adds	r5, r2, r3
 801b5c4:	42ac      	cmp	r4, r5
 801b5c6:	d101      	bne.n	801b5cc <__sfputs_r+0x12>
 801b5c8:	2000      	movs	r0, #0
 801b5ca:	e007      	b.n	801b5dc <__sfputs_r+0x22>
 801b5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5d0:	463a      	mov	r2, r7
 801b5d2:	4630      	mov	r0, r6
 801b5d4:	f7ff ffda 	bl	801b58c <__sfputc_r>
 801b5d8:	1c43      	adds	r3, r0, #1
 801b5da:	d1f3      	bne.n	801b5c4 <__sfputs_r+0xa>
 801b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b5e0 <_vfiprintf_r>:
 801b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e4:	460d      	mov	r5, r1
 801b5e6:	b09d      	sub	sp, #116	; 0x74
 801b5e8:	4614      	mov	r4, r2
 801b5ea:	4698      	mov	r8, r3
 801b5ec:	4606      	mov	r6, r0
 801b5ee:	b118      	cbz	r0, 801b5f8 <_vfiprintf_r+0x18>
 801b5f0:	6983      	ldr	r3, [r0, #24]
 801b5f2:	b90b      	cbnz	r3, 801b5f8 <_vfiprintf_r+0x18>
 801b5f4:	f002 ff00 	bl	801e3f8 <__sinit>
 801b5f8:	4b89      	ldr	r3, [pc, #548]	; (801b820 <_vfiprintf_r+0x240>)
 801b5fa:	429d      	cmp	r5, r3
 801b5fc:	d11b      	bne.n	801b636 <_vfiprintf_r+0x56>
 801b5fe:	6875      	ldr	r5, [r6, #4]
 801b600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b602:	07d9      	lsls	r1, r3, #31
 801b604:	d405      	bmi.n	801b612 <_vfiprintf_r+0x32>
 801b606:	89ab      	ldrh	r3, [r5, #12]
 801b608:	059a      	lsls	r2, r3, #22
 801b60a:	d402      	bmi.n	801b612 <_vfiprintf_r+0x32>
 801b60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b60e:	f003 fb04 	bl	801ec1a <__retarget_lock_acquire_recursive>
 801b612:	89ab      	ldrh	r3, [r5, #12]
 801b614:	071b      	lsls	r3, r3, #28
 801b616:	d501      	bpl.n	801b61c <_vfiprintf_r+0x3c>
 801b618:	692b      	ldr	r3, [r5, #16]
 801b61a:	b9eb      	cbnz	r3, 801b658 <_vfiprintf_r+0x78>
 801b61c:	4629      	mov	r1, r5
 801b61e:	4630      	mov	r0, r6
 801b620:	f001 ff4c 	bl	801d4bc <__swsetup_r>
 801b624:	b1c0      	cbz	r0, 801b658 <_vfiprintf_r+0x78>
 801b626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b628:	07dc      	lsls	r4, r3, #31
 801b62a:	d50e      	bpl.n	801b64a <_vfiprintf_r+0x6a>
 801b62c:	f04f 30ff 	mov.w	r0, #4294967295
 801b630:	b01d      	add	sp, #116	; 0x74
 801b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b636:	4b7b      	ldr	r3, [pc, #492]	; (801b824 <_vfiprintf_r+0x244>)
 801b638:	429d      	cmp	r5, r3
 801b63a:	d101      	bne.n	801b640 <_vfiprintf_r+0x60>
 801b63c:	68b5      	ldr	r5, [r6, #8]
 801b63e:	e7df      	b.n	801b600 <_vfiprintf_r+0x20>
 801b640:	4b79      	ldr	r3, [pc, #484]	; (801b828 <_vfiprintf_r+0x248>)
 801b642:	429d      	cmp	r5, r3
 801b644:	bf08      	it	eq
 801b646:	68f5      	ldreq	r5, [r6, #12]
 801b648:	e7da      	b.n	801b600 <_vfiprintf_r+0x20>
 801b64a:	89ab      	ldrh	r3, [r5, #12]
 801b64c:	0598      	lsls	r0, r3, #22
 801b64e:	d4ed      	bmi.n	801b62c <_vfiprintf_r+0x4c>
 801b650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b652:	f003 fae3 	bl	801ec1c <__retarget_lock_release_recursive>
 801b656:	e7e9      	b.n	801b62c <_vfiprintf_r+0x4c>
 801b658:	2300      	movs	r3, #0
 801b65a:	9309      	str	r3, [sp, #36]	; 0x24
 801b65c:	2320      	movs	r3, #32
 801b65e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b662:	f8cd 800c 	str.w	r8, [sp, #12]
 801b666:	2330      	movs	r3, #48	; 0x30
 801b668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b82c <_vfiprintf_r+0x24c>
 801b66c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b670:	f04f 0901 	mov.w	r9, #1
 801b674:	4623      	mov	r3, r4
 801b676:	469a      	mov	sl, r3
 801b678:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b67c:	b10a      	cbz	r2, 801b682 <_vfiprintf_r+0xa2>
 801b67e:	2a25      	cmp	r2, #37	; 0x25
 801b680:	d1f9      	bne.n	801b676 <_vfiprintf_r+0x96>
 801b682:	ebba 0b04 	subs.w	fp, sl, r4
 801b686:	d00b      	beq.n	801b6a0 <_vfiprintf_r+0xc0>
 801b688:	465b      	mov	r3, fp
 801b68a:	4622      	mov	r2, r4
 801b68c:	4629      	mov	r1, r5
 801b68e:	4630      	mov	r0, r6
 801b690:	f7ff ff93 	bl	801b5ba <__sfputs_r>
 801b694:	3001      	adds	r0, #1
 801b696:	f000 80aa 	beq.w	801b7ee <_vfiprintf_r+0x20e>
 801b69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b69c:	445a      	add	r2, fp
 801b69e:	9209      	str	r2, [sp, #36]	; 0x24
 801b6a0:	f89a 3000 	ldrb.w	r3, [sl]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	f000 80a2 	beq.w	801b7ee <_vfiprintf_r+0x20e>
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	f04f 32ff 	mov.w	r2, #4294967295
 801b6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6b4:	f10a 0a01 	add.w	sl, sl, #1
 801b6b8:	9304      	str	r3, [sp, #16]
 801b6ba:	9307      	str	r3, [sp, #28]
 801b6bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b6c0:	931a      	str	r3, [sp, #104]	; 0x68
 801b6c2:	4654      	mov	r4, sl
 801b6c4:	2205      	movs	r2, #5
 801b6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6ca:	4858      	ldr	r0, [pc, #352]	; (801b82c <_vfiprintf_r+0x24c>)
 801b6cc:	f7e4 fe20 	bl	8000310 <memchr>
 801b6d0:	9a04      	ldr	r2, [sp, #16]
 801b6d2:	b9d8      	cbnz	r0, 801b70c <_vfiprintf_r+0x12c>
 801b6d4:	06d1      	lsls	r1, r2, #27
 801b6d6:	bf44      	itt	mi
 801b6d8:	2320      	movmi	r3, #32
 801b6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b6de:	0713      	lsls	r3, r2, #28
 801b6e0:	bf44      	itt	mi
 801b6e2:	232b      	movmi	r3, #43	; 0x2b
 801b6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b6e8:	f89a 3000 	ldrb.w	r3, [sl]
 801b6ec:	2b2a      	cmp	r3, #42	; 0x2a
 801b6ee:	d015      	beq.n	801b71c <_vfiprintf_r+0x13c>
 801b6f0:	9a07      	ldr	r2, [sp, #28]
 801b6f2:	4654      	mov	r4, sl
 801b6f4:	2000      	movs	r0, #0
 801b6f6:	f04f 0c0a 	mov.w	ip, #10
 801b6fa:	4621      	mov	r1, r4
 801b6fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b700:	3b30      	subs	r3, #48	; 0x30
 801b702:	2b09      	cmp	r3, #9
 801b704:	d94e      	bls.n	801b7a4 <_vfiprintf_r+0x1c4>
 801b706:	b1b0      	cbz	r0, 801b736 <_vfiprintf_r+0x156>
 801b708:	9207      	str	r2, [sp, #28]
 801b70a:	e014      	b.n	801b736 <_vfiprintf_r+0x156>
 801b70c:	eba0 0308 	sub.w	r3, r0, r8
 801b710:	fa09 f303 	lsl.w	r3, r9, r3
 801b714:	4313      	orrs	r3, r2
 801b716:	9304      	str	r3, [sp, #16]
 801b718:	46a2      	mov	sl, r4
 801b71a:	e7d2      	b.n	801b6c2 <_vfiprintf_r+0xe2>
 801b71c:	9b03      	ldr	r3, [sp, #12]
 801b71e:	1d19      	adds	r1, r3, #4
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	9103      	str	r1, [sp, #12]
 801b724:	2b00      	cmp	r3, #0
 801b726:	bfbb      	ittet	lt
 801b728:	425b      	neglt	r3, r3
 801b72a:	f042 0202 	orrlt.w	r2, r2, #2
 801b72e:	9307      	strge	r3, [sp, #28]
 801b730:	9307      	strlt	r3, [sp, #28]
 801b732:	bfb8      	it	lt
 801b734:	9204      	strlt	r2, [sp, #16]
 801b736:	7823      	ldrb	r3, [r4, #0]
 801b738:	2b2e      	cmp	r3, #46	; 0x2e
 801b73a:	d10c      	bne.n	801b756 <_vfiprintf_r+0x176>
 801b73c:	7863      	ldrb	r3, [r4, #1]
 801b73e:	2b2a      	cmp	r3, #42	; 0x2a
 801b740:	d135      	bne.n	801b7ae <_vfiprintf_r+0x1ce>
 801b742:	9b03      	ldr	r3, [sp, #12]
 801b744:	1d1a      	adds	r2, r3, #4
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	9203      	str	r2, [sp, #12]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	bfb8      	it	lt
 801b74e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b752:	3402      	adds	r4, #2
 801b754:	9305      	str	r3, [sp, #20]
 801b756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b83c <_vfiprintf_r+0x25c>
 801b75a:	7821      	ldrb	r1, [r4, #0]
 801b75c:	2203      	movs	r2, #3
 801b75e:	4650      	mov	r0, sl
 801b760:	f7e4 fdd6 	bl	8000310 <memchr>
 801b764:	b140      	cbz	r0, 801b778 <_vfiprintf_r+0x198>
 801b766:	2340      	movs	r3, #64	; 0x40
 801b768:	eba0 000a 	sub.w	r0, r0, sl
 801b76c:	fa03 f000 	lsl.w	r0, r3, r0
 801b770:	9b04      	ldr	r3, [sp, #16]
 801b772:	4303      	orrs	r3, r0
 801b774:	3401      	adds	r4, #1
 801b776:	9304      	str	r3, [sp, #16]
 801b778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b77c:	482c      	ldr	r0, [pc, #176]	; (801b830 <_vfiprintf_r+0x250>)
 801b77e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b782:	2206      	movs	r2, #6
 801b784:	f7e4 fdc4 	bl	8000310 <memchr>
 801b788:	2800      	cmp	r0, #0
 801b78a:	d03f      	beq.n	801b80c <_vfiprintf_r+0x22c>
 801b78c:	4b29      	ldr	r3, [pc, #164]	; (801b834 <_vfiprintf_r+0x254>)
 801b78e:	bb1b      	cbnz	r3, 801b7d8 <_vfiprintf_r+0x1f8>
 801b790:	9b03      	ldr	r3, [sp, #12]
 801b792:	3307      	adds	r3, #7
 801b794:	f023 0307 	bic.w	r3, r3, #7
 801b798:	3308      	adds	r3, #8
 801b79a:	9303      	str	r3, [sp, #12]
 801b79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b79e:	443b      	add	r3, r7
 801b7a0:	9309      	str	r3, [sp, #36]	; 0x24
 801b7a2:	e767      	b.n	801b674 <_vfiprintf_r+0x94>
 801b7a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7a8:	460c      	mov	r4, r1
 801b7aa:	2001      	movs	r0, #1
 801b7ac:	e7a5      	b.n	801b6fa <_vfiprintf_r+0x11a>
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	3401      	adds	r4, #1
 801b7b2:	9305      	str	r3, [sp, #20]
 801b7b4:	4619      	mov	r1, r3
 801b7b6:	f04f 0c0a 	mov.w	ip, #10
 801b7ba:	4620      	mov	r0, r4
 801b7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7c0:	3a30      	subs	r2, #48	; 0x30
 801b7c2:	2a09      	cmp	r2, #9
 801b7c4:	d903      	bls.n	801b7ce <_vfiprintf_r+0x1ee>
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d0c5      	beq.n	801b756 <_vfiprintf_r+0x176>
 801b7ca:	9105      	str	r1, [sp, #20]
 801b7cc:	e7c3      	b.n	801b756 <_vfiprintf_r+0x176>
 801b7ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801b7d2:	4604      	mov	r4, r0
 801b7d4:	2301      	movs	r3, #1
 801b7d6:	e7f0      	b.n	801b7ba <_vfiprintf_r+0x1da>
 801b7d8:	ab03      	add	r3, sp, #12
 801b7da:	9300      	str	r3, [sp, #0]
 801b7dc:	462a      	mov	r2, r5
 801b7de:	4b16      	ldr	r3, [pc, #88]	; (801b838 <_vfiprintf_r+0x258>)
 801b7e0:	a904      	add	r1, sp, #16
 801b7e2:	4630      	mov	r0, r6
 801b7e4:	f000 f8bc 	bl	801b960 <_printf_float>
 801b7e8:	4607      	mov	r7, r0
 801b7ea:	1c78      	adds	r0, r7, #1
 801b7ec:	d1d6      	bne.n	801b79c <_vfiprintf_r+0x1bc>
 801b7ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b7f0:	07d9      	lsls	r1, r3, #31
 801b7f2:	d405      	bmi.n	801b800 <_vfiprintf_r+0x220>
 801b7f4:	89ab      	ldrh	r3, [r5, #12]
 801b7f6:	059a      	lsls	r2, r3, #22
 801b7f8:	d402      	bmi.n	801b800 <_vfiprintf_r+0x220>
 801b7fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b7fc:	f003 fa0e 	bl	801ec1c <__retarget_lock_release_recursive>
 801b800:	89ab      	ldrh	r3, [r5, #12]
 801b802:	065b      	lsls	r3, r3, #25
 801b804:	f53f af12 	bmi.w	801b62c <_vfiprintf_r+0x4c>
 801b808:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b80a:	e711      	b.n	801b630 <_vfiprintf_r+0x50>
 801b80c:	ab03      	add	r3, sp, #12
 801b80e:	9300      	str	r3, [sp, #0]
 801b810:	462a      	mov	r2, r5
 801b812:	4b09      	ldr	r3, [pc, #36]	; (801b838 <_vfiprintf_r+0x258>)
 801b814:	a904      	add	r1, sp, #16
 801b816:	4630      	mov	r0, r6
 801b818:	f000 fb2e 	bl	801be78 <_printf_i>
 801b81c:	e7e4      	b.n	801b7e8 <_vfiprintf_r+0x208>
 801b81e:	bf00      	nop
 801b820:	080294d8 	.word	0x080294d8
 801b824:	080294f8 	.word	0x080294f8
 801b828:	080294b8 	.word	0x080294b8
 801b82c:	08029280 	.word	0x08029280
 801b830:	0802928a 	.word	0x0802928a
 801b834:	0801b961 	.word	0x0801b961
 801b838:	0801b5bb 	.word	0x0801b5bb
 801b83c:	08029286 	.word	0x08029286

0801b840 <__cvt>:
 801b840:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b842:	ed2d 8b02 	vpush	{d8}
 801b846:	eeb0 8b40 	vmov.f64	d8, d0
 801b84a:	b085      	sub	sp, #20
 801b84c:	4617      	mov	r7, r2
 801b84e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b850:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b852:	ee18 2a90 	vmov	r2, s17
 801b856:	f025 0520 	bic.w	r5, r5, #32
 801b85a:	2a00      	cmp	r2, #0
 801b85c:	bfb6      	itet	lt
 801b85e:	222d      	movlt	r2, #45	; 0x2d
 801b860:	2200      	movge	r2, #0
 801b862:	eeb1 8b40 	vneglt.f64	d8, d0
 801b866:	2d46      	cmp	r5, #70	; 0x46
 801b868:	460c      	mov	r4, r1
 801b86a:	701a      	strb	r2, [r3, #0]
 801b86c:	d004      	beq.n	801b878 <__cvt+0x38>
 801b86e:	2d45      	cmp	r5, #69	; 0x45
 801b870:	d100      	bne.n	801b874 <__cvt+0x34>
 801b872:	3401      	adds	r4, #1
 801b874:	2102      	movs	r1, #2
 801b876:	e000      	b.n	801b87a <__cvt+0x3a>
 801b878:	2103      	movs	r1, #3
 801b87a:	ab03      	add	r3, sp, #12
 801b87c:	9301      	str	r3, [sp, #4]
 801b87e:	ab02      	add	r3, sp, #8
 801b880:	9300      	str	r3, [sp, #0]
 801b882:	4622      	mov	r2, r4
 801b884:	4633      	mov	r3, r6
 801b886:	eeb0 0b48 	vmov.f64	d0, d8
 801b88a:	f001 ff19 	bl	801d6c0 <_dtoa_r>
 801b88e:	2d47      	cmp	r5, #71	; 0x47
 801b890:	d109      	bne.n	801b8a6 <__cvt+0x66>
 801b892:	07fb      	lsls	r3, r7, #31
 801b894:	d407      	bmi.n	801b8a6 <__cvt+0x66>
 801b896:	9b03      	ldr	r3, [sp, #12]
 801b898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b89a:	1a1b      	subs	r3, r3, r0
 801b89c:	6013      	str	r3, [r2, #0]
 801b89e:	b005      	add	sp, #20
 801b8a0:	ecbd 8b02 	vpop	{d8}
 801b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8a6:	2d46      	cmp	r5, #70	; 0x46
 801b8a8:	eb00 0204 	add.w	r2, r0, r4
 801b8ac:	d10c      	bne.n	801b8c8 <__cvt+0x88>
 801b8ae:	7803      	ldrb	r3, [r0, #0]
 801b8b0:	2b30      	cmp	r3, #48	; 0x30
 801b8b2:	d107      	bne.n	801b8c4 <__cvt+0x84>
 801b8b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8bc:	bf1c      	itt	ne
 801b8be:	f1c4 0401 	rsbne	r4, r4, #1
 801b8c2:	6034      	strne	r4, [r6, #0]
 801b8c4:	6833      	ldr	r3, [r6, #0]
 801b8c6:	441a      	add	r2, r3
 801b8c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8d0:	bf08      	it	eq
 801b8d2:	9203      	streq	r2, [sp, #12]
 801b8d4:	2130      	movs	r1, #48	; 0x30
 801b8d6:	9b03      	ldr	r3, [sp, #12]
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d2dc      	bcs.n	801b896 <__cvt+0x56>
 801b8dc:	1c5c      	adds	r4, r3, #1
 801b8de:	9403      	str	r4, [sp, #12]
 801b8e0:	7019      	strb	r1, [r3, #0]
 801b8e2:	e7f8      	b.n	801b8d6 <__cvt+0x96>

0801b8e4 <__exponent>:
 801b8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	2900      	cmp	r1, #0
 801b8ea:	bfb8      	it	lt
 801b8ec:	4249      	neglt	r1, r1
 801b8ee:	f803 2b02 	strb.w	r2, [r3], #2
 801b8f2:	bfb4      	ite	lt
 801b8f4:	222d      	movlt	r2, #45	; 0x2d
 801b8f6:	222b      	movge	r2, #43	; 0x2b
 801b8f8:	2909      	cmp	r1, #9
 801b8fa:	7042      	strb	r2, [r0, #1]
 801b8fc:	dd2a      	ble.n	801b954 <__exponent+0x70>
 801b8fe:	f10d 0407 	add.w	r4, sp, #7
 801b902:	46a4      	mov	ip, r4
 801b904:	270a      	movs	r7, #10
 801b906:	46a6      	mov	lr, r4
 801b908:	460a      	mov	r2, r1
 801b90a:	fb91 f6f7 	sdiv	r6, r1, r7
 801b90e:	fb07 1516 	mls	r5, r7, r6, r1
 801b912:	3530      	adds	r5, #48	; 0x30
 801b914:	2a63      	cmp	r2, #99	; 0x63
 801b916:	f104 34ff 	add.w	r4, r4, #4294967295
 801b91a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b91e:	4631      	mov	r1, r6
 801b920:	dcf1      	bgt.n	801b906 <__exponent+0x22>
 801b922:	3130      	adds	r1, #48	; 0x30
 801b924:	f1ae 0502 	sub.w	r5, lr, #2
 801b928:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b92c:	1c44      	adds	r4, r0, #1
 801b92e:	4629      	mov	r1, r5
 801b930:	4561      	cmp	r1, ip
 801b932:	d30a      	bcc.n	801b94a <__exponent+0x66>
 801b934:	f10d 0209 	add.w	r2, sp, #9
 801b938:	eba2 020e 	sub.w	r2, r2, lr
 801b93c:	4565      	cmp	r5, ip
 801b93e:	bf88      	it	hi
 801b940:	2200      	movhi	r2, #0
 801b942:	4413      	add	r3, r2
 801b944:	1a18      	subs	r0, r3, r0
 801b946:	b003      	add	sp, #12
 801b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b94e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b952:	e7ed      	b.n	801b930 <__exponent+0x4c>
 801b954:	2330      	movs	r3, #48	; 0x30
 801b956:	3130      	adds	r1, #48	; 0x30
 801b958:	7083      	strb	r3, [r0, #2]
 801b95a:	70c1      	strb	r1, [r0, #3]
 801b95c:	1d03      	adds	r3, r0, #4
 801b95e:	e7f1      	b.n	801b944 <__exponent+0x60>

0801b960 <_printf_float>:
 801b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	b08b      	sub	sp, #44	; 0x2c
 801b966:	460c      	mov	r4, r1
 801b968:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b96c:	4616      	mov	r6, r2
 801b96e:	461f      	mov	r7, r3
 801b970:	4605      	mov	r5, r0
 801b972:	f003 f94d 	bl	801ec10 <_localeconv_r>
 801b976:	f8d0 b000 	ldr.w	fp, [r0]
 801b97a:	4658      	mov	r0, fp
 801b97c:	f7e4 fcba 	bl	80002f4 <strlen>
 801b980:	2300      	movs	r3, #0
 801b982:	9308      	str	r3, [sp, #32]
 801b984:	f8d8 3000 	ldr.w	r3, [r8]
 801b988:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b98c:	6822      	ldr	r2, [r4, #0]
 801b98e:	3307      	adds	r3, #7
 801b990:	f023 0307 	bic.w	r3, r3, #7
 801b994:	f103 0108 	add.w	r1, r3, #8
 801b998:	f8c8 1000 	str.w	r1, [r8]
 801b99c:	4682      	mov	sl, r0
 801b99e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b9a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b9a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801bc08 <_printf_float+0x2a8>
 801b9aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b9ae:	eeb0 6bc0 	vabs.f64	d6, d0
 801b9b2:	eeb4 6b47 	vcmp.f64	d6, d7
 801b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ba:	dd24      	ble.n	801ba06 <_printf_float+0xa6>
 801b9bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9c4:	d502      	bpl.n	801b9cc <_printf_float+0x6c>
 801b9c6:	232d      	movs	r3, #45	; 0x2d
 801b9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9cc:	4b90      	ldr	r3, [pc, #576]	; (801bc10 <_printf_float+0x2b0>)
 801b9ce:	4891      	ldr	r0, [pc, #580]	; (801bc14 <_printf_float+0x2b4>)
 801b9d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b9d4:	bf94      	ite	ls
 801b9d6:	4698      	movls	r8, r3
 801b9d8:	4680      	movhi	r8, r0
 801b9da:	2303      	movs	r3, #3
 801b9dc:	6123      	str	r3, [r4, #16]
 801b9de:	f022 0204 	bic.w	r2, r2, #4
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	6022      	str	r2, [r4, #0]
 801b9e6:	9304      	str	r3, [sp, #16]
 801b9e8:	9700      	str	r7, [sp, #0]
 801b9ea:	4633      	mov	r3, r6
 801b9ec:	aa09      	add	r2, sp, #36	; 0x24
 801b9ee:	4621      	mov	r1, r4
 801b9f0:	4628      	mov	r0, r5
 801b9f2:	f000 f9d3 	bl	801bd9c <_printf_common>
 801b9f6:	3001      	adds	r0, #1
 801b9f8:	f040 808a 	bne.w	801bb10 <_printf_float+0x1b0>
 801b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 801ba00:	b00b      	add	sp, #44	; 0x2c
 801ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba06:	eeb4 0b40 	vcmp.f64	d0, d0
 801ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0e:	d709      	bvc.n	801ba24 <_printf_float+0xc4>
 801ba10:	ee10 3a90 	vmov	r3, s1
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	bfbc      	itt	lt
 801ba18:	232d      	movlt	r3, #45	; 0x2d
 801ba1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ba1e:	487e      	ldr	r0, [pc, #504]	; (801bc18 <_printf_float+0x2b8>)
 801ba20:	4b7e      	ldr	r3, [pc, #504]	; (801bc1c <_printf_float+0x2bc>)
 801ba22:	e7d5      	b.n	801b9d0 <_printf_float+0x70>
 801ba24:	6863      	ldr	r3, [r4, #4]
 801ba26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801ba2a:	9104      	str	r1, [sp, #16]
 801ba2c:	1c59      	adds	r1, r3, #1
 801ba2e:	d13c      	bne.n	801baaa <_printf_float+0x14a>
 801ba30:	2306      	movs	r3, #6
 801ba32:	6063      	str	r3, [r4, #4]
 801ba34:	2300      	movs	r3, #0
 801ba36:	9303      	str	r3, [sp, #12]
 801ba38:	ab08      	add	r3, sp, #32
 801ba3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801ba3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ba42:	ab07      	add	r3, sp, #28
 801ba44:	6861      	ldr	r1, [r4, #4]
 801ba46:	9300      	str	r3, [sp, #0]
 801ba48:	6022      	str	r2, [r4, #0]
 801ba4a:	f10d 031b 	add.w	r3, sp, #27
 801ba4e:	4628      	mov	r0, r5
 801ba50:	f7ff fef6 	bl	801b840 <__cvt>
 801ba54:	9b04      	ldr	r3, [sp, #16]
 801ba56:	9907      	ldr	r1, [sp, #28]
 801ba58:	2b47      	cmp	r3, #71	; 0x47
 801ba5a:	4680      	mov	r8, r0
 801ba5c:	d108      	bne.n	801ba70 <_printf_float+0x110>
 801ba5e:	1cc8      	adds	r0, r1, #3
 801ba60:	db02      	blt.n	801ba68 <_printf_float+0x108>
 801ba62:	6863      	ldr	r3, [r4, #4]
 801ba64:	4299      	cmp	r1, r3
 801ba66:	dd41      	ble.n	801baec <_printf_float+0x18c>
 801ba68:	f1a9 0902 	sub.w	r9, r9, #2
 801ba6c:	fa5f f989 	uxtb.w	r9, r9
 801ba70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ba74:	d820      	bhi.n	801bab8 <_printf_float+0x158>
 801ba76:	3901      	subs	r1, #1
 801ba78:	464a      	mov	r2, r9
 801ba7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ba7e:	9107      	str	r1, [sp, #28]
 801ba80:	f7ff ff30 	bl	801b8e4 <__exponent>
 801ba84:	9a08      	ldr	r2, [sp, #32]
 801ba86:	9004      	str	r0, [sp, #16]
 801ba88:	1813      	adds	r3, r2, r0
 801ba8a:	2a01      	cmp	r2, #1
 801ba8c:	6123      	str	r3, [r4, #16]
 801ba8e:	dc02      	bgt.n	801ba96 <_printf_float+0x136>
 801ba90:	6822      	ldr	r2, [r4, #0]
 801ba92:	07d2      	lsls	r2, r2, #31
 801ba94:	d501      	bpl.n	801ba9a <_printf_float+0x13a>
 801ba96:	3301      	adds	r3, #1
 801ba98:	6123      	str	r3, [r4, #16]
 801ba9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d0a2      	beq.n	801b9e8 <_printf_float+0x88>
 801baa2:	232d      	movs	r3, #45	; 0x2d
 801baa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801baa8:	e79e      	b.n	801b9e8 <_printf_float+0x88>
 801baaa:	9904      	ldr	r1, [sp, #16]
 801baac:	2947      	cmp	r1, #71	; 0x47
 801baae:	d1c1      	bne.n	801ba34 <_printf_float+0xd4>
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d1bf      	bne.n	801ba34 <_printf_float+0xd4>
 801bab4:	2301      	movs	r3, #1
 801bab6:	e7bc      	b.n	801ba32 <_printf_float+0xd2>
 801bab8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801babc:	d118      	bne.n	801baf0 <_printf_float+0x190>
 801babe:	2900      	cmp	r1, #0
 801bac0:	6863      	ldr	r3, [r4, #4]
 801bac2:	dd0b      	ble.n	801badc <_printf_float+0x17c>
 801bac4:	6121      	str	r1, [r4, #16]
 801bac6:	b913      	cbnz	r3, 801bace <_printf_float+0x16e>
 801bac8:	6822      	ldr	r2, [r4, #0]
 801baca:	07d0      	lsls	r0, r2, #31
 801bacc:	d502      	bpl.n	801bad4 <_printf_float+0x174>
 801bace:	3301      	adds	r3, #1
 801bad0:	440b      	add	r3, r1
 801bad2:	6123      	str	r3, [r4, #16]
 801bad4:	2300      	movs	r3, #0
 801bad6:	65a1      	str	r1, [r4, #88]	; 0x58
 801bad8:	9304      	str	r3, [sp, #16]
 801bada:	e7de      	b.n	801ba9a <_printf_float+0x13a>
 801badc:	b913      	cbnz	r3, 801bae4 <_printf_float+0x184>
 801bade:	6822      	ldr	r2, [r4, #0]
 801bae0:	07d2      	lsls	r2, r2, #31
 801bae2:	d501      	bpl.n	801bae8 <_printf_float+0x188>
 801bae4:	3302      	adds	r3, #2
 801bae6:	e7f4      	b.n	801bad2 <_printf_float+0x172>
 801bae8:	2301      	movs	r3, #1
 801baea:	e7f2      	b.n	801bad2 <_printf_float+0x172>
 801baec:	f04f 0967 	mov.w	r9, #103	; 0x67
 801baf0:	9b08      	ldr	r3, [sp, #32]
 801baf2:	4299      	cmp	r1, r3
 801baf4:	db05      	blt.n	801bb02 <_printf_float+0x1a2>
 801baf6:	6823      	ldr	r3, [r4, #0]
 801baf8:	6121      	str	r1, [r4, #16]
 801bafa:	07d8      	lsls	r0, r3, #31
 801bafc:	d5ea      	bpl.n	801bad4 <_printf_float+0x174>
 801bafe:	1c4b      	adds	r3, r1, #1
 801bb00:	e7e7      	b.n	801bad2 <_printf_float+0x172>
 801bb02:	2900      	cmp	r1, #0
 801bb04:	bfd4      	ite	le
 801bb06:	f1c1 0202 	rsble	r2, r1, #2
 801bb0a:	2201      	movgt	r2, #1
 801bb0c:	4413      	add	r3, r2
 801bb0e:	e7e0      	b.n	801bad2 <_printf_float+0x172>
 801bb10:	6823      	ldr	r3, [r4, #0]
 801bb12:	055a      	lsls	r2, r3, #21
 801bb14:	d407      	bmi.n	801bb26 <_printf_float+0x1c6>
 801bb16:	6923      	ldr	r3, [r4, #16]
 801bb18:	4642      	mov	r2, r8
 801bb1a:	4631      	mov	r1, r6
 801bb1c:	4628      	mov	r0, r5
 801bb1e:	47b8      	blx	r7
 801bb20:	3001      	adds	r0, #1
 801bb22:	d12a      	bne.n	801bb7a <_printf_float+0x21a>
 801bb24:	e76a      	b.n	801b9fc <_printf_float+0x9c>
 801bb26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bb2a:	f240 80e2 	bls.w	801bcf2 <_printf_float+0x392>
 801bb2e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801bb32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb3a:	d133      	bne.n	801bba4 <_printf_float+0x244>
 801bb3c:	4a38      	ldr	r2, [pc, #224]	; (801bc20 <_printf_float+0x2c0>)
 801bb3e:	2301      	movs	r3, #1
 801bb40:	4631      	mov	r1, r6
 801bb42:	4628      	mov	r0, r5
 801bb44:	47b8      	blx	r7
 801bb46:	3001      	adds	r0, #1
 801bb48:	f43f af58 	beq.w	801b9fc <_printf_float+0x9c>
 801bb4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bb50:	429a      	cmp	r2, r3
 801bb52:	db02      	blt.n	801bb5a <_printf_float+0x1fa>
 801bb54:	6823      	ldr	r3, [r4, #0]
 801bb56:	07d8      	lsls	r0, r3, #31
 801bb58:	d50f      	bpl.n	801bb7a <_printf_float+0x21a>
 801bb5a:	4653      	mov	r3, sl
 801bb5c:	465a      	mov	r2, fp
 801bb5e:	4631      	mov	r1, r6
 801bb60:	4628      	mov	r0, r5
 801bb62:	47b8      	blx	r7
 801bb64:	3001      	adds	r0, #1
 801bb66:	f43f af49 	beq.w	801b9fc <_printf_float+0x9c>
 801bb6a:	f04f 0800 	mov.w	r8, #0
 801bb6e:	f104 091a 	add.w	r9, r4, #26
 801bb72:	9b08      	ldr	r3, [sp, #32]
 801bb74:	3b01      	subs	r3, #1
 801bb76:	4543      	cmp	r3, r8
 801bb78:	dc09      	bgt.n	801bb8e <_printf_float+0x22e>
 801bb7a:	6823      	ldr	r3, [r4, #0]
 801bb7c:	079b      	lsls	r3, r3, #30
 801bb7e:	f100 8108 	bmi.w	801bd92 <_printf_float+0x432>
 801bb82:	68e0      	ldr	r0, [r4, #12]
 801bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb86:	4298      	cmp	r0, r3
 801bb88:	bfb8      	it	lt
 801bb8a:	4618      	movlt	r0, r3
 801bb8c:	e738      	b.n	801ba00 <_printf_float+0xa0>
 801bb8e:	2301      	movs	r3, #1
 801bb90:	464a      	mov	r2, r9
 801bb92:	4631      	mov	r1, r6
 801bb94:	4628      	mov	r0, r5
 801bb96:	47b8      	blx	r7
 801bb98:	3001      	adds	r0, #1
 801bb9a:	f43f af2f 	beq.w	801b9fc <_printf_float+0x9c>
 801bb9e:	f108 0801 	add.w	r8, r8, #1
 801bba2:	e7e6      	b.n	801bb72 <_printf_float+0x212>
 801bba4:	9b07      	ldr	r3, [sp, #28]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	dc3c      	bgt.n	801bc24 <_printf_float+0x2c4>
 801bbaa:	4a1d      	ldr	r2, [pc, #116]	; (801bc20 <_printf_float+0x2c0>)
 801bbac:	2301      	movs	r3, #1
 801bbae:	4631      	mov	r1, r6
 801bbb0:	4628      	mov	r0, r5
 801bbb2:	47b8      	blx	r7
 801bbb4:	3001      	adds	r0, #1
 801bbb6:	f43f af21 	beq.w	801b9fc <_printf_float+0x9c>
 801bbba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bbbe:	4313      	orrs	r3, r2
 801bbc0:	d102      	bne.n	801bbc8 <_printf_float+0x268>
 801bbc2:	6823      	ldr	r3, [r4, #0]
 801bbc4:	07d9      	lsls	r1, r3, #31
 801bbc6:	d5d8      	bpl.n	801bb7a <_printf_float+0x21a>
 801bbc8:	4653      	mov	r3, sl
 801bbca:	465a      	mov	r2, fp
 801bbcc:	4631      	mov	r1, r6
 801bbce:	4628      	mov	r0, r5
 801bbd0:	47b8      	blx	r7
 801bbd2:	3001      	adds	r0, #1
 801bbd4:	f43f af12 	beq.w	801b9fc <_printf_float+0x9c>
 801bbd8:	f04f 0900 	mov.w	r9, #0
 801bbdc:	f104 0a1a 	add.w	sl, r4, #26
 801bbe0:	9b07      	ldr	r3, [sp, #28]
 801bbe2:	425b      	negs	r3, r3
 801bbe4:	454b      	cmp	r3, r9
 801bbe6:	dc01      	bgt.n	801bbec <_printf_float+0x28c>
 801bbe8:	9b08      	ldr	r3, [sp, #32]
 801bbea:	e795      	b.n	801bb18 <_printf_float+0x1b8>
 801bbec:	2301      	movs	r3, #1
 801bbee:	4652      	mov	r2, sl
 801bbf0:	4631      	mov	r1, r6
 801bbf2:	4628      	mov	r0, r5
 801bbf4:	47b8      	blx	r7
 801bbf6:	3001      	adds	r0, #1
 801bbf8:	f43f af00 	beq.w	801b9fc <_printf_float+0x9c>
 801bbfc:	f109 0901 	add.w	r9, r9, #1
 801bc00:	e7ee      	b.n	801bbe0 <_printf_float+0x280>
 801bc02:	bf00      	nop
 801bc04:	f3af 8000 	nop.w
 801bc08:	ffffffff 	.word	0xffffffff
 801bc0c:	7fefffff 	.word	0x7fefffff
 801bc10:	08029291 	.word	0x08029291
 801bc14:	08029295 	.word	0x08029295
 801bc18:	0802929d 	.word	0x0802929d
 801bc1c:	08029299 	.word	0x08029299
 801bc20:	080292a1 	.word	0x080292a1
 801bc24:	9a08      	ldr	r2, [sp, #32]
 801bc26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	bfa8      	it	ge
 801bc2c:	461a      	movge	r2, r3
 801bc2e:	2a00      	cmp	r2, #0
 801bc30:	4691      	mov	r9, r2
 801bc32:	dc38      	bgt.n	801bca6 <_printf_float+0x346>
 801bc34:	2300      	movs	r3, #0
 801bc36:	9305      	str	r3, [sp, #20]
 801bc38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bc3c:	f104 021a 	add.w	r2, r4, #26
 801bc40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bc42:	9905      	ldr	r1, [sp, #20]
 801bc44:	9304      	str	r3, [sp, #16]
 801bc46:	eba3 0309 	sub.w	r3, r3, r9
 801bc4a:	428b      	cmp	r3, r1
 801bc4c:	dc33      	bgt.n	801bcb6 <_printf_float+0x356>
 801bc4e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bc52:	429a      	cmp	r2, r3
 801bc54:	db3c      	blt.n	801bcd0 <_printf_float+0x370>
 801bc56:	6823      	ldr	r3, [r4, #0]
 801bc58:	07da      	lsls	r2, r3, #31
 801bc5a:	d439      	bmi.n	801bcd0 <_printf_float+0x370>
 801bc5c:	9a08      	ldr	r2, [sp, #32]
 801bc5e:	9b04      	ldr	r3, [sp, #16]
 801bc60:	9907      	ldr	r1, [sp, #28]
 801bc62:	1ad3      	subs	r3, r2, r3
 801bc64:	eba2 0901 	sub.w	r9, r2, r1
 801bc68:	4599      	cmp	r9, r3
 801bc6a:	bfa8      	it	ge
 801bc6c:	4699      	movge	r9, r3
 801bc6e:	f1b9 0f00 	cmp.w	r9, #0
 801bc72:	dc35      	bgt.n	801bce0 <_printf_float+0x380>
 801bc74:	f04f 0800 	mov.w	r8, #0
 801bc78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bc7c:	f104 0a1a 	add.w	sl, r4, #26
 801bc80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bc84:	1a9b      	subs	r3, r3, r2
 801bc86:	eba3 0309 	sub.w	r3, r3, r9
 801bc8a:	4543      	cmp	r3, r8
 801bc8c:	f77f af75 	ble.w	801bb7a <_printf_float+0x21a>
 801bc90:	2301      	movs	r3, #1
 801bc92:	4652      	mov	r2, sl
 801bc94:	4631      	mov	r1, r6
 801bc96:	4628      	mov	r0, r5
 801bc98:	47b8      	blx	r7
 801bc9a:	3001      	adds	r0, #1
 801bc9c:	f43f aeae 	beq.w	801b9fc <_printf_float+0x9c>
 801bca0:	f108 0801 	add.w	r8, r8, #1
 801bca4:	e7ec      	b.n	801bc80 <_printf_float+0x320>
 801bca6:	4613      	mov	r3, r2
 801bca8:	4631      	mov	r1, r6
 801bcaa:	4642      	mov	r2, r8
 801bcac:	4628      	mov	r0, r5
 801bcae:	47b8      	blx	r7
 801bcb0:	3001      	adds	r0, #1
 801bcb2:	d1bf      	bne.n	801bc34 <_printf_float+0x2d4>
 801bcb4:	e6a2      	b.n	801b9fc <_printf_float+0x9c>
 801bcb6:	2301      	movs	r3, #1
 801bcb8:	4631      	mov	r1, r6
 801bcba:	4628      	mov	r0, r5
 801bcbc:	9204      	str	r2, [sp, #16]
 801bcbe:	47b8      	blx	r7
 801bcc0:	3001      	adds	r0, #1
 801bcc2:	f43f ae9b 	beq.w	801b9fc <_printf_float+0x9c>
 801bcc6:	9b05      	ldr	r3, [sp, #20]
 801bcc8:	9a04      	ldr	r2, [sp, #16]
 801bcca:	3301      	adds	r3, #1
 801bccc:	9305      	str	r3, [sp, #20]
 801bcce:	e7b7      	b.n	801bc40 <_printf_float+0x2e0>
 801bcd0:	4653      	mov	r3, sl
 801bcd2:	465a      	mov	r2, fp
 801bcd4:	4631      	mov	r1, r6
 801bcd6:	4628      	mov	r0, r5
 801bcd8:	47b8      	blx	r7
 801bcda:	3001      	adds	r0, #1
 801bcdc:	d1be      	bne.n	801bc5c <_printf_float+0x2fc>
 801bcde:	e68d      	b.n	801b9fc <_printf_float+0x9c>
 801bce0:	9a04      	ldr	r2, [sp, #16]
 801bce2:	464b      	mov	r3, r9
 801bce4:	4442      	add	r2, r8
 801bce6:	4631      	mov	r1, r6
 801bce8:	4628      	mov	r0, r5
 801bcea:	47b8      	blx	r7
 801bcec:	3001      	adds	r0, #1
 801bcee:	d1c1      	bne.n	801bc74 <_printf_float+0x314>
 801bcf0:	e684      	b.n	801b9fc <_printf_float+0x9c>
 801bcf2:	9a08      	ldr	r2, [sp, #32]
 801bcf4:	2a01      	cmp	r2, #1
 801bcf6:	dc01      	bgt.n	801bcfc <_printf_float+0x39c>
 801bcf8:	07db      	lsls	r3, r3, #31
 801bcfa:	d537      	bpl.n	801bd6c <_printf_float+0x40c>
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	4642      	mov	r2, r8
 801bd00:	4631      	mov	r1, r6
 801bd02:	4628      	mov	r0, r5
 801bd04:	47b8      	blx	r7
 801bd06:	3001      	adds	r0, #1
 801bd08:	f43f ae78 	beq.w	801b9fc <_printf_float+0x9c>
 801bd0c:	4653      	mov	r3, sl
 801bd0e:	465a      	mov	r2, fp
 801bd10:	4631      	mov	r1, r6
 801bd12:	4628      	mov	r0, r5
 801bd14:	47b8      	blx	r7
 801bd16:	3001      	adds	r0, #1
 801bd18:	f43f ae70 	beq.w	801b9fc <_printf_float+0x9c>
 801bd1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801bd20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd28:	d01b      	beq.n	801bd62 <_printf_float+0x402>
 801bd2a:	9b08      	ldr	r3, [sp, #32]
 801bd2c:	f108 0201 	add.w	r2, r8, #1
 801bd30:	3b01      	subs	r3, #1
 801bd32:	4631      	mov	r1, r6
 801bd34:	4628      	mov	r0, r5
 801bd36:	47b8      	blx	r7
 801bd38:	3001      	adds	r0, #1
 801bd3a:	d10e      	bne.n	801bd5a <_printf_float+0x3fa>
 801bd3c:	e65e      	b.n	801b9fc <_printf_float+0x9c>
 801bd3e:	2301      	movs	r3, #1
 801bd40:	464a      	mov	r2, r9
 801bd42:	4631      	mov	r1, r6
 801bd44:	4628      	mov	r0, r5
 801bd46:	47b8      	blx	r7
 801bd48:	3001      	adds	r0, #1
 801bd4a:	f43f ae57 	beq.w	801b9fc <_printf_float+0x9c>
 801bd4e:	f108 0801 	add.w	r8, r8, #1
 801bd52:	9b08      	ldr	r3, [sp, #32]
 801bd54:	3b01      	subs	r3, #1
 801bd56:	4543      	cmp	r3, r8
 801bd58:	dcf1      	bgt.n	801bd3e <_printf_float+0x3de>
 801bd5a:	9b04      	ldr	r3, [sp, #16]
 801bd5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bd60:	e6db      	b.n	801bb1a <_printf_float+0x1ba>
 801bd62:	f04f 0800 	mov.w	r8, #0
 801bd66:	f104 091a 	add.w	r9, r4, #26
 801bd6a:	e7f2      	b.n	801bd52 <_printf_float+0x3f2>
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	4642      	mov	r2, r8
 801bd70:	e7df      	b.n	801bd32 <_printf_float+0x3d2>
 801bd72:	2301      	movs	r3, #1
 801bd74:	464a      	mov	r2, r9
 801bd76:	4631      	mov	r1, r6
 801bd78:	4628      	mov	r0, r5
 801bd7a:	47b8      	blx	r7
 801bd7c:	3001      	adds	r0, #1
 801bd7e:	f43f ae3d 	beq.w	801b9fc <_printf_float+0x9c>
 801bd82:	f108 0801 	add.w	r8, r8, #1
 801bd86:	68e3      	ldr	r3, [r4, #12]
 801bd88:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bd8a:	1a5b      	subs	r3, r3, r1
 801bd8c:	4543      	cmp	r3, r8
 801bd8e:	dcf0      	bgt.n	801bd72 <_printf_float+0x412>
 801bd90:	e6f7      	b.n	801bb82 <_printf_float+0x222>
 801bd92:	f04f 0800 	mov.w	r8, #0
 801bd96:	f104 0919 	add.w	r9, r4, #25
 801bd9a:	e7f4      	b.n	801bd86 <_printf_float+0x426>

0801bd9c <_printf_common>:
 801bd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bda0:	4616      	mov	r6, r2
 801bda2:	4699      	mov	r9, r3
 801bda4:	688a      	ldr	r2, [r1, #8]
 801bda6:	690b      	ldr	r3, [r1, #16]
 801bda8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bdac:	4293      	cmp	r3, r2
 801bdae:	bfb8      	it	lt
 801bdb0:	4613      	movlt	r3, r2
 801bdb2:	6033      	str	r3, [r6, #0]
 801bdb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bdb8:	4607      	mov	r7, r0
 801bdba:	460c      	mov	r4, r1
 801bdbc:	b10a      	cbz	r2, 801bdc2 <_printf_common+0x26>
 801bdbe:	3301      	adds	r3, #1
 801bdc0:	6033      	str	r3, [r6, #0]
 801bdc2:	6823      	ldr	r3, [r4, #0]
 801bdc4:	0699      	lsls	r1, r3, #26
 801bdc6:	bf42      	ittt	mi
 801bdc8:	6833      	ldrmi	r3, [r6, #0]
 801bdca:	3302      	addmi	r3, #2
 801bdcc:	6033      	strmi	r3, [r6, #0]
 801bdce:	6825      	ldr	r5, [r4, #0]
 801bdd0:	f015 0506 	ands.w	r5, r5, #6
 801bdd4:	d106      	bne.n	801bde4 <_printf_common+0x48>
 801bdd6:	f104 0a19 	add.w	sl, r4, #25
 801bdda:	68e3      	ldr	r3, [r4, #12]
 801bddc:	6832      	ldr	r2, [r6, #0]
 801bdde:	1a9b      	subs	r3, r3, r2
 801bde0:	42ab      	cmp	r3, r5
 801bde2:	dc26      	bgt.n	801be32 <_printf_common+0x96>
 801bde4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bde8:	1e13      	subs	r3, r2, #0
 801bdea:	6822      	ldr	r2, [r4, #0]
 801bdec:	bf18      	it	ne
 801bdee:	2301      	movne	r3, #1
 801bdf0:	0692      	lsls	r2, r2, #26
 801bdf2:	d42b      	bmi.n	801be4c <_printf_common+0xb0>
 801bdf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bdf8:	4649      	mov	r1, r9
 801bdfa:	4638      	mov	r0, r7
 801bdfc:	47c0      	blx	r8
 801bdfe:	3001      	adds	r0, #1
 801be00:	d01e      	beq.n	801be40 <_printf_common+0xa4>
 801be02:	6823      	ldr	r3, [r4, #0]
 801be04:	68e5      	ldr	r5, [r4, #12]
 801be06:	6832      	ldr	r2, [r6, #0]
 801be08:	f003 0306 	and.w	r3, r3, #6
 801be0c:	2b04      	cmp	r3, #4
 801be0e:	bf08      	it	eq
 801be10:	1aad      	subeq	r5, r5, r2
 801be12:	68a3      	ldr	r3, [r4, #8]
 801be14:	6922      	ldr	r2, [r4, #16]
 801be16:	bf0c      	ite	eq
 801be18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801be1c:	2500      	movne	r5, #0
 801be1e:	4293      	cmp	r3, r2
 801be20:	bfc4      	itt	gt
 801be22:	1a9b      	subgt	r3, r3, r2
 801be24:	18ed      	addgt	r5, r5, r3
 801be26:	2600      	movs	r6, #0
 801be28:	341a      	adds	r4, #26
 801be2a:	42b5      	cmp	r5, r6
 801be2c:	d11a      	bne.n	801be64 <_printf_common+0xc8>
 801be2e:	2000      	movs	r0, #0
 801be30:	e008      	b.n	801be44 <_printf_common+0xa8>
 801be32:	2301      	movs	r3, #1
 801be34:	4652      	mov	r2, sl
 801be36:	4649      	mov	r1, r9
 801be38:	4638      	mov	r0, r7
 801be3a:	47c0      	blx	r8
 801be3c:	3001      	adds	r0, #1
 801be3e:	d103      	bne.n	801be48 <_printf_common+0xac>
 801be40:	f04f 30ff 	mov.w	r0, #4294967295
 801be44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be48:	3501      	adds	r5, #1
 801be4a:	e7c6      	b.n	801bdda <_printf_common+0x3e>
 801be4c:	18e1      	adds	r1, r4, r3
 801be4e:	1c5a      	adds	r2, r3, #1
 801be50:	2030      	movs	r0, #48	; 0x30
 801be52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801be56:	4422      	add	r2, r4
 801be58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801be5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801be60:	3302      	adds	r3, #2
 801be62:	e7c7      	b.n	801bdf4 <_printf_common+0x58>
 801be64:	2301      	movs	r3, #1
 801be66:	4622      	mov	r2, r4
 801be68:	4649      	mov	r1, r9
 801be6a:	4638      	mov	r0, r7
 801be6c:	47c0      	blx	r8
 801be6e:	3001      	adds	r0, #1
 801be70:	d0e6      	beq.n	801be40 <_printf_common+0xa4>
 801be72:	3601      	adds	r6, #1
 801be74:	e7d9      	b.n	801be2a <_printf_common+0x8e>
	...

0801be78 <_printf_i>:
 801be78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801be7c:	460c      	mov	r4, r1
 801be7e:	4691      	mov	r9, r2
 801be80:	7e27      	ldrb	r7, [r4, #24]
 801be82:	990c      	ldr	r1, [sp, #48]	; 0x30
 801be84:	2f78      	cmp	r7, #120	; 0x78
 801be86:	4680      	mov	r8, r0
 801be88:	469a      	mov	sl, r3
 801be8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801be8e:	d807      	bhi.n	801bea0 <_printf_i+0x28>
 801be90:	2f62      	cmp	r7, #98	; 0x62
 801be92:	d80a      	bhi.n	801beaa <_printf_i+0x32>
 801be94:	2f00      	cmp	r7, #0
 801be96:	f000 80d8 	beq.w	801c04a <_printf_i+0x1d2>
 801be9a:	2f58      	cmp	r7, #88	; 0x58
 801be9c:	f000 80a3 	beq.w	801bfe6 <_printf_i+0x16e>
 801bea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bea8:	e03a      	b.n	801bf20 <_printf_i+0xa8>
 801beaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801beae:	2b15      	cmp	r3, #21
 801beb0:	d8f6      	bhi.n	801bea0 <_printf_i+0x28>
 801beb2:	a001      	add	r0, pc, #4	; (adr r0, 801beb8 <_printf_i+0x40>)
 801beb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801beb8:	0801bf11 	.word	0x0801bf11
 801bebc:	0801bf25 	.word	0x0801bf25
 801bec0:	0801bea1 	.word	0x0801bea1
 801bec4:	0801bea1 	.word	0x0801bea1
 801bec8:	0801bea1 	.word	0x0801bea1
 801becc:	0801bea1 	.word	0x0801bea1
 801bed0:	0801bf25 	.word	0x0801bf25
 801bed4:	0801bea1 	.word	0x0801bea1
 801bed8:	0801bea1 	.word	0x0801bea1
 801bedc:	0801bea1 	.word	0x0801bea1
 801bee0:	0801bea1 	.word	0x0801bea1
 801bee4:	0801c031 	.word	0x0801c031
 801bee8:	0801bf55 	.word	0x0801bf55
 801beec:	0801c013 	.word	0x0801c013
 801bef0:	0801bea1 	.word	0x0801bea1
 801bef4:	0801bea1 	.word	0x0801bea1
 801bef8:	0801c053 	.word	0x0801c053
 801befc:	0801bea1 	.word	0x0801bea1
 801bf00:	0801bf55 	.word	0x0801bf55
 801bf04:	0801bea1 	.word	0x0801bea1
 801bf08:	0801bea1 	.word	0x0801bea1
 801bf0c:	0801c01b 	.word	0x0801c01b
 801bf10:	680b      	ldr	r3, [r1, #0]
 801bf12:	1d1a      	adds	r2, r3, #4
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	600a      	str	r2, [r1, #0]
 801bf18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bf1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bf20:	2301      	movs	r3, #1
 801bf22:	e0a3      	b.n	801c06c <_printf_i+0x1f4>
 801bf24:	6825      	ldr	r5, [r4, #0]
 801bf26:	6808      	ldr	r0, [r1, #0]
 801bf28:	062e      	lsls	r6, r5, #24
 801bf2a:	f100 0304 	add.w	r3, r0, #4
 801bf2e:	d50a      	bpl.n	801bf46 <_printf_i+0xce>
 801bf30:	6805      	ldr	r5, [r0, #0]
 801bf32:	600b      	str	r3, [r1, #0]
 801bf34:	2d00      	cmp	r5, #0
 801bf36:	da03      	bge.n	801bf40 <_printf_i+0xc8>
 801bf38:	232d      	movs	r3, #45	; 0x2d
 801bf3a:	426d      	negs	r5, r5
 801bf3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf40:	485e      	ldr	r0, [pc, #376]	; (801c0bc <_printf_i+0x244>)
 801bf42:	230a      	movs	r3, #10
 801bf44:	e019      	b.n	801bf7a <_printf_i+0x102>
 801bf46:	f015 0f40 	tst.w	r5, #64	; 0x40
 801bf4a:	6805      	ldr	r5, [r0, #0]
 801bf4c:	600b      	str	r3, [r1, #0]
 801bf4e:	bf18      	it	ne
 801bf50:	b22d      	sxthne	r5, r5
 801bf52:	e7ef      	b.n	801bf34 <_printf_i+0xbc>
 801bf54:	680b      	ldr	r3, [r1, #0]
 801bf56:	6825      	ldr	r5, [r4, #0]
 801bf58:	1d18      	adds	r0, r3, #4
 801bf5a:	6008      	str	r0, [r1, #0]
 801bf5c:	0628      	lsls	r0, r5, #24
 801bf5e:	d501      	bpl.n	801bf64 <_printf_i+0xec>
 801bf60:	681d      	ldr	r5, [r3, #0]
 801bf62:	e002      	b.n	801bf6a <_printf_i+0xf2>
 801bf64:	0669      	lsls	r1, r5, #25
 801bf66:	d5fb      	bpl.n	801bf60 <_printf_i+0xe8>
 801bf68:	881d      	ldrh	r5, [r3, #0]
 801bf6a:	4854      	ldr	r0, [pc, #336]	; (801c0bc <_printf_i+0x244>)
 801bf6c:	2f6f      	cmp	r7, #111	; 0x6f
 801bf6e:	bf0c      	ite	eq
 801bf70:	2308      	moveq	r3, #8
 801bf72:	230a      	movne	r3, #10
 801bf74:	2100      	movs	r1, #0
 801bf76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bf7a:	6866      	ldr	r6, [r4, #4]
 801bf7c:	60a6      	str	r6, [r4, #8]
 801bf7e:	2e00      	cmp	r6, #0
 801bf80:	bfa2      	ittt	ge
 801bf82:	6821      	ldrge	r1, [r4, #0]
 801bf84:	f021 0104 	bicge.w	r1, r1, #4
 801bf88:	6021      	strge	r1, [r4, #0]
 801bf8a:	b90d      	cbnz	r5, 801bf90 <_printf_i+0x118>
 801bf8c:	2e00      	cmp	r6, #0
 801bf8e:	d04d      	beq.n	801c02c <_printf_i+0x1b4>
 801bf90:	4616      	mov	r6, r2
 801bf92:	fbb5 f1f3 	udiv	r1, r5, r3
 801bf96:	fb03 5711 	mls	r7, r3, r1, r5
 801bf9a:	5dc7      	ldrb	r7, [r0, r7]
 801bf9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bfa0:	462f      	mov	r7, r5
 801bfa2:	42bb      	cmp	r3, r7
 801bfa4:	460d      	mov	r5, r1
 801bfa6:	d9f4      	bls.n	801bf92 <_printf_i+0x11a>
 801bfa8:	2b08      	cmp	r3, #8
 801bfaa:	d10b      	bne.n	801bfc4 <_printf_i+0x14c>
 801bfac:	6823      	ldr	r3, [r4, #0]
 801bfae:	07df      	lsls	r7, r3, #31
 801bfb0:	d508      	bpl.n	801bfc4 <_printf_i+0x14c>
 801bfb2:	6923      	ldr	r3, [r4, #16]
 801bfb4:	6861      	ldr	r1, [r4, #4]
 801bfb6:	4299      	cmp	r1, r3
 801bfb8:	bfde      	ittt	le
 801bfba:	2330      	movle	r3, #48	; 0x30
 801bfbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bfc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bfc4:	1b92      	subs	r2, r2, r6
 801bfc6:	6122      	str	r2, [r4, #16]
 801bfc8:	f8cd a000 	str.w	sl, [sp]
 801bfcc:	464b      	mov	r3, r9
 801bfce:	aa03      	add	r2, sp, #12
 801bfd0:	4621      	mov	r1, r4
 801bfd2:	4640      	mov	r0, r8
 801bfd4:	f7ff fee2 	bl	801bd9c <_printf_common>
 801bfd8:	3001      	adds	r0, #1
 801bfda:	d14c      	bne.n	801c076 <_printf_i+0x1fe>
 801bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 801bfe0:	b004      	add	sp, #16
 801bfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfe6:	4835      	ldr	r0, [pc, #212]	; (801c0bc <_printf_i+0x244>)
 801bfe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bfec:	6823      	ldr	r3, [r4, #0]
 801bfee:	680e      	ldr	r6, [r1, #0]
 801bff0:	061f      	lsls	r7, r3, #24
 801bff2:	f856 5b04 	ldr.w	r5, [r6], #4
 801bff6:	600e      	str	r6, [r1, #0]
 801bff8:	d514      	bpl.n	801c024 <_printf_i+0x1ac>
 801bffa:	07d9      	lsls	r1, r3, #31
 801bffc:	bf44      	itt	mi
 801bffe:	f043 0320 	orrmi.w	r3, r3, #32
 801c002:	6023      	strmi	r3, [r4, #0]
 801c004:	b91d      	cbnz	r5, 801c00e <_printf_i+0x196>
 801c006:	6823      	ldr	r3, [r4, #0]
 801c008:	f023 0320 	bic.w	r3, r3, #32
 801c00c:	6023      	str	r3, [r4, #0]
 801c00e:	2310      	movs	r3, #16
 801c010:	e7b0      	b.n	801bf74 <_printf_i+0xfc>
 801c012:	6823      	ldr	r3, [r4, #0]
 801c014:	f043 0320 	orr.w	r3, r3, #32
 801c018:	6023      	str	r3, [r4, #0]
 801c01a:	2378      	movs	r3, #120	; 0x78
 801c01c:	4828      	ldr	r0, [pc, #160]	; (801c0c0 <_printf_i+0x248>)
 801c01e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c022:	e7e3      	b.n	801bfec <_printf_i+0x174>
 801c024:	065e      	lsls	r6, r3, #25
 801c026:	bf48      	it	mi
 801c028:	b2ad      	uxthmi	r5, r5
 801c02a:	e7e6      	b.n	801bffa <_printf_i+0x182>
 801c02c:	4616      	mov	r6, r2
 801c02e:	e7bb      	b.n	801bfa8 <_printf_i+0x130>
 801c030:	680b      	ldr	r3, [r1, #0]
 801c032:	6826      	ldr	r6, [r4, #0]
 801c034:	6960      	ldr	r0, [r4, #20]
 801c036:	1d1d      	adds	r5, r3, #4
 801c038:	600d      	str	r5, [r1, #0]
 801c03a:	0635      	lsls	r5, r6, #24
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	d501      	bpl.n	801c044 <_printf_i+0x1cc>
 801c040:	6018      	str	r0, [r3, #0]
 801c042:	e002      	b.n	801c04a <_printf_i+0x1d2>
 801c044:	0671      	lsls	r1, r6, #25
 801c046:	d5fb      	bpl.n	801c040 <_printf_i+0x1c8>
 801c048:	8018      	strh	r0, [r3, #0]
 801c04a:	2300      	movs	r3, #0
 801c04c:	6123      	str	r3, [r4, #16]
 801c04e:	4616      	mov	r6, r2
 801c050:	e7ba      	b.n	801bfc8 <_printf_i+0x150>
 801c052:	680b      	ldr	r3, [r1, #0]
 801c054:	1d1a      	adds	r2, r3, #4
 801c056:	600a      	str	r2, [r1, #0]
 801c058:	681e      	ldr	r6, [r3, #0]
 801c05a:	6862      	ldr	r2, [r4, #4]
 801c05c:	2100      	movs	r1, #0
 801c05e:	4630      	mov	r0, r6
 801c060:	f7e4 f956 	bl	8000310 <memchr>
 801c064:	b108      	cbz	r0, 801c06a <_printf_i+0x1f2>
 801c066:	1b80      	subs	r0, r0, r6
 801c068:	6060      	str	r0, [r4, #4]
 801c06a:	6863      	ldr	r3, [r4, #4]
 801c06c:	6123      	str	r3, [r4, #16]
 801c06e:	2300      	movs	r3, #0
 801c070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c074:	e7a8      	b.n	801bfc8 <_printf_i+0x150>
 801c076:	6923      	ldr	r3, [r4, #16]
 801c078:	4632      	mov	r2, r6
 801c07a:	4649      	mov	r1, r9
 801c07c:	4640      	mov	r0, r8
 801c07e:	47d0      	blx	sl
 801c080:	3001      	adds	r0, #1
 801c082:	d0ab      	beq.n	801bfdc <_printf_i+0x164>
 801c084:	6823      	ldr	r3, [r4, #0]
 801c086:	079b      	lsls	r3, r3, #30
 801c088:	d413      	bmi.n	801c0b2 <_printf_i+0x23a>
 801c08a:	68e0      	ldr	r0, [r4, #12]
 801c08c:	9b03      	ldr	r3, [sp, #12]
 801c08e:	4298      	cmp	r0, r3
 801c090:	bfb8      	it	lt
 801c092:	4618      	movlt	r0, r3
 801c094:	e7a4      	b.n	801bfe0 <_printf_i+0x168>
 801c096:	2301      	movs	r3, #1
 801c098:	4632      	mov	r2, r6
 801c09a:	4649      	mov	r1, r9
 801c09c:	4640      	mov	r0, r8
 801c09e:	47d0      	blx	sl
 801c0a0:	3001      	adds	r0, #1
 801c0a2:	d09b      	beq.n	801bfdc <_printf_i+0x164>
 801c0a4:	3501      	adds	r5, #1
 801c0a6:	68e3      	ldr	r3, [r4, #12]
 801c0a8:	9903      	ldr	r1, [sp, #12]
 801c0aa:	1a5b      	subs	r3, r3, r1
 801c0ac:	42ab      	cmp	r3, r5
 801c0ae:	dcf2      	bgt.n	801c096 <_printf_i+0x21e>
 801c0b0:	e7eb      	b.n	801c08a <_printf_i+0x212>
 801c0b2:	2500      	movs	r5, #0
 801c0b4:	f104 0619 	add.w	r6, r4, #25
 801c0b8:	e7f5      	b.n	801c0a6 <_printf_i+0x22e>
 801c0ba:	bf00      	nop
 801c0bc:	080292a3 	.word	0x080292a3
 801c0c0:	080292b4 	.word	0x080292b4

0801c0c4 <_scanf_float>:
 801c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0c8:	b087      	sub	sp, #28
 801c0ca:	4617      	mov	r7, r2
 801c0cc:	9303      	str	r3, [sp, #12]
 801c0ce:	688b      	ldr	r3, [r1, #8]
 801c0d0:	1e5a      	subs	r2, r3, #1
 801c0d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c0d6:	bf83      	ittte	hi
 801c0d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c0dc:	195b      	addhi	r3, r3, r5
 801c0de:	9302      	strhi	r3, [sp, #8]
 801c0e0:	2300      	movls	r3, #0
 801c0e2:	bf86      	itte	hi
 801c0e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c0e8:	608b      	strhi	r3, [r1, #8]
 801c0ea:	9302      	strls	r3, [sp, #8]
 801c0ec:	680b      	ldr	r3, [r1, #0]
 801c0ee:	468b      	mov	fp, r1
 801c0f0:	2500      	movs	r5, #0
 801c0f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c0f6:	f84b 3b1c 	str.w	r3, [fp], #28
 801c0fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c0fe:	4680      	mov	r8, r0
 801c100:	460c      	mov	r4, r1
 801c102:	465e      	mov	r6, fp
 801c104:	46aa      	mov	sl, r5
 801c106:	46a9      	mov	r9, r5
 801c108:	9501      	str	r5, [sp, #4]
 801c10a:	68a2      	ldr	r2, [r4, #8]
 801c10c:	b152      	cbz	r2, 801c124 <_scanf_float+0x60>
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	781b      	ldrb	r3, [r3, #0]
 801c112:	2b4e      	cmp	r3, #78	; 0x4e
 801c114:	d864      	bhi.n	801c1e0 <_scanf_float+0x11c>
 801c116:	2b40      	cmp	r3, #64	; 0x40
 801c118:	d83c      	bhi.n	801c194 <_scanf_float+0xd0>
 801c11a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c11e:	b2c8      	uxtb	r0, r1
 801c120:	280e      	cmp	r0, #14
 801c122:	d93a      	bls.n	801c19a <_scanf_float+0xd6>
 801c124:	f1b9 0f00 	cmp.w	r9, #0
 801c128:	d003      	beq.n	801c132 <_scanf_float+0x6e>
 801c12a:	6823      	ldr	r3, [r4, #0]
 801c12c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c130:	6023      	str	r3, [r4, #0]
 801c132:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c136:	f1ba 0f01 	cmp.w	sl, #1
 801c13a:	f200 8113 	bhi.w	801c364 <_scanf_float+0x2a0>
 801c13e:	455e      	cmp	r6, fp
 801c140:	f200 8105 	bhi.w	801c34e <_scanf_float+0x28a>
 801c144:	2501      	movs	r5, #1
 801c146:	4628      	mov	r0, r5
 801c148:	b007      	add	sp, #28
 801c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c14e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c152:	2a0d      	cmp	r2, #13
 801c154:	d8e6      	bhi.n	801c124 <_scanf_float+0x60>
 801c156:	a101      	add	r1, pc, #4	; (adr r1, 801c15c <_scanf_float+0x98>)
 801c158:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c15c:	0801c29b 	.word	0x0801c29b
 801c160:	0801c125 	.word	0x0801c125
 801c164:	0801c125 	.word	0x0801c125
 801c168:	0801c125 	.word	0x0801c125
 801c16c:	0801c2fb 	.word	0x0801c2fb
 801c170:	0801c2d3 	.word	0x0801c2d3
 801c174:	0801c125 	.word	0x0801c125
 801c178:	0801c125 	.word	0x0801c125
 801c17c:	0801c2a9 	.word	0x0801c2a9
 801c180:	0801c125 	.word	0x0801c125
 801c184:	0801c125 	.word	0x0801c125
 801c188:	0801c125 	.word	0x0801c125
 801c18c:	0801c125 	.word	0x0801c125
 801c190:	0801c261 	.word	0x0801c261
 801c194:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c198:	e7db      	b.n	801c152 <_scanf_float+0x8e>
 801c19a:	290e      	cmp	r1, #14
 801c19c:	d8c2      	bhi.n	801c124 <_scanf_float+0x60>
 801c19e:	a001      	add	r0, pc, #4	; (adr r0, 801c1a4 <_scanf_float+0xe0>)
 801c1a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c1a4:	0801c253 	.word	0x0801c253
 801c1a8:	0801c125 	.word	0x0801c125
 801c1ac:	0801c253 	.word	0x0801c253
 801c1b0:	0801c2e7 	.word	0x0801c2e7
 801c1b4:	0801c125 	.word	0x0801c125
 801c1b8:	0801c201 	.word	0x0801c201
 801c1bc:	0801c23d 	.word	0x0801c23d
 801c1c0:	0801c23d 	.word	0x0801c23d
 801c1c4:	0801c23d 	.word	0x0801c23d
 801c1c8:	0801c23d 	.word	0x0801c23d
 801c1cc:	0801c23d 	.word	0x0801c23d
 801c1d0:	0801c23d 	.word	0x0801c23d
 801c1d4:	0801c23d 	.word	0x0801c23d
 801c1d8:	0801c23d 	.word	0x0801c23d
 801c1dc:	0801c23d 	.word	0x0801c23d
 801c1e0:	2b6e      	cmp	r3, #110	; 0x6e
 801c1e2:	d809      	bhi.n	801c1f8 <_scanf_float+0x134>
 801c1e4:	2b60      	cmp	r3, #96	; 0x60
 801c1e6:	d8b2      	bhi.n	801c14e <_scanf_float+0x8a>
 801c1e8:	2b54      	cmp	r3, #84	; 0x54
 801c1ea:	d077      	beq.n	801c2dc <_scanf_float+0x218>
 801c1ec:	2b59      	cmp	r3, #89	; 0x59
 801c1ee:	d199      	bne.n	801c124 <_scanf_float+0x60>
 801c1f0:	2d07      	cmp	r5, #7
 801c1f2:	d197      	bne.n	801c124 <_scanf_float+0x60>
 801c1f4:	2508      	movs	r5, #8
 801c1f6:	e029      	b.n	801c24c <_scanf_float+0x188>
 801c1f8:	2b74      	cmp	r3, #116	; 0x74
 801c1fa:	d06f      	beq.n	801c2dc <_scanf_float+0x218>
 801c1fc:	2b79      	cmp	r3, #121	; 0x79
 801c1fe:	e7f6      	b.n	801c1ee <_scanf_float+0x12a>
 801c200:	6821      	ldr	r1, [r4, #0]
 801c202:	05c8      	lsls	r0, r1, #23
 801c204:	d51a      	bpl.n	801c23c <_scanf_float+0x178>
 801c206:	9b02      	ldr	r3, [sp, #8]
 801c208:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c20c:	6021      	str	r1, [r4, #0]
 801c20e:	f109 0901 	add.w	r9, r9, #1
 801c212:	b11b      	cbz	r3, 801c21c <_scanf_float+0x158>
 801c214:	3b01      	subs	r3, #1
 801c216:	3201      	adds	r2, #1
 801c218:	9302      	str	r3, [sp, #8]
 801c21a:	60a2      	str	r2, [r4, #8]
 801c21c:	68a3      	ldr	r3, [r4, #8]
 801c21e:	3b01      	subs	r3, #1
 801c220:	60a3      	str	r3, [r4, #8]
 801c222:	6923      	ldr	r3, [r4, #16]
 801c224:	3301      	adds	r3, #1
 801c226:	6123      	str	r3, [r4, #16]
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	3b01      	subs	r3, #1
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	607b      	str	r3, [r7, #4]
 801c230:	f340 8084 	ble.w	801c33c <_scanf_float+0x278>
 801c234:	683b      	ldr	r3, [r7, #0]
 801c236:	3301      	adds	r3, #1
 801c238:	603b      	str	r3, [r7, #0]
 801c23a:	e766      	b.n	801c10a <_scanf_float+0x46>
 801c23c:	eb1a 0f05 	cmn.w	sl, r5
 801c240:	f47f af70 	bne.w	801c124 <_scanf_float+0x60>
 801c244:	6822      	ldr	r2, [r4, #0]
 801c246:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c24a:	6022      	str	r2, [r4, #0]
 801c24c:	f806 3b01 	strb.w	r3, [r6], #1
 801c250:	e7e4      	b.n	801c21c <_scanf_float+0x158>
 801c252:	6822      	ldr	r2, [r4, #0]
 801c254:	0610      	lsls	r0, r2, #24
 801c256:	f57f af65 	bpl.w	801c124 <_scanf_float+0x60>
 801c25a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c25e:	e7f4      	b.n	801c24a <_scanf_float+0x186>
 801c260:	f1ba 0f00 	cmp.w	sl, #0
 801c264:	d10e      	bne.n	801c284 <_scanf_float+0x1c0>
 801c266:	f1b9 0f00 	cmp.w	r9, #0
 801c26a:	d10e      	bne.n	801c28a <_scanf_float+0x1c6>
 801c26c:	6822      	ldr	r2, [r4, #0]
 801c26e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c272:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c276:	d108      	bne.n	801c28a <_scanf_float+0x1c6>
 801c278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c27c:	6022      	str	r2, [r4, #0]
 801c27e:	f04f 0a01 	mov.w	sl, #1
 801c282:	e7e3      	b.n	801c24c <_scanf_float+0x188>
 801c284:	f1ba 0f02 	cmp.w	sl, #2
 801c288:	d055      	beq.n	801c336 <_scanf_float+0x272>
 801c28a:	2d01      	cmp	r5, #1
 801c28c:	d002      	beq.n	801c294 <_scanf_float+0x1d0>
 801c28e:	2d04      	cmp	r5, #4
 801c290:	f47f af48 	bne.w	801c124 <_scanf_float+0x60>
 801c294:	3501      	adds	r5, #1
 801c296:	b2ed      	uxtb	r5, r5
 801c298:	e7d8      	b.n	801c24c <_scanf_float+0x188>
 801c29a:	f1ba 0f01 	cmp.w	sl, #1
 801c29e:	f47f af41 	bne.w	801c124 <_scanf_float+0x60>
 801c2a2:	f04f 0a02 	mov.w	sl, #2
 801c2a6:	e7d1      	b.n	801c24c <_scanf_float+0x188>
 801c2a8:	b97d      	cbnz	r5, 801c2ca <_scanf_float+0x206>
 801c2aa:	f1b9 0f00 	cmp.w	r9, #0
 801c2ae:	f47f af3c 	bne.w	801c12a <_scanf_float+0x66>
 801c2b2:	6822      	ldr	r2, [r4, #0]
 801c2b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c2b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c2bc:	f47f af39 	bne.w	801c132 <_scanf_float+0x6e>
 801c2c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c2c4:	6022      	str	r2, [r4, #0]
 801c2c6:	2501      	movs	r5, #1
 801c2c8:	e7c0      	b.n	801c24c <_scanf_float+0x188>
 801c2ca:	2d03      	cmp	r5, #3
 801c2cc:	d0e2      	beq.n	801c294 <_scanf_float+0x1d0>
 801c2ce:	2d05      	cmp	r5, #5
 801c2d0:	e7de      	b.n	801c290 <_scanf_float+0x1cc>
 801c2d2:	2d02      	cmp	r5, #2
 801c2d4:	f47f af26 	bne.w	801c124 <_scanf_float+0x60>
 801c2d8:	2503      	movs	r5, #3
 801c2da:	e7b7      	b.n	801c24c <_scanf_float+0x188>
 801c2dc:	2d06      	cmp	r5, #6
 801c2de:	f47f af21 	bne.w	801c124 <_scanf_float+0x60>
 801c2e2:	2507      	movs	r5, #7
 801c2e4:	e7b2      	b.n	801c24c <_scanf_float+0x188>
 801c2e6:	6822      	ldr	r2, [r4, #0]
 801c2e8:	0591      	lsls	r1, r2, #22
 801c2ea:	f57f af1b 	bpl.w	801c124 <_scanf_float+0x60>
 801c2ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c2f2:	6022      	str	r2, [r4, #0]
 801c2f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801c2f8:	e7a8      	b.n	801c24c <_scanf_float+0x188>
 801c2fa:	6822      	ldr	r2, [r4, #0]
 801c2fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c300:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c304:	d006      	beq.n	801c314 <_scanf_float+0x250>
 801c306:	0550      	lsls	r0, r2, #21
 801c308:	f57f af0c 	bpl.w	801c124 <_scanf_float+0x60>
 801c30c:	f1b9 0f00 	cmp.w	r9, #0
 801c310:	f43f af0f 	beq.w	801c132 <_scanf_float+0x6e>
 801c314:	0591      	lsls	r1, r2, #22
 801c316:	bf58      	it	pl
 801c318:	9901      	ldrpl	r1, [sp, #4]
 801c31a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c31e:	bf58      	it	pl
 801c320:	eba9 0101 	subpl.w	r1, r9, r1
 801c324:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c328:	bf58      	it	pl
 801c32a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c32e:	6022      	str	r2, [r4, #0]
 801c330:	f04f 0900 	mov.w	r9, #0
 801c334:	e78a      	b.n	801c24c <_scanf_float+0x188>
 801c336:	f04f 0a03 	mov.w	sl, #3
 801c33a:	e787      	b.n	801c24c <_scanf_float+0x188>
 801c33c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c340:	4639      	mov	r1, r7
 801c342:	4640      	mov	r0, r8
 801c344:	4798      	blx	r3
 801c346:	2800      	cmp	r0, #0
 801c348:	f43f aedf 	beq.w	801c10a <_scanf_float+0x46>
 801c34c:	e6ea      	b.n	801c124 <_scanf_float+0x60>
 801c34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c356:	463a      	mov	r2, r7
 801c358:	4640      	mov	r0, r8
 801c35a:	4798      	blx	r3
 801c35c:	6923      	ldr	r3, [r4, #16]
 801c35e:	3b01      	subs	r3, #1
 801c360:	6123      	str	r3, [r4, #16]
 801c362:	e6ec      	b.n	801c13e <_scanf_float+0x7a>
 801c364:	1e6b      	subs	r3, r5, #1
 801c366:	2b06      	cmp	r3, #6
 801c368:	d825      	bhi.n	801c3b6 <_scanf_float+0x2f2>
 801c36a:	2d02      	cmp	r5, #2
 801c36c:	d836      	bhi.n	801c3dc <_scanf_float+0x318>
 801c36e:	455e      	cmp	r6, fp
 801c370:	f67f aee8 	bls.w	801c144 <_scanf_float+0x80>
 801c374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c378:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c37c:	463a      	mov	r2, r7
 801c37e:	4640      	mov	r0, r8
 801c380:	4798      	blx	r3
 801c382:	6923      	ldr	r3, [r4, #16]
 801c384:	3b01      	subs	r3, #1
 801c386:	6123      	str	r3, [r4, #16]
 801c388:	e7f1      	b.n	801c36e <_scanf_float+0x2aa>
 801c38a:	9802      	ldr	r0, [sp, #8]
 801c38c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c390:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c394:	9002      	str	r0, [sp, #8]
 801c396:	463a      	mov	r2, r7
 801c398:	4640      	mov	r0, r8
 801c39a:	4798      	blx	r3
 801c39c:	6923      	ldr	r3, [r4, #16]
 801c39e:	3b01      	subs	r3, #1
 801c3a0:	6123      	str	r3, [r4, #16]
 801c3a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c3a6:	fa5f fa8a 	uxtb.w	sl, sl
 801c3aa:	f1ba 0f02 	cmp.w	sl, #2
 801c3ae:	d1ec      	bne.n	801c38a <_scanf_float+0x2c6>
 801c3b0:	3d03      	subs	r5, #3
 801c3b2:	b2ed      	uxtb	r5, r5
 801c3b4:	1b76      	subs	r6, r6, r5
 801c3b6:	6823      	ldr	r3, [r4, #0]
 801c3b8:	05da      	lsls	r2, r3, #23
 801c3ba:	d52f      	bpl.n	801c41c <_scanf_float+0x358>
 801c3bc:	055b      	lsls	r3, r3, #21
 801c3be:	d510      	bpl.n	801c3e2 <_scanf_float+0x31e>
 801c3c0:	455e      	cmp	r6, fp
 801c3c2:	f67f aebf 	bls.w	801c144 <_scanf_float+0x80>
 801c3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c3ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c3ce:	463a      	mov	r2, r7
 801c3d0:	4640      	mov	r0, r8
 801c3d2:	4798      	blx	r3
 801c3d4:	6923      	ldr	r3, [r4, #16]
 801c3d6:	3b01      	subs	r3, #1
 801c3d8:	6123      	str	r3, [r4, #16]
 801c3da:	e7f1      	b.n	801c3c0 <_scanf_float+0x2fc>
 801c3dc:	46aa      	mov	sl, r5
 801c3de:	9602      	str	r6, [sp, #8]
 801c3e0:	e7df      	b.n	801c3a2 <_scanf_float+0x2de>
 801c3e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c3e6:	6923      	ldr	r3, [r4, #16]
 801c3e8:	2965      	cmp	r1, #101	; 0x65
 801c3ea:	f103 33ff 	add.w	r3, r3, #4294967295
 801c3ee:	f106 35ff 	add.w	r5, r6, #4294967295
 801c3f2:	6123      	str	r3, [r4, #16]
 801c3f4:	d00c      	beq.n	801c410 <_scanf_float+0x34c>
 801c3f6:	2945      	cmp	r1, #69	; 0x45
 801c3f8:	d00a      	beq.n	801c410 <_scanf_float+0x34c>
 801c3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c3fe:	463a      	mov	r2, r7
 801c400:	4640      	mov	r0, r8
 801c402:	4798      	blx	r3
 801c404:	6923      	ldr	r3, [r4, #16]
 801c406:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c40a:	3b01      	subs	r3, #1
 801c40c:	1eb5      	subs	r5, r6, #2
 801c40e:	6123      	str	r3, [r4, #16]
 801c410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c414:	463a      	mov	r2, r7
 801c416:	4640      	mov	r0, r8
 801c418:	4798      	blx	r3
 801c41a:	462e      	mov	r6, r5
 801c41c:	6825      	ldr	r5, [r4, #0]
 801c41e:	f015 0510 	ands.w	r5, r5, #16
 801c422:	d14d      	bne.n	801c4c0 <_scanf_float+0x3fc>
 801c424:	7035      	strb	r5, [r6, #0]
 801c426:	6823      	ldr	r3, [r4, #0]
 801c428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c42c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c430:	d11a      	bne.n	801c468 <_scanf_float+0x3a4>
 801c432:	9b01      	ldr	r3, [sp, #4]
 801c434:	454b      	cmp	r3, r9
 801c436:	eba3 0209 	sub.w	r2, r3, r9
 801c43a:	d122      	bne.n	801c482 <_scanf_float+0x3be>
 801c43c:	2200      	movs	r2, #0
 801c43e:	4659      	mov	r1, fp
 801c440:	4640      	mov	r0, r8
 801c442:	f000 ff53 	bl	801d2ec <_strtod_r>
 801c446:	9b03      	ldr	r3, [sp, #12]
 801c448:	6821      	ldr	r1, [r4, #0]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	f011 0f02 	tst.w	r1, #2
 801c450:	f103 0204 	add.w	r2, r3, #4
 801c454:	d020      	beq.n	801c498 <_scanf_float+0x3d4>
 801c456:	9903      	ldr	r1, [sp, #12]
 801c458:	600a      	str	r2, [r1, #0]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	ed83 0b00 	vstr	d0, [r3]
 801c460:	68e3      	ldr	r3, [r4, #12]
 801c462:	3301      	adds	r3, #1
 801c464:	60e3      	str	r3, [r4, #12]
 801c466:	e66e      	b.n	801c146 <_scanf_float+0x82>
 801c468:	9b04      	ldr	r3, [sp, #16]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d0e6      	beq.n	801c43c <_scanf_float+0x378>
 801c46e:	9905      	ldr	r1, [sp, #20]
 801c470:	230a      	movs	r3, #10
 801c472:	462a      	mov	r2, r5
 801c474:	3101      	adds	r1, #1
 801c476:	4640      	mov	r0, r8
 801c478:	f000 ffc2 	bl	801d400 <_strtol_r>
 801c47c:	9b04      	ldr	r3, [sp, #16]
 801c47e:	9e05      	ldr	r6, [sp, #20]
 801c480:	1ac2      	subs	r2, r0, r3
 801c482:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c486:	429e      	cmp	r6, r3
 801c488:	bf28      	it	cs
 801c48a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c48e:	490d      	ldr	r1, [pc, #52]	; (801c4c4 <_scanf_float+0x400>)
 801c490:	4630      	mov	r0, r6
 801c492:	f000 f8f3 	bl	801c67c <siprintf>
 801c496:	e7d1      	b.n	801c43c <_scanf_float+0x378>
 801c498:	f011 0f04 	tst.w	r1, #4
 801c49c:	9903      	ldr	r1, [sp, #12]
 801c49e:	600a      	str	r2, [r1, #0]
 801c4a0:	d1db      	bne.n	801c45a <_scanf_float+0x396>
 801c4a2:	eeb4 0b40 	vcmp.f64	d0, d0
 801c4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4aa:	681e      	ldr	r6, [r3, #0]
 801c4ac:	d705      	bvc.n	801c4ba <_scanf_float+0x3f6>
 801c4ae:	4806      	ldr	r0, [pc, #24]	; (801c4c8 <_scanf_float+0x404>)
 801c4b0:	f000 f8aa 	bl	801c608 <nanf>
 801c4b4:	ed86 0a00 	vstr	s0, [r6]
 801c4b8:	e7d2      	b.n	801c460 <_scanf_float+0x39c>
 801c4ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c4be:	e7f9      	b.n	801c4b4 <_scanf_float+0x3f0>
 801c4c0:	2500      	movs	r5, #0
 801c4c2:	e640      	b.n	801c146 <_scanf_float+0x82>
 801c4c4:	080292c5 	.word	0x080292c5
 801c4c8:	0802927a 	.word	0x0802927a

0801c4cc <iprintf>:
 801c4cc:	b40f      	push	{r0, r1, r2, r3}
 801c4ce:	4b0a      	ldr	r3, [pc, #40]	; (801c4f8 <iprintf+0x2c>)
 801c4d0:	b513      	push	{r0, r1, r4, lr}
 801c4d2:	681c      	ldr	r4, [r3, #0]
 801c4d4:	b124      	cbz	r4, 801c4e0 <iprintf+0x14>
 801c4d6:	69a3      	ldr	r3, [r4, #24]
 801c4d8:	b913      	cbnz	r3, 801c4e0 <iprintf+0x14>
 801c4da:	4620      	mov	r0, r4
 801c4dc:	f001 ff8c 	bl	801e3f8 <__sinit>
 801c4e0:	ab05      	add	r3, sp, #20
 801c4e2:	9a04      	ldr	r2, [sp, #16]
 801c4e4:	68a1      	ldr	r1, [r4, #8]
 801c4e6:	9301      	str	r3, [sp, #4]
 801c4e8:	4620      	mov	r0, r4
 801c4ea:	f7ff f879 	bl	801b5e0 <_vfiprintf_r>
 801c4ee:	b002      	add	sp, #8
 801c4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4f4:	b004      	add	sp, #16
 801c4f6:	4770      	bx	lr
 801c4f8:	2400a128 	.word	0x2400a128

0801c4fc <_puts_r>:
 801c4fc:	b570      	push	{r4, r5, r6, lr}
 801c4fe:	460e      	mov	r6, r1
 801c500:	4605      	mov	r5, r0
 801c502:	b118      	cbz	r0, 801c50c <_puts_r+0x10>
 801c504:	6983      	ldr	r3, [r0, #24]
 801c506:	b90b      	cbnz	r3, 801c50c <_puts_r+0x10>
 801c508:	f001 ff76 	bl	801e3f8 <__sinit>
 801c50c:	69ab      	ldr	r3, [r5, #24]
 801c50e:	68ac      	ldr	r4, [r5, #8]
 801c510:	b913      	cbnz	r3, 801c518 <_puts_r+0x1c>
 801c512:	4628      	mov	r0, r5
 801c514:	f001 ff70 	bl	801e3f8 <__sinit>
 801c518:	4b2c      	ldr	r3, [pc, #176]	; (801c5cc <_puts_r+0xd0>)
 801c51a:	429c      	cmp	r4, r3
 801c51c:	d120      	bne.n	801c560 <_puts_r+0x64>
 801c51e:	686c      	ldr	r4, [r5, #4]
 801c520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c522:	07db      	lsls	r3, r3, #31
 801c524:	d405      	bmi.n	801c532 <_puts_r+0x36>
 801c526:	89a3      	ldrh	r3, [r4, #12]
 801c528:	0598      	lsls	r0, r3, #22
 801c52a:	d402      	bmi.n	801c532 <_puts_r+0x36>
 801c52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c52e:	f002 fb74 	bl	801ec1a <__retarget_lock_acquire_recursive>
 801c532:	89a3      	ldrh	r3, [r4, #12]
 801c534:	0719      	lsls	r1, r3, #28
 801c536:	d51d      	bpl.n	801c574 <_puts_r+0x78>
 801c538:	6923      	ldr	r3, [r4, #16]
 801c53a:	b1db      	cbz	r3, 801c574 <_puts_r+0x78>
 801c53c:	3e01      	subs	r6, #1
 801c53e:	68a3      	ldr	r3, [r4, #8]
 801c540:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c544:	3b01      	subs	r3, #1
 801c546:	60a3      	str	r3, [r4, #8]
 801c548:	bb39      	cbnz	r1, 801c59a <_puts_r+0x9e>
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	da38      	bge.n	801c5c0 <_puts_r+0xc4>
 801c54e:	4622      	mov	r2, r4
 801c550:	210a      	movs	r1, #10
 801c552:	4628      	mov	r0, r5
 801c554:	f000 ff60 	bl	801d418 <__swbuf_r>
 801c558:	3001      	adds	r0, #1
 801c55a:	d011      	beq.n	801c580 <_puts_r+0x84>
 801c55c:	250a      	movs	r5, #10
 801c55e:	e011      	b.n	801c584 <_puts_r+0x88>
 801c560:	4b1b      	ldr	r3, [pc, #108]	; (801c5d0 <_puts_r+0xd4>)
 801c562:	429c      	cmp	r4, r3
 801c564:	d101      	bne.n	801c56a <_puts_r+0x6e>
 801c566:	68ac      	ldr	r4, [r5, #8]
 801c568:	e7da      	b.n	801c520 <_puts_r+0x24>
 801c56a:	4b1a      	ldr	r3, [pc, #104]	; (801c5d4 <_puts_r+0xd8>)
 801c56c:	429c      	cmp	r4, r3
 801c56e:	bf08      	it	eq
 801c570:	68ec      	ldreq	r4, [r5, #12]
 801c572:	e7d5      	b.n	801c520 <_puts_r+0x24>
 801c574:	4621      	mov	r1, r4
 801c576:	4628      	mov	r0, r5
 801c578:	f000 ffa0 	bl	801d4bc <__swsetup_r>
 801c57c:	2800      	cmp	r0, #0
 801c57e:	d0dd      	beq.n	801c53c <_puts_r+0x40>
 801c580:	f04f 35ff 	mov.w	r5, #4294967295
 801c584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c586:	07da      	lsls	r2, r3, #31
 801c588:	d405      	bmi.n	801c596 <_puts_r+0x9a>
 801c58a:	89a3      	ldrh	r3, [r4, #12]
 801c58c:	059b      	lsls	r3, r3, #22
 801c58e:	d402      	bmi.n	801c596 <_puts_r+0x9a>
 801c590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c592:	f002 fb43 	bl	801ec1c <__retarget_lock_release_recursive>
 801c596:	4628      	mov	r0, r5
 801c598:	bd70      	pop	{r4, r5, r6, pc}
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	da04      	bge.n	801c5a8 <_puts_r+0xac>
 801c59e:	69a2      	ldr	r2, [r4, #24]
 801c5a0:	429a      	cmp	r2, r3
 801c5a2:	dc06      	bgt.n	801c5b2 <_puts_r+0xb6>
 801c5a4:	290a      	cmp	r1, #10
 801c5a6:	d004      	beq.n	801c5b2 <_puts_r+0xb6>
 801c5a8:	6823      	ldr	r3, [r4, #0]
 801c5aa:	1c5a      	adds	r2, r3, #1
 801c5ac:	6022      	str	r2, [r4, #0]
 801c5ae:	7019      	strb	r1, [r3, #0]
 801c5b0:	e7c5      	b.n	801c53e <_puts_r+0x42>
 801c5b2:	4622      	mov	r2, r4
 801c5b4:	4628      	mov	r0, r5
 801c5b6:	f000 ff2f 	bl	801d418 <__swbuf_r>
 801c5ba:	3001      	adds	r0, #1
 801c5bc:	d1bf      	bne.n	801c53e <_puts_r+0x42>
 801c5be:	e7df      	b.n	801c580 <_puts_r+0x84>
 801c5c0:	6823      	ldr	r3, [r4, #0]
 801c5c2:	250a      	movs	r5, #10
 801c5c4:	1c5a      	adds	r2, r3, #1
 801c5c6:	6022      	str	r2, [r4, #0]
 801c5c8:	701d      	strb	r5, [r3, #0]
 801c5ca:	e7db      	b.n	801c584 <_puts_r+0x88>
 801c5cc:	080294d8 	.word	0x080294d8
 801c5d0:	080294f8 	.word	0x080294f8
 801c5d4:	080294b8 	.word	0x080294b8

0801c5d8 <puts>:
 801c5d8:	4b02      	ldr	r3, [pc, #8]	; (801c5e4 <puts+0xc>)
 801c5da:	4601      	mov	r1, r0
 801c5dc:	6818      	ldr	r0, [r3, #0]
 801c5de:	f7ff bf8d 	b.w	801c4fc <_puts_r>
 801c5e2:	bf00      	nop
 801c5e4:	2400a128 	.word	0x2400a128

0801c5e8 <_sbrk_r>:
 801c5e8:	b538      	push	{r3, r4, r5, lr}
 801c5ea:	4d06      	ldr	r5, [pc, #24]	; (801c604 <_sbrk_r+0x1c>)
 801c5ec:	2300      	movs	r3, #0
 801c5ee:	4604      	mov	r4, r0
 801c5f0:	4608      	mov	r0, r1
 801c5f2:	602b      	str	r3, [r5, #0]
 801c5f4:	f7e5 fcb2 	bl	8001f5c <_sbrk>
 801c5f8:	1c43      	adds	r3, r0, #1
 801c5fa:	d102      	bne.n	801c602 <_sbrk_r+0x1a>
 801c5fc:	682b      	ldr	r3, [r5, #0]
 801c5fe:	b103      	cbz	r3, 801c602 <_sbrk_r+0x1a>
 801c600:	6023      	str	r3, [r4, #0]
 801c602:	bd38      	pop	{r3, r4, r5, pc}
 801c604:	240148c4 	.word	0x240148c4

0801c608 <nanf>:
 801c608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c610 <nanf+0x8>
 801c60c:	4770      	bx	lr
 801c60e:	bf00      	nop
 801c610:	7fc00000 	.word	0x7fc00000

0801c614 <sniprintf>:
 801c614:	b40c      	push	{r2, r3}
 801c616:	b530      	push	{r4, r5, lr}
 801c618:	4b17      	ldr	r3, [pc, #92]	; (801c678 <sniprintf+0x64>)
 801c61a:	1e0c      	subs	r4, r1, #0
 801c61c:	681d      	ldr	r5, [r3, #0]
 801c61e:	b09d      	sub	sp, #116	; 0x74
 801c620:	da08      	bge.n	801c634 <sniprintf+0x20>
 801c622:	238b      	movs	r3, #139	; 0x8b
 801c624:	602b      	str	r3, [r5, #0]
 801c626:	f04f 30ff 	mov.w	r0, #4294967295
 801c62a:	b01d      	add	sp, #116	; 0x74
 801c62c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c630:	b002      	add	sp, #8
 801c632:	4770      	bx	lr
 801c634:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c638:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c63c:	bf14      	ite	ne
 801c63e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c642:	4623      	moveq	r3, r4
 801c644:	9304      	str	r3, [sp, #16]
 801c646:	9307      	str	r3, [sp, #28]
 801c648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c64c:	9002      	str	r0, [sp, #8]
 801c64e:	9006      	str	r0, [sp, #24]
 801c650:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c656:	ab21      	add	r3, sp, #132	; 0x84
 801c658:	a902      	add	r1, sp, #8
 801c65a:	4628      	mov	r0, r5
 801c65c:	9301      	str	r3, [sp, #4]
 801c65e:	f003 f8ad 	bl	801f7bc <_svfiprintf_r>
 801c662:	1c43      	adds	r3, r0, #1
 801c664:	bfbc      	itt	lt
 801c666:	238b      	movlt	r3, #139	; 0x8b
 801c668:	602b      	strlt	r3, [r5, #0]
 801c66a:	2c00      	cmp	r4, #0
 801c66c:	d0dd      	beq.n	801c62a <sniprintf+0x16>
 801c66e:	9b02      	ldr	r3, [sp, #8]
 801c670:	2200      	movs	r2, #0
 801c672:	701a      	strb	r2, [r3, #0]
 801c674:	e7d9      	b.n	801c62a <sniprintf+0x16>
 801c676:	bf00      	nop
 801c678:	2400a128 	.word	0x2400a128

0801c67c <siprintf>:
 801c67c:	b40e      	push	{r1, r2, r3}
 801c67e:	b500      	push	{lr}
 801c680:	b09c      	sub	sp, #112	; 0x70
 801c682:	ab1d      	add	r3, sp, #116	; 0x74
 801c684:	9002      	str	r0, [sp, #8]
 801c686:	9006      	str	r0, [sp, #24]
 801c688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c68c:	4809      	ldr	r0, [pc, #36]	; (801c6b4 <siprintf+0x38>)
 801c68e:	9107      	str	r1, [sp, #28]
 801c690:	9104      	str	r1, [sp, #16]
 801c692:	4909      	ldr	r1, [pc, #36]	; (801c6b8 <siprintf+0x3c>)
 801c694:	f853 2b04 	ldr.w	r2, [r3], #4
 801c698:	9105      	str	r1, [sp, #20]
 801c69a:	6800      	ldr	r0, [r0, #0]
 801c69c:	9301      	str	r3, [sp, #4]
 801c69e:	a902      	add	r1, sp, #8
 801c6a0:	f003 f88c 	bl	801f7bc <_svfiprintf_r>
 801c6a4:	9b02      	ldr	r3, [sp, #8]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	701a      	strb	r2, [r3, #0]
 801c6aa:	b01c      	add	sp, #112	; 0x70
 801c6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801c6b0:	b003      	add	sp, #12
 801c6b2:	4770      	bx	lr
 801c6b4:	2400a128 	.word	0x2400a128
 801c6b8:	ffff0208 	.word	0xffff0208

0801c6bc <strncmp>:
 801c6bc:	b510      	push	{r4, lr}
 801c6be:	b16a      	cbz	r2, 801c6dc <strncmp+0x20>
 801c6c0:	3901      	subs	r1, #1
 801c6c2:	1884      	adds	r4, r0, r2
 801c6c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c6c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c6cc:	4293      	cmp	r3, r2
 801c6ce:	d103      	bne.n	801c6d8 <strncmp+0x1c>
 801c6d0:	42a0      	cmp	r0, r4
 801c6d2:	d001      	beq.n	801c6d8 <strncmp+0x1c>
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d1f5      	bne.n	801c6c4 <strncmp+0x8>
 801c6d8:	1a98      	subs	r0, r3, r2
 801c6da:	bd10      	pop	{r4, pc}
 801c6dc:	4610      	mov	r0, r2
 801c6de:	e7fc      	b.n	801c6da <strncmp+0x1e>

0801c6e0 <strncpy>:
 801c6e0:	b510      	push	{r4, lr}
 801c6e2:	3901      	subs	r1, #1
 801c6e4:	4603      	mov	r3, r0
 801c6e6:	b132      	cbz	r2, 801c6f6 <strncpy+0x16>
 801c6e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c6ec:	f803 4b01 	strb.w	r4, [r3], #1
 801c6f0:	3a01      	subs	r2, #1
 801c6f2:	2c00      	cmp	r4, #0
 801c6f4:	d1f7      	bne.n	801c6e6 <strncpy+0x6>
 801c6f6:	441a      	add	r2, r3
 801c6f8:	2100      	movs	r1, #0
 801c6fa:	4293      	cmp	r3, r2
 801c6fc:	d100      	bne.n	801c700 <strncpy+0x20>
 801c6fe:	bd10      	pop	{r4, pc}
 801c700:	f803 1b01 	strb.w	r1, [r3], #1
 801c704:	e7f9      	b.n	801c6fa <strncpy+0x1a>

0801c706 <sulp>:
 801c706:	b570      	push	{r4, r5, r6, lr}
 801c708:	4604      	mov	r4, r0
 801c70a:	460d      	mov	r5, r1
 801c70c:	4616      	mov	r6, r2
 801c70e:	ec45 4b10 	vmov	d0, r4, r5
 801c712:	f002 fe73 	bl	801f3fc <__ulp>
 801c716:	b17e      	cbz	r6, 801c738 <sulp+0x32>
 801c718:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c71c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c720:	2b00      	cmp	r3, #0
 801c722:	dd09      	ble.n	801c738 <sulp+0x32>
 801c724:	051b      	lsls	r3, r3, #20
 801c726:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801c72a:	2000      	movs	r0, #0
 801c72c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801c730:	ec41 0b17 	vmov	d7, r0, r1
 801c734:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c738:	bd70      	pop	{r4, r5, r6, pc}
 801c73a:	0000      	movs	r0, r0
 801c73c:	0000      	movs	r0, r0
	...

0801c740 <_strtod_l>:
 801c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c744:	ed2d 8b0c 	vpush	{d8-d13}
 801c748:	b09d      	sub	sp, #116	; 0x74
 801c74a:	461f      	mov	r7, r3
 801c74c:	2300      	movs	r3, #0
 801c74e:	9318      	str	r3, [sp, #96]	; 0x60
 801c750:	4ba6      	ldr	r3, [pc, #664]	; (801c9ec <_strtod_l+0x2ac>)
 801c752:	9213      	str	r2, [sp, #76]	; 0x4c
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	9308      	str	r3, [sp, #32]
 801c758:	4604      	mov	r4, r0
 801c75a:	4618      	mov	r0, r3
 801c75c:	468a      	mov	sl, r1
 801c75e:	f7e3 fdc9 	bl	80002f4 <strlen>
 801c762:	f04f 0800 	mov.w	r8, #0
 801c766:	4605      	mov	r5, r0
 801c768:	f04f 0900 	mov.w	r9, #0
 801c76c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801c770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c772:	781a      	ldrb	r2, [r3, #0]
 801c774:	2a2b      	cmp	r2, #43	; 0x2b
 801c776:	d04d      	beq.n	801c814 <_strtod_l+0xd4>
 801c778:	d83a      	bhi.n	801c7f0 <_strtod_l+0xb0>
 801c77a:	2a0d      	cmp	r2, #13
 801c77c:	d833      	bhi.n	801c7e6 <_strtod_l+0xa6>
 801c77e:	2a08      	cmp	r2, #8
 801c780:	d833      	bhi.n	801c7ea <_strtod_l+0xaa>
 801c782:	2a00      	cmp	r2, #0
 801c784:	d03d      	beq.n	801c802 <_strtod_l+0xc2>
 801c786:	2300      	movs	r3, #0
 801c788:	930b      	str	r3, [sp, #44]	; 0x2c
 801c78a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c78c:	7833      	ldrb	r3, [r6, #0]
 801c78e:	2b30      	cmp	r3, #48	; 0x30
 801c790:	f040 80b6 	bne.w	801c900 <_strtod_l+0x1c0>
 801c794:	7873      	ldrb	r3, [r6, #1]
 801c796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c79a:	2b58      	cmp	r3, #88	; 0x58
 801c79c:	d16d      	bne.n	801c87a <_strtod_l+0x13a>
 801c79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7a0:	9301      	str	r3, [sp, #4]
 801c7a2:	ab18      	add	r3, sp, #96	; 0x60
 801c7a4:	9702      	str	r7, [sp, #8]
 801c7a6:	9300      	str	r3, [sp, #0]
 801c7a8:	4a91      	ldr	r2, [pc, #580]	; (801c9f0 <_strtod_l+0x2b0>)
 801c7aa:	ab19      	add	r3, sp, #100	; 0x64
 801c7ac:	a917      	add	r1, sp, #92	; 0x5c
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f001 ff26 	bl	801e600 <__gethex>
 801c7b4:	f010 0507 	ands.w	r5, r0, #7
 801c7b8:	4607      	mov	r7, r0
 801c7ba:	d005      	beq.n	801c7c8 <_strtod_l+0x88>
 801c7bc:	2d06      	cmp	r5, #6
 801c7be:	d12b      	bne.n	801c818 <_strtod_l+0xd8>
 801c7c0:	3601      	adds	r6, #1
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	9617      	str	r6, [sp, #92]	; 0x5c
 801c7c6:	930b      	str	r3, [sp, #44]	; 0x2c
 801c7c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	f040 856e 	bne.w	801d2ac <_strtod_l+0xb6c>
 801c7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7d2:	b1e3      	cbz	r3, 801c80e <_strtod_l+0xce>
 801c7d4:	ec49 8b17 	vmov	d7, r8, r9
 801c7d8:	eeb1 0b47 	vneg.f64	d0, d7
 801c7dc:	b01d      	add	sp, #116	; 0x74
 801c7de:	ecbd 8b0c 	vpop	{d8-d13}
 801c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e6:	2a20      	cmp	r2, #32
 801c7e8:	d1cd      	bne.n	801c786 <_strtod_l+0x46>
 801c7ea:	3301      	adds	r3, #1
 801c7ec:	9317      	str	r3, [sp, #92]	; 0x5c
 801c7ee:	e7bf      	b.n	801c770 <_strtod_l+0x30>
 801c7f0:	2a2d      	cmp	r2, #45	; 0x2d
 801c7f2:	d1c8      	bne.n	801c786 <_strtod_l+0x46>
 801c7f4:	2201      	movs	r2, #1
 801c7f6:	920b      	str	r2, [sp, #44]	; 0x2c
 801c7f8:	1c5a      	adds	r2, r3, #1
 801c7fa:	9217      	str	r2, [sp, #92]	; 0x5c
 801c7fc:	785b      	ldrb	r3, [r3, #1]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d1c3      	bne.n	801c78a <_strtod_l+0x4a>
 801c802:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c804:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801c808:	2b00      	cmp	r3, #0
 801c80a:	f040 854d 	bne.w	801d2a8 <_strtod_l+0xb68>
 801c80e:	ec49 8b10 	vmov	d0, r8, r9
 801c812:	e7e3      	b.n	801c7dc <_strtod_l+0x9c>
 801c814:	2200      	movs	r2, #0
 801c816:	e7ee      	b.n	801c7f6 <_strtod_l+0xb6>
 801c818:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c81a:	b13a      	cbz	r2, 801c82c <_strtod_l+0xec>
 801c81c:	2135      	movs	r1, #53	; 0x35
 801c81e:	a81a      	add	r0, sp, #104	; 0x68
 801c820:	f002 fef8 	bl	801f614 <__copybits>
 801c824:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c826:	4620      	mov	r0, r4
 801c828:	f002 fabc 	bl	801eda4 <_Bfree>
 801c82c:	3d01      	subs	r5, #1
 801c82e:	2d05      	cmp	r5, #5
 801c830:	d807      	bhi.n	801c842 <_strtod_l+0x102>
 801c832:	e8df f005 	tbb	[pc, r5]
 801c836:	0b0e      	.short	0x0b0e
 801c838:	030e1d18 	.word	0x030e1d18
 801c83c:	f04f 0900 	mov.w	r9, #0
 801c840:	46c8      	mov	r8, r9
 801c842:	073b      	lsls	r3, r7, #28
 801c844:	d5c0      	bpl.n	801c7c8 <_strtod_l+0x88>
 801c846:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801c84a:	e7bd      	b.n	801c7c8 <_strtod_l+0x88>
 801c84c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801c850:	e7f7      	b.n	801c842 <_strtod_l+0x102>
 801c852:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801c856:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c858:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c85c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c860:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c864:	e7ed      	b.n	801c842 <_strtod_l+0x102>
 801c866:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801c9f4 <_strtod_l+0x2b4>
 801c86a:	f04f 0800 	mov.w	r8, #0
 801c86e:	e7e8      	b.n	801c842 <_strtod_l+0x102>
 801c870:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c874:	f04f 38ff 	mov.w	r8, #4294967295
 801c878:	e7e3      	b.n	801c842 <_strtod_l+0x102>
 801c87a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c87c:	1c5a      	adds	r2, r3, #1
 801c87e:	9217      	str	r2, [sp, #92]	; 0x5c
 801c880:	785b      	ldrb	r3, [r3, #1]
 801c882:	2b30      	cmp	r3, #48	; 0x30
 801c884:	d0f9      	beq.n	801c87a <_strtod_l+0x13a>
 801c886:	2b00      	cmp	r3, #0
 801c888:	d09e      	beq.n	801c7c8 <_strtod_l+0x88>
 801c88a:	2301      	movs	r3, #1
 801c88c:	9306      	str	r3, [sp, #24]
 801c88e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c890:	930c      	str	r3, [sp, #48]	; 0x30
 801c892:	2300      	movs	r3, #0
 801c894:	9304      	str	r3, [sp, #16]
 801c896:	930a      	str	r3, [sp, #40]	; 0x28
 801c898:	461e      	mov	r6, r3
 801c89a:	220a      	movs	r2, #10
 801c89c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c89e:	f890 b000 	ldrb.w	fp, [r0]
 801c8a2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801c8a6:	b2d9      	uxtb	r1, r3
 801c8a8:	2909      	cmp	r1, #9
 801c8aa:	d92b      	bls.n	801c904 <_strtod_l+0x1c4>
 801c8ac:	9908      	ldr	r1, [sp, #32]
 801c8ae:	462a      	mov	r2, r5
 801c8b0:	f7ff ff04 	bl	801c6bc <strncmp>
 801c8b4:	2800      	cmp	r0, #0
 801c8b6:	d035      	beq.n	801c924 <_strtod_l+0x1e4>
 801c8b8:	2000      	movs	r0, #0
 801c8ba:	465a      	mov	r2, fp
 801c8bc:	4633      	mov	r3, r6
 801c8be:	4683      	mov	fp, r0
 801c8c0:	4601      	mov	r1, r0
 801c8c2:	2a65      	cmp	r2, #101	; 0x65
 801c8c4:	d001      	beq.n	801c8ca <_strtod_l+0x18a>
 801c8c6:	2a45      	cmp	r2, #69	; 0x45
 801c8c8:	d118      	bne.n	801c8fc <_strtod_l+0x1bc>
 801c8ca:	b91b      	cbnz	r3, 801c8d4 <_strtod_l+0x194>
 801c8cc:	9b06      	ldr	r3, [sp, #24]
 801c8ce:	4303      	orrs	r3, r0
 801c8d0:	d097      	beq.n	801c802 <_strtod_l+0xc2>
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801c8d8:	f10a 0201 	add.w	r2, sl, #1
 801c8dc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c8de:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c8e2:	2a2b      	cmp	r2, #43	; 0x2b
 801c8e4:	d077      	beq.n	801c9d6 <_strtod_l+0x296>
 801c8e6:	2a2d      	cmp	r2, #45	; 0x2d
 801c8e8:	d07d      	beq.n	801c9e6 <_strtod_l+0x2a6>
 801c8ea:	f04f 0e00 	mov.w	lr, #0
 801c8ee:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801c8f2:	2d09      	cmp	r5, #9
 801c8f4:	f240 8084 	bls.w	801ca00 <_strtod_l+0x2c0>
 801c8f8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801c8fc:	2500      	movs	r5, #0
 801c8fe:	e09f      	b.n	801ca40 <_strtod_l+0x300>
 801c900:	2300      	movs	r3, #0
 801c902:	e7c3      	b.n	801c88c <_strtod_l+0x14c>
 801c904:	2e08      	cmp	r6, #8
 801c906:	bfd5      	itete	le
 801c908:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801c90a:	9904      	ldrgt	r1, [sp, #16]
 801c90c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c910:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c914:	f100 0001 	add.w	r0, r0, #1
 801c918:	bfd4      	ite	le
 801c91a:	930a      	strle	r3, [sp, #40]	; 0x28
 801c91c:	9304      	strgt	r3, [sp, #16]
 801c91e:	3601      	adds	r6, #1
 801c920:	9017      	str	r0, [sp, #92]	; 0x5c
 801c922:	e7bb      	b.n	801c89c <_strtod_l+0x15c>
 801c924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c926:	195a      	adds	r2, r3, r5
 801c928:	9217      	str	r2, [sp, #92]	; 0x5c
 801c92a:	5d5a      	ldrb	r2, [r3, r5]
 801c92c:	b3ae      	cbz	r6, 801c99a <_strtod_l+0x25a>
 801c92e:	4683      	mov	fp, r0
 801c930:	4633      	mov	r3, r6
 801c932:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c936:	2909      	cmp	r1, #9
 801c938:	d912      	bls.n	801c960 <_strtod_l+0x220>
 801c93a:	2101      	movs	r1, #1
 801c93c:	e7c1      	b.n	801c8c2 <_strtod_l+0x182>
 801c93e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c940:	1c5a      	adds	r2, r3, #1
 801c942:	9217      	str	r2, [sp, #92]	; 0x5c
 801c944:	785a      	ldrb	r2, [r3, #1]
 801c946:	3001      	adds	r0, #1
 801c948:	2a30      	cmp	r2, #48	; 0x30
 801c94a:	d0f8      	beq.n	801c93e <_strtod_l+0x1fe>
 801c94c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c950:	2b08      	cmp	r3, #8
 801c952:	f200 84b0 	bhi.w	801d2b6 <_strtod_l+0xb76>
 801c956:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c958:	930c      	str	r3, [sp, #48]	; 0x30
 801c95a:	4683      	mov	fp, r0
 801c95c:	2000      	movs	r0, #0
 801c95e:	4603      	mov	r3, r0
 801c960:	3a30      	subs	r2, #48	; 0x30
 801c962:	f100 0101 	add.w	r1, r0, #1
 801c966:	d012      	beq.n	801c98e <_strtod_l+0x24e>
 801c968:	448b      	add	fp, r1
 801c96a:	eb00 0c03 	add.w	ip, r0, r3
 801c96e:	4619      	mov	r1, r3
 801c970:	250a      	movs	r5, #10
 801c972:	4561      	cmp	r1, ip
 801c974:	d113      	bne.n	801c99e <_strtod_l+0x25e>
 801c976:	1819      	adds	r1, r3, r0
 801c978:	2908      	cmp	r1, #8
 801c97a:	f103 0301 	add.w	r3, r3, #1
 801c97e:	4403      	add	r3, r0
 801c980:	dc1d      	bgt.n	801c9be <_strtod_l+0x27e>
 801c982:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c984:	210a      	movs	r1, #10
 801c986:	fb01 2200 	mla	r2, r1, r0, r2
 801c98a:	920a      	str	r2, [sp, #40]	; 0x28
 801c98c:	2100      	movs	r1, #0
 801c98e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c990:	1c50      	adds	r0, r2, #1
 801c992:	9017      	str	r0, [sp, #92]	; 0x5c
 801c994:	7852      	ldrb	r2, [r2, #1]
 801c996:	4608      	mov	r0, r1
 801c998:	e7cb      	b.n	801c932 <_strtod_l+0x1f2>
 801c99a:	4630      	mov	r0, r6
 801c99c:	e7d4      	b.n	801c948 <_strtod_l+0x208>
 801c99e:	2908      	cmp	r1, #8
 801c9a0:	dc04      	bgt.n	801c9ac <_strtod_l+0x26c>
 801c9a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c9a4:	436f      	muls	r7, r5
 801c9a6:	970a      	str	r7, [sp, #40]	; 0x28
 801c9a8:	3101      	adds	r1, #1
 801c9aa:	e7e2      	b.n	801c972 <_strtod_l+0x232>
 801c9ac:	f101 0e01 	add.w	lr, r1, #1
 801c9b0:	f1be 0f10 	cmp.w	lr, #16
 801c9b4:	bfde      	ittt	le
 801c9b6:	9f04      	ldrle	r7, [sp, #16]
 801c9b8:	436f      	mulle	r7, r5
 801c9ba:	9704      	strle	r7, [sp, #16]
 801c9bc:	e7f4      	b.n	801c9a8 <_strtod_l+0x268>
 801c9be:	2b10      	cmp	r3, #16
 801c9c0:	bfdf      	itttt	le
 801c9c2:	9804      	ldrle	r0, [sp, #16]
 801c9c4:	210a      	movle	r1, #10
 801c9c6:	fb01 2200 	mlale	r2, r1, r0, r2
 801c9ca:	9204      	strle	r2, [sp, #16]
 801c9cc:	e7de      	b.n	801c98c <_strtod_l+0x24c>
 801c9ce:	f04f 0b00 	mov.w	fp, #0
 801c9d2:	2101      	movs	r1, #1
 801c9d4:	e77a      	b.n	801c8cc <_strtod_l+0x18c>
 801c9d6:	f04f 0e00 	mov.w	lr, #0
 801c9da:	f10a 0202 	add.w	r2, sl, #2
 801c9de:	9217      	str	r2, [sp, #92]	; 0x5c
 801c9e0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801c9e4:	e783      	b.n	801c8ee <_strtod_l+0x1ae>
 801c9e6:	f04f 0e01 	mov.w	lr, #1
 801c9ea:	e7f6      	b.n	801c9da <_strtod_l+0x29a>
 801c9ec:	08029584 	.word	0x08029584
 801c9f0:	080292cc 	.word	0x080292cc
 801c9f4:	7ff00000 	.word	0x7ff00000
 801c9f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c9fa:	1c55      	adds	r5, r2, #1
 801c9fc:	9517      	str	r5, [sp, #92]	; 0x5c
 801c9fe:	7852      	ldrb	r2, [r2, #1]
 801ca00:	2a30      	cmp	r2, #48	; 0x30
 801ca02:	d0f9      	beq.n	801c9f8 <_strtod_l+0x2b8>
 801ca04:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801ca08:	2d08      	cmp	r5, #8
 801ca0a:	f63f af77 	bhi.w	801c8fc <_strtod_l+0x1bc>
 801ca0e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801ca12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ca14:	9208      	str	r2, [sp, #32]
 801ca16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ca18:	1c55      	adds	r5, r2, #1
 801ca1a:	9517      	str	r5, [sp, #92]	; 0x5c
 801ca1c:	7852      	ldrb	r2, [r2, #1]
 801ca1e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801ca22:	2f09      	cmp	r7, #9
 801ca24:	d937      	bls.n	801ca96 <_strtod_l+0x356>
 801ca26:	9f08      	ldr	r7, [sp, #32]
 801ca28:	1bed      	subs	r5, r5, r7
 801ca2a:	2d08      	cmp	r5, #8
 801ca2c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801ca30:	dc02      	bgt.n	801ca38 <_strtod_l+0x2f8>
 801ca32:	4565      	cmp	r5, ip
 801ca34:	bfa8      	it	ge
 801ca36:	4665      	movge	r5, ip
 801ca38:	f1be 0f00 	cmp.w	lr, #0
 801ca3c:	d000      	beq.n	801ca40 <_strtod_l+0x300>
 801ca3e:	426d      	negs	r5, r5
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d14f      	bne.n	801cae4 <_strtod_l+0x3a4>
 801ca44:	9b06      	ldr	r3, [sp, #24]
 801ca46:	4303      	orrs	r3, r0
 801ca48:	f47f aebe 	bne.w	801c7c8 <_strtod_l+0x88>
 801ca4c:	2900      	cmp	r1, #0
 801ca4e:	f47f aed8 	bne.w	801c802 <_strtod_l+0xc2>
 801ca52:	2a69      	cmp	r2, #105	; 0x69
 801ca54:	d027      	beq.n	801caa6 <_strtod_l+0x366>
 801ca56:	dc24      	bgt.n	801caa2 <_strtod_l+0x362>
 801ca58:	2a49      	cmp	r2, #73	; 0x49
 801ca5a:	d024      	beq.n	801caa6 <_strtod_l+0x366>
 801ca5c:	2a4e      	cmp	r2, #78	; 0x4e
 801ca5e:	f47f aed0 	bne.w	801c802 <_strtod_l+0xc2>
 801ca62:	499b      	ldr	r1, [pc, #620]	; (801ccd0 <_strtod_l+0x590>)
 801ca64:	a817      	add	r0, sp, #92	; 0x5c
 801ca66:	f002 f823 	bl	801eab0 <__match>
 801ca6a:	2800      	cmp	r0, #0
 801ca6c:	f43f aec9 	beq.w	801c802 <_strtod_l+0xc2>
 801ca70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ca72:	781b      	ldrb	r3, [r3, #0]
 801ca74:	2b28      	cmp	r3, #40	; 0x28
 801ca76:	d12d      	bne.n	801cad4 <_strtod_l+0x394>
 801ca78:	4996      	ldr	r1, [pc, #600]	; (801ccd4 <_strtod_l+0x594>)
 801ca7a:	aa1a      	add	r2, sp, #104	; 0x68
 801ca7c:	a817      	add	r0, sp, #92	; 0x5c
 801ca7e:	f002 f82b 	bl	801ead8 <__hexnan>
 801ca82:	2805      	cmp	r0, #5
 801ca84:	d126      	bne.n	801cad4 <_strtod_l+0x394>
 801ca86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ca88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801ca8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801ca90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801ca94:	e698      	b.n	801c7c8 <_strtod_l+0x88>
 801ca96:	250a      	movs	r5, #10
 801ca98:	fb05 250c 	mla	r5, r5, ip, r2
 801ca9c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801caa0:	e7b9      	b.n	801ca16 <_strtod_l+0x2d6>
 801caa2:	2a6e      	cmp	r2, #110	; 0x6e
 801caa4:	e7db      	b.n	801ca5e <_strtod_l+0x31e>
 801caa6:	498c      	ldr	r1, [pc, #560]	; (801ccd8 <_strtod_l+0x598>)
 801caa8:	a817      	add	r0, sp, #92	; 0x5c
 801caaa:	f002 f801 	bl	801eab0 <__match>
 801caae:	2800      	cmp	r0, #0
 801cab0:	f43f aea7 	beq.w	801c802 <_strtod_l+0xc2>
 801cab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cab6:	4989      	ldr	r1, [pc, #548]	; (801ccdc <_strtod_l+0x59c>)
 801cab8:	3b01      	subs	r3, #1
 801caba:	a817      	add	r0, sp, #92	; 0x5c
 801cabc:	9317      	str	r3, [sp, #92]	; 0x5c
 801cabe:	f001 fff7 	bl	801eab0 <__match>
 801cac2:	b910      	cbnz	r0, 801caca <_strtod_l+0x38a>
 801cac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cac6:	3301      	adds	r3, #1
 801cac8:	9317      	str	r3, [sp, #92]	; 0x5c
 801caca:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801ccf0 <_strtod_l+0x5b0>
 801cace:	f04f 0800 	mov.w	r8, #0
 801cad2:	e679      	b.n	801c7c8 <_strtod_l+0x88>
 801cad4:	4882      	ldr	r0, [pc, #520]	; (801cce0 <_strtod_l+0x5a0>)
 801cad6:	f002 ff73 	bl	801f9c0 <nan>
 801cada:	ed8d 0b04 	vstr	d0, [sp, #16]
 801cade:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801cae2:	e671      	b.n	801c7c8 <_strtod_l+0x88>
 801cae4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801cae8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801caec:	eba5 020b 	sub.w	r2, r5, fp
 801caf0:	2e00      	cmp	r6, #0
 801caf2:	bf08      	it	eq
 801caf4:	461e      	moveq	r6, r3
 801caf6:	2b10      	cmp	r3, #16
 801caf8:	ed8d 7b08 	vstr	d7, [sp, #32]
 801cafc:	9206      	str	r2, [sp, #24]
 801cafe:	461a      	mov	r2, r3
 801cb00:	bfa8      	it	ge
 801cb02:	2210      	movge	r2, #16
 801cb04:	2b09      	cmp	r3, #9
 801cb06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801cb0a:	dd0e      	ble.n	801cb2a <_strtod_l+0x3ea>
 801cb0c:	4975      	ldr	r1, [pc, #468]	; (801cce4 <_strtod_l+0x5a4>)
 801cb0e:	eddd 7a04 	vldr	s15, [sp, #16]
 801cb12:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801cb16:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801cb1a:	ed9d 5b08 	vldr	d5, [sp, #32]
 801cb1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cb22:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cb26:	ec59 8b17 	vmov	r8, r9, d7
 801cb2a:	2b0f      	cmp	r3, #15
 801cb2c:	dc37      	bgt.n	801cb9e <_strtod_l+0x45e>
 801cb2e:	9906      	ldr	r1, [sp, #24]
 801cb30:	2900      	cmp	r1, #0
 801cb32:	f43f ae49 	beq.w	801c7c8 <_strtod_l+0x88>
 801cb36:	dd23      	ble.n	801cb80 <_strtod_l+0x440>
 801cb38:	2916      	cmp	r1, #22
 801cb3a:	dc0b      	bgt.n	801cb54 <_strtod_l+0x414>
 801cb3c:	4b69      	ldr	r3, [pc, #420]	; (801cce4 <_strtod_l+0x5a4>)
 801cb3e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801cb42:	ed93 7b00 	vldr	d7, [r3]
 801cb46:	ec49 8b16 	vmov	d6, r8, r9
 801cb4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb4e:	ec59 8b17 	vmov	r8, r9, d7
 801cb52:	e639      	b.n	801c7c8 <_strtod_l+0x88>
 801cb54:	9806      	ldr	r0, [sp, #24]
 801cb56:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801cb5a:	4281      	cmp	r1, r0
 801cb5c:	db1f      	blt.n	801cb9e <_strtod_l+0x45e>
 801cb5e:	4a61      	ldr	r2, [pc, #388]	; (801cce4 <_strtod_l+0x5a4>)
 801cb60:	f1c3 030f 	rsb	r3, r3, #15
 801cb64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801cb68:	ed91 7b00 	vldr	d7, [r1]
 801cb6c:	ec49 8b16 	vmov	d6, r8, r9
 801cb70:	1ac3      	subs	r3, r0, r3
 801cb72:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801cb76:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb7a:	ed92 6b00 	vldr	d6, [r2]
 801cb7e:	e7e4      	b.n	801cb4a <_strtod_l+0x40a>
 801cb80:	9906      	ldr	r1, [sp, #24]
 801cb82:	3116      	adds	r1, #22
 801cb84:	db0b      	blt.n	801cb9e <_strtod_l+0x45e>
 801cb86:	4b57      	ldr	r3, [pc, #348]	; (801cce4 <_strtod_l+0x5a4>)
 801cb88:	ebab 0505 	sub.w	r5, fp, r5
 801cb8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801cb90:	ed95 7b00 	vldr	d7, [r5]
 801cb94:	ec49 8b16 	vmov	d6, r8, r9
 801cb98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cb9c:	e7d7      	b.n	801cb4e <_strtod_l+0x40e>
 801cb9e:	9906      	ldr	r1, [sp, #24]
 801cba0:	1a9a      	subs	r2, r3, r2
 801cba2:	440a      	add	r2, r1
 801cba4:	2a00      	cmp	r2, #0
 801cba6:	dd74      	ble.n	801cc92 <_strtod_l+0x552>
 801cba8:	f012 000f 	ands.w	r0, r2, #15
 801cbac:	d00a      	beq.n	801cbc4 <_strtod_l+0x484>
 801cbae:	494d      	ldr	r1, [pc, #308]	; (801cce4 <_strtod_l+0x5a4>)
 801cbb0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801cbb4:	ed91 7b00 	vldr	d7, [r1]
 801cbb8:	ec49 8b16 	vmov	d6, r8, r9
 801cbbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cbc0:	ec59 8b17 	vmov	r8, r9, d7
 801cbc4:	f032 020f 	bics.w	r2, r2, #15
 801cbc8:	d04f      	beq.n	801cc6a <_strtod_l+0x52a>
 801cbca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801cbce:	dd22      	ble.n	801cc16 <_strtod_l+0x4d6>
 801cbd0:	2500      	movs	r5, #0
 801cbd2:	462e      	mov	r6, r5
 801cbd4:	950a      	str	r5, [sp, #40]	; 0x28
 801cbd6:	462f      	mov	r7, r5
 801cbd8:	2322      	movs	r3, #34	; 0x22
 801cbda:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801ccf0 <_strtod_l+0x5b0>
 801cbde:	6023      	str	r3, [r4, #0]
 801cbe0:	f04f 0800 	mov.w	r8, #0
 801cbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	f43f adee 	beq.w	801c7c8 <_strtod_l+0x88>
 801cbec:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cbee:	4620      	mov	r0, r4
 801cbf0:	f002 f8d8 	bl	801eda4 <_Bfree>
 801cbf4:	4639      	mov	r1, r7
 801cbf6:	4620      	mov	r0, r4
 801cbf8:	f002 f8d4 	bl	801eda4 <_Bfree>
 801cbfc:	4631      	mov	r1, r6
 801cbfe:	4620      	mov	r0, r4
 801cc00:	f002 f8d0 	bl	801eda4 <_Bfree>
 801cc04:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cc06:	4620      	mov	r0, r4
 801cc08:	f002 f8cc 	bl	801eda4 <_Bfree>
 801cc0c:	4629      	mov	r1, r5
 801cc0e:	4620      	mov	r0, r4
 801cc10:	f002 f8c8 	bl	801eda4 <_Bfree>
 801cc14:	e5d8      	b.n	801c7c8 <_strtod_l+0x88>
 801cc16:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801cc1a:	2000      	movs	r0, #0
 801cc1c:	4f32      	ldr	r7, [pc, #200]	; (801cce8 <_strtod_l+0x5a8>)
 801cc1e:	1112      	asrs	r2, r2, #4
 801cc20:	4601      	mov	r1, r0
 801cc22:	2a01      	cmp	r2, #1
 801cc24:	dc24      	bgt.n	801cc70 <_strtod_l+0x530>
 801cc26:	b108      	cbz	r0, 801cc2c <_strtod_l+0x4ec>
 801cc28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801cc2c:	4a2e      	ldr	r2, [pc, #184]	; (801cce8 <_strtod_l+0x5a8>)
 801cc2e:	482f      	ldr	r0, [pc, #188]	; (801ccec <_strtod_l+0x5ac>)
 801cc30:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801cc34:	ed91 7b00 	vldr	d7, [r1]
 801cc38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801cc3c:	ec49 8b16 	vmov	d6, r8, r9
 801cc40:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc44:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cc48:	9905      	ldr	r1, [sp, #20]
 801cc4a:	4a29      	ldr	r2, [pc, #164]	; (801ccf0 <_strtod_l+0x5b0>)
 801cc4c:	400a      	ands	r2, r1
 801cc4e:	4282      	cmp	r2, r0
 801cc50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801cc54:	d8bc      	bhi.n	801cbd0 <_strtod_l+0x490>
 801cc56:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801cc5a:	4282      	cmp	r2, r0
 801cc5c:	bf86      	itte	hi
 801cc5e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801ccf4 <_strtod_l+0x5b4>
 801cc62:	f04f 38ff 	movhi.w	r8, #4294967295
 801cc66:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	9204      	str	r2, [sp, #16]
 801cc6e:	e07f      	b.n	801cd70 <_strtod_l+0x630>
 801cc70:	f012 0f01 	tst.w	r2, #1
 801cc74:	d00a      	beq.n	801cc8c <_strtod_l+0x54c>
 801cc76:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801cc7a:	ed90 7b00 	vldr	d7, [r0]
 801cc7e:	ed9d 6b04 	vldr	d6, [sp, #16]
 801cc82:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cc86:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cc8a:	2001      	movs	r0, #1
 801cc8c:	3101      	adds	r1, #1
 801cc8e:	1052      	asrs	r2, r2, #1
 801cc90:	e7c7      	b.n	801cc22 <_strtod_l+0x4e2>
 801cc92:	d0ea      	beq.n	801cc6a <_strtod_l+0x52a>
 801cc94:	4252      	negs	r2, r2
 801cc96:	f012 000f 	ands.w	r0, r2, #15
 801cc9a:	d00a      	beq.n	801ccb2 <_strtod_l+0x572>
 801cc9c:	4911      	ldr	r1, [pc, #68]	; (801cce4 <_strtod_l+0x5a4>)
 801cc9e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801cca2:	ed91 7b00 	vldr	d7, [r1]
 801cca6:	ec49 8b16 	vmov	d6, r8, r9
 801ccaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ccae:	ec59 8b17 	vmov	r8, r9, d7
 801ccb2:	1112      	asrs	r2, r2, #4
 801ccb4:	d0d9      	beq.n	801cc6a <_strtod_l+0x52a>
 801ccb6:	2a1f      	cmp	r2, #31
 801ccb8:	dd1e      	ble.n	801ccf8 <_strtod_l+0x5b8>
 801ccba:	2500      	movs	r5, #0
 801ccbc:	462e      	mov	r6, r5
 801ccbe:	950a      	str	r5, [sp, #40]	; 0x28
 801ccc0:	462f      	mov	r7, r5
 801ccc2:	2322      	movs	r3, #34	; 0x22
 801ccc4:	f04f 0800 	mov.w	r8, #0
 801ccc8:	f04f 0900 	mov.w	r9, #0
 801cccc:	6023      	str	r3, [r4, #0]
 801ccce:	e789      	b.n	801cbe4 <_strtod_l+0x4a4>
 801ccd0:	0802929e 	.word	0x0802929e
 801ccd4:	080292e0 	.word	0x080292e0
 801ccd8:	08029296 	.word	0x08029296
 801ccdc:	08029424 	.word	0x08029424
 801cce0:	0802927a 	.word	0x0802927a
 801cce4:	08029620 	.word	0x08029620
 801cce8:	080295f8 	.word	0x080295f8
 801ccec:	7ca00000 	.word	0x7ca00000
 801ccf0:	7ff00000 	.word	0x7ff00000
 801ccf4:	7fefffff 	.word	0x7fefffff
 801ccf8:	f012 0110 	ands.w	r1, r2, #16
 801ccfc:	bf18      	it	ne
 801ccfe:	216a      	movne	r1, #106	; 0x6a
 801cd00:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801cd04:	9104      	str	r1, [sp, #16]
 801cd06:	49c0      	ldr	r1, [pc, #768]	; (801d008 <_strtod_l+0x8c8>)
 801cd08:	2000      	movs	r0, #0
 801cd0a:	07d7      	lsls	r7, r2, #31
 801cd0c:	d508      	bpl.n	801cd20 <_strtod_l+0x5e0>
 801cd0e:	ed9d 6b08 	vldr	d6, [sp, #32]
 801cd12:	ed91 7b00 	vldr	d7, [r1]
 801cd16:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cd1a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801cd1e:	2001      	movs	r0, #1
 801cd20:	1052      	asrs	r2, r2, #1
 801cd22:	f101 0108 	add.w	r1, r1, #8
 801cd26:	d1f0      	bne.n	801cd0a <_strtod_l+0x5ca>
 801cd28:	b108      	cbz	r0, 801cd2e <_strtod_l+0x5ee>
 801cd2a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801cd2e:	9a04      	ldr	r2, [sp, #16]
 801cd30:	b1ba      	cbz	r2, 801cd62 <_strtod_l+0x622>
 801cd32:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801cd36:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801cd3a:	2a00      	cmp	r2, #0
 801cd3c:	4649      	mov	r1, r9
 801cd3e:	dd10      	ble.n	801cd62 <_strtod_l+0x622>
 801cd40:	2a1f      	cmp	r2, #31
 801cd42:	f340 8132 	ble.w	801cfaa <_strtod_l+0x86a>
 801cd46:	2a34      	cmp	r2, #52	; 0x34
 801cd48:	bfde      	ittt	le
 801cd4a:	3a20      	suble	r2, #32
 801cd4c:	f04f 30ff 	movle.w	r0, #4294967295
 801cd50:	fa00 f202 	lslle.w	r2, r0, r2
 801cd54:	f04f 0800 	mov.w	r8, #0
 801cd58:	bfcc      	ite	gt
 801cd5a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801cd5e:	ea02 0901 	andle.w	r9, r2, r1
 801cd62:	ec49 8b17 	vmov	d7, r8, r9
 801cd66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd6e:	d0a4      	beq.n	801ccba <_strtod_l+0x57a>
 801cd70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd72:	9200      	str	r2, [sp, #0]
 801cd74:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cd76:	4632      	mov	r2, r6
 801cd78:	4620      	mov	r0, r4
 801cd7a:	f002 f87f 	bl	801ee7c <__s2b>
 801cd7e:	900a      	str	r0, [sp, #40]	; 0x28
 801cd80:	2800      	cmp	r0, #0
 801cd82:	f43f af25 	beq.w	801cbd0 <_strtod_l+0x490>
 801cd86:	9b06      	ldr	r3, [sp, #24]
 801cd88:	ebab 0505 	sub.w	r5, fp, r5
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	bfb4      	ite	lt
 801cd90:	462b      	movlt	r3, r5
 801cd92:	2300      	movge	r3, #0
 801cd94:	930c      	str	r3, [sp, #48]	; 0x30
 801cd96:	9b06      	ldr	r3, [sp, #24]
 801cd98:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801cff0 <_strtod_l+0x8b0>
 801cd9c:	ed9f ab96 	vldr	d10, [pc, #600]	; 801cff8 <_strtod_l+0x8b8>
 801cda0:	ed9f bb97 	vldr	d11, [pc, #604]	; 801d000 <_strtod_l+0x8c0>
 801cda4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cda8:	2500      	movs	r5, #0
 801cdaa:	9312      	str	r3, [sp, #72]	; 0x48
 801cdac:	462e      	mov	r6, r5
 801cdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	6859      	ldr	r1, [r3, #4]
 801cdb4:	f001 ffb6 	bl	801ed24 <_Balloc>
 801cdb8:	4607      	mov	r7, r0
 801cdba:	2800      	cmp	r0, #0
 801cdbc:	f43f af0c 	beq.w	801cbd8 <_strtod_l+0x498>
 801cdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdc2:	691a      	ldr	r2, [r3, #16]
 801cdc4:	3202      	adds	r2, #2
 801cdc6:	f103 010c 	add.w	r1, r3, #12
 801cdca:	0092      	lsls	r2, r2, #2
 801cdcc:	300c      	adds	r0, #12
 801cdce:	f7fe fb03 	bl	801b3d8 <memcpy>
 801cdd2:	ec49 8b10 	vmov	d0, r8, r9
 801cdd6:	aa1a      	add	r2, sp, #104	; 0x68
 801cdd8:	a919      	add	r1, sp, #100	; 0x64
 801cdda:	4620      	mov	r0, r4
 801cddc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801cde0:	f002 fb88 	bl	801f4f4 <__d2b>
 801cde4:	9018      	str	r0, [sp, #96]	; 0x60
 801cde6:	2800      	cmp	r0, #0
 801cde8:	f43f aef6 	beq.w	801cbd8 <_strtod_l+0x498>
 801cdec:	2101      	movs	r1, #1
 801cdee:	4620      	mov	r0, r4
 801cdf0:	f002 f8de 	bl	801efb0 <__i2b>
 801cdf4:	4606      	mov	r6, r0
 801cdf6:	2800      	cmp	r0, #0
 801cdf8:	f43f aeee 	beq.w	801cbd8 <_strtod_l+0x498>
 801cdfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cdfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	bfab      	itete	ge
 801ce04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801ce06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ce08:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801ce0c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801ce10:	bfac      	ite	ge
 801ce12:	eb03 0b02 	addge.w	fp, r3, r2
 801ce16:	eba2 0a03 	sublt.w	sl, r2, r3
 801ce1a:	9a04      	ldr	r2, [sp, #16]
 801ce1c:	1a9b      	subs	r3, r3, r2
 801ce1e:	440b      	add	r3, r1
 801ce20:	4a7a      	ldr	r2, [pc, #488]	; (801d00c <_strtod_l+0x8cc>)
 801ce22:	3b01      	subs	r3, #1
 801ce24:	4293      	cmp	r3, r2
 801ce26:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801ce2a:	f280 80d1 	bge.w	801cfd0 <_strtod_l+0x890>
 801ce2e:	1ad2      	subs	r2, r2, r3
 801ce30:	2a1f      	cmp	r2, #31
 801ce32:	eba1 0102 	sub.w	r1, r1, r2
 801ce36:	f04f 0001 	mov.w	r0, #1
 801ce3a:	f300 80bd 	bgt.w	801cfb8 <_strtod_l+0x878>
 801ce3e:	fa00 f302 	lsl.w	r3, r0, r2
 801ce42:	930e      	str	r3, [sp, #56]	; 0x38
 801ce44:	2300      	movs	r3, #0
 801ce46:	930d      	str	r3, [sp, #52]	; 0x34
 801ce48:	eb0b 0301 	add.w	r3, fp, r1
 801ce4c:	9a04      	ldr	r2, [sp, #16]
 801ce4e:	459b      	cmp	fp, r3
 801ce50:	448a      	add	sl, r1
 801ce52:	4492      	add	sl, r2
 801ce54:	465a      	mov	r2, fp
 801ce56:	bfa8      	it	ge
 801ce58:	461a      	movge	r2, r3
 801ce5a:	4552      	cmp	r2, sl
 801ce5c:	bfa8      	it	ge
 801ce5e:	4652      	movge	r2, sl
 801ce60:	2a00      	cmp	r2, #0
 801ce62:	bfc2      	ittt	gt
 801ce64:	1a9b      	subgt	r3, r3, r2
 801ce66:	ebaa 0a02 	subgt.w	sl, sl, r2
 801ce6a:	ebab 0b02 	subgt.w	fp, fp, r2
 801ce6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce70:	2a00      	cmp	r2, #0
 801ce72:	dd18      	ble.n	801cea6 <_strtod_l+0x766>
 801ce74:	4631      	mov	r1, r6
 801ce76:	4620      	mov	r0, r4
 801ce78:	9315      	str	r3, [sp, #84]	; 0x54
 801ce7a:	f002 f955 	bl	801f128 <__pow5mult>
 801ce7e:	4606      	mov	r6, r0
 801ce80:	2800      	cmp	r0, #0
 801ce82:	f43f aea9 	beq.w	801cbd8 <_strtod_l+0x498>
 801ce86:	4601      	mov	r1, r0
 801ce88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ce8a:	4620      	mov	r0, r4
 801ce8c:	f002 f8a6 	bl	801efdc <__multiply>
 801ce90:	9014      	str	r0, [sp, #80]	; 0x50
 801ce92:	2800      	cmp	r0, #0
 801ce94:	f43f aea0 	beq.w	801cbd8 <_strtod_l+0x498>
 801ce98:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	f001 ff82 	bl	801eda4 <_Bfree>
 801cea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cea4:	9218      	str	r2, [sp, #96]	; 0x60
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	f300 8097 	bgt.w	801cfda <_strtod_l+0x89a>
 801ceac:	9b06      	ldr	r3, [sp, #24]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	dd08      	ble.n	801cec4 <_strtod_l+0x784>
 801ceb2:	4639      	mov	r1, r7
 801ceb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ceb6:	4620      	mov	r0, r4
 801ceb8:	f002 f936 	bl	801f128 <__pow5mult>
 801cebc:	4607      	mov	r7, r0
 801cebe:	2800      	cmp	r0, #0
 801cec0:	f43f ae8a 	beq.w	801cbd8 <_strtod_l+0x498>
 801cec4:	f1ba 0f00 	cmp.w	sl, #0
 801cec8:	dd08      	ble.n	801cedc <_strtod_l+0x79c>
 801ceca:	4639      	mov	r1, r7
 801cecc:	4652      	mov	r2, sl
 801cece:	4620      	mov	r0, r4
 801ced0:	f002 f984 	bl	801f1dc <__lshift>
 801ced4:	4607      	mov	r7, r0
 801ced6:	2800      	cmp	r0, #0
 801ced8:	f43f ae7e 	beq.w	801cbd8 <_strtod_l+0x498>
 801cedc:	f1bb 0f00 	cmp.w	fp, #0
 801cee0:	dd08      	ble.n	801cef4 <_strtod_l+0x7b4>
 801cee2:	4631      	mov	r1, r6
 801cee4:	465a      	mov	r2, fp
 801cee6:	4620      	mov	r0, r4
 801cee8:	f002 f978 	bl	801f1dc <__lshift>
 801ceec:	4606      	mov	r6, r0
 801ceee:	2800      	cmp	r0, #0
 801cef0:	f43f ae72 	beq.w	801cbd8 <_strtod_l+0x498>
 801cef4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cef6:	463a      	mov	r2, r7
 801cef8:	4620      	mov	r0, r4
 801cefa:	f002 f9f7 	bl	801f2ec <__mdiff>
 801cefe:	4605      	mov	r5, r0
 801cf00:	2800      	cmp	r0, #0
 801cf02:	f43f ae69 	beq.w	801cbd8 <_strtod_l+0x498>
 801cf06:	2300      	movs	r3, #0
 801cf08:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801cf0c:	60c3      	str	r3, [r0, #12]
 801cf0e:	4631      	mov	r1, r6
 801cf10:	f002 f9d0 	bl	801f2b4 <__mcmp>
 801cf14:	2800      	cmp	r0, #0
 801cf16:	da7f      	bge.n	801d018 <_strtod_l+0x8d8>
 801cf18:	ea5a 0308 	orrs.w	r3, sl, r8
 801cf1c:	f040 80a5 	bne.w	801d06a <_strtod_l+0x92a>
 801cf20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	f040 80a0 	bne.w	801d06a <_strtod_l+0x92a>
 801cf2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cf2e:	0d1b      	lsrs	r3, r3, #20
 801cf30:	051b      	lsls	r3, r3, #20
 801cf32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801cf36:	f240 8098 	bls.w	801d06a <_strtod_l+0x92a>
 801cf3a:	696b      	ldr	r3, [r5, #20]
 801cf3c:	b91b      	cbnz	r3, 801cf46 <_strtod_l+0x806>
 801cf3e:	692b      	ldr	r3, [r5, #16]
 801cf40:	2b01      	cmp	r3, #1
 801cf42:	f340 8092 	ble.w	801d06a <_strtod_l+0x92a>
 801cf46:	4629      	mov	r1, r5
 801cf48:	2201      	movs	r2, #1
 801cf4a:	4620      	mov	r0, r4
 801cf4c:	f002 f946 	bl	801f1dc <__lshift>
 801cf50:	4631      	mov	r1, r6
 801cf52:	4605      	mov	r5, r0
 801cf54:	f002 f9ae 	bl	801f2b4 <__mcmp>
 801cf58:	2800      	cmp	r0, #0
 801cf5a:	f340 8086 	ble.w	801d06a <_strtod_l+0x92a>
 801cf5e:	9904      	ldr	r1, [sp, #16]
 801cf60:	4a2b      	ldr	r2, [pc, #172]	; (801d010 <_strtod_l+0x8d0>)
 801cf62:	464b      	mov	r3, r9
 801cf64:	2900      	cmp	r1, #0
 801cf66:	f000 80a1 	beq.w	801d0ac <_strtod_l+0x96c>
 801cf6a:	ea02 0109 	and.w	r1, r2, r9
 801cf6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801cf72:	f300 809b 	bgt.w	801d0ac <_strtod_l+0x96c>
 801cf76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801cf7a:	f77f aea2 	ble.w	801ccc2 <_strtod_l+0x582>
 801cf7e:	4a25      	ldr	r2, [pc, #148]	; (801d014 <_strtod_l+0x8d4>)
 801cf80:	2300      	movs	r3, #0
 801cf82:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801cf86:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801cf8a:	ec49 8b17 	vmov	d7, r8, r9
 801cf8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cf92:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cf96:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801cf9a:	4313      	orrs	r3, r2
 801cf9c:	bf08      	it	eq
 801cf9e:	2322      	moveq	r3, #34	; 0x22
 801cfa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801cfa4:	bf08      	it	eq
 801cfa6:	6023      	streq	r3, [r4, #0]
 801cfa8:	e620      	b.n	801cbec <_strtod_l+0x4ac>
 801cfaa:	f04f 31ff 	mov.w	r1, #4294967295
 801cfae:	fa01 f202 	lsl.w	r2, r1, r2
 801cfb2:	ea02 0808 	and.w	r8, r2, r8
 801cfb6:	e6d4      	b.n	801cd62 <_strtod_l+0x622>
 801cfb8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801cfbc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801cfc0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801cfc4:	33e2      	adds	r3, #226	; 0xe2
 801cfc6:	fa00 f303 	lsl.w	r3, r0, r3
 801cfca:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801cfce:	e73b      	b.n	801ce48 <_strtod_l+0x708>
 801cfd0:	2000      	movs	r0, #0
 801cfd2:	2301      	movs	r3, #1
 801cfd4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801cfd8:	e736      	b.n	801ce48 <_strtod_l+0x708>
 801cfda:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cfdc:	461a      	mov	r2, r3
 801cfde:	4620      	mov	r0, r4
 801cfe0:	f002 f8fc 	bl	801f1dc <__lshift>
 801cfe4:	9018      	str	r0, [sp, #96]	; 0x60
 801cfe6:	2800      	cmp	r0, #0
 801cfe8:	f47f af60 	bne.w	801ceac <_strtod_l+0x76c>
 801cfec:	e5f4      	b.n	801cbd8 <_strtod_l+0x498>
 801cfee:	bf00      	nop
 801cff0:	94a03595 	.word	0x94a03595
 801cff4:	3fcfffff 	.word	0x3fcfffff
 801cff8:	94a03595 	.word	0x94a03595
 801cffc:	3fdfffff 	.word	0x3fdfffff
 801d000:	35afe535 	.word	0x35afe535
 801d004:	3fe00000 	.word	0x3fe00000
 801d008:	080292f8 	.word	0x080292f8
 801d00c:	fffffc02 	.word	0xfffffc02
 801d010:	7ff00000 	.word	0x7ff00000
 801d014:	39500000 	.word	0x39500000
 801d018:	46cb      	mov	fp, r9
 801d01a:	d165      	bne.n	801d0e8 <_strtod_l+0x9a8>
 801d01c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d020:	f1ba 0f00 	cmp.w	sl, #0
 801d024:	d02a      	beq.n	801d07c <_strtod_l+0x93c>
 801d026:	4aaa      	ldr	r2, [pc, #680]	; (801d2d0 <_strtod_l+0xb90>)
 801d028:	4293      	cmp	r3, r2
 801d02a:	d12b      	bne.n	801d084 <_strtod_l+0x944>
 801d02c:	9b04      	ldr	r3, [sp, #16]
 801d02e:	4641      	mov	r1, r8
 801d030:	b1fb      	cbz	r3, 801d072 <_strtod_l+0x932>
 801d032:	4aa8      	ldr	r2, [pc, #672]	; (801d2d4 <_strtod_l+0xb94>)
 801d034:	ea09 0202 	and.w	r2, r9, r2
 801d038:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801d03c:	f04f 30ff 	mov.w	r0, #4294967295
 801d040:	d81a      	bhi.n	801d078 <_strtod_l+0x938>
 801d042:	0d12      	lsrs	r2, r2, #20
 801d044:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d048:	fa00 f303 	lsl.w	r3, r0, r3
 801d04c:	4299      	cmp	r1, r3
 801d04e:	d119      	bne.n	801d084 <_strtod_l+0x944>
 801d050:	4ba1      	ldr	r3, [pc, #644]	; (801d2d8 <_strtod_l+0xb98>)
 801d052:	459b      	cmp	fp, r3
 801d054:	d102      	bne.n	801d05c <_strtod_l+0x91c>
 801d056:	3101      	adds	r1, #1
 801d058:	f43f adbe 	beq.w	801cbd8 <_strtod_l+0x498>
 801d05c:	4b9d      	ldr	r3, [pc, #628]	; (801d2d4 <_strtod_l+0xb94>)
 801d05e:	ea0b 0303 	and.w	r3, fp, r3
 801d062:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d066:	f04f 0800 	mov.w	r8, #0
 801d06a:	9b04      	ldr	r3, [sp, #16]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d186      	bne.n	801cf7e <_strtod_l+0x83e>
 801d070:	e5bc      	b.n	801cbec <_strtod_l+0x4ac>
 801d072:	f04f 33ff 	mov.w	r3, #4294967295
 801d076:	e7e9      	b.n	801d04c <_strtod_l+0x90c>
 801d078:	4603      	mov	r3, r0
 801d07a:	e7e7      	b.n	801d04c <_strtod_l+0x90c>
 801d07c:	ea53 0308 	orrs.w	r3, r3, r8
 801d080:	f43f af6d 	beq.w	801cf5e <_strtod_l+0x81e>
 801d084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d086:	b1db      	cbz	r3, 801d0c0 <_strtod_l+0x980>
 801d088:	ea13 0f0b 	tst.w	r3, fp
 801d08c:	d0ed      	beq.n	801d06a <_strtod_l+0x92a>
 801d08e:	9a04      	ldr	r2, [sp, #16]
 801d090:	4640      	mov	r0, r8
 801d092:	4649      	mov	r1, r9
 801d094:	f1ba 0f00 	cmp.w	sl, #0
 801d098:	d016      	beq.n	801d0c8 <_strtod_l+0x988>
 801d09a:	f7ff fb34 	bl	801c706 <sulp>
 801d09e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801d0a2:	ee37 7b00 	vadd.f64	d7, d7, d0
 801d0a6:	ec59 8b17 	vmov	r8, r9, d7
 801d0aa:	e7de      	b.n	801d06a <_strtod_l+0x92a>
 801d0ac:	4013      	ands	r3, r2
 801d0ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d0b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d0b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d0ba:	f04f 38ff 	mov.w	r8, #4294967295
 801d0be:	e7d4      	b.n	801d06a <_strtod_l+0x92a>
 801d0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0c2:	ea13 0f08 	tst.w	r3, r8
 801d0c6:	e7e1      	b.n	801d08c <_strtod_l+0x94c>
 801d0c8:	f7ff fb1d 	bl	801c706 <sulp>
 801d0cc:	ed9d 7b08 	vldr	d7, [sp, #32]
 801d0d0:	ee37 7b40 	vsub.f64	d7, d7, d0
 801d0d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d0d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0e0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801d0e4:	d1c1      	bne.n	801d06a <_strtod_l+0x92a>
 801d0e6:	e5ec      	b.n	801ccc2 <_strtod_l+0x582>
 801d0e8:	4631      	mov	r1, r6
 801d0ea:	4628      	mov	r0, r5
 801d0ec:	f002 fa5e 	bl	801f5ac <__ratio>
 801d0f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801d0f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0fc:	d867      	bhi.n	801d1ce <_strtod_l+0xa8e>
 801d0fe:	f1ba 0f00 	cmp.w	sl, #0
 801d102:	d044      	beq.n	801d18e <_strtod_l+0xa4e>
 801d104:	4b75      	ldr	r3, [pc, #468]	; (801d2dc <_strtod_l+0xb9c>)
 801d106:	2200      	movs	r2, #0
 801d108:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801d10c:	4971      	ldr	r1, [pc, #452]	; (801d2d4 <_strtod_l+0xb94>)
 801d10e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801d2e8 <_strtod_l+0xba8>
 801d112:	ea0b 0001 	and.w	r0, fp, r1
 801d116:	4560      	cmp	r0, ip
 801d118:	900d      	str	r0, [sp, #52]	; 0x34
 801d11a:	f040 808b 	bne.w	801d234 <_strtod_l+0xaf4>
 801d11e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d122:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801d126:	ec49 8b10 	vmov	d0, r8, r9
 801d12a:	ec43 2b1c 	vmov	d12, r2, r3
 801d12e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801d132:	f002 f963 	bl	801f3fc <__ulp>
 801d136:	ec49 8b1d 	vmov	d13, r8, r9
 801d13a:	eeac db00 	vfma.f64	d13, d12, d0
 801d13e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801d142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d144:	4963      	ldr	r1, [pc, #396]	; (801d2d4 <_strtod_l+0xb94>)
 801d146:	4a66      	ldr	r2, [pc, #408]	; (801d2e0 <_strtod_l+0xba0>)
 801d148:	4019      	ands	r1, r3
 801d14a:	4291      	cmp	r1, r2
 801d14c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801d150:	d947      	bls.n	801d1e2 <_strtod_l+0xaa2>
 801d152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d154:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d158:	4293      	cmp	r3, r2
 801d15a:	d103      	bne.n	801d164 <_strtod_l+0xa24>
 801d15c:	9b08      	ldr	r3, [sp, #32]
 801d15e:	3301      	adds	r3, #1
 801d160:	f43f ad3a 	beq.w	801cbd8 <_strtod_l+0x498>
 801d164:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801d2d8 <_strtod_l+0xb98>
 801d168:	f04f 38ff 	mov.w	r8, #4294967295
 801d16c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d16e:	4620      	mov	r0, r4
 801d170:	f001 fe18 	bl	801eda4 <_Bfree>
 801d174:	4639      	mov	r1, r7
 801d176:	4620      	mov	r0, r4
 801d178:	f001 fe14 	bl	801eda4 <_Bfree>
 801d17c:	4631      	mov	r1, r6
 801d17e:	4620      	mov	r0, r4
 801d180:	f001 fe10 	bl	801eda4 <_Bfree>
 801d184:	4629      	mov	r1, r5
 801d186:	4620      	mov	r0, r4
 801d188:	f001 fe0c 	bl	801eda4 <_Bfree>
 801d18c:	e60f      	b.n	801cdae <_strtod_l+0x66e>
 801d18e:	f1b8 0f00 	cmp.w	r8, #0
 801d192:	d112      	bne.n	801d1ba <_strtod_l+0xa7a>
 801d194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d198:	b9b3      	cbnz	r3, 801d1c8 <_strtod_l+0xa88>
 801d19a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801d19e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1a6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801d1aa:	d401      	bmi.n	801d1b0 <_strtod_l+0xa70>
 801d1ac:	ee20 8b08 	vmul.f64	d8, d0, d8
 801d1b0:	eeb1 7b48 	vneg.f64	d7, d8
 801d1b4:	ec53 2b17 	vmov	r2, r3, d7
 801d1b8:	e7a8      	b.n	801d10c <_strtod_l+0x9cc>
 801d1ba:	f1b8 0f01 	cmp.w	r8, #1
 801d1be:	d103      	bne.n	801d1c8 <_strtod_l+0xa88>
 801d1c0:	f1b9 0f00 	cmp.w	r9, #0
 801d1c4:	f43f ad7d 	beq.w	801ccc2 <_strtod_l+0x582>
 801d1c8:	4b46      	ldr	r3, [pc, #280]	; (801d2e4 <_strtod_l+0xba4>)
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	e79c      	b.n	801d108 <_strtod_l+0x9c8>
 801d1ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801d1d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 801d1d6:	f1ba 0f00 	cmp.w	sl, #0
 801d1da:	d0e9      	beq.n	801d1b0 <_strtod_l+0xa70>
 801d1dc:	ec53 2b18 	vmov	r2, r3, d8
 801d1e0:	e794      	b.n	801d10c <_strtod_l+0x9cc>
 801d1e2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801d1e6:	9b04      	ldr	r3, [sp, #16]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d1bf      	bne.n	801d16c <_strtod_l+0xa2c>
 801d1ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d1f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d1f2:	0d1b      	lsrs	r3, r3, #20
 801d1f4:	051b      	lsls	r3, r3, #20
 801d1f6:	429a      	cmp	r2, r3
 801d1f8:	d1b8      	bne.n	801d16c <_strtod_l+0xa2c>
 801d1fa:	ec51 0b18 	vmov	r0, r1, d8
 801d1fe:	f7e3 faab 	bl	8000758 <__aeabi_d2lz>
 801d202:	f7e3 fa63 	bl	80006cc <__aeabi_l2d>
 801d206:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d20a:	ec41 0b17 	vmov	d7, r0, r1
 801d20e:	ea43 0308 	orr.w	r3, r3, r8
 801d212:	ea53 030a 	orrs.w	r3, r3, sl
 801d216:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d21a:	d03e      	beq.n	801d29a <_strtod_l+0xb5a>
 801d21c:	eeb4 8bca 	vcmpe.f64	d8, d10
 801d220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d224:	f53f ace2 	bmi.w	801cbec <_strtod_l+0x4ac>
 801d228:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801d22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d230:	dd9c      	ble.n	801d16c <_strtod_l+0xa2c>
 801d232:	e4db      	b.n	801cbec <_strtod_l+0x4ac>
 801d234:	9904      	ldr	r1, [sp, #16]
 801d236:	b301      	cbz	r1, 801d27a <_strtod_l+0xb3a>
 801d238:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d23a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801d23e:	d81c      	bhi.n	801d27a <_strtod_l+0xb3a>
 801d240:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801d2c8 <_strtod_l+0xb88>
 801d244:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d24c:	d811      	bhi.n	801d272 <_strtod_l+0xb32>
 801d24e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801d252:	ee18 3a10 	vmov	r3, s16
 801d256:	2b01      	cmp	r3, #1
 801d258:	bf38      	it	cc
 801d25a:	2301      	movcc	r3, #1
 801d25c:	ee08 3a10 	vmov	s16, r3
 801d260:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801d264:	f1ba 0f00 	cmp.w	sl, #0
 801d268:	d114      	bne.n	801d294 <_strtod_l+0xb54>
 801d26a:	eeb1 7b48 	vneg.f64	d7, d8
 801d26e:	ec53 2b17 	vmov	r2, r3, d7
 801d272:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d274:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801d278:	1a0b      	subs	r3, r1, r0
 801d27a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801d27e:	ec43 2b1c 	vmov	d12, r2, r3
 801d282:	f002 f8bb 	bl	801f3fc <__ulp>
 801d286:	ed9d 7b08 	vldr	d7, [sp, #32]
 801d28a:	eeac 7b00 	vfma.f64	d7, d12, d0
 801d28e:	ec59 8b17 	vmov	r8, r9, d7
 801d292:	e7a8      	b.n	801d1e6 <_strtod_l+0xaa6>
 801d294:	ec53 2b18 	vmov	r2, r3, d8
 801d298:	e7eb      	b.n	801d272 <_strtod_l+0xb32>
 801d29a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801d29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2a2:	f57f af63 	bpl.w	801d16c <_strtod_l+0xa2c>
 801d2a6:	e4a1      	b.n	801cbec <_strtod_l+0x4ac>
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d2b0:	6013      	str	r3, [r2, #0]
 801d2b2:	f7ff ba8d 	b.w	801c7d0 <_strtod_l+0x90>
 801d2b6:	2a65      	cmp	r2, #101	; 0x65
 801d2b8:	f43f ab89 	beq.w	801c9ce <_strtod_l+0x28e>
 801d2bc:	2a45      	cmp	r2, #69	; 0x45
 801d2be:	f43f ab86 	beq.w	801c9ce <_strtod_l+0x28e>
 801d2c2:	2101      	movs	r1, #1
 801d2c4:	f7ff bbbe 	b.w	801ca44 <_strtod_l+0x304>
 801d2c8:	ffc00000 	.word	0xffc00000
 801d2cc:	41dfffff 	.word	0x41dfffff
 801d2d0:	000fffff 	.word	0x000fffff
 801d2d4:	7ff00000 	.word	0x7ff00000
 801d2d8:	7fefffff 	.word	0x7fefffff
 801d2dc:	3ff00000 	.word	0x3ff00000
 801d2e0:	7c9fffff 	.word	0x7c9fffff
 801d2e4:	bff00000 	.word	0xbff00000
 801d2e8:	7fe00000 	.word	0x7fe00000

0801d2ec <_strtod_r>:
 801d2ec:	4b01      	ldr	r3, [pc, #4]	; (801d2f4 <_strtod_r+0x8>)
 801d2ee:	f7ff ba27 	b.w	801c740 <_strtod_l>
 801d2f2:	bf00      	nop
 801d2f4:	2400a190 	.word	0x2400a190

0801d2f8 <_strtol_l.isra.0>:
 801d2f8:	2b01      	cmp	r3, #1
 801d2fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2fe:	d001      	beq.n	801d304 <_strtol_l.isra.0+0xc>
 801d300:	2b24      	cmp	r3, #36	; 0x24
 801d302:	d906      	bls.n	801d312 <_strtol_l.isra.0+0x1a>
 801d304:	f7fe f81c 	bl	801b340 <__errno>
 801d308:	2316      	movs	r3, #22
 801d30a:	6003      	str	r3, [r0, #0]
 801d30c:	2000      	movs	r0, #0
 801d30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d312:	4f3a      	ldr	r7, [pc, #232]	; (801d3fc <_strtol_l.isra.0+0x104>)
 801d314:	468e      	mov	lr, r1
 801d316:	4676      	mov	r6, lr
 801d318:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801d31c:	5de5      	ldrb	r5, [r4, r7]
 801d31e:	f015 0508 	ands.w	r5, r5, #8
 801d322:	d1f8      	bne.n	801d316 <_strtol_l.isra.0+0x1e>
 801d324:	2c2d      	cmp	r4, #45	; 0x2d
 801d326:	d134      	bne.n	801d392 <_strtol_l.isra.0+0x9a>
 801d328:	f89e 4000 	ldrb.w	r4, [lr]
 801d32c:	f04f 0801 	mov.w	r8, #1
 801d330:	f106 0e02 	add.w	lr, r6, #2
 801d334:	2b00      	cmp	r3, #0
 801d336:	d05c      	beq.n	801d3f2 <_strtol_l.isra.0+0xfa>
 801d338:	2b10      	cmp	r3, #16
 801d33a:	d10c      	bne.n	801d356 <_strtol_l.isra.0+0x5e>
 801d33c:	2c30      	cmp	r4, #48	; 0x30
 801d33e:	d10a      	bne.n	801d356 <_strtol_l.isra.0+0x5e>
 801d340:	f89e 4000 	ldrb.w	r4, [lr]
 801d344:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d348:	2c58      	cmp	r4, #88	; 0x58
 801d34a:	d14d      	bne.n	801d3e8 <_strtol_l.isra.0+0xf0>
 801d34c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801d350:	2310      	movs	r3, #16
 801d352:	f10e 0e02 	add.w	lr, lr, #2
 801d356:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801d35a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d35e:	2600      	movs	r6, #0
 801d360:	fbbc f9f3 	udiv	r9, ip, r3
 801d364:	4635      	mov	r5, r6
 801d366:	fb03 ca19 	mls	sl, r3, r9, ip
 801d36a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801d36e:	2f09      	cmp	r7, #9
 801d370:	d818      	bhi.n	801d3a4 <_strtol_l.isra.0+0xac>
 801d372:	463c      	mov	r4, r7
 801d374:	42a3      	cmp	r3, r4
 801d376:	dd24      	ble.n	801d3c2 <_strtol_l.isra.0+0xca>
 801d378:	2e00      	cmp	r6, #0
 801d37a:	db1f      	blt.n	801d3bc <_strtol_l.isra.0+0xc4>
 801d37c:	45a9      	cmp	r9, r5
 801d37e:	d31d      	bcc.n	801d3bc <_strtol_l.isra.0+0xc4>
 801d380:	d101      	bne.n	801d386 <_strtol_l.isra.0+0x8e>
 801d382:	45a2      	cmp	sl, r4
 801d384:	db1a      	blt.n	801d3bc <_strtol_l.isra.0+0xc4>
 801d386:	fb05 4503 	mla	r5, r5, r3, r4
 801d38a:	2601      	movs	r6, #1
 801d38c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801d390:	e7eb      	b.n	801d36a <_strtol_l.isra.0+0x72>
 801d392:	2c2b      	cmp	r4, #43	; 0x2b
 801d394:	bf08      	it	eq
 801d396:	f89e 4000 	ldrbeq.w	r4, [lr]
 801d39a:	46a8      	mov	r8, r5
 801d39c:	bf08      	it	eq
 801d39e:	f106 0e02 	addeq.w	lr, r6, #2
 801d3a2:	e7c7      	b.n	801d334 <_strtol_l.isra.0+0x3c>
 801d3a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801d3a8:	2f19      	cmp	r7, #25
 801d3aa:	d801      	bhi.n	801d3b0 <_strtol_l.isra.0+0xb8>
 801d3ac:	3c37      	subs	r4, #55	; 0x37
 801d3ae:	e7e1      	b.n	801d374 <_strtol_l.isra.0+0x7c>
 801d3b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801d3b4:	2f19      	cmp	r7, #25
 801d3b6:	d804      	bhi.n	801d3c2 <_strtol_l.isra.0+0xca>
 801d3b8:	3c57      	subs	r4, #87	; 0x57
 801d3ba:	e7db      	b.n	801d374 <_strtol_l.isra.0+0x7c>
 801d3bc:	f04f 36ff 	mov.w	r6, #4294967295
 801d3c0:	e7e4      	b.n	801d38c <_strtol_l.isra.0+0x94>
 801d3c2:	2e00      	cmp	r6, #0
 801d3c4:	da05      	bge.n	801d3d2 <_strtol_l.isra.0+0xda>
 801d3c6:	2322      	movs	r3, #34	; 0x22
 801d3c8:	6003      	str	r3, [r0, #0]
 801d3ca:	4665      	mov	r5, ip
 801d3cc:	b942      	cbnz	r2, 801d3e0 <_strtol_l.isra.0+0xe8>
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	e79d      	b.n	801d30e <_strtol_l.isra.0+0x16>
 801d3d2:	f1b8 0f00 	cmp.w	r8, #0
 801d3d6:	d000      	beq.n	801d3da <_strtol_l.isra.0+0xe2>
 801d3d8:	426d      	negs	r5, r5
 801d3da:	2a00      	cmp	r2, #0
 801d3dc:	d0f7      	beq.n	801d3ce <_strtol_l.isra.0+0xd6>
 801d3de:	b10e      	cbz	r6, 801d3e4 <_strtol_l.isra.0+0xec>
 801d3e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801d3e4:	6011      	str	r1, [r2, #0]
 801d3e6:	e7f2      	b.n	801d3ce <_strtol_l.isra.0+0xd6>
 801d3e8:	2430      	movs	r4, #48	; 0x30
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d1b3      	bne.n	801d356 <_strtol_l.isra.0+0x5e>
 801d3ee:	2308      	movs	r3, #8
 801d3f0:	e7b1      	b.n	801d356 <_strtol_l.isra.0+0x5e>
 801d3f2:	2c30      	cmp	r4, #48	; 0x30
 801d3f4:	d0a4      	beq.n	801d340 <_strtol_l.isra.0+0x48>
 801d3f6:	230a      	movs	r3, #10
 801d3f8:	e7ad      	b.n	801d356 <_strtol_l.isra.0+0x5e>
 801d3fa:	bf00      	nop
 801d3fc:	08029321 	.word	0x08029321

0801d400 <_strtol_r>:
 801d400:	f7ff bf7a 	b.w	801d2f8 <_strtol_l.isra.0>

0801d404 <strtol>:
 801d404:	4613      	mov	r3, r2
 801d406:	460a      	mov	r2, r1
 801d408:	4601      	mov	r1, r0
 801d40a:	4802      	ldr	r0, [pc, #8]	; (801d414 <strtol+0x10>)
 801d40c:	6800      	ldr	r0, [r0, #0]
 801d40e:	f7ff bf73 	b.w	801d2f8 <_strtol_l.isra.0>
 801d412:	bf00      	nop
 801d414:	2400a128 	.word	0x2400a128

0801d418 <__swbuf_r>:
 801d418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d41a:	460e      	mov	r6, r1
 801d41c:	4614      	mov	r4, r2
 801d41e:	4605      	mov	r5, r0
 801d420:	b118      	cbz	r0, 801d42a <__swbuf_r+0x12>
 801d422:	6983      	ldr	r3, [r0, #24]
 801d424:	b90b      	cbnz	r3, 801d42a <__swbuf_r+0x12>
 801d426:	f000 ffe7 	bl	801e3f8 <__sinit>
 801d42a:	4b21      	ldr	r3, [pc, #132]	; (801d4b0 <__swbuf_r+0x98>)
 801d42c:	429c      	cmp	r4, r3
 801d42e:	d12b      	bne.n	801d488 <__swbuf_r+0x70>
 801d430:	686c      	ldr	r4, [r5, #4]
 801d432:	69a3      	ldr	r3, [r4, #24]
 801d434:	60a3      	str	r3, [r4, #8]
 801d436:	89a3      	ldrh	r3, [r4, #12]
 801d438:	071a      	lsls	r2, r3, #28
 801d43a:	d52f      	bpl.n	801d49c <__swbuf_r+0x84>
 801d43c:	6923      	ldr	r3, [r4, #16]
 801d43e:	b36b      	cbz	r3, 801d49c <__swbuf_r+0x84>
 801d440:	6923      	ldr	r3, [r4, #16]
 801d442:	6820      	ldr	r0, [r4, #0]
 801d444:	1ac0      	subs	r0, r0, r3
 801d446:	6963      	ldr	r3, [r4, #20]
 801d448:	b2f6      	uxtb	r6, r6
 801d44a:	4283      	cmp	r3, r0
 801d44c:	4637      	mov	r7, r6
 801d44e:	dc04      	bgt.n	801d45a <__swbuf_r+0x42>
 801d450:	4621      	mov	r1, r4
 801d452:	4628      	mov	r0, r5
 801d454:	f000 ff3c 	bl	801e2d0 <_fflush_r>
 801d458:	bb30      	cbnz	r0, 801d4a8 <__swbuf_r+0x90>
 801d45a:	68a3      	ldr	r3, [r4, #8]
 801d45c:	3b01      	subs	r3, #1
 801d45e:	60a3      	str	r3, [r4, #8]
 801d460:	6823      	ldr	r3, [r4, #0]
 801d462:	1c5a      	adds	r2, r3, #1
 801d464:	6022      	str	r2, [r4, #0]
 801d466:	701e      	strb	r6, [r3, #0]
 801d468:	6963      	ldr	r3, [r4, #20]
 801d46a:	3001      	adds	r0, #1
 801d46c:	4283      	cmp	r3, r0
 801d46e:	d004      	beq.n	801d47a <__swbuf_r+0x62>
 801d470:	89a3      	ldrh	r3, [r4, #12]
 801d472:	07db      	lsls	r3, r3, #31
 801d474:	d506      	bpl.n	801d484 <__swbuf_r+0x6c>
 801d476:	2e0a      	cmp	r6, #10
 801d478:	d104      	bne.n	801d484 <__swbuf_r+0x6c>
 801d47a:	4621      	mov	r1, r4
 801d47c:	4628      	mov	r0, r5
 801d47e:	f000 ff27 	bl	801e2d0 <_fflush_r>
 801d482:	b988      	cbnz	r0, 801d4a8 <__swbuf_r+0x90>
 801d484:	4638      	mov	r0, r7
 801d486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d488:	4b0a      	ldr	r3, [pc, #40]	; (801d4b4 <__swbuf_r+0x9c>)
 801d48a:	429c      	cmp	r4, r3
 801d48c:	d101      	bne.n	801d492 <__swbuf_r+0x7a>
 801d48e:	68ac      	ldr	r4, [r5, #8]
 801d490:	e7cf      	b.n	801d432 <__swbuf_r+0x1a>
 801d492:	4b09      	ldr	r3, [pc, #36]	; (801d4b8 <__swbuf_r+0xa0>)
 801d494:	429c      	cmp	r4, r3
 801d496:	bf08      	it	eq
 801d498:	68ec      	ldreq	r4, [r5, #12]
 801d49a:	e7ca      	b.n	801d432 <__swbuf_r+0x1a>
 801d49c:	4621      	mov	r1, r4
 801d49e:	4628      	mov	r0, r5
 801d4a0:	f000 f80c 	bl	801d4bc <__swsetup_r>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	d0cb      	beq.n	801d440 <__swbuf_r+0x28>
 801d4a8:	f04f 37ff 	mov.w	r7, #4294967295
 801d4ac:	e7ea      	b.n	801d484 <__swbuf_r+0x6c>
 801d4ae:	bf00      	nop
 801d4b0:	080294d8 	.word	0x080294d8
 801d4b4:	080294f8 	.word	0x080294f8
 801d4b8:	080294b8 	.word	0x080294b8

0801d4bc <__swsetup_r>:
 801d4bc:	4b32      	ldr	r3, [pc, #200]	; (801d588 <__swsetup_r+0xcc>)
 801d4be:	b570      	push	{r4, r5, r6, lr}
 801d4c0:	681d      	ldr	r5, [r3, #0]
 801d4c2:	4606      	mov	r6, r0
 801d4c4:	460c      	mov	r4, r1
 801d4c6:	b125      	cbz	r5, 801d4d2 <__swsetup_r+0x16>
 801d4c8:	69ab      	ldr	r3, [r5, #24]
 801d4ca:	b913      	cbnz	r3, 801d4d2 <__swsetup_r+0x16>
 801d4cc:	4628      	mov	r0, r5
 801d4ce:	f000 ff93 	bl	801e3f8 <__sinit>
 801d4d2:	4b2e      	ldr	r3, [pc, #184]	; (801d58c <__swsetup_r+0xd0>)
 801d4d4:	429c      	cmp	r4, r3
 801d4d6:	d10f      	bne.n	801d4f8 <__swsetup_r+0x3c>
 801d4d8:	686c      	ldr	r4, [r5, #4]
 801d4da:	89a3      	ldrh	r3, [r4, #12]
 801d4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d4e0:	0719      	lsls	r1, r3, #28
 801d4e2:	d42c      	bmi.n	801d53e <__swsetup_r+0x82>
 801d4e4:	06dd      	lsls	r5, r3, #27
 801d4e6:	d411      	bmi.n	801d50c <__swsetup_r+0x50>
 801d4e8:	2309      	movs	r3, #9
 801d4ea:	6033      	str	r3, [r6, #0]
 801d4ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d4f0:	81a3      	strh	r3, [r4, #12]
 801d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 801d4f6:	e03e      	b.n	801d576 <__swsetup_r+0xba>
 801d4f8:	4b25      	ldr	r3, [pc, #148]	; (801d590 <__swsetup_r+0xd4>)
 801d4fa:	429c      	cmp	r4, r3
 801d4fc:	d101      	bne.n	801d502 <__swsetup_r+0x46>
 801d4fe:	68ac      	ldr	r4, [r5, #8]
 801d500:	e7eb      	b.n	801d4da <__swsetup_r+0x1e>
 801d502:	4b24      	ldr	r3, [pc, #144]	; (801d594 <__swsetup_r+0xd8>)
 801d504:	429c      	cmp	r4, r3
 801d506:	bf08      	it	eq
 801d508:	68ec      	ldreq	r4, [r5, #12]
 801d50a:	e7e6      	b.n	801d4da <__swsetup_r+0x1e>
 801d50c:	0758      	lsls	r0, r3, #29
 801d50e:	d512      	bpl.n	801d536 <__swsetup_r+0x7a>
 801d510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d512:	b141      	cbz	r1, 801d526 <__swsetup_r+0x6a>
 801d514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d518:	4299      	cmp	r1, r3
 801d51a:	d002      	beq.n	801d522 <__swsetup_r+0x66>
 801d51c:	4630      	mov	r0, r6
 801d51e:	f7fd ff8b 	bl	801b438 <_free_r>
 801d522:	2300      	movs	r3, #0
 801d524:	6363      	str	r3, [r4, #52]	; 0x34
 801d526:	89a3      	ldrh	r3, [r4, #12]
 801d528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d52c:	81a3      	strh	r3, [r4, #12]
 801d52e:	2300      	movs	r3, #0
 801d530:	6063      	str	r3, [r4, #4]
 801d532:	6923      	ldr	r3, [r4, #16]
 801d534:	6023      	str	r3, [r4, #0]
 801d536:	89a3      	ldrh	r3, [r4, #12]
 801d538:	f043 0308 	orr.w	r3, r3, #8
 801d53c:	81a3      	strh	r3, [r4, #12]
 801d53e:	6923      	ldr	r3, [r4, #16]
 801d540:	b94b      	cbnz	r3, 801d556 <__swsetup_r+0x9a>
 801d542:	89a3      	ldrh	r3, [r4, #12]
 801d544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d54c:	d003      	beq.n	801d556 <__swsetup_r+0x9a>
 801d54e:	4621      	mov	r1, r4
 801d550:	4630      	mov	r0, r6
 801d552:	f001 fb89 	bl	801ec68 <__smakebuf_r>
 801d556:	89a0      	ldrh	r0, [r4, #12]
 801d558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d55c:	f010 0301 	ands.w	r3, r0, #1
 801d560:	d00a      	beq.n	801d578 <__swsetup_r+0xbc>
 801d562:	2300      	movs	r3, #0
 801d564:	60a3      	str	r3, [r4, #8]
 801d566:	6963      	ldr	r3, [r4, #20]
 801d568:	425b      	negs	r3, r3
 801d56a:	61a3      	str	r3, [r4, #24]
 801d56c:	6923      	ldr	r3, [r4, #16]
 801d56e:	b943      	cbnz	r3, 801d582 <__swsetup_r+0xc6>
 801d570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d574:	d1ba      	bne.n	801d4ec <__swsetup_r+0x30>
 801d576:	bd70      	pop	{r4, r5, r6, pc}
 801d578:	0781      	lsls	r1, r0, #30
 801d57a:	bf58      	it	pl
 801d57c:	6963      	ldrpl	r3, [r4, #20]
 801d57e:	60a3      	str	r3, [r4, #8]
 801d580:	e7f4      	b.n	801d56c <__swsetup_r+0xb0>
 801d582:	2000      	movs	r0, #0
 801d584:	e7f7      	b.n	801d576 <__swsetup_r+0xba>
 801d586:	bf00      	nop
 801d588:	2400a128 	.word	0x2400a128
 801d58c:	080294d8 	.word	0x080294d8
 801d590:	080294f8 	.word	0x080294f8
 801d594:	080294b8 	.word	0x080294b8

0801d598 <abort>:
 801d598:	b508      	push	{r3, lr}
 801d59a:	2006      	movs	r0, #6
 801d59c:	f002 fa40 	bl	801fa20 <raise>
 801d5a0:	2001      	movs	r0, #1
 801d5a2:	f7e4 fc63 	bl	8001e6c <_exit>

0801d5a6 <quorem>:
 801d5a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5aa:	6903      	ldr	r3, [r0, #16]
 801d5ac:	690c      	ldr	r4, [r1, #16]
 801d5ae:	42a3      	cmp	r3, r4
 801d5b0:	4607      	mov	r7, r0
 801d5b2:	f2c0 8081 	blt.w	801d6b8 <quorem+0x112>
 801d5b6:	3c01      	subs	r4, #1
 801d5b8:	f101 0814 	add.w	r8, r1, #20
 801d5bc:	f100 0514 	add.w	r5, r0, #20
 801d5c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d5c4:	9301      	str	r3, [sp, #4]
 801d5c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d5ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d5ce:	3301      	adds	r3, #1
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d5d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d5da:	fbb2 f6f3 	udiv	r6, r2, r3
 801d5de:	d331      	bcc.n	801d644 <quorem+0x9e>
 801d5e0:	f04f 0e00 	mov.w	lr, #0
 801d5e4:	4640      	mov	r0, r8
 801d5e6:	46ac      	mov	ip, r5
 801d5e8:	46f2      	mov	sl, lr
 801d5ea:	f850 2b04 	ldr.w	r2, [r0], #4
 801d5ee:	b293      	uxth	r3, r2
 801d5f0:	fb06 e303 	mla	r3, r6, r3, lr
 801d5f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	ebaa 0303 	sub.w	r3, sl, r3
 801d5fe:	0c12      	lsrs	r2, r2, #16
 801d600:	f8dc a000 	ldr.w	sl, [ip]
 801d604:	fb06 e202 	mla	r2, r6, r2, lr
 801d608:	fa13 f38a 	uxtah	r3, r3, sl
 801d60c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d610:	fa1f fa82 	uxth.w	sl, r2
 801d614:	f8dc 2000 	ldr.w	r2, [ip]
 801d618:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801d61c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d620:	b29b      	uxth	r3, r3
 801d622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d626:	4581      	cmp	r9, r0
 801d628:	f84c 3b04 	str.w	r3, [ip], #4
 801d62c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d630:	d2db      	bcs.n	801d5ea <quorem+0x44>
 801d632:	f855 300b 	ldr.w	r3, [r5, fp]
 801d636:	b92b      	cbnz	r3, 801d644 <quorem+0x9e>
 801d638:	9b01      	ldr	r3, [sp, #4]
 801d63a:	3b04      	subs	r3, #4
 801d63c:	429d      	cmp	r5, r3
 801d63e:	461a      	mov	r2, r3
 801d640:	d32e      	bcc.n	801d6a0 <quorem+0xfa>
 801d642:	613c      	str	r4, [r7, #16]
 801d644:	4638      	mov	r0, r7
 801d646:	f001 fe35 	bl	801f2b4 <__mcmp>
 801d64a:	2800      	cmp	r0, #0
 801d64c:	db24      	blt.n	801d698 <quorem+0xf2>
 801d64e:	3601      	adds	r6, #1
 801d650:	4628      	mov	r0, r5
 801d652:	f04f 0c00 	mov.w	ip, #0
 801d656:	f858 2b04 	ldr.w	r2, [r8], #4
 801d65a:	f8d0 e000 	ldr.w	lr, [r0]
 801d65e:	b293      	uxth	r3, r2
 801d660:	ebac 0303 	sub.w	r3, ip, r3
 801d664:	0c12      	lsrs	r2, r2, #16
 801d666:	fa13 f38e 	uxtah	r3, r3, lr
 801d66a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d66e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d672:	b29b      	uxth	r3, r3
 801d674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d678:	45c1      	cmp	r9, r8
 801d67a:	f840 3b04 	str.w	r3, [r0], #4
 801d67e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d682:	d2e8      	bcs.n	801d656 <quorem+0xb0>
 801d684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d688:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d68c:	b922      	cbnz	r2, 801d698 <quorem+0xf2>
 801d68e:	3b04      	subs	r3, #4
 801d690:	429d      	cmp	r5, r3
 801d692:	461a      	mov	r2, r3
 801d694:	d30a      	bcc.n	801d6ac <quorem+0x106>
 801d696:	613c      	str	r4, [r7, #16]
 801d698:	4630      	mov	r0, r6
 801d69a:	b003      	add	sp, #12
 801d69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a0:	6812      	ldr	r2, [r2, #0]
 801d6a2:	3b04      	subs	r3, #4
 801d6a4:	2a00      	cmp	r2, #0
 801d6a6:	d1cc      	bne.n	801d642 <quorem+0x9c>
 801d6a8:	3c01      	subs	r4, #1
 801d6aa:	e7c7      	b.n	801d63c <quorem+0x96>
 801d6ac:	6812      	ldr	r2, [r2, #0]
 801d6ae:	3b04      	subs	r3, #4
 801d6b0:	2a00      	cmp	r2, #0
 801d6b2:	d1f0      	bne.n	801d696 <quorem+0xf0>
 801d6b4:	3c01      	subs	r4, #1
 801d6b6:	e7eb      	b.n	801d690 <quorem+0xea>
 801d6b8:	2000      	movs	r0, #0
 801d6ba:	e7ee      	b.n	801d69a <quorem+0xf4>
 801d6bc:	0000      	movs	r0, r0
	...

0801d6c0 <_dtoa_r>:
 801d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c4:	ec59 8b10 	vmov	r8, r9, d0
 801d6c8:	b095      	sub	sp, #84	; 0x54
 801d6ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d6cc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801d6ce:	9107      	str	r1, [sp, #28]
 801d6d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801d6d4:	4606      	mov	r6, r0
 801d6d6:	9209      	str	r2, [sp, #36]	; 0x24
 801d6d8:	9310      	str	r3, [sp, #64]	; 0x40
 801d6da:	b975      	cbnz	r5, 801d6fa <_dtoa_r+0x3a>
 801d6dc:	2010      	movs	r0, #16
 801d6de:	f7fd fe6b 	bl	801b3b8 <malloc>
 801d6e2:	4602      	mov	r2, r0
 801d6e4:	6270      	str	r0, [r6, #36]	; 0x24
 801d6e6:	b920      	cbnz	r0, 801d6f2 <_dtoa_r+0x32>
 801d6e8:	4bab      	ldr	r3, [pc, #684]	; (801d998 <_dtoa_r+0x2d8>)
 801d6ea:	21ea      	movs	r1, #234	; 0xea
 801d6ec:	48ab      	ldr	r0, [pc, #684]	; (801d99c <_dtoa_r+0x2dc>)
 801d6ee:	f7fd fe05 	bl	801b2fc <__assert_func>
 801d6f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d6f6:	6005      	str	r5, [r0, #0]
 801d6f8:	60c5      	str	r5, [r0, #12]
 801d6fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d6fc:	6819      	ldr	r1, [r3, #0]
 801d6fe:	b151      	cbz	r1, 801d716 <_dtoa_r+0x56>
 801d700:	685a      	ldr	r2, [r3, #4]
 801d702:	604a      	str	r2, [r1, #4]
 801d704:	2301      	movs	r3, #1
 801d706:	4093      	lsls	r3, r2
 801d708:	608b      	str	r3, [r1, #8]
 801d70a:	4630      	mov	r0, r6
 801d70c:	f001 fb4a 	bl	801eda4 <_Bfree>
 801d710:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d712:	2200      	movs	r2, #0
 801d714:	601a      	str	r2, [r3, #0]
 801d716:	f1b9 0300 	subs.w	r3, r9, #0
 801d71a:	bfbb      	ittet	lt
 801d71c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d720:	9303      	strlt	r3, [sp, #12]
 801d722:	2300      	movge	r3, #0
 801d724:	2201      	movlt	r2, #1
 801d726:	bfac      	ite	ge
 801d728:	6023      	strge	r3, [r4, #0]
 801d72a:	6022      	strlt	r2, [r4, #0]
 801d72c:	4b9c      	ldr	r3, [pc, #624]	; (801d9a0 <_dtoa_r+0x2e0>)
 801d72e:	9c03      	ldr	r4, [sp, #12]
 801d730:	43a3      	bics	r3, r4
 801d732:	d11a      	bne.n	801d76a <_dtoa_r+0xaa>
 801d734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d736:	f242 730f 	movw	r3, #9999	; 0x270f
 801d73a:	6013      	str	r3, [r2, #0]
 801d73c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801d740:	ea53 0308 	orrs.w	r3, r3, r8
 801d744:	f000 8512 	beq.w	801e16c <_dtoa_r+0xaac>
 801d748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d74a:	b953      	cbnz	r3, 801d762 <_dtoa_r+0xa2>
 801d74c:	4b95      	ldr	r3, [pc, #596]	; (801d9a4 <_dtoa_r+0x2e4>)
 801d74e:	e01f      	b.n	801d790 <_dtoa_r+0xd0>
 801d750:	4b95      	ldr	r3, [pc, #596]	; (801d9a8 <_dtoa_r+0x2e8>)
 801d752:	9300      	str	r3, [sp, #0]
 801d754:	3308      	adds	r3, #8
 801d756:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801d758:	6013      	str	r3, [r2, #0]
 801d75a:	9800      	ldr	r0, [sp, #0]
 801d75c:	b015      	add	sp, #84	; 0x54
 801d75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d762:	4b90      	ldr	r3, [pc, #576]	; (801d9a4 <_dtoa_r+0x2e4>)
 801d764:	9300      	str	r3, [sp, #0]
 801d766:	3303      	adds	r3, #3
 801d768:	e7f5      	b.n	801d756 <_dtoa_r+0x96>
 801d76a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d76e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d776:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d77a:	d10b      	bne.n	801d794 <_dtoa_r+0xd4>
 801d77c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d77e:	2301      	movs	r3, #1
 801d780:	6013      	str	r3, [r2, #0]
 801d782:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d784:	2b00      	cmp	r3, #0
 801d786:	f000 84ee 	beq.w	801e166 <_dtoa_r+0xaa6>
 801d78a:	4888      	ldr	r0, [pc, #544]	; (801d9ac <_dtoa_r+0x2ec>)
 801d78c:	6018      	str	r0, [r3, #0]
 801d78e:	1e43      	subs	r3, r0, #1
 801d790:	9300      	str	r3, [sp, #0]
 801d792:	e7e2      	b.n	801d75a <_dtoa_r+0x9a>
 801d794:	a913      	add	r1, sp, #76	; 0x4c
 801d796:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d79a:	aa12      	add	r2, sp, #72	; 0x48
 801d79c:	4630      	mov	r0, r6
 801d79e:	f001 fea9 	bl	801f4f4 <__d2b>
 801d7a2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801d7a6:	4605      	mov	r5, r0
 801d7a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d7aa:	2900      	cmp	r1, #0
 801d7ac:	d047      	beq.n	801d83e <_dtoa_r+0x17e>
 801d7ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d7b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d7b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d7b8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801d7bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d7c0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801d7c4:	2400      	movs	r4, #0
 801d7c6:	ec43 2b16 	vmov	d6, r2, r3
 801d7ca:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801d7ce:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801d980 <_dtoa_r+0x2c0>
 801d7d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d7d6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801d988 <_dtoa_r+0x2c8>
 801d7da:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d7de:	eeb0 7b46 	vmov.f64	d7, d6
 801d7e2:	ee06 1a90 	vmov	s13, r1
 801d7e6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801d7ea:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801d990 <_dtoa_r+0x2d0>
 801d7ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d7f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801d7f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7fe:	ee16 ba90 	vmov	fp, s13
 801d802:	9411      	str	r4, [sp, #68]	; 0x44
 801d804:	d508      	bpl.n	801d818 <_dtoa_r+0x158>
 801d806:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801d80a:	eeb4 6b47 	vcmp.f64	d6, d7
 801d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d812:	bf18      	it	ne
 801d814:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801d818:	f1bb 0f16 	cmp.w	fp, #22
 801d81c:	d832      	bhi.n	801d884 <_dtoa_r+0x1c4>
 801d81e:	4b64      	ldr	r3, [pc, #400]	; (801d9b0 <_dtoa_r+0x2f0>)
 801d820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d824:	ed93 7b00 	vldr	d7, [r3]
 801d828:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801d82c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d834:	d501      	bpl.n	801d83a <_dtoa_r+0x17a>
 801d836:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d83a:	2300      	movs	r3, #0
 801d83c:	e023      	b.n	801d886 <_dtoa_r+0x1c6>
 801d83e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801d840:	4401      	add	r1, r0
 801d842:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801d846:	2b20      	cmp	r3, #32
 801d848:	bfc3      	ittte	gt
 801d84a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d84e:	fa04 f303 	lslgt.w	r3, r4, r3
 801d852:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801d856:	f1c3 0320 	rsble	r3, r3, #32
 801d85a:	bfc6      	itte	gt
 801d85c:	fa28 f804 	lsrgt.w	r8, r8, r4
 801d860:	ea43 0308 	orrgt.w	r3, r3, r8
 801d864:	fa08 f303 	lslle.w	r3, r8, r3
 801d868:	ee07 3a90 	vmov	s15, r3
 801d86c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d870:	3901      	subs	r1, #1
 801d872:	ed8d 7b00 	vstr	d7, [sp]
 801d876:	9c01      	ldr	r4, [sp, #4]
 801d878:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d87c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801d880:	2401      	movs	r4, #1
 801d882:	e7a0      	b.n	801d7c6 <_dtoa_r+0x106>
 801d884:	2301      	movs	r3, #1
 801d886:	930f      	str	r3, [sp, #60]	; 0x3c
 801d888:	1a43      	subs	r3, r0, r1
 801d88a:	1e5a      	subs	r2, r3, #1
 801d88c:	bf45      	ittet	mi
 801d88e:	f1c3 0301 	rsbmi	r3, r3, #1
 801d892:	9305      	strmi	r3, [sp, #20]
 801d894:	2300      	movpl	r3, #0
 801d896:	2300      	movmi	r3, #0
 801d898:	9206      	str	r2, [sp, #24]
 801d89a:	bf54      	ite	pl
 801d89c:	9305      	strpl	r3, [sp, #20]
 801d89e:	9306      	strmi	r3, [sp, #24]
 801d8a0:	f1bb 0f00 	cmp.w	fp, #0
 801d8a4:	db18      	blt.n	801d8d8 <_dtoa_r+0x218>
 801d8a6:	9b06      	ldr	r3, [sp, #24]
 801d8a8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801d8ac:	445b      	add	r3, fp
 801d8ae:	9306      	str	r3, [sp, #24]
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	9a07      	ldr	r2, [sp, #28]
 801d8b4:	2a09      	cmp	r2, #9
 801d8b6:	d849      	bhi.n	801d94c <_dtoa_r+0x28c>
 801d8b8:	2a05      	cmp	r2, #5
 801d8ba:	bfc4      	itt	gt
 801d8bc:	3a04      	subgt	r2, #4
 801d8be:	9207      	strgt	r2, [sp, #28]
 801d8c0:	9a07      	ldr	r2, [sp, #28]
 801d8c2:	f1a2 0202 	sub.w	r2, r2, #2
 801d8c6:	bfcc      	ite	gt
 801d8c8:	2400      	movgt	r4, #0
 801d8ca:	2401      	movle	r4, #1
 801d8cc:	2a03      	cmp	r2, #3
 801d8ce:	d848      	bhi.n	801d962 <_dtoa_r+0x2a2>
 801d8d0:	e8df f002 	tbb	[pc, r2]
 801d8d4:	3a2c2e0b 	.word	0x3a2c2e0b
 801d8d8:	9b05      	ldr	r3, [sp, #20]
 801d8da:	2200      	movs	r2, #0
 801d8dc:	eba3 030b 	sub.w	r3, r3, fp
 801d8e0:	9305      	str	r3, [sp, #20]
 801d8e2:	920e      	str	r2, [sp, #56]	; 0x38
 801d8e4:	f1cb 0300 	rsb	r3, fp, #0
 801d8e8:	e7e3      	b.n	801d8b2 <_dtoa_r+0x1f2>
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	9208      	str	r2, [sp, #32]
 801d8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8f0:	2a00      	cmp	r2, #0
 801d8f2:	dc39      	bgt.n	801d968 <_dtoa_r+0x2a8>
 801d8f4:	f04f 0a01 	mov.w	sl, #1
 801d8f8:	46d1      	mov	r9, sl
 801d8fa:	4652      	mov	r2, sl
 801d8fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d900:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801d902:	2100      	movs	r1, #0
 801d904:	6079      	str	r1, [r7, #4]
 801d906:	2004      	movs	r0, #4
 801d908:	f100 0c14 	add.w	ip, r0, #20
 801d90c:	4594      	cmp	ip, r2
 801d90e:	6879      	ldr	r1, [r7, #4]
 801d910:	d92f      	bls.n	801d972 <_dtoa_r+0x2b2>
 801d912:	4630      	mov	r0, r6
 801d914:	930c      	str	r3, [sp, #48]	; 0x30
 801d916:	f001 fa05 	bl	801ed24 <_Balloc>
 801d91a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d91c:	9000      	str	r0, [sp, #0]
 801d91e:	4602      	mov	r2, r0
 801d920:	2800      	cmp	r0, #0
 801d922:	d149      	bne.n	801d9b8 <_dtoa_r+0x2f8>
 801d924:	4b23      	ldr	r3, [pc, #140]	; (801d9b4 <_dtoa_r+0x2f4>)
 801d926:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d92a:	e6df      	b.n	801d6ec <_dtoa_r+0x2c>
 801d92c:	2201      	movs	r2, #1
 801d92e:	e7dd      	b.n	801d8ec <_dtoa_r+0x22c>
 801d930:	2200      	movs	r2, #0
 801d932:	9208      	str	r2, [sp, #32]
 801d934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d936:	eb0b 0a02 	add.w	sl, fp, r2
 801d93a:	f10a 0901 	add.w	r9, sl, #1
 801d93e:	464a      	mov	r2, r9
 801d940:	2a01      	cmp	r2, #1
 801d942:	bfb8      	it	lt
 801d944:	2201      	movlt	r2, #1
 801d946:	e7db      	b.n	801d900 <_dtoa_r+0x240>
 801d948:	2201      	movs	r2, #1
 801d94a:	e7f2      	b.n	801d932 <_dtoa_r+0x272>
 801d94c:	2401      	movs	r4, #1
 801d94e:	2200      	movs	r2, #0
 801d950:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801d954:	f04f 3aff 	mov.w	sl, #4294967295
 801d958:	2100      	movs	r1, #0
 801d95a:	46d1      	mov	r9, sl
 801d95c:	2212      	movs	r2, #18
 801d95e:	9109      	str	r1, [sp, #36]	; 0x24
 801d960:	e7ce      	b.n	801d900 <_dtoa_r+0x240>
 801d962:	2201      	movs	r2, #1
 801d964:	9208      	str	r2, [sp, #32]
 801d966:	e7f5      	b.n	801d954 <_dtoa_r+0x294>
 801d968:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801d96c:	46d1      	mov	r9, sl
 801d96e:	4652      	mov	r2, sl
 801d970:	e7c6      	b.n	801d900 <_dtoa_r+0x240>
 801d972:	3101      	adds	r1, #1
 801d974:	6079      	str	r1, [r7, #4]
 801d976:	0040      	lsls	r0, r0, #1
 801d978:	e7c6      	b.n	801d908 <_dtoa_r+0x248>
 801d97a:	bf00      	nop
 801d97c:	f3af 8000 	nop.w
 801d980:	636f4361 	.word	0x636f4361
 801d984:	3fd287a7 	.word	0x3fd287a7
 801d988:	8b60c8b3 	.word	0x8b60c8b3
 801d98c:	3fc68a28 	.word	0x3fc68a28
 801d990:	509f79fb 	.word	0x509f79fb
 801d994:	3fd34413 	.word	0x3fd34413
 801d998:	0802942e 	.word	0x0802942e
 801d99c:	08029445 	.word	0x08029445
 801d9a0:	7ff00000 	.word	0x7ff00000
 801d9a4:	0802942a 	.word	0x0802942a
 801d9a8:	08029421 	.word	0x08029421
 801d9ac:	080292a2 	.word	0x080292a2
 801d9b0:	08029620 	.word	0x08029620
 801d9b4:	080294a4 	.word	0x080294a4
 801d9b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801d9ba:	9900      	ldr	r1, [sp, #0]
 801d9bc:	6011      	str	r1, [r2, #0]
 801d9be:	f1b9 0f0e 	cmp.w	r9, #14
 801d9c2:	d872      	bhi.n	801daaa <_dtoa_r+0x3ea>
 801d9c4:	2c00      	cmp	r4, #0
 801d9c6:	d070      	beq.n	801daaa <_dtoa_r+0x3ea>
 801d9c8:	f1bb 0f00 	cmp.w	fp, #0
 801d9cc:	f340 80a6 	ble.w	801db1c <_dtoa_r+0x45c>
 801d9d0:	49ca      	ldr	r1, [pc, #808]	; (801dcfc <_dtoa_r+0x63c>)
 801d9d2:	f00b 020f 	and.w	r2, fp, #15
 801d9d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801d9da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d9de:	ed92 7b00 	vldr	d7, [r2]
 801d9e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 801d9e6:	f000 808d 	beq.w	801db04 <_dtoa_r+0x444>
 801d9ea:	4ac5      	ldr	r2, [pc, #788]	; (801dd00 <_dtoa_r+0x640>)
 801d9ec:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801d9f0:	ed92 6b08 	vldr	d6, [r2, #32]
 801d9f4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801d9f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d9fc:	f001 010f 	and.w	r1, r1, #15
 801da00:	2203      	movs	r2, #3
 801da02:	48bf      	ldr	r0, [pc, #764]	; (801dd00 <_dtoa_r+0x640>)
 801da04:	2900      	cmp	r1, #0
 801da06:	d17f      	bne.n	801db08 <_dtoa_r+0x448>
 801da08:	ed9d 6b02 	vldr	d6, [sp, #8]
 801da0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801da10:	ed8d 7b02 	vstr	d7, [sp, #8]
 801da14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801da16:	2900      	cmp	r1, #0
 801da18:	f000 80b2 	beq.w	801db80 <_dtoa_r+0x4c0>
 801da1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801da20:	ed9d 7b02 	vldr	d7, [sp, #8]
 801da24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801da28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da2c:	f140 80a8 	bpl.w	801db80 <_dtoa_r+0x4c0>
 801da30:	f1b9 0f00 	cmp.w	r9, #0
 801da34:	f000 80a4 	beq.w	801db80 <_dtoa_r+0x4c0>
 801da38:	f1ba 0f00 	cmp.w	sl, #0
 801da3c:	dd31      	ble.n	801daa2 <_dtoa_r+0x3e2>
 801da3e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801da42:	ee27 7b06 	vmul.f64	d7, d7, d6
 801da46:	ed8d 7b02 	vstr	d7, [sp, #8]
 801da4a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801da4e:	3201      	adds	r2, #1
 801da50:	4650      	mov	r0, sl
 801da52:	ed9d 6b02 	vldr	d6, [sp, #8]
 801da56:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801da5a:	ee07 2a90 	vmov	s15, r2
 801da5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801da62:	eea7 5b06 	vfma.f64	d5, d7, d6
 801da66:	ed8d 5b02 	vstr	d5, [sp, #8]
 801da6a:	9c03      	ldr	r4, [sp, #12]
 801da6c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801da70:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801da74:	2800      	cmp	r0, #0
 801da76:	f040 8086 	bne.w	801db86 <_dtoa_r+0x4c6>
 801da7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801da7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801da82:	ec42 1b17 	vmov	d7, r1, r2
 801da86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801da8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da8e:	f300 8272 	bgt.w	801df76 <_dtoa_r+0x8b6>
 801da92:	eeb1 7b47 	vneg.f64	d7, d7
 801da96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801da9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da9e:	f100 8267 	bmi.w	801df70 <_dtoa_r+0x8b0>
 801daa2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801daa6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801daaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801daac:	2a00      	cmp	r2, #0
 801daae:	f2c0 8129 	blt.w	801dd04 <_dtoa_r+0x644>
 801dab2:	f1bb 0f0e 	cmp.w	fp, #14
 801dab6:	f300 8125 	bgt.w	801dd04 <_dtoa_r+0x644>
 801daba:	4b90      	ldr	r3, [pc, #576]	; (801dcfc <_dtoa_r+0x63c>)
 801dabc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801dac0:	ed93 6b00 	vldr	d6, [r3]
 801dac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	f280 80c3 	bge.w	801dc52 <_dtoa_r+0x592>
 801dacc:	f1b9 0f00 	cmp.w	r9, #0
 801dad0:	f300 80bf 	bgt.w	801dc52 <_dtoa_r+0x592>
 801dad4:	f040 824c 	bne.w	801df70 <_dtoa_r+0x8b0>
 801dad8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801dadc:	ee26 6b07 	vmul.f64	d6, d6, d7
 801dae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dae4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daec:	464c      	mov	r4, r9
 801daee:	464f      	mov	r7, r9
 801daf0:	f280 8222 	bge.w	801df38 <_dtoa_r+0x878>
 801daf4:	f8dd 8000 	ldr.w	r8, [sp]
 801daf8:	2331      	movs	r3, #49	; 0x31
 801dafa:	f808 3b01 	strb.w	r3, [r8], #1
 801dafe:	f10b 0b01 	add.w	fp, fp, #1
 801db02:	e21e      	b.n	801df42 <_dtoa_r+0x882>
 801db04:	2202      	movs	r2, #2
 801db06:	e77c      	b.n	801da02 <_dtoa_r+0x342>
 801db08:	07cc      	lsls	r4, r1, #31
 801db0a:	d504      	bpl.n	801db16 <_dtoa_r+0x456>
 801db0c:	ed90 6b00 	vldr	d6, [r0]
 801db10:	3201      	adds	r2, #1
 801db12:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db16:	1049      	asrs	r1, r1, #1
 801db18:	3008      	adds	r0, #8
 801db1a:	e773      	b.n	801da04 <_dtoa_r+0x344>
 801db1c:	d02e      	beq.n	801db7c <_dtoa_r+0x4bc>
 801db1e:	f1cb 0100 	rsb	r1, fp, #0
 801db22:	4a76      	ldr	r2, [pc, #472]	; (801dcfc <_dtoa_r+0x63c>)
 801db24:	f001 000f 	and.w	r0, r1, #15
 801db28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801db2c:	ed92 7b00 	vldr	d7, [r2]
 801db30:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801db34:	ee26 7b07 	vmul.f64	d7, d6, d7
 801db38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801db3c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801db40:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801db44:	486e      	ldr	r0, [pc, #440]	; (801dd00 <_dtoa_r+0x640>)
 801db46:	1109      	asrs	r1, r1, #4
 801db48:	2400      	movs	r4, #0
 801db4a:	2202      	movs	r2, #2
 801db4c:	b939      	cbnz	r1, 801db5e <_dtoa_r+0x49e>
 801db4e:	2c00      	cmp	r4, #0
 801db50:	f43f af60 	beq.w	801da14 <_dtoa_r+0x354>
 801db54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801db58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db5c:	e75a      	b.n	801da14 <_dtoa_r+0x354>
 801db5e:	07cf      	lsls	r7, r1, #31
 801db60:	d509      	bpl.n	801db76 <_dtoa_r+0x4b6>
 801db62:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801db66:	ed90 7b00 	vldr	d7, [r0]
 801db6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801db6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801db72:	3201      	adds	r2, #1
 801db74:	2401      	movs	r4, #1
 801db76:	1049      	asrs	r1, r1, #1
 801db78:	3008      	adds	r0, #8
 801db7a:	e7e7      	b.n	801db4c <_dtoa_r+0x48c>
 801db7c:	2202      	movs	r2, #2
 801db7e:	e749      	b.n	801da14 <_dtoa_r+0x354>
 801db80:	465f      	mov	r7, fp
 801db82:	4648      	mov	r0, r9
 801db84:	e765      	b.n	801da52 <_dtoa_r+0x392>
 801db86:	ec42 1b17 	vmov	d7, r1, r2
 801db8a:	4a5c      	ldr	r2, [pc, #368]	; (801dcfc <_dtoa_r+0x63c>)
 801db8c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801db90:	ed12 4b02 	vldr	d4, [r2, #-8]
 801db94:	9a00      	ldr	r2, [sp, #0]
 801db96:	1814      	adds	r4, r2, r0
 801db98:	9a08      	ldr	r2, [sp, #32]
 801db9a:	b352      	cbz	r2, 801dbf2 <_dtoa_r+0x532>
 801db9c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801dba0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801dba4:	f8dd 8000 	ldr.w	r8, [sp]
 801dba8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801dbac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801dbb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801dbb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801dbb8:	ee14 2a90 	vmov	r2, s9
 801dbbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801dbc0:	3230      	adds	r2, #48	; 0x30
 801dbc2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801dbc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbce:	f808 2b01 	strb.w	r2, [r8], #1
 801dbd2:	d439      	bmi.n	801dc48 <_dtoa_r+0x588>
 801dbd4:	ee32 5b46 	vsub.f64	d5, d2, d6
 801dbd8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801dbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbe0:	d472      	bmi.n	801dcc8 <_dtoa_r+0x608>
 801dbe2:	45a0      	cmp	r8, r4
 801dbe4:	f43f af5d 	beq.w	801daa2 <_dtoa_r+0x3e2>
 801dbe8:	ee27 7b03 	vmul.f64	d7, d7, d3
 801dbec:	ee26 6b03 	vmul.f64	d6, d6, d3
 801dbf0:	e7e0      	b.n	801dbb4 <_dtoa_r+0x4f4>
 801dbf2:	f8dd 8000 	ldr.w	r8, [sp]
 801dbf6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801dbfa:	4621      	mov	r1, r4
 801dbfc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801dc00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801dc04:	ee14 2a90 	vmov	r2, s9
 801dc08:	3230      	adds	r2, #48	; 0x30
 801dc0a:	f808 2b01 	strb.w	r2, [r8], #1
 801dc0e:	45a0      	cmp	r8, r4
 801dc10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801dc14:	ee36 6b45 	vsub.f64	d6, d6, d5
 801dc18:	d118      	bne.n	801dc4c <_dtoa_r+0x58c>
 801dc1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801dc1e:	ee37 4b05 	vadd.f64	d4, d7, d5
 801dc22:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801dc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc2a:	dc4d      	bgt.n	801dcc8 <_dtoa_r+0x608>
 801dc2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801dc30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc38:	f57f af33 	bpl.w	801daa2 <_dtoa_r+0x3e2>
 801dc3c:	4688      	mov	r8, r1
 801dc3e:	3901      	subs	r1, #1
 801dc40:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801dc44:	2b30      	cmp	r3, #48	; 0x30
 801dc46:	d0f9      	beq.n	801dc3c <_dtoa_r+0x57c>
 801dc48:	46bb      	mov	fp, r7
 801dc4a:	e02a      	b.n	801dca2 <_dtoa_r+0x5e2>
 801dc4c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801dc50:	e7d6      	b.n	801dc00 <_dtoa_r+0x540>
 801dc52:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dc56:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801dc5a:	f8dd 8000 	ldr.w	r8, [sp]
 801dc5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801dc62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801dc66:	ee15 3a10 	vmov	r3, s10
 801dc6a:	3330      	adds	r3, #48	; 0x30
 801dc6c:	f808 3b01 	strb.w	r3, [r8], #1
 801dc70:	9b00      	ldr	r3, [sp, #0]
 801dc72:	eba8 0303 	sub.w	r3, r8, r3
 801dc76:	4599      	cmp	r9, r3
 801dc78:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801dc7c:	eea3 7b46 	vfms.f64	d7, d3, d6
 801dc80:	d133      	bne.n	801dcea <_dtoa_r+0x62a>
 801dc82:	ee37 7b07 	vadd.f64	d7, d7, d7
 801dc86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc8e:	dc1a      	bgt.n	801dcc6 <_dtoa_r+0x606>
 801dc90:	eeb4 7b46 	vcmp.f64	d7, d6
 801dc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc98:	d103      	bne.n	801dca2 <_dtoa_r+0x5e2>
 801dc9a:	ee15 3a10 	vmov	r3, s10
 801dc9e:	07d9      	lsls	r1, r3, #31
 801dca0:	d411      	bmi.n	801dcc6 <_dtoa_r+0x606>
 801dca2:	4629      	mov	r1, r5
 801dca4:	4630      	mov	r0, r6
 801dca6:	f001 f87d 	bl	801eda4 <_Bfree>
 801dcaa:	2300      	movs	r3, #0
 801dcac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dcae:	f888 3000 	strb.w	r3, [r8]
 801dcb2:	f10b 0301 	add.w	r3, fp, #1
 801dcb6:	6013      	str	r3, [r2, #0]
 801dcb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	f43f ad4d 	beq.w	801d75a <_dtoa_r+0x9a>
 801dcc0:	f8c3 8000 	str.w	r8, [r3]
 801dcc4:	e549      	b.n	801d75a <_dtoa_r+0x9a>
 801dcc6:	465f      	mov	r7, fp
 801dcc8:	4643      	mov	r3, r8
 801dcca:	4698      	mov	r8, r3
 801dccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dcd0:	2a39      	cmp	r2, #57	; 0x39
 801dcd2:	d106      	bne.n	801dce2 <_dtoa_r+0x622>
 801dcd4:	9a00      	ldr	r2, [sp, #0]
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	d1f7      	bne.n	801dcca <_dtoa_r+0x60a>
 801dcda:	9900      	ldr	r1, [sp, #0]
 801dcdc:	2230      	movs	r2, #48	; 0x30
 801dcde:	3701      	adds	r7, #1
 801dce0:	700a      	strb	r2, [r1, #0]
 801dce2:	781a      	ldrb	r2, [r3, #0]
 801dce4:	3201      	adds	r2, #1
 801dce6:	701a      	strb	r2, [r3, #0]
 801dce8:	e7ae      	b.n	801dc48 <_dtoa_r+0x588>
 801dcea:	ee27 7b04 	vmul.f64	d7, d7, d4
 801dcee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801dcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcf6:	d1b2      	bne.n	801dc5e <_dtoa_r+0x59e>
 801dcf8:	e7d3      	b.n	801dca2 <_dtoa_r+0x5e2>
 801dcfa:	bf00      	nop
 801dcfc:	08029620 	.word	0x08029620
 801dd00:	080295f8 	.word	0x080295f8
 801dd04:	9908      	ldr	r1, [sp, #32]
 801dd06:	2900      	cmp	r1, #0
 801dd08:	f000 80d1 	beq.w	801deae <_dtoa_r+0x7ee>
 801dd0c:	9907      	ldr	r1, [sp, #28]
 801dd0e:	2901      	cmp	r1, #1
 801dd10:	f300 80b4 	bgt.w	801de7c <_dtoa_r+0x7bc>
 801dd14:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dd16:	2900      	cmp	r1, #0
 801dd18:	f000 80ac 	beq.w	801de74 <_dtoa_r+0x7b4>
 801dd1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dd20:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801dd24:	461c      	mov	r4, r3
 801dd26:	930a      	str	r3, [sp, #40]	; 0x28
 801dd28:	9b05      	ldr	r3, [sp, #20]
 801dd2a:	4413      	add	r3, r2
 801dd2c:	9305      	str	r3, [sp, #20]
 801dd2e:	9b06      	ldr	r3, [sp, #24]
 801dd30:	2101      	movs	r1, #1
 801dd32:	4413      	add	r3, r2
 801dd34:	4630      	mov	r0, r6
 801dd36:	9306      	str	r3, [sp, #24]
 801dd38:	f001 f93a 	bl	801efb0 <__i2b>
 801dd3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd3e:	4607      	mov	r7, r0
 801dd40:	f1b8 0f00 	cmp.w	r8, #0
 801dd44:	dd0d      	ble.n	801dd62 <_dtoa_r+0x6a2>
 801dd46:	9a06      	ldr	r2, [sp, #24]
 801dd48:	2a00      	cmp	r2, #0
 801dd4a:	dd0a      	ble.n	801dd62 <_dtoa_r+0x6a2>
 801dd4c:	4542      	cmp	r2, r8
 801dd4e:	9905      	ldr	r1, [sp, #20]
 801dd50:	bfa8      	it	ge
 801dd52:	4642      	movge	r2, r8
 801dd54:	1a89      	subs	r1, r1, r2
 801dd56:	9105      	str	r1, [sp, #20]
 801dd58:	9906      	ldr	r1, [sp, #24]
 801dd5a:	eba8 0802 	sub.w	r8, r8, r2
 801dd5e:	1a8a      	subs	r2, r1, r2
 801dd60:	9206      	str	r2, [sp, #24]
 801dd62:	b303      	cbz	r3, 801dda6 <_dtoa_r+0x6e6>
 801dd64:	9a08      	ldr	r2, [sp, #32]
 801dd66:	2a00      	cmp	r2, #0
 801dd68:	f000 80a6 	beq.w	801deb8 <_dtoa_r+0x7f8>
 801dd6c:	2c00      	cmp	r4, #0
 801dd6e:	dd13      	ble.n	801dd98 <_dtoa_r+0x6d8>
 801dd70:	4639      	mov	r1, r7
 801dd72:	4622      	mov	r2, r4
 801dd74:	4630      	mov	r0, r6
 801dd76:	930c      	str	r3, [sp, #48]	; 0x30
 801dd78:	f001 f9d6 	bl	801f128 <__pow5mult>
 801dd7c:	462a      	mov	r2, r5
 801dd7e:	4601      	mov	r1, r0
 801dd80:	4607      	mov	r7, r0
 801dd82:	4630      	mov	r0, r6
 801dd84:	f001 f92a 	bl	801efdc <__multiply>
 801dd88:	4629      	mov	r1, r5
 801dd8a:	900a      	str	r0, [sp, #40]	; 0x28
 801dd8c:	4630      	mov	r0, r6
 801dd8e:	f001 f809 	bl	801eda4 <_Bfree>
 801dd92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dd94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd96:	4615      	mov	r5, r2
 801dd98:	1b1a      	subs	r2, r3, r4
 801dd9a:	d004      	beq.n	801dda6 <_dtoa_r+0x6e6>
 801dd9c:	4629      	mov	r1, r5
 801dd9e:	4630      	mov	r0, r6
 801dda0:	f001 f9c2 	bl	801f128 <__pow5mult>
 801dda4:	4605      	mov	r5, r0
 801dda6:	2101      	movs	r1, #1
 801dda8:	4630      	mov	r0, r6
 801ddaa:	f001 f901 	bl	801efb0 <__i2b>
 801ddae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	4604      	mov	r4, r0
 801ddb4:	f340 8082 	ble.w	801debc <_dtoa_r+0x7fc>
 801ddb8:	461a      	mov	r2, r3
 801ddba:	4601      	mov	r1, r0
 801ddbc:	4630      	mov	r0, r6
 801ddbe:	f001 f9b3 	bl	801f128 <__pow5mult>
 801ddc2:	9b07      	ldr	r3, [sp, #28]
 801ddc4:	2b01      	cmp	r3, #1
 801ddc6:	4604      	mov	r4, r0
 801ddc8:	dd7b      	ble.n	801dec2 <_dtoa_r+0x802>
 801ddca:	2300      	movs	r3, #0
 801ddcc:	930a      	str	r3, [sp, #40]	; 0x28
 801ddce:	6922      	ldr	r2, [r4, #16]
 801ddd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ddd4:	6910      	ldr	r0, [r2, #16]
 801ddd6:	f001 f89b 	bl	801ef10 <__hi0bits>
 801ddda:	f1c0 0020 	rsb	r0, r0, #32
 801ddde:	9b06      	ldr	r3, [sp, #24]
 801dde0:	4418      	add	r0, r3
 801dde2:	f010 001f 	ands.w	r0, r0, #31
 801dde6:	f000 808d 	beq.w	801df04 <_dtoa_r+0x844>
 801ddea:	f1c0 0220 	rsb	r2, r0, #32
 801ddee:	2a04      	cmp	r2, #4
 801ddf0:	f340 8086 	ble.w	801df00 <_dtoa_r+0x840>
 801ddf4:	f1c0 001c 	rsb	r0, r0, #28
 801ddf8:	9b05      	ldr	r3, [sp, #20]
 801ddfa:	4403      	add	r3, r0
 801ddfc:	9305      	str	r3, [sp, #20]
 801ddfe:	9b06      	ldr	r3, [sp, #24]
 801de00:	4403      	add	r3, r0
 801de02:	4480      	add	r8, r0
 801de04:	9306      	str	r3, [sp, #24]
 801de06:	9b05      	ldr	r3, [sp, #20]
 801de08:	2b00      	cmp	r3, #0
 801de0a:	dd05      	ble.n	801de18 <_dtoa_r+0x758>
 801de0c:	4629      	mov	r1, r5
 801de0e:	461a      	mov	r2, r3
 801de10:	4630      	mov	r0, r6
 801de12:	f001 f9e3 	bl	801f1dc <__lshift>
 801de16:	4605      	mov	r5, r0
 801de18:	9b06      	ldr	r3, [sp, #24]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	dd05      	ble.n	801de2a <_dtoa_r+0x76a>
 801de1e:	4621      	mov	r1, r4
 801de20:	461a      	mov	r2, r3
 801de22:	4630      	mov	r0, r6
 801de24:	f001 f9da 	bl	801f1dc <__lshift>
 801de28:	4604      	mov	r4, r0
 801de2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d06b      	beq.n	801df08 <_dtoa_r+0x848>
 801de30:	4621      	mov	r1, r4
 801de32:	4628      	mov	r0, r5
 801de34:	f001 fa3e 	bl	801f2b4 <__mcmp>
 801de38:	2800      	cmp	r0, #0
 801de3a:	da65      	bge.n	801df08 <_dtoa_r+0x848>
 801de3c:	2300      	movs	r3, #0
 801de3e:	4629      	mov	r1, r5
 801de40:	220a      	movs	r2, #10
 801de42:	4630      	mov	r0, r6
 801de44:	f000 ffd0 	bl	801ede8 <__multadd>
 801de48:	9b08      	ldr	r3, [sp, #32]
 801de4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801de4e:	4605      	mov	r5, r0
 801de50:	2b00      	cmp	r3, #0
 801de52:	f000 8192 	beq.w	801e17a <_dtoa_r+0xaba>
 801de56:	4639      	mov	r1, r7
 801de58:	2300      	movs	r3, #0
 801de5a:	220a      	movs	r2, #10
 801de5c:	4630      	mov	r0, r6
 801de5e:	f000 ffc3 	bl	801ede8 <__multadd>
 801de62:	f1ba 0f00 	cmp.w	sl, #0
 801de66:	4607      	mov	r7, r0
 801de68:	f300 808e 	bgt.w	801df88 <_dtoa_r+0x8c8>
 801de6c:	9b07      	ldr	r3, [sp, #28]
 801de6e:	2b02      	cmp	r3, #2
 801de70:	dc51      	bgt.n	801df16 <_dtoa_r+0x856>
 801de72:	e089      	b.n	801df88 <_dtoa_r+0x8c8>
 801de74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801de7a:	e751      	b.n	801dd20 <_dtoa_r+0x660>
 801de7c:	f109 34ff 	add.w	r4, r9, #4294967295
 801de80:	42a3      	cmp	r3, r4
 801de82:	bfbf      	itttt	lt
 801de84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801de86:	1ae3      	sublt	r3, r4, r3
 801de88:	18d2      	addlt	r2, r2, r3
 801de8a:	4613      	movlt	r3, r2
 801de8c:	bfb7      	itett	lt
 801de8e:	930e      	strlt	r3, [sp, #56]	; 0x38
 801de90:	1b1c      	subge	r4, r3, r4
 801de92:	4623      	movlt	r3, r4
 801de94:	2400      	movlt	r4, #0
 801de96:	f1b9 0f00 	cmp.w	r9, #0
 801de9a:	bfb5      	itete	lt
 801de9c:	9a05      	ldrlt	r2, [sp, #20]
 801de9e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801dea2:	eba2 0809 	sublt.w	r8, r2, r9
 801dea6:	464a      	movge	r2, r9
 801dea8:	bfb8      	it	lt
 801deaa:	2200      	movlt	r2, #0
 801deac:	e73b      	b.n	801dd26 <_dtoa_r+0x666>
 801deae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801deb2:	9f08      	ldr	r7, [sp, #32]
 801deb4:	461c      	mov	r4, r3
 801deb6:	e743      	b.n	801dd40 <_dtoa_r+0x680>
 801deb8:	461a      	mov	r2, r3
 801deba:	e76f      	b.n	801dd9c <_dtoa_r+0x6dc>
 801debc:	9b07      	ldr	r3, [sp, #28]
 801debe:	2b01      	cmp	r3, #1
 801dec0:	dc18      	bgt.n	801def4 <_dtoa_r+0x834>
 801dec2:	9b02      	ldr	r3, [sp, #8]
 801dec4:	b9b3      	cbnz	r3, 801def4 <_dtoa_r+0x834>
 801dec6:	9b03      	ldr	r3, [sp, #12]
 801dec8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801decc:	b9a2      	cbnz	r2, 801def8 <_dtoa_r+0x838>
 801dece:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ded2:	0d12      	lsrs	r2, r2, #20
 801ded4:	0512      	lsls	r2, r2, #20
 801ded6:	b18a      	cbz	r2, 801defc <_dtoa_r+0x83c>
 801ded8:	9b05      	ldr	r3, [sp, #20]
 801deda:	3301      	adds	r3, #1
 801dedc:	9305      	str	r3, [sp, #20]
 801dede:	9b06      	ldr	r3, [sp, #24]
 801dee0:	3301      	adds	r3, #1
 801dee2:	9306      	str	r3, [sp, #24]
 801dee4:	2301      	movs	r3, #1
 801dee6:	930a      	str	r3, [sp, #40]	; 0x28
 801dee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801deea:	2b00      	cmp	r3, #0
 801deec:	f47f af6f 	bne.w	801ddce <_dtoa_r+0x70e>
 801def0:	2001      	movs	r0, #1
 801def2:	e774      	b.n	801ddde <_dtoa_r+0x71e>
 801def4:	2300      	movs	r3, #0
 801def6:	e7f6      	b.n	801dee6 <_dtoa_r+0x826>
 801def8:	9b02      	ldr	r3, [sp, #8]
 801defa:	e7f4      	b.n	801dee6 <_dtoa_r+0x826>
 801defc:	920a      	str	r2, [sp, #40]	; 0x28
 801defe:	e7f3      	b.n	801dee8 <_dtoa_r+0x828>
 801df00:	d081      	beq.n	801de06 <_dtoa_r+0x746>
 801df02:	4610      	mov	r0, r2
 801df04:	301c      	adds	r0, #28
 801df06:	e777      	b.n	801ddf8 <_dtoa_r+0x738>
 801df08:	f1b9 0f00 	cmp.w	r9, #0
 801df0c:	dc37      	bgt.n	801df7e <_dtoa_r+0x8be>
 801df0e:	9b07      	ldr	r3, [sp, #28]
 801df10:	2b02      	cmp	r3, #2
 801df12:	dd34      	ble.n	801df7e <_dtoa_r+0x8be>
 801df14:	46ca      	mov	sl, r9
 801df16:	f1ba 0f00 	cmp.w	sl, #0
 801df1a:	d10d      	bne.n	801df38 <_dtoa_r+0x878>
 801df1c:	4621      	mov	r1, r4
 801df1e:	4653      	mov	r3, sl
 801df20:	2205      	movs	r2, #5
 801df22:	4630      	mov	r0, r6
 801df24:	f000 ff60 	bl	801ede8 <__multadd>
 801df28:	4601      	mov	r1, r0
 801df2a:	4604      	mov	r4, r0
 801df2c:	4628      	mov	r0, r5
 801df2e:	f001 f9c1 	bl	801f2b4 <__mcmp>
 801df32:	2800      	cmp	r0, #0
 801df34:	f73f adde 	bgt.w	801daf4 <_dtoa_r+0x434>
 801df38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df3a:	f8dd 8000 	ldr.w	r8, [sp]
 801df3e:	ea6f 0b03 	mvn.w	fp, r3
 801df42:	f04f 0900 	mov.w	r9, #0
 801df46:	4621      	mov	r1, r4
 801df48:	4630      	mov	r0, r6
 801df4a:	f000 ff2b 	bl	801eda4 <_Bfree>
 801df4e:	2f00      	cmp	r7, #0
 801df50:	f43f aea7 	beq.w	801dca2 <_dtoa_r+0x5e2>
 801df54:	f1b9 0f00 	cmp.w	r9, #0
 801df58:	d005      	beq.n	801df66 <_dtoa_r+0x8a6>
 801df5a:	45b9      	cmp	r9, r7
 801df5c:	d003      	beq.n	801df66 <_dtoa_r+0x8a6>
 801df5e:	4649      	mov	r1, r9
 801df60:	4630      	mov	r0, r6
 801df62:	f000 ff1f 	bl	801eda4 <_Bfree>
 801df66:	4639      	mov	r1, r7
 801df68:	4630      	mov	r0, r6
 801df6a:	f000 ff1b 	bl	801eda4 <_Bfree>
 801df6e:	e698      	b.n	801dca2 <_dtoa_r+0x5e2>
 801df70:	2400      	movs	r4, #0
 801df72:	4627      	mov	r7, r4
 801df74:	e7e0      	b.n	801df38 <_dtoa_r+0x878>
 801df76:	46bb      	mov	fp, r7
 801df78:	4604      	mov	r4, r0
 801df7a:	4607      	mov	r7, r0
 801df7c:	e5ba      	b.n	801daf4 <_dtoa_r+0x434>
 801df7e:	9b08      	ldr	r3, [sp, #32]
 801df80:	46ca      	mov	sl, r9
 801df82:	2b00      	cmp	r3, #0
 801df84:	f000 8100 	beq.w	801e188 <_dtoa_r+0xac8>
 801df88:	f1b8 0f00 	cmp.w	r8, #0
 801df8c:	dd05      	ble.n	801df9a <_dtoa_r+0x8da>
 801df8e:	4639      	mov	r1, r7
 801df90:	4642      	mov	r2, r8
 801df92:	4630      	mov	r0, r6
 801df94:	f001 f922 	bl	801f1dc <__lshift>
 801df98:	4607      	mov	r7, r0
 801df9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d05d      	beq.n	801e05c <_dtoa_r+0x99c>
 801dfa0:	6879      	ldr	r1, [r7, #4]
 801dfa2:	4630      	mov	r0, r6
 801dfa4:	f000 febe 	bl	801ed24 <_Balloc>
 801dfa8:	4680      	mov	r8, r0
 801dfaa:	b928      	cbnz	r0, 801dfb8 <_dtoa_r+0x8f8>
 801dfac:	4b82      	ldr	r3, [pc, #520]	; (801e1b8 <_dtoa_r+0xaf8>)
 801dfae:	4602      	mov	r2, r0
 801dfb0:	f240 21ea 	movw	r1, #746	; 0x2ea
 801dfb4:	f7ff bb9a 	b.w	801d6ec <_dtoa_r+0x2c>
 801dfb8:	693a      	ldr	r2, [r7, #16]
 801dfba:	3202      	adds	r2, #2
 801dfbc:	0092      	lsls	r2, r2, #2
 801dfbe:	f107 010c 	add.w	r1, r7, #12
 801dfc2:	300c      	adds	r0, #12
 801dfc4:	f7fd fa08 	bl	801b3d8 <memcpy>
 801dfc8:	2201      	movs	r2, #1
 801dfca:	4641      	mov	r1, r8
 801dfcc:	4630      	mov	r0, r6
 801dfce:	f001 f905 	bl	801f1dc <__lshift>
 801dfd2:	9b00      	ldr	r3, [sp, #0]
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	9305      	str	r3, [sp, #20]
 801dfd8:	9b00      	ldr	r3, [sp, #0]
 801dfda:	4453      	add	r3, sl
 801dfdc:	9309      	str	r3, [sp, #36]	; 0x24
 801dfde:	9b02      	ldr	r3, [sp, #8]
 801dfe0:	f003 0301 	and.w	r3, r3, #1
 801dfe4:	46b9      	mov	r9, r7
 801dfe6:	9308      	str	r3, [sp, #32]
 801dfe8:	4607      	mov	r7, r0
 801dfea:	9b05      	ldr	r3, [sp, #20]
 801dfec:	4621      	mov	r1, r4
 801dfee:	3b01      	subs	r3, #1
 801dff0:	4628      	mov	r0, r5
 801dff2:	9302      	str	r3, [sp, #8]
 801dff4:	f7ff fad7 	bl	801d5a6 <quorem>
 801dff8:	4603      	mov	r3, r0
 801dffa:	3330      	adds	r3, #48	; 0x30
 801dffc:	9006      	str	r0, [sp, #24]
 801dffe:	4649      	mov	r1, r9
 801e000:	4628      	mov	r0, r5
 801e002:	930a      	str	r3, [sp, #40]	; 0x28
 801e004:	f001 f956 	bl	801f2b4 <__mcmp>
 801e008:	463a      	mov	r2, r7
 801e00a:	4682      	mov	sl, r0
 801e00c:	4621      	mov	r1, r4
 801e00e:	4630      	mov	r0, r6
 801e010:	f001 f96c 	bl	801f2ec <__mdiff>
 801e014:	68c2      	ldr	r2, [r0, #12]
 801e016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e018:	4680      	mov	r8, r0
 801e01a:	bb0a      	cbnz	r2, 801e060 <_dtoa_r+0x9a0>
 801e01c:	4601      	mov	r1, r0
 801e01e:	4628      	mov	r0, r5
 801e020:	f001 f948 	bl	801f2b4 <__mcmp>
 801e024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e026:	4602      	mov	r2, r0
 801e028:	4641      	mov	r1, r8
 801e02a:	4630      	mov	r0, r6
 801e02c:	920e      	str	r2, [sp, #56]	; 0x38
 801e02e:	930a      	str	r3, [sp, #40]	; 0x28
 801e030:	f000 feb8 	bl	801eda4 <_Bfree>
 801e034:	9b07      	ldr	r3, [sp, #28]
 801e036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e038:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e03c:	ea43 0102 	orr.w	r1, r3, r2
 801e040:	9b08      	ldr	r3, [sp, #32]
 801e042:	430b      	orrs	r3, r1
 801e044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e046:	d10d      	bne.n	801e064 <_dtoa_r+0x9a4>
 801e048:	2b39      	cmp	r3, #57	; 0x39
 801e04a:	d029      	beq.n	801e0a0 <_dtoa_r+0x9e0>
 801e04c:	f1ba 0f00 	cmp.w	sl, #0
 801e050:	dd01      	ble.n	801e056 <_dtoa_r+0x996>
 801e052:	9b06      	ldr	r3, [sp, #24]
 801e054:	3331      	adds	r3, #49	; 0x31
 801e056:	9a02      	ldr	r2, [sp, #8]
 801e058:	7013      	strb	r3, [r2, #0]
 801e05a:	e774      	b.n	801df46 <_dtoa_r+0x886>
 801e05c:	4638      	mov	r0, r7
 801e05e:	e7b8      	b.n	801dfd2 <_dtoa_r+0x912>
 801e060:	2201      	movs	r2, #1
 801e062:	e7e1      	b.n	801e028 <_dtoa_r+0x968>
 801e064:	f1ba 0f00 	cmp.w	sl, #0
 801e068:	db06      	blt.n	801e078 <_dtoa_r+0x9b8>
 801e06a:	9907      	ldr	r1, [sp, #28]
 801e06c:	ea41 0a0a 	orr.w	sl, r1, sl
 801e070:	9908      	ldr	r1, [sp, #32]
 801e072:	ea5a 0101 	orrs.w	r1, sl, r1
 801e076:	d120      	bne.n	801e0ba <_dtoa_r+0x9fa>
 801e078:	2a00      	cmp	r2, #0
 801e07a:	ddec      	ble.n	801e056 <_dtoa_r+0x996>
 801e07c:	4629      	mov	r1, r5
 801e07e:	2201      	movs	r2, #1
 801e080:	4630      	mov	r0, r6
 801e082:	9305      	str	r3, [sp, #20]
 801e084:	f001 f8aa 	bl	801f1dc <__lshift>
 801e088:	4621      	mov	r1, r4
 801e08a:	4605      	mov	r5, r0
 801e08c:	f001 f912 	bl	801f2b4 <__mcmp>
 801e090:	2800      	cmp	r0, #0
 801e092:	9b05      	ldr	r3, [sp, #20]
 801e094:	dc02      	bgt.n	801e09c <_dtoa_r+0x9dc>
 801e096:	d1de      	bne.n	801e056 <_dtoa_r+0x996>
 801e098:	07da      	lsls	r2, r3, #31
 801e09a:	d5dc      	bpl.n	801e056 <_dtoa_r+0x996>
 801e09c:	2b39      	cmp	r3, #57	; 0x39
 801e09e:	d1d8      	bne.n	801e052 <_dtoa_r+0x992>
 801e0a0:	9a02      	ldr	r2, [sp, #8]
 801e0a2:	2339      	movs	r3, #57	; 0x39
 801e0a4:	7013      	strb	r3, [r2, #0]
 801e0a6:	4643      	mov	r3, r8
 801e0a8:	4698      	mov	r8, r3
 801e0aa:	3b01      	subs	r3, #1
 801e0ac:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801e0b0:	2a39      	cmp	r2, #57	; 0x39
 801e0b2:	d051      	beq.n	801e158 <_dtoa_r+0xa98>
 801e0b4:	3201      	adds	r2, #1
 801e0b6:	701a      	strb	r2, [r3, #0]
 801e0b8:	e745      	b.n	801df46 <_dtoa_r+0x886>
 801e0ba:	2a00      	cmp	r2, #0
 801e0bc:	dd03      	ble.n	801e0c6 <_dtoa_r+0xa06>
 801e0be:	2b39      	cmp	r3, #57	; 0x39
 801e0c0:	d0ee      	beq.n	801e0a0 <_dtoa_r+0x9e0>
 801e0c2:	3301      	adds	r3, #1
 801e0c4:	e7c7      	b.n	801e056 <_dtoa_r+0x996>
 801e0c6:	9a05      	ldr	r2, [sp, #20]
 801e0c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e0ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e0ce:	428a      	cmp	r2, r1
 801e0d0:	d02b      	beq.n	801e12a <_dtoa_r+0xa6a>
 801e0d2:	4629      	mov	r1, r5
 801e0d4:	2300      	movs	r3, #0
 801e0d6:	220a      	movs	r2, #10
 801e0d8:	4630      	mov	r0, r6
 801e0da:	f000 fe85 	bl	801ede8 <__multadd>
 801e0de:	45b9      	cmp	r9, r7
 801e0e0:	4605      	mov	r5, r0
 801e0e2:	f04f 0300 	mov.w	r3, #0
 801e0e6:	f04f 020a 	mov.w	r2, #10
 801e0ea:	4649      	mov	r1, r9
 801e0ec:	4630      	mov	r0, r6
 801e0ee:	d107      	bne.n	801e100 <_dtoa_r+0xa40>
 801e0f0:	f000 fe7a 	bl	801ede8 <__multadd>
 801e0f4:	4681      	mov	r9, r0
 801e0f6:	4607      	mov	r7, r0
 801e0f8:	9b05      	ldr	r3, [sp, #20]
 801e0fa:	3301      	adds	r3, #1
 801e0fc:	9305      	str	r3, [sp, #20]
 801e0fe:	e774      	b.n	801dfea <_dtoa_r+0x92a>
 801e100:	f000 fe72 	bl	801ede8 <__multadd>
 801e104:	4639      	mov	r1, r7
 801e106:	4681      	mov	r9, r0
 801e108:	2300      	movs	r3, #0
 801e10a:	220a      	movs	r2, #10
 801e10c:	4630      	mov	r0, r6
 801e10e:	f000 fe6b 	bl	801ede8 <__multadd>
 801e112:	4607      	mov	r7, r0
 801e114:	e7f0      	b.n	801e0f8 <_dtoa_r+0xa38>
 801e116:	f1ba 0f00 	cmp.w	sl, #0
 801e11a:	9a00      	ldr	r2, [sp, #0]
 801e11c:	bfcc      	ite	gt
 801e11e:	46d0      	movgt	r8, sl
 801e120:	f04f 0801 	movle.w	r8, #1
 801e124:	4490      	add	r8, r2
 801e126:	f04f 0900 	mov.w	r9, #0
 801e12a:	4629      	mov	r1, r5
 801e12c:	2201      	movs	r2, #1
 801e12e:	4630      	mov	r0, r6
 801e130:	9302      	str	r3, [sp, #8]
 801e132:	f001 f853 	bl	801f1dc <__lshift>
 801e136:	4621      	mov	r1, r4
 801e138:	4605      	mov	r5, r0
 801e13a:	f001 f8bb 	bl	801f2b4 <__mcmp>
 801e13e:	2800      	cmp	r0, #0
 801e140:	dcb1      	bgt.n	801e0a6 <_dtoa_r+0x9e6>
 801e142:	d102      	bne.n	801e14a <_dtoa_r+0xa8a>
 801e144:	9b02      	ldr	r3, [sp, #8]
 801e146:	07db      	lsls	r3, r3, #31
 801e148:	d4ad      	bmi.n	801e0a6 <_dtoa_r+0x9e6>
 801e14a:	4643      	mov	r3, r8
 801e14c:	4698      	mov	r8, r3
 801e14e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e152:	2a30      	cmp	r2, #48	; 0x30
 801e154:	d0fa      	beq.n	801e14c <_dtoa_r+0xa8c>
 801e156:	e6f6      	b.n	801df46 <_dtoa_r+0x886>
 801e158:	9a00      	ldr	r2, [sp, #0]
 801e15a:	429a      	cmp	r2, r3
 801e15c:	d1a4      	bne.n	801e0a8 <_dtoa_r+0x9e8>
 801e15e:	f10b 0b01 	add.w	fp, fp, #1
 801e162:	2331      	movs	r3, #49	; 0x31
 801e164:	e778      	b.n	801e058 <_dtoa_r+0x998>
 801e166:	4b15      	ldr	r3, [pc, #84]	; (801e1bc <_dtoa_r+0xafc>)
 801e168:	f7ff bb12 	b.w	801d790 <_dtoa_r+0xd0>
 801e16c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e16e:	2b00      	cmp	r3, #0
 801e170:	f47f aaee 	bne.w	801d750 <_dtoa_r+0x90>
 801e174:	4b12      	ldr	r3, [pc, #72]	; (801e1c0 <_dtoa_r+0xb00>)
 801e176:	f7ff bb0b 	b.w	801d790 <_dtoa_r+0xd0>
 801e17a:	f1ba 0f00 	cmp.w	sl, #0
 801e17e:	dc03      	bgt.n	801e188 <_dtoa_r+0xac8>
 801e180:	9b07      	ldr	r3, [sp, #28]
 801e182:	2b02      	cmp	r3, #2
 801e184:	f73f aec7 	bgt.w	801df16 <_dtoa_r+0x856>
 801e188:	f8dd 8000 	ldr.w	r8, [sp]
 801e18c:	4621      	mov	r1, r4
 801e18e:	4628      	mov	r0, r5
 801e190:	f7ff fa09 	bl	801d5a6 <quorem>
 801e194:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801e198:	f808 3b01 	strb.w	r3, [r8], #1
 801e19c:	9a00      	ldr	r2, [sp, #0]
 801e19e:	eba8 0202 	sub.w	r2, r8, r2
 801e1a2:	4592      	cmp	sl, r2
 801e1a4:	ddb7      	ble.n	801e116 <_dtoa_r+0xa56>
 801e1a6:	4629      	mov	r1, r5
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	220a      	movs	r2, #10
 801e1ac:	4630      	mov	r0, r6
 801e1ae:	f000 fe1b 	bl	801ede8 <__multadd>
 801e1b2:	4605      	mov	r5, r0
 801e1b4:	e7ea      	b.n	801e18c <_dtoa_r+0xacc>
 801e1b6:	bf00      	nop
 801e1b8:	080294a4 	.word	0x080294a4
 801e1bc:	080292a1 	.word	0x080292a1
 801e1c0:	08029421 	.word	0x08029421

0801e1c4 <__sflush_r>:
 801e1c4:	898a      	ldrh	r2, [r1, #12]
 801e1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1ca:	4605      	mov	r5, r0
 801e1cc:	0710      	lsls	r0, r2, #28
 801e1ce:	460c      	mov	r4, r1
 801e1d0:	d458      	bmi.n	801e284 <__sflush_r+0xc0>
 801e1d2:	684b      	ldr	r3, [r1, #4]
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	dc05      	bgt.n	801e1e4 <__sflush_r+0x20>
 801e1d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	dc02      	bgt.n	801e1e4 <__sflush_r+0x20>
 801e1de:	2000      	movs	r0, #0
 801e1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e1e6:	2e00      	cmp	r6, #0
 801e1e8:	d0f9      	beq.n	801e1de <__sflush_r+0x1a>
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e1f0:	682f      	ldr	r7, [r5, #0]
 801e1f2:	602b      	str	r3, [r5, #0]
 801e1f4:	d032      	beq.n	801e25c <__sflush_r+0x98>
 801e1f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e1f8:	89a3      	ldrh	r3, [r4, #12]
 801e1fa:	075a      	lsls	r2, r3, #29
 801e1fc:	d505      	bpl.n	801e20a <__sflush_r+0x46>
 801e1fe:	6863      	ldr	r3, [r4, #4]
 801e200:	1ac0      	subs	r0, r0, r3
 801e202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e204:	b10b      	cbz	r3, 801e20a <__sflush_r+0x46>
 801e206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e208:	1ac0      	subs	r0, r0, r3
 801e20a:	2300      	movs	r3, #0
 801e20c:	4602      	mov	r2, r0
 801e20e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e210:	6a21      	ldr	r1, [r4, #32]
 801e212:	4628      	mov	r0, r5
 801e214:	47b0      	blx	r6
 801e216:	1c43      	adds	r3, r0, #1
 801e218:	89a3      	ldrh	r3, [r4, #12]
 801e21a:	d106      	bne.n	801e22a <__sflush_r+0x66>
 801e21c:	6829      	ldr	r1, [r5, #0]
 801e21e:	291d      	cmp	r1, #29
 801e220:	d82c      	bhi.n	801e27c <__sflush_r+0xb8>
 801e222:	4a2a      	ldr	r2, [pc, #168]	; (801e2cc <__sflush_r+0x108>)
 801e224:	40ca      	lsrs	r2, r1
 801e226:	07d6      	lsls	r6, r2, #31
 801e228:	d528      	bpl.n	801e27c <__sflush_r+0xb8>
 801e22a:	2200      	movs	r2, #0
 801e22c:	6062      	str	r2, [r4, #4]
 801e22e:	04d9      	lsls	r1, r3, #19
 801e230:	6922      	ldr	r2, [r4, #16]
 801e232:	6022      	str	r2, [r4, #0]
 801e234:	d504      	bpl.n	801e240 <__sflush_r+0x7c>
 801e236:	1c42      	adds	r2, r0, #1
 801e238:	d101      	bne.n	801e23e <__sflush_r+0x7a>
 801e23a:	682b      	ldr	r3, [r5, #0]
 801e23c:	b903      	cbnz	r3, 801e240 <__sflush_r+0x7c>
 801e23e:	6560      	str	r0, [r4, #84]	; 0x54
 801e240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e242:	602f      	str	r7, [r5, #0]
 801e244:	2900      	cmp	r1, #0
 801e246:	d0ca      	beq.n	801e1de <__sflush_r+0x1a>
 801e248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e24c:	4299      	cmp	r1, r3
 801e24e:	d002      	beq.n	801e256 <__sflush_r+0x92>
 801e250:	4628      	mov	r0, r5
 801e252:	f7fd f8f1 	bl	801b438 <_free_r>
 801e256:	2000      	movs	r0, #0
 801e258:	6360      	str	r0, [r4, #52]	; 0x34
 801e25a:	e7c1      	b.n	801e1e0 <__sflush_r+0x1c>
 801e25c:	6a21      	ldr	r1, [r4, #32]
 801e25e:	2301      	movs	r3, #1
 801e260:	4628      	mov	r0, r5
 801e262:	47b0      	blx	r6
 801e264:	1c41      	adds	r1, r0, #1
 801e266:	d1c7      	bne.n	801e1f8 <__sflush_r+0x34>
 801e268:	682b      	ldr	r3, [r5, #0]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d0c4      	beq.n	801e1f8 <__sflush_r+0x34>
 801e26e:	2b1d      	cmp	r3, #29
 801e270:	d001      	beq.n	801e276 <__sflush_r+0xb2>
 801e272:	2b16      	cmp	r3, #22
 801e274:	d101      	bne.n	801e27a <__sflush_r+0xb6>
 801e276:	602f      	str	r7, [r5, #0]
 801e278:	e7b1      	b.n	801e1de <__sflush_r+0x1a>
 801e27a:	89a3      	ldrh	r3, [r4, #12]
 801e27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e280:	81a3      	strh	r3, [r4, #12]
 801e282:	e7ad      	b.n	801e1e0 <__sflush_r+0x1c>
 801e284:	690f      	ldr	r7, [r1, #16]
 801e286:	2f00      	cmp	r7, #0
 801e288:	d0a9      	beq.n	801e1de <__sflush_r+0x1a>
 801e28a:	0793      	lsls	r3, r2, #30
 801e28c:	680e      	ldr	r6, [r1, #0]
 801e28e:	bf08      	it	eq
 801e290:	694b      	ldreq	r3, [r1, #20]
 801e292:	600f      	str	r7, [r1, #0]
 801e294:	bf18      	it	ne
 801e296:	2300      	movne	r3, #0
 801e298:	eba6 0807 	sub.w	r8, r6, r7
 801e29c:	608b      	str	r3, [r1, #8]
 801e29e:	f1b8 0f00 	cmp.w	r8, #0
 801e2a2:	dd9c      	ble.n	801e1de <__sflush_r+0x1a>
 801e2a4:	6a21      	ldr	r1, [r4, #32]
 801e2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e2a8:	4643      	mov	r3, r8
 801e2aa:	463a      	mov	r2, r7
 801e2ac:	4628      	mov	r0, r5
 801e2ae:	47b0      	blx	r6
 801e2b0:	2800      	cmp	r0, #0
 801e2b2:	dc06      	bgt.n	801e2c2 <__sflush_r+0xfe>
 801e2b4:	89a3      	ldrh	r3, [r4, #12]
 801e2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e2ba:	81a3      	strh	r3, [r4, #12]
 801e2bc:	f04f 30ff 	mov.w	r0, #4294967295
 801e2c0:	e78e      	b.n	801e1e0 <__sflush_r+0x1c>
 801e2c2:	4407      	add	r7, r0
 801e2c4:	eba8 0800 	sub.w	r8, r8, r0
 801e2c8:	e7e9      	b.n	801e29e <__sflush_r+0xda>
 801e2ca:	bf00      	nop
 801e2cc:	20400001 	.word	0x20400001

0801e2d0 <_fflush_r>:
 801e2d0:	b538      	push	{r3, r4, r5, lr}
 801e2d2:	690b      	ldr	r3, [r1, #16]
 801e2d4:	4605      	mov	r5, r0
 801e2d6:	460c      	mov	r4, r1
 801e2d8:	b913      	cbnz	r3, 801e2e0 <_fflush_r+0x10>
 801e2da:	2500      	movs	r5, #0
 801e2dc:	4628      	mov	r0, r5
 801e2de:	bd38      	pop	{r3, r4, r5, pc}
 801e2e0:	b118      	cbz	r0, 801e2ea <_fflush_r+0x1a>
 801e2e2:	6983      	ldr	r3, [r0, #24]
 801e2e4:	b90b      	cbnz	r3, 801e2ea <_fflush_r+0x1a>
 801e2e6:	f000 f887 	bl	801e3f8 <__sinit>
 801e2ea:	4b14      	ldr	r3, [pc, #80]	; (801e33c <_fflush_r+0x6c>)
 801e2ec:	429c      	cmp	r4, r3
 801e2ee:	d11b      	bne.n	801e328 <_fflush_r+0x58>
 801e2f0:	686c      	ldr	r4, [r5, #4]
 801e2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d0ef      	beq.n	801e2da <_fflush_r+0xa>
 801e2fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e2fc:	07d0      	lsls	r0, r2, #31
 801e2fe:	d404      	bmi.n	801e30a <_fflush_r+0x3a>
 801e300:	0599      	lsls	r1, r3, #22
 801e302:	d402      	bmi.n	801e30a <_fflush_r+0x3a>
 801e304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e306:	f000 fc88 	bl	801ec1a <__retarget_lock_acquire_recursive>
 801e30a:	4628      	mov	r0, r5
 801e30c:	4621      	mov	r1, r4
 801e30e:	f7ff ff59 	bl	801e1c4 <__sflush_r>
 801e312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e314:	07da      	lsls	r2, r3, #31
 801e316:	4605      	mov	r5, r0
 801e318:	d4e0      	bmi.n	801e2dc <_fflush_r+0xc>
 801e31a:	89a3      	ldrh	r3, [r4, #12]
 801e31c:	059b      	lsls	r3, r3, #22
 801e31e:	d4dd      	bmi.n	801e2dc <_fflush_r+0xc>
 801e320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e322:	f000 fc7b 	bl	801ec1c <__retarget_lock_release_recursive>
 801e326:	e7d9      	b.n	801e2dc <_fflush_r+0xc>
 801e328:	4b05      	ldr	r3, [pc, #20]	; (801e340 <_fflush_r+0x70>)
 801e32a:	429c      	cmp	r4, r3
 801e32c:	d101      	bne.n	801e332 <_fflush_r+0x62>
 801e32e:	68ac      	ldr	r4, [r5, #8]
 801e330:	e7df      	b.n	801e2f2 <_fflush_r+0x22>
 801e332:	4b04      	ldr	r3, [pc, #16]	; (801e344 <_fflush_r+0x74>)
 801e334:	429c      	cmp	r4, r3
 801e336:	bf08      	it	eq
 801e338:	68ec      	ldreq	r4, [r5, #12]
 801e33a:	e7da      	b.n	801e2f2 <_fflush_r+0x22>
 801e33c:	080294d8 	.word	0x080294d8
 801e340:	080294f8 	.word	0x080294f8
 801e344:	080294b8 	.word	0x080294b8

0801e348 <std>:
 801e348:	2300      	movs	r3, #0
 801e34a:	b510      	push	{r4, lr}
 801e34c:	4604      	mov	r4, r0
 801e34e:	e9c0 3300 	strd	r3, r3, [r0]
 801e352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e356:	6083      	str	r3, [r0, #8]
 801e358:	8181      	strh	r1, [r0, #12]
 801e35a:	6643      	str	r3, [r0, #100]	; 0x64
 801e35c:	81c2      	strh	r2, [r0, #14]
 801e35e:	6183      	str	r3, [r0, #24]
 801e360:	4619      	mov	r1, r3
 801e362:	2208      	movs	r2, #8
 801e364:	305c      	adds	r0, #92	; 0x5c
 801e366:	f7fd f85f 	bl	801b428 <memset>
 801e36a:	4b05      	ldr	r3, [pc, #20]	; (801e380 <std+0x38>)
 801e36c:	6263      	str	r3, [r4, #36]	; 0x24
 801e36e:	4b05      	ldr	r3, [pc, #20]	; (801e384 <std+0x3c>)
 801e370:	62a3      	str	r3, [r4, #40]	; 0x28
 801e372:	4b05      	ldr	r3, [pc, #20]	; (801e388 <std+0x40>)
 801e374:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e376:	4b05      	ldr	r3, [pc, #20]	; (801e38c <std+0x44>)
 801e378:	6224      	str	r4, [r4, #32]
 801e37a:	6323      	str	r3, [r4, #48]	; 0x30
 801e37c:	bd10      	pop	{r4, pc}
 801e37e:	bf00      	nop
 801e380:	0801fa59 	.word	0x0801fa59
 801e384:	0801fa7b 	.word	0x0801fa7b
 801e388:	0801fab3 	.word	0x0801fab3
 801e38c:	0801fad7 	.word	0x0801fad7

0801e390 <_cleanup_r>:
 801e390:	4901      	ldr	r1, [pc, #4]	; (801e398 <_cleanup_r+0x8>)
 801e392:	f000 b8af 	b.w	801e4f4 <_fwalk_reent>
 801e396:	bf00      	nop
 801e398:	0801e2d1 	.word	0x0801e2d1

0801e39c <__sfmoreglue>:
 801e39c:	b570      	push	{r4, r5, r6, lr}
 801e39e:	1e4a      	subs	r2, r1, #1
 801e3a0:	2568      	movs	r5, #104	; 0x68
 801e3a2:	4355      	muls	r5, r2
 801e3a4:	460e      	mov	r6, r1
 801e3a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e3aa:	f7fd f895 	bl	801b4d8 <_malloc_r>
 801e3ae:	4604      	mov	r4, r0
 801e3b0:	b140      	cbz	r0, 801e3c4 <__sfmoreglue+0x28>
 801e3b2:	2100      	movs	r1, #0
 801e3b4:	e9c0 1600 	strd	r1, r6, [r0]
 801e3b8:	300c      	adds	r0, #12
 801e3ba:	60a0      	str	r0, [r4, #8]
 801e3bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e3c0:	f7fd f832 	bl	801b428 <memset>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	bd70      	pop	{r4, r5, r6, pc}

0801e3c8 <__sfp_lock_acquire>:
 801e3c8:	4801      	ldr	r0, [pc, #4]	; (801e3d0 <__sfp_lock_acquire+0x8>)
 801e3ca:	f000 bc26 	b.w	801ec1a <__retarget_lock_acquire_recursive>
 801e3ce:	bf00      	nop
 801e3d0:	240148c0 	.word	0x240148c0

0801e3d4 <__sfp_lock_release>:
 801e3d4:	4801      	ldr	r0, [pc, #4]	; (801e3dc <__sfp_lock_release+0x8>)
 801e3d6:	f000 bc21 	b.w	801ec1c <__retarget_lock_release_recursive>
 801e3da:	bf00      	nop
 801e3dc:	240148c0 	.word	0x240148c0

0801e3e0 <__sinit_lock_acquire>:
 801e3e0:	4801      	ldr	r0, [pc, #4]	; (801e3e8 <__sinit_lock_acquire+0x8>)
 801e3e2:	f000 bc1a 	b.w	801ec1a <__retarget_lock_acquire_recursive>
 801e3e6:	bf00      	nop
 801e3e8:	240148bb 	.word	0x240148bb

0801e3ec <__sinit_lock_release>:
 801e3ec:	4801      	ldr	r0, [pc, #4]	; (801e3f4 <__sinit_lock_release+0x8>)
 801e3ee:	f000 bc15 	b.w	801ec1c <__retarget_lock_release_recursive>
 801e3f2:	bf00      	nop
 801e3f4:	240148bb 	.word	0x240148bb

0801e3f8 <__sinit>:
 801e3f8:	b510      	push	{r4, lr}
 801e3fa:	4604      	mov	r4, r0
 801e3fc:	f7ff fff0 	bl	801e3e0 <__sinit_lock_acquire>
 801e400:	69a3      	ldr	r3, [r4, #24]
 801e402:	b11b      	cbz	r3, 801e40c <__sinit+0x14>
 801e404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e408:	f7ff bff0 	b.w	801e3ec <__sinit_lock_release>
 801e40c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e410:	6523      	str	r3, [r4, #80]	; 0x50
 801e412:	4b13      	ldr	r3, [pc, #76]	; (801e460 <__sinit+0x68>)
 801e414:	4a13      	ldr	r2, [pc, #76]	; (801e464 <__sinit+0x6c>)
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	62a2      	str	r2, [r4, #40]	; 0x28
 801e41a:	42a3      	cmp	r3, r4
 801e41c:	bf04      	itt	eq
 801e41e:	2301      	moveq	r3, #1
 801e420:	61a3      	streq	r3, [r4, #24]
 801e422:	4620      	mov	r0, r4
 801e424:	f000 f820 	bl	801e468 <__sfp>
 801e428:	6060      	str	r0, [r4, #4]
 801e42a:	4620      	mov	r0, r4
 801e42c:	f000 f81c 	bl	801e468 <__sfp>
 801e430:	60a0      	str	r0, [r4, #8]
 801e432:	4620      	mov	r0, r4
 801e434:	f000 f818 	bl	801e468 <__sfp>
 801e438:	2200      	movs	r2, #0
 801e43a:	60e0      	str	r0, [r4, #12]
 801e43c:	2104      	movs	r1, #4
 801e43e:	6860      	ldr	r0, [r4, #4]
 801e440:	f7ff ff82 	bl	801e348 <std>
 801e444:	68a0      	ldr	r0, [r4, #8]
 801e446:	2201      	movs	r2, #1
 801e448:	2109      	movs	r1, #9
 801e44a:	f7ff ff7d 	bl	801e348 <std>
 801e44e:	68e0      	ldr	r0, [r4, #12]
 801e450:	2202      	movs	r2, #2
 801e452:	2112      	movs	r1, #18
 801e454:	f7ff ff78 	bl	801e348 <std>
 801e458:	2301      	movs	r3, #1
 801e45a:	61a3      	str	r3, [r4, #24]
 801e45c:	e7d2      	b.n	801e404 <__sinit+0xc>
 801e45e:	bf00      	nop
 801e460:	0802927c 	.word	0x0802927c
 801e464:	0801e391 	.word	0x0801e391

0801e468 <__sfp>:
 801e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e46a:	4607      	mov	r7, r0
 801e46c:	f7ff ffac 	bl	801e3c8 <__sfp_lock_acquire>
 801e470:	4b1e      	ldr	r3, [pc, #120]	; (801e4ec <__sfp+0x84>)
 801e472:	681e      	ldr	r6, [r3, #0]
 801e474:	69b3      	ldr	r3, [r6, #24]
 801e476:	b913      	cbnz	r3, 801e47e <__sfp+0x16>
 801e478:	4630      	mov	r0, r6
 801e47a:	f7ff ffbd 	bl	801e3f8 <__sinit>
 801e47e:	3648      	adds	r6, #72	; 0x48
 801e480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e484:	3b01      	subs	r3, #1
 801e486:	d503      	bpl.n	801e490 <__sfp+0x28>
 801e488:	6833      	ldr	r3, [r6, #0]
 801e48a:	b30b      	cbz	r3, 801e4d0 <__sfp+0x68>
 801e48c:	6836      	ldr	r6, [r6, #0]
 801e48e:	e7f7      	b.n	801e480 <__sfp+0x18>
 801e490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e494:	b9d5      	cbnz	r5, 801e4cc <__sfp+0x64>
 801e496:	4b16      	ldr	r3, [pc, #88]	; (801e4f0 <__sfp+0x88>)
 801e498:	60e3      	str	r3, [r4, #12]
 801e49a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e49e:	6665      	str	r5, [r4, #100]	; 0x64
 801e4a0:	f000 fbba 	bl	801ec18 <__retarget_lock_init_recursive>
 801e4a4:	f7ff ff96 	bl	801e3d4 <__sfp_lock_release>
 801e4a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e4ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e4b0:	6025      	str	r5, [r4, #0]
 801e4b2:	61a5      	str	r5, [r4, #24]
 801e4b4:	2208      	movs	r2, #8
 801e4b6:	4629      	mov	r1, r5
 801e4b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e4bc:	f7fc ffb4 	bl	801b428 <memset>
 801e4c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e4c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4cc:	3468      	adds	r4, #104	; 0x68
 801e4ce:	e7d9      	b.n	801e484 <__sfp+0x1c>
 801e4d0:	2104      	movs	r1, #4
 801e4d2:	4638      	mov	r0, r7
 801e4d4:	f7ff ff62 	bl	801e39c <__sfmoreglue>
 801e4d8:	4604      	mov	r4, r0
 801e4da:	6030      	str	r0, [r6, #0]
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	d1d5      	bne.n	801e48c <__sfp+0x24>
 801e4e0:	f7ff ff78 	bl	801e3d4 <__sfp_lock_release>
 801e4e4:	230c      	movs	r3, #12
 801e4e6:	603b      	str	r3, [r7, #0]
 801e4e8:	e7ee      	b.n	801e4c8 <__sfp+0x60>
 801e4ea:	bf00      	nop
 801e4ec:	0802927c 	.word	0x0802927c
 801e4f0:	ffff0001 	.word	0xffff0001

0801e4f4 <_fwalk_reent>:
 801e4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4f8:	4606      	mov	r6, r0
 801e4fa:	4688      	mov	r8, r1
 801e4fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e500:	2700      	movs	r7, #0
 801e502:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e506:	f1b9 0901 	subs.w	r9, r9, #1
 801e50a:	d505      	bpl.n	801e518 <_fwalk_reent+0x24>
 801e50c:	6824      	ldr	r4, [r4, #0]
 801e50e:	2c00      	cmp	r4, #0
 801e510:	d1f7      	bne.n	801e502 <_fwalk_reent+0xe>
 801e512:	4638      	mov	r0, r7
 801e514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e518:	89ab      	ldrh	r3, [r5, #12]
 801e51a:	2b01      	cmp	r3, #1
 801e51c:	d907      	bls.n	801e52e <_fwalk_reent+0x3a>
 801e51e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e522:	3301      	adds	r3, #1
 801e524:	d003      	beq.n	801e52e <_fwalk_reent+0x3a>
 801e526:	4629      	mov	r1, r5
 801e528:	4630      	mov	r0, r6
 801e52a:	47c0      	blx	r8
 801e52c:	4307      	orrs	r7, r0
 801e52e:	3568      	adds	r5, #104	; 0x68
 801e530:	e7e9      	b.n	801e506 <_fwalk_reent+0x12>

0801e532 <rshift>:
 801e532:	6903      	ldr	r3, [r0, #16]
 801e534:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e53c:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e540:	f100 0414 	add.w	r4, r0, #20
 801e544:	dd45      	ble.n	801e5d2 <rshift+0xa0>
 801e546:	f011 011f 	ands.w	r1, r1, #31
 801e54a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e54e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e552:	d10c      	bne.n	801e56e <rshift+0x3c>
 801e554:	f100 0710 	add.w	r7, r0, #16
 801e558:	4629      	mov	r1, r5
 801e55a:	42b1      	cmp	r1, r6
 801e55c:	d334      	bcc.n	801e5c8 <rshift+0x96>
 801e55e:	1a9b      	subs	r3, r3, r2
 801e560:	009b      	lsls	r3, r3, #2
 801e562:	1eea      	subs	r2, r5, #3
 801e564:	4296      	cmp	r6, r2
 801e566:	bf38      	it	cc
 801e568:	2300      	movcc	r3, #0
 801e56a:	4423      	add	r3, r4
 801e56c:	e015      	b.n	801e59a <rshift+0x68>
 801e56e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e572:	f1c1 0820 	rsb	r8, r1, #32
 801e576:	40cf      	lsrs	r7, r1
 801e578:	f105 0e04 	add.w	lr, r5, #4
 801e57c:	46a1      	mov	r9, r4
 801e57e:	4576      	cmp	r6, lr
 801e580:	46f4      	mov	ip, lr
 801e582:	d815      	bhi.n	801e5b0 <rshift+0x7e>
 801e584:	1a9b      	subs	r3, r3, r2
 801e586:	009a      	lsls	r2, r3, #2
 801e588:	3a04      	subs	r2, #4
 801e58a:	3501      	adds	r5, #1
 801e58c:	42ae      	cmp	r6, r5
 801e58e:	bf38      	it	cc
 801e590:	2200      	movcc	r2, #0
 801e592:	18a3      	adds	r3, r4, r2
 801e594:	50a7      	str	r7, [r4, r2]
 801e596:	b107      	cbz	r7, 801e59a <rshift+0x68>
 801e598:	3304      	adds	r3, #4
 801e59a:	1b1a      	subs	r2, r3, r4
 801e59c:	42a3      	cmp	r3, r4
 801e59e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e5a2:	bf08      	it	eq
 801e5a4:	2300      	moveq	r3, #0
 801e5a6:	6102      	str	r2, [r0, #16]
 801e5a8:	bf08      	it	eq
 801e5aa:	6143      	streq	r3, [r0, #20]
 801e5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e5b0:	f8dc c000 	ldr.w	ip, [ip]
 801e5b4:	fa0c fc08 	lsl.w	ip, ip, r8
 801e5b8:	ea4c 0707 	orr.w	r7, ip, r7
 801e5bc:	f849 7b04 	str.w	r7, [r9], #4
 801e5c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e5c4:	40cf      	lsrs	r7, r1
 801e5c6:	e7da      	b.n	801e57e <rshift+0x4c>
 801e5c8:	f851 cb04 	ldr.w	ip, [r1], #4
 801e5cc:	f847 cf04 	str.w	ip, [r7, #4]!
 801e5d0:	e7c3      	b.n	801e55a <rshift+0x28>
 801e5d2:	4623      	mov	r3, r4
 801e5d4:	e7e1      	b.n	801e59a <rshift+0x68>

0801e5d6 <__hexdig_fun>:
 801e5d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e5da:	2b09      	cmp	r3, #9
 801e5dc:	d802      	bhi.n	801e5e4 <__hexdig_fun+0xe>
 801e5de:	3820      	subs	r0, #32
 801e5e0:	b2c0      	uxtb	r0, r0
 801e5e2:	4770      	bx	lr
 801e5e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e5e8:	2b05      	cmp	r3, #5
 801e5ea:	d801      	bhi.n	801e5f0 <__hexdig_fun+0x1a>
 801e5ec:	3847      	subs	r0, #71	; 0x47
 801e5ee:	e7f7      	b.n	801e5e0 <__hexdig_fun+0xa>
 801e5f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e5f4:	2b05      	cmp	r3, #5
 801e5f6:	d801      	bhi.n	801e5fc <__hexdig_fun+0x26>
 801e5f8:	3827      	subs	r0, #39	; 0x27
 801e5fa:	e7f1      	b.n	801e5e0 <__hexdig_fun+0xa>
 801e5fc:	2000      	movs	r0, #0
 801e5fe:	4770      	bx	lr

0801e600 <__gethex>:
 801e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e604:	ed2d 8b02 	vpush	{d8}
 801e608:	b089      	sub	sp, #36	; 0x24
 801e60a:	ee08 0a10 	vmov	s16, r0
 801e60e:	9304      	str	r3, [sp, #16]
 801e610:	4bbc      	ldr	r3, [pc, #752]	; (801e904 <__gethex+0x304>)
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	9301      	str	r3, [sp, #4]
 801e616:	4618      	mov	r0, r3
 801e618:	468b      	mov	fp, r1
 801e61a:	4690      	mov	r8, r2
 801e61c:	f7e1 fe6a 	bl	80002f4 <strlen>
 801e620:	9b01      	ldr	r3, [sp, #4]
 801e622:	f8db 2000 	ldr.w	r2, [fp]
 801e626:	4403      	add	r3, r0
 801e628:	4682      	mov	sl, r0
 801e62a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e62e:	9305      	str	r3, [sp, #20]
 801e630:	1c93      	adds	r3, r2, #2
 801e632:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e636:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e63a:	32fe      	adds	r2, #254	; 0xfe
 801e63c:	18d1      	adds	r1, r2, r3
 801e63e:	461f      	mov	r7, r3
 801e640:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e644:	9100      	str	r1, [sp, #0]
 801e646:	2830      	cmp	r0, #48	; 0x30
 801e648:	d0f8      	beq.n	801e63c <__gethex+0x3c>
 801e64a:	f7ff ffc4 	bl	801e5d6 <__hexdig_fun>
 801e64e:	4604      	mov	r4, r0
 801e650:	2800      	cmp	r0, #0
 801e652:	d13a      	bne.n	801e6ca <__gethex+0xca>
 801e654:	9901      	ldr	r1, [sp, #4]
 801e656:	4652      	mov	r2, sl
 801e658:	4638      	mov	r0, r7
 801e65a:	f7fe f82f 	bl	801c6bc <strncmp>
 801e65e:	4605      	mov	r5, r0
 801e660:	2800      	cmp	r0, #0
 801e662:	d168      	bne.n	801e736 <__gethex+0x136>
 801e664:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e668:	eb07 060a 	add.w	r6, r7, sl
 801e66c:	f7ff ffb3 	bl	801e5d6 <__hexdig_fun>
 801e670:	2800      	cmp	r0, #0
 801e672:	d062      	beq.n	801e73a <__gethex+0x13a>
 801e674:	4633      	mov	r3, r6
 801e676:	7818      	ldrb	r0, [r3, #0]
 801e678:	2830      	cmp	r0, #48	; 0x30
 801e67a:	461f      	mov	r7, r3
 801e67c:	f103 0301 	add.w	r3, r3, #1
 801e680:	d0f9      	beq.n	801e676 <__gethex+0x76>
 801e682:	f7ff ffa8 	bl	801e5d6 <__hexdig_fun>
 801e686:	2301      	movs	r3, #1
 801e688:	fab0 f480 	clz	r4, r0
 801e68c:	0964      	lsrs	r4, r4, #5
 801e68e:	4635      	mov	r5, r6
 801e690:	9300      	str	r3, [sp, #0]
 801e692:	463a      	mov	r2, r7
 801e694:	4616      	mov	r6, r2
 801e696:	3201      	adds	r2, #1
 801e698:	7830      	ldrb	r0, [r6, #0]
 801e69a:	f7ff ff9c 	bl	801e5d6 <__hexdig_fun>
 801e69e:	2800      	cmp	r0, #0
 801e6a0:	d1f8      	bne.n	801e694 <__gethex+0x94>
 801e6a2:	9901      	ldr	r1, [sp, #4]
 801e6a4:	4652      	mov	r2, sl
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	f7fe f808 	bl	801c6bc <strncmp>
 801e6ac:	b980      	cbnz	r0, 801e6d0 <__gethex+0xd0>
 801e6ae:	b94d      	cbnz	r5, 801e6c4 <__gethex+0xc4>
 801e6b0:	eb06 050a 	add.w	r5, r6, sl
 801e6b4:	462a      	mov	r2, r5
 801e6b6:	4616      	mov	r6, r2
 801e6b8:	3201      	adds	r2, #1
 801e6ba:	7830      	ldrb	r0, [r6, #0]
 801e6bc:	f7ff ff8b 	bl	801e5d6 <__hexdig_fun>
 801e6c0:	2800      	cmp	r0, #0
 801e6c2:	d1f8      	bne.n	801e6b6 <__gethex+0xb6>
 801e6c4:	1bad      	subs	r5, r5, r6
 801e6c6:	00ad      	lsls	r5, r5, #2
 801e6c8:	e004      	b.n	801e6d4 <__gethex+0xd4>
 801e6ca:	2400      	movs	r4, #0
 801e6cc:	4625      	mov	r5, r4
 801e6ce:	e7e0      	b.n	801e692 <__gethex+0x92>
 801e6d0:	2d00      	cmp	r5, #0
 801e6d2:	d1f7      	bne.n	801e6c4 <__gethex+0xc4>
 801e6d4:	7833      	ldrb	r3, [r6, #0]
 801e6d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e6da:	2b50      	cmp	r3, #80	; 0x50
 801e6dc:	d13b      	bne.n	801e756 <__gethex+0x156>
 801e6de:	7873      	ldrb	r3, [r6, #1]
 801e6e0:	2b2b      	cmp	r3, #43	; 0x2b
 801e6e2:	d02c      	beq.n	801e73e <__gethex+0x13e>
 801e6e4:	2b2d      	cmp	r3, #45	; 0x2d
 801e6e6:	d02e      	beq.n	801e746 <__gethex+0x146>
 801e6e8:	1c71      	adds	r1, r6, #1
 801e6ea:	f04f 0900 	mov.w	r9, #0
 801e6ee:	7808      	ldrb	r0, [r1, #0]
 801e6f0:	f7ff ff71 	bl	801e5d6 <__hexdig_fun>
 801e6f4:	1e43      	subs	r3, r0, #1
 801e6f6:	b2db      	uxtb	r3, r3
 801e6f8:	2b18      	cmp	r3, #24
 801e6fa:	d82c      	bhi.n	801e756 <__gethex+0x156>
 801e6fc:	f1a0 0210 	sub.w	r2, r0, #16
 801e700:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e704:	f7ff ff67 	bl	801e5d6 <__hexdig_fun>
 801e708:	1e43      	subs	r3, r0, #1
 801e70a:	b2db      	uxtb	r3, r3
 801e70c:	2b18      	cmp	r3, #24
 801e70e:	d91d      	bls.n	801e74c <__gethex+0x14c>
 801e710:	f1b9 0f00 	cmp.w	r9, #0
 801e714:	d000      	beq.n	801e718 <__gethex+0x118>
 801e716:	4252      	negs	r2, r2
 801e718:	4415      	add	r5, r2
 801e71a:	f8cb 1000 	str.w	r1, [fp]
 801e71e:	b1e4      	cbz	r4, 801e75a <__gethex+0x15a>
 801e720:	9b00      	ldr	r3, [sp, #0]
 801e722:	2b00      	cmp	r3, #0
 801e724:	bf14      	ite	ne
 801e726:	2700      	movne	r7, #0
 801e728:	2706      	moveq	r7, #6
 801e72a:	4638      	mov	r0, r7
 801e72c:	b009      	add	sp, #36	; 0x24
 801e72e:	ecbd 8b02 	vpop	{d8}
 801e732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e736:	463e      	mov	r6, r7
 801e738:	4625      	mov	r5, r4
 801e73a:	2401      	movs	r4, #1
 801e73c:	e7ca      	b.n	801e6d4 <__gethex+0xd4>
 801e73e:	f04f 0900 	mov.w	r9, #0
 801e742:	1cb1      	adds	r1, r6, #2
 801e744:	e7d3      	b.n	801e6ee <__gethex+0xee>
 801e746:	f04f 0901 	mov.w	r9, #1
 801e74a:	e7fa      	b.n	801e742 <__gethex+0x142>
 801e74c:	230a      	movs	r3, #10
 801e74e:	fb03 0202 	mla	r2, r3, r2, r0
 801e752:	3a10      	subs	r2, #16
 801e754:	e7d4      	b.n	801e700 <__gethex+0x100>
 801e756:	4631      	mov	r1, r6
 801e758:	e7df      	b.n	801e71a <__gethex+0x11a>
 801e75a:	1bf3      	subs	r3, r6, r7
 801e75c:	3b01      	subs	r3, #1
 801e75e:	4621      	mov	r1, r4
 801e760:	2b07      	cmp	r3, #7
 801e762:	dc0b      	bgt.n	801e77c <__gethex+0x17c>
 801e764:	ee18 0a10 	vmov	r0, s16
 801e768:	f000 fadc 	bl	801ed24 <_Balloc>
 801e76c:	4604      	mov	r4, r0
 801e76e:	b940      	cbnz	r0, 801e782 <__gethex+0x182>
 801e770:	4b65      	ldr	r3, [pc, #404]	; (801e908 <__gethex+0x308>)
 801e772:	4602      	mov	r2, r0
 801e774:	21de      	movs	r1, #222	; 0xde
 801e776:	4865      	ldr	r0, [pc, #404]	; (801e90c <__gethex+0x30c>)
 801e778:	f7fc fdc0 	bl	801b2fc <__assert_func>
 801e77c:	3101      	adds	r1, #1
 801e77e:	105b      	asrs	r3, r3, #1
 801e780:	e7ee      	b.n	801e760 <__gethex+0x160>
 801e782:	f100 0914 	add.w	r9, r0, #20
 801e786:	f04f 0b00 	mov.w	fp, #0
 801e78a:	f1ca 0301 	rsb	r3, sl, #1
 801e78e:	f8cd 9008 	str.w	r9, [sp, #8]
 801e792:	f8cd b000 	str.w	fp, [sp]
 801e796:	9306      	str	r3, [sp, #24]
 801e798:	42b7      	cmp	r7, r6
 801e79a:	d340      	bcc.n	801e81e <__gethex+0x21e>
 801e79c:	9802      	ldr	r0, [sp, #8]
 801e79e:	9b00      	ldr	r3, [sp, #0]
 801e7a0:	f840 3b04 	str.w	r3, [r0], #4
 801e7a4:	eba0 0009 	sub.w	r0, r0, r9
 801e7a8:	1080      	asrs	r0, r0, #2
 801e7aa:	0146      	lsls	r6, r0, #5
 801e7ac:	6120      	str	r0, [r4, #16]
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f000 fbae 	bl	801ef10 <__hi0bits>
 801e7b4:	1a30      	subs	r0, r6, r0
 801e7b6:	f8d8 6000 	ldr.w	r6, [r8]
 801e7ba:	42b0      	cmp	r0, r6
 801e7bc:	dd63      	ble.n	801e886 <__gethex+0x286>
 801e7be:	1b87      	subs	r7, r0, r6
 801e7c0:	4639      	mov	r1, r7
 801e7c2:	4620      	mov	r0, r4
 801e7c4:	f000 ff49 	bl	801f65a <__any_on>
 801e7c8:	4682      	mov	sl, r0
 801e7ca:	b1a8      	cbz	r0, 801e7f8 <__gethex+0x1f8>
 801e7cc:	1e7b      	subs	r3, r7, #1
 801e7ce:	1159      	asrs	r1, r3, #5
 801e7d0:	f003 021f 	and.w	r2, r3, #31
 801e7d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e7d8:	f04f 0a01 	mov.w	sl, #1
 801e7dc:	fa0a f202 	lsl.w	r2, sl, r2
 801e7e0:	420a      	tst	r2, r1
 801e7e2:	d009      	beq.n	801e7f8 <__gethex+0x1f8>
 801e7e4:	4553      	cmp	r3, sl
 801e7e6:	dd05      	ble.n	801e7f4 <__gethex+0x1f4>
 801e7e8:	1eb9      	subs	r1, r7, #2
 801e7ea:	4620      	mov	r0, r4
 801e7ec:	f000 ff35 	bl	801f65a <__any_on>
 801e7f0:	2800      	cmp	r0, #0
 801e7f2:	d145      	bne.n	801e880 <__gethex+0x280>
 801e7f4:	f04f 0a02 	mov.w	sl, #2
 801e7f8:	4639      	mov	r1, r7
 801e7fa:	4620      	mov	r0, r4
 801e7fc:	f7ff fe99 	bl	801e532 <rshift>
 801e800:	443d      	add	r5, r7
 801e802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e806:	42ab      	cmp	r3, r5
 801e808:	da4c      	bge.n	801e8a4 <__gethex+0x2a4>
 801e80a:	ee18 0a10 	vmov	r0, s16
 801e80e:	4621      	mov	r1, r4
 801e810:	f000 fac8 	bl	801eda4 <_Bfree>
 801e814:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e816:	2300      	movs	r3, #0
 801e818:	6013      	str	r3, [r2, #0]
 801e81a:	27a3      	movs	r7, #163	; 0xa3
 801e81c:	e785      	b.n	801e72a <__gethex+0x12a>
 801e81e:	1e73      	subs	r3, r6, #1
 801e820:	9a05      	ldr	r2, [sp, #20]
 801e822:	9303      	str	r3, [sp, #12]
 801e824:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e828:	4293      	cmp	r3, r2
 801e82a:	d019      	beq.n	801e860 <__gethex+0x260>
 801e82c:	f1bb 0f20 	cmp.w	fp, #32
 801e830:	d107      	bne.n	801e842 <__gethex+0x242>
 801e832:	9b02      	ldr	r3, [sp, #8]
 801e834:	9a00      	ldr	r2, [sp, #0]
 801e836:	f843 2b04 	str.w	r2, [r3], #4
 801e83a:	9302      	str	r3, [sp, #8]
 801e83c:	2300      	movs	r3, #0
 801e83e:	9300      	str	r3, [sp, #0]
 801e840:	469b      	mov	fp, r3
 801e842:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e846:	f7ff fec6 	bl	801e5d6 <__hexdig_fun>
 801e84a:	9b00      	ldr	r3, [sp, #0]
 801e84c:	f000 000f 	and.w	r0, r0, #15
 801e850:	fa00 f00b 	lsl.w	r0, r0, fp
 801e854:	4303      	orrs	r3, r0
 801e856:	9300      	str	r3, [sp, #0]
 801e858:	f10b 0b04 	add.w	fp, fp, #4
 801e85c:	9b03      	ldr	r3, [sp, #12]
 801e85e:	e00d      	b.n	801e87c <__gethex+0x27c>
 801e860:	9b03      	ldr	r3, [sp, #12]
 801e862:	9a06      	ldr	r2, [sp, #24]
 801e864:	4413      	add	r3, r2
 801e866:	42bb      	cmp	r3, r7
 801e868:	d3e0      	bcc.n	801e82c <__gethex+0x22c>
 801e86a:	4618      	mov	r0, r3
 801e86c:	9901      	ldr	r1, [sp, #4]
 801e86e:	9307      	str	r3, [sp, #28]
 801e870:	4652      	mov	r2, sl
 801e872:	f7fd ff23 	bl	801c6bc <strncmp>
 801e876:	9b07      	ldr	r3, [sp, #28]
 801e878:	2800      	cmp	r0, #0
 801e87a:	d1d7      	bne.n	801e82c <__gethex+0x22c>
 801e87c:	461e      	mov	r6, r3
 801e87e:	e78b      	b.n	801e798 <__gethex+0x198>
 801e880:	f04f 0a03 	mov.w	sl, #3
 801e884:	e7b8      	b.n	801e7f8 <__gethex+0x1f8>
 801e886:	da0a      	bge.n	801e89e <__gethex+0x29e>
 801e888:	1a37      	subs	r7, r6, r0
 801e88a:	4621      	mov	r1, r4
 801e88c:	ee18 0a10 	vmov	r0, s16
 801e890:	463a      	mov	r2, r7
 801e892:	f000 fca3 	bl	801f1dc <__lshift>
 801e896:	1bed      	subs	r5, r5, r7
 801e898:	4604      	mov	r4, r0
 801e89a:	f100 0914 	add.w	r9, r0, #20
 801e89e:	f04f 0a00 	mov.w	sl, #0
 801e8a2:	e7ae      	b.n	801e802 <__gethex+0x202>
 801e8a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e8a8:	42a8      	cmp	r0, r5
 801e8aa:	dd72      	ble.n	801e992 <__gethex+0x392>
 801e8ac:	1b45      	subs	r5, r0, r5
 801e8ae:	42ae      	cmp	r6, r5
 801e8b0:	dc36      	bgt.n	801e920 <__gethex+0x320>
 801e8b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e8b6:	2b02      	cmp	r3, #2
 801e8b8:	d02a      	beq.n	801e910 <__gethex+0x310>
 801e8ba:	2b03      	cmp	r3, #3
 801e8bc:	d02c      	beq.n	801e918 <__gethex+0x318>
 801e8be:	2b01      	cmp	r3, #1
 801e8c0:	d115      	bne.n	801e8ee <__gethex+0x2ee>
 801e8c2:	42ae      	cmp	r6, r5
 801e8c4:	d113      	bne.n	801e8ee <__gethex+0x2ee>
 801e8c6:	2e01      	cmp	r6, #1
 801e8c8:	d10b      	bne.n	801e8e2 <__gethex+0x2e2>
 801e8ca:	9a04      	ldr	r2, [sp, #16]
 801e8cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e8d0:	6013      	str	r3, [r2, #0]
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	6123      	str	r3, [r4, #16]
 801e8d6:	f8c9 3000 	str.w	r3, [r9]
 801e8da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e8dc:	2762      	movs	r7, #98	; 0x62
 801e8de:	601c      	str	r4, [r3, #0]
 801e8e0:	e723      	b.n	801e72a <__gethex+0x12a>
 801e8e2:	1e71      	subs	r1, r6, #1
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f000 feb8 	bl	801f65a <__any_on>
 801e8ea:	2800      	cmp	r0, #0
 801e8ec:	d1ed      	bne.n	801e8ca <__gethex+0x2ca>
 801e8ee:	ee18 0a10 	vmov	r0, s16
 801e8f2:	4621      	mov	r1, r4
 801e8f4:	f000 fa56 	bl	801eda4 <_Bfree>
 801e8f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e8fa:	2300      	movs	r3, #0
 801e8fc:	6013      	str	r3, [r2, #0]
 801e8fe:	2750      	movs	r7, #80	; 0x50
 801e900:	e713      	b.n	801e72a <__gethex+0x12a>
 801e902:	bf00      	nop
 801e904:	08029584 	.word	0x08029584
 801e908:	080294a4 	.word	0x080294a4
 801e90c:	08029518 	.word	0x08029518
 801e910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e912:	2b00      	cmp	r3, #0
 801e914:	d1eb      	bne.n	801e8ee <__gethex+0x2ee>
 801e916:	e7d8      	b.n	801e8ca <__gethex+0x2ca>
 801e918:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d1d5      	bne.n	801e8ca <__gethex+0x2ca>
 801e91e:	e7e6      	b.n	801e8ee <__gethex+0x2ee>
 801e920:	1e6f      	subs	r7, r5, #1
 801e922:	f1ba 0f00 	cmp.w	sl, #0
 801e926:	d131      	bne.n	801e98c <__gethex+0x38c>
 801e928:	b127      	cbz	r7, 801e934 <__gethex+0x334>
 801e92a:	4639      	mov	r1, r7
 801e92c:	4620      	mov	r0, r4
 801e92e:	f000 fe94 	bl	801f65a <__any_on>
 801e932:	4682      	mov	sl, r0
 801e934:	117b      	asrs	r3, r7, #5
 801e936:	2101      	movs	r1, #1
 801e938:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e93c:	f007 071f 	and.w	r7, r7, #31
 801e940:	fa01 f707 	lsl.w	r7, r1, r7
 801e944:	421f      	tst	r7, r3
 801e946:	4629      	mov	r1, r5
 801e948:	4620      	mov	r0, r4
 801e94a:	bf18      	it	ne
 801e94c:	f04a 0a02 	orrne.w	sl, sl, #2
 801e950:	1b76      	subs	r6, r6, r5
 801e952:	f7ff fdee 	bl	801e532 <rshift>
 801e956:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e95a:	2702      	movs	r7, #2
 801e95c:	f1ba 0f00 	cmp.w	sl, #0
 801e960:	d048      	beq.n	801e9f4 <__gethex+0x3f4>
 801e962:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e966:	2b02      	cmp	r3, #2
 801e968:	d015      	beq.n	801e996 <__gethex+0x396>
 801e96a:	2b03      	cmp	r3, #3
 801e96c:	d017      	beq.n	801e99e <__gethex+0x39e>
 801e96e:	2b01      	cmp	r3, #1
 801e970:	d109      	bne.n	801e986 <__gethex+0x386>
 801e972:	f01a 0f02 	tst.w	sl, #2
 801e976:	d006      	beq.n	801e986 <__gethex+0x386>
 801e978:	f8d9 0000 	ldr.w	r0, [r9]
 801e97c:	ea4a 0a00 	orr.w	sl, sl, r0
 801e980:	f01a 0f01 	tst.w	sl, #1
 801e984:	d10e      	bne.n	801e9a4 <__gethex+0x3a4>
 801e986:	f047 0710 	orr.w	r7, r7, #16
 801e98a:	e033      	b.n	801e9f4 <__gethex+0x3f4>
 801e98c:	f04f 0a01 	mov.w	sl, #1
 801e990:	e7d0      	b.n	801e934 <__gethex+0x334>
 801e992:	2701      	movs	r7, #1
 801e994:	e7e2      	b.n	801e95c <__gethex+0x35c>
 801e996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e998:	f1c3 0301 	rsb	r3, r3, #1
 801e99c:	9315      	str	r3, [sp, #84]	; 0x54
 801e99e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d0f0      	beq.n	801e986 <__gethex+0x386>
 801e9a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e9a8:	f104 0314 	add.w	r3, r4, #20
 801e9ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e9b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e9b4:	f04f 0c00 	mov.w	ip, #0
 801e9b8:	4618      	mov	r0, r3
 801e9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9be:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e9c2:	d01c      	beq.n	801e9fe <__gethex+0x3fe>
 801e9c4:	3201      	adds	r2, #1
 801e9c6:	6002      	str	r2, [r0, #0]
 801e9c8:	2f02      	cmp	r7, #2
 801e9ca:	f104 0314 	add.w	r3, r4, #20
 801e9ce:	d13f      	bne.n	801ea50 <__gethex+0x450>
 801e9d0:	f8d8 2000 	ldr.w	r2, [r8]
 801e9d4:	3a01      	subs	r2, #1
 801e9d6:	42b2      	cmp	r2, r6
 801e9d8:	d10a      	bne.n	801e9f0 <__gethex+0x3f0>
 801e9da:	1171      	asrs	r1, r6, #5
 801e9dc:	2201      	movs	r2, #1
 801e9de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e9e2:	f006 061f 	and.w	r6, r6, #31
 801e9e6:	fa02 f606 	lsl.w	r6, r2, r6
 801e9ea:	421e      	tst	r6, r3
 801e9ec:	bf18      	it	ne
 801e9ee:	4617      	movne	r7, r2
 801e9f0:	f047 0720 	orr.w	r7, r7, #32
 801e9f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e9f6:	601c      	str	r4, [r3, #0]
 801e9f8:	9b04      	ldr	r3, [sp, #16]
 801e9fa:	601d      	str	r5, [r3, #0]
 801e9fc:	e695      	b.n	801e72a <__gethex+0x12a>
 801e9fe:	4299      	cmp	r1, r3
 801ea00:	f843 cc04 	str.w	ip, [r3, #-4]
 801ea04:	d8d8      	bhi.n	801e9b8 <__gethex+0x3b8>
 801ea06:	68a3      	ldr	r3, [r4, #8]
 801ea08:	459b      	cmp	fp, r3
 801ea0a:	db19      	blt.n	801ea40 <__gethex+0x440>
 801ea0c:	6861      	ldr	r1, [r4, #4]
 801ea0e:	ee18 0a10 	vmov	r0, s16
 801ea12:	3101      	adds	r1, #1
 801ea14:	f000 f986 	bl	801ed24 <_Balloc>
 801ea18:	4681      	mov	r9, r0
 801ea1a:	b918      	cbnz	r0, 801ea24 <__gethex+0x424>
 801ea1c:	4b1a      	ldr	r3, [pc, #104]	; (801ea88 <__gethex+0x488>)
 801ea1e:	4602      	mov	r2, r0
 801ea20:	2184      	movs	r1, #132	; 0x84
 801ea22:	e6a8      	b.n	801e776 <__gethex+0x176>
 801ea24:	6922      	ldr	r2, [r4, #16]
 801ea26:	3202      	adds	r2, #2
 801ea28:	f104 010c 	add.w	r1, r4, #12
 801ea2c:	0092      	lsls	r2, r2, #2
 801ea2e:	300c      	adds	r0, #12
 801ea30:	f7fc fcd2 	bl	801b3d8 <memcpy>
 801ea34:	4621      	mov	r1, r4
 801ea36:	ee18 0a10 	vmov	r0, s16
 801ea3a:	f000 f9b3 	bl	801eda4 <_Bfree>
 801ea3e:	464c      	mov	r4, r9
 801ea40:	6923      	ldr	r3, [r4, #16]
 801ea42:	1c5a      	adds	r2, r3, #1
 801ea44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ea48:	6122      	str	r2, [r4, #16]
 801ea4a:	2201      	movs	r2, #1
 801ea4c:	615a      	str	r2, [r3, #20]
 801ea4e:	e7bb      	b.n	801e9c8 <__gethex+0x3c8>
 801ea50:	6922      	ldr	r2, [r4, #16]
 801ea52:	455a      	cmp	r2, fp
 801ea54:	dd0b      	ble.n	801ea6e <__gethex+0x46e>
 801ea56:	2101      	movs	r1, #1
 801ea58:	4620      	mov	r0, r4
 801ea5a:	f7ff fd6a 	bl	801e532 <rshift>
 801ea5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ea62:	3501      	adds	r5, #1
 801ea64:	42ab      	cmp	r3, r5
 801ea66:	f6ff aed0 	blt.w	801e80a <__gethex+0x20a>
 801ea6a:	2701      	movs	r7, #1
 801ea6c:	e7c0      	b.n	801e9f0 <__gethex+0x3f0>
 801ea6e:	f016 061f 	ands.w	r6, r6, #31
 801ea72:	d0fa      	beq.n	801ea6a <__gethex+0x46a>
 801ea74:	449a      	add	sl, r3
 801ea76:	f1c6 0620 	rsb	r6, r6, #32
 801ea7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ea7e:	f000 fa47 	bl	801ef10 <__hi0bits>
 801ea82:	42b0      	cmp	r0, r6
 801ea84:	dbe7      	blt.n	801ea56 <__gethex+0x456>
 801ea86:	e7f0      	b.n	801ea6a <__gethex+0x46a>
 801ea88:	080294a4 	.word	0x080294a4

0801ea8c <L_shift>:
 801ea8c:	f1c2 0208 	rsb	r2, r2, #8
 801ea90:	0092      	lsls	r2, r2, #2
 801ea92:	b570      	push	{r4, r5, r6, lr}
 801ea94:	f1c2 0620 	rsb	r6, r2, #32
 801ea98:	6843      	ldr	r3, [r0, #4]
 801ea9a:	6804      	ldr	r4, [r0, #0]
 801ea9c:	fa03 f506 	lsl.w	r5, r3, r6
 801eaa0:	432c      	orrs	r4, r5
 801eaa2:	40d3      	lsrs	r3, r2
 801eaa4:	6004      	str	r4, [r0, #0]
 801eaa6:	f840 3f04 	str.w	r3, [r0, #4]!
 801eaaa:	4288      	cmp	r0, r1
 801eaac:	d3f4      	bcc.n	801ea98 <L_shift+0xc>
 801eaae:	bd70      	pop	{r4, r5, r6, pc}

0801eab0 <__match>:
 801eab0:	b530      	push	{r4, r5, lr}
 801eab2:	6803      	ldr	r3, [r0, #0]
 801eab4:	3301      	adds	r3, #1
 801eab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eaba:	b914      	cbnz	r4, 801eac2 <__match+0x12>
 801eabc:	6003      	str	r3, [r0, #0]
 801eabe:	2001      	movs	r0, #1
 801eac0:	bd30      	pop	{r4, r5, pc}
 801eac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eac6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801eaca:	2d19      	cmp	r5, #25
 801eacc:	bf98      	it	ls
 801eace:	3220      	addls	r2, #32
 801ead0:	42a2      	cmp	r2, r4
 801ead2:	d0f0      	beq.n	801eab6 <__match+0x6>
 801ead4:	2000      	movs	r0, #0
 801ead6:	e7f3      	b.n	801eac0 <__match+0x10>

0801ead8 <__hexnan>:
 801ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eadc:	680b      	ldr	r3, [r1, #0]
 801eade:	6801      	ldr	r1, [r0, #0]
 801eae0:	115e      	asrs	r6, r3, #5
 801eae2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801eae6:	f013 031f 	ands.w	r3, r3, #31
 801eaea:	b087      	sub	sp, #28
 801eaec:	bf18      	it	ne
 801eaee:	3604      	addne	r6, #4
 801eaf0:	2500      	movs	r5, #0
 801eaf2:	1f37      	subs	r7, r6, #4
 801eaf4:	4682      	mov	sl, r0
 801eaf6:	4690      	mov	r8, r2
 801eaf8:	9301      	str	r3, [sp, #4]
 801eafa:	f846 5c04 	str.w	r5, [r6, #-4]
 801eafe:	46b9      	mov	r9, r7
 801eb00:	463c      	mov	r4, r7
 801eb02:	9502      	str	r5, [sp, #8]
 801eb04:	46ab      	mov	fp, r5
 801eb06:	784a      	ldrb	r2, [r1, #1]
 801eb08:	1c4b      	adds	r3, r1, #1
 801eb0a:	9303      	str	r3, [sp, #12]
 801eb0c:	b342      	cbz	r2, 801eb60 <__hexnan+0x88>
 801eb0e:	4610      	mov	r0, r2
 801eb10:	9105      	str	r1, [sp, #20]
 801eb12:	9204      	str	r2, [sp, #16]
 801eb14:	f7ff fd5f 	bl	801e5d6 <__hexdig_fun>
 801eb18:	2800      	cmp	r0, #0
 801eb1a:	d14f      	bne.n	801ebbc <__hexnan+0xe4>
 801eb1c:	9a04      	ldr	r2, [sp, #16]
 801eb1e:	9905      	ldr	r1, [sp, #20]
 801eb20:	2a20      	cmp	r2, #32
 801eb22:	d818      	bhi.n	801eb56 <__hexnan+0x7e>
 801eb24:	9b02      	ldr	r3, [sp, #8]
 801eb26:	459b      	cmp	fp, r3
 801eb28:	dd13      	ble.n	801eb52 <__hexnan+0x7a>
 801eb2a:	454c      	cmp	r4, r9
 801eb2c:	d206      	bcs.n	801eb3c <__hexnan+0x64>
 801eb2e:	2d07      	cmp	r5, #7
 801eb30:	dc04      	bgt.n	801eb3c <__hexnan+0x64>
 801eb32:	462a      	mov	r2, r5
 801eb34:	4649      	mov	r1, r9
 801eb36:	4620      	mov	r0, r4
 801eb38:	f7ff ffa8 	bl	801ea8c <L_shift>
 801eb3c:	4544      	cmp	r4, r8
 801eb3e:	d950      	bls.n	801ebe2 <__hexnan+0x10a>
 801eb40:	2300      	movs	r3, #0
 801eb42:	f1a4 0904 	sub.w	r9, r4, #4
 801eb46:	f844 3c04 	str.w	r3, [r4, #-4]
 801eb4a:	f8cd b008 	str.w	fp, [sp, #8]
 801eb4e:	464c      	mov	r4, r9
 801eb50:	461d      	mov	r5, r3
 801eb52:	9903      	ldr	r1, [sp, #12]
 801eb54:	e7d7      	b.n	801eb06 <__hexnan+0x2e>
 801eb56:	2a29      	cmp	r2, #41	; 0x29
 801eb58:	d156      	bne.n	801ec08 <__hexnan+0x130>
 801eb5a:	3102      	adds	r1, #2
 801eb5c:	f8ca 1000 	str.w	r1, [sl]
 801eb60:	f1bb 0f00 	cmp.w	fp, #0
 801eb64:	d050      	beq.n	801ec08 <__hexnan+0x130>
 801eb66:	454c      	cmp	r4, r9
 801eb68:	d206      	bcs.n	801eb78 <__hexnan+0xa0>
 801eb6a:	2d07      	cmp	r5, #7
 801eb6c:	dc04      	bgt.n	801eb78 <__hexnan+0xa0>
 801eb6e:	462a      	mov	r2, r5
 801eb70:	4649      	mov	r1, r9
 801eb72:	4620      	mov	r0, r4
 801eb74:	f7ff ff8a 	bl	801ea8c <L_shift>
 801eb78:	4544      	cmp	r4, r8
 801eb7a:	d934      	bls.n	801ebe6 <__hexnan+0x10e>
 801eb7c:	f1a8 0204 	sub.w	r2, r8, #4
 801eb80:	4623      	mov	r3, r4
 801eb82:	f853 1b04 	ldr.w	r1, [r3], #4
 801eb86:	f842 1f04 	str.w	r1, [r2, #4]!
 801eb8a:	429f      	cmp	r7, r3
 801eb8c:	d2f9      	bcs.n	801eb82 <__hexnan+0xaa>
 801eb8e:	1b3b      	subs	r3, r7, r4
 801eb90:	f023 0303 	bic.w	r3, r3, #3
 801eb94:	3304      	adds	r3, #4
 801eb96:	3401      	adds	r4, #1
 801eb98:	3e03      	subs	r6, #3
 801eb9a:	42b4      	cmp	r4, r6
 801eb9c:	bf88      	it	hi
 801eb9e:	2304      	movhi	r3, #4
 801eba0:	4443      	add	r3, r8
 801eba2:	2200      	movs	r2, #0
 801eba4:	f843 2b04 	str.w	r2, [r3], #4
 801eba8:	429f      	cmp	r7, r3
 801ebaa:	d2fb      	bcs.n	801eba4 <__hexnan+0xcc>
 801ebac:	683b      	ldr	r3, [r7, #0]
 801ebae:	b91b      	cbnz	r3, 801ebb8 <__hexnan+0xe0>
 801ebb0:	4547      	cmp	r7, r8
 801ebb2:	d127      	bne.n	801ec04 <__hexnan+0x12c>
 801ebb4:	2301      	movs	r3, #1
 801ebb6:	603b      	str	r3, [r7, #0]
 801ebb8:	2005      	movs	r0, #5
 801ebba:	e026      	b.n	801ec0a <__hexnan+0x132>
 801ebbc:	3501      	adds	r5, #1
 801ebbe:	2d08      	cmp	r5, #8
 801ebc0:	f10b 0b01 	add.w	fp, fp, #1
 801ebc4:	dd06      	ble.n	801ebd4 <__hexnan+0xfc>
 801ebc6:	4544      	cmp	r4, r8
 801ebc8:	d9c3      	bls.n	801eb52 <__hexnan+0x7a>
 801ebca:	2300      	movs	r3, #0
 801ebcc:	f844 3c04 	str.w	r3, [r4, #-4]
 801ebd0:	2501      	movs	r5, #1
 801ebd2:	3c04      	subs	r4, #4
 801ebd4:	6822      	ldr	r2, [r4, #0]
 801ebd6:	f000 000f 	and.w	r0, r0, #15
 801ebda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ebde:	6022      	str	r2, [r4, #0]
 801ebe0:	e7b7      	b.n	801eb52 <__hexnan+0x7a>
 801ebe2:	2508      	movs	r5, #8
 801ebe4:	e7b5      	b.n	801eb52 <__hexnan+0x7a>
 801ebe6:	9b01      	ldr	r3, [sp, #4]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d0df      	beq.n	801ebac <__hexnan+0xd4>
 801ebec:	f04f 32ff 	mov.w	r2, #4294967295
 801ebf0:	f1c3 0320 	rsb	r3, r3, #32
 801ebf4:	fa22 f303 	lsr.w	r3, r2, r3
 801ebf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ebfc:	401a      	ands	r2, r3
 801ebfe:	f846 2c04 	str.w	r2, [r6, #-4]
 801ec02:	e7d3      	b.n	801ebac <__hexnan+0xd4>
 801ec04:	3f04      	subs	r7, #4
 801ec06:	e7d1      	b.n	801ebac <__hexnan+0xd4>
 801ec08:	2004      	movs	r0, #4
 801ec0a:	b007      	add	sp, #28
 801ec0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec10 <_localeconv_r>:
 801ec10:	4800      	ldr	r0, [pc, #0]	; (801ec14 <_localeconv_r+0x4>)
 801ec12:	4770      	bx	lr
 801ec14:	2400a280 	.word	0x2400a280

0801ec18 <__retarget_lock_init_recursive>:
 801ec18:	4770      	bx	lr

0801ec1a <__retarget_lock_acquire_recursive>:
 801ec1a:	4770      	bx	lr

0801ec1c <__retarget_lock_release_recursive>:
 801ec1c:	4770      	bx	lr

0801ec1e <__swhatbuf_r>:
 801ec1e:	b570      	push	{r4, r5, r6, lr}
 801ec20:	460e      	mov	r6, r1
 801ec22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec26:	2900      	cmp	r1, #0
 801ec28:	b096      	sub	sp, #88	; 0x58
 801ec2a:	4614      	mov	r4, r2
 801ec2c:	461d      	mov	r5, r3
 801ec2e:	da07      	bge.n	801ec40 <__swhatbuf_r+0x22>
 801ec30:	2300      	movs	r3, #0
 801ec32:	602b      	str	r3, [r5, #0]
 801ec34:	89b3      	ldrh	r3, [r6, #12]
 801ec36:	061a      	lsls	r2, r3, #24
 801ec38:	d410      	bmi.n	801ec5c <__swhatbuf_r+0x3e>
 801ec3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec3e:	e00e      	b.n	801ec5e <__swhatbuf_r+0x40>
 801ec40:	466a      	mov	r2, sp
 801ec42:	f000 ff7b 	bl	801fb3c <_fstat_r>
 801ec46:	2800      	cmp	r0, #0
 801ec48:	dbf2      	blt.n	801ec30 <__swhatbuf_r+0x12>
 801ec4a:	9a01      	ldr	r2, [sp, #4]
 801ec4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ec50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ec54:	425a      	negs	r2, r3
 801ec56:	415a      	adcs	r2, r3
 801ec58:	602a      	str	r2, [r5, #0]
 801ec5a:	e7ee      	b.n	801ec3a <__swhatbuf_r+0x1c>
 801ec5c:	2340      	movs	r3, #64	; 0x40
 801ec5e:	2000      	movs	r0, #0
 801ec60:	6023      	str	r3, [r4, #0]
 801ec62:	b016      	add	sp, #88	; 0x58
 801ec64:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ec68 <__smakebuf_r>:
 801ec68:	898b      	ldrh	r3, [r1, #12]
 801ec6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec6c:	079d      	lsls	r5, r3, #30
 801ec6e:	4606      	mov	r6, r0
 801ec70:	460c      	mov	r4, r1
 801ec72:	d507      	bpl.n	801ec84 <__smakebuf_r+0x1c>
 801ec74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ec78:	6023      	str	r3, [r4, #0]
 801ec7a:	6123      	str	r3, [r4, #16]
 801ec7c:	2301      	movs	r3, #1
 801ec7e:	6163      	str	r3, [r4, #20]
 801ec80:	b002      	add	sp, #8
 801ec82:	bd70      	pop	{r4, r5, r6, pc}
 801ec84:	ab01      	add	r3, sp, #4
 801ec86:	466a      	mov	r2, sp
 801ec88:	f7ff ffc9 	bl	801ec1e <__swhatbuf_r>
 801ec8c:	9900      	ldr	r1, [sp, #0]
 801ec8e:	4605      	mov	r5, r0
 801ec90:	4630      	mov	r0, r6
 801ec92:	f7fc fc21 	bl	801b4d8 <_malloc_r>
 801ec96:	b948      	cbnz	r0, 801ecac <__smakebuf_r+0x44>
 801ec98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec9c:	059a      	lsls	r2, r3, #22
 801ec9e:	d4ef      	bmi.n	801ec80 <__smakebuf_r+0x18>
 801eca0:	f023 0303 	bic.w	r3, r3, #3
 801eca4:	f043 0302 	orr.w	r3, r3, #2
 801eca8:	81a3      	strh	r3, [r4, #12]
 801ecaa:	e7e3      	b.n	801ec74 <__smakebuf_r+0xc>
 801ecac:	4b0d      	ldr	r3, [pc, #52]	; (801ece4 <__smakebuf_r+0x7c>)
 801ecae:	62b3      	str	r3, [r6, #40]	; 0x28
 801ecb0:	89a3      	ldrh	r3, [r4, #12]
 801ecb2:	6020      	str	r0, [r4, #0]
 801ecb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecb8:	81a3      	strh	r3, [r4, #12]
 801ecba:	9b00      	ldr	r3, [sp, #0]
 801ecbc:	6163      	str	r3, [r4, #20]
 801ecbe:	9b01      	ldr	r3, [sp, #4]
 801ecc0:	6120      	str	r0, [r4, #16]
 801ecc2:	b15b      	cbz	r3, 801ecdc <__smakebuf_r+0x74>
 801ecc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ecc8:	4630      	mov	r0, r6
 801ecca:	f000 ff49 	bl	801fb60 <_isatty_r>
 801ecce:	b128      	cbz	r0, 801ecdc <__smakebuf_r+0x74>
 801ecd0:	89a3      	ldrh	r3, [r4, #12]
 801ecd2:	f023 0303 	bic.w	r3, r3, #3
 801ecd6:	f043 0301 	orr.w	r3, r3, #1
 801ecda:	81a3      	strh	r3, [r4, #12]
 801ecdc:	89a0      	ldrh	r0, [r4, #12]
 801ecde:	4305      	orrs	r5, r0
 801ece0:	81a5      	strh	r5, [r4, #12]
 801ece2:	e7cd      	b.n	801ec80 <__smakebuf_r+0x18>
 801ece4:	0801e391 	.word	0x0801e391

0801ece8 <__ascii_mbtowc>:
 801ece8:	b082      	sub	sp, #8
 801ecea:	b901      	cbnz	r1, 801ecee <__ascii_mbtowc+0x6>
 801ecec:	a901      	add	r1, sp, #4
 801ecee:	b142      	cbz	r2, 801ed02 <__ascii_mbtowc+0x1a>
 801ecf0:	b14b      	cbz	r3, 801ed06 <__ascii_mbtowc+0x1e>
 801ecf2:	7813      	ldrb	r3, [r2, #0]
 801ecf4:	600b      	str	r3, [r1, #0]
 801ecf6:	7812      	ldrb	r2, [r2, #0]
 801ecf8:	1e10      	subs	r0, r2, #0
 801ecfa:	bf18      	it	ne
 801ecfc:	2001      	movne	r0, #1
 801ecfe:	b002      	add	sp, #8
 801ed00:	4770      	bx	lr
 801ed02:	4610      	mov	r0, r2
 801ed04:	e7fb      	b.n	801ecfe <__ascii_mbtowc+0x16>
 801ed06:	f06f 0001 	mvn.w	r0, #1
 801ed0a:	e7f8      	b.n	801ecfe <__ascii_mbtowc+0x16>

0801ed0c <__malloc_lock>:
 801ed0c:	4801      	ldr	r0, [pc, #4]	; (801ed14 <__malloc_lock+0x8>)
 801ed0e:	f7ff bf84 	b.w	801ec1a <__retarget_lock_acquire_recursive>
 801ed12:	bf00      	nop
 801ed14:	240148bc 	.word	0x240148bc

0801ed18 <__malloc_unlock>:
 801ed18:	4801      	ldr	r0, [pc, #4]	; (801ed20 <__malloc_unlock+0x8>)
 801ed1a:	f7ff bf7f 	b.w	801ec1c <__retarget_lock_release_recursive>
 801ed1e:	bf00      	nop
 801ed20:	240148bc 	.word	0x240148bc

0801ed24 <_Balloc>:
 801ed24:	b570      	push	{r4, r5, r6, lr}
 801ed26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ed28:	4604      	mov	r4, r0
 801ed2a:	460d      	mov	r5, r1
 801ed2c:	b976      	cbnz	r6, 801ed4c <_Balloc+0x28>
 801ed2e:	2010      	movs	r0, #16
 801ed30:	f7fc fb42 	bl	801b3b8 <malloc>
 801ed34:	4602      	mov	r2, r0
 801ed36:	6260      	str	r0, [r4, #36]	; 0x24
 801ed38:	b920      	cbnz	r0, 801ed44 <_Balloc+0x20>
 801ed3a:	4b18      	ldr	r3, [pc, #96]	; (801ed9c <_Balloc+0x78>)
 801ed3c:	4818      	ldr	r0, [pc, #96]	; (801eda0 <_Balloc+0x7c>)
 801ed3e:	2166      	movs	r1, #102	; 0x66
 801ed40:	f7fc fadc 	bl	801b2fc <__assert_func>
 801ed44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ed48:	6006      	str	r6, [r0, #0]
 801ed4a:	60c6      	str	r6, [r0, #12]
 801ed4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ed4e:	68f3      	ldr	r3, [r6, #12]
 801ed50:	b183      	cbz	r3, 801ed74 <_Balloc+0x50>
 801ed52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed54:	68db      	ldr	r3, [r3, #12]
 801ed56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ed5a:	b9b8      	cbnz	r0, 801ed8c <_Balloc+0x68>
 801ed5c:	2101      	movs	r1, #1
 801ed5e:	fa01 f605 	lsl.w	r6, r1, r5
 801ed62:	1d72      	adds	r2, r6, #5
 801ed64:	0092      	lsls	r2, r2, #2
 801ed66:	4620      	mov	r0, r4
 801ed68:	f000 fc98 	bl	801f69c <_calloc_r>
 801ed6c:	b160      	cbz	r0, 801ed88 <_Balloc+0x64>
 801ed6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ed72:	e00e      	b.n	801ed92 <_Balloc+0x6e>
 801ed74:	2221      	movs	r2, #33	; 0x21
 801ed76:	2104      	movs	r1, #4
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f000 fc8f 	bl	801f69c <_calloc_r>
 801ed7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed80:	60f0      	str	r0, [r6, #12]
 801ed82:	68db      	ldr	r3, [r3, #12]
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	d1e4      	bne.n	801ed52 <_Balloc+0x2e>
 801ed88:	2000      	movs	r0, #0
 801ed8a:	bd70      	pop	{r4, r5, r6, pc}
 801ed8c:	6802      	ldr	r2, [r0, #0]
 801ed8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ed92:	2300      	movs	r3, #0
 801ed94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ed98:	e7f7      	b.n	801ed8a <_Balloc+0x66>
 801ed9a:	bf00      	nop
 801ed9c:	0802942e 	.word	0x0802942e
 801eda0:	08029598 	.word	0x08029598

0801eda4 <_Bfree>:
 801eda4:	b570      	push	{r4, r5, r6, lr}
 801eda6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eda8:	4605      	mov	r5, r0
 801edaa:	460c      	mov	r4, r1
 801edac:	b976      	cbnz	r6, 801edcc <_Bfree+0x28>
 801edae:	2010      	movs	r0, #16
 801edb0:	f7fc fb02 	bl	801b3b8 <malloc>
 801edb4:	4602      	mov	r2, r0
 801edb6:	6268      	str	r0, [r5, #36]	; 0x24
 801edb8:	b920      	cbnz	r0, 801edc4 <_Bfree+0x20>
 801edba:	4b09      	ldr	r3, [pc, #36]	; (801ede0 <_Bfree+0x3c>)
 801edbc:	4809      	ldr	r0, [pc, #36]	; (801ede4 <_Bfree+0x40>)
 801edbe:	218a      	movs	r1, #138	; 0x8a
 801edc0:	f7fc fa9c 	bl	801b2fc <__assert_func>
 801edc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801edc8:	6006      	str	r6, [r0, #0]
 801edca:	60c6      	str	r6, [r0, #12]
 801edcc:	b13c      	cbz	r4, 801edde <_Bfree+0x3a>
 801edce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801edd0:	6862      	ldr	r2, [r4, #4]
 801edd2:	68db      	ldr	r3, [r3, #12]
 801edd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801edd8:	6021      	str	r1, [r4, #0]
 801edda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801edde:	bd70      	pop	{r4, r5, r6, pc}
 801ede0:	0802942e 	.word	0x0802942e
 801ede4:	08029598 	.word	0x08029598

0801ede8 <__multadd>:
 801ede8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edec:	690e      	ldr	r6, [r1, #16]
 801edee:	4607      	mov	r7, r0
 801edf0:	4698      	mov	r8, r3
 801edf2:	460c      	mov	r4, r1
 801edf4:	f101 0014 	add.w	r0, r1, #20
 801edf8:	2300      	movs	r3, #0
 801edfa:	6805      	ldr	r5, [r0, #0]
 801edfc:	b2a9      	uxth	r1, r5
 801edfe:	fb02 8101 	mla	r1, r2, r1, r8
 801ee02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801ee06:	0c2d      	lsrs	r5, r5, #16
 801ee08:	fb02 c505 	mla	r5, r2, r5, ip
 801ee0c:	b289      	uxth	r1, r1
 801ee0e:	3301      	adds	r3, #1
 801ee10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801ee14:	429e      	cmp	r6, r3
 801ee16:	f840 1b04 	str.w	r1, [r0], #4
 801ee1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801ee1e:	dcec      	bgt.n	801edfa <__multadd+0x12>
 801ee20:	f1b8 0f00 	cmp.w	r8, #0
 801ee24:	d022      	beq.n	801ee6c <__multadd+0x84>
 801ee26:	68a3      	ldr	r3, [r4, #8]
 801ee28:	42b3      	cmp	r3, r6
 801ee2a:	dc19      	bgt.n	801ee60 <__multadd+0x78>
 801ee2c:	6861      	ldr	r1, [r4, #4]
 801ee2e:	4638      	mov	r0, r7
 801ee30:	3101      	adds	r1, #1
 801ee32:	f7ff ff77 	bl	801ed24 <_Balloc>
 801ee36:	4605      	mov	r5, r0
 801ee38:	b928      	cbnz	r0, 801ee46 <__multadd+0x5e>
 801ee3a:	4602      	mov	r2, r0
 801ee3c:	4b0d      	ldr	r3, [pc, #52]	; (801ee74 <__multadd+0x8c>)
 801ee3e:	480e      	ldr	r0, [pc, #56]	; (801ee78 <__multadd+0x90>)
 801ee40:	21b5      	movs	r1, #181	; 0xb5
 801ee42:	f7fc fa5b 	bl	801b2fc <__assert_func>
 801ee46:	6922      	ldr	r2, [r4, #16]
 801ee48:	3202      	adds	r2, #2
 801ee4a:	f104 010c 	add.w	r1, r4, #12
 801ee4e:	0092      	lsls	r2, r2, #2
 801ee50:	300c      	adds	r0, #12
 801ee52:	f7fc fac1 	bl	801b3d8 <memcpy>
 801ee56:	4621      	mov	r1, r4
 801ee58:	4638      	mov	r0, r7
 801ee5a:	f7ff ffa3 	bl	801eda4 <_Bfree>
 801ee5e:	462c      	mov	r4, r5
 801ee60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ee64:	3601      	adds	r6, #1
 801ee66:	f8c3 8014 	str.w	r8, [r3, #20]
 801ee6a:	6126      	str	r6, [r4, #16]
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee72:	bf00      	nop
 801ee74:	080294a4 	.word	0x080294a4
 801ee78:	08029598 	.word	0x08029598

0801ee7c <__s2b>:
 801ee7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee80:	460c      	mov	r4, r1
 801ee82:	4615      	mov	r5, r2
 801ee84:	461f      	mov	r7, r3
 801ee86:	2209      	movs	r2, #9
 801ee88:	3308      	adds	r3, #8
 801ee8a:	4606      	mov	r6, r0
 801ee8c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ee90:	2100      	movs	r1, #0
 801ee92:	2201      	movs	r2, #1
 801ee94:	429a      	cmp	r2, r3
 801ee96:	db09      	blt.n	801eeac <__s2b+0x30>
 801ee98:	4630      	mov	r0, r6
 801ee9a:	f7ff ff43 	bl	801ed24 <_Balloc>
 801ee9e:	b940      	cbnz	r0, 801eeb2 <__s2b+0x36>
 801eea0:	4602      	mov	r2, r0
 801eea2:	4b19      	ldr	r3, [pc, #100]	; (801ef08 <__s2b+0x8c>)
 801eea4:	4819      	ldr	r0, [pc, #100]	; (801ef0c <__s2b+0x90>)
 801eea6:	21ce      	movs	r1, #206	; 0xce
 801eea8:	f7fc fa28 	bl	801b2fc <__assert_func>
 801eeac:	0052      	lsls	r2, r2, #1
 801eeae:	3101      	adds	r1, #1
 801eeb0:	e7f0      	b.n	801ee94 <__s2b+0x18>
 801eeb2:	9b08      	ldr	r3, [sp, #32]
 801eeb4:	6143      	str	r3, [r0, #20]
 801eeb6:	2d09      	cmp	r5, #9
 801eeb8:	f04f 0301 	mov.w	r3, #1
 801eebc:	6103      	str	r3, [r0, #16]
 801eebe:	dd16      	ble.n	801eeee <__s2b+0x72>
 801eec0:	f104 0909 	add.w	r9, r4, #9
 801eec4:	46c8      	mov	r8, r9
 801eec6:	442c      	add	r4, r5
 801eec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801eecc:	4601      	mov	r1, r0
 801eece:	3b30      	subs	r3, #48	; 0x30
 801eed0:	220a      	movs	r2, #10
 801eed2:	4630      	mov	r0, r6
 801eed4:	f7ff ff88 	bl	801ede8 <__multadd>
 801eed8:	45a0      	cmp	r8, r4
 801eeda:	d1f5      	bne.n	801eec8 <__s2b+0x4c>
 801eedc:	f1a5 0408 	sub.w	r4, r5, #8
 801eee0:	444c      	add	r4, r9
 801eee2:	1b2d      	subs	r5, r5, r4
 801eee4:	1963      	adds	r3, r4, r5
 801eee6:	42bb      	cmp	r3, r7
 801eee8:	db04      	blt.n	801eef4 <__s2b+0x78>
 801eeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eeee:	340a      	adds	r4, #10
 801eef0:	2509      	movs	r5, #9
 801eef2:	e7f6      	b.n	801eee2 <__s2b+0x66>
 801eef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eef8:	4601      	mov	r1, r0
 801eefa:	3b30      	subs	r3, #48	; 0x30
 801eefc:	220a      	movs	r2, #10
 801eefe:	4630      	mov	r0, r6
 801ef00:	f7ff ff72 	bl	801ede8 <__multadd>
 801ef04:	e7ee      	b.n	801eee4 <__s2b+0x68>
 801ef06:	bf00      	nop
 801ef08:	080294a4 	.word	0x080294a4
 801ef0c:	08029598 	.word	0x08029598

0801ef10 <__hi0bits>:
 801ef10:	0c03      	lsrs	r3, r0, #16
 801ef12:	041b      	lsls	r3, r3, #16
 801ef14:	b9d3      	cbnz	r3, 801ef4c <__hi0bits+0x3c>
 801ef16:	0400      	lsls	r0, r0, #16
 801ef18:	2310      	movs	r3, #16
 801ef1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ef1e:	bf04      	itt	eq
 801ef20:	0200      	lsleq	r0, r0, #8
 801ef22:	3308      	addeq	r3, #8
 801ef24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ef28:	bf04      	itt	eq
 801ef2a:	0100      	lsleq	r0, r0, #4
 801ef2c:	3304      	addeq	r3, #4
 801ef2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ef32:	bf04      	itt	eq
 801ef34:	0080      	lsleq	r0, r0, #2
 801ef36:	3302      	addeq	r3, #2
 801ef38:	2800      	cmp	r0, #0
 801ef3a:	db05      	blt.n	801ef48 <__hi0bits+0x38>
 801ef3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ef40:	f103 0301 	add.w	r3, r3, #1
 801ef44:	bf08      	it	eq
 801ef46:	2320      	moveq	r3, #32
 801ef48:	4618      	mov	r0, r3
 801ef4a:	4770      	bx	lr
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	e7e4      	b.n	801ef1a <__hi0bits+0xa>

0801ef50 <__lo0bits>:
 801ef50:	6803      	ldr	r3, [r0, #0]
 801ef52:	f013 0207 	ands.w	r2, r3, #7
 801ef56:	4601      	mov	r1, r0
 801ef58:	d00b      	beq.n	801ef72 <__lo0bits+0x22>
 801ef5a:	07da      	lsls	r2, r3, #31
 801ef5c:	d424      	bmi.n	801efa8 <__lo0bits+0x58>
 801ef5e:	0798      	lsls	r0, r3, #30
 801ef60:	bf49      	itett	mi
 801ef62:	085b      	lsrmi	r3, r3, #1
 801ef64:	089b      	lsrpl	r3, r3, #2
 801ef66:	2001      	movmi	r0, #1
 801ef68:	600b      	strmi	r3, [r1, #0]
 801ef6a:	bf5c      	itt	pl
 801ef6c:	600b      	strpl	r3, [r1, #0]
 801ef6e:	2002      	movpl	r0, #2
 801ef70:	4770      	bx	lr
 801ef72:	b298      	uxth	r0, r3
 801ef74:	b9b0      	cbnz	r0, 801efa4 <__lo0bits+0x54>
 801ef76:	0c1b      	lsrs	r3, r3, #16
 801ef78:	2010      	movs	r0, #16
 801ef7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ef7e:	bf04      	itt	eq
 801ef80:	0a1b      	lsreq	r3, r3, #8
 801ef82:	3008      	addeq	r0, #8
 801ef84:	071a      	lsls	r2, r3, #28
 801ef86:	bf04      	itt	eq
 801ef88:	091b      	lsreq	r3, r3, #4
 801ef8a:	3004      	addeq	r0, #4
 801ef8c:	079a      	lsls	r2, r3, #30
 801ef8e:	bf04      	itt	eq
 801ef90:	089b      	lsreq	r3, r3, #2
 801ef92:	3002      	addeq	r0, #2
 801ef94:	07da      	lsls	r2, r3, #31
 801ef96:	d403      	bmi.n	801efa0 <__lo0bits+0x50>
 801ef98:	085b      	lsrs	r3, r3, #1
 801ef9a:	f100 0001 	add.w	r0, r0, #1
 801ef9e:	d005      	beq.n	801efac <__lo0bits+0x5c>
 801efa0:	600b      	str	r3, [r1, #0]
 801efa2:	4770      	bx	lr
 801efa4:	4610      	mov	r0, r2
 801efa6:	e7e8      	b.n	801ef7a <__lo0bits+0x2a>
 801efa8:	2000      	movs	r0, #0
 801efaa:	4770      	bx	lr
 801efac:	2020      	movs	r0, #32
 801efae:	4770      	bx	lr

0801efb0 <__i2b>:
 801efb0:	b510      	push	{r4, lr}
 801efb2:	460c      	mov	r4, r1
 801efb4:	2101      	movs	r1, #1
 801efb6:	f7ff feb5 	bl	801ed24 <_Balloc>
 801efba:	4602      	mov	r2, r0
 801efbc:	b928      	cbnz	r0, 801efca <__i2b+0x1a>
 801efbe:	4b05      	ldr	r3, [pc, #20]	; (801efd4 <__i2b+0x24>)
 801efc0:	4805      	ldr	r0, [pc, #20]	; (801efd8 <__i2b+0x28>)
 801efc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801efc6:	f7fc f999 	bl	801b2fc <__assert_func>
 801efca:	2301      	movs	r3, #1
 801efcc:	6144      	str	r4, [r0, #20]
 801efce:	6103      	str	r3, [r0, #16]
 801efd0:	bd10      	pop	{r4, pc}
 801efd2:	bf00      	nop
 801efd4:	080294a4 	.word	0x080294a4
 801efd8:	08029598 	.word	0x08029598

0801efdc <__multiply>:
 801efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe0:	4614      	mov	r4, r2
 801efe2:	690a      	ldr	r2, [r1, #16]
 801efe4:	6923      	ldr	r3, [r4, #16]
 801efe6:	429a      	cmp	r2, r3
 801efe8:	bfb8      	it	lt
 801efea:	460b      	movlt	r3, r1
 801efec:	460d      	mov	r5, r1
 801efee:	bfbc      	itt	lt
 801eff0:	4625      	movlt	r5, r4
 801eff2:	461c      	movlt	r4, r3
 801eff4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801eff8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801effc:	68ab      	ldr	r3, [r5, #8]
 801effe:	6869      	ldr	r1, [r5, #4]
 801f000:	eb0a 0709 	add.w	r7, sl, r9
 801f004:	42bb      	cmp	r3, r7
 801f006:	b085      	sub	sp, #20
 801f008:	bfb8      	it	lt
 801f00a:	3101      	addlt	r1, #1
 801f00c:	f7ff fe8a 	bl	801ed24 <_Balloc>
 801f010:	b930      	cbnz	r0, 801f020 <__multiply+0x44>
 801f012:	4602      	mov	r2, r0
 801f014:	4b42      	ldr	r3, [pc, #264]	; (801f120 <__multiply+0x144>)
 801f016:	4843      	ldr	r0, [pc, #268]	; (801f124 <__multiply+0x148>)
 801f018:	f240 115d 	movw	r1, #349	; 0x15d
 801f01c:	f7fc f96e 	bl	801b2fc <__assert_func>
 801f020:	f100 0614 	add.w	r6, r0, #20
 801f024:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801f028:	4633      	mov	r3, r6
 801f02a:	2200      	movs	r2, #0
 801f02c:	4543      	cmp	r3, r8
 801f02e:	d31e      	bcc.n	801f06e <__multiply+0x92>
 801f030:	f105 0c14 	add.w	ip, r5, #20
 801f034:	f104 0314 	add.w	r3, r4, #20
 801f038:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801f03c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801f040:	9202      	str	r2, [sp, #8]
 801f042:	ebac 0205 	sub.w	r2, ip, r5
 801f046:	3a15      	subs	r2, #21
 801f048:	f022 0203 	bic.w	r2, r2, #3
 801f04c:	3204      	adds	r2, #4
 801f04e:	f105 0115 	add.w	r1, r5, #21
 801f052:	458c      	cmp	ip, r1
 801f054:	bf38      	it	cc
 801f056:	2204      	movcc	r2, #4
 801f058:	9201      	str	r2, [sp, #4]
 801f05a:	9a02      	ldr	r2, [sp, #8]
 801f05c:	9303      	str	r3, [sp, #12]
 801f05e:	429a      	cmp	r2, r3
 801f060:	d808      	bhi.n	801f074 <__multiply+0x98>
 801f062:	2f00      	cmp	r7, #0
 801f064:	dc55      	bgt.n	801f112 <__multiply+0x136>
 801f066:	6107      	str	r7, [r0, #16]
 801f068:	b005      	add	sp, #20
 801f06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f06e:	f843 2b04 	str.w	r2, [r3], #4
 801f072:	e7db      	b.n	801f02c <__multiply+0x50>
 801f074:	f8b3 a000 	ldrh.w	sl, [r3]
 801f078:	f1ba 0f00 	cmp.w	sl, #0
 801f07c:	d020      	beq.n	801f0c0 <__multiply+0xe4>
 801f07e:	f105 0e14 	add.w	lr, r5, #20
 801f082:	46b1      	mov	r9, r6
 801f084:	2200      	movs	r2, #0
 801f086:	f85e 4b04 	ldr.w	r4, [lr], #4
 801f08a:	f8d9 b000 	ldr.w	fp, [r9]
 801f08e:	b2a1      	uxth	r1, r4
 801f090:	fa1f fb8b 	uxth.w	fp, fp
 801f094:	fb0a b101 	mla	r1, sl, r1, fp
 801f098:	4411      	add	r1, r2
 801f09a:	f8d9 2000 	ldr.w	r2, [r9]
 801f09e:	0c24      	lsrs	r4, r4, #16
 801f0a0:	0c12      	lsrs	r2, r2, #16
 801f0a2:	fb0a 2404 	mla	r4, sl, r4, r2
 801f0a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801f0aa:	b289      	uxth	r1, r1
 801f0ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f0b0:	45f4      	cmp	ip, lr
 801f0b2:	f849 1b04 	str.w	r1, [r9], #4
 801f0b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801f0ba:	d8e4      	bhi.n	801f086 <__multiply+0xaa>
 801f0bc:	9901      	ldr	r1, [sp, #4]
 801f0be:	5072      	str	r2, [r6, r1]
 801f0c0:	9a03      	ldr	r2, [sp, #12]
 801f0c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f0c6:	3304      	adds	r3, #4
 801f0c8:	f1b9 0f00 	cmp.w	r9, #0
 801f0cc:	d01f      	beq.n	801f10e <__multiply+0x132>
 801f0ce:	6834      	ldr	r4, [r6, #0]
 801f0d0:	f105 0114 	add.w	r1, r5, #20
 801f0d4:	46b6      	mov	lr, r6
 801f0d6:	f04f 0a00 	mov.w	sl, #0
 801f0da:	880a      	ldrh	r2, [r1, #0]
 801f0dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 801f0e0:	fb09 b202 	mla	r2, r9, r2, fp
 801f0e4:	4492      	add	sl, r2
 801f0e6:	b2a4      	uxth	r4, r4
 801f0e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f0ec:	f84e 4b04 	str.w	r4, [lr], #4
 801f0f0:	f851 4b04 	ldr.w	r4, [r1], #4
 801f0f4:	f8be 2000 	ldrh.w	r2, [lr]
 801f0f8:	0c24      	lsrs	r4, r4, #16
 801f0fa:	fb09 2404 	mla	r4, r9, r4, r2
 801f0fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801f102:	458c      	cmp	ip, r1
 801f104:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801f108:	d8e7      	bhi.n	801f0da <__multiply+0xfe>
 801f10a:	9a01      	ldr	r2, [sp, #4]
 801f10c:	50b4      	str	r4, [r6, r2]
 801f10e:	3604      	adds	r6, #4
 801f110:	e7a3      	b.n	801f05a <__multiply+0x7e>
 801f112:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f116:	2b00      	cmp	r3, #0
 801f118:	d1a5      	bne.n	801f066 <__multiply+0x8a>
 801f11a:	3f01      	subs	r7, #1
 801f11c:	e7a1      	b.n	801f062 <__multiply+0x86>
 801f11e:	bf00      	nop
 801f120:	080294a4 	.word	0x080294a4
 801f124:	08029598 	.word	0x08029598

0801f128 <__pow5mult>:
 801f128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f12c:	4615      	mov	r5, r2
 801f12e:	f012 0203 	ands.w	r2, r2, #3
 801f132:	4606      	mov	r6, r0
 801f134:	460f      	mov	r7, r1
 801f136:	d007      	beq.n	801f148 <__pow5mult+0x20>
 801f138:	4c25      	ldr	r4, [pc, #148]	; (801f1d0 <__pow5mult+0xa8>)
 801f13a:	3a01      	subs	r2, #1
 801f13c:	2300      	movs	r3, #0
 801f13e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f142:	f7ff fe51 	bl	801ede8 <__multadd>
 801f146:	4607      	mov	r7, r0
 801f148:	10ad      	asrs	r5, r5, #2
 801f14a:	d03d      	beq.n	801f1c8 <__pow5mult+0xa0>
 801f14c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f14e:	b97c      	cbnz	r4, 801f170 <__pow5mult+0x48>
 801f150:	2010      	movs	r0, #16
 801f152:	f7fc f931 	bl	801b3b8 <malloc>
 801f156:	4602      	mov	r2, r0
 801f158:	6270      	str	r0, [r6, #36]	; 0x24
 801f15a:	b928      	cbnz	r0, 801f168 <__pow5mult+0x40>
 801f15c:	4b1d      	ldr	r3, [pc, #116]	; (801f1d4 <__pow5mult+0xac>)
 801f15e:	481e      	ldr	r0, [pc, #120]	; (801f1d8 <__pow5mult+0xb0>)
 801f160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f164:	f7fc f8ca 	bl	801b2fc <__assert_func>
 801f168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f16c:	6004      	str	r4, [r0, #0]
 801f16e:	60c4      	str	r4, [r0, #12]
 801f170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f178:	b94c      	cbnz	r4, 801f18e <__pow5mult+0x66>
 801f17a:	f240 2171 	movw	r1, #625	; 0x271
 801f17e:	4630      	mov	r0, r6
 801f180:	f7ff ff16 	bl	801efb0 <__i2b>
 801f184:	2300      	movs	r3, #0
 801f186:	f8c8 0008 	str.w	r0, [r8, #8]
 801f18a:	4604      	mov	r4, r0
 801f18c:	6003      	str	r3, [r0, #0]
 801f18e:	f04f 0900 	mov.w	r9, #0
 801f192:	07eb      	lsls	r3, r5, #31
 801f194:	d50a      	bpl.n	801f1ac <__pow5mult+0x84>
 801f196:	4639      	mov	r1, r7
 801f198:	4622      	mov	r2, r4
 801f19a:	4630      	mov	r0, r6
 801f19c:	f7ff ff1e 	bl	801efdc <__multiply>
 801f1a0:	4639      	mov	r1, r7
 801f1a2:	4680      	mov	r8, r0
 801f1a4:	4630      	mov	r0, r6
 801f1a6:	f7ff fdfd 	bl	801eda4 <_Bfree>
 801f1aa:	4647      	mov	r7, r8
 801f1ac:	106d      	asrs	r5, r5, #1
 801f1ae:	d00b      	beq.n	801f1c8 <__pow5mult+0xa0>
 801f1b0:	6820      	ldr	r0, [r4, #0]
 801f1b2:	b938      	cbnz	r0, 801f1c4 <__pow5mult+0x9c>
 801f1b4:	4622      	mov	r2, r4
 801f1b6:	4621      	mov	r1, r4
 801f1b8:	4630      	mov	r0, r6
 801f1ba:	f7ff ff0f 	bl	801efdc <__multiply>
 801f1be:	6020      	str	r0, [r4, #0]
 801f1c0:	f8c0 9000 	str.w	r9, [r0]
 801f1c4:	4604      	mov	r4, r0
 801f1c6:	e7e4      	b.n	801f192 <__pow5mult+0x6a>
 801f1c8:	4638      	mov	r0, r7
 801f1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1ce:	bf00      	nop
 801f1d0:	080296e8 	.word	0x080296e8
 801f1d4:	0802942e 	.word	0x0802942e
 801f1d8:	08029598 	.word	0x08029598

0801f1dc <__lshift>:
 801f1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f1e0:	460c      	mov	r4, r1
 801f1e2:	6849      	ldr	r1, [r1, #4]
 801f1e4:	6923      	ldr	r3, [r4, #16]
 801f1e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f1ea:	68a3      	ldr	r3, [r4, #8]
 801f1ec:	4607      	mov	r7, r0
 801f1ee:	4691      	mov	r9, r2
 801f1f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f1f4:	f108 0601 	add.w	r6, r8, #1
 801f1f8:	42b3      	cmp	r3, r6
 801f1fa:	db0b      	blt.n	801f214 <__lshift+0x38>
 801f1fc:	4638      	mov	r0, r7
 801f1fe:	f7ff fd91 	bl	801ed24 <_Balloc>
 801f202:	4605      	mov	r5, r0
 801f204:	b948      	cbnz	r0, 801f21a <__lshift+0x3e>
 801f206:	4602      	mov	r2, r0
 801f208:	4b28      	ldr	r3, [pc, #160]	; (801f2ac <__lshift+0xd0>)
 801f20a:	4829      	ldr	r0, [pc, #164]	; (801f2b0 <__lshift+0xd4>)
 801f20c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f210:	f7fc f874 	bl	801b2fc <__assert_func>
 801f214:	3101      	adds	r1, #1
 801f216:	005b      	lsls	r3, r3, #1
 801f218:	e7ee      	b.n	801f1f8 <__lshift+0x1c>
 801f21a:	2300      	movs	r3, #0
 801f21c:	f100 0114 	add.w	r1, r0, #20
 801f220:	f100 0210 	add.w	r2, r0, #16
 801f224:	4618      	mov	r0, r3
 801f226:	4553      	cmp	r3, sl
 801f228:	db33      	blt.n	801f292 <__lshift+0xb6>
 801f22a:	6920      	ldr	r0, [r4, #16]
 801f22c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f230:	f104 0314 	add.w	r3, r4, #20
 801f234:	f019 091f 	ands.w	r9, r9, #31
 801f238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f23c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f240:	d02b      	beq.n	801f29a <__lshift+0xbe>
 801f242:	f1c9 0e20 	rsb	lr, r9, #32
 801f246:	468a      	mov	sl, r1
 801f248:	2200      	movs	r2, #0
 801f24a:	6818      	ldr	r0, [r3, #0]
 801f24c:	fa00 f009 	lsl.w	r0, r0, r9
 801f250:	4302      	orrs	r2, r0
 801f252:	f84a 2b04 	str.w	r2, [sl], #4
 801f256:	f853 2b04 	ldr.w	r2, [r3], #4
 801f25a:	459c      	cmp	ip, r3
 801f25c:	fa22 f20e 	lsr.w	r2, r2, lr
 801f260:	d8f3      	bhi.n	801f24a <__lshift+0x6e>
 801f262:	ebac 0304 	sub.w	r3, ip, r4
 801f266:	3b15      	subs	r3, #21
 801f268:	f023 0303 	bic.w	r3, r3, #3
 801f26c:	3304      	adds	r3, #4
 801f26e:	f104 0015 	add.w	r0, r4, #21
 801f272:	4584      	cmp	ip, r0
 801f274:	bf38      	it	cc
 801f276:	2304      	movcc	r3, #4
 801f278:	50ca      	str	r2, [r1, r3]
 801f27a:	b10a      	cbz	r2, 801f280 <__lshift+0xa4>
 801f27c:	f108 0602 	add.w	r6, r8, #2
 801f280:	3e01      	subs	r6, #1
 801f282:	4638      	mov	r0, r7
 801f284:	612e      	str	r6, [r5, #16]
 801f286:	4621      	mov	r1, r4
 801f288:	f7ff fd8c 	bl	801eda4 <_Bfree>
 801f28c:	4628      	mov	r0, r5
 801f28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f292:	f842 0f04 	str.w	r0, [r2, #4]!
 801f296:	3301      	adds	r3, #1
 801f298:	e7c5      	b.n	801f226 <__lshift+0x4a>
 801f29a:	3904      	subs	r1, #4
 801f29c:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2a0:	f841 2f04 	str.w	r2, [r1, #4]!
 801f2a4:	459c      	cmp	ip, r3
 801f2a6:	d8f9      	bhi.n	801f29c <__lshift+0xc0>
 801f2a8:	e7ea      	b.n	801f280 <__lshift+0xa4>
 801f2aa:	bf00      	nop
 801f2ac:	080294a4 	.word	0x080294a4
 801f2b0:	08029598 	.word	0x08029598

0801f2b4 <__mcmp>:
 801f2b4:	b530      	push	{r4, r5, lr}
 801f2b6:	6902      	ldr	r2, [r0, #16]
 801f2b8:	690c      	ldr	r4, [r1, #16]
 801f2ba:	1b12      	subs	r2, r2, r4
 801f2bc:	d10e      	bne.n	801f2dc <__mcmp+0x28>
 801f2be:	f100 0314 	add.w	r3, r0, #20
 801f2c2:	3114      	adds	r1, #20
 801f2c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f2c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f2cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f2d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f2d4:	42a5      	cmp	r5, r4
 801f2d6:	d003      	beq.n	801f2e0 <__mcmp+0x2c>
 801f2d8:	d305      	bcc.n	801f2e6 <__mcmp+0x32>
 801f2da:	2201      	movs	r2, #1
 801f2dc:	4610      	mov	r0, r2
 801f2de:	bd30      	pop	{r4, r5, pc}
 801f2e0:	4283      	cmp	r3, r0
 801f2e2:	d3f3      	bcc.n	801f2cc <__mcmp+0x18>
 801f2e4:	e7fa      	b.n	801f2dc <__mcmp+0x28>
 801f2e6:	f04f 32ff 	mov.w	r2, #4294967295
 801f2ea:	e7f7      	b.n	801f2dc <__mcmp+0x28>

0801f2ec <__mdiff>:
 801f2ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f0:	460c      	mov	r4, r1
 801f2f2:	4606      	mov	r6, r0
 801f2f4:	4611      	mov	r1, r2
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	4617      	mov	r7, r2
 801f2fa:	f7ff ffdb 	bl	801f2b4 <__mcmp>
 801f2fe:	1e05      	subs	r5, r0, #0
 801f300:	d110      	bne.n	801f324 <__mdiff+0x38>
 801f302:	4629      	mov	r1, r5
 801f304:	4630      	mov	r0, r6
 801f306:	f7ff fd0d 	bl	801ed24 <_Balloc>
 801f30a:	b930      	cbnz	r0, 801f31a <__mdiff+0x2e>
 801f30c:	4b39      	ldr	r3, [pc, #228]	; (801f3f4 <__mdiff+0x108>)
 801f30e:	4602      	mov	r2, r0
 801f310:	f240 2132 	movw	r1, #562	; 0x232
 801f314:	4838      	ldr	r0, [pc, #224]	; (801f3f8 <__mdiff+0x10c>)
 801f316:	f7fb fff1 	bl	801b2fc <__assert_func>
 801f31a:	2301      	movs	r3, #1
 801f31c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f324:	bfa4      	itt	ge
 801f326:	463b      	movge	r3, r7
 801f328:	4627      	movge	r7, r4
 801f32a:	4630      	mov	r0, r6
 801f32c:	6879      	ldr	r1, [r7, #4]
 801f32e:	bfa6      	itte	ge
 801f330:	461c      	movge	r4, r3
 801f332:	2500      	movge	r5, #0
 801f334:	2501      	movlt	r5, #1
 801f336:	f7ff fcf5 	bl	801ed24 <_Balloc>
 801f33a:	b920      	cbnz	r0, 801f346 <__mdiff+0x5a>
 801f33c:	4b2d      	ldr	r3, [pc, #180]	; (801f3f4 <__mdiff+0x108>)
 801f33e:	4602      	mov	r2, r0
 801f340:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f344:	e7e6      	b.n	801f314 <__mdiff+0x28>
 801f346:	693e      	ldr	r6, [r7, #16]
 801f348:	60c5      	str	r5, [r0, #12]
 801f34a:	6925      	ldr	r5, [r4, #16]
 801f34c:	f107 0114 	add.w	r1, r7, #20
 801f350:	f104 0914 	add.w	r9, r4, #20
 801f354:	f100 0e14 	add.w	lr, r0, #20
 801f358:	f107 0210 	add.w	r2, r7, #16
 801f35c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801f360:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801f364:	46f2      	mov	sl, lr
 801f366:	2700      	movs	r7, #0
 801f368:	f859 3b04 	ldr.w	r3, [r9], #4
 801f36c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f370:	fa1f f883 	uxth.w	r8, r3
 801f374:	fa17 f78b 	uxtah	r7, r7, fp
 801f378:	0c1b      	lsrs	r3, r3, #16
 801f37a:	eba7 0808 	sub.w	r8, r7, r8
 801f37e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f382:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f386:	fa1f f888 	uxth.w	r8, r8
 801f38a:	141f      	asrs	r7, r3, #16
 801f38c:	454d      	cmp	r5, r9
 801f38e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f392:	f84a 3b04 	str.w	r3, [sl], #4
 801f396:	d8e7      	bhi.n	801f368 <__mdiff+0x7c>
 801f398:	1b2b      	subs	r3, r5, r4
 801f39a:	3b15      	subs	r3, #21
 801f39c:	f023 0303 	bic.w	r3, r3, #3
 801f3a0:	3304      	adds	r3, #4
 801f3a2:	3415      	adds	r4, #21
 801f3a4:	42a5      	cmp	r5, r4
 801f3a6:	bf38      	it	cc
 801f3a8:	2304      	movcc	r3, #4
 801f3aa:	4419      	add	r1, r3
 801f3ac:	4473      	add	r3, lr
 801f3ae:	469e      	mov	lr, r3
 801f3b0:	460d      	mov	r5, r1
 801f3b2:	4565      	cmp	r5, ip
 801f3b4:	d30e      	bcc.n	801f3d4 <__mdiff+0xe8>
 801f3b6:	f10c 0203 	add.w	r2, ip, #3
 801f3ba:	1a52      	subs	r2, r2, r1
 801f3bc:	f022 0203 	bic.w	r2, r2, #3
 801f3c0:	3903      	subs	r1, #3
 801f3c2:	458c      	cmp	ip, r1
 801f3c4:	bf38      	it	cc
 801f3c6:	2200      	movcc	r2, #0
 801f3c8:	441a      	add	r2, r3
 801f3ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f3ce:	b17b      	cbz	r3, 801f3f0 <__mdiff+0x104>
 801f3d0:	6106      	str	r6, [r0, #16]
 801f3d2:	e7a5      	b.n	801f320 <__mdiff+0x34>
 801f3d4:	f855 8b04 	ldr.w	r8, [r5], #4
 801f3d8:	fa17 f488 	uxtah	r4, r7, r8
 801f3dc:	1422      	asrs	r2, r4, #16
 801f3de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801f3e2:	b2a4      	uxth	r4, r4
 801f3e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801f3e8:	f84e 4b04 	str.w	r4, [lr], #4
 801f3ec:	1417      	asrs	r7, r2, #16
 801f3ee:	e7e0      	b.n	801f3b2 <__mdiff+0xc6>
 801f3f0:	3e01      	subs	r6, #1
 801f3f2:	e7ea      	b.n	801f3ca <__mdiff+0xde>
 801f3f4:	080294a4 	.word	0x080294a4
 801f3f8:	08029598 	.word	0x08029598

0801f3fc <__ulp>:
 801f3fc:	b082      	sub	sp, #8
 801f3fe:	ed8d 0b00 	vstr	d0, [sp]
 801f402:	9b01      	ldr	r3, [sp, #4]
 801f404:	4912      	ldr	r1, [pc, #72]	; (801f450 <__ulp+0x54>)
 801f406:	4019      	ands	r1, r3
 801f408:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f40c:	2900      	cmp	r1, #0
 801f40e:	dd05      	ble.n	801f41c <__ulp+0x20>
 801f410:	2200      	movs	r2, #0
 801f412:	460b      	mov	r3, r1
 801f414:	ec43 2b10 	vmov	d0, r2, r3
 801f418:	b002      	add	sp, #8
 801f41a:	4770      	bx	lr
 801f41c:	4249      	negs	r1, r1
 801f41e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f422:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f426:	f04f 0200 	mov.w	r2, #0
 801f42a:	f04f 0300 	mov.w	r3, #0
 801f42e:	da04      	bge.n	801f43a <__ulp+0x3e>
 801f430:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f434:	fa41 f300 	asr.w	r3, r1, r0
 801f438:	e7ec      	b.n	801f414 <__ulp+0x18>
 801f43a:	f1a0 0114 	sub.w	r1, r0, #20
 801f43e:	291e      	cmp	r1, #30
 801f440:	bfda      	itte	le
 801f442:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f446:	fa20 f101 	lsrle.w	r1, r0, r1
 801f44a:	2101      	movgt	r1, #1
 801f44c:	460a      	mov	r2, r1
 801f44e:	e7e1      	b.n	801f414 <__ulp+0x18>
 801f450:	7ff00000 	.word	0x7ff00000

0801f454 <__b2d>:
 801f454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f456:	6905      	ldr	r5, [r0, #16]
 801f458:	f100 0714 	add.w	r7, r0, #20
 801f45c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f460:	1f2e      	subs	r6, r5, #4
 801f462:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f466:	4620      	mov	r0, r4
 801f468:	f7ff fd52 	bl	801ef10 <__hi0bits>
 801f46c:	f1c0 0320 	rsb	r3, r0, #32
 801f470:	280a      	cmp	r0, #10
 801f472:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f4f0 <__b2d+0x9c>
 801f476:	600b      	str	r3, [r1, #0]
 801f478:	dc14      	bgt.n	801f4a4 <__b2d+0x50>
 801f47a:	f1c0 0e0b 	rsb	lr, r0, #11
 801f47e:	fa24 f10e 	lsr.w	r1, r4, lr
 801f482:	42b7      	cmp	r7, r6
 801f484:	ea41 030c 	orr.w	r3, r1, ip
 801f488:	bf34      	ite	cc
 801f48a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f48e:	2100      	movcs	r1, #0
 801f490:	3015      	adds	r0, #21
 801f492:	fa04 f000 	lsl.w	r0, r4, r0
 801f496:	fa21 f10e 	lsr.w	r1, r1, lr
 801f49a:	ea40 0201 	orr.w	r2, r0, r1
 801f49e:	ec43 2b10 	vmov	d0, r2, r3
 801f4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4a4:	42b7      	cmp	r7, r6
 801f4a6:	bf3a      	itte	cc
 801f4a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f4ac:	f1a5 0608 	subcc.w	r6, r5, #8
 801f4b0:	2100      	movcs	r1, #0
 801f4b2:	380b      	subs	r0, #11
 801f4b4:	d017      	beq.n	801f4e6 <__b2d+0x92>
 801f4b6:	f1c0 0c20 	rsb	ip, r0, #32
 801f4ba:	fa04 f500 	lsl.w	r5, r4, r0
 801f4be:	42be      	cmp	r6, r7
 801f4c0:	fa21 f40c 	lsr.w	r4, r1, ip
 801f4c4:	ea45 0504 	orr.w	r5, r5, r4
 801f4c8:	bf8c      	ite	hi
 801f4ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f4ce:	2400      	movls	r4, #0
 801f4d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f4d4:	fa01 f000 	lsl.w	r0, r1, r0
 801f4d8:	fa24 f40c 	lsr.w	r4, r4, ip
 801f4dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f4e0:	ea40 0204 	orr.w	r2, r0, r4
 801f4e4:	e7db      	b.n	801f49e <__b2d+0x4a>
 801f4e6:	ea44 030c 	orr.w	r3, r4, ip
 801f4ea:	460a      	mov	r2, r1
 801f4ec:	e7d7      	b.n	801f49e <__b2d+0x4a>
 801f4ee:	bf00      	nop
 801f4f0:	3ff00000 	.word	0x3ff00000

0801f4f4 <__d2b>:
 801f4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f4f8:	4689      	mov	r9, r1
 801f4fa:	2101      	movs	r1, #1
 801f4fc:	ec57 6b10 	vmov	r6, r7, d0
 801f500:	4690      	mov	r8, r2
 801f502:	f7ff fc0f 	bl	801ed24 <_Balloc>
 801f506:	4604      	mov	r4, r0
 801f508:	b930      	cbnz	r0, 801f518 <__d2b+0x24>
 801f50a:	4602      	mov	r2, r0
 801f50c:	4b25      	ldr	r3, [pc, #148]	; (801f5a4 <__d2b+0xb0>)
 801f50e:	4826      	ldr	r0, [pc, #152]	; (801f5a8 <__d2b+0xb4>)
 801f510:	f240 310a 	movw	r1, #778	; 0x30a
 801f514:	f7fb fef2 	bl	801b2fc <__assert_func>
 801f518:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f51c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f520:	bb35      	cbnz	r5, 801f570 <__d2b+0x7c>
 801f522:	2e00      	cmp	r6, #0
 801f524:	9301      	str	r3, [sp, #4]
 801f526:	d028      	beq.n	801f57a <__d2b+0x86>
 801f528:	4668      	mov	r0, sp
 801f52a:	9600      	str	r6, [sp, #0]
 801f52c:	f7ff fd10 	bl	801ef50 <__lo0bits>
 801f530:	9900      	ldr	r1, [sp, #0]
 801f532:	b300      	cbz	r0, 801f576 <__d2b+0x82>
 801f534:	9a01      	ldr	r2, [sp, #4]
 801f536:	f1c0 0320 	rsb	r3, r0, #32
 801f53a:	fa02 f303 	lsl.w	r3, r2, r3
 801f53e:	430b      	orrs	r3, r1
 801f540:	40c2      	lsrs	r2, r0
 801f542:	6163      	str	r3, [r4, #20]
 801f544:	9201      	str	r2, [sp, #4]
 801f546:	9b01      	ldr	r3, [sp, #4]
 801f548:	61a3      	str	r3, [r4, #24]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	bf14      	ite	ne
 801f54e:	2202      	movne	r2, #2
 801f550:	2201      	moveq	r2, #1
 801f552:	6122      	str	r2, [r4, #16]
 801f554:	b1d5      	cbz	r5, 801f58c <__d2b+0x98>
 801f556:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f55a:	4405      	add	r5, r0
 801f55c:	f8c9 5000 	str.w	r5, [r9]
 801f560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f564:	f8c8 0000 	str.w	r0, [r8]
 801f568:	4620      	mov	r0, r4
 801f56a:	b003      	add	sp, #12
 801f56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f574:	e7d5      	b.n	801f522 <__d2b+0x2e>
 801f576:	6161      	str	r1, [r4, #20]
 801f578:	e7e5      	b.n	801f546 <__d2b+0x52>
 801f57a:	a801      	add	r0, sp, #4
 801f57c:	f7ff fce8 	bl	801ef50 <__lo0bits>
 801f580:	9b01      	ldr	r3, [sp, #4]
 801f582:	6163      	str	r3, [r4, #20]
 801f584:	2201      	movs	r2, #1
 801f586:	6122      	str	r2, [r4, #16]
 801f588:	3020      	adds	r0, #32
 801f58a:	e7e3      	b.n	801f554 <__d2b+0x60>
 801f58c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f590:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f594:	f8c9 0000 	str.w	r0, [r9]
 801f598:	6918      	ldr	r0, [r3, #16]
 801f59a:	f7ff fcb9 	bl	801ef10 <__hi0bits>
 801f59e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f5a2:	e7df      	b.n	801f564 <__d2b+0x70>
 801f5a4:	080294a4 	.word	0x080294a4
 801f5a8:	08029598 	.word	0x08029598

0801f5ac <__ratio>:
 801f5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5b0:	468a      	mov	sl, r1
 801f5b2:	4669      	mov	r1, sp
 801f5b4:	4683      	mov	fp, r0
 801f5b6:	f7ff ff4d 	bl	801f454 <__b2d>
 801f5ba:	a901      	add	r1, sp, #4
 801f5bc:	4650      	mov	r0, sl
 801f5be:	ec59 8b10 	vmov	r8, r9, d0
 801f5c2:	ee10 6a10 	vmov	r6, s0
 801f5c6:	f7ff ff45 	bl	801f454 <__b2d>
 801f5ca:	f8db 3010 	ldr.w	r3, [fp, #16]
 801f5ce:	f8da 2010 	ldr.w	r2, [sl, #16]
 801f5d2:	eba3 0c02 	sub.w	ip, r3, r2
 801f5d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f5da:	1a9b      	subs	r3, r3, r2
 801f5dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f5e0:	ec55 4b10 	vmov	r4, r5, d0
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	ee10 0a10 	vmov	r0, s0
 801f5ea:	bfce      	itee	gt
 801f5ec:	464a      	movgt	r2, r9
 801f5ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f5f2:	462a      	movle	r2, r5
 801f5f4:	464f      	mov	r7, r9
 801f5f6:	4629      	mov	r1, r5
 801f5f8:	bfcc      	ite	gt
 801f5fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f5fe:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801f602:	ec47 6b17 	vmov	d7, r6, r7
 801f606:	ec41 0b16 	vmov	d6, r0, r1
 801f60a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801f60e:	b003      	add	sp, #12
 801f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f614 <__copybits>:
 801f614:	3901      	subs	r1, #1
 801f616:	b570      	push	{r4, r5, r6, lr}
 801f618:	1149      	asrs	r1, r1, #5
 801f61a:	6914      	ldr	r4, [r2, #16]
 801f61c:	3101      	adds	r1, #1
 801f61e:	f102 0314 	add.w	r3, r2, #20
 801f622:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f626:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f62a:	1f05      	subs	r5, r0, #4
 801f62c:	42a3      	cmp	r3, r4
 801f62e:	d30c      	bcc.n	801f64a <__copybits+0x36>
 801f630:	1aa3      	subs	r3, r4, r2
 801f632:	3b11      	subs	r3, #17
 801f634:	f023 0303 	bic.w	r3, r3, #3
 801f638:	3211      	adds	r2, #17
 801f63a:	42a2      	cmp	r2, r4
 801f63c:	bf88      	it	hi
 801f63e:	2300      	movhi	r3, #0
 801f640:	4418      	add	r0, r3
 801f642:	2300      	movs	r3, #0
 801f644:	4288      	cmp	r0, r1
 801f646:	d305      	bcc.n	801f654 <__copybits+0x40>
 801f648:	bd70      	pop	{r4, r5, r6, pc}
 801f64a:	f853 6b04 	ldr.w	r6, [r3], #4
 801f64e:	f845 6f04 	str.w	r6, [r5, #4]!
 801f652:	e7eb      	b.n	801f62c <__copybits+0x18>
 801f654:	f840 3b04 	str.w	r3, [r0], #4
 801f658:	e7f4      	b.n	801f644 <__copybits+0x30>

0801f65a <__any_on>:
 801f65a:	f100 0214 	add.w	r2, r0, #20
 801f65e:	6900      	ldr	r0, [r0, #16]
 801f660:	114b      	asrs	r3, r1, #5
 801f662:	4298      	cmp	r0, r3
 801f664:	b510      	push	{r4, lr}
 801f666:	db11      	blt.n	801f68c <__any_on+0x32>
 801f668:	dd0a      	ble.n	801f680 <__any_on+0x26>
 801f66a:	f011 011f 	ands.w	r1, r1, #31
 801f66e:	d007      	beq.n	801f680 <__any_on+0x26>
 801f670:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f674:	fa24 f001 	lsr.w	r0, r4, r1
 801f678:	fa00 f101 	lsl.w	r1, r0, r1
 801f67c:	428c      	cmp	r4, r1
 801f67e:	d10b      	bne.n	801f698 <__any_on+0x3e>
 801f680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f684:	4293      	cmp	r3, r2
 801f686:	d803      	bhi.n	801f690 <__any_on+0x36>
 801f688:	2000      	movs	r0, #0
 801f68a:	bd10      	pop	{r4, pc}
 801f68c:	4603      	mov	r3, r0
 801f68e:	e7f7      	b.n	801f680 <__any_on+0x26>
 801f690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f694:	2900      	cmp	r1, #0
 801f696:	d0f5      	beq.n	801f684 <__any_on+0x2a>
 801f698:	2001      	movs	r0, #1
 801f69a:	e7f6      	b.n	801f68a <__any_on+0x30>

0801f69c <_calloc_r>:
 801f69c:	b513      	push	{r0, r1, r4, lr}
 801f69e:	434a      	muls	r2, r1
 801f6a0:	4611      	mov	r1, r2
 801f6a2:	9201      	str	r2, [sp, #4]
 801f6a4:	f7fb ff18 	bl	801b4d8 <_malloc_r>
 801f6a8:	4604      	mov	r4, r0
 801f6aa:	b118      	cbz	r0, 801f6b4 <_calloc_r+0x18>
 801f6ac:	9a01      	ldr	r2, [sp, #4]
 801f6ae:	2100      	movs	r1, #0
 801f6b0:	f7fb feba 	bl	801b428 <memset>
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	b002      	add	sp, #8
 801f6b8:	bd10      	pop	{r4, pc}

0801f6ba <_realloc_r>:
 801f6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6bc:	4607      	mov	r7, r0
 801f6be:	4614      	mov	r4, r2
 801f6c0:	460e      	mov	r6, r1
 801f6c2:	b921      	cbnz	r1, 801f6ce <_realloc_r+0x14>
 801f6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f6c8:	4611      	mov	r1, r2
 801f6ca:	f7fb bf05 	b.w	801b4d8 <_malloc_r>
 801f6ce:	b922      	cbnz	r2, 801f6da <_realloc_r+0x20>
 801f6d0:	f7fb feb2 	bl	801b438 <_free_r>
 801f6d4:	4625      	mov	r5, r4
 801f6d6:	4628      	mov	r0, r5
 801f6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6da:	f000 fa63 	bl	801fba4 <_malloc_usable_size_r>
 801f6de:	42a0      	cmp	r0, r4
 801f6e0:	d20f      	bcs.n	801f702 <_realloc_r+0x48>
 801f6e2:	4621      	mov	r1, r4
 801f6e4:	4638      	mov	r0, r7
 801f6e6:	f7fb fef7 	bl	801b4d8 <_malloc_r>
 801f6ea:	4605      	mov	r5, r0
 801f6ec:	2800      	cmp	r0, #0
 801f6ee:	d0f2      	beq.n	801f6d6 <_realloc_r+0x1c>
 801f6f0:	4631      	mov	r1, r6
 801f6f2:	4622      	mov	r2, r4
 801f6f4:	f7fb fe70 	bl	801b3d8 <memcpy>
 801f6f8:	4631      	mov	r1, r6
 801f6fa:	4638      	mov	r0, r7
 801f6fc:	f7fb fe9c 	bl	801b438 <_free_r>
 801f700:	e7e9      	b.n	801f6d6 <_realloc_r+0x1c>
 801f702:	4635      	mov	r5, r6
 801f704:	e7e7      	b.n	801f6d6 <_realloc_r+0x1c>

0801f706 <__ssputs_r>:
 801f706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f70a:	688e      	ldr	r6, [r1, #8]
 801f70c:	429e      	cmp	r6, r3
 801f70e:	4682      	mov	sl, r0
 801f710:	460c      	mov	r4, r1
 801f712:	4690      	mov	r8, r2
 801f714:	461f      	mov	r7, r3
 801f716:	d838      	bhi.n	801f78a <__ssputs_r+0x84>
 801f718:	898a      	ldrh	r2, [r1, #12]
 801f71a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f71e:	d032      	beq.n	801f786 <__ssputs_r+0x80>
 801f720:	6825      	ldr	r5, [r4, #0]
 801f722:	6909      	ldr	r1, [r1, #16]
 801f724:	eba5 0901 	sub.w	r9, r5, r1
 801f728:	6965      	ldr	r5, [r4, #20]
 801f72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f72e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f732:	3301      	adds	r3, #1
 801f734:	444b      	add	r3, r9
 801f736:	106d      	asrs	r5, r5, #1
 801f738:	429d      	cmp	r5, r3
 801f73a:	bf38      	it	cc
 801f73c:	461d      	movcc	r5, r3
 801f73e:	0553      	lsls	r3, r2, #21
 801f740:	d531      	bpl.n	801f7a6 <__ssputs_r+0xa0>
 801f742:	4629      	mov	r1, r5
 801f744:	f7fb fec8 	bl	801b4d8 <_malloc_r>
 801f748:	4606      	mov	r6, r0
 801f74a:	b950      	cbnz	r0, 801f762 <__ssputs_r+0x5c>
 801f74c:	230c      	movs	r3, #12
 801f74e:	f8ca 3000 	str.w	r3, [sl]
 801f752:	89a3      	ldrh	r3, [r4, #12]
 801f754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f758:	81a3      	strh	r3, [r4, #12]
 801f75a:	f04f 30ff 	mov.w	r0, #4294967295
 801f75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f762:	6921      	ldr	r1, [r4, #16]
 801f764:	464a      	mov	r2, r9
 801f766:	f7fb fe37 	bl	801b3d8 <memcpy>
 801f76a:	89a3      	ldrh	r3, [r4, #12]
 801f76c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f774:	81a3      	strh	r3, [r4, #12]
 801f776:	6126      	str	r6, [r4, #16]
 801f778:	6165      	str	r5, [r4, #20]
 801f77a:	444e      	add	r6, r9
 801f77c:	eba5 0509 	sub.w	r5, r5, r9
 801f780:	6026      	str	r6, [r4, #0]
 801f782:	60a5      	str	r5, [r4, #8]
 801f784:	463e      	mov	r6, r7
 801f786:	42be      	cmp	r6, r7
 801f788:	d900      	bls.n	801f78c <__ssputs_r+0x86>
 801f78a:	463e      	mov	r6, r7
 801f78c:	4632      	mov	r2, r6
 801f78e:	6820      	ldr	r0, [r4, #0]
 801f790:	4641      	mov	r1, r8
 801f792:	f7fb fe2f 	bl	801b3f4 <memmove>
 801f796:	68a3      	ldr	r3, [r4, #8]
 801f798:	6822      	ldr	r2, [r4, #0]
 801f79a:	1b9b      	subs	r3, r3, r6
 801f79c:	4432      	add	r2, r6
 801f79e:	60a3      	str	r3, [r4, #8]
 801f7a0:	6022      	str	r2, [r4, #0]
 801f7a2:	2000      	movs	r0, #0
 801f7a4:	e7db      	b.n	801f75e <__ssputs_r+0x58>
 801f7a6:	462a      	mov	r2, r5
 801f7a8:	f7ff ff87 	bl	801f6ba <_realloc_r>
 801f7ac:	4606      	mov	r6, r0
 801f7ae:	2800      	cmp	r0, #0
 801f7b0:	d1e1      	bne.n	801f776 <__ssputs_r+0x70>
 801f7b2:	6921      	ldr	r1, [r4, #16]
 801f7b4:	4650      	mov	r0, sl
 801f7b6:	f7fb fe3f 	bl	801b438 <_free_r>
 801f7ba:	e7c7      	b.n	801f74c <__ssputs_r+0x46>

0801f7bc <_svfiprintf_r>:
 801f7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7c0:	4698      	mov	r8, r3
 801f7c2:	898b      	ldrh	r3, [r1, #12]
 801f7c4:	061b      	lsls	r3, r3, #24
 801f7c6:	b09d      	sub	sp, #116	; 0x74
 801f7c8:	4607      	mov	r7, r0
 801f7ca:	460d      	mov	r5, r1
 801f7cc:	4614      	mov	r4, r2
 801f7ce:	d50e      	bpl.n	801f7ee <_svfiprintf_r+0x32>
 801f7d0:	690b      	ldr	r3, [r1, #16]
 801f7d2:	b963      	cbnz	r3, 801f7ee <_svfiprintf_r+0x32>
 801f7d4:	2140      	movs	r1, #64	; 0x40
 801f7d6:	f7fb fe7f 	bl	801b4d8 <_malloc_r>
 801f7da:	6028      	str	r0, [r5, #0]
 801f7dc:	6128      	str	r0, [r5, #16]
 801f7de:	b920      	cbnz	r0, 801f7ea <_svfiprintf_r+0x2e>
 801f7e0:	230c      	movs	r3, #12
 801f7e2:	603b      	str	r3, [r7, #0]
 801f7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f7e8:	e0d1      	b.n	801f98e <_svfiprintf_r+0x1d2>
 801f7ea:	2340      	movs	r3, #64	; 0x40
 801f7ec:	616b      	str	r3, [r5, #20]
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	9309      	str	r3, [sp, #36]	; 0x24
 801f7f2:	2320      	movs	r3, #32
 801f7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801f7fc:	2330      	movs	r3, #48	; 0x30
 801f7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f9a8 <_svfiprintf_r+0x1ec>
 801f802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f806:	f04f 0901 	mov.w	r9, #1
 801f80a:	4623      	mov	r3, r4
 801f80c:	469a      	mov	sl, r3
 801f80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f812:	b10a      	cbz	r2, 801f818 <_svfiprintf_r+0x5c>
 801f814:	2a25      	cmp	r2, #37	; 0x25
 801f816:	d1f9      	bne.n	801f80c <_svfiprintf_r+0x50>
 801f818:	ebba 0b04 	subs.w	fp, sl, r4
 801f81c:	d00b      	beq.n	801f836 <_svfiprintf_r+0x7a>
 801f81e:	465b      	mov	r3, fp
 801f820:	4622      	mov	r2, r4
 801f822:	4629      	mov	r1, r5
 801f824:	4638      	mov	r0, r7
 801f826:	f7ff ff6e 	bl	801f706 <__ssputs_r>
 801f82a:	3001      	adds	r0, #1
 801f82c:	f000 80aa 	beq.w	801f984 <_svfiprintf_r+0x1c8>
 801f830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f832:	445a      	add	r2, fp
 801f834:	9209      	str	r2, [sp, #36]	; 0x24
 801f836:	f89a 3000 	ldrb.w	r3, [sl]
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	f000 80a2 	beq.w	801f984 <_svfiprintf_r+0x1c8>
 801f840:	2300      	movs	r3, #0
 801f842:	f04f 32ff 	mov.w	r2, #4294967295
 801f846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f84a:	f10a 0a01 	add.w	sl, sl, #1
 801f84e:	9304      	str	r3, [sp, #16]
 801f850:	9307      	str	r3, [sp, #28]
 801f852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f856:	931a      	str	r3, [sp, #104]	; 0x68
 801f858:	4654      	mov	r4, sl
 801f85a:	2205      	movs	r2, #5
 801f85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f860:	4851      	ldr	r0, [pc, #324]	; (801f9a8 <_svfiprintf_r+0x1ec>)
 801f862:	f7e0 fd55 	bl	8000310 <memchr>
 801f866:	9a04      	ldr	r2, [sp, #16]
 801f868:	b9d8      	cbnz	r0, 801f8a2 <_svfiprintf_r+0xe6>
 801f86a:	06d0      	lsls	r0, r2, #27
 801f86c:	bf44      	itt	mi
 801f86e:	2320      	movmi	r3, #32
 801f870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f874:	0711      	lsls	r1, r2, #28
 801f876:	bf44      	itt	mi
 801f878:	232b      	movmi	r3, #43	; 0x2b
 801f87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f87e:	f89a 3000 	ldrb.w	r3, [sl]
 801f882:	2b2a      	cmp	r3, #42	; 0x2a
 801f884:	d015      	beq.n	801f8b2 <_svfiprintf_r+0xf6>
 801f886:	9a07      	ldr	r2, [sp, #28]
 801f888:	4654      	mov	r4, sl
 801f88a:	2000      	movs	r0, #0
 801f88c:	f04f 0c0a 	mov.w	ip, #10
 801f890:	4621      	mov	r1, r4
 801f892:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f896:	3b30      	subs	r3, #48	; 0x30
 801f898:	2b09      	cmp	r3, #9
 801f89a:	d94e      	bls.n	801f93a <_svfiprintf_r+0x17e>
 801f89c:	b1b0      	cbz	r0, 801f8cc <_svfiprintf_r+0x110>
 801f89e:	9207      	str	r2, [sp, #28]
 801f8a0:	e014      	b.n	801f8cc <_svfiprintf_r+0x110>
 801f8a2:	eba0 0308 	sub.w	r3, r0, r8
 801f8a6:	fa09 f303 	lsl.w	r3, r9, r3
 801f8aa:	4313      	orrs	r3, r2
 801f8ac:	9304      	str	r3, [sp, #16]
 801f8ae:	46a2      	mov	sl, r4
 801f8b0:	e7d2      	b.n	801f858 <_svfiprintf_r+0x9c>
 801f8b2:	9b03      	ldr	r3, [sp, #12]
 801f8b4:	1d19      	adds	r1, r3, #4
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	9103      	str	r1, [sp, #12]
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	bfbb      	ittet	lt
 801f8be:	425b      	neglt	r3, r3
 801f8c0:	f042 0202 	orrlt.w	r2, r2, #2
 801f8c4:	9307      	strge	r3, [sp, #28]
 801f8c6:	9307      	strlt	r3, [sp, #28]
 801f8c8:	bfb8      	it	lt
 801f8ca:	9204      	strlt	r2, [sp, #16]
 801f8cc:	7823      	ldrb	r3, [r4, #0]
 801f8ce:	2b2e      	cmp	r3, #46	; 0x2e
 801f8d0:	d10c      	bne.n	801f8ec <_svfiprintf_r+0x130>
 801f8d2:	7863      	ldrb	r3, [r4, #1]
 801f8d4:	2b2a      	cmp	r3, #42	; 0x2a
 801f8d6:	d135      	bne.n	801f944 <_svfiprintf_r+0x188>
 801f8d8:	9b03      	ldr	r3, [sp, #12]
 801f8da:	1d1a      	adds	r2, r3, #4
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	9203      	str	r2, [sp, #12]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	bfb8      	it	lt
 801f8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 801f8e8:	3402      	adds	r4, #2
 801f8ea:	9305      	str	r3, [sp, #20]
 801f8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f9b8 <_svfiprintf_r+0x1fc>
 801f8f0:	7821      	ldrb	r1, [r4, #0]
 801f8f2:	2203      	movs	r2, #3
 801f8f4:	4650      	mov	r0, sl
 801f8f6:	f7e0 fd0b 	bl	8000310 <memchr>
 801f8fa:	b140      	cbz	r0, 801f90e <_svfiprintf_r+0x152>
 801f8fc:	2340      	movs	r3, #64	; 0x40
 801f8fe:	eba0 000a 	sub.w	r0, r0, sl
 801f902:	fa03 f000 	lsl.w	r0, r3, r0
 801f906:	9b04      	ldr	r3, [sp, #16]
 801f908:	4303      	orrs	r3, r0
 801f90a:	3401      	adds	r4, #1
 801f90c:	9304      	str	r3, [sp, #16]
 801f90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f912:	4826      	ldr	r0, [pc, #152]	; (801f9ac <_svfiprintf_r+0x1f0>)
 801f914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f918:	2206      	movs	r2, #6
 801f91a:	f7e0 fcf9 	bl	8000310 <memchr>
 801f91e:	2800      	cmp	r0, #0
 801f920:	d038      	beq.n	801f994 <_svfiprintf_r+0x1d8>
 801f922:	4b23      	ldr	r3, [pc, #140]	; (801f9b0 <_svfiprintf_r+0x1f4>)
 801f924:	bb1b      	cbnz	r3, 801f96e <_svfiprintf_r+0x1b2>
 801f926:	9b03      	ldr	r3, [sp, #12]
 801f928:	3307      	adds	r3, #7
 801f92a:	f023 0307 	bic.w	r3, r3, #7
 801f92e:	3308      	adds	r3, #8
 801f930:	9303      	str	r3, [sp, #12]
 801f932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f934:	4433      	add	r3, r6
 801f936:	9309      	str	r3, [sp, #36]	; 0x24
 801f938:	e767      	b.n	801f80a <_svfiprintf_r+0x4e>
 801f93a:	fb0c 3202 	mla	r2, ip, r2, r3
 801f93e:	460c      	mov	r4, r1
 801f940:	2001      	movs	r0, #1
 801f942:	e7a5      	b.n	801f890 <_svfiprintf_r+0xd4>
 801f944:	2300      	movs	r3, #0
 801f946:	3401      	adds	r4, #1
 801f948:	9305      	str	r3, [sp, #20]
 801f94a:	4619      	mov	r1, r3
 801f94c:	f04f 0c0a 	mov.w	ip, #10
 801f950:	4620      	mov	r0, r4
 801f952:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f956:	3a30      	subs	r2, #48	; 0x30
 801f958:	2a09      	cmp	r2, #9
 801f95a:	d903      	bls.n	801f964 <_svfiprintf_r+0x1a8>
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d0c5      	beq.n	801f8ec <_svfiprintf_r+0x130>
 801f960:	9105      	str	r1, [sp, #20]
 801f962:	e7c3      	b.n	801f8ec <_svfiprintf_r+0x130>
 801f964:	fb0c 2101 	mla	r1, ip, r1, r2
 801f968:	4604      	mov	r4, r0
 801f96a:	2301      	movs	r3, #1
 801f96c:	e7f0      	b.n	801f950 <_svfiprintf_r+0x194>
 801f96e:	ab03      	add	r3, sp, #12
 801f970:	9300      	str	r3, [sp, #0]
 801f972:	462a      	mov	r2, r5
 801f974:	4b0f      	ldr	r3, [pc, #60]	; (801f9b4 <_svfiprintf_r+0x1f8>)
 801f976:	a904      	add	r1, sp, #16
 801f978:	4638      	mov	r0, r7
 801f97a:	f7fb fff1 	bl	801b960 <_printf_float>
 801f97e:	1c42      	adds	r2, r0, #1
 801f980:	4606      	mov	r6, r0
 801f982:	d1d6      	bne.n	801f932 <_svfiprintf_r+0x176>
 801f984:	89ab      	ldrh	r3, [r5, #12]
 801f986:	065b      	lsls	r3, r3, #25
 801f988:	f53f af2c 	bmi.w	801f7e4 <_svfiprintf_r+0x28>
 801f98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f98e:	b01d      	add	sp, #116	; 0x74
 801f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f994:	ab03      	add	r3, sp, #12
 801f996:	9300      	str	r3, [sp, #0]
 801f998:	462a      	mov	r2, r5
 801f99a:	4b06      	ldr	r3, [pc, #24]	; (801f9b4 <_svfiprintf_r+0x1f8>)
 801f99c:	a904      	add	r1, sp, #16
 801f99e:	4638      	mov	r0, r7
 801f9a0:	f7fc fa6a 	bl	801be78 <_printf_i>
 801f9a4:	e7eb      	b.n	801f97e <_svfiprintf_r+0x1c2>
 801f9a6:	bf00      	nop
 801f9a8:	08029280 	.word	0x08029280
 801f9ac:	0802928a 	.word	0x0802928a
 801f9b0:	0801b961 	.word	0x0801b961
 801f9b4:	0801f707 	.word	0x0801f707
 801f9b8:	08029286 	.word	0x08029286
 801f9bc:	00000000 	.word	0x00000000

0801f9c0 <nan>:
 801f9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f9c8 <nan+0x8>
 801f9c4:	4770      	bx	lr
 801f9c6:	bf00      	nop
 801f9c8:	00000000 	.word	0x00000000
 801f9cc:	7ff80000 	.word	0x7ff80000

0801f9d0 <_raise_r>:
 801f9d0:	291f      	cmp	r1, #31
 801f9d2:	b538      	push	{r3, r4, r5, lr}
 801f9d4:	4604      	mov	r4, r0
 801f9d6:	460d      	mov	r5, r1
 801f9d8:	d904      	bls.n	801f9e4 <_raise_r+0x14>
 801f9da:	2316      	movs	r3, #22
 801f9dc:	6003      	str	r3, [r0, #0]
 801f9de:	f04f 30ff 	mov.w	r0, #4294967295
 801f9e2:	bd38      	pop	{r3, r4, r5, pc}
 801f9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f9e6:	b112      	cbz	r2, 801f9ee <_raise_r+0x1e>
 801f9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f9ec:	b94b      	cbnz	r3, 801fa02 <_raise_r+0x32>
 801f9ee:	4620      	mov	r0, r4
 801f9f0:	f000 f830 	bl	801fa54 <_getpid_r>
 801f9f4:	462a      	mov	r2, r5
 801f9f6:	4601      	mov	r1, r0
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f9fe:	f000 b817 	b.w	801fa30 <_kill_r>
 801fa02:	2b01      	cmp	r3, #1
 801fa04:	d00a      	beq.n	801fa1c <_raise_r+0x4c>
 801fa06:	1c59      	adds	r1, r3, #1
 801fa08:	d103      	bne.n	801fa12 <_raise_r+0x42>
 801fa0a:	2316      	movs	r3, #22
 801fa0c:	6003      	str	r3, [r0, #0]
 801fa0e:	2001      	movs	r0, #1
 801fa10:	e7e7      	b.n	801f9e2 <_raise_r+0x12>
 801fa12:	2400      	movs	r4, #0
 801fa14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fa18:	4628      	mov	r0, r5
 801fa1a:	4798      	blx	r3
 801fa1c:	2000      	movs	r0, #0
 801fa1e:	e7e0      	b.n	801f9e2 <_raise_r+0x12>

0801fa20 <raise>:
 801fa20:	4b02      	ldr	r3, [pc, #8]	; (801fa2c <raise+0xc>)
 801fa22:	4601      	mov	r1, r0
 801fa24:	6818      	ldr	r0, [r3, #0]
 801fa26:	f7ff bfd3 	b.w	801f9d0 <_raise_r>
 801fa2a:	bf00      	nop
 801fa2c:	2400a128 	.word	0x2400a128

0801fa30 <_kill_r>:
 801fa30:	b538      	push	{r3, r4, r5, lr}
 801fa32:	4d07      	ldr	r5, [pc, #28]	; (801fa50 <_kill_r+0x20>)
 801fa34:	2300      	movs	r3, #0
 801fa36:	4604      	mov	r4, r0
 801fa38:	4608      	mov	r0, r1
 801fa3a:	4611      	mov	r1, r2
 801fa3c:	602b      	str	r3, [r5, #0]
 801fa3e:	f7e2 fa05 	bl	8001e4c <_kill>
 801fa42:	1c43      	adds	r3, r0, #1
 801fa44:	d102      	bne.n	801fa4c <_kill_r+0x1c>
 801fa46:	682b      	ldr	r3, [r5, #0]
 801fa48:	b103      	cbz	r3, 801fa4c <_kill_r+0x1c>
 801fa4a:	6023      	str	r3, [r4, #0]
 801fa4c:	bd38      	pop	{r3, r4, r5, pc}
 801fa4e:	bf00      	nop
 801fa50:	240148c4 	.word	0x240148c4

0801fa54 <_getpid_r>:
 801fa54:	f7e2 b9f2 	b.w	8001e3c <_getpid>

0801fa58 <__sread>:
 801fa58:	b510      	push	{r4, lr}
 801fa5a:	460c      	mov	r4, r1
 801fa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa60:	f000 f8a8 	bl	801fbb4 <_read_r>
 801fa64:	2800      	cmp	r0, #0
 801fa66:	bfab      	itete	ge
 801fa68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fa6a:	89a3      	ldrhlt	r3, [r4, #12]
 801fa6c:	181b      	addge	r3, r3, r0
 801fa6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fa72:	bfac      	ite	ge
 801fa74:	6563      	strge	r3, [r4, #84]	; 0x54
 801fa76:	81a3      	strhlt	r3, [r4, #12]
 801fa78:	bd10      	pop	{r4, pc}

0801fa7a <__swrite>:
 801fa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa7e:	461f      	mov	r7, r3
 801fa80:	898b      	ldrh	r3, [r1, #12]
 801fa82:	05db      	lsls	r3, r3, #23
 801fa84:	4605      	mov	r5, r0
 801fa86:	460c      	mov	r4, r1
 801fa88:	4616      	mov	r6, r2
 801fa8a:	d505      	bpl.n	801fa98 <__swrite+0x1e>
 801fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa90:	2302      	movs	r3, #2
 801fa92:	2200      	movs	r2, #0
 801fa94:	f000 f874 	bl	801fb80 <_lseek_r>
 801fa98:	89a3      	ldrh	r3, [r4, #12]
 801fa9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fa9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801faa2:	81a3      	strh	r3, [r4, #12]
 801faa4:	4632      	mov	r2, r6
 801faa6:	463b      	mov	r3, r7
 801faa8:	4628      	mov	r0, r5
 801faaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801faae:	f000 b823 	b.w	801faf8 <_write_r>

0801fab2 <__sseek>:
 801fab2:	b510      	push	{r4, lr}
 801fab4:	460c      	mov	r4, r1
 801fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801faba:	f000 f861 	bl	801fb80 <_lseek_r>
 801fabe:	1c43      	adds	r3, r0, #1
 801fac0:	89a3      	ldrh	r3, [r4, #12]
 801fac2:	bf15      	itete	ne
 801fac4:	6560      	strne	r0, [r4, #84]	; 0x54
 801fac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801faca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801face:	81a3      	strheq	r3, [r4, #12]
 801fad0:	bf18      	it	ne
 801fad2:	81a3      	strhne	r3, [r4, #12]
 801fad4:	bd10      	pop	{r4, pc}

0801fad6 <__sclose>:
 801fad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fada:	f000 b81f 	b.w	801fb1c <_close_r>

0801fade <__ascii_wctomb>:
 801fade:	b149      	cbz	r1, 801faf4 <__ascii_wctomb+0x16>
 801fae0:	2aff      	cmp	r2, #255	; 0xff
 801fae2:	bf85      	ittet	hi
 801fae4:	238a      	movhi	r3, #138	; 0x8a
 801fae6:	6003      	strhi	r3, [r0, #0]
 801fae8:	700a      	strbls	r2, [r1, #0]
 801faea:	f04f 30ff 	movhi.w	r0, #4294967295
 801faee:	bf98      	it	ls
 801faf0:	2001      	movls	r0, #1
 801faf2:	4770      	bx	lr
 801faf4:	4608      	mov	r0, r1
 801faf6:	4770      	bx	lr

0801faf8 <_write_r>:
 801faf8:	b538      	push	{r3, r4, r5, lr}
 801fafa:	4d07      	ldr	r5, [pc, #28]	; (801fb18 <_write_r+0x20>)
 801fafc:	4604      	mov	r4, r0
 801fafe:	4608      	mov	r0, r1
 801fb00:	4611      	mov	r1, r2
 801fb02:	2200      	movs	r2, #0
 801fb04:	602a      	str	r2, [r5, #0]
 801fb06:	461a      	mov	r2, r3
 801fb08:	f7e2 f9d7 	bl	8001eba <_write>
 801fb0c:	1c43      	adds	r3, r0, #1
 801fb0e:	d102      	bne.n	801fb16 <_write_r+0x1e>
 801fb10:	682b      	ldr	r3, [r5, #0]
 801fb12:	b103      	cbz	r3, 801fb16 <_write_r+0x1e>
 801fb14:	6023      	str	r3, [r4, #0]
 801fb16:	bd38      	pop	{r3, r4, r5, pc}
 801fb18:	240148c4 	.word	0x240148c4

0801fb1c <_close_r>:
 801fb1c:	b538      	push	{r3, r4, r5, lr}
 801fb1e:	4d06      	ldr	r5, [pc, #24]	; (801fb38 <_close_r+0x1c>)
 801fb20:	2300      	movs	r3, #0
 801fb22:	4604      	mov	r4, r0
 801fb24:	4608      	mov	r0, r1
 801fb26:	602b      	str	r3, [r5, #0]
 801fb28:	f7e2 f9e3 	bl	8001ef2 <_close>
 801fb2c:	1c43      	adds	r3, r0, #1
 801fb2e:	d102      	bne.n	801fb36 <_close_r+0x1a>
 801fb30:	682b      	ldr	r3, [r5, #0]
 801fb32:	b103      	cbz	r3, 801fb36 <_close_r+0x1a>
 801fb34:	6023      	str	r3, [r4, #0]
 801fb36:	bd38      	pop	{r3, r4, r5, pc}
 801fb38:	240148c4 	.word	0x240148c4

0801fb3c <_fstat_r>:
 801fb3c:	b538      	push	{r3, r4, r5, lr}
 801fb3e:	4d07      	ldr	r5, [pc, #28]	; (801fb5c <_fstat_r+0x20>)
 801fb40:	2300      	movs	r3, #0
 801fb42:	4604      	mov	r4, r0
 801fb44:	4608      	mov	r0, r1
 801fb46:	4611      	mov	r1, r2
 801fb48:	602b      	str	r3, [r5, #0]
 801fb4a:	f7e2 f9de 	bl	8001f0a <_fstat>
 801fb4e:	1c43      	adds	r3, r0, #1
 801fb50:	d102      	bne.n	801fb58 <_fstat_r+0x1c>
 801fb52:	682b      	ldr	r3, [r5, #0]
 801fb54:	b103      	cbz	r3, 801fb58 <_fstat_r+0x1c>
 801fb56:	6023      	str	r3, [r4, #0]
 801fb58:	bd38      	pop	{r3, r4, r5, pc}
 801fb5a:	bf00      	nop
 801fb5c:	240148c4 	.word	0x240148c4

0801fb60 <_isatty_r>:
 801fb60:	b538      	push	{r3, r4, r5, lr}
 801fb62:	4d06      	ldr	r5, [pc, #24]	; (801fb7c <_isatty_r+0x1c>)
 801fb64:	2300      	movs	r3, #0
 801fb66:	4604      	mov	r4, r0
 801fb68:	4608      	mov	r0, r1
 801fb6a:	602b      	str	r3, [r5, #0]
 801fb6c:	f7e2 f9dd 	bl	8001f2a <_isatty>
 801fb70:	1c43      	adds	r3, r0, #1
 801fb72:	d102      	bne.n	801fb7a <_isatty_r+0x1a>
 801fb74:	682b      	ldr	r3, [r5, #0]
 801fb76:	b103      	cbz	r3, 801fb7a <_isatty_r+0x1a>
 801fb78:	6023      	str	r3, [r4, #0]
 801fb7a:	bd38      	pop	{r3, r4, r5, pc}
 801fb7c:	240148c4 	.word	0x240148c4

0801fb80 <_lseek_r>:
 801fb80:	b538      	push	{r3, r4, r5, lr}
 801fb82:	4d07      	ldr	r5, [pc, #28]	; (801fba0 <_lseek_r+0x20>)
 801fb84:	4604      	mov	r4, r0
 801fb86:	4608      	mov	r0, r1
 801fb88:	4611      	mov	r1, r2
 801fb8a:	2200      	movs	r2, #0
 801fb8c:	602a      	str	r2, [r5, #0]
 801fb8e:	461a      	mov	r2, r3
 801fb90:	f7e2 f9d6 	bl	8001f40 <_lseek>
 801fb94:	1c43      	adds	r3, r0, #1
 801fb96:	d102      	bne.n	801fb9e <_lseek_r+0x1e>
 801fb98:	682b      	ldr	r3, [r5, #0]
 801fb9a:	b103      	cbz	r3, 801fb9e <_lseek_r+0x1e>
 801fb9c:	6023      	str	r3, [r4, #0]
 801fb9e:	bd38      	pop	{r3, r4, r5, pc}
 801fba0:	240148c4 	.word	0x240148c4

0801fba4 <_malloc_usable_size_r>:
 801fba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fba8:	1f18      	subs	r0, r3, #4
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	bfbc      	itt	lt
 801fbae:	580b      	ldrlt	r3, [r1, r0]
 801fbb0:	18c0      	addlt	r0, r0, r3
 801fbb2:	4770      	bx	lr

0801fbb4 <_read_r>:
 801fbb4:	b538      	push	{r3, r4, r5, lr}
 801fbb6:	4d07      	ldr	r5, [pc, #28]	; (801fbd4 <_read_r+0x20>)
 801fbb8:	4604      	mov	r4, r0
 801fbba:	4608      	mov	r0, r1
 801fbbc:	4611      	mov	r1, r2
 801fbbe:	2200      	movs	r2, #0
 801fbc0:	602a      	str	r2, [r5, #0]
 801fbc2:	461a      	mov	r2, r3
 801fbc4:	f7e2 f95c 	bl	8001e80 <_read>
 801fbc8:	1c43      	adds	r3, r0, #1
 801fbca:	d102      	bne.n	801fbd2 <_read_r+0x1e>
 801fbcc:	682b      	ldr	r3, [r5, #0]
 801fbce:	b103      	cbz	r3, 801fbd2 <_read_r+0x1e>
 801fbd0:	6023      	str	r3, [r4, #0]
 801fbd2:	bd38      	pop	{r3, r4, r5, pc}
 801fbd4:	240148c4 	.word	0x240148c4

0801fbd8 <sinf_poly>:
 801fbd8:	07cb      	lsls	r3, r1, #31
 801fbda:	d412      	bmi.n	801fc02 <sinf_poly+0x2a>
 801fbdc:	ee21 6b00 	vmul.f64	d6, d1, d0
 801fbe0:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801fbe4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801fbe8:	eea5 7b01 	vfma.f64	d7, d5, d1
 801fbec:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801fbf0:	ee21 1b06 	vmul.f64	d1, d1, d6
 801fbf4:	eea5 0b06 	vfma.f64	d0, d5, d6
 801fbf8:	eea7 0b01 	vfma.f64	d0, d7, d1
 801fbfc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fc00:	4770      	bx	lr
 801fc02:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801fc06:	ee21 6b01 	vmul.f64	d6, d1, d1
 801fc0a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801fc0e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801fc12:	eea1 7b05 	vfma.f64	d7, d1, d5
 801fc16:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801fc1a:	eea1 0b05 	vfma.f64	d0, d1, d5
 801fc1e:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801fc22:	ee21 1b06 	vmul.f64	d1, d1, d6
 801fc26:	eea6 0b05 	vfma.f64	d0, d6, d5
 801fc2a:	e7e5      	b.n	801fbf8 <sinf_poly+0x20>
 801fc2c:	0000      	movs	r0, r0
	...

0801fc30 <cosf>:
 801fc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc32:	ee10 4a10 	vmov	r4, s0
 801fc36:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801fc3a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801fc3e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801fc42:	d20c      	bcs.n	801fc5e <cosf+0x2e>
 801fc44:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fc48:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801fc4c:	d378      	bcc.n	801fd40 <cosf+0x110>
 801fc4e:	eeb0 0b46 	vmov.f64	d0, d6
 801fc52:	483f      	ldr	r0, [pc, #252]	; (801fd50 <cosf+0x120>)
 801fc54:	2101      	movs	r1, #1
 801fc56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fc5a:	f7ff bfbd 	b.w	801fbd8 <sinf_poly>
 801fc5e:	f240 422e 	movw	r2, #1070	; 0x42e
 801fc62:	4293      	cmp	r3, r2
 801fc64:	d826      	bhi.n	801fcb4 <cosf+0x84>
 801fc66:	4b3a      	ldr	r3, [pc, #232]	; (801fd50 <cosf+0x120>)
 801fc68:	ed93 7b08 	vldr	d7, [r3, #32]
 801fc6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fc70:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801fc74:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801fc78:	ee17 1a90 	vmov	r1, s15
 801fc7c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801fc80:	1609      	asrs	r1, r1, #24
 801fc82:	ee07 1a90 	vmov	s15, r1
 801fc86:	f001 0203 	and.w	r2, r1, #3
 801fc8a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fc8e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801fc92:	ed92 0b00 	vldr	d0, [r2]
 801fc96:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801fc9a:	f011 0f02 	tst.w	r1, #2
 801fc9e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801fca2:	f081 0101 	eor.w	r1, r1, #1
 801fca6:	bf08      	it	eq
 801fca8:	4618      	moveq	r0, r3
 801fcaa:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fcae:	ee20 0b06 	vmul.f64	d0, d0, d6
 801fcb2:	e7d0      	b.n	801fc56 <cosf+0x26>
 801fcb4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801fcb8:	d23e      	bcs.n	801fd38 <cosf+0x108>
 801fcba:	4b26      	ldr	r3, [pc, #152]	; (801fd54 <cosf+0x124>)
 801fcbc:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801fcc0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801fcc4:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801fcc8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801fccc:	6a06      	ldr	r6, [r0, #32]
 801fcce:	6900      	ldr	r0, [r0, #16]
 801fcd0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801fcd4:	40a9      	lsls	r1, r5
 801fcd6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fcda:	fba1 6706 	umull	r6, r7, r1, r6
 801fcde:	fb05 f301 	mul.w	r3, r5, r1
 801fce2:	463a      	mov	r2, r7
 801fce4:	fbe0 2301 	umlal	r2, r3, r0, r1
 801fce8:	1c11      	adds	r1, r2, #0
 801fcea:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801fcee:	2000      	movs	r0, #0
 801fcf0:	1a10      	subs	r0, r2, r0
 801fcf2:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801fcf6:	eb63 0101 	sbc.w	r1, r3, r1
 801fcfa:	f7e0 fce7 	bl	80006cc <__aeabi_l2d>
 801fcfe:	0fb5      	lsrs	r5, r6, #30
 801fd00:	4b13      	ldr	r3, [pc, #76]	; (801fd50 <cosf+0x120>)
 801fd02:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801fd06:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801fd48 <cosf+0x118>
 801fd0a:	ec41 0b17 	vmov	d7, r0, r1
 801fd0e:	f004 0203 	and.w	r2, r4, #3
 801fd12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fd16:	ee27 0b00 	vmul.f64	d0, d7, d0
 801fd1a:	ed92 7b00 	vldr	d7, [r2]
 801fd1e:	ee20 1b00 	vmul.f64	d1, d0, d0
 801fd22:	f014 0f02 	tst.w	r4, #2
 801fd26:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801fd2a:	f085 0101 	eor.w	r1, r5, #1
 801fd2e:	bf08      	it	eq
 801fd30:	4618      	moveq	r0, r3
 801fd32:	ee27 0b00 	vmul.f64	d0, d7, d0
 801fd36:	e78e      	b.n	801fc56 <cosf+0x26>
 801fd38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fd3c:	f000 b817 	b.w	801fd6e <__math_invalidf>
 801fd40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd46:	bf00      	nop
 801fd48:	54442d18 	.word	0x54442d18
 801fd4c:	3c1921fb 	.word	0x3c1921fb
 801fd50:	08029758 	.word	0x08029758
 801fd54:	080296f4 	.word	0x080296f4

0801fd58 <with_errnof>:
 801fd58:	b513      	push	{r0, r1, r4, lr}
 801fd5a:	4604      	mov	r4, r0
 801fd5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801fd60:	f7fb faee 	bl	801b340 <__errno>
 801fd64:	ed9d 0a01 	vldr	s0, [sp, #4]
 801fd68:	6004      	str	r4, [r0, #0]
 801fd6a:	b002      	add	sp, #8
 801fd6c:	bd10      	pop	{r4, pc}

0801fd6e <__math_invalidf>:
 801fd6e:	eef0 7a40 	vmov.f32	s15, s0
 801fd72:	ee30 7a40 	vsub.f32	s14, s0, s0
 801fd76:	eef4 7a67 	vcmp.f32	s15, s15
 801fd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd7e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801fd82:	d602      	bvs.n	801fd8a <__math_invalidf+0x1c>
 801fd84:	2021      	movs	r0, #33	; 0x21
 801fd86:	f7ff bfe7 	b.w	801fd58 <with_errnof>
 801fd8a:	4770      	bx	lr

0801fd8c <fmax>:
 801fd8c:	b508      	push	{r3, lr}
 801fd8e:	ed2d 8b04 	vpush	{d8-d9}
 801fd92:	eeb0 8b40 	vmov.f64	d8, d0
 801fd96:	eeb0 9b41 	vmov.f64	d9, d1
 801fd9a:	f000 f82d 	bl	801fdf8 <__fpclassifyd>
 801fd9e:	b148      	cbz	r0, 801fdb4 <fmax+0x28>
 801fda0:	eeb0 0b49 	vmov.f64	d0, d9
 801fda4:	f000 f828 	bl	801fdf8 <__fpclassifyd>
 801fda8:	b130      	cbz	r0, 801fdb8 <fmax+0x2c>
 801fdaa:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdb2:	dc01      	bgt.n	801fdb8 <fmax+0x2c>
 801fdb4:	eeb0 8b49 	vmov.f64	d8, d9
 801fdb8:	eeb0 0b48 	vmov.f64	d0, d8
 801fdbc:	ecbd 8b04 	vpop	{d8-d9}
 801fdc0:	bd08      	pop	{r3, pc}

0801fdc2 <fmin>:
 801fdc2:	b508      	push	{r3, lr}
 801fdc4:	ed2d 8b04 	vpush	{d8-d9}
 801fdc8:	eeb0 8b40 	vmov.f64	d8, d0
 801fdcc:	eeb0 9b41 	vmov.f64	d9, d1
 801fdd0:	f000 f812 	bl	801fdf8 <__fpclassifyd>
 801fdd4:	b148      	cbz	r0, 801fdea <fmin+0x28>
 801fdd6:	eeb0 0b49 	vmov.f64	d0, d9
 801fdda:	f000 f80d 	bl	801fdf8 <__fpclassifyd>
 801fdde:	b130      	cbz	r0, 801fdee <fmin+0x2c>
 801fde0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801fde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fde8:	d401      	bmi.n	801fdee <fmin+0x2c>
 801fdea:	eeb0 8b49 	vmov.f64	d8, d9
 801fdee:	eeb0 0b48 	vmov.f64	d0, d8
 801fdf2:	ecbd 8b04 	vpop	{d8-d9}
 801fdf6:	bd08      	pop	{r3, pc}

0801fdf8 <__fpclassifyd>:
 801fdf8:	ec51 0b10 	vmov	r0, r1, d0
 801fdfc:	b510      	push	{r4, lr}
 801fdfe:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801fe02:	460b      	mov	r3, r1
 801fe04:	d019      	beq.n	801fe3a <__fpclassifyd+0x42>
 801fe06:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801fe0a:	490e      	ldr	r1, [pc, #56]	; (801fe44 <__fpclassifyd+0x4c>)
 801fe0c:	428a      	cmp	r2, r1
 801fe0e:	d90e      	bls.n	801fe2e <__fpclassifyd+0x36>
 801fe10:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801fe14:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801fe18:	428a      	cmp	r2, r1
 801fe1a:	d908      	bls.n	801fe2e <__fpclassifyd+0x36>
 801fe1c:	4a0a      	ldr	r2, [pc, #40]	; (801fe48 <__fpclassifyd+0x50>)
 801fe1e:	4213      	tst	r3, r2
 801fe20:	d007      	beq.n	801fe32 <__fpclassifyd+0x3a>
 801fe22:	4294      	cmp	r4, r2
 801fe24:	d107      	bne.n	801fe36 <__fpclassifyd+0x3e>
 801fe26:	fab0 f080 	clz	r0, r0
 801fe2a:	0940      	lsrs	r0, r0, #5
 801fe2c:	bd10      	pop	{r4, pc}
 801fe2e:	2004      	movs	r0, #4
 801fe30:	e7fc      	b.n	801fe2c <__fpclassifyd+0x34>
 801fe32:	2003      	movs	r0, #3
 801fe34:	e7fa      	b.n	801fe2c <__fpclassifyd+0x34>
 801fe36:	2000      	movs	r0, #0
 801fe38:	e7f8      	b.n	801fe2c <__fpclassifyd+0x34>
 801fe3a:	2800      	cmp	r0, #0
 801fe3c:	d1ee      	bne.n	801fe1c <__fpclassifyd+0x24>
 801fe3e:	2002      	movs	r0, #2
 801fe40:	e7f4      	b.n	801fe2c <__fpclassifyd+0x34>
 801fe42:	bf00      	nop
 801fe44:	7fdfffff 	.word	0x7fdfffff
 801fe48:	7ff00000 	.word	0x7ff00000

0801fe4c <sinf_poly>:
 801fe4c:	07cb      	lsls	r3, r1, #31
 801fe4e:	d412      	bmi.n	801fe76 <sinf_poly+0x2a>
 801fe50:	ee21 6b00 	vmul.f64	d6, d1, d0
 801fe54:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801fe58:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801fe5c:	eea5 7b01 	vfma.f64	d7, d5, d1
 801fe60:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801fe64:	ee21 1b06 	vmul.f64	d1, d1, d6
 801fe68:	eea5 0b06 	vfma.f64	d0, d5, d6
 801fe6c:	eea7 0b01 	vfma.f64	d0, d7, d1
 801fe70:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fe74:	4770      	bx	lr
 801fe76:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801fe7a:	ee21 6b01 	vmul.f64	d6, d1, d1
 801fe7e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801fe82:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801fe86:	eea1 7b05 	vfma.f64	d7, d1, d5
 801fe8a:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801fe8e:	eea1 0b05 	vfma.f64	d0, d1, d5
 801fe92:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801fe96:	ee21 1b06 	vmul.f64	d1, d1, d6
 801fe9a:	eea6 0b05 	vfma.f64	d0, d6, d5
 801fe9e:	e7e5      	b.n	801fe6c <sinf_poly+0x20>

0801fea0 <sinf>:
 801fea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fea2:	ee10 4a10 	vmov	r4, s0
 801fea6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801feaa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801feae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801feb2:	eef0 7a40 	vmov.f32	s15, s0
 801feb6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801feba:	d218      	bcs.n	801feee <sinf+0x4e>
 801febc:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fec0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801fec4:	d20a      	bcs.n	801fedc <sinf+0x3c>
 801fec6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801feca:	d103      	bne.n	801fed4 <sinf+0x34>
 801fecc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801fed0:	ed8d 1a01 	vstr	s2, [sp, #4]
 801fed4:	eeb0 0a67 	vmov.f32	s0, s15
 801fed8:	b003      	add	sp, #12
 801feda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fedc:	483e      	ldr	r0, [pc, #248]	; (801ffd8 <sinf+0x138>)
 801fede:	eeb0 0b46 	vmov.f64	d0, d6
 801fee2:	2100      	movs	r1, #0
 801fee4:	b003      	add	sp, #12
 801fee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801feea:	f7ff bfaf 	b.w	801fe4c <sinf_poly>
 801feee:	f240 422e 	movw	r2, #1070	; 0x42e
 801fef2:	4293      	cmp	r3, r2
 801fef4:	d824      	bhi.n	801ff40 <sinf+0xa0>
 801fef6:	4b38      	ldr	r3, [pc, #224]	; (801ffd8 <sinf+0x138>)
 801fef8:	ed93 7b08 	vldr	d7, [r3, #32]
 801fefc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ff00:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801ff04:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801ff08:	ee17 1a90 	vmov	r1, s15
 801ff0c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801ff10:	1609      	asrs	r1, r1, #24
 801ff12:	ee07 1a90 	vmov	s15, r1
 801ff16:	f001 0203 	and.w	r2, r1, #3
 801ff1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ff1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801ff22:	ed92 0b00 	vldr	d0, [r2]
 801ff26:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801ff2a:	f011 0f02 	tst.w	r1, #2
 801ff2e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801ff32:	bf08      	it	eq
 801ff34:	4618      	moveq	r0, r3
 801ff36:	ee26 1b06 	vmul.f64	d1, d6, d6
 801ff3a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ff3e:	e7d1      	b.n	801fee4 <sinf+0x44>
 801ff40:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801ff44:	d23d      	bcs.n	801ffc2 <sinf+0x122>
 801ff46:	4b25      	ldr	r3, [pc, #148]	; (801ffdc <sinf+0x13c>)
 801ff48:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801ff4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801ff50:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801ff54:	6a06      	ldr	r6, [r0, #32]
 801ff56:	6900      	ldr	r0, [r0, #16]
 801ff58:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801ff5c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801ff60:	40a9      	lsls	r1, r5
 801ff62:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ff66:	fba1 6706 	umull	r6, r7, r1, r6
 801ff6a:	fb05 f301 	mul.w	r3, r5, r1
 801ff6e:	463a      	mov	r2, r7
 801ff70:	fbe0 2301 	umlal	r2, r3, r0, r1
 801ff74:	1c11      	adds	r1, r2, #0
 801ff76:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801ff7a:	2000      	movs	r0, #0
 801ff7c:	1a10      	subs	r0, r2, r0
 801ff7e:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801ff82:	eb63 0101 	sbc.w	r1, r3, r1
 801ff86:	f7e0 fba1 	bl	80006cc <__aeabi_l2d>
 801ff8a:	0fb5      	lsrs	r5, r6, #30
 801ff8c:	4a12      	ldr	r2, [pc, #72]	; (801ffd8 <sinf+0x138>)
 801ff8e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801ff92:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801ffd0 <sinf+0x130>
 801ff96:	ec41 0b17 	vmov	d7, r0, r1
 801ff9a:	f003 0103 	and.w	r1, r3, #3
 801ff9e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801ffa2:	ee27 0b00 	vmul.f64	d0, d7, d0
 801ffa6:	ed91 7b00 	vldr	d7, [r1]
 801ffaa:	ee20 1b00 	vmul.f64	d1, d0, d0
 801ffae:	f013 0f02 	tst.w	r3, #2
 801ffb2:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801ffb6:	4629      	mov	r1, r5
 801ffb8:	bf08      	it	eq
 801ffba:	4610      	moveq	r0, r2
 801ffbc:	ee27 0b00 	vmul.f64	d0, d7, d0
 801ffc0:	e790      	b.n	801fee4 <sinf+0x44>
 801ffc2:	b003      	add	sp, #12
 801ffc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ffc8:	f7ff bed1 	b.w	801fd6e <__math_invalidf>
 801ffcc:	f3af 8000 	nop.w
 801ffd0:	54442d18 	.word	0x54442d18
 801ffd4:	3c1921fb 	.word	0x3c1921fb
 801ffd8:	08029758 	.word	0x08029758
 801ffdc:	080296f4 	.word	0x080296f4

0801ffe0 <_init>:
 801ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffe2:	bf00      	nop
 801ffe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ffe6:	bc08      	pop	{r3}
 801ffe8:	469e      	mov	lr, r3
 801ffea:	4770      	bx	lr

0801ffec <_fini>:
 801ffec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffee:	bf00      	nop
 801fff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fff2:	bc08      	pop	{r3}
 801fff4:	469e      	mov	lr, r3
 801fff6:	4770      	bx	lr
