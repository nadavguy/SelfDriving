
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08109208  08109208  00019208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081096cc  081096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081096d0  081096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  10000000  081096d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000017c  100001e4  081098b8  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000360  081098b8  00020360  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021270  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000386b  00000000  00000000  00041484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e68  00000000  00000000  00044cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000d10  00000000  00000000  00045b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bc44  00000000  00000000  00046868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014b46  00000000  00000000  000824ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001804f6  00000000  00000000  00096ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002174e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004fe4  00000000  00000000  0021753c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081091f0 	.word	0x081091f0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	081091f0 	.word	0x081091f0

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_d2lz>:
 8100d98:	b538      	push	{r3, r4, r5, lr}
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	4604      	mov	r4, r0
 8100da0:	460d      	mov	r5, r1
 8100da2:	f7ff ff23 	bl	8100bec <__aeabi_dcmplt>
 8100da6:	b928      	cbnz	r0, 8100db4 <__aeabi_d2lz+0x1c>
 8100da8:	4620      	mov	r0, r4
 8100daa:	4629      	mov	r1, r5
 8100dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100db0:	f000 b80a 	b.w	8100dc8 <__aeabi_d2ulz>
 8100db4:	4620      	mov	r0, r4
 8100db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dba:	f000 f805 	bl	8100dc8 <__aeabi_d2ulz>
 8100dbe:	4240      	negs	r0, r0
 8100dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc4:	bd38      	pop	{r3, r4, r5, pc}
 8100dc6:	bf00      	nop

08100dc8 <__aeabi_d2ulz>:
 8100dc8:	b5d0      	push	{r4, r6, r7, lr}
 8100dca:	4b0c      	ldr	r3, [pc, #48]	; (8100dfc <__aeabi_d2ulz+0x34>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	4606      	mov	r6, r0
 8100dd0:	460f      	mov	r7, r1
 8100dd2:	f7ff fc99 	bl	8100708 <__aeabi_dmul>
 8100dd6:	f7ff ff6f 	bl	8100cb8 <__aeabi_d2uiz>
 8100dda:	4604      	mov	r4, r0
 8100ddc:	f7ff fc1a 	bl	8100614 <__aeabi_ui2d>
 8100de0:	4b07      	ldr	r3, [pc, #28]	; (8100e00 <__aeabi_d2ulz+0x38>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	f7ff fc90 	bl	8100708 <__aeabi_dmul>
 8100de8:	4602      	mov	r2, r0
 8100dea:	460b      	mov	r3, r1
 8100dec:	4630      	mov	r0, r6
 8100dee:	4639      	mov	r1, r7
 8100df0:	f7ff fad2 	bl	8100398 <__aeabi_dsub>
 8100df4:	f7ff ff60 	bl	8100cb8 <__aeabi_d2uiz>
 8100df8:	4621      	mov	r1, r4
 8100dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8100dfc:	3df00000 	.word	0x3df00000
 8100e00:	41f00000 	.word	0x41f00000

08100e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e08:	4b0b      	ldr	r3, [pc, #44]	; (8100e38 <SystemInit+0x34>)
 8100e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e0e:	4a0a      	ldr	r2, [pc, #40]	; (8100e38 <SystemInit+0x34>)
 8100e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e18:	4b07      	ldr	r3, [pc, #28]	; (8100e38 <SystemInit+0x34>)
 8100e1a:	691b      	ldr	r3, [r3, #16]
 8100e1c:	4a06      	ldr	r2, [pc, #24]	; (8100e38 <SystemInit+0x34>)
 8100e1e:	f043 0310 	orr.w	r3, r3, #16
 8100e22:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100e24:	4b04      	ldr	r3, [pc, #16]	; (8100e38 <SystemInit+0x34>)
 8100e26:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100e2a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100e2c:	bf00      	nop
 8100e2e:	46bd      	mov	sp, r7
 8100e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e34:	4770      	bx	lr
 8100e36:	bf00      	nop
 8100e38:	e000ed00 	.word	0xe000ed00

08100e3c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100e3c:	b480      	push	{r7}
 8100e3e:	b085      	sub	sp, #20
 8100e40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100e42:	4b19      	ldr	r3, [pc, #100]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e48:	4a17      	ldr	r2, [pc, #92]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e4a:	f043 0301 	orr.w	r3, r3, #1
 8100e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e52:	4b15      	ldr	r3, [pc, #84]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e58:	f003 0301 	and.w	r3, r3, #1
 8100e5c:	60fb      	str	r3, [r7, #12]
 8100e5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100e60:	4b11      	ldr	r3, [pc, #68]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e66:	4a10      	ldr	r2, [pc, #64]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e68:	f043 0302 	orr.w	r3, r3, #2
 8100e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e70:	4b0d      	ldr	r3, [pc, #52]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e76:	f003 0302 	and.w	r3, r3, #2
 8100e7a:	60bb      	str	r3, [r7, #8]
 8100e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e7e:	4b0a      	ldr	r3, [pc, #40]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e84:	4a08      	ldr	r2, [pc, #32]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e86:	f043 0308 	orr.w	r3, r3, #8
 8100e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e8e:	4b06      	ldr	r3, [pc, #24]	; (8100ea8 <MX_GPIO_Init+0x6c>)
 8100e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e94:	f003 0308 	and.w	r3, r3, #8
 8100e98:	607b      	str	r3, [r7, #4]
 8100e9a:	687b      	ldr	r3, [r7, #4]

}
 8100e9c:	bf00      	nop
 8100e9e:	3714      	adds	r7, #20
 8100ea0:	46bd      	mov	sp, r7
 8100ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ea6:	4770      	bx	lr
 8100ea8:	58024400 	.word	0x58024400

08100eac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8100eac:	b580      	push	{r7, lr}
 8100eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100eb0:	4b1b      	ldr	r3, [pc, #108]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100eb2:	4a1c      	ldr	r2, [pc, #112]	; (8100f24 <MX_I2C2_Init+0x78>)
 8100eb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 8100eb6:	4b1a      	ldr	r3, [pc, #104]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100eb8:	4a1b      	ldr	r2, [pc, #108]	; (8100f28 <MX_I2C2_Init+0x7c>)
 8100eba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100ebc:	4b18      	ldr	r3, [pc, #96]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100ebe:	2200      	movs	r2, #0
 8100ec0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100ec2:	4b17      	ldr	r3, [pc, #92]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100ec4:	2201      	movs	r2, #1
 8100ec6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100ec8:	4b15      	ldr	r3, [pc, #84]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100ece:	4b14      	ldr	r3, [pc, #80]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100ed4:	4b12      	ldr	r3, [pc, #72]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100ed6:	2200      	movs	r2, #0
 8100ed8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100eda:	4b11      	ldr	r3, [pc, #68]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100ee0:	4b0f      	ldr	r3, [pc, #60]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100ee2:	2200      	movs	r2, #0
 8100ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100ee6:	480e      	ldr	r0, [pc, #56]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100ee8:	f000 ff0e 	bl	8101d08 <HAL_I2C_Init>
 8100eec:	4603      	mov	r3, r0
 8100eee:	2b00      	cmp	r3, #0
 8100ef0:	d001      	beq.n	8100ef6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100ef2:	f000 f925 	bl	8101140 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100ef6:	2100      	movs	r1, #0
 8100ef8:	4809      	ldr	r0, [pc, #36]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100efa:	f001 fbf9 	bl	81026f0 <HAL_I2CEx_ConfigAnalogFilter>
 8100efe:	4603      	mov	r3, r0
 8100f00:	2b00      	cmp	r3, #0
 8100f02:	d001      	beq.n	8100f08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100f04:	f000 f91c 	bl	8101140 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100f08:	2100      	movs	r1, #0
 8100f0a:	4805      	ldr	r0, [pc, #20]	; (8100f20 <MX_I2C2_Init+0x74>)
 8100f0c:	f001 fc3b 	bl	8102786 <HAL_I2CEx_ConfigDigitalFilter>
 8100f10:	4603      	mov	r3, r0
 8100f12:	2b00      	cmp	r3, #0
 8100f14:	d001      	beq.n	8100f1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100f16:	f000 f913 	bl	8101140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100f1a:	bf00      	nop
 8100f1c:	bd80      	pop	{r7, pc}
 8100f1e:	bf00      	nop
 8100f20:	10000228 	.word	0x10000228
 8100f24:	40005800 	.word	0x40005800
 8100f28:	00301242 	.word	0x00301242

08100f2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100f2c:	b580      	push	{r7, lr}
 8100f2e:	b0b8      	sub	sp, #224	; 0xe0
 8100f30:	af00      	add	r7, sp, #0
 8100f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f38:	2200      	movs	r2, #0
 8100f3a:	601a      	str	r2, [r3, #0]
 8100f3c:	605a      	str	r2, [r3, #4]
 8100f3e:	609a      	str	r2, [r3, #8]
 8100f40:	60da      	str	r2, [r3, #12]
 8100f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f44:	f107 0310 	add.w	r3, r7, #16
 8100f48:	22bc      	movs	r2, #188	; 0xbc
 8100f4a:	2100      	movs	r1, #0
 8100f4c:	4618      	mov	r0, r3
 8100f4e:	f003 fd2d 	bl	81049ac <memset>
  if(i2cHandle->Instance==I2C2)
 8100f52:	687b      	ldr	r3, [r7, #4]
 8100f54:	681b      	ldr	r3, [r3, #0]
 8100f56:	4a29      	ldr	r2, [pc, #164]	; (8100ffc <HAL_I2C_MspInit+0xd0>)
 8100f58:	4293      	cmp	r3, r2
 8100f5a:	d14a      	bne.n	8100ff2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100f5c:	2308      	movs	r3, #8
 8100f5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100f60:	2300      	movs	r3, #0
 8100f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f66:	f107 0310 	add.w	r3, r7, #16
 8100f6a:	4618      	mov	r0, r3
 8100f6c:	f001 fe5a 	bl	8102c24 <HAL_RCCEx_PeriphCLKConfig>
 8100f70:	4603      	mov	r3, r0
 8100f72:	2b00      	cmp	r3, #0
 8100f74:	d001      	beq.n	8100f7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100f76:	f000 f8e3 	bl	8101140 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f7a:	4b21      	ldr	r3, [pc, #132]	; (8101000 <HAL_I2C_MspInit+0xd4>)
 8100f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f80:	4a1f      	ldr	r2, [pc, #124]	; (8101000 <HAL_I2C_MspInit+0xd4>)
 8100f82:	f043 0302 	orr.w	r3, r3, #2
 8100f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f8a:	4b1d      	ldr	r3, [pc, #116]	; (8101000 <HAL_I2C_MspInit+0xd4>)
 8100f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f90:	f003 0302 	and.w	r3, r3, #2
 8100f94:	60fb      	str	r3, [r7, #12]
 8100f96:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8100f98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100fa0:	2312      	movs	r3, #18
 8100fa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fa6:	2300      	movs	r3, #0
 8100fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fac:	2300      	movs	r3, #0
 8100fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100fb2:	2304      	movs	r3, #4
 8100fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100fb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fbc:	4619      	mov	r1, r3
 8100fbe:	4811      	ldr	r0, [pc, #68]	; (8101004 <HAL_I2C_MspInit+0xd8>)
 8100fc0:	f000 fce0 	bl	8101984 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100fc4:	4b0e      	ldr	r3, [pc, #56]	; (8101000 <HAL_I2C_MspInit+0xd4>)
 8100fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fca:	4a0d      	ldr	r2, [pc, #52]	; (8101000 <HAL_I2C_MspInit+0xd4>)
 8100fcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100fd4:	4b0a      	ldr	r3, [pc, #40]	; (8101000 <HAL_I2C_MspInit+0xd4>)
 8100fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100fde:	60bb      	str	r3, [r7, #8]
 8100fe0:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8100fe2:	2200      	movs	r2, #0
 8100fe4:	2100      	movs	r1, #0
 8100fe6:	2021      	movs	r0, #33	; 0x21
 8100fe8:	f000 fc83 	bl	81018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8100fec:	2021      	movs	r0, #33	; 0x21
 8100fee:	f000 fc9a 	bl	8101926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8100ff2:	bf00      	nop
 8100ff4:	37e0      	adds	r7, #224	; 0xe0
 8100ff6:	46bd      	mov	sp, r7
 8100ff8:	bd80      	pop	{r7, pc}
 8100ffa:	bf00      	nop
 8100ffc:	40005800 	.word	0x40005800
 8101000:	58024400 	.word	0x58024400
 8101004:	58020400 	.word	0x58020400

08101008 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8101008:	b5f0      	push	{r4, r5, r6, r7, lr}
 810100a:	b09d      	sub	sp, #116	; 0x74
 810100c:	af14      	add	r7, sp, #80	; 0x50

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810100e:	4b47      	ldr	r3, [pc, #284]	; (810112c <main+0x124>)
 8101010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101014:	4a45      	ldr	r2, [pc, #276]	; (810112c <main+0x124>)
 8101016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810101e:	4b43      	ldr	r3, [pc, #268]	; (810112c <main+0x124>)
 8101020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101028:	607b      	str	r3, [r7, #4]
 810102a:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810102c:	2001      	movs	r0, #1
 810102e:	f000 fe59 	bl	8101ce4 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101032:	f001 fc6f 	bl	8102914 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101036:	2201      	movs	r2, #1
 8101038:	2102      	movs	r1, #2
 810103a:	2000      	movs	r0, #0
 810103c:	f001 fbf0 	bl	8102820 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101040:	4b3b      	ldr	r3, [pc, #236]	; (8101130 <main+0x128>)
 8101042:	681b      	ldr	r3, [r3, #0]
 8101044:	091b      	lsrs	r3, r3, #4
 8101046:	f003 030f 	and.w	r3, r3, #15
 810104a:	2b07      	cmp	r3, #7
 810104c:	d108      	bne.n	8101060 <main+0x58>
 810104e:	4b39      	ldr	r3, [pc, #228]	; (8101134 <main+0x12c>)
 8101050:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101054:	4a37      	ldr	r2, [pc, #220]	; (8101134 <main+0x12c>)
 8101056:	f043 0301 	orr.w	r3, r3, #1
 810105a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810105e:	e007      	b.n	8101070 <main+0x68>
 8101060:	4b34      	ldr	r3, [pc, #208]	; (8101134 <main+0x12c>)
 8101062:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101066:	4a33      	ldr	r2, [pc, #204]	; (8101134 <main+0x12c>)
 8101068:	f043 0301 	orr.w	r3, r3, #1
 810106c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8101070:	f000 fa8c 	bl	810158c <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8101074:	f7ff fee2 	bl	8100e3c <MX_GPIO_Init>
	MX_I2C2_Init();
 8101078:	f7ff ff18 	bl	8100eac <MX_I2C2_Init>
	MX_SPI1_Init();
 810107c:	f000 f866 	bl	810114c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	chasisIMU.deviceAddress = 0x68<<1;
 8101080:	4b2d      	ldr	r3, [pc, #180]	; (8101138 <main+0x130>)
 8101082:	22d0      	movs	r2, #208	; 0xd0
 8101084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 8101088:	4a2b      	ldr	r2, [pc, #172]	; (8101138 <main+0x130>)
 810108a:	4b2c      	ldr	r3, [pc, #176]	; (810113c <main+0x134>)
 810108c:	4610      	mov	r0, r2
 810108e:	4619      	mov	r1, r3
 8101090:	234c      	movs	r3, #76	; 0x4c
 8101092:	461a      	mov	r2, r3
 8101094:	f003 fc7c 	bl	8104990 <memcpy>
	initMPU(chasisIMU);
 8101098:	4e27      	ldr	r6, [pc, #156]	; (8101138 <main+0x130>)
 810109a:	466d      	mov	r5, sp
 810109c:	f106 0410 	add.w	r4, r6, #16
 81010a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81010a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81010a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81010a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81010aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81010ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81010b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81010b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81010b8:	f003 fc1a 	bl	81048f0 <initMPU>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int16_t AccData[3], GyroData[3], MagData[3];
	MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81010bc:	4e1e      	ldr	r6, [pc, #120]	; (8101138 <main+0x130>)
 81010be:	f107 0310 	add.w	r3, r7, #16
 81010c2:	9312      	str	r3, [sp, #72]	; 0x48
 81010c4:	f107 0308 	add.w	r3, r7, #8
 81010c8:	9311      	str	r3, [sp, #68]	; 0x44
 81010ca:	f107 0318 	add.w	r3, r7, #24
 81010ce:	9310      	str	r3, [sp, #64]	; 0x40
 81010d0:	466d      	mov	r5, sp
 81010d2:	f106 0410 	add.w	r4, r6, #16
 81010d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81010d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81010e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81010e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81010ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81010ee:	f003 fb15 	bl	810471c <MPU9250_GetData>
	while (1)
	{
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81010f2:	4e11      	ldr	r6, [pc, #68]	; (8101138 <main+0x130>)
 81010f4:	f107 0310 	add.w	r3, r7, #16
 81010f8:	9312      	str	r3, [sp, #72]	; 0x48
 81010fa:	f107 0308 	add.w	r3, r7, #8
 81010fe:	9311      	str	r3, [sp, #68]	; 0x44
 8101100:	f107 0318 	add.w	r3, r7, #24
 8101104:	9310      	str	r3, [sp, #64]	; 0x40
 8101106:	466d      	mov	r5, sp
 8101108:	f106 0410 	add.w	r4, r6, #16
 810110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810110e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101118:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810111c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101120:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101124:	f003 fafa 	bl	810471c <MPU9250_GetData>
 8101128:	e7e3      	b.n	81010f2 <main+0xea>
 810112a:	bf00      	nop
 810112c:	58024400 	.word	0x58024400
 8101130:	e000ed00 	.word	0xe000ed00
 8101134:	58026400 	.word	0x58026400
 8101138:	10000274 	.word	0x10000274
 810113c:	10000228 	.word	0x10000228

08101140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101140:	b480      	push	{r7}
 8101142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101144:	b672      	cpsid	i
}
 8101146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101148:	e7fe      	b.n	8101148 <Error_Handler+0x8>
	...

0810114c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 810114c:	b580      	push	{r7, lr}
 810114e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101150:	4b28      	ldr	r3, [pc, #160]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101152:	4a29      	ldr	r2, [pc, #164]	; (81011f8 <MX_SPI1_Init+0xac>)
 8101154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101156:	4b27      	ldr	r3, [pc, #156]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101158:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810115c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 810115e:	4b25      	ldr	r3, [pc, #148]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101160:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8101164:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101166:	4b23      	ldr	r3, [pc, #140]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101168:	2203      	movs	r2, #3
 810116a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810116c:	4b21      	ldr	r3, [pc, #132]	; (81011f4 <MX_SPI1_Init+0xa8>)
 810116e:	2200      	movs	r2, #0
 8101170:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101172:	4b20      	ldr	r3, [pc, #128]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101174:	2200      	movs	r2, #0
 8101176:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101178:	4b1e      	ldr	r3, [pc, #120]	; (81011f4 <MX_SPI1_Init+0xa8>)
 810117a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810117e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8101180:	4b1c      	ldr	r3, [pc, #112]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101182:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8101186:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101188:	4b1a      	ldr	r3, [pc, #104]	; (81011f4 <MX_SPI1_Init+0xa8>)
 810118a:	2200      	movs	r2, #0
 810118c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810118e:	4b19      	ldr	r3, [pc, #100]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101190:	2200      	movs	r2, #0
 8101192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101194:	4b17      	ldr	r3, [pc, #92]	; (81011f4 <MX_SPI1_Init+0xa8>)
 8101196:	2200      	movs	r2, #0
 8101198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810119a:	4b16      	ldr	r3, [pc, #88]	; (81011f4 <MX_SPI1_Init+0xa8>)
 810119c:	2200      	movs	r2, #0
 810119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81011a0:	4b14      	ldr	r3, [pc, #80]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81011a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81011a8:	4b12      	ldr	r3, [pc, #72]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011aa:	2200      	movs	r2, #0
 81011ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81011ae:	4b11      	ldr	r3, [pc, #68]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011b0:	2200      	movs	r2, #0
 81011b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81011b4:	4b0f      	ldr	r3, [pc, #60]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011b6:	2200      	movs	r2, #0
 81011b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81011ba:	4b0e      	ldr	r3, [pc, #56]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011bc:	2200      	movs	r2, #0
 81011be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81011c0:	4b0c      	ldr	r3, [pc, #48]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011c2:	2200      	movs	r2, #0
 81011c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81011c6:	4b0b      	ldr	r3, [pc, #44]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011c8:	2200      	movs	r2, #0
 81011ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81011cc:	4b09      	ldr	r3, [pc, #36]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011ce:	2200      	movs	r2, #0
 81011d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81011d2:	4b08      	ldr	r3, [pc, #32]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011d4:	2200      	movs	r2, #0
 81011d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81011d8:	4b06      	ldr	r3, [pc, #24]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011da:	2200      	movs	r2, #0
 81011dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81011de:	4805      	ldr	r0, [pc, #20]	; (81011f4 <MX_SPI1_Init+0xa8>)
 81011e0:	f002 fdc4 	bl	8103d6c <HAL_SPI_Init>
 81011e4:	4603      	mov	r3, r0
 81011e6:	2b00      	cmp	r3, #0
 81011e8:	d001      	beq.n	81011ee <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 81011ea:	f7ff ffa9 	bl	8101140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81011ee:	bf00      	nop
 81011f0:	bd80      	pop	{r7, pc}
 81011f2:	bf00      	nop
 81011f4:	100002c4 	.word	0x100002c4
 81011f8:	40013000 	.word	0x40013000

081011fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81011fc:	b580      	push	{r7, lr}
 81011fe:	b0ba      	sub	sp, #232	; 0xe8
 8101200:	af00      	add	r7, sp, #0
 8101202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101208:	2200      	movs	r2, #0
 810120a:	601a      	str	r2, [r3, #0]
 810120c:	605a      	str	r2, [r3, #4]
 810120e:	609a      	str	r2, [r3, #8]
 8101210:	60da      	str	r2, [r3, #12]
 8101212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101214:	f107 0318 	add.w	r3, r7, #24
 8101218:	22bc      	movs	r2, #188	; 0xbc
 810121a:	2100      	movs	r1, #0
 810121c:	4618      	mov	r0, r3
 810121e:	f003 fbc5 	bl	81049ac <memset>
  if(spiHandle->Instance==SPI1)
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	4a36      	ldr	r2, [pc, #216]	; (8101300 <HAL_SPI_MspInit+0x104>)
 8101228:	4293      	cmp	r3, r2
 810122a:	d165      	bne.n	81012f8 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 810122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101230:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101232:	2300      	movs	r3, #0
 8101234:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101236:	f107 0318 	add.w	r3, r7, #24
 810123a:	4618      	mov	r0, r3
 810123c:	f001 fcf2 	bl	8102c24 <HAL_RCCEx_PeriphCLKConfig>
 8101240:	4603      	mov	r3, r0
 8101242:	2b00      	cmp	r3, #0
 8101244:	d001      	beq.n	810124a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8101246:	f7ff ff7b 	bl	8101140 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 810124a:	4b2e      	ldr	r3, [pc, #184]	; (8101304 <HAL_SPI_MspInit+0x108>)
 810124c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101250:	4a2c      	ldr	r2, [pc, #176]	; (8101304 <HAL_SPI_MspInit+0x108>)
 8101252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101256:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810125a:	4b2a      	ldr	r3, [pc, #168]	; (8101304 <HAL_SPI_MspInit+0x108>)
 810125c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101264:	617b      	str	r3, [r7, #20]
 8101266:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101268:	4b26      	ldr	r3, [pc, #152]	; (8101304 <HAL_SPI_MspInit+0x108>)
 810126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126e:	4a25      	ldr	r2, [pc, #148]	; (8101304 <HAL_SPI_MspInit+0x108>)
 8101270:	f043 0301 	orr.w	r3, r3, #1
 8101274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101278:	4b22      	ldr	r3, [pc, #136]	; (8101304 <HAL_SPI_MspInit+0x108>)
 810127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127e:	f003 0301 	and.w	r3, r3, #1
 8101282:	613b      	str	r3, [r7, #16]
 8101284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101286:	4b1f      	ldr	r3, [pc, #124]	; (8101304 <HAL_SPI_MspInit+0x108>)
 8101288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810128c:	4a1d      	ldr	r2, [pc, #116]	; (8101304 <HAL_SPI_MspInit+0x108>)
 810128e:	f043 0308 	orr.w	r3, r3, #8
 8101292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101296:	4b1b      	ldr	r3, [pc, #108]	; (8101304 <HAL_SPI_MspInit+0x108>)
 8101298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129c:	f003 0308 	and.w	r3, r3, #8
 81012a0:	60fb      	str	r3, [r7, #12]
 81012a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 81012a4:	2320      	movs	r3, #32
 81012a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012aa:	2302      	movs	r3, #2
 81012ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012b0:	2300      	movs	r3, #0
 81012b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012b6:	2300      	movs	r3, #0
 81012b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81012bc:	2305      	movs	r3, #5
 81012be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81012c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81012c6:	4619      	mov	r1, r3
 81012c8:	480f      	ldr	r0, [pc, #60]	; (8101308 <HAL_SPI_MspInit+0x10c>)
 81012ca:	f000 fb5b 	bl	8101984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81012ce:	2380      	movs	r3, #128	; 0x80
 81012d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012d4:	2302      	movs	r3, #2
 81012d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012da:	2300      	movs	r3, #0
 81012dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012e0:	2300      	movs	r3, #0
 81012e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81012e6:	2305      	movs	r3, #5
 81012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81012ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81012f0:	4619      	mov	r1, r3
 81012f2:	4806      	ldr	r0, [pc, #24]	; (810130c <HAL_SPI_MspInit+0x110>)
 81012f4:	f000 fb46 	bl	8101984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81012f8:	bf00      	nop
 81012fa:	37e8      	adds	r7, #232	; 0xe8
 81012fc:	46bd      	mov	sp, r7
 81012fe:	bd80      	pop	{r7, pc}
 8101300:	40013000 	.word	0x40013000
 8101304:	58024400 	.word	0x58024400
 8101308:	58020000 	.word	0x58020000
 810130c:	58020c00 	.word	0x58020c00

08101310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101310:	b480      	push	{r7}
 8101312:	b083      	sub	sp, #12
 8101314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101316:	4b0a      	ldr	r3, [pc, #40]	; (8101340 <HAL_MspInit+0x30>)
 8101318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810131c:	4a08      	ldr	r2, [pc, #32]	; (8101340 <HAL_MspInit+0x30>)
 810131e:	f043 0302 	orr.w	r3, r3, #2
 8101322:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101326:	4b06      	ldr	r3, [pc, #24]	; (8101340 <HAL_MspInit+0x30>)
 8101328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810132c:	f003 0302 	and.w	r3, r3, #2
 8101330:	607b      	str	r3, [r7, #4]
 8101332:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101334:	bf00      	nop
 8101336:	370c      	adds	r7, #12
 8101338:	46bd      	mov	sp, r7
 810133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133e:	4770      	bx	lr
 8101340:	58024400 	.word	0x58024400

08101344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101344:	b480      	push	{r7}
 8101346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101348:	e7fe      	b.n	8101348 <NMI_Handler+0x4>

0810134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810134a:	b480      	push	{r7}
 810134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810134e:	e7fe      	b.n	810134e <HardFault_Handler+0x4>

08101350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101350:	b480      	push	{r7}
 8101352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101354:	e7fe      	b.n	8101354 <MemManage_Handler+0x4>

08101356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101356:	b480      	push	{r7}
 8101358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810135a:	e7fe      	b.n	810135a <BusFault_Handler+0x4>

0810135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810135c:	b480      	push	{r7}
 810135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101360:	e7fe      	b.n	8101360 <UsageFault_Handler+0x4>

08101362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101362:	b480      	push	{r7}
 8101364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101366:	bf00      	nop
 8101368:	46bd      	mov	sp, r7
 810136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136e:	4770      	bx	lr

08101370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101370:	b480      	push	{r7}
 8101372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101374:	bf00      	nop
 8101376:	46bd      	mov	sp, r7
 8101378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137c:	4770      	bx	lr

0810137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810137e:	b480      	push	{r7}
 8101380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101382:	bf00      	nop
 8101384:	46bd      	mov	sp, r7
 8101386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810138a:	4770      	bx	lr

0810138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810138c:	b580      	push	{r7, lr}
 810138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101390:	f000 f990 	bl	81016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101394:	bf00      	nop
 8101396:	bd80      	pop	{r7, pc}

08101398 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8101398:	b580      	push	{r7, lr}
 810139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 810139c:	4802      	ldr	r0, [pc, #8]	; (81013a8 <I2C2_EV_IRQHandler+0x10>)
 810139e:	f000 ff71 	bl	8102284 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 81013a2:	bf00      	nop
 81013a4:	bd80      	pop	{r7, pc}
 81013a6:	bf00      	nop
 81013a8:	10000228 	.word	0x10000228

081013ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81013ac:	b480      	push	{r7}
 81013ae:	af00      	add	r7, sp, #0
	return 1;
 81013b0:	2301      	movs	r3, #1
}
 81013b2:	4618      	mov	r0, r3
 81013b4:	46bd      	mov	sp, r7
 81013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ba:	4770      	bx	lr

081013bc <_kill>:

int _kill(int pid, int sig)
{
 81013bc:	b580      	push	{r7, lr}
 81013be:	b082      	sub	sp, #8
 81013c0:	af00      	add	r7, sp, #0
 81013c2:	6078      	str	r0, [r7, #4]
 81013c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81013c6:	f003 fab9 	bl	810493c <__errno>
 81013ca:	4603      	mov	r3, r0
 81013cc:	2216      	movs	r2, #22
 81013ce:	601a      	str	r2, [r3, #0]
	return -1;
 81013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81013d4:	4618      	mov	r0, r3
 81013d6:	3708      	adds	r7, #8
 81013d8:	46bd      	mov	sp, r7
 81013da:	bd80      	pop	{r7, pc}

081013dc <_exit>:

void _exit (int status)
{
 81013dc:	b580      	push	{r7, lr}
 81013de:	b082      	sub	sp, #8
 81013e0:	af00      	add	r7, sp, #0
 81013e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81013e4:	f04f 31ff 	mov.w	r1, #4294967295
 81013e8:	6878      	ldr	r0, [r7, #4]
 81013ea:	f7ff ffe7 	bl	81013bc <_kill>
	while (1) {}		/* Make sure we hang here */
 81013ee:	e7fe      	b.n	81013ee <_exit+0x12>

081013f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	b086      	sub	sp, #24
 81013f4:	af00      	add	r7, sp, #0
 81013f6:	60f8      	str	r0, [r7, #12]
 81013f8:	60b9      	str	r1, [r7, #8]
 81013fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81013fc:	2300      	movs	r3, #0
 81013fe:	617b      	str	r3, [r7, #20]
 8101400:	e00a      	b.n	8101418 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101402:	f3af 8000 	nop.w
 8101406:	4601      	mov	r1, r0
 8101408:	68bb      	ldr	r3, [r7, #8]
 810140a:	1c5a      	adds	r2, r3, #1
 810140c:	60ba      	str	r2, [r7, #8]
 810140e:	b2ca      	uxtb	r2, r1
 8101410:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101412:	697b      	ldr	r3, [r7, #20]
 8101414:	3301      	adds	r3, #1
 8101416:	617b      	str	r3, [r7, #20]
 8101418:	697a      	ldr	r2, [r7, #20]
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	429a      	cmp	r2, r3
 810141e:	dbf0      	blt.n	8101402 <_read+0x12>
	}

return len;
 8101420:	687b      	ldr	r3, [r7, #4]
}
 8101422:	4618      	mov	r0, r3
 8101424:	3718      	adds	r7, #24
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}

0810142a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810142a:	b580      	push	{r7, lr}
 810142c:	b086      	sub	sp, #24
 810142e:	af00      	add	r7, sp, #0
 8101430:	60f8      	str	r0, [r7, #12]
 8101432:	60b9      	str	r1, [r7, #8]
 8101434:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101436:	2300      	movs	r3, #0
 8101438:	617b      	str	r3, [r7, #20]
 810143a:	e009      	b.n	8101450 <_write+0x26>
	{
		__io_putchar(*ptr++);
 810143c:	68bb      	ldr	r3, [r7, #8]
 810143e:	1c5a      	adds	r2, r3, #1
 8101440:	60ba      	str	r2, [r7, #8]
 8101442:	781b      	ldrb	r3, [r3, #0]
 8101444:	4618      	mov	r0, r3
 8101446:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810144a:	697b      	ldr	r3, [r7, #20]
 810144c:	3301      	adds	r3, #1
 810144e:	617b      	str	r3, [r7, #20]
 8101450:	697a      	ldr	r2, [r7, #20]
 8101452:	687b      	ldr	r3, [r7, #4]
 8101454:	429a      	cmp	r2, r3
 8101456:	dbf1      	blt.n	810143c <_write+0x12>
	}
	return len;
 8101458:	687b      	ldr	r3, [r7, #4]
}
 810145a:	4618      	mov	r0, r3
 810145c:	3718      	adds	r7, #24
 810145e:	46bd      	mov	sp, r7
 8101460:	bd80      	pop	{r7, pc}

08101462 <_close>:

int _close(int file)
{
 8101462:	b480      	push	{r7}
 8101464:	b083      	sub	sp, #12
 8101466:	af00      	add	r7, sp, #0
 8101468:	6078      	str	r0, [r7, #4]
	return -1;
 810146a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810146e:	4618      	mov	r0, r3
 8101470:	370c      	adds	r7, #12
 8101472:	46bd      	mov	sp, r7
 8101474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101478:	4770      	bx	lr

0810147a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810147a:	b480      	push	{r7}
 810147c:	b083      	sub	sp, #12
 810147e:	af00      	add	r7, sp, #0
 8101480:	6078      	str	r0, [r7, #4]
 8101482:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101484:	683b      	ldr	r3, [r7, #0]
 8101486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810148a:	605a      	str	r2, [r3, #4]
	return 0;
 810148c:	2300      	movs	r3, #0
}
 810148e:	4618      	mov	r0, r3
 8101490:	370c      	adds	r7, #12
 8101492:	46bd      	mov	sp, r7
 8101494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101498:	4770      	bx	lr

0810149a <_isatty>:

int _isatty(int file)
{
 810149a:	b480      	push	{r7}
 810149c:	b083      	sub	sp, #12
 810149e:	af00      	add	r7, sp, #0
 81014a0:	6078      	str	r0, [r7, #4]
	return 1;
 81014a2:	2301      	movs	r3, #1
}
 81014a4:	4618      	mov	r0, r3
 81014a6:	370c      	adds	r7, #12
 81014a8:	46bd      	mov	sp, r7
 81014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ae:	4770      	bx	lr

081014b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81014b0:	b480      	push	{r7}
 81014b2:	b085      	sub	sp, #20
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	60f8      	str	r0, [r7, #12]
 81014b8:	60b9      	str	r1, [r7, #8]
 81014ba:	607a      	str	r2, [r7, #4]
	return 0;
 81014bc:	2300      	movs	r3, #0
}
 81014be:	4618      	mov	r0, r3
 81014c0:	3714      	adds	r7, #20
 81014c2:	46bd      	mov	sp, r7
 81014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c8:	4770      	bx	lr
	...

081014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81014cc:	b580      	push	{r7, lr}
 81014ce:	b086      	sub	sp, #24
 81014d0:	af00      	add	r7, sp, #0
 81014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81014d4:	4a14      	ldr	r2, [pc, #80]	; (8101528 <_sbrk+0x5c>)
 81014d6:	4b15      	ldr	r3, [pc, #84]	; (810152c <_sbrk+0x60>)
 81014d8:	1ad3      	subs	r3, r2, r3
 81014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81014dc:	697b      	ldr	r3, [r7, #20]
 81014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81014e0:	4b13      	ldr	r3, [pc, #76]	; (8101530 <_sbrk+0x64>)
 81014e2:	681b      	ldr	r3, [r3, #0]
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d102      	bne.n	81014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81014e8:	4b11      	ldr	r3, [pc, #68]	; (8101530 <_sbrk+0x64>)
 81014ea:	4a12      	ldr	r2, [pc, #72]	; (8101534 <_sbrk+0x68>)
 81014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81014ee:	4b10      	ldr	r3, [pc, #64]	; (8101530 <_sbrk+0x64>)
 81014f0:	681a      	ldr	r2, [r3, #0]
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	4413      	add	r3, r2
 81014f6:	693a      	ldr	r2, [r7, #16]
 81014f8:	429a      	cmp	r2, r3
 81014fa:	d207      	bcs.n	810150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 81014fc:	f003 fa1e 	bl	810493c <__errno>
 8101500:	4603      	mov	r3, r0
 8101502:	220c      	movs	r2, #12
 8101504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101506:	f04f 33ff 	mov.w	r3, #4294967295
 810150a:	e009      	b.n	8101520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810150c:	4b08      	ldr	r3, [pc, #32]	; (8101530 <_sbrk+0x64>)
 810150e:	681b      	ldr	r3, [r3, #0]
 8101510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101512:	4b07      	ldr	r3, [pc, #28]	; (8101530 <_sbrk+0x64>)
 8101514:	681a      	ldr	r2, [r3, #0]
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	4413      	add	r3, r2
 810151a:	4a05      	ldr	r2, [pc, #20]	; (8101530 <_sbrk+0x64>)
 810151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810151e:	68fb      	ldr	r3, [r7, #12]
}
 8101520:	4618      	mov	r0, r3
 8101522:	3718      	adds	r7, #24
 8101524:	46bd      	mov	sp, r7
 8101526:	bd80      	pop	{r7, pc}
 8101528:	10048000 	.word	0x10048000
 810152c:	00000400 	.word	0x00000400
 8101530:	10000200 	.word	0x10000200
 8101534:	10000360 	.word	0x10000360

08101538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101570 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810153c:	f7ff fc62 	bl	8100e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101540:	480c      	ldr	r0, [pc, #48]	; (8101574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101542:	490d      	ldr	r1, [pc, #52]	; (8101578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101544:	4a0d      	ldr	r2, [pc, #52]	; (810157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101548:	e002      	b.n	8101550 <LoopCopyDataInit>

0810154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810154e:	3304      	adds	r3, #4

08101550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101554:	d3f9      	bcc.n	810154a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101556:	4a0a      	ldr	r2, [pc, #40]	; (8101580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101558:	4c0a      	ldr	r4, [pc, #40]	; (8101584 <LoopFillZerobss+0x22>)
  movs r3, #0
 810155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810155c:	e001      	b.n	8101562 <LoopFillZerobss>

0810155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101560:	3204      	adds	r2, #4

08101562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101564:	d3fb      	bcc.n	810155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101566:	f003 f9ef 	bl	8104948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810156a:	f7ff fd4d 	bl	8101008 <main>
  bx  lr
 810156e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101570:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101574:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101578:	100001e4 	.word	0x100001e4
  ldr r2, =_sidata
 810157c:	081096d4 	.word	0x081096d4
  ldr r2, =_sbss
 8101580:	100001e4 	.word	0x100001e4
  ldr r4, =_ebss
 8101584:	10000360 	.word	0x10000360

08101588 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101588:	e7fe      	b.n	8101588 <ADC3_IRQHandler>
	...

0810158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810158c:	b580      	push	{r7, lr}
 810158e:	b082      	sub	sp, #8
 8101590:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101592:	4b28      	ldr	r3, [pc, #160]	; (8101634 <HAL_Init+0xa8>)
 8101594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101598:	4a26      	ldr	r2, [pc, #152]	; (8101634 <HAL_Init+0xa8>)
 810159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810159e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81015a2:	4b24      	ldr	r3, [pc, #144]	; (8101634 <HAL_Init+0xa8>)
 81015a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81015ac:	603b      	str	r3, [r7, #0]
 81015ae:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81015b0:	4b21      	ldr	r3, [pc, #132]	; (8101638 <HAL_Init+0xac>)
 81015b2:	681b      	ldr	r3, [r3, #0]
 81015b4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81015b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81015bc:	4a1e      	ldr	r2, [pc, #120]	; (8101638 <HAL_Init+0xac>)
 81015be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81015c2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81015c4:	4b1c      	ldr	r3, [pc, #112]	; (8101638 <HAL_Init+0xac>)
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	4a1b      	ldr	r2, [pc, #108]	; (8101638 <HAL_Init+0xac>)
 81015ca:	f043 0301 	orr.w	r3, r3, #1
 81015ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81015d0:	2003      	movs	r0, #3
 81015d2:	f000 f983 	bl	81018dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81015d6:	f001 f9ab 	bl	8102930 <HAL_RCC_GetSysClockFreq>
 81015da:	4602      	mov	r2, r0
 81015dc:	4b15      	ldr	r3, [pc, #84]	; (8101634 <HAL_Init+0xa8>)
 81015de:	699b      	ldr	r3, [r3, #24]
 81015e0:	0a1b      	lsrs	r3, r3, #8
 81015e2:	f003 030f 	and.w	r3, r3, #15
 81015e6:	4915      	ldr	r1, [pc, #84]	; (810163c <HAL_Init+0xb0>)
 81015e8:	5ccb      	ldrb	r3, [r1, r3]
 81015ea:	f003 031f 	and.w	r3, r3, #31
 81015ee:	fa22 f303 	lsr.w	r3, r2, r3
 81015f2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015f4:	4b0f      	ldr	r3, [pc, #60]	; (8101634 <HAL_Init+0xa8>)
 81015f6:	699b      	ldr	r3, [r3, #24]
 81015f8:	f003 030f 	and.w	r3, r3, #15
 81015fc:	4a0f      	ldr	r2, [pc, #60]	; (810163c <HAL_Init+0xb0>)
 81015fe:	5cd3      	ldrb	r3, [r2, r3]
 8101600:	f003 031f 	and.w	r3, r3, #31
 8101604:	687a      	ldr	r2, [r7, #4]
 8101606:	fa22 f303 	lsr.w	r3, r2, r3
 810160a:	4a0d      	ldr	r2, [pc, #52]	; (8101640 <HAL_Init+0xb4>)
 810160c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810160e:	4b0c      	ldr	r3, [pc, #48]	; (8101640 <HAL_Init+0xb4>)
 8101610:	681b      	ldr	r3, [r3, #0]
 8101612:	4a0c      	ldr	r2, [pc, #48]	; (8101644 <HAL_Init+0xb8>)
 8101614:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101616:	2000      	movs	r0, #0
 8101618:	f000 f816 	bl	8101648 <HAL_InitTick>
 810161c:	4603      	mov	r3, r0
 810161e:	2b00      	cmp	r3, #0
 8101620:	d001      	beq.n	8101626 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101622:	2301      	movs	r3, #1
 8101624:	e002      	b.n	810162c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101626:	f7ff fe73 	bl	8101310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810162a:	2300      	movs	r3, #0
}
 810162c:	4618      	mov	r0, r3
 810162e:	3708      	adds	r7, #8
 8101630:	46bd      	mov	sp, r7
 8101632:	bd80      	pop	{r7, pc}
 8101634:	58024400 	.word	0x58024400
 8101638:	40024400 	.word	0x40024400
 810163c:	08109208 	.word	0x08109208
 8101640:	10000004 	.word	0x10000004
 8101644:	10000000 	.word	0x10000000

08101648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101648:	b580      	push	{r7, lr}
 810164a:	b082      	sub	sp, #8
 810164c:	af00      	add	r7, sp, #0
 810164e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101650:	4b15      	ldr	r3, [pc, #84]	; (81016a8 <HAL_InitTick+0x60>)
 8101652:	781b      	ldrb	r3, [r3, #0]
 8101654:	2b00      	cmp	r3, #0
 8101656:	d101      	bne.n	810165c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101658:	2301      	movs	r3, #1
 810165a:	e021      	b.n	81016a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810165c:	4b13      	ldr	r3, [pc, #76]	; (81016ac <HAL_InitTick+0x64>)
 810165e:	681a      	ldr	r2, [r3, #0]
 8101660:	4b11      	ldr	r3, [pc, #68]	; (81016a8 <HAL_InitTick+0x60>)
 8101662:	781b      	ldrb	r3, [r3, #0]
 8101664:	4619      	mov	r1, r3
 8101666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810166a:	fbb3 f3f1 	udiv	r3, r3, r1
 810166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101672:	4618      	mov	r0, r3
 8101674:	f000 f965 	bl	8101942 <HAL_SYSTICK_Config>
 8101678:	4603      	mov	r3, r0
 810167a:	2b00      	cmp	r3, #0
 810167c:	d001      	beq.n	8101682 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810167e:	2301      	movs	r3, #1
 8101680:	e00e      	b.n	81016a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101682:	687b      	ldr	r3, [r7, #4]
 8101684:	2b0f      	cmp	r3, #15
 8101686:	d80a      	bhi.n	810169e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101688:	2200      	movs	r2, #0
 810168a:	6879      	ldr	r1, [r7, #4]
 810168c:	f04f 30ff 	mov.w	r0, #4294967295
 8101690:	f000 f92f 	bl	81018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101694:	4a06      	ldr	r2, [pc, #24]	; (81016b0 <HAL_InitTick+0x68>)
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810169a:	2300      	movs	r3, #0
 810169c:	e000      	b.n	81016a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810169e:	2301      	movs	r3, #1
}
 81016a0:	4618      	mov	r0, r3
 81016a2:	3708      	adds	r7, #8
 81016a4:	46bd      	mov	sp, r7
 81016a6:	bd80      	pop	{r7, pc}
 81016a8:	1000000c 	.word	0x1000000c
 81016ac:	10000000 	.word	0x10000000
 81016b0:	10000008 	.word	0x10000008

081016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81016b4:	b480      	push	{r7}
 81016b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81016b8:	4b06      	ldr	r3, [pc, #24]	; (81016d4 <HAL_IncTick+0x20>)
 81016ba:	781b      	ldrb	r3, [r3, #0]
 81016bc:	461a      	mov	r2, r3
 81016be:	4b06      	ldr	r3, [pc, #24]	; (81016d8 <HAL_IncTick+0x24>)
 81016c0:	681b      	ldr	r3, [r3, #0]
 81016c2:	4413      	add	r3, r2
 81016c4:	4a04      	ldr	r2, [pc, #16]	; (81016d8 <HAL_IncTick+0x24>)
 81016c6:	6013      	str	r3, [r2, #0]
}
 81016c8:	bf00      	nop
 81016ca:	46bd      	mov	sp, r7
 81016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d0:	4770      	bx	lr
 81016d2:	bf00      	nop
 81016d4:	1000000c 	.word	0x1000000c
 81016d8:	1000034c 	.word	0x1000034c

081016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81016dc:	b480      	push	{r7}
 81016de:	af00      	add	r7, sp, #0
  return uwTick;
 81016e0:	4b03      	ldr	r3, [pc, #12]	; (81016f0 <HAL_GetTick+0x14>)
 81016e2:	681b      	ldr	r3, [r3, #0]
}
 81016e4:	4618      	mov	r0, r3
 81016e6:	46bd      	mov	sp, r7
 81016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ec:	4770      	bx	lr
 81016ee:	bf00      	nop
 81016f0:	1000034c 	.word	0x1000034c

081016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	b084      	sub	sp, #16
 81016f8:	af00      	add	r7, sp, #0
 81016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81016fc:	f7ff ffee 	bl	81016dc <HAL_GetTick>
 8101700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101706:	68fb      	ldr	r3, [r7, #12]
 8101708:	f1b3 3fff 	cmp.w	r3, #4294967295
 810170c:	d005      	beq.n	810171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810170e:	4b0a      	ldr	r3, [pc, #40]	; (8101738 <HAL_Delay+0x44>)
 8101710:	781b      	ldrb	r3, [r3, #0]
 8101712:	461a      	mov	r2, r3
 8101714:	68fb      	ldr	r3, [r7, #12]
 8101716:	4413      	add	r3, r2
 8101718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810171a:	bf00      	nop
 810171c:	f7ff ffde 	bl	81016dc <HAL_GetTick>
 8101720:	4602      	mov	r2, r0
 8101722:	68bb      	ldr	r3, [r7, #8]
 8101724:	1ad3      	subs	r3, r2, r3
 8101726:	68fa      	ldr	r2, [r7, #12]
 8101728:	429a      	cmp	r2, r3
 810172a:	d8f7      	bhi.n	810171c <HAL_Delay+0x28>
  {
  }
}
 810172c:	bf00      	nop
 810172e:	bf00      	nop
 8101730:	3710      	adds	r7, #16
 8101732:	46bd      	mov	sp, r7
 8101734:	bd80      	pop	{r7, pc}
 8101736:	bf00      	nop
 8101738:	1000000c 	.word	0x1000000c

0810173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810173c:	b480      	push	{r7}
 810173e:	b085      	sub	sp, #20
 8101740:	af00      	add	r7, sp, #0
 8101742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	f003 0307 	and.w	r3, r3, #7
 810174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810174c:	4b0c      	ldr	r3, [pc, #48]	; (8101780 <__NVIC_SetPriorityGrouping+0x44>)
 810174e:	68db      	ldr	r3, [r3, #12]
 8101750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101752:	68ba      	ldr	r2, [r7, #8]
 8101754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101758:	4013      	ands	r3, r2
 810175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810175c:	68fb      	ldr	r3, [r7, #12]
 810175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101760:	68bb      	ldr	r3, [r7, #8]
 8101762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810176e:	4a04      	ldr	r2, [pc, #16]	; (8101780 <__NVIC_SetPriorityGrouping+0x44>)
 8101770:	68bb      	ldr	r3, [r7, #8]
 8101772:	60d3      	str	r3, [r2, #12]
}
 8101774:	bf00      	nop
 8101776:	3714      	adds	r7, #20
 8101778:	46bd      	mov	sp, r7
 810177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810177e:	4770      	bx	lr
 8101780:	e000ed00 	.word	0xe000ed00

08101784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101784:	b480      	push	{r7}
 8101786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101788:	4b04      	ldr	r3, [pc, #16]	; (810179c <__NVIC_GetPriorityGrouping+0x18>)
 810178a:	68db      	ldr	r3, [r3, #12]
 810178c:	0a1b      	lsrs	r3, r3, #8
 810178e:	f003 0307 	and.w	r3, r3, #7
}
 8101792:	4618      	mov	r0, r3
 8101794:	46bd      	mov	sp, r7
 8101796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179a:	4770      	bx	lr
 810179c:	e000ed00 	.word	0xe000ed00

081017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81017a0:	b480      	push	{r7}
 81017a2:	b083      	sub	sp, #12
 81017a4:	af00      	add	r7, sp, #0
 81017a6:	4603      	mov	r3, r0
 81017a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	db0b      	blt.n	81017ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81017b2:	88fb      	ldrh	r3, [r7, #6]
 81017b4:	f003 021f 	and.w	r2, r3, #31
 81017b8:	4907      	ldr	r1, [pc, #28]	; (81017d8 <__NVIC_EnableIRQ+0x38>)
 81017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017be:	095b      	lsrs	r3, r3, #5
 81017c0:	2001      	movs	r0, #1
 81017c2:	fa00 f202 	lsl.w	r2, r0, r2
 81017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81017ca:	bf00      	nop
 81017cc:	370c      	adds	r7, #12
 81017ce:	46bd      	mov	sp, r7
 81017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017d4:	4770      	bx	lr
 81017d6:	bf00      	nop
 81017d8:	e000e100 	.word	0xe000e100

081017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81017dc:	b480      	push	{r7}
 81017de:	b083      	sub	sp, #12
 81017e0:	af00      	add	r7, sp, #0
 81017e2:	4603      	mov	r3, r0
 81017e4:	6039      	str	r1, [r7, #0]
 81017e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81017e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	db0a      	blt.n	8101806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017f0:	683b      	ldr	r3, [r7, #0]
 81017f2:	b2da      	uxtb	r2, r3
 81017f4:	490c      	ldr	r1, [pc, #48]	; (8101828 <__NVIC_SetPriority+0x4c>)
 81017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017fa:	0112      	lsls	r2, r2, #4
 81017fc:	b2d2      	uxtb	r2, r2
 81017fe:	440b      	add	r3, r1
 8101800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101804:	e00a      	b.n	810181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101806:	683b      	ldr	r3, [r7, #0]
 8101808:	b2da      	uxtb	r2, r3
 810180a:	4908      	ldr	r1, [pc, #32]	; (810182c <__NVIC_SetPriority+0x50>)
 810180c:	88fb      	ldrh	r3, [r7, #6]
 810180e:	f003 030f 	and.w	r3, r3, #15
 8101812:	3b04      	subs	r3, #4
 8101814:	0112      	lsls	r2, r2, #4
 8101816:	b2d2      	uxtb	r2, r2
 8101818:	440b      	add	r3, r1
 810181a:	761a      	strb	r2, [r3, #24]
}
 810181c:	bf00      	nop
 810181e:	370c      	adds	r7, #12
 8101820:	46bd      	mov	sp, r7
 8101822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101826:	4770      	bx	lr
 8101828:	e000e100 	.word	0xe000e100
 810182c:	e000ed00 	.word	0xe000ed00

08101830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101830:	b480      	push	{r7}
 8101832:	b089      	sub	sp, #36	; 0x24
 8101834:	af00      	add	r7, sp, #0
 8101836:	60f8      	str	r0, [r7, #12]
 8101838:	60b9      	str	r1, [r7, #8]
 810183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810183c:	68fb      	ldr	r3, [r7, #12]
 810183e:	f003 0307 	and.w	r3, r3, #7
 8101842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101844:	69fb      	ldr	r3, [r7, #28]
 8101846:	f1c3 0307 	rsb	r3, r3, #7
 810184a:	2b04      	cmp	r3, #4
 810184c:	bf28      	it	cs
 810184e:	2304      	movcs	r3, #4
 8101850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101852:	69fb      	ldr	r3, [r7, #28]
 8101854:	3304      	adds	r3, #4
 8101856:	2b06      	cmp	r3, #6
 8101858:	d902      	bls.n	8101860 <NVIC_EncodePriority+0x30>
 810185a:	69fb      	ldr	r3, [r7, #28]
 810185c:	3b03      	subs	r3, #3
 810185e:	e000      	b.n	8101862 <NVIC_EncodePriority+0x32>
 8101860:	2300      	movs	r3, #0
 8101862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101864:	f04f 32ff 	mov.w	r2, #4294967295
 8101868:	69bb      	ldr	r3, [r7, #24]
 810186a:	fa02 f303 	lsl.w	r3, r2, r3
 810186e:	43da      	mvns	r2, r3
 8101870:	68bb      	ldr	r3, [r7, #8]
 8101872:	401a      	ands	r2, r3
 8101874:	697b      	ldr	r3, [r7, #20]
 8101876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101878:	f04f 31ff 	mov.w	r1, #4294967295
 810187c:	697b      	ldr	r3, [r7, #20]
 810187e:	fa01 f303 	lsl.w	r3, r1, r3
 8101882:	43d9      	mvns	r1, r3
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101888:	4313      	orrs	r3, r2
         );
}
 810188a:	4618      	mov	r0, r3
 810188c:	3724      	adds	r7, #36	; 0x24
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
	...

08101898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101898:	b580      	push	{r7, lr}
 810189a:	b082      	sub	sp, #8
 810189c:	af00      	add	r7, sp, #0
 810189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	3b01      	subs	r3, #1
 81018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81018a8:	d301      	bcc.n	81018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81018aa:	2301      	movs	r3, #1
 81018ac:	e00f      	b.n	81018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81018ae:	4a0a      	ldr	r2, [pc, #40]	; (81018d8 <SysTick_Config+0x40>)
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	3b01      	subs	r3, #1
 81018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81018b6:	210f      	movs	r1, #15
 81018b8:	f04f 30ff 	mov.w	r0, #4294967295
 81018bc:	f7ff ff8e 	bl	81017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81018c0:	4b05      	ldr	r3, [pc, #20]	; (81018d8 <SysTick_Config+0x40>)
 81018c2:	2200      	movs	r2, #0
 81018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81018c6:	4b04      	ldr	r3, [pc, #16]	; (81018d8 <SysTick_Config+0x40>)
 81018c8:	2207      	movs	r2, #7
 81018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81018cc:	2300      	movs	r3, #0
}
 81018ce:	4618      	mov	r0, r3
 81018d0:	3708      	adds	r7, #8
 81018d2:	46bd      	mov	sp, r7
 81018d4:	bd80      	pop	{r7, pc}
 81018d6:	bf00      	nop
 81018d8:	e000e010 	.word	0xe000e010

081018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81018dc:	b580      	push	{r7, lr}
 81018de:	b082      	sub	sp, #8
 81018e0:	af00      	add	r7, sp, #0
 81018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81018e4:	6878      	ldr	r0, [r7, #4]
 81018e6:	f7ff ff29 	bl	810173c <__NVIC_SetPriorityGrouping>
}
 81018ea:	bf00      	nop
 81018ec:	3708      	adds	r7, #8
 81018ee:	46bd      	mov	sp, r7
 81018f0:	bd80      	pop	{r7, pc}

081018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81018f2:	b580      	push	{r7, lr}
 81018f4:	b086      	sub	sp, #24
 81018f6:	af00      	add	r7, sp, #0
 81018f8:	4603      	mov	r3, r0
 81018fa:	60b9      	str	r1, [r7, #8]
 81018fc:	607a      	str	r2, [r7, #4]
 81018fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101900:	f7ff ff40 	bl	8101784 <__NVIC_GetPriorityGrouping>
 8101904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101906:	687a      	ldr	r2, [r7, #4]
 8101908:	68b9      	ldr	r1, [r7, #8]
 810190a:	6978      	ldr	r0, [r7, #20]
 810190c:	f7ff ff90 	bl	8101830 <NVIC_EncodePriority>
 8101910:	4602      	mov	r2, r0
 8101912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101916:	4611      	mov	r1, r2
 8101918:	4618      	mov	r0, r3
 810191a:	f7ff ff5f 	bl	81017dc <__NVIC_SetPriority>
}
 810191e:	bf00      	nop
 8101920:	3718      	adds	r7, #24
 8101922:	46bd      	mov	sp, r7
 8101924:	bd80      	pop	{r7, pc}

08101926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101926:	b580      	push	{r7, lr}
 8101928:	b082      	sub	sp, #8
 810192a:	af00      	add	r7, sp, #0
 810192c:	4603      	mov	r3, r0
 810192e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101934:	4618      	mov	r0, r3
 8101936:	f7ff ff33 	bl	81017a0 <__NVIC_EnableIRQ>
}
 810193a:	bf00      	nop
 810193c:	3708      	adds	r7, #8
 810193e:	46bd      	mov	sp, r7
 8101940:	bd80      	pop	{r7, pc}

08101942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101942:	b580      	push	{r7, lr}
 8101944:	b082      	sub	sp, #8
 8101946:	af00      	add	r7, sp, #0
 8101948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810194a:	6878      	ldr	r0, [r7, #4]
 810194c:	f7ff ffa4 	bl	8101898 <SysTick_Config>
 8101950:	4603      	mov	r3, r0
}
 8101952:	4618      	mov	r0, r3
 8101954:	3708      	adds	r7, #8
 8101956:	46bd      	mov	sp, r7
 8101958:	bd80      	pop	{r7, pc}
	...

0810195c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810195c:	b480      	push	{r7}
 810195e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101960:	4b07      	ldr	r3, [pc, #28]	; (8101980 <HAL_GetCurrentCPUID+0x24>)
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	091b      	lsrs	r3, r3, #4
 8101966:	f003 030f 	and.w	r3, r3, #15
 810196a:	2b07      	cmp	r3, #7
 810196c:	d101      	bne.n	8101972 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810196e:	2303      	movs	r3, #3
 8101970:	e000      	b.n	8101974 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101972:	2301      	movs	r3, #1
  }
}
 8101974:	4618      	mov	r0, r3
 8101976:	46bd      	mov	sp, r7
 8101978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810197c:	4770      	bx	lr
 810197e:	bf00      	nop
 8101980:	e000ed00 	.word	0xe000ed00

08101984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101984:	b480      	push	{r7}
 8101986:	b089      	sub	sp, #36	; 0x24
 8101988:	af00      	add	r7, sp, #0
 810198a:	6078      	str	r0, [r7, #4]
 810198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810198e:	2300      	movs	r3, #0
 8101990:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101992:	4b89      	ldr	r3, [pc, #548]	; (8101bb8 <HAL_GPIO_Init+0x234>)
 8101994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101996:	e194      	b.n	8101cc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101998:	683b      	ldr	r3, [r7, #0]
 810199a:	681a      	ldr	r2, [r3, #0]
 810199c:	2101      	movs	r1, #1
 810199e:	69fb      	ldr	r3, [r7, #28]
 81019a0:	fa01 f303 	lsl.w	r3, r1, r3
 81019a4:	4013      	ands	r3, r2
 81019a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81019a8:	693b      	ldr	r3, [r7, #16]
 81019aa:	2b00      	cmp	r3, #0
 81019ac:	f000 8186 	beq.w	8101cbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81019b0:	683b      	ldr	r3, [r7, #0]
 81019b2:	685b      	ldr	r3, [r3, #4]
 81019b4:	2b01      	cmp	r3, #1
 81019b6:	d00b      	beq.n	81019d0 <HAL_GPIO_Init+0x4c>
 81019b8:	683b      	ldr	r3, [r7, #0]
 81019ba:	685b      	ldr	r3, [r3, #4]
 81019bc:	2b02      	cmp	r3, #2
 81019be:	d007      	beq.n	81019d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81019c0:	683b      	ldr	r3, [r7, #0]
 81019c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81019c4:	2b11      	cmp	r3, #17
 81019c6:	d003      	beq.n	81019d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81019c8:	683b      	ldr	r3, [r7, #0]
 81019ca:	685b      	ldr	r3, [r3, #4]
 81019cc:	2b12      	cmp	r3, #18
 81019ce:	d130      	bne.n	8101a32 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	689b      	ldr	r3, [r3, #8]
 81019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81019d6:	69fb      	ldr	r3, [r7, #28]
 81019d8:	005b      	lsls	r3, r3, #1
 81019da:	2203      	movs	r2, #3
 81019dc:	fa02 f303 	lsl.w	r3, r2, r3
 81019e0:	43db      	mvns	r3, r3
 81019e2:	69ba      	ldr	r2, [r7, #24]
 81019e4:	4013      	ands	r3, r2
 81019e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81019e8:	683b      	ldr	r3, [r7, #0]
 81019ea:	68da      	ldr	r2, [r3, #12]
 81019ec:	69fb      	ldr	r3, [r7, #28]
 81019ee:	005b      	lsls	r3, r3, #1
 81019f0:	fa02 f303 	lsl.w	r3, r2, r3
 81019f4:	69ba      	ldr	r2, [r7, #24]
 81019f6:	4313      	orrs	r3, r2
 81019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81019fa:	687b      	ldr	r3, [r7, #4]
 81019fc:	69ba      	ldr	r2, [r7, #24]
 81019fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	685b      	ldr	r3, [r3, #4]
 8101a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101a06:	2201      	movs	r2, #1
 8101a08:	69fb      	ldr	r3, [r7, #28]
 8101a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a0e:	43db      	mvns	r3, r3
 8101a10:	69ba      	ldr	r2, [r7, #24]
 8101a12:	4013      	ands	r3, r2
 8101a14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101a16:	683b      	ldr	r3, [r7, #0]
 8101a18:	685b      	ldr	r3, [r3, #4]
 8101a1a:	091b      	lsrs	r3, r3, #4
 8101a1c:	f003 0201 	and.w	r2, r3, #1
 8101a20:	69fb      	ldr	r3, [r7, #28]
 8101a22:	fa02 f303 	lsl.w	r3, r2, r3
 8101a26:	69ba      	ldr	r2, [r7, #24]
 8101a28:	4313      	orrs	r3, r2
 8101a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	69ba      	ldr	r2, [r7, #24]
 8101a30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	68db      	ldr	r3, [r3, #12]
 8101a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101a38:	69fb      	ldr	r3, [r7, #28]
 8101a3a:	005b      	lsls	r3, r3, #1
 8101a3c:	2203      	movs	r2, #3
 8101a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8101a42:	43db      	mvns	r3, r3
 8101a44:	69ba      	ldr	r2, [r7, #24]
 8101a46:	4013      	ands	r3, r2
 8101a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101a4a:	683b      	ldr	r3, [r7, #0]
 8101a4c:	689a      	ldr	r2, [r3, #8]
 8101a4e:	69fb      	ldr	r3, [r7, #28]
 8101a50:	005b      	lsls	r3, r3, #1
 8101a52:	fa02 f303 	lsl.w	r3, r2, r3
 8101a56:	69ba      	ldr	r2, [r7, #24]
 8101a58:	4313      	orrs	r3, r2
 8101a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	69ba      	ldr	r2, [r7, #24]
 8101a60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101a62:	683b      	ldr	r3, [r7, #0]
 8101a64:	685b      	ldr	r3, [r3, #4]
 8101a66:	2b02      	cmp	r3, #2
 8101a68:	d003      	beq.n	8101a72 <HAL_GPIO_Init+0xee>
 8101a6a:	683b      	ldr	r3, [r7, #0]
 8101a6c:	685b      	ldr	r3, [r3, #4]
 8101a6e:	2b12      	cmp	r3, #18
 8101a70:	d123      	bne.n	8101aba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101a72:	69fb      	ldr	r3, [r7, #28]
 8101a74:	08da      	lsrs	r2, r3, #3
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	3208      	adds	r2, #8
 8101a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101a80:	69fb      	ldr	r3, [r7, #28]
 8101a82:	f003 0307 	and.w	r3, r3, #7
 8101a86:	009b      	lsls	r3, r3, #2
 8101a88:	220f      	movs	r2, #15
 8101a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a8e:	43db      	mvns	r3, r3
 8101a90:	69ba      	ldr	r2, [r7, #24]
 8101a92:	4013      	ands	r3, r2
 8101a94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101a96:	683b      	ldr	r3, [r7, #0]
 8101a98:	691a      	ldr	r2, [r3, #16]
 8101a9a:	69fb      	ldr	r3, [r7, #28]
 8101a9c:	f003 0307 	and.w	r3, r3, #7
 8101aa0:	009b      	lsls	r3, r3, #2
 8101aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8101aa6:	69ba      	ldr	r2, [r7, #24]
 8101aa8:	4313      	orrs	r3, r2
 8101aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101aac:	69fb      	ldr	r3, [r7, #28]
 8101aae:	08da      	lsrs	r2, r3, #3
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	3208      	adds	r2, #8
 8101ab4:	69b9      	ldr	r1, [r7, #24]
 8101ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	681b      	ldr	r3, [r3, #0]
 8101abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101ac0:	69fb      	ldr	r3, [r7, #28]
 8101ac2:	005b      	lsls	r3, r3, #1
 8101ac4:	2203      	movs	r2, #3
 8101ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8101aca:	43db      	mvns	r3, r3
 8101acc:	69ba      	ldr	r2, [r7, #24]
 8101ace:	4013      	ands	r3, r2
 8101ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101ad2:	683b      	ldr	r3, [r7, #0]
 8101ad4:	685b      	ldr	r3, [r3, #4]
 8101ad6:	f003 0203 	and.w	r2, r3, #3
 8101ada:	69fb      	ldr	r3, [r7, #28]
 8101adc:	005b      	lsls	r3, r3, #1
 8101ade:	fa02 f303 	lsl.w	r3, r2, r3
 8101ae2:	69ba      	ldr	r2, [r7, #24]
 8101ae4:	4313      	orrs	r3, r2
 8101ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	69ba      	ldr	r2, [r7, #24]
 8101aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101aee:	683b      	ldr	r3, [r7, #0]
 8101af0:	685b      	ldr	r3, [r3, #4]
 8101af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101af6:	2b00      	cmp	r3, #0
 8101af8:	f000 80e0 	beq.w	8101cbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101afc:	4b2f      	ldr	r3, [pc, #188]	; (8101bbc <HAL_GPIO_Init+0x238>)
 8101afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b02:	4a2e      	ldr	r2, [pc, #184]	; (8101bbc <HAL_GPIO_Init+0x238>)
 8101b04:	f043 0302 	orr.w	r3, r3, #2
 8101b08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101b0c:	4b2b      	ldr	r3, [pc, #172]	; (8101bbc <HAL_GPIO_Init+0x238>)
 8101b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b12:	f003 0302 	and.w	r3, r3, #2
 8101b16:	60fb      	str	r3, [r7, #12]
 8101b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101b1a:	4a29      	ldr	r2, [pc, #164]	; (8101bc0 <HAL_GPIO_Init+0x23c>)
 8101b1c:	69fb      	ldr	r3, [r7, #28]
 8101b1e:	089b      	lsrs	r3, r3, #2
 8101b20:	3302      	adds	r3, #2
 8101b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101b28:	69fb      	ldr	r3, [r7, #28]
 8101b2a:	f003 0303 	and.w	r3, r3, #3
 8101b2e:	009b      	lsls	r3, r3, #2
 8101b30:	220f      	movs	r2, #15
 8101b32:	fa02 f303 	lsl.w	r3, r2, r3
 8101b36:	43db      	mvns	r3, r3
 8101b38:	69ba      	ldr	r2, [r7, #24]
 8101b3a:	4013      	ands	r3, r2
 8101b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	4a20      	ldr	r2, [pc, #128]	; (8101bc4 <HAL_GPIO_Init+0x240>)
 8101b42:	4293      	cmp	r3, r2
 8101b44:	d052      	beq.n	8101bec <HAL_GPIO_Init+0x268>
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	4a1f      	ldr	r2, [pc, #124]	; (8101bc8 <HAL_GPIO_Init+0x244>)
 8101b4a:	4293      	cmp	r3, r2
 8101b4c:	d031      	beq.n	8101bb2 <HAL_GPIO_Init+0x22e>
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	4a1e      	ldr	r2, [pc, #120]	; (8101bcc <HAL_GPIO_Init+0x248>)
 8101b52:	4293      	cmp	r3, r2
 8101b54:	d02b      	beq.n	8101bae <HAL_GPIO_Init+0x22a>
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	4a1d      	ldr	r2, [pc, #116]	; (8101bd0 <HAL_GPIO_Init+0x24c>)
 8101b5a:	4293      	cmp	r3, r2
 8101b5c:	d025      	beq.n	8101baa <HAL_GPIO_Init+0x226>
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	4a1c      	ldr	r2, [pc, #112]	; (8101bd4 <HAL_GPIO_Init+0x250>)
 8101b62:	4293      	cmp	r3, r2
 8101b64:	d01f      	beq.n	8101ba6 <HAL_GPIO_Init+0x222>
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	4a1b      	ldr	r2, [pc, #108]	; (8101bd8 <HAL_GPIO_Init+0x254>)
 8101b6a:	4293      	cmp	r3, r2
 8101b6c:	d019      	beq.n	8101ba2 <HAL_GPIO_Init+0x21e>
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	4a1a      	ldr	r2, [pc, #104]	; (8101bdc <HAL_GPIO_Init+0x258>)
 8101b72:	4293      	cmp	r3, r2
 8101b74:	d013      	beq.n	8101b9e <HAL_GPIO_Init+0x21a>
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	4a19      	ldr	r2, [pc, #100]	; (8101be0 <HAL_GPIO_Init+0x25c>)
 8101b7a:	4293      	cmp	r3, r2
 8101b7c:	d00d      	beq.n	8101b9a <HAL_GPIO_Init+0x216>
 8101b7e:	687b      	ldr	r3, [r7, #4]
 8101b80:	4a18      	ldr	r2, [pc, #96]	; (8101be4 <HAL_GPIO_Init+0x260>)
 8101b82:	4293      	cmp	r3, r2
 8101b84:	d007      	beq.n	8101b96 <HAL_GPIO_Init+0x212>
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	4a17      	ldr	r2, [pc, #92]	; (8101be8 <HAL_GPIO_Init+0x264>)
 8101b8a:	4293      	cmp	r3, r2
 8101b8c:	d101      	bne.n	8101b92 <HAL_GPIO_Init+0x20e>
 8101b8e:	2309      	movs	r3, #9
 8101b90:	e02d      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101b92:	230a      	movs	r3, #10
 8101b94:	e02b      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101b96:	2308      	movs	r3, #8
 8101b98:	e029      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101b9a:	2307      	movs	r3, #7
 8101b9c:	e027      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101b9e:	2306      	movs	r3, #6
 8101ba0:	e025      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101ba2:	2305      	movs	r3, #5
 8101ba4:	e023      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101ba6:	2304      	movs	r3, #4
 8101ba8:	e021      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101baa:	2303      	movs	r3, #3
 8101bac:	e01f      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101bae:	2302      	movs	r3, #2
 8101bb0:	e01d      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101bb2:	2301      	movs	r3, #1
 8101bb4:	e01b      	b.n	8101bee <HAL_GPIO_Init+0x26a>
 8101bb6:	bf00      	nop
 8101bb8:	580000c0 	.word	0x580000c0
 8101bbc:	58024400 	.word	0x58024400
 8101bc0:	58000400 	.word	0x58000400
 8101bc4:	58020000 	.word	0x58020000
 8101bc8:	58020400 	.word	0x58020400
 8101bcc:	58020800 	.word	0x58020800
 8101bd0:	58020c00 	.word	0x58020c00
 8101bd4:	58021000 	.word	0x58021000
 8101bd8:	58021400 	.word	0x58021400
 8101bdc:	58021800 	.word	0x58021800
 8101be0:	58021c00 	.word	0x58021c00
 8101be4:	58022000 	.word	0x58022000
 8101be8:	58022400 	.word	0x58022400
 8101bec:	2300      	movs	r3, #0
 8101bee:	69fa      	ldr	r2, [r7, #28]
 8101bf0:	f002 0203 	and.w	r2, r2, #3
 8101bf4:	0092      	lsls	r2, r2, #2
 8101bf6:	4093      	lsls	r3, r2
 8101bf8:	69ba      	ldr	r2, [r7, #24]
 8101bfa:	4313      	orrs	r3, r2
 8101bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101bfe:	4938      	ldr	r1, [pc, #224]	; (8101ce0 <HAL_GPIO_Init+0x35c>)
 8101c00:	69fb      	ldr	r3, [r7, #28]
 8101c02:	089b      	lsrs	r3, r3, #2
 8101c04:	3302      	adds	r3, #2
 8101c06:	69ba      	ldr	r2, [r7, #24]
 8101c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101c0c:	697b      	ldr	r3, [r7, #20]
 8101c0e:	681b      	ldr	r3, [r3, #0]
 8101c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c12:	693b      	ldr	r3, [r7, #16]
 8101c14:	43db      	mvns	r3, r3
 8101c16:	69ba      	ldr	r2, [r7, #24]
 8101c18:	4013      	ands	r3, r2
 8101c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101c1c:	683b      	ldr	r3, [r7, #0]
 8101c1e:	685b      	ldr	r3, [r3, #4]
 8101c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101c24:	2b00      	cmp	r3, #0
 8101c26:	d003      	beq.n	8101c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101c28:	69ba      	ldr	r2, [r7, #24]
 8101c2a:	693b      	ldr	r3, [r7, #16]
 8101c2c:	4313      	orrs	r3, r2
 8101c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101c30:	697b      	ldr	r3, [r7, #20]
 8101c32:	69ba      	ldr	r2, [r7, #24]
 8101c34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101c36:	697b      	ldr	r3, [r7, #20]
 8101c38:	685b      	ldr	r3, [r3, #4]
 8101c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c3c:	693b      	ldr	r3, [r7, #16]
 8101c3e:	43db      	mvns	r3, r3
 8101c40:	69ba      	ldr	r2, [r7, #24]
 8101c42:	4013      	ands	r3, r2
 8101c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101c46:	683b      	ldr	r3, [r7, #0]
 8101c48:	685b      	ldr	r3, [r3, #4]
 8101c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101c4e:	2b00      	cmp	r3, #0
 8101c50:	d003      	beq.n	8101c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101c52:	69ba      	ldr	r2, [r7, #24]
 8101c54:	693b      	ldr	r3, [r7, #16]
 8101c56:	4313      	orrs	r3, r2
 8101c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101c5a:	697b      	ldr	r3, [r7, #20]
 8101c5c:	69ba      	ldr	r2, [r7, #24]
 8101c5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c68:	693b      	ldr	r3, [r7, #16]
 8101c6a:	43db      	mvns	r3, r3
 8101c6c:	69ba      	ldr	r2, [r7, #24]
 8101c6e:	4013      	ands	r3, r2
 8101c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101c72:	683b      	ldr	r3, [r7, #0]
 8101c74:	685b      	ldr	r3, [r3, #4]
 8101c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101c7a:	2b00      	cmp	r3, #0
 8101c7c:	d003      	beq.n	8101c86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101c7e:	69ba      	ldr	r2, [r7, #24]
 8101c80:	693b      	ldr	r3, [r7, #16]
 8101c82:	4313      	orrs	r3, r2
 8101c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101c8a:	69bb      	ldr	r3, [r7, #24]
 8101c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c92:	685b      	ldr	r3, [r3, #4]
 8101c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c96:	693b      	ldr	r3, [r7, #16]
 8101c98:	43db      	mvns	r3, r3
 8101c9a:	69ba      	ldr	r2, [r7, #24]
 8101c9c:	4013      	ands	r3, r2
 8101c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101ca0:	683b      	ldr	r3, [r7, #0]
 8101ca2:	685b      	ldr	r3, [r3, #4]
 8101ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101ca8:	2b00      	cmp	r3, #0
 8101caa:	d003      	beq.n	8101cb4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101cac:	69ba      	ldr	r2, [r7, #24]
 8101cae:	693b      	ldr	r3, [r7, #16]
 8101cb0:	4313      	orrs	r3, r2
 8101cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101cb8:	69bb      	ldr	r3, [r7, #24]
 8101cba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101cbc:	69fb      	ldr	r3, [r7, #28]
 8101cbe:	3301      	adds	r3, #1
 8101cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101cc2:	683b      	ldr	r3, [r7, #0]
 8101cc4:	681a      	ldr	r2, [r3, #0]
 8101cc6:	69fb      	ldr	r3, [r7, #28]
 8101cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8101ccc:	2b00      	cmp	r3, #0
 8101cce:	f47f ae63 	bne.w	8101998 <HAL_GPIO_Init+0x14>
  }
}
 8101cd2:	bf00      	nop
 8101cd4:	bf00      	nop
 8101cd6:	3724      	adds	r7, #36	; 0x24
 8101cd8:	46bd      	mov	sp, r7
 8101cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cde:	4770      	bx	lr
 8101ce0:	58000400 	.word	0x58000400

08101ce4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101ce4:	b480      	push	{r7}
 8101ce6:	b083      	sub	sp, #12
 8101ce8:	af00      	add	r7, sp, #0
 8101cea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101cec:	4b05      	ldr	r3, [pc, #20]	; (8101d04 <HAL_HSEM_ActivateNotification+0x20>)
 8101cee:	681a      	ldr	r2, [r3, #0]
 8101cf0:	4904      	ldr	r1, [pc, #16]	; (8101d04 <HAL_HSEM_ActivateNotification+0x20>)
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	4313      	orrs	r3, r2
 8101cf6:	600b      	str	r3, [r1, #0]
#endif
}
 8101cf8:	bf00      	nop
 8101cfa:	370c      	adds	r7, #12
 8101cfc:	46bd      	mov	sp, r7
 8101cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d02:	4770      	bx	lr
 8101d04:	58026510 	.word	0x58026510

08101d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101d08:	b580      	push	{r7, lr}
 8101d0a:	b082      	sub	sp, #8
 8101d0c:	af00      	add	r7, sp, #0
 8101d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	2b00      	cmp	r3, #0
 8101d14:	d101      	bne.n	8101d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101d16:	2301      	movs	r3, #1
 8101d18:	e081      	b.n	8101e1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101d20:	b2db      	uxtb	r3, r3
 8101d22:	2b00      	cmp	r3, #0
 8101d24:	d106      	bne.n	8101d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	2200      	movs	r2, #0
 8101d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101d2e:	6878      	ldr	r0, [r7, #4]
 8101d30:	f7ff f8fc 	bl	8100f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	2224      	movs	r2, #36	; 0x24
 8101d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	681b      	ldr	r3, [r3, #0]
 8101d40:	681a      	ldr	r2, [r3, #0]
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	f022 0201 	bic.w	r2, r2, #1
 8101d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	685a      	ldr	r2, [r3, #4]
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101d58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	681b      	ldr	r3, [r3, #0]
 8101d5e:	689a      	ldr	r2, [r3, #8]
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101d68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	68db      	ldr	r3, [r3, #12]
 8101d6e:	2b01      	cmp	r3, #1
 8101d70:	d107      	bne.n	8101d82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	689a      	ldr	r2, [r3, #8]
 8101d76:	687b      	ldr	r3, [r7, #4]
 8101d78:	681b      	ldr	r3, [r3, #0]
 8101d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101d7e:	609a      	str	r2, [r3, #8]
 8101d80:	e006      	b.n	8101d90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	689a      	ldr	r2, [r3, #8]
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8101d8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	68db      	ldr	r3, [r3, #12]
 8101d94:	2b02      	cmp	r3, #2
 8101d96:	d104      	bne.n	8101da2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	681b      	ldr	r3, [r3, #0]
 8101da6:	685b      	ldr	r3, [r3, #4]
 8101da8:	687a      	ldr	r2, [r7, #4]
 8101daa:	6812      	ldr	r2, [r2, #0]
 8101dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	68da      	ldr	r2, [r3, #12]
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	691a      	ldr	r2, [r3, #16]
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	695b      	ldr	r3, [r3, #20]
 8101dce:	ea42 0103 	orr.w	r1, r2, r3
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	699b      	ldr	r3, [r3, #24]
 8101dd6:	021a      	lsls	r2, r3, #8
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	430a      	orrs	r2, r1
 8101dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	69d9      	ldr	r1, [r3, #28]
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	6a1a      	ldr	r2, [r3, #32]
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	430a      	orrs	r2, r1
 8101dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	681b      	ldr	r3, [r3, #0]
 8101df4:	681a      	ldr	r2, [r3, #0]
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	681b      	ldr	r3, [r3, #0]
 8101dfa:	f042 0201 	orr.w	r2, r2, #1
 8101dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	2200      	movs	r2, #0
 8101e04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	2220      	movs	r2, #32
 8101e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	2200      	movs	r2, #0
 8101e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	2200      	movs	r2, #0
 8101e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101e1c:	2300      	movs	r3, #0
}
 8101e1e:	4618      	mov	r0, r3
 8101e20:	3708      	adds	r7, #8
 8101e22:	46bd      	mov	sp, r7
 8101e24:	bd80      	pop	{r7, pc}
	...

08101e28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101e28:	b580      	push	{r7, lr}
 8101e2a:	b088      	sub	sp, #32
 8101e2c:	af02      	add	r7, sp, #8
 8101e2e:	60f8      	str	r0, [r7, #12]
 8101e30:	4608      	mov	r0, r1
 8101e32:	4611      	mov	r1, r2
 8101e34:	461a      	mov	r2, r3
 8101e36:	4603      	mov	r3, r0
 8101e38:	817b      	strh	r3, [r7, #10]
 8101e3a:	460b      	mov	r3, r1
 8101e3c:	813b      	strh	r3, [r7, #8]
 8101e3e:	4613      	mov	r3, r2
 8101e40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101e42:	68fb      	ldr	r3, [r7, #12]
 8101e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101e48:	b2db      	uxtb	r3, r3
 8101e4a:	2b20      	cmp	r3, #32
 8101e4c:	f040 80f9 	bne.w	8102042 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8101e50:	6a3b      	ldr	r3, [r7, #32]
 8101e52:	2b00      	cmp	r3, #0
 8101e54:	d002      	beq.n	8101e5c <HAL_I2C_Mem_Write+0x34>
 8101e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101e58:	2b00      	cmp	r3, #0
 8101e5a:	d105      	bne.n	8101e68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8101e5c:	68fb      	ldr	r3, [r7, #12]
 8101e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101e62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8101e64:	2301      	movs	r3, #1
 8101e66:	e0ed      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101e68:	68fb      	ldr	r3, [r7, #12]
 8101e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101e6e:	2b01      	cmp	r3, #1
 8101e70:	d101      	bne.n	8101e76 <HAL_I2C_Mem_Write+0x4e>
 8101e72:	2302      	movs	r3, #2
 8101e74:	e0e6      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
 8101e76:	68fb      	ldr	r3, [r7, #12]
 8101e78:	2201      	movs	r2, #1
 8101e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8101e7e:	f7ff fc2d 	bl	81016dc <HAL_GetTick>
 8101e82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8101e84:	697b      	ldr	r3, [r7, #20]
 8101e86:	9300      	str	r3, [sp, #0]
 8101e88:	2319      	movs	r3, #25
 8101e8a:	2201      	movs	r2, #1
 8101e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101e90:	68f8      	ldr	r0, [r7, #12]
 8101e92:	f000 fadd 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 8101e96:	4603      	mov	r3, r0
 8101e98:	2b00      	cmp	r3, #0
 8101e9a:	d001      	beq.n	8101ea0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8101e9c:	2301      	movs	r3, #1
 8101e9e:	e0d1      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8101ea0:	68fb      	ldr	r3, [r7, #12]
 8101ea2:	2221      	movs	r2, #33	; 0x21
 8101ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8101ea8:	68fb      	ldr	r3, [r7, #12]
 8101eaa:	2240      	movs	r2, #64	; 0x40
 8101eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101eb0:	68fb      	ldr	r3, [r7, #12]
 8101eb2:	2200      	movs	r2, #0
 8101eb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8101eb6:	68fb      	ldr	r3, [r7, #12]
 8101eb8:	6a3a      	ldr	r2, [r7, #32]
 8101eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8101ebc:	68fb      	ldr	r3, [r7, #12]
 8101ebe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8101ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8101ec2:	68fb      	ldr	r3, [r7, #12]
 8101ec4:	2200      	movs	r2, #0
 8101ec6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8101ec8:	88f8      	ldrh	r0, [r7, #6]
 8101eca:	893a      	ldrh	r2, [r7, #8]
 8101ecc:	8979      	ldrh	r1, [r7, #10]
 8101ece:	697b      	ldr	r3, [r7, #20]
 8101ed0:	9301      	str	r3, [sp, #4]
 8101ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ed4:	9300      	str	r3, [sp, #0]
 8101ed6:	4603      	mov	r3, r0
 8101ed8:	68f8      	ldr	r0, [r7, #12]
 8101eda:	f000 f9ed 	bl	81022b8 <I2C_RequestMemoryWrite>
 8101ede:	4603      	mov	r3, r0
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	d005      	beq.n	8101ef0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8101ee4:	68fb      	ldr	r3, [r7, #12]
 8101ee6:	2200      	movs	r2, #0
 8101ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8101eec:	2301      	movs	r3, #1
 8101eee:	e0a9      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101ef0:	68fb      	ldr	r3, [r7, #12]
 8101ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101ef4:	b29b      	uxth	r3, r3
 8101ef6:	2bff      	cmp	r3, #255	; 0xff
 8101ef8:	d90e      	bls.n	8101f18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	22ff      	movs	r2, #255	; 0xff
 8101efe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8101f00:	68fb      	ldr	r3, [r7, #12]
 8101f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101f04:	b2da      	uxtb	r2, r3
 8101f06:	8979      	ldrh	r1, [r7, #10]
 8101f08:	2300      	movs	r3, #0
 8101f0a:	9300      	str	r3, [sp, #0]
 8101f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101f10:	68f8      	ldr	r0, [r7, #12]
 8101f12:	f000 fbbf 	bl	8102694 <I2C_TransferConfig>
 8101f16:	e00f      	b.n	8101f38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8101f18:	68fb      	ldr	r3, [r7, #12]
 8101f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101f1c:	b29a      	uxth	r2, r3
 8101f1e:	68fb      	ldr	r3, [r7, #12]
 8101f20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8101f22:	68fb      	ldr	r3, [r7, #12]
 8101f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101f26:	b2da      	uxtb	r2, r3
 8101f28:	8979      	ldrh	r1, [r7, #10]
 8101f2a:	2300      	movs	r3, #0
 8101f2c:	9300      	str	r3, [sp, #0]
 8101f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101f32:	68f8      	ldr	r0, [r7, #12]
 8101f34:	f000 fbae 	bl	8102694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101f38:	697a      	ldr	r2, [r7, #20]
 8101f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101f3c:	68f8      	ldr	r0, [r7, #12]
 8101f3e:	f000 fac7 	bl	81024d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8101f42:	4603      	mov	r3, r0
 8101f44:	2b00      	cmp	r3, #0
 8101f46:	d001      	beq.n	8101f4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8101f48:	2301      	movs	r3, #1
 8101f4a:	e07b      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8101f4c:	68fb      	ldr	r3, [r7, #12]
 8101f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f50:	781a      	ldrb	r2, [r3, #0]
 8101f52:	68fb      	ldr	r3, [r7, #12]
 8101f54:	681b      	ldr	r3, [r3, #0]
 8101f56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8101f58:	68fb      	ldr	r3, [r7, #12]
 8101f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f5c:	1c5a      	adds	r2, r3, #1
 8101f5e:	68fb      	ldr	r3, [r7, #12]
 8101f60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8101f62:	68fb      	ldr	r3, [r7, #12]
 8101f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101f66:	b29b      	uxth	r3, r3
 8101f68:	3b01      	subs	r3, #1
 8101f6a:	b29a      	uxth	r2, r3
 8101f6c:	68fb      	ldr	r3, [r7, #12]
 8101f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8101f70:	68fb      	ldr	r3, [r7, #12]
 8101f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101f74:	3b01      	subs	r3, #1
 8101f76:	b29a      	uxth	r2, r3
 8101f78:	68fb      	ldr	r3, [r7, #12]
 8101f7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8101f7c:	68fb      	ldr	r3, [r7, #12]
 8101f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101f80:	b29b      	uxth	r3, r3
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	d034      	beq.n	8101ff0 <HAL_I2C_Mem_Write+0x1c8>
 8101f86:	68fb      	ldr	r3, [r7, #12]
 8101f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101f8a:	2b00      	cmp	r3, #0
 8101f8c:	d130      	bne.n	8101ff0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8101f8e:	697b      	ldr	r3, [r7, #20]
 8101f90:	9300      	str	r3, [sp, #0]
 8101f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101f94:	2200      	movs	r2, #0
 8101f96:	2180      	movs	r1, #128	; 0x80
 8101f98:	68f8      	ldr	r0, [r7, #12]
 8101f9a:	f000 fa59 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 8101f9e:	4603      	mov	r3, r0
 8101fa0:	2b00      	cmp	r3, #0
 8101fa2:	d001      	beq.n	8101fa8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8101fa4:	2301      	movs	r3, #1
 8101fa6:	e04d      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101fac:	b29b      	uxth	r3, r3
 8101fae:	2bff      	cmp	r3, #255	; 0xff
 8101fb0:	d90e      	bls.n	8101fd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8101fb2:	68fb      	ldr	r3, [r7, #12]
 8101fb4:	22ff      	movs	r2, #255	; 0xff
 8101fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8101fb8:	68fb      	ldr	r3, [r7, #12]
 8101fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101fbc:	b2da      	uxtb	r2, r3
 8101fbe:	8979      	ldrh	r1, [r7, #10]
 8101fc0:	2300      	movs	r3, #0
 8101fc2:	9300      	str	r3, [sp, #0]
 8101fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101fc8:	68f8      	ldr	r0, [r7, #12]
 8101fca:	f000 fb63 	bl	8102694 <I2C_TransferConfig>
 8101fce:	e00f      	b.n	8101ff0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8101fd0:	68fb      	ldr	r3, [r7, #12]
 8101fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101fd4:	b29a      	uxth	r2, r3
 8101fd6:	68fb      	ldr	r3, [r7, #12]
 8101fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101fde:	b2da      	uxtb	r2, r3
 8101fe0:	8979      	ldrh	r1, [r7, #10]
 8101fe2:	2300      	movs	r3, #0
 8101fe4:	9300      	str	r3, [sp, #0]
 8101fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101fea:	68f8      	ldr	r0, [r7, #12]
 8101fec:	f000 fb52 	bl	8102694 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8101ff0:	68fb      	ldr	r3, [r7, #12]
 8101ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101ff4:	b29b      	uxth	r3, r3
 8101ff6:	2b00      	cmp	r3, #0
 8101ff8:	d19e      	bne.n	8101f38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101ffa:	697a      	ldr	r2, [r7, #20]
 8101ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101ffe:	68f8      	ldr	r0, [r7, #12]
 8102000:	f000 faa6 	bl	8102550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102004:	4603      	mov	r3, r0
 8102006:	2b00      	cmp	r3, #0
 8102008:	d001      	beq.n	810200e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810200a:	2301      	movs	r3, #1
 810200c:	e01a      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810200e:	68fb      	ldr	r3, [r7, #12]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	2220      	movs	r2, #32
 8102014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102016:	68fb      	ldr	r3, [r7, #12]
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	6859      	ldr	r1, [r3, #4]
 810201c:	68fb      	ldr	r3, [r7, #12]
 810201e:	681a      	ldr	r2, [r3, #0]
 8102020:	4b0a      	ldr	r3, [pc, #40]	; (810204c <HAL_I2C_Mem_Write+0x224>)
 8102022:	400b      	ands	r3, r1
 8102024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102026:	68fb      	ldr	r3, [r7, #12]
 8102028:	2220      	movs	r2, #32
 810202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810202e:	68fb      	ldr	r3, [r7, #12]
 8102030:	2200      	movs	r2, #0
 8102032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102036:	68fb      	ldr	r3, [r7, #12]
 8102038:	2200      	movs	r2, #0
 810203a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810203e:	2300      	movs	r3, #0
 8102040:	e000      	b.n	8102044 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102042:	2302      	movs	r3, #2
  }
}
 8102044:	4618      	mov	r0, r3
 8102046:	3718      	adds	r7, #24
 8102048:	46bd      	mov	sp, r7
 810204a:	bd80      	pop	{r7, pc}
 810204c:	fe00e800 	.word	0xfe00e800

08102050 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102050:	b580      	push	{r7, lr}
 8102052:	b088      	sub	sp, #32
 8102054:	af02      	add	r7, sp, #8
 8102056:	60f8      	str	r0, [r7, #12]
 8102058:	4608      	mov	r0, r1
 810205a:	4611      	mov	r1, r2
 810205c:	461a      	mov	r2, r3
 810205e:	4603      	mov	r3, r0
 8102060:	817b      	strh	r3, [r7, #10]
 8102062:	460b      	mov	r3, r1
 8102064:	813b      	strh	r3, [r7, #8]
 8102066:	4613      	mov	r3, r2
 8102068:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810206a:	68fb      	ldr	r3, [r7, #12]
 810206c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102070:	b2db      	uxtb	r3, r3
 8102072:	2b20      	cmp	r3, #32
 8102074:	f040 80fd 	bne.w	8102272 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102078:	6a3b      	ldr	r3, [r7, #32]
 810207a:	2b00      	cmp	r3, #0
 810207c:	d002      	beq.n	8102084 <HAL_I2C_Mem_Read+0x34>
 810207e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102080:	2b00      	cmp	r3, #0
 8102082:	d105      	bne.n	8102090 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	f44f 7200 	mov.w	r2, #512	; 0x200
 810208a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810208c:	2301      	movs	r3, #1
 810208e:	e0f1      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102090:	68fb      	ldr	r3, [r7, #12]
 8102092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102096:	2b01      	cmp	r3, #1
 8102098:	d101      	bne.n	810209e <HAL_I2C_Mem_Read+0x4e>
 810209a:	2302      	movs	r3, #2
 810209c:	e0ea      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
 810209e:	68fb      	ldr	r3, [r7, #12]
 81020a0:	2201      	movs	r2, #1
 81020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81020a6:	f7ff fb19 	bl	81016dc <HAL_GetTick>
 81020aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81020ac:	697b      	ldr	r3, [r7, #20]
 81020ae:	9300      	str	r3, [sp, #0]
 81020b0:	2319      	movs	r3, #25
 81020b2:	2201      	movs	r2, #1
 81020b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81020b8:	68f8      	ldr	r0, [r7, #12]
 81020ba:	f000 f9c9 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 81020be:	4603      	mov	r3, r0
 81020c0:	2b00      	cmp	r3, #0
 81020c2:	d001      	beq.n	81020c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81020c4:	2301      	movs	r3, #1
 81020c6:	e0d5      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81020c8:	68fb      	ldr	r3, [r7, #12]
 81020ca:	2222      	movs	r2, #34	; 0x22
 81020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81020d0:	68fb      	ldr	r3, [r7, #12]
 81020d2:	2240      	movs	r2, #64	; 0x40
 81020d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81020d8:	68fb      	ldr	r3, [r7, #12]
 81020da:	2200      	movs	r2, #0
 81020dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81020de:	68fb      	ldr	r3, [r7, #12]
 81020e0:	6a3a      	ldr	r2, [r7, #32]
 81020e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81020ea:	68fb      	ldr	r3, [r7, #12]
 81020ec:	2200      	movs	r2, #0
 81020ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81020f0:	88f8      	ldrh	r0, [r7, #6]
 81020f2:	893a      	ldrh	r2, [r7, #8]
 81020f4:	8979      	ldrh	r1, [r7, #10]
 81020f6:	697b      	ldr	r3, [r7, #20]
 81020f8:	9301      	str	r3, [sp, #4]
 81020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81020fc:	9300      	str	r3, [sp, #0]
 81020fe:	4603      	mov	r3, r0
 8102100:	68f8      	ldr	r0, [r7, #12]
 8102102:	f000 f92d 	bl	8102360 <I2C_RequestMemoryRead>
 8102106:	4603      	mov	r3, r0
 8102108:	2b00      	cmp	r3, #0
 810210a:	d005      	beq.n	8102118 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810210c:	68fb      	ldr	r3, [r7, #12]
 810210e:	2200      	movs	r2, #0
 8102110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102114:	2301      	movs	r3, #1
 8102116:	e0ad      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810211c:	b29b      	uxth	r3, r3
 810211e:	2bff      	cmp	r3, #255	; 0xff
 8102120:	d90e      	bls.n	8102140 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102122:	68fb      	ldr	r3, [r7, #12]
 8102124:	22ff      	movs	r2, #255	; 0xff
 8102126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8102128:	68fb      	ldr	r3, [r7, #12]
 810212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810212c:	b2da      	uxtb	r2, r3
 810212e:	8979      	ldrh	r1, [r7, #10]
 8102130:	4b52      	ldr	r3, [pc, #328]	; (810227c <HAL_I2C_Mem_Read+0x22c>)
 8102132:	9300      	str	r3, [sp, #0]
 8102134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102138:	68f8      	ldr	r0, [r7, #12]
 810213a:	f000 faab 	bl	8102694 <I2C_TransferConfig>
 810213e:	e00f      	b.n	8102160 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102140:	68fb      	ldr	r3, [r7, #12]
 8102142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102144:	b29a      	uxth	r2, r3
 8102146:	68fb      	ldr	r3, [r7, #12]
 8102148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810214a:	68fb      	ldr	r3, [r7, #12]
 810214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810214e:	b2da      	uxtb	r2, r3
 8102150:	8979      	ldrh	r1, [r7, #10]
 8102152:	4b4a      	ldr	r3, [pc, #296]	; (810227c <HAL_I2C_Mem_Read+0x22c>)
 8102154:	9300      	str	r3, [sp, #0]
 8102156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810215a:	68f8      	ldr	r0, [r7, #12]
 810215c:	f000 fa9a 	bl	8102694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102160:	697b      	ldr	r3, [r7, #20]
 8102162:	9300      	str	r3, [sp, #0]
 8102164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102166:	2200      	movs	r2, #0
 8102168:	2104      	movs	r1, #4
 810216a:	68f8      	ldr	r0, [r7, #12]
 810216c:	f000 f970 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 8102170:	4603      	mov	r3, r0
 8102172:	2b00      	cmp	r3, #0
 8102174:	d001      	beq.n	810217a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102176:	2301      	movs	r3, #1
 8102178:	e07c      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810217a:	68fb      	ldr	r3, [r7, #12]
 810217c:	681b      	ldr	r3, [r3, #0]
 810217e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102180:	68fb      	ldr	r3, [r7, #12]
 8102182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102184:	b2d2      	uxtb	r2, r2
 8102186:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102188:	68fb      	ldr	r3, [r7, #12]
 810218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810218c:	1c5a      	adds	r2, r3, #1
 810218e:	68fb      	ldr	r3, [r7, #12]
 8102190:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102192:	68fb      	ldr	r3, [r7, #12]
 8102194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102196:	3b01      	subs	r3, #1
 8102198:	b29a      	uxth	r2, r3
 810219a:	68fb      	ldr	r3, [r7, #12]
 810219c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810219e:	68fb      	ldr	r3, [r7, #12]
 81021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81021a2:	b29b      	uxth	r3, r3
 81021a4:	3b01      	subs	r3, #1
 81021a6:	b29a      	uxth	r2, r3
 81021a8:	68fb      	ldr	r3, [r7, #12]
 81021aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81021ac:	68fb      	ldr	r3, [r7, #12]
 81021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81021b0:	b29b      	uxth	r3, r3
 81021b2:	2b00      	cmp	r3, #0
 81021b4:	d034      	beq.n	8102220 <HAL_I2C_Mem_Read+0x1d0>
 81021b6:	68fb      	ldr	r3, [r7, #12]
 81021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81021ba:	2b00      	cmp	r3, #0
 81021bc:	d130      	bne.n	8102220 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81021be:	697b      	ldr	r3, [r7, #20]
 81021c0:	9300      	str	r3, [sp, #0]
 81021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81021c4:	2200      	movs	r2, #0
 81021c6:	2180      	movs	r1, #128	; 0x80
 81021c8:	68f8      	ldr	r0, [r7, #12]
 81021ca:	f000 f941 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 81021ce:	4603      	mov	r3, r0
 81021d0:	2b00      	cmp	r3, #0
 81021d2:	d001      	beq.n	81021d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81021d4:	2301      	movs	r3, #1
 81021d6:	e04d      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81021d8:	68fb      	ldr	r3, [r7, #12]
 81021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81021dc:	b29b      	uxth	r3, r3
 81021de:	2bff      	cmp	r3, #255	; 0xff
 81021e0:	d90e      	bls.n	8102200 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81021e2:	68fb      	ldr	r3, [r7, #12]
 81021e4:	22ff      	movs	r2, #255	; 0xff
 81021e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81021e8:	68fb      	ldr	r3, [r7, #12]
 81021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81021ec:	b2da      	uxtb	r2, r3
 81021ee:	8979      	ldrh	r1, [r7, #10]
 81021f0:	2300      	movs	r3, #0
 81021f2:	9300      	str	r3, [sp, #0]
 81021f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81021f8:	68f8      	ldr	r0, [r7, #12]
 81021fa:	f000 fa4b 	bl	8102694 <I2C_TransferConfig>
 81021fe:	e00f      	b.n	8102220 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102204:	b29a      	uxth	r2, r3
 8102206:	68fb      	ldr	r3, [r7, #12]
 8102208:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810220e:	b2da      	uxtb	r2, r3
 8102210:	8979      	ldrh	r1, [r7, #10]
 8102212:	2300      	movs	r3, #0
 8102214:	9300      	str	r3, [sp, #0]
 8102216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810221a:	68f8      	ldr	r0, [r7, #12]
 810221c:	f000 fa3a 	bl	8102694 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102224:	b29b      	uxth	r3, r3
 8102226:	2b00      	cmp	r3, #0
 8102228:	d19a      	bne.n	8102160 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810222a:	697a      	ldr	r2, [r7, #20]
 810222c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810222e:	68f8      	ldr	r0, [r7, #12]
 8102230:	f000 f98e 	bl	8102550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102234:	4603      	mov	r3, r0
 8102236:	2b00      	cmp	r3, #0
 8102238:	d001      	beq.n	810223e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810223a:	2301      	movs	r3, #1
 810223c:	e01a      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810223e:	68fb      	ldr	r3, [r7, #12]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	2220      	movs	r2, #32
 8102244:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102246:	68fb      	ldr	r3, [r7, #12]
 8102248:	681b      	ldr	r3, [r3, #0]
 810224a:	6859      	ldr	r1, [r3, #4]
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	681a      	ldr	r2, [r3, #0]
 8102250:	4b0b      	ldr	r3, [pc, #44]	; (8102280 <HAL_I2C_Mem_Read+0x230>)
 8102252:	400b      	ands	r3, r1
 8102254:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102256:	68fb      	ldr	r3, [r7, #12]
 8102258:	2220      	movs	r2, #32
 810225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810225e:	68fb      	ldr	r3, [r7, #12]
 8102260:	2200      	movs	r2, #0
 8102262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102266:	68fb      	ldr	r3, [r7, #12]
 8102268:	2200      	movs	r2, #0
 810226a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810226e:	2300      	movs	r3, #0
 8102270:	e000      	b.n	8102274 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102272:	2302      	movs	r3, #2
  }
}
 8102274:	4618      	mov	r0, r3
 8102276:	3718      	adds	r7, #24
 8102278:	46bd      	mov	sp, r7
 810227a:	bd80      	pop	{r7, pc}
 810227c:	80002400 	.word	0x80002400
 8102280:	fe00e800 	.word	0xfe00e800

08102284 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8102284:	b580      	push	{r7, lr}
 8102286:	b084      	sub	sp, #16
 8102288:	af00      	add	r7, sp, #0
 810228a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	699b      	ldr	r3, [r3, #24]
 8102292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81022a0:	2b00      	cmp	r3, #0
 81022a2:	d005      	beq.n	81022b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81022a8:	68ba      	ldr	r2, [r7, #8]
 81022aa:	68f9      	ldr	r1, [r7, #12]
 81022ac:	6878      	ldr	r0, [r7, #4]
 81022ae:	4798      	blx	r3
  }
}
 81022b0:	bf00      	nop
 81022b2:	3710      	adds	r7, #16
 81022b4:	46bd      	mov	sp, r7
 81022b6:	bd80      	pop	{r7, pc}

081022b8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81022b8:	b580      	push	{r7, lr}
 81022ba:	b086      	sub	sp, #24
 81022bc:	af02      	add	r7, sp, #8
 81022be:	60f8      	str	r0, [r7, #12]
 81022c0:	4608      	mov	r0, r1
 81022c2:	4611      	mov	r1, r2
 81022c4:	461a      	mov	r2, r3
 81022c6:	4603      	mov	r3, r0
 81022c8:	817b      	strh	r3, [r7, #10]
 81022ca:	460b      	mov	r3, r1
 81022cc:	813b      	strh	r3, [r7, #8]
 81022ce:	4613      	mov	r3, r2
 81022d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81022d2:	88fb      	ldrh	r3, [r7, #6]
 81022d4:	b2da      	uxtb	r2, r3
 81022d6:	8979      	ldrh	r1, [r7, #10]
 81022d8:	4b20      	ldr	r3, [pc, #128]	; (810235c <I2C_RequestMemoryWrite+0xa4>)
 81022da:	9300      	str	r3, [sp, #0]
 81022dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81022e0:	68f8      	ldr	r0, [r7, #12]
 81022e2:	f000 f9d7 	bl	8102694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81022e6:	69fa      	ldr	r2, [r7, #28]
 81022e8:	69b9      	ldr	r1, [r7, #24]
 81022ea:	68f8      	ldr	r0, [r7, #12]
 81022ec:	f000 f8f0 	bl	81024d0 <I2C_WaitOnTXISFlagUntilTimeout>
 81022f0:	4603      	mov	r3, r0
 81022f2:	2b00      	cmp	r3, #0
 81022f4:	d001      	beq.n	81022fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81022f6:	2301      	movs	r3, #1
 81022f8:	e02c      	b.n	8102354 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81022fa:	88fb      	ldrh	r3, [r7, #6]
 81022fc:	2b01      	cmp	r3, #1
 81022fe:	d105      	bne.n	810230c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102300:	893b      	ldrh	r3, [r7, #8]
 8102302:	b2da      	uxtb	r2, r3
 8102304:	68fb      	ldr	r3, [r7, #12]
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	629a      	str	r2, [r3, #40]	; 0x28
 810230a:	e015      	b.n	8102338 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810230c:	893b      	ldrh	r3, [r7, #8]
 810230e:	0a1b      	lsrs	r3, r3, #8
 8102310:	b29b      	uxth	r3, r3
 8102312:	b2da      	uxtb	r2, r3
 8102314:	68fb      	ldr	r3, [r7, #12]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810231a:	69fa      	ldr	r2, [r7, #28]
 810231c:	69b9      	ldr	r1, [r7, #24]
 810231e:	68f8      	ldr	r0, [r7, #12]
 8102320:	f000 f8d6 	bl	81024d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102324:	4603      	mov	r3, r0
 8102326:	2b00      	cmp	r3, #0
 8102328:	d001      	beq.n	810232e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810232a:	2301      	movs	r3, #1
 810232c:	e012      	b.n	8102354 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810232e:	893b      	ldrh	r3, [r7, #8]
 8102330:	b2da      	uxtb	r2, r3
 8102332:	68fb      	ldr	r3, [r7, #12]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102338:	69fb      	ldr	r3, [r7, #28]
 810233a:	9300      	str	r3, [sp, #0]
 810233c:	69bb      	ldr	r3, [r7, #24]
 810233e:	2200      	movs	r2, #0
 8102340:	2180      	movs	r1, #128	; 0x80
 8102342:	68f8      	ldr	r0, [r7, #12]
 8102344:	f000 f884 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 8102348:	4603      	mov	r3, r0
 810234a:	2b00      	cmp	r3, #0
 810234c:	d001      	beq.n	8102352 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810234e:	2301      	movs	r3, #1
 8102350:	e000      	b.n	8102354 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102352:	2300      	movs	r3, #0
}
 8102354:	4618      	mov	r0, r3
 8102356:	3710      	adds	r7, #16
 8102358:	46bd      	mov	sp, r7
 810235a:	bd80      	pop	{r7, pc}
 810235c:	80002000 	.word	0x80002000

08102360 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102360:	b580      	push	{r7, lr}
 8102362:	b086      	sub	sp, #24
 8102364:	af02      	add	r7, sp, #8
 8102366:	60f8      	str	r0, [r7, #12]
 8102368:	4608      	mov	r0, r1
 810236a:	4611      	mov	r1, r2
 810236c:	461a      	mov	r2, r3
 810236e:	4603      	mov	r3, r0
 8102370:	817b      	strh	r3, [r7, #10]
 8102372:	460b      	mov	r3, r1
 8102374:	813b      	strh	r3, [r7, #8]
 8102376:	4613      	mov	r3, r2
 8102378:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810237a:	88fb      	ldrh	r3, [r7, #6]
 810237c:	b2da      	uxtb	r2, r3
 810237e:	8979      	ldrh	r1, [r7, #10]
 8102380:	4b20      	ldr	r3, [pc, #128]	; (8102404 <I2C_RequestMemoryRead+0xa4>)
 8102382:	9300      	str	r3, [sp, #0]
 8102384:	2300      	movs	r3, #0
 8102386:	68f8      	ldr	r0, [r7, #12]
 8102388:	f000 f984 	bl	8102694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810238c:	69fa      	ldr	r2, [r7, #28]
 810238e:	69b9      	ldr	r1, [r7, #24]
 8102390:	68f8      	ldr	r0, [r7, #12]
 8102392:	f000 f89d 	bl	81024d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102396:	4603      	mov	r3, r0
 8102398:	2b00      	cmp	r3, #0
 810239a:	d001      	beq.n	81023a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810239c:	2301      	movs	r3, #1
 810239e:	e02c      	b.n	81023fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81023a0:	88fb      	ldrh	r3, [r7, #6]
 81023a2:	2b01      	cmp	r3, #1
 81023a4:	d105      	bne.n	81023b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81023a6:	893b      	ldrh	r3, [r7, #8]
 81023a8:	b2da      	uxtb	r2, r3
 81023aa:	68fb      	ldr	r3, [r7, #12]
 81023ac:	681b      	ldr	r3, [r3, #0]
 81023ae:	629a      	str	r2, [r3, #40]	; 0x28
 81023b0:	e015      	b.n	81023de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81023b2:	893b      	ldrh	r3, [r7, #8]
 81023b4:	0a1b      	lsrs	r3, r3, #8
 81023b6:	b29b      	uxth	r3, r3
 81023b8:	b2da      	uxtb	r2, r3
 81023ba:	68fb      	ldr	r3, [r7, #12]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81023c0:	69fa      	ldr	r2, [r7, #28]
 81023c2:	69b9      	ldr	r1, [r7, #24]
 81023c4:	68f8      	ldr	r0, [r7, #12]
 81023c6:	f000 f883 	bl	81024d0 <I2C_WaitOnTXISFlagUntilTimeout>
 81023ca:	4603      	mov	r3, r0
 81023cc:	2b00      	cmp	r3, #0
 81023ce:	d001      	beq.n	81023d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81023d0:	2301      	movs	r3, #1
 81023d2:	e012      	b.n	81023fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81023d4:	893b      	ldrh	r3, [r7, #8]
 81023d6:	b2da      	uxtb	r2, r3
 81023d8:	68fb      	ldr	r3, [r7, #12]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81023de:	69fb      	ldr	r3, [r7, #28]
 81023e0:	9300      	str	r3, [sp, #0]
 81023e2:	69bb      	ldr	r3, [r7, #24]
 81023e4:	2200      	movs	r2, #0
 81023e6:	2140      	movs	r1, #64	; 0x40
 81023e8:	68f8      	ldr	r0, [r7, #12]
 81023ea:	f000 f831 	bl	8102450 <I2C_WaitOnFlagUntilTimeout>
 81023ee:	4603      	mov	r3, r0
 81023f0:	2b00      	cmp	r3, #0
 81023f2:	d001      	beq.n	81023f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81023f4:	2301      	movs	r3, #1
 81023f6:	e000      	b.n	81023fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81023f8:	2300      	movs	r3, #0
}
 81023fa:	4618      	mov	r0, r3
 81023fc:	3710      	adds	r7, #16
 81023fe:	46bd      	mov	sp, r7
 8102400:	bd80      	pop	{r7, pc}
 8102402:	bf00      	nop
 8102404:	80002000 	.word	0x80002000

08102408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102408:	b480      	push	{r7}
 810240a:	b083      	sub	sp, #12
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	699b      	ldr	r3, [r3, #24]
 8102416:	f003 0302 	and.w	r3, r3, #2
 810241a:	2b02      	cmp	r3, #2
 810241c:	d103      	bne.n	8102426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	2200      	movs	r2, #0
 8102424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	699b      	ldr	r3, [r3, #24]
 810242c:	f003 0301 	and.w	r3, r3, #1
 8102430:	2b01      	cmp	r3, #1
 8102432:	d007      	beq.n	8102444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	699a      	ldr	r2, [r3, #24]
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	f042 0201 	orr.w	r2, r2, #1
 8102442:	619a      	str	r2, [r3, #24]
  }
}
 8102444:	bf00      	nop
 8102446:	370c      	adds	r7, #12
 8102448:	46bd      	mov	sp, r7
 810244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244e:	4770      	bx	lr

08102450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102450:	b580      	push	{r7, lr}
 8102452:	b084      	sub	sp, #16
 8102454:	af00      	add	r7, sp, #0
 8102456:	60f8      	str	r0, [r7, #12]
 8102458:	60b9      	str	r1, [r7, #8]
 810245a:	603b      	str	r3, [r7, #0]
 810245c:	4613      	mov	r3, r2
 810245e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102460:	e022      	b.n	81024a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102462:	683b      	ldr	r3, [r7, #0]
 8102464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102468:	d01e      	beq.n	81024a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810246a:	f7ff f937 	bl	81016dc <HAL_GetTick>
 810246e:	4602      	mov	r2, r0
 8102470:	69bb      	ldr	r3, [r7, #24]
 8102472:	1ad3      	subs	r3, r2, r3
 8102474:	683a      	ldr	r2, [r7, #0]
 8102476:	429a      	cmp	r2, r3
 8102478:	d302      	bcc.n	8102480 <I2C_WaitOnFlagUntilTimeout+0x30>
 810247a:	683b      	ldr	r3, [r7, #0]
 810247c:	2b00      	cmp	r3, #0
 810247e:	d113      	bne.n	81024a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102484:	f043 0220 	orr.w	r2, r3, #32
 8102488:	68fb      	ldr	r3, [r7, #12]
 810248a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810248c:	68fb      	ldr	r3, [r7, #12]
 810248e:	2220      	movs	r2, #32
 8102490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102494:	68fb      	ldr	r3, [r7, #12]
 8102496:	2200      	movs	r2, #0
 8102498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810249c:	68fb      	ldr	r3, [r7, #12]
 810249e:	2200      	movs	r2, #0
 81024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81024a4:	2301      	movs	r3, #1
 81024a6:	e00f      	b.n	81024c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	699a      	ldr	r2, [r3, #24]
 81024ae:	68bb      	ldr	r3, [r7, #8]
 81024b0:	4013      	ands	r3, r2
 81024b2:	68ba      	ldr	r2, [r7, #8]
 81024b4:	429a      	cmp	r2, r3
 81024b6:	bf0c      	ite	eq
 81024b8:	2301      	moveq	r3, #1
 81024ba:	2300      	movne	r3, #0
 81024bc:	b2db      	uxtb	r3, r3
 81024be:	461a      	mov	r2, r3
 81024c0:	79fb      	ldrb	r3, [r7, #7]
 81024c2:	429a      	cmp	r2, r3
 81024c4:	d0cd      	beq.n	8102462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81024c6:	2300      	movs	r3, #0
}
 81024c8:	4618      	mov	r0, r3
 81024ca:	3710      	adds	r7, #16
 81024cc:	46bd      	mov	sp, r7
 81024ce:	bd80      	pop	{r7, pc}

081024d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81024d0:	b580      	push	{r7, lr}
 81024d2:	b084      	sub	sp, #16
 81024d4:	af00      	add	r7, sp, #0
 81024d6:	60f8      	str	r0, [r7, #12]
 81024d8:	60b9      	str	r1, [r7, #8]
 81024da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81024dc:	e02c      	b.n	8102538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81024de:	687a      	ldr	r2, [r7, #4]
 81024e0:	68b9      	ldr	r1, [r7, #8]
 81024e2:	68f8      	ldr	r0, [r7, #12]
 81024e4:	f000 f870 	bl	81025c8 <I2C_IsAcknowledgeFailed>
 81024e8:	4603      	mov	r3, r0
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d001      	beq.n	81024f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81024ee:	2301      	movs	r3, #1
 81024f0:	e02a      	b.n	8102548 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81024f2:	68bb      	ldr	r3, [r7, #8]
 81024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81024f8:	d01e      	beq.n	8102538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81024fa:	f7ff f8ef 	bl	81016dc <HAL_GetTick>
 81024fe:	4602      	mov	r2, r0
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	1ad3      	subs	r3, r2, r3
 8102504:	68ba      	ldr	r2, [r7, #8]
 8102506:	429a      	cmp	r2, r3
 8102508:	d302      	bcc.n	8102510 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810250a:	68bb      	ldr	r3, [r7, #8]
 810250c:	2b00      	cmp	r3, #0
 810250e:	d113      	bne.n	8102538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102514:	f043 0220 	orr.w	r2, r3, #32
 8102518:	68fb      	ldr	r3, [r7, #12]
 810251a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810251c:	68fb      	ldr	r3, [r7, #12]
 810251e:	2220      	movs	r2, #32
 8102520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102524:	68fb      	ldr	r3, [r7, #12]
 8102526:	2200      	movs	r2, #0
 8102528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810252c:	68fb      	ldr	r3, [r7, #12]
 810252e:	2200      	movs	r2, #0
 8102530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102534:	2301      	movs	r3, #1
 8102536:	e007      	b.n	8102548 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102538:	68fb      	ldr	r3, [r7, #12]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	699b      	ldr	r3, [r3, #24]
 810253e:	f003 0302 	and.w	r3, r3, #2
 8102542:	2b02      	cmp	r3, #2
 8102544:	d1cb      	bne.n	81024de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102546:	2300      	movs	r3, #0
}
 8102548:	4618      	mov	r0, r3
 810254a:	3710      	adds	r7, #16
 810254c:	46bd      	mov	sp, r7
 810254e:	bd80      	pop	{r7, pc}

08102550 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102550:	b580      	push	{r7, lr}
 8102552:	b084      	sub	sp, #16
 8102554:	af00      	add	r7, sp, #0
 8102556:	60f8      	str	r0, [r7, #12]
 8102558:	60b9      	str	r1, [r7, #8]
 810255a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810255c:	e028      	b.n	81025b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810255e:	687a      	ldr	r2, [r7, #4]
 8102560:	68b9      	ldr	r1, [r7, #8]
 8102562:	68f8      	ldr	r0, [r7, #12]
 8102564:	f000 f830 	bl	81025c8 <I2C_IsAcknowledgeFailed>
 8102568:	4603      	mov	r3, r0
 810256a:	2b00      	cmp	r3, #0
 810256c:	d001      	beq.n	8102572 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810256e:	2301      	movs	r3, #1
 8102570:	e026      	b.n	81025c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102572:	f7ff f8b3 	bl	81016dc <HAL_GetTick>
 8102576:	4602      	mov	r2, r0
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	1ad3      	subs	r3, r2, r3
 810257c:	68ba      	ldr	r2, [r7, #8]
 810257e:	429a      	cmp	r2, r3
 8102580:	d302      	bcc.n	8102588 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102582:	68bb      	ldr	r3, [r7, #8]
 8102584:	2b00      	cmp	r3, #0
 8102586:	d113      	bne.n	81025b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810258c:	f043 0220 	orr.w	r2, r3, #32
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102594:	68fb      	ldr	r3, [r7, #12]
 8102596:	2220      	movs	r2, #32
 8102598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810259c:	68fb      	ldr	r3, [r7, #12]
 810259e:	2200      	movs	r2, #0
 81025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	2200      	movs	r2, #0
 81025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81025ac:	2301      	movs	r3, #1
 81025ae:	e007      	b.n	81025c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	699b      	ldr	r3, [r3, #24]
 81025b6:	f003 0320 	and.w	r3, r3, #32
 81025ba:	2b20      	cmp	r3, #32
 81025bc:	d1cf      	bne.n	810255e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81025be:	2300      	movs	r3, #0
}
 81025c0:	4618      	mov	r0, r3
 81025c2:	3710      	adds	r7, #16
 81025c4:	46bd      	mov	sp, r7
 81025c6:	bd80      	pop	{r7, pc}

081025c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81025c8:	b580      	push	{r7, lr}
 81025ca:	b084      	sub	sp, #16
 81025cc:	af00      	add	r7, sp, #0
 81025ce:	60f8      	str	r0, [r7, #12]
 81025d0:	60b9      	str	r1, [r7, #8]
 81025d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81025d4:	68fb      	ldr	r3, [r7, #12]
 81025d6:	681b      	ldr	r3, [r3, #0]
 81025d8:	699b      	ldr	r3, [r3, #24]
 81025da:	f003 0310 	and.w	r3, r3, #16
 81025de:	2b10      	cmp	r3, #16
 81025e0:	d151      	bne.n	8102686 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81025e2:	e022      	b.n	810262a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81025e4:	68bb      	ldr	r3, [r7, #8]
 81025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025ea:	d01e      	beq.n	810262a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81025ec:	f7ff f876 	bl	81016dc <HAL_GetTick>
 81025f0:	4602      	mov	r2, r0
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	1ad3      	subs	r3, r2, r3
 81025f6:	68ba      	ldr	r2, [r7, #8]
 81025f8:	429a      	cmp	r2, r3
 81025fa:	d302      	bcc.n	8102602 <I2C_IsAcknowledgeFailed+0x3a>
 81025fc:	68bb      	ldr	r3, [r7, #8]
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d113      	bne.n	810262a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102602:	68fb      	ldr	r3, [r7, #12]
 8102604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102606:	f043 0220 	orr.w	r2, r3, #32
 810260a:	68fb      	ldr	r3, [r7, #12]
 810260c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810260e:	68fb      	ldr	r3, [r7, #12]
 8102610:	2220      	movs	r2, #32
 8102612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102616:	68fb      	ldr	r3, [r7, #12]
 8102618:	2200      	movs	r2, #0
 810261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810261e:	68fb      	ldr	r3, [r7, #12]
 8102620:	2200      	movs	r2, #0
 8102622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102626:	2301      	movs	r3, #1
 8102628:	e02e      	b.n	8102688 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	699b      	ldr	r3, [r3, #24]
 8102630:	f003 0320 	and.w	r3, r3, #32
 8102634:	2b20      	cmp	r3, #32
 8102636:	d1d5      	bne.n	81025e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102638:	68fb      	ldr	r3, [r7, #12]
 810263a:	681b      	ldr	r3, [r3, #0]
 810263c:	2210      	movs	r2, #16
 810263e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102640:	68fb      	ldr	r3, [r7, #12]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	2220      	movs	r2, #32
 8102646:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102648:	68f8      	ldr	r0, [r7, #12]
 810264a:	f7ff fedd 	bl	8102408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	6859      	ldr	r1, [r3, #4]
 8102654:	68fb      	ldr	r3, [r7, #12]
 8102656:	681a      	ldr	r2, [r3, #0]
 8102658:	4b0d      	ldr	r3, [pc, #52]	; (8102690 <I2C_IsAcknowledgeFailed+0xc8>)
 810265a:	400b      	ands	r3, r1
 810265c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102662:	f043 0204 	orr.w	r2, r3, #4
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810266a:	68fb      	ldr	r3, [r7, #12]
 810266c:	2220      	movs	r2, #32
 810266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	2200      	movs	r2, #0
 8102676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810267a:	68fb      	ldr	r3, [r7, #12]
 810267c:	2200      	movs	r2, #0
 810267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102682:	2301      	movs	r3, #1
 8102684:	e000      	b.n	8102688 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102686:	2300      	movs	r3, #0
}
 8102688:	4618      	mov	r0, r3
 810268a:	3710      	adds	r7, #16
 810268c:	46bd      	mov	sp, r7
 810268e:	bd80      	pop	{r7, pc}
 8102690:	fe00e800 	.word	0xfe00e800

08102694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102694:	b480      	push	{r7}
 8102696:	b085      	sub	sp, #20
 8102698:	af00      	add	r7, sp, #0
 810269a:	60f8      	str	r0, [r7, #12]
 810269c:	607b      	str	r3, [r7, #4]
 810269e:	460b      	mov	r3, r1
 81026a0:	817b      	strh	r3, [r7, #10]
 81026a2:	4613      	mov	r3, r2
 81026a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	685a      	ldr	r2, [r3, #4]
 81026ac:	69bb      	ldr	r3, [r7, #24]
 81026ae:	0d5b      	lsrs	r3, r3, #21
 81026b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81026b4:	4b0d      	ldr	r3, [pc, #52]	; (81026ec <I2C_TransferConfig+0x58>)
 81026b6:	430b      	orrs	r3, r1
 81026b8:	43db      	mvns	r3, r3
 81026ba:	ea02 0103 	and.w	r1, r2, r3
 81026be:	897b      	ldrh	r3, [r7, #10]
 81026c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81026c4:	7a7b      	ldrb	r3, [r7, #9]
 81026c6:	041b      	lsls	r3, r3, #16
 81026c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81026cc:	431a      	orrs	r2, r3
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	431a      	orrs	r2, r3
 81026d2:	69bb      	ldr	r3, [r7, #24]
 81026d4:	431a      	orrs	r2, r3
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	430a      	orrs	r2, r1
 81026dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81026de:	bf00      	nop
 81026e0:	3714      	adds	r7, #20
 81026e2:	46bd      	mov	sp, r7
 81026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e8:	4770      	bx	lr
 81026ea:	bf00      	nop
 81026ec:	03ff63ff 	.word	0x03ff63ff

081026f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81026f0:	b480      	push	{r7}
 81026f2:	b083      	sub	sp, #12
 81026f4:	af00      	add	r7, sp, #0
 81026f6:	6078      	str	r0, [r7, #4]
 81026f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102700:	b2db      	uxtb	r3, r3
 8102702:	2b20      	cmp	r3, #32
 8102704:	d138      	bne.n	8102778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810270c:	2b01      	cmp	r3, #1
 810270e:	d101      	bne.n	8102714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102710:	2302      	movs	r3, #2
 8102712:	e032      	b.n	810277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	2201      	movs	r2, #1
 8102718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	2224      	movs	r2, #36	; 0x24
 8102720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	681a      	ldr	r2, [r3, #0]
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	f022 0201 	bic.w	r2, r2, #1
 8102732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	681a      	ldr	r2, [r3, #0]
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	6819      	ldr	r1, [r3, #0]
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	681b      	ldr	r3, [r3, #0]
 810274e:	683a      	ldr	r2, [r7, #0]
 8102750:	430a      	orrs	r2, r1
 8102752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	681b      	ldr	r3, [r3, #0]
 8102758:	681a      	ldr	r2, [r3, #0]
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	f042 0201 	orr.w	r2, r2, #1
 8102762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	2220      	movs	r2, #32
 8102768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	2200      	movs	r2, #0
 8102770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102774:	2300      	movs	r3, #0
 8102776:	e000      	b.n	810277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102778:	2302      	movs	r3, #2
  }
}
 810277a:	4618      	mov	r0, r3
 810277c:	370c      	adds	r7, #12
 810277e:	46bd      	mov	sp, r7
 8102780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102784:	4770      	bx	lr

08102786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102786:	b480      	push	{r7}
 8102788:	b085      	sub	sp, #20
 810278a:	af00      	add	r7, sp, #0
 810278c:	6078      	str	r0, [r7, #4]
 810278e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102796:	b2db      	uxtb	r3, r3
 8102798:	2b20      	cmp	r3, #32
 810279a:	d139      	bne.n	8102810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81027a2:	2b01      	cmp	r3, #1
 81027a4:	d101      	bne.n	81027aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81027a6:	2302      	movs	r3, #2
 81027a8:	e033      	b.n	8102812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	2201      	movs	r2, #1
 81027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	2224      	movs	r2, #36	; 0x24
 81027b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	681a      	ldr	r2, [r3, #0]
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	f022 0201 	bic.w	r2, r2, #1
 81027c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81027d2:	68fb      	ldr	r3, [r7, #12]
 81027d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81027d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81027da:	683b      	ldr	r3, [r7, #0]
 81027dc:	021b      	lsls	r3, r3, #8
 81027de:	68fa      	ldr	r2, [r7, #12]
 81027e0:	4313      	orrs	r3, r2
 81027e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	68fa      	ldr	r2, [r7, #12]
 81027ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	681a      	ldr	r2, [r3, #0]
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	f042 0201 	orr.w	r2, r2, #1
 81027fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	2220      	movs	r2, #32
 8102800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	2200      	movs	r2, #0
 8102808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810280c:	2300      	movs	r3, #0
 810280e:	e000      	b.n	8102812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102810:	2302      	movs	r3, #2
  }
}
 8102812:	4618      	mov	r0, r3
 8102814:	3714      	adds	r7, #20
 8102816:	46bd      	mov	sp, r7
 8102818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810281c:	4770      	bx	lr
	...

08102820 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102820:	b580      	push	{r7, lr}
 8102822:	b084      	sub	sp, #16
 8102824:	af00      	add	r7, sp, #0
 8102826:	60f8      	str	r0, [r7, #12]
 8102828:	460b      	mov	r3, r1
 810282a:	607a      	str	r2, [r7, #4]
 810282c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810282e:	4b37      	ldr	r3, [pc, #220]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	f023 0201 	bic.w	r2, r3, #1
 8102836:	4935      	ldr	r1, [pc, #212]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	4313      	orrs	r3, r2
 810283c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	2b00      	cmp	r3, #0
 8102842:	d123      	bne.n	810288c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102844:	f7ff f88a 	bl	810195c <HAL_GetCurrentCPUID>
 8102848:	4603      	mov	r3, r0
 810284a:	2b03      	cmp	r3, #3
 810284c:	d158      	bne.n	8102900 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810284e:	4b2f      	ldr	r3, [pc, #188]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102850:	691b      	ldr	r3, [r3, #16]
 8102852:	4a2e      	ldr	r2, [pc, #184]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102854:	f023 0301 	bic.w	r3, r3, #1
 8102858:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810285a:	4b2d      	ldr	r3, [pc, #180]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810285c:	691b      	ldr	r3, [r3, #16]
 810285e:	4a2c      	ldr	r2, [pc, #176]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102860:	f043 0304 	orr.w	r3, r3, #4
 8102864:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102866:	f3bf 8f4f 	dsb	sy
}
 810286a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810286c:	f3bf 8f6f 	isb	sy
}
 8102870:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102872:	7afb      	ldrb	r3, [r7, #11]
 8102874:	2b01      	cmp	r3, #1
 8102876:	d101      	bne.n	810287c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102878:	bf30      	wfi
 810287a:	e000      	b.n	810287e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810287c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810287e:	4b24      	ldr	r3, [pc, #144]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102880:	691b      	ldr	r3, [r3, #16]
 8102882:	4a23      	ldr	r2, [pc, #140]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102884:	f023 0304 	bic.w	r3, r3, #4
 8102888:	6113      	str	r3, [r2, #16]
 810288a:	e03c      	b.n	8102906 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	2b01      	cmp	r3, #1
 8102890:	d123      	bne.n	81028da <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102892:	f7ff f863 	bl	810195c <HAL_GetCurrentCPUID>
 8102896:	4603      	mov	r3, r0
 8102898:	2b01      	cmp	r3, #1
 810289a:	d133      	bne.n	8102904 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810289c:	4b1b      	ldr	r3, [pc, #108]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 810289e:	695b      	ldr	r3, [r3, #20]
 81028a0:	4a1a      	ldr	r2, [pc, #104]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 81028a2:	f023 0302 	bic.w	r3, r3, #2
 81028a6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028a8:	4b19      	ldr	r3, [pc, #100]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028aa:	691b      	ldr	r3, [r3, #16]
 81028ac:	4a18      	ldr	r2, [pc, #96]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028ae:	f043 0304 	orr.w	r3, r3, #4
 81028b2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81028b4:	f3bf 8f4f 	dsb	sy
}
 81028b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81028ba:	f3bf 8f6f 	isb	sy
}
 81028be:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81028c0:	7afb      	ldrb	r3, [r7, #11]
 81028c2:	2b01      	cmp	r3, #1
 81028c4:	d101      	bne.n	81028ca <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81028c6:	bf30      	wfi
 81028c8:	e000      	b.n	81028cc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81028ca:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028cc:	4b10      	ldr	r3, [pc, #64]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028ce:	691b      	ldr	r3, [r3, #16]
 81028d0:	4a0f      	ldr	r2, [pc, #60]	; (8102910 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028d2:	f023 0304 	bic.w	r3, r3, #4
 81028d6:	6113      	str	r3, [r2, #16]
 81028d8:	e015      	b.n	8102906 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81028da:	f7ff f83f 	bl	810195c <HAL_GetCurrentCPUID>
 81028de:	4603      	mov	r3, r0
 81028e0:	2b03      	cmp	r3, #3
 81028e2:	d106      	bne.n	81028f2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81028e4:	4b09      	ldr	r3, [pc, #36]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 81028e6:	691b      	ldr	r3, [r3, #16]
 81028e8:	4a08      	ldr	r2, [pc, #32]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 81028ea:	f023 0304 	bic.w	r3, r3, #4
 81028ee:	6113      	str	r3, [r2, #16]
 81028f0:	e009      	b.n	8102906 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81028f2:	4b06      	ldr	r3, [pc, #24]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 81028f4:	695b      	ldr	r3, [r3, #20]
 81028f6:	4a05      	ldr	r2, [pc, #20]	; (810290c <HAL_PWREx_EnterSTOPMode+0xec>)
 81028f8:	f023 0304 	bic.w	r3, r3, #4
 81028fc:	6153      	str	r3, [r2, #20]
 81028fe:	e002      	b.n	8102906 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102900:	bf00      	nop
 8102902:	e000      	b.n	8102906 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102904:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102906:	3710      	adds	r7, #16
 8102908:	46bd      	mov	sp, r7
 810290a:	bd80      	pop	{r7, pc}
 810290c:	58024800 	.word	0x58024800
 8102910:	e000ed00 	.word	0xe000ed00

08102914 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102914:	b580      	push	{r7, lr}
 8102916:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102918:	f7ff f820 	bl	810195c <HAL_GetCurrentCPUID>
 810291c:	4603      	mov	r3, r0
 810291e:	2b03      	cmp	r3, #3
 8102920:	d101      	bne.n	8102926 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102922:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102924:	e001      	b.n	810292a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102926:	bf40      	sev
    __WFE ();
 8102928:	bf20      	wfe
}
 810292a:	bf00      	nop
 810292c:	bd80      	pop	{r7, pc}
	...

08102930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102930:	b480      	push	{r7}
 8102932:	b089      	sub	sp, #36	; 0x24
 8102934:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102936:	4bb3      	ldr	r3, [pc, #716]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102938:	691b      	ldr	r3, [r3, #16]
 810293a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810293e:	2b18      	cmp	r3, #24
 8102940:	f200 8155 	bhi.w	8102bee <HAL_RCC_GetSysClockFreq+0x2be>
 8102944:	a201      	add	r2, pc, #4	; (adr r2, 810294c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810294a:	bf00      	nop
 810294c:	081029b1 	.word	0x081029b1
 8102950:	08102bef 	.word	0x08102bef
 8102954:	08102bef 	.word	0x08102bef
 8102958:	08102bef 	.word	0x08102bef
 810295c:	08102bef 	.word	0x08102bef
 8102960:	08102bef 	.word	0x08102bef
 8102964:	08102bef 	.word	0x08102bef
 8102968:	08102bef 	.word	0x08102bef
 810296c:	081029d7 	.word	0x081029d7
 8102970:	08102bef 	.word	0x08102bef
 8102974:	08102bef 	.word	0x08102bef
 8102978:	08102bef 	.word	0x08102bef
 810297c:	08102bef 	.word	0x08102bef
 8102980:	08102bef 	.word	0x08102bef
 8102984:	08102bef 	.word	0x08102bef
 8102988:	08102bef 	.word	0x08102bef
 810298c:	081029dd 	.word	0x081029dd
 8102990:	08102bef 	.word	0x08102bef
 8102994:	08102bef 	.word	0x08102bef
 8102998:	08102bef 	.word	0x08102bef
 810299c:	08102bef 	.word	0x08102bef
 81029a0:	08102bef 	.word	0x08102bef
 81029a4:	08102bef 	.word	0x08102bef
 81029a8:	08102bef 	.word	0x08102bef
 81029ac:	081029e3 	.word	0x081029e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81029b0:	4b94      	ldr	r3, [pc, #592]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029b2:	681b      	ldr	r3, [r3, #0]
 81029b4:	f003 0320 	and.w	r3, r3, #32
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d009      	beq.n	81029d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81029bc:	4b91      	ldr	r3, [pc, #580]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	08db      	lsrs	r3, r3, #3
 81029c2:	f003 0303 	and.w	r3, r3, #3
 81029c6:	4a90      	ldr	r2, [pc, #576]	; (8102c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81029c8:	fa22 f303 	lsr.w	r3, r2, r3
 81029cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81029ce:	e111      	b.n	8102bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81029d0:	4b8d      	ldr	r3, [pc, #564]	; (8102c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81029d2:	61bb      	str	r3, [r7, #24]
    break;
 81029d4:	e10e      	b.n	8102bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81029d6:	4b8d      	ldr	r3, [pc, #564]	; (8102c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81029d8:	61bb      	str	r3, [r7, #24]
    break;
 81029da:	e10b      	b.n	8102bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81029dc:	4b8c      	ldr	r3, [pc, #560]	; (8102c10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81029de:	61bb      	str	r3, [r7, #24]
    break;
 81029e0:	e108      	b.n	8102bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81029e2:	4b88      	ldr	r3, [pc, #544]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029e6:	f003 0303 	and.w	r3, r3, #3
 81029ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81029ec:	4b85      	ldr	r3, [pc, #532]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029f0:	091b      	lsrs	r3, r3, #4
 81029f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81029f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81029f8:	4b82      	ldr	r3, [pc, #520]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029fc:	f003 0301 	and.w	r3, r3, #1
 8102a00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102a02:	4b80      	ldr	r3, [pc, #512]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102a06:	08db      	lsrs	r3, r3, #3
 8102a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102a0c:	68fa      	ldr	r2, [r7, #12]
 8102a0e:	fb02 f303 	mul.w	r3, r2, r3
 8102a12:	ee07 3a90 	vmov	s15, r3
 8102a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102a1e:	693b      	ldr	r3, [r7, #16]
 8102a20:	2b00      	cmp	r3, #0
 8102a22:	f000 80e1 	beq.w	8102be8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102a26:	697b      	ldr	r3, [r7, #20]
 8102a28:	2b02      	cmp	r3, #2
 8102a2a:	f000 8083 	beq.w	8102b34 <HAL_RCC_GetSysClockFreq+0x204>
 8102a2e:	697b      	ldr	r3, [r7, #20]
 8102a30:	2b02      	cmp	r3, #2
 8102a32:	f200 80a1 	bhi.w	8102b78 <HAL_RCC_GetSysClockFreq+0x248>
 8102a36:	697b      	ldr	r3, [r7, #20]
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	d003      	beq.n	8102a44 <HAL_RCC_GetSysClockFreq+0x114>
 8102a3c:	697b      	ldr	r3, [r7, #20]
 8102a3e:	2b01      	cmp	r3, #1
 8102a40:	d056      	beq.n	8102af0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102a42:	e099      	b.n	8102b78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a44:	4b6f      	ldr	r3, [pc, #444]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	f003 0320 	and.w	r3, r3, #32
 8102a4c:	2b00      	cmp	r3, #0
 8102a4e:	d02d      	beq.n	8102aac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102a50:	4b6c      	ldr	r3, [pc, #432]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	08db      	lsrs	r3, r3, #3
 8102a56:	f003 0303 	and.w	r3, r3, #3
 8102a5a:	4a6b      	ldr	r2, [pc, #428]	; (8102c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8102a60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	ee07 3a90 	vmov	s15, r3
 8102a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a6c:	693b      	ldr	r3, [r7, #16]
 8102a6e:	ee07 3a90 	vmov	s15, r3
 8102a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a7a:	4b62      	ldr	r3, [pc, #392]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a82:	ee07 3a90 	vmov	s15, r3
 8102a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102aaa:	e087      	b.n	8102bbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102aac:	693b      	ldr	r3, [r7, #16]
 8102aae:	ee07 3a90 	vmov	s15, r3
 8102ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ab6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102c18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102abe:	4b51      	ldr	r3, [pc, #324]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ac6:	ee07 3a90 	vmov	s15, r3
 8102aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ad2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102aee:	e065      	b.n	8102bbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102af0:	693b      	ldr	r3, [r7, #16]
 8102af2:	ee07 3a90 	vmov	s15, r3
 8102af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102afa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b02:	4b40      	ldr	r3, [pc, #256]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b0a:	ee07 3a90 	vmov	s15, r3
 8102b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b32:	e043      	b.n	8102bbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b34:	693b      	ldr	r3, [r7, #16]
 8102b36:	ee07 3a90 	vmov	s15, r3
 8102b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102c20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b46:	4b2f      	ldr	r3, [pc, #188]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b4e:	ee07 3a90 	vmov	s15, r3
 8102b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b76:	e021      	b.n	8102bbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b78:	693b      	ldr	r3, [r7, #16]
 8102b7a:	ee07 3a90 	vmov	s15, r3
 8102b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b8a:	4b1e      	ldr	r3, [pc, #120]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b92:	ee07 3a90 	vmov	s15, r3
 8102b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102bba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102bbc:	4b11      	ldr	r3, [pc, #68]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102bc0:	0a5b      	lsrs	r3, r3, #9
 8102bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102bc6:	3301      	adds	r3, #1
 8102bc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102bca:	683b      	ldr	r3, [r7, #0]
 8102bcc:	ee07 3a90 	vmov	s15, r3
 8102bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102be0:	ee17 3a90 	vmov	r3, s15
 8102be4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102be6:	e005      	b.n	8102bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102be8:	2300      	movs	r3, #0
 8102bea:	61bb      	str	r3, [r7, #24]
    break;
 8102bec:	e002      	b.n	8102bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102bee:	4b07      	ldr	r3, [pc, #28]	; (8102c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102bf0:	61bb      	str	r3, [r7, #24]
    break;
 8102bf2:	bf00      	nop
  }

  return sysclockfreq;
 8102bf4:	69bb      	ldr	r3, [r7, #24]
}
 8102bf6:	4618      	mov	r0, r3
 8102bf8:	3724      	adds	r7, #36	; 0x24
 8102bfa:	46bd      	mov	sp, r7
 8102bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c00:	4770      	bx	lr
 8102c02:	bf00      	nop
 8102c04:	58024400 	.word	0x58024400
 8102c08:	03d09000 	.word	0x03d09000
 8102c0c:	003d0900 	.word	0x003d0900
 8102c10:	007a1200 	.word	0x007a1200
 8102c14:	46000000 	.word	0x46000000
 8102c18:	4c742400 	.word	0x4c742400
 8102c1c:	4a742400 	.word	0x4a742400
 8102c20:	4af42400 	.word	0x4af42400

08102c24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102c24:	b580      	push	{r7, lr}
 8102c26:	b086      	sub	sp, #24
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102c2c:	2300      	movs	r3, #0
 8102c2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102c30:	2300      	movs	r3, #0
 8102c32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102c3c:	2b00      	cmp	r3, #0
 8102c3e:	d03f      	beq.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102c48:	d02a      	beq.n	8102ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102c4e:	d824      	bhi.n	8102c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102c54:	d018      	beq.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102c5a:	d81e      	bhi.n	8102c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d003      	beq.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102c64:	d007      	beq.n	8102c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102c66:	e018      	b.n	8102c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c68:	4bab      	ldr	r3, [pc, #684]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c6c:	4aaa      	ldr	r2, [pc, #680]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102c74:	e015      	b.n	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	3304      	adds	r3, #4
 8102c7a:	2102      	movs	r1, #2
 8102c7c:	4618      	mov	r0, r3
 8102c7e:	f000 ff11 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102c82:	4603      	mov	r3, r0
 8102c84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102c86:	e00c      	b.n	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	3324      	adds	r3, #36	; 0x24
 8102c8c:	2102      	movs	r1, #2
 8102c8e:	4618      	mov	r0, r3
 8102c90:	f000 ffba 	bl	8103c08 <RCCEx_PLL3_Config>
 8102c94:	4603      	mov	r3, r0
 8102c96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102c98:	e003      	b.n	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102c9a:	2301      	movs	r3, #1
 8102c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8102c9e:	e000      	b.n	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ca2:	7dfb      	ldrb	r3, [r7, #23]
 8102ca4:	2b00      	cmp	r3, #0
 8102ca6:	d109      	bne.n	8102cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102ca8:	4b9b      	ldr	r3, [pc, #620]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102cb4:	4998      	ldr	r1, [pc, #608]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102cb6:	4313      	orrs	r3, r2
 8102cb8:	650b      	str	r3, [r1, #80]	; 0x50
 8102cba:	e001      	b.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cbc:	7dfb      	ldrb	r3, [r7, #23]
 8102cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d03d      	beq.n	8102d48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cd0:	2b04      	cmp	r3, #4
 8102cd2:	d826      	bhi.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102cd4:	a201      	add	r2, pc, #4	; (adr r2, 8102cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102cda:	bf00      	nop
 8102cdc:	08102cf1 	.word	0x08102cf1
 8102ce0:	08102cff 	.word	0x08102cff
 8102ce4:	08102d11 	.word	0x08102d11
 8102ce8:	08102d29 	.word	0x08102d29
 8102cec:	08102d29 	.word	0x08102d29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cf0:	4b89      	ldr	r3, [pc, #548]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cf4:	4a88      	ldr	r2, [pc, #544]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102cfc:	e015      	b.n	8102d2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	3304      	adds	r3, #4
 8102d02:	2100      	movs	r1, #0
 8102d04:	4618      	mov	r0, r3
 8102d06:	f000 fecd 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102d0a:	4603      	mov	r3, r0
 8102d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102d0e:	e00c      	b.n	8102d2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	3324      	adds	r3, #36	; 0x24
 8102d14:	2100      	movs	r1, #0
 8102d16:	4618      	mov	r0, r3
 8102d18:	f000 ff76 	bl	8103c08 <RCCEx_PLL3_Config>
 8102d1c:	4603      	mov	r3, r0
 8102d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102d20:	e003      	b.n	8102d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d22:	2301      	movs	r3, #1
 8102d24:	75fb      	strb	r3, [r7, #23]
      break;
 8102d26:	e000      	b.n	8102d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d2a:	7dfb      	ldrb	r3, [r7, #23]
 8102d2c:	2b00      	cmp	r3, #0
 8102d2e:	d109      	bne.n	8102d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102d30:	4b79      	ldr	r3, [pc, #484]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d34:	f023 0207 	bic.w	r2, r3, #7
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d3c:	4976      	ldr	r1, [pc, #472]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d3e:	4313      	orrs	r3, r2
 8102d40:	650b      	str	r3, [r1, #80]	; 0x50
 8102d42:	e001      	b.n	8102d48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d44:	7dfb      	ldrb	r3, [r7, #23]
 8102d46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d042      	beq.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102d5c:	d02b      	beq.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102d62:	d825      	bhi.n	8102db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102d64:	2bc0      	cmp	r3, #192	; 0xc0
 8102d66:	d028      	beq.n	8102dba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102d68:	2bc0      	cmp	r3, #192	; 0xc0
 8102d6a:	d821      	bhi.n	8102db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102d6c:	2b80      	cmp	r3, #128	; 0x80
 8102d6e:	d016      	beq.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102d70:	2b80      	cmp	r3, #128	; 0x80
 8102d72:	d81d      	bhi.n	8102db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	d002      	beq.n	8102d7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102d78:	2b40      	cmp	r3, #64	; 0x40
 8102d7a:	d007      	beq.n	8102d8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102d7c:	e018      	b.n	8102db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d7e:	4b66      	ldr	r3, [pc, #408]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d82:	4a65      	ldr	r2, [pc, #404]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102d8a:	e017      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	3304      	adds	r3, #4
 8102d90:	2100      	movs	r1, #0
 8102d92:	4618      	mov	r0, r3
 8102d94:	f000 fe86 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102d98:	4603      	mov	r3, r0
 8102d9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102d9c:	e00e      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	3324      	adds	r3, #36	; 0x24
 8102da2:	2100      	movs	r1, #0
 8102da4:	4618      	mov	r0, r3
 8102da6:	f000 ff2f 	bl	8103c08 <RCCEx_PLL3_Config>
 8102daa:	4603      	mov	r3, r0
 8102dac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102dae:	e005      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102db0:	2301      	movs	r3, #1
 8102db2:	75fb      	strb	r3, [r7, #23]
      break;
 8102db4:	e002      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102db6:	bf00      	nop
 8102db8:	e000      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dbc:	7dfb      	ldrb	r3, [r7, #23]
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	d109      	bne.n	8102dd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102dc2:	4b55      	ldr	r3, [pc, #340]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102dc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102dce:	4952      	ldr	r1, [pc, #328]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102dd0:	4313      	orrs	r3, r2
 8102dd2:	650b      	str	r3, [r1, #80]	; 0x50
 8102dd4:	e001      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dd6:	7dfb      	ldrb	r3, [r7, #23]
 8102dd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102de2:	2b00      	cmp	r3, #0
 8102de4:	d049      	beq.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102df0:	d030      	beq.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102df6:	d82a      	bhi.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102df8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102dfc:	d02c      	beq.n	8102e58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102dfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102e02:	d824      	bhi.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102e08:	d018      	beq.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102e0e:	d81e      	bhi.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d003      	beq.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102e18:	d007      	beq.n	8102e2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102e1a:	e018      	b.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e1c:	4b3e      	ldr	r3, [pc, #248]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e20:	4a3d      	ldr	r2, [pc, #244]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102e28:	e017      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	3304      	adds	r3, #4
 8102e2e:	2100      	movs	r1, #0
 8102e30:	4618      	mov	r0, r3
 8102e32:	f000 fe37 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102e36:	4603      	mov	r3, r0
 8102e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102e3a:	e00e      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	3324      	adds	r3, #36	; 0x24
 8102e40:	2100      	movs	r1, #0
 8102e42:	4618      	mov	r0, r3
 8102e44:	f000 fee0 	bl	8103c08 <RCCEx_PLL3_Config>
 8102e48:	4603      	mov	r3, r0
 8102e4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102e4c:	e005      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102e4e:	2301      	movs	r3, #1
 8102e50:	75fb      	strb	r3, [r7, #23]
      break;
 8102e52:	e002      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102e54:	bf00      	nop
 8102e56:	e000      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e5a:	7dfb      	ldrb	r3, [r7, #23]
 8102e5c:	2b00      	cmp	r3, #0
 8102e5e:	d10a      	bne.n	8102e76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102e60:	4b2d      	ldr	r3, [pc, #180]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102e6e:	492a      	ldr	r1, [pc, #168]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e70:	4313      	orrs	r3, r2
 8102e72:	658b      	str	r3, [r1, #88]	; 0x58
 8102e74:	e001      	b.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e76:	7dfb      	ldrb	r3, [r7, #23]
 8102e78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102e82:	2b00      	cmp	r3, #0
 8102e84:	d04c      	beq.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102e90:	d030      	beq.n	8102ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102e96:	d82a      	bhi.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102e98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102e9c:	d02c      	beq.n	8102ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8102e9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102ea2:	d824      	bhi.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102ea8:	d018      	beq.n	8102edc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102eae:	d81e      	bhi.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102eb0:	2b00      	cmp	r3, #0
 8102eb2:	d003      	beq.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102eb8:	d007      	beq.n	8102eca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102eba:	e018      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ebc:	4b16      	ldr	r3, [pc, #88]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ec0:	4a15      	ldr	r2, [pc, #84]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ec8:	e017      	b.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	3304      	adds	r3, #4
 8102ece:	2100      	movs	r1, #0
 8102ed0:	4618      	mov	r0, r3
 8102ed2:	f000 fde7 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102ed6:	4603      	mov	r3, r0
 8102ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102eda:	e00e      	b.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	3324      	adds	r3, #36	; 0x24
 8102ee0:	2100      	movs	r1, #0
 8102ee2:	4618      	mov	r0, r3
 8102ee4:	f000 fe90 	bl	8103c08 <RCCEx_PLL3_Config>
 8102ee8:	4603      	mov	r3, r0
 8102eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102eec:	e005      	b.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102eee:	2301      	movs	r3, #1
 8102ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8102ef2:	e002      	b.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102ef4:	bf00      	nop
 8102ef6:	e000      	b.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102efa:	7dfb      	ldrb	r3, [r7, #23]
 8102efc:	2b00      	cmp	r3, #0
 8102efe:	d10d      	bne.n	8102f1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102f00:	4b05      	ldr	r3, [pc, #20]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102f0e:	4902      	ldr	r1, [pc, #8]	; (8102f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f10:	4313      	orrs	r3, r2
 8102f12:	658b      	str	r3, [r1, #88]	; 0x58
 8102f14:	e004      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102f16:	bf00      	nop
 8102f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f1c:	7dfb      	ldrb	r3, [r7, #23]
 8102f1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d032      	beq.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f30:	2b30      	cmp	r3, #48	; 0x30
 8102f32:	d01c      	beq.n	8102f6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102f34:	2b30      	cmp	r3, #48	; 0x30
 8102f36:	d817      	bhi.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102f38:	2b20      	cmp	r3, #32
 8102f3a:	d00c      	beq.n	8102f56 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8102f3c:	2b20      	cmp	r3, #32
 8102f3e:	d813      	bhi.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d016      	beq.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102f44:	2b10      	cmp	r3, #16
 8102f46:	d10f      	bne.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f48:	4baf      	ldr	r3, [pc, #700]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f4c:	4aae      	ldr	r2, [pc, #696]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102f54:	e00e      	b.n	8102f74 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	3304      	adds	r3, #4
 8102f5a:	2102      	movs	r1, #2
 8102f5c:	4618      	mov	r0, r3
 8102f5e:	f000 fda1 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102f62:	4603      	mov	r3, r0
 8102f64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102f66:	e005      	b.n	8102f74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102f68:	2301      	movs	r3, #1
 8102f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8102f6c:	e002      	b.n	8102f74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102f6e:	bf00      	nop
 8102f70:	e000      	b.n	8102f74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f74:	7dfb      	ldrb	r3, [r7, #23]
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	d109      	bne.n	8102f8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102f7a:	4ba3      	ldr	r3, [pc, #652]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f86:	49a0      	ldr	r1, [pc, #640]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f88:	4313      	orrs	r3, r2
 8102f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102f8c:	e001      	b.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f8e:	7dfb      	ldrb	r3, [r7, #23]
 8102f90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	d047      	beq.n	810302e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102fa6:	d030      	beq.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8102fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102fac:	d82a      	bhi.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102fae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102fb2:	d02c      	beq.n	810300e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8102fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102fb8:	d824      	bhi.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102fbe:	d018      	beq.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102fc4:	d81e      	bhi.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102fc6:	2b00      	cmp	r3, #0
 8102fc8:	d003      	beq.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8102fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102fce:	d007      	beq.n	8102fe0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102fd0:	e018      	b.n	8103004 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fd2:	4b8d      	ldr	r3, [pc, #564]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fd6:	4a8c      	ldr	r2, [pc, #560]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102fde:	e017      	b.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	3304      	adds	r3, #4
 8102fe4:	2100      	movs	r1, #0
 8102fe6:	4618      	mov	r0, r3
 8102fe8:	f000 fd5c 	bl	8103aa4 <RCCEx_PLL2_Config>
 8102fec:	4603      	mov	r3, r0
 8102fee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102ff0:	e00e      	b.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	3324      	adds	r3, #36	; 0x24
 8102ff6:	2100      	movs	r1, #0
 8102ff8:	4618      	mov	r0, r3
 8102ffa:	f000 fe05 	bl	8103c08 <RCCEx_PLL3_Config>
 8102ffe:	4603      	mov	r3, r0
 8103000:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103002:	e005      	b.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103004:	2301      	movs	r3, #1
 8103006:	75fb      	strb	r3, [r7, #23]
      break;
 8103008:	e002      	b.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810300a:	bf00      	nop
 810300c:	e000      	b.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810300e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103010:	7dfb      	ldrb	r3, [r7, #23]
 8103012:	2b00      	cmp	r3, #0
 8103014:	d109      	bne.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103016:	4b7c      	ldr	r3, [pc, #496]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810301a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103022:	4979      	ldr	r1, [pc, #484]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103024:	4313      	orrs	r3, r2
 8103026:	650b      	str	r3, [r1, #80]	; 0x50
 8103028:	e001      	b.n	810302e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810302a:	7dfb      	ldrb	r3, [r7, #23]
 810302c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103036:	2b00      	cmp	r3, #0
 8103038:	d049      	beq.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810303e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103042:	d02e      	beq.n	81030a2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8103044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103048:	d828      	bhi.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810304a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810304e:	d02a      	beq.n	81030a6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103054:	d822      	bhi.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810305a:	d026      	beq.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x486>
 810305c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103060:	d81c      	bhi.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103066:	d010      	beq.n	810308a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810306c:	d816      	bhi.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810306e:	2b00      	cmp	r3, #0
 8103070:	d01d      	beq.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8103072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103076:	d111      	bne.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	3304      	adds	r3, #4
 810307c:	2101      	movs	r1, #1
 810307e:	4618      	mov	r0, r3
 8103080:	f000 fd10 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103084:	4603      	mov	r3, r0
 8103086:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103088:	e012      	b.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	3324      	adds	r3, #36	; 0x24
 810308e:	2101      	movs	r1, #1
 8103090:	4618      	mov	r0, r3
 8103092:	f000 fdb9 	bl	8103c08 <RCCEx_PLL3_Config>
 8103096:	4603      	mov	r3, r0
 8103098:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810309a:	e009      	b.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810309c:	2301      	movs	r3, #1
 810309e:	75fb      	strb	r3, [r7, #23]
      break;
 81030a0:	e006      	b.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81030a2:	bf00      	nop
 81030a4:	e004      	b.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81030a6:	bf00      	nop
 81030a8:	e002      	b.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81030aa:	bf00      	nop
 81030ac:	e000      	b.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81030ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030b0:	7dfb      	ldrb	r3, [r7, #23]
 81030b2:	2b00      	cmp	r3, #0
 81030b4:	d109      	bne.n	81030ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81030b6:	4b54      	ldr	r3, [pc, #336]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030c2:	4951      	ldr	r1, [pc, #324]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81030c4:	4313      	orrs	r3, r2
 81030c6:	650b      	str	r3, [r1, #80]	; 0x50
 81030c8:	e001      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030ca:	7dfb      	ldrb	r3, [r7, #23]
 81030cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	681b      	ldr	r3, [r3, #0]
 81030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81030d6:	2b00      	cmp	r3, #0
 81030d8:	d04b      	beq.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81030e4:	d02e      	beq.n	8103144 <HAL_RCCEx_PeriphCLKConfig+0x520>
 81030e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81030ea:	d828      	bhi.n	810313e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81030f0:	d02a      	beq.n	8103148 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81030f6:	d822      	bhi.n	810313e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81030f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81030fc:	d026      	beq.n	810314c <HAL_RCCEx_PeriphCLKConfig+0x528>
 81030fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103102:	d81c      	bhi.n	810313e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103108:	d010      	beq.n	810312c <HAL_RCCEx_PeriphCLKConfig+0x508>
 810310a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810310e:	d816      	bhi.n	810313e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103110:	2b00      	cmp	r3, #0
 8103112:	d01d      	beq.n	8103150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103118:	d111      	bne.n	810313e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	3304      	adds	r3, #4
 810311e:	2101      	movs	r1, #1
 8103120:	4618      	mov	r0, r3
 8103122:	f000 fcbf 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103126:	4603      	mov	r3, r0
 8103128:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810312a:	e012      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	3324      	adds	r3, #36	; 0x24
 8103130:	2101      	movs	r1, #1
 8103132:	4618      	mov	r0, r3
 8103134:	f000 fd68 	bl	8103c08 <RCCEx_PLL3_Config>
 8103138:	4603      	mov	r3, r0
 810313a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810313c:	e009      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810313e:	2301      	movs	r3, #1
 8103140:	75fb      	strb	r3, [r7, #23]
      break;
 8103142:	e006      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103144:	bf00      	nop
 8103146:	e004      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103148:	bf00      	nop
 810314a:	e002      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810314c:	bf00      	nop
 810314e:	e000      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103152:	7dfb      	ldrb	r3, [r7, #23]
 8103154:	2b00      	cmp	r3, #0
 8103156:	d10a      	bne.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103158:	4b2b      	ldr	r3, [pc, #172]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810315c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103166:	4928      	ldr	r1, [pc, #160]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103168:	4313      	orrs	r3, r2
 810316a:	658b      	str	r3, [r1, #88]	; 0x58
 810316c:	e001      	b.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810316e:	7dfb      	ldrb	r3, [r7, #23]
 8103170:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810317a:	2b00      	cmp	r3, #0
 810317c:	d02f      	beq.n	81031de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103186:	d00e      	beq.n	81031a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810318c:	d814      	bhi.n	81031b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810318e:	2b00      	cmp	r3, #0
 8103190:	d015      	beq.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103196:	d10f      	bne.n	81031b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103198:	4b1b      	ldr	r3, [pc, #108]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810319c:	4a1a      	ldr	r2, [pc, #104]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81031a4:	e00c      	b.n	81031c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	3304      	adds	r3, #4
 81031aa:	2101      	movs	r1, #1
 81031ac:	4618      	mov	r0, r3
 81031ae:	f000 fc79 	bl	8103aa4 <RCCEx_PLL2_Config>
 81031b2:	4603      	mov	r3, r0
 81031b4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81031b6:	e003      	b.n	81031c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81031b8:	2301      	movs	r3, #1
 81031ba:	75fb      	strb	r3, [r7, #23]
      break;
 81031bc:	e000      	b.n	81031c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81031be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81031c0:	7dfb      	ldrb	r3, [r7, #23]
 81031c2:	2b00      	cmp	r3, #0
 81031c4:	d109      	bne.n	81031da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81031c6:	4b10      	ldr	r3, [pc, #64]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81031ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81031d2:	490d      	ldr	r1, [pc, #52]	; (8103208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031d4:	4313      	orrs	r3, r2
 81031d6:	650b      	str	r3, [r1, #80]	; 0x50
 81031d8:	e001      	b.n	81031de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031da:	7dfb      	ldrb	r3, [r7, #23]
 81031dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d033      	beq.n	8103252 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031ee:	2b03      	cmp	r3, #3
 81031f0:	d81c      	bhi.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x608>
 81031f2:	a201      	add	r2, pc, #4	; (adr r2, 81031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031f8:	08103233 	.word	0x08103233
 81031fc:	0810320d 	.word	0x0810320d
 8103200:	0810321b 	.word	0x0810321b
 8103204:	08103233 	.word	0x08103233
 8103208:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810320c:	4bb9      	ldr	r3, [pc, #740]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103210:	4ab8      	ldr	r2, [pc, #736]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103218:	e00c      	b.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	3304      	adds	r3, #4
 810321e:	2102      	movs	r1, #2
 8103220:	4618      	mov	r0, r3
 8103222:	f000 fc3f 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103226:	4603      	mov	r3, r0
 8103228:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810322a:	e003      	b.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810322c:	2301      	movs	r3, #1
 810322e:	75fb      	strb	r3, [r7, #23]
      break;
 8103230:	e000      	b.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103234:	7dfb      	ldrb	r3, [r7, #23]
 8103236:	2b00      	cmp	r3, #0
 8103238:	d109      	bne.n	810324e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810323a:	4bae      	ldr	r3, [pc, #696]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810323e:	f023 0203 	bic.w	r2, r3, #3
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103246:	49ab      	ldr	r1, [pc, #684]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103248:	4313      	orrs	r3, r2
 810324a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810324c:	e001      	b.n	8103252 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810324e:	7dfb      	ldrb	r3, [r7, #23]
 8103250:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810325a:	2b00      	cmp	r3, #0
 810325c:	f000 8088 	beq.w	8103370 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103260:	4ba5      	ldr	r3, [pc, #660]	; (81034f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	4aa4      	ldr	r2, [pc, #656]	; (81034f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810326a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810326c:	f7fe fa36 	bl	81016dc <HAL_GetTick>
 8103270:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103272:	e009      	b.n	8103288 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103274:	f7fe fa32 	bl	81016dc <HAL_GetTick>
 8103278:	4602      	mov	r2, r0
 810327a:	693b      	ldr	r3, [r7, #16]
 810327c:	1ad3      	subs	r3, r2, r3
 810327e:	2b64      	cmp	r3, #100	; 0x64
 8103280:	d902      	bls.n	8103288 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103282:	2303      	movs	r3, #3
 8103284:	75fb      	strb	r3, [r7, #23]
        break;
 8103286:	e005      	b.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103288:	4b9b      	ldr	r3, [pc, #620]	; (81034f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810328a:	681b      	ldr	r3, [r3, #0]
 810328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103290:	2b00      	cmp	r3, #0
 8103292:	d0ef      	beq.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103294:	7dfb      	ldrb	r3, [r7, #23]
 8103296:	2b00      	cmp	r3, #0
 8103298:	d168      	bne.n	810336c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810329a:	4b96      	ldr	r3, [pc, #600]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810329c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81032a4:	4053      	eors	r3, r2
 81032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81032aa:	2b00      	cmp	r3, #0
 81032ac:	d013      	beq.n	81032d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81032ae:	4b91      	ldr	r3, [pc, #580]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81032b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81032b8:	4b8e      	ldr	r3, [pc, #568]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81032bc:	4a8d      	ldr	r2, [pc, #564]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81032c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81032c4:	4b8b      	ldr	r3, [pc, #556]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81032c8:	4a8a      	ldr	r2, [pc, #552]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81032ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81032d0:	4a88      	ldr	r2, [pc, #544]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032d2:	68fb      	ldr	r3, [r7, #12]
 81032d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81032dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81032e0:	d115      	bne.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81032e2:	f7fe f9fb 	bl	81016dc <HAL_GetTick>
 81032e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81032e8:	e00b      	b.n	8103302 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81032ea:	f7fe f9f7 	bl	81016dc <HAL_GetTick>
 81032ee:	4602      	mov	r2, r0
 81032f0:	693b      	ldr	r3, [r7, #16]
 81032f2:	1ad3      	subs	r3, r2, r3
 81032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 81032f8:	4293      	cmp	r3, r2
 81032fa:	d902      	bls.n	8103302 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81032fc:	2303      	movs	r3, #3
 81032fe:	75fb      	strb	r3, [r7, #23]
            break;
 8103300:	e005      	b.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103302:	4b7c      	ldr	r3, [pc, #496]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103306:	f003 0302 	and.w	r3, r3, #2
 810330a:	2b00      	cmp	r3, #0
 810330c:	d0ed      	beq.n	81032ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810330e:	7dfb      	ldrb	r3, [r7, #23]
 8103310:	2b00      	cmp	r3, #0
 8103312:	d128      	bne.n	8103366 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810331e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103322:	d10f      	bne.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103324:	4b73      	ldr	r3, [pc, #460]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103326:	691b      	ldr	r3, [r3, #16]
 8103328:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103332:	091b      	lsrs	r3, r3, #4
 8103334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103338:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810333c:	496d      	ldr	r1, [pc, #436]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810333e:	4313      	orrs	r3, r2
 8103340:	610b      	str	r3, [r1, #16]
 8103342:	e005      	b.n	8103350 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103344:	4b6b      	ldr	r3, [pc, #428]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103346:	691b      	ldr	r3, [r3, #16]
 8103348:	4a6a      	ldr	r2, [pc, #424]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810334a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810334e:	6113      	str	r3, [r2, #16]
 8103350:	4b68      	ldr	r3, [pc, #416]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810335e:	4965      	ldr	r1, [pc, #404]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103360:	4313      	orrs	r3, r2
 8103362:	670b      	str	r3, [r1, #112]	; 0x70
 8103364:	e004      	b.n	8103370 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103366:	7dfb      	ldrb	r3, [r7, #23]
 8103368:	75bb      	strb	r3, [r7, #22]
 810336a:	e001      	b.n	8103370 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810336c:	7dfb      	ldrb	r3, [r7, #23]
 810336e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	f003 0301 	and.w	r3, r3, #1
 8103378:	2b00      	cmp	r3, #0
 810337a:	d07e      	beq.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103380:	2b28      	cmp	r3, #40	; 0x28
 8103382:	d867      	bhi.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103384:	a201      	add	r2, pc, #4	; (adr r2, 810338c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810338a:	bf00      	nop
 810338c:	0810345b 	.word	0x0810345b
 8103390:	08103455 	.word	0x08103455
 8103394:	08103455 	.word	0x08103455
 8103398:	08103455 	.word	0x08103455
 810339c:	08103455 	.word	0x08103455
 81033a0:	08103455 	.word	0x08103455
 81033a4:	08103455 	.word	0x08103455
 81033a8:	08103455 	.word	0x08103455
 81033ac:	08103431 	.word	0x08103431
 81033b0:	08103455 	.word	0x08103455
 81033b4:	08103455 	.word	0x08103455
 81033b8:	08103455 	.word	0x08103455
 81033bc:	08103455 	.word	0x08103455
 81033c0:	08103455 	.word	0x08103455
 81033c4:	08103455 	.word	0x08103455
 81033c8:	08103455 	.word	0x08103455
 81033cc:	08103443 	.word	0x08103443
 81033d0:	08103455 	.word	0x08103455
 81033d4:	08103455 	.word	0x08103455
 81033d8:	08103455 	.word	0x08103455
 81033dc:	08103455 	.word	0x08103455
 81033e0:	08103455 	.word	0x08103455
 81033e4:	08103455 	.word	0x08103455
 81033e8:	08103455 	.word	0x08103455
 81033ec:	0810345b 	.word	0x0810345b
 81033f0:	08103455 	.word	0x08103455
 81033f4:	08103455 	.word	0x08103455
 81033f8:	08103455 	.word	0x08103455
 81033fc:	08103455 	.word	0x08103455
 8103400:	08103455 	.word	0x08103455
 8103404:	08103455 	.word	0x08103455
 8103408:	08103455 	.word	0x08103455
 810340c:	0810345b 	.word	0x0810345b
 8103410:	08103455 	.word	0x08103455
 8103414:	08103455 	.word	0x08103455
 8103418:	08103455 	.word	0x08103455
 810341c:	08103455 	.word	0x08103455
 8103420:	08103455 	.word	0x08103455
 8103424:	08103455 	.word	0x08103455
 8103428:	08103455 	.word	0x08103455
 810342c:	0810345b 	.word	0x0810345b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	3304      	adds	r3, #4
 8103434:	2101      	movs	r1, #1
 8103436:	4618      	mov	r0, r3
 8103438:	f000 fb34 	bl	8103aa4 <RCCEx_PLL2_Config>
 810343c:	4603      	mov	r3, r0
 810343e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103440:	e00c      	b.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	3324      	adds	r3, #36	; 0x24
 8103446:	2101      	movs	r1, #1
 8103448:	4618      	mov	r0, r3
 810344a:	f000 fbdd 	bl	8103c08 <RCCEx_PLL3_Config>
 810344e:	4603      	mov	r3, r0
 8103450:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103452:	e003      	b.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103454:	2301      	movs	r3, #1
 8103456:	75fb      	strb	r3, [r7, #23]
      break;
 8103458:	e000      	b.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810345a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810345c:	7dfb      	ldrb	r3, [r7, #23]
 810345e:	2b00      	cmp	r3, #0
 8103460:	d109      	bne.n	8103476 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103462:	4b24      	ldr	r3, [pc, #144]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103466:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810346a:	687b      	ldr	r3, [r7, #4]
 810346c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810346e:	4921      	ldr	r1, [pc, #132]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103470:	4313      	orrs	r3, r2
 8103472:	654b      	str	r3, [r1, #84]	; 0x54
 8103474:	e001      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103476:	7dfb      	ldrb	r3, [r7, #23]
 8103478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	681b      	ldr	r3, [r3, #0]
 810347e:	f003 0302 	and.w	r3, r3, #2
 8103482:	2b00      	cmp	r3, #0
 8103484:	d03c      	beq.n	8103500 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810348a:	2b05      	cmp	r3, #5
 810348c:	d820      	bhi.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810348e:	a201      	add	r2, pc, #4	; (adr r2, 8103494 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103494:	081034d7 	.word	0x081034d7
 8103498:	081034ad 	.word	0x081034ad
 810349c:	081034bf 	.word	0x081034bf
 81034a0:	081034d7 	.word	0x081034d7
 81034a4:	081034d7 	.word	0x081034d7
 81034a8:	081034d7 	.word	0x081034d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	3304      	adds	r3, #4
 81034b0:	2101      	movs	r1, #1
 81034b2:	4618      	mov	r0, r3
 81034b4:	f000 faf6 	bl	8103aa4 <RCCEx_PLL2_Config>
 81034b8:	4603      	mov	r3, r0
 81034ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81034bc:	e00c      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	3324      	adds	r3, #36	; 0x24
 81034c2:	2101      	movs	r1, #1
 81034c4:	4618      	mov	r0, r3
 81034c6:	f000 fb9f 	bl	8103c08 <RCCEx_PLL3_Config>
 81034ca:	4603      	mov	r3, r0
 81034cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81034ce:	e003      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034d0:	2301      	movs	r3, #1
 81034d2:	75fb      	strb	r3, [r7, #23]
      break;
 81034d4:	e000      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81034d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034d8:	7dfb      	ldrb	r3, [r7, #23]
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d10e      	bne.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81034de:	4b05      	ldr	r3, [pc, #20]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034e2:	f023 0207 	bic.w	r2, r3, #7
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81034ea:	4902      	ldr	r1, [pc, #8]	; (81034f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034ec:	4313      	orrs	r3, r2
 81034ee:	654b      	str	r3, [r1, #84]	; 0x54
 81034f0:	e006      	b.n	8103500 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81034f2:	bf00      	nop
 81034f4:	58024400 	.word	0x58024400
 81034f8:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034fc:	7dfb      	ldrb	r3, [r7, #23]
 81034fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	f003 0304 	and.w	r3, r3, #4
 8103508:	2b00      	cmp	r3, #0
 810350a:	d039      	beq.n	8103580 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103512:	2b05      	cmp	r3, #5
 8103514:	d820      	bhi.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103516:	a201      	add	r2, pc, #4	; (adr r2, 810351c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810351c:	0810355f 	.word	0x0810355f
 8103520:	08103535 	.word	0x08103535
 8103524:	08103547 	.word	0x08103547
 8103528:	0810355f 	.word	0x0810355f
 810352c:	0810355f 	.word	0x0810355f
 8103530:	0810355f 	.word	0x0810355f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	3304      	adds	r3, #4
 8103538:	2101      	movs	r1, #1
 810353a:	4618      	mov	r0, r3
 810353c:	f000 fab2 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103540:	4603      	mov	r3, r0
 8103542:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103544:	e00c      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	3324      	adds	r3, #36	; 0x24
 810354a:	2101      	movs	r1, #1
 810354c:	4618      	mov	r0, r3
 810354e:	f000 fb5b 	bl	8103c08 <RCCEx_PLL3_Config>
 8103552:	4603      	mov	r3, r0
 8103554:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103556:	e003      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103558:	2301      	movs	r3, #1
 810355a:	75fb      	strb	r3, [r7, #23]
      break;
 810355c:	e000      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810355e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103560:	7dfb      	ldrb	r3, [r7, #23]
 8103562:	2b00      	cmp	r3, #0
 8103564:	d10a      	bne.n	810357c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103566:	4bb7      	ldr	r3, [pc, #732]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810356a:	f023 0207 	bic.w	r2, r3, #7
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103574:	49b3      	ldr	r1, [pc, #716]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103576:	4313      	orrs	r3, r2
 8103578:	658b      	str	r3, [r1, #88]	; 0x58
 810357a:	e001      	b.n	8103580 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810357c:	7dfb      	ldrb	r3, [r7, #23]
 810357e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	f003 0320 	and.w	r3, r3, #32
 8103588:	2b00      	cmp	r3, #0
 810358a:	d04b      	beq.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103596:	d02e      	beq.n	81035f6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810359c:	d828      	bhi.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81035a2:	d02a      	beq.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81035a8:	d822      	bhi.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81035aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81035ae:	d026      	beq.n	81035fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81035b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81035b4:	d81c      	bhi.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81035b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81035ba:	d010      	beq.n	81035de <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 81035bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81035c0:	d816      	bhi.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d01d      	beq.n	8103602 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81035c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81035ca:	d111      	bne.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	3304      	adds	r3, #4
 81035d0:	2100      	movs	r1, #0
 81035d2:	4618      	mov	r0, r3
 81035d4:	f000 fa66 	bl	8103aa4 <RCCEx_PLL2_Config>
 81035d8:	4603      	mov	r3, r0
 81035da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81035dc:	e012      	b.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	3324      	adds	r3, #36	; 0x24
 81035e2:	2102      	movs	r1, #2
 81035e4:	4618      	mov	r0, r3
 81035e6:	f000 fb0f 	bl	8103c08 <RCCEx_PLL3_Config>
 81035ea:	4603      	mov	r3, r0
 81035ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81035ee:	e009      	b.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81035f0:	2301      	movs	r3, #1
 81035f2:	75fb      	strb	r3, [r7, #23]
      break;
 81035f4:	e006      	b.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81035f6:	bf00      	nop
 81035f8:	e004      	b.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81035fa:	bf00      	nop
 81035fc:	e002      	b.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81035fe:	bf00      	nop
 8103600:	e000      	b.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103604:	7dfb      	ldrb	r3, [r7, #23]
 8103606:	2b00      	cmp	r3, #0
 8103608:	d10a      	bne.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810360a:	4b8e      	ldr	r3, [pc, #568]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810360e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103618:	498a      	ldr	r1, [pc, #552]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810361a:	4313      	orrs	r3, r2
 810361c:	654b      	str	r3, [r1, #84]	; 0x54
 810361e:	e001      	b.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103620:	7dfb      	ldrb	r3, [r7, #23]
 8103622:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810362c:	2b00      	cmp	r3, #0
 810362e:	d04b      	beq.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103636:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810363a:	d02e      	beq.n	810369a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810363c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103640:	d828      	bhi.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103646:	d02a      	beq.n	810369e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810364c:	d822      	bhi.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810364e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103652:	d026      	beq.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103658:	d81c      	bhi.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810365e:	d010      	beq.n	8103682 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103664:	d816      	bhi.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103666:	2b00      	cmp	r3, #0
 8103668:	d01d      	beq.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810366e:	d111      	bne.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	3304      	adds	r3, #4
 8103674:	2100      	movs	r1, #0
 8103676:	4618      	mov	r0, r3
 8103678:	f000 fa14 	bl	8103aa4 <RCCEx_PLL2_Config>
 810367c:	4603      	mov	r3, r0
 810367e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103680:	e012      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	3324      	adds	r3, #36	; 0x24
 8103686:	2102      	movs	r1, #2
 8103688:	4618      	mov	r0, r3
 810368a:	f000 fabd 	bl	8103c08 <RCCEx_PLL3_Config>
 810368e:	4603      	mov	r3, r0
 8103690:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103692:	e009      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103694:	2301      	movs	r3, #1
 8103696:	75fb      	strb	r3, [r7, #23]
      break;
 8103698:	e006      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810369a:	bf00      	nop
 810369c:	e004      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810369e:	bf00      	nop
 81036a0:	e002      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81036a2:	bf00      	nop
 81036a4:	e000      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81036a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036a8:	7dfb      	ldrb	r3, [r7, #23]
 81036aa:	2b00      	cmp	r3, #0
 81036ac:	d10a      	bne.n	81036c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81036ae:	4b65      	ldr	r3, [pc, #404]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81036bc:	4961      	ldr	r1, [pc, #388]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81036be:	4313      	orrs	r3, r2
 81036c0:	658b      	str	r3, [r1, #88]	; 0x58
 81036c2:	e001      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036c4:	7dfb      	ldrb	r3, [r7, #23]
 81036c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	681b      	ldr	r3, [r3, #0]
 81036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81036d0:	2b00      	cmp	r3, #0
 81036d2:	d04b      	beq.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81036da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81036de:	d02e      	beq.n	810373e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81036e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81036e4:	d828      	bhi.n	8103738 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81036e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81036ea:	d02a      	beq.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81036ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81036f0:	d822      	bhi.n	8103738 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81036f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81036f6:	d026      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81036f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81036fc:	d81c      	bhi.n	8103738 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81036fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103702:	d010      	beq.n	8103726 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103708:	d816      	bhi.n	8103738 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810370a:	2b00      	cmp	r3, #0
 810370c:	d01d      	beq.n	810374a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103712:	d111      	bne.n	8103738 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	3304      	adds	r3, #4
 8103718:	2100      	movs	r1, #0
 810371a:	4618      	mov	r0, r3
 810371c:	f000 f9c2 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103720:	4603      	mov	r3, r0
 8103722:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103724:	e012      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	3324      	adds	r3, #36	; 0x24
 810372a:	2102      	movs	r1, #2
 810372c:	4618      	mov	r0, r3
 810372e:	f000 fa6b 	bl	8103c08 <RCCEx_PLL3_Config>
 8103732:	4603      	mov	r3, r0
 8103734:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103736:	e009      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103738:	2301      	movs	r3, #1
 810373a:	75fb      	strb	r3, [r7, #23]
      break;
 810373c:	e006      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810373e:	bf00      	nop
 8103740:	e004      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103742:	bf00      	nop
 8103744:	e002      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103746:	bf00      	nop
 8103748:	e000      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810374a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810374c:	7dfb      	ldrb	r3, [r7, #23]
 810374e:	2b00      	cmp	r3, #0
 8103750:	d10a      	bne.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103752:	4b3c      	ldr	r3, [pc, #240]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103760:	4938      	ldr	r1, [pc, #224]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103762:	4313      	orrs	r3, r2
 8103764:	658b      	str	r3, [r1, #88]	; 0x58
 8103766:	e001      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103768:	7dfb      	ldrb	r3, [r7, #23]
 810376a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	f003 0308 	and.w	r3, r3, #8
 8103774:	2b00      	cmp	r3, #0
 8103776:	d01a      	beq.n	81037ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103782:	d10a      	bne.n	810379a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	3324      	adds	r3, #36	; 0x24
 8103788:	2102      	movs	r1, #2
 810378a:	4618      	mov	r0, r3
 810378c:	f000 fa3c 	bl	8103c08 <RCCEx_PLL3_Config>
 8103790:	4603      	mov	r3, r0
 8103792:	2b00      	cmp	r3, #0
 8103794:	d001      	beq.n	810379a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103796:	2301      	movs	r3, #1
 8103798:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810379a:	4b2a      	ldr	r3, [pc, #168]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810379e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81037a8:	4926      	ldr	r1, [pc, #152]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037aa:	4313      	orrs	r3, r2
 81037ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	f003 0310 	and.w	r3, r3, #16
 81037b6:	2b00      	cmp	r3, #0
 81037b8:	d01a      	beq.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81037c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81037c4:	d10a      	bne.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	3324      	adds	r3, #36	; 0x24
 81037ca:	2102      	movs	r1, #2
 81037cc:	4618      	mov	r0, r3
 81037ce:	f000 fa1b 	bl	8103c08 <RCCEx_PLL3_Config>
 81037d2:	4603      	mov	r3, r0
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d001      	beq.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81037d8:	2301      	movs	r3, #1
 81037da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81037dc:	4b19      	ldr	r3, [pc, #100]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81037ea:	4916      	ldr	r1, [pc, #88]	; (8103844 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037ec:	4313      	orrs	r3, r2
 81037ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81037f8:	2b00      	cmp	r3, #0
 81037fa:	d036      	beq.n	810386a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103806:	d01f      	beq.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810380c:	d817      	bhi.n	810383e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810380e:	2b00      	cmp	r3, #0
 8103810:	d003      	beq.n	810381a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103816:	d009      	beq.n	810382c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103818:	e011      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810381a:	687b      	ldr	r3, [r7, #4]
 810381c:	3304      	adds	r3, #4
 810381e:	2100      	movs	r1, #0
 8103820:	4618      	mov	r0, r3
 8103822:	f000 f93f 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103826:	4603      	mov	r3, r0
 8103828:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810382a:	e00e      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	3324      	adds	r3, #36	; 0x24
 8103830:	2102      	movs	r1, #2
 8103832:	4618      	mov	r0, r3
 8103834:	f000 f9e8 	bl	8103c08 <RCCEx_PLL3_Config>
 8103838:	4603      	mov	r3, r0
 810383a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810383c:	e005      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810383e:	2301      	movs	r3, #1
 8103840:	75fb      	strb	r3, [r7, #23]
      break;
 8103842:	e002      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103844:	58024400 	.word	0x58024400
      break;
 8103848:	bf00      	nop
    }

    if(ret == HAL_OK)
 810384a:	7dfb      	ldrb	r3, [r7, #23]
 810384c:	2b00      	cmp	r3, #0
 810384e:	d10a      	bne.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103850:	4b93      	ldr	r3, [pc, #588]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810385e:	4990      	ldr	r1, [pc, #576]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103860:	4313      	orrs	r3, r2
 8103862:	658b      	str	r3, [r1, #88]	; 0x58
 8103864:	e001      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103866:	7dfb      	ldrb	r3, [r7, #23]
 8103868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103872:	2b00      	cmp	r3, #0
 8103874:	d033      	beq.n	81038de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810387c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103880:	d01c      	beq.n	81038bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103886:	d816      	bhi.n	81038b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810388c:	d003      	beq.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810388e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103892:	d007      	beq.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103894:	e00f      	b.n	81038b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103896:	4b82      	ldr	r3, [pc, #520]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810389a:	4a81      	ldr	r2, [pc, #516]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81038a2:	e00c      	b.n	81038be <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	3324      	adds	r3, #36	; 0x24
 81038a8:	2101      	movs	r1, #1
 81038aa:	4618      	mov	r0, r3
 81038ac:	f000 f9ac 	bl	8103c08 <RCCEx_PLL3_Config>
 81038b0:	4603      	mov	r3, r0
 81038b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81038b4:	e003      	b.n	81038be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81038b6:	2301      	movs	r3, #1
 81038b8:	75fb      	strb	r3, [r7, #23]
      break;
 81038ba:	e000      	b.n	81038be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81038bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038be:	7dfb      	ldrb	r3, [r7, #23]
 81038c0:	2b00      	cmp	r3, #0
 81038c2:	d10a      	bne.n	81038da <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81038c4:	4b76      	ldr	r3, [pc, #472]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81038d2:	4973      	ldr	r1, [pc, #460]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038d4:	4313      	orrs	r3, r2
 81038d6:	654b      	str	r3, [r1, #84]	; 0x54
 81038d8:	e001      	b.n	81038de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038da:	7dfb      	ldrb	r3, [r7, #23]
 81038dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81038e6:	2b00      	cmp	r3, #0
 81038e8:	d029      	beq.n	810393e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038ee:	2b00      	cmp	r3, #0
 81038f0:	d003      	beq.n	81038fa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81038f6:	d007      	beq.n	8103908 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81038f8:	e00f      	b.n	810391a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038fa:	4b69      	ldr	r3, [pc, #420]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038fe:	4a68      	ldr	r2, [pc, #416]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103906:	e00b      	b.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	3304      	adds	r3, #4
 810390c:	2102      	movs	r1, #2
 810390e:	4618      	mov	r0, r3
 8103910:	f000 f8c8 	bl	8103aa4 <RCCEx_PLL2_Config>
 8103914:	4603      	mov	r3, r0
 8103916:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103918:	e002      	b.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810391a:	2301      	movs	r3, #1
 810391c:	75fb      	strb	r3, [r7, #23]
      break;
 810391e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103920:	7dfb      	ldrb	r3, [r7, #23]
 8103922:	2b00      	cmp	r3, #0
 8103924:	d109      	bne.n	810393a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103926:	4b5e      	ldr	r3, [pc, #376]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810392a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103932:	495b      	ldr	r1, [pc, #364]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103934:	4313      	orrs	r3, r2
 8103936:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103938:	e001      	b.n	810393e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810393a:	7dfb      	ldrb	r3, [r7, #23]
 810393c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103946:	2b00      	cmp	r3, #0
 8103948:	d00a      	beq.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	3324      	adds	r3, #36	; 0x24
 810394e:	2102      	movs	r1, #2
 8103950:	4618      	mov	r0, r3
 8103952:	f000 f959 	bl	8103c08 <RCCEx_PLL3_Config>
 8103956:	4603      	mov	r3, r0
 8103958:	2b00      	cmp	r3, #0
 810395a:	d001      	beq.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810395c:	2301      	movs	r3, #1
 810395e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103968:	2b00      	cmp	r3, #0
 810396a:	d030      	beq.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103974:	d017      	beq.n	81039a6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810397a:	d811      	bhi.n	81039a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103980:	d013      	beq.n	81039aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103986:	d80b      	bhi.n	81039a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103988:	2b00      	cmp	r3, #0
 810398a:	d010      	beq.n	81039ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103990:	d106      	bne.n	81039a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103992:	4b43      	ldr	r3, [pc, #268]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103996:	4a42      	ldr	r2, [pc, #264]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810399c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810399e:	e007      	b.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039a0:	2301      	movs	r3, #1
 81039a2:	75fb      	strb	r3, [r7, #23]
      break;
 81039a4:	e004      	b.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81039a6:	bf00      	nop
 81039a8:	e002      	b.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81039aa:	bf00      	nop
 81039ac:	e000      	b.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81039ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039b0:	7dfb      	ldrb	r3, [r7, #23]
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d109      	bne.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81039b6:	4b3a      	ldr	r3, [pc, #232]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81039c2:	4937      	ldr	r1, [pc, #220]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039c4:	4313      	orrs	r3, r2
 81039c6:	654b      	str	r3, [r1, #84]	; 0x54
 81039c8:	e001      	b.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039ca:	7dfb      	ldrb	r3, [r7, #23]
 81039cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d008      	beq.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81039da:	4b31      	ldr	r3, [pc, #196]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81039e6:	492e      	ldr	r1, [pc, #184]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039e8:	4313      	orrs	r3, r2
 81039ea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	d009      	beq.n	8103a0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81039f8:	4b29      	ldr	r3, [pc, #164]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039fa:	691b      	ldr	r3, [r3, #16]
 81039fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103a06:	4926      	ldr	r1, [pc, #152]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a08:	4313      	orrs	r3, r2
 8103a0a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d008      	beq.n	8103a2a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103a18:	4b21      	ldr	r3, [pc, #132]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103a24:	491e      	ldr	r1, [pc, #120]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a26:	4313      	orrs	r3, r2
 8103a28:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103a32:	2b00      	cmp	r3, #0
 8103a34:	d00d      	beq.n	8103a52 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103a36:	4b1a      	ldr	r3, [pc, #104]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a38:	691b      	ldr	r3, [r3, #16]
 8103a3a:	4a19      	ldr	r2, [pc, #100]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103a40:	6113      	str	r3, [r2, #16]
 8103a42:	4b17      	ldr	r3, [pc, #92]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a44:	691a      	ldr	r2, [r3, #16]
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103a4c:	4914      	ldr	r1, [pc, #80]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a4e:	4313      	orrs	r3, r2
 8103a50:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	da08      	bge.n	8103a6c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103a5a:	4b11      	ldr	r3, [pc, #68]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a66:	490e      	ldr	r1, [pc, #56]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a68:	4313      	orrs	r3, r2
 8103a6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103a74:	2b00      	cmp	r3, #0
 8103a76:	d009      	beq.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103a78:	4b09      	ldr	r3, [pc, #36]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103a86:	4906      	ldr	r1, [pc, #24]	; (8103aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a88:	4313      	orrs	r3, r2
 8103a8a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103a8c:	7dbb      	ldrb	r3, [r7, #22]
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d101      	bne.n	8103a96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103a92:	2300      	movs	r3, #0
 8103a94:	e000      	b.n	8103a98 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103a96:	2301      	movs	r3, #1
}
 8103a98:	4618      	mov	r0, r3
 8103a9a:	3718      	adds	r7, #24
 8103a9c:	46bd      	mov	sp, r7
 8103a9e:	bd80      	pop	{r7, pc}
 8103aa0:	58024400 	.word	0x58024400

08103aa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103aa4:	b580      	push	{r7, lr}
 8103aa6:	b084      	sub	sp, #16
 8103aa8:	af00      	add	r7, sp, #0
 8103aaa:	6078      	str	r0, [r7, #4]
 8103aac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103aae:	2300      	movs	r3, #0
 8103ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103ab2:	4b54      	ldr	r3, [pc, #336]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ab6:	f003 0303 	and.w	r3, r3, #3
 8103aba:	2b03      	cmp	r3, #3
 8103abc:	d101      	bne.n	8103ac2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103abe:	2301      	movs	r3, #1
 8103ac0:	e09b      	b.n	8103bfa <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103ac2:	4b50      	ldr	r3, [pc, #320]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103ac4:	681b      	ldr	r3, [r3, #0]
 8103ac6:	4a4f      	ldr	r2, [pc, #316]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103ac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103ace:	f7fd fe05 	bl	81016dc <HAL_GetTick>
 8103ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103ad4:	e008      	b.n	8103ae8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103ad6:	f7fd fe01 	bl	81016dc <HAL_GetTick>
 8103ada:	4602      	mov	r2, r0
 8103adc:	68bb      	ldr	r3, [r7, #8]
 8103ade:	1ad3      	subs	r3, r2, r3
 8103ae0:	2b02      	cmp	r3, #2
 8103ae2:	d901      	bls.n	8103ae8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103ae4:	2303      	movs	r3, #3
 8103ae6:	e088      	b.n	8103bfa <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103ae8:	4b46      	ldr	r3, [pc, #280]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d1f0      	bne.n	8103ad6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103af4:	4b43      	ldr	r3, [pc, #268]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103af8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	031b      	lsls	r3, r3, #12
 8103b02:	4940      	ldr	r1, [pc, #256]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b04:	4313      	orrs	r3, r2
 8103b06:	628b      	str	r3, [r1, #40]	; 0x28
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	685b      	ldr	r3, [r3, #4]
 8103b0c:	3b01      	subs	r3, #1
 8103b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	689b      	ldr	r3, [r3, #8]
 8103b16:	3b01      	subs	r3, #1
 8103b18:	025b      	lsls	r3, r3, #9
 8103b1a:	b29b      	uxth	r3, r3
 8103b1c:	431a      	orrs	r2, r3
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	68db      	ldr	r3, [r3, #12]
 8103b22:	3b01      	subs	r3, #1
 8103b24:	041b      	lsls	r3, r3, #16
 8103b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103b2a:	431a      	orrs	r2, r3
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	691b      	ldr	r3, [r3, #16]
 8103b30:	3b01      	subs	r3, #1
 8103b32:	061b      	lsls	r3, r3, #24
 8103b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103b38:	4932      	ldr	r1, [pc, #200]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b3a:	4313      	orrs	r3, r2
 8103b3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103b3e:	4b31      	ldr	r3, [pc, #196]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	695b      	ldr	r3, [r3, #20]
 8103b4a:	492e      	ldr	r1, [pc, #184]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b4c:	4313      	orrs	r3, r2
 8103b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103b50:	4b2c      	ldr	r3, [pc, #176]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b54:	f023 0220 	bic.w	r2, r3, #32
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	699b      	ldr	r3, [r3, #24]
 8103b5c:	4929      	ldr	r1, [pc, #164]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b5e:	4313      	orrs	r3, r2
 8103b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103b62:	4b28      	ldr	r3, [pc, #160]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b66:	4a27      	ldr	r2, [pc, #156]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b68:	f023 0310 	bic.w	r3, r3, #16
 8103b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103b6e:	4b25      	ldr	r3, [pc, #148]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103b76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103b7a:	687a      	ldr	r2, [r7, #4]
 8103b7c:	69d2      	ldr	r2, [r2, #28]
 8103b7e:	00d2      	lsls	r2, r2, #3
 8103b80:	4920      	ldr	r1, [pc, #128]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b82:	4313      	orrs	r3, r2
 8103b84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103b86:	4b1f      	ldr	r3, [pc, #124]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b8a:	4a1e      	ldr	r2, [pc, #120]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b8c:	f043 0310 	orr.w	r3, r3, #16
 8103b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103b92:	683b      	ldr	r3, [r7, #0]
 8103b94:	2b00      	cmp	r3, #0
 8103b96:	d106      	bne.n	8103ba6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103b98:	4b1a      	ldr	r3, [pc, #104]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b9c:	4a19      	ldr	r2, [pc, #100]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103b9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103ba4:	e00f      	b.n	8103bc6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103ba6:	683b      	ldr	r3, [r7, #0]
 8103ba8:	2b01      	cmp	r3, #1
 8103baa:	d106      	bne.n	8103bba <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103bac:	4b15      	ldr	r3, [pc, #84]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bb0:	4a14      	ldr	r2, [pc, #80]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103bb8:	e005      	b.n	8103bc6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103bba:	4b12      	ldr	r3, [pc, #72]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bbe:	4a11      	ldr	r2, [pc, #68]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103bc6:	4b0f      	ldr	r3, [pc, #60]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a0e      	ldr	r2, [pc, #56]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103bd2:	f7fd fd83 	bl	81016dc <HAL_GetTick>
 8103bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103bd8:	e008      	b.n	8103bec <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103bda:	f7fd fd7f 	bl	81016dc <HAL_GetTick>
 8103bde:	4602      	mov	r2, r0
 8103be0:	68bb      	ldr	r3, [r7, #8]
 8103be2:	1ad3      	subs	r3, r2, r3
 8103be4:	2b02      	cmp	r3, #2
 8103be6:	d901      	bls.n	8103bec <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103be8:	2303      	movs	r3, #3
 8103bea:	e006      	b.n	8103bfa <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103bec:	4b05      	ldr	r3, [pc, #20]	; (8103c04 <RCCEx_PLL2_Config+0x160>)
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103bf4:	2b00      	cmp	r3, #0
 8103bf6:	d0f0      	beq.n	8103bda <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8103bfa:	4618      	mov	r0, r3
 8103bfc:	3710      	adds	r7, #16
 8103bfe:	46bd      	mov	sp, r7
 8103c00:	bd80      	pop	{r7, pc}
 8103c02:	bf00      	nop
 8103c04:	58024400 	.word	0x58024400

08103c08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103c08:	b580      	push	{r7, lr}
 8103c0a:	b084      	sub	sp, #16
 8103c0c:	af00      	add	r7, sp, #0
 8103c0e:	6078      	str	r0, [r7, #4]
 8103c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103c12:	2300      	movs	r3, #0
 8103c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103c16:	4b54      	ldr	r3, [pc, #336]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c1a:	f003 0303 	and.w	r3, r3, #3
 8103c1e:	2b03      	cmp	r3, #3
 8103c20:	d101      	bne.n	8103c26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103c22:	2301      	movs	r3, #1
 8103c24:	e09b      	b.n	8103d5e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103c26:	4b50      	ldr	r3, [pc, #320]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c28:	681b      	ldr	r3, [r3, #0]
 8103c2a:	4a4f      	ldr	r2, [pc, #316]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103c32:	f7fd fd53 	bl	81016dc <HAL_GetTick>
 8103c36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103c38:	e008      	b.n	8103c4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103c3a:	f7fd fd4f 	bl	81016dc <HAL_GetTick>
 8103c3e:	4602      	mov	r2, r0
 8103c40:	68bb      	ldr	r3, [r7, #8]
 8103c42:	1ad3      	subs	r3, r2, r3
 8103c44:	2b02      	cmp	r3, #2
 8103c46:	d901      	bls.n	8103c4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103c48:	2303      	movs	r3, #3
 8103c4a:	e088      	b.n	8103d5e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103c4c:	4b46      	ldr	r3, [pc, #280]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	d1f0      	bne.n	8103c3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103c58:	4b43      	ldr	r3, [pc, #268]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	681b      	ldr	r3, [r3, #0]
 8103c64:	051b      	lsls	r3, r3, #20
 8103c66:	4940      	ldr	r1, [pc, #256]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c68:	4313      	orrs	r3, r2
 8103c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	685b      	ldr	r3, [r3, #4]
 8103c70:	3b01      	subs	r3, #1
 8103c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	689b      	ldr	r3, [r3, #8]
 8103c7a:	3b01      	subs	r3, #1
 8103c7c:	025b      	lsls	r3, r3, #9
 8103c7e:	b29b      	uxth	r3, r3
 8103c80:	431a      	orrs	r2, r3
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	68db      	ldr	r3, [r3, #12]
 8103c86:	3b01      	subs	r3, #1
 8103c88:	041b      	lsls	r3, r3, #16
 8103c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103c8e:	431a      	orrs	r2, r3
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	691b      	ldr	r3, [r3, #16]
 8103c94:	3b01      	subs	r3, #1
 8103c96:	061b      	lsls	r3, r3, #24
 8103c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103c9c:	4932      	ldr	r1, [pc, #200]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103c9e:	4313      	orrs	r3, r2
 8103ca0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103ca2:	4b31      	ldr	r3, [pc, #196]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	695b      	ldr	r3, [r3, #20]
 8103cae:	492e      	ldr	r1, [pc, #184]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cb0:	4313      	orrs	r3, r2
 8103cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103cb4:	4b2c      	ldr	r3, [pc, #176]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	699b      	ldr	r3, [r3, #24]
 8103cc0:	4929      	ldr	r1, [pc, #164]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cc2:	4313      	orrs	r3, r2
 8103cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103cc6:	4b28      	ldr	r3, [pc, #160]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cca:	4a27      	ldr	r2, [pc, #156]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103cd2:	4b25      	ldr	r3, [pc, #148]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103cda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103cde:	687a      	ldr	r2, [r7, #4]
 8103ce0:	69d2      	ldr	r2, [r2, #28]
 8103ce2:	00d2      	lsls	r2, r2, #3
 8103ce4:	4920      	ldr	r1, [pc, #128]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103ce6:	4313      	orrs	r3, r2
 8103ce8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103cea:	4b1f      	ldr	r3, [pc, #124]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cee:	4a1e      	ldr	r2, [pc, #120]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103cf6:	683b      	ldr	r3, [r7, #0]
 8103cf8:	2b00      	cmp	r3, #0
 8103cfa:	d106      	bne.n	8103d0a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103cfc:	4b1a      	ldr	r3, [pc, #104]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d00:	4a19      	ldr	r2, [pc, #100]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103d08:	e00f      	b.n	8103d2a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103d0a:	683b      	ldr	r3, [r7, #0]
 8103d0c:	2b01      	cmp	r3, #1
 8103d0e:	d106      	bne.n	8103d1e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103d10:	4b15      	ldr	r3, [pc, #84]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d14:	4a14      	ldr	r2, [pc, #80]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103d1c:	e005      	b.n	8103d2a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103d1e:	4b12      	ldr	r3, [pc, #72]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d22:	4a11      	ldr	r2, [pc, #68]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103d28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103d2a:	4b0f      	ldr	r3, [pc, #60]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d2c:	681b      	ldr	r3, [r3, #0]
 8103d2e:	4a0e      	ldr	r2, [pc, #56]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103d36:	f7fd fcd1 	bl	81016dc <HAL_GetTick>
 8103d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103d3c:	e008      	b.n	8103d50 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103d3e:	f7fd fccd 	bl	81016dc <HAL_GetTick>
 8103d42:	4602      	mov	r2, r0
 8103d44:	68bb      	ldr	r3, [r7, #8]
 8103d46:	1ad3      	subs	r3, r2, r3
 8103d48:	2b02      	cmp	r3, #2
 8103d4a:	d901      	bls.n	8103d50 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103d4c:	2303      	movs	r3, #3
 8103d4e:	e006      	b.n	8103d5e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103d50:	4b05      	ldr	r3, [pc, #20]	; (8103d68 <RCCEx_PLL3_Config+0x160>)
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d0f0      	beq.n	8103d3e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103d5e:	4618      	mov	r0, r3
 8103d60:	3710      	adds	r7, #16
 8103d62:	46bd      	mov	sp, r7
 8103d64:	bd80      	pop	{r7, pc}
 8103d66:	bf00      	nop
 8103d68:	58024400 	.word	0x58024400

08103d6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103d6c:	b580      	push	{r7, lr}
 8103d6e:	b084      	sub	sp, #16
 8103d70:	af00      	add	r7, sp, #0
 8103d72:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8103d74:	2300      	movs	r3, #0
 8103d76:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	2b00      	cmp	r3, #0
 8103d7c:	d101      	bne.n	8103d82 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8103d7e:	2301      	movs	r3, #1
 8103d80:	e0eb      	b.n	8103f5a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	2200      	movs	r2, #0
 8103d86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	4a75      	ldr	r2, [pc, #468]	; (8103f64 <HAL_SPI_Init+0x1f8>)
 8103d8e:	4293      	cmp	r3, r2
 8103d90:	d00f      	beq.n	8103db2 <HAL_SPI_Init+0x46>
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	4a74      	ldr	r2, [pc, #464]	; (8103f68 <HAL_SPI_Init+0x1fc>)
 8103d98:	4293      	cmp	r3, r2
 8103d9a:	d00a      	beq.n	8103db2 <HAL_SPI_Init+0x46>
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	4a72      	ldr	r2, [pc, #456]	; (8103f6c <HAL_SPI_Init+0x200>)
 8103da2:	4293      	cmp	r3, r2
 8103da4:	d005      	beq.n	8103db2 <HAL_SPI_Init+0x46>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	68db      	ldr	r3, [r3, #12]
 8103daa:	2b0f      	cmp	r3, #15
 8103dac:	d901      	bls.n	8103db2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8103dae:	2301      	movs	r3, #1
 8103db0:	e0d3      	b.n	8103f5a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103db2:	6878      	ldr	r0, [r7, #4]
 8103db4:	f000 f8dc 	bl	8103f70 <SPI_GetPacketSize>
 8103db8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	4a69      	ldr	r2, [pc, #420]	; (8103f64 <HAL_SPI_Init+0x1f8>)
 8103dc0:	4293      	cmp	r3, r2
 8103dc2:	d00c      	beq.n	8103dde <HAL_SPI_Init+0x72>
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	4a67      	ldr	r2, [pc, #412]	; (8103f68 <HAL_SPI_Init+0x1fc>)
 8103dca:	4293      	cmp	r3, r2
 8103dcc:	d007      	beq.n	8103dde <HAL_SPI_Init+0x72>
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	4a66      	ldr	r2, [pc, #408]	; (8103f6c <HAL_SPI_Init+0x200>)
 8103dd4:	4293      	cmp	r3, r2
 8103dd6:	d002      	beq.n	8103dde <HAL_SPI_Init+0x72>
 8103dd8:	68bb      	ldr	r3, [r7, #8]
 8103dda:	2b08      	cmp	r3, #8
 8103ddc:	d811      	bhi.n	8103e02 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103de2:	4a60      	ldr	r2, [pc, #384]	; (8103f64 <HAL_SPI_Init+0x1f8>)
 8103de4:	4293      	cmp	r3, r2
 8103de6:	d009      	beq.n	8103dfc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	4a5e      	ldr	r2, [pc, #376]	; (8103f68 <HAL_SPI_Init+0x1fc>)
 8103dee:	4293      	cmp	r3, r2
 8103df0:	d004      	beq.n	8103dfc <HAL_SPI_Init+0x90>
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	4a5d      	ldr	r2, [pc, #372]	; (8103f6c <HAL_SPI_Init+0x200>)
 8103df8:	4293      	cmp	r3, r2
 8103dfa:	d104      	bne.n	8103e06 <HAL_SPI_Init+0x9a>
 8103dfc:	68bb      	ldr	r3, [r7, #8]
 8103dfe:	2b10      	cmp	r3, #16
 8103e00:	d901      	bls.n	8103e06 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8103e02:	2301      	movs	r3, #1
 8103e04:	e0a9      	b.n	8103f5a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103e0c:	b2db      	uxtb	r3, r3
 8103e0e:	2b00      	cmp	r3, #0
 8103e10:	d106      	bne.n	8103e20 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	2200      	movs	r2, #0
 8103e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8103e1a:	6878      	ldr	r0, [r7, #4]
 8103e1c:	f7fd f9ee 	bl	81011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	2202      	movs	r2, #2
 8103e24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	681b      	ldr	r3, [r3, #0]
 8103e2c:	681a      	ldr	r2, [r3, #0]
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	f022 0201 	bic.w	r2, r2, #1
 8103e36:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	699b      	ldr	r3, [r3, #24]
 8103e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103e40:	d119      	bne.n	8103e76 <HAL_SPI_Init+0x10a>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	685b      	ldr	r3, [r3, #4]
 8103e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103e4a:	d103      	bne.n	8103e54 <HAL_SPI_Init+0xe8>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d008      	beq.n	8103e66 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	d10c      	bne.n	8103e76 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e64:	d107      	bne.n	8103e76 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	681a      	ldr	r2, [r3, #0]
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103e74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	69da      	ldr	r2, [r3, #28]
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e7e:	431a      	orrs	r2, r3
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	431a      	orrs	r2, r3
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e88:	ea42 0103 	orr.w	r1, r2, r3
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	68da      	ldr	r2, [r3, #12]
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	430a      	orrs	r2, r1
 8103e96:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ea0:	431a      	orrs	r2, r3
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103ea6:	431a      	orrs	r2, r3
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	699b      	ldr	r3, [r3, #24]
 8103eac:	431a      	orrs	r2, r3
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	691b      	ldr	r3, [r3, #16]
 8103eb2:	431a      	orrs	r2, r3
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	695b      	ldr	r3, [r3, #20]
 8103eb8:	431a      	orrs	r2, r3
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	6a1b      	ldr	r3, [r3, #32]
 8103ebe:	431a      	orrs	r2, r3
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	685b      	ldr	r3, [r3, #4]
 8103ec4:	431a      	orrs	r2, r3
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103eca:	431a      	orrs	r2, r3
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	689b      	ldr	r3, [r3, #8]
 8103ed0:	431a      	orrs	r2, r3
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ed6:	ea42 0103 	orr.w	r1, r2, r3
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	430a      	orrs	r2, r1
 8103ee4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	685b      	ldr	r3, [r3, #4]
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	d113      	bne.n	8103f16 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	689b      	ldr	r3, [r3, #8]
 8103ef4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103f00:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	689b      	ldr	r3, [r3, #8]
 8103f08:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8103f14:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	f022 0201 	bic.w	r2, r2, #1
 8103f24:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	685b      	ldr	r3, [r3, #4]
 8103f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103f2e:	2b00      	cmp	r3, #0
 8103f30:	d00a      	beq.n	8103f48 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	681b      	ldr	r3, [r3, #0]
 8103f36:	68db      	ldr	r3, [r3, #12]
 8103f38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	430a      	orrs	r2, r1
 8103f46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	2200      	movs	r2, #0
 8103f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	2201      	movs	r2, #1
 8103f54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8103f58:	2300      	movs	r3, #0
}
 8103f5a:	4618      	mov	r0, r3
 8103f5c:	3710      	adds	r7, #16
 8103f5e:	46bd      	mov	sp, r7
 8103f60:	bd80      	pop	{r7, pc}
 8103f62:	bf00      	nop
 8103f64:	40013000 	.word	0x40013000
 8103f68:	40003800 	.word	0x40003800
 8103f6c:	40003c00 	.word	0x40003c00

08103f70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8103f70:	b480      	push	{r7}
 8103f72:	b085      	sub	sp, #20
 8103f74:	af00      	add	r7, sp, #0
 8103f76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f7c:	095b      	lsrs	r3, r3, #5
 8103f7e:	3301      	adds	r3, #1
 8103f80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	68db      	ldr	r3, [r3, #12]
 8103f86:	3301      	adds	r3, #1
 8103f88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8103f8a:	68bb      	ldr	r3, [r7, #8]
 8103f8c:	3307      	adds	r3, #7
 8103f8e:	08db      	lsrs	r3, r3, #3
 8103f90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8103f92:	68bb      	ldr	r3, [r7, #8]
 8103f94:	68fa      	ldr	r2, [r7, #12]
 8103f96:	fb02 f303 	mul.w	r3, r2, r3
}
 8103f9a:	4618      	mov	r0, r3
 8103f9c:	3714      	adds	r7, #20
 8103f9e:	46bd      	mov	sp, r7
 8103fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa4:	4770      	bx	lr

08103fa6 <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 8103fa6:	b084      	sub	sp, #16
 8103fa8:	b580      	push	{r7, lr}
 8103faa:	b086      	sub	sp, #24
 8103fac:	af04      	add	r7, sp, #16
 8103fae:	f107 0c10 	add.w	ip, r7, #16
 8103fb2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 8103fb6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8103fba:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, HAL_MAX_DELAY);
 8103fbc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8103fc0:	b299      	uxth	r1, r3
 8103fc2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8103fc6:	b29a      	uxth	r2, r3
 8103fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8103fcc:	9302      	str	r3, [sp, #8]
 8103fce:	2301      	movs	r3, #1
 8103fd0:	9301      	str	r3, [sp, #4]
 8103fd2:	1d3b      	adds	r3, r7, #4
 8103fd4:	9300      	str	r3, [sp, #0]
 8103fd6:	2301      	movs	r3, #1
 8103fd8:	f107 0010 	add.w	r0, r7, #16
 8103fdc:	f7fd ff24 	bl	8101e28 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8103fe0:	200a      	movs	r0, #10
 8103fe2:	f7fd fb87 	bl	81016f4 <HAL_Delay>
}
 8103fe6:	bf00      	nop
 8103fe8:	3708      	adds	r7, #8
 8103fea:	46bd      	mov	sp, r7
 8103fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8103ff0:	b004      	add	sp, #16
 8103ff2:	4770      	bx	lr

08103ff4 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8103ff4:	b084      	sub	sp, #16
 8103ff6:	b580      	push	{r7, lr}
 8103ff8:	b084      	sub	sp, #16
 8103ffa:	af04      	add	r7, sp, #16
 8103ffc:	f107 0c08 	add.w	ip, r7, #8
 8104000:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, HAL_MAX_DELAY);
 8104004:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8104008:	b299      	uxth	r1, r3
 810400a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 810400e:	b29a      	uxth	r2, r3
 8104010:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8104014:	b29b      	uxth	r3, r3
 8104016:	f04f 30ff 	mov.w	r0, #4294967295
 810401a:	9002      	str	r0, [sp, #8]
 810401c:	9301      	str	r3, [sp, #4]
 810401e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8104020:	9300      	str	r3, [sp, #0]
 8104022:	2301      	movs	r3, #1
 8104024:	f107 0008 	add.w	r0, r7, #8
 8104028:	f7fe f812 	bl	8102050 <HAL_I2C_Mem_Read>
}
 810402c:	bf00      	nop
 810402e:	46bd      	mov	sp, r7
 8104030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8104034:	b004      	add	sp, #16
 8104036:	4770      	bx	lr

08104038 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 8104038:	b084      	sub	sp, #16
 810403a:	b5b0      	push	{r4, r5, r7, lr}
 810403c:	b092      	sub	sp, #72	; 0x48
 810403e:	af12      	add	r7, sp, #72	; 0x48
 8104040:	f107 0410 	add.w	r4, r7, #16
 8104044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8104048:	2325      	movs	r3, #37	; 0x25
 810404a:	220c      	movs	r2, #12
 810404c:	9211      	str	r2, [sp, #68]	; 0x44
 810404e:	9310      	str	r3, [sp, #64]	; 0x40
 8104050:	466d      	mov	r5, sp
 8104052:	f107 0420 	add.w	r4, r7, #32
 8104056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810405a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810405c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810405e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104062:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104066:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810406a:	f107 0310 	add.w	r3, r7, #16
 810406e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104070:	f7ff ff99 	bl	8103fa6 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104074:	2226      	movs	r2, #38	; 0x26
 8104076:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 810407a:	9311      	str	r3, [sp, #68]	; 0x44
 810407c:	9210      	str	r2, [sp, #64]	; 0x40
 810407e:	466d      	mov	r5, sp
 8104080:	f107 0420 	add.w	r4, r7, #32
 8104084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810408a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810408c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810408e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104090:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104094:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104098:	f107 0310 	add.w	r3, r7, #16
 810409c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810409e:	f7ff ff82 	bl	8103fa6 <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 81040a2:	2263      	movs	r2, #99	; 0x63
 81040a4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81040a8:	9311      	str	r3, [sp, #68]	; 0x44
 81040aa:	9210      	str	r2, [sp, #64]	; 0x40
 81040ac:	466d      	mov	r5, sp
 81040ae:	f107 0420 	add.w	r4, r7, #32
 81040b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81040b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81040b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81040b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81040ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81040bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81040be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81040c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81040c6:	f107 0310 	add.w	r3, r7, #16
 81040ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81040cc:	f7ff ff6b 	bl	8103fa6 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 81040d0:	2227      	movs	r2, #39	; 0x27
 81040d2:	2380      	movs	r3, #128	; 0x80
 81040d4:	f043 0301 	orr.w	r3, r3, #1
 81040d8:	b2db      	uxtb	r3, r3
 81040da:	9311      	str	r3, [sp, #68]	; 0x44
 81040dc:	9210      	str	r2, [sp, #64]	; 0x40
 81040de:	466d      	mov	r5, sp
 81040e0:	f107 0420 	add.w	r4, r7, #32
 81040e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81040e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81040e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81040ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81040ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81040ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81040f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81040f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81040f8:	f107 0310 	add.w	r3, r7, #16
 81040fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81040fe:	f7ff ff52 	bl	8103fa6 <writeRegister>
}
 8104102:	bf00      	nop
 8104104:	46bd      	mov	sp, r7
 8104106:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 810410a:	b004      	add	sp, #16
 810410c:	4770      	bx	lr

0810410e <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 810410e:	b084      	sub	sp, #16
 8104110:	b5b0      	push	{r4, r5, r7, lr}
 8104112:	b094      	sub	sp, #80	; 0x50
 8104114:	af14      	add	r7, sp, #80	; 0x50
 8104116:	f107 0410 	add.w	r4, r7, #16
 810411a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 810411e:	2225      	movs	r2, #37	; 0x25
 8104120:	210c      	movs	r1, #12
 8104122:	2380      	movs	r3, #128	; 0x80
 8104124:	430b      	orrs	r3, r1
 8104126:	b2db      	uxtb	r3, r3
 8104128:	9311      	str	r3, [sp, #68]	; 0x44
 810412a:	9210      	str	r2, [sp, #64]	; 0x40
 810412c:	466d      	mov	r5, sp
 810412e:	f107 0420 	add.w	r4, r7, #32
 8104132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810413a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810413c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810413e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104142:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104146:	f107 0310 	add.w	r3, r7, #16
 810414a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810414c:	f7ff ff2b 	bl	8103fa6 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104150:	2226      	movs	r2, #38	; 0x26
 8104152:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8104156:	9311      	str	r3, [sp, #68]	; 0x44
 8104158:	9210      	str	r2, [sp, #64]	; 0x40
 810415a:	466d      	mov	r5, sp
 810415c:	f107 0420 	add.w	r4, r7, #32
 8104160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810416a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810416c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104170:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104174:	f107 0310 	add.w	r3, r7, #16
 8104178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810417a:	f7ff ff14 	bl	8103fa6 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 810417e:	2227      	movs	r2, #39	; 0x27
 8104180:	2180      	movs	r1, #128	; 0x80
 8104182:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8104186:	430b      	orrs	r3, r1
 8104188:	b2db      	uxtb	r3, r3
 810418a:	9311      	str	r3, [sp, #68]	; 0x44
 810418c:	9210      	str	r2, [sp, #64]	; 0x40
 810418e:	466d      	mov	r5, sp
 8104190:	f107 0420 	add.w	r4, r7, #32
 8104194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810419a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810419c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810419e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81041a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81041a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81041a8:	f107 0310 	add.w	r3, r7, #16
 81041ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81041ae:	f7ff fefa 	bl	8103fa6 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 81041b2:	2001      	movs	r0, #1
 81041b4:	f7fd fa9e 	bl	81016f4 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 81041b8:	2249      	movs	r2, #73	; 0x49
 81041ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81041bc:	9312      	str	r3, [sp, #72]	; 0x48
 81041be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81041c2:	9311      	str	r3, [sp, #68]	; 0x44
 81041c4:	9210      	str	r2, [sp, #64]	; 0x40
 81041c6:	466d      	mov	r5, sp
 81041c8:	f107 0420 	add.w	r4, r7, #32
 81041cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81041ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81041d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81041d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81041d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81041d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81041d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81041dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81041e0:	f107 0310 	add.w	r3, r7, #16
 81041e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81041e6:	f7ff ff05 	bl	8103ff4 <readRegisters>
}
 81041ea:	bf00      	nop
 81041ec:	46bd      	mov	sp, r7
 81041ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81041f2:	b004      	add	sp, #16
 81041f4:	4770      	bx	lr
	...

081041f8 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 81041f8:	b084      	sub	sp, #16
 81041fa:	b5b0      	push	{r4, r5, r7, lr}
 81041fc:	b094      	sub	sp, #80	; 0x50
 81041fe:	af14      	add	r7, sp, #80	; 0x50
 8104200:	f107 0410 	add.w	r4, r7, #16
 8104204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 8104208:	2375      	movs	r3, #117	; 0x75
 810420a:	4a0f      	ldr	r2, [pc, #60]	; (8104248 <whoAmI+0x50>)
 810420c:	9212      	str	r2, [sp, #72]	; 0x48
 810420e:	2201      	movs	r2, #1
 8104210:	9211      	str	r2, [sp, #68]	; 0x44
 8104212:	9310      	str	r3, [sp, #64]	; 0x40
 8104214:	466d      	mov	r5, sp
 8104216:	f107 0420 	add.w	r4, r7, #32
 810421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104226:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810422a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810422e:	f107 0310 	add.w	r3, r7, #16
 8104232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104234:	f7ff fede 	bl	8103ff4 <readRegisters>

	// return the register value
	return _buffer[0];
 8104238:	4b03      	ldr	r3, [pc, #12]	; (8104248 <whoAmI+0x50>)
 810423a:	781b      	ldrb	r3, [r3, #0]
}
 810423c:	4618      	mov	r0, r3
 810423e:	46bd      	mov	sp, r7
 8104240:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104244:	b004      	add	sp, #16
 8104246:	4770      	bx	lr
 8104248:	10000204 	.word	0x10000204

0810424c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 810424c:	b084      	sub	sp, #16
 810424e:	b5b0      	push	{r4, r5, r7, lr}
 8104250:	b094      	sub	sp, #80	; 0x50
 8104252:	af14      	add	r7, sp, #80	; 0x50
 8104254:	f107 0410 	add.w	r4, r7, #16
 8104258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 810425c:	2300      	movs	r3, #0
 810425e:	4a0f      	ldr	r2, [pc, #60]	; (810429c <whoAmIAK8963+0x50>)
 8104260:	9212      	str	r2, [sp, #72]	; 0x48
 8104262:	2201      	movs	r2, #1
 8104264:	9211      	str	r2, [sp, #68]	; 0x44
 8104266:	9310      	str	r3, [sp, #64]	; 0x40
 8104268:	466d      	mov	r5, sp
 810426a:	f107 0420 	add.w	r4, r7, #32
 810426e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810427a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810427e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104282:	f107 0310 	add.w	r3, r7, #16
 8104286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104288:	f7ff ff41 	bl	810410e <readAK8963Registers>
	// return the register value
	return _buffer[0];
 810428c:	4b03      	ldr	r3, [pc, #12]	; (810429c <whoAmIAK8963+0x50>)
 810428e:	781b      	ldrb	r3, [r3, #0]
}
 8104290:	4618      	mov	r0, r3
 8104292:	46bd      	mov	sp, r7
 8104294:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104298:	b004      	add	sp, #16
 810429a:	4770      	bx	lr
 810429c:	10000204 	.word	0x10000204

081042a0 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 81042a0:	b084      	sub	sp, #16
 81042a2:	b5b0      	push	{r4, r5, r7, lr}
 81042a4:	b096      	sub	sp, #88	; 0x58
 81042a6:	af14      	add	r7, sp, #80	; 0x50
 81042a8:	f107 0418 	add.w	r4, r7, #24
 81042ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 81042b0:	236b      	movs	r3, #107	; 0x6b
 81042b2:	2201      	movs	r2, #1
 81042b4:	9211      	str	r2, [sp, #68]	; 0x44
 81042b6:	9310      	str	r3, [sp, #64]	; 0x40
 81042b8:	466d      	mov	r5, sp
 81042ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81042be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81042ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81042d2:	f107 0318 	add.w	r3, r7, #24
 81042d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81042d8:	f7ff fe65 	bl	8103fa6 <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 81042dc:	236a      	movs	r3, #106	; 0x6a
 81042de:	2220      	movs	r2, #32
 81042e0:	9211      	str	r2, [sp, #68]	; 0x44
 81042e2:	9310      	str	r3, [sp, #64]	; 0x40
 81042e4:	466d      	mov	r5, sp
 81042e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81042ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81042fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81042fe:	f107 0318 	add.w	r3, r7, #24
 8104302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104304:	f7ff fe4f 	bl	8103fa6 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 8104308:	2324      	movs	r3, #36	; 0x24
 810430a:	220d      	movs	r2, #13
 810430c:	9211      	str	r2, [sp, #68]	; 0x44
 810430e:	9310      	str	r3, [sp, #64]	; 0x40
 8104310:	466d      	mov	r5, sp
 8104312:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810431a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810431c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810431e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104322:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104326:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810432a:	f107 0318 	add.w	r3, r7, #24
 810432e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104330:	f7ff fe39 	bl	8103fa6 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104334:	230a      	movs	r3, #10
 8104336:	2200      	movs	r2, #0
 8104338:	9211      	str	r2, [sp, #68]	; 0x44
 810433a:	9310      	str	r3, [sp, #64]	; 0x40
 810433c:	466d      	mov	r5, sp
 810433e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810434a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810434c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810434e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104352:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104356:	f107 0318 	add.w	r3, r7, #24
 810435a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810435c:	f7ff fe6c 	bl	8104038 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 8104360:	236b      	movs	r3, #107	; 0x6b
 8104362:	2280      	movs	r2, #128	; 0x80
 8104364:	9211      	str	r2, [sp, #68]	; 0x44
 8104366:	9310      	str	r3, [sp, #64]	; 0x40
 8104368:	466d      	mov	r5, sp
 810436a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810436e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810437a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810437e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104382:	f107 0318 	add.w	r3, r7, #24
 8104386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104388:	f7ff fe0d 	bl	8103fa6 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 810438c:	200a      	movs	r0, #10
 810438e:	f7fd f9b1 	bl	81016f4 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 8104392:	230b      	movs	r3, #11
 8104394:	2201      	movs	r2, #1
 8104396:	9211      	str	r2, [sp, #68]	; 0x44
 8104398:	9310      	str	r3, [sp, #64]	; 0x40
 810439a:	466d      	mov	r5, sp
 810439c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81043a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043b4:	f107 0318 	add.w	r3, r7, #24
 81043b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043ba:	f7ff fe3d 	bl	8104038 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81043be:	236b      	movs	r3, #107	; 0x6b
 81043c0:	2201      	movs	r2, #1
 81043c2:	9211      	str	r2, [sp, #68]	; 0x44
 81043c4:	9310      	str	r3, [sp, #64]	; 0x40
 81043c6:	466d      	mov	r5, sp
 81043c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81043cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043e0:	f107 0318 	add.w	r3, r7, #24
 81043e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043e6:	f7ff fdde 	bl	8103fa6 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 81043ea:	466d      	mov	r5, sp
 81043ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81043f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104400:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104404:	f107 0318 	add.w	r3, r7, #24
 8104408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810440a:	f7ff fef5 	bl	81041f8 <whoAmI>
 810440e:	4603      	mov	r3, r0
 8104410:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8104412:	79fb      	ldrb	r3, [r7, #7]
 8104414:	2b71      	cmp	r3, #113	; 0x71
 8104416:	d004      	beq.n	8104422 <MPU9250_Init+0x182>
 8104418:	79fb      	ldrb	r3, [r7, #7]
 810441a:	2b73      	cmp	r3, #115	; 0x73
 810441c:	d001      	beq.n	8104422 <MPU9250_Init+0x182>
	{
		return 1;
 810441e:	2301      	movs	r3, #1
 8104420:	e171      	b.n	8104706 <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 8104422:	236c      	movs	r3, #108	; 0x6c
 8104424:	2200      	movs	r2, #0
 8104426:	9211      	str	r2, [sp, #68]	; 0x44
 8104428:	9310      	str	r3, [sp, #64]	; 0x40
 810442a:	466d      	mov	r5, sp
 810442c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810443a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810443c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104440:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104444:	f107 0318 	add.w	r3, r7, #24
 8104448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810444a:	f7ff fdac 	bl	8103fa6 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 810444e:	231c      	movs	r3, #28
 8104450:	2200      	movs	r2, #0
 8104452:	9211      	str	r2, [sp, #68]	; 0x44
 8104454:	9310      	str	r3, [sp, #64]	; 0x40
 8104456:	466d      	mov	r5, sp
 8104458:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810445c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810445e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104468:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810446c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104470:	f107 0318 	add.w	r3, r7, #24
 8104474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104476:	f7ff fd96 	bl	8103fa6 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 810447a:	231b      	movs	r3, #27
 810447c:	2200      	movs	r2, #0
 810447e:	9211      	str	r2, [sp, #68]	; 0x44
 8104480:	9310      	str	r3, [sp, #64]	; 0x40
 8104482:	466d      	mov	r5, sp
 8104484:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810448a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810448c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810448e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104494:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104498:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810449c:	f107 0318 	add.w	r3, r7, #24
 81044a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044a2:	f7ff fd80 	bl	8103fa6 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 81044a6:	231d      	movs	r3, #29
 81044a8:	2201      	movs	r2, #1
 81044aa:	9211      	str	r2, [sp, #68]	; 0x44
 81044ac:	9310      	str	r3, [sp, #64]	; 0x40
 81044ae:	466d      	mov	r5, sp
 81044b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81044b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81044c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81044c8:	f107 0318 	add.w	r3, r7, #24
 81044cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044ce:	f7ff fd6a 	bl	8103fa6 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 81044d2:	231a      	movs	r3, #26
 81044d4:	2201      	movs	r2, #1
 81044d6:	9211      	str	r2, [sp, #68]	; 0x44
 81044d8:	9310      	str	r3, [sp, #64]	; 0x40
 81044da:	466d      	mov	r5, sp
 81044dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81044e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81044f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81044f4:	f107 0318 	add.w	r3, r7, #24
 81044f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044fa:	f7ff fd54 	bl	8103fa6 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 81044fe:	2319      	movs	r3, #25
 8104500:	2200      	movs	r2, #0
 8104502:	9211      	str	r2, [sp, #68]	; 0x44
 8104504:	9310      	str	r3, [sp, #64]	; 0x40
 8104506:	466d      	mov	r5, sp
 8104508:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810450c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810450e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810451c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104520:	f107 0318 	add.w	r3, r7, #24
 8104524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104526:	f7ff fd3e 	bl	8103fa6 <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 810452a:	236a      	movs	r3, #106	; 0x6a
 810452c:	2220      	movs	r2, #32
 810452e:	9211      	str	r2, [sp, #68]	; 0x44
 8104530:	9310      	str	r3, [sp, #64]	; 0x40
 8104532:	466d      	mov	r5, sp
 8104534:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810453a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810453c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810453e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104544:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104548:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810454c:	f107 0318 	add.w	r3, r7, #24
 8104550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104552:	f7ff fd28 	bl	8103fa6 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 8104556:	2324      	movs	r3, #36	; 0x24
 8104558:	220d      	movs	r2, #13
 810455a:	9211      	str	r2, [sp, #68]	; 0x44
 810455c:	9310      	str	r3, [sp, #64]	; 0x40
 810455e:	466d      	mov	r5, sp
 8104560:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810456c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810456e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104570:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104574:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104578:	f107 0318 	add.w	r3, r7, #24
 810457c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810457e:	f7ff fd12 	bl	8103fa6 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 8104582:	466d      	mov	r5, sp
 8104584:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810458a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810458c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810458e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104594:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104598:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810459c:	f107 0318 	add.w	r3, r7, #24
 81045a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81045a2:	f7ff fe53 	bl	810424c <whoAmIAK8963>
 81045a6:	4603      	mov	r3, r0
 81045a8:	2b48      	cmp	r3, #72	; 0x48
 81045aa:	d001      	beq.n	81045b0 <MPU9250_Init+0x310>
	{
		return 1;
 81045ac:	2301      	movs	r3, #1
 81045ae:	e0aa      	b.n	8104706 <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81045b0:	230a      	movs	r3, #10
 81045b2:	2200      	movs	r2, #0
 81045b4:	9211      	str	r2, [sp, #68]	; 0x44
 81045b6:	9310      	str	r3, [sp, #64]	; 0x40
 81045b8:	466d      	mov	r5, sp
 81045ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81045ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045d2:	f107 0318 	add.w	r3, r7, #24
 81045d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81045d8:	f7ff fd2e 	bl	8104038 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 81045dc:	2064      	movs	r0, #100	; 0x64
 81045de:	f7fd f889 	bl	81016f4 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 81045e2:	230a      	movs	r3, #10
 81045e4:	220f      	movs	r2, #15
 81045e6:	9211      	str	r2, [sp, #68]	; 0x44
 81045e8:	9310      	str	r3, [sp, #64]	; 0x40
 81045ea:	466d      	mov	r5, sp
 81045ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104600:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104604:	f107 0318 	add.w	r3, r7, #24
 8104608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810460a:	f7ff fd15 	bl	8104038 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 810460e:	2064      	movs	r0, #100	; 0x64
 8104610:	f7fd f870 	bl	81016f4 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 8104614:	2310      	movs	r3, #16
 8104616:	4a3f      	ldr	r2, [pc, #252]	; (8104714 <MPU9250_Init+0x474>)
 8104618:	9212      	str	r2, [sp, #72]	; 0x48
 810461a:	2203      	movs	r2, #3
 810461c:	9211      	str	r2, [sp, #68]	; 0x44
 810461e:	9310      	str	r3, [sp, #64]	; 0x40
 8104620:	466d      	mov	r5, sp
 8104622:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810462e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104636:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810463a:	f107 0318 	add.w	r3, r7, #24
 810463e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104640:	f7ff fd65 	bl	810410e <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104644:	230a      	movs	r3, #10
 8104646:	2200      	movs	r2, #0
 8104648:	9211      	str	r2, [sp, #68]	; 0x44
 810464a:	9310      	str	r3, [sp, #64]	; 0x40
 810464c:	466d      	mov	r5, sp
 810464e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810465a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810465c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810465e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104662:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104666:	f107 0318 	add.w	r3, r7, #24
 810466a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810466c:	f7ff fce4 	bl	8104038 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104670:	2064      	movs	r0, #100	; 0x64
 8104672:	f7fd f83f 	bl	81016f4 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 8104676:	230a      	movs	r3, #10
 8104678:	2216      	movs	r2, #22
 810467a:	9211      	str	r2, [sp, #68]	; 0x44
 810467c:	9310      	str	r3, [sp, #64]	; 0x40
 810467e:	466d      	mov	r5, sp
 8104680:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810468a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810468c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810468e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104690:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104694:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104698:	f107 0318 	add.w	r3, r7, #24
 810469c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810469e:	f7ff fccb 	bl	8104038 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 81046a2:	2064      	movs	r0, #100	; 0x64
 81046a4:	f7fd f826 	bl	81016f4 <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81046a8:	236b      	movs	r3, #107	; 0x6b
 81046aa:	2201      	movs	r2, #1
 81046ac:	9211      	str	r2, [sp, #68]	; 0x44
 81046ae:	9310      	str	r3, [sp, #64]	; 0x40
 81046b0:	466d      	mov	r5, sp
 81046b2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046ca:	f107 0318 	add.w	r3, r7, #24
 81046ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046d0:	f7ff fc69 	bl	8103fa6 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 81046d4:	2303      	movs	r3, #3
 81046d6:	4a10      	ldr	r2, [pc, #64]	; (8104718 <MPU9250_Init+0x478>)
 81046d8:	9212      	str	r2, [sp, #72]	; 0x48
 81046da:	2207      	movs	r2, #7
 81046dc:	9211      	str	r2, [sp, #68]	; 0x44
 81046de:	9310      	str	r3, [sp, #64]	; 0x40
 81046e0:	466d      	mov	r5, sp
 81046e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046fa:	f107 0318 	add.w	r3, r7, #24
 81046fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104700:	f7ff fd05 	bl	810410e <readAK8963Registers>

	// successful init, return 0
	return 0;
 8104704:	2300      	movs	r3, #0
}
 8104706:	4618      	mov	r0, r3
 8104708:	3708      	adds	r7, #8
 810470a:	46bd      	mov	sp, r7
 810470c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104710:	b004      	add	sp, #16
 8104712:	4770      	bx	lr
 8104714:	1000021c 	.word	0x1000021c
 8104718:	10000204 	.word	0x10000204

0810471c <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 810471c:	b084      	sub	sp, #16
 810471e:	b5b0      	push	{r4, r5, r7, lr}
 8104720:	b096      	sub	sp, #88	; 0x58
 8104722:	af14      	add	r7, sp, #80	; 0x50
 8104724:	f107 0418 	add.w	r4, r7, #24
 8104728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 810472c:	233b      	movs	r3, #59	; 0x3b
 810472e:	4a6d      	ldr	r2, [pc, #436]	; (81048e4 <MPU9250_GetData+0x1c8>)
 8104730:	9212      	str	r2, [sp, #72]	; 0x48
 8104732:	2215      	movs	r2, #21
 8104734:	9211      	str	r2, [sp, #68]	; 0x44
 8104736:	9310      	str	r3, [sp, #64]	; 0x40
 8104738:	466d      	mov	r5, sp
 810473a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810473e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810474a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810474e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104752:	f107 0318 	add.w	r3, r7, #24
 8104756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104758:	f7ff fc4c 	bl	8103ff4 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 810475c:	4b61      	ldr	r3, [pc, #388]	; (81048e4 <MPU9250_GetData+0x1c8>)
 810475e:	781b      	ldrb	r3, [r3, #0]
 8104760:	021b      	lsls	r3, r3, #8
 8104762:	b21a      	sxth	r2, r3
 8104764:	4b5f      	ldr	r3, [pc, #380]	; (81048e4 <MPU9250_GetData+0x1c8>)
 8104766:	785b      	ldrb	r3, [r3, #1]
 8104768:	b21b      	sxth	r3, r3
 810476a:	4313      	orrs	r3, r2
 810476c:	b21a      	sxth	r2, r3
 810476e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104770:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8104772:	4b5c      	ldr	r3, [pc, #368]	; (81048e4 <MPU9250_GetData+0x1c8>)
 8104774:	789b      	ldrb	r3, [r3, #2]
 8104776:	021b      	lsls	r3, r3, #8
 8104778:	b219      	sxth	r1, r3
 810477a:	4b5a      	ldr	r3, [pc, #360]	; (81048e4 <MPU9250_GetData+0x1c8>)
 810477c:	78db      	ldrb	r3, [r3, #3]
 810477e:	b21a      	sxth	r2, r3
 8104780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104782:	3302      	adds	r3, #2
 8104784:	430a      	orrs	r2, r1
 8104786:	b212      	sxth	r2, r2
 8104788:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 810478a:	4b56      	ldr	r3, [pc, #344]	; (81048e4 <MPU9250_GetData+0x1c8>)
 810478c:	791b      	ldrb	r3, [r3, #4]
 810478e:	021b      	lsls	r3, r3, #8
 8104790:	b219      	sxth	r1, r3
 8104792:	4b54      	ldr	r3, [pc, #336]	; (81048e4 <MPU9250_GetData+0x1c8>)
 8104794:	795b      	ldrb	r3, [r3, #5]
 8104796:	b21a      	sxth	r2, r3
 8104798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810479a:	3304      	adds	r3, #4
 810479c:	430a      	orrs	r2, r1
 810479e:	b212      	sxth	r2, r2
 81047a0:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 81047a2:	4b50      	ldr	r3, [pc, #320]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047a4:	7a1b      	ldrb	r3, [r3, #8]
 81047a6:	021b      	lsls	r3, r3, #8
 81047a8:	b21a      	sxth	r2, r3
 81047aa:	4b4e      	ldr	r3, [pc, #312]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047ac:	7a5b      	ldrb	r3, [r3, #9]
 81047ae:	b21b      	sxth	r3, r3
 81047b0:	4313      	orrs	r3, r2
 81047b2:	b21a      	sxth	r2, r3
 81047b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81047b6:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 81047b8:	4b4a      	ldr	r3, [pc, #296]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047ba:	7a9b      	ldrb	r3, [r3, #10]
 81047bc:	021b      	lsls	r3, r3, #8
 81047be:	b219      	sxth	r1, r3
 81047c0:	4b48      	ldr	r3, [pc, #288]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047c2:	7adb      	ldrb	r3, [r3, #11]
 81047c4:	b21a      	sxth	r2, r3
 81047c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81047c8:	3302      	adds	r3, #2
 81047ca:	430a      	orrs	r2, r1
 81047cc:	b212      	sxth	r2, r2
 81047ce:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 81047d0:	4b44      	ldr	r3, [pc, #272]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047d2:	7b1b      	ldrb	r3, [r3, #12]
 81047d4:	021b      	lsls	r3, r3, #8
 81047d6:	b219      	sxth	r1, r3
 81047d8:	4b42      	ldr	r3, [pc, #264]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047da:	7b5b      	ldrb	r3, [r3, #13]
 81047dc:	b21a      	sxth	r2, r3
 81047de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81047e0:	3304      	adds	r3, #4
 81047e2:	430a      	orrs	r2, r1
 81047e4:	b212      	sxth	r2, r2
 81047e6:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 81047e8:	4b3e      	ldr	r3, [pc, #248]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047ea:	7bdb      	ldrb	r3, [r3, #15]
 81047ec:	021b      	lsls	r3, r3, #8
 81047ee:	b21a      	sxth	r2, r3
 81047f0:	4b3c      	ldr	r3, [pc, #240]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047f2:	7b9b      	ldrb	r3, [r3, #14]
 81047f4:	b21b      	sxth	r3, r3
 81047f6:	4313      	orrs	r3, r2
 81047f8:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 81047fa:	4b3a      	ldr	r3, [pc, #232]	; (81048e4 <MPU9250_GetData+0x1c8>)
 81047fc:	7c5b      	ldrb	r3, [r3, #17]
 81047fe:	021b      	lsls	r3, r3, #8
 8104800:	b21a      	sxth	r2, r3
 8104802:	4b38      	ldr	r3, [pc, #224]	; (81048e4 <MPU9250_GetData+0x1c8>)
 8104804:	7c1b      	ldrb	r3, [r3, #16]
 8104806:	b21b      	sxth	r3, r3
 8104808:	4313      	orrs	r3, r2
 810480a:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 810480c:	4b35      	ldr	r3, [pc, #212]	; (81048e4 <MPU9250_GetData+0x1c8>)
 810480e:	7cdb      	ldrb	r3, [r3, #19]
 8104810:	021b      	lsls	r3, r3, #8
 8104812:	b21a      	sxth	r2, r3
 8104814:	4b33      	ldr	r3, [pc, #204]	; (81048e4 <MPU9250_GetData+0x1c8>)
 8104816:	7c9b      	ldrb	r3, [r3, #18]
 8104818:	b21b      	sxth	r3, r3
 810481a:	4313      	orrs	r3, r2
 810481c:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 810481e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104822:	ee07 3a90 	vmov	s15, r3
 8104826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810482a:	4b2f      	ldr	r3, [pc, #188]	; (81048e8 <MPU9250_GetData+0x1cc>)
 810482c:	781b      	ldrb	r3, [r3, #0]
 810482e:	3b80      	subs	r3, #128	; 0x80
 8104830:	ee07 3a90 	vmov	s15, r3
 8104834:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104838:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 81048ec <MPU9250_GetData+0x1d0>
 810483c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104848:	ee67 7a27 	vmul.f32	s15, s14, s15
 810484c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104850:	ee17 3a90 	vmov	r3, s15
 8104854:	b21a      	sxth	r2, r3
 8104856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104858:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 810485a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 810485e:	ee07 3a90 	vmov	s15, r3
 8104862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104866:	4b20      	ldr	r3, [pc, #128]	; (81048e8 <MPU9250_GetData+0x1cc>)
 8104868:	785b      	ldrb	r3, [r3, #1]
 810486a:	3b80      	subs	r3, #128	; 0x80
 810486c:	ee07 3a90 	vmov	s15, r3
 8104870:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104874:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 81048ec <MPU9250_GetData+0x1d0>
 8104878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 810487c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810488a:	3302      	adds	r3, #2
 810488c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104890:	ee17 2a90 	vmov	r2, s15
 8104894:	b212      	sxth	r2, r2
 8104896:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8104898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810489c:	ee07 3a90 	vmov	s15, r3
 81048a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81048a4:	4b10      	ldr	r3, [pc, #64]	; (81048e8 <MPU9250_GetData+0x1cc>)
 81048a6:	789b      	ldrb	r3, [r3, #2]
 81048a8:	3b80      	subs	r3, #128	; 0x80
 81048aa:	ee07 3a90 	vmov	s15, r3
 81048ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81048b2:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 81048ec <MPU9250_GetData+0x1d0>
 81048b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 81048ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81048c8:	3304      	adds	r3, #4
 81048ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 81048ce:	ee17 2a90 	vmov	r2, s15
 81048d2:	b212      	sxth	r2, r2
 81048d4:	801a      	strh	r2, [r3, #0]
}
 81048d6:	bf00      	nop
 81048d8:	3708      	adds	r7, #8
 81048da:	46bd      	mov	sp, r7
 81048dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81048e0:	b004      	add	sp, #16
 81048e2:	4770      	bx	lr
 81048e4:	10000204 	.word	0x10000204
 81048e8:	1000021c 	.word	0x1000021c
 81048ec:	43800000 	.word	0x43800000

081048f0 <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 81048f0:	b084      	sub	sp, #16
 81048f2:	b5b0      	push	{r4, r5, r7, lr}
 81048f4:	b092      	sub	sp, #72	; 0x48
 81048f6:	af10      	add	r7, sp, #64	; 0x40
 81048f8:	f107 0418 	add.w	r4, r7, #24
 81048fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 8104900:	2300      	movs	r3, #0
 8104902:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 8104904:	466d      	mov	r5, sp
 8104906:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810490a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810490c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810490e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104916:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810491a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810491e:	f107 0318 	add.w	r3, r7, #24
 8104922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104924:	f7ff fcbc 	bl	81042a0 <MPU9250_Init>
 8104928:	4603      	mov	r3, r0
 810492a:	71fb      	strb	r3, [r7, #7]
	return ret;
 810492c:	79fb      	ldrb	r3, [r7, #7]
}
 810492e:	4618      	mov	r0, r3
 8104930:	3708      	adds	r7, #8
 8104932:	46bd      	mov	sp, r7
 8104934:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104938:	b004      	add	sp, #16
 810493a:	4770      	bx	lr

0810493c <__errno>:
 810493c:	4b01      	ldr	r3, [pc, #4]	; (8104944 <__errno+0x8>)
 810493e:	6818      	ldr	r0, [r3, #0]
 8104940:	4770      	bx	lr
 8104942:	bf00      	nop
 8104944:	10000010 	.word	0x10000010

08104948 <__libc_init_array>:
 8104948:	b570      	push	{r4, r5, r6, lr}
 810494a:	4d0d      	ldr	r5, [pc, #52]	; (8104980 <__libc_init_array+0x38>)
 810494c:	4c0d      	ldr	r4, [pc, #52]	; (8104984 <__libc_init_array+0x3c>)
 810494e:	1b64      	subs	r4, r4, r5
 8104950:	10a4      	asrs	r4, r4, #2
 8104952:	2600      	movs	r6, #0
 8104954:	42a6      	cmp	r6, r4
 8104956:	d109      	bne.n	810496c <__libc_init_array+0x24>
 8104958:	4d0b      	ldr	r5, [pc, #44]	; (8104988 <__libc_init_array+0x40>)
 810495a:	4c0c      	ldr	r4, [pc, #48]	; (810498c <__libc_init_array+0x44>)
 810495c:	f004 fc48 	bl	81091f0 <_init>
 8104960:	1b64      	subs	r4, r4, r5
 8104962:	10a4      	asrs	r4, r4, #2
 8104964:	2600      	movs	r6, #0
 8104966:	42a6      	cmp	r6, r4
 8104968:	d105      	bne.n	8104976 <__libc_init_array+0x2e>
 810496a:	bd70      	pop	{r4, r5, r6, pc}
 810496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8104970:	4798      	blx	r3
 8104972:	3601      	adds	r6, #1
 8104974:	e7ee      	b.n	8104954 <__libc_init_array+0xc>
 8104976:	f855 3b04 	ldr.w	r3, [r5], #4
 810497a:	4798      	blx	r3
 810497c:	3601      	adds	r6, #1
 810497e:	e7f2      	b.n	8104966 <__libc_init_array+0x1e>
 8104980:	081096cc 	.word	0x081096cc
 8104984:	081096cc 	.word	0x081096cc
 8104988:	081096cc 	.word	0x081096cc
 810498c:	081096d0 	.word	0x081096d0

08104990 <memcpy>:
 8104990:	440a      	add	r2, r1
 8104992:	4291      	cmp	r1, r2
 8104994:	f100 33ff 	add.w	r3, r0, #4294967295
 8104998:	d100      	bne.n	810499c <memcpy+0xc>
 810499a:	4770      	bx	lr
 810499c:	b510      	push	{r4, lr}
 810499e:	f811 4b01 	ldrb.w	r4, [r1], #1
 81049a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 81049a6:	4291      	cmp	r1, r2
 81049a8:	d1f9      	bne.n	810499e <memcpy+0xe>
 81049aa:	bd10      	pop	{r4, pc}

081049ac <memset>:
 81049ac:	4402      	add	r2, r0
 81049ae:	4603      	mov	r3, r0
 81049b0:	4293      	cmp	r3, r2
 81049b2:	d100      	bne.n	81049b6 <memset+0xa>
 81049b4:	4770      	bx	lr
 81049b6:	f803 1b01 	strb.w	r1, [r3], #1
 81049ba:	e7f9      	b.n	81049b0 <memset+0x4>

081049bc <__cvt>:
 81049bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81049c0:	ec55 4b10 	vmov	r4, r5, d0
 81049c4:	2d00      	cmp	r5, #0
 81049c6:	460e      	mov	r6, r1
 81049c8:	4619      	mov	r1, r3
 81049ca:	462b      	mov	r3, r5
 81049cc:	bfbb      	ittet	lt
 81049ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81049d2:	461d      	movlt	r5, r3
 81049d4:	2300      	movge	r3, #0
 81049d6:	232d      	movlt	r3, #45	; 0x2d
 81049d8:	700b      	strb	r3, [r1, #0]
 81049da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81049dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81049e0:	4691      	mov	r9, r2
 81049e2:	f023 0820 	bic.w	r8, r3, #32
 81049e6:	bfbc      	itt	lt
 81049e8:	4622      	movlt	r2, r4
 81049ea:	4614      	movlt	r4, r2
 81049ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81049f0:	d005      	beq.n	81049fe <__cvt+0x42>
 81049f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81049f6:	d100      	bne.n	81049fa <__cvt+0x3e>
 81049f8:	3601      	adds	r6, #1
 81049fa:	2102      	movs	r1, #2
 81049fc:	e000      	b.n	8104a00 <__cvt+0x44>
 81049fe:	2103      	movs	r1, #3
 8104a00:	ab03      	add	r3, sp, #12
 8104a02:	9301      	str	r3, [sp, #4]
 8104a04:	ab02      	add	r3, sp, #8
 8104a06:	9300      	str	r3, [sp, #0]
 8104a08:	ec45 4b10 	vmov	d0, r4, r5
 8104a0c:	4653      	mov	r3, sl
 8104a0e:	4632      	mov	r2, r6
 8104a10:	f001 fdb6 	bl	8106580 <_dtoa_r>
 8104a14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8104a18:	4607      	mov	r7, r0
 8104a1a:	d102      	bne.n	8104a22 <__cvt+0x66>
 8104a1c:	f019 0f01 	tst.w	r9, #1
 8104a20:	d022      	beq.n	8104a68 <__cvt+0xac>
 8104a22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8104a26:	eb07 0906 	add.w	r9, r7, r6
 8104a2a:	d110      	bne.n	8104a4e <__cvt+0x92>
 8104a2c:	783b      	ldrb	r3, [r7, #0]
 8104a2e:	2b30      	cmp	r3, #48	; 0x30
 8104a30:	d10a      	bne.n	8104a48 <__cvt+0x8c>
 8104a32:	2200      	movs	r2, #0
 8104a34:	2300      	movs	r3, #0
 8104a36:	4620      	mov	r0, r4
 8104a38:	4629      	mov	r1, r5
 8104a3a:	f7fc f8cd 	bl	8100bd8 <__aeabi_dcmpeq>
 8104a3e:	b918      	cbnz	r0, 8104a48 <__cvt+0x8c>
 8104a40:	f1c6 0601 	rsb	r6, r6, #1
 8104a44:	f8ca 6000 	str.w	r6, [sl]
 8104a48:	f8da 3000 	ldr.w	r3, [sl]
 8104a4c:	4499      	add	r9, r3
 8104a4e:	2200      	movs	r2, #0
 8104a50:	2300      	movs	r3, #0
 8104a52:	4620      	mov	r0, r4
 8104a54:	4629      	mov	r1, r5
 8104a56:	f7fc f8bf 	bl	8100bd8 <__aeabi_dcmpeq>
 8104a5a:	b108      	cbz	r0, 8104a60 <__cvt+0xa4>
 8104a5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8104a60:	2230      	movs	r2, #48	; 0x30
 8104a62:	9b03      	ldr	r3, [sp, #12]
 8104a64:	454b      	cmp	r3, r9
 8104a66:	d307      	bcc.n	8104a78 <__cvt+0xbc>
 8104a68:	9b03      	ldr	r3, [sp, #12]
 8104a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8104a6c:	1bdb      	subs	r3, r3, r7
 8104a6e:	4638      	mov	r0, r7
 8104a70:	6013      	str	r3, [r2, #0]
 8104a72:	b004      	add	sp, #16
 8104a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104a78:	1c59      	adds	r1, r3, #1
 8104a7a:	9103      	str	r1, [sp, #12]
 8104a7c:	701a      	strb	r2, [r3, #0]
 8104a7e:	e7f0      	b.n	8104a62 <__cvt+0xa6>

08104a80 <__exponent>:
 8104a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8104a82:	4603      	mov	r3, r0
 8104a84:	2900      	cmp	r1, #0
 8104a86:	bfb8      	it	lt
 8104a88:	4249      	neglt	r1, r1
 8104a8a:	f803 2b02 	strb.w	r2, [r3], #2
 8104a8e:	bfb4      	ite	lt
 8104a90:	222d      	movlt	r2, #45	; 0x2d
 8104a92:	222b      	movge	r2, #43	; 0x2b
 8104a94:	2909      	cmp	r1, #9
 8104a96:	7042      	strb	r2, [r0, #1]
 8104a98:	dd2a      	ble.n	8104af0 <__exponent+0x70>
 8104a9a:	f10d 0407 	add.w	r4, sp, #7
 8104a9e:	46a4      	mov	ip, r4
 8104aa0:	270a      	movs	r7, #10
 8104aa2:	46a6      	mov	lr, r4
 8104aa4:	460a      	mov	r2, r1
 8104aa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8104aaa:	fb07 1516 	mls	r5, r7, r6, r1
 8104aae:	3530      	adds	r5, #48	; 0x30
 8104ab0:	2a63      	cmp	r2, #99	; 0x63
 8104ab2:	f104 34ff 	add.w	r4, r4, #4294967295
 8104ab6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8104aba:	4631      	mov	r1, r6
 8104abc:	dcf1      	bgt.n	8104aa2 <__exponent+0x22>
 8104abe:	3130      	adds	r1, #48	; 0x30
 8104ac0:	f1ae 0502 	sub.w	r5, lr, #2
 8104ac4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8104ac8:	1c44      	adds	r4, r0, #1
 8104aca:	4629      	mov	r1, r5
 8104acc:	4561      	cmp	r1, ip
 8104ace:	d30a      	bcc.n	8104ae6 <__exponent+0x66>
 8104ad0:	f10d 0209 	add.w	r2, sp, #9
 8104ad4:	eba2 020e 	sub.w	r2, r2, lr
 8104ad8:	4565      	cmp	r5, ip
 8104ada:	bf88      	it	hi
 8104adc:	2200      	movhi	r2, #0
 8104ade:	4413      	add	r3, r2
 8104ae0:	1a18      	subs	r0, r3, r0
 8104ae2:	b003      	add	sp, #12
 8104ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8104ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8104aea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8104aee:	e7ed      	b.n	8104acc <__exponent+0x4c>
 8104af0:	2330      	movs	r3, #48	; 0x30
 8104af2:	3130      	adds	r1, #48	; 0x30
 8104af4:	7083      	strb	r3, [r0, #2]
 8104af6:	70c1      	strb	r1, [r0, #3]
 8104af8:	1d03      	adds	r3, r0, #4
 8104afa:	e7f1      	b.n	8104ae0 <__exponent+0x60>

08104afc <_printf_float>:
 8104afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104b00:	ed2d 8b02 	vpush	{d8}
 8104b04:	b08d      	sub	sp, #52	; 0x34
 8104b06:	460c      	mov	r4, r1
 8104b08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8104b0c:	4616      	mov	r6, r2
 8104b0e:	461f      	mov	r7, r3
 8104b10:	4605      	mov	r5, r0
 8104b12:	f002 fe91 	bl	8107838 <_localeconv_r>
 8104b16:	f8d0 a000 	ldr.w	sl, [r0]
 8104b1a:	4650      	mov	r0, sl
 8104b1c:	f7fb fbe0 	bl	81002e0 <strlen>
 8104b20:	2300      	movs	r3, #0
 8104b22:	930a      	str	r3, [sp, #40]	; 0x28
 8104b24:	6823      	ldr	r3, [r4, #0]
 8104b26:	9305      	str	r3, [sp, #20]
 8104b28:	f8d8 3000 	ldr.w	r3, [r8]
 8104b2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8104b30:	3307      	adds	r3, #7
 8104b32:	f023 0307 	bic.w	r3, r3, #7
 8104b36:	f103 0208 	add.w	r2, r3, #8
 8104b3a:	f8c8 2000 	str.w	r2, [r8]
 8104b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8104b46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8104b4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8104b4e:	9307      	str	r3, [sp, #28]
 8104b50:	f8cd 8018 	str.w	r8, [sp, #24]
 8104b54:	ee08 0a10 	vmov	s16, r0
 8104b58:	4b9f      	ldr	r3, [pc, #636]	; (8104dd8 <_printf_float+0x2dc>)
 8104b5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8104b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8104b62:	f7fc f86b 	bl	8100c3c <__aeabi_dcmpun>
 8104b66:	bb88      	cbnz	r0, 8104bcc <_printf_float+0xd0>
 8104b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8104b6c:	4b9a      	ldr	r3, [pc, #616]	; (8104dd8 <_printf_float+0x2dc>)
 8104b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8104b72:	f7fc f845 	bl	8100c00 <__aeabi_dcmple>
 8104b76:	bb48      	cbnz	r0, 8104bcc <_printf_float+0xd0>
 8104b78:	2200      	movs	r2, #0
 8104b7a:	2300      	movs	r3, #0
 8104b7c:	4640      	mov	r0, r8
 8104b7e:	4649      	mov	r1, r9
 8104b80:	f7fc f834 	bl	8100bec <__aeabi_dcmplt>
 8104b84:	b110      	cbz	r0, 8104b8c <_printf_float+0x90>
 8104b86:	232d      	movs	r3, #45	; 0x2d
 8104b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104b8c:	4b93      	ldr	r3, [pc, #588]	; (8104ddc <_printf_float+0x2e0>)
 8104b8e:	4894      	ldr	r0, [pc, #592]	; (8104de0 <_printf_float+0x2e4>)
 8104b90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8104b94:	bf94      	ite	ls
 8104b96:	4698      	movls	r8, r3
 8104b98:	4680      	movhi	r8, r0
 8104b9a:	2303      	movs	r3, #3
 8104b9c:	6123      	str	r3, [r4, #16]
 8104b9e:	9b05      	ldr	r3, [sp, #20]
 8104ba0:	f023 0204 	bic.w	r2, r3, #4
 8104ba4:	6022      	str	r2, [r4, #0]
 8104ba6:	f04f 0900 	mov.w	r9, #0
 8104baa:	9700      	str	r7, [sp, #0]
 8104bac:	4633      	mov	r3, r6
 8104bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8104bb0:	4621      	mov	r1, r4
 8104bb2:	4628      	mov	r0, r5
 8104bb4:	f000 f9d8 	bl	8104f68 <_printf_common>
 8104bb8:	3001      	adds	r0, #1
 8104bba:	f040 8090 	bne.w	8104cde <_printf_float+0x1e2>
 8104bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8104bc2:	b00d      	add	sp, #52	; 0x34
 8104bc4:	ecbd 8b02 	vpop	{d8}
 8104bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104bcc:	4642      	mov	r2, r8
 8104bce:	464b      	mov	r3, r9
 8104bd0:	4640      	mov	r0, r8
 8104bd2:	4649      	mov	r1, r9
 8104bd4:	f7fc f832 	bl	8100c3c <__aeabi_dcmpun>
 8104bd8:	b140      	cbz	r0, 8104bec <_printf_float+0xf0>
 8104bda:	464b      	mov	r3, r9
 8104bdc:	2b00      	cmp	r3, #0
 8104bde:	bfbc      	itt	lt
 8104be0:	232d      	movlt	r3, #45	; 0x2d
 8104be2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8104be6:	487f      	ldr	r0, [pc, #508]	; (8104de4 <_printf_float+0x2e8>)
 8104be8:	4b7f      	ldr	r3, [pc, #508]	; (8104de8 <_printf_float+0x2ec>)
 8104bea:	e7d1      	b.n	8104b90 <_printf_float+0x94>
 8104bec:	6863      	ldr	r3, [r4, #4]
 8104bee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8104bf2:	9206      	str	r2, [sp, #24]
 8104bf4:	1c5a      	adds	r2, r3, #1
 8104bf6:	d13f      	bne.n	8104c78 <_printf_float+0x17c>
 8104bf8:	2306      	movs	r3, #6
 8104bfa:	6063      	str	r3, [r4, #4]
 8104bfc:	9b05      	ldr	r3, [sp, #20]
 8104bfe:	6861      	ldr	r1, [r4, #4]
 8104c00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8104c04:	2300      	movs	r3, #0
 8104c06:	9303      	str	r3, [sp, #12]
 8104c08:	ab0a      	add	r3, sp, #40	; 0x28
 8104c0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8104c0e:	ab09      	add	r3, sp, #36	; 0x24
 8104c10:	ec49 8b10 	vmov	d0, r8, r9
 8104c14:	9300      	str	r3, [sp, #0]
 8104c16:	6022      	str	r2, [r4, #0]
 8104c18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8104c1c:	4628      	mov	r0, r5
 8104c1e:	f7ff fecd 	bl	81049bc <__cvt>
 8104c22:	9b06      	ldr	r3, [sp, #24]
 8104c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8104c26:	2b47      	cmp	r3, #71	; 0x47
 8104c28:	4680      	mov	r8, r0
 8104c2a:	d108      	bne.n	8104c3e <_printf_float+0x142>
 8104c2c:	1cc8      	adds	r0, r1, #3
 8104c2e:	db02      	blt.n	8104c36 <_printf_float+0x13a>
 8104c30:	6863      	ldr	r3, [r4, #4]
 8104c32:	4299      	cmp	r1, r3
 8104c34:	dd41      	ble.n	8104cba <_printf_float+0x1be>
 8104c36:	f1ab 0b02 	sub.w	fp, fp, #2
 8104c3a:	fa5f fb8b 	uxtb.w	fp, fp
 8104c3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8104c42:	d820      	bhi.n	8104c86 <_printf_float+0x18a>
 8104c44:	3901      	subs	r1, #1
 8104c46:	465a      	mov	r2, fp
 8104c48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8104c4c:	9109      	str	r1, [sp, #36]	; 0x24
 8104c4e:	f7ff ff17 	bl	8104a80 <__exponent>
 8104c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104c54:	1813      	adds	r3, r2, r0
 8104c56:	2a01      	cmp	r2, #1
 8104c58:	4681      	mov	r9, r0
 8104c5a:	6123      	str	r3, [r4, #16]
 8104c5c:	dc02      	bgt.n	8104c64 <_printf_float+0x168>
 8104c5e:	6822      	ldr	r2, [r4, #0]
 8104c60:	07d2      	lsls	r2, r2, #31
 8104c62:	d501      	bpl.n	8104c68 <_printf_float+0x16c>
 8104c64:	3301      	adds	r3, #1
 8104c66:	6123      	str	r3, [r4, #16]
 8104c68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	d09c      	beq.n	8104baa <_printf_float+0xae>
 8104c70:	232d      	movs	r3, #45	; 0x2d
 8104c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104c76:	e798      	b.n	8104baa <_printf_float+0xae>
 8104c78:	9a06      	ldr	r2, [sp, #24]
 8104c7a:	2a47      	cmp	r2, #71	; 0x47
 8104c7c:	d1be      	bne.n	8104bfc <_printf_float+0x100>
 8104c7e:	2b00      	cmp	r3, #0
 8104c80:	d1bc      	bne.n	8104bfc <_printf_float+0x100>
 8104c82:	2301      	movs	r3, #1
 8104c84:	e7b9      	b.n	8104bfa <_printf_float+0xfe>
 8104c86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8104c8a:	d118      	bne.n	8104cbe <_printf_float+0x1c2>
 8104c8c:	2900      	cmp	r1, #0
 8104c8e:	6863      	ldr	r3, [r4, #4]
 8104c90:	dd0b      	ble.n	8104caa <_printf_float+0x1ae>
 8104c92:	6121      	str	r1, [r4, #16]
 8104c94:	b913      	cbnz	r3, 8104c9c <_printf_float+0x1a0>
 8104c96:	6822      	ldr	r2, [r4, #0]
 8104c98:	07d0      	lsls	r0, r2, #31
 8104c9a:	d502      	bpl.n	8104ca2 <_printf_float+0x1a6>
 8104c9c:	3301      	adds	r3, #1
 8104c9e:	440b      	add	r3, r1
 8104ca0:	6123      	str	r3, [r4, #16]
 8104ca2:	65a1      	str	r1, [r4, #88]	; 0x58
 8104ca4:	f04f 0900 	mov.w	r9, #0
 8104ca8:	e7de      	b.n	8104c68 <_printf_float+0x16c>
 8104caa:	b913      	cbnz	r3, 8104cb2 <_printf_float+0x1b6>
 8104cac:	6822      	ldr	r2, [r4, #0]
 8104cae:	07d2      	lsls	r2, r2, #31
 8104cb0:	d501      	bpl.n	8104cb6 <_printf_float+0x1ba>
 8104cb2:	3302      	adds	r3, #2
 8104cb4:	e7f4      	b.n	8104ca0 <_printf_float+0x1a4>
 8104cb6:	2301      	movs	r3, #1
 8104cb8:	e7f2      	b.n	8104ca0 <_printf_float+0x1a4>
 8104cba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8104cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104cc0:	4299      	cmp	r1, r3
 8104cc2:	db05      	blt.n	8104cd0 <_printf_float+0x1d4>
 8104cc4:	6823      	ldr	r3, [r4, #0]
 8104cc6:	6121      	str	r1, [r4, #16]
 8104cc8:	07d8      	lsls	r0, r3, #31
 8104cca:	d5ea      	bpl.n	8104ca2 <_printf_float+0x1a6>
 8104ccc:	1c4b      	adds	r3, r1, #1
 8104cce:	e7e7      	b.n	8104ca0 <_printf_float+0x1a4>
 8104cd0:	2900      	cmp	r1, #0
 8104cd2:	bfd4      	ite	le
 8104cd4:	f1c1 0202 	rsble	r2, r1, #2
 8104cd8:	2201      	movgt	r2, #1
 8104cda:	4413      	add	r3, r2
 8104cdc:	e7e0      	b.n	8104ca0 <_printf_float+0x1a4>
 8104cde:	6823      	ldr	r3, [r4, #0]
 8104ce0:	055a      	lsls	r2, r3, #21
 8104ce2:	d407      	bmi.n	8104cf4 <_printf_float+0x1f8>
 8104ce4:	6923      	ldr	r3, [r4, #16]
 8104ce6:	4642      	mov	r2, r8
 8104ce8:	4631      	mov	r1, r6
 8104cea:	4628      	mov	r0, r5
 8104cec:	47b8      	blx	r7
 8104cee:	3001      	adds	r0, #1
 8104cf0:	d12c      	bne.n	8104d4c <_printf_float+0x250>
 8104cf2:	e764      	b.n	8104bbe <_printf_float+0xc2>
 8104cf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8104cf8:	f240 80e0 	bls.w	8104ebc <_printf_float+0x3c0>
 8104cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8104d00:	2200      	movs	r2, #0
 8104d02:	2300      	movs	r3, #0
 8104d04:	f7fb ff68 	bl	8100bd8 <__aeabi_dcmpeq>
 8104d08:	2800      	cmp	r0, #0
 8104d0a:	d034      	beq.n	8104d76 <_printf_float+0x27a>
 8104d0c:	4a37      	ldr	r2, [pc, #220]	; (8104dec <_printf_float+0x2f0>)
 8104d0e:	2301      	movs	r3, #1
 8104d10:	4631      	mov	r1, r6
 8104d12:	4628      	mov	r0, r5
 8104d14:	47b8      	blx	r7
 8104d16:	3001      	adds	r0, #1
 8104d18:	f43f af51 	beq.w	8104bbe <_printf_float+0xc2>
 8104d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104d20:	429a      	cmp	r2, r3
 8104d22:	db02      	blt.n	8104d2a <_printf_float+0x22e>
 8104d24:	6823      	ldr	r3, [r4, #0]
 8104d26:	07d8      	lsls	r0, r3, #31
 8104d28:	d510      	bpl.n	8104d4c <_printf_float+0x250>
 8104d2a:	ee18 3a10 	vmov	r3, s16
 8104d2e:	4652      	mov	r2, sl
 8104d30:	4631      	mov	r1, r6
 8104d32:	4628      	mov	r0, r5
 8104d34:	47b8      	blx	r7
 8104d36:	3001      	adds	r0, #1
 8104d38:	f43f af41 	beq.w	8104bbe <_printf_float+0xc2>
 8104d3c:	f04f 0800 	mov.w	r8, #0
 8104d40:	f104 091a 	add.w	r9, r4, #26
 8104d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104d46:	3b01      	subs	r3, #1
 8104d48:	4543      	cmp	r3, r8
 8104d4a:	dc09      	bgt.n	8104d60 <_printf_float+0x264>
 8104d4c:	6823      	ldr	r3, [r4, #0]
 8104d4e:	079b      	lsls	r3, r3, #30
 8104d50:	f100 8105 	bmi.w	8104f5e <_printf_float+0x462>
 8104d54:	68e0      	ldr	r0, [r4, #12]
 8104d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8104d58:	4298      	cmp	r0, r3
 8104d5a:	bfb8      	it	lt
 8104d5c:	4618      	movlt	r0, r3
 8104d5e:	e730      	b.n	8104bc2 <_printf_float+0xc6>
 8104d60:	2301      	movs	r3, #1
 8104d62:	464a      	mov	r2, r9
 8104d64:	4631      	mov	r1, r6
 8104d66:	4628      	mov	r0, r5
 8104d68:	47b8      	blx	r7
 8104d6a:	3001      	adds	r0, #1
 8104d6c:	f43f af27 	beq.w	8104bbe <_printf_float+0xc2>
 8104d70:	f108 0801 	add.w	r8, r8, #1
 8104d74:	e7e6      	b.n	8104d44 <_printf_float+0x248>
 8104d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8104d78:	2b00      	cmp	r3, #0
 8104d7a:	dc39      	bgt.n	8104df0 <_printf_float+0x2f4>
 8104d7c:	4a1b      	ldr	r2, [pc, #108]	; (8104dec <_printf_float+0x2f0>)
 8104d7e:	2301      	movs	r3, #1
 8104d80:	4631      	mov	r1, r6
 8104d82:	4628      	mov	r0, r5
 8104d84:	47b8      	blx	r7
 8104d86:	3001      	adds	r0, #1
 8104d88:	f43f af19 	beq.w	8104bbe <_printf_float+0xc2>
 8104d8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104d90:	4313      	orrs	r3, r2
 8104d92:	d102      	bne.n	8104d9a <_printf_float+0x29e>
 8104d94:	6823      	ldr	r3, [r4, #0]
 8104d96:	07d9      	lsls	r1, r3, #31
 8104d98:	d5d8      	bpl.n	8104d4c <_printf_float+0x250>
 8104d9a:	ee18 3a10 	vmov	r3, s16
 8104d9e:	4652      	mov	r2, sl
 8104da0:	4631      	mov	r1, r6
 8104da2:	4628      	mov	r0, r5
 8104da4:	47b8      	blx	r7
 8104da6:	3001      	adds	r0, #1
 8104da8:	f43f af09 	beq.w	8104bbe <_printf_float+0xc2>
 8104dac:	f04f 0900 	mov.w	r9, #0
 8104db0:	f104 0a1a 	add.w	sl, r4, #26
 8104db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8104db6:	425b      	negs	r3, r3
 8104db8:	454b      	cmp	r3, r9
 8104dba:	dc01      	bgt.n	8104dc0 <_printf_float+0x2c4>
 8104dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104dbe:	e792      	b.n	8104ce6 <_printf_float+0x1ea>
 8104dc0:	2301      	movs	r3, #1
 8104dc2:	4652      	mov	r2, sl
 8104dc4:	4631      	mov	r1, r6
 8104dc6:	4628      	mov	r0, r5
 8104dc8:	47b8      	blx	r7
 8104dca:	3001      	adds	r0, #1
 8104dcc:	f43f aef7 	beq.w	8104bbe <_printf_float+0xc2>
 8104dd0:	f109 0901 	add.w	r9, r9, #1
 8104dd4:	e7ee      	b.n	8104db4 <_printf_float+0x2b8>
 8104dd6:	bf00      	nop
 8104dd8:	7fefffff 	.word	0x7fefffff
 8104ddc:	0810921c 	.word	0x0810921c
 8104de0:	08109220 	.word	0x08109220
 8104de4:	08109228 	.word	0x08109228
 8104de8:	08109224 	.word	0x08109224
 8104dec:	0810922c 	.word	0x0810922c
 8104df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8104df4:	429a      	cmp	r2, r3
 8104df6:	bfa8      	it	ge
 8104df8:	461a      	movge	r2, r3
 8104dfa:	2a00      	cmp	r2, #0
 8104dfc:	4691      	mov	r9, r2
 8104dfe:	dc37      	bgt.n	8104e70 <_printf_float+0x374>
 8104e00:	f04f 0b00 	mov.w	fp, #0
 8104e04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104e08:	f104 021a 	add.w	r2, r4, #26
 8104e0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8104e0e:	9305      	str	r3, [sp, #20]
 8104e10:	eba3 0309 	sub.w	r3, r3, r9
 8104e14:	455b      	cmp	r3, fp
 8104e16:	dc33      	bgt.n	8104e80 <_printf_float+0x384>
 8104e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104e1c:	429a      	cmp	r2, r3
 8104e1e:	db3b      	blt.n	8104e98 <_printf_float+0x39c>
 8104e20:	6823      	ldr	r3, [r4, #0]
 8104e22:	07da      	lsls	r2, r3, #31
 8104e24:	d438      	bmi.n	8104e98 <_printf_float+0x39c>
 8104e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104e28:	9b05      	ldr	r3, [sp, #20]
 8104e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8104e2c:	1ad3      	subs	r3, r2, r3
 8104e2e:	eba2 0901 	sub.w	r9, r2, r1
 8104e32:	4599      	cmp	r9, r3
 8104e34:	bfa8      	it	ge
 8104e36:	4699      	movge	r9, r3
 8104e38:	f1b9 0f00 	cmp.w	r9, #0
 8104e3c:	dc35      	bgt.n	8104eaa <_printf_float+0x3ae>
 8104e3e:	f04f 0800 	mov.w	r8, #0
 8104e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104e46:	f104 0a1a 	add.w	sl, r4, #26
 8104e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104e4e:	1a9b      	subs	r3, r3, r2
 8104e50:	eba3 0309 	sub.w	r3, r3, r9
 8104e54:	4543      	cmp	r3, r8
 8104e56:	f77f af79 	ble.w	8104d4c <_printf_float+0x250>
 8104e5a:	2301      	movs	r3, #1
 8104e5c:	4652      	mov	r2, sl
 8104e5e:	4631      	mov	r1, r6
 8104e60:	4628      	mov	r0, r5
 8104e62:	47b8      	blx	r7
 8104e64:	3001      	adds	r0, #1
 8104e66:	f43f aeaa 	beq.w	8104bbe <_printf_float+0xc2>
 8104e6a:	f108 0801 	add.w	r8, r8, #1
 8104e6e:	e7ec      	b.n	8104e4a <_printf_float+0x34e>
 8104e70:	4613      	mov	r3, r2
 8104e72:	4631      	mov	r1, r6
 8104e74:	4642      	mov	r2, r8
 8104e76:	4628      	mov	r0, r5
 8104e78:	47b8      	blx	r7
 8104e7a:	3001      	adds	r0, #1
 8104e7c:	d1c0      	bne.n	8104e00 <_printf_float+0x304>
 8104e7e:	e69e      	b.n	8104bbe <_printf_float+0xc2>
 8104e80:	2301      	movs	r3, #1
 8104e82:	4631      	mov	r1, r6
 8104e84:	4628      	mov	r0, r5
 8104e86:	9205      	str	r2, [sp, #20]
 8104e88:	47b8      	blx	r7
 8104e8a:	3001      	adds	r0, #1
 8104e8c:	f43f ae97 	beq.w	8104bbe <_printf_float+0xc2>
 8104e90:	9a05      	ldr	r2, [sp, #20]
 8104e92:	f10b 0b01 	add.w	fp, fp, #1
 8104e96:	e7b9      	b.n	8104e0c <_printf_float+0x310>
 8104e98:	ee18 3a10 	vmov	r3, s16
 8104e9c:	4652      	mov	r2, sl
 8104e9e:	4631      	mov	r1, r6
 8104ea0:	4628      	mov	r0, r5
 8104ea2:	47b8      	blx	r7
 8104ea4:	3001      	adds	r0, #1
 8104ea6:	d1be      	bne.n	8104e26 <_printf_float+0x32a>
 8104ea8:	e689      	b.n	8104bbe <_printf_float+0xc2>
 8104eaa:	9a05      	ldr	r2, [sp, #20]
 8104eac:	464b      	mov	r3, r9
 8104eae:	4442      	add	r2, r8
 8104eb0:	4631      	mov	r1, r6
 8104eb2:	4628      	mov	r0, r5
 8104eb4:	47b8      	blx	r7
 8104eb6:	3001      	adds	r0, #1
 8104eb8:	d1c1      	bne.n	8104e3e <_printf_float+0x342>
 8104eba:	e680      	b.n	8104bbe <_printf_float+0xc2>
 8104ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104ebe:	2a01      	cmp	r2, #1
 8104ec0:	dc01      	bgt.n	8104ec6 <_printf_float+0x3ca>
 8104ec2:	07db      	lsls	r3, r3, #31
 8104ec4:	d538      	bpl.n	8104f38 <_printf_float+0x43c>
 8104ec6:	2301      	movs	r3, #1
 8104ec8:	4642      	mov	r2, r8
 8104eca:	4631      	mov	r1, r6
 8104ecc:	4628      	mov	r0, r5
 8104ece:	47b8      	blx	r7
 8104ed0:	3001      	adds	r0, #1
 8104ed2:	f43f ae74 	beq.w	8104bbe <_printf_float+0xc2>
 8104ed6:	ee18 3a10 	vmov	r3, s16
 8104eda:	4652      	mov	r2, sl
 8104edc:	4631      	mov	r1, r6
 8104ede:	4628      	mov	r0, r5
 8104ee0:	47b8      	blx	r7
 8104ee2:	3001      	adds	r0, #1
 8104ee4:	f43f ae6b 	beq.w	8104bbe <_printf_float+0xc2>
 8104ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8104eec:	2200      	movs	r2, #0
 8104eee:	2300      	movs	r3, #0
 8104ef0:	f7fb fe72 	bl	8100bd8 <__aeabi_dcmpeq>
 8104ef4:	b9d8      	cbnz	r0, 8104f2e <_printf_float+0x432>
 8104ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104ef8:	f108 0201 	add.w	r2, r8, #1
 8104efc:	3b01      	subs	r3, #1
 8104efe:	4631      	mov	r1, r6
 8104f00:	4628      	mov	r0, r5
 8104f02:	47b8      	blx	r7
 8104f04:	3001      	adds	r0, #1
 8104f06:	d10e      	bne.n	8104f26 <_printf_float+0x42a>
 8104f08:	e659      	b.n	8104bbe <_printf_float+0xc2>
 8104f0a:	2301      	movs	r3, #1
 8104f0c:	4652      	mov	r2, sl
 8104f0e:	4631      	mov	r1, r6
 8104f10:	4628      	mov	r0, r5
 8104f12:	47b8      	blx	r7
 8104f14:	3001      	adds	r0, #1
 8104f16:	f43f ae52 	beq.w	8104bbe <_printf_float+0xc2>
 8104f1a:	f108 0801 	add.w	r8, r8, #1
 8104f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104f20:	3b01      	subs	r3, #1
 8104f22:	4543      	cmp	r3, r8
 8104f24:	dcf1      	bgt.n	8104f0a <_printf_float+0x40e>
 8104f26:	464b      	mov	r3, r9
 8104f28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8104f2c:	e6dc      	b.n	8104ce8 <_printf_float+0x1ec>
 8104f2e:	f04f 0800 	mov.w	r8, #0
 8104f32:	f104 0a1a 	add.w	sl, r4, #26
 8104f36:	e7f2      	b.n	8104f1e <_printf_float+0x422>
 8104f38:	2301      	movs	r3, #1
 8104f3a:	4642      	mov	r2, r8
 8104f3c:	e7df      	b.n	8104efe <_printf_float+0x402>
 8104f3e:	2301      	movs	r3, #1
 8104f40:	464a      	mov	r2, r9
 8104f42:	4631      	mov	r1, r6
 8104f44:	4628      	mov	r0, r5
 8104f46:	47b8      	blx	r7
 8104f48:	3001      	adds	r0, #1
 8104f4a:	f43f ae38 	beq.w	8104bbe <_printf_float+0xc2>
 8104f4e:	f108 0801 	add.w	r8, r8, #1
 8104f52:	68e3      	ldr	r3, [r4, #12]
 8104f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8104f56:	1a5b      	subs	r3, r3, r1
 8104f58:	4543      	cmp	r3, r8
 8104f5a:	dcf0      	bgt.n	8104f3e <_printf_float+0x442>
 8104f5c:	e6fa      	b.n	8104d54 <_printf_float+0x258>
 8104f5e:	f04f 0800 	mov.w	r8, #0
 8104f62:	f104 0919 	add.w	r9, r4, #25
 8104f66:	e7f4      	b.n	8104f52 <_printf_float+0x456>

08104f68 <_printf_common>:
 8104f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104f6c:	4616      	mov	r6, r2
 8104f6e:	4699      	mov	r9, r3
 8104f70:	688a      	ldr	r2, [r1, #8]
 8104f72:	690b      	ldr	r3, [r1, #16]
 8104f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8104f78:	4293      	cmp	r3, r2
 8104f7a:	bfb8      	it	lt
 8104f7c:	4613      	movlt	r3, r2
 8104f7e:	6033      	str	r3, [r6, #0]
 8104f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8104f84:	4607      	mov	r7, r0
 8104f86:	460c      	mov	r4, r1
 8104f88:	b10a      	cbz	r2, 8104f8e <_printf_common+0x26>
 8104f8a:	3301      	adds	r3, #1
 8104f8c:	6033      	str	r3, [r6, #0]
 8104f8e:	6823      	ldr	r3, [r4, #0]
 8104f90:	0699      	lsls	r1, r3, #26
 8104f92:	bf42      	ittt	mi
 8104f94:	6833      	ldrmi	r3, [r6, #0]
 8104f96:	3302      	addmi	r3, #2
 8104f98:	6033      	strmi	r3, [r6, #0]
 8104f9a:	6825      	ldr	r5, [r4, #0]
 8104f9c:	f015 0506 	ands.w	r5, r5, #6
 8104fa0:	d106      	bne.n	8104fb0 <_printf_common+0x48>
 8104fa2:	f104 0a19 	add.w	sl, r4, #25
 8104fa6:	68e3      	ldr	r3, [r4, #12]
 8104fa8:	6832      	ldr	r2, [r6, #0]
 8104faa:	1a9b      	subs	r3, r3, r2
 8104fac:	42ab      	cmp	r3, r5
 8104fae:	dc26      	bgt.n	8104ffe <_printf_common+0x96>
 8104fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8104fb4:	1e13      	subs	r3, r2, #0
 8104fb6:	6822      	ldr	r2, [r4, #0]
 8104fb8:	bf18      	it	ne
 8104fba:	2301      	movne	r3, #1
 8104fbc:	0692      	lsls	r2, r2, #26
 8104fbe:	d42b      	bmi.n	8105018 <_printf_common+0xb0>
 8104fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8104fc4:	4649      	mov	r1, r9
 8104fc6:	4638      	mov	r0, r7
 8104fc8:	47c0      	blx	r8
 8104fca:	3001      	adds	r0, #1
 8104fcc:	d01e      	beq.n	810500c <_printf_common+0xa4>
 8104fce:	6823      	ldr	r3, [r4, #0]
 8104fd0:	68e5      	ldr	r5, [r4, #12]
 8104fd2:	6832      	ldr	r2, [r6, #0]
 8104fd4:	f003 0306 	and.w	r3, r3, #6
 8104fd8:	2b04      	cmp	r3, #4
 8104fda:	bf08      	it	eq
 8104fdc:	1aad      	subeq	r5, r5, r2
 8104fde:	68a3      	ldr	r3, [r4, #8]
 8104fe0:	6922      	ldr	r2, [r4, #16]
 8104fe2:	bf0c      	ite	eq
 8104fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8104fe8:	2500      	movne	r5, #0
 8104fea:	4293      	cmp	r3, r2
 8104fec:	bfc4      	itt	gt
 8104fee:	1a9b      	subgt	r3, r3, r2
 8104ff0:	18ed      	addgt	r5, r5, r3
 8104ff2:	2600      	movs	r6, #0
 8104ff4:	341a      	adds	r4, #26
 8104ff6:	42b5      	cmp	r5, r6
 8104ff8:	d11a      	bne.n	8105030 <_printf_common+0xc8>
 8104ffa:	2000      	movs	r0, #0
 8104ffc:	e008      	b.n	8105010 <_printf_common+0xa8>
 8104ffe:	2301      	movs	r3, #1
 8105000:	4652      	mov	r2, sl
 8105002:	4649      	mov	r1, r9
 8105004:	4638      	mov	r0, r7
 8105006:	47c0      	blx	r8
 8105008:	3001      	adds	r0, #1
 810500a:	d103      	bne.n	8105014 <_printf_common+0xac>
 810500c:	f04f 30ff 	mov.w	r0, #4294967295
 8105010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105014:	3501      	adds	r5, #1
 8105016:	e7c6      	b.n	8104fa6 <_printf_common+0x3e>
 8105018:	18e1      	adds	r1, r4, r3
 810501a:	1c5a      	adds	r2, r3, #1
 810501c:	2030      	movs	r0, #48	; 0x30
 810501e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8105022:	4422      	add	r2, r4
 8105024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8105028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810502c:	3302      	adds	r3, #2
 810502e:	e7c7      	b.n	8104fc0 <_printf_common+0x58>
 8105030:	2301      	movs	r3, #1
 8105032:	4622      	mov	r2, r4
 8105034:	4649      	mov	r1, r9
 8105036:	4638      	mov	r0, r7
 8105038:	47c0      	blx	r8
 810503a:	3001      	adds	r0, #1
 810503c:	d0e6      	beq.n	810500c <_printf_common+0xa4>
 810503e:	3601      	adds	r6, #1
 8105040:	e7d9      	b.n	8104ff6 <_printf_common+0x8e>
	...

08105044 <_printf_i>:
 8105044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8105048:	460c      	mov	r4, r1
 810504a:	4691      	mov	r9, r2
 810504c:	7e27      	ldrb	r7, [r4, #24]
 810504e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8105050:	2f78      	cmp	r7, #120	; 0x78
 8105052:	4680      	mov	r8, r0
 8105054:	469a      	mov	sl, r3
 8105056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810505a:	d807      	bhi.n	810506c <_printf_i+0x28>
 810505c:	2f62      	cmp	r7, #98	; 0x62
 810505e:	d80a      	bhi.n	8105076 <_printf_i+0x32>
 8105060:	2f00      	cmp	r7, #0
 8105062:	f000 80d8 	beq.w	8105216 <_printf_i+0x1d2>
 8105066:	2f58      	cmp	r7, #88	; 0x58
 8105068:	f000 80a3 	beq.w	81051b2 <_printf_i+0x16e>
 810506c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8105070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8105074:	e03a      	b.n	81050ec <_printf_i+0xa8>
 8105076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810507a:	2b15      	cmp	r3, #21
 810507c:	d8f6      	bhi.n	810506c <_printf_i+0x28>
 810507e:	a001      	add	r0, pc, #4	; (adr r0, 8105084 <_printf_i+0x40>)
 8105080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8105084:	081050dd 	.word	0x081050dd
 8105088:	081050f1 	.word	0x081050f1
 810508c:	0810506d 	.word	0x0810506d
 8105090:	0810506d 	.word	0x0810506d
 8105094:	0810506d 	.word	0x0810506d
 8105098:	0810506d 	.word	0x0810506d
 810509c:	081050f1 	.word	0x081050f1
 81050a0:	0810506d 	.word	0x0810506d
 81050a4:	0810506d 	.word	0x0810506d
 81050a8:	0810506d 	.word	0x0810506d
 81050ac:	0810506d 	.word	0x0810506d
 81050b0:	081051fd 	.word	0x081051fd
 81050b4:	08105121 	.word	0x08105121
 81050b8:	081051df 	.word	0x081051df
 81050bc:	0810506d 	.word	0x0810506d
 81050c0:	0810506d 	.word	0x0810506d
 81050c4:	0810521f 	.word	0x0810521f
 81050c8:	0810506d 	.word	0x0810506d
 81050cc:	08105121 	.word	0x08105121
 81050d0:	0810506d 	.word	0x0810506d
 81050d4:	0810506d 	.word	0x0810506d
 81050d8:	081051e7 	.word	0x081051e7
 81050dc:	680b      	ldr	r3, [r1, #0]
 81050de:	1d1a      	adds	r2, r3, #4
 81050e0:	681b      	ldr	r3, [r3, #0]
 81050e2:	600a      	str	r2, [r1, #0]
 81050e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81050e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81050ec:	2301      	movs	r3, #1
 81050ee:	e0a3      	b.n	8105238 <_printf_i+0x1f4>
 81050f0:	6825      	ldr	r5, [r4, #0]
 81050f2:	6808      	ldr	r0, [r1, #0]
 81050f4:	062e      	lsls	r6, r5, #24
 81050f6:	f100 0304 	add.w	r3, r0, #4
 81050fa:	d50a      	bpl.n	8105112 <_printf_i+0xce>
 81050fc:	6805      	ldr	r5, [r0, #0]
 81050fe:	600b      	str	r3, [r1, #0]
 8105100:	2d00      	cmp	r5, #0
 8105102:	da03      	bge.n	810510c <_printf_i+0xc8>
 8105104:	232d      	movs	r3, #45	; 0x2d
 8105106:	426d      	negs	r5, r5
 8105108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810510c:	485e      	ldr	r0, [pc, #376]	; (8105288 <_printf_i+0x244>)
 810510e:	230a      	movs	r3, #10
 8105110:	e019      	b.n	8105146 <_printf_i+0x102>
 8105112:	f015 0f40 	tst.w	r5, #64	; 0x40
 8105116:	6805      	ldr	r5, [r0, #0]
 8105118:	600b      	str	r3, [r1, #0]
 810511a:	bf18      	it	ne
 810511c:	b22d      	sxthne	r5, r5
 810511e:	e7ef      	b.n	8105100 <_printf_i+0xbc>
 8105120:	680b      	ldr	r3, [r1, #0]
 8105122:	6825      	ldr	r5, [r4, #0]
 8105124:	1d18      	adds	r0, r3, #4
 8105126:	6008      	str	r0, [r1, #0]
 8105128:	0628      	lsls	r0, r5, #24
 810512a:	d501      	bpl.n	8105130 <_printf_i+0xec>
 810512c:	681d      	ldr	r5, [r3, #0]
 810512e:	e002      	b.n	8105136 <_printf_i+0xf2>
 8105130:	0669      	lsls	r1, r5, #25
 8105132:	d5fb      	bpl.n	810512c <_printf_i+0xe8>
 8105134:	881d      	ldrh	r5, [r3, #0]
 8105136:	4854      	ldr	r0, [pc, #336]	; (8105288 <_printf_i+0x244>)
 8105138:	2f6f      	cmp	r7, #111	; 0x6f
 810513a:	bf0c      	ite	eq
 810513c:	2308      	moveq	r3, #8
 810513e:	230a      	movne	r3, #10
 8105140:	2100      	movs	r1, #0
 8105142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8105146:	6866      	ldr	r6, [r4, #4]
 8105148:	60a6      	str	r6, [r4, #8]
 810514a:	2e00      	cmp	r6, #0
 810514c:	bfa2      	ittt	ge
 810514e:	6821      	ldrge	r1, [r4, #0]
 8105150:	f021 0104 	bicge.w	r1, r1, #4
 8105154:	6021      	strge	r1, [r4, #0]
 8105156:	b90d      	cbnz	r5, 810515c <_printf_i+0x118>
 8105158:	2e00      	cmp	r6, #0
 810515a:	d04d      	beq.n	81051f8 <_printf_i+0x1b4>
 810515c:	4616      	mov	r6, r2
 810515e:	fbb5 f1f3 	udiv	r1, r5, r3
 8105162:	fb03 5711 	mls	r7, r3, r1, r5
 8105166:	5dc7      	ldrb	r7, [r0, r7]
 8105168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810516c:	462f      	mov	r7, r5
 810516e:	42bb      	cmp	r3, r7
 8105170:	460d      	mov	r5, r1
 8105172:	d9f4      	bls.n	810515e <_printf_i+0x11a>
 8105174:	2b08      	cmp	r3, #8
 8105176:	d10b      	bne.n	8105190 <_printf_i+0x14c>
 8105178:	6823      	ldr	r3, [r4, #0]
 810517a:	07df      	lsls	r7, r3, #31
 810517c:	d508      	bpl.n	8105190 <_printf_i+0x14c>
 810517e:	6923      	ldr	r3, [r4, #16]
 8105180:	6861      	ldr	r1, [r4, #4]
 8105182:	4299      	cmp	r1, r3
 8105184:	bfde      	ittt	le
 8105186:	2330      	movle	r3, #48	; 0x30
 8105188:	f806 3c01 	strble.w	r3, [r6, #-1]
 810518c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8105190:	1b92      	subs	r2, r2, r6
 8105192:	6122      	str	r2, [r4, #16]
 8105194:	f8cd a000 	str.w	sl, [sp]
 8105198:	464b      	mov	r3, r9
 810519a:	aa03      	add	r2, sp, #12
 810519c:	4621      	mov	r1, r4
 810519e:	4640      	mov	r0, r8
 81051a0:	f7ff fee2 	bl	8104f68 <_printf_common>
 81051a4:	3001      	adds	r0, #1
 81051a6:	d14c      	bne.n	8105242 <_printf_i+0x1fe>
 81051a8:	f04f 30ff 	mov.w	r0, #4294967295
 81051ac:	b004      	add	sp, #16
 81051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81051b2:	4835      	ldr	r0, [pc, #212]	; (8105288 <_printf_i+0x244>)
 81051b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81051b8:	6823      	ldr	r3, [r4, #0]
 81051ba:	680e      	ldr	r6, [r1, #0]
 81051bc:	061f      	lsls	r7, r3, #24
 81051be:	f856 5b04 	ldr.w	r5, [r6], #4
 81051c2:	600e      	str	r6, [r1, #0]
 81051c4:	d514      	bpl.n	81051f0 <_printf_i+0x1ac>
 81051c6:	07d9      	lsls	r1, r3, #31
 81051c8:	bf44      	itt	mi
 81051ca:	f043 0320 	orrmi.w	r3, r3, #32
 81051ce:	6023      	strmi	r3, [r4, #0]
 81051d0:	b91d      	cbnz	r5, 81051da <_printf_i+0x196>
 81051d2:	6823      	ldr	r3, [r4, #0]
 81051d4:	f023 0320 	bic.w	r3, r3, #32
 81051d8:	6023      	str	r3, [r4, #0]
 81051da:	2310      	movs	r3, #16
 81051dc:	e7b0      	b.n	8105140 <_printf_i+0xfc>
 81051de:	6823      	ldr	r3, [r4, #0]
 81051e0:	f043 0320 	orr.w	r3, r3, #32
 81051e4:	6023      	str	r3, [r4, #0]
 81051e6:	2378      	movs	r3, #120	; 0x78
 81051e8:	4828      	ldr	r0, [pc, #160]	; (810528c <_printf_i+0x248>)
 81051ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81051ee:	e7e3      	b.n	81051b8 <_printf_i+0x174>
 81051f0:	065e      	lsls	r6, r3, #25
 81051f2:	bf48      	it	mi
 81051f4:	b2ad      	uxthmi	r5, r5
 81051f6:	e7e6      	b.n	81051c6 <_printf_i+0x182>
 81051f8:	4616      	mov	r6, r2
 81051fa:	e7bb      	b.n	8105174 <_printf_i+0x130>
 81051fc:	680b      	ldr	r3, [r1, #0]
 81051fe:	6826      	ldr	r6, [r4, #0]
 8105200:	6960      	ldr	r0, [r4, #20]
 8105202:	1d1d      	adds	r5, r3, #4
 8105204:	600d      	str	r5, [r1, #0]
 8105206:	0635      	lsls	r5, r6, #24
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	d501      	bpl.n	8105210 <_printf_i+0x1cc>
 810520c:	6018      	str	r0, [r3, #0]
 810520e:	e002      	b.n	8105216 <_printf_i+0x1d2>
 8105210:	0671      	lsls	r1, r6, #25
 8105212:	d5fb      	bpl.n	810520c <_printf_i+0x1c8>
 8105214:	8018      	strh	r0, [r3, #0]
 8105216:	2300      	movs	r3, #0
 8105218:	6123      	str	r3, [r4, #16]
 810521a:	4616      	mov	r6, r2
 810521c:	e7ba      	b.n	8105194 <_printf_i+0x150>
 810521e:	680b      	ldr	r3, [r1, #0]
 8105220:	1d1a      	adds	r2, r3, #4
 8105222:	600a      	str	r2, [r1, #0]
 8105224:	681e      	ldr	r6, [r3, #0]
 8105226:	6862      	ldr	r2, [r4, #4]
 8105228:	2100      	movs	r1, #0
 810522a:	4630      	mov	r0, r6
 810522c:	f7fb f860 	bl	81002f0 <memchr>
 8105230:	b108      	cbz	r0, 8105236 <_printf_i+0x1f2>
 8105232:	1b80      	subs	r0, r0, r6
 8105234:	6060      	str	r0, [r4, #4]
 8105236:	6863      	ldr	r3, [r4, #4]
 8105238:	6123      	str	r3, [r4, #16]
 810523a:	2300      	movs	r3, #0
 810523c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105240:	e7a8      	b.n	8105194 <_printf_i+0x150>
 8105242:	6923      	ldr	r3, [r4, #16]
 8105244:	4632      	mov	r2, r6
 8105246:	4649      	mov	r1, r9
 8105248:	4640      	mov	r0, r8
 810524a:	47d0      	blx	sl
 810524c:	3001      	adds	r0, #1
 810524e:	d0ab      	beq.n	81051a8 <_printf_i+0x164>
 8105250:	6823      	ldr	r3, [r4, #0]
 8105252:	079b      	lsls	r3, r3, #30
 8105254:	d413      	bmi.n	810527e <_printf_i+0x23a>
 8105256:	68e0      	ldr	r0, [r4, #12]
 8105258:	9b03      	ldr	r3, [sp, #12]
 810525a:	4298      	cmp	r0, r3
 810525c:	bfb8      	it	lt
 810525e:	4618      	movlt	r0, r3
 8105260:	e7a4      	b.n	81051ac <_printf_i+0x168>
 8105262:	2301      	movs	r3, #1
 8105264:	4632      	mov	r2, r6
 8105266:	4649      	mov	r1, r9
 8105268:	4640      	mov	r0, r8
 810526a:	47d0      	blx	sl
 810526c:	3001      	adds	r0, #1
 810526e:	d09b      	beq.n	81051a8 <_printf_i+0x164>
 8105270:	3501      	adds	r5, #1
 8105272:	68e3      	ldr	r3, [r4, #12]
 8105274:	9903      	ldr	r1, [sp, #12]
 8105276:	1a5b      	subs	r3, r3, r1
 8105278:	42ab      	cmp	r3, r5
 810527a:	dcf2      	bgt.n	8105262 <_printf_i+0x21e>
 810527c:	e7eb      	b.n	8105256 <_printf_i+0x212>
 810527e:	2500      	movs	r5, #0
 8105280:	f104 0619 	add.w	r6, r4, #25
 8105284:	e7f5      	b.n	8105272 <_printf_i+0x22e>
 8105286:	bf00      	nop
 8105288:	0810922e 	.word	0x0810922e
 810528c:	0810923f 	.word	0x0810923f

08105290 <_scanf_float>:
 8105290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105294:	b087      	sub	sp, #28
 8105296:	4617      	mov	r7, r2
 8105298:	9303      	str	r3, [sp, #12]
 810529a:	688b      	ldr	r3, [r1, #8]
 810529c:	1e5a      	subs	r2, r3, #1
 810529e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81052a2:	bf83      	ittte	hi
 81052a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81052a8:	195b      	addhi	r3, r3, r5
 81052aa:	9302      	strhi	r3, [sp, #8]
 81052ac:	2300      	movls	r3, #0
 81052ae:	bf86      	itte	hi
 81052b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 81052b4:	608b      	strhi	r3, [r1, #8]
 81052b6:	9302      	strls	r3, [sp, #8]
 81052b8:	680b      	ldr	r3, [r1, #0]
 81052ba:	468b      	mov	fp, r1
 81052bc:	2500      	movs	r5, #0
 81052be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81052c2:	f84b 3b1c 	str.w	r3, [fp], #28
 81052c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81052ca:	4680      	mov	r8, r0
 81052cc:	460c      	mov	r4, r1
 81052ce:	465e      	mov	r6, fp
 81052d0:	46aa      	mov	sl, r5
 81052d2:	46a9      	mov	r9, r5
 81052d4:	9501      	str	r5, [sp, #4]
 81052d6:	68a2      	ldr	r2, [r4, #8]
 81052d8:	b152      	cbz	r2, 81052f0 <_scanf_float+0x60>
 81052da:	683b      	ldr	r3, [r7, #0]
 81052dc:	781b      	ldrb	r3, [r3, #0]
 81052de:	2b4e      	cmp	r3, #78	; 0x4e
 81052e0:	d864      	bhi.n	81053ac <_scanf_float+0x11c>
 81052e2:	2b40      	cmp	r3, #64	; 0x40
 81052e4:	d83c      	bhi.n	8105360 <_scanf_float+0xd0>
 81052e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81052ea:	b2c8      	uxtb	r0, r1
 81052ec:	280e      	cmp	r0, #14
 81052ee:	d93a      	bls.n	8105366 <_scanf_float+0xd6>
 81052f0:	f1b9 0f00 	cmp.w	r9, #0
 81052f4:	d003      	beq.n	81052fe <_scanf_float+0x6e>
 81052f6:	6823      	ldr	r3, [r4, #0]
 81052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81052fc:	6023      	str	r3, [r4, #0]
 81052fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8105302:	f1ba 0f01 	cmp.w	sl, #1
 8105306:	f200 8113 	bhi.w	8105530 <_scanf_float+0x2a0>
 810530a:	455e      	cmp	r6, fp
 810530c:	f200 8105 	bhi.w	810551a <_scanf_float+0x28a>
 8105310:	2501      	movs	r5, #1
 8105312:	4628      	mov	r0, r5
 8105314:	b007      	add	sp, #28
 8105316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810531a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810531e:	2a0d      	cmp	r2, #13
 8105320:	d8e6      	bhi.n	81052f0 <_scanf_float+0x60>
 8105322:	a101      	add	r1, pc, #4	; (adr r1, 8105328 <_scanf_float+0x98>)
 8105324:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8105328:	08105467 	.word	0x08105467
 810532c:	081052f1 	.word	0x081052f1
 8105330:	081052f1 	.word	0x081052f1
 8105334:	081052f1 	.word	0x081052f1
 8105338:	081054c7 	.word	0x081054c7
 810533c:	0810549f 	.word	0x0810549f
 8105340:	081052f1 	.word	0x081052f1
 8105344:	081052f1 	.word	0x081052f1
 8105348:	08105475 	.word	0x08105475
 810534c:	081052f1 	.word	0x081052f1
 8105350:	081052f1 	.word	0x081052f1
 8105354:	081052f1 	.word	0x081052f1
 8105358:	081052f1 	.word	0x081052f1
 810535c:	0810542d 	.word	0x0810542d
 8105360:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8105364:	e7db      	b.n	810531e <_scanf_float+0x8e>
 8105366:	290e      	cmp	r1, #14
 8105368:	d8c2      	bhi.n	81052f0 <_scanf_float+0x60>
 810536a:	a001      	add	r0, pc, #4	; (adr r0, 8105370 <_scanf_float+0xe0>)
 810536c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8105370:	0810541f 	.word	0x0810541f
 8105374:	081052f1 	.word	0x081052f1
 8105378:	0810541f 	.word	0x0810541f
 810537c:	081054b3 	.word	0x081054b3
 8105380:	081052f1 	.word	0x081052f1
 8105384:	081053cd 	.word	0x081053cd
 8105388:	08105409 	.word	0x08105409
 810538c:	08105409 	.word	0x08105409
 8105390:	08105409 	.word	0x08105409
 8105394:	08105409 	.word	0x08105409
 8105398:	08105409 	.word	0x08105409
 810539c:	08105409 	.word	0x08105409
 81053a0:	08105409 	.word	0x08105409
 81053a4:	08105409 	.word	0x08105409
 81053a8:	08105409 	.word	0x08105409
 81053ac:	2b6e      	cmp	r3, #110	; 0x6e
 81053ae:	d809      	bhi.n	81053c4 <_scanf_float+0x134>
 81053b0:	2b60      	cmp	r3, #96	; 0x60
 81053b2:	d8b2      	bhi.n	810531a <_scanf_float+0x8a>
 81053b4:	2b54      	cmp	r3, #84	; 0x54
 81053b6:	d077      	beq.n	81054a8 <_scanf_float+0x218>
 81053b8:	2b59      	cmp	r3, #89	; 0x59
 81053ba:	d199      	bne.n	81052f0 <_scanf_float+0x60>
 81053bc:	2d07      	cmp	r5, #7
 81053be:	d197      	bne.n	81052f0 <_scanf_float+0x60>
 81053c0:	2508      	movs	r5, #8
 81053c2:	e029      	b.n	8105418 <_scanf_float+0x188>
 81053c4:	2b74      	cmp	r3, #116	; 0x74
 81053c6:	d06f      	beq.n	81054a8 <_scanf_float+0x218>
 81053c8:	2b79      	cmp	r3, #121	; 0x79
 81053ca:	e7f6      	b.n	81053ba <_scanf_float+0x12a>
 81053cc:	6821      	ldr	r1, [r4, #0]
 81053ce:	05c8      	lsls	r0, r1, #23
 81053d0:	d51a      	bpl.n	8105408 <_scanf_float+0x178>
 81053d2:	9b02      	ldr	r3, [sp, #8]
 81053d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81053d8:	6021      	str	r1, [r4, #0]
 81053da:	f109 0901 	add.w	r9, r9, #1
 81053de:	b11b      	cbz	r3, 81053e8 <_scanf_float+0x158>
 81053e0:	3b01      	subs	r3, #1
 81053e2:	3201      	adds	r2, #1
 81053e4:	9302      	str	r3, [sp, #8]
 81053e6:	60a2      	str	r2, [r4, #8]
 81053e8:	68a3      	ldr	r3, [r4, #8]
 81053ea:	3b01      	subs	r3, #1
 81053ec:	60a3      	str	r3, [r4, #8]
 81053ee:	6923      	ldr	r3, [r4, #16]
 81053f0:	3301      	adds	r3, #1
 81053f2:	6123      	str	r3, [r4, #16]
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	3b01      	subs	r3, #1
 81053f8:	2b00      	cmp	r3, #0
 81053fa:	607b      	str	r3, [r7, #4]
 81053fc:	f340 8084 	ble.w	8105508 <_scanf_float+0x278>
 8105400:	683b      	ldr	r3, [r7, #0]
 8105402:	3301      	adds	r3, #1
 8105404:	603b      	str	r3, [r7, #0]
 8105406:	e766      	b.n	81052d6 <_scanf_float+0x46>
 8105408:	eb1a 0f05 	cmn.w	sl, r5
 810540c:	f47f af70 	bne.w	81052f0 <_scanf_float+0x60>
 8105410:	6822      	ldr	r2, [r4, #0]
 8105412:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8105416:	6022      	str	r2, [r4, #0]
 8105418:	f806 3b01 	strb.w	r3, [r6], #1
 810541c:	e7e4      	b.n	81053e8 <_scanf_float+0x158>
 810541e:	6822      	ldr	r2, [r4, #0]
 8105420:	0610      	lsls	r0, r2, #24
 8105422:	f57f af65 	bpl.w	81052f0 <_scanf_float+0x60>
 8105426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810542a:	e7f4      	b.n	8105416 <_scanf_float+0x186>
 810542c:	f1ba 0f00 	cmp.w	sl, #0
 8105430:	d10e      	bne.n	8105450 <_scanf_float+0x1c0>
 8105432:	f1b9 0f00 	cmp.w	r9, #0
 8105436:	d10e      	bne.n	8105456 <_scanf_float+0x1c6>
 8105438:	6822      	ldr	r2, [r4, #0]
 810543a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810543e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8105442:	d108      	bne.n	8105456 <_scanf_float+0x1c6>
 8105444:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8105448:	6022      	str	r2, [r4, #0]
 810544a:	f04f 0a01 	mov.w	sl, #1
 810544e:	e7e3      	b.n	8105418 <_scanf_float+0x188>
 8105450:	f1ba 0f02 	cmp.w	sl, #2
 8105454:	d055      	beq.n	8105502 <_scanf_float+0x272>
 8105456:	2d01      	cmp	r5, #1
 8105458:	d002      	beq.n	8105460 <_scanf_float+0x1d0>
 810545a:	2d04      	cmp	r5, #4
 810545c:	f47f af48 	bne.w	81052f0 <_scanf_float+0x60>
 8105460:	3501      	adds	r5, #1
 8105462:	b2ed      	uxtb	r5, r5
 8105464:	e7d8      	b.n	8105418 <_scanf_float+0x188>
 8105466:	f1ba 0f01 	cmp.w	sl, #1
 810546a:	f47f af41 	bne.w	81052f0 <_scanf_float+0x60>
 810546e:	f04f 0a02 	mov.w	sl, #2
 8105472:	e7d1      	b.n	8105418 <_scanf_float+0x188>
 8105474:	b97d      	cbnz	r5, 8105496 <_scanf_float+0x206>
 8105476:	f1b9 0f00 	cmp.w	r9, #0
 810547a:	f47f af3c 	bne.w	81052f6 <_scanf_float+0x66>
 810547e:	6822      	ldr	r2, [r4, #0]
 8105480:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8105484:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8105488:	f47f af39 	bne.w	81052fe <_scanf_float+0x6e>
 810548c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8105490:	6022      	str	r2, [r4, #0]
 8105492:	2501      	movs	r5, #1
 8105494:	e7c0      	b.n	8105418 <_scanf_float+0x188>
 8105496:	2d03      	cmp	r5, #3
 8105498:	d0e2      	beq.n	8105460 <_scanf_float+0x1d0>
 810549a:	2d05      	cmp	r5, #5
 810549c:	e7de      	b.n	810545c <_scanf_float+0x1cc>
 810549e:	2d02      	cmp	r5, #2
 81054a0:	f47f af26 	bne.w	81052f0 <_scanf_float+0x60>
 81054a4:	2503      	movs	r5, #3
 81054a6:	e7b7      	b.n	8105418 <_scanf_float+0x188>
 81054a8:	2d06      	cmp	r5, #6
 81054aa:	f47f af21 	bne.w	81052f0 <_scanf_float+0x60>
 81054ae:	2507      	movs	r5, #7
 81054b0:	e7b2      	b.n	8105418 <_scanf_float+0x188>
 81054b2:	6822      	ldr	r2, [r4, #0]
 81054b4:	0591      	lsls	r1, r2, #22
 81054b6:	f57f af1b 	bpl.w	81052f0 <_scanf_float+0x60>
 81054ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81054be:	6022      	str	r2, [r4, #0]
 81054c0:	f8cd 9004 	str.w	r9, [sp, #4]
 81054c4:	e7a8      	b.n	8105418 <_scanf_float+0x188>
 81054c6:	6822      	ldr	r2, [r4, #0]
 81054c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81054cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81054d0:	d006      	beq.n	81054e0 <_scanf_float+0x250>
 81054d2:	0550      	lsls	r0, r2, #21
 81054d4:	f57f af0c 	bpl.w	81052f0 <_scanf_float+0x60>
 81054d8:	f1b9 0f00 	cmp.w	r9, #0
 81054dc:	f43f af0f 	beq.w	81052fe <_scanf_float+0x6e>
 81054e0:	0591      	lsls	r1, r2, #22
 81054e2:	bf58      	it	pl
 81054e4:	9901      	ldrpl	r1, [sp, #4]
 81054e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81054ea:	bf58      	it	pl
 81054ec:	eba9 0101 	subpl.w	r1, r9, r1
 81054f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 81054f4:	bf58      	it	pl
 81054f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 81054fa:	6022      	str	r2, [r4, #0]
 81054fc:	f04f 0900 	mov.w	r9, #0
 8105500:	e78a      	b.n	8105418 <_scanf_float+0x188>
 8105502:	f04f 0a03 	mov.w	sl, #3
 8105506:	e787      	b.n	8105418 <_scanf_float+0x188>
 8105508:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810550c:	4639      	mov	r1, r7
 810550e:	4640      	mov	r0, r8
 8105510:	4798      	blx	r3
 8105512:	2800      	cmp	r0, #0
 8105514:	f43f aedf 	beq.w	81052d6 <_scanf_float+0x46>
 8105518:	e6ea      	b.n	81052f0 <_scanf_float+0x60>
 810551a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810551e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8105522:	463a      	mov	r2, r7
 8105524:	4640      	mov	r0, r8
 8105526:	4798      	blx	r3
 8105528:	6923      	ldr	r3, [r4, #16]
 810552a:	3b01      	subs	r3, #1
 810552c:	6123      	str	r3, [r4, #16]
 810552e:	e6ec      	b.n	810530a <_scanf_float+0x7a>
 8105530:	1e6b      	subs	r3, r5, #1
 8105532:	2b06      	cmp	r3, #6
 8105534:	d825      	bhi.n	8105582 <_scanf_float+0x2f2>
 8105536:	2d02      	cmp	r5, #2
 8105538:	d836      	bhi.n	81055a8 <_scanf_float+0x318>
 810553a:	455e      	cmp	r6, fp
 810553c:	f67f aee8 	bls.w	8105310 <_scanf_float+0x80>
 8105540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8105544:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8105548:	463a      	mov	r2, r7
 810554a:	4640      	mov	r0, r8
 810554c:	4798      	blx	r3
 810554e:	6923      	ldr	r3, [r4, #16]
 8105550:	3b01      	subs	r3, #1
 8105552:	6123      	str	r3, [r4, #16]
 8105554:	e7f1      	b.n	810553a <_scanf_float+0x2aa>
 8105556:	9802      	ldr	r0, [sp, #8]
 8105558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810555c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8105560:	9002      	str	r0, [sp, #8]
 8105562:	463a      	mov	r2, r7
 8105564:	4640      	mov	r0, r8
 8105566:	4798      	blx	r3
 8105568:	6923      	ldr	r3, [r4, #16]
 810556a:	3b01      	subs	r3, #1
 810556c:	6123      	str	r3, [r4, #16]
 810556e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8105572:	fa5f fa8a 	uxtb.w	sl, sl
 8105576:	f1ba 0f02 	cmp.w	sl, #2
 810557a:	d1ec      	bne.n	8105556 <_scanf_float+0x2c6>
 810557c:	3d03      	subs	r5, #3
 810557e:	b2ed      	uxtb	r5, r5
 8105580:	1b76      	subs	r6, r6, r5
 8105582:	6823      	ldr	r3, [r4, #0]
 8105584:	05da      	lsls	r2, r3, #23
 8105586:	d52f      	bpl.n	81055e8 <_scanf_float+0x358>
 8105588:	055b      	lsls	r3, r3, #21
 810558a:	d510      	bpl.n	81055ae <_scanf_float+0x31e>
 810558c:	455e      	cmp	r6, fp
 810558e:	f67f aebf 	bls.w	8105310 <_scanf_float+0x80>
 8105592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8105596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810559a:	463a      	mov	r2, r7
 810559c:	4640      	mov	r0, r8
 810559e:	4798      	blx	r3
 81055a0:	6923      	ldr	r3, [r4, #16]
 81055a2:	3b01      	subs	r3, #1
 81055a4:	6123      	str	r3, [r4, #16]
 81055a6:	e7f1      	b.n	810558c <_scanf_float+0x2fc>
 81055a8:	46aa      	mov	sl, r5
 81055aa:	9602      	str	r6, [sp, #8]
 81055ac:	e7df      	b.n	810556e <_scanf_float+0x2de>
 81055ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81055b2:	6923      	ldr	r3, [r4, #16]
 81055b4:	2965      	cmp	r1, #101	; 0x65
 81055b6:	f103 33ff 	add.w	r3, r3, #4294967295
 81055ba:	f106 35ff 	add.w	r5, r6, #4294967295
 81055be:	6123      	str	r3, [r4, #16]
 81055c0:	d00c      	beq.n	81055dc <_scanf_float+0x34c>
 81055c2:	2945      	cmp	r1, #69	; 0x45
 81055c4:	d00a      	beq.n	81055dc <_scanf_float+0x34c>
 81055c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81055ca:	463a      	mov	r2, r7
 81055cc:	4640      	mov	r0, r8
 81055ce:	4798      	blx	r3
 81055d0:	6923      	ldr	r3, [r4, #16]
 81055d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81055d6:	3b01      	subs	r3, #1
 81055d8:	1eb5      	subs	r5, r6, #2
 81055da:	6123      	str	r3, [r4, #16]
 81055dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81055e0:	463a      	mov	r2, r7
 81055e2:	4640      	mov	r0, r8
 81055e4:	4798      	blx	r3
 81055e6:	462e      	mov	r6, r5
 81055e8:	6825      	ldr	r5, [r4, #0]
 81055ea:	f015 0510 	ands.w	r5, r5, #16
 81055ee:	d158      	bne.n	81056a2 <_scanf_float+0x412>
 81055f0:	7035      	strb	r5, [r6, #0]
 81055f2:	6823      	ldr	r3, [r4, #0]
 81055f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81055f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81055fc:	d11c      	bne.n	8105638 <_scanf_float+0x3a8>
 81055fe:	9b01      	ldr	r3, [sp, #4]
 8105600:	454b      	cmp	r3, r9
 8105602:	eba3 0209 	sub.w	r2, r3, r9
 8105606:	d124      	bne.n	8105652 <_scanf_float+0x3c2>
 8105608:	2200      	movs	r2, #0
 810560a:	4659      	mov	r1, fp
 810560c:	4640      	mov	r0, r8
 810560e:	f000 fe9d 	bl	810634c <_strtod_r>
 8105612:	9b03      	ldr	r3, [sp, #12]
 8105614:	6821      	ldr	r1, [r4, #0]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	f011 0f02 	tst.w	r1, #2
 810561c:	ec57 6b10 	vmov	r6, r7, d0
 8105620:	f103 0204 	add.w	r2, r3, #4
 8105624:	d020      	beq.n	8105668 <_scanf_float+0x3d8>
 8105626:	9903      	ldr	r1, [sp, #12]
 8105628:	600a      	str	r2, [r1, #0]
 810562a:	681b      	ldr	r3, [r3, #0]
 810562c:	e9c3 6700 	strd	r6, r7, [r3]
 8105630:	68e3      	ldr	r3, [r4, #12]
 8105632:	3301      	adds	r3, #1
 8105634:	60e3      	str	r3, [r4, #12]
 8105636:	e66c      	b.n	8105312 <_scanf_float+0x82>
 8105638:	9b04      	ldr	r3, [sp, #16]
 810563a:	2b00      	cmp	r3, #0
 810563c:	d0e4      	beq.n	8105608 <_scanf_float+0x378>
 810563e:	9905      	ldr	r1, [sp, #20]
 8105640:	230a      	movs	r3, #10
 8105642:	462a      	mov	r2, r5
 8105644:	3101      	adds	r1, #1
 8105646:	4640      	mov	r0, r8
 8105648:	f000 ff0a 	bl	8106460 <_strtol_r>
 810564c:	9b04      	ldr	r3, [sp, #16]
 810564e:	9e05      	ldr	r6, [sp, #20]
 8105650:	1ac2      	subs	r2, r0, r3
 8105652:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8105656:	429e      	cmp	r6, r3
 8105658:	bf28      	it	cs
 810565a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810565e:	4912      	ldr	r1, [pc, #72]	; (81056a8 <_scanf_float+0x418>)
 8105660:	4630      	mov	r0, r6
 8105662:	f000 f82b 	bl	81056bc <siprintf>
 8105666:	e7cf      	b.n	8105608 <_scanf_float+0x378>
 8105668:	f011 0f04 	tst.w	r1, #4
 810566c:	9903      	ldr	r1, [sp, #12]
 810566e:	600a      	str	r2, [r1, #0]
 8105670:	d1db      	bne.n	810562a <_scanf_float+0x39a>
 8105672:	f8d3 8000 	ldr.w	r8, [r3]
 8105676:	ee10 2a10 	vmov	r2, s0
 810567a:	ee10 0a10 	vmov	r0, s0
 810567e:	463b      	mov	r3, r7
 8105680:	4639      	mov	r1, r7
 8105682:	f7fb fadb 	bl	8100c3c <__aeabi_dcmpun>
 8105686:	b128      	cbz	r0, 8105694 <_scanf_float+0x404>
 8105688:	4808      	ldr	r0, [pc, #32]	; (81056ac <_scanf_float+0x41c>)
 810568a:	f000 f811 	bl	81056b0 <nanf>
 810568e:	ed88 0a00 	vstr	s0, [r8]
 8105692:	e7cd      	b.n	8105630 <_scanf_float+0x3a0>
 8105694:	4630      	mov	r0, r6
 8105696:	4639      	mov	r1, r7
 8105698:	f7fb fb2e 	bl	8100cf8 <__aeabi_d2f>
 810569c:	f8c8 0000 	str.w	r0, [r8]
 81056a0:	e7c6      	b.n	8105630 <_scanf_float+0x3a0>
 81056a2:	2500      	movs	r5, #0
 81056a4:	e635      	b.n	8105312 <_scanf_float+0x82>
 81056a6:	bf00      	nop
 81056a8:	08109250 	.word	0x08109250
 81056ac:	08109668 	.word	0x08109668

081056b0 <nanf>:
 81056b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 81056b8 <nanf+0x8>
 81056b4:	4770      	bx	lr
 81056b6:	bf00      	nop
 81056b8:	7fc00000 	.word	0x7fc00000

081056bc <siprintf>:
 81056bc:	b40e      	push	{r1, r2, r3}
 81056be:	b500      	push	{lr}
 81056c0:	b09c      	sub	sp, #112	; 0x70
 81056c2:	ab1d      	add	r3, sp, #116	; 0x74
 81056c4:	9002      	str	r0, [sp, #8]
 81056c6:	9006      	str	r0, [sp, #24]
 81056c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81056cc:	4809      	ldr	r0, [pc, #36]	; (81056f4 <siprintf+0x38>)
 81056ce:	9107      	str	r1, [sp, #28]
 81056d0:	9104      	str	r1, [sp, #16]
 81056d2:	4909      	ldr	r1, [pc, #36]	; (81056f8 <siprintf+0x3c>)
 81056d4:	f853 2b04 	ldr.w	r2, [r3], #4
 81056d8:	9105      	str	r1, [sp, #20]
 81056da:	6800      	ldr	r0, [r0, #0]
 81056dc:	9301      	str	r3, [sp, #4]
 81056de:	a902      	add	r1, sp, #8
 81056e0:	f002 fe98 	bl	8108414 <_svfiprintf_r>
 81056e4:	9b02      	ldr	r3, [sp, #8]
 81056e6:	2200      	movs	r2, #0
 81056e8:	701a      	strb	r2, [r3, #0]
 81056ea:	b01c      	add	sp, #112	; 0x70
 81056ec:	f85d eb04 	ldr.w	lr, [sp], #4
 81056f0:	b003      	add	sp, #12
 81056f2:	4770      	bx	lr
 81056f4:	10000010 	.word	0x10000010
 81056f8:	ffff0208 	.word	0xffff0208

081056fc <sulp>:
 81056fc:	b570      	push	{r4, r5, r6, lr}
 81056fe:	4604      	mov	r4, r0
 8105700:	460d      	mov	r5, r1
 8105702:	ec45 4b10 	vmov	d0, r4, r5
 8105706:	4616      	mov	r6, r2
 8105708:	f002 fc20 	bl	8107f4c <__ulp>
 810570c:	ec51 0b10 	vmov	r0, r1, d0
 8105710:	b17e      	cbz	r6, 8105732 <sulp+0x36>
 8105712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8105716:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810571a:	2b00      	cmp	r3, #0
 810571c:	dd09      	ble.n	8105732 <sulp+0x36>
 810571e:	051b      	lsls	r3, r3, #20
 8105720:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8105724:	2400      	movs	r4, #0
 8105726:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810572a:	4622      	mov	r2, r4
 810572c:	462b      	mov	r3, r5
 810572e:	f7fa ffeb 	bl	8100708 <__aeabi_dmul>
 8105732:	bd70      	pop	{r4, r5, r6, pc}
 8105734:	0000      	movs	r0, r0
	...

08105738 <_strtod_l>:
 8105738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810573c:	b0a3      	sub	sp, #140	; 0x8c
 810573e:	461f      	mov	r7, r3
 8105740:	2300      	movs	r3, #0
 8105742:	931e      	str	r3, [sp, #120]	; 0x78
 8105744:	4ba4      	ldr	r3, [pc, #656]	; (81059d8 <_strtod_l+0x2a0>)
 8105746:	9219      	str	r2, [sp, #100]	; 0x64
 8105748:	681b      	ldr	r3, [r3, #0]
 810574a:	9307      	str	r3, [sp, #28]
 810574c:	4604      	mov	r4, r0
 810574e:	4618      	mov	r0, r3
 8105750:	4688      	mov	r8, r1
 8105752:	f7fa fdc5 	bl	81002e0 <strlen>
 8105756:	f04f 0a00 	mov.w	sl, #0
 810575a:	4605      	mov	r5, r0
 810575c:	f04f 0b00 	mov.w	fp, #0
 8105760:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8105764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105766:	781a      	ldrb	r2, [r3, #0]
 8105768:	2a2b      	cmp	r2, #43	; 0x2b
 810576a:	d04c      	beq.n	8105806 <_strtod_l+0xce>
 810576c:	d839      	bhi.n	81057e2 <_strtod_l+0xaa>
 810576e:	2a0d      	cmp	r2, #13
 8105770:	d832      	bhi.n	81057d8 <_strtod_l+0xa0>
 8105772:	2a08      	cmp	r2, #8
 8105774:	d832      	bhi.n	81057dc <_strtod_l+0xa4>
 8105776:	2a00      	cmp	r2, #0
 8105778:	d03c      	beq.n	81057f4 <_strtod_l+0xbc>
 810577a:	2300      	movs	r3, #0
 810577c:	930e      	str	r3, [sp, #56]	; 0x38
 810577e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8105780:	7833      	ldrb	r3, [r6, #0]
 8105782:	2b30      	cmp	r3, #48	; 0x30
 8105784:	f040 80b4 	bne.w	81058f0 <_strtod_l+0x1b8>
 8105788:	7873      	ldrb	r3, [r6, #1]
 810578a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810578e:	2b58      	cmp	r3, #88	; 0x58
 8105790:	d16c      	bne.n	810586c <_strtod_l+0x134>
 8105792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8105794:	9301      	str	r3, [sp, #4]
 8105796:	ab1e      	add	r3, sp, #120	; 0x78
 8105798:	9702      	str	r7, [sp, #8]
 810579a:	9300      	str	r3, [sp, #0]
 810579c:	4a8f      	ldr	r2, [pc, #572]	; (81059dc <_strtod_l+0x2a4>)
 810579e:	ab1f      	add	r3, sp, #124	; 0x7c
 81057a0:	a91d      	add	r1, sp, #116	; 0x74
 81057a2:	4620      	mov	r0, r4
 81057a4:	f001 fd40 	bl	8107228 <__gethex>
 81057a8:	f010 0707 	ands.w	r7, r0, #7
 81057ac:	4605      	mov	r5, r0
 81057ae:	d005      	beq.n	81057bc <_strtod_l+0x84>
 81057b0:	2f06      	cmp	r7, #6
 81057b2:	d12a      	bne.n	810580a <_strtod_l+0xd2>
 81057b4:	3601      	adds	r6, #1
 81057b6:	2300      	movs	r3, #0
 81057b8:	961d      	str	r6, [sp, #116]	; 0x74
 81057ba:	930e      	str	r3, [sp, #56]	; 0x38
 81057bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81057be:	2b00      	cmp	r3, #0
 81057c0:	f040 8596 	bne.w	81062f0 <_strtod_l+0xbb8>
 81057c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81057c6:	b1db      	cbz	r3, 8105800 <_strtod_l+0xc8>
 81057c8:	4652      	mov	r2, sl
 81057ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 81057ce:	ec43 2b10 	vmov	d0, r2, r3
 81057d2:	b023      	add	sp, #140	; 0x8c
 81057d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81057d8:	2a20      	cmp	r2, #32
 81057da:	d1ce      	bne.n	810577a <_strtod_l+0x42>
 81057dc:	3301      	adds	r3, #1
 81057de:	931d      	str	r3, [sp, #116]	; 0x74
 81057e0:	e7c0      	b.n	8105764 <_strtod_l+0x2c>
 81057e2:	2a2d      	cmp	r2, #45	; 0x2d
 81057e4:	d1c9      	bne.n	810577a <_strtod_l+0x42>
 81057e6:	2201      	movs	r2, #1
 81057e8:	920e      	str	r2, [sp, #56]	; 0x38
 81057ea:	1c5a      	adds	r2, r3, #1
 81057ec:	921d      	str	r2, [sp, #116]	; 0x74
 81057ee:	785b      	ldrb	r3, [r3, #1]
 81057f0:	2b00      	cmp	r3, #0
 81057f2:	d1c4      	bne.n	810577e <_strtod_l+0x46>
 81057f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81057f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81057fa:	2b00      	cmp	r3, #0
 81057fc:	f040 8576 	bne.w	81062ec <_strtod_l+0xbb4>
 8105800:	4652      	mov	r2, sl
 8105802:	465b      	mov	r3, fp
 8105804:	e7e3      	b.n	81057ce <_strtod_l+0x96>
 8105806:	2200      	movs	r2, #0
 8105808:	e7ee      	b.n	81057e8 <_strtod_l+0xb0>
 810580a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810580c:	b13a      	cbz	r2, 810581e <_strtod_l+0xe6>
 810580e:	2135      	movs	r1, #53	; 0x35
 8105810:	a820      	add	r0, sp, #128	; 0x80
 8105812:	f002 fca6 	bl	8108162 <__copybits>
 8105816:	991e      	ldr	r1, [sp, #120]	; 0x78
 8105818:	4620      	mov	r0, r4
 810581a:	f002 f86b 	bl	81078f4 <_Bfree>
 810581e:	3f01      	subs	r7, #1
 8105820:	2f05      	cmp	r7, #5
 8105822:	d807      	bhi.n	8105834 <_strtod_l+0xfc>
 8105824:	e8df f007 	tbb	[pc, r7]
 8105828:	1d180b0e 	.word	0x1d180b0e
 810582c:	030e      	.short	0x030e
 810582e:	f04f 0b00 	mov.w	fp, #0
 8105832:	46da      	mov	sl, fp
 8105834:	0728      	lsls	r0, r5, #28
 8105836:	d5c1      	bpl.n	81057bc <_strtod_l+0x84>
 8105838:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810583c:	e7be      	b.n	81057bc <_strtod_l+0x84>
 810583e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8105842:	e7f7      	b.n	8105834 <_strtod_l+0xfc>
 8105844:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8105848:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 810584a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810584e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8105852:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8105856:	e7ed      	b.n	8105834 <_strtod_l+0xfc>
 8105858:	f8df b184 	ldr.w	fp, [pc, #388]	; 81059e0 <_strtod_l+0x2a8>
 810585c:	f04f 0a00 	mov.w	sl, #0
 8105860:	e7e8      	b.n	8105834 <_strtod_l+0xfc>
 8105862:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8105866:	f04f 3aff 	mov.w	sl, #4294967295
 810586a:	e7e3      	b.n	8105834 <_strtod_l+0xfc>
 810586c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810586e:	1c5a      	adds	r2, r3, #1
 8105870:	921d      	str	r2, [sp, #116]	; 0x74
 8105872:	785b      	ldrb	r3, [r3, #1]
 8105874:	2b30      	cmp	r3, #48	; 0x30
 8105876:	d0f9      	beq.n	810586c <_strtod_l+0x134>
 8105878:	2b00      	cmp	r3, #0
 810587a:	d09f      	beq.n	81057bc <_strtod_l+0x84>
 810587c:	2301      	movs	r3, #1
 810587e:	f04f 0900 	mov.w	r9, #0
 8105882:	9304      	str	r3, [sp, #16]
 8105884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105886:	930a      	str	r3, [sp, #40]	; 0x28
 8105888:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810588c:	464f      	mov	r7, r9
 810588e:	220a      	movs	r2, #10
 8105890:	981d      	ldr	r0, [sp, #116]	; 0x74
 8105892:	7806      	ldrb	r6, [r0, #0]
 8105894:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8105898:	b2d9      	uxtb	r1, r3
 810589a:	2909      	cmp	r1, #9
 810589c:	d92a      	bls.n	81058f4 <_strtod_l+0x1bc>
 810589e:	9907      	ldr	r1, [sp, #28]
 81058a0:	462a      	mov	r2, r5
 81058a2:	f002 fed1 	bl	8108648 <strncmp>
 81058a6:	b398      	cbz	r0, 8105910 <_strtod_l+0x1d8>
 81058a8:	2000      	movs	r0, #0
 81058aa:	4633      	mov	r3, r6
 81058ac:	463d      	mov	r5, r7
 81058ae:	9007      	str	r0, [sp, #28]
 81058b0:	4602      	mov	r2, r0
 81058b2:	2b65      	cmp	r3, #101	; 0x65
 81058b4:	d001      	beq.n	81058ba <_strtod_l+0x182>
 81058b6:	2b45      	cmp	r3, #69	; 0x45
 81058b8:	d118      	bne.n	81058ec <_strtod_l+0x1b4>
 81058ba:	b91d      	cbnz	r5, 81058c4 <_strtod_l+0x18c>
 81058bc:	9b04      	ldr	r3, [sp, #16]
 81058be:	4303      	orrs	r3, r0
 81058c0:	d098      	beq.n	81057f4 <_strtod_l+0xbc>
 81058c2:	2500      	movs	r5, #0
 81058c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 81058c8:	f108 0301 	add.w	r3, r8, #1
 81058cc:	931d      	str	r3, [sp, #116]	; 0x74
 81058ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 81058d2:	2b2b      	cmp	r3, #43	; 0x2b
 81058d4:	d075      	beq.n	81059c2 <_strtod_l+0x28a>
 81058d6:	2b2d      	cmp	r3, #45	; 0x2d
 81058d8:	d07b      	beq.n	81059d2 <_strtod_l+0x29a>
 81058da:	f04f 0c00 	mov.w	ip, #0
 81058de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 81058e2:	2909      	cmp	r1, #9
 81058e4:	f240 8082 	bls.w	81059ec <_strtod_l+0x2b4>
 81058e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81058ec:	2600      	movs	r6, #0
 81058ee:	e09d      	b.n	8105a2c <_strtod_l+0x2f4>
 81058f0:	2300      	movs	r3, #0
 81058f2:	e7c4      	b.n	810587e <_strtod_l+0x146>
 81058f4:	2f08      	cmp	r7, #8
 81058f6:	bfd8      	it	le
 81058f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 81058fa:	f100 0001 	add.w	r0, r0, #1
 81058fe:	bfda      	itte	le
 8105900:	fb02 3301 	mlale	r3, r2, r1, r3
 8105904:	9309      	strle	r3, [sp, #36]	; 0x24
 8105906:	fb02 3909 	mlagt	r9, r2, r9, r3
 810590a:	3701      	adds	r7, #1
 810590c:	901d      	str	r0, [sp, #116]	; 0x74
 810590e:	e7bf      	b.n	8105890 <_strtod_l+0x158>
 8105910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105912:	195a      	adds	r2, r3, r5
 8105914:	921d      	str	r2, [sp, #116]	; 0x74
 8105916:	5d5b      	ldrb	r3, [r3, r5]
 8105918:	2f00      	cmp	r7, #0
 810591a:	d037      	beq.n	810598c <_strtod_l+0x254>
 810591c:	9007      	str	r0, [sp, #28]
 810591e:	463d      	mov	r5, r7
 8105920:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8105924:	2a09      	cmp	r2, #9
 8105926:	d912      	bls.n	810594e <_strtod_l+0x216>
 8105928:	2201      	movs	r2, #1
 810592a:	e7c2      	b.n	81058b2 <_strtod_l+0x17a>
 810592c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810592e:	1c5a      	adds	r2, r3, #1
 8105930:	921d      	str	r2, [sp, #116]	; 0x74
 8105932:	785b      	ldrb	r3, [r3, #1]
 8105934:	3001      	adds	r0, #1
 8105936:	2b30      	cmp	r3, #48	; 0x30
 8105938:	d0f8      	beq.n	810592c <_strtod_l+0x1f4>
 810593a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 810593e:	2a08      	cmp	r2, #8
 8105940:	f200 84db 	bhi.w	81062fa <_strtod_l+0xbc2>
 8105944:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8105946:	9007      	str	r0, [sp, #28]
 8105948:	2000      	movs	r0, #0
 810594a:	920a      	str	r2, [sp, #40]	; 0x28
 810594c:	4605      	mov	r5, r0
 810594e:	3b30      	subs	r3, #48	; 0x30
 8105950:	f100 0201 	add.w	r2, r0, #1
 8105954:	d014      	beq.n	8105980 <_strtod_l+0x248>
 8105956:	9907      	ldr	r1, [sp, #28]
 8105958:	4411      	add	r1, r2
 810595a:	9107      	str	r1, [sp, #28]
 810595c:	462a      	mov	r2, r5
 810595e:	eb00 0e05 	add.w	lr, r0, r5
 8105962:	210a      	movs	r1, #10
 8105964:	4572      	cmp	r2, lr
 8105966:	d113      	bne.n	8105990 <_strtod_l+0x258>
 8105968:	182a      	adds	r2, r5, r0
 810596a:	2a08      	cmp	r2, #8
 810596c:	f105 0501 	add.w	r5, r5, #1
 8105970:	4405      	add	r5, r0
 8105972:	dc1c      	bgt.n	81059ae <_strtod_l+0x276>
 8105974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8105976:	220a      	movs	r2, #10
 8105978:	fb02 3301 	mla	r3, r2, r1, r3
 810597c:	9309      	str	r3, [sp, #36]	; 0x24
 810597e:	2200      	movs	r2, #0
 8105980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105982:	1c59      	adds	r1, r3, #1
 8105984:	911d      	str	r1, [sp, #116]	; 0x74
 8105986:	785b      	ldrb	r3, [r3, #1]
 8105988:	4610      	mov	r0, r2
 810598a:	e7c9      	b.n	8105920 <_strtod_l+0x1e8>
 810598c:	4638      	mov	r0, r7
 810598e:	e7d2      	b.n	8105936 <_strtod_l+0x1fe>
 8105990:	2a08      	cmp	r2, #8
 8105992:	dc04      	bgt.n	810599e <_strtod_l+0x266>
 8105994:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8105996:	434e      	muls	r6, r1
 8105998:	9609      	str	r6, [sp, #36]	; 0x24
 810599a:	3201      	adds	r2, #1
 810599c:	e7e2      	b.n	8105964 <_strtod_l+0x22c>
 810599e:	f102 0c01 	add.w	ip, r2, #1
 81059a2:	f1bc 0f10 	cmp.w	ip, #16
 81059a6:	bfd8      	it	le
 81059a8:	fb01 f909 	mulle.w	r9, r1, r9
 81059ac:	e7f5      	b.n	810599a <_strtod_l+0x262>
 81059ae:	2d10      	cmp	r5, #16
 81059b0:	bfdc      	itt	le
 81059b2:	220a      	movle	r2, #10
 81059b4:	fb02 3909 	mlale	r9, r2, r9, r3
 81059b8:	e7e1      	b.n	810597e <_strtod_l+0x246>
 81059ba:	2300      	movs	r3, #0
 81059bc:	9307      	str	r3, [sp, #28]
 81059be:	2201      	movs	r2, #1
 81059c0:	e77c      	b.n	81058bc <_strtod_l+0x184>
 81059c2:	f04f 0c00 	mov.w	ip, #0
 81059c6:	f108 0302 	add.w	r3, r8, #2
 81059ca:	931d      	str	r3, [sp, #116]	; 0x74
 81059cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 81059d0:	e785      	b.n	81058de <_strtod_l+0x1a6>
 81059d2:	f04f 0c01 	mov.w	ip, #1
 81059d6:	e7f6      	b.n	81059c6 <_strtod_l+0x28e>
 81059d8:	081094a8 	.word	0x081094a8
 81059dc:	08109258 	.word	0x08109258
 81059e0:	7ff00000 	.word	0x7ff00000
 81059e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81059e6:	1c59      	adds	r1, r3, #1
 81059e8:	911d      	str	r1, [sp, #116]	; 0x74
 81059ea:	785b      	ldrb	r3, [r3, #1]
 81059ec:	2b30      	cmp	r3, #48	; 0x30
 81059ee:	d0f9      	beq.n	81059e4 <_strtod_l+0x2ac>
 81059f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 81059f4:	2908      	cmp	r1, #8
 81059f6:	f63f af79 	bhi.w	81058ec <_strtod_l+0x1b4>
 81059fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 81059fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105a00:	9308      	str	r3, [sp, #32]
 8105a02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105a04:	1c59      	adds	r1, r3, #1
 8105a06:	911d      	str	r1, [sp, #116]	; 0x74
 8105a08:	785b      	ldrb	r3, [r3, #1]
 8105a0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8105a0e:	2e09      	cmp	r6, #9
 8105a10:	d937      	bls.n	8105a82 <_strtod_l+0x34a>
 8105a12:	9e08      	ldr	r6, [sp, #32]
 8105a14:	1b89      	subs	r1, r1, r6
 8105a16:	2908      	cmp	r1, #8
 8105a18:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8105a1c:	dc02      	bgt.n	8105a24 <_strtod_l+0x2ec>
 8105a1e:	4576      	cmp	r6, lr
 8105a20:	bfa8      	it	ge
 8105a22:	4676      	movge	r6, lr
 8105a24:	f1bc 0f00 	cmp.w	ip, #0
 8105a28:	d000      	beq.n	8105a2c <_strtod_l+0x2f4>
 8105a2a:	4276      	negs	r6, r6
 8105a2c:	2d00      	cmp	r5, #0
 8105a2e:	d14f      	bne.n	8105ad0 <_strtod_l+0x398>
 8105a30:	9904      	ldr	r1, [sp, #16]
 8105a32:	4301      	orrs	r1, r0
 8105a34:	f47f aec2 	bne.w	81057bc <_strtod_l+0x84>
 8105a38:	2a00      	cmp	r2, #0
 8105a3a:	f47f aedb 	bne.w	81057f4 <_strtod_l+0xbc>
 8105a3e:	2b69      	cmp	r3, #105	; 0x69
 8105a40:	d027      	beq.n	8105a92 <_strtod_l+0x35a>
 8105a42:	dc24      	bgt.n	8105a8e <_strtod_l+0x356>
 8105a44:	2b49      	cmp	r3, #73	; 0x49
 8105a46:	d024      	beq.n	8105a92 <_strtod_l+0x35a>
 8105a48:	2b4e      	cmp	r3, #78	; 0x4e
 8105a4a:	f47f aed3 	bne.w	81057f4 <_strtod_l+0xbc>
 8105a4e:	499e      	ldr	r1, [pc, #632]	; (8105cc8 <_strtod_l+0x590>)
 8105a50:	a81d      	add	r0, sp, #116	; 0x74
 8105a52:	f001 fe41 	bl	81076d8 <__match>
 8105a56:	2800      	cmp	r0, #0
 8105a58:	f43f aecc 	beq.w	81057f4 <_strtod_l+0xbc>
 8105a5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105a5e:	781b      	ldrb	r3, [r3, #0]
 8105a60:	2b28      	cmp	r3, #40	; 0x28
 8105a62:	d12d      	bne.n	8105ac0 <_strtod_l+0x388>
 8105a64:	4999      	ldr	r1, [pc, #612]	; (8105ccc <_strtod_l+0x594>)
 8105a66:	aa20      	add	r2, sp, #128	; 0x80
 8105a68:	a81d      	add	r0, sp, #116	; 0x74
 8105a6a:	f001 fe49 	bl	8107700 <__hexnan>
 8105a6e:	2805      	cmp	r0, #5
 8105a70:	d126      	bne.n	8105ac0 <_strtod_l+0x388>
 8105a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105a74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8105a78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8105a7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8105a80:	e69c      	b.n	81057bc <_strtod_l+0x84>
 8105a82:	210a      	movs	r1, #10
 8105a84:	fb01 3e0e 	mla	lr, r1, lr, r3
 8105a88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8105a8c:	e7b9      	b.n	8105a02 <_strtod_l+0x2ca>
 8105a8e:	2b6e      	cmp	r3, #110	; 0x6e
 8105a90:	e7db      	b.n	8105a4a <_strtod_l+0x312>
 8105a92:	498f      	ldr	r1, [pc, #572]	; (8105cd0 <_strtod_l+0x598>)
 8105a94:	a81d      	add	r0, sp, #116	; 0x74
 8105a96:	f001 fe1f 	bl	81076d8 <__match>
 8105a9a:	2800      	cmp	r0, #0
 8105a9c:	f43f aeaa 	beq.w	81057f4 <_strtod_l+0xbc>
 8105aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105aa2:	498c      	ldr	r1, [pc, #560]	; (8105cd4 <_strtod_l+0x59c>)
 8105aa4:	3b01      	subs	r3, #1
 8105aa6:	a81d      	add	r0, sp, #116	; 0x74
 8105aa8:	931d      	str	r3, [sp, #116]	; 0x74
 8105aaa:	f001 fe15 	bl	81076d8 <__match>
 8105aae:	b910      	cbnz	r0, 8105ab6 <_strtod_l+0x37e>
 8105ab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8105ab2:	3301      	adds	r3, #1
 8105ab4:	931d      	str	r3, [sp, #116]	; 0x74
 8105ab6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8105ce4 <_strtod_l+0x5ac>
 8105aba:	f04f 0a00 	mov.w	sl, #0
 8105abe:	e67d      	b.n	81057bc <_strtod_l+0x84>
 8105ac0:	4885      	ldr	r0, [pc, #532]	; (8105cd8 <_strtod_l+0x5a0>)
 8105ac2:	f002 fda9 	bl	8108618 <nan>
 8105ac6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8105aca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8105ace:	e675      	b.n	81057bc <_strtod_l+0x84>
 8105ad0:	9b07      	ldr	r3, [sp, #28]
 8105ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8105ad4:	1af3      	subs	r3, r6, r3
 8105ad6:	2f00      	cmp	r7, #0
 8105ad8:	bf08      	it	eq
 8105ada:	462f      	moveq	r7, r5
 8105adc:	2d10      	cmp	r5, #16
 8105ade:	9308      	str	r3, [sp, #32]
 8105ae0:	46a8      	mov	r8, r5
 8105ae2:	bfa8      	it	ge
 8105ae4:	f04f 0810 	movge.w	r8, #16
 8105ae8:	f7fa fd94 	bl	8100614 <__aeabi_ui2d>
 8105aec:	2d09      	cmp	r5, #9
 8105aee:	4682      	mov	sl, r0
 8105af0:	468b      	mov	fp, r1
 8105af2:	dd13      	ble.n	8105b1c <_strtod_l+0x3e4>
 8105af4:	4b79      	ldr	r3, [pc, #484]	; (8105cdc <_strtod_l+0x5a4>)
 8105af6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8105afa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8105afe:	f7fa fe03 	bl	8100708 <__aeabi_dmul>
 8105b02:	4682      	mov	sl, r0
 8105b04:	4648      	mov	r0, r9
 8105b06:	468b      	mov	fp, r1
 8105b08:	f7fa fd84 	bl	8100614 <__aeabi_ui2d>
 8105b0c:	4602      	mov	r2, r0
 8105b0e:	460b      	mov	r3, r1
 8105b10:	4650      	mov	r0, sl
 8105b12:	4659      	mov	r1, fp
 8105b14:	f7fa fc42 	bl	810039c <__adddf3>
 8105b18:	4682      	mov	sl, r0
 8105b1a:	468b      	mov	fp, r1
 8105b1c:	2d0f      	cmp	r5, #15
 8105b1e:	dc38      	bgt.n	8105b92 <_strtod_l+0x45a>
 8105b20:	9b08      	ldr	r3, [sp, #32]
 8105b22:	2b00      	cmp	r3, #0
 8105b24:	f43f ae4a 	beq.w	81057bc <_strtod_l+0x84>
 8105b28:	dd24      	ble.n	8105b74 <_strtod_l+0x43c>
 8105b2a:	2b16      	cmp	r3, #22
 8105b2c:	dc0b      	bgt.n	8105b46 <_strtod_l+0x40e>
 8105b2e:	4d6b      	ldr	r5, [pc, #428]	; (8105cdc <_strtod_l+0x5a4>)
 8105b30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8105b34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8105b38:	4652      	mov	r2, sl
 8105b3a:	465b      	mov	r3, fp
 8105b3c:	f7fa fde4 	bl	8100708 <__aeabi_dmul>
 8105b40:	4682      	mov	sl, r0
 8105b42:	468b      	mov	fp, r1
 8105b44:	e63a      	b.n	81057bc <_strtod_l+0x84>
 8105b46:	9a08      	ldr	r2, [sp, #32]
 8105b48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8105b4c:	4293      	cmp	r3, r2
 8105b4e:	db20      	blt.n	8105b92 <_strtod_l+0x45a>
 8105b50:	4c62      	ldr	r4, [pc, #392]	; (8105cdc <_strtod_l+0x5a4>)
 8105b52:	f1c5 050f 	rsb	r5, r5, #15
 8105b56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8105b5a:	4652      	mov	r2, sl
 8105b5c:	465b      	mov	r3, fp
 8105b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8105b62:	f7fa fdd1 	bl	8100708 <__aeabi_dmul>
 8105b66:	9b08      	ldr	r3, [sp, #32]
 8105b68:	1b5d      	subs	r5, r3, r5
 8105b6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8105b6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8105b72:	e7e3      	b.n	8105b3c <_strtod_l+0x404>
 8105b74:	9b08      	ldr	r3, [sp, #32]
 8105b76:	3316      	adds	r3, #22
 8105b78:	db0b      	blt.n	8105b92 <_strtod_l+0x45a>
 8105b7a:	9b07      	ldr	r3, [sp, #28]
 8105b7c:	4a57      	ldr	r2, [pc, #348]	; (8105cdc <_strtod_l+0x5a4>)
 8105b7e:	1b9e      	subs	r6, r3, r6
 8105b80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8105b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8105b88:	4650      	mov	r0, sl
 8105b8a:	4659      	mov	r1, fp
 8105b8c:	f7fa fee6 	bl	810095c <__aeabi_ddiv>
 8105b90:	e7d6      	b.n	8105b40 <_strtod_l+0x408>
 8105b92:	9b08      	ldr	r3, [sp, #32]
 8105b94:	eba5 0808 	sub.w	r8, r5, r8
 8105b98:	4498      	add	r8, r3
 8105b9a:	f1b8 0f00 	cmp.w	r8, #0
 8105b9e:	dd71      	ble.n	8105c84 <_strtod_l+0x54c>
 8105ba0:	f018 030f 	ands.w	r3, r8, #15
 8105ba4:	d00a      	beq.n	8105bbc <_strtod_l+0x484>
 8105ba6:	494d      	ldr	r1, [pc, #308]	; (8105cdc <_strtod_l+0x5a4>)
 8105ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8105bac:	4652      	mov	r2, sl
 8105bae:	465b      	mov	r3, fp
 8105bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8105bb4:	f7fa fda8 	bl	8100708 <__aeabi_dmul>
 8105bb8:	4682      	mov	sl, r0
 8105bba:	468b      	mov	fp, r1
 8105bbc:	f038 080f 	bics.w	r8, r8, #15
 8105bc0:	d04d      	beq.n	8105c5e <_strtod_l+0x526>
 8105bc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8105bc6:	dd22      	ble.n	8105c0e <_strtod_l+0x4d6>
 8105bc8:	2500      	movs	r5, #0
 8105bca:	462e      	mov	r6, r5
 8105bcc:	9509      	str	r5, [sp, #36]	; 0x24
 8105bce:	9507      	str	r5, [sp, #28]
 8105bd0:	2322      	movs	r3, #34	; 0x22
 8105bd2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8105ce4 <_strtod_l+0x5ac>
 8105bd6:	6023      	str	r3, [r4, #0]
 8105bd8:	f04f 0a00 	mov.w	sl, #0
 8105bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105bde:	2b00      	cmp	r3, #0
 8105be0:	f43f adec 	beq.w	81057bc <_strtod_l+0x84>
 8105be4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8105be6:	4620      	mov	r0, r4
 8105be8:	f001 fe84 	bl	81078f4 <_Bfree>
 8105bec:	9907      	ldr	r1, [sp, #28]
 8105bee:	4620      	mov	r0, r4
 8105bf0:	f001 fe80 	bl	81078f4 <_Bfree>
 8105bf4:	4631      	mov	r1, r6
 8105bf6:	4620      	mov	r0, r4
 8105bf8:	f001 fe7c 	bl	81078f4 <_Bfree>
 8105bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8105bfe:	4620      	mov	r0, r4
 8105c00:	f001 fe78 	bl	81078f4 <_Bfree>
 8105c04:	4629      	mov	r1, r5
 8105c06:	4620      	mov	r0, r4
 8105c08:	f001 fe74 	bl	81078f4 <_Bfree>
 8105c0c:	e5d6      	b.n	81057bc <_strtod_l+0x84>
 8105c0e:	2300      	movs	r3, #0
 8105c10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8105c14:	4650      	mov	r0, sl
 8105c16:	4659      	mov	r1, fp
 8105c18:	4699      	mov	r9, r3
 8105c1a:	f1b8 0f01 	cmp.w	r8, #1
 8105c1e:	dc21      	bgt.n	8105c64 <_strtod_l+0x52c>
 8105c20:	b10b      	cbz	r3, 8105c26 <_strtod_l+0x4ee>
 8105c22:	4682      	mov	sl, r0
 8105c24:	468b      	mov	fp, r1
 8105c26:	4b2e      	ldr	r3, [pc, #184]	; (8105ce0 <_strtod_l+0x5a8>)
 8105c28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8105c2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8105c30:	4652      	mov	r2, sl
 8105c32:	465b      	mov	r3, fp
 8105c34:	e9d9 0100 	ldrd	r0, r1, [r9]
 8105c38:	f7fa fd66 	bl	8100708 <__aeabi_dmul>
 8105c3c:	4b29      	ldr	r3, [pc, #164]	; (8105ce4 <_strtod_l+0x5ac>)
 8105c3e:	460a      	mov	r2, r1
 8105c40:	400b      	ands	r3, r1
 8105c42:	4929      	ldr	r1, [pc, #164]	; (8105ce8 <_strtod_l+0x5b0>)
 8105c44:	428b      	cmp	r3, r1
 8105c46:	4682      	mov	sl, r0
 8105c48:	d8be      	bhi.n	8105bc8 <_strtod_l+0x490>
 8105c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8105c4e:	428b      	cmp	r3, r1
 8105c50:	bf86      	itte	hi
 8105c52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8105cec <_strtod_l+0x5b4>
 8105c56:	f04f 3aff 	movhi.w	sl, #4294967295
 8105c5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8105c5e:	2300      	movs	r3, #0
 8105c60:	9304      	str	r3, [sp, #16]
 8105c62:	e081      	b.n	8105d68 <_strtod_l+0x630>
 8105c64:	f018 0f01 	tst.w	r8, #1
 8105c68:	d007      	beq.n	8105c7a <_strtod_l+0x542>
 8105c6a:	4b1d      	ldr	r3, [pc, #116]	; (8105ce0 <_strtod_l+0x5a8>)
 8105c6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8105c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c74:	f7fa fd48 	bl	8100708 <__aeabi_dmul>
 8105c78:	2301      	movs	r3, #1
 8105c7a:	f109 0901 	add.w	r9, r9, #1
 8105c7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8105c82:	e7ca      	b.n	8105c1a <_strtod_l+0x4e2>
 8105c84:	d0eb      	beq.n	8105c5e <_strtod_l+0x526>
 8105c86:	f1c8 0800 	rsb	r8, r8, #0
 8105c8a:	f018 020f 	ands.w	r2, r8, #15
 8105c8e:	d00a      	beq.n	8105ca6 <_strtod_l+0x56e>
 8105c90:	4b12      	ldr	r3, [pc, #72]	; (8105cdc <_strtod_l+0x5a4>)
 8105c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8105c96:	4650      	mov	r0, sl
 8105c98:	4659      	mov	r1, fp
 8105c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c9e:	f7fa fe5d 	bl	810095c <__aeabi_ddiv>
 8105ca2:	4682      	mov	sl, r0
 8105ca4:	468b      	mov	fp, r1
 8105ca6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8105caa:	d0d8      	beq.n	8105c5e <_strtod_l+0x526>
 8105cac:	f1b8 0f1f 	cmp.w	r8, #31
 8105cb0:	dd1e      	ble.n	8105cf0 <_strtod_l+0x5b8>
 8105cb2:	2500      	movs	r5, #0
 8105cb4:	462e      	mov	r6, r5
 8105cb6:	9509      	str	r5, [sp, #36]	; 0x24
 8105cb8:	9507      	str	r5, [sp, #28]
 8105cba:	2322      	movs	r3, #34	; 0x22
 8105cbc:	f04f 0a00 	mov.w	sl, #0
 8105cc0:	f04f 0b00 	mov.w	fp, #0
 8105cc4:	6023      	str	r3, [r4, #0]
 8105cc6:	e789      	b.n	8105bdc <_strtod_l+0x4a4>
 8105cc8:	08109229 	.word	0x08109229
 8105ccc:	0810926c 	.word	0x0810926c
 8105cd0:	08109221 	.word	0x08109221
 8105cd4:	081093ac 	.word	0x081093ac
 8105cd8:	08109668 	.word	0x08109668
 8105cdc:	08109548 	.word	0x08109548
 8105ce0:	08109520 	.word	0x08109520
 8105ce4:	7ff00000 	.word	0x7ff00000
 8105ce8:	7ca00000 	.word	0x7ca00000
 8105cec:	7fefffff 	.word	0x7fefffff
 8105cf0:	f018 0310 	ands.w	r3, r8, #16
 8105cf4:	bf18      	it	ne
 8105cf6:	236a      	movne	r3, #106	; 0x6a
 8105cf8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 81060b0 <_strtod_l+0x978>
 8105cfc:	9304      	str	r3, [sp, #16]
 8105cfe:	4650      	mov	r0, sl
 8105d00:	4659      	mov	r1, fp
 8105d02:	2300      	movs	r3, #0
 8105d04:	f018 0f01 	tst.w	r8, #1
 8105d08:	d004      	beq.n	8105d14 <_strtod_l+0x5dc>
 8105d0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8105d0e:	f7fa fcfb 	bl	8100708 <__aeabi_dmul>
 8105d12:	2301      	movs	r3, #1
 8105d14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8105d18:	f109 0908 	add.w	r9, r9, #8
 8105d1c:	d1f2      	bne.n	8105d04 <_strtod_l+0x5cc>
 8105d1e:	b10b      	cbz	r3, 8105d24 <_strtod_l+0x5ec>
 8105d20:	4682      	mov	sl, r0
 8105d22:	468b      	mov	fp, r1
 8105d24:	9b04      	ldr	r3, [sp, #16]
 8105d26:	b1bb      	cbz	r3, 8105d58 <_strtod_l+0x620>
 8105d28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8105d2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	4659      	mov	r1, fp
 8105d34:	dd10      	ble.n	8105d58 <_strtod_l+0x620>
 8105d36:	2b1f      	cmp	r3, #31
 8105d38:	f340 8128 	ble.w	8105f8c <_strtod_l+0x854>
 8105d3c:	2b34      	cmp	r3, #52	; 0x34
 8105d3e:	bfde      	ittt	le
 8105d40:	3b20      	suble	r3, #32
 8105d42:	f04f 32ff 	movle.w	r2, #4294967295
 8105d46:	fa02 f303 	lslle.w	r3, r2, r3
 8105d4a:	f04f 0a00 	mov.w	sl, #0
 8105d4e:	bfcc      	ite	gt
 8105d50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8105d54:	ea03 0b01 	andle.w	fp, r3, r1
 8105d58:	2200      	movs	r2, #0
 8105d5a:	2300      	movs	r3, #0
 8105d5c:	4650      	mov	r0, sl
 8105d5e:	4659      	mov	r1, fp
 8105d60:	f7fa ff3a 	bl	8100bd8 <__aeabi_dcmpeq>
 8105d64:	2800      	cmp	r0, #0
 8105d66:	d1a4      	bne.n	8105cb2 <_strtod_l+0x57a>
 8105d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105d6a:	9300      	str	r3, [sp, #0]
 8105d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8105d6e:	462b      	mov	r3, r5
 8105d70:	463a      	mov	r2, r7
 8105d72:	4620      	mov	r0, r4
 8105d74:	f001 fe2a 	bl	81079cc <__s2b>
 8105d78:	9009      	str	r0, [sp, #36]	; 0x24
 8105d7a:	2800      	cmp	r0, #0
 8105d7c:	f43f af24 	beq.w	8105bc8 <_strtod_l+0x490>
 8105d80:	9b07      	ldr	r3, [sp, #28]
 8105d82:	1b9e      	subs	r6, r3, r6
 8105d84:	9b08      	ldr	r3, [sp, #32]
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	bfb4      	ite	lt
 8105d8a:	4633      	movlt	r3, r6
 8105d8c:	2300      	movge	r3, #0
 8105d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8105d90:	9b08      	ldr	r3, [sp, #32]
 8105d92:	2500      	movs	r5, #0
 8105d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8105d98:	9318      	str	r3, [sp, #96]	; 0x60
 8105d9a:	462e      	mov	r6, r5
 8105d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105d9e:	4620      	mov	r0, r4
 8105da0:	6859      	ldr	r1, [r3, #4]
 8105da2:	f001 fd67 	bl	8107874 <_Balloc>
 8105da6:	9007      	str	r0, [sp, #28]
 8105da8:	2800      	cmp	r0, #0
 8105daa:	f43f af11 	beq.w	8105bd0 <_strtod_l+0x498>
 8105dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105db0:	691a      	ldr	r2, [r3, #16]
 8105db2:	3202      	adds	r2, #2
 8105db4:	f103 010c 	add.w	r1, r3, #12
 8105db8:	0092      	lsls	r2, r2, #2
 8105dba:	300c      	adds	r0, #12
 8105dbc:	f7fe fde8 	bl	8104990 <memcpy>
 8105dc0:	ec4b ab10 	vmov	d0, sl, fp
 8105dc4:	aa20      	add	r2, sp, #128	; 0x80
 8105dc6:	a91f      	add	r1, sp, #124	; 0x7c
 8105dc8:	4620      	mov	r0, r4
 8105dca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8105dce:	f002 f939 	bl	8108044 <__d2b>
 8105dd2:	901e      	str	r0, [sp, #120]	; 0x78
 8105dd4:	2800      	cmp	r0, #0
 8105dd6:	f43f aefb 	beq.w	8105bd0 <_strtod_l+0x498>
 8105dda:	2101      	movs	r1, #1
 8105ddc:	4620      	mov	r0, r4
 8105dde:	f001 fe8f 	bl	8107b00 <__i2b>
 8105de2:	4606      	mov	r6, r0
 8105de4:	2800      	cmp	r0, #0
 8105de6:	f43f aef3 	beq.w	8105bd0 <_strtod_l+0x498>
 8105dea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8105dec:	9904      	ldr	r1, [sp, #16]
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	bfab      	itete	ge
 8105df2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8105df4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8105df6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8105df8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8105dfc:	bfac      	ite	ge
 8105dfe:	eb03 0902 	addge.w	r9, r3, r2
 8105e02:	1ad7      	sublt	r7, r2, r3
 8105e04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8105e06:	eba3 0801 	sub.w	r8, r3, r1
 8105e0a:	4490      	add	r8, r2
 8105e0c:	4ba3      	ldr	r3, [pc, #652]	; (810609c <_strtod_l+0x964>)
 8105e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8105e12:	4598      	cmp	r8, r3
 8105e14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8105e18:	f280 80cc 	bge.w	8105fb4 <_strtod_l+0x87c>
 8105e1c:	eba3 0308 	sub.w	r3, r3, r8
 8105e20:	2b1f      	cmp	r3, #31
 8105e22:	eba2 0203 	sub.w	r2, r2, r3
 8105e26:	f04f 0101 	mov.w	r1, #1
 8105e2a:	f300 80b6 	bgt.w	8105f9a <_strtod_l+0x862>
 8105e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8105e32:	9311      	str	r3, [sp, #68]	; 0x44
 8105e34:	2300      	movs	r3, #0
 8105e36:	930c      	str	r3, [sp, #48]	; 0x30
 8105e38:	eb09 0802 	add.w	r8, r9, r2
 8105e3c:	9b04      	ldr	r3, [sp, #16]
 8105e3e:	45c1      	cmp	r9, r8
 8105e40:	4417      	add	r7, r2
 8105e42:	441f      	add	r7, r3
 8105e44:	464b      	mov	r3, r9
 8105e46:	bfa8      	it	ge
 8105e48:	4643      	movge	r3, r8
 8105e4a:	42bb      	cmp	r3, r7
 8105e4c:	bfa8      	it	ge
 8105e4e:	463b      	movge	r3, r7
 8105e50:	2b00      	cmp	r3, #0
 8105e52:	bfc2      	ittt	gt
 8105e54:	eba8 0803 	subgt.w	r8, r8, r3
 8105e58:	1aff      	subgt	r7, r7, r3
 8105e5a:	eba9 0903 	subgt.w	r9, r9, r3
 8105e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8105e60:	2b00      	cmp	r3, #0
 8105e62:	dd17      	ble.n	8105e94 <_strtod_l+0x75c>
 8105e64:	4631      	mov	r1, r6
 8105e66:	461a      	mov	r2, r3
 8105e68:	4620      	mov	r0, r4
 8105e6a:	f001 ff05 	bl	8107c78 <__pow5mult>
 8105e6e:	4606      	mov	r6, r0
 8105e70:	2800      	cmp	r0, #0
 8105e72:	f43f aead 	beq.w	8105bd0 <_strtod_l+0x498>
 8105e76:	4601      	mov	r1, r0
 8105e78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8105e7a:	4620      	mov	r0, r4
 8105e7c:	f001 fe56 	bl	8107b2c <__multiply>
 8105e80:	900f      	str	r0, [sp, #60]	; 0x3c
 8105e82:	2800      	cmp	r0, #0
 8105e84:	f43f aea4 	beq.w	8105bd0 <_strtod_l+0x498>
 8105e88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8105e8a:	4620      	mov	r0, r4
 8105e8c:	f001 fd32 	bl	81078f4 <_Bfree>
 8105e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8105e92:	931e      	str	r3, [sp, #120]	; 0x78
 8105e94:	f1b8 0f00 	cmp.w	r8, #0
 8105e98:	f300 8091 	bgt.w	8105fbe <_strtod_l+0x886>
 8105e9c:	9b08      	ldr	r3, [sp, #32]
 8105e9e:	2b00      	cmp	r3, #0
 8105ea0:	dd08      	ble.n	8105eb4 <_strtod_l+0x77c>
 8105ea2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8105ea4:	9907      	ldr	r1, [sp, #28]
 8105ea6:	4620      	mov	r0, r4
 8105ea8:	f001 fee6 	bl	8107c78 <__pow5mult>
 8105eac:	9007      	str	r0, [sp, #28]
 8105eae:	2800      	cmp	r0, #0
 8105eb0:	f43f ae8e 	beq.w	8105bd0 <_strtod_l+0x498>
 8105eb4:	2f00      	cmp	r7, #0
 8105eb6:	dd08      	ble.n	8105eca <_strtod_l+0x792>
 8105eb8:	9907      	ldr	r1, [sp, #28]
 8105eba:	463a      	mov	r2, r7
 8105ebc:	4620      	mov	r0, r4
 8105ebe:	f001 ff35 	bl	8107d2c <__lshift>
 8105ec2:	9007      	str	r0, [sp, #28]
 8105ec4:	2800      	cmp	r0, #0
 8105ec6:	f43f ae83 	beq.w	8105bd0 <_strtod_l+0x498>
 8105eca:	f1b9 0f00 	cmp.w	r9, #0
 8105ece:	dd08      	ble.n	8105ee2 <_strtod_l+0x7aa>
 8105ed0:	4631      	mov	r1, r6
 8105ed2:	464a      	mov	r2, r9
 8105ed4:	4620      	mov	r0, r4
 8105ed6:	f001 ff29 	bl	8107d2c <__lshift>
 8105eda:	4606      	mov	r6, r0
 8105edc:	2800      	cmp	r0, #0
 8105ede:	f43f ae77 	beq.w	8105bd0 <_strtod_l+0x498>
 8105ee2:	9a07      	ldr	r2, [sp, #28]
 8105ee4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8105ee6:	4620      	mov	r0, r4
 8105ee8:	f001 ffa8 	bl	8107e3c <__mdiff>
 8105eec:	4605      	mov	r5, r0
 8105eee:	2800      	cmp	r0, #0
 8105ef0:	f43f ae6e 	beq.w	8105bd0 <_strtod_l+0x498>
 8105ef4:	68c3      	ldr	r3, [r0, #12]
 8105ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8105ef8:	2300      	movs	r3, #0
 8105efa:	60c3      	str	r3, [r0, #12]
 8105efc:	4631      	mov	r1, r6
 8105efe:	f001 ff81 	bl	8107e04 <__mcmp>
 8105f02:	2800      	cmp	r0, #0
 8105f04:	da65      	bge.n	8105fd2 <_strtod_l+0x89a>
 8105f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8105f08:	ea53 030a 	orrs.w	r3, r3, sl
 8105f0c:	f040 8087 	bne.w	810601e <_strtod_l+0x8e6>
 8105f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8105f14:	2b00      	cmp	r3, #0
 8105f16:	f040 8082 	bne.w	810601e <_strtod_l+0x8e6>
 8105f1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8105f1e:	0d1b      	lsrs	r3, r3, #20
 8105f20:	051b      	lsls	r3, r3, #20
 8105f22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8105f26:	d97a      	bls.n	810601e <_strtod_l+0x8e6>
 8105f28:	696b      	ldr	r3, [r5, #20]
 8105f2a:	b913      	cbnz	r3, 8105f32 <_strtod_l+0x7fa>
 8105f2c:	692b      	ldr	r3, [r5, #16]
 8105f2e:	2b01      	cmp	r3, #1
 8105f30:	dd75      	ble.n	810601e <_strtod_l+0x8e6>
 8105f32:	4629      	mov	r1, r5
 8105f34:	2201      	movs	r2, #1
 8105f36:	4620      	mov	r0, r4
 8105f38:	f001 fef8 	bl	8107d2c <__lshift>
 8105f3c:	4631      	mov	r1, r6
 8105f3e:	4605      	mov	r5, r0
 8105f40:	f001 ff60 	bl	8107e04 <__mcmp>
 8105f44:	2800      	cmp	r0, #0
 8105f46:	dd6a      	ble.n	810601e <_strtod_l+0x8e6>
 8105f48:	9904      	ldr	r1, [sp, #16]
 8105f4a:	4a55      	ldr	r2, [pc, #340]	; (81060a0 <_strtod_l+0x968>)
 8105f4c:	465b      	mov	r3, fp
 8105f4e:	2900      	cmp	r1, #0
 8105f50:	f000 8085 	beq.w	810605e <_strtod_l+0x926>
 8105f54:	ea02 010b 	and.w	r1, r2, fp
 8105f58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8105f5c:	dc7f      	bgt.n	810605e <_strtod_l+0x926>
 8105f5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8105f62:	f77f aeaa 	ble.w	8105cba <_strtod_l+0x582>
 8105f66:	4a4f      	ldr	r2, [pc, #316]	; (81060a4 <_strtod_l+0x96c>)
 8105f68:	2300      	movs	r3, #0
 8105f6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8105f6e:	4650      	mov	r0, sl
 8105f70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8105f74:	4659      	mov	r1, fp
 8105f76:	f7fa fbc7 	bl	8100708 <__aeabi_dmul>
 8105f7a:	460b      	mov	r3, r1
 8105f7c:	4303      	orrs	r3, r0
 8105f7e:	bf08      	it	eq
 8105f80:	2322      	moveq	r3, #34	; 0x22
 8105f82:	4682      	mov	sl, r0
 8105f84:	468b      	mov	fp, r1
 8105f86:	bf08      	it	eq
 8105f88:	6023      	streq	r3, [r4, #0]
 8105f8a:	e62b      	b.n	8105be4 <_strtod_l+0x4ac>
 8105f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8105f90:	fa02 f303 	lsl.w	r3, r2, r3
 8105f94:	ea03 0a0a 	and.w	sl, r3, sl
 8105f98:	e6de      	b.n	8105d58 <_strtod_l+0x620>
 8105f9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8105f9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8105fa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8105fa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8105faa:	fa01 f308 	lsl.w	r3, r1, r8
 8105fae:	930c      	str	r3, [sp, #48]	; 0x30
 8105fb0:	9111      	str	r1, [sp, #68]	; 0x44
 8105fb2:	e741      	b.n	8105e38 <_strtod_l+0x700>
 8105fb4:	2300      	movs	r3, #0
 8105fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8105fb8:	2301      	movs	r3, #1
 8105fba:	9311      	str	r3, [sp, #68]	; 0x44
 8105fbc:	e73c      	b.n	8105e38 <_strtod_l+0x700>
 8105fbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8105fc0:	4642      	mov	r2, r8
 8105fc2:	4620      	mov	r0, r4
 8105fc4:	f001 feb2 	bl	8107d2c <__lshift>
 8105fc8:	901e      	str	r0, [sp, #120]	; 0x78
 8105fca:	2800      	cmp	r0, #0
 8105fcc:	f47f af66 	bne.w	8105e9c <_strtod_l+0x764>
 8105fd0:	e5fe      	b.n	8105bd0 <_strtod_l+0x498>
 8105fd2:	465f      	mov	r7, fp
 8105fd4:	d16e      	bne.n	81060b4 <_strtod_l+0x97c>
 8105fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8105fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8105fdc:	b342      	cbz	r2, 8106030 <_strtod_l+0x8f8>
 8105fde:	4a32      	ldr	r2, [pc, #200]	; (81060a8 <_strtod_l+0x970>)
 8105fe0:	4293      	cmp	r3, r2
 8105fe2:	d128      	bne.n	8106036 <_strtod_l+0x8fe>
 8105fe4:	9b04      	ldr	r3, [sp, #16]
 8105fe6:	4650      	mov	r0, sl
 8105fe8:	b1eb      	cbz	r3, 8106026 <_strtod_l+0x8ee>
 8105fea:	4a2d      	ldr	r2, [pc, #180]	; (81060a0 <_strtod_l+0x968>)
 8105fec:	403a      	ands	r2, r7
 8105fee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8105ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8105ff6:	d819      	bhi.n	810602c <_strtod_l+0x8f4>
 8105ff8:	0d12      	lsrs	r2, r2, #20
 8105ffa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8105ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8106002:	4298      	cmp	r0, r3
 8106004:	d117      	bne.n	8106036 <_strtod_l+0x8fe>
 8106006:	4b29      	ldr	r3, [pc, #164]	; (81060ac <_strtod_l+0x974>)
 8106008:	429f      	cmp	r7, r3
 810600a:	d102      	bne.n	8106012 <_strtod_l+0x8da>
 810600c:	3001      	adds	r0, #1
 810600e:	f43f addf 	beq.w	8105bd0 <_strtod_l+0x498>
 8106012:	4b23      	ldr	r3, [pc, #140]	; (81060a0 <_strtod_l+0x968>)
 8106014:	403b      	ands	r3, r7
 8106016:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810601a:	f04f 0a00 	mov.w	sl, #0
 810601e:	9b04      	ldr	r3, [sp, #16]
 8106020:	2b00      	cmp	r3, #0
 8106022:	d1a0      	bne.n	8105f66 <_strtod_l+0x82e>
 8106024:	e5de      	b.n	8105be4 <_strtod_l+0x4ac>
 8106026:	f04f 33ff 	mov.w	r3, #4294967295
 810602a:	e7ea      	b.n	8106002 <_strtod_l+0x8ca>
 810602c:	460b      	mov	r3, r1
 810602e:	e7e8      	b.n	8106002 <_strtod_l+0x8ca>
 8106030:	ea53 030a 	orrs.w	r3, r3, sl
 8106034:	d088      	beq.n	8105f48 <_strtod_l+0x810>
 8106036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8106038:	b1db      	cbz	r3, 8106072 <_strtod_l+0x93a>
 810603a:	423b      	tst	r3, r7
 810603c:	d0ef      	beq.n	810601e <_strtod_l+0x8e6>
 810603e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8106040:	9a04      	ldr	r2, [sp, #16]
 8106042:	4650      	mov	r0, sl
 8106044:	4659      	mov	r1, fp
 8106046:	b1c3      	cbz	r3, 810607a <_strtod_l+0x942>
 8106048:	f7ff fb58 	bl	81056fc <sulp>
 810604c:	4602      	mov	r2, r0
 810604e:	460b      	mov	r3, r1
 8106050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8106054:	f7fa f9a2 	bl	810039c <__adddf3>
 8106058:	4682      	mov	sl, r0
 810605a:	468b      	mov	fp, r1
 810605c:	e7df      	b.n	810601e <_strtod_l+0x8e6>
 810605e:	4013      	ands	r3, r2
 8106060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8106064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8106068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810606c:	f04f 3aff 	mov.w	sl, #4294967295
 8106070:	e7d5      	b.n	810601e <_strtod_l+0x8e6>
 8106072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8106074:	ea13 0f0a 	tst.w	r3, sl
 8106078:	e7e0      	b.n	810603c <_strtod_l+0x904>
 810607a:	f7ff fb3f 	bl	81056fc <sulp>
 810607e:	4602      	mov	r2, r0
 8106080:	460b      	mov	r3, r1
 8106082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8106086:	f7fa f987 	bl	8100398 <__aeabi_dsub>
 810608a:	2200      	movs	r2, #0
 810608c:	2300      	movs	r3, #0
 810608e:	4682      	mov	sl, r0
 8106090:	468b      	mov	fp, r1
 8106092:	f7fa fda1 	bl	8100bd8 <__aeabi_dcmpeq>
 8106096:	2800      	cmp	r0, #0
 8106098:	d0c1      	beq.n	810601e <_strtod_l+0x8e6>
 810609a:	e60e      	b.n	8105cba <_strtod_l+0x582>
 810609c:	fffffc02 	.word	0xfffffc02
 81060a0:	7ff00000 	.word	0x7ff00000
 81060a4:	39500000 	.word	0x39500000
 81060a8:	000fffff 	.word	0x000fffff
 81060ac:	7fefffff 	.word	0x7fefffff
 81060b0:	08109280 	.word	0x08109280
 81060b4:	4631      	mov	r1, r6
 81060b6:	4628      	mov	r0, r5
 81060b8:	f002 f820 	bl	81080fc <__ratio>
 81060bc:	ec59 8b10 	vmov	r8, r9, d0
 81060c0:	ee10 0a10 	vmov	r0, s0
 81060c4:	2200      	movs	r2, #0
 81060c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81060ca:	4649      	mov	r1, r9
 81060cc:	f7fa fd98 	bl	8100c00 <__aeabi_dcmple>
 81060d0:	2800      	cmp	r0, #0
 81060d2:	d07c      	beq.n	81061ce <_strtod_l+0xa96>
 81060d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d04c      	beq.n	8106174 <_strtod_l+0xa3c>
 81060da:	4b95      	ldr	r3, [pc, #596]	; (8106330 <_strtod_l+0xbf8>)
 81060dc:	2200      	movs	r2, #0
 81060de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81060e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8106330 <_strtod_l+0xbf8>
 81060e6:	f04f 0800 	mov.w	r8, #0
 81060ea:	4b92      	ldr	r3, [pc, #584]	; (8106334 <_strtod_l+0xbfc>)
 81060ec:	403b      	ands	r3, r7
 81060ee:	9311      	str	r3, [sp, #68]	; 0x44
 81060f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81060f2:	4b91      	ldr	r3, [pc, #580]	; (8106338 <_strtod_l+0xc00>)
 81060f4:	429a      	cmp	r2, r3
 81060f6:	f040 80b2 	bne.w	810625e <_strtod_l+0xb26>
 81060fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81060fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8106102:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8106106:	ec4b ab10 	vmov	d0, sl, fp
 810610a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 810610e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8106112:	f001 ff1b 	bl	8107f4c <__ulp>
 8106116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810611a:	ec53 2b10 	vmov	r2, r3, d0
 810611e:	f7fa faf3 	bl	8100708 <__aeabi_dmul>
 8106122:	4652      	mov	r2, sl
 8106124:	465b      	mov	r3, fp
 8106126:	f7fa f939 	bl	810039c <__adddf3>
 810612a:	460b      	mov	r3, r1
 810612c:	4981      	ldr	r1, [pc, #516]	; (8106334 <_strtod_l+0xbfc>)
 810612e:	4a83      	ldr	r2, [pc, #524]	; (810633c <_strtod_l+0xc04>)
 8106130:	4019      	ands	r1, r3
 8106132:	4291      	cmp	r1, r2
 8106134:	4682      	mov	sl, r0
 8106136:	d95e      	bls.n	81061f6 <_strtod_l+0xabe>
 8106138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810613a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810613e:	4293      	cmp	r3, r2
 8106140:	d103      	bne.n	810614a <_strtod_l+0xa12>
 8106142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106144:	3301      	adds	r3, #1
 8106146:	f43f ad43 	beq.w	8105bd0 <_strtod_l+0x498>
 810614a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8106348 <_strtod_l+0xc10>
 810614e:	f04f 3aff 	mov.w	sl, #4294967295
 8106152:	991e      	ldr	r1, [sp, #120]	; 0x78
 8106154:	4620      	mov	r0, r4
 8106156:	f001 fbcd 	bl	81078f4 <_Bfree>
 810615a:	9907      	ldr	r1, [sp, #28]
 810615c:	4620      	mov	r0, r4
 810615e:	f001 fbc9 	bl	81078f4 <_Bfree>
 8106162:	4631      	mov	r1, r6
 8106164:	4620      	mov	r0, r4
 8106166:	f001 fbc5 	bl	81078f4 <_Bfree>
 810616a:	4629      	mov	r1, r5
 810616c:	4620      	mov	r0, r4
 810616e:	f001 fbc1 	bl	81078f4 <_Bfree>
 8106172:	e613      	b.n	8105d9c <_strtod_l+0x664>
 8106174:	f1ba 0f00 	cmp.w	sl, #0
 8106178:	d11b      	bne.n	81061b2 <_strtod_l+0xa7a>
 810617a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810617e:	b9f3      	cbnz	r3, 81061be <_strtod_l+0xa86>
 8106180:	4b6b      	ldr	r3, [pc, #428]	; (8106330 <_strtod_l+0xbf8>)
 8106182:	2200      	movs	r2, #0
 8106184:	4640      	mov	r0, r8
 8106186:	4649      	mov	r1, r9
 8106188:	f7fa fd30 	bl	8100bec <__aeabi_dcmplt>
 810618c:	b9d0      	cbnz	r0, 81061c4 <_strtod_l+0xa8c>
 810618e:	4640      	mov	r0, r8
 8106190:	4649      	mov	r1, r9
 8106192:	4b6b      	ldr	r3, [pc, #428]	; (8106340 <_strtod_l+0xc08>)
 8106194:	2200      	movs	r2, #0
 8106196:	f7fa fab7 	bl	8100708 <__aeabi_dmul>
 810619a:	4680      	mov	r8, r0
 810619c:	4689      	mov	r9, r1
 810619e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 81061a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 81061a6:	931b      	str	r3, [sp, #108]	; 0x6c
 81061a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 81061ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81061b0:	e79b      	b.n	81060ea <_strtod_l+0x9b2>
 81061b2:	f1ba 0f01 	cmp.w	sl, #1
 81061b6:	d102      	bne.n	81061be <_strtod_l+0xa86>
 81061b8:	2f00      	cmp	r7, #0
 81061ba:	f43f ad7e 	beq.w	8105cba <_strtod_l+0x582>
 81061be:	4b61      	ldr	r3, [pc, #388]	; (8106344 <_strtod_l+0xc0c>)
 81061c0:	2200      	movs	r2, #0
 81061c2:	e78c      	b.n	81060de <_strtod_l+0x9a6>
 81061c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8106340 <_strtod_l+0xc08>
 81061c8:	f04f 0800 	mov.w	r8, #0
 81061cc:	e7e7      	b.n	810619e <_strtod_l+0xa66>
 81061ce:	4b5c      	ldr	r3, [pc, #368]	; (8106340 <_strtod_l+0xc08>)
 81061d0:	4640      	mov	r0, r8
 81061d2:	4649      	mov	r1, r9
 81061d4:	2200      	movs	r2, #0
 81061d6:	f7fa fa97 	bl	8100708 <__aeabi_dmul>
 81061da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81061dc:	4680      	mov	r8, r0
 81061de:	4689      	mov	r9, r1
 81061e0:	b933      	cbnz	r3, 81061f0 <_strtod_l+0xab8>
 81061e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81061e6:	9012      	str	r0, [sp, #72]	; 0x48
 81061e8:	9313      	str	r3, [sp, #76]	; 0x4c
 81061ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 81061ee:	e7dd      	b.n	81061ac <_strtod_l+0xa74>
 81061f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 81061f4:	e7f9      	b.n	81061ea <_strtod_l+0xab2>
 81061f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 81061fa:	9b04      	ldr	r3, [sp, #16]
 81061fc:	2b00      	cmp	r3, #0
 81061fe:	d1a8      	bne.n	8106152 <_strtod_l+0xa1a>
 8106200:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8106204:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8106206:	0d1b      	lsrs	r3, r3, #20
 8106208:	051b      	lsls	r3, r3, #20
 810620a:	429a      	cmp	r2, r3
 810620c:	d1a1      	bne.n	8106152 <_strtod_l+0xa1a>
 810620e:	4640      	mov	r0, r8
 8106210:	4649      	mov	r1, r9
 8106212:	f7fa fdc1 	bl	8100d98 <__aeabi_d2lz>
 8106216:	f7fa fa49 	bl	81006ac <__aeabi_l2d>
 810621a:	4602      	mov	r2, r0
 810621c:	460b      	mov	r3, r1
 810621e:	4640      	mov	r0, r8
 8106220:	4649      	mov	r1, r9
 8106222:	f7fa f8b9 	bl	8100398 <__aeabi_dsub>
 8106226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8106228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810622c:	ea43 030a 	orr.w	r3, r3, sl
 8106230:	4313      	orrs	r3, r2
 8106232:	4680      	mov	r8, r0
 8106234:	4689      	mov	r9, r1
 8106236:	d053      	beq.n	81062e0 <_strtod_l+0xba8>
 8106238:	a335      	add	r3, pc, #212	; (adr r3, 8106310 <_strtod_l+0xbd8>)
 810623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810623e:	f7fa fcd5 	bl	8100bec <__aeabi_dcmplt>
 8106242:	2800      	cmp	r0, #0
 8106244:	f47f acce 	bne.w	8105be4 <_strtod_l+0x4ac>
 8106248:	a333      	add	r3, pc, #204	; (adr r3, 8106318 <_strtod_l+0xbe0>)
 810624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810624e:	4640      	mov	r0, r8
 8106250:	4649      	mov	r1, r9
 8106252:	f7fa fce9 	bl	8100c28 <__aeabi_dcmpgt>
 8106256:	2800      	cmp	r0, #0
 8106258:	f43f af7b 	beq.w	8106152 <_strtod_l+0xa1a>
 810625c:	e4c2      	b.n	8105be4 <_strtod_l+0x4ac>
 810625e:	9b04      	ldr	r3, [sp, #16]
 8106260:	b333      	cbz	r3, 81062b0 <_strtod_l+0xb78>
 8106262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8106264:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8106268:	d822      	bhi.n	81062b0 <_strtod_l+0xb78>
 810626a:	a32d      	add	r3, pc, #180	; (adr r3, 8106320 <_strtod_l+0xbe8>)
 810626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106270:	4640      	mov	r0, r8
 8106272:	4649      	mov	r1, r9
 8106274:	f7fa fcc4 	bl	8100c00 <__aeabi_dcmple>
 8106278:	b1a0      	cbz	r0, 81062a4 <_strtod_l+0xb6c>
 810627a:	4649      	mov	r1, r9
 810627c:	4640      	mov	r0, r8
 810627e:	f7fa fd1b 	bl	8100cb8 <__aeabi_d2uiz>
 8106282:	2801      	cmp	r0, #1
 8106284:	bf38      	it	cc
 8106286:	2001      	movcc	r0, #1
 8106288:	f7fa f9c4 	bl	8100614 <__aeabi_ui2d>
 810628c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810628e:	4680      	mov	r8, r0
 8106290:	4689      	mov	r9, r1
 8106292:	bb13      	cbnz	r3, 81062da <_strtod_l+0xba2>
 8106294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8106298:	9014      	str	r0, [sp, #80]	; 0x50
 810629a:	9315      	str	r3, [sp, #84]	; 0x54
 810629c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81062a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81062a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81062a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81062a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81062ac:	1a9b      	subs	r3, r3, r2
 81062ae:	930d      	str	r3, [sp, #52]	; 0x34
 81062b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81062b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81062b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81062bc:	f001 fe46 	bl	8107f4c <__ulp>
 81062c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81062c4:	ec53 2b10 	vmov	r2, r3, d0
 81062c8:	f7fa fa1e 	bl	8100708 <__aeabi_dmul>
 81062cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81062d0:	f7fa f864 	bl	810039c <__adddf3>
 81062d4:	4682      	mov	sl, r0
 81062d6:	468b      	mov	fp, r1
 81062d8:	e78f      	b.n	81061fa <_strtod_l+0xac2>
 81062da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 81062de:	e7dd      	b.n	810629c <_strtod_l+0xb64>
 81062e0:	a311      	add	r3, pc, #68	; (adr r3, 8106328 <_strtod_l+0xbf0>)
 81062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062e6:	f7fa fc81 	bl	8100bec <__aeabi_dcmplt>
 81062ea:	e7b4      	b.n	8106256 <_strtod_l+0xb1e>
 81062ec:	2300      	movs	r3, #0
 81062ee:	930e      	str	r3, [sp, #56]	; 0x38
 81062f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 81062f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81062f4:	6013      	str	r3, [r2, #0]
 81062f6:	f7ff ba65 	b.w	81057c4 <_strtod_l+0x8c>
 81062fa:	2b65      	cmp	r3, #101	; 0x65
 81062fc:	f43f ab5d 	beq.w	81059ba <_strtod_l+0x282>
 8106300:	2b45      	cmp	r3, #69	; 0x45
 8106302:	f43f ab5a 	beq.w	81059ba <_strtod_l+0x282>
 8106306:	2201      	movs	r2, #1
 8106308:	f7ff bb92 	b.w	8105a30 <_strtod_l+0x2f8>
 810630c:	f3af 8000 	nop.w
 8106310:	94a03595 	.word	0x94a03595
 8106314:	3fdfffff 	.word	0x3fdfffff
 8106318:	35afe535 	.word	0x35afe535
 810631c:	3fe00000 	.word	0x3fe00000
 8106320:	ffc00000 	.word	0xffc00000
 8106324:	41dfffff 	.word	0x41dfffff
 8106328:	94a03595 	.word	0x94a03595
 810632c:	3fcfffff 	.word	0x3fcfffff
 8106330:	3ff00000 	.word	0x3ff00000
 8106334:	7ff00000 	.word	0x7ff00000
 8106338:	7fe00000 	.word	0x7fe00000
 810633c:	7c9fffff 	.word	0x7c9fffff
 8106340:	3fe00000 	.word	0x3fe00000
 8106344:	bff00000 	.word	0xbff00000
 8106348:	7fefffff 	.word	0x7fefffff

0810634c <_strtod_r>:
 810634c:	4b01      	ldr	r3, [pc, #4]	; (8106354 <_strtod_r+0x8>)
 810634e:	f7ff b9f3 	b.w	8105738 <_strtod_l>
 8106352:	bf00      	nop
 8106354:	10000078 	.word	0x10000078

08106358 <_strtol_l.isra.0>:
 8106358:	2b01      	cmp	r3, #1
 810635a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810635e:	d001      	beq.n	8106364 <_strtol_l.isra.0+0xc>
 8106360:	2b24      	cmp	r3, #36	; 0x24
 8106362:	d906      	bls.n	8106372 <_strtol_l.isra.0+0x1a>
 8106364:	f7fe faea 	bl	810493c <__errno>
 8106368:	2316      	movs	r3, #22
 810636a:	6003      	str	r3, [r0, #0]
 810636c:	2000      	movs	r0, #0
 810636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106372:	4f3a      	ldr	r7, [pc, #232]	; (810645c <_strtol_l.isra.0+0x104>)
 8106374:	468e      	mov	lr, r1
 8106376:	4676      	mov	r6, lr
 8106378:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810637c:	5de5      	ldrb	r5, [r4, r7]
 810637e:	f015 0508 	ands.w	r5, r5, #8
 8106382:	d1f8      	bne.n	8106376 <_strtol_l.isra.0+0x1e>
 8106384:	2c2d      	cmp	r4, #45	; 0x2d
 8106386:	d134      	bne.n	81063f2 <_strtol_l.isra.0+0x9a>
 8106388:	f89e 4000 	ldrb.w	r4, [lr]
 810638c:	f04f 0801 	mov.w	r8, #1
 8106390:	f106 0e02 	add.w	lr, r6, #2
 8106394:	2b00      	cmp	r3, #0
 8106396:	d05c      	beq.n	8106452 <_strtol_l.isra.0+0xfa>
 8106398:	2b10      	cmp	r3, #16
 810639a:	d10c      	bne.n	81063b6 <_strtol_l.isra.0+0x5e>
 810639c:	2c30      	cmp	r4, #48	; 0x30
 810639e:	d10a      	bne.n	81063b6 <_strtol_l.isra.0+0x5e>
 81063a0:	f89e 4000 	ldrb.w	r4, [lr]
 81063a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 81063a8:	2c58      	cmp	r4, #88	; 0x58
 81063aa:	d14d      	bne.n	8106448 <_strtol_l.isra.0+0xf0>
 81063ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 81063b0:	2310      	movs	r3, #16
 81063b2:	f10e 0e02 	add.w	lr, lr, #2
 81063b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 81063ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 81063be:	2600      	movs	r6, #0
 81063c0:	fbbc f9f3 	udiv	r9, ip, r3
 81063c4:	4635      	mov	r5, r6
 81063c6:	fb03 ca19 	mls	sl, r3, r9, ip
 81063ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 81063ce:	2f09      	cmp	r7, #9
 81063d0:	d818      	bhi.n	8106404 <_strtol_l.isra.0+0xac>
 81063d2:	463c      	mov	r4, r7
 81063d4:	42a3      	cmp	r3, r4
 81063d6:	dd24      	ble.n	8106422 <_strtol_l.isra.0+0xca>
 81063d8:	2e00      	cmp	r6, #0
 81063da:	db1f      	blt.n	810641c <_strtol_l.isra.0+0xc4>
 81063dc:	45a9      	cmp	r9, r5
 81063de:	d31d      	bcc.n	810641c <_strtol_l.isra.0+0xc4>
 81063e0:	d101      	bne.n	81063e6 <_strtol_l.isra.0+0x8e>
 81063e2:	45a2      	cmp	sl, r4
 81063e4:	db1a      	blt.n	810641c <_strtol_l.isra.0+0xc4>
 81063e6:	fb05 4503 	mla	r5, r5, r3, r4
 81063ea:	2601      	movs	r6, #1
 81063ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 81063f0:	e7eb      	b.n	81063ca <_strtol_l.isra.0+0x72>
 81063f2:	2c2b      	cmp	r4, #43	; 0x2b
 81063f4:	bf08      	it	eq
 81063f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 81063fa:	46a8      	mov	r8, r5
 81063fc:	bf08      	it	eq
 81063fe:	f106 0e02 	addeq.w	lr, r6, #2
 8106402:	e7c7      	b.n	8106394 <_strtol_l.isra.0+0x3c>
 8106404:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8106408:	2f19      	cmp	r7, #25
 810640a:	d801      	bhi.n	8106410 <_strtol_l.isra.0+0xb8>
 810640c:	3c37      	subs	r4, #55	; 0x37
 810640e:	e7e1      	b.n	81063d4 <_strtol_l.isra.0+0x7c>
 8106410:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8106414:	2f19      	cmp	r7, #25
 8106416:	d804      	bhi.n	8106422 <_strtol_l.isra.0+0xca>
 8106418:	3c57      	subs	r4, #87	; 0x57
 810641a:	e7db      	b.n	81063d4 <_strtol_l.isra.0+0x7c>
 810641c:	f04f 36ff 	mov.w	r6, #4294967295
 8106420:	e7e4      	b.n	81063ec <_strtol_l.isra.0+0x94>
 8106422:	2e00      	cmp	r6, #0
 8106424:	da05      	bge.n	8106432 <_strtol_l.isra.0+0xda>
 8106426:	2322      	movs	r3, #34	; 0x22
 8106428:	6003      	str	r3, [r0, #0]
 810642a:	4665      	mov	r5, ip
 810642c:	b942      	cbnz	r2, 8106440 <_strtol_l.isra.0+0xe8>
 810642e:	4628      	mov	r0, r5
 8106430:	e79d      	b.n	810636e <_strtol_l.isra.0+0x16>
 8106432:	f1b8 0f00 	cmp.w	r8, #0
 8106436:	d000      	beq.n	810643a <_strtol_l.isra.0+0xe2>
 8106438:	426d      	negs	r5, r5
 810643a:	2a00      	cmp	r2, #0
 810643c:	d0f7      	beq.n	810642e <_strtol_l.isra.0+0xd6>
 810643e:	b10e      	cbz	r6, 8106444 <_strtol_l.isra.0+0xec>
 8106440:	f10e 31ff 	add.w	r1, lr, #4294967295
 8106444:	6011      	str	r1, [r2, #0]
 8106446:	e7f2      	b.n	810642e <_strtol_l.isra.0+0xd6>
 8106448:	2430      	movs	r4, #48	; 0x30
 810644a:	2b00      	cmp	r3, #0
 810644c:	d1b3      	bne.n	81063b6 <_strtol_l.isra.0+0x5e>
 810644e:	2308      	movs	r3, #8
 8106450:	e7b1      	b.n	81063b6 <_strtol_l.isra.0+0x5e>
 8106452:	2c30      	cmp	r4, #48	; 0x30
 8106454:	d0a4      	beq.n	81063a0 <_strtol_l.isra.0+0x48>
 8106456:	230a      	movs	r3, #10
 8106458:	e7ad      	b.n	81063b6 <_strtol_l.isra.0+0x5e>
 810645a:	bf00      	nop
 810645c:	081092a9 	.word	0x081092a9

08106460 <_strtol_r>:
 8106460:	f7ff bf7a 	b.w	8106358 <_strtol_l.isra.0>

08106464 <quorem>:
 8106464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106468:	6903      	ldr	r3, [r0, #16]
 810646a:	690c      	ldr	r4, [r1, #16]
 810646c:	42a3      	cmp	r3, r4
 810646e:	4607      	mov	r7, r0
 8106470:	f2c0 8081 	blt.w	8106576 <quorem+0x112>
 8106474:	3c01      	subs	r4, #1
 8106476:	f101 0814 	add.w	r8, r1, #20
 810647a:	f100 0514 	add.w	r5, r0, #20
 810647e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8106482:	9301      	str	r3, [sp, #4]
 8106484:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8106488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810648c:	3301      	adds	r3, #1
 810648e:	429a      	cmp	r2, r3
 8106490:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8106494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8106498:	fbb2 f6f3 	udiv	r6, r2, r3
 810649c:	d331      	bcc.n	8106502 <quorem+0x9e>
 810649e:	f04f 0e00 	mov.w	lr, #0
 81064a2:	4640      	mov	r0, r8
 81064a4:	46ac      	mov	ip, r5
 81064a6:	46f2      	mov	sl, lr
 81064a8:	f850 2b04 	ldr.w	r2, [r0], #4
 81064ac:	b293      	uxth	r3, r2
 81064ae:	fb06 e303 	mla	r3, r6, r3, lr
 81064b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81064b6:	b29b      	uxth	r3, r3
 81064b8:	ebaa 0303 	sub.w	r3, sl, r3
 81064bc:	0c12      	lsrs	r2, r2, #16
 81064be:	f8dc a000 	ldr.w	sl, [ip]
 81064c2:	fb06 e202 	mla	r2, r6, r2, lr
 81064c6:	fa13 f38a 	uxtah	r3, r3, sl
 81064ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81064ce:	fa1f fa82 	uxth.w	sl, r2
 81064d2:	f8dc 2000 	ldr.w	r2, [ip]
 81064d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81064da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81064de:	b29b      	uxth	r3, r3
 81064e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81064e4:	4581      	cmp	r9, r0
 81064e6:	f84c 3b04 	str.w	r3, [ip], #4
 81064ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81064ee:	d2db      	bcs.n	81064a8 <quorem+0x44>
 81064f0:	f855 300b 	ldr.w	r3, [r5, fp]
 81064f4:	b92b      	cbnz	r3, 8106502 <quorem+0x9e>
 81064f6:	9b01      	ldr	r3, [sp, #4]
 81064f8:	3b04      	subs	r3, #4
 81064fa:	429d      	cmp	r5, r3
 81064fc:	461a      	mov	r2, r3
 81064fe:	d32e      	bcc.n	810655e <quorem+0xfa>
 8106500:	613c      	str	r4, [r7, #16]
 8106502:	4638      	mov	r0, r7
 8106504:	f001 fc7e 	bl	8107e04 <__mcmp>
 8106508:	2800      	cmp	r0, #0
 810650a:	db24      	blt.n	8106556 <quorem+0xf2>
 810650c:	3601      	adds	r6, #1
 810650e:	4628      	mov	r0, r5
 8106510:	f04f 0c00 	mov.w	ip, #0
 8106514:	f858 2b04 	ldr.w	r2, [r8], #4
 8106518:	f8d0 e000 	ldr.w	lr, [r0]
 810651c:	b293      	uxth	r3, r2
 810651e:	ebac 0303 	sub.w	r3, ip, r3
 8106522:	0c12      	lsrs	r2, r2, #16
 8106524:	fa13 f38e 	uxtah	r3, r3, lr
 8106528:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810652c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8106530:	b29b      	uxth	r3, r3
 8106532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8106536:	45c1      	cmp	r9, r8
 8106538:	f840 3b04 	str.w	r3, [r0], #4
 810653c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8106540:	d2e8      	bcs.n	8106514 <quorem+0xb0>
 8106542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8106546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810654a:	b922      	cbnz	r2, 8106556 <quorem+0xf2>
 810654c:	3b04      	subs	r3, #4
 810654e:	429d      	cmp	r5, r3
 8106550:	461a      	mov	r2, r3
 8106552:	d30a      	bcc.n	810656a <quorem+0x106>
 8106554:	613c      	str	r4, [r7, #16]
 8106556:	4630      	mov	r0, r6
 8106558:	b003      	add	sp, #12
 810655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810655e:	6812      	ldr	r2, [r2, #0]
 8106560:	3b04      	subs	r3, #4
 8106562:	2a00      	cmp	r2, #0
 8106564:	d1cc      	bne.n	8106500 <quorem+0x9c>
 8106566:	3c01      	subs	r4, #1
 8106568:	e7c7      	b.n	81064fa <quorem+0x96>
 810656a:	6812      	ldr	r2, [r2, #0]
 810656c:	3b04      	subs	r3, #4
 810656e:	2a00      	cmp	r2, #0
 8106570:	d1f0      	bne.n	8106554 <quorem+0xf0>
 8106572:	3c01      	subs	r4, #1
 8106574:	e7eb      	b.n	810654e <quorem+0xea>
 8106576:	2000      	movs	r0, #0
 8106578:	e7ee      	b.n	8106558 <quorem+0xf4>
 810657a:	0000      	movs	r0, r0
 810657c:	0000      	movs	r0, r0
	...

08106580 <_dtoa_r>:
 8106580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106584:	ed2d 8b02 	vpush	{d8}
 8106588:	ec57 6b10 	vmov	r6, r7, d0
 810658c:	b095      	sub	sp, #84	; 0x54
 810658e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8106590:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8106594:	9105      	str	r1, [sp, #20]
 8106596:	e9cd 6702 	strd	r6, r7, [sp, #8]
 810659a:	4604      	mov	r4, r0
 810659c:	9209      	str	r2, [sp, #36]	; 0x24
 810659e:	930f      	str	r3, [sp, #60]	; 0x3c
 81065a0:	b975      	cbnz	r5, 81065c0 <_dtoa_r+0x40>
 81065a2:	2010      	movs	r0, #16
 81065a4:	f001 f94c 	bl	8107840 <malloc>
 81065a8:	4602      	mov	r2, r0
 81065aa:	6260      	str	r0, [r4, #36]	; 0x24
 81065ac:	b920      	cbnz	r0, 81065b8 <_dtoa_r+0x38>
 81065ae:	4bb2      	ldr	r3, [pc, #712]	; (8106878 <_dtoa_r+0x2f8>)
 81065b0:	21ea      	movs	r1, #234	; 0xea
 81065b2:	48b2      	ldr	r0, [pc, #712]	; (810687c <_dtoa_r+0x2fc>)
 81065b4:	f002 f868 	bl	8108688 <__assert_func>
 81065b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81065bc:	6005      	str	r5, [r0, #0]
 81065be:	60c5      	str	r5, [r0, #12]
 81065c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81065c2:	6819      	ldr	r1, [r3, #0]
 81065c4:	b151      	cbz	r1, 81065dc <_dtoa_r+0x5c>
 81065c6:	685a      	ldr	r2, [r3, #4]
 81065c8:	604a      	str	r2, [r1, #4]
 81065ca:	2301      	movs	r3, #1
 81065cc:	4093      	lsls	r3, r2
 81065ce:	608b      	str	r3, [r1, #8]
 81065d0:	4620      	mov	r0, r4
 81065d2:	f001 f98f 	bl	81078f4 <_Bfree>
 81065d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81065d8:	2200      	movs	r2, #0
 81065da:	601a      	str	r2, [r3, #0]
 81065dc:	1e3b      	subs	r3, r7, #0
 81065de:	bfb9      	ittee	lt
 81065e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81065e4:	9303      	strlt	r3, [sp, #12]
 81065e6:	2300      	movge	r3, #0
 81065e8:	f8c8 3000 	strge.w	r3, [r8]
 81065ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81065f0:	4ba3      	ldr	r3, [pc, #652]	; (8106880 <_dtoa_r+0x300>)
 81065f2:	bfbc      	itt	lt
 81065f4:	2201      	movlt	r2, #1
 81065f6:	f8c8 2000 	strlt.w	r2, [r8]
 81065fa:	ea33 0309 	bics.w	r3, r3, r9
 81065fe:	d11b      	bne.n	8106638 <_dtoa_r+0xb8>
 8106600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8106602:	f242 730f 	movw	r3, #9999	; 0x270f
 8106606:	6013      	str	r3, [r2, #0]
 8106608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810660c:	4333      	orrs	r3, r6
 810660e:	f000 857a 	beq.w	8107106 <_dtoa_r+0xb86>
 8106612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106614:	b963      	cbnz	r3, 8106630 <_dtoa_r+0xb0>
 8106616:	4b9b      	ldr	r3, [pc, #620]	; (8106884 <_dtoa_r+0x304>)
 8106618:	e024      	b.n	8106664 <_dtoa_r+0xe4>
 810661a:	4b9b      	ldr	r3, [pc, #620]	; (8106888 <_dtoa_r+0x308>)
 810661c:	9300      	str	r3, [sp, #0]
 810661e:	3308      	adds	r3, #8
 8106620:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8106622:	6013      	str	r3, [r2, #0]
 8106624:	9800      	ldr	r0, [sp, #0]
 8106626:	b015      	add	sp, #84	; 0x54
 8106628:	ecbd 8b02 	vpop	{d8}
 810662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106630:	4b94      	ldr	r3, [pc, #592]	; (8106884 <_dtoa_r+0x304>)
 8106632:	9300      	str	r3, [sp, #0]
 8106634:	3303      	adds	r3, #3
 8106636:	e7f3      	b.n	8106620 <_dtoa_r+0xa0>
 8106638:	ed9d 7b02 	vldr	d7, [sp, #8]
 810663c:	2200      	movs	r2, #0
 810663e:	ec51 0b17 	vmov	r0, r1, d7
 8106642:	2300      	movs	r3, #0
 8106644:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8106648:	f7fa fac6 	bl	8100bd8 <__aeabi_dcmpeq>
 810664c:	4680      	mov	r8, r0
 810664e:	b158      	cbz	r0, 8106668 <_dtoa_r+0xe8>
 8106650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8106652:	2301      	movs	r3, #1
 8106654:	6013      	str	r3, [r2, #0]
 8106656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106658:	2b00      	cmp	r3, #0
 810665a:	f000 8551 	beq.w	8107100 <_dtoa_r+0xb80>
 810665e:	488b      	ldr	r0, [pc, #556]	; (810688c <_dtoa_r+0x30c>)
 8106660:	6018      	str	r0, [r3, #0]
 8106662:	1e43      	subs	r3, r0, #1
 8106664:	9300      	str	r3, [sp, #0]
 8106666:	e7dd      	b.n	8106624 <_dtoa_r+0xa4>
 8106668:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810666c:	aa12      	add	r2, sp, #72	; 0x48
 810666e:	a913      	add	r1, sp, #76	; 0x4c
 8106670:	4620      	mov	r0, r4
 8106672:	f001 fce7 	bl	8108044 <__d2b>
 8106676:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810667a:	4683      	mov	fp, r0
 810667c:	2d00      	cmp	r5, #0
 810667e:	d07c      	beq.n	810677a <_dtoa_r+0x1fa>
 8106680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8106682:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8106686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810668a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 810668e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8106692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8106696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810669a:	4b7d      	ldr	r3, [pc, #500]	; (8106890 <_dtoa_r+0x310>)
 810669c:	2200      	movs	r2, #0
 810669e:	4630      	mov	r0, r6
 81066a0:	4639      	mov	r1, r7
 81066a2:	f7f9 fe79 	bl	8100398 <__aeabi_dsub>
 81066a6:	a36e      	add	r3, pc, #440	; (adr r3, 8106860 <_dtoa_r+0x2e0>)
 81066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ac:	f7fa f82c 	bl	8100708 <__aeabi_dmul>
 81066b0:	a36d      	add	r3, pc, #436	; (adr r3, 8106868 <_dtoa_r+0x2e8>)
 81066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066b6:	f7f9 fe71 	bl	810039c <__adddf3>
 81066ba:	4606      	mov	r6, r0
 81066bc:	4628      	mov	r0, r5
 81066be:	460f      	mov	r7, r1
 81066c0:	f7f9 ffb8 	bl	8100634 <__aeabi_i2d>
 81066c4:	a36a      	add	r3, pc, #424	; (adr r3, 8106870 <_dtoa_r+0x2f0>)
 81066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ca:	f7fa f81d 	bl	8100708 <__aeabi_dmul>
 81066ce:	4602      	mov	r2, r0
 81066d0:	460b      	mov	r3, r1
 81066d2:	4630      	mov	r0, r6
 81066d4:	4639      	mov	r1, r7
 81066d6:	f7f9 fe61 	bl	810039c <__adddf3>
 81066da:	4606      	mov	r6, r0
 81066dc:	460f      	mov	r7, r1
 81066de:	f7fa fac3 	bl	8100c68 <__aeabi_d2iz>
 81066e2:	2200      	movs	r2, #0
 81066e4:	4682      	mov	sl, r0
 81066e6:	2300      	movs	r3, #0
 81066e8:	4630      	mov	r0, r6
 81066ea:	4639      	mov	r1, r7
 81066ec:	f7fa fa7e 	bl	8100bec <__aeabi_dcmplt>
 81066f0:	b148      	cbz	r0, 8106706 <_dtoa_r+0x186>
 81066f2:	4650      	mov	r0, sl
 81066f4:	f7f9 ff9e 	bl	8100634 <__aeabi_i2d>
 81066f8:	4632      	mov	r2, r6
 81066fa:	463b      	mov	r3, r7
 81066fc:	f7fa fa6c 	bl	8100bd8 <__aeabi_dcmpeq>
 8106700:	b908      	cbnz	r0, 8106706 <_dtoa_r+0x186>
 8106702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8106706:	f1ba 0f16 	cmp.w	sl, #22
 810670a:	d854      	bhi.n	81067b6 <_dtoa_r+0x236>
 810670c:	4b61      	ldr	r3, [pc, #388]	; (8106894 <_dtoa_r+0x314>)
 810670e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8106712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810671a:	f7fa fa67 	bl	8100bec <__aeabi_dcmplt>
 810671e:	2800      	cmp	r0, #0
 8106720:	d04b      	beq.n	81067ba <_dtoa_r+0x23a>
 8106722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8106726:	2300      	movs	r3, #0
 8106728:	930e      	str	r3, [sp, #56]	; 0x38
 810672a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810672c:	1b5d      	subs	r5, r3, r5
 810672e:	1e6b      	subs	r3, r5, #1
 8106730:	9304      	str	r3, [sp, #16]
 8106732:	bf43      	ittte	mi
 8106734:	2300      	movmi	r3, #0
 8106736:	f1c5 0801 	rsbmi	r8, r5, #1
 810673a:	9304      	strmi	r3, [sp, #16]
 810673c:	f04f 0800 	movpl.w	r8, #0
 8106740:	f1ba 0f00 	cmp.w	sl, #0
 8106744:	db3b      	blt.n	81067be <_dtoa_r+0x23e>
 8106746:	9b04      	ldr	r3, [sp, #16]
 8106748:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 810674c:	4453      	add	r3, sl
 810674e:	9304      	str	r3, [sp, #16]
 8106750:	2300      	movs	r3, #0
 8106752:	9306      	str	r3, [sp, #24]
 8106754:	9b05      	ldr	r3, [sp, #20]
 8106756:	2b09      	cmp	r3, #9
 8106758:	d869      	bhi.n	810682e <_dtoa_r+0x2ae>
 810675a:	2b05      	cmp	r3, #5
 810675c:	bfc4      	itt	gt
 810675e:	3b04      	subgt	r3, #4
 8106760:	9305      	strgt	r3, [sp, #20]
 8106762:	9b05      	ldr	r3, [sp, #20]
 8106764:	f1a3 0302 	sub.w	r3, r3, #2
 8106768:	bfcc      	ite	gt
 810676a:	2500      	movgt	r5, #0
 810676c:	2501      	movle	r5, #1
 810676e:	2b03      	cmp	r3, #3
 8106770:	d869      	bhi.n	8106846 <_dtoa_r+0x2c6>
 8106772:	e8df f003 	tbb	[pc, r3]
 8106776:	4e2c      	.short	0x4e2c
 8106778:	5a4c      	.short	0x5a4c
 810677a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 810677e:	441d      	add	r5, r3
 8106780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8106784:	2b20      	cmp	r3, #32
 8106786:	bfc1      	itttt	gt
 8106788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810678c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8106790:	fa09 f303 	lslgt.w	r3, r9, r3
 8106794:	fa26 f000 	lsrgt.w	r0, r6, r0
 8106798:	bfda      	itte	le
 810679a:	f1c3 0320 	rsble	r3, r3, #32
 810679e:	fa06 f003 	lslle.w	r0, r6, r3
 81067a2:	4318      	orrgt	r0, r3
 81067a4:	f7f9 ff36 	bl	8100614 <__aeabi_ui2d>
 81067a8:	2301      	movs	r3, #1
 81067aa:	4606      	mov	r6, r0
 81067ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81067b0:	3d01      	subs	r5, #1
 81067b2:	9310      	str	r3, [sp, #64]	; 0x40
 81067b4:	e771      	b.n	810669a <_dtoa_r+0x11a>
 81067b6:	2301      	movs	r3, #1
 81067b8:	e7b6      	b.n	8106728 <_dtoa_r+0x1a8>
 81067ba:	900e      	str	r0, [sp, #56]	; 0x38
 81067bc:	e7b5      	b.n	810672a <_dtoa_r+0x1aa>
 81067be:	f1ca 0300 	rsb	r3, sl, #0
 81067c2:	9306      	str	r3, [sp, #24]
 81067c4:	2300      	movs	r3, #0
 81067c6:	eba8 080a 	sub.w	r8, r8, sl
 81067ca:	930d      	str	r3, [sp, #52]	; 0x34
 81067cc:	e7c2      	b.n	8106754 <_dtoa_r+0x1d4>
 81067ce:	2300      	movs	r3, #0
 81067d0:	9308      	str	r3, [sp, #32]
 81067d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81067d4:	2b00      	cmp	r3, #0
 81067d6:	dc39      	bgt.n	810684c <_dtoa_r+0x2cc>
 81067d8:	f04f 0901 	mov.w	r9, #1
 81067dc:	f8cd 9004 	str.w	r9, [sp, #4]
 81067e0:	464b      	mov	r3, r9
 81067e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81067e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81067e8:	2200      	movs	r2, #0
 81067ea:	6042      	str	r2, [r0, #4]
 81067ec:	2204      	movs	r2, #4
 81067ee:	f102 0614 	add.w	r6, r2, #20
 81067f2:	429e      	cmp	r6, r3
 81067f4:	6841      	ldr	r1, [r0, #4]
 81067f6:	d92f      	bls.n	8106858 <_dtoa_r+0x2d8>
 81067f8:	4620      	mov	r0, r4
 81067fa:	f001 f83b 	bl	8107874 <_Balloc>
 81067fe:	9000      	str	r0, [sp, #0]
 8106800:	2800      	cmp	r0, #0
 8106802:	d14b      	bne.n	810689c <_dtoa_r+0x31c>
 8106804:	4b24      	ldr	r3, [pc, #144]	; (8106898 <_dtoa_r+0x318>)
 8106806:	4602      	mov	r2, r0
 8106808:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810680c:	e6d1      	b.n	81065b2 <_dtoa_r+0x32>
 810680e:	2301      	movs	r3, #1
 8106810:	e7de      	b.n	81067d0 <_dtoa_r+0x250>
 8106812:	2300      	movs	r3, #0
 8106814:	9308      	str	r3, [sp, #32]
 8106816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106818:	eb0a 0903 	add.w	r9, sl, r3
 810681c:	f109 0301 	add.w	r3, r9, #1
 8106820:	2b01      	cmp	r3, #1
 8106822:	9301      	str	r3, [sp, #4]
 8106824:	bfb8      	it	lt
 8106826:	2301      	movlt	r3, #1
 8106828:	e7dd      	b.n	81067e6 <_dtoa_r+0x266>
 810682a:	2301      	movs	r3, #1
 810682c:	e7f2      	b.n	8106814 <_dtoa_r+0x294>
 810682e:	2501      	movs	r5, #1
 8106830:	2300      	movs	r3, #0
 8106832:	9305      	str	r3, [sp, #20]
 8106834:	9508      	str	r5, [sp, #32]
 8106836:	f04f 39ff 	mov.w	r9, #4294967295
 810683a:	2200      	movs	r2, #0
 810683c:	f8cd 9004 	str.w	r9, [sp, #4]
 8106840:	2312      	movs	r3, #18
 8106842:	9209      	str	r2, [sp, #36]	; 0x24
 8106844:	e7cf      	b.n	81067e6 <_dtoa_r+0x266>
 8106846:	2301      	movs	r3, #1
 8106848:	9308      	str	r3, [sp, #32]
 810684a:	e7f4      	b.n	8106836 <_dtoa_r+0x2b6>
 810684c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8106850:	f8cd 9004 	str.w	r9, [sp, #4]
 8106854:	464b      	mov	r3, r9
 8106856:	e7c6      	b.n	81067e6 <_dtoa_r+0x266>
 8106858:	3101      	adds	r1, #1
 810685a:	6041      	str	r1, [r0, #4]
 810685c:	0052      	lsls	r2, r2, #1
 810685e:	e7c6      	b.n	81067ee <_dtoa_r+0x26e>
 8106860:	636f4361 	.word	0x636f4361
 8106864:	3fd287a7 	.word	0x3fd287a7
 8106868:	8b60c8b3 	.word	0x8b60c8b3
 810686c:	3fc68a28 	.word	0x3fc68a28
 8106870:	509f79fb 	.word	0x509f79fb
 8106874:	3fd34413 	.word	0x3fd34413
 8106878:	081093b6 	.word	0x081093b6
 810687c:	081093cd 	.word	0x081093cd
 8106880:	7ff00000 	.word	0x7ff00000
 8106884:	081093b2 	.word	0x081093b2
 8106888:	081093a9 	.word	0x081093a9
 810688c:	0810922d 	.word	0x0810922d
 8106890:	3ff80000 	.word	0x3ff80000
 8106894:	08109548 	.word	0x08109548
 8106898:	0810942c 	.word	0x0810942c
 810689c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810689e:	9a00      	ldr	r2, [sp, #0]
 81068a0:	601a      	str	r2, [r3, #0]
 81068a2:	9b01      	ldr	r3, [sp, #4]
 81068a4:	2b0e      	cmp	r3, #14
 81068a6:	f200 80ad 	bhi.w	8106a04 <_dtoa_r+0x484>
 81068aa:	2d00      	cmp	r5, #0
 81068ac:	f000 80aa 	beq.w	8106a04 <_dtoa_r+0x484>
 81068b0:	f1ba 0f00 	cmp.w	sl, #0
 81068b4:	dd36      	ble.n	8106924 <_dtoa_r+0x3a4>
 81068b6:	4ac3      	ldr	r2, [pc, #780]	; (8106bc4 <_dtoa_r+0x644>)
 81068b8:	f00a 030f 	and.w	r3, sl, #15
 81068bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81068c0:	ed93 7b00 	vldr	d7, [r3]
 81068c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81068c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 81068cc:	eeb0 8a47 	vmov.f32	s16, s14
 81068d0:	eef0 8a67 	vmov.f32	s17, s15
 81068d4:	d016      	beq.n	8106904 <_dtoa_r+0x384>
 81068d6:	4bbc      	ldr	r3, [pc, #752]	; (8106bc8 <_dtoa_r+0x648>)
 81068d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81068dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81068e0:	f7fa f83c 	bl	810095c <__aeabi_ddiv>
 81068e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81068e8:	f007 070f 	and.w	r7, r7, #15
 81068ec:	2503      	movs	r5, #3
 81068ee:	4eb6      	ldr	r6, [pc, #728]	; (8106bc8 <_dtoa_r+0x648>)
 81068f0:	b957      	cbnz	r7, 8106908 <_dtoa_r+0x388>
 81068f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81068f6:	ec53 2b18 	vmov	r2, r3, d8
 81068fa:	f7fa f82f 	bl	810095c <__aeabi_ddiv>
 81068fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8106902:	e029      	b.n	8106958 <_dtoa_r+0x3d8>
 8106904:	2502      	movs	r5, #2
 8106906:	e7f2      	b.n	81068ee <_dtoa_r+0x36e>
 8106908:	07f9      	lsls	r1, r7, #31
 810690a:	d508      	bpl.n	810691e <_dtoa_r+0x39e>
 810690c:	ec51 0b18 	vmov	r0, r1, d8
 8106910:	e9d6 2300 	ldrd	r2, r3, [r6]
 8106914:	f7f9 fef8 	bl	8100708 <__aeabi_dmul>
 8106918:	ec41 0b18 	vmov	d8, r0, r1
 810691c:	3501      	adds	r5, #1
 810691e:	107f      	asrs	r7, r7, #1
 8106920:	3608      	adds	r6, #8
 8106922:	e7e5      	b.n	81068f0 <_dtoa_r+0x370>
 8106924:	f000 80a6 	beq.w	8106a74 <_dtoa_r+0x4f4>
 8106928:	f1ca 0600 	rsb	r6, sl, #0
 810692c:	4ba5      	ldr	r3, [pc, #660]	; (8106bc4 <_dtoa_r+0x644>)
 810692e:	4fa6      	ldr	r7, [pc, #664]	; (8106bc8 <_dtoa_r+0x648>)
 8106930:	f006 020f 	and.w	r2, r6, #15
 8106934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8106938:	e9d3 2300 	ldrd	r2, r3, [r3]
 810693c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8106940:	f7f9 fee2 	bl	8100708 <__aeabi_dmul>
 8106944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8106948:	1136      	asrs	r6, r6, #4
 810694a:	2300      	movs	r3, #0
 810694c:	2502      	movs	r5, #2
 810694e:	2e00      	cmp	r6, #0
 8106950:	f040 8085 	bne.w	8106a5e <_dtoa_r+0x4de>
 8106954:	2b00      	cmp	r3, #0
 8106956:	d1d2      	bne.n	81068fe <_dtoa_r+0x37e>
 8106958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810695a:	2b00      	cmp	r3, #0
 810695c:	f000 808c 	beq.w	8106a78 <_dtoa_r+0x4f8>
 8106960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8106964:	4b99      	ldr	r3, [pc, #612]	; (8106bcc <_dtoa_r+0x64c>)
 8106966:	2200      	movs	r2, #0
 8106968:	4630      	mov	r0, r6
 810696a:	4639      	mov	r1, r7
 810696c:	f7fa f93e 	bl	8100bec <__aeabi_dcmplt>
 8106970:	2800      	cmp	r0, #0
 8106972:	f000 8081 	beq.w	8106a78 <_dtoa_r+0x4f8>
 8106976:	9b01      	ldr	r3, [sp, #4]
 8106978:	2b00      	cmp	r3, #0
 810697a:	d07d      	beq.n	8106a78 <_dtoa_r+0x4f8>
 810697c:	f1b9 0f00 	cmp.w	r9, #0
 8106980:	dd3c      	ble.n	81069fc <_dtoa_r+0x47c>
 8106982:	f10a 33ff 	add.w	r3, sl, #4294967295
 8106986:	9307      	str	r3, [sp, #28]
 8106988:	2200      	movs	r2, #0
 810698a:	4b91      	ldr	r3, [pc, #580]	; (8106bd0 <_dtoa_r+0x650>)
 810698c:	4630      	mov	r0, r6
 810698e:	4639      	mov	r1, r7
 8106990:	f7f9 feba 	bl	8100708 <__aeabi_dmul>
 8106994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8106998:	3501      	adds	r5, #1
 810699a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 810699e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81069a2:	4628      	mov	r0, r5
 81069a4:	f7f9 fe46 	bl	8100634 <__aeabi_i2d>
 81069a8:	4632      	mov	r2, r6
 81069aa:	463b      	mov	r3, r7
 81069ac:	f7f9 feac 	bl	8100708 <__aeabi_dmul>
 81069b0:	4b88      	ldr	r3, [pc, #544]	; (8106bd4 <_dtoa_r+0x654>)
 81069b2:	2200      	movs	r2, #0
 81069b4:	f7f9 fcf2 	bl	810039c <__adddf3>
 81069b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81069bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81069c0:	9303      	str	r3, [sp, #12]
 81069c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81069c4:	2b00      	cmp	r3, #0
 81069c6:	d15c      	bne.n	8106a82 <_dtoa_r+0x502>
 81069c8:	4b83      	ldr	r3, [pc, #524]	; (8106bd8 <_dtoa_r+0x658>)
 81069ca:	2200      	movs	r2, #0
 81069cc:	4630      	mov	r0, r6
 81069ce:	4639      	mov	r1, r7
 81069d0:	f7f9 fce2 	bl	8100398 <__aeabi_dsub>
 81069d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81069d8:	4606      	mov	r6, r0
 81069da:	460f      	mov	r7, r1
 81069dc:	f7fa f924 	bl	8100c28 <__aeabi_dcmpgt>
 81069e0:	2800      	cmp	r0, #0
 81069e2:	f040 8296 	bne.w	8106f12 <_dtoa_r+0x992>
 81069e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 81069ea:	4630      	mov	r0, r6
 81069ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81069f0:	4639      	mov	r1, r7
 81069f2:	f7fa f8fb 	bl	8100bec <__aeabi_dcmplt>
 81069f6:	2800      	cmp	r0, #0
 81069f8:	f040 8288 	bne.w	8106f0c <_dtoa_r+0x98c>
 81069fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8106a00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8106a04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8106a06:	2b00      	cmp	r3, #0
 8106a08:	f2c0 8158 	blt.w	8106cbc <_dtoa_r+0x73c>
 8106a0c:	f1ba 0f0e 	cmp.w	sl, #14
 8106a10:	f300 8154 	bgt.w	8106cbc <_dtoa_r+0x73c>
 8106a14:	4b6b      	ldr	r3, [pc, #428]	; (8106bc4 <_dtoa_r+0x644>)
 8106a16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8106a1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8106a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106a20:	2b00      	cmp	r3, #0
 8106a22:	f280 80e3 	bge.w	8106bec <_dtoa_r+0x66c>
 8106a26:	9b01      	ldr	r3, [sp, #4]
 8106a28:	2b00      	cmp	r3, #0
 8106a2a:	f300 80df 	bgt.w	8106bec <_dtoa_r+0x66c>
 8106a2e:	f040 826d 	bne.w	8106f0c <_dtoa_r+0x98c>
 8106a32:	4b69      	ldr	r3, [pc, #420]	; (8106bd8 <_dtoa_r+0x658>)
 8106a34:	2200      	movs	r2, #0
 8106a36:	4640      	mov	r0, r8
 8106a38:	4649      	mov	r1, r9
 8106a3a:	f7f9 fe65 	bl	8100708 <__aeabi_dmul>
 8106a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8106a42:	f7fa f8e7 	bl	8100c14 <__aeabi_dcmpge>
 8106a46:	9e01      	ldr	r6, [sp, #4]
 8106a48:	4637      	mov	r7, r6
 8106a4a:	2800      	cmp	r0, #0
 8106a4c:	f040 8243 	bne.w	8106ed6 <_dtoa_r+0x956>
 8106a50:	9d00      	ldr	r5, [sp, #0]
 8106a52:	2331      	movs	r3, #49	; 0x31
 8106a54:	f805 3b01 	strb.w	r3, [r5], #1
 8106a58:	f10a 0a01 	add.w	sl, sl, #1
 8106a5c:	e23f      	b.n	8106ede <_dtoa_r+0x95e>
 8106a5e:	07f2      	lsls	r2, r6, #31
 8106a60:	d505      	bpl.n	8106a6e <_dtoa_r+0x4ee>
 8106a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106a66:	f7f9 fe4f 	bl	8100708 <__aeabi_dmul>
 8106a6a:	3501      	adds	r5, #1
 8106a6c:	2301      	movs	r3, #1
 8106a6e:	1076      	asrs	r6, r6, #1
 8106a70:	3708      	adds	r7, #8
 8106a72:	e76c      	b.n	810694e <_dtoa_r+0x3ce>
 8106a74:	2502      	movs	r5, #2
 8106a76:	e76f      	b.n	8106958 <_dtoa_r+0x3d8>
 8106a78:	9b01      	ldr	r3, [sp, #4]
 8106a7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8106a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8106a80:	e78d      	b.n	810699e <_dtoa_r+0x41e>
 8106a82:	9900      	ldr	r1, [sp, #0]
 8106a84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8106a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8106a88:	4b4e      	ldr	r3, [pc, #312]	; (8106bc4 <_dtoa_r+0x644>)
 8106a8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8106a8e:	4401      	add	r1, r0
 8106a90:	9102      	str	r1, [sp, #8]
 8106a92:	9908      	ldr	r1, [sp, #32]
 8106a94:	eeb0 8a47 	vmov.f32	s16, s14
 8106a98:	eef0 8a67 	vmov.f32	s17, s15
 8106a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8106aa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8106aa4:	2900      	cmp	r1, #0
 8106aa6:	d045      	beq.n	8106b34 <_dtoa_r+0x5b4>
 8106aa8:	494c      	ldr	r1, [pc, #304]	; (8106bdc <_dtoa_r+0x65c>)
 8106aaa:	2000      	movs	r0, #0
 8106aac:	f7f9 ff56 	bl	810095c <__aeabi_ddiv>
 8106ab0:	ec53 2b18 	vmov	r2, r3, d8
 8106ab4:	f7f9 fc70 	bl	8100398 <__aeabi_dsub>
 8106ab8:	9d00      	ldr	r5, [sp, #0]
 8106aba:	ec41 0b18 	vmov	d8, r0, r1
 8106abe:	4639      	mov	r1, r7
 8106ac0:	4630      	mov	r0, r6
 8106ac2:	f7fa f8d1 	bl	8100c68 <__aeabi_d2iz>
 8106ac6:	900c      	str	r0, [sp, #48]	; 0x30
 8106ac8:	f7f9 fdb4 	bl	8100634 <__aeabi_i2d>
 8106acc:	4602      	mov	r2, r0
 8106ace:	460b      	mov	r3, r1
 8106ad0:	4630      	mov	r0, r6
 8106ad2:	4639      	mov	r1, r7
 8106ad4:	f7f9 fc60 	bl	8100398 <__aeabi_dsub>
 8106ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8106ada:	3330      	adds	r3, #48	; 0x30
 8106adc:	f805 3b01 	strb.w	r3, [r5], #1
 8106ae0:	ec53 2b18 	vmov	r2, r3, d8
 8106ae4:	4606      	mov	r6, r0
 8106ae6:	460f      	mov	r7, r1
 8106ae8:	f7fa f880 	bl	8100bec <__aeabi_dcmplt>
 8106aec:	2800      	cmp	r0, #0
 8106aee:	d165      	bne.n	8106bbc <_dtoa_r+0x63c>
 8106af0:	4632      	mov	r2, r6
 8106af2:	463b      	mov	r3, r7
 8106af4:	4935      	ldr	r1, [pc, #212]	; (8106bcc <_dtoa_r+0x64c>)
 8106af6:	2000      	movs	r0, #0
 8106af8:	f7f9 fc4e 	bl	8100398 <__aeabi_dsub>
 8106afc:	ec53 2b18 	vmov	r2, r3, d8
 8106b00:	f7fa f874 	bl	8100bec <__aeabi_dcmplt>
 8106b04:	2800      	cmp	r0, #0
 8106b06:	f040 80b9 	bne.w	8106c7c <_dtoa_r+0x6fc>
 8106b0a:	9b02      	ldr	r3, [sp, #8]
 8106b0c:	429d      	cmp	r5, r3
 8106b0e:	f43f af75 	beq.w	81069fc <_dtoa_r+0x47c>
 8106b12:	4b2f      	ldr	r3, [pc, #188]	; (8106bd0 <_dtoa_r+0x650>)
 8106b14:	ec51 0b18 	vmov	r0, r1, d8
 8106b18:	2200      	movs	r2, #0
 8106b1a:	f7f9 fdf5 	bl	8100708 <__aeabi_dmul>
 8106b1e:	4b2c      	ldr	r3, [pc, #176]	; (8106bd0 <_dtoa_r+0x650>)
 8106b20:	ec41 0b18 	vmov	d8, r0, r1
 8106b24:	2200      	movs	r2, #0
 8106b26:	4630      	mov	r0, r6
 8106b28:	4639      	mov	r1, r7
 8106b2a:	f7f9 fded 	bl	8100708 <__aeabi_dmul>
 8106b2e:	4606      	mov	r6, r0
 8106b30:	460f      	mov	r7, r1
 8106b32:	e7c4      	b.n	8106abe <_dtoa_r+0x53e>
 8106b34:	ec51 0b17 	vmov	r0, r1, d7
 8106b38:	f7f9 fde6 	bl	8100708 <__aeabi_dmul>
 8106b3c:	9b02      	ldr	r3, [sp, #8]
 8106b3e:	9d00      	ldr	r5, [sp, #0]
 8106b40:	930c      	str	r3, [sp, #48]	; 0x30
 8106b42:	ec41 0b18 	vmov	d8, r0, r1
 8106b46:	4639      	mov	r1, r7
 8106b48:	4630      	mov	r0, r6
 8106b4a:	f7fa f88d 	bl	8100c68 <__aeabi_d2iz>
 8106b4e:	9011      	str	r0, [sp, #68]	; 0x44
 8106b50:	f7f9 fd70 	bl	8100634 <__aeabi_i2d>
 8106b54:	4602      	mov	r2, r0
 8106b56:	460b      	mov	r3, r1
 8106b58:	4630      	mov	r0, r6
 8106b5a:	4639      	mov	r1, r7
 8106b5c:	f7f9 fc1c 	bl	8100398 <__aeabi_dsub>
 8106b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8106b62:	3330      	adds	r3, #48	; 0x30
 8106b64:	f805 3b01 	strb.w	r3, [r5], #1
 8106b68:	9b02      	ldr	r3, [sp, #8]
 8106b6a:	429d      	cmp	r5, r3
 8106b6c:	4606      	mov	r6, r0
 8106b6e:	460f      	mov	r7, r1
 8106b70:	f04f 0200 	mov.w	r2, #0
 8106b74:	d134      	bne.n	8106be0 <_dtoa_r+0x660>
 8106b76:	4b19      	ldr	r3, [pc, #100]	; (8106bdc <_dtoa_r+0x65c>)
 8106b78:	ec51 0b18 	vmov	r0, r1, d8
 8106b7c:	f7f9 fc0e 	bl	810039c <__adddf3>
 8106b80:	4602      	mov	r2, r0
 8106b82:	460b      	mov	r3, r1
 8106b84:	4630      	mov	r0, r6
 8106b86:	4639      	mov	r1, r7
 8106b88:	f7fa f84e 	bl	8100c28 <__aeabi_dcmpgt>
 8106b8c:	2800      	cmp	r0, #0
 8106b8e:	d175      	bne.n	8106c7c <_dtoa_r+0x6fc>
 8106b90:	ec53 2b18 	vmov	r2, r3, d8
 8106b94:	4911      	ldr	r1, [pc, #68]	; (8106bdc <_dtoa_r+0x65c>)
 8106b96:	2000      	movs	r0, #0
 8106b98:	f7f9 fbfe 	bl	8100398 <__aeabi_dsub>
 8106b9c:	4602      	mov	r2, r0
 8106b9e:	460b      	mov	r3, r1
 8106ba0:	4630      	mov	r0, r6
 8106ba2:	4639      	mov	r1, r7
 8106ba4:	f7fa f822 	bl	8100bec <__aeabi_dcmplt>
 8106ba8:	2800      	cmp	r0, #0
 8106baa:	f43f af27 	beq.w	81069fc <_dtoa_r+0x47c>
 8106bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106bb0:	1e6b      	subs	r3, r5, #1
 8106bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8106bb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8106bb8:	2b30      	cmp	r3, #48	; 0x30
 8106bba:	d0f8      	beq.n	8106bae <_dtoa_r+0x62e>
 8106bbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8106bc0:	e04a      	b.n	8106c58 <_dtoa_r+0x6d8>
 8106bc2:	bf00      	nop
 8106bc4:	08109548 	.word	0x08109548
 8106bc8:	08109520 	.word	0x08109520
 8106bcc:	3ff00000 	.word	0x3ff00000
 8106bd0:	40240000 	.word	0x40240000
 8106bd4:	401c0000 	.word	0x401c0000
 8106bd8:	40140000 	.word	0x40140000
 8106bdc:	3fe00000 	.word	0x3fe00000
 8106be0:	4baf      	ldr	r3, [pc, #700]	; (8106ea0 <_dtoa_r+0x920>)
 8106be2:	f7f9 fd91 	bl	8100708 <__aeabi_dmul>
 8106be6:	4606      	mov	r6, r0
 8106be8:	460f      	mov	r7, r1
 8106bea:	e7ac      	b.n	8106b46 <_dtoa_r+0x5c6>
 8106bec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8106bf0:	9d00      	ldr	r5, [sp, #0]
 8106bf2:	4642      	mov	r2, r8
 8106bf4:	464b      	mov	r3, r9
 8106bf6:	4630      	mov	r0, r6
 8106bf8:	4639      	mov	r1, r7
 8106bfa:	f7f9 feaf 	bl	810095c <__aeabi_ddiv>
 8106bfe:	f7fa f833 	bl	8100c68 <__aeabi_d2iz>
 8106c02:	9002      	str	r0, [sp, #8]
 8106c04:	f7f9 fd16 	bl	8100634 <__aeabi_i2d>
 8106c08:	4642      	mov	r2, r8
 8106c0a:	464b      	mov	r3, r9
 8106c0c:	f7f9 fd7c 	bl	8100708 <__aeabi_dmul>
 8106c10:	4602      	mov	r2, r0
 8106c12:	460b      	mov	r3, r1
 8106c14:	4630      	mov	r0, r6
 8106c16:	4639      	mov	r1, r7
 8106c18:	f7f9 fbbe 	bl	8100398 <__aeabi_dsub>
 8106c1c:	9e02      	ldr	r6, [sp, #8]
 8106c1e:	9f01      	ldr	r7, [sp, #4]
 8106c20:	3630      	adds	r6, #48	; 0x30
 8106c22:	f805 6b01 	strb.w	r6, [r5], #1
 8106c26:	9e00      	ldr	r6, [sp, #0]
 8106c28:	1bae      	subs	r6, r5, r6
 8106c2a:	42b7      	cmp	r7, r6
 8106c2c:	4602      	mov	r2, r0
 8106c2e:	460b      	mov	r3, r1
 8106c30:	d137      	bne.n	8106ca2 <_dtoa_r+0x722>
 8106c32:	f7f9 fbb3 	bl	810039c <__adddf3>
 8106c36:	4642      	mov	r2, r8
 8106c38:	464b      	mov	r3, r9
 8106c3a:	4606      	mov	r6, r0
 8106c3c:	460f      	mov	r7, r1
 8106c3e:	f7f9 fff3 	bl	8100c28 <__aeabi_dcmpgt>
 8106c42:	b9c8      	cbnz	r0, 8106c78 <_dtoa_r+0x6f8>
 8106c44:	4642      	mov	r2, r8
 8106c46:	464b      	mov	r3, r9
 8106c48:	4630      	mov	r0, r6
 8106c4a:	4639      	mov	r1, r7
 8106c4c:	f7f9 ffc4 	bl	8100bd8 <__aeabi_dcmpeq>
 8106c50:	b110      	cbz	r0, 8106c58 <_dtoa_r+0x6d8>
 8106c52:	9b02      	ldr	r3, [sp, #8]
 8106c54:	07d9      	lsls	r1, r3, #31
 8106c56:	d40f      	bmi.n	8106c78 <_dtoa_r+0x6f8>
 8106c58:	4620      	mov	r0, r4
 8106c5a:	4659      	mov	r1, fp
 8106c5c:	f000 fe4a 	bl	81078f4 <_Bfree>
 8106c60:	2300      	movs	r3, #0
 8106c62:	702b      	strb	r3, [r5, #0]
 8106c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8106c66:	f10a 0001 	add.w	r0, sl, #1
 8106c6a:	6018      	str	r0, [r3, #0]
 8106c6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106c6e:	2b00      	cmp	r3, #0
 8106c70:	f43f acd8 	beq.w	8106624 <_dtoa_r+0xa4>
 8106c74:	601d      	str	r5, [r3, #0]
 8106c76:	e4d5      	b.n	8106624 <_dtoa_r+0xa4>
 8106c78:	f8cd a01c 	str.w	sl, [sp, #28]
 8106c7c:	462b      	mov	r3, r5
 8106c7e:	461d      	mov	r5, r3
 8106c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8106c84:	2a39      	cmp	r2, #57	; 0x39
 8106c86:	d108      	bne.n	8106c9a <_dtoa_r+0x71a>
 8106c88:	9a00      	ldr	r2, [sp, #0]
 8106c8a:	429a      	cmp	r2, r3
 8106c8c:	d1f7      	bne.n	8106c7e <_dtoa_r+0x6fe>
 8106c8e:	9a07      	ldr	r2, [sp, #28]
 8106c90:	9900      	ldr	r1, [sp, #0]
 8106c92:	3201      	adds	r2, #1
 8106c94:	9207      	str	r2, [sp, #28]
 8106c96:	2230      	movs	r2, #48	; 0x30
 8106c98:	700a      	strb	r2, [r1, #0]
 8106c9a:	781a      	ldrb	r2, [r3, #0]
 8106c9c:	3201      	adds	r2, #1
 8106c9e:	701a      	strb	r2, [r3, #0]
 8106ca0:	e78c      	b.n	8106bbc <_dtoa_r+0x63c>
 8106ca2:	4b7f      	ldr	r3, [pc, #508]	; (8106ea0 <_dtoa_r+0x920>)
 8106ca4:	2200      	movs	r2, #0
 8106ca6:	f7f9 fd2f 	bl	8100708 <__aeabi_dmul>
 8106caa:	2200      	movs	r2, #0
 8106cac:	2300      	movs	r3, #0
 8106cae:	4606      	mov	r6, r0
 8106cb0:	460f      	mov	r7, r1
 8106cb2:	f7f9 ff91 	bl	8100bd8 <__aeabi_dcmpeq>
 8106cb6:	2800      	cmp	r0, #0
 8106cb8:	d09b      	beq.n	8106bf2 <_dtoa_r+0x672>
 8106cba:	e7cd      	b.n	8106c58 <_dtoa_r+0x6d8>
 8106cbc:	9a08      	ldr	r2, [sp, #32]
 8106cbe:	2a00      	cmp	r2, #0
 8106cc0:	f000 80c4 	beq.w	8106e4c <_dtoa_r+0x8cc>
 8106cc4:	9a05      	ldr	r2, [sp, #20]
 8106cc6:	2a01      	cmp	r2, #1
 8106cc8:	f300 80a8 	bgt.w	8106e1c <_dtoa_r+0x89c>
 8106ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8106cce:	2a00      	cmp	r2, #0
 8106cd0:	f000 80a0 	beq.w	8106e14 <_dtoa_r+0x894>
 8106cd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8106cd8:	9e06      	ldr	r6, [sp, #24]
 8106cda:	4645      	mov	r5, r8
 8106cdc:	9a04      	ldr	r2, [sp, #16]
 8106cde:	2101      	movs	r1, #1
 8106ce0:	441a      	add	r2, r3
 8106ce2:	4620      	mov	r0, r4
 8106ce4:	4498      	add	r8, r3
 8106ce6:	9204      	str	r2, [sp, #16]
 8106ce8:	f000 ff0a 	bl	8107b00 <__i2b>
 8106cec:	4607      	mov	r7, r0
 8106cee:	2d00      	cmp	r5, #0
 8106cf0:	dd0b      	ble.n	8106d0a <_dtoa_r+0x78a>
 8106cf2:	9b04      	ldr	r3, [sp, #16]
 8106cf4:	2b00      	cmp	r3, #0
 8106cf6:	dd08      	ble.n	8106d0a <_dtoa_r+0x78a>
 8106cf8:	42ab      	cmp	r3, r5
 8106cfa:	9a04      	ldr	r2, [sp, #16]
 8106cfc:	bfa8      	it	ge
 8106cfe:	462b      	movge	r3, r5
 8106d00:	eba8 0803 	sub.w	r8, r8, r3
 8106d04:	1aed      	subs	r5, r5, r3
 8106d06:	1ad3      	subs	r3, r2, r3
 8106d08:	9304      	str	r3, [sp, #16]
 8106d0a:	9b06      	ldr	r3, [sp, #24]
 8106d0c:	b1fb      	cbz	r3, 8106d4e <_dtoa_r+0x7ce>
 8106d0e:	9b08      	ldr	r3, [sp, #32]
 8106d10:	2b00      	cmp	r3, #0
 8106d12:	f000 809f 	beq.w	8106e54 <_dtoa_r+0x8d4>
 8106d16:	2e00      	cmp	r6, #0
 8106d18:	dd11      	ble.n	8106d3e <_dtoa_r+0x7be>
 8106d1a:	4639      	mov	r1, r7
 8106d1c:	4632      	mov	r2, r6
 8106d1e:	4620      	mov	r0, r4
 8106d20:	f000 ffaa 	bl	8107c78 <__pow5mult>
 8106d24:	465a      	mov	r2, fp
 8106d26:	4601      	mov	r1, r0
 8106d28:	4607      	mov	r7, r0
 8106d2a:	4620      	mov	r0, r4
 8106d2c:	f000 fefe 	bl	8107b2c <__multiply>
 8106d30:	4659      	mov	r1, fp
 8106d32:	9007      	str	r0, [sp, #28]
 8106d34:	4620      	mov	r0, r4
 8106d36:	f000 fddd 	bl	81078f4 <_Bfree>
 8106d3a:	9b07      	ldr	r3, [sp, #28]
 8106d3c:	469b      	mov	fp, r3
 8106d3e:	9b06      	ldr	r3, [sp, #24]
 8106d40:	1b9a      	subs	r2, r3, r6
 8106d42:	d004      	beq.n	8106d4e <_dtoa_r+0x7ce>
 8106d44:	4659      	mov	r1, fp
 8106d46:	4620      	mov	r0, r4
 8106d48:	f000 ff96 	bl	8107c78 <__pow5mult>
 8106d4c:	4683      	mov	fp, r0
 8106d4e:	2101      	movs	r1, #1
 8106d50:	4620      	mov	r0, r4
 8106d52:	f000 fed5 	bl	8107b00 <__i2b>
 8106d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106d58:	2b00      	cmp	r3, #0
 8106d5a:	4606      	mov	r6, r0
 8106d5c:	dd7c      	ble.n	8106e58 <_dtoa_r+0x8d8>
 8106d5e:	461a      	mov	r2, r3
 8106d60:	4601      	mov	r1, r0
 8106d62:	4620      	mov	r0, r4
 8106d64:	f000 ff88 	bl	8107c78 <__pow5mult>
 8106d68:	9b05      	ldr	r3, [sp, #20]
 8106d6a:	2b01      	cmp	r3, #1
 8106d6c:	4606      	mov	r6, r0
 8106d6e:	dd76      	ble.n	8106e5e <_dtoa_r+0x8de>
 8106d70:	2300      	movs	r3, #0
 8106d72:	9306      	str	r3, [sp, #24]
 8106d74:	6933      	ldr	r3, [r6, #16]
 8106d76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8106d7a:	6918      	ldr	r0, [r3, #16]
 8106d7c:	f000 fe70 	bl	8107a60 <__hi0bits>
 8106d80:	f1c0 0020 	rsb	r0, r0, #32
 8106d84:	9b04      	ldr	r3, [sp, #16]
 8106d86:	4418      	add	r0, r3
 8106d88:	f010 001f 	ands.w	r0, r0, #31
 8106d8c:	f000 8086 	beq.w	8106e9c <_dtoa_r+0x91c>
 8106d90:	f1c0 0320 	rsb	r3, r0, #32
 8106d94:	2b04      	cmp	r3, #4
 8106d96:	dd7f      	ble.n	8106e98 <_dtoa_r+0x918>
 8106d98:	f1c0 001c 	rsb	r0, r0, #28
 8106d9c:	9b04      	ldr	r3, [sp, #16]
 8106d9e:	4403      	add	r3, r0
 8106da0:	4480      	add	r8, r0
 8106da2:	4405      	add	r5, r0
 8106da4:	9304      	str	r3, [sp, #16]
 8106da6:	f1b8 0f00 	cmp.w	r8, #0
 8106daa:	dd05      	ble.n	8106db8 <_dtoa_r+0x838>
 8106dac:	4659      	mov	r1, fp
 8106dae:	4642      	mov	r2, r8
 8106db0:	4620      	mov	r0, r4
 8106db2:	f000 ffbb 	bl	8107d2c <__lshift>
 8106db6:	4683      	mov	fp, r0
 8106db8:	9b04      	ldr	r3, [sp, #16]
 8106dba:	2b00      	cmp	r3, #0
 8106dbc:	dd05      	ble.n	8106dca <_dtoa_r+0x84a>
 8106dbe:	4631      	mov	r1, r6
 8106dc0:	461a      	mov	r2, r3
 8106dc2:	4620      	mov	r0, r4
 8106dc4:	f000 ffb2 	bl	8107d2c <__lshift>
 8106dc8:	4606      	mov	r6, r0
 8106dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8106dcc:	2b00      	cmp	r3, #0
 8106dce:	d069      	beq.n	8106ea4 <_dtoa_r+0x924>
 8106dd0:	4631      	mov	r1, r6
 8106dd2:	4658      	mov	r0, fp
 8106dd4:	f001 f816 	bl	8107e04 <__mcmp>
 8106dd8:	2800      	cmp	r0, #0
 8106dda:	da63      	bge.n	8106ea4 <_dtoa_r+0x924>
 8106ddc:	2300      	movs	r3, #0
 8106dde:	4659      	mov	r1, fp
 8106de0:	220a      	movs	r2, #10
 8106de2:	4620      	mov	r0, r4
 8106de4:	f000 fda8 	bl	8107938 <__multadd>
 8106de8:	9b08      	ldr	r3, [sp, #32]
 8106dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8106dee:	4683      	mov	fp, r0
 8106df0:	2b00      	cmp	r3, #0
 8106df2:	f000 818f 	beq.w	8107114 <_dtoa_r+0xb94>
 8106df6:	4639      	mov	r1, r7
 8106df8:	2300      	movs	r3, #0
 8106dfa:	220a      	movs	r2, #10
 8106dfc:	4620      	mov	r0, r4
 8106dfe:	f000 fd9b 	bl	8107938 <__multadd>
 8106e02:	f1b9 0f00 	cmp.w	r9, #0
 8106e06:	4607      	mov	r7, r0
 8106e08:	f300 808e 	bgt.w	8106f28 <_dtoa_r+0x9a8>
 8106e0c:	9b05      	ldr	r3, [sp, #20]
 8106e0e:	2b02      	cmp	r3, #2
 8106e10:	dc50      	bgt.n	8106eb4 <_dtoa_r+0x934>
 8106e12:	e089      	b.n	8106f28 <_dtoa_r+0x9a8>
 8106e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8106e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8106e1a:	e75d      	b.n	8106cd8 <_dtoa_r+0x758>
 8106e1c:	9b01      	ldr	r3, [sp, #4]
 8106e1e:	1e5e      	subs	r6, r3, #1
 8106e20:	9b06      	ldr	r3, [sp, #24]
 8106e22:	42b3      	cmp	r3, r6
 8106e24:	bfbf      	itttt	lt
 8106e26:	9b06      	ldrlt	r3, [sp, #24]
 8106e28:	9606      	strlt	r6, [sp, #24]
 8106e2a:	1af2      	sublt	r2, r6, r3
 8106e2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8106e2e:	bfb6      	itet	lt
 8106e30:	189b      	addlt	r3, r3, r2
 8106e32:	1b9e      	subge	r6, r3, r6
 8106e34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8106e36:	9b01      	ldr	r3, [sp, #4]
 8106e38:	bfb8      	it	lt
 8106e3a:	2600      	movlt	r6, #0
 8106e3c:	2b00      	cmp	r3, #0
 8106e3e:	bfb5      	itete	lt
 8106e40:	eba8 0503 	sublt.w	r5, r8, r3
 8106e44:	9b01      	ldrge	r3, [sp, #4]
 8106e46:	2300      	movlt	r3, #0
 8106e48:	4645      	movge	r5, r8
 8106e4a:	e747      	b.n	8106cdc <_dtoa_r+0x75c>
 8106e4c:	9e06      	ldr	r6, [sp, #24]
 8106e4e:	9f08      	ldr	r7, [sp, #32]
 8106e50:	4645      	mov	r5, r8
 8106e52:	e74c      	b.n	8106cee <_dtoa_r+0x76e>
 8106e54:	9a06      	ldr	r2, [sp, #24]
 8106e56:	e775      	b.n	8106d44 <_dtoa_r+0x7c4>
 8106e58:	9b05      	ldr	r3, [sp, #20]
 8106e5a:	2b01      	cmp	r3, #1
 8106e5c:	dc18      	bgt.n	8106e90 <_dtoa_r+0x910>
 8106e5e:	9b02      	ldr	r3, [sp, #8]
 8106e60:	b9b3      	cbnz	r3, 8106e90 <_dtoa_r+0x910>
 8106e62:	9b03      	ldr	r3, [sp, #12]
 8106e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8106e68:	b9a3      	cbnz	r3, 8106e94 <_dtoa_r+0x914>
 8106e6a:	9b03      	ldr	r3, [sp, #12]
 8106e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8106e70:	0d1b      	lsrs	r3, r3, #20
 8106e72:	051b      	lsls	r3, r3, #20
 8106e74:	b12b      	cbz	r3, 8106e82 <_dtoa_r+0x902>
 8106e76:	9b04      	ldr	r3, [sp, #16]
 8106e78:	3301      	adds	r3, #1
 8106e7a:	9304      	str	r3, [sp, #16]
 8106e7c:	f108 0801 	add.w	r8, r8, #1
 8106e80:	2301      	movs	r3, #1
 8106e82:	9306      	str	r3, [sp, #24]
 8106e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106e86:	2b00      	cmp	r3, #0
 8106e88:	f47f af74 	bne.w	8106d74 <_dtoa_r+0x7f4>
 8106e8c:	2001      	movs	r0, #1
 8106e8e:	e779      	b.n	8106d84 <_dtoa_r+0x804>
 8106e90:	2300      	movs	r3, #0
 8106e92:	e7f6      	b.n	8106e82 <_dtoa_r+0x902>
 8106e94:	9b02      	ldr	r3, [sp, #8]
 8106e96:	e7f4      	b.n	8106e82 <_dtoa_r+0x902>
 8106e98:	d085      	beq.n	8106da6 <_dtoa_r+0x826>
 8106e9a:	4618      	mov	r0, r3
 8106e9c:	301c      	adds	r0, #28
 8106e9e:	e77d      	b.n	8106d9c <_dtoa_r+0x81c>
 8106ea0:	40240000 	.word	0x40240000
 8106ea4:	9b01      	ldr	r3, [sp, #4]
 8106ea6:	2b00      	cmp	r3, #0
 8106ea8:	dc38      	bgt.n	8106f1c <_dtoa_r+0x99c>
 8106eaa:	9b05      	ldr	r3, [sp, #20]
 8106eac:	2b02      	cmp	r3, #2
 8106eae:	dd35      	ble.n	8106f1c <_dtoa_r+0x99c>
 8106eb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8106eb4:	f1b9 0f00 	cmp.w	r9, #0
 8106eb8:	d10d      	bne.n	8106ed6 <_dtoa_r+0x956>
 8106eba:	4631      	mov	r1, r6
 8106ebc:	464b      	mov	r3, r9
 8106ebe:	2205      	movs	r2, #5
 8106ec0:	4620      	mov	r0, r4
 8106ec2:	f000 fd39 	bl	8107938 <__multadd>
 8106ec6:	4601      	mov	r1, r0
 8106ec8:	4606      	mov	r6, r0
 8106eca:	4658      	mov	r0, fp
 8106ecc:	f000 ff9a 	bl	8107e04 <__mcmp>
 8106ed0:	2800      	cmp	r0, #0
 8106ed2:	f73f adbd 	bgt.w	8106a50 <_dtoa_r+0x4d0>
 8106ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106ed8:	9d00      	ldr	r5, [sp, #0]
 8106eda:	ea6f 0a03 	mvn.w	sl, r3
 8106ede:	f04f 0800 	mov.w	r8, #0
 8106ee2:	4631      	mov	r1, r6
 8106ee4:	4620      	mov	r0, r4
 8106ee6:	f000 fd05 	bl	81078f4 <_Bfree>
 8106eea:	2f00      	cmp	r7, #0
 8106eec:	f43f aeb4 	beq.w	8106c58 <_dtoa_r+0x6d8>
 8106ef0:	f1b8 0f00 	cmp.w	r8, #0
 8106ef4:	d005      	beq.n	8106f02 <_dtoa_r+0x982>
 8106ef6:	45b8      	cmp	r8, r7
 8106ef8:	d003      	beq.n	8106f02 <_dtoa_r+0x982>
 8106efa:	4641      	mov	r1, r8
 8106efc:	4620      	mov	r0, r4
 8106efe:	f000 fcf9 	bl	81078f4 <_Bfree>
 8106f02:	4639      	mov	r1, r7
 8106f04:	4620      	mov	r0, r4
 8106f06:	f000 fcf5 	bl	81078f4 <_Bfree>
 8106f0a:	e6a5      	b.n	8106c58 <_dtoa_r+0x6d8>
 8106f0c:	2600      	movs	r6, #0
 8106f0e:	4637      	mov	r7, r6
 8106f10:	e7e1      	b.n	8106ed6 <_dtoa_r+0x956>
 8106f12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8106f14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8106f18:	4637      	mov	r7, r6
 8106f1a:	e599      	b.n	8106a50 <_dtoa_r+0x4d0>
 8106f1c:	9b08      	ldr	r3, [sp, #32]
 8106f1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	f000 80fd 	beq.w	8107122 <_dtoa_r+0xba2>
 8106f28:	2d00      	cmp	r5, #0
 8106f2a:	dd05      	ble.n	8106f38 <_dtoa_r+0x9b8>
 8106f2c:	4639      	mov	r1, r7
 8106f2e:	462a      	mov	r2, r5
 8106f30:	4620      	mov	r0, r4
 8106f32:	f000 fefb 	bl	8107d2c <__lshift>
 8106f36:	4607      	mov	r7, r0
 8106f38:	9b06      	ldr	r3, [sp, #24]
 8106f3a:	2b00      	cmp	r3, #0
 8106f3c:	d05c      	beq.n	8106ff8 <_dtoa_r+0xa78>
 8106f3e:	6879      	ldr	r1, [r7, #4]
 8106f40:	4620      	mov	r0, r4
 8106f42:	f000 fc97 	bl	8107874 <_Balloc>
 8106f46:	4605      	mov	r5, r0
 8106f48:	b928      	cbnz	r0, 8106f56 <_dtoa_r+0x9d6>
 8106f4a:	4b80      	ldr	r3, [pc, #512]	; (810714c <_dtoa_r+0xbcc>)
 8106f4c:	4602      	mov	r2, r0
 8106f4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8106f52:	f7ff bb2e 	b.w	81065b2 <_dtoa_r+0x32>
 8106f56:	693a      	ldr	r2, [r7, #16]
 8106f58:	3202      	adds	r2, #2
 8106f5a:	0092      	lsls	r2, r2, #2
 8106f5c:	f107 010c 	add.w	r1, r7, #12
 8106f60:	300c      	adds	r0, #12
 8106f62:	f7fd fd15 	bl	8104990 <memcpy>
 8106f66:	2201      	movs	r2, #1
 8106f68:	4629      	mov	r1, r5
 8106f6a:	4620      	mov	r0, r4
 8106f6c:	f000 fede 	bl	8107d2c <__lshift>
 8106f70:	9b00      	ldr	r3, [sp, #0]
 8106f72:	3301      	adds	r3, #1
 8106f74:	9301      	str	r3, [sp, #4]
 8106f76:	9b00      	ldr	r3, [sp, #0]
 8106f78:	444b      	add	r3, r9
 8106f7a:	9307      	str	r3, [sp, #28]
 8106f7c:	9b02      	ldr	r3, [sp, #8]
 8106f7e:	f003 0301 	and.w	r3, r3, #1
 8106f82:	46b8      	mov	r8, r7
 8106f84:	9306      	str	r3, [sp, #24]
 8106f86:	4607      	mov	r7, r0
 8106f88:	9b01      	ldr	r3, [sp, #4]
 8106f8a:	4631      	mov	r1, r6
 8106f8c:	3b01      	subs	r3, #1
 8106f8e:	4658      	mov	r0, fp
 8106f90:	9302      	str	r3, [sp, #8]
 8106f92:	f7ff fa67 	bl	8106464 <quorem>
 8106f96:	4603      	mov	r3, r0
 8106f98:	3330      	adds	r3, #48	; 0x30
 8106f9a:	9004      	str	r0, [sp, #16]
 8106f9c:	4641      	mov	r1, r8
 8106f9e:	4658      	mov	r0, fp
 8106fa0:	9308      	str	r3, [sp, #32]
 8106fa2:	f000 ff2f 	bl	8107e04 <__mcmp>
 8106fa6:	463a      	mov	r2, r7
 8106fa8:	4681      	mov	r9, r0
 8106faa:	4631      	mov	r1, r6
 8106fac:	4620      	mov	r0, r4
 8106fae:	f000 ff45 	bl	8107e3c <__mdiff>
 8106fb2:	68c2      	ldr	r2, [r0, #12]
 8106fb4:	9b08      	ldr	r3, [sp, #32]
 8106fb6:	4605      	mov	r5, r0
 8106fb8:	bb02      	cbnz	r2, 8106ffc <_dtoa_r+0xa7c>
 8106fba:	4601      	mov	r1, r0
 8106fbc:	4658      	mov	r0, fp
 8106fbe:	f000 ff21 	bl	8107e04 <__mcmp>
 8106fc2:	9b08      	ldr	r3, [sp, #32]
 8106fc4:	4602      	mov	r2, r0
 8106fc6:	4629      	mov	r1, r5
 8106fc8:	4620      	mov	r0, r4
 8106fca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8106fce:	f000 fc91 	bl	81078f4 <_Bfree>
 8106fd2:	9b05      	ldr	r3, [sp, #20]
 8106fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106fd6:	9d01      	ldr	r5, [sp, #4]
 8106fd8:	ea43 0102 	orr.w	r1, r3, r2
 8106fdc:	9b06      	ldr	r3, [sp, #24]
 8106fde:	430b      	orrs	r3, r1
 8106fe0:	9b08      	ldr	r3, [sp, #32]
 8106fe2:	d10d      	bne.n	8107000 <_dtoa_r+0xa80>
 8106fe4:	2b39      	cmp	r3, #57	; 0x39
 8106fe6:	d029      	beq.n	810703c <_dtoa_r+0xabc>
 8106fe8:	f1b9 0f00 	cmp.w	r9, #0
 8106fec:	dd01      	ble.n	8106ff2 <_dtoa_r+0xa72>
 8106fee:	9b04      	ldr	r3, [sp, #16]
 8106ff0:	3331      	adds	r3, #49	; 0x31
 8106ff2:	9a02      	ldr	r2, [sp, #8]
 8106ff4:	7013      	strb	r3, [r2, #0]
 8106ff6:	e774      	b.n	8106ee2 <_dtoa_r+0x962>
 8106ff8:	4638      	mov	r0, r7
 8106ffa:	e7b9      	b.n	8106f70 <_dtoa_r+0x9f0>
 8106ffc:	2201      	movs	r2, #1
 8106ffe:	e7e2      	b.n	8106fc6 <_dtoa_r+0xa46>
 8107000:	f1b9 0f00 	cmp.w	r9, #0
 8107004:	db06      	blt.n	8107014 <_dtoa_r+0xa94>
 8107006:	9905      	ldr	r1, [sp, #20]
 8107008:	ea41 0909 	orr.w	r9, r1, r9
 810700c:	9906      	ldr	r1, [sp, #24]
 810700e:	ea59 0101 	orrs.w	r1, r9, r1
 8107012:	d120      	bne.n	8107056 <_dtoa_r+0xad6>
 8107014:	2a00      	cmp	r2, #0
 8107016:	ddec      	ble.n	8106ff2 <_dtoa_r+0xa72>
 8107018:	4659      	mov	r1, fp
 810701a:	2201      	movs	r2, #1
 810701c:	4620      	mov	r0, r4
 810701e:	9301      	str	r3, [sp, #4]
 8107020:	f000 fe84 	bl	8107d2c <__lshift>
 8107024:	4631      	mov	r1, r6
 8107026:	4683      	mov	fp, r0
 8107028:	f000 feec 	bl	8107e04 <__mcmp>
 810702c:	2800      	cmp	r0, #0
 810702e:	9b01      	ldr	r3, [sp, #4]
 8107030:	dc02      	bgt.n	8107038 <_dtoa_r+0xab8>
 8107032:	d1de      	bne.n	8106ff2 <_dtoa_r+0xa72>
 8107034:	07da      	lsls	r2, r3, #31
 8107036:	d5dc      	bpl.n	8106ff2 <_dtoa_r+0xa72>
 8107038:	2b39      	cmp	r3, #57	; 0x39
 810703a:	d1d8      	bne.n	8106fee <_dtoa_r+0xa6e>
 810703c:	9a02      	ldr	r2, [sp, #8]
 810703e:	2339      	movs	r3, #57	; 0x39
 8107040:	7013      	strb	r3, [r2, #0]
 8107042:	462b      	mov	r3, r5
 8107044:	461d      	mov	r5, r3
 8107046:	3b01      	subs	r3, #1
 8107048:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810704c:	2a39      	cmp	r2, #57	; 0x39
 810704e:	d050      	beq.n	81070f2 <_dtoa_r+0xb72>
 8107050:	3201      	adds	r2, #1
 8107052:	701a      	strb	r2, [r3, #0]
 8107054:	e745      	b.n	8106ee2 <_dtoa_r+0x962>
 8107056:	2a00      	cmp	r2, #0
 8107058:	dd03      	ble.n	8107062 <_dtoa_r+0xae2>
 810705a:	2b39      	cmp	r3, #57	; 0x39
 810705c:	d0ee      	beq.n	810703c <_dtoa_r+0xabc>
 810705e:	3301      	adds	r3, #1
 8107060:	e7c7      	b.n	8106ff2 <_dtoa_r+0xa72>
 8107062:	9a01      	ldr	r2, [sp, #4]
 8107064:	9907      	ldr	r1, [sp, #28]
 8107066:	f802 3c01 	strb.w	r3, [r2, #-1]
 810706a:	428a      	cmp	r2, r1
 810706c:	d02a      	beq.n	81070c4 <_dtoa_r+0xb44>
 810706e:	4659      	mov	r1, fp
 8107070:	2300      	movs	r3, #0
 8107072:	220a      	movs	r2, #10
 8107074:	4620      	mov	r0, r4
 8107076:	f000 fc5f 	bl	8107938 <__multadd>
 810707a:	45b8      	cmp	r8, r7
 810707c:	4683      	mov	fp, r0
 810707e:	f04f 0300 	mov.w	r3, #0
 8107082:	f04f 020a 	mov.w	r2, #10
 8107086:	4641      	mov	r1, r8
 8107088:	4620      	mov	r0, r4
 810708a:	d107      	bne.n	810709c <_dtoa_r+0xb1c>
 810708c:	f000 fc54 	bl	8107938 <__multadd>
 8107090:	4680      	mov	r8, r0
 8107092:	4607      	mov	r7, r0
 8107094:	9b01      	ldr	r3, [sp, #4]
 8107096:	3301      	adds	r3, #1
 8107098:	9301      	str	r3, [sp, #4]
 810709a:	e775      	b.n	8106f88 <_dtoa_r+0xa08>
 810709c:	f000 fc4c 	bl	8107938 <__multadd>
 81070a0:	4639      	mov	r1, r7
 81070a2:	4680      	mov	r8, r0
 81070a4:	2300      	movs	r3, #0
 81070a6:	220a      	movs	r2, #10
 81070a8:	4620      	mov	r0, r4
 81070aa:	f000 fc45 	bl	8107938 <__multadd>
 81070ae:	4607      	mov	r7, r0
 81070b0:	e7f0      	b.n	8107094 <_dtoa_r+0xb14>
 81070b2:	f1b9 0f00 	cmp.w	r9, #0
 81070b6:	9a00      	ldr	r2, [sp, #0]
 81070b8:	bfcc      	ite	gt
 81070ba:	464d      	movgt	r5, r9
 81070bc:	2501      	movle	r5, #1
 81070be:	4415      	add	r5, r2
 81070c0:	f04f 0800 	mov.w	r8, #0
 81070c4:	4659      	mov	r1, fp
 81070c6:	2201      	movs	r2, #1
 81070c8:	4620      	mov	r0, r4
 81070ca:	9301      	str	r3, [sp, #4]
 81070cc:	f000 fe2e 	bl	8107d2c <__lshift>
 81070d0:	4631      	mov	r1, r6
 81070d2:	4683      	mov	fp, r0
 81070d4:	f000 fe96 	bl	8107e04 <__mcmp>
 81070d8:	2800      	cmp	r0, #0
 81070da:	dcb2      	bgt.n	8107042 <_dtoa_r+0xac2>
 81070dc:	d102      	bne.n	81070e4 <_dtoa_r+0xb64>
 81070de:	9b01      	ldr	r3, [sp, #4]
 81070e0:	07db      	lsls	r3, r3, #31
 81070e2:	d4ae      	bmi.n	8107042 <_dtoa_r+0xac2>
 81070e4:	462b      	mov	r3, r5
 81070e6:	461d      	mov	r5, r3
 81070e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81070ec:	2a30      	cmp	r2, #48	; 0x30
 81070ee:	d0fa      	beq.n	81070e6 <_dtoa_r+0xb66>
 81070f0:	e6f7      	b.n	8106ee2 <_dtoa_r+0x962>
 81070f2:	9a00      	ldr	r2, [sp, #0]
 81070f4:	429a      	cmp	r2, r3
 81070f6:	d1a5      	bne.n	8107044 <_dtoa_r+0xac4>
 81070f8:	f10a 0a01 	add.w	sl, sl, #1
 81070fc:	2331      	movs	r3, #49	; 0x31
 81070fe:	e779      	b.n	8106ff4 <_dtoa_r+0xa74>
 8107100:	4b13      	ldr	r3, [pc, #76]	; (8107150 <_dtoa_r+0xbd0>)
 8107102:	f7ff baaf 	b.w	8106664 <_dtoa_r+0xe4>
 8107106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107108:	2b00      	cmp	r3, #0
 810710a:	f47f aa86 	bne.w	810661a <_dtoa_r+0x9a>
 810710e:	4b11      	ldr	r3, [pc, #68]	; (8107154 <_dtoa_r+0xbd4>)
 8107110:	f7ff baa8 	b.w	8106664 <_dtoa_r+0xe4>
 8107114:	f1b9 0f00 	cmp.w	r9, #0
 8107118:	dc03      	bgt.n	8107122 <_dtoa_r+0xba2>
 810711a:	9b05      	ldr	r3, [sp, #20]
 810711c:	2b02      	cmp	r3, #2
 810711e:	f73f aec9 	bgt.w	8106eb4 <_dtoa_r+0x934>
 8107122:	9d00      	ldr	r5, [sp, #0]
 8107124:	4631      	mov	r1, r6
 8107126:	4658      	mov	r0, fp
 8107128:	f7ff f99c 	bl	8106464 <quorem>
 810712c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8107130:	f805 3b01 	strb.w	r3, [r5], #1
 8107134:	9a00      	ldr	r2, [sp, #0]
 8107136:	1aaa      	subs	r2, r5, r2
 8107138:	4591      	cmp	r9, r2
 810713a:	ddba      	ble.n	81070b2 <_dtoa_r+0xb32>
 810713c:	4659      	mov	r1, fp
 810713e:	2300      	movs	r3, #0
 8107140:	220a      	movs	r2, #10
 8107142:	4620      	mov	r0, r4
 8107144:	f000 fbf8 	bl	8107938 <__multadd>
 8107148:	4683      	mov	fp, r0
 810714a:	e7eb      	b.n	8107124 <_dtoa_r+0xba4>
 810714c:	0810942c 	.word	0x0810942c
 8107150:	0810922c 	.word	0x0810922c
 8107154:	081093a9 	.word	0x081093a9

08107158 <rshift>:
 8107158:	6903      	ldr	r3, [r0, #16]
 810715a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810715e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8107162:	ea4f 1261 	mov.w	r2, r1, asr #5
 8107166:	f100 0414 	add.w	r4, r0, #20
 810716a:	dd45      	ble.n	81071f8 <rshift+0xa0>
 810716c:	f011 011f 	ands.w	r1, r1, #31
 8107170:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8107174:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8107178:	d10c      	bne.n	8107194 <rshift+0x3c>
 810717a:	f100 0710 	add.w	r7, r0, #16
 810717e:	4629      	mov	r1, r5
 8107180:	42b1      	cmp	r1, r6
 8107182:	d334      	bcc.n	81071ee <rshift+0x96>
 8107184:	1a9b      	subs	r3, r3, r2
 8107186:	009b      	lsls	r3, r3, #2
 8107188:	1eea      	subs	r2, r5, #3
 810718a:	4296      	cmp	r6, r2
 810718c:	bf38      	it	cc
 810718e:	2300      	movcc	r3, #0
 8107190:	4423      	add	r3, r4
 8107192:	e015      	b.n	81071c0 <rshift+0x68>
 8107194:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8107198:	f1c1 0820 	rsb	r8, r1, #32
 810719c:	40cf      	lsrs	r7, r1
 810719e:	f105 0e04 	add.w	lr, r5, #4
 81071a2:	46a1      	mov	r9, r4
 81071a4:	4576      	cmp	r6, lr
 81071a6:	46f4      	mov	ip, lr
 81071a8:	d815      	bhi.n	81071d6 <rshift+0x7e>
 81071aa:	1a9b      	subs	r3, r3, r2
 81071ac:	009a      	lsls	r2, r3, #2
 81071ae:	3a04      	subs	r2, #4
 81071b0:	3501      	adds	r5, #1
 81071b2:	42ae      	cmp	r6, r5
 81071b4:	bf38      	it	cc
 81071b6:	2200      	movcc	r2, #0
 81071b8:	18a3      	adds	r3, r4, r2
 81071ba:	50a7      	str	r7, [r4, r2]
 81071bc:	b107      	cbz	r7, 81071c0 <rshift+0x68>
 81071be:	3304      	adds	r3, #4
 81071c0:	1b1a      	subs	r2, r3, r4
 81071c2:	42a3      	cmp	r3, r4
 81071c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81071c8:	bf08      	it	eq
 81071ca:	2300      	moveq	r3, #0
 81071cc:	6102      	str	r2, [r0, #16]
 81071ce:	bf08      	it	eq
 81071d0:	6143      	streq	r3, [r0, #20]
 81071d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81071d6:	f8dc c000 	ldr.w	ip, [ip]
 81071da:	fa0c fc08 	lsl.w	ip, ip, r8
 81071de:	ea4c 0707 	orr.w	r7, ip, r7
 81071e2:	f849 7b04 	str.w	r7, [r9], #4
 81071e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 81071ea:	40cf      	lsrs	r7, r1
 81071ec:	e7da      	b.n	81071a4 <rshift+0x4c>
 81071ee:	f851 cb04 	ldr.w	ip, [r1], #4
 81071f2:	f847 cf04 	str.w	ip, [r7, #4]!
 81071f6:	e7c3      	b.n	8107180 <rshift+0x28>
 81071f8:	4623      	mov	r3, r4
 81071fa:	e7e1      	b.n	81071c0 <rshift+0x68>

081071fc <__hexdig_fun>:
 81071fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8107200:	2b09      	cmp	r3, #9
 8107202:	d802      	bhi.n	810720a <__hexdig_fun+0xe>
 8107204:	3820      	subs	r0, #32
 8107206:	b2c0      	uxtb	r0, r0
 8107208:	4770      	bx	lr
 810720a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810720e:	2b05      	cmp	r3, #5
 8107210:	d801      	bhi.n	8107216 <__hexdig_fun+0x1a>
 8107212:	3847      	subs	r0, #71	; 0x47
 8107214:	e7f7      	b.n	8107206 <__hexdig_fun+0xa>
 8107216:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810721a:	2b05      	cmp	r3, #5
 810721c:	d801      	bhi.n	8107222 <__hexdig_fun+0x26>
 810721e:	3827      	subs	r0, #39	; 0x27
 8107220:	e7f1      	b.n	8107206 <__hexdig_fun+0xa>
 8107222:	2000      	movs	r0, #0
 8107224:	4770      	bx	lr
	...

08107228 <__gethex>:
 8107228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810722c:	ed2d 8b02 	vpush	{d8}
 8107230:	b089      	sub	sp, #36	; 0x24
 8107232:	ee08 0a10 	vmov	s16, r0
 8107236:	9304      	str	r3, [sp, #16]
 8107238:	4bbc      	ldr	r3, [pc, #752]	; (810752c <__gethex+0x304>)
 810723a:	681b      	ldr	r3, [r3, #0]
 810723c:	9301      	str	r3, [sp, #4]
 810723e:	4618      	mov	r0, r3
 8107240:	468b      	mov	fp, r1
 8107242:	4690      	mov	r8, r2
 8107244:	f7f9 f84c 	bl	81002e0 <strlen>
 8107248:	9b01      	ldr	r3, [sp, #4]
 810724a:	f8db 2000 	ldr.w	r2, [fp]
 810724e:	4403      	add	r3, r0
 8107250:	4682      	mov	sl, r0
 8107252:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8107256:	9305      	str	r3, [sp, #20]
 8107258:	1c93      	adds	r3, r2, #2
 810725a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810725e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8107262:	32fe      	adds	r2, #254	; 0xfe
 8107264:	18d1      	adds	r1, r2, r3
 8107266:	461f      	mov	r7, r3
 8107268:	f813 0b01 	ldrb.w	r0, [r3], #1
 810726c:	9100      	str	r1, [sp, #0]
 810726e:	2830      	cmp	r0, #48	; 0x30
 8107270:	d0f8      	beq.n	8107264 <__gethex+0x3c>
 8107272:	f7ff ffc3 	bl	81071fc <__hexdig_fun>
 8107276:	4604      	mov	r4, r0
 8107278:	2800      	cmp	r0, #0
 810727a:	d13a      	bne.n	81072f2 <__gethex+0xca>
 810727c:	9901      	ldr	r1, [sp, #4]
 810727e:	4652      	mov	r2, sl
 8107280:	4638      	mov	r0, r7
 8107282:	f001 f9e1 	bl	8108648 <strncmp>
 8107286:	4605      	mov	r5, r0
 8107288:	2800      	cmp	r0, #0
 810728a:	d168      	bne.n	810735e <__gethex+0x136>
 810728c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8107290:	eb07 060a 	add.w	r6, r7, sl
 8107294:	f7ff ffb2 	bl	81071fc <__hexdig_fun>
 8107298:	2800      	cmp	r0, #0
 810729a:	d062      	beq.n	8107362 <__gethex+0x13a>
 810729c:	4633      	mov	r3, r6
 810729e:	7818      	ldrb	r0, [r3, #0]
 81072a0:	2830      	cmp	r0, #48	; 0x30
 81072a2:	461f      	mov	r7, r3
 81072a4:	f103 0301 	add.w	r3, r3, #1
 81072a8:	d0f9      	beq.n	810729e <__gethex+0x76>
 81072aa:	f7ff ffa7 	bl	81071fc <__hexdig_fun>
 81072ae:	2301      	movs	r3, #1
 81072b0:	fab0 f480 	clz	r4, r0
 81072b4:	0964      	lsrs	r4, r4, #5
 81072b6:	4635      	mov	r5, r6
 81072b8:	9300      	str	r3, [sp, #0]
 81072ba:	463a      	mov	r2, r7
 81072bc:	4616      	mov	r6, r2
 81072be:	3201      	adds	r2, #1
 81072c0:	7830      	ldrb	r0, [r6, #0]
 81072c2:	f7ff ff9b 	bl	81071fc <__hexdig_fun>
 81072c6:	2800      	cmp	r0, #0
 81072c8:	d1f8      	bne.n	81072bc <__gethex+0x94>
 81072ca:	9901      	ldr	r1, [sp, #4]
 81072cc:	4652      	mov	r2, sl
 81072ce:	4630      	mov	r0, r6
 81072d0:	f001 f9ba 	bl	8108648 <strncmp>
 81072d4:	b980      	cbnz	r0, 81072f8 <__gethex+0xd0>
 81072d6:	b94d      	cbnz	r5, 81072ec <__gethex+0xc4>
 81072d8:	eb06 050a 	add.w	r5, r6, sl
 81072dc:	462a      	mov	r2, r5
 81072de:	4616      	mov	r6, r2
 81072e0:	3201      	adds	r2, #1
 81072e2:	7830      	ldrb	r0, [r6, #0]
 81072e4:	f7ff ff8a 	bl	81071fc <__hexdig_fun>
 81072e8:	2800      	cmp	r0, #0
 81072ea:	d1f8      	bne.n	81072de <__gethex+0xb6>
 81072ec:	1bad      	subs	r5, r5, r6
 81072ee:	00ad      	lsls	r5, r5, #2
 81072f0:	e004      	b.n	81072fc <__gethex+0xd4>
 81072f2:	2400      	movs	r4, #0
 81072f4:	4625      	mov	r5, r4
 81072f6:	e7e0      	b.n	81072ba <__gethex+0x92>
 81072f8:	2d00      	cmp	r5, #0
 81072fa:	d1f7      	bne.n	81072ec <__gethex+0xc4>
 81072fc:	7833      	ldrb	r3, [r6, #0]
 81072fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8107302:	2b50      	cmp	r3, #80	; 0x50
 8107304:	d13b      	bne.n	810737e <__gethex+0x156>
 8107306:	7873      	ldrb	r3, [r6, #1]
 8107308:	2b2b      	cmp	r3, #43	; 0x2b
 810730a:	d02c      	beq.n	8107366 <__gethex+0x13e>
 810730c:	2b2d      	cmp	r3, #45	; 0x2d
 810730e:	d02e      	beq.n	810736e <__gethex+0x146>
 8107310:	1c71      	adds	r1, r6, #1
 8107312:	f04f 0900 	mov.w	r9, #0
 8107316:	7808      	ldrb	r0, [r1, #0]
 8107318:	f7ff ff70 	bl	81071fc <__hexdig_fun>
 810731c:	1e43      	subs	r3, r0, #1
 810731e:	b2db      	uxtb	r3, r3
 8107320:	2b18      	cmp	r3, #24
 8107322:	d82c      	bhi.n	810737e <__gethex+0x156>
 8107324:	f1a0 0210 	sub.w	r2, r0, #16
 8107328:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810732c:	f7ff ff66 	bl	81071fc <__hexdig_fun>
 8107330:	1e43      	subs	r3, r0, #1
 8107332:	b2db      	uxtb	r3, r3
 8107334:	2b18      	cmp	r3, #24
 8107336:	d91d      	bls.n	8107374 <__gethex+0x14c>
 8107338:	f1b9 0f00 	cmp.w	r9, #0
 810733c:	d000      	beq.n	8107340 <__gethex+0x118>
 810733e:	4252      	negs	r2, r2
 8107340:	4415      	add	r5, r2
 8107342:	f8cb 1000 	str.w	r1, [fp]
 8107346:	b1e4      	cbz	r4, 8107382 <__gethex+0x15a>
 8107348:	9b00      	ldr	r3, [sp, #0]
 810734a:	2b00      	cmp	r3, #0
 810734c:	bf14      	ite	ne
 810734e:	2700      	movne	r7, #0
 8107350:	2706      	moveq	r7, #6
 8107352:	4638      	mov	r0, r7
 8107354:	b009      	add	sp, #36	; 0x24
 8107356:	ecbd 8b02 	vpop	{d8}
 810735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810735e:	463e      	mov	r6, r7
 8107360:	4625      	mov	r5, r4
 8107362:	2401      	movs	r4, #1
 8107364:	e7ca      	b.n	81072fc <__gethex+0xd4>
 8107366:	f04f 0900 	mov.w	r9, #0
 810736a:	1cb1      	adds	r1, r6, #2
 810736c:	e7d3      	b.n	8107316 <__gethex+0xee>
 810736e:	f04f 0901 	mov.w	r9, #1
 8107372:	e7fa      	b.n	810736a <__gethex+0x142>
 8107374:	230a      	movs	r3, #10
 8107376:	fb03 0202 	mla	r2, r3, r2, r0
 810737a:	3a10      	subs	r2, #16
 810737c:	e7d4      	b.n	8107328 <__gethex+0x100>
 810737e:	4631      	mov	r1, r6
 8107380:	e7df      	b.n	8107342 <__gethex+0x11a>
 8107382:	1bf3      	subs	r3, r6, r7
 8107384:	3b01      	subs	r3, #1
 8107386:	4621      	mov	r1, r4
 8107388:	2b07      	cmp	r3, #7
 810738a:	dc0b      	bgt.n	81073a4 <__gethex+0x17c>
 810738c:	ee18 0a10 	vmov	r0, s16
 8107390:	f000 fa70 	bl	8107874 <_Balloc>
 8107394:	4604      	mov	r4, r0
 8107396:	b940      	cbnz	r0, 81073aa <__gethex+0x182>
 8107398:	4b65      	ldr	r3, [pc, #404]	; (8107530 <__gethex+0x308>)
 810739a:	4602      	mov	r2, r0
 810739c:	21de      	movs	r1, #222	; 0xde
 810739e:	4865      	ldr	r0, [pc, #404]	; (8107534 <__gethex+0x30c>)
 81073a0:	f001 f972 	bl	8108688 <__assert_func>
 81073a4:	3101      	adds	r1, #1
 81073a6:	105b      	asrs	r3, r3, #1
 81073a8:	e7ee      	b.n	8107388 <__gethex+0x160>
 81073aa:	f100 0914 	add.w	r9, r0, #20
 81073ae:	f04f 0b00 	mov.w	fp, #0
 81073b2:	f1ca 0301 	rsb	r3, sl, #1
 81073b6:	f8cd 9008 	str.w	r9, [sp, #8]
 81073ba:	f8cd b000 	str.w	fp, [sp]
 81073be:	9306      	str	r3, [sp, #24]
 81073c0:	42b7      	cmp	r7, r6
 81073c2:	d340      	bcc.n	8107446 <__gethex+0x21e>
 81073c4:	9802      	ldr	r0, [sp, #8]
 81073c6:	9b00      	ldr	r3, [sp, #0]
 81073c8:	f840 3b04 	str.w	r3, [r0], #4
 81073cc:	eba0 0009 	sub.w	r0, r0, r9
 81073d0:	1080      	asrs	r0, r0, #2
 81073d2:	0146      	lsls	r6, r0, #5
 81073d4:	6120      	str	r0, [r4, #16]
 81073d6:	4618      	mov	r0, r3
 81073d8:	f000 fb42 	bl	8107a60 <__hi0bits>
 81073dc:	1a30      	subs	r0, r6, r0
 81073de:	f8d8 6000 	ldr.w	r6, [r8]
 81073e2:	42b0      	cmp	r0, r6
 81073e4:	dd63      	ble.n	81074ae <__gethex+0x286>
 81073e6:	1b87      	subs	r7, r0, r6
 81073e8:	4639      	mov	r1, r7
 81073ea:	4620      	mov	r0, r4
 81073ec:	f000 fedc 	bl	81081a8 <__any_on>
 81073f0:	4682      	mov	sl, r0
 81073f2:	b1a8      	cbz	r0, 8107420 <__gethex+0x1f8>
 81073f4:	1e7b      	subs	r3, r7, #1
 81073f6:	1159      	asrs	r1, r3, #5
 81073f8:	f003 021f 	and.w	r2, r3, #31
 81073fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8107400:	f04f 0a01 	mov.w	sl, #1
 8107404:	fa0a f202 	lsl.w	r2, sl, r2
 8107408:	420a      	tst	r2, r1
 810740a:	d009      	beq.n	8107420 <__gethex+0x1f8>
 810740c:	4553      	cmp	r3, sl
 810740e:	dd05      	ble.n	810741c <__gethex+0x1f4>
 8107410:	1eb9      	subs	r1, r7, #2
 8107412:	4620      	mov	r0, r4
 8107414:	f000 fec8 	bl	81081a8 <__any_on>
 8107418:	2800      	cmp	r0, #0
 810741a:	d145      	bne.n	81074a8 <__gethex+0x280>
 810741c:	f04f 0a02 	mov.w	sl, #2
 8107420:	4639      	mov	r1, r7
 8107422:	4620      	mov	r0, r4
 8107424:	f7ff fe98 	bl	8107158 <rshift>
 8107428:	443d      	add	r5, r7
 810742a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810742e:	42ab      	cmp	r3, r5
 8107430:	da4c      	bge.n	81074cc <__gethex+0x2a4>
 8107432:	ee18 0a10 	vmov	r0, s16
 8107436:	4621      	mov	r1, r4
 8107438:	f000 fa5c 	bl	81078f4 <_Bfree>
 810743c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810743e:	2300      	movs	r3, #0
 8107440:	6013      	str	r3, [r2, #0]
 8107442:	27a3      	movs	r7, #163	; 0xa3
 8107444:	e785      	b.n	8107352 <__gethex+0x12a>
 8107446:	1e73      	subs	r3, r6, #1
 8107448:	9a05      	ldr	r2, [sp, #20]
 810744a:	9303      	str	r3, [sp, #12]
 810744c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8107450:	4293      	cmp	r3, r2
 8107452:	d019      	beq.n	8107488 <__gethex+0x260>
 8107454:	f1bb 0f20 	cmp.w	fp, #32
 8107458:	d107      	bne.n	810746a <__gethex+0x242>
 810745a:	9b02      	ldr	r3, [sp, #8]
 810745c:	9a00      	ldr	r2, [sp, #0]
 810745e:	f843 2b04 	str.w	r2, [r3], #4
 8107462:	9302      	str	r3, [sp, #8]
 8107464:	2300      	movs	r3, #0
 8107466:	9300      	str	r3, [sp, #0]
 8107468:	469b      	mov	fp, r3
 810746a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810746e:	f7ff fec5 	bl	81071fc <__hexdig_fun>
 8107472:	9b00      	ldr	r3, [sp, #0]
 8107474:	f000 000f 	and.w	r0, r0, #15
 8107478:	fa00 f00b 	lsl.w	r0, r0, fp
 810747c:	4303      	orrs	r3, r0
 810747e:	9300      	str	r3, [sp, #0]
 8107480:	f10b 0b04 	add.w	fp, fp, #4
 8107484:	9b03      	ldr	r3, [sp, #12]
 8107486:	e00d      	b.n	81074a4 <__gethex+0x27c>
 8107488:	9b03      	ldr	r3, [sp, #12]
 810748a:	9a06      	ldr	r2, [sp, #24]
 810748c:	4413      	add	r3, r2
 810748e:	42bb      	cmp	r3, r7
 8107490:	d3e0      	bcc.n	8107454 <__gethex+0x22c>
 8107492:	4618      	mov	r0, r3
 8107494:	9901      	ldr	r1, [sp, #4]
 8107496:	9307      	str	r3, [sp, #28]
 8107498:	4652      	mov	r2, sl
 810749a:	f001 f8d5 	bl	8108648 <strncmp>
 810749e:	9b07      	ldr	r3, [sp, #28]
 81074a0:	2800      	cmp	r0, #0
 81074a2:	d1d7      	bne.n	8107454 <__gethex+0x22c>
 81074a4:	461e      	mov	r6, r3
 81074a6:	e78b      	b.n	81073c0 <__gethex+0x198>
 81074a8:	f04f 0a03 	mov.w	sl, #3
 81074ac:	e7b8      	b.n	8107420 <__gethex+0x1f8>
 81074ae:	da0a      	bge.n	81074c6 <__gethex+0x29e>
 81074b0:	1a37      	subs	r7, r6, r0
 81074b2:	4621      	mov	r1, r4
 81074b4:	ee18 0a10 	vmov	r0, s16
 81074b8:	463a      	mov	r2, r7
 81074ba:	f000 fc37 	bl	8107d2c <__lshift>
 81074be:	1bed      	subs	r5, r5, r7
 81074c0:	4604      	mov	r4, r0
 81074c2:	f100 0914 	add.w	r9, r0, #20
 81074c6:	f04f 0a00 	mov.w	sl, #0
 81074ca:	e7ae      	b.n	810742a <__gethex+0x202>
 81074cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 81074d0:	42a8      	cmp	r0, r5
 81074d2:	dd72      	ble.n	81075ba <__gethex+0x392>
 81074d4:	1b45      	subs	r5, r0, r5
 81074d6:	42ae      	cmp	r6, r5
 81074d8:	dc36      	bgt.n	8107548 <__gethex+0x320>
 81074da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81074de:	2b02      	cmp	r3, #2
 81074e0:	d02a      	beq.n	8107538 <__gethex+0x310>
 81074e2:	2b03      	cmp	r3, #3
 81074e4:	d02c      	beq.n	8107540 <__gethex+0x318>
 81074e6:	2b01      	cmp	r3, #1
 81074e8:	d115      	bne.n	8107516 <__gethex+0x2ee>
 81074ea:	42ae      	cmp	r6, r5
 81074ec:	d113      	bne.n	8107516 <__gethex+0x2ee>
 81074ee:	2e01      	cmp	r6, #1
 81074f0:	d10b      	bne.n	810750a <__gethex+0x2e2>
 81074f2:	9a04      	ldr	r2, [sp, #16]
 81074f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81074f8:	6013      	str	r3, [r2, #0]
 81074fa:	2301      	movs	r3, #1
 81074fc:	6123      	str	r3, [r4, #16]
 81074fe:	f8c9 3000 	str.w	r3, [r9]
 8107502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8107504:	2762      	movs	r7, #98	; 0x62
 8107506:	601c      	str	r4, [r3, #0]
 8107508:	e723      	b.n	8107352 <__gethex+0x12a>
 810750a:	1e71      	subs	r1, r6, #1
 810750c:	4620      	mov	r0, r4
 810750e:	f000 fe4b 	bl	81081a8 <__any_on>
 8107512:	2800      	cmp	r0, #0
 8107514:	d1ed      	bne.n	81074f2 <__gethex+0x2ca>
 8107516:	ee18 0a10 	vmov	r0, s16
 810751a:	4621      	mov	r1, r4
 810751c:	f000 f9ea 	bl	81078f4 <_Bfree>
 8107520:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8107522:	2300      	movs	r3, #0
 8107524:	6013      	str	r3, [r2, #0]
 8107526:	2750      	movs	r7, #80	; 0x50
 8107528:	e713      	b.n	8107352 <__gethex+0x12a>
 810752a:	bf00      	nop
 810752c:	081094a8 	.word	0x081094a8
 8107530:	0810942c 	.word	0x0810942c
 8107534:	0810943d 	.word	0x0810943d
 8107538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810753a:	2b00      	cmp	r3, #0
 810753c:	d1eb      	bne.n	8107516 <__gethex+0x2ee>
 810753e:	e7d8      	b.n	81074f2 <__gethex+0x2ca>
 8107540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8107542:	2b00      	cmp	r3, #0
 8107544:	d1d5      	bne.n	81074f2 <__gethex+0x2ca>
 8107546:	e7e6      	b.n	8107516 <__gethex+0x2ee>
 8107548:	1e6f      	subs	r7, r5, #1
 810754a:	f1ba 0f00 	cmp.w	sl, #0
 810754e:	d131      	bne.n	81075b4 <__gethex+0x38c>
 8107550:	b127      	cbz	r7, 810755c <__gethex+0x334>
 8107552:	4639      	mov	r1, r7
 8107554:	4620      	mov	r0, r4
 8107556:	f000 fe27 	bl	81081a8 <__any_on>
 810755a:	4682      	mov	sl, r0
 810755c:	117b      	asrs	r3, r7, #5
 810755e:	2101      	movs	r1, #1
 8107560:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8107564:	f007 071f 	and.w	r7, r7, #31
 8107568:	fa01 f707 	lsl.w	r7, r1, r7
 810756c:	421f      	tst	r7, r3
 810756e:	4629      	mov	r1, r5
 8107570:	4620      	mov	r0, r4
 8107572:	bf18      	it	ne
 8107574:	f04a 0a02 	orrne.w	sl, sl, #2
 8107578:	1b76      	subs	r6, r6, r5
 810757a:	f7ff fded 	bl	8107158 <rshift>
 810757e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8107582:	2702      	movs	r7, #2
 8107584:	f1ba 0f00 	cmp.w	sl, #0
 8107588:	d048      	beq.n	810761c <__gethex+0x3f4>
 810758a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810758e:	2b02      	cmp	r3, #2
 8107590:	d015      	beq.n	81075be <__gethex+0x396>
 8107592:	2b03      	cmp	r3, #3
 8107594:	d017      	beq.n	81075c6 <__gethex+0x39e>
 8107596:	2b01      	cmp	r3, #1
 8107598:	d109      	bne.n	81075ae <__gethex+0x386>
 810759a:	f01a 0f02 	tst.w	sl, #2
 810759e:	d006      	beq.n	81075ae <__gethex+0x386>
 81075a0:	f8d9 0000 	ldr.w	r0, [r9]
 81075a4:	ea4a 0a00 	orr.w	sl, sl, r0
 81075a8:	f01a 0f01 	tst.w	sl, #1
 81075ac:	d10e      	bne.n	81075cc <__gethex+0x3a4>
 81075ae:	f047 0710 	orr.w	r7, r7, #16
 81075b2:	e033      	b.n	810761c <__gethex+0x3f4>
 81075b4:	f04f 0a01 	mov.w	sl, #1
 81075b8:	e7d0      	b.n	810755c <__gethex+0x334>
 81075ba:	2701      	movs	r7, #1
 81075bc:	e7e2      	b.n	8107584 <__gethex+0x35c>
 81075be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81075c0:	f1c3 0301 	rsb	r3, r3, #1
 81075c4:	9315      	str	r3, [sp, #84]	; 0x54
 81075c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81075c8:	2b00      	cmp	r3, #0
 81075ca:	d0f0      	beq.n	81075ae <__gethex+0x386>
 81075cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 81075d0:	f104 0314 	add.w	r3, r4, #20
 81075d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 81075d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 81075dc:	f04f 0c00 	mov.w	ip, #0
 81075e0:	4618      	mov	r0, r3
 81075e2:	f853 2b04 	ldr.w	r2, [r3], #4
 81075e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 81075ea:	d01c      	beq.n	8107626 <__gethex+0x3fe>
 81075ec:	3201      	adds	r2, #1
 81075ee:	6002      	str	r2, [r0, #0]
 81075f0:	2f02      	cmp	r7, #2
 81075f2:	f104 0314 	add.w	r3, r4, #20
 81075f6:	d13f      	bne.n	8107678 <__gethex+0x450>
 81075f8:	f8d8 2000 	ldr.w	r2, [r8]
 81075fc:	3a01      	subs	r2, #1
 81075fe:	42b2      	cmp	r2, r6
 8107600:	d10a      	bne.n	8107618 <__gethex+0x3f0>
 8107602:	1171      	asrs	r1, r6, #5
 8107604:	2201      	movs	r2, #1
 8107606:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810760a:	f006 061f 	and.w	r6, r6, #31
 810760e:	fa02 f606 	lsl.w	r6, r2, r6
 8107612:	421e      	tst	r6, r3
 8107614:	bf18      	it	ne
 8107616:	4617      	movne	r7, r2
 8107618:	f047 0720 	orr.w	r7, r7, #32
 810761c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810761e:	601c      	str	r4, [r3, #0]
 8107620:	9b04      	ldr	r3, [sp, #16]
 8107622:	601d      	str	r5, [r3, #0]
 8107624:	e695      	b.n	8107352 <__gethex+0x12a>
 8107626:	4299      	cmp	r1, r3
 8107628:	f843 cc04 	str.w	ip, [r3, #-4]
 810762c:	d8d8      	bhi.n	81075e0 <__gethex+0x3b8>
 810762e:	68a3      	ldr	r3, [r4, #8]
 8107630:	459b      	cmp	fp, r3
 8107632:	db19      	blt.n	8107668 <__gethex+0x440>
 8107634:	6861      	ldr	r1, [r4, #4]
 8107636:	ee18 0a10 	vmov	r0, s16
 810763a:	3101      	adds	r1, #1
 810763c:	f000 f91a 	bl	8107874 <_Balloc>
 8107640:	4681      	mov	r9, r0
 8107642:	b918      	cbnz	r0, 810764c <__gethex+0x424>
 8107644:	4b1a      	ldr	r3, [pc, #104]	; (81076b0 <__gethex+0x488>)
 8107646:	4602      	mov	r2, r0
 8107648:	2184      	movs	r1, #132	; 0x84
 810764a:	e6a8      	b.n	810739e <__gethex+0x176>
 810764c:	6922      	ldr	r2, [r4, #16]
 810764e:	3202      	adds	r2, #2
 8107650:	f104 010c 	add.w	r1, r4, #12
 8107654:	0092      	lsls	r2, r2, #2
 8107656:	300c      	adds	r0, #12
 8107658:	f7fd f99a 	bl	8104990 <memcpy>
 810765c:	4621      	mov	r1, r4
 810765e:	ee18 0a10 	vmov	r0, s16
 8107662:	f000 f947 	bl	81078f4 <_Bfree>
 8107666:	464c      	mov	r4, r9
 8107668:	6923      	ldr	r3, [r4, #16]
 810766a:	1c5a      	adds	r2, r3, #1
 810766c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8107670:	6122      	str	r2, [r4, #16]
 8107672:	2201      	movs	r2, #1
 8107674:	615a      	str	r2, [r3, #20]
 8107676:	e7bb      	b.n	81075f0 <__gethex+0x3c8>
 8107678:	6922      	ldr	r2, [r4, #16]
 810767a:	455a      	cmp	r2, fp
 810767c:	dd0b      	ble.n	8107696 <__gethex+0x46e>
 810767e:	2101      	movs	r1, #1
 8107680:	4620      	mov	r0, r4
 8107682:	f7ff fd69 	bl	8107158 <rshift>
 8107686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810768a:	3501      	adds	r5, #1
 810768c:	42ab      	cmp	r3, r5
 810768e:	f6ff aed0 	blt.w	8107432 <__gethex+0x20a>
 8107692:	2701      	movs	r7, #1
 8107694:	e7c0      	b.n	8107618 <__gethex+0x3f0>
 8107696:	f016 061f 	ands.w	r6, r6, #31
 810769a:	d0fa      	beq.n	8107692 <__gethex+0x46a>
 810769c:	449a      	add	sl, r3
 810769e:	f1c6 0620 	rsb	r6, r6, #32
 81076a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 81076a6:	f000 f9db 	bl	8107a60 <__hi0bits>
 81076aa:	42b0      	cmp	r0, r6
 81076ac:	dbe7      	blt.n	810767e <__gethex+0x456>
 81076ae:	e7f0      	b.n	8107692 <__gethex+0x46a>
 81076b0:	0810942c 	.word	0x0810942c

081076b4 <L_shift>:
 81076b4:	f1c2 0208 	rsb	r2, r2, #8
 81076b8:	0092      	lsls	r2, r2, #2
 81076ba:	b570      	push	{r4, r5, r6, lr}
 81076bc:	f1c2 0620 	rsb	r6, r2, #32
 81076c0:	6843      	ldr	r3, [r0, #4]
 81076c2:	6804      	ldr	r4, [r0, #0]
 81076c4:	fa03 f506 	lsl.w	r5, r3, r6
 81076c8:	432c      	orrs	r4, r5
 81076ca:	40d3      	lsrs	r3, r2
 81076cc:	6004      	str	r4, [r0, #0]
 81076ce:	f840 3f04 	str.w	r3, [r0, #4]!
 81076d2:	4288      	cmp	r0, r1
 81076d4:	d3f4      	bcc.n	81076c0 <L_shift+0xc>
 81076d6:	bd70      	pop	{r4, r5, r6, pc}

081076d8 <__match>:
 81076d8:	b530      	push	{r4, r5, lr}
 81076da:	6803      	ldr	r3, [r0, #0]
 81076dc:	3301      	adds	r3, #1
 81076de:	f811 4b01 	ldrb.w	r4, [r1], #1
 81076e2:	b914      	cbnz	r4, 81076ea <__match+0x12>
 81076e4:	6003      	str	r3, [r0, #0]
 81076e6:	2001      	movs	r0, #1
 81076e8:	bd30      	pop	{r4, r5, pc}
 81076ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 81076ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 81076f2:	2d19      	cmp	r5, #25
 81076f4:	bf98      	it	ls
 81076f6:	3220      	addls	r2, #32
 81076f8:	42a2      	cmp	r2, r4
 81076fa:	d0f0      	beq.n	81076de <__match+0x6>
 81076fc:	2000      	movs	r0, #0
 81076fe:	e7f3      	b.n	81076e8 <__match+0x10>

08107700 <__hexnan>:
 8107700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107704:	680b      	ldr	r3, [r1, #0]
 8107706:	6801      	ldr	r1, [r0, #0]
 8107708:	115e      	asrs	r6, r3, #5
 810770a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810770e:	f013 031f 	ands.w	r3, r3, #31
 8107712:	b087      	sub	sp, #28
 8107714:	bf18      	it	ne
 8107716:	3604      	addne	r6, #4
 8107718:	2500      	movs	r5, #0
 810771a:	1f37      	subs	r7, r6, #4
 810771c:	4682      	mov	sl, r0
 810771e:	4690      	mov	r8, r2
 8107720:	9301      	str	r3, [sp, #4]
 8107722:	f846 5c04 	str.w	r5, [r6, #-4]
 8107726:	46b9      	mov	r9, r7
 8107728:	463c      	mov	r4, r7
 810772a:	9502      	str	r5, [sp, #8]
 810772c:	46ab      	mov	fp, r5
 810772e:	784a      	ldrb	r2, [r1, #1]
 8107730:	1c4b      	adds	r3, r1, #1
 8107732:	9303      	str	r3, [sp, #12]
 8107734:	b342      	cbz	r2, 8107788 <__hexnan+0x88>
 8107736:	4610      	mov	r0, r2
 8107738:	9105      	str	r1, [sp, #20]
 810773a:	9204      	str	r2, [sp, #16]
 810773c:	f7ff fd5e 	bl	81071fc <__hexdig_fun>
 8107740:	2800      	cmp	r0, #0
 8107742:	d14f      	bne.n	81077e4 <__hexnan+0xe4>
 8107744:	9a04      	ldr	r2, [sp, #16]
 8107746:	9905      	ldr	r1, [sp, #20]
 8107748:	2a20      	cmp	r2, #32
 810774a:	d818      	bhi.n	810777e <__hexnan+0x7e>
 810774c:	9b02      	ldr	r3, [sp, #8]
 810774e:	459b      	cmp	fp, r3
 8107750:	dd13      	ble.n	810777a <__hexnan+0x7a>
 8107752:	454c      	cmp	r4, r9
 8107754:	d206      	bcs.n	8107764 <__hexnan+0x64>
 8107756:	2d07      	cmp	r5, #7
 8107758:	dc04      	bgt.n	8107764 <__hexnan+0x64>
 810775a:	462a      	mov	r2, r5
 810775c:	4649      	mov	r1, r9
 810775e:	4620      	mov	r0, r4
 8107760:	f7ff ffa8 	bl	81076b4 <L_shift>
 8107764:	4544      	cmp	r4, r8
 8107766:	d950      	bls.n	810780a <__hexnan+0x10a>
 8107768:	2300      	movs	r3, #0
 810776a:	f1a4 0904 	sub.w	r9, r4, #4
 810776e:	f844 3c04 	str.w	r3, [r4, #-4]
 8107772:	f8cd b008 	str.w	fp, [sp, #8]
 8107776:	464c      	mov	r4, r9
 8107778:	461d      	mov	r5, r3
 810777a:	9903      	ldr	r1, [sp, #12]
 810777c:	e7d7      	b.n	810772e <__hexnan+0x2e>
 810777e:	2a29      	cmp	r2, #41	; 0x29
 8107780:	d156      	bne.n	8107830 <__hexnan+0x130>
 8107782:	3102      	adds	r1, #2
 8107784:	f8ca 1000 	str.w	r1, [sl]
 8107788:	f1bb 0f00 	cmp.w	fp, #0
 810778c:	d050      	beq.n	8107830 <__hexnan+0x130>
 810778e:	454c      	cmp	r4, r9
 8107790:	d206      	bcs.n	81077a0 <__hexnan+0xa0>
 8107792:	2d07      	cmp	r5, #7
 8107794:	dc04      	bgt.n	81077a0 <__hexnan+0xa0>
 8107796:	462a      	mov	r2, r5
 8107798:	4649      	mov	r1, r9
 810779a:	4620      	mov	r0, r4
 810779c:	f7ff ff8a 	bl	81076b4 <L_shift>
 81077a0:	4544      	cmp	r4, r8
 81077a2:	d934      	bls.n	810780e <__hexnan+0x10e>
 81077a4:	f1a8 0204 	sub.w	r2, r8, #4
 81077a8:	4623      	mov	r3, r4
 81077aa:	f853 1b04 	ldr.w	r1, [r3], #4
 81077ae:	f842 1f04 	str.w	r1, [r2, #4]!
 81077b2:	429f      	cmp	r7, r3
 81077b4:	d2f9      	bcs.n	81077aa <__hexnan+0xaa>
 81077b6:	1b3b      	subs	r3, r7, r4
 81077b8:	f023 0303 	bic.w	r3, r3, #3
 81077bc:	3304      	adds	r3, #4
 81077be:	3401      	adds	r4, #1
 81077c0:	3e03      	subs	r6, #3
 81077c2:	42b4      	cmp	r4, r6
 81077c4:	bf88      	it	hi
 81077c6:	2304      	movhi	r3, #4
 81077c8:	4443      	add	r3, r8
 81077ca:	2200      	movs	r2, #0
 81077cc:	f843 2b04 	str.w	r2, [r3], #4
 81077d0:	429f      	cmp	r7, r3
 81077d2:	d2fb      	bcs.n	81077cc <__hexnan+0xcc>
 81077d4:	683b      	ldr	r3, [r7, #0]
 81077d6:	b91b      	cbnz	r3, 81077e0 <__hexnan+0xe0>
 81077d8:	4547      	cmp	r7, r8
 81077da:	d127      	bne.n	810782c <__hexnan+0x12c>
 81077dc:	2301      	movs	r3, #1
 81077de:	603b      	str	r3, [r7, #0]
 81077e0:	2005      	movs	r0, #5
 81077e2:	e026      	b.n	8107832 <__hexnan+0x132>
 81077e4:	3501      	adds	r5, #1
 81077e6:	2d08      	cmp	r5, #8
 81077e8:	f10b 0b01 	add.w	fp, fp, #1
 81077ec:	dd06      	ble.n	81077fc <__hexnan+0xfc>
 81077ee:	4544      	cmp	r4, r8
 81077f0:	d9c3      	bls.n	810777a <__hexnan+0x7a>
 81077f2:	2300      	movs	r3, #0
 81077f4:	f844 3c04 	str.w	r3, [r4, #-4]
 81077f8:	2501      	movs	r5, #1
 81077fa:	3c04      	subs	r4, #4
 81077fc:	6822      	ldr	r2, [r4, #0]
 81077fe:	f000 000f 	and.w	r0, r0, #15
 8107802:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8107806:	6022      	str	r2, [r4, #0]
 8107808:	e7b7      	b.n	810777a <__hexnan+0x7a>
 810780a:	2508      	movs	r5, #8
 810780c:	e7b5      	b.n	810777a <__hexnan+0x7a>
 810780e:	9b01      	ldr	r3, [sp, #4]
 8107810:	2b00      	cmp	r3, #0
 8107812:	d0df      	beq.n	81077d4 <__hexnan+0xd4>
 8107814:	f04f 32ff 	mov.w	r2, #4294967295
 8107818:	f1c3 0320 	rsb	r3, r3, #32
 810781c:	fa22 f303 	lsr.w	r3, r2, r3
 8107820:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8107824:	401a      	ands	r2, r3
 8107826:	f846 2c04 	str.w	r2, [r6, #-4]
 810782a:	e7d3      	b.n	81077d4 <__hexnan+0xd4>
 810782c:	3f04      	subs	r7, #4
 810782e:	e7d1      	b.n	81077d4 <__hexnan+0xd4>
 8107830:	2004      	movs	r0, #4
 8107832:	b007      	add	sp, #28
 8107834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08107838 <_localeconv_r>:
 8107838:	4800      	ldr	r0, [pc, #0]	; (810783c <_localeconv_r+0x4>)
 810783a:	4770      	bx	lr
 810783c:	10000168 	.word	0x10000168

08107840 <malloc>:
 8107840:	4b02      	ldr	r3, [pc, #8]	; (810784c <malloc+0xc>)
 8107842:	4601      	mov	r1, r0
 8107844:	6818      	ldr	r0, [r3, #0]
 8107846:	f000 bd2f 	b.w	81082a8 <_malloc_r>
 810784a:	bf00      	nop
 810784c:	10000010 	.word	0x10000010

08107850 <__ascii_mbtowc>:
 8107850:	b082      	sub	sp, #8
 8107852:	b901      	cbnz	r1, 8107856 <__ascii_mbtowc+0x6>
 8107854:	a901      	add	r1, sp, #4
 8107856:	b142      	cbz	r2, 810786a <__ascii_mbtowc+0x1a>
 8107858:	b14b      	cbz	r3, 810786e <__ascii_mbtowc+0x1e>
 810785a:	7813      	ldrb	r3, [r2, #0]
 810785c:	600b      	str	r3, [r1, #0]
 810785e:	7812      	ldrb	r2, [r2, #0]
 8107860:	1e10      	subs	r0, r2, #0
 8107862:	bf18      	it	ne
 8107864:	2001      	movne	r0, #1
 8107866:	b002      	add	sp, #8
 8107868:	4770      	bx	lr
 810786a:	4610      	mov	r0, r2
 810786c:	e7fb      	b.n	8107866 <__ascii_mbtowc+0x16>
 810786e:	f06f 0001 	mvn.w	r0, #1
 8107872:	e7f8      	b.n	8107866 <__ascii_mbtowc+0x16>

08107874 <_Balloc>:
 8107874:	b570      	push	{r4, r5, r6, lr}
 8107876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8107878:	4604      	mov	r4, r0
 810787a:	460d      	mov	r5, r1
 810787c:	b976      	cbnz	r6, 810789c <_Balloc+0x28>
 810787e:	2010      	movs	r0, #16
 8107880:	f7ff ffde 	bl	8107840 <malloc>
 8107884:	4602      	mov	r2, r0
 8107886:	6260      	str	r0, [r4, #36]	; 0x24
 8107888:	b920      	cbnz	r0, 8107894 <_Balloc+0x20>
 810788a:	4b18      	ldr	r3, [pc, #96]	; (81078ec <_Balloc+0x78>)
 810788c:	4818      	ldr	r0, [pc, #96]	; (81078f0 <_Balloc+0x7c>)
 810788e:	2166      	movs	r1, #102	; 0x66
 8107890:	f000 fefa 	bl	8108688 <__assert_func>
 8107894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8107898:	6006      	str	r6, [r0, #0]
 810789a:	60c6      	str	r6, [r0, #12]
 810789c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810789e:	68f3      	ldr	r3, [r6, #12]
 81078a0:	b183      	cbz	r3, 81078c4 <_Balloc+0x50>
 81078a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81078a4:	68db      	ldr	r3, [r3, #12]
 81078a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81078aa:	b9b8      	cbnz	r0, 81078dc <_Balloc+0x68>
 81078ac:	2101      	movs	r1, #1
 81078ae:	fa01 f605 	lsl.w	r6, r1, r5
 81078b2:	1d72      	adds	r2, r6, #5
 81078b4:	0092      	lsls	r2, r2, #2
 81078b6:	4620      	mov	r0, r4
 81078b8:	f000 fc97 	bl	81081ea <_calloc_r>
 81078bc:	b160      	cbz	r0, 81078d8 <_Balloc+0x64>
 81078be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81078c2:	e00e      	b.n	81078e2 <_Balloc+0x6e>
 81078c4:	2221      	movs	r2, #33	; 0x21
 81078c6:	2104      	movs	r1, #4
 81078c8:	4620      	mov	r0, r4
 81078ca:	f000 fc8e 	bl	81081ea <_calloc_r>
 81078ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81078d0:	60f0      	str	r0, [r6, #12]
 81078d2:	68db      	ldr	r3, [r3, #12]
 81078d4:	2b00      	cmp	r3, #0
 81078d6:	d1e4      	bne.n	81078a2 <_Balloc+0x2e>
 81078d8:	2000      	movs	r0, #0
 81078da:	bd70      	pop	{r4, r5, r6, pc}
 81078dc:	6802      	ldr	r2, [r0, #0]
 81078de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81078e2:	2300      	movs	r3, #0
 81078e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81078e8:	e7f7      	b.n	81078da <_Balloc+0x66>
 81078ea:	bf00      	nop
 81078ec:	081093b6 	.word	0x081093b6
 81078f0:	081094bc 	.word	0x081094bc

081078f4 <_Bfree>:
 81078f4:	b570      	push	{r4, r5, r6, lr}
 81078f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81078f8:	4605      	mov	r5, r0
 81078fa:	460c      	mov	r4, r1
 81078fc:	b976      	cbnz	r6, 810791c <_Bfree+0x28>
 81078fe:	2010      	movs	r0, #16
 8107900:	f7ff ff9e 	bl	8107840 <malloc>
 8107904:	4602      	mov	r2, r0
 8107906:	6268      	str	r0, [r5, #36]	; 0x24
 8107908:	b920      	cbnz	r0, 8107914 <_Bfree+0x20>
 810790a:	4b09      	ldr	r3, [pc, #36]	; (8107930 <_Bfree+0x3c>)
 810790c:	4809      	ldr	r0, [pc, #36]	; (8107934 <_Bfree+0x40>)
 810790e:	218a      	movs	r1, #138	; 0x8a
 8107910:	f000 feba 	bl	8108688 <__assert_func>
 8107914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8107918:	6006      	str	r6, [r0, #0]
 810791a:	60c6      	str	r6, [r0, #12]
 810791c:	b13c      	cbz	r4, 810792e <_Bfree+0x3a>
 810791e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8107920:	6862      	ldr	r2, [r4, #4]
 8107922:	68db      	ldr	r3, [r3, #12]
 8107924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8107928:	6021      	str	r1, [r4, #0]
 810792a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810792e:	bd70      	pop	{r4, r5, r6, pc}
 8107930:	081093b6 	.word	0x081093b6
 8107934:	081094bc 	.word	0x081094bc

08107938 <__multadd>:
 8107938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810793c:	690e      	ldr	r6, [r1, #16]
 810793e:	4607      	mov	r7, r0
 8107940:	4698      	mov	r8, r3
 8107942:	460c      	mov	r4, r1
 8107944:	f101 0014 	add.w	r0, r1, #20
 8107948:	2300      	movs	r3, #0
 810794a:	6805      	ldr	r5, [r0, #0]
 810794c:	b2a9      	uxth	r1, r5
 810794e:	fb02 8101 	mla	r1, r2, r1, r8
 8107952:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8107956:	0c2d      	lsrs	r5, r5, #16
 8107958:	fb02 c505 	mla	r5, r2, r5, ip
 810795c:	b289      	uxth	r1, r1
 810795e:	3301      	adds	r3, #1
 8107960:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8107964:	429e      	cmp	r6, r3
 8107966:	f840 1b04 	str.w	r1, [r0], #4
 810796a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810796e:	dcec      	bgt.n	810794a <__multadd+0x12>
 8107970:	f1b8 0f00 	cmp.w	r8, #0
 8107974:	d022      	beq.n	81079bc <__multadd+0x84>
 8107976:	68a3      	ldr	r3, [r4, #8]
 8107978:	42b3      	cmp	r3, r6
 810797a:	dc19      	bgt.n	81079b0 <__multadd+0x78>
 810797c:	6861      	ldr	r1, [r4, #4]
 810797e:	4638      	mov	r0, r7
 8107980:	3101      	adds	r1, #1
 8107982:	f7ff ff77 	bl	8107874 <_Balloc>
 8107986:	4605      	mov	r5, r0
 8107988:	b928      	cbnz	r0, 8107996 <__multadd+0x5e>
 810798a:	4602      	mov	r2, r0
 810798c:	4b0d      	ldr	r3, [pc, #52]	; (81079c4 <__multadd+0x8c>)
 810798e:	480e      	ldr	r0, [pc, #56]	; (81079c8 <__multadd+0x90>)
 8107990:	21b5      	movs	r1, #181	; 0xb5
 8107992:	f000 fe79 	bl	8108688 <__assert_func>
 8107996:	6922      	ldr	r2, [r4, #16]
 8107998:	3202      	adds	r2, #2
 810799a:	f104 010c 	add.w	r1, r4, #12
 810799e:	0092      	lsls	r2, r2, #2
 81079a0:	300c      	adds	r0, #12
 81079a2:	f7fc fff5 	bl	8104990 <memcpy>
 81079a6:	4621      	mov	r1, r4
 81079a8:	4638      	mov	r0, r7
 81079aa:	f7ff ffa3 	bl	81078f4 <_Bfree>
 81079ae:	462c      	mov	r4, r5
 81079b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 81079b4:	3601      	adds	r6, #1
 81079b6:	f8c3 8014 	str.w	r8, [r3, #20]
 81079ba:	6126      	str	r6, [r4, #16]
 81079bc:	4620      	mov	r0, r4
 81079be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81079c2:	bf00      	nop
 81079c4:	0810942c 	.word	0x0810942c
 81079c8:	081094bc 	.word	0x081094bc

081079cc <__s2b>:
 81079cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81079d0:	460c      	mov	r4, r1
 81079d2:	4615      	mov	r5, r2
 81079d4:	461f      	mov	r7, r3
 81079d6:	2209      	movs	r2, #9
 81079d8:	3308      	adds	r3, #8
 81079da:	4606      	mov	r6, r0
 81079dc:	fb93 f3f2 	sdiv	r3, r3, r2
 81079e0:	2100      	movs	r1, #0
 81079e2:	2201      	movs	r2, #1
 81079e4:	429a      	cmp	r2, r3
 81079e6:	db09      	blt.n	81079fc <__s2b+0x30>
 81079e8:	4630      	mov	r0, r6
 81079ea:	f7ff ff43 	bl	8107874 <_Balloc>
 81079ee:	b940      	cbnz	r0, 8107a02 <__s2b+0x36>
 81079f0:	4602      	mov	r2, r0
 81079f2:	4b19      	ldr	r3, [pc, #100]	; (8107a58 <__s2b+0x8c>)
 81079f4:	4819      	ldr	r0, [pc, #100]	; (8107a5c <__s2b+0x90>)
 81079f6:	21ce      	movs	r1, #206	; 0xce
 81079f8:	f000 fe46 	bl	8108688 <__assert_func>
 81079fc:	0052      	lsls	r2, r2, #1
 81079fe:	3101      	adds	r1, #1
 8107a00:	e7f0      	b.n	81079e4 <__s2b+0x18>
 8107a02:	9b08      	ldr	r3, [sp, #32]
 8107a04:	6143      	str	r3, [r0, #20]
 8107a06:	2d09      	cmp	r5, #9
 8107a08:	f04f 0301 	mov.w	r3, #1
 8107a0c:	6103      	str	r3, [r0, #16]
 8107a0e:	dd16      	ble.n	8107a3e <__s2b+0x72>
 8107a10:	f104 0909 	add.w	r9, r4, #9
 8107a14:	46c8      	mov	r8, r9
 8107a16:	442c      	add	r4, r5
 8107a18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8107a1c:	4601      	mov	r1, r0
 8107a1e:	3b30      	subs	r3, #48	; 0x30
 8107a20:	220a      	movs	r2, #10
 8107a22:	4630      	mov	r0, r6
 8107a24:	f7ff ff88 	bl	8107938 <__multadd>
 8107a28:	45a0      	cmp	r8, r4
 8107a2a:	d1f5      	bne.n	8107a18 <__s2b+0x4c>
 8107a2c:	f1a5 0408 	sub.w	r4, r5, #8
 8107a30:	444c      	add	r4, r9
 8107a32:	1b2d      	subs	r5, r5, r4
 8107a34:	1963      	adds	r3, r4, r5
 8107a36:	42bb      	cmp	r3, r7
 8107a38:	db04      	blt.n	8107a44 <__s2b+0x78>
 8107a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107a3e:	340a      	adds	r4, #10
 8107a40:	2509      	movs	r5, #9
 8107a42:	e7f6      	b.n	8107a32 <__s2b+0x66>
 8107a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8107a48:	4601      	mov	r1, r0
 8107a4a:	3b30      	subs	r3, #48	; 0x30
 8107a4c:	220a      	movs	r2, #10
 8107a4e:	4630      	mov	r0, r6
 8107a50:	f7ff ff72 	bl	8107938 <__multadd>
 8107a54:	e7ee      	b.n	8107a34 <__s2b+0x68>
 8107a56:	bf00      	nop
 8107a58:	0810942c 	.word	0x0810942c
 8107a5c:	081094bc 	.word	0x081094bc

08107a60 <__hi0bits>:
 8107a60:	0c03      	lsrs	r3, r0, #16
 8107a62:	041b      	lsls	r3, r3, #16
 8107a64:	b9d3      	cbnz	r3, 8107a9c <__hi0bits+0x3c>
 8107a66:	0400      	lsls	r0, r0, #16
 8107a68:	2310      	movs	r3, #16
 8107a6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8107a6e:	bf04      	itt	eq
 8107a70:	0200      	lsleq	r0, r0, #8
 8107a72:	3308      	addeq	r3, #8
 8107a74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8107a78:	bf04      	itt	eq
 8107a7a:	0100      	lsleq	r0, r0, #4
 8107a7c:	3304      	addeq	r3, #4
 8107a7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8107a82:	bf04      	itt	eq
 8107a84:	0080      	lsleq	r0, r0, #2
 8107a86:	3302      	addeq	r3, #2
 8107a88:	2800      	cmp	r0, #0
 8107a8a:	db05      	blt.n	8107a98 <__hi0bits+0x38>
 8107a8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8107a90:	f103 0301 	add.w	r3, r3, #1
 8107a94:	bf08      	it	eq
 8107a96:	2320      	moveq	r3, #32
 8107a98:	4618      	mov	r0, r3
 8107a9a:	4770      	bx	lr
 8107a9c:	2300      	movs	r3, #0
 8107a9e:	e7e4      	b.n	8107a6a <__hi0bits+0xa>

08107aa0 <__lo0bits>:
 8107aa0:	6803      	ldr	r3, [r0, #0]
 8107aa2:	f013 0207 	ands.w	r2, r3, #7
 8107aa6:	4601      	mov	r1, r0
 8107aa8:	d00b      	beq.n	8107ac2 <__lo0bits+0x22>
 8107aaa:	07da      	lsls	r2, r3, #31
 8107aac:	d424      	bmi.n	8107af8 <__lo0bits+0x58>
 8107aae:	0798      	lsls	r0, r3, #30
 8107ab0:	bf49      	itett	mi
 8107ab2:	085b      	lsrmi	r3, r3, #1
 8107ab4:	089b      	lsrpl	r3, r3, #2
 8107ab6:	2001      	movmi	r0, #1
 8107ab8:	600b      	strmi	r3, [r1, #0]
 8107aba:	bf5c      	itt	pl
 8107abc:	600b      	strpl	r3, [r1, #0]
 8107abe:	2002      	movpl	r0, #2
 8107ac0:	4770      	bx	lr
 8107ac2:	b298      	uxth	r0, r3
 8107ac4:	b9b0      	cbnz	r0, 8107af4 <__lo0bits+0x54>
 8107ac6:	0c1b      	lsrs	r3, r3, #16
 8107ac8:	2010      	movs	r0, #16
 8107aca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8107ace:	bf04      	itt	eq
 8107ad0:	0a1b      	lsreq	r3, r3, #8
 8107ad2:	3008      	addeq	r0, #8
 8107ad4:	071a      	lsls	r2, r3, #28
 8107ad6:	bf04      	itt	eq
 8107ad8:	091b      	lsreq	r3, r3, #4
 8107ada:	3004      	addeq	r0, #4
 8107adc:	079a      	lsls	r2, r3, #30
 8107ade:	bf04      	itt	eq
 8107ae0:	089b      	lsreq	r3, r3, #2
 8107ae2:	3002      	addeq	r0, #2
 8107ae4:	07da      	lsls	r2, r3, #31
 8107ae6:	d403      	bmi.n	8107af0 <__lo0bits+0x50>
 8107ae8:	085b      	lsrs	r3, r3, #1
 8107aea:	f100 0001 	add.w	r0, r0, #1
 8107aee:	d005      	beq.n	8107afc <__lo0bits+0x5c>
 8107af0:	600b      	str	r3, [r1, #0]
 8107af2:	4770      	bx	lr
 8107af4:	4610      	mov	r0, r2
 8107af6:	e7e8      	b.n	8107aca <__lo0bits+0x2a>
 8107af8:	2000      	movs	r0, #0
 8107afa:	4770      	bx	lr
 8107afc:	2020      	movs	r0, #32
 8107afe:	4770      	bx	lr

08107b00 <__i2b>:
 8107b00:	b510      	push	{r4, lr}
 8107b02:	460c      	mov	r4, r1
 8107b04:	2101      	movs	r1, #1
 8107b06:	f7ff feb5 	bl	8107874 <_Balloc>
 8107b0a:	4602      	mov	r2, r0
 8107b0c:	b928      	cbnz	r0, 8107b1a <__i2b+0x1a>
 8107b0e:	4b05      	ldr	r3, [pc, #20]	; (8107b24 <__i2b+0x24>)
 8107b10:	4805      	ldr	r0, [pc, #20]	; (8107b28 <__i2b+0x28>)
 8107b12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8107b16:	f000 fdb7 	bl	8108688 <__assert_func>
 8107b1a:	2301      	movs	r3, #1
 8107b1c:	6144      	str	r4, [r0, #20]
 8107b1e:	6103      	str	r3, [r0, #16]
 8107b20:	bd10      	pop	{r4, pc}
 8107b22:	bf00      	nop
 8107b24:	0810942c 	.word	0x0810942c
 8107b28:	081094bc 	.word	0x081094bc

08107b2c <__multiply>:
 8107b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107b30:	4614      	mov	r4, r2
 8107b32:	690a      	ldr	r2, [r1, #16]
 8107b34:	6923      	ldr	r3, [r4, #16]
 8107b36:	429a      	cmp	r2, r3
 8107b38:	bfb8      	it	lt
 8107b3a:	460b      	movlt	r3, r1
 8107b3c:	460d      	mov	r5, r1
 8107b3e:	bfbc      	itt	lt
 8107b40:	4625      	movlt	r5, r4
 8107b42:	461c      	movlt	r4, r3
 8107b44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8107b48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8107b4c:	68ab      	ldr	r3, [r5, #8]
 8107b4e:	6869      	ldr	r1, [r5, #4]
 8107b50:	eb0a 0709 	add.w	r7, sl, r9
 8107b54:	42bb      	cmp	r3, r7
 8107b56:	b085      	sub	sp, #20
 8107b58:	bfb8      	it	lt
 8107b5a:	3101      	addlt	r1, #1
 8107b5c:	f7ff fe8a 	bl	8107874 <_Balloc>
 8107b60:	b930      	cbnz	r0, 8107b70 <__multiply+0x44>
 8107b62:	4602      	mov	r2, r0
 8107b64:	4b42      	ldr	r3, [pc, #264]	; (8107c70 <__multiply+0x144>)
 8107b66:	4843      	ldr	r0, [pc, #268]	; (8107c74 <__multiply+0x148>)
 8107b68:	f240 115d 	movw	r1, #349	; 0x15d
 8107b6c:	f000 fd8c 	bl	8108688 <__assert_func>
 8107b70:	f100 0614 	add.w	r6, r0, #20
 8107b74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8107b78:	4633      	mov	r3, r6
 8107b7a:	2200      	movs	r2, #0
 8107b7c:	4543      	cmp	r3, r8
 8107b7e:	d31e      	bcc.n	8107bbe <__multiply+0x92>
 8107b80:	f105 0c14 	add.w	ip, r5, #20
 8107b84:	f104 0314 	add.w	r3, r4, #20
 8107b88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8107b8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8107b90:	9202      	str	r2, [sp, #8]
 8107b92:	ebac 0205 	sub.w	r2, ip, r5
 8107b96:	3a15      	subs	r2, #21
 8107b98:	f022 0203 	bic.w	r2, r2, #3
 8107b9c:	3204      	adds	r2, #4
 8107b9e:	f105 0115 	add.w	r1, r5, #21
 8107ba2:	458c      	cmp	ip, r1
 8107ba4:	bf38      	it	cc
 8107ba6:	2204      	movcc	r2, #4
 8107ba8:	9201      	str	r2, [sp, #4]
 8107baa:	9a02      	ldr	r2, [sp, #8]
 8107bac:	9303      	str	r3, [sp, #12]
 8107bae:	429a      	cmp	r2, r3
 8107bb0:	d808      	bhi.n	8107bc4 <__multiply+0x98>
 8107bb2:	2f00      	cmp	r7, #0
 8107bb4:	dc55      	bgt.n	8107c62 <__multiply+0x136>
 8107bb6:	6107      	str	r7, [r0, #16]
 8107bb8:	b005      	add	sp, #20
 8107bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107bbe:	f843 2b04 	str.w	r2, [r3], #4
 8107bc2:	e7db      	b.n	8107b7c <__multiply+0x50>
 8107bc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8107bc8:	f1ba 0f00 	cmp.w	sl, #0
 8107bcc:	d020      	beq.n	8107c10 <__multiply+0xe4>
 8107bce:	f105 0e14 	add.w	lr, r5, #20
 8107bd2:	46b1      	mov	r9, r6
 8107bd4:	2200      	movs	r2, #0
 8107bd6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8107bda:	f8d9 b000 	ldr.w	fp, [r9]
 8107bde:	b2a1      	uxth	r1, r4
 8107be0:	fa1f fb8b 	uxth.w	fp, fp
 8107be4:	fb0a b101 	mla	r1, sl, r1, fp
 8107be8:	4411      	add	r1, r2
 8107bea:	f8d9 2000 	ldr.w	r2, [r9]
 8107bee:	0c24      	lsrs	r4, r4, #16
 8107bf0:	0c12      	lsrs	r2, r2, #16
 8107bf2:	fb0a 2404 	mla	r4, sl, r4, r2
 8107bf6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8107bfa:	b289      	uxth	r1, r1
 8107bfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8107c00:	45f4      	cmp	ip, lr
 8107c02:	f849 1b04 	str.w	r1, [r9], #4
 8107c06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8107c0a:	d8e4      	bhi.n	8107bd6 <__multiply+0xaa>
 8107c0c:	9901      	ldr	r1, [sp, #4]
 8107c0e:	5072      	str	r2, [r6, r1]
 8107c10:	9a03      	ldr	r2, [sp, #12]
 8107c12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8107c16:	3304      	adds	r3, #4
 8107c18:	f1b9 0f00 	cmp.w	r9, #0
 8107c1c:	d01f      	beq.n	8107c5e <__multiply+0x132>
 8107c1e:	6834      	ldr	r4, [r6, #0]
 8107c20:	f105 0114 	add.w	r1, r5, #20
 8107c24:	46b6      	mov	lr, r6
 8107c26:	f04f 0a00 	mov.w	sl, #0
 8107c2a:	880a      	ldrh	r2, [r1, #0]
 8107c2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8107c30:	fb09 b202 	mla	r2, r9, r2, fp
 8107c34:	4492      	add	sl, r2
 8107c36:	b2a4      	uxth	r4, r4
 8107c38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8107c3c:	f84e 4b04 	str.w	r4, [lr], #4
 8107c40:	f851 4b04 	ldr.w	r4, [r1], #4
 8107c44:	f8be 2000 	ldrh.w	r2, [lr]
 8107c48:	0c24      	lsrs	r4, r4, #16
 8107c4a:	fb09 2404 	mla	r4, r9, r4, r2
 8107c4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8107c52:	458c      	cmp	ip, r1
 8107c54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8107c58:	d8e7      	bhi.n	8107c2a <__multiply+0xfe>
 8107c5a:	9a01      	ldr	r2, [sp, #4]
 8107c5c:	50b4      	str	r4, [r6, r2]
 8107c5e:	3604      	adds	r6, #4
 8107c60:	e7a3      	b.n	8107baa <__multiply+0x7e>
 8107c62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8107c66:	2b00      	cmp	r3, #0
 8107c68:	d1a5      	bne.n	8107bb6 <__multiply+0x8a>
 8107c6a:	3f01      	subs	r7, #1
 8107c6c:	e7a1      	b.n	8107bb2 <__multiply+0x86>
 8107c6e:	bf00      	nop
 8107c70:	0810942c 	.word	0x0810942c
 8107c74:	081094bc 	.word	0x081094bc

08107c78 <__pow5mult>:
 8107c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107c7c:	4615      	mov	r5, r2
 8107c7e:	f012 0203 	ands.w	r2, r2, #3
 8107c82:	4606      	mov	r6, r0
 8107c84:	460f      	mov	r7, r1
 8107c86:	d007      	beq.n	8107c98 <__pow5mult+0x20>
 8107c88:	4c25      	ldr	r4, [pc, #148]	; (8107d20 <__pow5mult+0xa8>)
 8107c8a:	3a01      	subs	r2, #1
 8107c8c:	2300      	movs	r3, #0
 8107c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8107c92:	f7ff fe51 	bl	8107938 <__multadd>
 8107c96:	4607      	mov	r7, r0
 8107c98:	10ad      	asrs	r5, r5, #2
 8107c9a:	d03d      	beq.n	8107d18 <__pow5mult+0xa0>
 8107c9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8107c9e:	b97c      	cbnz	r4, 8107cc0 <__pow5mult+0x48>
 8107ca0:	2010      	movs	r0, #16
 8107ca2:	f7ff fdcd 	bl	8107840 <malloc>
 8107ca6:	4602      	mov	r2, r0
 8107ca8:	6270      	str	r0, [r6, #36]	; 0x24
 8107caa:	b928      	cbnz	r0, 8107cb8 <__pow5mult+0x40>
 8107cac:	4b1d      	ldr	r3, [pc, #116]	; (8107d24 <__pow5mult+0xac>)
 8107cae:	481e      	ldr	r0, [pc, #120]	; (8107d28 <__pow5mult+0xb0>)
 8107cb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8107cb4:	f000 fce8 	bl	8108688 <__assert_func>
 8107cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8107cbc:	6004      	str	r4, [r0, #0]
 8107cbe:	60c4      	str	r4, [r0, #12]
 8107cc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8107cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8107cc8:	b94c      	cbnz	r4, 8107cde <__pow5mult+0x66>
 8107cca:	f240 2171 	movw	r1, #625	; 0x271
 8107cce:	4630      	mov	r0, r6
 8107cd0:	f7ff ff16 	bl	8107b00 <__i2b>
 8107cd4:	2300      	movs	r3, #0
 8107cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8107cda:	4604      	mov	r4, r0
 8107cdc:	6003      	str	r3, [r0, #0]
 8107cde:	f04f 0900 	mov.w	r9, #0
 8107ce2:	07eb      	lsls	r3, r5, #31
 8107ce4:	d50a      	bpl.n	8107cfc <__pow5mult+0x84>
 8107ce6:	4639      	mov	r1, r7
 8107ce8:	4622      	mov	r2, r4
 8107cea:	4630      	mov	r0, r6
 8107cec:	f7ff ff1e 	bl	8107b2c <__multiply>
 8107cf0:	4639      	mov	r1, r7
 8107cf2:	4680      	mov	r8, r0
 8107cf4:	4630      	mov	r0, r6
 8107cf6:	f7ff fdfd 	bl	81078f4 <_Bfree>
 8107cfa:	4647      	mov	r7, r8
 8107cfc:	106d      	asrs	r5, r5, #1
 8107cfe:	d00b      	beq.n	8107d18 <__pow5mult+0xa0>
 8107d00:	6820      	ldr	r0, [r4, #0]
 8107d02:	b938      	cbnz	r0, 8107d14 <__pow5mult+0x9c>
 8107d04:	4622      	mov	r2, r4
 8107d06:	4621      	mov	r1, r4
 8107d08:	4630      	mov	r0, r6
 8107d0a:	f7ff ff0f 	bl	8107b2c <__multiply>
 8107d0e:	6020      	str	r0, [r4, #0]
 8107d10:	f8c0 9000 	str.w	r9, [r0]
 8107d14:	4604      	mov	r4, r0
 8107d16:	e7e4      	b.n	8107ce2 <__pow5mult+0x6a>
 8107d18:	4638      	mov	r0, r7
 8107d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107d1e:	bf00      	nop
 8107d20:	08109610 	.word	0x08109610
 8107d24:	081093b6 	.word	0x081093b6
 8107d28:	081094bc 	.word	0x081094bc

08107d2c <__lshift>:
 8107d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107d30:	460c      	mov	r4, r1
 8107d32:	6849      	ldr	r1, [r1, #4]
 8107d34:	6923      	ldr	r3, [r4, #16]
 8107d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8107d3a:	68a3      	ldr	r3, [r4, #8]
 8107d3c:	4607      	mov	r7, r0
 8107d3e:	4691      	mov	r9, r2
 8107d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8107d44:	f108 0601 	add.w	r6, r8, #1
 8107d48:	42b3      	cmp	r3, r6
 8107d4a:	db0b      	blt.n	8107d64 <__lshift+0x38>
 8107d4c:	4638      	mov	r0, r7
 8107d4e:	f7ff fd91 	bl	8107874 <_Balloc>
 8107d52:	4605      	mov	r5, r0
 8107d54:	b948      	cbnz	r0, 8107d6a <__lshift+0x3e>
 8107d56:	4602      	mov	r2, r0
 8107d58:	4b28      	ldr	r3, [pc, #160]	; (8107dfc <__lshift+0xd0>)
 8107d5a:	4829      	ldr	r0, [pc, #164]	; (8107e00 <__lshift+0xd4>)
 8107d5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8107d60:	f000 fc92 	bl	8108688 <__assert_func>
 8107d64:	3101      	adds	r1, #1
 8107d66:	005b      	lsls	r3, r3, #1
 8107d68:	e7ee      	b.n	8107d48 <__lshift+0x1c>
 8107d6a:	2300      	movs	r3, #0
 8107d6c:	f100 0114 	add.w	r1, r0, #20
 8107d70:	f100 0210 	add.w	r2, r0, #16
 8107d74:	4618      	mov	r0, r3
 8107d76:	4553      	cmp	r3, sl
 8107d78:	db33      	blt.n	8107de2 <__lshift+0xb6>
 8107d7a:	6920      	ldr	r0, [r4, #16]
 8107d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8107d80:	f104 0314 	add.w	r3, r4, #20
 8107d84:	f019 091f 	ands.w	r9, r9, #31
 8107d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8107d8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8107d90:	d02b      	beq.n	8107dea <__lshift+0xbe>
 8107d92:	f1c9 0e20 	rsb	lr, r9, #32
 8107d96:	468a      	mov	sl, r1
 8107d98:	2200      	movs	r2, #0
 8107d9a:	6818      	ldr	r0, [r3, #0]
 8107d9c:	fa00 f009 	lsl.w	r0, r0, r9
 8107da0:	4302      	orrs	r2, r0
 8107da2:	f84a 2b04 	str.w	r2, [sl], #4
 8107da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8107daa:	459c      	cmp	ip, r3
 8107dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8107db0:	d8f3      	bhi.n	8107d9a <__lshift+0x6e>
 8107db2:	ebac 0304 	sub.w	r3, ip, r4
 8107db6:	3b15      	subs	r3, #21
 8107db8:	f023 0303 	bic.w	r3, r3, #3
 8107dbc:	3304      	adds	r3, #4
 8107dbe:	f104 0015 	add.w	r0, r4, #21
 8107dc2:	4584      	cmp	ip, r0
 8107dc4:	bf38      	it	cc
 8107dc6:	2304      	movcc	r3, #4
 8107dc8:	50ca      	str	r2, [r1, r3]
 8107dca:	b10a      	cbz	r2, 8107dd0 <__lshift+0xa4>
 8107dcc:	f108 0602 	add.w	r6, r8, #2
 8107dd0:	3e01      	subs	r6, #1
 8107dd2:	4638      	mov	r0, r7
 8107dd4:	612e      	str	r6, [r5, #16]
 8107dd6:	4621      	mov	r1, r4
 8107dd8:	f7ff fd8c 	bl	81078f4 <_Bfree>
 8107ddc:	4628      	mov	r0, r5
 8107dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8107de6:	3301      	adds	r3, #1
 8107de8:	e7c5      	b.n	8107d76 <__lshift+0x4a>
 8107dea:	3904      	subs	r1, #4
 8107dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8107df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8107df4:	459c      	cmp	ip, r3
 8107df6:	d8f9      	bhi.n	8107dec <__lshift+0xc0>
 8107df8:	e7ea      	b.n	8107dd0 <__lshift+0xa4>
 8107dfa:	bf00      	nop
 8107dfc:	0810942c 	.word	0x0810942c
 8107e00:	081094bc 	.word	0x081094bc

08107e04 <__mcmp>:
 8107e04:	b530      	push	{r4, r5, lr}
 8107e06:	6902      	ldr	r2, [r0, #16]
 8107e08:	690c      	ldr	r4, [r1, #16]
 8107e0a:	1b12      	subs	r2, r2, r4
 8107e0c:	d10e      	bne.n	8107e2c <__mcmp+0x28>
 8107e0e:	f100 0314 	add.w	r3, r0, #20
 8107e12:	3114      	adds	r1, #20
 8107e14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8107e18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8107e1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8107e20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8107e24:	42a5      	cmp	r5, r4
 8107e26:	d003      	beq.n	8107e30 <__mcmp+0x2c>
 8107e28:	d305      	bcc.n	8107e36 <__mcmp+0x32>
 8107e2a:	2201      	movs	r2, #1
 8107e2c:	4610      	mov	r0, r2
 8107e2e:	bd30      	pop	{r4, r5, pc}
 8107e30:	4283      	cmp	r3, r0
 8107e32:	d3f3      	bcc.n	8107e1c <__mcmp+0x18>
 8107e34:	e7fa      	b.n	8107e2c <__mcmp+0x28>
 8107e36:	f04f 32ff 	mov.w	r2, #4294967295
 8107e3a:	e7f7      	b.n	8107e2c <__mcmp+0x28>

08107e3c <__mdiff>:
 8107e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107e40:	460c      	mov	r4, r1
 8107e42:	4606      	mov	r6, r0
 8107e44:	4611      	mov	r1, r2
 8107e46:	4620      	mov	r0, r4
 8107e48:	4617      	mov	r7, r2
 8107e4a:	f7ff ffdb 	bl	8107e04 <__mcmp>
 8107e4e:	1e05      	subs	r5, r0, #0
 8107e50:	d110      	bne.n	8107e74 <__mdiff+0x38>
 8107e52:	4629      	mov	r1, r5
 8107e54:	4630      	mov	r0, r6
 8107e56:	f7ff fd0d 	bl	8107874 <_Balloc>
 8107e5a:	b930      	cbnz	r0, 8107e6a <__mdiff+0x2e>
 8107e5c:	4b39      	ldr	r3, [pc, #228]	; (8107f44 <__mdiff+0x108>)
 8107e5e:	4602      	mov	r2, r0
 8107e60:	f240 2132 	movw	r1, #562	; 0x232
 8107e64:	4838      	ldr	r0, [pc, #224]	; (8107f48 <__mdiff+0x10c>)
 8107e66:	f000 fc0f 	bl	8108688 <__assert_func>
 8107e6a:	2301      	movs	r3, #1
 8107e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8107e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107e74:	bfa4      	itt	ge
 8107e76:	463b      	movge	r3, r7
 8107e78:	4627      	movge	r7, r4
 8107e7a:	4630      	mov	r0, r6
 8107e7c:	6879      	ldr	r1, [r7, #4]
 8107e7e:	bfa6      	itte	ge
 8107e80:	461c      	movge	r4, r3
 8107e82:	2500      	movge	r5, #0
 8107e84:	2501      	movlt	r5, #1
 8107e86:	f7ff fcf5 	bl	8107874 <_Balloc>
 8107e8a:	b920      	cbnz	r0, 8107e96 <__mdiff+0x5a>
 8107e8c:	4b2d      	ldr	r3, [pc, #180]	; (8107f44 <__mdiff+0x108>)
 8107e8e:	4602      	mov	r2, r0
 8107e90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8107e94:	e7e6      	b.n	8107e64 <__mdiff+0x28>
 8107e96:	693e      	ldr	r6, [r7, #16]
 8107e98:	60c5      	str	r5, [r0, #12]
 8107e9a:	6925      	ldr	r5, [r4, #16]
 8107e9c:	f107 0114 	add.w	r1, r7, #20
 8107ea0:	f104 0914 	add.w	r9, r4, #20
 8107ea4:	f100 0e14 	add.w	lr, r0, #20
 8107ea8:	f107 0210 	add.w	r2, r7, #16
 8107eac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8107eb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8107eb4:	46f2      	mov	sl, lr
 8107eb6:	2700      	movs	r7, #0
 8107eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8107ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8107ec0:	fa1f f883 	uxth.w	r8, r3
 8107ec4:	fa17 f78b 	uxtah	r7, r7, fp
 8107ec8:	0c1b      	lsrs	r3, r3, #16
 8107eca:	eba7 0808 	sub.w	r8, r7, r8
 8107ece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8107ed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8107ed6:	fa1f f888 	uxth.w	r8, r8
 8107eda:	141f      	asrs	r7, r3, #16
 8107edc:	454d      	cmp	r5, r9
 8107ede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8107ee2:	f84a 3b04 	str.w	r3, [sl], #4
 8107ee6:	d8e7      	bhi.n	8107eb8 <__mdiff+0x7c>
 8107ee8:	1b2b      	subs	r3, r5, r4
 8107eea:	3b15      	subs	r3, #21
 8107eec:	f023 0303 	bic.w	r3, r3, #3
 8107ef0:	3304      	adds	r3, #4
 8107ef2:	3415      	adds	r4, #21
 8107ef4:	42a5      	cmp	r5, r4
 8107ef6:	bf38      	it	cc
 8107ef8:	2304      	movcc	r3, #4
 8107efa:	4419      	add	r1, r3
 8107efc:	4473      	add	r3, lr
 8107efe:	469e      	mov	lr, r3
 8107f00:	460d      	mov	r5, r1
 8107f02:	4565      	cmp	r5, ip
 8107f04:	d30e      	bcc.n	8107f24 <__mdiff+0xe8>
 8107f06:	f10c 0203 	add.w	r2, ip, #3
 8107f0a:	1a52      	subs	r2, r2, r1
 8107f0c:	f022 0203 	bic.w	r2, r2, #3
 8107f10:	3903      	subs	r1, #3
 8107f12:	458c      	cmp	ip, r1
 8107f14:	bf38      	it	cc
 8107f16:	2200      	movcc	r2, #0
 8107f18:	441a      	add	r2, r3
 8107f1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8107f1e:	b17b      	cbz	r3, 8107f40 <__mdiff+0x104>
 8107f20:	6106      	str	r6, [r0, #16]
 8107f22:	e7a5      	b.n	8107e70 <__mdiff+0x34>
 8107f24:	f855 8b04 	ldr.w	r8, [r5], #4
 8107f28:	fa17 f488 	uxtah	r4, r7, r8
 8107f2c:	1422      	asrs	r2, r4, #16
 8107f2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8107f32:	b2a4      	uxth	r4, r4
 8107f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8107f38:	f84e 4b04 	str.w	r4, [lr], #4
 8107f3c:	1417      	asrs	r7, r2, #16
 8107f3e:	e7e0      	b.n	8107f02 <__mdiff+0xc6>
 8107f40:	3e01      	subs	r6, #1
 8107f42:	e7ea      	b.n	8107f1a <__mdiff+0xde>
 8107f44:	0810942c 	.word	0x0810942c
 8107f48:	081094bc 	.word	0x081094bc

08107f4c <__ulp>:
 8107f4c:	b082      	sub	sp, #8
 8107f4e:	ed8d 0b00 	vstr	d0, [sp]
 8107f52:	9b01      	ldr	r3, [sp, #4]
 8107f54:	4912      	ldr	r1, [pc, #72]	; (8107fa0 <__ulp+0x54>)
 8107f56:	4019      	ands	r1, r3
 8107f58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8107f5c:	2900      	cmp	r1, #0
 8107f5e:	dd05      	ble.n	8107f6c <__ulp+0x20>
 8107f60:	2200      	movs	r2, #0
 8107f62:	460b      	mov	r3, r1
 8107f64:	ec43 2b10 	vmov	d0, r2, r3
 8107f68:	b002      	add	sp, #8
 8107f6a:	4770      	bx	lr
 8107f6c:	4249      	negs	r1, r1
 8107f6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8107f72:	ea4f 5021 	mov.w	r0, r1, asr #20
 8107f76:	f04f 0200 	mov.w	r2, #0
 8107f7a:	f04f 0300 	mov.w	r3, #0
 8107f7e:	da04      	bge.n	8107f8a <__ulp+0x3e>
 8107f80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8107f84:	fa41 f300 	asr.w	r3, r1, r0
 8107f88:	e7ec      	b.n	8107f64 <__ulp+0x18>
 8107f8a:	f1a0 0114 	sub.w	r1, r0, #20
 8107f8e:	291e      	cmp	r1, #30
 8107f90:	bfda      	itte	le
 8107f92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8107f96:	fa20 f101 	lsrle.w	r1, r0, r1
 8107f9a:	2101      	movgt	r1, #1
 8107f9c:	460a      	mov	r2, r1
 8107f9e:	e7e1      	b.n	8107f64 <__ulp+0x18>
 8107fa0:	7ff00000 	.word	0x7ff00000

08107fa4 <__b2d>:
 8107fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107fa6:	6905      	ldr	r5, [r0, #16]
 8107fa8:	f100 0714 	add.w	r7, r0, #20
 8107fac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8107fb0:	1f2e      	subs	r6, r5, #4
 8107fb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8107fb6:	4620      	mov	r0, r4
 8107fb8:	f7ff fd52 	bl	8107a60 <__hi0bits>
 8107fbc:	f1c0 0320 	rsb	r3, r0, #32
 8107fc0:	280a      	cmp	r0, #10
 8107fc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8108040 <__b2d+0x9c>
 8107fc6:	600b      	str	r3, [r1, #0]
 8107fc8:	dc14      	bgt.n	8107ff4 <__b2d+0x50>
 8107fca:	f1c0 0e0b 	rsb	lr, r0, #11
 8107fce:	fa24 f10e 	lsr.w	r1, r4, lr
 8107fd2:	42b7      	cmp	r7, r6
 8107fd4:	ea41 030c 	orr.w	r3, r1, ip
 8107fd8:	bf34      	ite	cc
 8107fda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8107fde:	2100      	movcs	r1, #0
 8107fe0:	3015      	adds	r0, #21
 8107fe2:	fa04 f000 	lsl.w	r0, r4, r0
 8107fe6:	fa21 f10e 	lsr.w	r1, r1, lr
 8107fea:	ea40 0201 	orr.w	r2, r0, r1
 8107fee:	ec43 2b10 	vmov	d0, r2, r3
 8107ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107ff4:	42b7      	cmp	r7, r6
 8107ff6:	bf3a      	itte	cc
 8107ff8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8107ffc:	f1a5 0608 	subcc.w	r6, r5, #8
 8108000:	2100      	movcs	r1, #0
 8108002:	380b      	subs	r0, #11
 8108004:	d017      	beq.n	8108036 <__b2d+0x92>
 8108006:	f1c0 0c20 	rsb	ip, r0, #32
 810800a:	fa04 f500 	lsl.w	r5, r4, r0
 810800e:	42be      	cmp	r6, r7
 8108010:	fa21 f40c 	lsr.w	r4, r1, ip
 8108014:	ea45 0504 	orr.w	r5, r5, r4
 8108018:	bf8c      	ite	hi
 810801a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810801e:	2400      	movls	r4, #0
 8108020:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8108024:	fa01 f000 	lsl.w	r0, r1, r0
 8108028:	fa24 f40c 	lsr.w	r4, r4, ip
 810802c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8108030:	ea40 0204 	orr.w	r2, r0, r4
 8108034:	e7db      	b.n	8107fee <__b2d+0x4a>
 8108036:	ea44 030c 	orr.w	r3, r4, ip
 810803a:	460a      	mov	r2, r1
 810803c:	e7d7      	b.n	8107fee <__b2d+0x4a>
 810803e:	bf00      	nop
 8108040:	3ff00000 	.word	0x3ff00000

08108044 <__d2b>:
 8108044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8108048:	4689      	mov	r9, r1
 810804a:	2101      	movs	r1, #1
 810804c:	ec57 6b10 	vmov	r6, r7, d0
 8108050:	4690      	mov	r8, r2
 8108052:	f7ff fc0f 	bl	8107874 <_Balloc>
 8108056:	4604      	mov	r4, r0
 8108058:	b930      	cbnz	r0, 8108068 <__d2b+0x24>
 810805a:	4602      	mov	r2, r0
 810805c:	4b25      	ldr	r3, [pc, #148]	; (81080f4 <__d2b+0xb0>)
 810805e:	4826      	ldr	r0, [pc, #152]	; (81080f8 <__d2b+0xb4>)
 8108060:	f240 310a 	movw	r1, #778	; 0x30a
 8108064:	f000 fb10 	bl	8108688 <__assert_func>
 8108068:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810806c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8108070:	bb35      	cbnz	r5, 81080c0 <__d2b+0x7c>
 8108072:	2e00      	cmp	r6, #0
 8108074:	9301      	str	r3, [sp, #4]
 8108076:	d028      	beq.n	81080ca <__d2b+0x86>
 8108078:	4668      	mov	r0, sp
 810807a:	9600      	str	r6, [sp, #0]
 810807c:	f7ff fd10 	bl	8107aa0 <__lo0bits>
 8108080:	9900      	ldr	r1, [sp, #0]
 8108082:	b300      	cbz	r0, 81080c6 <__d2b+0x82>
 8108084:	9a01      	ldr	r2, [sp, #4]
 8108086:	f1c0 0320 	rsb	r3, r0, #32
 810808a:	fa02 f303 	lsl.w	r3, r2, r3
 810808e:	430b      	orrs	r3, r1
 8108090:	40c2      	lsrs	r2, r0
 8108092:	6163      	str	r3, [r4, #20]
 8108094:	9201      	str	r2, [sp, #4]
 8108096:	9b01      	ldr	r3, [sp, #4]
 8108098:	61a3      	str	r3, [r4, #24]
 810809a:	2b00      	cmp	r3, #0
 810809c:	bf14      	ite	ne
 810809e:	2202      	movne	r2, #2
 81080a0:	2201      	moveq	r2, #1
 81080a2:	6122      	str	r2, [r4, #16]
 81080a4:	b1d5      	cbz	r5, 81080dc <__d2b+0x98>
 81080a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 81080aa:	4405      	add	r5, r0
 81080ac:	f8c9 5000 	str.w	r5, [r9]
 81080b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81080b4:	f8c8 0000 	str.w	r0, [r8]
 81080b8:	4620      	mov	r0, r4
 81080ba:	b003      	add	sp, #12
 81080bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81080c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81080c4:	e7d5      	b.n	8108072 <__d2b+0x2e>
 81080c6:	6161      	str	r1, [r4, #20]
 81080c8:	e7e5      	b.n	8108096 <__d2b+0x52>
 81080ca:	a801      	add	r0, sp, #4
 81080cc:	f7ff fce8 	bl	8107aa0 <__lo0bits>
 81080d0:	9b01      	ldr	r3, [sp, #4]
 81080d2:	6163      	str	r3, [r4, #20]
 81080d4:	2201      	movs	r2, #1
 81080d6:	6122      	str	r2, [r4, #16]
 81080d8:	3020      	adds	r0, #32
 81080da:	e7e3      	b.n	81080a4 <__d2b+0x60>
 81080dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 81080e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 81080e4:	f8c9 0000 	str.w	r0, [r9]
 81080e8:	6918      	ldr	r0, [r3, #16]
 81080ea:	f7ff fcb9 	bl	8107a60 <__hi0bits>
 81080ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 81080f2:	e7df      	b.n	81080b4 <__d2b+0x70>
 81080f4:	0810942c 	.word	0x0810942c
 81080f8:	081094bc 	.word	0x081094bc

081080fc <__ratio>:
 81080fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108100:	4688      	mov	r8, r1
 8108102:	4669      	mov	r1, sp
 8108104:	4681      	mov	r9, r0
 8108106:	f7ff ff4d 	bl	8107fa4 <__b2d>
 810810a:	a901      	add	r1, sp, #4
 810810c:	4640      	mov	r0, r8
 810810e:	ec55 4b10 	vmov	r4, r5, d0
 8108112:	f7ff ff47 	bl	8107fa4 <__b2d>
 8108116:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810811a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810811e:	eba3 0c02 	sub.w	ip, r3, r2
 8108122:	e9dd 3200 	ldrd	r3, r2, [sp]
 8108126:	1a9b      	subs	r3, r3, r2
 8108128:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810812c:	ec51 0b10 	vmov	r0, r1, d0
 8108130:	2b00      	cmp	r3, #0
 8108132:	bfd6      	itet	le
 8108134:	460a      	movle	r2, r1
 8108136:	462a      	movgt	r2, r5
 8108138:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810813c:	468b      	mov	fp, r1
 810813e:	462f      	mov	r7, r5
 8108140:	bfd4      	ite	le
 8108142:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8108146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810814a:	4620      	mov	r0, r4
 810814c:	ee10 2a10 	vmov	r2, s0
 8108150:	465b      	mov	r3, fp
 8108152:	4639      	mov	r1, r7
 8108154:	f7f8 fc02 	bl	810095c <__aeabi_ddiv>
 8108158:	ec41 0b10 	vmov	d0, r0, r1
 810815c:	b003      	add	sp, #12
 810815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08108162 <__copybits>:
 8108162:	3901      	subs	r1, #1
 8108164:	b570      	push	{r4, r5, r6, lr}
 8108166:	1149      	asrs	r1, r1, #5
 8108168:	6914      	ldr	r4, [r2, #16]
 810816a:	3101      	adds	r1, #1
 810816c:	f102 0314 	add.w	r3, r2, #20
 8108170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8108174:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8108178:	1f05      	subs	r5, r0, #4
 810817a:	42a3      	cmp	r3, r4
 810817c:	d30c      	bcc.n	8108198 <__copybits+0x36>
 810817e:	1aa3      	subs	r3, r4, r2
 8108180:	3b11      	subs	r3, #17
 8108182:	f023 0303 	bic.w	r3, r3, #3
 8108186:	3211      	adds	r2, #17
 8108188:	42a2      	cmp	r2, r4
 810818a:	bf88      	it	hi
 810818c:	2300      	movhi	r3, #0
 810818e:	4418      	add	r0, r3
 8108190:	2300      	movs	r3, #0
 8108192:	4288      	cmp	r0, r1
 8108194:	d305      	bcc.n	81081a2 <__copybits+0x40>
 8108196:	bd70      	pop	{r4, r5, r6, pc}
 8108198:	f853 6b04 	ldr.w	r6, [r3], #4
 810819c:	f845 6f04 	str.w	r6, [r5, #4]!
 81081a0:	e7eb      	b.n	810817a <__copybits+0x18>
 81081a2:	f840 3b04 	str.w	r3, [r0], #4
 81081a6:	e7f4      	b.n	8108192 <__copybits+0x30>

081081a8 <__any_on>:
 81081a8:	f100 0214 	add.w	r2, r0, #20
 81081ac:	6900      	ldr	r0, [r0, #16]
 81081ae:	114b      	asrs	r3, r1, #5
 81081b0:	4298      	cmp	r0, r3
 81081b2:	b510      	push	{r4, lr}
 81081b4:	db11      	blt.n	81081da <__any_on+0x32>
 81081b6:	dd0a      	ble.n	81081ce <__any_on+0x26>
 81081b8:	f011 011f 	ands.w	r1, r1, #31
 81081bc:	d007      	beq.n	81081ce <__any_on+0x26>
 81081be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 81081c2:	fa24 f001 	lsr.w	r0, r4, r1
 81081c6:	fa00 f101 	lsl.w	r1, r0, r1
 81081ca:	428c      	cmp	r4, r1
 81081cc:	d10b      	bne.n	81081e6 <__any_on+0x3e>
 81081ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 81081d2:	4293      	cmp	r3, r2
 81081d4:	d803      	bhi.n	81081de <__any_on+0x36>
 81081d6:	2000      	movs	r0, #0
 81081d8:	bd10      	pop	{r4, pc}
 81081da:	4603      	mov	r3, r0
 81081dc:	e7f7      	b.n	81081ce <__any_on+0x26>
 81081de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81081e2:	2900      	cmp	r1, #0
 81081e4:	d0f5      	beq.n	81081d2 <__any_on+0x2a>
 81081e6:	2001      	movs	r0, #1
 81081e8:	e7f6      	b.n	81081d8 <__any_on+0x30>

081081ea <_calloc_r>:
 81081ea:	b513      	push	{r0, r1, r4, lr}
 81081ec:	434a      	muls	r2, r1
 81081ee:	4611      	mov	r1, r2
 81081f0:	9201      	str	r2, [sp, #4]
 81081f2:	f000 f859 	bl	81082a8 <_malloc_r>
 81081f6:	4604      	mov	r4, r0
 81081f8:	b118      	cbz	r0, 8108202 <_calloc_r+0x18>
 81081fa:	9a01      	ldr	r2, [sp, #4]
 81081fc:	2100      	movs	r1, #0
 81081fe:	f7fc fbd5 	bl	81049ac <memset>
 8108202:	4620      	mov	r0, r4
 8108204:	b002      	add	sp, #8
 8108206:	bd10      	pop	{r4, pc}

08108208 <_free_r>:
 8108208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810820a:	2900      	cmp	r1, #0
 810820c:	d048      	beq.n	81082a0 <_free_r+0x98>
 810820e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108212:	9001      	str	r0, [sp, #4]
 8108214:	2b00      	cmp	r3, #0
 8108216:	f1a1 0404 	sub.w	r4, r1, #4
 810821a:	bfb8      	it	lt
 810821c:	18e4      	addlt	r4, r4, r3
 810821e:	f000 fa7d 	bl	810871c <__malloc_lock>
 8108222:	4a20      	ldr	r2, [pc, #128]	; (81082a4 <_free_r+0x9c>)
 8108224:	9801      	ldr	r0, [sp, #4]
 8108226:	6813      	ldr	r3, [r2, #0]
 8108228:	4615      	mov	r5, r2
 810822a:	b933      	cbnz	r3, 810823a <_free_r+0x32>
 810822c:	6063      	str	r3, [r4, #4]
 810822e:	6014      	str	r4, [r2, #0]
 8108230:	b003      	add	sp, #12
 8108232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8108236:	f000 ba77 	b.w	8108728 <__malloc_unlock>
 810823a:	42a3      	cmp	r3, r4
 810823c:	d90b      	bls.n	8108256 <_free_r+0x4e>
 810823e:	6821      	ldr	r1, [r4, #0]
 8108240:	1862      	adds	r2, r4, r1
 8108242:	4293      	cmp	r3, r2
 8108244:	bf04      	itt	eq
 8108246:	681a      	ldreq	r2, [r3, #0]
 8108248:	685b      	ldreq	r3, [r3, #4]
 810824a:	6063      	str	r3, [r4, #4]
 810824c:	bf04      	itt	eq
 810824e:	1852      	addeq	r2, r2, r1
 8108250:	6022      	streq	r2, [r4, #0]
 8108252:	602c      	str	r4, [r5, #0]
 8108254:	e7ec      	b.n	8108230 <_free_r+0x28>
 8108256:	461a      	mov	r2, r3
 8108258:	685b      	ldr	r3, [r3, #4]
 810825a:	b10b      	cbz	r3, 8108260 <_free_r+0x58>
 810825c:	42a3      	cmp	r3, r4
 810825e:	d9fa      	bls.n	8108256 <_free_r+0x4e>
 8108260:	6811      	ldr	r1, [r2, #0]
 8108262:	1855      	adds	r5, r2, r1
 8108264:	42a5      	cmp	r5, r4
 8108266:	d10b      	bne.n	8108280 <_free_r+0x78>
 8108268:	6824      	ldr	r4, [r4, #0]
 810826a:	4421      	add	r1, r4
 810826c:	1854      	adds	r4, r2, r1
 810826e:	42a3      	cmp	r3, r4
 8108270:	6011      	str	r1, [r2, #0]
 8108272:	d1dd      	bne.n	8108230 <_free_r+0x28>
 8108274:	681c      	ldr	r4, [r3, #0]
 8108276:	685b      	ldr	r3, [r3, #4]
 8108278:	6053      	str	r3, [r2, #4]
 810827a:	4421      	add	r1, r4
 810827c:	6011      	str	r1, [r2, #0]
 810827e:	e7d7      	b.n	8108230 <_free_r+0x28>
 8108280:	d902      	bls.n	8108288 <_free_r+0x80>
 8108282:	230c      	movs	r3, #12
 8108284:	6003      	str	r3, [r0, #0]
 8108286:	e7d3      	b.n	8108230 <_free_r+0x28>
 8108288:	6825      	ldr	r5, [r4, #0]
 810828a:	1961      	adds	r1, r4, r5
 810828c:	428b      	cmp	r3, r1
 810828e:	bf04      	itt	eq
 8108290:	6819      	ldreq	r1, [r3, #0]
 8108292:	685b      	ldreq	r3, [r3, #4]
 8108294:	6063      	str	r3, [r4, #4]
 8108296:	bf04      	itt	eq
 8108298:	1949      	addeq	r1, r1, r5
 810829a:	6021      	streq	r1, [r4, #0]
 810829c:	6054      	str	r4, [r2, #4]
 810829e:	e7c7      	b.n	8108230 <_free_r+0x28>
 81082a0:	b003      	add	sp, #12
 81082a2:	bd30      	pop	{r4, r5, pc}
 81082a4:	10000220 	.word	0x10000220

081082a8 <_malloc_r>:
 81082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81082aa:	1ccd      	adds	r5, r1, #3
 81082ac:	f025 0503 	bic.w	r5, r5, #3
 81082b0:	3508      	adds	r5, #8
 81082b2:	2d0c      	cmp	r5, #12
 81082b4:	bf38      	it	cc
 81082b6:	250c      	movcc	r5, #12
 81082b8:	2d00      	cmp	r5, #0
 81082ba:	4606      	mov	r6, r0
 81082bc:	db01      	blt.n	81082c2 <_malloc_r+0x1a>
 81082be:	42a9      	cmp	r1, r5
 81082c0:	d903      	bls.n	81082ca <_malloc_r+0x22>
 81082c2:	230c      	movs	r3, #12
 81082c4:	6033      	str	r3, [r6, #0]
 81082c6:	2000      	movs	r0, #0
 81082c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81082ca:	f000 fa27 	bl	810871c <__malloc_lock>
 81082ce:	4921      	ldr	r1, [pc, #132]	; (8108354 <_malloc_r+0xac>)
 81082d0:	680a      	ldr	r2, [r1, #0]
 81082d2:	4614      	mov	r4, r2
 81082d4:	b99c      	cbnz	r4, 81082fe <_malloc_r+0x56>
 81082d6:	4f20      	ldr	r7, [pc, #128]	; (8108358 <_malloc_r+0xb0>)
 81082d8:	683b      	ldr	r3, [r7, #0]
 81082da:	b923      	cbnz	r3, 81082e6 <_malloc_r+0x3e>
 81082dc:	4621      	mov	r1, r4
 81082de:	4630      	mov	r0, r6
 81082e0:	f000 f9a2 	bl	8108628 <_sbrk_r>
 81082e4:	6038      	str	r0, [r7, #0]
 81082e6:	4629      	mov	r1, r5
 81082e8:	4630      	mov	r0, r6
 81082ea:	f000 f99d 	bl	8108628 <_sbrk_r>
 81082ee:	1c43      	adds	r3, r0, #1
 81082f0:	d123      	bne.n	810833a <_malloc_r+0x92>
 81082f2:	230c      	movs	r3, #12
 81082f4:	6033      	str	r3, [r6, #0]
 81082f6:	4630      	mov	r0, r6
 81082f8:	f000 fa16 	bl	8108728 <__malloc_unlock>
 81082fc:	e7e3      	b.n	81082c6 <_malloc_r+0x1e>
 81082fe:	6823      	ldr	r3, [r4, #0]
 8108300:	1b5b      	subs	r3, r3, r5
 8108302:	d417      	bmi.n	8108334 <_malloc_r+0x8c>
 8108304:	2b0b      	cmp	r3, #11
 8108306:	d903      	bls.n	8108310 <_malloc_r+0x68>
 8108308:	6023      	str	r3, [r4, #0]
 810830a:	441c      	add	r4, r3
 810830c:	6025      	str	r5, [r4, #0]
 810830e:	e004      	b.n	810831a <_malloc_r+0x72>
 8108310:	6863      	ldr	r3, [r4, #4]
 8108312:	42a2      	cmp	r2, r4
 8108314:	bf0c      	ite	eq
 8108316:	600b      	streq	r3, [r1, #0]
 8108318:	6053      	strne	r3, [r2, #4]
 810831a:	4630      	mov	r0, r6
 810831c:	f000 fa04 	bl	8108728 <__malloc_unlock>
 8108320:	f104 000b 	add.w	r0, r4, #11
 8108324:	1d23      	adds	r3, r4, #4
 8108326:	f020 0007 	bic.w	r0, r0, #7
 810832a:	1ac2      	subs	r2, r0, r3
 810832c:	d0cc      	beq.n	81082c8 <_malloc_r+0x20>
 810832e:	1a1b      	subs	r3, r3, r0
 8108330:	50a3      	str	r3, [r4, r2]
 8108332:	e7c9      	b.n	81082c8 <_malloc_r+0x20>
 8108334:	4622      	mov	r2, r4
 8108336:	6864      	ldr	r4, [r4, #4]
 8108338:	e7cc      	b.n	81082d4 <_malloc_r+0x2c>
 810833a:	1cc4      	adds	r4, r0, #3
 810833c:	f024 0403 	bic.w	r4, r4, #3
 8108340:	42a0      	cmp	r0, r4
 8108342:	d0e3      	beq.n	810830c <_malloc_r+0x64>
 8108344:	1a21      	subs	r1, r4, r0
 8108346:	4630      	mov	r0, r6
 8108348:	f000 f96e 	bl	8108628 <_sbrk_r>
 810834c:	3001      	adds	r0, #1
 810834e:	d1dd      	bne.n	810830c <_malloc_r+0x64>
 8108350:	e7cf      	b.n	81082f2 <_malloc_r+0x4a>
 8108352:	bf00      	nop
 8108354:	10000220 	.word	0x10000220
 8108358:	10000224 	.word	0x10000224

0810835c <__ssputs_r>:
 810835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108360:	688e      	ldr	r6, [r1, #8]
 8108362:	429e      	cmp	r6, r3
 8108364:	4682      	mov	sl, r0
 8108366:	460c      	mov	r4, r1
 8108368:	4690      	mov	r8, r2
 810836a:	461f      	mov	r7, r3
 810836c:	d838      	bhi.n	81083e0 <__ssputs_r+0x84>
 810836e:	898a      	ldrh	r2, [r1, #12]
 8108370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8108374:	d032      	beq.n	81083dc <__ssputs_r+0x80>
 8108376:	6825      	ldr	r5, [r4, #0]
 8108378:	6909      	ldr	r1, [r1, #16]
 810837a:	eba5 0901 	sub.w	r9, r5, r1
 810837e:	6965      	ldr	r5, [r4, #20]
 8108380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8108384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8108388:	3301      	adds	r3, #1
 810838a:	444b      	add	r3, r9
 810838c:	106d      	asrs	r5, r5, #1
 810838e:	429d      	cmp	r5, r3
 8108390:	bf38      	it	cc
 8108392:	461d      	movcc	r5, r3
 8108394:	0553      	lsls	r3, r2, #21
 8108396:	d531      	bpl.n	81083fc <__ssputs_r+0xa0>
 8108398:	4629      	mov	r1, r5
 810839a:	f7ff ff85 	bl	81082a8 <_malloc_r>
 810839e:	4606      	mov	r6, r0
 81083a0:	b950      	cbnz	r0, 81083b8 <__ssputs_r+0x5c>
 81083a2:	230c      	movs	r3, #12
 81083a4:	f8ca 3000 	str.w	r3, [sl]
 81083a8:	89a3      	ldrh	r3, [r4, #12]
 81083aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81083ae:	81a3      	strh	r3, [r4, #12]
 81083b0:	f04f 30ff 	mov.w	r0, #4294967295
 81083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81083b8:	6921      	ldr	r1, [r4, #16]
 81083ba:	464a      	mov	r2, r9
 81083bc:	f7fc fae8 	bl	8104990 <memcpy>
 81083c0:	89a3      	ldrh	r3, [r4, #12]
 81083c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81083c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81083ca:	81a3      	strh	r3, [r4, #12]
 81083cc:	6126      	str	r6, [r4, #16]
 81083ce:	6165      	str	r5, [r4, #20]
 81083d0:	444e      	add	r6, r9
 81083d2:	eba5 0509 	sub.w	r5, r5, r9
 81083d6:	6026      	str	r6, [r4, #0]
 81083d8:	60a5      	str	r5, [r4, #8]
 81083da:	463e      	mov	r6, r7
 81083dc:	42be      	cmp	r6, r7
 81083de:	d900      	bls.n	81083e2 <__ssputs_r+0x86>
 81083e0:	463e      	mov	r6, r7
 81083e2:	4632      	mov	r2, r6
 81083e4:	6820      	ldr	r0, [r4, #0]
 81083e6:	4641      	mov	r1, r8
 81083e8:	f000 f97e 	bl	81086e8 <memmove>
 81083ec:	68a3      	ldr	r3, [r4, #8]
 81083ee:	6822      	ldr	r2, [r4, #0]
 81083f0:	1b9b      	subs	r3, r3, r6
 81083f2:	4432      	add	r2, r6
 81083f4:	60a3      	str	r3, [r4, #8]
 81083f6:	6022      	str	r2, [r4, #0]
 81083f8:	2000      	movs	r0, #0
 81083fa:	e7db      	b.n	81083b4 <__ssputs_r+0x58>
 81083fc:	462a      	mov	r2, r5
 81083fe:	f000 f999 	bl	8108734 <_realloc_r>
 8108402:	4606      	mov	r6, r0
 8108404:	2800      	cmp	r0, #0
 8108406:	d1e1      	bne.n	81083cc <__ssputs_r+0x70>
 8108408:	6921      	ldr	r1, [r4, #16]
 810840a:	4650      	mov	r0, sl
 810840c:	f7ff fefc 	bl	8108208 <_free_r>
 8108410:	e7c7      	b.n	81083a2 <__ssputs_r+0x46>
	...

08108414 <_svfiprintf_r>:
 8108414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108418:	4698      	mov	r8, r3
 810841a:	898b      	ldrh	r3, [r1, #12]
 810841c:	061b      	lsls	r3, r3, #24
 810841e:	b09d      	sub	sp, #116	; 0x74
 8108420:	4607      	mov	r7, r0
 8108422:	460d      	mov	r5, r1
 8108424:	4614      	mov	r4, r2
 8108426:	d50e      	bpl.n	8108446 <_svfiprintf_r+0x32>
 8108428:	690b      	ldr	r3, [r1, #16]
 810842a:	b963      	cbnz	r3, 8108446 <_svfiprintf_r+0x32>
 810842c:	2140      	movs	r1, #64	; 0x40
 810842e:	f7ff ff3b 	bl	81082a8 <_malloc_r>
 8108432:	6028      	str	r0, [r5, #0]
 8108434:	6128      	str	r0, [r5, #16]
 8108436:	b920      	cbnz	r0, 8108442 <_svfiprintf_r+0x2e>
 8108438:	230c      	movs	r3, #12
 810843a:	603b      	str	r3, [r7, #0]
 810843c:	f04f 30ff 	mov.w	r0, #4294967295
 8108440:	e0d1      	b.n	81085e6 <_svfiprintf_r+0x1d2>
 8108442:	2340      	movs	r3, #64	; 0x40
 8108444:	616b      	str	r3, [r5, #20]
 8108446:	2300      	movs	r3, #0
 8108448:	9309      	str	r3, [sp, #36]	; 0x24
 810844a:	2320      	movs	r3, #32
 810844c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8108450:	f8cd 800c 	str.w	r8, [sp, #12]
 8108454:	2330      	movs	r3, #48	; 0x30
 8108456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8108600 <_svfiprintf_r+0x1ec>
 810845a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810845e:	f04f 0901 	mov.w	r9, #1
 8108462:	4623      	mov	r3, r4
 8108464:	469a      	mov	sl, r3
 8108466:	f813 2b01 	ldrb.w	r2, [r3], #1
 810846a:	b10a      	cbz	r2, 8108470 <_svfiprintf_r+0x5c>
 810846c:	2a25      	cmp	r2, #37	; 0x25
 810846e:	d1f9      	bne.n	8108464 <_svfiprintf_r+0x50>
 8108470:	ebba 0b04 	subs.w	fp, sl, r4
 8108474:	d00b      	beq.n	810848e <_svfiprintf_r+0x7a>
 8108476:	465b      	mov	r3, fp
 8108478:	4622      	mov	r2, r4
 810847a:	4629      	mov	r1, r5
 810847c:	4638      	mov	r0, r7
 810847e:	f7ff ff6d 	bl	810835c <__ssputs_r>
 8108482:	3001      	adds	r0, #1
 8108484:	f000 80aa 	beq.w	81085dc <_svfiprintf_r+0x1c8>
 8108488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810848a:	445a      	add	r2, fp
 810848c:	9209      	str	r2, [sp, #36]	; 0x24
 810848e:	f89a 3000 	ldrb.w	r3, [sl]
 8108492:	2b00      	cmp	r3, #0
 8108494:	f000 80a2 	beq.w	81085dc <_svfiprintf_r+0x1c8>
 8108498:	2300      	movs	r3, #0
 810849a:	f04f 32ff 	mov.w	r2, #4294967295
 810849e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81084a2:	f10a 0a01 	add.w	sl, sl, #1
 81084a6:	9304      	str	r3, [sp, #16]
 81084a8:	9307      	str	r3, [sp, #28]
 81084aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81084ae:	931a      	str	r3, [sp, #104]	; 0x68
 81084b0:	4654      	mov	r4, sl
 81084b2:	2205      	movs	r2, #5
 81084b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81084b8:	4851      	ldr	r0, [pc, #324]	; (8108600 <_svfiprintf_r+0x1ec>)
 81084ba:	f7f7 ff19 	bl	81002f0 <memchr>
 81084be:	9a04      	ldr	r2, [sp, #16]
 81084c0:	b9d8      	cbnz	r0, 81084fa <_svfiprintf_r+0xe6>
 81084c2:	06d0      	lsls	r0, r2, #27
 81084c4:	bf44      	itt	mi
 81084c6:	2320      	movmi	r3, #32
 81084c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81084cc:	0711      	lsls	r1, r2, #28
 81084ce:	bf44      	itt	mi
 81084d0:	232b      	movmi	r3, #43	; 0x2b
 81084d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81084d6:	f89a 3000 	ldrb.w	r3, [sl]
 81084da:	2b2a      	cmp	r3, #42	; 0x2a
 81084dc:	d015      	beq.n	810850a <_svfiprintf_r+0xf6>
 81084de:	9a07      	ldr	r2, [sp, #28]
 81084e0:	4654      	mov	r4, sl
 81084e2:	2000      	movs	r0, #0
 81084e4:	f04f 0c0a 	mov.w	ip, #10
 81084e8:	4621      	mov	r1, r4
 81084ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 81084ee:	3b30      	subs	r3, #48	; 0x30
 81084f0:	2b09      	cmp	r3, #9
 81084f2:	d94e      	bls.n	8108592 <_svfiprintf_r+0x17e>
 81084f4:	b1b0      	cbz	r0, 8108524 <_svfiprintf_r+0x110>
 81084f6:	9207      	str	r2, [sp, #28]
 81084f8:	e014      	b.n	8108524 <_svfiprintf_r+0x110>
 81084fa:	eba0 0308 	sub.w	r3, r0, r8
 81084fe:	fa09 f303 	lsl.w	r3, r9, r3
 8108502:	4313      	orrs	r3, r2
 8108504:	9304      	str	r3, [sp, #16]
 8108506:	46a2      	mov	sl, r4
 8108508:	e7d2      	b.n	81084b0 <_svfiprintf_r+0x9c>
 810850a:	9b03      	ldr	r3, [sp, #12]
 810850c:	1d19      	adds	r1, r3, #4
 810850e:	681b      	ldr	r3, [r3, #0]
 8108510:	9103      	str	r1, [sp, #12]
 8108512:	2b00      	cmp	r3, #0
 8108514:	bfbb      	ittet	lt
 8108516:	425b      	neglt	r3, r3
 8108518:	f042 0202 	orrlt.w	r2, r2, #2
 810851c:	9307      	strge	r3, [sp, #28]
 810851e:	9307      	strlt	r3, [sp, #28]
 8108520:	bfb8      	it	lt
 8108522:	9204      	strlt	r2, [sp, #16]
 8108524:	7823      	ldrb	r3, [r4, #0]
 8108526:	2b2e      	cmp	r3, #46	; 0x2e
 8108528:	d10c      	bne.n	8108544 <_svfiprintf_r+0x130>
 810852a:	7863      	ldrb	r3, [r4, #1]
 810852c:	2b2a      	cmp	r3, #42	; 0x2a
 810852e:	d135      	bne.n	810859c <_svfiprintf_r+0x188>
 8108530:	9b03      	ldr	r3, [sp, #12]
 8108532:	1d1a      	adds	r2, r3, #4
 8108534:	681b      	ldr	r3, [r3, #0]
 8108536:	9203      	str	r2, [sp, #12]
 8108538:	2b00      	cmp	r3, #0
 810853a:	bfb8      	it	lt
 810853c:	f04f 33ff 	movlt.w	r3, #4294967295
 8108540:	3402      	adds	r4, #2
 8108542:	9305      	str	r3, [sp, #20]
 8108544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8108610 <_svfiprintf_r+0x1fc>
 8108548:	7821      	ldrb	r1, [r4, #0]
 810854a:	2203      	movs	r2, #3
 810854c:	4650      	mov	r0, sl
 810854e:	f7f7 fecf 	bl	81002f0 <memchr>
 8108552:	b140      	cbz	r0, 8108566 <_svfiprintf_r+0x152>
 8108554:	2340      	movs	r3, #64	; 0x40
 8108556:	eba0 000a 	sub.w	r0, r0, sl
 810855a:	fa03 f000 	lsl.w	r0, r3, r0
 810855e:	9b04      	ldr	r3, [sp, #16]
 8108560:	4303      	orrs	r3, r0
 8108562:	3401      	adds	r4, #1
 8108564:	9304      	str	r3, [sp, #16]
 8108566:	f814 1b01 	ldrb.w	r1, [r4], #1
 810856a:	4826      	ldr	r0, [pc, #152]	; (8108604 <_svfiprintf_r+0x1f0>)
 810856c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8108570:	2206      	movs	r2, #6
 8108572:	f7f7 febd 	bl	81002f0 <memchr>
 8108576:	2800      	cmp	r0, #0
 8108578:	d038      	beq.n	81085ec <_svfiprintf_r+0x1d8>
 810857a:	4b23      	ldr	r3, [pc, #140]	; (8108608 <_svfiprintf_r+0x1f4>)
 810857c:	bb1b      	cbnz	r3, 81085c6 <_svfiprintf_r+0x1b2>
 810857e:	9b03      	ldr	r3, [sp, #12]
 8108580:	3307      	adds	r3, #7
 8108582:	f023 0307 	bic.w	r3, r3, #7
 8108586:	3308      	adds	r3, #8
 8108588:	9303      	str	r3, [sp, #12]
 810858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810858c:	4433      	add	r3, r6
 810858e:	9309      	str	r3, [sp, #36]	; 0x24
 8108590:	e767      	b.n	8108462 <_svfiprintf_r+0x4e>
 8108592:	fb0c 3202 	mla	r2, ip, r2, r3
 8108596:	460c      	mov	r4, r1
 8108598:	2001      	movs	r0, #1
 810859a:	e7a5      	b.n	81084e8 <_svfiprintf_r+0xd4>
 810859c:	2300      	movs	r3, #0
 810859e:	3401      	adds	r4, #1
 81085a0:	9305      	str	r3, [sp, #20]
 81085a2:	4619      	mov	r1, r3
 81085a4:	f04f 0c0a 	mov.w	ip, #10
 81085a8:	4620      	mov	r0, r4
 81085aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 81085ae:	3a30      	subs	r2, #48	; 0x30
 81085b0:	2a09      	cmp	r2, #9
 81085b2:	d903      	bls.n	81085bc <_svfiprintf_r+0x1a8>
 81085b4:	2b00      	cmp	r3, #0
 81085b6:	d0c5      	beq.n	8108544 <_svfiprintf_r+0x130>
 81085b8:	9105      	str	r1, [sp, #20]
 81085ba:	e7c3      	b.n	8108544 <_svfiprintf_r+0x130>
 81085bc:	fb0c 2101 	mla	r1, ip, r1, r2
 81085c0:	4604      	mov	r4, r0
 81085c2:	2301      	movs	r3, #1
 81085c4:	e7f0      	b.n	81085a8 <_svfiprintf_r+0x194>
 81085c6:	ab03      	add	r3, sp, #12
 81085c8:	9300      	str	r3, [sp, #0]
 81085ca:	462a      	mov	r2, r5
 81085cc:	4b0f      	ldr	r3, [pc, #60]	; (810860c <_svfiprintf_r+0x1f8>)
 81085ce:	a904      	add	r1, sp, #16
 81085d0:	4638      	mov	r0, r7
 81085d2:	f7fc fa93 	bl	8104afc <_printf_float>
 81085d6:	1c42      	adds	r2, r0, #1
 81085d8:	4606      	mov	r6, r0
 81085da:	d1d6      	bne.n	810858a <_svfiprintf_r+0x176>
 81085dc:	89ab      	ldrh	r3, [r5, #12]
 81085de:	065b      	lsls	r3, r3, #25
 81085e0:	f53f af2c 	bmi.w	810843c <_svfiprintf_r+0x28>
 81085e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 81085e6:	b01d      	add	sp, #116	; 0x74
 81085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81085ec:	ab03      	add	r3, sp, #12
 81085ee:	9300      	str	r3, [sp, #0]
 81085f0:	462a      	mov	r2, r5
 81085f2:	4b06      	ldr	r3, [pc, #24]	; (810860c <_svfiprintf_r+0x1f8>)
 81085f4:	a904      	add	r1, sp, #16
 81085f6:	4638      	mov	r0, r7
 81085f8:	f7fc fd24 	bl	8105044 <_printf_i>
 81085fc:	e7eb      	b.n	81085d6 <_svfiprintf_r+0x1c2>
 81085fe:	bf00      	nop
 8108600:	0810961c 	.word	0x0810961c
 8108604:	08109626 	.word	0x08109626
 8108608:	08104afd 	.word	0x08104afd
 810860c:	0810835d 	.word	0x0810835d
 8108610:	08109622 	.word	0x08109622
 8108614:	00000000 	.word	0x00000000

08108618 <nan>:
 8108618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8108620 <nan+0x8>
 810861c:	4770      	bx	lr
 810861e:	bf00      	nop
 8108620:	00000000 	.word	0x00000000
 8108624:	7ff80000 	.word	0x7ff80000

08108628 <_sbrk_r>:
 8108628:	b538      	push	{r3, r4, r5, lr}
 810862a:	4d06      	ldr	r5, [pc, #24]	; (8108644 <_sbrk_r+0x1c>)
 810862c:	2300      	movs	r3, #0
 810862e:	4604      	mov	r4, r0
 8108630:	4608      	mov	r0, r1
 8108632:	602b      	str	r3, [r5, #0]
 8108634:	f7f8 ff4a 	bl	81014cc <_sbrk>
 8108638:	1c43      	adds	r3, r0, #1
 810863a:	d102      	bne.n	8108642 <_sbrk_r+0x1a>
 810863c:	682b      	ldr	r3, [r5, #0]
 810863e:	b103      	cbz	r3, 8108642 <_sbrk_r+0x1a>
 8108640:	6023      	str	r3, [r4, #0]
 8108642:	bd38      	pop	{r3, r4, r5, pc}
 8108644:	10000350 	.word	0x10000350

08108648 <strncmp>:
 8108648:	b510      	push	{r4, lr}
 810864a:	b16a      	cbz	r2, 8108668 <strncmp+0x20>
 810864c:	3901      	subs	r1, #1
 810864e:	1884      	adds	r4, r0, r2
 8108650:	f810 3b01 	ldrb.w	r3, [r0], #1
 8108654:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8108658:	4293      	cmp	r3, r2
 810865a:	d103      	bne.n	8108664 <strncmp+0x1c>
 810865c:	42a0      	cmp	r0, r4
 810865e:	d001      	beq.n	8108664 <strncmp+0x1c>
 8108660:	2b00      	cmp	r3, #0
 8108662:	d1f5      	bne.n	8108650 <strncmp+0x8>
 8108664:	1a98      	subs	r0, r3, r2
 8108666:	bd10      	pop	{r4, pc}
 8108668:	4610      	mov	r0, r2
 810866a:	e7fc      	b.n	8108666 <strncmp+0x1e>

0810866c <__ascii_wctomb>:
 810866c:	b149      	cbz	r1, 8108682 <__ascii_wctomb+0x16>
 810866e:	2aff      	cmp	r2, #255	; 0xff
 8108670:	bf85      	ittet	hi
 8108672:	238a      	movhi	r3, #138	; 0x8a
 8108674:	6003      	strhi	r3, [r0, #0]
 8108676:	700a      	strbls	r2, [r1, #0]
 8108678:	f04f 30ff 	movhi.w	r0, #4294967295
 810867c:	bf98      	it	ls
 810867e:	2001      	movls	r0, #1
 8108680:	4770      	bx	lr
 8108682:	4608      	mov	r0, r1
 8108684:	4770      	bx	lr
	...

08108688 <__assert_func>:
 8108688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810868a:	4614      	mov	r4, r2
 810868c:	461a      	mov	r2, r3
 810868e:	4b09      	ldr	r3, [pc, #36]	; (81086b4 <__assert_func+0x2c>)
 8108690:	681b      	ldr	r3, [r3, #0]
 8108692:	4605      	mov	r5, r0
 8108694:	68d8      	ldr	r0, [r3, #12]
 8108696:	b14c      	cbz	r4, 81086ac <__assert_func+0x24>
 8108698:	4b07      	ldr	r3, [pc, #28]	; (81086b8 <__assert_func+0x30>)
 810869a:	9100      	str	r1, [sp, #0]
 810869c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81086a0:	4906      	ldr	r1, [pc, #24]	; (81086bc <__assert_func+0x34>)
 81086a2:	462b      	mov	r3, r5
 81086a4:	f000 f80e 	bl	81086c4 <fiprintf>
 81086a8:	f000 fa84 	bl	8108bb4 <abort>
 81086ac:	4b04      	ldr	r3, [pc, #16]	; (81086c0 <__assert_func+0x38>)
 81086ae:	461c      	mov	r4, r3
 81086b0:	e7f3      	b.n	810869a <__assert_func+0x12>
 81086b2:	bf00      	nop
 81086b4:	10000010 	.word	0x10000010
 81086b8:	0810962d 	.word	0x0810962d
 81086bc:	0810963a 	.word	0x0810963a
 81086c0:	08109668 	.word	0x08109668

081086c4 <fiprintf>:
 81086c4:	b40e      	push	{r1, r2, r3}
 81086c6:	b503      	push	{r0, r1, lr}
 81086c8:	4601      	mov	r1, r0
 81086ca:	ab03      	add	r3, sp, #12
 81086cc:	4805      	ldr	r0, [pc, #20]	; (81086e4 <fiprintf+0x20>)
 81086ce:	f853 2b04 	ldr.w	r2, [r3], #4
 81086d2:	6800      	ldr	r0, [r0, #0]
 81086d4:	9301      	str	r3, [sp, #4]
 81086d6:	f000 f87d 	bl	81087d4 <_vfiprintf_r>
 81086da:	b002      	add	sp, #8
 81086dc:	f85d eb04 	ldr.w	lr, [sp], #4
 81086e0:	b003      	add	sp, #12
 81086e2:	4770      	bx	lr
 81086e4:	10000010 	.word	0x10000010

081086e8 <memmove>:
 81086e8:	4288      	cmp	r0, r1
 81086ea:	b510      	push	{r4, lr}
 81086ec:	eb01 0402 	add.w	r4, r1, r2
 81086f0:	d902      	bls.n	81086f8 <memmove+0x10>
 81086f2:	4284      	cmp	r4, r0
 81086f4:	4623      	mov	r3, r4
 81086f6:	d807      	bhi.n	8108708 <memmove+0x20>
 81086f8:	1e43      	subs	r3, r0, #1
 81086fa:	42a1      	cmp	r1, r4
 81086fc:	d008      	beq.n	8108710 <memmove+0x28>
 81086fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8108702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8108706:	e7f8      	b.n	81086fa <memmove+0x12>
 8108708:	4402      	add	r2, r0
 810870a:	4601      	mov	r1, r0
 810870c:	428a      	cmp	r2, r1
 810870e:	d100      	bne.n	8108712 <memmove+0x2a>
 8108710:	bd10      	pop	{r4, pc}
 8108712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8108716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810871a:	e7f7      	b.n	810870c <memmove+0x24>

0810871c <__malloc_lock>:
 810871c:	4801      	ldr	r0, [pc, #4]	; (8108724 <__malloc_lock+0x8>)
 810871e:	f000 bc09 	b.w	8108f34 <__retarget_lock_acquire_recursive>
 8108722:	bf00      	nop
 8108724:	10000358 	.word	0x10000358

08108728 <__malloc_unlock>:
 8108728:	4801      	ldr	r0, [pc, #4]	; (8108730 <__malloc_unlock+0x8>)
 810872a:	f000 bc04 	b.w	8108f36 <__retarget_lock_release_recursive>
 810872e:	bf00      	nop
 8108730:	10000358 	.word	0x10000358

08108734 <_realloc_r>:
 8108734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108736:	4607      	mov	r7, r0
 8108738:	4614      	mov	r4, r2
 810873a:	460e      	mov	r6, r1
 810873c:	b921      	cbnz	r1, 8108748 <_realloc_r+0x14>
 810873e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8108742:	4611      	mov	r1, r2
 8108744:	f7ff bdb0 	b.w	81082a8 <_malloc_r>
 8108748:	b922      	cbnz	r2, 8108754 <_realloc_r+0x20>
 810874a:	f7ff fd5d 	bl	8108208 <_free_r>
 810874e:	4625      	mov	r5, r4
 8108750:	4628      	mov	r0, r5
 8108752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108754:	f000 fc54 	bl	8109000 <_malloc_usable_size_r>
 8108758:	42a0      	cmp	r0, r4
 810875a:	d20f      	bcs.n	810877c <_realloc_r+0x48>
 810875c:	4621      	mov	r1, r4
 810875e:	4638      	mov	r0, r7
 8108760:	f7ff fda2 	bl	81082a8 <_malloc_r>
 8108764:	4605      	mov	r5, r0
 8108766:	2800      	cmp	r0, #0
 8108768:	d0f2      	beq.n	8108750 <_realloc_r+0x1c>
 810876a:	4631      	mov	r1, r6
 810876c:	4622      	mov	r2, r4
 810876e:	f7fc f90f 	bl	8104990 <memcpy>
 8108772:	4631      	mov	r1, r6
 8108774:	4638      	mov	r0, r7
 8108776:	f7ff fd47 	bl	8108208 <_free_r>
 810877a:	e7e9      	b.n	8108750 <_realloc_r+0x1c>
 810877c:	4635      	mov	r5, r6
 810877e:	e7e7      	b.n	8108750 <_realloc_r+0x1c>

08108780 <__sfputc_r>:
 8108780:	6893      	ldr	r3, [r2, #8]
 8108782:	3b01      	subs	r3, #1
 8108784:	2b00      	cmp	r3, #0
 8108786:	b410      	push	{r4}
 8108788:	6093      	str	r3, [r2, #8]
 810878a:	da08      	bge.n	810879e <__sfputc_r+0x1e>
 810878c:	6994      	ldr	r4, [r2, #24]
 810878e:	42a3      	cmp	r3, r4
 8108790:	db01      	blt.n	8108796 <__sfputc_r+0x16>
 8108792:	290a      	cmp	r1, #10
 8108794:	d103      	bne.n	810879e <__sfputc_r+0x1e>
 8108796:	f85d 4b04 	ldr.w	r4, [sp], #4
 810879a:	f000 b94b 	b.w	8108a34 <__swbuf_r>
 810879e:	6813      	ldr	r3, [r2, #0]
 81087a0:	1c58      	adds	r0, r3, #1
 81087a2:	6010      	str	r0, [r2, #0]
 81087a4:	7019      	strb	r1, [r3, #0]
 81087a6:	4608      	mov	r0, r1
 81087a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 81087ac:	4770      	bx	lr

081087ae <__sfputs_r>:
 81087ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81087b0:	4606      	mov	r6, r0
 81087b2:	460f      	mov	r7, r1
 81087b4:	4614      	mov	r4, r2
 81087b6:	18d5      	adds	r5, r2, r3
 81087b8:	42ac      	cmp	r4, r5
 81087ba:	d101      	bne.n	81087c0 <__sfputs_r+0x12>
 81087bc:	2000      	movs	r0, #0
 81087be:	e007      	b.n	81087d0 <__sfputs_r+0x22>
 81087c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 81087c4:	463a      	mov	r2, r7
 81087c6:	4630      	mov	r0, r6
 81087c8:	f7ff ffda 	bl	8108780 <__sfputc_r>
 81087cc:	1c43      	adds	r3, r0, #1
 81087ce:	d1f3      	bne.n	81087b8 <__sfputs_r+0xa>
 81087d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081087d4 <_vfiprintf_r>:
 81087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81087d8:	460d      	mov	r5, r1
 81087da:	b09d      	sub	sp, #116	; 0x74
 81087dc:	4614      	mov	r4, r2
 81087de:	4698      	mov	r8, r3
 81087e0:	4606      	mov	r6, r0
 81087e2:	b118      	cbz	r0, 81087ec <_vfiprintf_r+0x18>
 81087e4:	6983      	ldr	r3, [r0, #24]
 81087e6:	b90b      	cbnz	r3, 81087ec <_vfiprintf_r+0x18>
 81087e8:	f000 fb06 	bl	8108df8 <__sinit>
 81087ec:	4b89      	ldr	r3, [pc, #548]	; (8108a14 <_vfiprintf_r+0x240>)
 81087ee:	429d      	cmp	r5, r3
 81087f0:	d11b      	bne.n	810882a <_vfiprintf_r+0x56>
 81087f2:	6875      	ldr	r5, [r6, #4]
 81087f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81087f6:	07d9      	lsls	r1, r3, #31
 81087f8:	d405      	bmi.n	8108806 <_vfiprintf_r+0x32>
 81087fa:	89ab      	ldrh	r3, [r5, #12]
 81087fc:	059a      	lsls	r2, r3, #22
 81087fe:	d402      	bmi.n	8108806 <_vfiprintf_r+0x32>
 8108800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8108802:	f000 fb97 	bl	8108f34 <__retarget_lock_acquire_recursive>
 8108806:	89ab      	ldrh	r3, [r5, #12]
 8108808:	071b      	lsls	r3, r3, #28
 810880a:	d501      	bpl.n	8108810 <_vfiprintf_r+0x3c>
 810880c:	692b      	ldr	r3, [r5, #16]
 810880e:	b9eb      	cbnz	r3, 810884c <_vfiprintf_r+0x78>
 8108810:	4629      	mov	r1, r5
 8108812:	4630      	mov	r0, r6
 8108814:	f000 f960 	bl	8108ad8 <__swsetup_r>
 8108818:	b1c0      	cbz	r0, 810884c <_vfiprintf_r+0x78>
 810881a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810881c:	07dc      	lsls	r4, r3, #31
 810881e:	d50e      	bpl.n	810883e <_vfiprintf_r+0x6a>
 8108820:	f04f 30ff 	mov.w	r0, #4294967295
 8108824:	b01d      	add	sp, #116	; 0x74
 8108826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810882a:	4b7b      	ldr	r3, [pc, #492]	; (8108a18 <_vfiprintf_r+0x244>)
 810882c:	429d      	cmp	r5, r3
 810882e:	d101      	bne.n	8108834 <_vfiprintf_r+0x60>
 8108830:	68b5      	ldr	r5, [r6, #8]
 8108832:	e7df      	b.n	81087f4 <_vfiprintf_r+0x20>
 8108834:	4b79      	ldr	r3, [pc, #484]	; (8108a1c <_vfiprintf_r+0x248>)
 8108836:	429d      	cmp	r5, r3
 8108838:	bf08      	it	eq
 810883a:	68f5      	ldreq	r5, [r6, #12]
 810883c:	e7da      	b.n	81087f4 <_vfiprintf_r+0x20>
 810883e:	89ab      	ldrh	r3, [r5, #12]
 8108840:	0598      	lsls	r0, r3, #22
 8108842:	d4ed      	bmi.n	8108820 <_vfiprintf_r+0x4c>
 8108844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8108846:	f000 fb76 	bl	8108f36 <__retarget_lock_release_recursive>
 810884a:	e7e9      	b.n	8108820 <_vfiprintf_r+0x4c>
 810884c:	2300      	movs	r3, #0
 810884e:	9309      	str	r3, [sp, #36]	; 0x24
 8108850:	2320      	movs	r3, #32
 8108852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8108856:	f8cd 800c 	str.w	r8, [sp, #12]
 810885a:	2330      	movs	r3, #48	; 0x30
 810885c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8108a20 <_vfiprintf_r+0x24c>
 8108860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8108864:	f04f 0901 	mov.w	r9, #1
 8108868:	4623      	mov	r3, r4
 810886a:	469a      	mov	sl, r3
 810886c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108870:	b10a      	cbz	r2, 8108876 <_vfiprintf_r+0xa2>
 8108872:	2a25      	cmp	r2, #37	; 0x25
 8108874:	d1f9      	bne.n	810886a <_vfiprintf_r+0x96>
 8108876:	ebba 0b04 	subs.w	fp, sl, r4
 810887a:	d00b      	beq.n	8108894 <_vfiprintf_r+0xc0>
 810887c:	465b      	mov	r3, fp
 810887e:	4622      	mov	r2, r4
 8108880:	4629      	mov	r1, r5
 8108882:	4630      	mov	r0, r6
 8108884:	f7ff ff93 	bl	81087ae <__sfputs_r>
 8108888:	3001      	adds	r0, #1
 810888a:	f000 80aa 	beq.w	81089e2 <_vfiprintf_r+0x20e>
 810888e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108890:	445a      	add	r2, fp
 8108892:	9209      	str	r2, [sp, #36]	; 0x24
 8108894:	f89a 3000 	ldrb.w	r3, [sl]
 8108898:	2b00      	cmp	r3, #0
 810889a:	f000 80a2 	beq.w	81089e2 <_vfiprintf_r+0x20e>
 810889e:	2300      	movs	r3, #0
 81088a0:	f04f 32ff 	mov.w	r2, #4294967295
 81088a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81088a8:	f10a 0a01 	add.w	sl, sl, #1
 81088ac:	9304      	str	r3, [sp, #16]
 81088ae:	9307      	str	r3, [sp, #28]
 81088b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81088b4:	931a      	str	r3, [sp, #104]	; 0x68
 81088b6:	4654      	mov	r4, sl
 81088b8:	2205      	movs	r2, #5
 81088ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 81088be:	4858      	ldr	r0, [pc, #352]	; (8108a20 <_vfiprintf_r+0x24c>)
 81088c0:	f7f7 fd16 	bl	81002f0 <memchr>
 81088c4:	9a04      	ldr	r2, [sp, #16]
 81088c6:	b9d8      	cbnz	r0, 8108900 <_vfiprintf_r+0x12c>
 81088c8:	06d1      	lsls	r1, r2, #27
 81088ca:	bf44      	itt	mi
 81088cc:	2320      	movmi	r3, #32
 81088ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81088d2:	0713      	lsls	r3, r2, #28
 81088d4:	bf44      	itt	mi
 81088d6:	232b      	movmi	r3, #43	; 0x2b
 81088d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81088dc:	f89a 3000 	ldrb.w	r3, [sl]
 81088e0:	2b2a      	cmp	r3, #42	; 0x2a
 81088e2:	d015      	beq.n	8108910 <_vfiprintf_r+0x13c>
 81088e4:	9a07      	ldr	r2, [sp, #28]
 81088e6:	4654      	mov	r4, sl
 81088e8:	2000      	movs	r0, #0
 81088ea:	f04f 0c0a 	mov.w	ip, #10
 81088ee:	4621      	mov	r1, r4
 81088f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 81088f4:	3b30      	subs	r3, #48	; 0x30
 81088f6:	2b09      	cmp	r3, #9
 81088f8:	d94e      	bls.n	8108998 <_vfiprintf_r+0x1c4>
 81088fa:	b1b0      	cbz	r0, 810892a <_vfiprintf_r+0x156>
 81088fc:	9207      	str	r2, [sp, #28]
 81088fe:	e014      	b.n	810892a <_vfiprintf_r+0x156>
 8108900:	eba0 0308 	sub.w	r3, r0, r8
 8108904:	fa09 f303 	lsl.w	r3, r9, r3
 8108908:	4313      	orrs	r3, r2
 810890a:	9304      	str	r3, [sp, #16]
 810890c:	46a2      	mov	sl, r4
 810890e:	e7d2      	b.n	81088b6 <_vfiprintf_r+0xe2>
 8108910:	9b03      	ldr	r3, [sp, #12]
 8108912:	1d19      	adds	r1, r3, #4
 8108914:	681b      	ldr	r3, [r3, #0]
 8108916:	9103      	str	r1, [sp, #12]
 8108918:	2b00      	cmp	r3, #0
 810891a:	bfbb      	ittet	lt
 810891c:	425b      	neglt	r3, r3
 810891e:	f042 0202 	orrlt.w	r2, r2, #2
 8108922:	9307      	strge	r3, [sp, #28]
 8108924:	9307      	strlt	r3, [sp, #28]
 8108926:	bfb8      	it	lt
 8108928:	9204      	strlt	r2, [sp, #16]
 810892a:	7823      	ldrb	r3, [r4, #0]
 810892c:	2b2e      	cmp	r3, #46	; 0x2e
 810892e:	d10c      	bne.n	810894a <_vfiprintf_r+0x176>
 8108930:	7863      	ldrb	r3, [r4, #1]
 8108932:	2b2a      	cmp	r3, #42	; 0x2a
 8108934:	d135      	bne.n	81089a2 <_vfiprintf_r+0x1ce>
 8108936:	9b03      	ldr	r3, [sp, #12]
 8108938:	1d1a      	adds	r2, r3, #4
 810893a:	681b      	ldr	r3, [r3, #0]
 810893c:	9203      	str	r2, [sp, #12]
 810893e:	2b00      	cmp	r3, #0
 8108940:	bfb8      	it	lt
 8108942:	f04f 33ff 	movlt.w	r3, #4294967295
 8108946:	3402      	adds	r4, #2
 8108948:	9305      	str	r3, [sp, #20]
 810894a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8108a30 <_vfiprintf_r+0x25c>
 810894e:	7821      	ldrb	r1, [r4, #0]
 8108950:	2203      	movs	r2, #3
 8108952:	4650      	mov	r0, sl
 8108954:	f7f7 fccc 	bl	81002f0 <memchr>
 8108958:	b140      	cbz	r0, 810896c <_vfiprintf_r+0x198>
 810895a:	2340      	movs	r3, #64	; 0x40
 810895c:	eba0 000a 	sub.w	r0, r0, sl
 8108960:	fa03 f000 	lsl.w	r0, r3, r0
 8108964:	9b04      	ldr	r3, [sp, #16]
 8108966:	4303      	orrs	r3, r0
 8108968:	3401      	adds	r4, #1
 810896a:	9304      	str	r3, [sp, #16]
 810896c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108970:	482c      	ldr	r0, [pc, #176]	; (8108a24 <_vfiprintf_r+0x250>)
 8108972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8108976:	2206      	movs	r2, #6
 8108978:	f7f7 fcba 	bl	81002f0 <memchr>
 810897c:	2800      	cmp	r0, #0
 810897e:	d03f      	beq.n	8108a00 <_vfiprintf_r+0x22c>
 8108980:	4b29      	ldr	r3, [pc, #164]	; (8108a28 <_vfiprintf_r+0x254>)
 8108982:	bb1b      	cbnz	r3, 81089cc <_vfiprintf_r+0x1f8>
 8108984:	9b03      	ldr	r3, [sp, #12]
 8108986:	3307      	adds	r3, #7
 8108988:	f023 0307 	bic.w	r3, r3, #7
 810898c:	3308      	adds	r3, #8
 810898e:	9303      	str	r3, [sp, #12]
 8108990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108992:	443b      	add	r3, r7
 8108994:	9309      	str	r3, [sp, #36]	; 0x24
 8108996:	e767      	b.n	8108868 <_vfiprintf_r+0x94>
 8108998:	fb0c 3202 	mla	r2, ip, r2, r3
 810899c:	460c      	mov	r4, r1
 810899e:	2001      	movs	r0, #1
 81089a0:	e7a5      	b.n	81088ee <_vfiprintf_r+0x11a>
 81089a2:	2300      	movs	r3, #0
 81089a4:	3401      	adds	r4, #1
 81089a6:	9305      	str	r3, [sp, #20]
 81089a8:	4619      	mov	r1, r3
 81089aa:	f04f 0c0a 	mov.w	ip, #10
 81089ae:	4620      	mov	r0, r4
 81089b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81089b4:	3a30      	subs	r2, #48	; 0x30
 81089b6:	2a09      	cmp	r2, #9
 81089b8:	d903      	bls.n	81089c2 <_vfiprintf_r+0x1ee>
 81089ba:	2b00      	cmp	r3, #0
 81089bc:	d0c5      	beq.n	810894a <_vfiprintf_r+0x176>
 81089be:	9105      	str	r1, [sp, #20]
 81089c0:	e7c3      	b.n	810894a <_vfiprintf_r+0x176>
 81089c2:	fb0c 2101 	mla	r1, ip, r1, r2
 81089c6:	4604      	mov	r4, r0
 81089c8:	2301      	movs	r3, #1
 81089ca:	e7f0      	b.n	81089ae <_vfiprintf_r+0x1da>
 81089cc:	ab03      	add	r3, sp, #12
 81089ce:	9300      	str	r3, [sp, #0]
 81089d0:	462a      	mov	r2, r5
 81089d2:	4b16      	ldr	r3, [pc, #88]	; (8108a2c <_vfiprintf_r+0x258>)
 81089d4:	a904      	add	r1, sp, #16
 81089d6:	4630      	mov	r0, r6
 81089d8:	f7fc f890 	bl	8104afc <_printf_float>
 81089dc:	4607      	mov	r7, r0
 81089de:	1c78      	adds	r0, r7, #1
 81089e0:	d1d6      	bne.n	8108990 <_vfiprintf_r+0x1bc>
 81089e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81089e4:	07d9      	lsls	r1, r3, #31
 81089e6:	d405      	bmi.n	81089f4 <_vfiprintf_r+0x220>
 81089e8:	89ab      	ldrh	r3, [r5, #12]
 81089ea:	059a      	lsls	r2, r3, #22
 81089ec:	d402      	bmi.n	81089f4 <_vfiprintf_r+0x220>
 81089ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81089f0:	f000 faa1 	bl	8108f36 <__retarget_lock_release_recursive>
 81089f4:	89ab      	ldrh	r3, [r5, #12]
 81089f6:	065b      	lsls	r3, r3, #25
 81089f8:	f53f af12 	bmi.w	8108820 <_vfiprintf_r+0x4c>
 81089fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 81089fe:	e711      	b.n	8108824 <_vfiprintf_r+0x50>
 8108a00:	ab03      	add	r3, sp, #12
 8108a02:	9300      	str	r3, [sp, #0]
 8108a04:	462a      	mov	r2, r5
 8108a06:	4b09      	ldr	r3, [pc, #36]	; (8108a2c <_vfiprintf_r+0x258>)
 8108a08:	a904      	add	r1, sp, #16
 8108a0a:	4630      	mov	r0, r6
 8108a0c:	f7fc fb1a 	bl	8105044 <_printf_i>
 8108a10:	e7e4      	b.n	81089dc <_vfiprintf_r+0x208>
 8108a12:	bf00      	nop
 8108a14:	0810968c 	.word	0x0810968c
 8108a18:	081096ac 	.word	0x081096ac
 8108a1c:	0810966c 	.word	0x0810966c
 8108a20:	0810961c 	.word	0x0810961c
 8108a24:	08109626 	.word	0x08109626
 8108a28:	08104afd 	.word	0x08104afd
 8108a2c:	081087af 	.word	0x081087af
 8108a30:	08109622 	.word	0x08109622

08108a34 <__swbuf_r>:
 8108a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108a36:	460e      	mov	r6, r1
 8108a38:	4614      	mov	r4, r2
 8108a3a:	4605      	mov	r5, r0
 8108a3c:	b118      	cbz	r0, 8108a46 <__swbuf_r+0x12>
 8108a3e:	6983      	ldr	r3, [r0, #24]
 8108a40:	b90b      	cbnz	r3, 8108a46 <__swbuf_r+0x12>
 8108a42:	f000 f9d9 	bl	8108df8 <__sinit>
 8108a46:	4b21      	ldr	r3, [pc, #132]	; (8108acc <__swbuf_r+0x98>)
 8108a48:	429c      	cmp	r4, r3
 8108a4a:	d12b      	bne.n	8108aa4 <__swbuf_r+0x70>
 8108a4c:	686c      	ldr	r4, [r5, #4]
 8108a4e:	69a3      	ldr	r3, [r4, #24]
 8108a50:	60a3      	str	r3, [r4, #8]
 8108a52:	89a3      	ldrh	r3, [r4, #12]
 8108a54:	071a      	lsls	r2, r3, #28
 8108a56:	d52f      	bpl.n	8108ab8 <__swbuf_r+0x84>
 8108a58:	6923      	ldr	r3, [r4, #16]
 8108a5a:	b36b      	cbz	r3, 8108ab8 <__swbuf_r+0x84>
 8108a5c:	6923      	ldr	r3, [r4, #16]
 8108a5e:	6820      	ldr	r0, [r4, #0]
 8108a60:	1ac0      	subs	r0, r0, r3
 8108a62:	6963      	ldr	r3, [r4, #20]
 8108a64:	b2f6      	uxtb	r6, r6
 8108a66:	4283      	cmp	r3, r0
 8108a68:	4637      	mov	r7, r6
 8108a6a:	dc04      	bgt.n	8108a76 <__swbuf_r+0x42>
 8108a6c:	4621      	mov	r1, r4
 8108a6e:	4628      	mov	r0, r5
 8108a70:	f000 f92e 	bl	8108cd0 <_fflush_r>
 8108a74:	bb30      	cbnz	r0, 8108ac4 <__swbuf_r+0x90>
 8108a76:	68a3      	ldr	r3, [r4, #8]
 8108a78:	3b01      	subs	r3, #1
 8108a7a:	60a3      	str	r3, [r4, #8]
 8108a7c:	6823      	ldr	r3, [r4, #0]
 8108a7e:	1c5a      	adds	r2, r3, #1
 8108a80:	6022      	str	r2, [r4, #0]
 8108a82:	701e      	strb	r6, [r3, #0]
 8108a84:	6963      	ldr	r3, [r4, #20]
 8108a86:	3001      	adds	r0, #1
 8108a88:	4283      	cmp	r3, r0
 8108a8a:	d004      	beq.n	8108a96 <__swbuf_r+0x62>
 8108a8c:	89a3      	ldrh	r3, [r4, #12]
 8108a8e:	07db      	lsls	r3, r3, #31
 8108a90:	d506      	bpl.n	8108aa0 <__swbuf_r+0x6c>
 8108a92:	2e0a      	cmp	r6, #10
 8108a94:	d104      	bne.n	8108aa0 <__swbuf_r+0x6c>
 8108a96:	4621      	mov	r1, r4
 8108a98:	4628      	mov	r0, r5
 8108a9a:	f000 f919 	bl	8108cd0 <_fflush_r>
 8108a9e:	b988      	cbnz	r0, 8108ac4 <__swbuf_r+0x90>
 8108aa0:	4638      	mov	r0, r7
 8108aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108aa4:	4b0a      	ldr	r3, [pc, #40]	; (8108ad0 <__swbuf_r+0x9c>)
 8108aa6:	429c      	cmp	r4, r3
 8108aa8:	d101      	bne.n	8108aae <__swbuf_r+0x7a>
 8108aaa:	68ac      	ldr	r4, [r5, #8]
 8108aac:	e7cf      	b.n	8108a4e <__swbuf_r+0x1a>
 8108aae:	4b09      	ldr	r3, [pc, #36]	; (8108ad4 <__swbuf_r+0xa0>)
 8108ab0:	429c      	cmp	r4, r3
 8108ab2:	bf08      	it	eq
 8108ab4:	68ec      	ldreq	r4, [r5, #12]
 8108ab6:	e7ca      	b.n	8108a4e <__swbuf_r+0x1a>
 8108ab8:	4621      	mov	r1, r4
 8108aba:	4628      	mov	r0, r5
 8108abc:	f000 f80c 	bl	8108ad8 <__swsetup_r>
 8108ac0:	2800      	cmp	r0, #0
 8108ac2:	d0cb      	beq.n	8108a5c <__swbuf_r+0x28>
 8108ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8108ac8:	e7ea      	b.n	8108aa0 <__swbuf_r+0x6c>
 8108aca:	bf00      	nop
 8108acc:	0810968c 	.word	0x0810968c
 8108ad0:	081096ac 	.word	0x081096ac
 8108ad4:	0810966c 	.word	0x0810966c

08108ad8 <__swsetup_r>:
 8108ad8:	4b32      	ldr	r3, [pc, #200]	; (8108ba4 <__swsetup_r+0xcc>)
 8108ada:	b570      	push	{r4, r5, r6, lr}
 8108adc:	681d      	ldr	r5, [r3, #0]
 8108ade:	4606      	mov	r6, r0
 8108ae0:	460c      	mov	r4, r1
 8108ae2:	b125      	cbz	r5, 8108aee <__swsetup_r+0x16>
 8108ae4:	69ab      	ldr	r3, [r5, #24]
 8108ae6:	b913      	cbnz	r3, 8108aee <__swsetup_r+0x16>
 8108ae8:	4628      	mov	r0, r5
 8108aea:	f000 f985 	bl	8108df8 <__sinit>
 8108aee:	4b2e      	ldr	r3, [pc, #184]	; (8108ba8 <__swsetup_r+0xd0>)
 8108af0:	429c      	cmp	r4, r3
 8108af2:	d10f      	bne.n	8108b14 <__swsetup_r+0x3c>
 8108af4:	686c      	ldr	r4, [r5, #4]
 8108af6:	89a3      	ldrh	r3, [r4, #12]
 8108af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108afc:	0719      	lsls	r1, r3, #28
 8108afe:	d42c      	bmi.n	8108b5a <__swsetup_r+0x82>
 8108b00:	06dd      	lsls	r5, r3, #27
 8108b02:	d411      	bmi.n	8108b28 <__swsetup_r+0x50>
 8108b04:	2309      	movs	r3, #9
 8108b06:	6033      	str	r3, [r6, #0]
 8108b08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8108b0c:	81a3      	strh	r3, [r4, #12]
 8108b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8108b12:	e03e      	b.n	8108b92 <__swsetup_r+0xba>
 8108b14:	4b25      	ldr	r3, [pc, #148]	; (8108bac <__swsetup_r+0xd4>)
 8108b16:	429c      	cmp	r4, r3
 8108b18:	d101      	bne.n	8108b1e <__swsetup_r+0x46>
 8108b1a:	68ac      	ldr	r4, [r5, #8]
 8108b1c:	e7eb      	b.n	8108af6 <__swsetup_r+0x1e>
 8108b1e:	4b24      	ldr	r3, [pc, #144]	; (8108bb0 <__swsetup_r+0xd8>)
 8108b20:	429c      	cmp	r4, r3
 8108b22:	bf08      	it	eq
 8108b24:	68ec      	ldreq	r4, [r5, #12]
 8108b26:	e7e6      	b.n	8108af6 <__swsetup_r+0x1e>
 8108b28:	0758      	lsls	r0, r3, #29
 8108b2a:	d512      	bpl.n	8108b52 <__swsetup_r+0x7a>
 8108b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108b2e:	b141      	cbz	r1, 8108b42 <__swsetup_r+0x6a>
 8108b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8108b34:	4299      	cmp	r1, r3
 8108b36:	d002      	beq.n	8108b3e <__swsetup_r+0x66>
 8108b38:	4630      	mov	r0, r6
 8108b3a:	f7ff fb65 	bl	8108208 <_free_r>
 8108b3e:	2300      	movs	r3, #0
 8108b40:	6363      	str	r3, [r4, #52]	; 0x34
 8108b42:	89a3      	ldrh	r3, [r4, #12]
 8108b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8108b48:	81a3      	strh	r3, [r4, #12]
 8108b4a:	2300      	movs	r3, #0
 8108b4c:	6063      	str	r3, [r4, #4]
 8108b4e:	6923      	ldr	r3, [r4, #16]
 8108b50:	6023      	str	r3, [r4, #0]
 8108b52:	89a3      	ldrh	r3, [r4, #12]
 8108b54:	f043 0308 	orr.w	r3, r3, #8
 8108b58:	81a3      	strh	r3, [r4, #12]
 8108b5a:	6923      	ldr	r3, [r4, #16]
 8108b5c:	b94b      	cbnz	r3, 8108b72 <__swsetup_r+0x9a>
 8108b5e:	89a3      	ldrh	r3, [r4, #12]
 8108b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8108b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108b68:	d003      	beq.n	8108b72 <__swsetup_r+0x9a>
 8108b6a:	4621      	mov	r1, r4
 8108b6c:	4630      	mov	r0, r6
 8108b6e:	f000 fa07 	bl	8108f80 <__smakebuf_r>
 8108b72:	89a0      	ldrh	r0, [r4, #12]
 8108b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108b78:	f010 0301 	ands.w	r3, r0, #1
 8108b7c:	d00a      	beq.n	8108b94 <__swsetup_r+0xbc>
 8108b7e:	2300      	movs	r3, #0
 8108b80:	60a3      	str	r3, [r4, #8]
 8108b82:	6963      	ldr	r3, [r4, #20]
 8108b84:	425b      	negs	r3, r3
 8108b86:	61a3      	str	r3, [r4, #24]
 8108b88:	6923      	ldr	r3, [r4, #16]
 8108b8a:	b943      	cbnz	r3, 8108b9e <__swsetup_r+0xc6>
 8108b8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8108b90:	d1ba      	bne.n	8108b08 <__swsetup_r+0x30>
 8108b92:	bd70      	pop	{r4, r5, r6, pc}
 8108b94:	0781      	lsls	r1, r0, #30
 8108b96:	bf58      	it	pl
 8108b98:	6963      	ldrpl	r3, [r4, #20]
 8108b9a:	60a3      	str	r3, [r4, #8]
 8108b9c:	e7f4      	b.n	8108b88 <__swsetup_r+0xb0>
 8108b9e:	2000      	movs	r0, #0
 8108ba0:	e7f7      	b.n	8108b92 <__swsetup_r+0xba>
 8108ba2:	bf00      	nop
 8108ba4:	10000010 	.word	0x10000010
 8108ba8:	0810968c 	.word	0x0810968c
 8108bac:	081096ac 	.word	0x081096ac
 8108bb0:	0810966c 	.word	0x0810966c

08108bb4 <abort>:
 8108bb4:	b508      	push	{r3, lr}
 8108bb6:	2006      	movs	r0, #6
 8108bb8:	f000 fa52 	bl	8109060 <raise>
 8108bbc:	2001      	movs	r0, #1
 8108bbe:	f7f8 fc0d 	bl	81013dc <_exit>
	...

08108bc4 <__sflush_r>:
 8108bc4:	898a      	ldrh	r2, [r1, #12]
 8108bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108bca:	4605      	mov	r5, r0
 8108bcc:	0710      	lsls	r0, r2, #28
 8108bce:	460c      	mov	r4, r1
 8108bd0:	d458      	bmi.n	8108c84 <__sflush_r+0xc0>
 8108bd2:	684b      	ldr	r3, [r1, #4]
 8108bd4:	2b00      	cmp	r3, #0
 8108bd6:	dc05      	bgt.n	8108be4 <__sflush_r+0x20>
 8108bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8108bda:	2b00      	cmp	r3, #0
 8108bdc:	dc02      	bgt.n	8108be4 <__sflush_r+0x20>
 8108bde:	2000      	movs	r0, #0
 8108be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8108be6:	2e00      	cmp	r6, #0
 8108be8:	d0f9      	beq.n	8108bde <__sflush_r+0x1a>
 8108bea:	2300      	movs	r3, #0
 8108bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8108bf0:	682f      	ldr	r7, [r5, #0]
 8108bf2:	602b      	str	r3, [r5, #0]
 8108bf4:	d032      	beq.n	8108c5c <__sflush_r+0x98>
 8108bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8108bf8:	89a3      	ldrh	r3, [r4, #12]
 8108bfa:	075a      	lsls	r2, r3, #29
 8108bfc:	d505      	bpl.n	8108c0a <__sflush_r+0x46>
 8108bfe:	6863      	ldr	r3, [r4, #4]
 8108c00:	1ac0      	subs	r0, r0, r3
 8108c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8108c04:	b10b      	cbz	r3, 8108c0a <__sflush_r+0x46>
 8108c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8108c08:	1ac0      	subs	r0, r0, r3
 8108c0a:	2300      	movs	r3, #0
 8108c0c:	4602      	mov	r2, r0
 8108c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8108c10:	6a21      	ldr	r1, [r4, #32]
 8108c12:	4628      	mov	r0, r5
 8108c14:	47b0      	blx	r6
 8108c16:	1c43      	adds	r3, r0, #1
 8108c18:	89a3      	ldrh	r3, [r4, #12]
 8108c1a:	d106      	bne.n	8108c2a <__sflush_r+0x66>
 8108c1c:	6829      	ldr	r1, [r5, #0]
 8108c1e:	291d      	cmp	r1, #29
 8108c20:	d82c      	bhi.n	8108c7c <__sflush_r+0xb8>
 8108c22:	4a2a      	ldr	r2, [pc, #168]	; (8108ccc <__sflush_r+0x108>)
 8108c24:	40ca      	lsrs	r2, r1
 8108c26:	07d6      	lsls	r6, r2, #31
 8108c28:	d528      	bpl.n	8108c7c <__sflush_r+0xb8>
 8108c2a:	2200      	movs	r2, #0
 8108c2c:	6062      	str	r2, [r4, #4]
 8108c2e:	04d9      	lsls	r1, r3, #19
 8108c30:	6922      	ldr	r2, [r4, #16]
 8108c32:	6022      	str	r2, [r4, #0]
 8108c34:	d504      	bpl.n	8108c40 <__sflush_r+0x7c>
 8108c36:	1c42      	adds	r2, r0, #1
 8108c38:	d101      	bne.n	8108c3e <__sflush_r+0x7a>
 8108c3a:	682b      	ldr	r3, [r5, #0]
 8108c3c:	b903      	cbnz	r3, 8108c40 <__sflush_r+0x7c>
 8108c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8108c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108c42:	602f      	str	r7, [r5, #0]
 8108c44:	2900      	cmp	r1, #0
 8108c46:	d0ca      	beq.n	8108bde <__sflush_r+0x1a>
 8108c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8108c4c:	4299      	cmp	r1, r3
 8108c4e:	d002      	beq.n	8108c56 <__sflush_r+0x92>
 8108c50:	4628      	mov	r0, r5
 8108c52:	f7ff fad9 	bl	8108208 <_free_r>
 8108c56:	2000      	movs	r0, #0
 8108c58:	6360      	str	r0, [r4, #52]	; 0x34
 8108c5a:	e7c1      	b.n	8108be0 <__sflush_r+0x1c>
 8108c5c:	6a21      	ldr	r1, [r4, #32]
 8108c5e:	2301      	movs	r3, #1
 8108c60:	4628      	mov	r0, r5
 8108c62:	47b0      	blx	r6
 8108c64:	1c41      	adds	r1, r0, #1
 8108c66:	d1c7      	bne.n	8108bf8 <__sflush_r+0x34>
 8108c68:	682b      	ldr	r3, [r5, #0]
 8108c6a:	2b00      	cmp	r3, #0
 8108c6c:	d0c4      	beq.n	8108bf8 <__sflush_r+0x34>
 8108c6e:	2b1d      	cmp	r3, #29
 8108c70:	d001      	beq.n	8108c76 <__sflush_r+0xb2>
 8108c72:	2b16      	cmp	r3, #22
 8108c74:	d101      	bne.n	8108c7a <__sflush_r+0xb6>
 8108c76:	602f      	str	r7, [r5, #0]
 8108c78:	e7b1      	b.n	8108bde <__sflush_r+0x1a>
 8108c7a:	89a3      	ldrh	r3, [r4, #12]
 8108c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108c80:	81a3      	strh	r3, [r4, #12]
 8108c82:	e7ad      	b.n	8108be0 <__sflush_r+0x1c>
 8108c84:	690f      	ldr	r7, [r1, #16]
 8108c86:	2f00      	cmp	r7, #0
 8108c88:	d0a9      	beq.n	8108bde <__sflush_r+0x1a>
 8108c8a:	0793      	lsls	r3, r2, #30
 8108c8c:	680e      	ldr	r6, [r1, #0]
 8108c8e:	bf08      	it	eq
 8108c90:	694b      	ldreq	r3, [r1, #20]
 8108c92:	600f      	str	r7, [r1, #0]
 8108c94:	bf18      	it	ne
 8108c96:	2300      	movne	r3, #0
 8108c98:	eba6 0807 	sub.w	r8, r6, r7
 8108c9c:	608b      	str	r3, [r1, #8]
 8108c9e:	f1b8 0f00 	cmp.w	r8, #0
 8108ca2:	dd9c      	ble.n	8108bde <__sflush_r+0x1a>
 8108ca4:	6a21      	ldr	r1, [r4, #32]
 8108ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8108ca8:	4643      	mov	r3, r8
 8108caa:	463a      	mov	r2, r7
 8108cac:	4628      	mov	r0, r5
 8108cae:	47b0      	blx	r6
 8108cb0:	2800      	cmp	r0, #0
 8108cb2:	dc06      	bgt.n	8108cc2 <__sflush_r+0xfe>
 8108cb4:	89a3      	ldrh	r3, [r4, #12]
 8108cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108cba:	81a3      	strh	r3, [r4, #12]
 8108cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8108cc0:	e78e      	b.n	8108be0 <__sflush_r+0x1c>
 8108cc2:	4407      	add	r7, r0
 8108cc4:	eba8 0800 	sub.w	r8, r8, r0
 8108cc8:	e7e9      	b.n	8108c9e <__sflush_r+0xda>
 8108cca:	bf00      	nop
 8108ccc:	20400001 	.word	0x20400001

08108cd0 <_fflush_r>:
 8108cd0:	b538      	push	{r3, r4, r5, lr}
 8108cd2:	690b      	ldr	r3, [r1, #16]
 8108cd4:	4605      	mov	r5, r0
 8108cd6:	460c      	mov	r4, r1
 8108cd8:	b913      	cbnz	r3, 8108ce0 <_fflush_r+0x10>
 8108cda:	2500      	movs	r5, #0
 8108cdc:	4628      	mov	r0, r5
 8108cde:	bd38      	pop	{r3, r4, r5, pc}
 8108ce0:	b118      	cbz	r0, 8108cea <_fflush_r+0x1a>
 8108ce2:	6983      	ldr	r3, [r0, #24]
 8108ce4:	b90b      	cbnz	r3, 8108cea <_fflush_r+0x1a>
 8108ce6:	f000 f887 	bl	8108df8 <__sinit>
 8108cea:	4b14      	ldr	r3, [pc, #80]	; (8108d3c <_fflush_r+0x6c>)
 8108cec:	429c      	cmp	r4, r3
 8108cee:	d11b      	bne.n	8108d28 <_fflush_r+0x58>
 8108cf0:	686c      	ldr	r4, [r5, #4]
 8108cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108cf6:	2b00      	cmp	r3, #0
 8108cf8:	d0ef      	beq.n	8108cda <_fflush_r+0xa>
 8108cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8108cfc:	07d0      	lsls	r0, r2, #31
 8108cfe:	d404      	bmi.n	8108d0a <_fflush_r+0x3a>
 8108d00:	0599      	lsls	r1, r3, #22
 8108d02:	d402      	bmi.n	8108d0a <_fflush_r+0x3a>
 8108d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108d06:	f000 f915 	bl	8108f34 <__retarget_lock_acquire_recursive>
 8108d0a:	4628      	mov	r0, r5
 8108d0c:	4621      	mov	r1, r4
 8108d0e:	f7ff ff59 	bl	8108bc4 <__sflush_r>
 8108d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8108d14:	07da      	lsls	r2, r3, #31
 8108d16:	4605      	mov	r5, r0
 8108d18:	d4e0      	bmi.n	8108cdc <_fflush_r+0xc>
 8108d1a:	89a3      	ldrh	r3, [r4, #12]
 8108d1c:	059b      	lsls	r3, r3, #22
 8108d1e:	d4dd      	bmi.n	8108cdc <_fflush_r+0xc>
 8108d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108d22:	f000 f908 	bl	8108f36 <__retarget_lock_release_recursive>
 8108d26:	e7d9      	b.n	8108cdc <_fflush_r+0xc>
 8108d28:	4b05      	ldr	r3, [pc, #20]	; (8108d40 <_fflush_r+0x70>)
 8108d2a:	429c      	cmp	r4, r3
 8108d2c:	d101      	bne.n	8108d32 <_fflush_r+0x62>
 8108d2e:	68ac      	ldr	r4, [r5, #8]
 8108d30:	e7df      	b.n	8108cf2 <_fflush_r+0x22>
 8108d32:	4b04      	ldr	r3, [pc, #16]	; (8108d44 <_fflush_r+0x74>)
 8108d34:	429c      	cmp	r4, r3
 8108d36:	bf08      	it	eq
 8108d38:	68ec      	ldreq	r4, [r5, #12]
 8108d3a:	e7da      	b.n	8108cf2 <_fflush_r+0x22>
 8108d3c:	0810968c 	.word	0x0810968c
 8108d40:	081096ac 	.word	0x081096ac
 8108d44:	0810966c 	.word	0x0810966c

08108d48 <std>:
 8108d48:	2300      	movs	r3, #0
 8108d4a:	b510      	push	{r4, lr}
 8108d4c:	4604      	mov	r4, r0
 8108d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8108d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108d56:	6083      	str	r3, [r0, #8]
 8108d58:	8181      	strh	r1, [r0, #12]
 8108d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8108d5c:	81c2      	strh	r2, [r0, #14]
 8108d5e:	6183      	str	r3, [r0, #24]
 8108d60:	4619      	mov	r1, r3
 8108d62:	2208      	movs	r2, #8
 8108d64:	305c      	adds	r0, #92	; 0x5c
 8108d66:	f7fb fe21 	bl	81049ac <memset>
 8108d6a:	4b05      	ldr	r3, [pc, #20]	; (8108d80 <std+0x38>)
 8108d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8108d6e:	4b05      	ldr	r3, [pc, #20]	; (8108d84 <std+0x3c>)
 8108d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8108d72:	4b05      	ldr	r3, [pc, #20]	; (8108d88 <std+0x40>)
 8108d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8108d76:	4b05      	ldr	r3, [pc, #20]	; (8108d8c <std+0x44>)
 8108d78:	6224      	str	r4, [r4, #32]
 8108d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8108d7c:	bd10      	pop	{r4, pc}
 8108d7e:	bf00      	nop
 8108d80:	08109099 	.word	0x08109099
 8108d84:	081090bb 	.word	0x081090bb
 8108d88:	081090f3 	.word	0x081090f3
 8108d8c:	08109117 	.word	0x08109117

08108d90 <_cleanup_r>:
 8108d90:	4901      	ldr	r1, [pc, #4]	; (8108d98 <_cleanup_r+0x8>)
 8108d92:	f000 b8af 	b.w	8108ef4 <_fwalk_reent>
 8108d96:	bf00      	nop
 8108d98:	08108cd1 	.word	0x08108cd1

08108d9c <__sfmoreglue>:
 8108d9c:	b570      	push	{r4, r5, r6, lr}
 8108d9e:	1e4a      	subs	r2, r1, #1
 8108da0:	2568      	movs	r5, #104	; 0x68
 8108da2:	4355      	muls	r5, r2
 8108da4:	460e      	mov	r6, r1
 8108da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8108daa:	f7ff fa7d 	bl	81082a8 <_malloc_r>
 8108dae:	4604      	mov	r4, r0
 8108db0:	b140      	cbz	r0, 8108dc4 <__sfmoreglue+0x28>
 8108db2:	2100      	movs	r1, #0
 8108db4:	e9c0 1600 	strd	r1, r6, [r0]
 8108db8:	300c      	adds	r0, #12
 8108dba:	60a0      	str	r0, [r4, #8]
 8108dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8108dc0:	f7fb fdf4 	bl	81049ac <memset>
 8108dc4:	4620      	mov	r0, r4
 8108dc6:	bd70      	pop	{r4, r5, r6, pc}

08108dc8 <__sfp_lock_acquire>:
 8108dc8:	4801      	ldr	r0, [pc, #4]	; (8108dd0 <__sfp_lock_acquire+0x8>)
 8108dca:	f000 b8b3 	b.w	8108f34 <__retarget_lock_acquire_recursive>
 8108dce:	bf00      	nop
 8108dd0:	1000035c 	.word	0x1000035c

08108dd4 <__sfp_lock_release>:
 8108dd4:	4801      	ldr	r0, [pc, #4]	; (8108ddc <__sfp_lock_release+0x8>)
 8108dd6:	f000 b8ae 	b.w	8108f36 <__retarget_lock_release_recursive>
 8108dda:	bf00      	nop
 8108ddc:	1000035c 	.word	0x1000035c

08108de0 <__sinit_lock_acquire>:
 8108de0:	4801      	ldr	r0, [pc, #4]	; (8108de8 <__sinit_lock_acquire+0x8>)
 8108de2:	f000 b8a7 	b.w	8108f34 <__retarget_lock_acquire_recursive>
 8108de6:	bf00      	nop
 8108de8:	10000357 	.word	0x10000357

08108dec <__sinit_lock_release>:
 8108dec:	4801      	ldr	r0, [pc, #4]	; (8108df4 <__sinit_lock_release+0x8>)
 8108dee:	f000 b8a2 	b.w	8108f36 <__retarget_lock_release_recursive>
 8108df2:	bf00      	nop
 8108df4:	10000357 	.word	0x10000357

08108df8 <__sinit>:
 8108df8:	b510      	push	{r4, lr}
 8108dfa:	4604      	mov	r4, r0
 8108dfc:	f7ff fff0 	bl	8108de0 <__sinit_lock_acquire>
 8108e00:	69a3      	ldr	r3, [r4, #24]
 8108e02:	b11b      	cbz	r3, 8108e0c <__sinit+0x14>
 8108e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108e08:	f7ff bff0 	b.w	8108dec <__sinit_lock_release>
 8108e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8108e10:	6523      	str	r3, [r4, #80]	; 0x50
 8108e12:	4b13      	ldr	r3, [pc, #76]	; (8108e60 <__sinit+0x68>)
 8108e14:	4a13      	ldr	r2, [pc, #76]	; (8108e64 <__sinit+0x6c>)
 8108e16:	681b      	ldr	r3, [r3, #0]
 8108e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8108e1a:	42a3      	cmp	r3, r4
 8108e1c:	bf04      	itt	eq
 8108e1e:	2301      	moveq	r3, #1
 8108e20:	61a3      	streq	r3, [r4, #24]
 8108e22:	4620      	mov	r0, r4
 8108e24:	f000 f820 	bl	8108e68 <__sfp>
 8108e28:	6060      	str	r0, [r4, #4]
 8108e2a:	4620      	mov	r0, r4
 8108e2c:	f000 f81c 	bl	8108e68 <__sfp>
 8108e30:	60a0      	str	r0, [r4, #8]
 8108e32:	4620      	mov	r0, r4
 8108e34:	f000 f818 	bl	8108e68 <__sfp>
 8108e38:	2200      	movs	r2, #0
 8108e3a:	60e0      	str	r0, [r4, #12]
 8108e3c:	2104      	movs	r1, #4
 8108e3e:	6860      	ldr	r0, [r4, #4]
 8108e40:	f7ff ff82 	bl	8108d48 <std>
 8108e44:	68a0      	ldr	r0, [r4, #8]
 8108e46:	2201      	movs	r2, #1
 8108e48:	2109      	movs	r1, #9
 8108e4a:	f7ff ff7d 	bl	8108d48 <std>
 8108e4e:	68e0      	ldr	r0, [r4, #12]
 8108e50:	2202      	movs	r2, #2
 8108e52:	2112      	movs	r1, #18
 8108e54:	f7ff ff78 	bl	8108d48 <std>
 8108e58:	2301      	movs	r3, #1
 8108e5a:	61a3      	str	r3, [r4, #24]
 8108e5c:	e7d2      	b.n	8108e04 <__sinit+0xc>
 8108e5e:	bf00      	nop
 8108e60:	08109218 	.word	0x08109218
 8108e64:	08108d91 	.word	0x08108d91

08108e68 <__sfp>:
 8108e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108e6a:	4607      	mov	r7, r0
 8108e6c:	f7ff ffac 	bl	8108dc8 <__sfp_lock_acquire>
 8108e70:	4b1e      	ldr	r3, [pc, #120]	; (8108eec <__sfp+0x84>)
 8108e72:	681e      	ldr	r6, [r3, #0]
 8108e74:	69b3      	ldr	r3, [r6, #24]
 8108e76:	b913      	cbnz	r3, 8108e7e <__sfp+0x16>
 8108e78:	4630      	mov	r0, r6
 8108e7a:	f7ff ffbd 	bl	8108df8 <__sinit>
 8108e7e:	3648      	adds	r6, #72	; 0x48
 8108e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8108e84:	3b01      	subs	r3, #1
 8108e86:	d503      	bpl.n	8108e90 <__sfp+0x28>
 8108e88:	6833      	ldr	r3, [r6, #0]
 8108e8a:	b30b      	cbz	r3, 8108ed0 <__sfp+0x68>
 8108e8c:	6836      	ldr	r6, [r6, #0]
 8108e8e:	e7f7      	b.n	8108e80 <__sfp+0x18>
 8108e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8108e94:	b9d5      	cbnz	r5, 8108ecc <__sfp+0x64>
 8108e96:	4b16      	ldr	r3, [pc, #88]	; (8108ef0 <__sfp+0x88>)
 8108e98:	60e3      	str	r3, [r4, #12]
 8108e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8108e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8108ea0:	f000 f847 	bl	8108f32 <__retarget_lock_init_recursive>
 8108ea4:	f7ff ff96 	bl	8108dd4 <__sfp_lock_release>
 8108ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8108eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8108eb0:	6025      	str	r5, [r4, #0]
 8108eb2:	61a5      	str	r5, [r4, #24]
 8108eb4:	2208      	movs	r2, #8
 8108eb6:	4629      	mov	r1, r5
 8108eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8108ebc:	f7fb fd76 	bl	81049ac <memset>
 8108ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8108ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8108ec8:	4620      	mov	r0, r4
 8108eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108ecc:	3468      	adds	r4, #104	; 0x68
 8108ece:	e7d9      	b.n	8108e84 <__sfp+0x1c>
 8108ed0:	2104      	movs	r1, #4
 8108ed2:	4638      	mov	r0, r7
 8108ed4:	f7ff ff62 	bl	8108d9c <__sfmoreglue>
 8108ed8:	4604      	mov	r4, r0
 8108eda:	6030      	str	r0, [r6, #0]
 8108edc:	2800      	cmp	r0, #0
 8108ede:	d1d5      	bne.n	8108e8c <__sfp+0x24>
 8108ee0:	f7ff ff78 	bl	8108dd4 <__sfp_lock_release>
 8108ee4:	230c      	movs	r3, #12
 8108ee6:	603b      	str	r3, [r7, #0]
 8108ee8:	e7ee      	b.n	8108ec8 <__sfp+0x60>
 8108eea:	bf00      	nop
 8108eec:	08109218 	.word	0x08109218
 8108ef0:	ffff0001 	.word	0xffff0001

08108ef4 <_fwalk_reent>:
 8108ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108ef8:	4606      	mov	r6, r0
 8108efa:	4688      	mov	r8, r1
 8108efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8108f00:	2700      	movs	r7, #0
 8108f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108f06:	f1b9 0901 	subs.w	r9, r9, #1
 8108f0a:	d505      	bpl.n	8108f18 <_fwalk_reent+0x24>
 8108f0c:	6824      	ldr	r4, [r4, #0]
 8108f0e:	2c00      	cmp	r4, #0
 8108f10:	d1f7      	bne.n	8108f02 <_fwalk_reent+0xe>
 8108f12:	4638      	mov	r0, r7
 8108f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108f18:	89ab      	ldrh	r3, [r5, #12]
 8108f1a:	2b01      	cmp	r3, #1
 8108f1c:	d907      	bls.n	8108f2e <_fwalk_reent+0x3a>
 8108f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108f22:	3301      	adds	r3, #1
 8108f24:	d003      	beq.n	8108f2e <_fwalk_reent+0x3a>
 8108f26:	4629      	mov	r1, r5
 8108f28:	4630      	mov	r0, r6
 8108f2a:	47c0      	blx	r8
 8108f2c:	4307      	orrs	r7, r0
 8108f2e:	3568      	adds	r5, #104	; 0x68
 8108f30:	e7e9      	b.n	8108f06 <_fwalk_reent+0x12>

08108f32 <__retarget_lock_init_recursive>:
 8108f32:	4770      	bx	lr

08108f34 <__retarget_lock_acquire_recursive>:
 8108f34:	4770      	bx	lr

08108f36 <__retarget_lock_release_recursive>:
 8108f36:	4770      	bx	lr

08108f38 <__swhatbuf_r>:
 8108f38:	b570      	push	{r4, r5, r6, lr}
 8108f3a:	460e      	mov	r6, r1
 8108f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108f40:	2900      	cmp	r1, #0
 8108f42:	b096      	sub	sp, #88	; 0x58
 8108f44:	4614      	mov	r4, r2
 8108f46:	461d      	mov	r5, r3
 8108f48:	da07      	bge.n	8108f5a <__swhatbuf_r+0x22>
 8108f4a:	2300      	movs	r3, #0
 8108f4c:	602b      	str	r3, [r5, #0]
 8108f4e:	89b3      	ldrh	r3, [r6, #12]
 8108f50:	061a      	lsls	r2, r3, #24
 8108f52:	d410      	bmi.n	8108f76 <__swhatbuf_r+0x3e>
 8108f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8108f58:	e00e      	b.n	8108f78 <__swhatbuf_r+0x40>
 8108f5a:	466a      	mov	r2, sp
 8108f5c:	f000 f902 	bl	8109164 <_fstat_r>
 8108f60:	2800      	cmp	r0, #0
 8108f62:	dbf2      	blt.n	8108f4a <__swhatbuf_r+0x12>
 8108f64:	9a01      	ldr	r2, [sp, #4]
 8108f66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8108f6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8108f6e:	425a      	negs	r2, r3
 8108f70:	415a      	adcs	r2, r3
 8108f72:	602a      	str	r2, [r5, #0]
 8108f74:	e7ee      	b.n	8108f54 <__swhatbuf_r+0x1c>
 8108f76:	2340      	movs	r3, #64	; 0x40
 8108f78:	2000      	movs	r0, #0
 8108f7a:	6023      	str	r3, [r4, #0]
 8108f7c:	b016      	add	sp, #88	; 0x58
 8108f7e:	bd70      	pop	{r4, r5, r6, pc}

08108f80 <__smakebuf_r>:
 8108f80:	898b      	ldrh	r3, [r1, #12]
 8108f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8108f84:	079d      	lsls	r5, r3, #30
 8108f86:	4606      	mov	r6, r0
 8108f88:	460c      	mov	r4, r1
 8108f8a:	d507      	bpl.n	8108f9c <__smakebuf_r+0x1c>
 8108f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8108f90:	6023      	str	r3, [r4, #0]
 8108f92:	6123      	str	r3, [r4, #16]
 8108f94:	2301      	movs	r3, #1
 8108f96:	6163      	str	r3, [r4, #20]
 8108f98:	b002      	add	sp, #8
 8108f9a:	bd70      	pop	{r4, r5, r6, pc}
 8108f9c:	ab01      	add	r3, sp, #4
 8108f9e:	466a      	mov	r2, sp
 8108fa0:	f7ff ffca 	bl	8108f38 <__swhatbuf_r>
 8108fa4:	9900      	ldr	r1, [sp, #0]
 8108fa6:	4605      	mov	r5, r0
 8108fa8:	4630      	mov	r0, r6
 8108faa:	f7ff f97d 	bl	81082a8 <_malloc_r>
 8108fae:	b948      	cbnz	r0, 8108fc4 <__smakebuf_r+0x44>
 8108fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108fb4:	059a      	lsls	r2, r3, #22
 8108fb6:	d4ef      	bmi.n	8108f98 <__smakebuf_r+0x18>
 8108fb8:	f023 0303 	bic.w	r3, r3, #3
 8108fbc:	f043 0302 	orr.w	r3, r3, #2
 8108fc0:	81a3      	strh	r3, [r4, #12]
 8108fc2:	e7e3      	b.n	8108f8c <__smakebuf_r+0xc>
 8108fc4:	4b0d      	ldr	r3, [pc, #52]	; (8108ffc <__smakebuf_r+0x7c>)
 8108fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8108fc8:	89a3      	ldrh	r3, [r4, #12]
 8108fca:	6020      	str	r0, [r4, #0]
 8108fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8108fd0:	81a3      	strh	r3, [r4, #12]
 8108fd2:	9b00      	ldr	r3, [sp, #0]
 8108fd4:	6163      	str	r3, [r4, #20]
 8108fd6:	9b01      	ldr	r3, [sp, #4]
 8108fd8:	6120      	str	r0, [r4, #16]
 8108fda:	b15b      	cbz	r3, 8108ff4 <__smakebuf_r+0x74>
 8108fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108fe0:	4630      	mov	r0, r6
 8108fe2:	f000 f8d1 	bl	8109188 <_isatty_r>
 8108fe6:	b128      	cbz	r0, 8108ff4 <__smakebuf_r+0x74>
 8108fe8:	89a3      	ldrh	r3, [r4, #12]
 8108fea:	f023 0303 	bic.w	r3, r3, #3
 8108fee:	f043 0301 	orr.w	r3, r3, #1
 8108ff2:	81a3      	strh	r3, [r4, #12]
 8108ff4:	89a0      	ldrh	r0, [r4, #12]
 8108ff6:	4305      	orrs	r5, r0
 8108ff8:	81a5      	strh	r5, [r4, #12]
 8108ffa:	e7cd      	b.n	8108f98 <__smakebuf_r+0x18>
 8108ffc:	08108d91 	.word	0x08108d91

08109000 <_malloc_usable_size_r>:
 8109000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109004:	1f18      	subs	r0, r3, #4
 8109006:	2b00      	cmp	r3, #0
 8109008:	bfbc      	itt	lt
 810900a:	580b      	ldrlt	r3, [r1, r0]
 810900c:	18c0      	addlt	r0, r0, r3
 810900e:	4770      	bx	lr

08109010 <_raise_r>:
 8109010:	291f      	cmp	r1, #31
 8109012:	b538      	push	{r3, r4, r5, lr}
 8109014:	4604      	mov	r4, r0
 8109016:	460d      	mov	r5, r1
 8109018:	d904      	bls.n	8109024 <_raise_r+0x14>
 810901a:	2316      	movs	r3, #22
 810901c:	6003      	str	r3, [r0, #0]
 810901e:	f04f 30ff 	mov.w	r0, #4294967295
 8109022:	bd38      	pop	{r3, r4, r5, pc}
 8109024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8109026:	b112      	cbz	r2, 810902e <_raise_r+0x1e>
 8109028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810902c:	b94b      	cbnz	r3, 8109042 <_raise_r+0x32>
 810902e:	4620      	mov	r0, r4
 8109030:	f000 f830 	bl	8109094 <_getpid_r>
 8109034:	462a      	mov	r2, r5
 8109036:	4601      	mov	r1, r0
 8109038:	4620      	mov	r0, r4
 810903a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810903e:	f000 b817 	b.w	8109070 <_kill_r>
 8109042:	2b01      	cmp	r3, #1
 8109044:	d00a      	beq.n	810905c <_raise_r+0x4c>
 8109046:	1c59      	adds	r1, r3, #1
 8109048:	d103      	bne.n	8109052 <_raise_r+0x42>
 810904a:	2316      	movs	r3, #22
 810904c:	6003      	str	r3, [r0, #0]
 810904e:	2001      	movs	r0, #1
 8109050:	e7e7      	b.n	8109022 <_raise_r+0x12>
 8109052:	2400      	movs	r4, #0
 8109054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8109058:	4628      	mov	r0, r5
 810905a:	4798      	blx	r3
 810905c:	2000      	movs	r0, #0
 810905e:	e7e0      	b.n	8109022 <_raise_r+0x12>

08109060 <raise>:
 8109060:	4b02      	ldr	r3, [pc, #8]	; (810906c <raise+0xc>)
 8109062:	4601      	mov	r1, r0
 8109064:	6818      	ldr	r0, [r3, #0]
 8109066:	f7ff bfd3 	b.w	8109010 <_raise_r>
 810906a:	bf00      	nop
 810906c:	10000010 	.word	0x10000010

08109070 <_kill_r>:
 8109070:	b538      	push	{r3, r4, r5, lr}
 8109072:	4d07      	ldr	r5, [pc, #28]	; (8109090 <_kill_r+0x20>)
 8109074:	2300      	movs	r3, #0
 8109076:	4604      	mov	r4, r0
 8109078:	4608      	mov	r0, r1
 810907a:	4611      	mov	r1, r2
 810907c:	602b      	str	r3, [r5, #0]
 810907e:	f7f8 f99d 	bl	81013bc <_kill>
 8109082:	1c43      	adds	r3, r0, #1
 8109084:	d102      	bne.n	810908c <_kill_r+0x1c>
 8109086:	682b      	ldr	r3, [r5, #0]
 8109088:	b103      	cbz	r3, 810908c <_kill_r+0x1c>
 810908a:	6023      	str	r3, [r4, #0]
 810908c:	bd38      	pop	{r3, r4, r5, pc}
 810908e:	bf00      	nop
 8109090:	10000350 	.word	0x10000350

08109094 <_getpid_r>:
 8109094:	f7f8 b98a 	b.w	81013ac <_getpid>

08109098 <__sread>:
 8109098:	b510      	push	{r4, lr}
 810909a:	460c      	mov	r4, r1
 810909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81090a0:	f000 f894 	bl	81091cc <_read_r>
 81090a4:	2800      	cmp	r0, #0
 81090a6:	bfab      	itete	ge
 81090a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81090aa:	89a3      	ldrhlt	r3, [r4, #12]
 81090ac:	181b      	addge	r3, r3, r0
 81090ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81090b2:	bfac      	ite	ge
 81090b4:	6563      	strge	r3, [r4, #84]	; 0x54
 81090b6:	81a3      	strhlt	r3, [r4, #12]
 81090b8:	bd10      	pop	{r4, pc}

081090ba <__swrite>:
 81090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81090be:	461f      	mov	r7, r3
 81090c0:	898b      	ldrh	r3, [r1, #12]
 81090c2:	05db      	lsls	r3, r3, #23
 81090c4:	4605      	mov	r5, r0
 81090c6:	460c      	mov	r4, r1
 81090c8:	4616      	mov	r6, r2
 81090ca:	d505      	bpl.n	81090d8 <__swrite+0x1e>
 81090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81090d0:	2302      	movs	r3, #2
 81090d2:	2200      	movs	r2, #0
 81090d4:	f000 f868 	bl	81091a8 <_lseek_r>
 81090d8:	89a3      	ldrh	r3, [r4, #12]
 81090da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81090de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81090e2:	81a3      	strh	r3, [r4, #12]
 81090e4:	4632      	mov	r2, r6
 81090e6:	463b      	mov	r3, r7
 81090e8:	4628      	mov	r0, r5
 81090ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81090ee:	f000 b817 	b.w	8109120 <_write_r>

081090f2 <__sseek>:
 81090f2:	b510      	push	{r4, lr}
 81090f4:	460c      	mov	r4, r1
 81090f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81090fa:	f000 f855 	bl	81091a8 <_lseek_r>
 81090fe:	1c43      	adds	r3, r0, #1
 8109100:	89a3      	ldrh	r3, [r4, #12]
 8109102:	bf15      	itete	ne
 8109104:	6560      	strne	r0, [r4, #84]	; 0x54
 8109106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810910a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810910e:	81a3      	strheq	r3, [r4, #12]
 8109110:	bf18      	it	ne
 8109112:	81a3      	strhne	r3, [r4, #12]
 8109114:	bd10      	pop	{r4, pc}

08109116 <__sclose>:
 8109116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810911a:	f000 b813 	b.w	8109144 <_close_r>
	...

08109120 <_write_r>:
 8109120:	b538      	push	{r3, r4, r5, lr}
 8109122:	4d07      	ldr	r5, [pc, #28]	; (8109140 <_write_r+0x20>)
 8109124:	4604      	mov	r4, r0
 8109126:	4608      	mov	r0, r1
 8109128:	4611      	mov	r1, r2
 810912a:	2200      	movs	r2, #0
 810912c:	602a      	str	r2, [r5, #0]
 810912e:	461a      	mov	r2, r3
 8109130:	f7f8 f97b 	bl	810142a <_write>
 8109134:	1c43      	adds	r3, r0, #1
 8109136:	d102      	bne.n	810913e <_write_r+0x1e>
 8109138:	682b      	ldr	r3, [r5, #0]
 810913a:	b103      	cbz	r3, 810913e <_write_r+0x1e>
 810913c:	6023      	str	r3, [r4, #0]
 810913e:	bd38      	pop	{r3, r4, r5, pc}
 8109140:	10000350 	.word	0x10000350

08109144 <_close_r>:
 8109144:	b538      	push	{r3, r4, r5, lr}
 8109146:	4d06      	ldr	r5, [pc, #24]	; (8109160 <_close_r+0x1c>)
 8109148:	2300      	movs	r3, #0
 810914a:	4604      	mov	r4, r0
 810914c:	4608      	mov	r0, r1
 810914e:	602b      	str	r3, [r5, #0]
 8109150:	f7f8 f987 	bl	8101462 <_close>
 8109154:	1c43      	adds	r3, r0, #1
 8109156:	d102      	bne.n	810915e <_close_r+0x1a>
 8109158:	682b      	ldr	r3, [r5, #0]
 810915a:	b103      	cbz	r3, 810915e <_close_r+0x1a>
 810915c:	6023      	str	r3, [r4, #0]
 810915e:	bd38      	pop	{r3, r4, r5, pc}
 8109160:	10000350 	.word	0x10000350

08109164 <_fstat_r>:
 8109164:	b538      	push	{r3, r4, r5, lr}
 8109166:	4d07      	ldr	r5, [pc, #28]	; (8109184 <_fstat_r+0x20>)
 8109168:	2300      	movs	r3, #0
 810916a:	4604      	mov	r4, r0
 810916c:	4608      	mov	r0, r1
 810916e:	4611      	mov	r1, r2
 8109170:	602b      	str	r3, [r5, #0]
 8109172:	f7f8 f982 	bl	810147a <_fstat>
 8109176:	1c43      	adds	r3, r0, #1
 8109178:	d102      	bne.n	8109180 <_fstat_r+0x1c>
 810917a:	682b      	ldr	r3, [r5, #0]
 810917c:	b103      	cbz	r3, 8109180 <_fstat_r+0x1c>
 810917e:	6023      	str	r3, [r4, #0]
 8109180:	bd38      	pop	{r3, r4, r5, pc}
 8109182:	bf00      	nop
 8109184:	10000350 	.word	0x10000350

08109188 <_isatty_r>:
 8109188:	b538      	push	{r3, r4, r5, lr}
 810918a:	4d06      	ldr	r5, [pc, #24]	; (81091a4 <_isatty_r+0x1c>)
 810918c:	2300      	movs	r3, #0
 810918e:	4604      	mov	r4, r0
 8109190:	4608      	mov	r0, r1
 8109192:	602b      	str	r3, [r5, #0]
 8109194:	f7f8 f981 	bl	810149a <_isatty>
 8109198:	1c43      	adds	r3, r0, #1
 810919a:	d102      	bne.n	81091a2 <_isatty_r+0x1a>
 810919c:	682b      	ldr	r3, [r5, #0]
 810919e:	b103      	cbz	r3, 81091a2 <_isatty_r+0x1a>
 81091a0:	6023      	str	r3, [r4, #0]
 81091a2:	bd38      	pop	{r3, r4, r5, pc}
 81091a4:	10000350 	.word	0x10000350

081091a8 <_lseek_r>:
 81091a8:	b538      	push	{r3, r4, r5, lr}
 81091aa:	4d07      	ldr	r5, [pc, #28]	; (81091c8 <_lseek_r+0x20>)
 81091ac:	4604      	mov	r4, r0
 81091ae:	4608      	mov	r0, r1
 81091b0:	4611      	mov	r1, r2
 81091b2:	2200      	movs	r2, #0
 81091b4:	602a      	str	r2, [r5, #0]
 81091b6:	461a      	mov	r2, r3
 81091b8:	f7f8 f97a 	bl	81014b0 <_lseek>
 81091bc:	1c43      	adds	r3, r0, #1
 81091be:	d102      	bne.n	81091c6 <_lseek_r+0x1e>
 81091c0:	682b      	ldr	r3, [r5, #0]
 81091c2:	b103      	cbz	r3, 81091c6 <_lseek_r+0x1e>
 81091c4:	6023      	str	r3, [r4, #0]
 81091c6:	bd38      	pop	{r3, r4, r5, pc}
 81091c8:	10000350 	.word	0x10000350

081091cc <_read_r>:
 81091cc:	b538      	push	{r3, r4, r5, lr}
 81091ce:	4d07      	ldr	r5, [pc, #28]	; (81091ec <_read_r+0x20>)
 81091d0:	4604      	mov	r4, r0
 81091d2:	4608      	mov	r0, r1
 81091d4:	4611      	mov	r1, r2
 81091d6:	2200      	movs	r2, #0
 81091d8:	602a      	str	r2, [r5, #0]
 81091da:	461a      	mov	r2, r3
 81091dc:	f7f8 f908 	bl	81013f0 <_read>
 81091e0:	1c43      	adds	r3, r0, #1
 81091e2:	d102      	bne.n	81091ea <_read_r+0x1e>
 81091e4:	682b      	ldr	r3, [r5, #0]
 81091e6:	b103      	cbz	r3, 81091ea <_read_r+0x1e>
 81091e8:	6023      	str	r3, [r4, #0]
 81091ea:	bd38      	pop	{r3, r4, r5, pc}
 81091ec:	10000350 	.word	0x10000350

081091f0 <_init>:
 81091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81091f2:	bf00      	nop
 81091f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81091f6:	bc08      	pop	{r3}
 81091f8:	469e      	mov	lr, r3
 81091fa:	4770      	bx	lr

081091fc <_fini>:
 81091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81091fe:	bf00      	nop
 8109200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109202:	bc08      	pop	{r3}
 8109204:	469e      	mov	lr, r3
 8109206:	4770      	bx	lr
