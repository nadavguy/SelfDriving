
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0810bb50  0810bb50  0001bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810c25c  0810c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810c260  0810c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000028c  10000000  0810c264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a0  1000028c  0810c4f0  0002028c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000052c  0810c4f0  0002052c  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810c4f0  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000379c7  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000067e3  00000000  00000000  00057c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001588  00000000  00000000  0005e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001328  00000000  00000000  0005f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041543  00000000  00000000  00060d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022b69  00000000  00000000  000a225b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185968  00000000  00000000  000c4dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024a72c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a94  00000000  00000000  0024a780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000028c 	.word	0x1000028c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810bb38 	.word	0x0810bb38

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000290 	.word	0x10000290
 81002dc:	0810bb38 	.word	0x0810bb38

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_d2lz>:
 8100db8:	b538      	push	{r3, r4, r5, lr}
 8100dba:	2200      	movs	r2, #0
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	460d      	mov	r5, r1
 8100dc2:	f7ff ff23 	bl	8100c0c <__aeabi_dcmplt>
 8100dc6:	b928      	cbnz	r0, 8100dd4 <__aeabi_d2lz+0x1c>
 8100dc8:	4620      	mov	r0, r4
 8100dca:	4629      	mov	r1, r5
 8100dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100dd0:	f000 b80a 	b.w	8100de8 <__aeabi_d2ulz>
 8100dd4:	4620      	mov	r0, r4
 8100dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dda:	f000 f805 	bl	8100de8 <__aeabi_d2ulz>
 8100dde:	4240      	negs	r0, r0
 8100de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100de4:	bd38      	pop	{r3, r4, r5, pc}
 8100de6:	bf00      	nop

08100de8 <__aeabi_d2ulz>:
 8100de8:	b5d0      	push	{r4, r6, r7, lr}
 8100dea:	4b0c      	ldr	r3, [pc, #48]	; (8100e1c <__aeabi_d2ulz+0x34>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	4606      	mov	r6, r0
 8100df0:	460f      	mov	r7, r1
 8100df2:	f7ff fc99 	bl	8100728 <__aeabi_dmul>
 8100df6:	f7ff ff6f 	bl	8100cd8 <__aeabi_d2uiz>
 8100dfa:	4604      	mov	r4, r0
 8100dfc:	f7ff fc1a 	bl	8100634 <__aeabi_ui2d>
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <__aeabi_d2ulz+0x38>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	f7ff fc90 	bl	8100728 <__aeabi_dmul>
 8100e08:	4602      	mov	r2, r0
 8100e0a:	460b      	mov	r3, r1
 8100e0c:	4630      	mov	r0, r6
 8100e0e:	4639      	mov	r1, r7
 8100e10:	f7ff fad2 	bl	81003b8 <__aeabi_dsub>
 8100e14:	f7ff ff60 	bl	8100cd8 <__aeabi_d2uiz>
 8100e18:	4621      	mov	r1, r4
 8100e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e1c:	3df00000 	.word	0x3df00000
 8100e20:	41f00000 	.word	0x41f00000

08100e24 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b084      	sub	sp, #16
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	60f8      	str	r0, [r7, #12]
 8100e2c:	60b9      	str	r1, [r7, #8]
 8100e2e:	607a      	str	r2, [r7, #4]
 8100e30:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8100e32:	68bb      	ldr	r3, [r7, #8]
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	4a09      	ldr	r2, [pc, #36]	; (8100e5c <rpmsg_recv_callback+0x38>)
 8100e38:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8100e3a:	68bb      	ldr	r3, [r7, #8]
 8100e3c:	4a08      	ldr	r2, [pc, #32]	; (8100e60 <rpmsg_recv_callback+0x3c>)
 8100e3e:	6013      	str	r3, [r2, #0]
	message_received=1;
 8100e40:	4b08      	ldr	r3, [pc, #32]	; (8100e64 <rpmsg_recv_callback+0x40>)
 8100e42:	2201      	movs	r2, #1
 8100e44:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8100e46:	4b05      	ldr	r3, [pc, #20]	; (8100e5c <rpmsg_recv_callback+0x38>)
 8100e48:	681b      	ldr	r3, [r3, #0]
 8100e4a:	b2db      	uxtb	r3, r3
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	f005 fffd 	bl	8106e4c <parseRecievedMessages>
	return 0;
 8100e52:	2300      	movs	r3, #0
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	3710      	adds	r7, #16
 8100e58:	46bd      	mov	sp, r7
 8100e5a:	bd80      	pop	{r7, pc}
 8100e5c:	100003bc 	.word	0x100003bc
 8100e60:	100002a8 	.word	0x100002a8
 8100e64:	1000046c 	.word	0x1000046c

08100e68 <receive_message>:

#ifdef CORE_CM4
unsigned int receive_message(void)
{
 8100e68:	b580      	push	{r7, lr}
 8100e6a:	af00      	add	r7, sp, #0
	while (message_received == 0)
 8100e6c:	e001      	b.n	8100e72 <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8100e6e:	f006 f9cb 	bl	8107208 <OPENAMP_check_for_message>
	while (message_received == 0)
 8100e72:	4b05      	ldr	r3, [pc, #20]	; (8100e88 <receive_message+0x20>)
 8100e74:	681b      	ldr	r3, [r3, #0]
 8100e76:	2b00      	cmp	r3, #0
 8100e78:	d0f9      	beq.n	8100e6e <receive_message+0x6>
	}
	message_received = 0;
 8100e7a:	4b03      	ldr	r3, [pc, #12]	; (8100e88 <receive_message+0x20>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	601a      	str	r2, [r3, #0]

	return received_data;
 8100e80:	4b02      	ldr	r3, [pc, #8]	; (8100e8c <receive_message+0x24>)
 8100e82:	681b      	ldr	r3, [r3, #0]
}
 8100e84:	4618      	mov	r0, r3
 8100e86:	bd80      	pop	{r7, pc}
 8100e88:	1000046c 	.word	0x1000046c
 8100e8c:	100003bc 	.word	0x100003bc

08100e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e90:	b480      	push	{r7}
 8100e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e94:	4b0b      	ldr	r3, [pc, #44]	; (8100ec4 <SystemInit+0x34>)
 8100e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e9a:	4a0a      	ldr	r2, [pc, #40]	; (8100ec4 <SystemInit+0x34>)
 8100e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100ea4:	4b07      	ldr	r3, [pc, #28]	; (8100ec4 <SystemInit+0x34>)
 8100ea6:	691b      	ldr	r3, [r3, #16]
 8100ea8:	4a06      	ldr	r2, [pc, #24]	; (8100ec4 <SystemInit+0x34>)
 8100eaa:	f043 0310 	orr.w	r3, r3, #16
 8100eae:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100eb0:	4b04      	ldr	r3, [pc, #16]	; (8100ec4 <SystemInit+0x34>)
 8100eb2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100eb6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100eb8:	bf00      	nop
 8100eba:	46bd      	mov	sp, r7
 8100ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec0:	4770      	bx	lr
 8100ec2:	bf00      	nop
 8100ec4:	e000ed00 	.word	0xe000ed00

08100ec8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100ec8:	b480      	push	{r7}
 8100eca:	b085      	sub	sp, #20
 8100ecc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100ece:	4b19      	ldr	r3, [pc, #100]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ed4:	4a17      	ldr	r2, [pc, #92]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100ed6:	f043 0301 	orr.w	r3, r3, #1
 8100eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ede:	4b15      	ldr	r3, [pc, #84]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ee4:	f003 0301 	and.w	r3, r3, #1
 8100ee8:	60fb      	str	r3, [r7, #12]
 8100eea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100eec:	4b11      	ldr	r3, [pc, #68]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ef2:	4a10      	ldr	r2, [pc, #64]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100ef4:	f043 0302 	orr.w	r3, r3, #2
 8100ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100efc:	4b0d      	ldr	r3, [pc, #52]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f02:	f003 0302 	and.w	r3, r3, #2
 8100f06:	60bb      	str	r3, [r7, #8]
 8100f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f0a:	4b0a      	ldr	r3, [pc, #40]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f10:	4a08      	ldr	r2, [pc, #32]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100f12:	f043 0308 	orr.w	r3, r3, #8
 8100f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f1a:	4b06      	ldr	r3, [pc, #24]	; (8100f34 <MX_GPIO_Init+0x6c>)
 8100f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f20:	f003 0308 	and.w	r3, r3, #8
 8100f24:	607b      	str	r3, [r7, #4]
 8100f26:	687b      	ldr	r3, [r7, #4]

}
 8100f28:	bf00      	nop
 8100f2a:	3714      	adds	r7, #20
 8100f2c:	46bd      	mov	sp, r7
 8100f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f32:	4770      	bx	lr
 8100f34:	58024400 	.word	0x58024400

08100f38 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8100f38:	b580      	push	{r7, lr}
 8100f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100f3c:	4b1b      	ldr	r3, [pc, #108]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f3e:	4a1c      	ldr	r2, [pc, #112]	; (8100fb0 <MX_I2C2_Init+0x78>)
 8100f40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 8100f42:	4b1a      	ldr	r3, [pc, #104]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f44:	4a1b      	ldr	r2, [pc, #108]	; (8100fb4 <MX_I2C2_Init+0x7c>)
 8100f46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100f48:	4b18      	ldr	r3, [pc, #96]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f4a:	2200      	movs	r2, #0
 8100f4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100f4e:	4b17      	ldr	r3, [pc, #92]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f50:	2201      	movs	r2, #1
 8100f52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f54:	4b15      	ldr	r3, [pc, #84]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f56:	2200      	movs	r2, #0
 8100f58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100f5a:	4b14      	ldr	r3, [pc, #80]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f5c:	2200      	movs	r2, #0
 8100f5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f60:	4b12      	ldr	r3, [pc, #72]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f66:	4b11      	ldr	r3, [pc, #68]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f68:	2200      	movs	r2, #0
 8100f6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f6c:	4b0f      	ldr	r3, [pc, #60]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100f72:	480e      	ldr	r0, [pc, #56]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f74:	f001 f850 	bl	8102018 <HAL_I2C_Init>
 8100f78:	4603      	mov	r3, r0
 8100f7a:	2b00      	cmp	r3, #0
 8100f7c:	d001      	beq.n	8100f82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100f7e:	f000 f9c9 	bl	8101314 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100f82:	2100      	movs	r1, #0
 8100f84:	4809      	ldr	r0, [pc, #36]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f86:	f001 fd3b 	bl	8102a00 <HAL_I2CEx_ConfigAnalogFilter>
 8100f8a:	4603      	mov	r3, r0
 8100f8c:	2b00      	cmp	r3, #0
 8100f8e:	d001      	beq.n	8100f94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100f90:	f000 f9c0 	bl	8101314 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100f94:	2100      	movs	r1, #0
 8100f96:	4805      	ldr	r0, [pc, #20]	; (8100fac <MX_I2C2_Init+0x74>)
 8100f98:	f001 fd7d 	bl	8102a96 <HAL_I2CEx_ConfigDigitalFilter>
 8100f9c:	4603      	mov	r3, r0
 8100f9e:	2b00      	cmp	r3, #0
 8100fa0:	d001      	beq.n	8100fa6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100fa2:	f000 f9b7 	bl	8101314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100fa6:	bf00      	nop
 8100fa8:	bd80      	pop	{r7, pc}
 8100faa:	bf00      	nop
 8100fac:	1000036c 	.word	0x1000036c
 8100fb0:	40005800 	.word	0x40005800
 8100fb4:	00301242 	.word	0x00301242

08100fb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100fb8:	b580      	push	{r7, lr}
 8100fba:	b0b8      	sub	sp, #224	; 0xe0
 8100fbc:	af00      	add	r7, sp, #0
 8100fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fc4:	2200      	movs	r2, #0
 8100fc6:	601a      	str	r2, [r3, #0]
 8100fc8:	605a      	str	r2, [r3, #4]
 8100fca:	609a      	str	r2, [r3, #8]
 8100fcc:	60da      	str	r2, [r3, #12]
 8100fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fd0:	f107 0310 	add.w	r3, r7, #16
 8100fd4:	22bc      	movs	r2, #188	; 0xbc
 8100fd6:	2100      	movs	r1, #0
 8100fd8:	4618      	mov	r0, r3
 8100fda:	f006 f9b5 	bl	8107348 <memset>
  if(i2cHandle->Instance==I2C2)
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	681b      	ldr	r3, [r3, #0]
 8100fe2:	4a29      	ldr	r2, [pc, #164]	; (8101088 <HAL_I2C_MspInit+0xd0>)
 8100fe4:	4293      	cmp	r3, r2
 8100fe6:	d14a      	bne.n	810107e <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100fe8:	2308      	movs	r3, #8
 8100fea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100fec:	2300      	movs	r3, #0
 8100fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ff2:	f107 0310 	add.w	r3, r7, #16
 8100ff6:	4618      	mov	r0, r3
 8100ff8:	f001 ff9c 	bl	8102f34 <HAL_RCCEx_PeriphCLKConfig>
 8100ffc:	4603      	mov	r3, r0
 8100ffe:	2b00      	cmp	r3, #0
 8101000:	d001      	beq.n	8101006 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101002:	f000 f987 	bl	8101314 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101006:	4b21      	ldr	r3, [pc, #132]	; (810108c <HAL_I2C_MspInit+0xd4>)
 8101008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810100c:	4a1f      	ldr	r2, [pc, #124]	; (810108c <HAL_I2C_MspInit+0xd4>)
 810100e:	f043 0302 	orr.w	r3, r3, #2
 8101012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101016:	4b1d      	ldr	r3, [pc, #116]	; (810108c <HAL_I2C_MspInit+0xd4>)
 8101018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810101c:	f003 0302 	and.w	r3, r3, #2
 8101020:	60fb      	str	r3, [r7, #12]
 8101022:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101024:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810102c:	2312      	movs	r3, #18
 810102e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101032:	2300      	movs	r3, #0
 8101034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101038:	2300      	movs	r3, #0
 810103a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810103e:	2304      	movs	r3, #4
 8101040:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101044:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101048:	4619      	mov	r1, r3
 810104a:	4811      	ldr	r0, [pc, #68]	; (8101090 <HAL_I2C_MspInit+0xd8>)
 810104c:	f000 fdda 	bl	8101c04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101050:	4b0e      	ldr	r3, [pc, #56]	; (810108c <HAL_I2C_MspInit+0xd4>)
 8101052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101056:	4a0d      	ldr	r2, [pc, #52]	; (810108c <HAL_I2C_MspInit+0xd4>)
 8101058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810105c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101060:	4b0a      	ldr	r3, [pc, #40]	; (810108c <HAL_I2C_MspInit+0xd4>)
 8101062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810106a:	60bb      	str	r3, [r7, #8]
 810106c:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 810106e:	2200      	movs	r2, #0
 8101070:	2100      	movs	r1, #0
 8101072:	2021      	movs	r0, #33	; 0x21
 8101074:	f000 fd6f 	bl	8101b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8101078:	2021      	movs	r0, #33	; 0x21
 810107a:	f000 fd86 	bl	8101b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 810107e:	bf00      	nop
 8101080:	37e0      	adds	r7, #224	; 0xe0
 8101082:	46bd      	mov	sp, r7
 8101084:	bd80      	pop	{r7, pc}
 8101086:	bf00      	nop
 8101088:	40005800 	.word	0x40005800
 810108c:	58024400 	.word	0x58024400
 8101090:	58020400 	.word	0x58020400

08101094 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8101094:	b580      	push	{r7, lr}
 8101096:	b086      	sub	sp, #24
 8101098:	af02      	add	r7, sp, #8
 810109a:	60f8      	str	r0, [r7, #12]
 810109c:	60b9      	str	r1, [r7, #8]
 810109e:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81010a0:	68fb      	ldr	r3, [r7, #12]
 81010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81010a8:	d101      	bne.n	81010ae <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81010aa:	4b09      	ldr	r3, [pc, #36]	; (81010d0 <rpmsg_send+0x3c>)
 81010ac:	e00c      	b.n	81010c8 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81010ae:	68fb      	ldr	r3, [r7, #12]
 81010b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81010b2:	68fb      	ldr	r3, [r7, #12]
 81010b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81010b6:	2301      	movs	r3, #1
 81010b8:	9301      	str	r3, [sp, #4]
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	9300      	str	r3, [sp, #0]
 81010be:	68bb      	ldr	r3, [r7, #8]
 81010c0:	68f8      	ldr	r0, [r7, #12]
 81010c2:	f004 fdd5 	bl	8105c70 <rpmsg_send_offchannel_raw>
 81010c6:	4603      	mov	r3, r0
					 len, true);
}
 81010c8:	4618      	mov	r0, r3
 81010ca:	3710      	adds	r7, #16
 81010cc:	46bd      	mov	sp, r7
 81010ce:	bd80      	pop	{r7, pc}
 81010d0:	fffff829 	.word	0xfffff829

081010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81010d6:	b09f      	sub	sp, #124	; 0x7c
 81010d8:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 81010da:	2300      	movs	r3, #0
 81010dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 81010de:	4b7d      	ldr	r3, [pc, #500]	; (81012d4 <main+0x200>)
 81010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010e4:	4a7b      	ldr	r2, [pc, #492]	; (81012d4 <main+0x200>)
 81010e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010ee:	4b79      	ldr	r3, [pc, #484]	; (81012d4 <main+0x200>)
 81010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81010f8:	607b      	str	r3, [r7, #4]
 81010fa:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81010fc:	2001      	movs	r0, #1
 81010fe:	f000 ff5f 	bl	8101fc0 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101102:	f001 fd8f 	bl	8102c24 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101106:	2201      	movs	r2, #1
 8101108:	2102      	movs	r1, #2
 810110a:	2000      	movs	r0, #0
 810110c:	f001 fd10 	bl	8102b30 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101110:	4b71      	ldr	r3, [pc, #452]	; (81012d8 <main+0x204>)
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	091b      	lsrs	r3, r3, #4
 8101116:	f003 030f 	and.w	r3, r3, #15
 810111a:	2b07      	cmp	r3, #7
 810111c:	d108      	bne.n	8101130 <main+0x5c>
 810111e:	4b6f      	ldr	r3, [pc, #444]	; (81012dc <main+0x208>)
 8101120:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101124:	4a6d      	ldr	r2, [pc, #436]	; (81012dc <main+0x208>)
 8101126:	f043 0301 	orr.w	r3, r3, #1
 810112a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810112e:	e007      	b.n	8101140 <main+0x6c>
 8101130:	4b6a      	ldr	r3, [pc, #424]	; (81012dc <main+0x208>)
 8101132:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101136:	4a69      	ldr	r2, [pc, #420]	; (81012dc <main+0x208>)
 8101138:	f043 0301 	orr.w	r3, r3, #1
 810113c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 8101140:	207e      	movs	r0, #126	; 0x7e
 8101142:	f000 fd3c 	bl	8101bbe <HAL_NVIC_ClearPendingIRQ>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101146:	f000 fb35 	bl	81017b4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810114a:	f7ff febd 	bl	8100ec8 <MX_GPIO_Init>
  MX_I2C2_Init();
 810114e:	f7ff fef3 	bl	8100f38 <MX_I2C2_Init>
  MX_SPI1_Init();
 8101152:	f000 f8e5 	bl	8101320 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 8101156:	f005 fe99 	bl	8106e8c <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 810115a:	2100      	movs	r1, #0
 810115c:	2001      	movs	r0, #1
 810115e:	f005 ff9f 	bl	81070a0 <MX_OPENAMP_Init>
 8101162:	4603      	mov	r3, r0
 8101164:	2b00      	cmp	r3, #0
 8101166:	d001      	beq.n	810116c <main+0x98>
	{
		Error_Handler();
 8101168:	f000 f8d4 	bl	8101314 <Error_Handler>
	}

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 810116c:	2300      	movs	r3, #0
 810116e:	9300      	str	r3, [sp, #0]
 8101170:	4b5b      	ldr	r3, [pc, #364]	; (81012e0 <main+0x20c>)
 8101172:	f04f 32ff 	mov.w	r2, #4294967295
 8101176:	495b      	ldr	r1, [pc, #364]	; (81012e4 <main+0x210>)
 8101178:	485b      	ldr	r0, [pc, #364]	; (81012e8 <main+0x214>)
 810117a:	f006 f827 	bl	81071cc <OPENAMP_create_endpoint>
 810117e:	6278      	str	r0, [r7, #36]	; 0x24
			rpmsg_recv_callback, NULL);
	if (status < 0)
 8101180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101182:	2b00      	cmp	r3, #0
 8101184:	da17      	bge.n	81011b6 <main+0xe2>
	{
		Error_Handler();
 8101186:	f000 f8c5 	bl	8101314 <Error_Handler>
	}

	/* Pingpong application*/
	/* Reveice an interger from the master, incremennt it and send back the result to the master*/
	while (message < 100)
 810118a:	e014      	b.n	81011b6 <main+0xe2>
	{
		message = receive_message();
 810118c:	f7ff fe6c 	bl	8100e68 <receive_message>
 8101190:	4603      	mov	r3, r0
 8101192:	4a56      	ldr	r2, [pc, #344]	; (81012ec <main+0x218>)
 8101194:	6013      	str	r3, [r2, #0]
		message++;
 8101196:	4b55      	ldr	r3, [pc, #340]	; (81012ec <main+0x218>)
 8101198:	681b      	ldr	r3, [r3, #0]
 810119a:	3301      	adds	r3, #1
 810119c:	4a53      	ldr	r2, [pc, #332]	; (81012ec <main+0x218>)
 810119e:	6013      	str	r3, [r2, #0]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 81011a0:	2204      	movs	r2, #4
 81011a2:	4952      	ldr	r1, [pc, #328]	; (81012ec <main+0x218>)
 81011a4:	4850      	ldr	r0, [pc, #320]	; (81012e8 <main+0x214>)
 81011a6:	f7ff ff75 	bl	8101094 <rpmsg_send>
 81011aa:	6278      	str	r0, [r7, #36]	; 0x24
		if (status < 0)
 81011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81011ae:	2b00      	cmp	r3, #0
 81011b0:	da01      	bge.n	81011b6 <main+0xe2>
		{
			Error_Handler();
 81011b2:	f000 f8af 	bl	8101314 <Error_Handler>
	while (message < 100)
 81011b6:	4b4d      	ldr	r3, [pc, #308]	; (81012ec <main+0x218>)
 81011b8:	681b      	ldr	r3, [r3, #0]
 81011ba:	2b63      	cmp	r3, #99	; 0x63
 81011bc:	d9e6      	bls.n	810118c <main+0xb8>
	}

	/* Deinitialize OpenAMP */
//		OPENAMP_DeInit();

	chasisIMU.deviceAddress = 0x68<<1;
 81011be:	4b4c      	ldr	r3, [pc, #304]	; (81012f0 <main+0x21c>)
 81011c0:	22d0      	movs	r2, #208	; 0xd0
 81011c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 81011c6:	4a4a      	ldr	r2, [pc, #296]	; (81012f0 <main+0x21c>)
 81011c8:	4b4a      	ldr	r3, [pc, #296]	; (81012f4 <main+0x220>)
 81011ca:	4610      	mov	r0, r2
 81011cc:	4619      	mov	r1, r3
 81011ce:	234c      	movs	r3, #76	; 0x4c
 81011d0:	461a      	mov	r2, r3
 81011d2:	f006 f8ab 	bl	810732c <memcpy>
	initMPU(chasisIMU);
 81011d6:	4e46      	ldr	r6, [pc, #280]	; (81012f0 <main+0x21c>)
 81011d8:	466d      	mov	r5, sp
 81011da:	f106 0410 	add.w	r4, r6, #16
 81011de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81011ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81011f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81011f6:	f005 fe03 	bl	8106e00 <initMPU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int16_t AccData[3], GyroData[3], MagData[3];
	MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81011fa:	4e3d      	ldr	r6, [pc, #244]	; (81012f0 <main+0x21c>)
 81011fc:	f107 0314 	add.w	r3, r7, #20
 8101200:	9312      	str	r3, [sp, #72]	; 0x48
 8101202:	f107 030c 	add.w	r3, r7, #12
 8101206:	9311      	str	r3, [sp, #68]	; 0x44
 8101208:	f107 031c 	add.w	r3, r7, #28
 810120c:	9310      	str	r3, [sp, #64]	; 0x40
 810120e:	466d      	mov	r5, sp
 8101210:	f106 0410 	add.w	r4, r6, #16
 8101214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810121a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810121c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810121e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101220:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101224:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101228:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 810122c:	f003 fbfe 	bl	8104a2c <MPU9250_GetData>
	uint8_t R = 0;
 8101230:	2300      	movs	r3, #0
 8101232:	72fb      	strb	r3, [r7, #11]
	while (1)
	{
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 8101234:	4e2e      	ldr	r6, [pc, #184]	; (81012f0 <main+0x21c>)
 8101236:	f107 0314 	add.w	r3, r7, #20
 810123a:	9312      	str	r3, [sp, #72]	; 0x48
 810123c:	f107 030c 	add.w	r3, r7, #12
 8101240:	9311      	str	r3, [sp, #68]	; 0x44
 8101242:	f107 031c 	add.w	r3, r7, #28
 8101246:	9310      	str	r3, [sp, #64]	; 0x40
 8101248:	466d      	mov	r5, sp
 810124a:	f106 0410 	add.w	r4, r6, #16
 810124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810125a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810125e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101262:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101266:	f003 fbe1 	bl	8104a2c <MPU9250_GetData>
		sentAnglesData.opCode = 1;
 810126a:	4b23      	ldr	r3, [pc, #140]	; (81012f8 <main+0x224>)
 810126c:	2201      	movs	r2, #1
 810126e:	701a      	strb	r2, [r3, #0]
		sentAnglesData.bodyAngles.Pitch = 13;
 8101270:	4b21      	ldr	r3, [pc, #132]	; (81012f8 <main+0x224>)
 8101272:	4a22      	ldr	r2, [pc, #136]	; (81012fc <main+0x228>)
 8101274:	609a      	str	r2, [r3, #8]
		sentAnglesData.bodyAngles.Roll = 14;
 8101276:	4b20      	ldr	r3, [pc, #128]	; (81012f8 <main+0x224>)
 8101278:	4a21      	ldr	r2, [pc, #132]	; (8101300 <main+0x22c>)
 810127a:	605a      	str	r2, [r3, #4]
		sentAnglesData.bodyAngles.Yaw = 15;
 810127c:	4b1e      	ldr	r3, [pc, #120]	; (81012f8 <main+0x224>)
 810127e:	4a21      	ldr	r2, [pc, #132]	; (8101304 <main+0x230>)
 8101280:	60da      	str	r2, [r3, #12]
		sentAnglesData.lidarAngles.Pitch = 45;
 8101282:	4b1d      	ldr	r3, [pc, #116]	; (81012f8 <main+0x224>)
 8101284:	4a20      	ldr	r2, [pc, #128]	; (8101308 <main+0x234>)
 8101286:	615a      	str	r2, [r3, #20]
		sentAnglesData.lidarAngles.Roll = 46;
 8101288:	4b1b      	ldr	r3, [pc, #108]	; (81012f8 <main+0x224>)
 810128a:	4a20      	ldr	r2, [pc, #128]	; (810130c <main+0x238>)
 810128c:	611a      	str	r2, [r3, #16]
		sentAnglesData.lidarAngles.Yaw = 47;
 810128e:	4b1a      	ldr	r3, [pc, #104]	; (81012f8 <main+0x224>)
 8101290:	4a1f      	ldr	r2, [pc, #124]	; (8101310 <main+0x23c>)
 8101292:	619a      	str	r2, [r3, #24]
		if (R == 1)
 8101294:	7afb      	ldrb	r3, [r7, #11]
 8101296:	2b01      	cmp	r3, #1
 8101298:	d106      	bne.n	81012a8 <main+0x1d4>
		{
			status = OPENAMP_send(&rp_endpoint,&sentAnglesData, sizeof(sentAnglesData));
 810129a:	221c      	movs	r2, #28
 810129c:	4916      	ldr	r1, [pc, #88]	; (81012f8 <main+0x224>)
 810129e:	4812      	ldr	r0, [pc, #72]	; (81012e8 <main+0x214>)
 81012a0:	f7ff fef8 	bl	8101094 <rpmsg_send>
 81012a4:	6278      	str	r0, [r7, #36]	; 0x24
 81012a6:	e007      	b.n	81012b8 <main+0x1e4>
		}
		else
		{
			status = OPENAMP_send(&rp_endpoint,&R, sizeof(R));
 81012a8:	f107 030b 	add.w	r3, r7, #11
 81012ac:	2201      	movs	r2, #1
 81012ae:	4619      	mov	r1, r3
 81012b0:	480d      	ldr	r0, [pc, #52]	; (81012e8 <main+0x214>)
 81012b2:	f7ff feef 	bl	8101094 <rpmsg_send>
 81012b6:	6278      	str	r0, [r7, #36]	; 0x24
		}
		R++;
 81012b8:	7afb      	ldrb	r3, [r7, #11]
 81012ba:	3301      	adds	r3, #1
 81012bc:	b2db      	uxtb	r3, r3
 81012be:	72fb      	strb	r3, [r7, #11]
		if (R == 200)
 81012c0:	7afb      	ldrb	r3, [r7, #11]
 81012c2:	2bc8      	cmp	r3, #200	; 0xc8
 81012c4:	d101      	bne.n	81012ca <main+0x1f6>
		{
			R = 0;
 81012c6:	2300      	movs	r3, #0
 81012c8:	72fb      	strb	r3, [r7, #11]
		}
		HAL_Delay(100);
 81012ca:	2064      	movs	r0, #100	; 0x64
 81012cc:	f000 fb26 	bl	810191c <HAL_Delay>
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81012d0:	e7b0      	b.n	8101234 <main+0x160>
 81012d2:	bf00      	nop
 81012d4:	58024400 	.word	0x58024400
 81012d8:	e000ed00 	.word	0xe000ed00
 81012dc:	58026400 	.word	0x58026400
 81012e0:	08100e25 	.word	0x08100e25
 81012e4:	0810bb50 	.word	0x0810bb50
 81012e8:	10000410 	.word	0x10000410
 81012ec:	100003b8 	.word	0x100003b8
 81012f0:	100003c0 	.word	0x100003c0
 81012f4:	1000036c 	.word	0x1000036c
 81012f8:	10000450 	.word	0x10000450
 81012fc:	41500000 	.word	0x41500000
 8101300:	41600000 	.word	0x41600000
 8101304:	41700000 	.word	0x41700000
 8101308:	42340000 	.word	0x42340000
 810130c:	42380000 	.word	0x42380000
 8101310:	423c0000 	.word	0x423c0000

08101314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101314:	b480      	push	{r7}
 8101316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101318:	b672      	cpsid	i
}
 810131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 810131c:	e7fe      	b.n	810131c <Error_Handler+0x8>
	...

08101320 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101320:	b580      	push	{r7, lr}
 8101322:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101324:	4b28      	ldr	r3, [pc, #160]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101326:	4a29      	ldr	r2, [pc, #164]	; (81013cc <MX_SPI1_Init+0xac>)
 8101328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810132a:	4b27      	ldr	r3, [pc, #156]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810132c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8101332:	4b25      	ldr	r3, [pc, #148]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101334:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8101338:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 810133a:	4b23      	ldr	r3, [pc, #140]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810133c:	2203      	movs	r2, #3
 810133e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101340:	4b21      	ldr	r3, [pc, #132]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101342:	2200      	movs	r2, #0
 8101344:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101346:	4b20      	ldr	r3, [pc, #128]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101348:	2200      	movs	r2, #0
 810134a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810134c:	4b1e      	ldr	r3, [pc, #120]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810134e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101352:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8101354:	4b1c      	ldr	r3, [pc, #112]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101356:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 810135a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810135c:	4b1a      	ldr	r3, [pc, #104]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810135e:	2200      	movs	r2, #0
 8101360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101362:	4b19      	ldr	r3, [pc, #100]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101364:	2200      	movs	r2, #0
 8101366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101368:	4b17      	ldr	r3, [pc, #92]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810136a:	2200      	movs	r2, #0
 810136c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810136e:	4b16      	ldr	r3, [pc, #88]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101370:	2200      	movs	r2, #0
 8101372:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101374:	4b14      	ldr	r3, [pc, #80]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810137a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810137c:	4b12      	ldr	r3, [pc, #72]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810137e:	2200      	movs	r2, #0
 8101380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101382:	4b11      	ldr	r3, [pc, #68]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101384:	2200      	movs	r2, #0
 8101386:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101388:	4b0f      	ldr	r3, [pc, #60]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810138a:	2200      	movs	r2, #0
 810138c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810138e:	4b0e      	ldr	r3, [pc, #56]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101390:	2200      	movs	r2, #0
 8101392:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101394:	4b0c      	ldr	r3, [pc, #48]	; (81013c8 <MX_SPI1_Init+0xa8>)
 8101396:	2200      	movs	r2, #0
 8101398:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810139a:	4b0b      	ldr	r3, [pc, #44]	; (81013c8 <MX_SPI1_Init+0xa8>)
 810139c:	2200      	movs	r2, #0
 810139e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81013a0:	4b09      	ldr	r3, [pc, #36]	; (81013c8 <MX_SPI1_Init+0xa8>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81013a6:	4b08      	ldr	r3, [pc, #32]	; (81013c8 <MX_SPI1_Init+0xa8>)
 81013a8:	2200      	movs	r2, #0
 81013aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81013ac:	4b06      	ldr	r3, [pc, #24]	; (81013c8 <MX_SPI1_Init+0xa8>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81013b2:	4805      	ldr	r0, [pc, #20]	; (81013c8 <MX_SPI1_Init+0xa8>)
 81013b4:	f002 fe62 	bl	810407c <HAL_SPI_Init>
 81013b8:	4603      	mov	r3, r0
 81013ba:	2b00      	cmp	r3, #0
 81013bc:	d001      	beq.n	81013c2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 81013be:	f7ff ffa9 	bl	8101314 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81013c2:	bf00      	nop
 81013c4:	bd80      	pop	{r7, pc}
 81013c6:	bf00      	nop
 81013c8:	10000470 	.word	0x10000470
 81013cc:	40013000 	.word	0x40013000

081013d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81013d0:	b580      	push	{r7, lr}
 81013d2:	b0ba      	sub	sp, #232	; 0xe8
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81013dc:	2200      	movs	r2, #0
 81013de:	601a      	str	r2, [r3, #0]
 81013e0:	605a      	str	r2, [r3, #4]
 81013e2:	609a      	str	r2, [r3, #8]
 81013e4:	60da      	str	r2, [r3, #12]
 81013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013e8:	f107 0318 	add.w	r3, r7, #24
 81013ec:	22bc      	movs	r2, #188	; 0xbc
 81013ee:	2100      	movs	r1, #0
 81013f0:	4618      	mov	r0, r3
 81013f2:	f005 ffa9 	bl	8107348 <memset>
  if(spiHandle->Instance==SPI1)
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	4a36      	ldr	r2, [pc, #216]	; (81014d4 <HAL_SPI_MspInit+0x104>)
 81013fc:	4293      	cmp	r3, r2
 81013fe:	d165      	bne.n	81014cc <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101404:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101406:	2300      	movs	r3, #0
 8101408:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810140a:	f107 0318 	add.w	r3, r7, #24
 810140e:	4618      	mov	r0, r3
 8101410:	f001 fd90 	bl	8102f34 <HAL_RCCEx_PeriphCLKConfig>
 8101414:	4603      	mov	r3, r0
 8101416:	2b00      	cmp	r3, #0
 8101418:	d001      	beq.n	810141e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 810141a:	f7ff ff7b 	bl	8101314 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 810141e:	4b2e      	ldr	r3, [pc, #184]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 8101420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101424:	4a2c      	ldr	r2, [pc, #176]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 8101426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 810142a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810142e:	4b2a      	ldr	r3, [pc, #168]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 8101430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101438:	617b      	str	r3, [r7, #20]
 810143a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810143c:	4b26      	ldr	r3, [pc, #152]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 810143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101442:	4a25      	ldr	r2, [pc, #148]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 8101444:	f043 0301 	orr.w	r3, r3, #1
 8101448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810144c:	4b22      	ldr	r3, [pc, #136]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 810144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101452:	f003 0301 	and.w	r3, r3, #1
 8101456:	613b      	str	r3, [r7, #16]
 8101458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810145a:	4b1f      	ldr	r3, [pc, #124]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 810145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101460:	4a1d      	ldr	r2, [pc, #116]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 8101462:	f043 0308 	orr.w	r3, r3, #8
 8101466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810146a:	4b1b      	ldr	r3, [pc, #108]	; (81014d8 <HAL_SPI_MspInit+0x108>)
 810146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101470:	f003 0308 	and.w	r3, r3, #8
 8101474:	60fb      	str	r3, [r7, #12]
 8101476:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101478:	2320      	movs	r3, #32
 810147a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810147e:	2302      	movs	r3, #2
 8101480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101484:	2300      	movs	r3, #0
 8101486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810148a:	2300      	movs	r3, #0
 810148c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101490:	2305      	movs	r3, #5
 8101492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101496:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810149a:	4619      	mov	r1, r3
 810149c:	480f      	ldr	r0, [pc, #60]	; (81014dc <HAL_SPI_MspInit+0x10c>)
 810149e:	f000 fbb1 	bl	8101c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81014a2:	2380      	movs	r3, #128	; 0x80
 81014a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014a8:	2302      	movs	r3, #2
 81014aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ae:	2300      	movs	r3, #0
 81014b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014b4:	2300      	movs	r3, #0
 81014b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81014ba:	2305      	movs	r3, #5
 81014bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81014c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81014c4:	4619      	mov	r1, r3
 81014c6:	4806      	ldr	r0, [pc, #24]	; (81014e0 <HAL_SPI_MspInit+0x110>)
 81014c8:	f000 fb9c 	bl	8101c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81014cc:	bf00      	nop
 81014ce:	37e8      	adds	r7, #232	; 0xe8
 81014d0:	46bd      	mov	sp, r7
 81014d2:	bd80      	pop	{r7, pc}
 81014d4:	40013000 	.word	0x40013000
 81014d8:	58024400 	.word	0x58024400
 81014dc:	58020000 	.word	0x58020000
 81014e0:	58020c00 	.word	0x58020c00

081014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014e4:	b580      	push	{r7, lr}
 81014e6:	b082      	sub	sp, #8
 81014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014ea:	4b15      	ldr	r3, [pc, #84]	; (8101540 <HAL_MspInit+0x5c>)
 81014ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014f0:	4a13      	ldr	r2, [pc, #76]	; (8101540 <HAL_MspInit+0x5c>)
 81014f2:	f043 0302 	orr.w	r3, r3, #2
 81014f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014fa:	4b11      	ldr	r3, [pc, #68]	; (8101540 <HAL_MspInit+0x5c>)
 81014fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101500:	f003 0302 	and.w	r3, r3, #2
 8101504:	607b      	str	r3, [r7, #4]
 8101506:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 4, 0);
 8101508:	2200      	movs	r2, #0
 810150a:	2104      	movs	r1, #4
 810150c:	2040      	movs	r0, #64	; 0x40
 810150e:	f000 fb22 	bl	8101b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101512:	2040      	movs	r0, #64	; 0x40
 8101514:	f000 fb39 	bl	8101b8a <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 4, 0);
 8101518:	2200      	movs	r2, #0
 810151a:	2104      	movs	r1, #4
 810151c:	207e      	movs	r0, #126	; 0x7e
 810151e:	f000 fb1a 	bl	8101b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101522:	207e      	movs	r0, #126	; 0x7e
 8101524:	f000 fb31 	bl	8101b8a <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8101528:	2200      	movs	r2, #0
 810152a:	2104      	movs	r1, #4
 810152c:	2094      	movs	r0, #148	; 0x94
 810152e:	f000 fb12 	bl	8101b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8101532:	2094      	movs	r0, #148	; 0x94
 8101534:	f000 fb29 	bl	8101b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101538:	bf00      	nop
 810153a:	3708      	adds	r7, #8
 810153c:	46bd      	mov	sp, r7
 810153e:	bd80      	pop	{r7, pc}
 8101540:	58024400 	.word	0x58024400

08101544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101544:	b480      	push	{r7}
 8101546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101548:	e7fe      	b.n	8101548 <NMI_Handler+0x4>

0810154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810154a:	b480      	push	{r7}
 810154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810154e:	e7fe      	b.n	810154e <HardFault_Handler+0x4>

08101550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101550:	b480      	push	{r7}
 8101552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101554:	e7fe      	b.n	8101554 <MemManage_Handler+0x4>

08101556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101556:	b480      	push	{r7}
 8101558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810155a:	e7fe      	b.n	810155a <BusFault_Handler+0x4>

0810155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810155c:	b480      	push	{r7}
 810155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101560:	e7fe      	b.n	8101560 <UsageFault_Handler+0x4>

08101562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101562:	b480      	push	{r7}
 8101564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101566:	bf00      	nop
 8101568:	46bd      	mov	sp, r7
 810156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810156e:	4770      	bx	lr

08101570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101570:	b480      	push	{r7}
 8101572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101574:	bf00      	nop
 8101576:	46bd      	mov	sp, r7
 8101578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810157c:	4770      	bx	lr

0810157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810157e:	b480      	push	{r7}
 8101580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101582:	bf00      	nop
 8101584:	46bd      	mov	sp, r7
 8101586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810158a:	4770      	bx	lr

0810158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810158c:	b580      	push	{r7, lr}
 810158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101590:	f000 f9a4 	bl	81018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101594:	bf00      	nop
 8101596:	bd80      	pop	{r7, pc}

08101598 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8101598:	b580      	push	{r7, lr}
 810159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 810159c:	4802      	ldr	r0, [pc, #8]	; (81015a8 <I2C2_EV_IRQHandler+0x10>)
 810159e:	f000 fff9 	bl	8102594 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 81015a2:	bf00      	nop
 81015a4:	bd80      	pop	{r7, pc}
 81015a6:	bf00      	nop
 81015a8:	1000036c 	.word	0x1000036c

081015ac <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 81015ac:	b480      	push	{r7}
 81015ae:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 81015b0:	bf00      	nop
 81015b2:	46bd      	mov	sp, r7
 81015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015b8:	4770      	bx	lr

081015ba <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81015ba:	b580      	push	{r7, lr}
 81015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81015be:	f000 fd11 	bl	8101fe4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81015c2:	bf00      	nop
 81015c4:	bd80      	pop	{r7, pc}

081015c6 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 81015c6:	b480      	push	{r7}
 81015c8:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 81015ca:	bf00      	nop
 81015cc:	46bd      	mov	sp, r7
 81015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d2:	4770      	bx	lr

081015d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81015d4:	b480      	push	{r7}
 81015d6:	af00      	add	r7, sp, #0
	return 1;
 81015d8:	2301      	movs	r3, #1
}
 81015da:	4618      	mov	r0, r3
 81015dc:	46bd      	mov	sp, r7
 81015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e2:	4770      	bx	lr

081015e4 <_kill>:

int _kill(int pid, int sig)
{
 81015e4:	b580      	push	{r7, lr}
 81015e6:	b082      	sub	sp, #8
 81015e8:	af00      	add	r7, sp, #0
 81015ea:	6078      	str	r0, [r7, #4]
 81015ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81015ee:	f005 fe51 	bl	8107294 <__errno>
 81015f2:	4603      	mov	r3, r0
 81015f4:	2216      	movs	r2, #22
 81015f6:	601a      	str	r2, [r3, #0]
	return -1;
 81015f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 81015fc:	4618      	mov	r0, r3
 81015fe:	3708      	adds	r7, #8
 8101600:	46bd      	mov	sp, r7
 8101602:	bd80      	pop	{r7, pc}

08101604 <_exit>:

void _exit (int status)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	b082      	sub	sp, #8
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 810160c:	f04f 31ff 	mov.w	r1, #4294967295
 8101610:	6878      	ldr	r0, [r7, #4]
 8101612:	f7ff ffe7 	bl	81015e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101616:	e7fe      	b.n	8101616 <_exit+0x12>

08101618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101618:	b580      	push	{r7, lr}
 810161a:	b086      	sub	sp, #24
 810161c:	af00      	add	r7, sp, #0
 810161e:	60f8      	str	r0, [r7, #12]
 8101620:	60b9      	str	r1, [r7, #8]
 8101622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101624:	2300      	movs	r3, #0
 8101626:	617b      	str	r3, [r7, #20]
 8101628:	e00a      	b.n	8101640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810162a:	f3af 8000 	nop.w
 810162e:	4601      	mov	r1, r0
 8101630:	68bb      	ldr	r3, [r7, #8]
 8101632:	1c5a      	adds	r2, r3, #1
 8101634:	60ba      	str	r2, [r7, #8]
 8101636:	b2ca      	uxtb	r2, r1
 8101638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810163a:	697b      	ldr	r3, [r7, #20]
 810163c:	3301      	adds	r3, #1
 810163e:	617b      	str	r3, [r7, #20]
 8101640:	697a      	ldr	r2, [r7, #20]
 8101642:	687b      	ldr	r3, [r7, #4]
 8101644:	429a      	cmp	r2, r3
 8101646:	dbf0      	blt.n	810162a <_read+0x12>
	}

return len;
 8101648:	687b      	ldr	r3, [r7, #4]
}
 810164a:	4618      	mov	r0, r3
 810164c:	3718      	adds	r7, #24
 810164e:	46bd      	mov	sp, r7
 8101650:	bd80      	pop	{r7, pc}

08101652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101652:	b580      	push	{r7, lr}
 8101654:	b086      	sub	sp, #24
 8101656:	af00      	add	r7, sp, #0
 8101658:	60f8      	str	r0, [r7, #12]
 810165a:	60b9      	str	r1, [r7, #8]
 810165c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810165e:	2300      	movs	r3, #0
 8101660:	617b      	str	r3, [r7, #20]
 8101662:	e009      	b.n	8101678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101664:	68bb      	ldr	r3, [r7, #8]
 8101666:	1c5a      	adds	r2, r3, #1
 8101668:	60ba      	str	r2, [r7, #8]
 810166a:	781b      	ldrb	r3, [r3, #0]
 810166c:	4618      	mov	r0, r3
 810166e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101672:	697b      	ldr	r3, [r7, #20]
 8101674:	3301      	adds	r3, #1
 8101676:	617b      	str	r3, [r7, #20]
 8101678:	697a      	ldr	r2, [r7, #20]
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	429a      	cmp	r2, r3
 810167e:	dbf1      	blt.n	8101664 <_write+0x12>
	}
	return len;
 8101680:	687b      	ldr	r3, [r7, #4]
}
 8101682:	4618      	mov	r0, r3
 8101684:	3718      	adds	r7, #24
 8101686:	46bd      	mov	sp, r7
 8101688:	bd80      	pop	{r7, pc}

0810168a <_close>:

int _close(int file)
{
 810168a:	b480      	push	{r7}
 810168c:	b083      	sub	sp, #12
 810168e:	af00      	add	r7, sp, #0
 8101690:	6078      	str	r0, [r7, #4]
	return -1;
 8101692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101696:	4618      	mov	r0, r3
 8101698:	370c      	adds	r7, #12
 810169a:	46bd      	mov	sp, r7
 810169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016a0:	4770      	bx	lr

081016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81016a2:	b480      	push	{r7}
 81016a4:	b083      	sub	sp, #12
 81016a6:	af00      	add	r7, sp, #0
 81016a8:	6078      	str	r0, [r7, #4]
 81016aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81016ac:	683b      	ldr	r3, [r7, #0]
 81016ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81016b2:	605a      	str	r2, [r3, #4]
	return 0;
 81016b4:	2300      	movs	r3, #0
}
 81016b6:	4618      	mov	r0, r3
 81016b8:	370c      	adds	r7, #12
 81016ba:	46bd      	mov	sp, r7
 81016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016c0:	4770      	bx	lr

081016c2 <_isatty>:

int _isatty(int file)
{
 81016c2:	b480      	push	{r7}
 81016c4:	b083      	sub	sp, #12
 81016c6:	af00      	add	r7, sp, #0
 81016c8:	6078      	str	r0, [r7, #4]
	return 1;
 81016ca:	2301      	movs	r3, #1
}
 81016cc:	4618      	mov	r0, r3
 81016ce:	370c      	adds	r7, #12
 81016d0:	46bd      	mov	sp, r7
 81016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d6:	4770      	bx	lr

081016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81016d8:	b480      	push	{r7}
 81016da:	b085      	sub	sp, #20
 81016dc:	af00      	add	r7, sp, #0
 81016de:	60f8      	str	r0, [r7, #12]
 81016e0:	60b9      	str	r1, [r7, #8]
 81016e2:	607a      	str	r2, [r7, #4]
	return 0;
 81016e4:	2300      	movs	r3, #0
}
 81016e6:	4618      	mov	r0, r3
 81016e8:	3714      	adds	r7, #20
 81016ea:	46bd      	mov	sp, r7
 81016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f0:	4770      	bx	lr
	...

081016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	b086      	sub	sp, #24
 81016f8:	af00      	add	r7, sp, #0
 81016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81016fc:	4a14      	ldr	r2, [pc, #80]	; (8101750 <_sbrk+0x5c>)
 81016fe:	4b15      	ldr	r3, [pc, #84]	; (8101754 <_sbrk+0x60>)
 8101700:	1ad3      	subs	r3, r2, r3
 8101702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101704:	697b      	ldr	r3, [r7, #20]
 8101706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101708:	4b13      	ldr	r3, [pc, #76]	; (8101758 <_sbrk+0x64>)
 810170a:	681b      	ldr	r3, [r3, #0]
 810170c:	2b00      	cmp	r3, #0
 810170e:	d102      	bne.n	8101716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101710:	4b11      	ldr	r3, [pc, #68]	; (8101758 <_sbrk+0x64>)
 8101712:	4a12      	ldr	r2, [pc, #72]	; (810175c <_sbrk+0x68>)
 8101714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101716:	4b10      	ldr	r3, [pc, #64]	; (8101758 <_sbrk+0x64>)
 8101718:	681a      	ldr	r2, [r3, #0]
 810171a:	687b      	ldr	r3, [r7, #4]
 810171c:	4413      	add	r3, r2
 810171e:	693a      	ldr	r2, [r7, #16]
 8101720:	429a      	cmp	r2, r3
 8101722:	d207      	bcs.n	8101734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101724:	f005 fdb6 	bl	8107294 <__errno>
 8101728:	4603      	mov	r3, r0
 810172a:	220c      	movs	r2, #12
 810172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810172e:	f04f 33ff 	mov.w	r3, #4294967295
 8101732:	e009      	b.n	8101748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101734:	4b08      	ldr	r3, [pc, #32]	; (8101758 <_sbrk+0x64>)
 8101736:	681b      	ldr	r3, [r3, #0]
 8101738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810173a:	4b07      	ldr	r3, [pc, #28]	; (8101758 <_sbrk+0x64>)
 810173c:	681a      	ldr	r2, [r3, #0]
 810173e:	687b      	ldr	r3, [r7, #4]
 8101740:	4413      	add	r3, r2
 8101742:	4a05      	ldr	r2, [pc, #20]	; (8101758 <_sbrk+0x64>)
 8101744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101746:	68fb      	ldr	r3, [r7, #12]
}
 8101748:	4618      	mov	r0, r3
 810174a:	3718      	adds	r7, #24
 810174c:	46bd      	mov	sp, r7
 810174e:	bd80      	pop	{r7, pc}
 8101750:	10048000 	.word	0x10048000
 8101754:	00000400 	.word	0x00000400
 8101758:	100002ac 	.word	0x100002ac
 810175c:	10000530 	.word	0x10000530

08101760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101764:	f7ff fb94 	bl	8100e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101768:	480c      	ldr	r0, [pc, #48]	; (810179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810176a:	490d      	ldr	r1, [pc, #52]	; (81017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810176c:	4a0d      	ldr	r2, [pc, #52]	; (81017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101770:	e002      	b.n	8101778 <LoopCopyDataInit>

08101772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101776:	3304      	adds	r3, #4

08101778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810177c:	d3f9      	bcc.n	8101772 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810177e:	4a0a      	ldr	r2, [pc, #40]	; (81017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101780:	4c0a      	ldr	r4, [pc, #40]	; (81017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8101782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101784:	e001      	b.n	810178a <LoopFillZerobss>

08101786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101788:	3204      	adds	r2, #4

0810178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810178c:	d3fb      	bcc.n	8101786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810178e:	f005 fd99 	bl	81072c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101792:	f7ff fc9f 	bl	81010d4 <main>
  bx  lr
 8101796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101798:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810179c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81017a0:	1000028c 	.word	0x1000028c
  ldr r2, =_sidata
 81017a4:	0810c264 	.word	0x0810c264
  ldr r2, =_sbss
 81017a8:	1000028c 	.word	0x1000028c
  ldr r4, =_ebss
 81017ac:	1000052c 	.word	0x1000052c

081017b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81017b0:	e7fe      	b.n	81017b0 <ADC3_IRQHandler>
	...

081017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81017b4:	b580      	push	{r7, lr}
 81017b6:	b082      	sub	sp, #8
 81017b8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81017ba:	4b28      	ldr	r3, [pc, #160]	; (810185c <HAL_Init+0xa8>)
 81017bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017c0:	4a26      	ldr	r2, [pc, #152]	; (810185c <HAL_Init+0xa8>)
 81017c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81017c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81017ca:	4b24      	ldr	r3, [pc, #144]	; (810185c <HAL_Init+0xa8>)
 81017cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81017d4:	603b      	str	r3, [r7, #0]
 81017d6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81017d8:	4b21      	ldr	r3, [pc, #132]	; (8101860 <HAL_Init+0xac>)
 81017da:	681b      	ldr	r3, [r3, #0]
 81017dc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81017e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81017e4:	4a1e      	ldr	r2, [pc, #120]	; (8101860 <HAL_Init+0xac>)
 81017e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81017ea:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81017ec:	4b1c      	ldr	r3, [pc, #112]	; (8101860 <HAL_Init+0xac>)
 81017ee:	681b      	ldr	r3, [r3, #0]
 81017f0:	4a1b      	ldr	r2, [pc, #108]	; (8101860 <HAL_Init+0xac>)
 81017f2:	f043 0301 	orr.w	r3, r3, #1
 81017f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81017f8:	2003      	movs	r0, #3
 81017fa:	f000 f9a1 	bl	8101b40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81017fe:	f001 fa1f 	bl	8102c40 <HAL_RCC_GetSysClockFreq>
 8101802:	4602      	mov	r2, r0
 8101804:	4b15      	ldr	r3, [pc, #84]	; (810185c <HAL_Init+0xa8>)
 8101806:	699b      	ldr	r3, [r3, #24]
 8101808:	0a1b      	lsrs	r3, r3, #8
 810180a:	f003 030f 	and.w	r3, r3, #15
 810180e:	4915      	ldr	r1, [pc, #84]	; (8101864 <HAL_Init+0xb0>)
 8101810:	5ccb      	ldrb	r3, [r1, r3]
 8101812:	f003 031f 	and.w	r3, r3, #31
 8101816:	fa22 f303 	lsr.w	r3, r2, r3
 810181a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810181c:	4b0f      	ldr	r3, [pc, #60]	; (810185c <HAL_Init+0xa8>)
 810181e:	699b      	ldr	r3, [r3, #24]
 8101820:	f003 030f 	and.w	r3, r3, #15
 8101824:	4a0f      	ldr	r2, [pc, #60]	; (8101864 <HAL_Init+0xb0>)
 8101826:	5cd3      	ldrb	r3, [r2, r3]
 8101828:	f003 031f 	and.w	r3, r3, #31
 810182c:	687a      	ldr	r2, [r7, #4]
 810182e:	fa22 f303 	lsr.w	r3, r2, r3
 8101832:	4a0d      	ldr	r2, [pc, #52]	; (8101868 <HAL_Init+0xb4>)
 8101834:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101836:	4b0c      	ldr	r3, [pc, #48]	; (8101868 <HAL_Init+0xb4>)
 8101838:	681b      	ldr	r3, [r3, #0]
 810183a:	4a0c      	ldr	r2, [pc, #48]	; (810186c <HAL_Init+0xb8>)
 810183c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810183e:	2000      	movs	r0, #0
 8101840:	f000 f816 	bl	8101870 <HAL_InitTick>
 8101844:	4603      	mov	r3, r0
 8101846:	2b00      	cmp	r3, #0
 8101848:	d001      	beq.n	810184e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810184a:	2301      	movs	r3, #1
 810184c:	e002      	b.n	8101854 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810184e:	f7ff fe49 	bl	81014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101852:	2300      	movs	r3, #0
}
 8101854:	4618      	mov	r0, r3
 8101856:	3708      	adds	r7, #8
 8101858:	46bd      	mov	sp, r7
 810185a:	bd80      	pop	{r7, pc}
 810185c:	58024400 	.word	0x58024400
 8101860:	40024400 	.word	0x40024400
 8101864:	0810bd44 	.word	0x0810bd44
 8101868:	10000004 	.word	0x10000004
 810186c:	10000000 	.word	0x10000000

08101870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101870:	b580      	push	{r7, lr}
 8101872:	b082      	sub	sp, #8
 8101874:	af00      	add	r7, sp, #0
 8101876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101878:	4b15      	ldr	r3, [pc, #84]	; (81018d0 <HAL_InitTick+0x60>)
 810187a:	781b      	ldrb	r3, [r3, #0]
 810187c:	2b00      	cmp	r3, #0
 810187e:	d101      	bne.n	8101884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101880:	2301      	movs	r3, #1
 8101882:	e021      	b.n	81018c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101884:	4b13      	ldr	r3, [pc, #76]	; (81018d4 <HAL_InitTick+0x64>)
 8101886:	681a      	ldr	r2, [r3, #0]
 8101888:	4b11      	ldr	r3, [pc, #68]	; (81018d0 <HAL_InitTick+0x60>)
 810188a:	781b      	ldrb	r3, [r3, #0]
 810188c:	4619      	mov	r1, r3
 810188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101892:	fbb3 f3f1 	udiv	r3, r3, r1
 8101896:	fbb2 f3f3 	udiv	r3, r2, r3
 810189a:	4618      	mov	r0, r3
 810189c:	f000 f983 	bl	8101ba6 <HAL_SYSTICK_Config>
 81018a0:	4603      	mov	r3, r0
 81018a2:	2b00      	cmp	r3, #0
 81018a4:	d001      	beq.n	81018aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81018a6:	2301      	movs	r3, #1
 81018a8:	e00e      	b.n	81018c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	2b0f      	cmp	r3, #15
 81018ae:	d80a      	bhi.n	81018c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81018b0:	2200      	movs	r2, #0
 81018b2:	6879      	ldr	r1, [r7, #4]
 81018b4:	f04f 30ff 	mov.w	r0, #4294967295
 81018b8:	f000 f94d 	bl	8101b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81018bc:	4a06      	ldr	r2, [pc, #24]	; (81018d8 <HAL_InitTick+0x68>)
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81018c2:	2300      	movs	r3, #0
 81018c4:	e000      	b.n	81018c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81018c6:	2301      	movs	r3, #1
}
 81018c8:	4618      	mov	r0, r3
 81018ca:	3708      	adds	r7, #8
 81018cc:	46bd      	mov	sp, r7
 81018ce:	bd80      	pop	{r7, pc}
 81018d0:	1000000c 	.word	0x1000000c
 81018d4:	10000000 	.word	0x10000000
 81018d8:	10000008 	.word	0x10000008

081018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81018dc:	b480      	push	{r7}
 81018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81018e0:	4b06      	ldr	r3, [pc, #24]	; (81018fc <HAL_IncTick+0x20>)
 81018e2:	781b      	ldrb	r3, [r3, #0]
 81018e4:	461a      	mov	r2, r3
 81018e6:	4b06      	ldr	r3, [pc, #24]	; (8101900 <HAL_IncTick+0x24>)
 81018e8:	681b      	ldr	r3, [r3, #0]
 81018ea:	4413      	add	r3, r2
 81018ec:	4a04      	ldr	r2, [pc, #16]	; (8101900 <HAL_IncTick+0x24>)
 81018ee:	6013      	str	r3, [r2, #0]
}
 81018f0:	bf00      	nop
 81018f2:	46bd      	mov	sp, r7
 81018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f8:	4770      	bx	lr
 81018fa:	bf00      	nop
 81018fc:	1000000c 	.word	0x1000000c
 8101900:	100004f8 	.word	0x100004f8

08101904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101904:	b480      	push	{r7}
 8101906:	af00      	add	r7, sp, #0
  return uwTick;
 8101908:	4b03      	ldr	r3, [pc, #12]	; (8101918 <HAL_GetTick+0x14>)
 810190a:	681b      	ldr	r3, [r3, #0]
}
 810190c:	4618      	mov	r0, r3
 810190e:	46bd      	mov	sp, r7
 8101910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101914:	4770      	bx	lr
 8101916:	bf00      	nop
 8101918:	100004f8 	.word	0x100004f8

0810191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810191c:	b580      	push	{r7, lr}
 810191e:	b084      	sub	sp, #16
 8101920:	af00      	add	r7, sp, #0
 8101922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101924:	f7ff ffee 	bl	8101904 <HAL_GetTick>
 8101928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810192a:	687b      	ldr	r3, [r7, #4]
 810192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810192e:	68fb      	ldr	r3, [r7, #12]
 8101930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101934:	d005      	beq.n	8101942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101936:	4b0a      	ldr	r3, [pc, #40]	; (8101960 <HAL_Delay+0x44>)
 8101938:	781b      	ldrb	r3, [r3, #0]
 810193a:	461a      	mov	r2, r3
 810193c:	68fb      	ldr	r3, [r7, #12]
 810193e:	4413      	add	r3, r2
 8101940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101942:	bf00      	nop
 8101944:	f7ff ffde 	bl	8101904 <HAL_GetTick>
 8101948:	4602      	mov	r2, r0
 810194a:	68bb      	ldr	r3, [r7, #8]
 810194c:	1ad3      	subs	r3, r2, r3
 810194e:	68fa      	ldr	r2, [r7, #12]
 8101950:	429a      	cmp	r2, r3
 8101952:	d8f7      	bhi.n	8101944 <HAL_Delay+0x28>
  {
  }
}
 8101954:	bf00      	nop
 8101956:	bf00      	nop
 8101958:	3710      	adds	r7, #16
 810195a:	46bd      	mov	sp, r7
 810195c:	bd80      	pop	{r7, pc}
 810195e:	bf00      	nop
 8101960:	1000000c 	.word	0x1000000c

08101964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101964:	b480      	push	{r7}
 8101966:	b085      	sub	sp, #20
 8101968:	af00      	add	r7, sp, #0
 810196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	f003 0307 	and.w	r3, r3, #7
 8101972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101974:	4b0c      	ldr	r3, [pc, #48]	; (81019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8101976:	68db      	ldr	r3, [r3, #12]
 8101978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810197a:	68ba      	ldr	r2, [r7, #8]
 810197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101980:	4013      	ands	r3, r2
 8101982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101984:	68fb      	ldr	r3, [r7, #12]
 8101986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101988:	68bb      	ldr	r3, [r7, #8]
 810198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101996:	4a04      	ldr	r2, [pc, #16]	; (81019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8101998:	68bb      	ldr	r3, [r7, #8]
 810199a:	60d3      	str	r3, [r2, #12]
}
 810199c:	bf00      	nop
 810199e:	3714      	adds	r7, #20
 81019a0:	46bd      	mov	sp, r7
 81019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019a6:	4770      	bx	lr
 81019a8:	e000ed00 	.word	0xe000ed00

081019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81019ac:	b480      	push	{r7}
 81019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81019b0:	4b04      	ldr	r3, [pc, #16]	; (81019c4 <__NVIC_GetPriorityGrouping+0x18>)
 81019b2:	68db      	ldr	r3, [r3, #12]
 81019b4:	0a1b      	lsrs	r3, r3, #8
 81019b6:	f003 0307 	and.w	r3, r3, #7
}
 81019ba:	4618      	mov	r0, r3
 81019bc:	46bd      	mov	sp, r7
 81019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c2:	4770      	bx	lr
 81019c4:	e000ed00 	.word	0xe000ed00

081019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81019c8:	b480      	push	{r7}
 81019ca:	b083      	sub	sp, #12
 81019cc:	af00      	add	r7, sp, #0
 81019ce:	4603      	mov	r3, r0
 81019d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019d6:	2b00      	cmp	r3, #0
 81019d8:	db0b      	blt.n	81019f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81019da:	88fb      	ldrh	r3, [r7, #6]
 81019dc:	f003 021f 	and.w	r2, r3, #31
 81019e0:	4907      	ldr	r1, [pc, #28]	; (8101a00 <__NVIC_EnableIRQ+0x38>)
 81019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019e6:	095b      	lsrs	r3, r3, #5
 81019e8:	2001      	movs	r0, #1
 81019ea:	fa00 f202 	lsl.w	r2, r0, r2
 81019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81019f2:	bf00      	nop
 81019f4:	370c      	adds	r7, #12
 81019f6:	46bd      	mov	sp, r7
 81019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fc:	4770      	bx	lr
 81019fe:	bf00      	nop
 8101a00:	e000e100 	.word	0xe000e100

08101a04 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101a04:	b480      	push	{r7}
 8101a06:	b083      	sub	sp, #12
 8101a08:	af00      	add	r7, sp, #0
 8101a0a:	4603      	mov	r3, r0
 8101a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a12:	2b00      	cmp	r3, #0
 8101a14:	db0c      	blt.n	8101a30 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101a16:	88fb      	ldrh	r3, [r7, #6]
 8101a18:	f003 021f 	and.w	r2, r3, #31
 8101a1c:	4907      	ldr	r1, [pc, #28]	; (8101a3c <__NVIC_ClearPendingIRQ+0x38>)
 8101a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a22:	095b      	lsrs	r3, r3, #5
 8101a24:	2001      	movs	r0, #1
 8101a26:	fa00 f202 	lsl.w	r2, r0, r2
 8101a2a:	3360      	adds	r3, #96	; 0x60
 8101a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101a30:	bf00      	nop
 8101a32:	370c      	adds	r7, #12
 8101a34:	46bd      	mov	sp, r7
 8101a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a3a:	4770      	bx	lr
 8101a3c:	e000e100 	.word	0xe000e100

08101a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101a40:	b480      	push	{r7}
 8101a42:	b083      	sub	sp, #12
 8101a44:	af00      	add	r7, sp, #0
 8101a46:	4603      	mov	r3, r0
 8101a48:	6039      	str	r1, [r7, #0]
 8101a4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a50:	2b00      	cmp	r3, #0
 8101a52:	db0a      	blt.n	8101a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a54:	683b      	ldr	r3, [r7, #0]
 8101a56:	b2da      	uxtb	r2, r3
 8101a58:	490c      	ldr	r1, [pc, #48]	; (8101a8c <__NVIC_SetPriority+0x4c>)
 8101a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a5e:	0112      	lsls	r2, r2, #4
 8101a60:	b2d2      	uxtb	r2, r2
 8101a62:	440b      	add	r3, r1
 8101a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101a68:	e00a      	b.n	8101a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a6a:	683b      	ldr	r3, [r7, #0]
 8101a6c:	b2da      	uxtb	r2, r3
 8101a6e:	4908      	ldr	r1, [pc, #32]	; (8101a90 <__NVIC_SetPriority+0x50>)
 8101a70:	88fb      	ldrh	r3, [r7, #6]
 8101a72:	f003 030f 	and.w	r3, r3, #15
 8101a76:	3b04      	subs	r3, #4
 8101a78:	0112      	lsls	r2, r2, #4
 8101a7a:	b2d2      	uxtb	r2, r2
 8101a7c:	440b      	add	r3, r1
 8101a7e:	761a      	strb	r2, [r3, #24]
}
 8101a80:	bf00      	nop
 8101a82:	370c      	adds	r7, #12
 8101a84:	46bd      	mov	sp, r7
 8101a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a8a:	4770      	bx	lr
 8101a8c:	e000e100 	.word	0xe000e100
 8101a90:	e000ed00 	.word	0xe000ed00

08101a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a94:	b480      	push	{r7}
 8101a96:	b089      	sub	sp, #36	; 0x24
 8101a98:	af00      	add	r7, sp, #0
 8101a9a:	60f8      	str	r0, [r7, #12]
 8101a9c:	60b9      	str	r1, [r7, #8]
 8101a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101aa0:	68fb      	ldr	r3, [r7, #12]
 8101aa2:	f003 0307 	and.w	r3, r3, #7
 8101aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101aa8:	69fb      	ldr	r3, [r7, #28]
 8101aaa:	f1c3 0307 	rsb	r3, r3, #7
 8101aae:	2b04      	cmp	r3, #4
 8101ab0:	bf28      	it	cs
 8101ab2:	2304      	movcs	r3, #4
 8101ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101ab6:	69fb      	ldr	r3, [r7, #28]
 8101ab8:	3304      	adds	r3, #4
 8101aba:	2b06      	cmp	r3, #6
 8101abc:	d902      	bls.n	8101ac4 <NVIC_EncodePriority+0x30>
 8101abe:	69fb      	ldr	r3, [r7, #28]
 8101ac0:	3b03      	subs	r3, #3
 8101ac2:	e000      	b.n	8101ac6 <NVIC_EncodePriority+0x32>
 8101ac4:	2300      	movs	r3, #0
 8101ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8101acc:	69bb      	ldr	r3, [r7, #24]
 8101ace:	fa02 f303 	lsl.w	r3, r2, r3
 8101ad2:	43da      	mvns	r2, r3
 8101ad4:	68bb      	ldr	r3, [r7, #8]
 8101ad6:	401a      	ands	r2, r3
 8101ad8:	697b      	ldr	r3, [r7, #20]
 8101ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101adc:	f04f 31ff 	mov.w	r1, #4294967295
 8101ae0:	697b      	ldr	r3, [r7, #20]
 8101ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8101ae6:	43d9      	mvns	r1, r3
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101aec:	4313      	orrs	r3, r2
         );
}
 8101aee:	4618      	mov	r0, r3
 8101af0:	3724      	adds	r7, #36	; 0x24
 8101af2:	46bd      	mov	sp, r7
 8101af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af8:	4770      	bx	lr
	...

08101afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101afc:	b580      	push	{r7, lr}
 8101afe:	b082      	sub	sp, #8
 8101b00:	af00      	add	r7, sp, #0
 8101b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	3b01      	subs	r3, #1
 8101b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101b0c:	d301      	bcc.n	8101b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101b0e:	2301      	movs	r3, #1
 8101b10:	e00f      	b.n	8101b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101b12:	4a0a      	ldr	r2, [pc, #40]	; (8101b3c <SysTick_Config+0x40>)
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	3b01      	subs	r3, #1
 8101b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101b1a:	210f      	movs	r1, #15
 8101b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8101b20:	f7ff ff8e 	bl	8101a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101b24:	4b05      	ldr	r3, [pc, #20]	; (8101b3c <SysTick_Config+0x40>)
 8101b26:	2200      	movs	r2, #0
 8101b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101b2a:	4b04      	ldr	r3, [pc, #16]	; (8101b3c <SysTick_Config+0x40>)
 8101b2c:	2207      	movs	r2, #7
 8101b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101b30:	2300      	movs	r3, #0
}
 8101b32:	4618      	mov	r0, r3
 8101b34:	3708      	adds	r7, #8
 8101b36:	46bd      	mov	sp, r7
 8101b38:	bd80      	pop	{r7, pc}
 8101b3a:	bf00      	nop
 8101b3c:	e000e010 	.word	0xe000e010

08101b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101b40:	b580      	push	{r7, lr}
 8101b42:	b082      	sub	sp, #8
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101b48:	6878      	ldr	r0, [r7, #4]
 8101b4a:	f7ff ff0b 	bl	8101964 <__NVIC_SetPriorityGrouping>
}
 8101b4e:	bf00      	nop
 8101b50:	3708      	adds	r7, #8
 8101b52:	46bd      	mov	sp, r7
 8101b54:	bd80      	pop	{r7, pc}

08101b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101b56:	b580      	push	{r7, lr}
 8101b58:	b086      	sub	sp, #24
 8101b5a:	af00      	add	r7, sp, #0
 8101b5c:	4603      	mov	r3, r0
 8101b5e:	60b9      	str	r1, [r7, #8]
 8101b60:	607a      	str	r2, [r7, #4]
 8101b62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101b64:	f7ff ff22 	bl	81019ac <__NVIC_GetPriorityGrouping>
 8101b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101b6a:	687a      	ldr	r2, [r7, #4]
 8101b6c:	68b9      	ldr	r1, [r7, #8]
 8101b6e:	6978      	ldr	r0, [r7, #20]
 8101b70:	f7ff ff90 	bl	8101a94 <NVIC_EncodePriority>
 8101b74:	4602      	mov	r2, r0
 8101b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101b7a:	4611      	mov	r1, r2
 8101b7c:	4618      	mov	r0, r3
 8101b7e:	f7ff ff5f 	bl	8101a40 <__NVIC_SetPriority>
}
 8101b82:	bf00      	nop
 8101b84:	3718      	adds	r7, #24
 8101b86:	46bd      	mov	sp, r7
 8101b88:	bd80      	pop	{r7, pc}

08101b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101b8a:	b580      	push	{r7, lr}
 8101b8c:	b082      	sub	sp, #8
 8101b8e:	af00      	add	r7, sp, #0
 8101b90:	4603      	mov	r3, r0
 8101b92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b98:	4618      	mov	r0, r3
 8101b9a:	f7ff ff15 	bl	81019c8 <__NVIC_EnableIRQ>
}
 8101b9e:	bf00      	nop
 8101ba0:	3708      	adds	r7, #8
 8101ba2:	46bd      	mov	sp, r7
 8101ba4:	bd80      	pop	{r7, pc}

08101ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101ba6:	b580      	push	{r7, lr}
 8101ba8:	b082      	sub	sp, #8
 8101baa:	af00      	add	r7, sp, #0
 8101bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101bae:	6878      	ldr	r0, [r7, #4]
 8101bb0:	f7ff ffa4 	bl	8101afc <SysTick_Config>
 8101bb4:	4603      	mov	r3, r0
}
 8101bb6:	4618      	mov	r0, r3
 8101bb8:	3708      	adds	r7, #8
 8101bba:	46bd      	mov	sp, r7
 8101bbc:	bd80      	pop	{r7, pc}

08101bbe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101bbe:	b580      	push	{r7, lr}
 8101bc0:	b082      	sub	sp, #8
 8101bc2:	af00      	add	r7, sp, #0
 8101bc4:	4603      	mov	r3, r0
 8101bc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8101bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101bcc:	4618      	mov	r0, r3
 8101bce:	f7ff ff19 	bl	8101a04 <__NVIC_ClearPendingIRQ>
}
 8101bd2:	bf00      	nop
 8101bd4:	3708      	adds	r7, #8
 8101bd6:	46bd      	mov	sp, r7
 8101bd8:	bd80      	pop	{r7, pc}
	...

08101bdc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101bdc:	b480      	push	{r7}
 8101bde:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101be0:	4b07      	ldr	r3, [pc, #28]	; (8101c00 <HAL_GetCurrentCPUID+0x24>)
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	091b      	lsrs	r3, r3, #4
 8101be6:	f003 030f 	and.w	r3, r3, #15
 8101bea:	2b07      	cmp	r3, #7
 8101bec:	d101      	bne.n	8101bf2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101bee:	2303      	movs	r3, #3
 8101bf0:	e000      	b.n	8101bf4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101bf2:	2301      	movs	r3, #1
  }
}
 8101bf4:	4618      	mov	r0, r3
 8101bf6:	46bd      	mov	sp, r7
 8101bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bfc:	4770      	bx	lr
 8101bfe:	bf00      	nop
 8101c00:	e000ed00 	.word	0xe000ed00

08101c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101c04:	b480      	push	{r7}
 8101c06:	b089      	sub	sp, #36	; 0x24
 8101c08:	af00      	add	r7, sp, #0
 8101c0a:	6078      	str	r0, [r7, #4]
 8101c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101c0e:	2300      	movs	r3, #0
 8101c10:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101c12:	4b89      	ldr	r3, [pc, #548]	; (8101e38 <HAL_GPIO_Init+0x234>)
 8101c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101c16:	e194      	b.n	8101f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101c18:	683b      	ldr	r3, [r7, #0]
 8101c1a:	681a      	ldr	r2, [r3, #0]
 8101c1c:	2101      	movs	r1, #1
 8101c1e:	69fb      	ldr	r3, [r7, #28]
 8101c20:	fa01 f303 	lsl.w	r3, r1, r3
 8101c24:	4013      	ands	r3, r2
 8101c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101c28:	693b      	ldr	r3, [r7, #16]
 8101c2a:	2b00      	cmp	r3, #0
 8101c2c:	f000 8186 	beq.w	8101f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101c30:	683b      	ldr	r3, [r7, #0]
 8101c32:	685b      	ldr	r3, [r3, #4]
 8101c34:	2b01      	cmp	r3, #1
 8101c36:	d00b      	beq.n	8101c50 <HAL_GPIO_Init+0x4c>
 8101c38:	683b      	ldr	r3, [r7, #0]
 8101c3a:	685b      	ldr	r3, [r3, #4]
 8101c3c:	2b02      	cmp	r3, #2
 8101c3e:	d007      	beq.n	8101c50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101c40:	683b      	ldr	r3, [r7, #0]
 8101c42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101c44:	2b11      	cmp	r3, #17
 8101c46:	d003      	beq.n	8101c50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101c48:	683b      	ldr	r3, [r7, #0]
 8101c4a:	685b      	ldr	r3, [r3, #4]
 8101c4c:	2b12      	cmp	r3, #18
 8101c4e:	d130      	bne.n	8101cb2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	689b      	ldr	r3, [r3, #8]
 8101c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101c56:	69fb      	ldr	r3, [r7, #28]
 8101c58:	005b      	lsls	r3, r3, #1
 8101c5a:	2203      	movs	r2, #3
 8101c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8101c60:	43db      	mvns	r3, r3
 8101c62:	69ba      	ldr	r2, [r7, #24]
 8101c64:	4013      	ands	r3, r2
 8101c66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101c68:	683b      	ldr	r3, [r7, #0]
 8101c6a:	68da      	ldr	r2, [r3, #12]
 8101c6c:	69fb      	ldr	r3, [r7, #28]
 8101c6e:	005b      	lsls	r3, r3, #1
 8101c70:	fa02 f303 	lsl.w	r3, r2, r3
 8101c74:	69ba      	ldr	r2, [r7, #24]
 8101c76:	4313      	orrs	r3, r2
 8101c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	69ba      	ldr	r2, [r7, #24]
 8101c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	685b      	ldr	r3, [r3, #4]
 8101c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101c86:	2201      	movs	r2, #1
 8101c88:	69fb      	ldr	r3, [r7, #28]
 8101c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8101c8e:	43db      	mvns	r3, r3
 8101c90:	69ba      	ldr	r2, [r7, #24]
 8101c92:	4013      	ands	r3, r2
 8101c94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101c96:	683b      	ldr	r3, [r7, #0]
 8101c98:	685b      	ldr	r3, [r3, #4]
 8101c9a:	091b      	lsrs	r3, r3, #4
 8101c9c:	f003 0201 	and.w	r2, r3, #1
 8101ca0:	69fb      	ldr	r3, [r7, #28]
 8101ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca6:	69ba      	ldr	r2, [r7, #24]
 8101ca8:	4313      	orrs	r3, r2
 8101caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	69ba      	ldr	r2, [r7, #24]
 8101cb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	68db      	ldr	r3, [r3, #12]
 8101cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101cb8:	69fb      	ldr	r3, [r7, #28]
 8101cba:	005b      	lsls	r3, r3, #1
 8101cbc:	2203      	movs	r2, #3
 8101cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8101cc2:	43db      	mvns	r3, r3
 8101cc4:	69ba      	ldr	r2, [r7, #24]
 8101cc6:	4013      	ands	r3, r2
 8101cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101cca:	683b      	ldr	r3, [r7, #0]
 8101ccc:	689a      	ldr	r2, [r3, #8]
 8101cce:	69fb      	ldr	r3, [r7, #28]
 8101cd0:	005b      	lsls	r3, r3, #1
 8101cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8101cd6:	69ba      	ldr	r2, [r7, #24]
 8101cd8:	4313      	orrs	r3, r2
 8101cda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	69ba      	ldr	r2, [r7, #24]
 8101ce0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101ce2:	683b      	ldr	r3, [r7, #0]
 8101ce4:	685b      	ldr	r3, [r3, #4]
 8101ce6:	2b02      	cmp	r3, #2
 8101ce8:	d003      	beq.n	8101cf2 <HAL_GPIO_Init+0xee>
 8101cea:	683b      	ldr	r3, [r7, #0]
 8101cec:	685b      	ldr	r3, [r3, #4]
 8101cee:	2b12      	cmp	r3, #18
 8101cf0:	d123      	bne.n	8101d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101cf2:	69fb      	ldr	r3, [r7, #28]
 8101cf4:	08da      	lsrs	r2, r3, #3
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	3208      	adds	r2, #8
 8101cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101d00:	69fb      	ldr	r3, [r7, #28]
 8101d02:	f003 0307 	and.w	r3, r3, #7
 8101d06:	009b      	lsls	r3, r3, #2
 8101d08:	220f      	movs	r2, #15
 8101d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d0e:	43db      	mvns	r3, r3
 8101d10:	69ba      	ldr	r2, [r7, #24]
 8101d12:	4013      	ands	r3, r2
 8101d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101d16:	683b      	ldr	r3, [r7, #0]
 8101d18:	691a      	ldr	r2, [r3, #16]
 8101d1a:	69fb      	ldr	r3, [r7, #28]
 8101d1c:	f003 0307 	and.w	r3, r3, #7
 8101d20:	009b      	lsls	r3, r3, #2
 8101d22:	fa02 f303 	lsl.w	r3, r2, r3
 8101d26:	69ba      	ldr	r2, [r7, #24]
 8101d28:	4313      	orrs	r3, r2
 8101d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101d2c:	69fb      	ldr	r3, [r7, #28]
 8101d2e:	08da      	lsrs	r2, r3, #3
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	3208      	adds	r2, #8
 8101d34:	69b9      	ldr	r1, [r7, #24]
 8101d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101d3a:	687b      	ldr	r3, [r7, #4]
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101d40:	69fb      	ldr	r3, [r7, #28]
 8101d42:	005b      	lsls	r3, r3, #1
 8101d44:	2203      	movs	r2, #3
 8101d46:	fa02 f303 	lsl.w	r3, r2, r3
 8101d4a:	43db      	mvns	r3, r3
 8101d4c:	69ba      	ldr	r2, [r7, #24]
 8101d4e:	4013      	ands	r3, r2
 8101d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101d52:	683b      	ldr	r3, [r7, #0]
 8101d54:	685b      	ldr	r3, [r3, #4]
 8101d56:	f003 0203 	and.w	r2, r3, #3
 8101d5a:	69fb      	ldr	r3, [r7, #28]
 8101d5c:	005b      	lsls	r3, r3, #1
 8101d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8101d62:	69ba      	ldr	r2, [r7, #24]
 8101d64:	4313      	orrs	r3, r2
 8101d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	69ba      	ldr	r2, [r7, #24]
 8101d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101d6e:	683b      	ldr	r3, [r7, #0]
 8101d70:	685b      	ldr	r3, [r3, #4]
 8101d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101d76:	2b00      	cmp	r3, #0
 8101d78:	f000 80e0 	beq.w	8101f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d7c:	4b2f      	ldr	r3, [pc, #188]	; (8101e3c <HAL_GPIO_Init+0x238>)
 8101d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d82:	4a2e      	ldr	r2, [pc, #184]	; (8101e3c <HAL_GPIO_Init+0x238>)
 8101d84:	f043 0302 	orr.w	r3, r3, #2
 8101d88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101d8c:	4b2b      	ldr	r3, [pc, #172]	; (8101e3c <HAL_GPIO_Init+0x238>)
 8101d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d92:	f003 0302 	and.w	r3, r3, #2
 8101d96:	60fb      	str	r3, [r7, #12]
 8101d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101d9a:	4a29      	ldr	r2, [pc, #164]	; (8101e40 <HAL_GPIO_Init+0x23c>)
 8101d9c:	69fb      	ldr	r3, [r7, #28]
 8101d9e:	089b      	lsrs	r3, r3, #2
 8101da0:	3302      	adds	r3, #2
 8101da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101da8:	69fb      	ldr	r3, [r7, #28]
 8101daa:	f003 0303 	and.w	r3, r3, #3
 8101dae:	009b      	lsls	r3, r3, #2
 8101db0:	220f      	movs	r2, #15
 8101db2:	fa02 f303 	lsl.w	r3, r2, r3
 8101db6:	43db      	mvns	r3, r3
 8101db8:	69ba      	ldr	r2, [r7, #24]
 8101dba:	4013      	ands	r3, r2
 8101dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101dbe:	687b      	ldr	r3, [r7, #4]
 8101dc0:	4a20      	ldr	r2, [pc, #128]	; (8101e44 <HAL_GPIO_Init+0x240>)
 8101dc2:	4293      	cmp	r3, r2
 8101dc4:	d052      	beq.n	8101e6c <HAL_GPIO_Init+0x268>
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	4a1f      	ldr	r2, [pc, #124]	; (8101e48 <HAL_GPIO_Init+0x244>)
 8101dca:	4293      	cmp	r3, r2
 8101dcc:	d031      	beq.n	8101e32 <HAL_GPIO_Init+0x22e>
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	4a1e      	ldr	r2, [pc, #120]	; (8101e4c <HAL_GPIO_Init+0x248>)
 8101dd2:	4293      	cmp	r3, r2
 8101dd4:	d02b      	beq.n	8101e2e <HAL_GPIO_Init+0x22a>
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	4a1d      	ldr	r2, [pc, #116]	; (8101e50 <HAL_GPIO_Init+0x24c>)
 8101dda:	4293      	cmp	r3, r2
 8101ddc:	d025      	beq.n	8101e2a <HAL_GPIO_Init+0x226>
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	4a1c      	ldr	r2, [pc, #112]	; (8101e54 <HAL_GPIO_Init+0x250>)
 8101de2:	4293      	cmp	r3, r2
 8101de4:	d01f      	beq.n	8101e26 <HAL_GPIO_Init+0x222>
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	4a1b      	ldr	r2, [pc, #108]	; (8101e58 <HAL_GPIO_Init+0x254>)
 8101dea:	4293      	cmp	r3, r2
 8101dec:	d019      	beq.n	8101e22 <HAL_GPIO_Init+0x21e>
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	4a1a      	ldr	r2, [pc, #104]	; (8101e5c <HAL_GPIO_Init+0x258>)
 8101df2:	4293      	cmp	r3, r2
 8101df4:	d013      	beq.n	8101e1e <HAL_GPIO_Init+0x21a>
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	4a19      	ldr	r2, [pc, #100]	; (8101e60 <HAL_GPIO_Init+0x25c>)
 8101dfa:	4293      	cmp	r3, r2
 8101dfc:	d00d      	beq.n	8101e1a <HAL_GPIO_Init+0x216>
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	4a18      	ldr	r2, [pc, #96]	; (8101e64 <HAL_GPIO_Init+0x260>)
 8101e02:	4293      	cmp	r3, r2
 8101e04:	d007      	beq.n	8101e16 <HAL_GPIO_Init+0x212>
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	4a17      	ldr	r2, [pc, #92]	; (8101e68 <HAL_GPIO_Init+0x264>)
 8101e0a:	4293      	cmp	r3, r2
 8101e0c:	d101      	bne.n	8101e12 <HAL_GPIO_Init+0x20e>
 8101e0e:	2309      	movs	r3, #9
 8101e10:	e02d      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e12:	230a      	movs	r3, #10
 8101e14:	e02b      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e16:	2308      	movs	r3, #8
 8101e18:	e029      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e1a:	2307      	movs	r3, #7
 8101e1c:	e027      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e1e:	2306      	movs	r3, #6
 8101e20:	e025      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e22:	2305      	movs	r3, #5
 8101e24:	e023      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e26:	2304      	movs	r3, #4
 8101e28:	e021      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e2a:	2303      	movs	r3, #3
 8101e2c:	e01f      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e2e:	2302      	movs	r3, #2
 8101e30:	e01d      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e32:	2301      	movs	r3, #1
 8101e34:	e01b      	b.n	8101e6e <HAL_GPIO_Init+0x26a>
 8101e36:	bf00      	nop
 8101e38:	580000c0 	.word	0x580000c0
 8101e3c:	58024400 	.word	0x58024400
 8101e40:	58000400 	.word	0x58000400
 8101e44:	58020000 	.word	0x58020000
 8101e48:	58020400 	.word	0x58020400
 8101e4c:	58020800 	.word	0x58020800
 8101e50:	58020c00 	.word	0x58020c00
 8101e54:	58021000 	.word	0x58021000
 8101e58:	58021400 	.word	0x58021400
 8101e5c:	58021800 	.word	0x58021800
 8101e60:	58021c00 	.word	0x58021c00
 8101e64:	58022000 	.word	0x58022000
 8101e68:	58022400 	.word	0x58022400
 8101e6c:	2300      	movs	r3, #0
 8101e6e:	69fa      	ldr	r2, [r7, #28]
 8101e70:	f002 0203 	and.w	r2, r2, #3
 8101e74:	0092      	lsls	r2, r2, #2
 8101e76:	4093      	lsls	r3, r2
 8101e78:	69ba      	ldr	r2, [r7, #24]
 8101e7a:	4313      	orrs	r3, r2
 8101e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101e7e:	4938      	ldr	r1, [pc, #224]	; (8101f60 <HAL_GPIO_Init+0x35c>)
 8101e80:	69fb      	ldr	r3, [r7, #28]
 8101e82:	089b      	lsrs	r3, r3, #2
 8101e84:	3302      	adds	r3, #2
 8101e86:	69ba      	ldr	r2, [r7, #24]
 8101e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101e8c:	697b      	ldr	r3, [r7, #20]
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e92:	693b      	ldr	r3, [r7, #16]
 8101e94:	43db      	mvns	r3, r3
 8101e96:	69ba      	ldr	r2, [r7, #24]
 8101e98:	4013      	ands	r3, r2
 8101e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101e9c:	683b      	ldr	r3, [r7, #0]
 8101e9e:	685b      	ldr	r3, [r3, #4]
 8101ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101ea4:	2b00      	cmp	r3, #0
 8101ea6:	d003      	beq.n	8101eb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101ea8:	69ba      	ldr	r2, [r7, #24]
 8101eaa:	693b      	ldr	r3, [r7, #16]
 8101eac:	4313      	orrs	r3, r2
 8101eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101eb0:	697b      	ldr	r3, [r7, #20]
 8101eb2:	69ba      	ldr	r2, [r7, #24]
 8101eb4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101eb6:	697b      	ldr	r3, [r7, #20]
 8101eb8:	685b      	ldr	r3, [r3, #4]
 8101eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ebc:	693b      	ldr	r3, [r7, #16]
 8101ebe:	43db      	mvns	r3, r3
 8101ec0:	69ba      	ldr	r2, [r7, #24]
 8101ec2:	4013      	ands	r3, r2
 8101ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101ec6:	683b      	ldr	r3, [r7, #0]
 8101ec8:	685b      	ldr	r3, [r3, #4]
 8101eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101ece:	2b00      	cmp	r3, #0
 8101ed0:	d003      	beq.n	8101eda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101ed2:	69ba      	ldr	r2, [r7, #24]
 8101ed4:	693b      	ldr	r3, [r7, #16]
 8101ed6:	4313      	orrs	r3, r2
 8101ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101eda:	697b      	ldr	r3, [r7, #20]
 8101edc:	69ba      	ldr	r2, [r7, #24]
 8101ede:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ee4:	681b      	ldr	r3, [r3, #0]
 8101ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ee8:	693b      	ldr	r3, [r7, #16]
 8101eea:	43db      	mvns	r3, r3
 8101eec:	69ba      	ldr	r2, [r7, #24]
 8101eee:	4013      	ands	r3, r2
 8101ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101ef2:	683b      	ldr	r3, [r7, #0]
 8101ef4:	685b      	ldr	r3, [r3, #4]
 8101ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101efa:	2b00      	cmp	r3, #0
 8101efc:	d003      	beq.n	8101f06 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101efe:	69ba      	ldr	r2, [r7, #24]
 8101f00:	693b      	ldr	r3, [r7, #16]
 8101f02:	4313      	orrs	r3, r2
 8101f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101f0a:	69bb      	ldr	r3, [r7, #24]
 8101f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101f12:	685b      	ldr	r3, [r3, #4]
 8101f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101f16:	693b      	ldr	r3, [r7, #16]
 8101f18:	43db      	mvns	r3, r3
 8101f1a:	69ba      	ldr	r2, [r7, #24]
 8101f1c:	4013      	ands	r3, r2
 8101f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101f20:	683b      	ldr	r3, [r7, #0]
 8101f22:	685b      	ldr	r3, [r3, #4]
 8101f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101f28:	2b00      	cmp	r3, #0
 8101f2a:	d003      	beq.n	8101f34 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101f2c:	69ba      	ldr	r2, [r7, #24]
 8101f2e:	693b      	ldr	r3, [r7, #16]
 8101f30:	4313      	orrs	r3, r2
 8101f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101f38:	69bb      	ldr	r3, [r7, #24]
 8101f3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101f3c:	69fb      	ldr	r3, [r7, #28]
 8101f3e:	3301      	adds	r3, #1
 8101f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f42:	683b      	ldr	r3, [r7, #0]
 8101f44:	681a      	ldr	r2, [r3, #0]
 8101f46:	69fb      	ldr	r3, [r7, #28]
 8101f48:	fa22 f303 	lsr.w	r3, r2, r3
 8101f4c:	2b00      	cmp	r3, #0
 8101f4e:	f47f ae63 	bne.w	8101c18 <HAL_GPIO_Init+0x14>
  }
}
 8101f52:	bf00      	nop
 8101f54:	bf00      	nop
 8101f56:	3724      	adds	r7, #36	; 0x24
 8101f58:	46bd      	mov	sp, r7
 8101f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5e:	4770      	bx	lr
 8101f60:	58000400 	.word	0x58000400

08101f64 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8101f64:	b480      	push	{r7}
 8101f66:	b083      	sub	sp, #12
 8101f68:	af00      	add	r7, sp, #0
 8101f6a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101f6c:	4a08      	ldr	r2, [pc, #32]	; (8101f90 <HAL_HSEM_FastTake+0x2c>)
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	3320      	adds	r3, #32
 8101f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101f76:	4a07      	ldr	r2, [pc, #28]	; (8101f94 <HAL_HSEM_FastTake+0x30>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d101      	bne.n	8101f80 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101f7c:	2300      	movs	r3, #0
 8101f7e:	e000      	b.n	8101f82 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101f80:	2301      	movs	r3, #1
}
 8101f82:	4618      	mov	r0, r3
 8101f84:	370c      	adds	r7, #12
 8101f86:	46bd      	mov	sp, r7
 8101f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f8c:	4770      	bx	lr
 8101f8e:	bf00      	nop
 8101f90:	58026400 	.word	0x58026400
 8101f94:	80000100 	.word	0x80000100

08101f98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101f98:	b480      	push	{r7}
 8101f9a:	b083      	sub	sp, #12
 8101f9c:	af00      	add	r7, sp, #0
 8101f9e:	6078      	str	r0, [r7, #4]
 8101fa0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101fa2:	4906      	ldr	r1, [pc, #24]	; (8101fbc <HAL_HSEM_Release+0x24>)
 8101fa4:	683b      	ldr	r3, [r7, #0]
 8101fa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101fb0:	bf00      	nop
 8101fb2:	370c      	adds	r7, #12
 8101fb4:	46bd      	mov	sp, r7
 8101fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fba:	4770      	bx	lr
 8101fbc:	58026400 	.word	0x58026400

08101fc0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101fc0:	b480      	push	{r7}
 8101fc2:	b083      	sub	sp, #12
 8101fc4:	af00      	add	r7, sp, #0
 8101fc6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101fc8:	4b05      	ldr	r3, [pc, #20]	; (8101fe0 <HAL_HSEM_ActivateNotification+0x20>)
 8101fca:	681a      	ldr	r2, [r3, #0]
 8101fcc:	4904      	ldr	r1, [pc, #16]	; (8101fe0 <HAL_HSEM_ActivateNotification+0x20>)
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	4313      	orrs	r3, r2
 8101fd2:	600b      	str	r3, [r1, #0]
#endif
}
 8101fd4:	bf00      	nop
 8101fd6:	370c      	adds	r7, #12
 8101fd8:	46bd      	mov	sp, r7
 8101fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fde:	4770      	bx	lr
 8101fe0:	58026510 	.word	0x58026510

08101fe4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101fe4:	b580      	push	{r7, lr}
 8101fe6:	b082      	sub	sp, #8
 8101fe8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8101fea:	4b0a      	ldr	r3, [pc, #40]	; (8102014 <HAL_HSEM_IRQHandler+0x30>)
 8101fec:	68db      	ldr	r3, [r3, #12]
 8101fee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101ff0:	4b08      	ldr	r3, [pc, #32]	; (8102014 <HAL_HSEM_IRQHandler+0x30>)
 8101ff2:	681a      	ldr	r2, [r3, #0]
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	43db      	mvns	r3, r3
 8101ff8:	4906      	ldr	r1, [pc, #24]	; (8102014 <HAL_HSEM_IRQHandler+0x30>)
 8101ffa:	4013      	ands	r3, r2
 8101ffc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8101ffe:	4a05      	ldr	r2, [pc, #20]	; (8102014 <HAL_HSEM_IRQHandler+0x30>)
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8102004:	6878      	ldr	r0, [r7, #4]
 8102006:	f004 ff31 	bl	8106e6c <HAL_HSEM_FreeCallback>
}
 810200a:	bf00      	nop
 810200c:	3708      	adds	r7, #8
 810200e:	46bd      	mov	sp, r7
 8102010:	bd80      	pop	{r7, pc}
 8102012:	bf00      	nop
 8102014:	58026510 	.word	0x58026510

08102018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102018:	b580      	push	{r7, lr}
 810201a:	b082      	sub	sp, #8
 810201c:	af00      	add	r7, sp, #0
 810201e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	2b00      	cmp	r3, #0
 8102024:	d101      	bne.n	810202a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102026:	2301      	movs	r3, #1
 8102028:	e081      	b.n	810212e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102030:	b2db      	uxtb	r3, r3
 8102032:	2b00      	cmp	r3, #0
 8102034:	d106      	bne.n	8102044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	2200      	movs	r2, #0
 810203a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810203e:	6878      	ldr	r0, [r7, #4]
 8102040:	f7fe ffba 	bl	8100fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	2224      	movs	r2, #36	; 0x24
 8102048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	681a      	ldr	r2, [r3, #0]
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	f022 0201 	bic.w	r2, r2, #1
 810205a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	685a      	ldr	r2, [r3, #4]
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102068:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	689a      	ldr	r2, [r3, #8]
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102078:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	68db      	ldr	r3, [r3, #12]
 810207e:	2b01      	cmp	r3, #1
 8102080:	d107      	bne.n	8102092 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	689a      	ldr	r2, [r3, #8]
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810208e:	609a      	str	r2, [r3, #8]
 8102090:	e006      	b.n	81020a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	689a      	ldr	r2, [r3, #8]
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810209e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	68db      	ldr	r3, [r3, #12]
 81020a4:	2b02      	cmp	r3, #2
 81020a6:	d104      	bne.n	81020b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81020b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	685b      	ldr	r3, [r3, #4]
 81020b8:	687a      	ldr	r2, [r7, #4]
 81020ba:	6812      	ldr	r2, [r2, #0]
 81020bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81020c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81020c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	68da      	ldr	r2, [r3, #12]
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81020d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	691a      	ldr	r2, [r3, #16]
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	695b      	ldr	r3, [r3, #20]
 81020de:	ea42 0103 	orr.w	r1, r2, r3
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	699b      	ldr	r3, [r3, #24]
 81020e6:	021a      	lsls	r2, r3, #8
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	430a      	orrs	r2, r1
 81020ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	69d9      	ldr	r1, [r3, #28]
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	6a1a      	ldr	r2, [r3, #32]
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	430a      	orrs	r2, r1
 81020fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	681b      	ldr	r3, [r3, #0]
 8102104:	681a      	ldr	r2, [r3, #0]
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	681b      	ldr	r3, [r3, #0]
 810210a:	f042 0201 	orr.w	r2, r2, #1
 810210e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	2200      	movs	r2, #0
 8102114:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	2220      	movs	r2, #32
 810211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	2200      	movs	r2, #0
 8102122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	2200      	movs	r2, #0
 8102128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810212c:	2300      	movs	r3, #0
}
 810212e:	4618      	mov	r0, r3
 8102130:	3708      	adds	r7, #8
 8102132:	46bd      	mov	sp, r7
 8102134:	bd80      	pop	{r7, pc}
	...

08102138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	b088      	sub	sp, #32
 810213c:	af02      	add	r7, sp, #8
 810213e:	60f8      	str	r0, [r7, #12]
 8102140:	4608      	mov	r0, r1
 8102142:	4611      	mov	r1, r2
 8102144:	461a      	mov	r2, r3
 8102146:	4603      	mov	r3, r0
 8102148:	817b      	strh	r3, [r7, #10]
 810214a:	460b      	mov	r3, r1
 810214c:	813b      	strh	r3, [r7, #8]
 810214e:	4613      	mov	r3, r2
 8102150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102152:	68fb      	ldr	r3, [r7, #12]
 8102154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102158:	b2db      	uxtb	r3, r3
 810215a:	2b20      	cmp	r3, #32
 810215c:	f040 80f9 	bne.w	8102352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102160:	6a3b      	ldr	r3, [r7, #32]
 8102162:	2b00      	cmp	r3, #0
 8102164:	d002      	beq.n	810216c <HAL_I2C_Mem_Write+0x34>
 8102166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102168:	2b00      	cmp	r3, #0
 810216a:	d105      	bne.n	8102178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810216c:	68fb      	ldr	r3, [r7, #12]
 810216e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102172:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102174:	2301      	movs	r3, #1
 8102176:	e0ed      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102178:	68fb      	ldr	r3, [r7, #12]
 810217a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810217e:	2b01      	cmp	r3, #1
 8102180:	d101      	bne.n	8102186 <HAL_I2C_Mem_Write+0x4e>
 8102182:	2302      	movs	r3, #2
 8102184:	e0e6      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
 8102186:	68fb      	ldr	r3, [r7, #12]
 8102188:	2201      	movs	r2, #1
 810218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810218e:	f7ff fbb9 	bl	8101904 <HAL_GetTick>
 8102192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102194:	697b      	ldr	r3, [r7, #20]
 8102196:	9300      	str	r3, [sp, #0]
 8102198:	2319      	movs	r3, #25
 810219a:	2201      	movs	r2, #1
 810219c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81021a0:	68f8      	ldr	r0, [r7, #12]
 81021a2:	f000 fadd 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 81021a6:	4603      	mov	r3, r0
 81021a8:	2b00      	cmp	r3, #0
 81021aa:	d001      	beq.n	81021b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81021ac:	2301      	movs	r3, #1
 81021ae:	e0d1      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	2221      	movs	r2, #33	; 0x21
 81021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81021b8:	68fb      	ldr	r3, [r7, #12]
 81021ba:	2240      	movs	r2, #64	; 0x40
 81021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81021c0:	68fb      	ldr	r3, [r7, #12]
 81021c2:	2200      	movs	r2, #0
 81021c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	6a3a      	ldr	r2, [r7, #32]
 81021ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81021cc:	68fb      	ldr	r3, [r7, #12]
 81021ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81021d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81021d2:	68fb      	ldr	r3, [r7, #12]
 81021d4:	2200      	movs	r2, #0
 81021d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81021d8:	88f8      	ldrh	r0, [r7, #6]
 81021da:	893a      	ldrh	r2, [r7, #8]
 81021dc:	8979      	ldrh	r1, [r7, #10]
 81021de:	697b      	ldr	r3, [r7, #20]
 81021e0:	9301      	str	r3, [sp, #4]
 81021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81021e4:	9300      	str	r3, [sp, #0]
 81021e6:	4603      	mov	r3, r0
 81021e8:	68f8      	ldr	r0, [r7, #12]
 81021ea:	f000 f9ed 	bl	81025c8 <I2C_RequestMemoryWrite>
 81021ee:	4603      	mov	r3, r0
 81021f0:	2b00      	cmp	r3, #0
 81021f2:	d005      	beq.n	8102200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81021f4:	68fb      	ldr	r3, [r7, #12]
 81021f6:	2200      	movs	r2, #0
 81021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81021fc:	2301      	movs	r3, #1
 81021fe:	e0a9      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102204:	b29b      	uxth	r3, r3
 8102206:	2bff      	cmp	r3, #255	; 0xff
 8102208:	d90e      	bls.n	8102228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	22ff      	movs	r2, #255	; 0xff
 810220e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102214:	b2da      	uxtb	r2, r3
 8102216:	8979      	ldrh	r1, [r7, #10]
 8102218:	2300      	movs	r3, #0
 810221a:	9300      	str	r3, [sp, #0]
 810221c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102220:	68f8      	ldr	r0, [r7, #12]
 8102222:	f000 fbbf 	bl	81029a4 <I2C_TransferConfig>
 8102226:	e00f      	b.n	8102248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102228:	68fb      	ldr	r3, [r7, #12]
 810222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810222c:	b29a      	uxth	r2, r3
 810222e:	68fb      	ldr	r3, [r7, #12]
 8102230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102232:	68fb      	ldr	r3, [r7, #12]
 8102234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102236:	b2da      	uxtb	r2, r3
 8102238:	8979      	ldrh	r1, [r7, #10]
 810223a:	2300      	movs	r3, #0
 810223c:	9300      	str	r3, [sp, #0]
 810223e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102242:	68f8      	ldr	r0, [r7, #12]
 8102244:	f000 fbae 	bl	81029a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102248:	697a      	ldr	r2, [r7, #20]
 810224a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810224c:	68f8      	ldr	r0, [r7, #12]
 810224e:	f000 fac7 	bl	81027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102252:	4603      	mov	r3, r0
 8102254:	2b00      	cmp	r3, #0
 8102256:	d001      	beq.n	810225c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102258:	2301      	movs	r3, #1
 810225a:	e07b      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810225c:	68fb      	ldr	r3, [r7, #12]
 810225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102260:	781a      	ldrb	r2, [r3, #0]
 8102262:	68fb      	ldr	r3, [r7, #12]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102268:	68fb      	ldr	r3, [r7, #12]
 810226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810226c:	1c5a      	adds	r2, r3, #1
 810226e:	68fb      	ldr	r3, [r7, #12]
 8102270:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102272:	68fb      	ldr	r3, [r7, #12]
 8102274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102276:	b29b      	uxth	r3, r3
 8102278:	3b01      	subs	r3, #1
 810227a:	b29a      	uxth	r2, r3
 810227c:	68fb      	ldr	r3, [r7, #12]
 810227e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102280:	68fb      	ldr	r3, [r7, #12]
 8102282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102284:	3b01      	subs	r3, #1
 8102286:	b29a      	uxth	r2, r3
 8102288:	68fb      	ldr	r3, [r7, #12]
 810228a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810228c:	68fb      	ldr	r3, [r7, #12]
 810228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102290:	b29b      	uxth	r3, r3
 8102292:	2b00      	cmp	r3, #0
 8102294:	d034      	beq.n	8102300 <HAL_I2C_Mem_Write+0x1c8>
 8102296:	68fb      	ldr	r3, [r7, #12]
 8102298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810229a:	2b00      	cmp	r3, #0
 810229c:	d130      	bne.n	8102300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810229e:	697b      	ldr	r3, [r7, #20]
 81022a0:	9300      	str	r3, [sp, #0]
 81022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022a4:	2200      	movs	r2, #0
 81022a6:	2180      	movs	r1, #128	; 0x80
 81022a8:	68f8      	ldr	r0, [r7, #12]
 81022aa:	f000 fa59 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 81022ae:	4603      	mov	r3, r0
 81022b0:	2b00      	cmp	r3, #0
 81022b2:	d001      	beq.n	81022b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81022b4:	2301      	movs	r3, #1
 81022b6:	e04d      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81022b8:	68fb      	ldr	r3, [r7, #12]
 81022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81022bc:	b29b      	uxth	r3, r3
 81022be:	2bff      	cmp	r3, #255	; 0xff
 81022c0:	d90e      	bls.n	81022e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81022c2:	68fb      	ldr	r3, [r7, #12]
 81022c4:	22ff      	movs	r2, #255	; 0xff
 81022c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81022c8:	68fb      	ldr	r3, [r7, #12]
 81022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81022cc:	b2da      	uxtb	r2, r3
 81022ce:	8979      	ldrh	r1, [r7, #10]
 81022d0:	2300      	movs	r3, #0
 81022d2:	9300      	str	r3, [sp, #0]
 81022d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81022d8:	68f8      	ldr	r0, [r7, #12]
 81022da:	f000 fb63 	bl	81029a4 <I2C_TransferConfig>
 81022de:	e00f      	b.n	8102300 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81022e0:	68fb      	ldr	r3, [r7, #12]
 81022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81022e4:	b29a      	uxth	r2, r3
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81022ea:	68fb      	ldr	r3, [r7, #12]
 81022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81022ee:	b2da      	uxtb	r2, r3
 81022f0:	8979      	ldrh	r1, [r7, #10]
 81022f2:	2300      	movs	r3, #0
 81022f4:	9300      	str	r3, [sp, #0]
 81022f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81022fa:	68f8      	ldr	r0, [r7, #12]
 81022fc:	f000 fb52 	bl	81029a4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102304:	b29b      	uxth	r3, r3
 8102306:	2b00      	cmp	r3, #0
 8102308:	d19e      	bne.n	8102248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810230a:	697a      	ldr	r2, [r7, #20]
 810230c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810230e:	68f8      	ldr	r0, [r7, #12]
 8102310:	f000 faa6 	bl	8102860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102314:	4603      	mov	r3, r0
 8102316:	2b00      	cmp	r3, #0
 8102318:	d001      	beq.n	810231e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810231a:	2301      	movs	r3, #1
 810231c:	e01a      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810231e:	68fb      	ldr	r3, [r7, #12]
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	2220      	movs	r2, #32
 8102324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102326:	68fb      	ldr	r3, [r7, #12]
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	6859      	ldr	r1, [r3, #4]
 810232c:	68fb      	ldr	r3, [r7, #12]
 810232e:	681a      	ldr	r2, [r3, #0]
 8102330:	4b0a      	ldr	r3, [pc, #40]	; (810235c <HAL_I2C_Mem_Write+0x224>)
 8102332:	400b      	ands	r3, r1
 8102334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102336:	68fb      	ldr	r3, [r7, #12]
 8102338:	2220      	movs	r2, #32
 810233a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810233e:	68fb      	ldr	r3, [r7, #12]
 8102340:	2200      	movs	r2, #0
 8102342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102346:	68fb      	ldr	r3, [r7, #12]
 8102348:	2200      	movs	r2, #0
 810234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810234e:	2300      	movs	r3, #0
 8102350:	e000      	b.n	8102354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102352:	2302      	movs	r3, #2
  }
}
 8102354:	4618      	mov	r0, r3
 8102356:	3718      	adds	r7, #24
 8102358:	46bd      	mov	sp, r7
 810235a:	bd80      	pop	{r7, pc}
 810235c:	fe00e800 	.word	0xfe00e800

08102360 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102360:	b580      	push	{r7, lr}
 8102362:	b088      	sub	sp, #32
 8102364:	af02      	add	r7, sp, #8
 8102366:	60f8      	str	r0, [r7, #12]
 8102368:	4608      	mov	r0, r1
 810236a:	4611      	mov	r1, r2
 810236c:	461a      	mov	r2, r3
 810236e:	4603      	mov	r3, r0
 8102370:	817b      	strh	r3, [r7, #10]
 8102372:	460b      	mov	r3, r1
 8102374:	813b      	strh	r3, [r7, #8]
 8102376:	4613      	mov	r3, r2
 8102378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810237a:	68fb      	ldr	r3, [r7, #12]
 810237c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102380:	b2db      	uxtb	r3, r3
 8102382:	2b20      	cmp	r3, #32
 8102384:	f040 80fd 	bne.w	8102582 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102388:	6a3b      	ldr	r3, [r7, #32]
 810238a:	2b00      	cmp	r3, #0
 810238c:	d002      	beq.n	8102394 <HAL_I2C_Mem_Read+0x34>
 810238e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102390:	2b00      	cmp	r3, #0
 8102392:	d105      	bne.n	81023a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102394:	68fb      	ldr	r3, [r7, #12]
 8102396:	f44f 7200 	mov.w	r2, #512	; 0x200
 810239a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810239c:	2301      	movs	r3, #1
 810239e:	e0f1      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81023a0:	68fb      	ldr	r3, [r7, #12]
 81023a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81023a6:	2b01      	cmp	r3, #1
 81023a8:	d101      	bne.n	81023ae <HAL_I2C_Mem_Read+0x4e>
 81023aa:	2302      	movs	r3, #2
 81023ac:	e0ea      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
 81023ae:	68fb      	ldr	r3, [r7, #12]
 81023b0:	2201      	movs	r2, #1
 81023b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81023b6:	f7ff faa5 	bl	8101904 <HAL_GetTick>
 81023ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81023bc:	697b      	ldr	r3, [r7, #20]
 81023be:	9300      	str	r3, [sp, #0]
 81023c0:	2319      	movs	r3, #25
 81023c2:	2201      	movs	r2, #1
 81023c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81023c8:	68f8      	ldr	r0, [r7, #12]
 81023ca:	f000 f9c9 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 81023ce:	4603      	mov	r3, r0
 81023d0:	2b00      	cmp	r3, #0
 81023d2:	d001      	beq.n	81023d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81023d4:	2301      	movs	r3, #1
 81023d6:	e0d5      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81023d8:	68fb      	ldr	r3, [r7, #12]
 81023da:	2222      	movs	r2, #34	; 0x22
 81023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81023e0:	68fb      	ldr	r3, [r7, #12]
 81023e2:	2240      	movs	r2, #64	; 0x40
 81023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81023e8:	68fb      	ldr	r3, [r7, #12]
 81023ea:	2200      	movs	r2, #0
 81023ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81023ee:	68fb      	ldr	r3, [r7, #12]
 81023f0:	6a3a      	ldr	r2, [r7, #32]
 81023f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81023f4:	68fb      	ldr	r3, [r7, #12]
 81023f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81023fa:	68fb      	ldr	r3, [r7, #12]
 81023fc:	2200      	movs	r2, #0
 81023fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102400:	88f8      	ldrh	r0, [r7, #6]
 8102402:	893a      	ldrh	r2, [r7, #8]
 8102404:	8979      	ldrh	r1, [r7, #10]
 8102406:	697b      	ldr	r3, [r7, #20]
 8102408:	9301      	str	r3, [sp, #4]
 810240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810240c:	9300      	str	r3, [sp, #0]
 810240e:	4603      	mov	r3, r0
 8102410:	68f8      	ldr	r0, [r7, #12]
 8102412:	f000 f92d 	bl	8102670 <I2C_RequestMemoryRead>
 8102416:	4603      	mov	r3, r0
 8102418:	2b00      	cmp	r3, #0
 810241a:	d005      	beq.n	8102428 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810241c:	68fb      	ldr	r3, [r7, #12]
 810241e:	2200      	movs	r2, #0
 8102420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102424:	2301      	movs	r3, #1
 8102426:	e0ad      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102428:	68fb      	ldr	r3, [r7, #12]
 810242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810242c:	b29b      	uxth	r3, r3
 810242e:	2bff      	cmp	r3, #255	; 0xff
 8102430:	d90e      	bls.n	8102450 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102432:	68fb      	ldr	r3, [r7, #12]
 8102434:	22ff      	movs	r2, #255	; 0xff
 8102436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8102438:	68fb      	ldr	r3, [r7, #12]
 810243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810243c:	b2da      	uxtb	r2, r3
 810243e:	8979      	ldrh	r1, [r7, #10]
 8102440:	4b52      	ldr	r3, [pc, #328]	; (810258c <HAL_I2C_Mem_Read+0x22c>)
 8102442:	9300      	str	r3, [sp, #0]
 8102444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102448:	68f8      	ldr	r0, [r7, #12]
 810244a:	f000 faab 	bl	81029a4 <I2C_TransferConfig>
 810244e:	e00f      	b.n	8102470 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102450:	68fb      	ldr	r3, [r7, #12]
 8102452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102454:	b29a      	uxth	r2, r3
 8102456:	68fb      	ldr	r3, [r7, #12]
 8102458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810245a:	68fb      	ldr	r3, [r7, #12]
 810245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810245e:	b2da      	uxtb	r2, r3
 8102460:	8979      	ldrh	r1, [r7, #10]
 8102462:	4b4a      	ldr	r3, [pc, #296]	; (810258c <HAL_I2C_Mem_Read+0x22c>)
 8102464:	9300      	str	r3, [sp, #0]
 8102466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810246a:	68f8      	ldr	r0, [r7, #12]
 810246c:	f000 fa9a 	bl	81029a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102470:	697b      	ldr	r3, [r7, #20]
 8102472:	9300      	str	r3, [sp, #0]
 8102474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102476:	2200      	movs	r2, #0
 8102478:	2104      	movs	r1, #4
 810247a:	68f8      	ldr	r0, [r7, #12]
 810247c:	f000 f970 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 8102480:	4603      	mov	r3, r0
 8102482:	2b00      	cmp	r3, #0
 8102484:	d001      	beq.n	810248a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102486:	2301      	movs	r3, #1
 8102488:	e07c      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810248a:	68fb      	ldr	r3, [r7, #12]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102490:	68fb      	ldr	r3, [r7, #12]
 8102492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102494:	b2d2      	uxtb	r2, r2
 8102496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810249c:	1c5a      	adds	r2, r3, #1
 810249e:	68fb      	ldr	r3, [r7, #12]
 81024a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81024a2:	68fb      	ldr	r3, [r7, #12]
 81024a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024a6:	3b01      	subs	r3, #1
 81024a8:	b29a      	uxth	r2, r3
 81024aa:	68fb      	ldr	r3, [r7, #12]
 81024ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81024ae:	68fb      	ldr	r3, [r7, #12]
 81024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024b2:	b29b      	uxth	r3, r3
 81024b4:	3b01      	subs	r3, #1
 81024b6:	b29a      	uxth	r2, r3
 81024b8:	68fb      	ldr	r3, [r7, #12]
 81024ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81024bc:	68fb      	ldr	r3, [r7, #12]
 81024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024c0:	b29b      	uxth	r3, r3
 81024c2:	2b00      	cmp	r3, #0
 81024c4:	d034      	beq.n	8102530 <HAL_I2C_Mem_Read+0x1d0>
 81024c6:	68fb      	ldr	r3, [r7, #12]
 81024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d130      	bne.n	8102530 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81024ce:	697b      	ldr	r3, [r7, #20]
 81024d0:	9300      	str	r3, [sp, #0]
 81024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024d4:	2200      	movs	r2, #0
 81024d6:	2180      	movs	r1, #128	; 0x80
 81024d8:	68f8      	ldr	r0, [r7, #12]
 81024da:	f000 f941 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 81024de:	4603      	mov	r3, r0
 81024e0:	2b00      	cmp	r3, #0
 81024e2:	d001      	beq.n	81024e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81024e4:	2301      	movs	r3, #1
 81024e6:	e04d      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81024e8:	68fb      	ldr	r3, [r7, #12]
 81024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024ec:	b29b      	uxth	r3, r3
 81024ee:	2bff      	cmp	r3, #255	; 0xff
 81024f0:	d90e      	bls.n	8102510 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81024f2:	68fb      	ldr	r3, [r7, #12]
 81024f4:	22ff      	movs	r2, #255	; 0xff
 81024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024fc:	b2da      	uxtb	r2, r3
 81024fe:	8979      	ldrh	r1, [r7, #10]
 8102500:	2300      	movs	r3, #0
 8102502:	9300      	str	r3, [sp, #0]
 8102504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102508:	68f8      	ldr	r0, [r7, #12]
 810250a:	f000 fa4b 	bl	81029a4 <I2C_TransferConfig>
 810250e:	e00f      	b.n	8102530 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102514:	b29a      	uxth	r2, r3
 8102516:	68fb      	ldr	r3, [r7, #12]
 8102518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810251a:	68fb      	ldr	r3, [r7, #12]
 810251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810251e:	b2da      	uxtb	r2, r3
 8102520:	8979      	ldrh	r1, [r7, #10]
 8102522:	2300      	movs	r3, #0
 8102524:	9300      	str	r3, [sp, #0]
 8102526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810252a:	68f8      	ldr	r0, [r7, #12]
 810252c:	f000 fa3a 	bl	81029a4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8102530:	68fb      	ldr	r3, [r7, #12]
 8102532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102534:	b29b      	uxth	r3, r3
 8102536:	2b00      	cmp	r3, #0
 8102538:	d19a      	bne.n	8102470 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810253a:	697a      	ldr	r2, [r7, #20]
 810253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810253e:	68f8      	ldr	r0, [r7, #12]
 8102540:	f000 f98e 	bl	8102860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102544:	4603      	mov	r3, r0
 8102546:	2b00      	cmp	r3, #0
 8102548:	d001      	beq.n	810254e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810254a:	2301      	movs	r3, #1
 810254c:	e01a      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810254e:	68fb      	ldr	r3, [r7, #12]
 8102550:	681b      	ldr	r3, [r3, #0]
 8102552:	2220      	movs	r2, #32
 8102554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102556:	68fb      	ldr	r3, [r7, #12]
 8102558:	681b      	ldr	r3, [r3, #0]
 810255a:	6859      	ldr	r1, [r3, #4]
 810255c:	68fb      	ldr	r3, [r7, #12]
 810255e:	681a      	ldr	r2, [r3, #0]
 8102560:	4b0b      	ldr	r3, [pc, #44]	; (8102590 <HAL_I2C_Mem_Read+0x230>)
 8102562:	400b      	ands	r3, r1
 8102564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102566:	68fb      	ldr	r3, [r7, #12]
 8102568:	2220      	movs	r2, #32
 810256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	2200      	movs	r2, #0
 8102572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102576:	68fb      	ldr	r3, [r7, #12]
 8102578:	2200      	movs	r2, #0
 810257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810257e:	2300      	movs	r3, #0
 8102580:	e000      	b.n	8102584 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102582:	2302      	movs	r3, #2
  }
}
 8102584:	4618      	mov	r0, r3
 8102586:	3718      	adds	r7, #24
 8102588:	46bd      	mov	sp, r7
 810258a:	bd80      	pop	{r7, pc}
 810258c:	80002400 	.word	0x80002400
 8102590:	fe00e800 	.word	0xfe00e800

08102594 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8102594:	b580      	push	{r7, lr}
 8102596:	b084      	sub	sp, #16
 8102598:	af00      	add	r7, sp, #0
 810259a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	699b      	ldr	r3, [r3, #24]
 81025a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81025b0:	2b00      	cmp	r3, #0
 81025b2:	d005      	beq.n	81025c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81025b8:	68ba      	ldr	r2, [r7, #8]
 81025ba:	68f9      	ldr	r1, [r7, #12]
 81025bc:	6878      	ldr	r0, [r7, #4]
 81025be:	4798      	blx	r3
  }
}
 81025c0:	bf00      	nop
 81025c2:	3710      	adds	r7, #16
 81025c4:	46bd      	mov	sp, r7
 81025c6:	bd80      	pop	{r7, pc}

081025c8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81025c8:	b580      	push	{r7, lr}
 81025ca:	b086      	sub	sp, #24
 81025cc:	af02      	add	r7, sp, #8
 81025ce:	60f8      	str	r0, [r7, #12]
 81025d0:	4608      	mov	r0, r1
 81025d2:	4611      	mov	r1, r2
 81025d4:	461a      	mov	r2, r3
 81025d6:	4603      	mov	r3, r0
 81025d8:	817b      	strh	r3, [r7, #10]
 81025da:	460b      	mov	r3, r1
 81025dc:	813b      	strh	r3, [r7, #8]
 81025de:	4613      	mov	r3, r2
 81025e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81025e2:	88fb      	ldrh	r3, [r7, #6]
 81025e4:	b2da      	uxtb	r2, r3
 81025e6:	8979      	ldrh	r1, [r7, #10]
 81025e8:	4b20      	ldr	r3, [pc, #128]	; (810266c <I2C_RequestMemoryWrite+0xa4>)
 81025ea:	9300      	str	r3, [sp, #0]
 81025ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81025f0:	68f8      	ldr	r0, [r7, #12]
 81025f2:	f000 f9d7 	bl	81029a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81025f6:	69fa      	ldr	r2, [r7, #28]
 81025f8:	69b9      	ldr	r1, [r7, #24]
 81025fa:	68f8      	ldr	r0, [r7, #12]
 81025fc:	f000 f8f0 	bl	81027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102600:	4603      	mov	r3, r0
 8102602:	2b00      	cmp	r3, #0
 8102604:	d001      	beq.n	810260a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8102606:	2301      	movs	r3, #1
 8102608:	e02c      	b.n	8102664 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810260a:	88fb      	ldrh	r3, [r7, #6]
 810260c:	2b01      	cmp	r3, #1
 810260e:	d105      	bne.n	810261c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102610:	893b      	ldrh	r3, [r7, #8]
 8102612:	b2da      	uxtb	r2, r3
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	629a      	str	r2, [r3, #40]	; 0x28
 810261a:	e015      	b.n	8102648 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810261c:	893b      	ldrh	r3, [r7, #8]
 810261e:	0a1b      	lsrs	r3, r3, #8
 8102620:	b29b      	uxth	r3, r3
 8102622:	b2da      	uxtb	r2, r3
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810262a:	69fa      	ldr	r2, [r7, #28]
 810262c:	69b9      	ldr	r1, [r7, #24]
 810262e:	68f8      	ldr	r0, [r7, #12]
 8102630:	f000 f8d6 	bl	81027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102634:	4603      	mov	r3, r0
 8102636:	2b00      	cmp	r3, #0
 8102638:	d001      	beq.n	810263e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810263a:	2301      	movs	r3, #1
 810263c:	e012      	b.n	8102664 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810263e:	893b      	ldrh	r3, [r7, #8]
 8102640:	b2da      	uxtb	r2, r3
 8102642:	68fb      	ldr	r3, [r7, #12]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102648:	69fb      	ldr	r3, [r7, #28]
 810264a:	9300      	str	r3, [sp, #0]
 810264c:	69bb      	ldr	r3, [r7, #24]
 810264e:	2200      	movs	r2, #0
 8102650:	2180      	movs	r1, #128	; 0x80
 8102652:	68f8      	ldr	r0, [r7, #12]
 8102654:	f000 f884 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 8102658:	4603      	mov	r3, r0
 810265a:	2b00      	cmp	r3, #0
 810265c:	d001      	beq.n	8102662 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810265e:	2301      	movs	r3, #1
 8102660:	e000      	b.n	8102664 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102662:	2300      	movs	r3, #0
}
 8102664:	4618      	mov	r0, r3
 8102666:	3710      	adds	r7, #16
 8102668:	46bd      	mov	sp, r7
 810266a:	bd80      	pop	{r7, pc}
 810266c:	80002000 	.word	0x80002000

08102670 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102670:	b580      	push	{r7, lr}
 8102672:	b086      	sub	sp, #24
 8102674:	af02      	add	r7, sp, #8
 8102676:	60f8      	str	r0, [r7, #12]
 8102678:	4608      	mov	r0, r1
 810267a:	4611      	mov	r1, r2
 810267c:	461a      	mov	r2, r3
 810267e:	4603      	mov	r3, r0
 8102680:	817b      	strh	r3, [r7, #10]
 8102682:	460b      	mov	r3, r1
 8102684:	813b      	strh	r3, [r7, #8]
 8102686:	4613      	mov	r3, r2
 8102688:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810268a:	88fb      	ldrh	r3, [r7, #6]
 810268c:	b2da      	uxtb	r2, r3
 810268e:	8979      	ldrh	r1, [r7, #10]
 8102690:	4b20      	ldr	r3, [pc, #128]	; (8102714 <I2C_RequestMemoryRead+0xa4>)
 8102692:	9300      	str	r3, [sp, #0]
 8102694:	2300      	movs	r3, #0
 8102696:	68f8      	ldr	r0, [r7, #12]
 8102698:	f000 f984 	bl	81029a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810269c:	69fa      	ldr	r2, [r7, #28]
 810269e:	69b9      	ldr	r1, [r7, #24]
 81026a0:	68f8      	ldr	r0, [r7, #12]
 81026a2:	f000 f89d 	bl	81027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 81026a6:	4603      	mov	r3, r0
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d001      	beq.n	81026b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81026ac:	2301      	movs	r3, #1
 81026ae:	e02c      	b.n	810270a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81026b0:	88fb      	ldrh	r3, [r7, #6]
 81026b2:	2b01      	cmp	r3, #1
 81026b4:	d105      	bne.n	81026c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81026b6:	893b      	ldrh	r3, [r7, #8]
 81026b8:	b2da      	uxtb	r2, r3
 81026ba:	68fb      	ldr	r3, [r7, #12]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	629a      	str	r2, [r3, #40]	; 0x28
 81026c0:	e015      	b.n	81026ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81026c2:	893b      	ldrh	r3, [r7, #8]
 81026c4:	0a1b      	lsrs	r3, r3, #8
 81026c6:	b29b      	uxth	r3, r3
 81026c8:	b2da      	uxtb	r2, r3
 81026ca:	68fb      	ldr	r3, [r7, #12]
 81026cc:	681b      	ldr	r3, [r3, #0]
 81026ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81026d0:	69fa      	ldr	r2, [r7, #28]
 81026d2:	69b9      	ldr	r1, [r7, #24]
 81026d4:	68f8      	ldr	r0, [r7, #12]
 81026d6:	f000 f883 	bl	81027e0 <I2C_WaitOnTXISFlagUntilTimeout>
 81026da:	4603      	mov	r3, r0
 81026dc:	2b00      	cmp	r3, #0
 81026de:	d001      	beq.n	81026e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81026e0:	2301      	movs	r3, #1
 81026e2:	e012      	b.n	810270a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81026e4:	893b      	ldrh	r3, [r7, #8]
 81026e6:	b2da      	uxtb	r2, r3
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81026ee:	69fb      	ldr	r3, [r7, #28]
 81026f0:	9300      	str	r3, [sp, #0]
 81026f2:	69bb      	ldr	r3, [r7, #24]
 81026f4:	2200      	movs	r2, #0
 81026f6:	2140      	movs	r1, #64	; 0x40
 81026f8:	68f8      	ldr	r0, [r7, #12]
 81026fa:	f000 f831 	bl	8102760 <I2C_WaitOnFlagUntilTimeout>
 81026fe:	4603      	mov	r3, r0
 8102700:	2b00      	cmp	r3, #0
 8102702:	d001      	beq.n	8102708 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102704:	2301      	movs	r3, #1
 8102706:	e000      	b.n	810270a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102708:	2300      	movs	r3, #0
}
 810270a:	4618      	mov	r0, r3
 810270c:	3710      	adds	r7, #16
 810270e:	46bd      	mov	sp, r7
 8102710:	bd80      	pop	{r7, pc}
 8102712:	bf00      	nop
 8102714:	80002000 	.word	0x80002000

08102718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102718:	b480      	push	{r7}
 810271a:	b083      	sub	sp, #12
 810271c:	af00      	add	r7, sp, #0
 810271e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	681b      	ldr	r3, [r3, #0]
 8102724:	699b      	ldr	r3, [r3, #24]
 8102726:	f003 0302 	and.w	r3, r3, #2
 810272a:	2b02      	cmp	r3, #2
 810272c:	d103      	bne.n	8102736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	2200      	movs	r2, #0
 8102734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	699b      	ldr	r3, [r3, #24]
 810273c:	f003 0301 	and.w	r3, r3, #1
 8102740:	2b01      	cmp	r3, #1
 8102742:	d007      	beq.n	8102754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	699a      	ldr	r2, [r3, #24]
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	681b      	ldr	r3, [r3, #0]
 810274e:	f042 0201 	orr.w	r2, r2, #1
 8102752:	619a      	str	r2, [r3, #24]
  }
}
 8102754:	bf00      	nop
 8102756:	370c      	adds	r7, #12
 8102758:	46bd      	mov	sp, r7
 810275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275e:	4770      	bx	lr

08102760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102760:	b580      	push	{r7, lr}
 8102762:	b084      	sub	sp, #16
 8102764:	af00      	add	r7, sp, #0
 8102766:	60f8      	str	r0, [r7, #12]
 8102768:	60b9      	str	r1, [r7, #8]
 810276a:	603b      	str	r3, [r7, #0]
 810276c:	4613      	mov	r3, r2
 810276e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102770:	e022      	b.n	81027b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102772:	683b      	ldr	r3, [r7, #0]
 8102774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102778:	d01e      	beq.n	81027b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810277a:	f7ff f8c3 	bl	8101904 <HAL_GetTick>
 810277e:	4602      	mov	r2, r0
 8102780:	69bb      	ldr	r3, [r7, #24]
 8102782:	1ad3      	subs	r3, r2, r3
 8102784:	683a      	ldr	r2, [r7, #0]
 8102786:	429a      	cmp	r2, r3
 8102788:	d302      	bcc.n	8102790 <I2C_WaitOnFlagUntilTimeout+0x30>
 810278a:	683b      	ldr	r3, [r7, #0]
 810278c:	2b00      	cmp	r3, #0
 810278e:	d113      	bne.n	81027b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102790:	68fb      	ldr	r3, [r7, #12]
 8102792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102794:	f043 0220 	orr.w	r2, r3, #32
 8102798:	68fb      	ldr	r3, [r7, #12]
 810279a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810279c:	68fb      	ldr	r3, [r7, #12]
 810279e:	2220      	movs	r2, #32
 81027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81027a4:	68fb      	ldr	r3, [r7, #12]
 81027a6:	2200      	movs	r2, #0
 81027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81027ac:	68fb      	ldr	r3, [r7, #12]
 81027ae:	2200      	movs	r2, #0
 81027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81027b4:	2301      	movs	r3, #1
 81027b6:	e00f      	b.n	81027d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81027b8:	68fb      	ldr	r3, [r7, #12]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	699a      	ldr	r2, [r3, #24]
 81027be:	68bb      	ldr	r3, [r7, #8]
 81027c0:	4013      	ands	r3, r2
 81027c2:	68ba      	ldr	r2, [r7, #8]
 81027c4:	429a      	cmp	r2, r3
 81027c6:	bf0c      	ite	eq
 81027c8:	2301      	moveq	r3, #1
 81027ca:	2300      	movne	r3, #0
 81027cc:	b2db      	uxtb	r3, r3
 81027ce:	461a      	mov	r2, r3
 81027d0:	79fb      	ldrb	r3, [r7, #7]
 81027d2:	429a      	cmp	r2, r3
 81027d4:	d0cd      	beq.n	8102772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81027d6:	2300      	movs	r3, #0
}
 81027d8:	4618      	mov	r0, r3
 81027da:	3710      	adds	r7, #16
 81027dc:	46bd      	mov	sp, r7
 81027de:	bd80      	pop	{r7, pc}

081027e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81027e0:	b580      	push	{r7, lr}
 81027e2:	b084      	sub	sp, #16
 81027e4:	af00      	add	r7, sp, #0
 81027e6:	60f8      	str	r0, [r7, #12]
 81027e8:	60b9      	str	r1, [r7, #8]
 81027ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81027ec:	e02c      	b.n	8102848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81027ee:	687a      	ldr	r2, [r7, #4]
 81027f0:	68b9      	ldr	r1, [r7, #8]
 81027f2:	68f8      	ldr	r0, [r7, #12]
 81027f4:	f000 f870 	bl	81028d8 <I2C_IsAcknowledgeFailed>
 81027f8:	4603      	mov	r3, r0
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d001      	beq.n	8102802 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81027fe:	2301      	movs	r3, #1
 8102800:	e02a      	b.n	8102858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102802:	68bb      	ldr	r3, [r7, #8]
 8102804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102808:	d01e      	beq.n	8102848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810280a:	f7ff f87b 	bl	8101904 <HAL_GetTick>
 810280e:	4602      	mov	r2, r0
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	1ad3      	subs	r3, r2, r3
 8102814:	68ba      	ldr	r2, [r7, #8]
 8102816:	429a      	cmp	r2, r3
 8102818:	d302      	bcc.n	8102820 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810281a:	68bb      	ldr	r3, [r7, #8]
 810281c:	2b00      	cmp	r3, #0
 810281e:	d113      	bne.n	8102848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102824:	f043 0220 	orr.w	r2, r3, #32
 8102828:	68fb      	ldr	r3, [r7, #12]
 810282a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810282c:	68fb      	ldr	r3, [r7, #12]
 810282e:	2220      	movs	r2, #32
 8102830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	2200      	movs	r2, #0
 8102838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	2200      	movs	r2, #0
 8102840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102844:	2301      	movs	r3, #1
 8102846:	e007      	b.n	8102858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	699b      	ldr	r3, [r3, #24]
 810284e:	f003 0302 	and.w	r3, r3, #2
 8102852:	2b02      	cmp	r3, #2
 8102854:	d1cb      	bne.n	81027ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102856:	2300      	movs	r3, #0
}
 8102858:	4618      	mov	r0, r3
 810285a:	3710      	adds	r7, #16
 810285c:	46bd      	mov	sp, r7
 810285e:	bd80      	pop	{r7, pc}

08102860 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102860:	b580      	push	{r7, lr}
 8102862:	b084      	sub	sp, #16
 8102864:	af00      	add	r7, sp, #0
 8102866:	60f8      	str	r0, [r7, #12]
 8102868:	60b9      	str	r1, [r7, #8]
 810286a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810286c:	e028      	b.n	81028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810286e:	687a      	ldr	r2, [r7, #4]
 8102870:	68b9      	ldr	r1, [r7, #8]
 8102872:	68f8      	ldr	r0, [r7, #12]
 8102874:	f000 f830 	bl	81028d8 <I2C_IsAcknowledgeFailed>
 8102878:	4603      	mov	r3, r0
 810287a:	2b00      	cmp	r3, #0
 810287c:	d001      	beq.n	8102882 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810287e:	2301      	movs	r3, #1
 8102880:	e026      	b.n	81028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102882:	f7ff f83f 	bl	8101904 <HAL_GetTick>
 8102886:	4602      	mov	r2, r0
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	1ad3      	subs	r3, r2, r3
 810288c:	68ba      	ldr	r2, [r7, #8]
 810288e:	429a      	cmp	r2, r3
 8102890:	d302      	bcc.n	8102898 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102892:	68bb      	ldr	r3, [r7, #8]
 8102894:	2b00      	cmp	r3, #0
 8102896:	d113      	bne.n	81028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102898:	68fb      	ldr	r3, [r7, #12]
 810289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810289c:	f043 0220 	orr.w	r2, r3, #32
 81028a0:	68fb      	ldr	r3, [r7, #12]
 81028a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81028a4:	68fb      	ldr	r3, [r7, #12]
 81028a6:	2220      	movs	r2, #32
 81028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	2200      	movs	r2, #0
 81028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	2200      	movs	r2, #0
 81028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81028bc:	2301      	movs	r3, #1
 81028be:	e007      	b.n	81028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81028c0:	68fb      	ldr	r3, [r7, #12]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	699b      	ldr	r3, [r3, #24]
 81028c6:	f003 0320 	and.w	r3, r3, #32
 81028ca:	2b20      	cmp	r3, #32
 81028cc:	d1cf      	bne.n	810286e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81028ce:	2300      	movs	r3, #0
}
 81028d0:	4618      	mov	r0, r3
 81028d2:	3710      	adds	r7, #16
 81028d4:	46bd      	mov	sp, r7
 81028d6:	bd80      	pop	{r7, pc}

081028d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b084      	sub	sp, #16
 81028dc:	af00      	add	r7, sp, #0
 81028de:	60f8      	str	r0, [r7, #12]
 81028e0:	60b9      	str	r1, [r7, #8]
 81028e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	699b      	ldr	r3, [r3, #24]
 81028ea:	f003 0310 	and.w	r3, r3, #16
 81028ee:	2b10      	cmp	r3, #16
 81028f0:	d151      	bne.n	8102996 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81028f2:	e022      	b.n	810293a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81028f4:	68bb      	ldr	r3, [r7, #8]
 81028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81028fa:	d01e      	beq.n	810293a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81028fc:	f7ff f802 	bl	8101904 <HAL_GetTick>
 8102900:	4602      	mov	r2, r0
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	1ad3      	subs	r3, r2, r3
 8102906:	68ba      	ldr	r2, [r7, #8]
 8102908:	429a      	cmp	r2, r3
 810290a:	d302      	bcc.n	8102912 <I2C_IsAcknowledgeFailed+0x3a>
 810290c:	68bb      	ldr	r3, [r7, #8]
 810290e:	2b00      	cmp	r3, #0
 8102910:	d113      	bne.n	810293a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102916:	f043 0220 	orr.w	r2, r3, #32
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810291e:	68fb      	ldr	r3, [r7, #12]
 8102920:	2220      	movs	r2, #32
 8102922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102926:	68fb      	ldr	r3, [r7, #12]
 8102928:	2200      	movs	r2, #0
 810292a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	2200      	movs	r2, #0
 8102932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102936:	2301      	movs	r3, #1
 8102938:	e02e      	b.n	8102998 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810293a:	68fb      	ldr	r3, [r7, #12]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	699b      	ldr	r3, [r3, #24]
 8102940:	f003 0320 	and.w	r3, r3, #32
 8102944:	2b20      	cmp	r3, #32
 8102946:	d1d5      	bne.n	81028f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102948:	68fb      	ldr	r3, [r7, #12]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	2210      	movs	r2, #16
 810294e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	2220      	movs	r2, #32
 8102956:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102958:	68f8      	ldr	r0, [r7, #12]
 810295a:	f7ff fedd 	bl	8102718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810295e:	68fb      	ldr	r3, [r7, #12]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	6859      	ldr	r1, [r3, #4]
 8102964:	68fb      	ldr	r3, [r7, #12]
 8102966:	681a      	ldr	r2, [r3, #0]
 8102968:	4b0d      	ldr	r3, [pc, #52]	; (81029a0 <I2C_IsAcknowledgeFailed+0xc8>)
 810296a:	400b      	ands	r3, r1
 810296c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810296e:	68fb      	ldr	r3, [r7, #12]
 8102970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102972:	f043 0204 	orr.w	r2, r3, #4
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	2220      	movs	r2, #32
 810297e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	2200      	movs	r2, #0
 8102986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810298a:	68fb      	ldr	r3, [r7, #12]
 810298c:	2200      	movs	r2, #0
 810298e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102992:	2301      	movs	r3, #1
 8102994:	e000      	b.n	8102998 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102996:	2300      	movs	r3, #0
}
 8102998:	4618      	mov	r0, r3
 810299a:	3710      	adds	r7, #16
 810299c:	46bd      	mov	sp, r7
 810299e:	bd80      	pop	{r7, pc}
 81029a0:	fe00e800 	.word	0xfe00e800

081029a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81029a4:	b480      	push	{r7}
 81029a6:	b085      	sub	sp, #20
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	60f8      	str	r0, [r7, #12]
 81029ac:	607b      	str	r3, [r7, #4]
 81029ae:	460b      	mov	r3, r1
 81029b0:	817b      	strh	r3, [r7, #10]
 81029b2:	4613      	mov	r3, r2
 81029b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	685a      	ldr	r2, [r3, #4]
 81029bc:	69bb      	ldr	r3, [r7, #24]
 81029be:	0d5b      	lsrs	r3, r3, #21
 81029c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81029c4:	4b0d      	ldr	r3, [pc, #52]	; (81029fc <I2C_TransferConfig+0x58>)
 81029c6:	430b      	orrs	r3, r1
 81029c8:	43db      	mvns	r3, r3
 81029ca:	ea02 0103 	and.w	r1, r2, r3
 81029ce:	897b      	ldrh	r3, [r7, #10]
 81029d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81029d4:	7a7b      	ldrb	r3, [r7, #9]
 81029d6:	041b      	lsls	r3, r3, #16
 81029d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81029dc:	431a      	orrs	r2, r3
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	431a      	orrs	r2, r3
 81029e2:	69bb      	ldr	r3, [r7, #24]
 81029e4:	431a      	orrs	r2, r3
 81029e6:	68fb      	ldr	r3, [r7, #12]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	430a      	orrs	r2, r1
 81029ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81029ee:	bf00      	nop
 81029f0:	3714      	adds	r7, #20
 81029f2:	46bd      	mov	sp, r7
 81029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029f8:	4770      	bx	lr
 81029fa:	bf00      	nop
 81029fc:	03ff63ff 	.word	0x03ff63ff

08102a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102a00:	b480      	push	{r7}
 8102a02:	b083      	sub	sp, #12
 8102a04:	af00      	add	r7, sp, #0
 8102a06:	6078      	str	r0, [r7, #4]
 8102a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102a10:	b2db      	uxtb	r3, r3
 8102a12:	2b20      	cmp	r3, #32
 8102a14:	d138      	bne.n	8102a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102a1c:	2b01      	cmp	r3, #1
 8102a1e:	d101      	bne.n	8102a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102a20:	2302      	movs	r3, #2
 8102a22:	e032      	b.n	8102a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	2201      	movs	r2, #1
 8102a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	2224      	movs	r2, #36	; 0x24
 8102a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	681a      	ldr	r2, [r3, #0]
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	f022 0201 	bic.w	r2, r2, #1
 8102a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	681a      	ldr	r2, [r3, #0]
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	6819      	ldr	r1, [r3, #0]
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	683a      	ldr	r2, [r7, #0]
 8102a60:	430a      	orrs	r2, r1
 8102a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	681a      	ldr	r2, [r3, #0]
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	f042 0201 	orr.w	r2, r2, #1
 8102a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	2220      	movs	r2, #32
 8102a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	2200      	movs	r2, #0
 8102a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102a84:	2300      	movs	r3, #0
 8102a86:	e000      	b.n	8102a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102a88:	2302      	movs	r3, #2
  }
}
 8102a8a:	4618      	mov	r0, r3
 8102a8c:	370c      	adds	r7, #12
 8102a8e:	46bd      	mov	sp, r7
 8102a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a94:	4770      	bx	lr

08102a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102a96:	b480      	push	{r7}
 8102a98:	b085      	sub	sp, #20
 8102a9a:	af00      	add	r7, sp, #0
 8102a9c:	6078      	str	r0, [r7, #4]
 8102a9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102aa6:	b2db      	uxtb	r3, r3
 8102aa8:	2b20      	cmp	r3, #32
 8102aaa:	d139      	bne.n	8102b20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102ab2:	2b01      	cmp	r3, #1
 8102ab4:	d101      	bne.n	8102aba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102ab6:	2302      	movs	r3, #2
 8102ab8:	e033      	b.n	8102b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	2201      	movs	r2, #1
 8102abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	2224      	movs	r2, #36	; 0x24
 8102ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	681b      	ldr	r3, [r3, #0]
 8102ace:	681a      	ldr	r2, [r3, #0]
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	f022 0201 	bic.w	r2, r2, #1
 8102ad8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102ae2:	68fb      	ldr	r3, [r7, #12]
 8102ae4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102ae8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102aea:	683b      	ldr	r3, [r7, #0]
 8102aec:	021b      	lsls	r3, r3, #8
 8102aee:	68fa      	ldr	r2, [r7, #12]
 8102af0:	4313      	orrs	r3, r2
 8102af2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	68fa      	ldr	r2, [r7, #12]
 8102afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	681a      	ldr	r2, [r3, #0]
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	f042 0201 	orr.w	r2, r2, #1
 8102b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	2220      	movs	r2, #32
 8102b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	2200      	movs	r2, #0
 8102b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102b1c:	2300      	movs	r3, #0
 8102b1e:	e000      	b.n	8102b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102b20:	2302      	movs	r3, #2
  }
}
 8102b22:	4618      	mov	r0, r3
 8102b24:	3714      	adds	r7, #20
 8102b26:	46bd      	mov	sp, r7
 8102b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b2c:	4770      	bx	lr
	...

08102b30 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102b30:	b580      	push	{r7, lr}
 8102b32:	b084      	sub	sp, #16
 8102b34:	af00      	add	r7, sp, #0
 8102b36:	60f8      	str	r0, [r7, #12]
 8102b38:	460b      	mov	r3, r1
 8102b3a:	607a      	str	r2, [r7, #4]
 8102b3c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102b3e:	4b37      	ldr	r3, [pc, #220]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	f023 0201 	bic.w	r2, r3, #1
 8102b46:	4935      	ldr	r1, [pc, #212]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b48:	68fb      	ldr	r3, [r7, #12]
 8102b4a:	4313      	orrs	r3, r2
 8102b4c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d123      	bne.n	8102b9c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102b54:	f7ff f842 	bl	8101bdc <HAL_GetCurrentCPUID>
 8102b58:	4603      	mov	r3, r0
 8102b5a:	2b03      	cmp	r3, #3
 8102b5c:	d158      	bne.n	8102c10 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102b5e:	4b2f      	ldr	r3, [pc, #188]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b60:	691b      	ldr	r3, [r3, #16]
 8102b62:	4a2e      	ldr	r2, [pc, #184]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b64:	f023 0301 	bic.w	r3, r3, #1
 8102b68:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b6a:	4b2d      	ldr	r3, [pc, #180]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b6c:	691b      	ldr	r3, [r3, #16]
 8102b6e:	4a2c      	ldr	r2, [pc, #176]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b70:	f043 0304 	orr.w	r3, r3, #4
 8102b74:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102b76:	f3bf 8f4f 	dsb	sy
}
 8102b7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b7c:	f3bf 8f6f 	isb	sy
}
 8102b80:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b82:	7afb      	ldrb	r3, [r7, #11]
 8102b84:	2b01      	cmp	r3, #1
 8102b86:	d101      	bne.n	8102b8c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b88:	bf30      	wfi
 8102b8a:	e000      	b.n	8102b8e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b8c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b8e:	4b24      	ldr	r3, [pc, #144]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b90:	691b      	ldr	r3, [r3, #16]
 8102b92:	4a23      	ldr	r2, [pc, #140]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b94:	f023 0304 	bic.w	r3, r3, #4
 8102b98:	6113      	str	r3, [r2, #16]
 8102b9a:	e03c      	b.n	8102c16 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	2b01      	cmp	r3, #1
 8102ba0:	d123      	bne.n	8102bea <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102ba2:	f7ff f81b 	bl	8101bdc <HAL_GetCurrentCPUID>
 8102ba6:	4603      	mov	r3, r0
 8102ba8:	2b01      	cmp	r3, #1
 8102baa:	d133      	bne.n	8102c14 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102bac:	4b1b      	ldr	r3, [pc, #108]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bae:	695b      	ldr	r3, [r3, #20]
 8102bb0:	4a1a      	ldr	r2, [pc, #104]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bb2:	f023 0302 	bic.w	r3, r3, #2
 8102bb6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102bb8:	4b19      	ldr	r3, [pc, #100]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bba:	691b      	ldr	r3, [r3, #16]
 8102bbc:	4a18      	ldr	r2, [pc, #96]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bbe:	f043 0304 	orr.w	r3, r3, #4
 8102bc2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102bc4:	f3bf 8f4f 	dsb	sy
}
 8102bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102bca:	f3bf 8f6f 	isb	sy
}
 8102bce:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102bd0:	7afb      	ldrb	r3, [r7, #11]
 8102bd2:	2b01      	cmp	r3, #1
 8102bd4:	d101      	bne.n	8102bda <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102bd6:	bf30      	wfi
 8102bd8:	e000      	b.n	8102bdc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102bda:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102bdc:	4b10      	ldr	r3, [pc, #64]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bde:	691b      	ldr	r3, [r3, #16]
 8102be0:	4a0f      	ldr	r2, [pc, #60]	; (8102c20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102be2:	f023 0304 	bic.w	r3, r3, #4
 8102be6:	6113      	str	r3, [r2, #16]
 8102be8:	e015      	b.n	8102c16 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102bea:	f7fe fff7 	bl	8101bdc <HAL_GetCurrentCPUID>
 8102bee:	4603      	mov	r3, r0
 8102bf0:	2b03      	cmp	r3, #3
 8102bf2:	d106      	bne.n	8102c02 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102bf4:	4b09      	ldr	r3, [pc, #36]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bf6:	691b      	ldr	r3, [r3, #16]
 8102bf8:	4a08      	ldr	r2, [pc, #32]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bfa:	f023 0304 	bic.w	r3, r3, #4
 8102bfe:	6113      	str	r3, [r2, #16]
 8102c00:	e009      	b.n	8102c16 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102c02:	4b06      	ldr	r3, [pc, #24]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102c04:	695b      	ldr	r3, [r3, #20]
 8102c06:	4a05      	ldr	r2, [pc, #20]	; (8102c1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102c08:	f023 0304 	bic.w	r3, r3, #4
 8102c0c:	6153      	str	r3, [r2, #20]
 8102c0e:	e002      	b.n	8102c16 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102c10:	bf00      	nop
 8102c12:	e000      	b.n	8102c16 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102c14:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102c16:	3710      	adds	r7, #16
 8102c18:	46bd      	mov	sp, r7
 8102c1a:	bd80      	pop	{r7, pc}
 8102c1c:	58024800 	.word	0x58024800
 8102c20:	e000ed00 	.word	0xe000ed00

08102c24 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102c24:	b580      	push	{r7, lr}
 8102c26:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102c28:	f7fe ffd8 	bl	8101bdc <HAL_GetCurrentCPUID>
 8102c2c:	4603      	mov	r3, r0
 8102c2e:	2b03      	cmp	r3, #3
 8102c30:	d101      	bne.n	8102c36 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102c32:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102c34:	e001      	b.n	8102c3a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102c36:	bf40      	sev
    __WFE ();
 8102c38:	bf20      	wfe
}
 8102c3a:	bf00      	nop
 8102c3c:	bd80      	pop	{r7, pc}
	...

08102c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102c40:	b480      	push	{r7}
 8102c42:	b089      	sub	sp, #36	; 0x24
 8102c44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102c46:	4bb3      	ldr	r3, [pc, #716]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c48:	691b      	ldr	r3, [r3, #16]
 8102c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102c4e:	2b18      	cmp	r3, #24
 8102c50:	f200 8155 	bhi.w	8102efe <HAL_RCC_GetSysClockFreq+0x2be>
 8102c54:	a201      	add	r2, pc, #4	; (adr r2, 8102c5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102c5a:	bf00      	nop
 8102c5c:	08102cc1 	.word	0x08102cc1
 8102c60:	08102eff 	.word	0x08102eff
 8102c64:	08102eff 	.word	0x08102eff
 8102c68:	08102eff 	.word	0x08102eff
 8102c6c:	08102eff 	.word	0x08102eff
 8102c70:	08102eff 	.word	0x08102eff
 8102c74:	08102eff 	.word	0x08102eff
 8102c78:	08102eff 	.word	0x08102eff
 8102c7c:	08102ce7 	.word	0x08102ce7
 8102c80:	08102eff 	.word	0x08102eff
 8102c84:	08102eff 	.word	0x08102eff
 8102c88:	08102eff 	.word	0x08102eff
 8102c8c:	08102eff 	.word	0x08102eff
 8102c90:	08102eff 	.word	0x08102eff
 8102c94:	08102eff 	.word	0x08102eff
 8102c98:	08102eff 	.word	0x08102eff
 8102c9c:	08102ced 	.word	0x08102ced
 8102ca0:	08102eff 	.word	0x08102eff
 8102ca4:	08102eff 	.word	0x08102eff
 8102ca8:	08102eff 	.word	0x08102eff
 8102cac:	08102eff 	.word	0x08102eff
 8102cb0:	08102eff 	.word	0x08102eff
 8102cb4:	08102eff 	.word	0x08102eff
 8102cb8:	08102eff 	.word	0x08102eff
 8102cbc:	08102cf3 	.word	0x08102cf3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102cc0:	4b94      	ldr	r3, [pc, #592]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	f003 0320 	and.w	r3, r3, #32
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d009      	beq.n	8102ce0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102ccc:	4b91      	ldr	r3, [pc, #580]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	08db      	lsrs	r3, r3, #3
 8102cd2:	f003 0303 	and.w	r3, r3, #3
 8102cd6:	4a90      	ldr	r2, [pc, #576]	; (8102f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8102cdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102cde:	e111      	b.n	8102f04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102ce0:	4b8d      	ldr	r3, [pc, #564]	; (8102f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102ce2:	61bb      	str	r3, [r7, #24]
    break;
 8102ce4:	e10e      	b.n	8102f04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102ce6:	4b8d      	ldr	r3, [pc, #564]	; (8102f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102ce8:	61bb      	str	r3, [r7, #24]
    break;
 8102cea:	e10b      	b.n	8102f04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102cec:	4b8c      	ldr	r3, [pc, #560]	; (8102f20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102cee:	61bb      	str	r3, [r7, #24]
    break;
 8102cf0:	e108      	b.n	8102f04 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102cf2:	4b88      	ldr	r3, [pc, #544]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102cf6:	f003 0303 	and.w	r3, r3, #3
 8102cfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102cfc:	4b85      	ldr	r3, [pc, #532]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d00:	091b      	lsrs	r3, r3, #4
 8102d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102d06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102d08:	4b82      	ldr	r3, [pc, #520]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d0c:	f003 0301 	and.w	r3, r3, #1
 8102d10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102d12:	4b80      	ldr	r3, [pc, #512]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102d16:	08db      	lsrs	r3, r3, #3
 8102d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102d1c:	68fa      	ldr	r2, [r7, #12]
 8102d1e:	fb02 f303 	mul.w	r3, r2, r3
 8102d22:	ee07 3a90 	vmov	s15, r3
 8102d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102d2e:	693b      	ldr	r3, [r7, #16]
 8102d30:	2b00      	cmp	r3, #0
 8102d32:	f000 80e1 	beq.w	8102ef8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102d36:	697b      	ldr	r3, [r7, #20]
 8102d38:	2b02      	cmp	r3, #2
 8102d3a:	f000 8083 	beq.w	8102e44 <HAL_RCC_GetSysClockFreq+0x204>
 8102d3e:	697b      	ldr	r3, [r7, #20]
 8102d40:	2b02      	cmp	r3, #2
 8102d42:	f200 80a1 	bhi.w	8102e88 <HAL_RCC_GetSysClockFreq+0x248>
 8102d46:	697b      	ldr	r3, [r7, #20]
 8102d48:	2b00      	cmp	r3, #0
 8102d4a:	d003      	beq.n	8102d54 <HAL_RCC_GetSysClockFreq+0x114>
 8102d4c:	697b      	ldr	r3, [r7, #20]
 8102d4e:	2b01      	cmp	r3, #1
 8102d50:	d056      	beq.n	8102e00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102d52:	e099      	b.n	8102e88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102d54:	4b6f      	ldr	r3, [pc, #444]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	f003 0320 	and.w	r3, r3, #32
 8102d5c:	2b00      	cmp	r3, #0
 8102d5e:	d02d      	beq.n	8102dbc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102d60:	4b6c      	ldr	r3, [pc, #432]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	08db      	lsrs	r3, r3, #3
 8102d66:	f003 0303 	and.w	r3, r3, #3
 8102d6a:	4a6b      	ldr	r2, [pc, #428]	; (8102f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8102d70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	ee07 3a90 	vmov	s15, r3
 8102d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d7c:	693b      	ldr	r3, [r7, #16]
 8102d7e:	ee07 3a90 	vmov	s15, r3
 8102d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d8a:	4b62      	ldr	r3, [pc, #392]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d92:	ee07 3a90 	vmov	s15, r3
 8102d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102db6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102dba:	e087      	b.n	8102ecc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102dbc:	693b      	ldr	r3, [r7, #16]
 8102dbe:	ee07 3a90 	vmov	s15, r3
 8102dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102f28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dce:	4b51      	ldr	r3, [pc, #324]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dd6:	ee07 3a90 	vmov	s15, r3
 8102dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8102de2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102dfe:	e065      	b.n	8102ecc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102e00:	693b      	ldr	r3, [r7, #16]
 8102e02:	ee07 3a90 	vmov	s15, r3
 8102e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e12:	4b40      	ldr	r3, [pc, #256]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e1a:	ee07 3a90 	vmov	s15, r3
 8102e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e42:	e043      	b.n	8102ecc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102e44:	693b      	ldr	r3, [r7, #16]
 8102e46:	ee07 3a90 	vmov	s15, r3
 8102e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102f30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e56:	4b2f      	ldr	r3, [pc, #188]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e5e:	ee07 3a90 	vmov	s15, r3
 8102e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e86:	e021      	b.n	8102ecc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102e88:	693b      	ldr	r3, [r7, #16]
 8102e8a:	ee07 3a90 	vmov	s15, r3
 8102e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e9a:	4b1e      	ldr	r3, [pc, #120]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ea2:	ee07 3a90 	vmov	s15, r3
 8102ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8102eae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102eca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102ecc:	4b11      	ldr	r3, [pc, #68]	; (8102f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102ed0:	0a5b      	lsrs	r3, r3, #9
 8102ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102ed6:	3301      	adds	r3, #1
 8102ed8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102eda:	683b      	ldr	r3, [r7, #0]
 8102edc:	ee07 3a90 	vmov	s15, r3
 8102ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8102ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ef0:	ee17 3a90 	vmov	r3, s15
 8102ef4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102ef6:	e005      	b.n	8102f04 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102ef8:	2300      	movs	r3, #0
 8102efa:	61bb      	str	r3, [r7, #24]
    break;
 8102efc:	e002      	b.n	8102f04 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102efe:	4b07      	ldr	r3, [pc, #28]	; (8102f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102f00:	61bb      	str	r3, [r7, #24]
    break;
 8102f02:	bf00      	nop
  }

  return sysclockfreq;
 8102f04:	69bb      	ldr	r3, [r7, #24]
}
 8102f06:	4618      	mov	r0, r3
 8102f08:	3724      	adds	r7, #36	; 0x24
 8102f0a:	46bd      	mov	sp, r7
 8102f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f10:	4770      	bx	lr
 8102f12:	bf00      	nop
 8102f14:	58024400 	.word	0x58024400
 8102f18:	03d09000 	.word	0x03d09000
 8102f1c:	003d0900 	.word	0x003d0900
 8102f20:	007a1200 	.word	0x007a1200
 8102f24:	46000000 	.word	0x46000000
 8102f28:	4c742400 	.word	0x4c742400
 8102f2c:	4a742400 	.word	0x4a742400
 8102f30:	4af42400 	.word	0x4af42400

08102f34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102f34:	b580      	push	{r7, lr}
 8102f36:	b086      	sub	sp, #24
 8102f38:	af00      	add	r7, sp, #0
 8102f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102f3c:	2300      	movs	r3, #0
 8102f3e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102f40:	2300      	movs	r3, #0
 8102f42:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102f4c:	2b00      	cmp	r3, #0
 8102f4e:	d03f      	beq.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f58:	d02a      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102f5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f5e:	d824      	bhi.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102f64:	d018      	beq.n	8102f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102f6a:	d81e      	bhi.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f6c:	2b00      	cmp	r3, #0
 8102f6e:	d003      	beq.n	8102f78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102f74:	d007      	beq.n	8102f86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102f76:	e018      	b.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f78:	4bab      	ldr	r3, [pc, #684]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f7c:	4aaa      	ldr	r2, [pc, #680]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f84:	e015      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	3304      	adds	r3, #4
 8102f8a:	2102      	movs	r1, #2
 8102f8c:	4618      	mov	r0, r3
 8102f8e:	f000 ff11 	bl	8103db4 <RCCEx_PLL2_Config>
 8102f92:	4603      	mov	r3, r0
 8102f94:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f96:	e00c      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	3324      	adds	r3, #36	; 0x24
 8102f9c:	2102      	movs	r1, #2
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	f000 ffba 	bl	8103f18 <RCCEx_PLL3_Config>
 8102fa4:	4603      	mov	r3, r0
 8102fa6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102fa8:	e003      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102faa:	2301      	movs	r3, #1
 8102fac:	75fb      	strb	r3, [r7, #23]
      break;
 8102fae:	e000      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fb2:	7dfb      	ldrb	r3, [r7, #23]
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d109      	bne.n	8102fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102fb8:	4b9b      	ldr	r3, [pc, #620]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102fc4:	4998      	ldr	r1, [pc, #608]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fc6:	4313      	orrs	r3, r2
 8102fc8:	650b      	str	r3, [r1, #80]	; 0x50
 8102fca:	e001      	b.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fcc:	7dfb      	ldrb	r3, [r7, #23]
 8102fce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d03d      	beq.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fe0:	2b04      	cmp	r3, #4
 8102fe2:	d826      	bhi.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102fe4:	a201      	add	r2, pc, #4	; (adr r2, 8102fec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102fea:	bf00      	nop
 8102fec:	08103001 	.word	0x08103001
 8102ff0:	0810300f 	.word	0x0810300f
 8102ff4:	08103021 	.word	0x08103021
 8102ff8:	08103039 	.word	0x08103039
 8102ffc:	08103039 	.word	0x08103039
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103000:	4b89      	ldr	r3, [pc, #548]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103004:	4a88      	ldr	r2, [pc, #544]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810300a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810300c:	e015      	b.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	3304      	adds	r3, #4
 8103012:	2100      	movs	r1, #0
 8103014:	4618      	mov	r0, r3
 8103016:	f000 fecd 	bl	8103db4 <RCCEx_PLL2_Config>
 810301a:	4603      	mov	r3, r0
 810301c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810301e:	e00c      	b.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	3324      	adds	r3, #36	; 0x24
 8103024:	2100      	movs	r1, #0
 8103026:	4618      	mov	r0, r3
 8103028:	f000 ff76 	bl	8103f18 <RCCEx_PLL3_Config>
 810302c:	4603      	mov	r3, r0
 810302e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103030:	e003      	b.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103032:	2301      	movs	r3, #1
 8103034:	75fb      	strb	r3, [r7, #23]
      break;
 8103036:	e000      	b.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103038:	bf00      	nop
    }

    if(ret == HAL_OK)
 810303a:	7dfb      	ldrb	r3, [r7, #23]
 810303c:	2b00      	cmp	r3, #0
 810303e:	d109      	bne.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103040:	4b79      	ldr	r3, [pc, #484]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103044:	f023 0207 	bic.w	r2, r3, #7
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810304c:	4976      	ldr	r1, [pc, #472]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810304e:	4313      	orrs	r3, r2
 8103050:	650b      	str	r3, [r1, #80]	; 0x50
 8103052:	e001      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103054:	7dfb      	ldrb	r3, [r7, #23]
 8103056:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103060:	2b00      	cmp	r3, #0
 8103062:	d042      	beq.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810306c:	d02b      	beq.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810306e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103072:	d825      	bhi.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103074:	2bc0      	cmp	r3, #192	; 0xc0
 8103076:	d028      	beq.n	81030ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103078:	2bc0      	cmp	r3, #192	; 0xc0
 810307a:	d821      	bhi.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810307c:	2b80      	cmp	r3, #128	; 0x80
 810307e:	d016      	beq.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103080:	2b80      	cmp	r3, #128	; 0x80
 8103082:	d81d      	bhi.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103084:	2b00      	cmp	r3, #0
 8103086:	d002      	beq.n	810308e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103088:	2b40      	cmp	r3, #64	; 0x40
 810308a:	d007      	beq.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x168>
 810308c:	e018      	b.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810308e:	4b66      	ldr	r3, [pc, #408]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103092:	4a65      	ldr	r2, [pc, #404]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103098:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810309a:	e017      	b.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	3304      	adds	r3, #4
 81030a0:	2100      	movs	r1, #0
 81030a2:	4618      	mov	r0, r3
 81030a4:	f000 fe86 	bl	8103db4 <RCCEx_PLL2_Config>
 81030a8:	4603      	mov	r3, r0
 81030aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030ac:	e00e      	b.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	3324      	adds	r3, #36	; 0x24
 81030b2:	2100      	movs	r1, #0
 81030b4:	4618      	mov	r0, r3
 81030b6:	f000 ff2f 	bl	8103f18 <RCCEx_PLL3_Config>
 81030ba:	4603      	mov	r3, r0
 81030bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030be:	e005      	b.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030c0:	2301      	movs	r3, #1
 81030c2:	75fb      	strb	r3, [r7, #23]
      break;
 81030c4:	e002      	b.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81030c6:	bf00      	nop
 81030c8:	e000      	b.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81030ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030cc:	7dfb      	ldrb	r3, [r7, #23]
 81030ce:	2b00      	cmp	r3, #0
 81030d0:	d109      	bne.n	81030e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81030d2:	4b55      	ldr	r3, [pc, #340]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030de:	4952      	ldr	r1, [pc, #328]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030e0:	4313      	orrs	r3, r2
 81030e2:	650b      	str	r3, [r1, #80]	; 0x50
 81030e4:	e001      	b.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e6:	7dfb      	ldrb	r3, [r7, #23]
 81030e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81030f2:	2b00      	cmp	r3, #0
 81030f4:	d049      	beq.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81030fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103100:	d030      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103106:	d82a      	bhi.n	810315e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103108:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810310c:	d02c      	beq.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810310e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103112:	d824      	bhi.n	810315e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103118:	d018      	beq.n	810314c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810311a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810311e:	d81e      	bhi.n	810315e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103120:	2b00      	cmp	r3, #0
 8103122:	d003      	beq.n	810312c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103128:	d007      	beq.n	810313a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810312a:	e018      	b.n	810315e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810312c:	4b3e      	ldr	r3, [pc, #248]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103130:	4a3d      	ldr	r2, [pc, #244]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103138:	e017      	b.n	810316a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	3304      	adds	r3, #4
 810313e:	2100      	movs	r1, #0
 8103140:	4618      	mov	r0, r3
 8103142:	f000 fe37 	bl	8103db4 <RCCEx_PLL2_Config>
 8103146:	4603      	mov	r3, r0
 8103148:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810314a:	e00e      	b.n	810316a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	3324      	adds	r3, #36	; 0x24
 8103150:	2100      	movs	r1, #0
 8103152:	4618      	mov	r0, r3
 8103154:	f000 fee0 	bl	8103f18 <RCCEx_PLL3_Config>
 8103158:	4603      	mov	r3, r0
 810315a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810315c:	e005      	b.n	810316a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810315e:	2301      	movs	r3, #1
 8103160:	75fb      	strb	r3, [r7, #23]
      break;
 8103162:	e002      	b.n	810316a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103164:	bf00      	nop
 8103166:	e000      	b.n	810316a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103168:	bf00      	nop
    }

    if(ret == HAL_OK)
 810316a:	7dfb      	ldrb	r3, [r7, #23]
 810316c:	2b00      	cmp	r3, #0
 810316e:	d10a      	bne.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103170:	4b2d      	ldr	r3, [pc, #180]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103174:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810317e:	492a      	ldr	r1, [pc, #168]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103180:	4313      	orrs	r3, r2
 8103182:	658b      	str	r3, [r1, #88]	; 0x58
 8103184:	e001      	b.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103186:	7dfb      	ldrb	r3, [r7, #23]
 8103188:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103192:	2b00      	cmp	r3, #0
 8103194:	d04c      	beq.n	8103230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810319c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81031a0:	d030      	beq.n	8103204 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81031a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81031a6:	d82a      	bhi.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81031ac:	d02c      	beq.n	8103208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81031ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81031b2:	d824      	bhi.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81031b8:	d018      	beq.n	81031ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81031ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81031be:	d81e      	bhi.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031c0:	2b00      	cmp	r3, #0
 81031c2:	d003      	beq.n	81031cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 81031c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81031c8:	d007      	beq.n	81031da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81031ca:	e018      	b.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031cc:	4b16      	ldr	r3, [pc, #88]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031d0:	4a15      	ldr	r2, [pc, #84]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81031d8:	e017      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	3304      	adds	r3, #4
 81031de:	2100      	movs	r1, #0
 81031e0:	4618      	mov	r0, r3
 81031e2:	f000 fde7 	bl	8103db4 <RCCEx_PLL2_Config>
 81031e6:	4603      	mov	r3, r0
 81031e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81031ea:	e00e      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	3324      	adds	r3, #36	; 0x24
 81031f0:	2100      	movs	r1, #0
 81031f2:	4618      	mov	r0, r3
 81031f4:	f000 fe90 	bl	8103f18 <RCCEx_PLL3_Config>
 81031f8:	4603      	mov	r3, r0
 81031fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81031fc:	e005      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81031fe:	2301      	movs	r3, #1
 8103200:	75fb      	strb	r3, [r7, #23]
      break;
 8103202:	e002      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103204:	bf00      	nop
 8103206:	e000      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103208:	bf00      	nop
    }

    if(ret == HAL_OK)
 810320a:	7dfb      	ldrb	r3, [r7, #23]
 810320c:	2b00      	cmp	r3, #0
 810320e:	d10d      	bne.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103210:	4b05      	ldr	r3, [pc, #20]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103214:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810321e:	4902      	ldr	r1, [pc, #8]	; (8103228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103220:	4313      	orrs	r3, r2
 8103222:	658b      	str	r3, [r1, #88]	; 0x58
 8103224:	e004      	b.n	8103230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8103226:	bf00      	nop
 8103228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810322c:	7dfb      	ldrb	r3, [r7, #23]
 810322e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103238:	2b00      	cmp	r3, #0
 810323a:	d032      	beq.n	81032a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103240:	2b30      	cmp	r3, #48	; 0x30
 8103242:	d01c      	beq.n	810327e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103244:	2b30      	cmp	r3, #48	; 0x30
 8103246:	d817      	bhi.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103248:	2b20      	cmp	r3, #32
 810324a:	d00c      	beq.n	8103266 <HAL_RCCEx_PeriphCLKConfig+0x332>
 810324c:	2b20      	cmp	r3, #32
 810324e:	d813      	bhi.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103250:	2b00      	cmp	r3, #0
 8103252:	d016      	beq.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8103254:	2b10      	cmp	r3, #16
 8103256:	d10f      	bne.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103258:	4baf      	ldr	r3, [pc, #700]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810325c:	4aae      	ldr	r2, [pc, #696]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810325e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103264:	e00e      	b.n	8103284 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	3304      	adds	r3, #4
 810326a:	2102      	movs	r1, #2
 810326c:	4618      	mov	r0, r3
 810326e:	f000 fda1 	bl	8103db4 <RCCEx_PLL2_Config>
 8103272:	4603      	mov	r3, r0
 8103274:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103276:	e005      	b.n	8103284 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103278:	2301      	movs	r3, #1
 810327a:	75fb      	strb	r3, [r7, #23]
      break;
 810327c:	e002      	b.n	8103284 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810327e:	bf00      	nop
 8103280:	e000      	b.n	8103284 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103284:	7dfb      	ldrb	r3, [r7, #23]
 8103286:	2b00      	cmp	r3, #0
 8103288:	d109      	bne.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810328a:	4ba3      	ldr	r3, [pc, #652]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810328e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103296:	49a0      	ldr	r1, [pc, #640]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103298:	4313      	orrs	r3, r2
 810329a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810329c:	e001      	b.n	81032a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810329e:	7dfb      	ldrb	r3, [r7, #23]
 81032a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81032aa:	2b00      	cmp	r3, #0
 81032ac:	d047      	beq.n	810333e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032b6:	d030      	beq.n	810331a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032bc:	d82a      	bhi.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81032c2:	d02c      	beq.n	810331e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81032c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81032c8:	d824      	bhi.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81032ce:	d018      	beq.n	8103302 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81032d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81032d4:	d81e      	bhi.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	d003      	beq.n	81032e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81032de:	d007      	beq.n	81032f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81032e0:	e018      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032e2:	4b8d      	ldr	r3, [pc, #564]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032e6:	4a8c      	ldr	r2, [pc, #560]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81032ee:	e017      	b.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	3304      	adds	r3, #4
 81032f4:	2100      	movs	r1, #0
 81032f6:	4618      	mov	r0, r3
 81032f8:	f000 fd5c 	bl	8103db4 <RCCEx_PLL2_Config>
 81032fc:	4603      	mov	r3, r0
 81032fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103300:	e00e      	b.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	3324      	adds	r3, #36	; 0x24
 8103306:	2100      	movs	r1, #0
 8103308:	4618      	mov	r0, r3
 810330a:	f000 fe05 	bl	8103f18 <RCCEx_PLL3_Config>
 810330e:	4603      	mov	r3, r0
 8103310:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103312:	e005      	b.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103314:	2301      	movs	r3, #1
 8103316:	75fb      	strb	r3, [r7, #23]
      break;
 8103318:	e002      	b.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810331a:	bf00      	nop
 810331c:	e000      	b.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810331e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103320:	7dfb      	ldrb	r3, [r7, #23]
 8103322:	2b00      	cmp	r3, #0
 8103324:	d109      	bne.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103326:	4b7c      	ldr	r3, [pc, #496]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810332a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103332:	4979      	ldr	r1, [pc, #484]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103334:	4313      	orrs	r3, r2
 8103336:	650b      	str	r3, [r1, #80]	; 0x50
 8103338:	e001      	b.n	810333e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810333a:	7dfb      	ldrb	r3, [r7, #23]
 810333c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103346:	2b00      	cmp	r3, #0
 8103348:	d049      	beq.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810334e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103352:	d02e      	beq.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8103354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103358:	d828      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 810335a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810335e:	d02a      	beq.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103364:	d822      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810336a:	d026      	beq.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x486>
 810336c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103370:	d81c      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103376:	d010      	beq.n	810339a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810337c:	d816      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 810337e:	2b00      	cmp	r3, #0
 8103380:	d01d      	beq.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8103382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103386:	d111      	bne.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	3304      	adds	r3, #4
 810338c:	2101      	movs	r1, #1
 810338e:	4618      	mov	r0, r3
 8103390:	f000 fd10 	bl	8103db4 <RCCEx_PLL2_Config>
 8103394:	4603      	mov	r3, r0
 8103396:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103398:	e012      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	3324      	adds	r3, #36	; 0x24
 810339e:	2101      	movs	r1, #1
 81033a0:	4618      	mov	r0, r3
 81033a2:	f000 fdb9 	bl	8103f18 <RCCEx_PLL3_Config>
 81033a6:	4603      	mov	r3, r0
 81033a8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81033aa:	e009      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033ac:	2301      	movs	r3, #1
 81033ae:	75fb      	strb	r3, [r7, #23]
      break;
 81033b0:	e006      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033b2:	bf00      	nop
 81033b4:	e004      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033b6:	bf00      	nop
 81033b8:	e002      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033ba:	bf00      	nop
 81033bc:	e000      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033c0:	7dfb      	ldrb	r3, [r7, #23]
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d109      	bne.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81033c6:	4b54      	ldr	r3, [pc, #336]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81033d2:	4951      	ldr	r1, [pc, #324]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033d4:	4313      	orrs	r3, r2
 81033d6:	650b      	str	r3, [r1, #80]	; 0x50
 81033d8:	e001      	b.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033da:	7dfb      	ldrb	r3, [r7, #23]
 81033dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	d04b      	beq.n	8103482 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81033f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81033f4:	d02e      	beq.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x520>
 81033f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81033fa:	d828      	bhi.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103400:	d02a      	beq.n	8103458 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103406:	d822      	bhi.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103408:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810340c:	d026      	beq.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x528>
 810340e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103412:	d81c      	bhi.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103418:	d010      	beq.n	810343c <HAL_RCCEx_PeriphCLKConfig+0x508>
 810341a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810341e:	d816      	bhi.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103420:	2b00      	cmp	r3, #0
 8103422:	d01d      	beq.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103428:	d111      	bne.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	3304      	adds	r3, #4
 810342e:	2101      	movs	r1, #1
 8103430:	4618      	mov	r0, r3
 8103432:	f000 fcbf 	bl	8103db4 <RCCEx_PLL2_Config>
 8103436:	4603      	mov	r3, r0
 8103438:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810343a:	e012      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	3324      	adds	r3, #36	; 0x24
 8103440:	2101      	movs	r1, #1
 8103442:	4618      	mov	r0, r3
 8103444:	f000 fd68 	bl	8103f18 <RCCEx_PLL3_Config>
 8103448:	4603      	mov	r3, r0
 810344a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810344c:	e009      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810344e:	2301      	movs	r3, #1
 8103450:	75fb      	strb	r3, [r7, #23]
      break;
 8103452:	e006      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103454:	bf00      	nop
 8103456:	e004      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103458:	bf00      	nop
 810345a:	e002      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810345c:	bf00      	nop
 810345e:	e000      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103462:	7dfb      	ldrb	r3, [r7, #23]
 8103464:	2b00      	cmp	r3, #0
 8103466:	d10a      	bne.n	810347e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103468:	4b2b      	ldr	r3, [pc, #172]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810346c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103476:	4928      	ldr	r1, [pc, #160]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103478:	4313      	orrs	r3, r2
 810347a:	658b      	str	r3, [r1, #88]	; 0x58
 810347c:	e001      	b.n	8103482 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810347e:	7dfb      	ldrb	r3, [r7, #23]
 8103480:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810348a:	2b00      	cmp	r3, #0
 810348c:	d02f      	beq.n	81034ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103496:	d00e      	beq.n	81034b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810349c:	d814      	bhi.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d015      	beq.n	81034ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81034a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81034a6:	d10f      	bne.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034a8:	4b1b      	ldr	r3, [pc, #108]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034ac:	4a1a      	ldr	r2, [pc, #104]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81034b4:	e00c      	b.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	3304      	adds	r3, #4
 81034ba:	2101      	movs	r1, #1
 81034bc:	4618      	mov	r0, r3
 81034be:	f000 fc79 	bl	8103db4 <RCCEx_PLL2_Config>
 81034c2:	4603      	mov	r3, r0
 81034c4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81034c6:	e003      	b.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034c8:	2301      	movs	r3, #1
 81034ca:	75fb      	strb	r3, [r7, #23]
      break;
 81034cc:	e000      	b.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81034ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034d0:	7dfb      	ldrb	r3, [r7, #23]
 81034d2:	2b00      	cmp	r3, #0
 81034d4:	d109      	bne.n	81034ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81034d6:	4b10      	ldr	r3, [pc, #64]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034e2:	490d      	ldr	r1, [pc, #52]	; (8103518 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034e4:	4313      	orrs	r3, r2
 81034e6:	650b      	str	r3, [r1, #80]	; 0x50
 81034e8:	e001      	b.n	81034ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034ea:	7dfb      	ldrb	r3, [r7, #23]
 81034ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81034f6:	2b00      	cmp	r3, #0
 81034f8:	d033      	beq.n	8103562 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034fe:	2b03      	cmp	r3, #3
 8103500:	d81c      	bhi.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103502:	a201      	add	r2, pc, #4	; (adr r2, 8103508 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103508:	08103543 	.word	0x08103543
 810350c:	0810351d 	.word	0x0810351d
 8103510:	0810352b 	.word	0x0810352b
 8103514:	08103543 	.word	0x08103543
 8103518:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810351c:	4bb9      	ldr	r3, [pc, #740]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103520:	4ab8      	ldr	r2, [pc, #736]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103528:	e00c      	b.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	3304      	adds	r3, #4
 810352e:	2102      	movs	r1, #2
 8103530:	4618      	mov	r0, r3
 8103532:	f000 fc3f 	bl	8103db4 <RCCEx_PLL2_Config>
 8103536:	4603      	mov	r3, r0
 8103538:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810353a:	e003      	b.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810353c:	2301      	movs	r3, #1
 810353e:	75fb      	strb	r3, [r7, #23]
      break;
 8103540:	e000      	b.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103544:	7dfb      	ldrb	r3, [r7, #23]
 8103546:	2b00      	cmp	r3, #0
 8103548:	d109      	bne.n	810355e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810354a:	4bae      	ldr	r3, [pc, #696]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810354e:	f023 0203 	bic.w	r2, r3, #3
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103556:	49ab      	ldr	r1, [pc, #684]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103558:	4313      	orrs	r3, r2
 810355a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810355c:	e001      	b.n	8103562 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810355e:	7dfb      	ldrb	r3, [r7, #23]
 8103560:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810356a:	2b00      	cmp	r3, #0
 810356c:	f000 8088 	beq.w	8103680 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103570:	4ba5      	ldr	r3, [pc, #660]	; (8103808 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	4aa4      	ldr	r2, [pc, #656]	; (8103808 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810357a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810357c:	f7fe f9c2 	bl	8101904 <HAL_GetTick>
 8103580:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103582:	e009      	b.n	8103598 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103584:	f7fe f9be 	bl	8101904 <HAL_GetTick>
 8103588:	4602      	mov	r2, r0
 810358a:	693b      	ldr	r3, [r7, #16]
 810358c:	1ad3      	subs	r3, r2, r3
 810358e:	2b64      	cmp	r3, #100	; 0x64
 8103590:	d902      	bls.n	8103598 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103592:	2303      	movs	r3, #3
 8103594:	75fb      	strb	r3, [r7, #23]
        break;
 8103596:	e005      	b.n	81035a4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103598:	4b9b      	ldr	r3, [pc, #620]	; (8103808 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035a0:	2b00      	cmp	r3, #0
 81035a2:	d0ef      	beq.n	8103584 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81035a4:	7dfb      	ldrb	r3, [r7, #23]
 81035a6:	2b00      	cmp	r3, #0
 81035a8:	d168      	bne.n	810367c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81035aa:	4b96      	ldr	r3, [pc, #600]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035b4:	4053      	eors	r3, r2
 81035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81035ba:	2b00      	cmp	r3, #0
 81035bc:	d013      	beq.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81035be:	4b91      	ldr	r3, [pc, #580]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81035c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81035c8:	4b8e      	ldr	r3, [pc, #568]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035cc:	4a8d      	ldr	r2, [pc, #564]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81035d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81035d4:	4b8b      	ldr	r3, [pc, #556]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035d8:	4a8a      	ldr	r2, [pc, #552]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81035de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81035e0:	4a88      	ldr	r2, [pc, #544]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035e2:	68fb      	ldr	r3, [r7, #12]
 81035e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81035f0:	d115      	bne.n	810361e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81035f2:	f7fe f987 	bl	8101904 <HAL_GetTick>
 81035f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81035f8:	e00b      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81035fa:	f7fe f983 	bl	8101904 <HAL_GetTick>
 81035fe:	4602      	mov	r2, r0
 8103600:	693b      	ldr	r3, [r7, #16]
 8103602:	1ad3      	subs	r3, r2, r3
 8103604:	f241 3288 	movw	r2, #5000	; 0x1388
 8103608:	4293      	cmp	r3, r2
 810360a:	d902      	bls.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810360c:	2303      	movs	r3, #3
 810360e:	75fb      	strb	r3, [r7, #23]
            break;
 8103610:	e005      	b.n	810361e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103612:	4b7c      	ldr	r3, [pc, #496]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103616:	f003 0302 	and.w	r3, r3, #2
 810361a:	2b00      	cmp	r3, #0
 810361c:	d0ed      	beq.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810361e:	7dfb      	ldrb	r3, [r7, #23]
 8103620:	2b00      	cmp	r3, #0
 8103622:	d128      	bne.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810362e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103632:	d10f      	bne.n	8103654 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103634:	4b73      	ldr	r3, [pc, #460]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103636:	691b      	ldr	r3, [r3, #16]
 8103638:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103642:	091b      	lsrs	r3, r3, #4
 8103644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103648:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810364c:	496d      	ldr	r1, [pc, #436]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810364e:	4313      	orrs	r3, r2
 8103650:	610b      	str	r3, [r1, #16]
 8103652:	e005      	b.n	8103660 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103654:	4b6b      	ldr	r3, [pc, #428]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103656:	691b      	ldr	r3, [r3, #16]
 8103658:	4a6a      	ldr	r2, [pc, #424]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810365a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810365e:	6113      	str	r3, [r2, #16]
 8103660:	4b68      	ldr	r3, [pc, #416]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810366e:	4965      	ldr	r1, [pc, #404]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103670:	4313      	orrs	r3, r2
 8103672:	670b      	str	r3, [r1, #112]	; 0x70
 8103674:	e004      	b.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103676:	7dfb      	ldrb	r3, [r7, #23]
 8103678:	75bb      	strb	r3, [r7, #22]
 810367a:	e001      	b.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810367c:	7dfb      	ldrb	r3, [r7, #23]
 810367e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	f003 0301 	and.w	r3, r3, #1
 8103688:	2b00      	cmp	r3, #0
 810368a:	d07e      	beq.n	810378a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103690:	2b28      	cmp	r3, #40	; 0x28
 8103692:	d867      	bhi.n	8103764 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103694:	a201      	add	r2, pc, #4	; (adr r2, 810369c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810369a:	bf00      	nop
 810369c:	0810376b 	.word	0x0810376b
 81036a0:	08103765 	.word	0x08103765
 81036a4:	08103765 	.word	0x08103765
 81036a8:	08103765 	.word	0x08103765
 81036ac:	08103765 	.word	0x08103765
 81036b0:	08103765 	.word	0x08103765
 81036b4:	08103765 	.word	0x08103765
 81036b8:	08103765 	.word	0x08103765
 81036bc:	08103741 	.word	0x08103741
 81036c0:	08103765 	.word	0x08103765
 81036c4:	08103765 	.word	0x08103765
 81036c8:	08103765 	.word	0x08103765
 81036cc:	08103765 	.word	0x08103765
 81036d0:	08103765 	.word	0x08103765
 81036d4:	08103765 	.word	0x08103765
 81036d8:	08103765 	.word	0x08103765
 81036dc:	08103753 	.word	0x08103753
 81036e0:	08103765 	.word	0x08103765
 81036e4:	08103765 	.word	0x08103765
 81036e8:	08103765 	.word	0x08103765
 81036ec:	08103765 	.word	0x08103765
 81036f0:	08103765 	.word	0x08103765
 81036f4:	08103765 	.word	0x08103765
 81036f8:	08103765 	.word	0x08103765
 81036fc:	0810376b 	.word	0x0810376b
 8103700:	08103765 	.word	0x08103765
 8103704:	08103765 	.word	0x08103765
 8103708:	08103765 	.word	0x08103765
 810370c:	08103765 	.word	0x08103765
 8103710:	08103765 	.word	0x08103765
 8103714:	08103765 	.word	0x08103765
 8103718:	08103765 	.word	0x08103765
 810371c:	0810376b 	.word	0x0810376b
 8103720:	08103765 	.word	0x08103765
 8103724:	08103765 	.word	0x08103765
 8103728:	08103765 	.word	0x08103765
 810372c:	08103765 	.word	0x08103765
 8103730:	08103765 	.word	0x08103765
 8103734:	08103765 	.word	0x08103765
 8103738:	08103765 	.word	0x08103765
 810373c:	0810376b 	.word	0x0810376b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	3304      	adds	r3, #4
 8103744:	2101      	movs	r1, #1
 8103746:	4618      	mov	r0, r3
 8103748:	f000 fb34 	bl	8103db4 <RCCEx_PLL2_Config>
 810374c:	4603      	mov	r3, r0
 810374e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103750:	e00c      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	3324      	adds	r3, #36	; 0x24
 8103756:	2101      	movs	r1, #1
 8103758:	4618      	mov	r0, r3
 810375a:	f000 fbdd 	bl	8103f18 <RCCEx_PLL3_Config>
 810375e:	4603      	mov	r3, r0
 8103760:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103762:	e003      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103764:	2301      	movs	r3, #1
 8103766:	75fb      	strb	r3, [r7, #23]
      break;
 8103768:	e000      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810376c:	7dfb      	ldrb	r3, [r7, #23]
 810376e:	2b00      	cmp	r3, #0
 8103770:	d109      	bne.n	8103786 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103772:	4b24      	ldr	r3, [pc, #144]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103776:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810377e:	4921      	ldr	r1, [pc, #132]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103780:	4313      	orrs	r3, r2
 8103782:	654b      	str	r3, [r1, #84]	; 0x54
 8103784:	e001      	b.n	810378a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103786:	7dfb      	ldrb	r3, [r7, #23]
 8103788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	f003 0302 	and.w	r3, r3, #2
 8103792:	2b00      	cmp	r3, #0
 8103794:	d03c      	beq.n	8103810 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810379a:	2b05      	cmp	r3, #5
 810379c:	d820      	bhi.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810379e:	a201      	add	r2, pc, #4	; (adr r2, 81037a4 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037a4:	081037e7 	.word	0x081037e7
 81037a8:	081037bd 	.word	0x081037bd
 81037ac:	081037cf 	.word	0x081037cf
 81037b0:	081037e7 	.word	0x081037e7
 81037b4:	081037e7 	.word	0x081037e7
 81037b8:	081037e7 	.word	0x081037e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	3304      	adds	r3, #4
 81037c0:	2101      	movs	r1, #1
 81037c2:	4618      	mov	r0, r3
 81037c4:	f000 faf6 	bl	8103db4 <RCCEx_PLL2_Config>
 81037c8:	4603      	mov	r3, r0
 81037ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81037cc:	e00c      	b.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	3324      	adds	r3, #36	; 0x24
 81037d2:	2101      	movs	r1, #1
 81037d4:	4618      	mov	r0, r3
 81037d6:	f000 fb9f 	bl	8103f18 <RCCEx_PLL3_Config>
 81037da:	4603      	mov	r3, r0
 81037dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81037de:	e003      	b.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037e0:	2301      	movs	r3, #1
 81037e2:	75fb      	strb	r3, [r7, #23]
      break;
 81037e4:	e000      	b.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81037e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037e8:	7dfb      	ldrb	r3, [r7, #23]
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d10e      	bne.n	810380c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81037ee:	4b05      	ldr	r3, [pc, #20]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037f2:	f023 0207 	bic.w	r2, r3, #7
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037fa:	4902      	ldr	r1, [pc, #8]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81037fc:	4313      	orrs	r3, r2
 81037fe:	654b      	str	r3, [r1, #84]	; 0x54
 8103800:	e006      	b.n	8103810 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103802:	bf00      	nop
 8103804:	58024400 	.word	0x58024400
 8103808:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810380c:	7dfb      	ldrb	r3, [r7, #23]
 810380e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	f003 0304 	and.w	r3, r3, #4
 8103818:	2b00      	cmp	r3, #0
 810381a:	d039      	beq.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103822:	2b05      	cmp	r3, #5
 8103824:	d820      	bhi.n	8103868 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103826:	a201      	add	r2, pc, #4	; (adr r2, 810382c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810382c:	0810386f 	.word	0x0810386f
 8103830:	08103845 	.word	0x08103845
 8103834:	08103857 	.word	0x08103857
 8103838:	0810386f 	.word	0x0810386f
 810383c:	0810386f 	.word	0x0810386f
 8103840:	0810386f 	.word	0x0810386f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	3304      	adds	r3, #4
 8103848:	2101      	movs	r1, #1
 810384a:	4618      	mov	r0, r3
 810384c:	f000 fab2 	bl	8103db4 <RCCEx_PLL2_Config>
 8103850:	4603      	mov	r3, r0
 8103852:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103854:	e00c      	b.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	3324      	adds	r3, #36	; 0x24
 810385a:	2101      	movs	r1, #1
 810385c:	4618      	mov	r0, r3
 810385e:	f000 fb5b 	bl	8103f18 <RCCEx_PLL3_Config>
 8103862:	4603      	mov	r3, r0
 8103864:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103866:	e003      	b.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103868:	2301      	movs	r3, #1
 810386a:	75fb      	strb	r3, [r7, #23]
      break;
 810386c:	e000      	b.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810386e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103870:	7dfb      	ldrb	r3, [r7, #23]
 8103872:	2b00      	cmp	r3, #0
 8103874:	d10a      	bne.n	810388c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103876:	4bb7      	ldr	r3, [pc, #732]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810387a:	f023 0207 	bic.w	r2, r3, #7
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103884:	49b3      	ldr	r1, [pc, #716]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103886:	4313      	orrs	r3, r2
 8103888:	658b      	str	r3, [r1, #88]	; 0x58
 810388a:	e001      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810388c:	7dfb      	ldrb	r3, [r7, #23]
 810388e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	f003 0320 	and.w	r3, r3, #32
 8103898:	2b00      	cmp	r3, #0
 810389a:	d04b      	beq.n	8103934 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81038a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81038a6:	d02e      	beq.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 81038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81038ac:	d828      	bhi.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81038b2:	d02a      	beq.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81038b8:	d822      	bhi.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038be:	d026      	beq.n	810390e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81038c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038c4:	d81c      	bhi.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038ca:	d010      	beq.n	81038ee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 81038cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038d0:	d816      	bhi.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d01d      	beq.n	8103912 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81038d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81038da:	d111      	bne.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	3304      	adds	r3, #4
 81038e0:	2100      	movs	r1, #0
 81038e2:	4618      	mov	r0, r3
 81038e4:	f000 fa66 	bl	8103db4 <RCCEx_PLL2_Config>
 81038e8:	4603      	mov	r3, r0
 81038ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81038ec:	e012      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	3324      	adds	r3, #36	; 0x24
 81038f2:	2102      	movs	r1, #2
 81038f4:	4618      	mov	r0, r3
 81038f6:	f000 fb0f 	bl	8103f18 <RCCEx_PLL3_Config>
 81038fa:	4603      	mov	r3, r0
 81038fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81038fe:	e009      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103900:	2301      	movs	r3, #1
 8103902:	75fb      	strb	r3, [r7, #23]
      break;
 8103904:	e006      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103906:	bf00      	nop
 8103908:	e004      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810390a:	bf00      	nop
 810390c:	e002      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810390e:	bf00      	nop
 8103910:	e000      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103914:	7dfb      	ldrb	r3, [r7, #23]
 8103916:	2b00      	cmp	r3, #0
 8103918:	d10a      	bne.n	8103930 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810391a:	4b8e      	ldr	r3, [pc, #568]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810391e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103928:	498a      	ldr	r1, [pc, #552]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810392a:	4313      	orrs	r3, r2
 810392c:	654b      	str	r3, [r1, #84]	; 0x54
 810392e:	e001      	b.n	8103934 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103930:	7dfb      	ldrb	r3, [r7, #23]
 8103932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810393c:	2b00      	cmp	r3, #0
 810393e:	d04b      	beq.n	81039d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103946:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810394a:	d02e      	beq.n	81039aa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810394c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103950:	d828      	bhi.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103956:	d02a      	beq.n	81039ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810395c:	d822      	bhi.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810395e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103962:	d026      	beq.n	81039b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103968:	d81c      	bhi.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810396a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810396e:	d010      	beq.n	8103992 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103974:	d816      	bhi.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103976:	2b00      	cmp	r3, #0
 8103978:	d01d      	beq.n	81039b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810397e:	d111      	bne.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	3304      	adds	r3, #4
 8103984:	2100      	movs	r1, #0
 8103986:	4618      	mov	r0, r3
 8103988:	f000 fa14 	bl	8103db4 <RCCEx_PLL2_Config>
 810398c:	4603      	mov	r3, r0
 810398e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103990:	e012      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	3324      	adds	r3, #36	; 0x24
 8103996:	2102      	movs	r1, #2
 8103998:	4618      	mov	r0, r3
 810399a:	f000 fabd 	bl	8103f18 <RCCEx_PLL3_Config>
 810399e:	4603      	mov	r3, r0
 81039a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81039a2:	e009      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039a4:	2301      	movs	r3, #1
 81039a6:	75fb      	strb	r3, [r7, #23]
      break;
 81039a8:	e006      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039aa:	bf00      	nop
 81039ac:	e004      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039ae:	bf00      	nop
 81039b0:	e002      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039b2:	bf00      	nop
 81039b4:	e000      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039b8:	7dfb      	ldrb	r3, [r7, #23]
 81039ba:	2b00      	cmp	r3, #0
 81039bc:	d10a      	bne.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81039be:	4b65      	ldr	r3, [pc, #404]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81039cc:	4961      	ldr	r1, [pc, #388]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039ce:	4313      	orrs	r3, r2
 81039d0:	658b      	str	r3, [r1, #88]	; 0x58
 81039d2:	e001      	b.n	81039d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039d4:	7dfb      	ldrb	r3, [r7, #23]
 81039d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81039e0:	2b00      	cmp	r3, #0
 81039e2:	d04b      	beq.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81039ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81039ee:	d02e      	beq.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81039f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81039f4:	d828      	bhi.n	8103a48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81039f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81039fa:	d02a      	beq.n	8103a52 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103a00:	d822      	bhi.n	8103a48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103a06:	d026      	beq.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103a08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103a0c:	d81c      	bhi.n	8103a48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a12:	d010      	beq.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a18:	d816      	bhi.n	8103a48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a1a:	2b00      	cmp	r3, #0
 8103a1c:	d01d      	beq.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103a22:	d111      	bne.n	8103a48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	3304      	adds	r3, #4
 8103a28:	2100      	movs	r1, #0
 8103a2a:	4618      	mov	r0, r3
 8103a2c:	f000 f9c2 	bl	8103db4 <RCCEx_PLL2_Config>
 8103a30:	4603      	mov	r3, r0
 8103a32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103a34:	e012      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	3324      	adds	r3, #36	; 0x24
 8103a3a:	2102      	movs	r1, #2
 8103a3c:	4618      	mov	r0, r3
 8103a3e:	f000 fa6b 	bl	8103f18 <RCCEx_PLL3_Config>
 8103a42:	4603      	mov	r3, r0
 8103a44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103a46:	e009      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a48:	2301      	movs	r3, #1
 8103a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8103a4c:	e006      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a4e:	bf00      	nop
 8103a50:	e004      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a52:	bf00      	nop
 8103a54:	e002      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a56:	bf00      	nop
 8103a58:	e000      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a5c:	7dfb      	ldrb	r3, [r7, #23]
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d10a      	bne.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103a62:	4b3c      	ldr	r3, [pc, #240]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a70:	4938      	ldr	r1, [pc, #224]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a72:	4313      	orrs	r3, r2
 8103a74:	658b      	str	r3, [r1, #88]	; 0x58
 8103a76:	e001      	b.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a78:	7dfb      	ldrb	r3, [r7, #23]
 8103a7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	f003 0308 	and.w	r3, r3, #8
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	d01a      	beq.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103a92:	d10a      	bne.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	3324      	adds	r3, #36	; 0x24
 8103a98:	2102      	movs	r1, #2
 8103a9a:	4618      	mov	r0, r3
 8103a9c:	f000 fa3c 	bl	8103f18 <RCCEx_PLL3_Config>
 8103aa0:	4603      	mov	r3, r0
 8103aa2:	2b00      	cmp	r3, #0
 8103aa4:	d001      	beq.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103aa6:	2301      	movs	r3, #1
 8103aa8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103aaa:	4b2a      	ldr	r3, [pc, #168]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103aae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ab8:	4926      	ldr	r1, [pc, #152]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103aba:	4313      	orrs	r3, r2
 8103abc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	f003 0310 	and.w	r3, r3, #16
 8103ac6:	2b00      	cmp	r3, #0
 8103ac8:	d01a      	beq.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103ad4:	d10a      	bne.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	3324      	adds	r3, #36	; 0x24
 8103ada:	2102      	movs	r1, #2
 8103adc:	4618      	mov	r0, r3
 8103ade:	f000 fa1b 	bl	8103f18 <RCCEx_PLL3_Config>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d001      	beq.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103ae8:	2301      	movs	r3, #1
 8103aea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103aec:	4b19      	ldr	r3, [pc, #100]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103afa:	4916      	ldr	r1, [pc, #88]	; (8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103afc:	4313      	orrs	r3, r2
 8103afe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d036      	beq.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b16:	d01f      	beq.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b1c:	d817      	bhi.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d003      	beq.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b26:	d009      	beq.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103b28:	e011      	b.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	3304      	adds	r3, #4
 8103b2e:	2100      	movs	r1, #0
 8103b30:	4618      	mov	r0, r3
 8103b32:	f000 f93f 	bl	8103db4 <RCCEx_PLL2_Config>
 8103b36:	4603      	mov	r3, r0
 8103b38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103b3a:	e00e      	b.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	3324      	adds	r3, #36	; 0x24
 8103b40:	2102      	movs	r1, #2
 8103b42:	4618      	mov	r0, r3
 8103b44:	f000 f9e8 	bl	8103f18 <RCCEx_PLL3_Config>
 8103b48:	4603      	mov	r3, r0
 8103b4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103b4c:	e005      	b.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b4e:	2301      	movs	r3, #1
 8103b50:	75fb      	strb	r3, [r7, #23]
      break;
 8103b52:	e002      	b.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103b54:	58024400 	.word	0x58024400
      break;
 8103b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b5a:	7dfb      	ldrb	r3, [r7, #23]
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	d10a      	bne.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103b60:	4b93      	ldr	r3, [pc, #588]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b6e:	4990      	ldr	r1, [pc, #576]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b70:	4313      	orrs	r3, r2
 8103b72:	658b      	str	r3, [r1, #88]	; 0x58
 8103b74:	e001      	b.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b76:	7dfb      	ldrb	r3, [r7, #23]
 8103b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b82:	2b00      	cmp	r3, #0
 8103b84:	d033      	beq.n	8103bee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103b8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b90:	d01c      	beq.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103b92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b96:	d816      	bhi.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103b9c:	d003      	beq.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ba2:	d007      	beq.n	8103bb4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103ba4:	e00f      	b.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ba6:	4b82      	ldr	r3, [pc, #520]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103baa:	4a81      	ldr	r2, [pc, #516]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103bb2:	e00c      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	3324      	adds	r3, #36	; 0x24
 8103bb8:	2101      	movs	r1, #1
 8103bba:	4618      	mov	r0, r3
 8103bbc:	f000 f9ac 	bl	8103f18 <RCCEx_PLL3_Config>
 8103bc0:	4603      	mov	r3, r0
 8103bc2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103bc4:	e003      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bc6:	2301      	movs	r3, #1
 8103bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8103bca:	e000      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bce:	7dfb      	ldrb	r3, [r7, #23]
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	d10a      	bne.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103bd4:	4b76      	ldr	r3, [pc, #472]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103be2:	4973      	ldr	r1, [pc, #460]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103be4:	4313      	orrs	r3, r2
 8103be6:	654b      	str	r3, [r1, #84]	; 0x54
 8103be8:	e001      	b.n	8103bee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bea:	7dfb      	ldrb	r3, [r7, #23]
 8103bec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103bf6:	2b00      	cmp	r3, #0
 8103bf8:	d029      	beq.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bfe:	2b00      	cmp	r3, #0
 8103c00:	d003      	beq.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103c06:	d007      	beq.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103c08:	e00f      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c0a:	4b69      	ldr	r3, [pc, #420]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c0e:	4a68      	ldr	r2, [pc, #416]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103c16:	e00b      	b.n	8103c30 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	3304      	adds	r3, #4
 8103c1c:	2102      	movs	r1, #2
 8103c1e:	4618      	mov	r0, r3
 8103c20:	f000 f8c8 	bl	8103db4 <RCCEx_PLL2_Config>
 8103c24:	4603      	mov	r3, r0
 8103c26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103c28:	e002      	b.n	8103c30 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103c2a:	2301      	movs	r3, #1
 8103c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8103c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c30:	7dfb      	ldrb	r3, [r7, #23]
 8103c32:	2b00      	cmp	r3, #0
 8103c34:	d109      	bne.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103c36:	4b5e      	ldr	r3, [pc, #376]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c42:	495b      	ldr	r1, [pc, #364]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c44:	4313      	orrs	r3, r2
 8103c46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103c48:	e001      	b.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c4a:	7dfb      	ldrb	r3, [r7, #23]
 8103c4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103c56:	2b00      	cmp	r3, #0
 8103c58:	d00a      	beq.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	3324      	adds	r3, #36	; 0x24
 8103c5e:	2102      	movs	r1, #2
 8103c60:	4618      	mov	r0, r3
 8103c62:	f000 f959 	bl	8103f18 <RCCEx_PLL3_Config>
 8103c66:	4603      	mov	r3, r0
 8103c68:	2b00      	cmp	r3, #0
 8103c6a:	d001      	beq.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103c6c:	2301      	movs	r3, #1
 8103c6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103c78:	2b00      	cmp	r3, #0
 8103c7a:	d030      	beq.n	8103cde <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c84:	d017      	beq.n	8103cb6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c8a:	d811      	bhi.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c90:	d013      	beq.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c96:	d80b      	bhi.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103c98:	2b00      	cmp	r3, #0
 8103c9a:	d010      	beq.n	8103cbe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103ca0:	d106      	bne.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ca2:	4b43      	ldr	r3, [pc, #268]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ca6:	4a42      	ldr	r2, [pc, #264]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103cae:	e007      	b.n	8103cc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cb0:	2301      	movs	r3, #1
 8103cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8103cb4:	e004      	b.n	8103cc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cb6:	bf00      	nop
 8103cb8:	e002      	b.n	8103cc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cba:	bf00      	nop
 8103cbc:	e000      	b.n	8103cc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cc0:	7dfb      	ldrb	r3, [r7, #23]
 8103cc2:	2b00      	cmp	r3, #0
 8103cc4:	d109      	bne.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103cc6:	4b3a      	ldr	r3, [pc, #232]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103cd2:	4937      	ldr	r1, [pc, #220]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cd4:	4313      	orrs	r3, r2
 8103cd6:	654b      	str	r3, [r1, #84]	; 0x54
 8103cd8:	e001      	b.n	8103cde <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cda:	7dfb      	ldrb	r3, [r7, #23]
 8103cdc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	d008      	beq.n	8103cfc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103cea:	4b31      	ldr	r3, [pc, #196]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103cf6:	492e      	ldr	r1, [pc, #184]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cf8:	4313      	orrs	r3, r2
 8103cfa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d009      	beq.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103d08:	4b29      	ldr	r3, [pc, #164]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d0a:	691b      	ldr	r3, [r3, #16]
 8103d0c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103d16:	4926      	ldr	r1, [pc, #152]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d18:	4313      	orrs	r3, r2
 8103d1a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103d24:	2b00      	cmp	r3, #0
 8103d26:	d008      	beq.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103d28:	4b21      	ldr	r3, [pc, #132]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103d34:	491e      	ldr	r1, [pc, #120]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d36:	4313      	orrs	r3, r2
 8103d38:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d00d      	beq.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103d46:	4b1a      	ldr	r3, [pc, #104]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d48:	691b      	ldr	r3, [r3, #16]
 8103d4a:	4a19      	ldr	r2, [pc, #100]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103d50:	6113      	str	r3, [r2, #16]
 8103d52:	4b17      	ldr	r3, [pc, #92]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d54:	691a      	ldr	r2, [r3, #16]
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103d5c:	4914      	ldr	r1, [pc, #80]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d5e:	4313      	orrs	r3, r2
 8103d60:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	da08      	bge.n	8103d7c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103d6a:	4b11      	ldr	r3, [pc, #68]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d76:	490e      	ldr	r1, [pc, #56]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d78:	4313      	orrs	r3, r2
 8103d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103d84:	2b00      	cmp	r3, #0
 8103d86:	d009      	beq.n	8103d9c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103d88:	4b09      	ldr	r3, [pc, #36]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103d96:	4906      	ldr	r1, [pc, #24]	; (8103db0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d98:	4313      	orrs	r3, r2
 8103d9a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103d9c:	7dbb      	ldrb	r3, [r7, #22]
 8103d9e:	2b00      	cmp	r3, #0
 8103da0:	d101      	bne.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103da2:	2300      	movs	r3, #0
 8103da4:	e000      	b.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103da6:	2301      	movs	r3, #1
}
 8103da8:	4618      	mov	r0, r3
 8103daa:	3718      	adds	r7, #24
 8103dac:	46bd      	mov	sp, r7
 8103dae:	bd80      	pop	{r7, pc}
 8103db0:	58024400 	.word	0x58024400

08103db4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103db4:	b580      	push	{r7, lr}
 8103db6:	b084      	sub	sp, #16
 8103db8:	af00      	add	r7, sp, #0
 8103dba:	6078      	str	r0, [r7, #4]
 8103dbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103dbe:	2300      	movs	r3, #0
 8103dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103dc2:	4b54      	ldr	r3, [pc, #336]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103dc6:	f003 0303 	and.w	r3, r3, #3
 8103dca:	2b03      	cmp	r3, #3
 8103dcc:	d101      	bne.n	8103dd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103dce:	2301      	movs	r3, #1
 8103dd0:	e09b      	b.n	8103f0a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103dd2:	4b50      	ldr	r3, [pc, #320]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	4a4f      	ldr	r2, [pc, #316]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103dde:	f7fd fd91 	bl	8101904 <HAL_GetTick>
 8103de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103de4:	e008      	b.n	8103df8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103de6:	f7fd fd8d 	bl	8101904 <HAL_GetTick>
 8103dea:	4602      	mov	r2, r0
 8103dec:	68bb      	ldr	r3, [r7, #8]
 8103dee:	1ad3      	subs	r3, r2, r3
 8103df0:	2b02      	cmp	r3, #2
 8103df2:	d901      	bls.n	8103df8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103df4:	2303      	movs	r3, #3
 8103df6:	e088      	b.n	8103f0a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103df8:	4b46      	ldr	r3, [pc, #280]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	d1f0      	bne.n	8103de6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103e04:	4b43      	ldr	r3, [pc, #268]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	031b      	lsls	r3, r3, #12
 8103e12:	4940      	ldr	r1, [pc, #256]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e14:	4313      	orrs	r3, r2
 8103e16:	628b      	str	r3, [r1, #40]	; 0x28
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	685b      	ldr	r3, [r3, #4]
 8103e1c:	3b01      	subs	r3, #1
 8103e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	689b      	ldr	r3, [r3, #8]
 8103e26:	3b01      	subs	r3, #1
 8103e28:	025b      	lsls	r3, r3, #9
 8103e2a:	b29b      	uxth	r3, r3
 8103e2c:	431a      	orrs	r2, r3
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	68db      	ldr	r3, [r3, #12]
 8103e32:	3b01      	subs	r3, #1
 8103e34:	041b      	lsls	r3, r3, #16
 8103e36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103e3a:	431a      	orrs	r2, r3
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	691b      	ldr	r3, [r3, #16]
 8103e40:	3b01      	subs	r3, #1
 8103e42:	061b      	lsls	r3, r3, #24
 8103e44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103e48:	4932      	ldr	r1, [pc, #200]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e4a:	4313      	orrs	r3, r2
 8103e4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103e4e:	4b31      	ldr	r3, [pc, #196]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	695b      	ldr	r3, [r3, #20]
 8103e5a:	492e      	ldr	r1, [pc, #184]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e5c:	4313      	orrs	r3, r2
 8103e5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103e60:	4b2c      	ldr	r3, [pc, #176]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e64:	f023 0220 	bic.w	r2, r3, #32
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	699b      	ldr	r3, [r3, #24]
 8103e6c:	4929      	ldr	r1, [pc, #164]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e6e:	4313      	orrs	r3, r2
 8103e70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103e72:	4b28      	ldr	r3, [pc, #160]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e76:	4a27      	ldr	r2, [pc, #156]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e78:	f023 0310 	bic.w	r3, r3, #16
 8103e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103e7e:	4b25      	ldr	r3, [pc, #148]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103e86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103e8a:	687a      	ldr	r2, [r7, #4]
 8103e8c:	69d2      	ldr	r2, [r2, #28]
 8103e8e:	00d2      	lsls	r2, r2, #3
 8103e90:	4920      	ldr	r1, [pc, #128]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e92:	4313      	orrs	r3, r2
 8103e94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103e96:	4b1f      	ldr	r3, [pc, #124]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e9a:	4a1e      	ldr	r2, [pc, #120]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103e9c:	f043 0310 	orr.w	r3, r3, #16
 8103ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103ea2:	683b      	ldr	r3, [r7, #0]
 8103ea4:	2b00      	cmp	r3, #0
 8103ea6:	d106      	bne.n	8103eb6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103ea8:	4b1a      	ldr	r3, [pc, #104]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eac:	4a19      	ldr	r2, [pc, #100]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103eb4:	e00f      	b.n	8103ed6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103eb6:	683b      	ldr	r3, [r7, #0]
 8103eb8:	2b01      	cmp	r3, #1
 8103eba:	d106      	bne.n	8103eca <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103ebc:	4b15      	ldr	r3, [pc, #84]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ec0:	4a14      	ldr	r2, [pc, #80]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103ec8:	e005      	b.n	8103ed6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103eca:	4b12      	ldr	r3, [pc, #72]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ece:	4a11      	ldr	r2, [pc, #68]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103ed6:	4b0f      	ldr	r3, [pc, #60]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a0e      	ldr	r2, [pc, #56]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103ee2:	f7fd fd0f 	bl	8101904 <HAL_GetTick>
 8103ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103ee8:	e008      	b.n	8103efc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103eea:	f7fd fd0b 	bl	8101904 <HAL_GetTick>
 8103eee:	4602      	mov	r2, r0
 8103ef0:	68bb      	ldr	r3, [r7, #8]
 8103ef2:	1ad3      	subs	r3, r2, r3
 8103ef4:	2b02      	cmp	r3, #2
 8103ef6:	d901      	bls.n	8103efc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103ef8:	2303      	movs	r3, #3
 8103efa:	e006      	b.n	8103f0a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103efc:	4b05      	ldr	r3, [pc, #20]	; (8103f14 <RCCEx_PLL2_Config+0x160>)
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103f04:	2b00      	cmp	r3, #0
 8103f06:	d0f0      	beq.n	8103eea <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8103f0a:	4618      	mov	r0, r3
 8103f0c:	3710      	adds	r7, #16
 8103f0e:	46bd      	mov	sp, r7
 8103f10:	bd80      	pop	{r7, pc}
 8103f12:	bf00      	nop
 8103f14:	58024400 	.word	0x58024400

08103f18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103f18:	b580      	push	{r7, lr}
 8103f1a:	b084      	sub	sp, #16
 8103f1c:	af00      	add	r7, sp, #0
 8103f1e:	6078      	str	r0, [r7, #4]
 8103f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103f22:	2300      	movs	r3, #0
 8103f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103f26:	4b54      	ldr	r3, [pc, #336]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f2a:	f003 0303 	and.w	r3, r3, #3
 8103f2e:	2b03      	cmp	r3, #3
 8103f30:	d101      	bne.n	8103f36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103f32:	2301      	movs	r3, #1
 8103f34:	e09b      	b.n	810406e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103f36:	4b50      	ldr	r3, [pc, #320]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	4a4f      	ldr	r2, [pc, #316]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103f42:	f7fd fcdf 	bl	8101904 <HAL_GetTick>
 8103f46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103f48:	e008      	b.n	8103f5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103f4a:	f7fd fcdb 	bl	8101904 <HAL_GetTick>
 8103f4e:	4602      	mov	r2, r0
 8103f50:	68bb      	ldr	r3, [r7, #8]
 8103f52:	1ad3      	subs	r3, r2, r3
 8103f54:	2b02      	cmp	r3, #2
 8103f56:	d901      	bls.n	8103f5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103f58:	2303      	movs	r3, #3
 8103f5a:	e088      	b.n	810406e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103f5c:	4b46      	ldr	r3, [pc, #280]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d1f0      	bne.n	8103f4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103f68:	4b43      	ldr	r3, [pc, #268]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	051b      	lsls	r3, r3, #20
 8103f76:	4940      	ldr	r1, [pc, #256]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103f78:	4313      	orrs	r3, r2
 8103f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	685b      	ldr	r3, [r3, #4]
 8103f80:	3b01      	subs	r3, #1
 8103f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	689b      	ldr	r3, [r3, #8]
 8103f8a:	3b01      	subs	r3, #1
 8103f8c:	025b      	lsls	r3, r3, #9
 8103f8e:	b29b      	uxth	r3, r3
 8103f90:	431a      	orrs	r2, r3
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	68db      	ldr	r3, [r3, #12]
 8103f96:	3b01      	subs	r3, #1
 8103f98:	041b      	lsls	r3, r3, #16
 8103f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103f9e:	431a      	orrs	r2, r3
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	691b      	ldr	r3, [r3, #16]
 8103fa4:	3b01      	subs	r3, #1
 8103fa6:	061b      	lsls	r3, r3, #24
 8103fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103fac:	4932      	ldr	r1, [pc, #200]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fae:	4313      	orrs	r3, r2
 8103fb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103fb2:	4b31      	ldr	r3, [pc, #196]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	695b      	ldr	r3, [r3, #20]
 8103fbe:	492e      	ldr	r1, [pc, #184]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fc0:	4313      	orrs	r3, r2
 8103fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103fc4:	4b2c      	ldr	r3, [pc, #176]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	699b      	ldr	r3, [r3, #24]
 8103fd0:	4929      	ldr	r1, [pc, #164]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fd2:	4313      	orrs	r3, r2
 8103fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103fd6:	4b28      	ldr	r3, [pc, #160]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fda:	4a27      	ldr	r2, [pc, #156]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103fe2:	4b25      	ldr	r3, [pc, #148]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103fea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103fee:	687a      	ldr	r2, [r7, #4]
 8103ff0:	69d2      	ldr	r2, [r2, #28]
 8103ff2:	00d2      	lsls	r2, r2, #3
 8103ff4:	4920      	ldr	r1, [pc, #128]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103ff6:	4313      	orrs	r3, r2
 8103ff8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103ffa:	4b1f      	ldr	r3, [pc, #124]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8103ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ffe:	4a1e      	ldr	r2, [pc, #120]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104006:	683b      	ldr	r3, [r7, #0]
 8104008:	2b00      	cmp	r3, #0
 810400a:	d106      	bne.n	810401a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810400c:	4b1a      	ldr	r3, [pc, #104]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 810400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104010:	4a19      	ldr	r2, [pc, #100]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104012:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104018:	e00f      	b.n	810403a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810401a:	683b      	ldr	r3, [r7, #0]
 810401c:	2b01      	cmp	r3, #1
 810401e:	d106      	bne.n	810402e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104020:	4b15      	ldr	r3, [pc, #84]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104024:	4a14      	ldr	r2, [pc, #80]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104026:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810402a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810402c:	e005      	b.n	810403a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810402e:	4b12      	ldr	r3, [pc, #72]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104032:	4a11      	ldr	r2, [pc, #68]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104038:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810403a:	4b0f      	ldr	r3, [pc, #60]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 810403c:	681b      	ldr	r3, [r3, #0]
 810403e:	4a0e      	ldr	r2, [pc, #56]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104046:	f7fd fc5d 	bl	8101904 <HAL_GetTick>
 810404a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810404c:	e008      	b.n	8104060 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810404e:	f7fd fc59 	bl	8101904 <HAL_GetTick>
 8104052:	4602      	mov	r2, r0
 8104054:	68bb      	ldr	r3, [r7, #8]
 8104056:	1ad3      	subs	r3, r2, r3
 8104058:	2b02      	cmp	r3, #2
 810405a:	d901      	bls.n	8104060 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810405c:	2303      	movs	r3, #3
 810405e:	e006      	b.n	810406e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104060:	4b05      	ldr	r3, [pc, #20]	; (8104078 <RCCEx_PLL3_Config+0x160>)
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104068:	2b00      	cmp	r3, #0
 810406a:	d0f0      	beq.n	810404e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810406c:	7bfb      	ldrb	r3, [r7, #15]
}
 810406e:	4618      	mov	r0, r3
 8104070:	3710      	adds	r7, #16
 8104072:	46bd      	mov	sp, r7
 8104074:	bd80      	pop	{r7, pc}
 8104076:	bf00      	nop
 8104078:	58024400 	.word	0x58024400

0810407c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810407c:	b580      	push	{r7, lr}
 810407e:	b084      	sub	sp, #16
 8104080:	af00      	add	r7, sp, #0
 8104082:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8104084:	2300      	movs	r3, #0
 8104086:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	2b00      	cmp	r3, #0
 810408c:	d101      	bne.n	8104092 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810408e:	2301      	movs	r3, #1
 8104090:	e0eb      	b.n	810426a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	2200      	movs	r2, #0
 8104096:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	4a75      	ldr	r2, [pc, #468]	; (8104274 <HAL_SPI_Init+0x1f8>)
 810409e:	4293      	cmp	r3, r2
 81040a0:	d00f      	beq.n	81040c2 <HAL_SPI_Init+0x46>
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	4a74      	ldr	r2, [pc, #464]	; (8104278 <HAL_SPI_Init+0x1fc>)
 81040a8:	4293      	cmp	r3, r2
 81040aa:	d00a      	beq.n	81040c2 <HAL_SPI_Init+0x46>
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	4a72      	ldr	r2, [pc, #456]	; (810427c <HAL_SPI_Init+0x200>)
 81040b2:	4293      	cmp	r3, r2
 81040b4:	d005      	beq.n	81040c2 <HAL_SPI_Init+0x46>
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	68db      	ldr	r3, [r3, #12]
 81040ba:	2b0f      	cmp	r3, #15
 81040bc:	d901      	bls.n	81040c2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 81040be:	2301      	movs	r3, #1
 81040c0:	e0d3      	b.n	810426a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81040c2:	6878      	ldr	r0, [r7, #4]
 81040c4:	f000 f8dc 	bl	8104280 <SPI_GetPacketSize>
 81040c8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	4a69      	ldr	r2, [pc, #420]	; (8104274 <HAL_SPI_Init+0x1f8>)
 81040d0:	4293      	cmp	r3, r2
 81040d2:	d00c      	beq.n	81040ee <HAL_SPI_Init+0x72>
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	4a67      	ldr	r2, [pc, #412]	; (8104278 <HAL_SPI_Init+0x1fc>)
 81040da:	4293      	cmp	r3, r2
 81040dc:	d007      	beq.n	81040ee <HAL_SPI_Init+0x72>
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4a66      	ldr	r2, [pc, #408]	; (810427c <HAL_SPI_Init+0x200>)
 81040e4:	4293      	cmp	r3, r2
 81040e6:	d002      	beq.n	81040ee <HAL_SPI_Init+0x72>
 81040e8:	68bb      	ldr	r3, [r7, #8]
 81040ea:	2b08      	cmp	r3, #8
 81040ec:	d811      	bhi.n	8104112 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81040f2:	4a60      	ldr	r2, [pc, #384]	; (8104274 <HAL_SPI_Init+0x1f8>)
 81040f4:	4293      	cmp	r3, r2
 81040f6:	d009      	beq.n	810410c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	4a5e      	ldr	r2, [pc, #376]	; (8104278 <HAL_SPI_Init+0x1fc>)
 81040fe:	4293      	cmp	r3, r2
 8104100:	d004      	beq.n	810410c <HAL_SPI_Init+0x90>
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	681b      	ldr	r3, [r3, #0]
 8104106:	4a5d      	ldr	r2, [pc, #372]	; (810427c <HAL_SPI_Init+0x200>)
 8104108:	4293      	cmp	r3, r2
 810410a:	d104      	bne.n	8104116 <HAL_SPI_Init+0x9a>
 810410c:	68bb      	ldr	r3, [r7, #8]
 810410e:	2b10      	cmp	r3, #16
 8104110:	d901      	bls.n	8104116 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8104112:	2301      	movs	r3, #1
 8104114:	e0a9      	b.n	810426a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810411c:	b2db      	uxtb	r3, r3
 810411e:	2b00      	cmp	r3, #0
 8104120:	d106      	bne.n	8104130 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	2200      	movs	r2, #0
 8104126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810412a:	6878      	ldr	r0, [r7, #4]
 810412c:	f7fd f950 	bl	81013d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	2202      	movs	r2, #2
 8104134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	681a      	ldr	r2, [r3, #0]
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	681b      	ldr	r3, [r3, #0]
 8104142:	f022 0201 	bic.w	r2, r2, #1
 8104146:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	699b      	ldr	r3, [r3, #24]
 810414c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104150:	d119      	bne.n	8104186 <HAL_SPI_Init+0x10a>
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	685b      	ldr	r3, [r3, #4]
 8104156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810415a:	d103      	bne.n	8104164 <HAL_SPI_Init+0xe8>
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104160:	2b00      	cmp	r3, #0
 8104162:	d008      	beq.n	8104176 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104168:	2b00      	cmp	r3, #0
 810416a:	d10c      	bne.n	8104186 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104174:	d107      	bne.n	8104186 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	681b      	ldr	r3, [r3, #0]
 810417a:	681a      	ldr	r2, [r3, #0]
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104184:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	69da      	ldr	r2, [r3, #28]
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810418e:	431a      	orrs	r2, r3
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	431a      	orrs	r2, r3
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104198:	ea42 0103 	orr.w	r1, r2, r3
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	68da      	ldr	r2, [r3, #12]
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	430a      	orrs	r2, r1
 81041a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041b0:	431a      	orrs	r2, r3
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81041b6:	431a      	orrs	r2, r3
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	699b      	ldr	r3, [r3, #24]
 81041bc:	431a      	orrs	r2, r3
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	691b      	ldr	r3, [r3, #16]
 81041c2:	431a      	orrs	r2, r3
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	695b      	ldr	r3, [r3, #20]
 81041c8:	431a      	orrs	r2, r3
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	6a1b      	ldr	r3, [r3, #32]
 81041ce:	431a      	orrs	r2, r3
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	685b      	ldr	r3, [r3, #4]
 81041d4:	431a      	orrs	r2, r3
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041da:	431a      	orrs	r2, r3
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	689b      	ldr	r3, [r3, #8]
 81041e0:	431a      	orrs	r2, r3
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81041e6:	ea42 0103 	orr.w	r1, r2, r3
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	681b      	ldr	r3, [r3, #0]
 81041f2:	430a      	orrs	r2, r1
 81041f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	685b      	ldr	r3, [r3, #4]
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d113      	bne.n	8104226 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	689b      	ldr	r3, [r3, #8]
 8104204:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104210:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	689b      	ldr	r3, [r3, #8]
 8104218:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	681b      	ldr	r3, [r3, #0]
 8104220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8104224:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	f022 0201 	bic.w	r2, r2, #1
 8104234:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	685b      	ldr	r3, [r3, #4]
 810423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810423e:	2b00      	cmp	r3, #0
 8104240:	d00a      	beq.n	8104258 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	68db      	ldr	r3, [r3, #12]
 8104248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	430a      	orrs	r2, r1
 8104256:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	2200      	movs	r2, #0
 810425c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	2201      	movs	r2, #1
 8104264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104268:	2300      	movs	r3, #0
}
 810426a:	4618      	mov	r0, r3
 810426c:	3710      	adds	r7, #16
 810426e:	46bd      	mov	sp, r7
 8104270:	bd80      	pop	{r7, pc}
 8104272:	bf00      	nop
 8104274:	40013000 	.word	0x40013000
 8104278:	40003800 	.word	0x40003800
 810427c:	40003c00 	.word	0x40003c00

08104280 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104280:	b480      	push	{r7}
 8104282:	b085      	sub	sp, #20
 8104284:	af00      	add	r7, sp, #0
 8104286:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810428c:	095b      	lsrs	r3, r3, #5
 810428e:	3301      	adds	r3, #1
 8104290:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	68db      	ldr	r3, [r3, #12]
 8104296:	3301      	adds	r3, #1
 8104298:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810429a:	68bb      	ldr	r3, [r7, #8]
 810429c:	3307      	adds	r3, #7
 810429e:	08db      	lsrs	r3, r3, #3
 81042a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81042a2:	68bb      	ldr	r3, [r7, #8]
 81042a4:	68fa      	ldr	r2, [r7, #12]
 81042a6:	fb02 f303 	mul.w	r3, r2, r3
}
 81042aa:	4618      	mov	r0, r3
 81042ac:	3714      	adds	r7, #20
 81042ae:	46bd      	mov	sp, r7
 81042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042b4:	4770      	bx	lr

081042b6 <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 81042b6:	b084      	sub	sp, #16
 81042b8:	b580      	push	{r7, lr}
 81042ba:	b086      	sub	sp, #24
 81042bc:	af04      	add	r7, sp, #16
 81042be:	f107 0c10 	add.w	ip, r7, #16
 81042c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 81042c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81042ca:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, HAL_MAX_DELAY);
 81042cc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 81042d0:	b299      	uxth	r1, r3
 81042d2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81042d6:	b29a      	uxth	r2, r3
 81042d8:	f04f 33ff 	mov.w	r3, #4294967295
 81042dc:	9302      	str	r3, [sp, #8]
 81042de:	2301      	movs	r3, #1
 81042e0:	9301      	str	r3, [sp, #4]
 81042e2:	1d3b      	adds	r3, r7, #4
 81042e4:	9300      	str	r3, [sp, #0]
 81042e6:	2301      	movs	r3, #1
 81042e8:	f107 0010 	add.w	r0, r7, #16
 81042ec:	f7fd ff24 	bl	8102138 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 81042f0:	200a      	movs	r0, #10
 81042f2:	f7fd fb13 	bl	810191c <HAL_Delay>
}
 81042f6:	bf00      	nop
 81042f8:	3708      	adds	r7, #8
 81042fa:	46bd      	mov	sp, r7
 81042fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8104300:	b004      	add	sp, #16
 8104302:	4770      	bx	lr

08104304 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8104304:	b084      	sub	sp, #16
 8104306:	b580      	push	{r7, lr}
 8104308:	b084      	sub	sp, #16
 810430a:	af04      	add	r7, sp, #16
 810430c:	f107 0c08 	add.w	ip, r7, #8
 8104310:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, HAL_MAX_DELAY-1);
 8104314:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8104318:	b299      	uxth	r1, r3
 810431a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 810431e:	b29a      	uxth	r2, r3
 8104320:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8104324:	b29b      	uxth	r3, r3
 8104326:	f06f 0001 	mvn.w	r0, #1
 810432a:	9002      	str	r0, [sp, #8]
 810432c:	9301      	str	r3, [sp, #4]
 810432e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8104330:	9300      	str	r3, [sp, #0]
 8104332:	2301      	movs	r3, #1
 8104334:	f107 0008 	add.w	r0, r7, #8
 8104338:	f7fe f812 	bl	8102360 <HAL_I2C_Mem_Read>
}
 810433c:	bf00      	nop
 810433e:	46bd      	mov	sp, r7
 8104340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8104344:	b004      	add	sp, #16
 8104346:	4770      	bx	lr

08104348 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 8104348:	b084      	sub	sp, #16
 810434a:	b5b0      	push	{r4, r5, r7, lr}
 810434c:	b092      	sub	sp, #72	; 0x48
 810434e:	af12      	add	r7, sp, #72	; 0x48
 8104350:	f107 0410 	add.w	r4, r7, #16
 8104354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8104358:	2325      	movs	r3, #37	; 0x25
 810435a:	220c      	movs	r2, #12
 810435c:	9211      	str	r2, [sp, #68]	; 0x44
 810435e:	9310      	str	r3, [sp, #64]	; 0x40
 8104360:	466d      	mov	r5, sp
 8104362:	f107 0420 	add.w	r4, r7, #32
 8104366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810436a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810436c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810436e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104372:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104376:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810437a:	f107 0310 	add.w	r3, r7, #16
 810437e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104380:	f7ff ff99 	bl	81042b6 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104384:	2226      	movs	r2, #38	; 0x26
 8104386:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 810438a:	9311      	str	r3, [sp, #68]	; 0x44
 810438c:	9210      	str	r2, [sp, #64]	; 0x40
 810438e:	466d      	mov	r5, sp
 8104390:	f107 0420 	add.w	r4, r7, #32
 8104394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810439a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810439c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810439e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043a8:	f107 0310 	add.w	r3, r7, #16
 81043ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043ae:	f7ff ff82 	bl	81042b6 <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 81043b2:	2263      	movs	r2, #99	; 0x63
 81043b4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81043b8:	9311      	str	r3, [sp, #68]	; 0x44
 81043ba:	9210      	str	r2, [sp, #64]	; 0x40
 81043bc:	466d      	mov	r5, sp
 81043be:	f107 0420 	add.w	r4, r7, #32
 81043c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043d6:	f107 0310 	add.w	r3, r7, #16
 81043da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043dc:	f7ff ff6b 	bl	81042b6 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 81043e0:	2227      	movs	r2, #39	; 0x27
 81043e2:	2380      	movs	r3, #128	; 0x80
 81043e4:	f043 0301 	orr.w	r3, r3, #1
 81043e8:	b2db      	uxtb	r3, r3
 81043ea:	9311      	str	r3, [sp, #68]	; 0x44
 81043ec:	9210      	str	r2, [sp, #64]	; 0x40
 81043ee:	466d      	mov	r5, sp
 81043f0:	f107 0420 	add.w	r4, r7, #32
 81043f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104400:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104404:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104408:	f107 0310 	add.w	r3, r7, #16
 810440c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810440e:	f7ff ff52 	bl	81042b6 <writeRegister>
}
 8104412:	bf00      	nop
 8104414:	46bd      	mov	sp, r7
 8104416:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 810441a:	b004      	add	sp, #16
 810441c:	4770      	bx	lr

0810441e <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 810441e:	b084      	sub	sp, #16
 8104420:	b5b0      	push	{r4, r5, r7, lr}
 8104422:	b094      	sub	sp, #80	; 0x50
 8104424:	af14      	add	r7, sp, #80	; 0x50
 8104426:	f107 0410 	add.w	r4, r7, #16
 810442a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 810442e:	2225      	movs	r2, #37	; 0x25
 8104430:	210c      	movs	r1, #12
 8104432:	2380      	movs	r3, #128	; 0x80
 8104434:	430b      	orrs	r3, r1
 8104436:	b2db      	uxtb	r3, r3
 8104438:	9311      	str	r3, [sp, #68]	; 0x44
 810443a:	9210      	str	r2, [sp, #64]	; 0x40
 810443c:	466d      	mov	r5, sp
 810443e:	f107 0420 	add.w	r4, r7, #32
 8104442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810444a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810444c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810444e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104452:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104456:	f107 0310 	add.w	r3, r7, #16
 810445a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810445c:	f7ff ff2b 	bl	81042b6 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104460:	2226      	movs	r2, #38	; 0x26
 8104462:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8104466:	9311      	str	r3, [sp, #68]	; 0x44
 8104468:	9210      	str	r2, [sp, #64]	; 0x40
 810446a:	466d      	mov	r5, sp
 810446c:	f107 0420 	add.w	r4, r7, #32
 8104470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810447a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810447c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104480:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104484:	f107 0310 	add.w	r3, r7, #16
 8104488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810448a:	f7ff ff14 	bl	81042b6 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 810448e:	2227      	movs	r2, #39	; 0x27
 8104490:	2180      	movs	r1, #128	; 0x80
 8104492:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8104496:	430b      	orrs	r3, r1
 8104498:	b2db      	uxtb	r3, r3
 810449a:	9311      	str	r3, [sp, #68]	; 0x44
 810449c:	9210      	str	r2, [sp, #64]	; 0x40
 810449e:	466d      	mov	r5, sp
 81044a0:	f107 0420 	add.w	r4, r7, #32
 81044a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81044b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81044b8:	f107 0310 	add.w	r3, r7, #16
 81044bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044be:	f7ff fefa 	bl	81042b6 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 81044c2:	2001      	movs	r0, #1
 81044c4:	f7fd fa2a 	bl	810191c <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 81044c8:	2249      	movs	r2, #73	; 0x49
 81044ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81044cc:	9312      	str	r3, [sp, #72]	; 0x48
 81044ce:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81044d2:	9311      	str	r3, [sp, #68]	; 0x44
 81044d4:	9210      	str	r2, [sp, #64]	; 0x40
 81044d6:	466d      	mov	r5, sp
 81044d8:	f107 0420 	add.w	r4, r7, #32
 81044dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81044ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81044f0:	f107 0310 	add.w	r3, r7, #16
 81044f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044f6:	f7ff ff05 	bl	8104304 <readRegisters>
}
 81044fa:	bf00      	nop
 81044fc:	46bd      	mov	sp, r7
 81044fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104502:	b004      	add	sp, #16
 8104504:	4770      	bx	lr
	...

08104508 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 8104508:	b084      	sub	sp, #16
 810450a:	b5b0      	push	{r4, r5, r7, lr}
 810450c:	b094      	sub	sp, #80	; 0x50
 810450e:	af14      	add	r7, sp, #80	; 0x50
 8104510:	f107 0410 	add.w	r4, r7, #16
 8104514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 8104518:	2375      	movs	r3, #117	; 0x75
 810451a:	4a0f      	ldr	r2, [pc, #60]	; (8104558 <whoAmI+0x50>)
 810451c:	9212      	str	r2, [sp, #72]	; 0x48
 810451e:	2201      	movs	r2, #1
 8104520:	9211      	str	r2, [sp, #68]	; 0x44
 8104522:	9310      	str	r3, [sp, #64]	; 0x40
 8104524:	466d      	mov	r5, sp
 8104526:	f107 0420 	add.w	r4, r7, #32
 810452a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810452c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810452e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104536:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810453a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810453e:	f107 0310 	add.w	r3, r7, #16
 8104542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104544:	f7ff fede 	bl	8104304 <readRegisters>

	// return the register value
	return _buffer[0];
 8104548:	4b03      	ldr	r3, [pc, #12]	; (8104558 <whoAmI+0x50>)
 810454a:	781b      	ldrb	r3, [r3, #0]
}
 810454c:	4618      	mov	r0, r3
 810454e:	46bd      	mov	sp, r7
 8104550:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104554:	b004      	add	sp, #16
 8104556:	4770      	bx	lr
 8104558:	100002b0 	.word	0x100002b0

0810455c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 810455c:	b084      	sub	sp, #16
 810455e:	b5b0      	push	{r4, r5, r7, lr}
 8104560:	b094      	sub	sp, #80	; 0x50
 8104562:	af14      	add	r7, sp, #80	; 0x50
 8104564:	f107 0410 	add.w	r4, r7, #16
 8104568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 810456c:	2300      	movs	r3, #0
 810456e:	4a0f      	ldr	r2, [pc, #60]	; (81045ac <whoAmIAK8963+0x50>)
 8104570:	9212      	str	r2, [sp, #72]	; 0x48
 8104572:	2201      	movs	r2, #1
 8104574:	9211      	str	r2, [sp, #68]	; 0x44
 8104576:	9310      	str	r3, [sp, #64]	; 0x40
 8104578:	466d      	mov	r5, sp
 810457a:	f107 0420 	add.w	r4, r7, #32
 810457e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810458a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810458e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104592:	f107 0310 	add.w	r3, r7, #16
 8104596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104598:	f7ff ff41 	bl	810441e <readAK8963Registers>
	// return the register value
	return _buffer[0];
 810459c:	4b03      	ldr	r3, [pc, #12]	; (81045ac <whoAmIAK8963+0x50>)
 810459e:	781b      	ldrb	r3, [r3, #0]
}
 81045a0:	4618      	mov	r0, r3
 81045a2:	46bd      	mov	sp, r7
 81045a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81045a8:	b004      	add	sp, #16
 81045aa:	4770      	bx	lr
 81045ac:	100002b0 	.word	0x100002b0

081045b0 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 81045b0:	b084      	sub	sp, #16
 81045b2:	b5b0      	push	{r4, r5, r7, lr}
 81045b4:	b096      	sub	sp, #88	; 0x58
 81045b6:	af14      	add	r7, sp, #80	; 0x50
 81045b8:	f107 0418 	add.w	r4, r7, #24
 81045bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 81045c0:	236b      	movs	r3, #107	; 0x6b
 81045c2:	2201      	movs	r2, #1
 81045c4:	9211      	str	r2, [sp, #68]	; 0x44
 81045c6:	9310      	str	r3, [sp, #64]	; 0x40
 81045c8:	466d      	mov	r5, sp
 81045ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81045de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045e2:	f107 0318 	add.w	r3, r7, #24
 81045e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81045e8:	f7ff fe65 	bl	81042b6 <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 81045ec:	236a      	movs	r3, #106	; 0x6a
 81045ee:	2220      	movs	r2, #32
 81045f0:	9211      	str	r2, [sp, #68]	; 0x44
 81045f2:	9310      	str	r3, [sp, #64]	; 0x40
 81045f4:	466d      	mov	r5, sp
 81045f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104606:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810460a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810460e:	f107 0318 	add.w	r3, r7, #24
 8104612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104614:	f7ff fe4f 	bl	81042b6 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 8104618:	2324      	movs	r3, #36	; 0x24
 810461a:	220d      	movs	r2, #13
 810461c:	9211      	str	r2, [sp, #68]	; 0x44
 810461e:	9310      	str	r3, [sp, #64]	; 0x40
 8104620:	466d      	mov	r5, sp
 8104622:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810462e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104636:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810463a:	f107 0318 	add.w	r3, r7, #24
 810463e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104640:	f7ff fe39 	bl	81042b6 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104644:	230a      	movs	r3, #10
 8104646:	2200      	movs	r2, #0
 8104648:	9211      	str	r2, [sp, #68]	; 0x44
 810464a:	9310      	str	r3, [sp, #64]	; 0x40
 810464c:	466d      	mov	r5, sp
 810464e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810465a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810465c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810465e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104662:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104666:	f107 0318 	add.w	r3, r7, #24
 810466a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810466c:	f7ff fe6c 	bl	8104348 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 8104670:	236b      	movs	r3, #107	; 0x6b
 8104672:	2280      	movs	r2, #128	; 0x80
 8104674:	9211      	str	r2, [sp, #68]	; 0x44
 8104676:	9310      	str	r3, [sp, #64]	; 0x40
 8104678:	466d      	mov	r5, sp
 810467a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810467e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810468a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810468e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104692:	f107 0318 	add.w	r3, r7, #24
 8104696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104698:	f7ff fe0d 	bl	81042b6 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 810469c:	200a      	movs	r0, #10
 810469e:	f7fd f93d 	bl	810191c <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 81046a2:	230b      	movs	r3, #11
 81046a4:	2201      	movs	r2, #1
 81046a6:	9211      	str	r2, [sp, #68]	; 0x44
 81046a8:	9310      	str	r3, [sp, #64]	; 0x40
 81046aa:	466d      	mov	r5, sp
 81046ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046c4:	f107 0318 	add.w	r3, r7, #24
 81046c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046ca:	f7ff fe3d 	bl	8104348 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81046ce:	236b      	movs	r3, #107	; 0x6b
 81046d0:	2201      	movs	r2, #1
 81046d2:	9211      	str	r2, [sp, #68]	; 0x44
 81046d4:	9310      	str	r3, [sp, #64]	; 0x40
 81046d6:	466d      	mov	r5, sp
 81046d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046f0:	f107 0318 	add.w	r3, r7, #24
 81046f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046f6:	f7ff fdde 	bl	81042b6 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 81046fa:	466d      	mov	r5, sp
 81046fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810470a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810470c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104710:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104714:	f107 0318 	add.w	r3, r7, #24
 8104718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810471a:	f7ff fef5 	bl	8104508 <whoAmI>
 810471e:	4603      	mov	r3, r0
 8104720:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8104722:	79fb      	ldrb	r3, [r7, #7]
 8104724:	2b71      	cmp	r3, #113	; 0x71
 8104726:	d004      	beq.n	8104732 <MPU9250_Init+0x182>
 8104728:	79fb      	ldrb	r3, [r7, #7]
 810472a:	2b73      	cmp	r3, #115	; 0x73
 810472c:	d001      	beq.n	8104732 <MPU9250_Init+0x182>
	{
		return 1;
 810472e:	2301      	movs	r3, #1
 8104730:	e171      	b.n	8104a16 <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 8104732:	236c      	movs	r3, #108	; 0x6c
 8104734:	2200      	movs	r2, #0
 8104736:	9211      	str	r2, [sp, #68]	; 0x44
 8104738:	9310      	str	r3, [sp, #64]	; 0x40
 810473a:	466d      	mov	r5, sp
 810473c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810474c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104750:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104754:	f107 0318 	add.w	r3, r7, #24
 8104758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810475a:	f7ff fdac 	bl	81042b6 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 810475e:	231c      	movs	r3, #28
 8104760:	2200      	movs	r2, #0
 8104762:	9211      	str	r2, [sp, #68]	; 0x44
 8104764:	9310      	str	r3, [sp, #64]	; 0x40
 8104766:	466d      	mov	r5, sp
 8104768:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810477c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104780:	f107 0318 	add.w	r3, r7, #24
 8104784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104786:	f7ff fd96 	bl	81042b6 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 810478a:	231b      	movs	r3, #27
 810478c:	2200      	movs	r2, #0
 810478e:	9211      	str	r2, [sp, #68]	; 0x44
 8104790:	9310      	str	r3, [sp, #64]	; 0x40
 8104792:	466d      	mov	r5, sp
 8104794:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810479a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810479c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810479e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047ac:	f107 0318 	add.w	r3, r7, #24
 81047b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047b2:	f7ff fd80 	bl	81042b6 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 81047b6:	231d      	movs	r3, #29
 81047b8:	2201      	movs	r2, #1
 81047ba:	9211      	str	r2, [sp, #68]	; 0x44
 81047bc:	9310      	str	r3, [sp, #64]	; 0x40
 81047be:	466d      	mov	r5, sp
 81047c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81047c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047d8:	f107 0318 	add.w	r3, r7, #24
 81047dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047de:	f7ff fd6a 	bl	81042b6 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 81047e2:	231a      	movs	r3, #26
 81047e4:	2201      	movs	r2, #1
 81047e6:	9211      	str	r2, [sp, #68]	; 0x44
 81047e8:	9310      	str	r3, [sp, #64]	; 0x40
 81047ea:	466d      	mov	r5, sp
 81047ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81047f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104800:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104804:	f107 0318 	add.w	r3, r7, #24
 8104808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810480a:	f7ff fd54 	bl	81042b6 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 810480e:	2319      	movs	r3, #25
 8104810:	2200      	movs	r2, #0
 8104812:	9211      	str	r2, [sp, #68]	; 0x44
 8104814:	9310      	str	r3, [sp, #64]	; 0x40
 8104816:	466d      	mov	r5, sp
 8104818:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810481c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810481e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104828:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810482c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104830:	f107 0318 	add.w	r3, r7, #24
 8104834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104836:	f7ff fd3e 	bl	81042b6 <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 810483a:	236a      	movs	r3, #106	; 0x6a
 810483c:	2220      	movs	r2, #32
 810483e:	9211      	str	r2, [sp, #68]	; 0x44
 8104840:	9310      	str	r3, [sp, #64]	; 0x40
 8104842:	466d      	mov	r5, sp
 8104844:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810484a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810484c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810484e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104854:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104858:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810485c:	f107 0318 	add.w	r3, r7, #24
 8104860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104862:	f7ff fd28 	bl	81042b6 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 8104866:	2324      	movs	r3, #36	; 0x24
 8104868:	220d      	movs	r2, #13
 810486a:	9211      	str	r2, [sp, #68]	; 0x44
 810486c:	9310      	str	r3, [sp, #64]	; 0x40
 810486e:	466d      	mov	r5, sp
 8104870:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810487a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810487c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810487e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104880:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104884:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104888:	f107 0318 	add.w	r3, r7, #24
 810488c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810488e:	f7ff fd12 	bl	81042b6 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 8104892:	466d      	mov	r5, sp
 8104894:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810489a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810489c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810489e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048ac:	f107 0318 	add.w	r3, r7, #24
 81048b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048b2:	f7ff fe53 	bl	810455c <whoAmIAK8963>
 81048b6:	4603      	mov	r3, r0
 81048b8:	2b48      	cmp	r3, #72	; 0x48
 81048ba:	d001      	beq.n	81048c0 <MPU9250_Init+0x310>
	{
		return 1;
 81048bc:	2301      	movs	r3, #1
 81048be:	e0aa      	b.n	8104a16 <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81048c0:	230a      	movs	r3, #10
 81048c2:	2200      	movs	r2, #0
 81048c4:	9211      	str	r2, [sp, #68]	; 0x44
 81048c6:	9310      	str	r3, [sp, #64]	; 0x40
 81048c8:	466d      	mov	r5, sp
 81048ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048e2:	f107 0318 	add.w	r3, r7, #24
 81048e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048e8:	f7ff fd2e 	bl	8104348 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 81048ec:	2064      	movs	r0, #100	; 0x64
 81048ee:	f7fd f815 	bl	810191c <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 81048f2:	230a      	movs	r3, #10
 81048f4:	220f      	movs	r2, #15
 81048f6:	9211      	str	r2, [sp, #68]	; 0x44
 81048f8:	9310      	str	r3, [sp, #64]	; 0x40
 81048fa:	466d      	mov	r5, sp
 81048fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810490a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810490c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104910:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104914:	f107 0318 	add.w	r3, r7, #24
 8104918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810491a:	f7ff fd15 	bl	8104348 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 810491e:	2064      	movs	r0, #100	; 0x64
 8104920:	f7fc fffc 	bl	810191c <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 8104924:	2310      	movs	r3, #16
 8104926:	4a3f      	ldr	r2, [pc, #252]	; (8104a24 <MPU9250_Init+0x474>)
 8104928:	9212      	str	r2, [sp, #72]	; 0x48
 810492a:	2203      	movs	r2, #3
 810492c:	9211      	str	r2, [sp, #68]	; 0x44
 810492e:	9310      	str	r3, [sp, #64]	; 0x40
 8104930:	466d      	mov	r5, sp
 8104932:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810493a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810493c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104942:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104946:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810494a:	f107 0318 	add.w	r3, r7, #24
 810494e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104950:	f7ff fd65 	bl	810441e <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104954:	230a      	movs	r3, #10
 8104956:	2200      	movs	r2, #0
 8104958:	9211      	str	r2, [sp, #68]	; 0x44
 810495a:	9310      	str	r3, [sp, #64]	; 0x40
 810495c:	466d      	mov	r5, sp
 810495e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810496a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810496c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810496e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104972:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104976:	f107 0318 	add.w	r3, r7, #24
 810497a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810497c:	f7ff fce4 	bl	8104348 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104980:	2064      	movs	r0, #100	; 0x64
 8104982:	f7fc ffcb 	bl	810191c <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 8104986:	230a      	movs	r3, #10
 8104988:	2216      	movs	r2, #22
 810498a:	9211      	str	r2, [sp, #68]	; 0x44
 810498c:	9310      	str	r3, [sp, #64]	; 0x40
 810498e:	466d      	mov	r5, sp
 8104990:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810499a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810499c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810499e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049a8:	f107 0318 	add.w	r3, r7, #24
 81049ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049ae:	f7ff fccb 	bl	8104348 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 81049b2:	2064      	movs	r0, #100	; 0x64
 81049b4:	f7fc ffb2 	bl	810191c <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81049b8:	236b      	movs	r3, #107	; 0x6b
 81049ba:	2201      	movs	r2, #1
 81049bc:	9211      	str	r2, [sp, #68]	; 0x44
 81049be:	9310      	str	r3, [sp, #64]	; 0x40
 81049c0:	466d      	mov	r5, sp
 81049c2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049da:	f107 0318 	add.w	r3, r7, #24
 81049de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049e0:	f7ff fc69 	bl	81042b6 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 81049e4:	2303      	movs	r3, #3
 81049e6:	4a10      	ldr	r2, [pc, #64]	; (8104a28 <MPU9250_Init+0x478>)
 81049e8:	9212      	str	r2, [sp, #72]	; 0x48
 81049ea:	2207      	movs	r2, #7
 81049ec:	9211      	str	r2, [sp, #68]	; 0x44
 81049ee:	9310      	str	r3, [sp, #64]	; 0x40
 81049f0:	466d      	mov	r5, sp
 81049f2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a0a:	f107 0318 	add.w	r3, r7, #24
 8104a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a10:	f7ff fd05 	bl	810441e <readAK8963Registers>

	// successful init, return 0
	return 0;
 8104a14:	2300      	movs	r3, #0
}
 8104a16:	4618      	mov	r0, r3
 8104a18:	3708      	adds	r7, #8
 8104a1a:	46bd      	mov	sp, r7
 8104a1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104a20:	b004      	add	sp, #16
 8104a22:	4770      	bx	lr
 8104a24:	100002c8 	.word	0x100002c8
 8104a28:	100002b0 	.word	0x100002b0

08104a2c <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8104a2c:	b084      	sub	sp, #16
 8104a2e:	b5b0      	push	{r4, r5, r7, lr}
 8104a30:	b096      	sub	sp, #88	; 0x58
 8104a32:	af14      	add	r7, sp, #80	; 0x50
 8104a34:	f107 0418 	add.w	r4, r7, #24
 8104a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 8104a3c:	233b      	movs	r3, #59	; 0x3b
 8104a3e:	4a6d      	ldr	r2, [pc, #436]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104a40:	9212      	str	r2, [sp, #72]	; 0x48
 8104a42:	2215      	movs	r2, #21
 8104a44:	9211      	str	r2, [sp, #68]	; 0x44
 8104a46:	9310      	str	r3, [sp, #64]	; 0x40
 8104a48:	466d      	mov	r5, sp
 8104a4a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a62:	f107 0318 	add.w	r3, r7, #24
 8104a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a68:	f7ff fc4c 	bl	8104304 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8104a6c:	4b61      	ldr	r3, [pc, #388]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104a6e:	781b      	ldrb	r3, [r3, #0]
 8104a70:	021b      	lsls	r3, r3, #8
 8104a72:	b21a      	sxth	r2, r3
 8104a74:	4b5f      	ldr	r3, [pc, #380]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104a76:	785b      	ldrb	r3, [r3, #1]
 8104a78:	b21b      	sxth	r3, r3
 8104a7a:	4313      	orrs	r3, r2
 8104a7c:	b21a      	sxth	r2, r3
 8104a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104a80:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8104a82:	4b5c      	ldr	r3, [pc, #368]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104a84:	789b      	ldrb	r3, [r3, #2]
 8104a86:	021b      	lsls	r3, r3, #8
 8104a88:	b219      	sxth	r1, r3
 8104a8a:	4b5a      	ldr	r3, [pc, #360]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104a8c:	78db      	ldrb	r3, [r3, #3]
 8104a8e:	b21a      	sxth	r2, r3
 8104a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104a92:	3302      	adds	r3, #2
 8104a94:	430a      	orrs	r2, r1
 8104a96:	b212      	sxth	r2, r2
 8104a98:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8104a9a:	4b56      	ldr	r3, [pc, #344]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104a9c:	791b      	ldrb	r3, [r3, #4]
 8104a9e:	021b      	lsls	r3, r3, #8
 8104aa0:	b219      	sxth	r1, r3
 8104aa2:	4b54      	ldr	r3, [pc, #336]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104aa4:	795b      	ldrb	r3, [r3, #5]
 8104aa6:	b21a      	sxth	r2, r3
 8104aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104aaa:	3304      	adds	r3, #4
 8104aac:	430a      	orrs	r2, r1
 8104aae:	b212      	sxth	r2, r2
 8104ab0:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8104ab2:	4b50      	ldr	r3, [pc, #320]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104ab4:	7a1b      	ldrb	r3, [r3, #8]
 8104ab6:	021b      	lsls	r3, r3, #8
 8104ab8:	b21a      	sxth	r2, r3
 8104aba:	4b4e      	ldr	r3, [pc, #312]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104abc:	7a5b      	ldrb	r3, [r3, #9]
 8104abe:	b21b      	sxth	r3, r3
 8104ac0:	4313      	orrs	r3, r2
 8104ac2:	b21a      	sxth	r2, r3
 8104ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104ac6:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8104ac8:	4b4a      	ldr	r3, [pc, #296]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104aca:	7a9b      	ldrb	r3, [r3, #10]
 8104acc:	021b      	lsls	r3, r3, #8
 8104ace:	b219      	sxth	r1, r3
 8104ad0:	4b48      	ldr	r3, [pc, #288]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104ad2:	7adb      	ldrb	r3, [r3, #11]
 8104ad4:	b21a      	sxth	r2, r3
 8104ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104ad8:	3302      	adds	r3, #2
 8104ada:	430a      	orrs	r2, r1
 8104adc:	b212      	sxth	r2, r2
 8104ade:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8104ae0:	4b44      	ldr	r3, [pc, #272]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104ae2:	7b1b      	ldrb	r3, [r3, #12]
 8104ae4:	021b      	lsls	r3, r3, #8
 8104ae6:	b219      	sxth	r1, r3
 8104ae8:	4b42      	ldr	r3, [pc, #264]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104aea:	7b5b      	ldrb	r3, [r3, #13]
 8104aec:	b21a      	sxth	r2, r3
 8104aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104af0:	3304      	adds	r3, #4
 8104af2:	430a      	orrs	r2, r1
 8104af4:	b212      	sxth	r2, r2
 8104af6:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8104af8:	4b3e      	ldr	r3, [pc, #248]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104afa:	7bdb      	ldrb	r3, [r3, #15]
 8104afc:	021b      	lsls	r3, r3, #8
 8104afe:	b21a      	sxth	r2, r3
 8104b00:	4b3c      	ldr	r3, [pc, #240]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104b02:	7b9b      	ldrb	r3, [r3, #14]
 8104b04:	b21b      	sxth	r3, r3
 8104b06:	4313      	orrs	r3, r2
 8104b08:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8104b0a:	4b3a      	ldr	r3, [pc, #232]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104b0c:	7c5b      	ldrb	r3, [r3, #17]
 8104b0e:	021b      	lsls	r3, r3, #8
 8104b10:	b21a      	sxth	r2, r3
 8104b12:	4b38      	ldr	r3, [pc, #224]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104b14:	7c1b      	ldrb	r3, [r3, #16]
 8104b16:	b21b      	sxth	r3, r3
 8104b18:	4313      	orrs	r3, r2
 8104b1a:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8104b1c:	4b35      	ldr	r3, [pc, #212]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104b1e:	7cdb      	ldrb	r3, [r3, #19]
 8104b20:	021b      	lsls	r3, r3, #8
 8104b22:	b21a      	sxth	r2, r3
 8104b24:	4b33      	ldr	r3, [pc, #204]	; (8104bf4 <MPU9250_GetData+0x1c8>)
 8104b26:	7c9b      	ldrb	r3, [r3, #18]
 8104b28:	b21b      	sxth	r3, r3
 8104b2a:	4313      	orrs	r3, r2
 8104b2c:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8104b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104b32:	ee07 3a90 	vmov	s15, r3
 8104b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104b3a:	4b2f      	ldr	r3, [pc, #188]	; (8104bf8 <MPU9250_GetData+0x1cc>)
 8104b3c:	781b      	ldrb	r3, [r3, #0]
 8104b3e:	3b80      	subs	r3, #128	; 0x80
 8104b40:	ee07 3a90 	vmov	s15, r3
 8104b44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104b48:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8104bfc <MPU9250_GetData+0x1d0>
 8104b4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104b60:	ee17 3a90 	vmov	r3, s15
 8104b64:	b21a      	sxth	r2, r3
 8104b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104b68:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8104b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8104b6e:	ee07 3a90 	vmov	s15, r3
 8104b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104b76:	4b20      	ldr	r3, [pc, #128]	; (8104bf8 <MPU9250_GetData+0x1cc>)
 8104b78:	785b      	ldrb	r3, [r3, #1]
 8104b7a:	3b80      	subs	r3, #128	; 0x80
 8104b7c:	ee07 3a90 	vmov	s15, r3
 8104b80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104b84:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8104bfc <MPU9250_GetData+0x1d0>
 8104b88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104b9a:	3302      	adds	r3, #2
 8104b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104ba0:	ee17 2a90 	vmov	r2, s15
 8104ba4:	b212      	sxth	r2, r2
 8104ba6:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8104ba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8104bac:	ee07 3a90 	vmov	s15, r3
 8104bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104bb4:	4b10      	ldr	r3, [pc, #64]	; (8104bf8 <MPU9250_GetData+0x1cc>)
 8104bb6:	789b      	ldrb	r3, [r3, #2]
 8104bb8:	3b80      	subs	r3, #128	; 0x80
 8104bba:	ee07 3a90 	vmov	s15, r3
 8104bbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104bc2:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8104bfc <MPU9250_GetData+0x1d0>
 8104bc6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104bd8:	3304      	adds	r3, #4
 8104bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104bde:	ee17 2a90 	vmov	r2, s15
 8104be2:	b212      	sxth	r2, r2
 8104be4:	801a      	strh	r2, [r3, #0]
}
 8104be6:	bf00      	nop
 8104be8:	3708      	adds	r7, #8
 8104bea:	46bd      	mov	sp, r7
 8104bec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104bf0:	b004      	add	sp, #16
 8104bf2:	4770      	bx	lr
 8104bf4:	100002b0 	.word	0x100002b0
 8104bf8:	100002c8 	.word	0x100002c8
 8104bfc:	43800000 	.word	0x43800000

08104c00 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8104c00:	b480      	push	{r7}
 8104c02:	b083      	sub	sp, #12
 8104c04:	af00      	add	r7, sp, #0
 8104c06:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	687a      	ldr	r2, [r7, #4]
 8104c0c:	605a      	str	r2, [r3, #4]
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	685a      	ldr	r2, [r3, #4]
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	601a      	str	r2, [r3, #0]
}
 8104c16:	bf00      	nop
 8104c18:	370c      	adds	r7, #12
 8104c1a:	46bd      	mov	sp, r7
 8104c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c20:	4770      	bx	lr

08104c22 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8104c22:	b480      	push	{r7}
 8104c24:	b083      	sub	sp, #12
 8104c26:	af00      	add	r7, sp, #0
 8104c28:	6078      	str	r0, [r7, #4]
 8104c2a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	685a      	ldr	r2, [r3, #4]
 8104c30:	683b      	ldr	r3, [r7, #0]
 8104c32:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8104c34:	683b      	ldr	r3, [r7, #0]
 8104c36:	687a      	ldr	r2, [r7, #4]
 8104c38:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8104c3a:	683b      	ldr	r3, [r7, #0]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	683a      	ldr	r2, [r7, #0]
 8104c40:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8104c42:	683b      	ldr	r3, [r7, #0]
 8104c44:	685b      	ldr	r3, [r3, #4]
 8104c46:	683a      	ldr	r2, [r7, #0]
 8104c48:	601a      	str	r2, [r3, #0]
}
 8104c4a:	bf00      	nop
 8104c4c:	370c      	adds	r7, #12
 8104c4e:	46bd      	mov	sp, r7
 8104c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c54:	4770      	bx	lr

08104c56 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8104c56:	b580      	push	{r7, lr}
 8104c58:	b082      	sub	sp, #8
 8104c5a:	af00      	add	r7, sp, #0
 8104c5c:	6078      	str	r0, [r7, #4]
 8104c5e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8104c60:	6839      	ldr	r1, [r7, #0]
 8104c62:	6878      	ldr	r0, [r7, #4]
 8104c64:	f7ff ffdd 	bl	8104c22 <metal_list_add_before>
}
 8104c68:	bf00      	nop
 8104c6a:	3708      	adds	r7, #8
 8104c6c:	46bd      	mov	sp, r7
 8104c6e:	bd80      	pop	{r7, pc}

08104c70 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8104c70:	b580      	push	{r7, lr}
 8104c72:	b082      	sub	sp, #8
 8104c74:	af00      	add	r7, sp, #0
 8104c76:	6078      	str	r0, [r7, #4]
 8104c78:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8104c7a:	6839      	ldr	r1, [r7, #0]
 8104c7c:	6878      	ldr	r0, [r7, #4]
 8104c7e:	f001 fdb9 	bl	81067f4 <metal_machine_cache_flush>
}
 8104c82:	bf00      	nop
 8104c84:	3708      	adds	r7, #8
 8104c86:	46bd      	mov	sp, r7
 8104c88:	bd80      	pop	{r7, pc}

08104c8a <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8104c8a:	b580      	push	{r7, lr}
 8104c8c:	b082      	sub	sp, #8
 8104c8e:	af00      	add	r7, sp, #0
 8104c90:	6078      	str	r0, [r7, #4]
 8104c92:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8104c94:	6839      	ldr	r1, [r7, #0]
 8104c96:	6878      	ldr	r0, [r7, #4]
 8104c98:	f001 fdb7 	bl	810680a <metal_machine_cache_invalidate>
}
 8104c9c:	bf00      	nop
 8104c9e:	3708      	adds	r7, #8
 8104ca0:	46bd      	mov	sp, r7
 8104ca2:	bd80      	pop	{r7, pc}

08104ca4 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8104ca4:	b580      	push	{r7, lr}
 8104ca6:	b082      	sub	sp, #8
 8104ca8:	af00      	add	r7, sp, #0
 8104caa:	6078      	str	r0, [r7, #4]
 8104cac:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8104cae:	6839      	ldr	r1, [r7, #0]
 8104cb0:	6878      	ldr	r0, [r7, #4]
 8104cb2:	f7ff ffdd 	bl	8104c70 <__metal_cache_flush>
}
 8104cb6:	bf00      	nop
 8104cb8:	3708      	adds	r7, #8
 8104cba:	46bd      	mov	sp, r7
 8104cbc:	bd80      	pop	{r7, pc}

08104cbe <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8104cbe:	b580      	push	{r7, lr}
 8104cc0:	b082      	sub	sp, #8
 8104cc2:	af00      	add	r7, sp, #0
 8104cc4:	6078      	str	r0, [r7, #4]
 8104cc6:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8104cc8:	6839      	ldr	r1, [r7, #0]
 8104cca:	6878      	ldr	r0, [r7, #4]
 8104ccc:	f7ff ffdd 	bl	8104c8a <__metal_cache_invalidate>
}
 8104cd0:	bf00      	nop
 8104cd2:	3708      	adds	r7, #8
 8104cd4:	46bd      	mov	sp, r7
 8104cd6:	bd80      	pop	{r7, pc}

08104cd8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8104cd8:	b580      	push	{r7, lr}
 8104cda:	b082      	sub	sp, #8
 8104cdc:	af00      	add	r7, sp, #0
 8104cde:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	2b00      	cmp	r3, #0
 8104ce4:	d008      	beq.n	8104cf8 <metal_bus_register+0x20>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d004      	beq.n	8104cf8 <metal_bus_register+0x20>
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	781b      	ldrb	r3, [r3, #0]
 8104cf4:	2b00      	cmp	r3, #0
 8104cf6:	d102      	bne.n	8104cfe <metal_bus_register+0x26>
		return -EINVAL;
 8104cf8:	f06f 0315 	mvn.w	r3, #21
 8104cfc:	e026      	b.n	8104d4c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	681b      	ldr	r3, [r3, #0]
 8104d02:	2100      	movs	r1, #0
 8104d04:	4618      	mov	r0, r3
 8104d06:	f000 f82b 	bl	8104d60 <metal_bus_find>
 8104d0a:	4603      	mov	r3, r0
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d102      	bne.n	8104d16 <metal_bus_register+0x3e>
		return -EEXIST;
 8104d10:	f06f 0310 	mvn.w	r3, #16
 8104d14:	e01a      	b.n	8104d4c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	331c      	adds	r3, #28
 8104d1a:	4618      	mov	r0, r3
 8104d1c:	f7ff ff70 	bl	8104c00 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	3324      	adds	r3, #36	; 0x24
 8104d24:	4619      	mov	r1, r3
 8104d26:	480b      	ldr	r0, [pc, #44]	; (8104d54 <metal_bus_register+0x7c>)
 8104d28:	f7ff ff95 	bl	8104c56 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8104d2c:	4b0a      	ldr	r3, [pc, #40]	; (8104d58 <metal_bus_register+0x80>)
 8104d2e:	781b      	ldrb	r3, [r3, #0]
 8104d30:	2b06      	cmp	r3, #6
 8104d32:	d90a      	bls.n	8104d4a <metal_bus_register+0x72>
 8104d34:	4b08      	ldr	r3, [pc, #32]	; (8104d58 <metal_bus_register+0x80>)
 8104d36:	685b      	ldr	r3, [r3, #4]
 8104d38:	2b00      	cmp	r3, #0
 8104d3a:	d006      	beq.n	8104d4a <metal_bus_register+0x72>
 8104d3c:	4b06      	ldr	r3, [pc, #24]	; (8104d58 <metal_bus_register+0x80>)
 8104d3e:	685b      	ldr	r3, [r3, #4]
 8104d40:	687a      	ldr	r2, [r7, #4]
 8104d42:	6812      	ldr	r2, [r2, #0]
 8104d44:	4905      	ldr	r1, [pc, #20]	; (8104d5c <metal_bus_register+0x84>)
 8104d46:	2007      	movs	r0, #7
 8104d48:	4798      	blx	r3
	return 0;
 8104d4a:	2300      	movs	r3, #0
}
 8104d4c:	4618      	mov	r0, r3
 8104d4e:	3708      	adds	r7, #8
 8104d50:	46bd      	mov	sp, r7
 8104d52:	bd80      	pop	{r7, pc}
 8104d54:	10000504 	.word	0x10000504
 8104d58:	100004fc 	.word	0x100004fc
 8104d5c:	0810bb68 	.word	0x0810bb68

08104d60 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8104d60:	b580      	push	{r7, lr}
 8104d62:	b084      	sub	sp, #16
 8104d64:	af00      	add	r7, sp, #0
 8104d66:	6078      	str	r0, [r7, #4]
 8104d68:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8104d6a:	4b13      	ldr	r3, [pc, #76]	; (8104db8 <metal_bus_find+0x58>)
 8104d6c:	689b      	ldr	r3, [r3, #8]
 8104d6e:	60fb      	str	r3, [r7, #12]
 8104d70:	e017      	b.n	8104da2 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	3b24      	subs	r3, #36	; 0x24
 8104d76:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8104d78:	68bb      	ldr	r3, [r7, #8]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	6879      	ldr	r1, [r7, #4]
 8104d7e:	4618      	mov	r0, r3
 8104d80:	f7fb faae 	bl	81002e0 <strcmp>
 8104d84:	4603      	mov	r3, r0
 8104d86:	2b00      	cmp	r3, #0
 8104d88:	d003      	beq.n	8104d92 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	60fb      	str	r3, [r7, #12]
 8104d90:	e007      	b.n	8104da2 <metal_bus_find+0x42>
			continue;
		if (result)
 8104d92:	683b      	ldr	r3, [r7, #0]
 8104d94:	2b00      	cmp	r3, #0
 8104d96:	d002      	beq.n	8104d9e <metal_bus_find+0x3e>
			*result = bus;
 8104d98:	683b      	ldr	r3, [r7, #0]
 8104d9a:	68ba      	ldr	r2, [r7, #8]
 8104d9c:	601a      	str	r2, [r3, #0]
		return 0;
 8104d9e:	2300      	movs	r3, #0
 8104da0:	e005      	b.n	8104dae <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104da2:	68fb      	ldr	r3, [r7, #12]
 8104da4:	4a05      	ldr	r2, [pc, #20]	; (8104dbc <metal_bus_find+0x5c>)
 8104da6:	4293      	cmp	r3, r2
 8104da8:	d1e3      	bne.n	8104d72 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8104daa:	f06f 0301 	mvn.w	r3, #1
}
 8104dae:	4618      	mov	r0, r3
 8104db0:	3710      	adds	r7, #16
 8104db2:	46bd      	mov	sp, r7
 8104db4:	bd80      	pop	{r7, pc}
 8104db6:	bf00      	nop
 8104db8:	100004fc 	.word	0x100004fc
 8104dbc:	10000504 	.word	0x10000504

08104dc0 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8104dc0:	b580      	push	{r7, lr}
 8104dc2:	b086      	sub	sp, #24
 8104dc4:	af00      	add	r7, sp, #0
 8104dc6:	60f8      	str	r0, [r7, #12]
 8104dc8:	60b9      	str	r1, [r7, #8]
 8104dca:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8104dcc:	68fb      	ldr	r3, [r7, #12]
 8104dce:	2b00      	cmp	r3, #0
 8104dd0:	d00d      	beq.n	8104dee <metal_device_open+0x2e>
 8104dd2:	68fb      	ldr	r3, [r7, #12]
 8104dd4:	781b      	ldrb	r3, [r3, #0]
 8104dd6:	2b00      	cmp	r3, #0
 8104dd8:	d009      	beq.n	8104dee <metal_device_open+0x2e>
 8104dda:	68bb      	ldr	r3, [r7, #8]
 8104ddc:	2b00      	cmp	r3, #0
 8104dde:	d006      	beq.n	8104dee <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8104de0:	68bb      	ldr	r3, [r7, #8]
 8104de2:	781b      	ldrb	r3, [r3, #0]
 8104de4:	2b00      	cmp	r3, #0
 8104de6:	d002      	beq.n	8104dee <metal_device_open+0x2e>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	2b00      	cmp	r3, #0
 8104dec:	d102      	bne.n	8104df4 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8104dee:	f06f 0315 	mvn.w	r3, #21
 8104df2:	e01f      	b.n	8104e34 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8104df4:	f107 0310 	add.w	r3, r7, #16
 8104df8:	4619      	mov	r1, r3
 8104dfa:	68f8      	ldr	r0, [r7, #12]
 8104dfc:	f7ff ffb0 	bl	8104d60 <metal_bus_find>
 8104e00:	6178      	str	r0, [r7, #20]
	if (error)
 8104e02:	697b      	ldr	r3, [r7, #20]
 8104e04:	2b00      	cmp	r3, #0
 8104e06:	d001      	beq.n	8104e0c <metal_device_open+0x4c>
		return error;
 8104e08:	697b      	ldr	r3, [r7, #20]
 8104e0a:	e013      	b.n	8104e34 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8104e0c:	693b      	ldr	r3, [r7, #16]
 8104e0e:	689b      	ldr	r3, [r3, #8]
 8104e10:	2b00      	cmp	r3, #0
 8104e12:	d102      	bne.n	8104e1a <metal_device_open+0x5a>
		return -ENODEV;
 8104e14:	f06f 0312 	mvn.w	r3, #18
 8104e18:	e00c      	b.n	8104e34 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8104e1a:	693b      	ldr	r3, [r7, #16]
 8104e1c:	689b      	ldr	r3, [r3, #8]
 8104e1e:	6938      	ldr	r0, [r7, #16]
 8104e20:	687a      	ldr	r2, [r7, #4]
 8104e22:	68b9      	ldr	r1, [r7, #8]
 8104e24:	4798      	blx	r3
 8104e26:	6178      	str	r0, [r7, #20]
	if (error)
 8104e28:	697b      	ldr	r3, [r7, #20]
 8104e2a:	2b00      	cmp	r3, #0
 8104e2c:	d001      	beq.n	8104e32 <metal_device_open+0x72>
		return error;
 8104e2e:	697b      	ldr	r3, [r7, #20]
 8104e30:	e000      	b.n	8104e34 <metal_device_open+0x74>

	return 0;
 8104e32:	2300      	movs	r3, #0
}
 8104e34:	4618      	mov	r0, r3
 8104e36:	3718      	adds	r7, #24
 8104e38:	46bd      	mov	sp, r7
 8104e3a:	bd80      	pop	{r7, pc}

08104e3c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8104e3c:	b580      	push	{r7, lr}
 8104e3e:	b082      	sub	sp, #8
 8104e40:	af00      	add	r7, sp, #0
 8104e42:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	681b      	ldr	r3, [r3, #0]
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d008      	beq.n	8104e5e <metal_register_generic_device+0x22>
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	781b      	ldrb	r3, [r3, #0]
 8104e52:	2b00      	cmp	r3, #0
 8104e54:	d003      	beq.n	8104e5e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8104e5a:	2b02      	cmp	r3, #2
 8104e5c:	d902      	bls.n	8104e64 <metal_register_generic_device+0x28>
		return -EINVAL;
 8104e5e:	f06f 0315 	mvn.w	r3, #21
 8104e62:	e009      	b.n	8104e78 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	4a06      	ldr	r2, [pc, #24]	; (8104e80 <metal_register_generic_device+0x44>)
 8104e68:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	336c      	adds	r3, #108	; 0x6c
 8104e6e:	4619      	mov	r1, r3
 8104e70:	4804      	ldr	r0, [pc, #16]	; (8104e84 <metal_register_generic_device+0x48>)
 8104e72:	f7ff fef0 	bl	8104c56 <metal_list_add_tail>
			    &device->node);
	return 0;
 8104e76:	2300      	movs	r3, #0
}
 8104e78:	4618      	mov	r0, r3
 8104e7a:	3708      	adds	r7, #8
 8104e7c:	46bd      	mov	sp, r7
 8104e7e:	bd80      	pop	{r7, pc}
 8104e80:	10000010 	.word	0x10000010
 8104e84:	10000514 	.word	0x10000514

08104e88 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8104e88:	b580      	push	{r7, lr}
 8104e8a:	b086      	sub	sp, #24
 8104e8c:	af00      	add	r7, sp, #0
 8104e8e:	60f8      	str	r0, [r7, #12]
 8104e90:	60b9      	str	r1, [r7, #8]
 8104e92:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104e94:	4b12      	ldr	r3, [pc, #72]	; (8104ee0 <metal_generic_dev_open+0x58>)
 8104e96:	699b      	ldr	r3, [r3, #24]
 8104e98:	617b      	str	r3, [r7, #20]
 8104e9a:	e017      	b.n	8104ecc <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8104e9c:	697b      	ldr	r3, [r7, #20]
 8104e9e:	3b6c      	subs	r3, #108	; 0x6c
 8104ea0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8104ea2:	693b      	ldr	r3, [r7, #16]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	68b9      	ldr	r1, [r7, #8]
 8104ea8:	4618      	mov	r0, r3
 8104eaa:	f7fb fa19 	bl	81002e0 <strcmp>
 8104eae:	4603      	mov	r3, r0
 8104eb0:	2b00      	cmp	r3, #0
 8104eb2:	d003      	beq.n	8104ebc <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104eb4:	697b      	ldr	r3, [r7, #20]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	617b      	str	r3, [r7, #20]
 8104eba:	e007      	b.n	8104ecc <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	693a      	ldr	r2, [r7, #16]
 8104ec0:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8104ec2:	6938      	ldr	r0, [r7, #16]
 8104ec4:	f000 f88c 	bl	8104fe0 <metal_generic_dev_sys_open>
 8104ec8:	4603      	mov	r3, r0
 8104eca:	e005      	b.n	8104ed8 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104ecc:	697b      	ldr	r3, [r7, #20]
 8104ece:	4a05      	ldr	r2, [pc, #20]	; (8104ee4 <metal_generic_dev_open+0x5c>)
 8104ed0:	4293      	cmp	r3, r2
 8104ed2:	d1e3      	bne.n	8104e9c <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8104ed4:	f06f 0312 	mvn.w	r3, #18
}
 8104ed8:	4618      	mov	r0, r3
 8104eda:	3718      	adds	r7, #24
 8104edc:	46bd      	mov	sp, r7
 8104ede:	bd80      	pop	{r7, pc}
 8104ee0:	100004fc 	.word	0x100004fc
 8104ee4:	10000514 	.word	0x10000514

08104ee8 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8104ee8:	b580      	push	{r7, lr}
 8104eea:	b086      	sub	sp, #24
 8104eec:	af00      	add	r7, sp, #0
 8104eee:	60f8      	str	r0, [r7, #12]
 8104ef0:	60b9      	str	r1, [r7, #8]
 8104ef2:	607a      	str	r2, [r7, #4]
 8104ef4:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8104ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104ef8:	683b      	ldr	r3, [r7, #0]
 8104efa:	429a      	cmp	r2, r3
 8104efc:	d009      	beq.n	8104f12 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8104efe:	6a3a      	ldr	r2, [r7, #32]
 8104f00:	4613      	mov	r3, r2
 8104f02:	005b      	lsls	r3, r3, #1
 8104f04:	4413      	add	r3, r2
 8104f06:	009b      	lsls	r3, r3, #2
 8104f08:	461a      	mov	r2, r3
 8104f0a:	6839      	ldr	r1, [r7, #0]
 8104f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8104f0e:	f002 fa0d 	bl	810732c <memcpy>
	for (i = 0; i < nents_in; i++) {
 8104f12:	2300      	movs	r3, #0
 8104f14:	617b      	str	r3, [r7, #20]
 8104f16:	e02f      	b.n	8104f78 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	2b02      	cmp	r3, #2
 8104f1c:	d114      	bne.n	8104f48 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8104f1e:	697a      	ldr	r2, [r7, #20]
 8104f20:	4613      	mov	r3, r2
 8104f22:	005b      	lsls	r3, r3, #1
 8104f24:	4413      	add	r3, r2
 8104f26:	009b      	lsls	r3, r3, #2
 8104f28:	461a      	mov	r2, r3
 8104f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f2c:	4413      	add	r3, r2
 8104f2e:	6818      	ldr	r0, [r3, #0]
 8104f30:	697a      	ldr	r2, [r7, #20]
 8104f32:	4613      	mov	r3, r2
 8104f34:	005b      	lsls	r3, r3, #1
 8104f36:	4413      	add	r3, r2
 8104f38:	009b      	lsls	r3, r3, #2
 8104f3a:	461a      	mov	r2, r3
 8104f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f3e:	4413      	add	r3, r2
 8104f40:	689b      	ldr	r3, [r3, #8]
 8104f42:	4619      	mov	r1, r3
 8104f44:	f7ff feae 	bl	8104ca4 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8104f48:	697a      	ldr	r2, [r7, #20]
 8104f4a:	4613      	mov	r3, r2
 8104f4c:	005b      	lsls	r3, r3, #1
 8104f4e:	4413      	add	r3, r2
 8104f50:	009b      	lsls	r3, r3, #2
 8104f52:	461a      	mov	r2, r3
 8104f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f56:	4413      	add	r3, r2
 8104f58:	6818      	ldr	r0, [r3, #0]
 8104f5a:	697a      	ldr	r2, [r7, #20]
 8104f5c:	4613      	mov	r3, r2
 8104f5e:	005b      	lsls	r3, r3, #1
 8104f60:	4413      	add	r3, r2
 8104f62:	009b      	lsls	r3, r3, #2
 8104f64:	461a      	mov	r2, r3
 8104f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f68:	4413      	add	r3, r2
 8104f6a:	689b      	ldr	r3, [r3, #8]
 8104f6c:	4619      	mov	r1, r3
 8104f6e:	f7ff fea6 	bl	8104cbe <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8104f72:	697b      	ldr	r3, [r7, #20]
 8104f74:	3301      	adds	r3, #1
 8104f76:	617b      	str	r3, [r7, #20]
 8104f78:	697a      	ldr	r2, [r7, #20]
 8104f7a:	6a3b      	ldr	r3, [r7, #32]
 8104f7c:	429a      	cmp	r2, r3
 8104f7e:	dbcb      	blt.n	8104f18 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8104f80:	6a3b      	ldr	r3, [r7, #32]
}
 8104f82:	4618      	mov	r0, r3
 8104f84:	3718      	adds	r7, #24
 8104f86:	46bd      	mov	sp, r7
 8104f88:	bd80      	pop	{r7, pc}

08104f8a <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8104f8a:	b580      	push	{r7, lr}
 8104f8c:	b086      	sub	sp, #24
 8104f8e:	af00      	add	r7, sp, #0
 8104f90:	60f8      	str	r0, [r7, #12]
 8104f92:	60b9      	str	r1, [r7, #8]
 8104f94:	607a      	str	r2, [r7, #4]
 8104f96:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8104f98:	2300      	movs	r3, #0
 8104f9a:	617b      	str	r3, [r7, #20]
 8104f9c:	e017      	b.n	8104fce <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8104f9e:	697a      	ldr	r2, [r7, #20]
 8104fa0:	4613      	mov	r3, r2
 8104fa2:	005b      	lsls	r3, r3, #1
 8104fa4:	4413      	add	r3, r2
 8104fa6:	009b      	lsls	r3, r3, #2
 8104fa8:	461a      	mov	r2, r3
 8104faa:	683b      	ldr	r3, [r7, #0]
 8104fac:	4413      	add	r3, r2
 8104fae:	6818      	ldr	r0, [r3, #0]
 8104fb0:	697a      	ldr	r2, [r7, #20]
 8104fb2:	4613      	mov	r3, r2
 8104fb4:	005b      	lsls	r3, r3, #1
 8104fb6:	4413      	add	r3, r2
 8104fb8:	009b      	lsls	r3, r3, #2
 8104fba:	461a      	mov	r2, r3
 8104fbc:	683b      	ldr	r3, [r7, #0]
 8104fbe:	4413      	add	r3, r2
 8104fc0:	689b      	ldr	r3, [r3, #8]
 8104fc2:	4619      	mov	r1, r3
 8104fc4:	f7ff fe7b 	bl	8104cbe <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8104fc8:	697b      	ldr	r3, [r7, #20]
 8104fca:	3301      	adds	r3, #1
 8104fcc:	617b      	str	r3, [r7, #20]
 8104fce:	697a      	ldr	r2, [r7, #20]
 8104fd0:	6a3b      	ldr	r3, [r7, #32]
 8104fd2:	429a      	cmp	r2, r3
 8104fd4:	dbe3      	blt.n	8104f9e <metal_generic_dev_dma_unmap+0x14>
	}
}
 8104fd6:	bf00      	nop
 8104fd8:	bf00      	nop
 8104fda:	3718      	adds	r7, #24
 8104fdc:	46bd      	mov	sp, r7
 8104fde:	bd80      	pop	{r7, pc}

08104fe0 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8104fe0:	b580      	push	{r7, lr}
 8104fe2:	b084      	sub	sp, #16
 8104fe4:	af00      	add	r7, sp, #0
 8104fe6:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8104fe8:	2300      	movs	r3, #0
 8104fea:	60fb      	str	r3, [r7, #12]
 8104fec:	e013      	b.n	8105016 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8104fee:	68fa      	ldr	r2, [r7, #12]
 8104ff0:	4613      	mov	r3, r2
 8104ff2:	005b      	lsls	r3, r3, #1
 8104ff4:	4413      	add	r3, r2
 8104ff6:	011b      	lsls	r3, r3, #4
 8104ff8:	3308      	adds	r3, #8
 8104ffa:	687a      	ldr	r2, [r7, #4]
 8104ffc:	4413      	add	r3, r2
 8104ffe:	3304      	adds	r3, #4
 8105000:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8105002:	68bb      	ldr	r3, [r7, #8]
 8105004:	689b      	ldr	r3, [r3, #8]
 8105006:	2b00      	cmp	r3, #0
 8105008:	d00b      	beq.n	8105022 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 810500a:	68b8      	ldr	r0, [r7, #8]
 810500c:	f000 f81e 	bl	810504c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	3301      	adds	r3, #1
 8105014:	60fb      	str	r3, [r7, #12]
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	689b      	ldr	r3, [r3, #8]
 810501a:	68fa      	ldr	r2, [r7, #12]
 810501c:	429a      	cmp	r2, r3
 810501e:	d3e6      	bcc.n	8104fee <metal_generic_dev_sys_open+0xe>
 8105020:	e000      	b.n	8105024 <metal_generic_dev_sys_open+0x44>
			break;
 8105022:	bf00      	nop
	}

	return 0;
 8105024:	2300      	movs	r3, #0
}
 8105026:	4618      	mov	r0, r3
 8105028:	3710      	adds	r7, #16
 810502a:	46bd      	mov	sp, r7
 810502c:	bd80      	pop	{r7, pc}
	...

08105030 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8105030:	b580      	push	{r7, lr}
 8105032:	b082      	sub	sp, #8
 8105034:	af00      	add	r7, sp, #0
 8105036:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8105038:	4803      	ldr	r0, [pc, #12]	; (8105048 <metal_sys_init+0x18>)
 810503a:	f7ff fe4d 	bl	8104cd8 <metal_bus_register>
	return 0;
 810503e:	2300      	movs	r3, #0
}
 8105040:	4618      	mov	r0, r3
 8105042:	3708      	adds	r7, #8
 8105044:	46bd      	mov	sp, r7
 8105046:	bd80      	pop	{r7, pc}
 8105048:	10000010 	.word	0x10000010

0810504c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 810504c:	b580      	push	{r7, lr}
 810504e:	b086      	sub	sp, #24
 8105050:	af00      	add	r7, sp, #0
 8105052:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	689b      	ldr	r3, [r3, #8]
 810505e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8105060:	693b      	ldr	r3, [r7, #16]
 8105062:	2b00      	cmp	r3, #0
 8105064:	d02c      	beq.n	81050c0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	68db      	ldr	r3, [r3, #12]
 810506a:	693a      	ldr	r2, [r7, #16]
 810506c:	fa22 f303 	lsr.w	r3, r2, r3
 8105070:	2b00      	cmp	r3, #0
 8105072:	d005      	beq.n	8105080 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	68db      	ldr	r3, [r3, #12]
 8105078:	2201      	movs	r2, #1
 810507a:	fa02 f303 	lsl.w	r3, r2, r3
 810507e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8105080:	2300      	movs	r3, #0
 8105082:	617b      	str	r3, [r7, #20]
 8105084:	e013      	b.n	81050ae <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	685a      	ldr	r2, [r3, #4]
 810508a:	697b      	ldr	r3, [r7, #20]
 810508c:	009b      	lsls	r3, r3, #2
 810508e:	4413      	add	r3, r2
 8105090:	6819      	ldr	r1, [r3, #0]
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	695b      	ldr	r3, [r3, #20]
 8105096:	693a      	ldr	r2, [r7, #16]
 8105098:	68f8      	ldr	r0, [r7, #12]
 810509a:	f001 fbc1 	bl	8106820 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810509e:	693b      	ldr	r3, [r7, #16]
 81050a0:	009b      	lsls	r3, r3, #2
 81050a2:	68fa      	ldr	r2, [r7, #12]
 81050a4:	4413      	add	r3, r2
 81050a6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 81050a8:	697b      	ldr	r3, [r7, #20]
 81050aa:	3301      	adds	r3, #1
 81050ac:	617b      	str	r3, [r7, #20]
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	689a      	ldr	r2, [r3, #8]
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	68db      	ldr	r3, [r3, #12]
 81050b6:	fa22 f303 	lsr.w	r3, r2, r3
 81050ba:	697a      	ldr	r2, [r7, #20]
 81050bc:	429a      	cmp	r2, r3
 81050be:	d9e2      	bls.n	8105086 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 81050c0:	bf00      	nop
 81050c2:	3718      	adds	r7, #24
 81050c4:	46bd      	mov	sp, r7
 81050c6:	bd80      	pop	{r7, pc}

081050c8 <metal_list_init>:
{
 81050c8:	b480      	push	{r7}
 81050ca:	b083      	sub	sp, #12
 81050cc:	af00      	add	r7, sp, #0
 81050ce:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	687a      	ldr	r2, [r7, #4]
 81050d4:	605a      	str	r2, [r3, #4]
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	685a      	ldr	r2, [r3, #4]
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	601a      	str	r2, [r3, #0]
}
 81050de:	bf00      	nop
 81050e0:	370c      	adds	r7, #12
 81050e2:	46bd      	mov	sp, r7
 81050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050e8:	4770      	bx	lr
	...

081050ec <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 81050ec:	b580      	push	{r7, lr}
 81050ee:	b084      	sub	sp, #16
 81050f0:	af00      	add	r7, sp, #0
 81050f2:	6078      	str	r0, [r7, #4]
	int error = 0;
 81050f4:	2300      	movs	r3, #0
 81050f6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 81050f8:	2220      	movs	r2, #32
 81050fa:	2100      	movs	r1, #0
 81050fc:	4810      	ldr	r0, [pc, #64]	; (8105140 <metal_init+0x54>)
 81050fe:	f002 f923 	bl	8107348 <memset>

	_metal.common.log_handler   = params->log_handler;
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	4a0e      	ldr	r2, [pc, #56]	; (8105140 <metal_init+0x54>)
 8105108:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	791a      	ldrb	r2, [r3, #4]
 810510e:	4b0c      	ldr	r3, [pc, #48]	; (8105140 <metal_init+0x54>)
 8105110:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8105112:	480c      	ldr	r0, [pc, #48]	; (8105144 <metal_init+0x58>)
 8105114:	f7ff ffd8 	bl	81050c8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8105118:	480b      	ldr	r0, [pc, #44]	; (8105148 <metal_init+0x5c>)
 810511a:	f7ff ffd5 	bl	81050c8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 810511e:	480b      	ldr	r0, [pc, #44]	; (810514c <metal_init+0x60>)
 8105120:	f7ff ffd2 	bl	81050c8 <metal_list_init>

	error = metal_sys_init(params);
 8105124:	6878      	ldr	r0, [r7, #4]
 8105126:	f7ff ff83 	bl	8105030 <metal_sys_init>
 810512a:	60f8      	str	r0, [r7, #12]
	if (error)
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	2b00      	cmp	r3, #0
 8105130:	d001      	beq.n	8105136 <metal_init+0x4a>
		return error;
 8105132:	68fb      	ldr	r3, [r7, #12]
 8105134:	e000      	b.n	8105138 <metal_init+0x4c>

	return error;
 8105136:	68fb      	ldr	r3, [r7, #12]
}
 8105138:	4618      	mov	r0, r3
 810513a:	3710      	adds	r7, #16
 810513c:	46bd      	mov	sp, r7
 810513e:	bd80      	pop	{r7, pc}
 8105140:	100004fc 	.word	0x100004fc
 8105144:	10000504 	.word	0x10000504
 8105148:	1000050c 	.word	0x1000050c
 810514c:	10000514 	.word	0x10000514

08105150 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8105150:	b480      	push	{r7}
 8105152:	b083      	sub	sp, #12
 8105154:	af00      	add	r7, sp, #0
 8105156:	6078      	str	r0, [r7, #4]
 8105158:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 810515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105162:	d009      	beq.n	8105178 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	689b      	ldr	r3, [r3, #8]
 8105168:	683a      	ldr	r2, [r7, #0]
 810516a:	429a      	cmp	r2, r3
 810516c:	d804      	bhi.n	8105178 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8105172:	683b      	ldr	r3, [r7, #0]
 8105174:	4413      	add	r3, r2
 8105176:	e000      	b.n	810517a <metal_io_virt+0x2a>
 8105178:	2300      	movs	r3, #0
}
 810517a:	4618      	mov	r0, r3
 810517c:	370c      	adds	r7, #12
 810517e:	46bd      	mov	sp, r7
 8105180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105184:	4770      	bx	lr

08105186 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8105186:	b5b0      	push	{r4, r5, r7, lr}
 8105188:	b08a      	sub	sp, #40	; 0x28
 810518a:	af00      	add	r7, sp, #0
 810518c:	60f8      	str	r0, [r7, #12]
 810518e:	60b9      	str	r1, [r7, #8]
 8105190:	607a      	str	r2, [r7, #4]
 8105192:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8105194:	f107 0310 	add.w	r3, r7, #16
 8105198:	2200      	movs	r2, #0
 810519a:	601a      	str	r2, [r3, #0]
 810519c:	605a      	str	r2, [r3, #4]
 810519e:	609a      	str	r2, [r3, #8]
 81051a0:	60da      	str	r2, [r3, #12]
 81051a2:	611a      	str	r2, [r3, #16]
 81051a4:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 81051a6:	68fb      	ldr	r3, [r7, #12]
 81051a8:	68ba      	ldr	r2, [r7, #8]
 81051aa:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 81051ac:	68fb      	ldr	r3, [r7, #12]
 81051ae:	687a      	ldr	r2, [r7, #4]
 81051b0:	605a      	str	r2, [r3, #4]
	io->size = size;
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	683a      	ldr	r2, [r7, #0]
 81051b6:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81051bc:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 81051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051c0:	2b1f      	cmp	r3, #31
 81051c2:	d904      	bls.n	81051ce <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	f04f 32ff 	mov.w	r2, #4294967295
 81051ca:	611a      	str	r2, [r3, #16]
 81051cc:	e006      	b.n	81051dc <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 81051ce:	2201      	movs	r2, #1
 81051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051d2:	fa02 f303 	lsl.w	r3, r2, r3
 81051d6:	1e5a      	subs	r2, r3, #1
 81051d8:	68fb      	ldr	r3, [r7, #12]
 81051da:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 81051dc:	68fb      	ldr	r3, [r7, #12]
 81051de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81051e0:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 81051e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81051e4:	2b00      	cmp	r3, #0
 81051e6:	d00b      	beq.n	8105200 <metal_io_init+0x7a>
 81051e8:	68fb      	ldr	r3, [r7, #12]
 81051ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81051ec:	f103 0418 	add.w	r4, r3, #24
 81051f0:	4615      	mov	r5, r2
 81051f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81051f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81051f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 81051fa:	e884 0003 	stmia.w	r4, {r0, r1}
 81051fe:	e00a      	b.n	8105216 <metal_io_init+0x90>
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	f103 0418 	add.w	r4, r3, #24
 8105206:	f107 0510 	add.w	r5, r7, #16
 810520a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810520c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810520e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8105212:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8105216:	68f8      	ldr	r0, [r7, #12]
 8105218:	f7ff ff18 	bl	810504c <metal_sys_io_mem_map>
}
 810521c:	bf00      	nop
 810521e:	3728      	adds	r7, #40	; 0x28
 8105220:	46bd      	mov	sp, r7
 8105222:	bdb0      	pop	{r4, r5, r7, pc}

08105224 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8105224:	b590      	push	{r4, r7, lr}
 8105226:	b08b      	sub	sp, #44	; 0x2c
 8105228:	af02      	add	r7, sp, #8
 810522a:	60f8      	str	r0, [r7, #12]
 810522c:	60b9      	str	r1, [r7, #8]
 810522e:	607a      	str	r2, [r7, #4]
 8105230:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8105232:	68b9      	ldr	r1, [r7, #8]
 8105234:	68f8      	ldr	r0, [r7, #12]
 8105236:	f7ff ff8b 	bl	8105150 <metal_io_virt>
 810523a:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8105240:	68fb      	ldr	r3, [r7, #12]
 8105242:	689b      	ldr	r3, [r3, #8]
 8105244:	68ba      	ldr	r2, [r7, #8]
 8105246:	429a      	cmp	r2, r3
 8105248:	d902      	bls.n	8105250 <metal_io_block_read+0x2c>
		return -ERANGE;
 810524a:	f06f 0321 	mvn.w	r3, #33	; 0x21
 810524e:	e05c      	b.n	810530a <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8105250:	683a      	ldr	r2, [r7, #0]
 8105252:	68bb      	ldr	r3, [r7, #8]
 8105254:	441a      	add	r2, r3
 8105256:	68fb      	ldr	r3, [r7, #12]
 8105258:	689b      	ldr	r3, [r3, #8]
 810525a:	429a      	cmp	r2, r3
 810525c:	d904      	bls.n	8105268 <metal_io_block_read+0x44>
		len = io->size - offset;
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	689a      	ldr	r2, [r3, #8]
 8105262:	68bb      	ldr	r3, [r7, #8]
 8105264:	1ad3      	subs	r3, r2, r3
 8105266:	603b      	str	r3, [r7, #0]
	retlen = len;
 8105268:	683b      	ldr	r3, [r7, #0]
 810526a:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 810526c:	68fb      	ldr	r3, [r7, #12]
 810526e:	6a1b      	ldr	r3, [r3, #32]
 8105270:	2b00      	cmp	r3, #0
 8105272:	d00a      	beq.n	810528a <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8105274:	68fb      	ldr	r3, [r7, #12]
 8105276:	6a1c      	ldr	r4, [r3, #32]
 8105278:	683b      	ldr	r3, [r7, #0]
 810527a:	9300      	str	r3, [sp, #0]
 810527c:	2305      	movs	r3, #5
 810527e:	687a      	ldr	r2, [r7, #4]
 8105280:	68b9      	ldr	r1, [r7, #8]
 8105282:	68f8      	ldr	r0, [r7, #12]
 8105284:	47a0      	blx	r4
 8105286:	6178      	str	r0, [r7, #20]
 8105288:	e03e      	b.n	8105308 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 810528a:	f3bf 8f5b 	dmb	ish
		while ( len && (
 810528e:	e00c      	b.n	81052aa <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8105290:	69fb      	ldr	r3, [r7, #28]
 8105292:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8105294:	69bb      	ldr	r3, [r7, #24]
 8105296:	701a      	strb	r2, [r3, #0]
			dest++;
 8105298:	69bb      	ldr	r3, [r7, #24]
 810529a:	3301      	adds	r3, #1
 810529c:	61bb      	str	r3, [r7, #24]
			ptr++;
 810529e:	69fb      	ldr	r3, [r7, #28]
 81052a0:	3301      	adds	r3, #1
 81052a2:	61fb      	str	r3, [r7, #28]
			len--;
 81052a4:	683b      	ldr	r3, [r7, #0]
 81052a6:	3b01      	subs	r3, #1
 81052a8:	603b      	str	r3, [r7, #0]
		while ( len && (
 81052aa:	683b      	ldr	r3, [r7, #0]
 81052ac:	2b00      	cmp	r3, #0
 81052ae:	d017      	beq.n	81052e0 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 81052b0:	69bb      	ldr	r3, [r7, #24]
 81052b2:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81052b6:	2b00      	cmp	r3, #0
 81052b8:	d1ea      	bne.n	8105290 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 81052ba:	69fb      	ldr	r3, [r7, #28]
 81052bc:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d1e5      	bne.n	8105290 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81052c4:	e00c      	b.n	81052e0 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 81052c6:	69fb      	ldr	r3, [r7, #28]
 81052c8:	681a      	ldr	r2, [r3, #0]
 81052ca:	69bb      	ldr	r3, [r7, #24]
 81052cc:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81052ce:	69bb      	ldr	r3, [r7, #24]
 81052d0:	3304      	adds	r3, #4
 81052d2:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 81052d4:	69fb      	ldr	r3, [r7, #28]
 81052d6:	3304      	adds	r3, #4
 81052d8:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 81052da:	683b      	ldr	r3, [r7, #0]
 81052dc:	3b04      	subs	r3, #4
 81052de:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81052e0:	683b      	ldr	r3, [r7, #0]
 81052e2:	2b03      	cmp	r3, #3
 81052e4:	dcef      	bgt.n	81052c6 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 81052e6:	e00c      	b.n	8105302 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81052e8:	69fb      	ldr	r3, [r7, #28]
 81052ea:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 81052ec:	69bb      	ldr	r3, [r7, #24]
 81052ee:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 81052f0:	69bb      	ldr	r3, [r7, #24]
 81052f2:	3301      	adds	r3, #1
 81052f4:	61bb      	str	r3, [r7, #24]
 81052f6:	69fb      	ldr	r3, [r7, #28]
 81052f8:	3301      	adds	r3, #1
 81052fa:	61fb      	str	r3, [r7, #28]
 81052fc:	683b      	ldr	r3, [r7, #0]
 81052fe:	3b01      	subs	r3, #1
 8105300:	603b      	str	r3, [r7, #0]
 8105302:	683b      	ldr	r3, [r7, #0]
 8105304:	2b00      	cmp	r3, #0
 8105306:	d1ef      	bne.n	81052e8 <metal_io_block_read+0xc4>
	}
	return retlen;
 8105308:	697b      	ldr	r3, [r7, #20]
}
 810530a:	4618      	mov	r0, r3
 810530c:	3724      	adds	r7, #36	; 0x24
 810530e:	46bd      	mov	sp, r7
 8105310:	bd90      	pop	{r4, r7, pc}

08105312 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8105312:	b590      	push	{r4, r7, lr}
 8105314:	b08b      	sub	sp, #44	; 0x2c
 8105316:	af02      	add	r7, sp, #8
 8105318:	60f8      	str	r0, [r7, #12]
 810531a:	60b9      	str	r1, [r7, #8]
 810531c:	607a      	str	r2, [r7, #4]
 810531e:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8105320:	68b9      	ldr	r1, [r7, #8]
 8105322:	68f8      	ldr	r0, [r7, #12]
 8105324:	f7ff ff14 	bl	8105150 <metal_io_virt>
 8105328:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810532e:	68fb      	ldr	r3, [r7, #12]
 8105330:	689b      	ldr	r3, [r3, #8]
 8105332:	68ba      	ldr	r2, [r7, #8]
 8105334:	429a      	cmp	r2, r3
 8105336:	d902      	bls.n	810533e <metal_io_block_write+0x2c>
		return -ERANGE;
 8105338:	f06f 0321 	mvn.w	r3, #33	; 0x21
 810533c:	e05b      	b.n	81053f6 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 810533e:	683a      	ldr	r2, [r7, #0]
 8105340:	68bb      	ldr	r3, [r7, #8]
 8105342:	441a      	add	r2, r3
 8105344:	68fb      	ldr	r3, [r7, #12]
 8105346:	689b      	ldr	r3, [r3, #8]
 8105348:	429a      	cmp	r2, r3
 810534a:	d904      	bls.n	8105356 <metal_io_block_write+0x44>
		len = io->size - offset;
 810534c:	68fb      	ldr	r3, [r7, #12]
 810534e:	689a      	ldr	r2, [r3, #8]
 8105350:	68bb      	ldr	r3, [r7, #8]
 8105352:	1ad3      	subs	r3, r2, r3
 8105354:	603b      	str	r3, [r7, #0]
	retlen = len;
 8105356:	683b      	ldr	r3, [r7, #0]
 8105358:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 810535a:	68fb      	ldr	r3, [r7, #12]
 810535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810535e:	2b00      	cmp	r3, #0
 8105360:	d017      	beq.n	8105392 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8105362:	68fb      	ldr	r3, [r7, #12]
 8105364:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8105366:	683b      	ldr	r3, [r7, #0]
 8105368:	9300      	str	r3, [sp, #0]
 810536a:	2305      	movs	r3, #5
 810536c:	687a      	ldr	r2, [r7, #4]
 810536e:	68b9      	ldr	r1, [r7, #8]
 8105370:	68f8      	ldr	r0, [r7, #12]
 8105372:	47a0      	blx	r4
 8105374:	6178      	str	r0, [r7, #20]
 8105376:	e03d      	b.n	81053f4 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8105378:	69bb      	ldr	r3, [r7, #24]
 810537a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 810537c:	69fb      	ldr	r3, [r7, #28]
 810537e:	701a      	strb	r2, [r3, #0]
			ptr++;
 8105380:	69fb      	ldr	r3, [r7, #28]
 8105382:	3301      	adds	r3, #1
 8105384:	61fb      	str	r3, [r7, #28]
			source++;
 8105386:	69bb      	ldr	r3, [r7, #24]
 8105388:	3301      	adds	r3, #1
 810538a:	61bb      	str	r3, [r7, #24]
			len--;
 810538c:	683b      	ldr	r3, [r7, #0]
 810538e:	3b01      	subs	r3, #1
 8105390:	603b      	str	r3, [r7, #0]
		while ( len && (
 8105392:	683b      	ldr	r3, [r7, #0]
 8105394:	2b00      	cmp	r3, #0
 8105396:	d017      	beq.n	81053c8 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8105398:	69fb      	ldr	r3, [r7, #28]
 810539a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d1ea      	bne.n	8105378 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 81053a2:	69bb      	ldr	r3, [r7, #24]
 81053a4:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 81053a8:	2b00      	cmp	r3, #0
 81053aa:	d1e5      	bne.n	8105378 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81053ac:	e00c      	b.n	81053c8 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 81053ae:	69bb      	ldr	r3, [r7, #24]
 81053b0:	681a      	ldr	r2, [r3, #0]
 81053b2:	69fb      	ldr	r3, [r7, #28]
 81053b4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81053b6:	69fb      	ldr	r3, [r7, #28]
 81053b8:	3304      	adds	r3, #4
 81053ba:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 81053bc:	69bb      	ldr	r3, [r7, #24]
 81053be:	3304      	adds	r3, #4
 81053c0:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 81053c2:	683b      	ldr	r3, [r7, #0]
 81053c4:	3b04      	subs	r3, #4
 81053c6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81053c8:	683b      	ldr	r3, [r7, #0]
 81053ca:	2b03      	cmp	r3, #3
 81053cc:	dcef      	bgt.n	81053ae <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 81053ce:	e00c      	b.n	81053ea <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81053d0:	69bb      	ldr	r3, [r7, #24]
 81053d2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81053d4:	69fb      	ldr	r3, [r7, #28]
 81053d6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 81053d8:	69fb      	ldr	r3, [r7, #28]
 81053da:	3301      	adds	r3, #1
 81053dc:	61fb      	str	r3, [r7, #28]
 81053de:	69bb      	ldr	r3, [r7, #24]
 81053e0:	3301      	adds	r3, #1
 81053e2:	61bb      	str	r3, [r7, #24]
 81053e4:	683b      	ldr	r3, [r7, #0]
 81053e6:	3b01      	subs	r3, #1
 81053e8:	603b      	str	r3, [r7, #0]
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	2b00      	cmp	r3, #0
 81053ee:	d1ef      	bne.n	81053d0 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 81053f0:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 81053f4:	697b      	ldr	r3, [r7, #20]
}
 81053f6:	4618      	mov	r0, r3
 81053f8:	3724      	adds	r7, #36	; 0x24
 81053fa:	46bd      	mov	sp, r7
 81053fc:	bd90      	pop	{r4, r7, pc}

081053fe <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 81053fe:	b40e      	push	{r1, r2, r3}
 8105400:	b480      	push	{r7}
 8105402:	b082      	sub	sp, #8
 8105404:	af00      	add	r7, sp, #0
 8105406:	4603      	mov	r3, r0
 8105408:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 810540a:	bf00      	nop
 810540c:	3708      	adds	r7, #8
 810540e:	46bd      	mov	sp, r7
 8105410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105414:	b003      	add	sp, #12
 8105416:	4770      	bx	lr

08105418 <metal_io_virt>:
{
 8105418:	b480      	push	{r7}
 810541a:	b083      	sub	sp, #12
 810541c:	af00      	add	r7, sp, #0
 810541e:	6078      	str	r0, [r7, #4]
 8105420:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8105426:	f1b3 3fff 	cmp.w	r3, #4294967295
 810542a:	d009      	beq.n	8105440 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	689b      	ldr	r3, [r3, #8]
 8105430:	683a      	ldr	r2, [r7, #0]
 8105432:	429a      	cmp	r2, r3
 8105434:	d804      	bhi.n	8105440 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810543a:	683b      	ldr	r3, [r7, #0]
 810543c:	4413      	add	r3, r2
 810543e:	e000      	b.n	8105442 <metal_io_virt+0x2a>
 8105440:	2300      	movs	r3, #0
}
 8105442:	4618      	mov	r0, r3
 8105444:	370c      	adds	r7, #12
 8105446:	46bd      	mov	sp, r7
 8105448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810544c:	4770      	bx	lr

0810544e <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 810544e:	b480      	push	{r7}
 8105450:	b085      	sub	sp, #20
 8105452:	af00      	add	r7, sp, #0
 8105454:	6078      	str	r0, [r7, #4]
 8105456:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	683a      	ldr	r2, [r7, #0]
 810545e:	1ad3      	subs	r3, r2, r3
 8105460:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	689b      	ldr	r3, [r3, #8]
 8105466:	68fa      	ldr	r2, [r7, #12]
 8105468:	429a      	cmp	r2, r3
 810546a:	d201      	bcs.n	8105470 <metal_io_virt_to_offset+0x22>
 810546c:	68fb      	ldr	r3, [r7, #12]
 810546e:	e001      	b.n	8105474 <metal_io_virt_to_offset+0x26>
 8105470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105474:	4618      	mov	r0, r3
 8105476:	3714      	adds	r7, #20
 8105478:	46bd      	mov	sp, r7
 810547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810547e:	4770      	bx	lr

08105480 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8105480:	b590      	push	{r4, r7, lr}
 8105482:	b08d      	sub	sp, #52	; 0x34
 8105484:	af00      	add	r7, sp, #0
 8105486:	60f8      	str	r0, [r7, #12]
 8105488:	60b9      	str	r1, [r7, #8]
 810548a:	603b      	str	r3, [r7, #0]
 810548c:	4613      	mov	r3, r2
 810548e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8105490:	68b9      	ldr	r1, [r7, #8]
 8105492:	68f8      	ldr	r0, [r7, #12]
 8105494:	f7ff ffc0 	bl	8105418 <metal_io_virt>
 8105498:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 810549a:	68fb      	ldr	r3, [r7, #12]
 810549c:	699b      	ldr	r3, [r3, #24]
 810549e:	2b00      	cmp	r3, #0
 81054a0:	d009      	beq.n	81054b6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	699c      	ldr	r4, [r3, #24]
 81054a6:	79fa      	ldrb	r2, [r7, #7]
 81054a8:	683b      	ldr	r3, [r7, #0]
 81054aa:	68b9      	ldr	r1, [r7, #8]
 81054ac:	68f8      	ldr	r0, [r7, #12]
 81054ae:	47a0      	blx	r4
 81054b0:	4602      	mov	r2, r0
 81054b2:	460b      	mov	r3, r1
 81054b4:	e057      	b.n	8105566 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 81054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	d011      	beq.n	81054e0 <metal_io_read+0x60>
 81054bc:	683b      	ldr	r3, [r7, #0]
 81054be:	2b01      	cmp	r3, #1
 81054c0:	d10e      	bne.n	81054e0 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 81054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054c4:	62bb      	str	r3, [r7, #40]	; 0x28
 81054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054c8:	f3bf 8f5b 	dmb	ish
 81054cc:	781b      	ldrb	r3, [r3, #0]
 81054ce:	f3bf 8f5b 	dmb	ish
 81054d2:	b2db      	uxtb	r3, r3
 81054d4:	76fb      	strb	r3, [r7, #27]
 81054d6:	7efb      	ldrb	r3, [r7, #27]
 81054d8:	b2da      	uxtb	r2, r3
 81054da:	f04f 0300 	mov.w	r3, #0
 81054de:	e042      	b.n	8105566 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 81054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054e2:	2b00      	cmp	r3, #0
 81054e4:	d011      	beq.n	810550a <metal_io_read+0x8a>
 81054e6:	683b      	ldr	r3, [r7, #0]
 81054e8:	2b02      	cmp	r3, #2
 81054ea:	d10e      	bne.n	810550a <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 81054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054ee:	627b      	str	r3, [r7, #36]	; 0x24
 81054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81054f2:	f3bf 8f5b 	dmb	ish
 81054f6:	881b      	ldrh	r3, [r3, #0]
 81054f8:	f3bf 8f5b 	dmb	ish
 81054fc:	b29b      	uxth	r3, r3
 81054fe:	833b      	strh	r3, [r7, #24]
 8105500:	8b3b      	ldrh	r3, [r7, #24]
 8105502:	b29a      	uxth	r2, r3
 8105504:	f04f 0300 	mov.w	r3, #0
 8105508:	e02d      	b.n	8105566 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 810550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810550c:	2b00      	cmp	r3, #0
 810550e:	d010      	beq.n	8105532 <metal_io_read+0xb2>
 8105510:	683b      	ldr	r3, [r7, #0]
 8105512:	2b04      	cmp	r3, #4
 8105514:	d10d      	bne.n	8105532 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8105516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105518:	623b      	str	r3, [r7, #32]
 810551a:	6a3b      	ldr	r3, [r7, #32]
 810551c:	f3bf 8f5b 	dmb	ish
 8105520:	681b      	ldr	r3, [r3, #0]
 8105522:	f3bf 8f5b 	dmb	ish
 8105526:	617b      	str	r3, [r7, #20]
 8105528:	697b      	ldr	r3, [r7, #20]
 810552a:	461a      	mov	r2, r3
 810552c:	f04f 0300 	mov.w	r3, #0
 8105530:	e019      	b.n	8105566 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8105532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105534:	2b00      	cmp	r3, #0
 8105536:	d010      	beq.n	810555a <metal_io_read+0xda>
 8105538:	683b      	ldr	r3, [r7, #0]
 810553a:	2b04      	cmp	r3, #4
 810553c:	d10d      	bne.n	810555a <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 810553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105540:	61fb      	str	r3, [r7, #28]
 8105542:	69fb      	ldr	r3, [r7, #28]
 8105544:	f3bf 8f5b 	dmb	ish
 8105548:	681b      	ldr	r3, [r3, #0]
 810554a:	f3bf 8f5b 	dmb	ish
 810554e:	613b      	str	r3, [r7, #16]
 8105550:	693b      	ldr	r3, [r7, #16]
 8105552:	461a      	mov	r2, r3
 8105554:	f04f 0300 	mov.w	r3, #0
 8105558:	e005      	b.n	8105566 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 810555a:	4b05      	ldr	r3, [pc, #20]	; (8105570 <metal_io_read+0xf0>)
 810555c:	4a05      	ldr	r2, [pc, #20]	; (8105574 <metal_io_read+0xf4>)
 810555e:	21f0      	movs	r1, #240	; 0xf0
 8105560:	4805      	ldr	r0, [pc, #20]	; (8105578 <metal_io_read+0xf8>)
 8105562:	f001 fe79 	bl	8107258 <__assert_func>
	return 0; /* quiet compiler */
}
 8105566:	4610      	mov	r0, r2
 8105568:	4619      	mov	r1, r3
 810556a:	3734      	adds	r7, #52	; 0x34
 810556c:	46bd      	mov	sp, r7
 810556e:	bd90      	pop	{r4, r7, pc}
 8105570:	0810bc24 	.word	0x0810bc24
 8105574:	0810bd98 	.word	0x0810bd98
 8105578:	0810bc28 	.word	0x0810bc28

0810557c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 810557c:	b580      	push	{r7, lr}
 810557e:	b082      	sub	sp, #8
 8105580:	af00      	add	r7, sp, #0
 8105582:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8105584:	6878      	ldr	r0, [r7, #4]
 8105586:	f001 fec1 	bl	810730c <malloc>
 810558a:	4603      	mov	r3, r0
}
 810558c:	4618      	mov	r0, r3
 810558e:	3708      	adds	r7, #8
 8105590:	46bd      	mov	sp, r7
 8105592:	bd80      	pop	{r7, pc}

08105594 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8105594:	b580      	push	{r7, lr}
 8105596:	b082      	sub	sp, #8
 8105598:	af00      	add	r7, sp, #0
 810559a:	6078      	str	r0, [r7, #4]
	free(ptr);
 810559c:	6878      	ldr	r0, [r7, #4]
 810559e:	f001 febd 	bl	810731c <free>
}
 81055a2:	bf00      	nop
 81055a4:	3708      	adds	r7, #8
 81055a6:	46bd      	mov	sp, r7
 81055a8:	bd80      	pop	{r7, pc}

081055aa <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 81055aa:	b580      	push	{r7, lr}
 81055ac:	b084      	sub	sp, #16
 81055ae:	af00      	add	r7, sp, #0
 81055b0:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 81055b2:	687b      	ldr	r3, [r7, #4]
 81055b4:	3307      	adds	r3, #7
 81055b6:	00db      	lsls	r3, r3, #3
 81055b8:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 81055ba:	68f8      	ldr	r0, [r7, #12]
 81055bc:	f7ff ffde 	bl	810557c <metal_allocate_memory>
 81055c0:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 81055c2:	68bb      	ldr	r3, [r7, #8]
 81055c4:	2b00      	cmp	r3, #0
 81055c6:	d004      	beq.n	81055d2 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 81055c8:	68fa      	ldr	r2, [r7, #12]
 81055ca:	2100      	movs	r1, #0
 81055cc:	68b8      	ldr	r0, [r7, #8]
 81055ce:	f001 febb 	bl	8107348 <memset>
	}

	return vqs;
 81055d2:	68bb      	ldr	r3, [r7, #8]
}
 81055d4:	4618      	mov	r0, r3
 81055d6:	3710      	adds	r7, #16
 81055d8:	46bd      	mov	sp, r7
 81055da:	bd80      	pop	{r7, pc}

081055dc <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 81055dc:	b580      	push	{r7, lr}
 81055de:	b086      	sub	sp, #24
 81055e0:	af00      	add	r7, sp, #0
 81055e2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	891b      	ldrh	r3, [r3, #8]
 81055e8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	681b      	ldr	r3, [r3, #0]
 81055ee:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81055f0:	693b      	ldr	r3, [r7, #16]
 81055f2:	3b18      	subs	r3, #24
 81055f4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 81055f6:	693b      	ldr	r3, [r7, #16]
 81055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055fa:	697a      	ldr	r2, [r7, #20]
 81055fc:	429a      	cmp	r2, r3
 81055fe:	d905      	bls.n	810560c <rproc_virtio_virtqueue_notify+0x30>
 8105600:	4b0d      	ldr	r3, [pc, #52]	; (8105638 <rproc_virtio_virtqueue_notify+0x5c>)
 8105602:	4a0e      	ldr	r2, [pc, #56]	; (810563c <rproc_virtio_virtqueue_notify+0x60>)
 8105604:	2133      	movs	r1, #51	; 0x33
 8105606:	480e      	ldr	r0, [pc, #56]	; (8105640 <rproc_virtio_virtqueue_notify+0x64>)
 8105608:	f001 fe26 	bl	8107258 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 810560c:	693b      	ldr	r3, [r7, #16]
 810560e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105610:	697a      	ldr	r2, [r7, #20]
 8105612:	4613      	mov	r3, r2
 8105614:	005b      	lsls	r3, r3, #1
 8105616:	4413      	add	r3, r2
 8105618:	00db      	lsls	r3, r3, #3
 810561a:	440b      	add	r3, r1
 810561c:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 810561e:	68fb      	ldr	r3, [r7, #12]
 8105620:	691b      	ldr	r3, [r3, #16]
 8105622:	68fa      	ldr	r2, [r7, #12]
 8105624:	6810      	ldr	r0, [r2, #0]
 8105626:	68ba      	ldr	r2, [r7, #8]
 8105628:	6912      	ldr	r2, [r2, #16]
 810562a:	4611      	mov	r1, r2
 810562c:	4798      	blx	r3
}
 810562e:	bf00      	nop
 8105630:	3718      	adds	r7, #24
 8105632:	46bd      	mov	sp, r7
 8105634:	bd80      	pop	{r7, pc}
 8105636:	bf00      	nop
 8105638:	0810bc70 	.word	0x0810bc70
 810563c:	0810bd78 	.word	0x0810bd78
 8105640:	0810bc8c 	.word	0x0810bc8c

08105644 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8105644:	b580      	push	{r7, lr}
 8105646:	b086      	sub	sp, #24
 8105648:	af00      	add	r7, sp, #0
 810564a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	3b18      	subs	r3, #24
 8105650:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8105652:	697b      	ldr	r3, [r7, #20]
 8105654:	689b      	ldr	r3, [r3, #8]
 8105656:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105658:	697b      	ldr	r3, [r7, #20]
 810565a:	68db      	ldr	r3, [r3, #12]
 810565c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 810565e:	693b      	ldr	r3, [r7, #16]
 8105660:	3318      	adds	r3, #24
 8105662:	4619      	mov	r1, r3
 8105664:	68f8      	ldr	r0, [r7, #12]
 8105666:	f7ff fef2 	bl	810544e <metal_io_virt_to_offset>
 810566a:	4601      	mov	r1, r0
 810566c:	2301      	movs	r3, #1
 810566e:	2205      	movs	r2, #5
 8105670:	68f8      	ldr	r0, [r7, #12]
 8105672:	f7ff ff05 	bl	8105480 <metal_io_read>
 8105676:	4602      	mov	r2, r0
 8105678:	460b      	mov	r3, r1
 810567a:	4613      	mov	r3, r2
 810567c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 810567e:	7afb      	ldrb	r3, [r7, #11]
}
 8105680:	4618      	mov	r0, r3
 8105682:	3718      	adds	r7, #24
 8105684:	46bd      	mov	sp, r7
 8105686:	bd80      	pop	{r7, pc}

08105688 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8105688:	b580      	push	{r7, lr}
 810568a:	b086      	sub	sp, #24
 810568c:	af00      	add	r7, sp, #0
 810568e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	3b18      	subs	r3, #24
 8105694:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8105696:	697b      	ldr	r3, [r7, #20]
 8105698:	689b      	ldr	r3, [r3, #8]
 810569a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 810569c:	697b      	ldr	r3, [r7, #20]
 810569e:	68db      	ldr	r3, [r3, #12]
 81056a0:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 81056a2:	693b      	ldr	r3, [r7, #16]
 81056a4:	330c      	adds	r3, #12
 81056a6:	4619      	mov	r1, r3
 81056a8:	68f8      	ldr	r0, [r7, #12]
 81056aa:	f7ff fed0 	bl	810544e <metal_io_virt_to_offset>
 81056ae:	4601      	mov	r1, r0
 81056b0:	2304      	movs	r3, #4
 81056b2:	2205      	movs	r2, #5
 81056b4:	68f8      	ldr	r0, [r7, #12]
 81056b6:	f7ff fee3 	bl	8105480 <metal_io_read>
 81056ba:	4602      	mov	r2, r0
 81056bc:	460b      	mov	r3, r1
 81056be:	4613      	mov	r3, r2
 81056c0:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 81056c2:	68bb      	ldr	r3, [r7, #8]
}
 81056c4:	4618      	mov	r0, r3
 81056c6:	3718      	adds	r7, #24
 81056c8:	46bd      	mov	sp, r7
 81056ca:	bd80      	pop	{r7, pc}

081056cc <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 81056cc:	b480      	push	{r7}
 81056ce:	b083      	sub	sp, #12
 81056d0:	af00      	add	r7, sp, #0
 81056d2:	6078      	str	r0, [r7, #4]
 81056d4:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 81056d6:	2300      	movs	r3, #0
}
 81056d8:	4618      	mov	r0, r3
 81056da:	370c      	adds	r7, #12
 81056dc:	46bd      	mov	sp, r7
 81056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056e2:	4770      	bx	lr

081056e4 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81056e4:	b480      	push	{r7}
 81056e6:	b085      	sub	sp, #20
 81056e8:	af00      	add	r7, sp, #0
 81056ea:	60f8      	str	r0, [r7, #12]
 81056ec:	60b9      	str	r1, [r7, #8]
 81056ee:	607a      	str	r2, [r7, #4]
 81056f0:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 81056f2:	bf00      	nop
 81056f4:	3714      	adds	r7, #20
 81056f6:	46bd      	mov	sp, r7
 81056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056fc:	4770      	bx	lr
	...

08105700 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8105700:	b580      	push	{r7, lr}
 8105702:	b08e      	sub	sp, #56	; 0x38
 8105704:	af00      	add	r7, sp, #0
 8105706:	60f8      	str	r0, [r7, #12]
 8105708:	60b9      	str	r1, [r7, #8]
 810570a:	607a      	str	r2, [r7, #4]
 810570c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8105712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105714:	7e5b      	ldrb	r3, [r3, #25]
 8105716:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8105718:	2050      	movs	r0, #80	; 0x50
 810571a:	f7ff ff2f 	bl	810557c <metal_allocate_memory>
 810571e:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8105720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105722:	2b00      	cmp	r3, #0
 8105724:	d101      	bne.n	810572a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8105726:	2300      	movs	r3, #0
 8105728:	e092      	b.n	8105850 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 810572a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810572c:	4613      	mov	r3, r2
 810572e:	005b      	lsls	r3, r3, #1
 8105730:	4413      	add	r3, r2
 8105732:	00db      	lsls	r3, r3, #3
 8105734:	4618      	mov	r0, r3
 8105736:	f7ff ff21 	bl	810557c <metal_allocate_memory>
 810573a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 810573c:	6a3b      	ldr	r3, [r7, #32]
 810573e:	2b00      	cmp	r3, #0
 8105740:	f000 8081 	beq.w	8105846 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8105744:	2250      	movs	r2, #80	; 0x50
 8105746:	2100      	movs	r1, #0
 8105748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810574a:	f001 fdfd 	bl	8107348 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 810574e:	2218      	movs	r2, #24
 8105750:	2100      	movs	r1, #0
 8105752:	6a38      	ldr	r0, [r7, #32]
 8105754:	f001 fdf8 	bl	8107348 <memset>
	vdev = &rpvdev->vdev;
 8105758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810575a:	3318      	adds	r3, #24
 810575c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 810575e:	2300      	movs	r3, #0
 8105760:	637b      	str	r3, [r7, #52]	; 0x34
 8105762:	e025      	b.n	81057b0 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8105764:	2300      	movs	r3, #0
 8105766:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8105768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810576a:	4613      	mov	r3, r2
 810576c:	009b      	lsls	r3, r3, #2
 810576e:	4413      	add	r3, r2
 8105770:	009b      	lsls	r3, r3, #2
 8105772:	3318      	adds	r3, #24
 8105774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105776:	4413      	add	r3, r2
 8105778:	3304      	adds	r3, #4
 810577a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 810577c:	68fb      	ldr	r3, [r7, #12]
 810577e:	2b00      	cmp	r3, #0
 8105780:	d102      	bne.n	8105788 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8105782:	69bb      	ldr	r3, [r7, #24]
 8105784:	689b      	ldr	r3, [r3, #8]
 8105786:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8105788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810578a:	f7ff ff0e 	bl	81055aa <virtqueue_allocate>
 810578e:	6178      	str	r0, [r7, #20]
		if (!vq)
 8105790:	697b      	ldr	r3, [r7, #20]
 8105792:	2b00      	cmp	r3, #0
 8105794:	d031      	beq.n	81057fa <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8105796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105798:	4613      	mov	r3, r2
 810579a:	005b      	lsls	r3, r3, #1
 810579c:	4413      	add	r3, r2
 810579e:	00db      	lsls	r3, r3, #3
 81057a0:	461a      	mov	r2, r3
 81057a2:	6a3b      	ldr	r3, [r7, #32]
 81057a4:	4413      	add	r3, r2
 81057a6:	697a      	ldr	r2, [r7, #20]
 81057a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 81057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81057ac:	3301      	adds	r3, #1
 81057ae:	637b      	str	r3, [r7, #52]	; 0x34
 81057b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057b4:	429a      	cmp	r2, r3
 81057b6:	d3d5      	bcc.n	8105764 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 81057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81057bc:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 81057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81057c2:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 81057c4:	69fb      	ldr	r3, [r7, #28]
 81057c6:	6a3a      	ldr	r2, [r7, #32]
 81057c8:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 81057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81057ce:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 81057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057d2:	683a      	ldr	r2, [r7, #0]
 81057d4:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 81057d6:	69fb      	ldr	r3, [r7, #28]
 81057d8:	68ba      	ldr	r2, [r7, #8]
 81057da:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 81057dc:	69fb      	ldr	r3, [r7, #28]
 81057de:	68fa      	ldr	r2, [r7, #12]
 81057e0:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 81057e2:	69fb      	ldr	r3, [r7, #28]
 81057e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81057e6:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 81057e8:	69fb      	ldr	r3, [r7, #28]
 81057ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81057ec:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 81057ee:	69fb      	ldr	r3, [r7, #28]
 81057f0:	4a19      	ldr	r2, [pc, #100]	; (8105858 <rproc_virtio_create_vdev+0x158>)
 81057f2:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 81057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057f6:	3318      	adds	r3, #24
 81057f8:	e02a      	b.n	8105850 <rproc_virtio_create_vdev+0x150>
			goto err1;
 81057fa:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 81057fc:	2300      	movs	r3, #0
 81057fe:	637b      	str	r3, [r7, #52]	; 0x34
 8105800:	e019      	b.n	8105836 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8105802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105804:	4613      	mov	r3, r2
 8105806:	005b      	lsls	r3, r3, #1
 8105808:	4413      	add	r3, r2
 810580a:	00db      	lsls	r3, r3, #3
 810580c:	461a      	mov	r2, r3
 810580e:	6a3b      	ldr	r3, [r7, #32]
 8105810:	4413      	add	r3, r2
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	2b00      	cmp	r3, #0
 8105816:	d00b      	beq.n	8105830 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8105818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810581a:	4613      	mov	r3, r2
 810581c:	005b      	lsls	r3, r3, #1
 810581e:	4413      	add	r3, r2
 8105820:	00db      	lsls	r3, r3, #3
 8105822:	461a      	mov	r2, r3
 8105824:	6a3b      	ldr	r3, [r7, #32]
 8105826:	4413      	add	r3, r2
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	4618      	mov	r0, r3
 810582c:	f7ff feb2 	bl	8105594 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8105830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105832:	3301      	adds	r3, #1
 8105834:	637b      	str	r3, [r7, #52]	; 0x34
 8105836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810583a:	429a      	cmp	r2, r3
 810583c:	d3e1      	bcc.n	8105802 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 810583e:	6a38      	ldr	r0, [r7, #32]
 8105840:	f7ff fea8 	bl	8105594 <metal_free_memory>
 8105844:	e000      	b.n	8105848 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8105846:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8105848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810584a:	f7ff fea3 	bl	8105594 <metal_free_memory>
	return NULL;
 810584e:	2300      	movs	r3, #0
}
 8105850:	4618      	mov	r0, r3
 8105852:	3738      	adds	r7, #56	; 0x38
 8105854:	46bd      	mov	sp, r7
 8105856:	bd80      	pop	{r7, pc}
 8105858:	0810bd54 	.word	0x0810bd54

0810585c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 810585c:	b480      	push	{r7}
 810585e:	b087      	sub	sp, #28
 8105860:	af00      	add	r7, sp, #0
 8105862:	60f8      	str	r0, [r7, #12]
 8105864:	60b9      	str	r1, [r7, #8]
 8105866:	607a      	str	r2, [r7, #4]
 8105868:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 810586a:	68fb      	ldr	r3, [r7, #12]
 810586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810586e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8105870:	68ba      	ldr	r2, [r7, #8]
 8105872:	697b      	ldr	r3, [r7, #20]
 8105874:	429a      	cmp	r2, r3
 8105876:	d302      	bcc.n	810587e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8105878:	f06f 0301 	mvn.w	r3, #1
 810587c:	e019      	b.n	81058b2 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 810587e:	68fb      	ldr	r3, [r7, #12]
 8105880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105882:	68ba      	ldr	r2, [r7, #8]
 8105884:	4613      	mov	r3, r2
 8105886:	005b      	lsls	r3, r3, #1
 8105888:	4413      	add	r3, r2
 810588a:	00db      	lsls	r3, r3, #3
 810588c:	440b      	add	r3, r1
 810588e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8105890:	693b      	ldr	r3, [r7, #16]
 8105892:	6a3a      	ldr	r2, [r7, #32]
 8105894:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8105896:	693b      	ldr	r3, [r7, #16]
 8105898:	687a      	ldr	r2, [r7, #4]
 810589a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 810589c:	693b      	ldr	r3, [r7, #16]
 810589e:	683a      	ldr	r2, [r7, #0]
 81058a0:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 81058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058a4:	b29a      	uxth	r2, r3
 81058a6:	693b      	ldr	r3, [r7, #16]
 81058a8:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 81058aa:	693b      	ldr	r3, [r7, #16]
 81058ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81058ae:	609a      	str	r2, [r3, #8]

	return 0;
 81058b0:	2300      	movs	r3, #0
}
 81058b2:	4618      	mov	r0, r3
 81058b4:	371c      	adds	r7, #28
 81058b6:	46bd      	mov	sp, r7
 81058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058bc:	4770      	bx	lr

081058be <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 81058be:	b580      	push	{r7, lr}
 81058c0:	b086      	sub	sp, #24
 81058c2:	af00      	add	r7, sp, #0
 81058c4:	6078      	str	r0, [r7, #4]
 81058c6:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	2b00      	cmp	r3, #0
 81058cc:	d102      	bne.n	81058d4 <rproc_virtio_notified+0x16>
		return -EINVAL;
 81058ce:	f06f 0315 	mvn.w	r3, #21
 81058d2:	e02c      	b.n	810592e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	681b      	ldr	r3, [r3, #0]
 81058d8:	683a      	ldr	r2, [r7, #0]
 81058da:	429a      	cmp	r2, r3
 81058dc:	d101      	bne.n	81058e2 <rproc_virtio_notified+0x24>
		return 0;
 81058de:	2300      	movs	r3, #0
 81058e0:	e025      	b.n	810592e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81058e6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 81058e8:	2300      	movs	r3, #0
 81058ea:	617b      	str	r3, [r7, #20]
 81058ec:	e01a      	b.n	8105924 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81058f2:	697a      	ldr	r2, [r7, #20]
 81058f4:	4613      	mov	r3, r2
 81058f6:	005b      	lsls	r3, r3, #1
 81058f8:	4413      	add	r3, r2
 81058fa:	00db      	lsls	r3, r3, #3
 81058fc:	440b      	add	r3, r1
 81058fe:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	691b      	ldr	r3, [r3, #16]
 8105904:	683a      	ldr	r2, [r7, #0]
 8105906:	429a      	cmp	r2, r3
 8105908:	d003      	beq.n	8105912 <rproc_virtio_notified+0x54>
 810590a:	683b      	ldr	r3, [r7, #0]
 810590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105910:	d105      	bne.n	810591e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8105912:	68fb      	ldr	r3, [r7, #12]
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8105918:	68b8      	ldr	r0, [r7, #8]
 810591a:	f001 fa19 	bl	8106d50 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 810591e:	697b      	ldr	r3, [r7, #20]
 8105920:	3301      	adds	r3, #1
 8105922:	617b      	str	r3, [r7, #20]
 8105924:	697a      	ldr	r2, [r7, #20]
 8105926:	693b      	ldr	r3, [r7, #16]
 8105928:	429a      	cmp	r2, r3
 810592a:	d3e0      	bcc.n	81058ee <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 810592c:	2300      	movs	r3, #0
}
 810592e:	4618      	mov	r0, r3
 8105930:	3718      	adds	r7, #24
 8105932:	46bd      	mov	sp, r7
 8105934:	bd80      	pop	{r7, pc}

08105936 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8105936:	b580      	push	{r7, lr}
 8105938:	b084      	sub	sp, #16
 810593a:	af00      	add	r7, sp, #0
 810593c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	699b      	ldr	r3, [r3, #24]
 8105942:	2b00      	cmp	r3, #0
 8105944:	d00a      	beq.n	810595c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8105946:	6878      	ldr	r0, [r7, #4]
 8105948:	f7ff fe7c 	bl	8105644 <rproc_virtio_get_status>
 810594c:	4603      	mov	r3, r0
 810594e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8105950:	7bfb      	ldrb	r3, [r7, #15]
 8105952:	f003 0304 	and.w	r3, r3, #4
 8105956:	2b00      	cmp	r3, #0
 8105958:	d102      	bne.n	8105960 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 810595a:	e7f4      	b.n	8105946 <rproc_virtio_wait_remote_ready+0x10>
		return;
 810595c:	bf00      	nop
 810595e:	e000      	b.n	8105962 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8105960:	bf00      	nop
	}
}
 8105962:	3710      	adds	r7, #16
 8105964:	46bd      	mov	sp, r7
 8105966:	bd80      	pop	{r7, pc}

08105968 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105968:	b480      	push	{r7}
 810596a:	b083      	sub	sp, #12
 810596c:	af00      	add	r7, sp, #0
 810596e:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105970:	bf00      	nop
 8105972:	687b      	ldr	r3, [r7, #4]
 8105974:	2201      	movs	r2, #1
 8105976:	4611      	mov	r1, r2
 8105978:	f3bf 8f5b 	dmb	ish
 810597c:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105980:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105984:	2800      	cmp	r0, #0
 8105986:	d1f9      	bne.n	810597c <__metal_mutex_acquire+0x14>
 8105988:	f3bf 8f5b 	dmb	ish
 810598c:	b2d3      	uxtb	r3, r2
 810598e:	2b00      	cmp	r3, #0
 8105990:	d1ef      	bne.n	8105972 <__metal_mutex_acquire+0xa>
		;
	}
}
 8105992:	bf00      	nop
 8105994:	bf00      	nop
 8105996:	370c      	adds	r7, #12
 8105998:	46bd      	mov	sp, r7
 810599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810599e:	4770      	bx	lr

081059a0 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 81059a0:	b480      	push	{r7}
 81059a2:	b083      	sub	sp, #12
 81059a4:	af00      	add	r7, sp, #0
 81059a6:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	f3bf 8f5b 	dmb	ish
 81059ae:	2200      	movs	r2, #0
 81059b0:	701a      	strb	r2, [r3, #0]
 81059b2:	f3bf 8f5b 	dmb	ish
}
 81059b6:	bf00      	nop
 81059b8:	370c      	adds	r7, #12
 81059ba:	46bd      	mov	sp, r7
 81059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059c0:	4770      	bx	lr

081059c2 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 81059c2:	b580      	push	{r7, lr}
 81059c4:	b082      	sub	sp, #8
 81059c6:	af00      	add	r7, sp, #0
 81059c8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81059ca:	6878      	ldr	r0, [r7, #4]
 81059cc:	f7ff ffcc 	bl	8105968 <__metal_mutex_acquire>
}
 81059d0:	bf00      	nop
 81059d2:	3708      	adds	r7, #8
 81059d4:	46bd      	mov	sp, r7
 81059d6:	bd80      	pop	{r7, pc}

081059d8 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 81059d8:	b580      	push	{r7, lr}
 81059da:	b082      	sub	sp, #8
 81059dc:	af00      	add	r7, sp, #0
 81059de:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81059e0:	6878      	ldr	r0, [r7, #4]
 81059e2:	f7ff ffdd 	bl	81059a0 <__metal_mutex_release>
}
 81059e6:	bf00      	nop
 81059e8:	3708      	adds	r7, #8
 81059ea:	46bd      	mov	sp, r7
 81059ec:	bd80      	pop	{r7, pc}

081059ee <metal_list_add_before>:
{
 81059ee:	b480      	push	{r7}
 81059f0:	b083      	sub	sp, #12
 81059f2:	af00      	add	r7, sp, #0
 81059f4:	6078      	str	r0, [r7, #4]
 81059f6:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	685a      	ldr	r2, [r3, #4]
 81059fc:	683b      	ldr	r3, [r7, #0]
 81059fe:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105a00:	683b      	ldr	r3, [r7, #0]
 8105a02:	687a      	ldr	r2, [r7, #4]
 8105a04:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8105a06:	683b      	ldr	r3, [r7, #0]
 8105a08:	681b      	ldr	r3, [r3, #0]
 8105a0a:	683a      	ldr	r2, [r7, #0]
 8105a0c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8105a0e:	683b      	ldr	r3, [r7, #0]
 8105a10:	685b      	ldr	r3, [r3, #4]
 8105a12:	683a      	ldr	r2, [r7, #0]
 8105a14:	601a      	str	r2, [r3, #0]
}
 8105a16:	bf00      	nop
 8105a18:	370c      	adds	r7, #12
 8105a1a:	46bd      	mov	sp, r7
 8105a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a20:	4770      	bx	lr

08105a22 <metal_list_add_tail>:
{
 8105a22:	b580      	push	{r7, lr}
 8105a24:	b082      	sub	sp, #8
 8105a26:	af00      	add	r7, sp, #0
 8105a28:	6078      	str	r0, [r7, #4]
 8105a2a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8105a2c:	6839      	ldr	r1, [r7, #0]
 8105a2e:	6878      	ldr	r0, [r7, #4]
 8105a30:	f7ff ffdd 	bl	81059ee <metal_list_add_before>
}
 8105a34:	bf00      	nop
 8105a36:	3708      	adds	r7, #8
 8105a38:	46bd      	mov	sp, r7
 8105a3a:	bd80      	pop	{r7, pc}

08105a3c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8105a3c:	b480      	push	{r7}
 8105a3e:	b083      	sub	sp, #12
 8105a40:	af00      	add	r7, sp, #0
 8105a42:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	681b      	ldr	r3, [r3, #0]
 8105a48:	687a      	ldr	r2, [r7, #4]
 8105a4a:	6852      	ldr	r2, [r2, #4]
 8105a4c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	685b      	ldr	r3, [r3, #4]
 8105a52:	687a      	ldr	r2, [r7, #4]
 8105a54:	6812      	ldr	r2, [r2, #0]
 8105a56:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	687a      	ldr	r2, [r7, #4]
 8105a5c:	605a      	str	r2, [r3, #4]
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	685a      	ldr	r2, [r3, #4]
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	601a      	str	r2, [r3, #0]
}
 8105a66:	bf00      	nop
 8105a68:	370c      	adds	r7, #12
 8105a6a:	46bd      	mov	sp, r7
 8105a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a70:	4770      	bx	lr

08105a72 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8105a72:	b480      	push	{r7}
 8105a74:	b083      	sub	sp, #12
 8105a76:	af00      	add	r7, sp, #0
 8105a78:	6078      	str	r0, [r7, #4]
 8105a7a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105a7c:	683b      	ldr	r3, [r7, #0]
 8105a7e:	095b      	lsrs	r3, r3, #5
 8105a80:	009a      	lsls	r2, r3, #2
 8105a82:	6879      	ldr	r1, [r7, #4]
 8105a84:	440a      	add	r2, r1
 8105a86:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105a88:	683a      	ldr	r2, [r7, #0]
 8105a8a:	f002 021f 	and.w	r2, r2, #31
 8105a8e:	2001      	movs	r0, #1
 8105a90:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105a94:	009b      	lsls	r3, r3, #2
 8105a96:	6878      	ldr	r0, [r7, #4]
 8105a98:	4403      	add	r3, r0
 8105a9a:	430a      	orrs	r2, r1
 8105a9c:	601a      	str	r2, [r3, #0]
}
 8105a9e:	bf00      	nop
 8105aa0:	370c      	adds	r7, #12
 8105aa2:	46bd      	mov	sp, r7
 8105aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aa8:	4770      	bx	lr

08105aaa <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8105aaa:	b480      	push	{r7}
 8105aac:	b083      	sub	sp, #12
 8105aae:	af00      	add	r7, sp, #0
 8105ab0:	6078      	str	r0, [r7, #4]
 8105ab2:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105ab4:	683b      	ldr	r3, [r7, #0]
 8105ab6:	095b      	lsrs	r3, r3, #5
 8105ab8:	009b      	lsls	r3, r3, #2
 8105aba:	687a      	ldr	r2, [r7, #4]
 8105abc:	4413      	add	r3, r2
 8105abe:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105ac0:	683b      	ldr	r3, [r7, #0]
 8105ac2:	f003 031f 	and.w	r3, r3, #31
 8105ac6:	2101      	movs	r1, #1
 8105ac8:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105acc:	4013      	ands	r3, r2
}
 8105ace:	4618      	mov	r0, r3
 8105ad0:	370c      	adds	r7, #12
 8105ad2:	46bd      	mov	sp, r7
 8105ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ad8:	4770      	bx	lr

08105ada <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8105ada:	b480      	push	{r7}
 8105adc:	b083      	sub	sp, #12
 8105ade:	af00      	add	r7, sp, #0
 8105ae0:	6078      	str	r0, [r7, #4]
 8105ae2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105ae4:	683b      	ldr	r3, [r7, #0]
 8105ae6:	095b      	lsrs	r3, r3, #5
 8105ae8:	009a      	lsls	r2, r3, #2
 8105aea:	6879      	ldr	r1, [r7, #4]
 8105aec:	440a      	add	r2, r1
 8105aee:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105af0:	683a      	ldr	r2, [r7, #0]
 8105af2:	f002 021f 	and.w	r2, r2, #31
 8105af6:	2001      	movs	r0, #1
 8105af8:	fa00 f202 	lsl.w	r2, r0, r2
 8105afc:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105afe:	009b      	lsls	r3, r3, #2
 8105b00:	6878      	ldr	r0, [r7, #4]
 8105b02:	4403      	add	r3, r0
 8105b04:	400a      	ands	r2, r1
 8105b06:	601a      	str	r2, [r3, #0]
}
 8105b08:	bf00      	nop
 8105b0a:	370c      	adds	r7, #12
 8105b0c:	46bd      	mov	sp, r7
 8105b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b12:	4770      	bx	lr

08105b14 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8105b14:	b580      	push	{r7, lr}
 8105b16:	b082      	sub	sp, #8
 8105b18:	af00      	add	r7, sp, #0
 8105b1a:	6078      	str	r0, [r7, #4]
 8105b1c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8105b1e:	6839      	ldr	r1, [r7, #0]
 8105b20:	6878      	ldr	r0, [r7, #4]
 8105b22:	f7ff ffc2 	bl	8105aaa <metal_bitmap_is_bit_set>
 8105b26:	4603      	mov	r3, r0
 8105b28:	2b00      	cmp	r3, #0
 8105b2a:	bf0c      	ite	eq
 8105b2c:	2301      	moveq	r3, #1
 8105b2e:	2300      	movne	r3, #0
 8105b30:	b2db      	uxtb	r3, r3
}
 8105b32:	4618      	mov	r0, r3
 8105b34:	3708      	adds	r7, #8
 8105b36:	46bd      	mov	sp, r7
 8105b38:	bd80      	pop	{r7, pc}

08105b3a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8105b3a:	b580      	push	{r7, lr}
 8105b3c:	b086      	sub	sp, #24
 8105b3e:	af00      	add	r7, sp, #0
 8105b40:	60f8      	str	r0, [r7, #12]
 8105b42:	60b9      	str	r1, [r7, #8]
 8105b44:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8105b46:	68bb      	ldr	r3, [r7, #8]
 8105b48:	617b      	str	r3, [r7, #20]
 8105b4a:	e002      	b.n	8105b52 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8105b4c:	697b      	ldr	r3, [r7, #20]
 8105b4e:	3301      	adds	r3, #1
 8105b50:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8105b52:	697a      	ldr	r2, [r7, #20]
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	429a      	cmp	r2, r3
 8105b58:	d207      	bcs.n	8105b6a <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8105b5a:	697b      	ldr	r3, [r7, #20]
 8105b5c:	4619      	mov	r1, r3
 8105b5e:	68f8      	ldr	r0, [r7, #12]
 8105b60:	f7ff ffd8 	bl	8105b14 <metal_bitmap_is_bit_clear>
 8105b64:	4603      	mov	r3, r0
 8105b66:	2b00      	cmp	r3, #0
 8105b68:	d0f0      	beq.n	8105b4c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8105b6a:	697b      	ldr	r3, [r7, #20]
}
 8105b6c:	4618      	mov	r0, r3
 8105b6e:	3718      	adds	r7, #24
 8105b70:	46bd      	mov	sp, r7
 8105b72:	bd80      	pop	{r7, pc}

08105b74 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8105b74:	b580      	push	{r7, lr}
 8105b76:	b084      	sub	sp, #16
 8105b78:	af00      	add	r7, sp, #0
 8105b7a:	60f8      	str	r0, [r7, #12]
 8105b7c:	60b9      	str	r1, [r7, #8]
 8105b7e:	607a      	str	r2, [r7, #4]
 8105b80:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105b82:	68fb      	ldr	r3, [r7, #12]
 8105b84:	2220      	movs	r2, #32
 8105b86:	68b9      	ldr	r1, [r7, #8]
 8105b88:	4618      	mov	r0, r3
 8105b8a:	f002 fcab 	bl	81084e4 <strncpy>
	ept->addr = src;
 8105b8e:	68fb      	ldr	r3, [r7, #12]
 8105b90:	687a      	ldr	r2, [r7, #4]
 8105b92:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8105b94:	68fb      	ldr	r3, [r7, #12]
 8105b96:	683a      	ldr	r2, [r7, #0]
 8105b98:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8105b9a:	68fb      	ldr	r3, [r7, #12]
 8105b9c:	69ba      	ldr	r2, [r7, #24]
 8105b9e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105ba0:	68fb      	ldr	r3, [r7, #12]
 8105ba2:	69fa      	ldr	r2, [r7, #28]
 8105ba4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8105ba6:	bf00      	nop
 8105ba8:	3710      	adds	r7, #16
 8105baa:	46bd      	mov	sp, r7
 8105bac:	bd80      	pop	{r7, pc}

08105bae <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8105bae:	b580      	push	{r7, lr}
 8105bb0:	b084      	sub	sp, #16
 8105bb2:	af00      	add	r7, sp, #0
 8105bb4:	6078      	str	r0, [r7, #4]
 8105bb6:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8105bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8105bbc:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8105bbe:	683b      	ldr	r3, [r7, #0]
 8105bc0:	461a      	mov	r2, r3
 8105bc2:	2100      	movs	r1, #0
 8105bc4:	6878      	ldr	r0, [r7, #4]
 8105bc6:	f7ff ffb8 	bl	8105b3a <metal_bitmap_next_clear_bit>
 8105bca:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8105bcc:	683b      	ldr	r3, [r7, #0]
 8105bce:	68ba      	ldr	r2, [r7, #8]
 8105bd0:	429a      	cmp	r2, r3
 8105bd2:	d206      	bcs.n	8105be2 <rpmsg_get_address+0x34>
		addr = nextbit;
 8105bd4:	68bb      	ldr	r3, [r7, #8]
 8105bd6:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8105bd8:	68bb      	ldr	r3, [r7, #8]
 8105bda:	4619      	mov	r1, r3
 8105bdc:	6878      	ldr	r0, [r7, #4]
 8105bde:	f7ff ff48 	bl	8105a72 <metal_bitmap_set_bit>
	}

	return addr;
 8105be2:	68fb      	ldr	r3, [r7, #12]
}
 8105be4:	4618      	mov	r0, r3
 8105be6:	3710      	adds	r7, #16
 8105be8:	46bd      	mov	sp, r7
 8105bea:	bd80      	pop	{r7, pc}

08105bec <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8105bec:	b580      	push	{r7, lr}
 8105bee:	b084      	sub	sp, #16
 8105bf0:	af00      	add	r7, sp, #0
 8105bf2:	60f8      	str	r0, [r7, #12]
 8105bf4:	60b9      	str	r1, [r7, #8]
 8105bf6:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105bf8:	687a      	ldr	r2, [r7, #4]
 8105bfa:	68bb      	ldr	r3, [r7, #8]
 8105bfc:	429a      	cmp	r2, r3
 8105bfe:	da03      	bge.n	8105c08 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8105c00:	6879      	ldr	r1, [r7, #4]
 8105c02:	68f8      	ldr	r0, [r7, #12]
 8105c04:	f7ff ff69 	bl	8105ada <metal_bitmap_clear_bit>
}
 8105c08:	bf00      	nop
 8105c0a:	3710      	adds	r7, #16
 8105c0c:	46bd      	mov	sp, r7
 8105c0e:	bd80      	pop	{r7, pc}

08105c10 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8105c10:	b580      	push	{r7, lr}
 8105c12:	b084      	sub	sp, #16
 8105c14:	af00      	add	r7, sp, #0
 8105c16:	60f8      	str	r0, [r7, #12]
 8105c18:	60b9      	str	r1, [r7, #8]
 8105c1a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105c1c:	687a      	ldr	r2, [r7, #4]
 8105c1e:	68bb      	ldr	r3, [r7, #8]
 8105c20:	429a      	cmp	r2, r3
 8105c22:	da05      	bge.n	8105c30 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8105c24:	6879      	ldr	r1, [r7, #4]
 8105c26:	68f8      	ldr	r0, [r7, #12]
 8105c28:	f7ff ff3f 	bl	8105aaa <metal_bitmap_is_bit_set>
 8105c2c:	4603      	mov	r3, r0
 8105c2e:	e000      	b.n	8105c32 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8105c30:	4b02      	ldr	r3, [pc, #8]	; (8105c3c <rpmsg_is_address_set+0x2c>)
}
 8105c32:	4618      	mov	r0, r3
 8105c34:	3710      	adds	r7, #16
 8105c36:	46bd      	mov	sp, r7
 8105c38:	bd80      	pop	{r7, pc}
 8105c3a:	bf00      	nop
 8105c3c:	fffff82d 	.word	0xfffff82d

08105c40 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8105c40:	b580      	push	{r7, lr}
 8105c42:	b084      	sub	sp, #16
 8105c44:	af00      	add	r7, sp, #0
 8105c46:	60f8      	str	r0, [r7, #12]
 8105c48:	60b9      	str	r1, [r7, #8]
 8105c4a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8105c4c:	687a      	ldr	r2, [r7, #4]
 8105c4e:	68bb      	ldr	r3, [r7, #8]
 8105c50:	429a      	cmp	r2, r3
 8105c52:	da05      	bge.n	8105c60 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8105c54:	6879      	ldr	r1, [r7, #4]
 8105c56:	68f8      	ldr	r0, [r7, #12]
 8105c58:	f7ff ff0b 	bl	8105a72 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8105c5c:	2300      	movs	r3, #0
 8105c5e:	e000      	b.n	8105c62 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8105c60:	4b02      	ldr	r3, [pc, #8]	; (8105c6c <rpmsg_set_address+0x2c>)
	}
}
 8105c62:	4618      	mov	r0, r3
 8105c64:	3710      	adds	r7, #16
 8105c66:	46bd      	mov	sp, r7
 8105c68:	bd80      	pop	{r7, pc}
 8105c6a:	bf00      	nop
 8105c6c:	fffff82d 	.word	0xfffff82d

08105c70 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8105c70:	b590      	push	{r4, r7, lr}
 8105c72:	b089      	sub	sp, #36	; 0x24
 8105c74:	af02      	add	r7, sp, #8
 8105c76:	60f8      	str	r0, [r7, #12]
 8105c78:	60b9      	str	r1, [r7, #8]
 8105c7a:	607a      	str	r2, [r7, #4]
 8105c7c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8105c7e:	68fb      	ldr	r3, [r7, #12]
 8105c80:	2b00      	cmp	r3, #0
 8105c82:	d00a      	beq.n	8105c9a <rpmsg_send_offchannel_raw+0x2a>
 8105c84:	68fb      	ldr	r3, [r7, #12]
 8105c86:	6a1b      	ldr	r3, [r3, #32]
 8105c88:	2b00      	cmp	r3, #0
 8105c8a:	d006      	beq.n	8105c9a <rpmsg_send_offchannel_raw+0x2a>
 8105c8c:	683b      	ldr	r3, [r7, #0]
 8105c8e:	2b00      	cmp	r3, #0
 8105c90:	d003      	beq.n	8105c9a <rpmsg_send_offchannel_raw+0x2a>
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c98:	d101      	bne.n	8105c9e <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8105c9a:	4b0d      	ldr	r3, [pc, #52]	; (8105cd0 <rpmsg_send_offchannel_raw+0x60>)
 8105c9c:	e014      	b.n	8105cc8 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8105c9e:	68fb      	ldr	r3, [r7, #12]
 8105ca0:	6a1b      	ldr	r3, [r3, #32]
 8105ca2:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8105ca4:	697b      	ldr	r3, [r7, #20]
 8105ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105ca8:	2b00      	cmp	r3, #0
 8105caa:	d00c      	beq.n	8105cc6 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8105cac:	697b      	ldr	r3, [r7, #20]
 8105cae:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8105cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105cb2:	9301      	str	r3, [sp, #4]
 8105cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105cb6:	9300      	str	r3, [sp, #0]
 8105cb8:	683b      	ldr	r3, [r7, #0]
 8105cba:	687a      	ldr	r2, [r7, #4]
 8105cbc:	68b9      	ldr	r1, [r7, #8]
 8105cbe:	6978      	ldr	r0, [r7, #20]
 8105cc0:	47a0      	blx	r4
 8105cc2:	4603      	mov	r3, r0
 8105cc4:	e000      	b.n	8105cc8 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8105cc6:	4b02      	ldr	r3, [pc, #8]	; (8105cd0 <rpmsg_send_offchannel_raw+0x60>)
}
 8105cc8:	4618      	mov	r0, r3
 8105cca:	371c      	adds	r7, #28
 8105ccc:	46bd      	mov	sp, r7
 8105cce:	bd90      	pop	{r4, r7, pc}
 8105cd0:	fffff82d 	.word	0xfffff82d

08105cd4 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8105cd4:	b580      	push	{r7, lr}
 8105cd6:	b090      	sub	sp, #64	; 0x40
 8105cd8:	af02      	add	r7, sp, #8
 8105cda:	6078      	str	r0, [r7, #4]
 8105cdc:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8105cde:	683b      	ldr	r3, [r7, #0]
 8105ce0:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8105ce8:	6879      	ldr	r1, [r7, #4]
 8105cea:	f107 030c 	add.w	r3, r7, #12
 8105cee:	2220      	movs	r2, #32
 8105cf0:	4618      	mov	r0, r3
 8105cf2:	f002 fbf7 	bl	81084e4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8105cfa:	f107 030c 	add.w	r3, r7, #12
 8105cfe:	2201      	movs	r2, #1
 8105d00:	9201      	str	r2, [sp, #4]
 8105d02:	2228      	movs	r2, #40	; 0x28
 8105d04:	9200      	str	r2, [sp, #0]
 8105d06:	2235      	movs	r2, #53	; 0x35
 8105d08:	6878      	ldr	r0, [r7, #4]
 8105d0a:	f7ff ffb1 	bl	8105c70 <rpmsg_send_offchannel_raw>
 8105d0e:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8105d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	da01      	bge.n	8105d1a <rpmsg_send_ns_message+0x46>
		return ret;
 8105d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d18:	e000      	b.n	8105d1c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8105d1a:	2300      	movs	r3, #0
}
 8105d1c:	4618      	mov	r0, r3
 8105d1e:	3738      	adds	r7, #56	; 0x38
 8105d20:	46bd      	mov	sp, r7
 8105d22:	bd80      	pop	{r7, pc}

08105d24 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8105d24:	b580      	push	{r7, lr}
 8105d26:	b088      	sub	sp, #32
 8105d28:	af00      	add	r7, sp, #0
 8105d2a:	60f8      	str	r0, [r7, #12]
 8105d2c:	60b9      	str	r1, [r7, #8]
 8105d2e:	607a      	str	r2, [r7, #4]
 8105d30:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	61fb      	str	r3, [r7, #28]
 8105d38:	e04b      	b.n	8105dd2 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8105d3a:	2300      	movs	r3, #0
 8105d3c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8105d3e:	69fb      	ldr	r3, [r7, #28]
 8105d40:	3b34      	subs	r3, #52	; 0x34
 8105d42:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d4a:	d006      	beq.n	8105d5a <rpmsg_get_endpoint+0x36>
 8105d4c:	697b      	ldr	r3, [r7, #20]
 8105d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d50:	687a      	ldr	r2, [r7, #4]
 8105d52:	429a      	cmp	r2, r3
 8105d54:	d101      	bne.n	8105d5a <rpmsg_get_endpoint+0x36>
			return ept;
 8105d56:	697b      	ldr	r3, [r7, #20]
 8105d58:	e040      	b.n	8105ddc <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8105d5a:	697b      	ldr	r3, [r7, #20]
 8105d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d5e:	687a      	ldr	r2, [r7, #4]
 8105d60:	429a      	cmp	r2, r3
 8105d62:	d106      	bne.n	8105d72 <rpmsg_get_endpoint+0x4e>
 8105d64:	697b      	ldr	r3, [r7, #20]
 8105d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d68:	683a      	ldr	r2, [r7, #0]
 8105d6a:	429a      	cmp	r2, r3
 8105d6c:	d101      	bne.n	8105d72 <rpmsg_get_endpoint+0x4e>
			return ept;
 8105d6e:	697b      	ldr	r3, [r7, #20]
 8105d70:	e034      	b.n	8105ddc <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8105d72:	68bb      	ldr	r3, [r7, #8]
 8105d74:	2b00      	cmp	r3, #0
 8105d76:	d00c      	beq.n	8105d92 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8105d78:	697b      	ldr	r3, [r7, #20]
 8105d7a:	2220      	movs	r2, #32
 8105d7c:	68b9      	ldr	r1, [r7, #8]
 8105d7e:	4618      	mov	r0, r3
 8105d80:	f002 fb9e 	bl	81084c0 <strncmp>
 8105d84:	4603      	mov	r3, r0
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	bf0c      	ite	eq
 8105d8a:	2301      	moveq	r3, #1
 8105d8c:	2300      	movne	r3, #0
 8105d8e:	b2db      	uxtb	r3, r3
 8105d90:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8105d92:	68bb      	ldr	r3, [r7, #8]
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d018      	beq.n	8105dca <rpmsg_get_endpoint+0xa6>
 8105d98:	69bb      	ldr	r3, [r7, #24]
 8105d9a:	2b00      	cmp	r3, #0
 8105d9c:	d015      	beq.n	8105dca <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8105d9e:	683b      	ldr	r3, [r7, #0]
 8105da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105da4:	d006      	beq.n	8105db4 <rpmsg_get_endpoint+0x90>
 8105da6:	697b      	ldr	r3, [r7, #20]
 8105da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105daa:	683a      	ldr	r2, [r7, #0]
 8105dac:	429a      	cmp	r2, r3
 8105dae:	d101      	bne.n	8105db4 <rpmsg_get_endpoint+0x90>
			return ept;
 8105db0:	697b      	ldr	r3, [r7, #20]
 8105db2:	e013      	b.n	8105ddc <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105dba:	d107      	bne.n	8105dcc <rpmsg_get_endpoint+0xa8>
 8105dbc:	697b      	ldr	r3, [r7, #20]
 8105dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105dc4:	d102      	bne.n	8105dcc <rpmsg_get_endpoint+0xa8>
			return ept;
 8105dc6:	697b      	ldr	r3, [r7, #20]
 8105dc8:	e008      	b.n	8105ddc <rpmsg_get_endpoint+0xb8>
			continue;
 8105dca:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8105dcc:	69fb      	ldr	r3, [r7, #28]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	61fb      	str	r3, [r7, #28]
 8105dd2:	68fb      	ldr	r3, [r7, #12]
 8105dd4:	69fa      	ldr	r2, [r7, #28]
 8105dd6:	429a      	cmp	r2, r3
 8105dd8:	d1af      	bne.n	8105d3a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8105dda:	2300      	movs	r3, #0
}
 8105ddc:	4618      	mov	r0, r3
 8105dde:	3720      	adds	r7, #32
 8105de0:	46bd      	mov	sp, r7
 8105de2:	bd80      	pop	{r7, pc}

08105de4 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8105de4:	b580      	push	{r7, lr}
 8105de6:	b084      	sub	sp, #16
 8105de8:	af00      	add	r7, sp, #0
 8105dea:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	d016      	beq.n	8105e20 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	6a1b      	ldr	r3, [r3, #32]
 8105df6:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e00:	d008      	beq.n	8105e14 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105e02:	68fb      	ldr	r3, [r7, #12]
 8105e04:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105e0c:	461a      	mov	r2, r3
 8105e0e:	2180      	movs	r1, #128	; 0x80
 8105e10:	f7ff feec 	bl	8105bec <rpmsg_release_address>
	metal_list_del(&ept->node);
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	3334      	adds	r3, #52	; 0x34
 8105e18:	4618      	mov	r0, r3
 8105e1a:	f7ff fe0f 	bl	8105a3c <metal_list_del>
 8105e1e:	e000      	b.n	8105e22 <rpmsg_unregister_endpoint+0x3e>
		return;
 8105e20:	bf00      	nop
}
 8105e22:	3710      	adds	r7, #16
 8105e24:	46bd      	mov	sp, r7
 8105e26:	bd80      	pop	{r7, pc}

08105e28 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8105e28:	b580      	push	{r7, lr}
 8105e2a:	b082      	sub	sp, #8
 8105e2c:	af00      	add	r7, sp, #0
 8105e2e:	6078      	str	r0, [r7, #4]
 8105e30:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8105e32:	683b      	ldr	r3, [r7, #0]
 8105e34:	687a      	ldr	r2, [r7, #4]
 8105e36:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8105e38:	687a      	ldr	r2, [r7, #4]
 8105e3a:	683b      	ldr	r3, [r7, #0]
 8105e3c:	3334      	adds	r3, #52	; 0x34
 8105e3e:	4619      	mov	r1, r3
 8105e40:	4610      	mov	r0, r2
 8105e42:	f7ff fdee 	bl	8105a22 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8105e46:	2300      	movs	r3, #0
}
 8105e48:	4618      	mov	r0, r3
 8105e4a:	3708      	adds	r7, #8
 8105e4c:	46bd      	mov	sp, r7
 8105e4e:	bd80      	pop	{r7, pc}

08105e50 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8105e50:	b580      	push	{r7, lr}
 8105e52:	b088      	sub	sp, #32
 8105e54:	af02      	add	r7, sp, #8
 8105e56:	60f8      	str	r0, [r7, #12]
 8105e58:	60b9      	str	r1, [r7, #8]
 8105e5a:	607a      	str	r2, [r7, #4]
 8105e5c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8105e5e:	683b      	ldr	r3, [r7, #0]
 8105e60:	613b      	str	r3, [r7, #16]

	if (!ept)
 8105e62:	68fb      	ldr	r3, [r7, #12]
 8105e64:	2b00      	cmp	r3, #0
 8105e66:	d101      	bne.n	8105e6c <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8105e68:	4b37      	ldr	r3, [pc, #220]	; (8105f48 <rpmsg_create_ept+0xf8>)
 8105e6a:	e068      	b.n	8105f3e <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8105e6c:	68bb      	ldr	r3, [r7, #8]
 8105e6e:	3358      	adds	r3, #88	; 0x58
 8105e70:	4618      	mov	r0, r3
 8105e72:	f7ff fda6 	bl	81059c2 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8105e76:	683b      	ldr	r3, [r7, #0]
 8105e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e7c:	d018      	beq.n	8105eb0 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8105e7e:	68bb      	ldr	r3, [r7, #8]
 8105e80:	3348      	adds	r3, #72	; 0x48
 8105e82:	683a      	ldr	r2, [r7, #0]
 8105e84:	2180      	movs	r1, #128	; 0x80
 8105e86:	4618      	mov	r0, r3
 8105e88:	f7ff fec2 	bl	8105c10 <rpmsg_is_address_set>
 8105e8c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8105e8e:	697b      	ldr	r3, [r7, #20]
 8105e90:	2b00      	cmp	r3, #0
 8105e92:	d107      	bne.n	8105ea4 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105e94:	68bb      	ldr	r3, [r7, #8]
 8105e96:	3348      	adds	r3, #72	; 0x48
 8105e98:	683a      	ldr	r2, [r7, #0]
 8105e9a:	2180      	movs	r1, #128	; 0x80
 8105e9c:	4618      	mov	r0, r3
 8105e9e:	f7ff fecf 	bl	8105c40 <rpmsg_set_address>
 8105ea2:	e00c      	b.n	8105ebe <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8105ea4:	697b      	ldr	r3, [r7, #20]
 8105ea6:	2b00      	cmp	r3, #0
 8105ea8:	dd40      	ble.n	8105f2c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8105eaa:	2300      	movs	r3, #0
 8105eac:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8105eae:	e040      	b.n	8105f32 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8105eb0:	68bb      	ldr	r3, [r7, #8]
 8105eb2:	3348      	adds	r3, #72	; 0x48
 8105eb4:	2180      	movs	r1, #128	; 0x80
 8105eb6:	4618      	mov	r0, r3
 8105eb8:	f7ff fe79 	bl	8105bae <rpmsg_get_address>
 8105ebc:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8105ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ec0:	9301      	str	r3, [sp, #4]
 8105ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ec4:	9300      	str	r3, [sp, #0]
 8105ec6:	6a3b      	ldr	r3, [r7, #32]
 8105ec8:	693a      	ldr	r2, [r7, #16]
 8105eca:	6879      	ldr	r1, [r7, #4]
 8105ecc:	68f8      	ldr	r0, [r7, #12]
 8105ece:	f7ff fe51 	bl	8105b74 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8105ed2:	68f9      	ldr	r1, [r7, #12]
 8105ed4:	68b8      	ldr	r0, [r7, #8]
 8105ed6:	f7ff ffa7 	bl	8105e28 <rpmsg_register_endpoint>
 8105eda:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8105edc:	697b      	ldr	r3, [r7, #20]
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	da06      	bge.n	8105ef0 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8105ee2:	68bb      	ldr	r3, [r7, #8]
 8105ee4:	3348      	adds	r3, #72	; 0x48
 8105ee6:	693a      	ldr	r2, [r7, #16]
 8105ee8:	2180      	movs	r1, #128	; 0x80
 8105eea:	4618      	mov	r0, r3
 8105eec:	f7ff fe7e 	bl	8105bec <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8105ef0:	697b      	ldr	r3, [r7, #20]
 8105ef2:	2b00      	cmp	r3, #0
 8105ef4:	d11c      	bne.n	8105f30 <rpmsg_create_ept+0xe0>
 8105ef6:	68fb      	ldr	r3, [r7, #12]
 8105ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105efe:	d117      	bne.n	8105f30 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8105f00:	68bb      	ldr	r3, [r7, #8]
 8105f02:	3358      	adds	r3, #88	; 0x58
 8105f04:	4618      	mov	r0, r3
 8105f06:	f7ff fd67 	bl	81059d8 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8105f0a:	2100      	movs	r1, #0
 8105f0c:	68f8      	ldr	r0, [r7, #12]
 8105f0e:	f7ff fee1 	bl	8105cd4 <rpmsg_send_ns_message>
 8105f12:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8105f14:	68bb      	ldr	r3, [r7, #8]
 8105f16:	3358      	adds	r3, #88	; 0x58
 8105f18:	4618      	mov	r0, r3
 8105f1a:	f7ff fd52 	bl	81059c2 <metal_mutex_acquire>
		if (status)
 8105f1e:	697b      	ldr	r3, [r7, #20]
 8105f20:	2b00      	cmp	r3, #0
 8105f22:	d005      	beq.n	8105f30 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8105f24:	68f8      	ldr	r0, [r7, #12]
 8105f26:	f7ff ff5d 	bl	8105de4 <rpmsg_unregister_endpoint>
 8105f2a:	e002      	b.n	8105f32 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8105f2c:	bf00      	nop
 8105f2e:	e000      	b.n	8105f32 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8105f30:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8105f32:	68bb      	ldr	r3, [r7, #8]
 8105f34:	3358      	adds	r3, #88	; 0x58
 8105f36:	4618      	mov	r0, r3
 8105f38:	f7ff fd4e 	bl	81059d8 <metal_mutex_release>
	return status;
 8105f3c:	697b      	ldr	r3, [r7, #20]
}
 8105f3e:	4618      	mov	r0, r3
 8105f40:	3718      	adds	r7, #24
 8105f42:	46bd      	mov	sp, r7
 8105f44:	bd80      	pop	{r7, pc}
 8105f46:	bf00      	nop
 8105f48:	fffff82d 	.word	0xfffff82d

08105f4c <__metal_cache_invalidate>:
{
 8105f4c:	b580      	push	{r7, lr}
 8105f4e:	b082      	sub	sp, #8
 8105f50:	af00      	add	r7, sp, #0
 8105f52:	6078      	str	r0, [r7, #4]
 8105f54:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8105f56:	6839      	ldr	r1, [r7, #0]
 8105f58:	6878      	ldr	r0, [r7, #4]
 8105f5a:	f000 fc56 	bl	810680a <metal_machine_cache_invalidate>
}
 8105f5e:	bf00      	nop
 8105f60:	3708      	adds	r7, #8
 8105f62:	46bd      	mov	sp, r7
 8105f64:	bd80      	pop	{r7, pc}

08105f66 <metal_cache_invalidate>:
{
 8105f66:	b580      	push	{r7, lr}
 8105f68:	b082      	sub	sp, #8
 8105f6a:	af00      	add	r7, sp, #0
 8105f6c:	6078      	str	r0, [r7, #4]
 8105f6e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8105f70:	6839      	ldr	r1, [r7, #0]
 8105f72:	6878      	ldr	r0, [r7, #4]
 8105f74:	f7ff ffea 	bl	8105f4c <__metal_cache_invalidate>
}
 8105f78:	bf00      	nop
 8105f7a:	3708      	adds	r7, #8
 8105f7c:	46bd      	mov	sp, r7
 8105f7e:	bd80      	pop	{r7, pc}

08105f80 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8105f80:	b480      	push	{r7}
 8105f82:	b083      	sub	sp, #12
 8105f84:	af00      	add	r7, sp, #0
 8105f86:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8105f88:	2300      	movs	r3, #0
}
 8105f8a:	4618      	mov	r0, r3
 8105f8c:	370c      	adds	r7, #12
 8105f8e:	46bd      	mov	sp, r7
 8105f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f94:	4770      	bx	lr

08105f96 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8105f96:	b580      	push	{r7, lr}
 8105f98:	b082      	sub	sp, #8
 8105f9a:	af00      	add	r7, sp, #0
 8105f9c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8105f9e:	6878      	ldr	r0, [r7, #4]
 8105fa0:	f7ff ffee 	bl	8105f80 <__metal_sleep_usec>
 8105fa4:	4603      	mov	r3, r0
}
 8105fa6:	4618      	mov	r0, r3
 8105fa8:	3708      	adds	r7, #8
 8105faa:	46bd      	mov	sp, r7
 8105fac:	bd80      	pop	{r7, pc}

08105fae <metal_list_init>:
{
 8105fae:	b480      	push	{r7}
 8105fb0:	b083      	sub	sp, #12
 8105fb2:	af00      	add	r7, sp, #0
 8105fb4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	687a      	ldr	r2, [r7, #4]
 8105fba:	605a      	str	r2, [r3, #4]
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	685a      	ldr	r2, [r3, #4]
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	601a      	str	r2, [r3, #0]
}
 8105fc4:	bf00      	nop
 8105fc6:	370c      	adds	r7, #12
 8105fc8:	46bd      	mov	sp, r7
 8105fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fce:	4770      	bx	lr

08105fd0 <metal_io_virt_to_offset>:
{
 8105fd0:	b480      	push	{r7}
 8105fd2:	b085      	sub	sp, #20
 8105fd4:	af00      	add	r7, sp, #0
 8105fd6:	6078      	str	r0, [r7, #4]
 8105fd8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	683a      	ldr	r2, [r7, #0]
 8105fe0:	1ad3      	subs	r3, r2, r3
 8105fe2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	689b      	ldr	r3, [r3, #8]
 8105fe8:	68fa      	ldr	r2, [r7, #12]
 8105fea:	429a      	cmp	r2, r3
 8105fec:	d201      	bcs.n	8105ff2 <metal_io_virt_to_offset+0x22>
 8105fee:	68fb      	ldr	r3, [r7, #12]
 8105ff0:	e001      	b.n	8105ff6 <metal_io_virt_to_offset+0x26>
 8105ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105ff6:	4618      	mov	r0, r3
 8105ff8:	3714      	adds	r7, #20
 8105ffa:	46bd      	mov	sp, r7
 8105ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106000:	4770      	bx	lr

08106002 <__metal_mutex_init>:
{
 8106002:	b480      	push	{r7}
 8106004:	b085      	sub	sp, #20
 8106006:	af00      	add	r7, sp, #0
 8106008:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	60fb      	str	r3, [r7, #12]
 810600e:	2300      	movs	r3, #0
 8106010:	60bb      	str	r3, [r7, #8]
 8106012:	68bb      	ldr	r3, [r7, #8]
 8106014:	461a      	mov	r2, r3
 8106016:	68fb      	ldr	r3, [r7, #12]
 8106018:	f3bf 8f5b 	dmb	ish
 810601c:	601a      	str	r2, [r3, #0]
 810601e:	f3bf 8f5b 	dmb	ish
}
 8106022:	bf00      	nop
 8106024:	3714      	adds	r7, #20
 8106026:	46bd      	mov	sp, r7
 8106028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810602c:	4770      	bx	lr

0810602e <__metal_mutex_acquire>:
{
 810602e:	b480      	push	{r7}
 8106030:	b083      	sub	sp, #12
 8106032:	af00      	add	r7, sp, #0
 8106034:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8106036:	bf00      	nop
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	2201      	movs	r2, #1
 810603c:	4611      	mov	r1, r2
 810603e:	f3bf 8f5b 	dmb	ish
 8106042:	e8d3 2f4f 	ldrexb	r2, [r3]
 8106046:	e8c3 1f40 	strexb	r0, r1, [r3]
 810604a:	2800      	cmp	r0, #0
 810604c:	d1f9      	bne.n	8106042 <__metal_mutex_acquire+0x14>
 810604e:	f3bf 8f5b 	dmb	ish
 8106052:	b2d3      	uxtb	r3, r2
 8106054:	2b00      	cmp	r3, #0
 8106056:	d1ef      	bne.n	8106038 <__metal_mutex_acquire+0xa>
}
 8106058:	bf00      	nop
 810605a:	bf00      	nop
 810605c:	370c      	adds	r7, #12
 810605e:	46bd      	mov	sp, r7
 8106060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106064:	4770      	bx	lr

08106066 <__metal_mutex_release>:
{
 8106066:	b480      	push	{r7}
 8106068:	b083      	sub	sp, #12
 810606a:	af00      	add	r7, sp, #0
 810606c:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 810606e:	687b      	ldr	r3, [r7, #4]
 8106070:	f3bf 8f5b 	dmb	ish
 8106074:	2200      	movs	r2, #0
 8106076:	701a      	strb	r2, [r3, #0]
 8106078:	f3bf 8f5b 	dmb	ish
}
 810607c:	bf00      	nop
 810607e:	370c      	adds	r7, #12
 8106080:	46bd      	mov	sp, r7
 8106082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106086:	4770      	bx	lr

08106088 <metal_mutex_init>:
{
 8106088:	b580      	push	{r7, lr}
 810608a:	b082      	sub	sp, #8
 810608c:	af00      	add	r7, sp, #0
 810608e:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8106090:	6878      	ldr	r0, [r7, #4]
 8106092:	f7ff ffb6 	bl	8106002 <__metal_mutex_init>
}
 8106096:	bf00      	nop
 8106098:	3708      	adds	r7, #8
 810609a:	46bd      	mov	sp, r7
 810609c:	bd80      	pop	{r7, pc}

0810609e <metal_mutex_acquire>:
{
 810609e:	b580      	push	{r7, lr}
 81060a0:	b082      	sub	sp, #8
 81060a2:	af00      	add	r7, sp, #0
 81060a4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81060a6:	6878      	ldr	r0, [r7, #4]
 81060a8:	f7ff ffc1 	bl	810602e <__metal_mutex_acquire>
}
 81060ac:	bf00      	nop
 81060ae:	3708      	adds	r7, #8
 81060b0:	46bd      	mov	sp, r7
 81060b2:	bd80      	pop	{r7, pc}

081060b4 <metal_mutex_release>:
{
 81060b4:	b580      	push	{r7, lr}
 81060b6:	b082      	sub	sp, #8
 81060b8:	af00      	add	r7, sp, #0
 81060ba:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81060bc:	6878      	ldr	r0, [r7, #4]
 81060be:	f7ff ffd2 	bl	8106066 <__metal_mutex_release>
}
 81060c2:	bf00      	nop
 81060c4:	3708      	adds	r7, #8
 81060c6:	46bd      	mov	sp, r7
 81060c8:	bd80      	pop	{r7, pc}

081060ca <rpmsg_init_ept>:
{
 81060ca:	b580      	push	{r7, lr}
 81060cc:	b084      	sub	sp, #16
 81060ce:	af00      	add	r7, sp, #0
 81060d0:	60f8      	str	r0, [r7, #12]
 81060d2:	60b9      	str	r1, [r7, #8]
 81060d4:	607a      	str	r2, [r7, #4]
 81060d6:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81060d8:	68fb      	ldr	r3, [r7, #12]
 81060da:	2220      	movs	r2, #32
 81060dc:	68b9      	ldr	r1, [r7, #8]
 81060de:	4618      	mov	r0, r3
 81060e0:	f002 fa00 	bl	81084e4 <strncpy>
	ept->addr = src;
 81060e4:	68fb      	ldr	r3, [r7, #12]
 81060e6:	687a      	ldr	r2, [r7, #4]
 81060e8:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 81060ea:	68fb      	ldr	r3, [r7, #12]
 81060ec:	683a      	ldr	r2, [r7, #0]
 81060ee:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 81060f0:	68fb      	ldr	r3, [r7, #12]
 81060f2:	69ba      	ldr	r2, [r7, #24]
 81060f4:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81060f6:	68fb      	ldr	r3, [r7, #12]
 81060f8:	69fa      	ldr	r2, [r7, #28]
 81060fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 81060fc:	bf00      	nop
 81060fe:	3710      	adds	r7, #16
 8106100:	46bd      	mov	sp, r7
 8106102:	bd80      	pop	{r7, pc}

08106104 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8106104:	b480      	push	{r7}
 8106106:	b083      	sub	sp, #12
 8106108:	af00      	add	r7, sp, #0
 810610a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106110:	699b      	ldr	r3, [r3, #24]
}
 8106112:	4618      	mov	r0, r3
 8106114:	370c      	adds	r7, #12
 8106116:	46bd      	mov	sp, r7
 8106118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810611c:	4770      	bx	lr

0810611e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 810611e:	b580      	push	{r7, lr}
 8106120:	b082      	sub	sp, #8
 8106122:	af00      	add	r7, sp, #0
 8106124:	6078      	str	r0, [r7, #4]
 8106126:	460b      	mov	r3, r1
 8106128:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810612e:	6a1b      	ldr	r3, [r3, #32]
 8106130:	685b      	ldr	r3, [r3, #4]
 8106132:	687a      	ldr	r2, [r7, #4]
 8106134:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106136:	78f9      	ldrb	r1, [r7, #3]
 8106138:	4610      	mov	r0, r2
 810613a:	4798      	blx	r3
}
 810613c:	bf00      	nop
 810613e:	3708      	adds	r7, #8
 8106140:	46bd      	mov	sp, r7
 8106142:	bd80      	pop	{r7, pc}

08106144 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8106144:	b580      	push	{r7, lr}
 8106146:	b082      	sub	sp, #8
 8106148:	af00      	add	r7, sp, #0
 810614a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106150:	6a1b      	ldr	r3, [r3, #32]
 8106152:	681b      	ldr	r3, [r3, #0]
 8106154:	687a      	ldr	r2, [r7, #4]
 8106156:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106158:	4610      	mov	r0, r2
 810615a:	4798      	blx	r3
 810615c:	4603      	mov	r3, r0
}
 810615e:	4618      	mov	r0, r3
 8106160:	3708      	adds	r7, #8
 8106162:	46bd      	mov	sp, r7
 8106164:	bd80      	pop	{r7, pc}

08106166 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8106166:	b580      	push	{r7, lr}
 8106168:	b082      	sub	sp, #8
 810616a:	af00      	add	r7, sp, #0
 810616c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106172:	6a1b      	ldr	r3, [r3, #32]
 8106174:	689b      	ldr	r3, [r3, #8]
 8106176:	687a      	ldr	r2, [r7, #4]
 8106178:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810617a:	4610      	mov	r0, r2
 810617c:	4798      	blx	r3
 810617e:	4603      	mov	r3, r0
}
 8106180:	4618      	mov	r0, r3
 8106182:	3708      	adds	r7, #8
 8106184:	46bd      	mov	sp, r7
 8106186:	bd80      	pop	{r7, pc}

08106188 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8106188:	b580      	push	{r7, lr}
 810618a:	b086      	sub	sp, #24
 810618c:	af02      	add	r7, sp, #8
 810618e:	60f8      	str	r0, [r7, #12]
 8106190:	60b9      	str	r1, [r7, #8]
 8106192:	607a      	str	r2, [r7, #4]
 8106194:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8106196:	68fb      	ldr	r3, [r7, #12]
 8106198:	6e58      	ldr	r0, [r3, #100]	; 0x64
 810619a:	68b9      	ldr	r1, [r7, #8]
 810619c:	69bb      	ldr	r3, [r7, #24]
 810619e:	9300      	str	r3, [sp, #0]
 81061a0:	683b      	ldr	r3, [r7, #0]
 81061a2:	687a      	ldr	r2, [r7, #4]
 81061a4:	f000 fb4a 	bl	810683c <virtio_create_virtqueues>
 81061a8:	4603      	mov	r3, r0
					callbacks);
}
 81061aa:	4618      	mov	r0, r3
 81061ac:	3710      	adds	r7, #16
 81061ae:	46bd      	mov	sp, r7
 81061b0:	bd80      	pop	{r7, pc}

081061b2 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 81061b2:	b580      	push	{r7, lr}
 81061b4:	b082      	sub	sp, #8
 81061b6:	af00      	add	r7, sp, #0
 81061b8:	6078      	str	r0, [r7, #4]
 81061ba:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 81061bc:	f04f 33ff 	mov.w	r3, #4294967295
 81061c0:	683a      	ldr	r2, [r7, #0]
 81061c2:	2100      	movs	r1, #0
 81061c4:	6878      	ldr	r0, [r7, #4]
 81061c6:	f7ff fdad 	bl	8105d24 <rpmsg_get_endpoint>
 81061ca:	4603      	mov	r3, r0
}
 81061cc:	4618      	mov	r0, r3
 81061ce:	3708      	adds	r7, #8
 81061d0:	46bd      	mov	sp, r7
 81061d2:	bd80      	pop	{r7, pc}

081061d4 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81061d4:	b480      	push	{r7}
 81061d6:	b085      	sub	sp, #20
 81061d8:	af00      	add	r7, sp, #0
 81061da:	60f8      	str	r0, [r7, #12]
 81061dc:	60b9      	str	r1, [r7, #8]
 81061de:	607a      	str	r2, [r7, #4]
	if (!shpool)
 81061e0:	68fb      	ldr	r3, [r7, #12]
 81061e2:	2b00      	cmp	r3, #0
 81061e4:	d01d      	beq.n	8106222 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 81061e6:	68fb      	ldr	r3, [r7, #12]
 81061e8:	68ba      	ldr	r2, [r7, #8]
 81061ea:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	f003 0303 	and.w	r3, r3, #3
 81061f2:	2b00      	cmp	r3, #0
 81061f4:	d004      	beq.n	8106200 <rpmsg_virtio_init_shm_pool+0x2c>
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	f023 0303 	bic.w	r3, r3, #3
 81061fc:	3304      	adds	r3, #4
 81061fe:	e000      	b.n	8106202 <rpmsg_virtio_init_shm_pool+0x2e>
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	68fa      	ldr	r2, [r7, #12]
 8106204:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	f003 0303 	and.w	r3, r3, #3
 810620c:	2b00      	cmp	r3, #0
 810620e:	d004      	beq.n	810621a <rpmsg_virtio_init_shm_pool+0x46>
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	f023 0303 	bic.w	r3, r3, #3
 8106216:	3304      	adds	r3, #4
 8106218:	e000      	b.n	810621c <rpmsg_virtio_init_shm_pool+0x48>
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	68fa      	ldr	r2, [r7, #12]
 810621e:	6053      	str	r3, [r2, #4]
 8106220:	e000      	b.n	8106224 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8106222:	bf00      	nop
}
 8106224:	3714      	adds	r7, #20
 8106226:	46bd      	mov	sp, r7
 8106228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810622c:	4770      	bx	lr

0810622e <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810622e:	b580      	push	{r7, lr}
 8106230:	b086      	sub	sp, #24
 8106232:	af00      	add	r7, sp, #0
 8106234:	60f8      	str	r0, [r7, #12]
 8106236:	60b9      	str	r1, [r7, #8]
 8106238:	607a      	str	r2, [r7, #4]
 810623a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810623c:	68f8      	ldr	r0, [r7, #12]
 810623e:	f7ff ff61 	bl	8106104 <rpmsg_virtio_get_role>
 8106242:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106244:	697b      	ldr	r3, [r7, #20]
 8106246:	2b01      	cmp	r3, #1
 8106248:	d106      	bne.n	8106258 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 810624a:	68fb      	ldr	r3, [r7, #12]
 810624c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810624e:	8879      	ldrh	r1, [r7, #2]
 8106250:	687a      	ldr	r2, [r7, #4]
 8106252:	4618      	mov	r0, r3
 8106254:	f000 fc9c 	bl	8106b90 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8106258:	bf00      	nop
 810625a:	3718      	adds	r7, #24
 810625c:	46bd      	mov	sp, r7
 810625e:	bd80      	pop	{r7, pc}

08106260 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8106260:	b580      	push	{r7, lr}
 8106262:	b086      	sub	sp, #24
 8106264:	af00      	add	r7, sp, #0
 8106266:	60f8      	str	r0, [r7, #12]
 8106268:	60b9      	str	r1, [r7, #8]
 810626a:	607a      	str	r2, [r7, #4]
 810626c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810626e:	68f8      	ldr	r0, [r7, #12]
 8106270:	f7ff ff48 	bl	8106104 <rpmsg_virtio_get_role>
 8106274:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106276:	697b      	ldr	r3, [r7, #20]
 8106278:	2b01      	cmp	r3, #1
 810627a:	d108      	bne.n	810628e <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 810627c:	68fb      	ldr	r3, [r7, #12]
 810627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106280:	8879      	ldrh	r1, [r7, #2]
 8106282:	687a      	ldr	r2, [r7, #4]
 8106284:	4618      	mov	r0, r3
 8106286:	f000 fc83 	bl	8106b90 <virtqueue_add_consumed_buffer>
 810628a:	4603      	mov	r3, r0
 810628c:	e000      	b.n	8106290 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 810628e:	2300      	movs	r3, #0
}
 8106290:	4618      	mov	r0, r3
 8106292:	3718      	adds	r7, #24
 8106294:	46bd      	mov	sp, r7
 8106296:	bd80      	pop	{r7, pc}

08106298 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8106298:	b580      	push	{r7, lr}
 810629a:	b086      	sub	sp, #24
 810629c:	af00      	add	r7, sp, #0
 810629e:	60f8      	str	r0, [r7, #12]
 81062a0:	60b9      	str	r1, [r7, #8]
 81062a2:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81062a4:	68f8      	ldr	r0, [r7, #12]
 81062a6:	f7ff ff2d 	bl	8106104 <rpmsg_virtio_get_role>
 81062aa:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81062ac:	2300      	movs	r3, #0
 81062ae:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81062b0:	693b      	ldr	r3, [r7, #16]
 81062b2:	2b01      	cmp	r3, #1
 81062b4:	d107      	bne.n	81062c6 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 81062b6:	68fb      	ldr	r3, [r7, #12]
 81062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81062ba:	68ba      	ldr	r2, [r7, #8]
 81062bc:	6879      	ldr	r1, [r7, #4]
 81062be:	4618      	mov	r0, r3
 81062c0:	f000 fc20 	bl	8106b04 <virtqueue_get_available_buffer>
 81062c4:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 81062c6:	697b      	ldr	r3, [r7, #20]
}
 81062c8:	4618      	mov	r0, r3
 81062ca:	3718      	adds	r7, #24
 81062cc:	46bd      	mov	sp, r7
 81062ce:	bd80      	pop	{r7, pc}

081062d0 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81062d0:	b580      	push	{r7, lr}
 81062d2:	b086      	sub	sp, #24
 81062d4:	af00      	add	r7, sp, #0
 81062d6:	60f8      	str	r0, [r7, #12]
 81062d8:	60b9      	str	r1, [r7, #8]
 81062da:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81062dc:	68f8      	ldr	r0, [r7, #12]
 81062de:	f7ff ff11 	bl	8106104 <rpmsg_virtio_get_role>
 81062e2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81062e4:	2300      	movs	r3, #0
 81062e6:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81062e8:	693b      	ldr	r3, [r7, #16]
 81062ea:	2b01      	cmp	r3, #1
 81062ec:	d107      	bne.n	81062fe <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 81062ee:	68fb      	ldr	r3, [r7, #12]
 81062f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81062f2:	68ba      	ldr	r2, [r7, #8]
 81062f4:	6879      	ldr	r1, [r7, #4]
 81062f6:	4618      	mov	r0, r3
 81062f8:	f000 fc04 	bl	8106b04 <virtqueue_get_available_buffer>
 81062fc:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 81062fe:	697b      	ldr	r3, [r7, #20]
 8106300:	2b00      	cmp	r3, #0
 8106302:	d005      	beq.n	8106310 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8106304:	68bb      	ldr	r3, [r7, #8]
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	4619      	mov	r1, r3
 810630a:	6978      	ldr	r0, [r7, #20]
 810630c:	f7ff fe2b 	bl	8105f66 <metal_cache_invalidate>
	}

	return data;
 8106310:	697b      	ldr	r3, [r7, #20]
}
 8106312:	4618      	mov	r0, r3
 8106314:	3718      	adds	r7, #24
 8106316:	46bd      	mov	sp, r7
 8106318:	bd80      	pop	{r7, pc}

0810631a <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 810631a:	b580      	push	{r7, lr}
 810631c:	b084      	sub	sp, #16
 810631e:	af00      	add	r7, sp, #0
 8106320:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8106322:	6878      	ldr	r0, [r7, #4]
 8106324:	f7ff ff0e 	bl	8106144 <rpmsg_virtio_get_status>
 8106328:	4603      	mov	r3, r0
 810632a:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 810632c:	7bfb      	ldrb	r3, [r7, #15]
 810632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106332:	2b00      	cmp	r3, #0
 8106334:	d004      	beq.n	8106340 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8106336:	2100      	movs	r1, #0
 8106338:	6878      	ldr	r0, [r7, #4]
 810633a:	f7ff fef0 	bl	810611e <rpmsg_virtio_set_status>
 810633e:	e7f0      	b.n	8106322 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8106340:	7bfb      	ldrb	r3, [r7, #15]
 8106342:	f003 0304 	and.w	r3, r3, #4
 8106346:	2b00      	cmp	r3, #0
 8106348:	d0eb      	beq.n	8106322 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 810634a:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 810634c:	4618      	mov	r0, r3
 810634e:	3710      	adds	r7, #16
 8106350:	46bd      	mov	sp, r7
 8106352:	bd80      	pop	{r7, pc}

08106354 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8106354:	b580      	push	{r7, lr}
 8106356:	b084      	sub	sp, #16
 8106358:	af00      	add	r7, sp, #0
 810635a:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810635c:	6878      	ldr	r0, [r7, #4]
 810635e:	f7ff fed1 	bl	8106104 <rpmsg_virtio_get_role>
 8106362:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8106364:	2300      	movs	r3, #0
 8106366:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106368:	68bb      	ldr	r3, [r7, #8]
 810636a:	2b01      	cmp	r3, #1
 810636c:	d107      	bne.n	810637e <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106372:	4618      	mov	r0, r3
 8106374:	f000 fc86 	bl	8106c84 <virtqueue_get_desc_size>
 8106378:	4603      	mov	r3, r0
 810637a:	3b10      	subs	r3, #16
		length =
 810637c:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 810637e:	68fb      	ldr	r3, [r7, #12]
}
 8106380:	4618      	mov	r0, r3
 8106382:	3710      	adds	r7, #16
 8106384:	46bd      	mov	sp, r7
 8106386:	bd80      	pop	{r7, pc}

08106388 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8106388:	b580      	push	{r7, lr}
 810638a:	b090      	sub	sp, #64	; 0x40
 810638c:	af00      	add	r7, sp, #0
 810638e:	60f8      	str	r0, [r7, #12]
 8106390:	60b9      	str	r1, [r7, #8]
 8106392:	607a      	str	r2, [r7, #4]
 8106394:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8106396:	2300      	movs	r3, #0
 8106398:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 810639a:	2300      	movs	r3, #0
 810639c:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 810639e:	68fb      	ldr	r3, [r7, #12]
 81063a0:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 81063a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81063a4:	f7ff fece 	bl	8106144 <rpmsg_virtio_get_status>
 81063a8:	4603      	mov	r3, r0
 81063aa:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 81063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063ae:	f003 0304 	and.w	r3, r3, #4
 81063b2:	2b00      	cmp	r3, #0
 81063b4:	d101      	bne.n	81063ba <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 81063b6:	4b45      	ldr	r3, [pc, #276]	; (81064cc <rpmsg_virtio_send_offchannel_raw+0x144>)
 81063b8:	e083      	b.n	81064c2 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 81063ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81063bc:	2b00      	cmp	r3, #0
 81063be:	d003      	beq.n	81063c8 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 81063c0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 81063c4:	63bb      	str	r3, [r7, #56]	; 0x38
 81063c6:	e001      	b.n	81063cc <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 81063c8:	2300      	movs	r3, #0
 81063ca:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81063cc:	68fb      	ldr	r3, [r7, #12]
 81063ce:	3358      	adds	r3, #88	; 0x58
 81063d0:	4618      	mov	r0, r3
 81063d2:	f7ff fe64 	bl	810609e <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 81063d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81063d8:	f7ff ffbc 	bl	8106354 <_rpmsg_virtio_get_buffer_size>
 81063dc:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 81063de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81063e2:	429a      	cmp	r2, r3
 81063e4:	dc08      	bgt.n	81063f8 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81063e6:	f107 0216 	add.w	r2, r7, #22
 81063ea:	f107 0310 	add.w	r3, r7, #16
 81063ee:	4619      	mov	r1, r3
 81063f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81063f2:	f7ff ff51 	bl	8106298 <rpmsg_virtio_get_tx_buffer>
 81063f6:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 81063f8:	68fb      	ldr	r3, [r7, #12]
 81063fa:	3358      	adds	r3, #88	; 0x58
 81063fc:	4618      	mov	r0, r3
 81063fe:	f7ff fe59 	bl	81060b4 <metal_mutex_release>
		if (buffer || !tick_count)
 8106402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106404:	2b00      	cmp	r3, #0
 8106406:	d10e      	bne.n	8106426 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8106408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810640a:	2b00      	cmp	r3, #0
 810640c:	d00b      	beq.n	8106426 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 810640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106410:	2b00      	cmp	r3, #0
 8106412:	d001      	beq.n	8106418 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8106414:	4b2e      	ldr	r3, [pc, #184]	; (81064d0 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8106416:	e054      	b.n	81064c2 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8106418:	200a      	movs	r0, #10
 810641a:	f7ff fdbc 	bl	8105f96 <metal_sleep_usec>
		tick_count--;
 810641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106420:	3b01      	subs	r3, #1
 8106422:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8106424:	e7d2      	b.n	81063cc <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8106426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106428:	2b00      	cmp	r3, #0
 810642a:	d101      	bne.n	8106430 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 810642c:	4b29      	ldr	r3, [pc, #164]	; (81064d4 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 810642e:	e048      	b.n	81064c2 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8106434:	68bb      	ldr	r3, [r7, #8]
 8106436:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8106438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810643a:	b29b      	uxth	r3, r3
 810643c:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 810643e:	2300      	movs	r3, #0
 8106440:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8106442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106446:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8106448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810644a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810644c:	f7ff fdc0 	bl	8105fd0 <metal_io_virt_to_offset>
 8106450:	4601      	mov	r1, r0
 8106452:	f107 0218 	add.w	r2, r7, #24
 8106456:	2310      	movs	r3, #16
 8106458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810645a:	f7fe ff5a 	bl	8105312 <metal_io_block_write>
 810645e:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8106460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106462:	2b10      	cmp	r3, #16
 8106464:	d000      	beq.n	8106468 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8106466:	e7fe      	b.n	8106466 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8106468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810646a:	3310      	adds	r3, #16
 810646c:	4619      	mov	r1, r3
 810646e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106470:	f7ff fdae 	bl	8105fd0 <metal_io_virt_to_offset>
 8106474:	4601      	mov	r1, r0
 8106476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106478:	683a      	ldr	r2, [r7, #0]
 810647a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810647c:	f7fe ff49 	bl	8105312 <metal_io_block_write>
 8106480:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8106482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106486:	429a      	cmp	r2, r3
 8106488:	d000      	beq.n	810648c <rpmsg_virtio_send_offchannel_raw+0x104>
 810648a:	e7fe      	b.n	810648a <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 810648c:	68fb      	ldr	r3, [r7, #12]
 810648e:	3358      	adds	r3, #88	; 0x58
 8106490:	4618      	mov	r0, r3
 8106492:	f7ff fe04 	bl	810609e <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8106496:	693a      	ldr	r2, [r7, #16]
 8106498:	8afb      	ldrh	r3, [r7, #22]
 810649a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810649c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810649e:	f7ff fedf 	bl	8106260 <rpmsg_virtio_enqueue_buffer>
 81064a2:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 81064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81064a6:	2b00      	cmp	r3, #0
 81064a8:	d000      	beq.n	81064ac <rpmsg_virtio_send_offchannel_raw+0x124>
 81064aa:	e7fe      	b.n	81064aa <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 81064ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81064ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81064b0:	4618      	mov	r0, r3
 81064b2:	f000 fbd1 	bl	8106c58 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 81064b6:	68fb      	ldr	r3, [r7, #12]
 81064b8:	3358      	adds	r3, #88	; 0x58
 81064ba:	4618      	mov	r0, r3
 81064bc:	f7ff fdfa 	bl	81060b4 <metal_mutex_release>

	return size;
 81064c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 81064c2:	4618      	mov	r0, r3
 81064c4:	3740      	adds	r7, #64	; 0x40
 81064c6:	46bd      	mov	sp, r7
 81064c8:	bd80      	pop	{r7, pc}
 81064ca:	bf00      	nop
 81064cc:	fffff82c 	.word	0xfffff82c
 81064d0:	fffff82b 	.word	0xfffff82b
 81064d4:	fffff82e 	.word	0xfffff82e

081064d8 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 81064d8:	b480      	push	{r7}
 81064da:	b083      	sub	sp, #12
 81064dc:	af00      	add	r7, sp, #0
 81064de:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81064e0:	bf00      	nop
 81064e2:	370c      	adds	r7, #12
 81064e4:	46bd      	mov	sp, r7
 81064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064ea:	4770      	bx	lr

081064ec <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 81064ec:	b590      	push	{r4, r7, lr}
 81064ee:	b08d      	sub	sp, #52	; 0x34
 81064f0:	af02      	add	r7, sp, #8
 81064f2:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	681b      	ldr	r3, [r3, #0]
 81064f8:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 81064fa:	6a3b      	ldr	r3, [r7, #32]
 81064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81064fe:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8106500:	69fb      	ldr	r3, [r7, #28]
 8106502:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8106504:	69bb      	ldr	r3, [r7, #24]
 8106506:	3358      	adds	r3, #88	; 0x58
 8106508:	4618      	mov	r0, r3
 810650a:	f7ff fdc8 	bl	810609e <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 810650e:	f107 020a 	add.w	r2, r7, #10
 8106512:	f107 030c 	add.w	r3, r7, #12
 8106516:	4619      	mov	r1, r3
 8106518:	69f8      	ldr	r0, [r7, #28]
 810651a:	f7ff fed9 	bl	81062d0 <rpmsg_virtio_get_rx_buffer>
 810651e:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8106520:	69bb      	ldr	r3, [r7, #24]
 8106522:	3358      	adds	r3, #88	; 0x58
 8106524:	4618      	mov	r0, r3
 8106526:	f7ff fdc5 	bl	81060b4 <metal_mutex_release>

	while (rp_hdr) {
 810652a:	e04c      	b.n	81065c6 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 810652c:	69bb      	ldr	r3, [r7, #24]
 810652e:	3358      	adds	r3, #88	; 0x58
 8106530:	4618      	mov	r0, r3
 8106532:	f7ff fdb4 	bl	810609e <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8106536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106538:	685b      	ldr	r3, [r3, #4]
 810653a:	4619      	mov	r1, r3
 810653c:	69b8      	ldr	r0, [r7, #24]
 810653e:	f7ff fe38 	bl	81061b2 <rpmsg_get_ept_from_addr>
 8106542:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8106544:	69bb      	ldr	r3, [r7, #24]
 8106546:	3358      	adds	r3, #88	; 0x58
 8106548:	4618      	mov	r0, r3
 810654a:	f7ff fdb3 	bl	81060b4 <metal_mutex_release>

		if (!ept)
 810654e:	697b      	ldr	r3, [r7, #20]
 8106550:	2b00      	cmp	r3, #0
 8106552:	d03c      	beq.n	81065ce <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8106554:	697b      	ldr	r3, [r7, #20]
 8106556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106558:	f1b3 3fff 	cmp.w	r3, #4294967295
 810655c:	d103      	bne.n	8106566 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 810655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106560:	681a      	ldr	r2, [r3, #0]
 8106562:	697b      	ldr	r3, [r7, #20]
 8106564:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8106566:	697b      	ldr	r3, [r7, #20]
 8106568:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 810656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810656c:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8106570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106572:	899b      	ldrh	r3, [r3, #12]
 8106574:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8106576:	4618      	mov	r0, r3
 8106578:	697b      	ldr	r3, [r7, #20]
 810657a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810657c:	697b      	ldr	r3, [r7, #20]
 810657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106580:	9300      	str	r3, [sp, #0]
 8106582:	4613      	mov	r3, r2
 8106584:	4602      	mov	r2, r0
 8106586:	6978      	ldr	r0, [r7, #20]
 8106588:	47a0      	blx	r4
 810658a:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 810658c:	693b      	ldr	r3, [r7, #16]
 810658e:	2b00      	cmp	r3, #0
 8106590:	d000      	beq.n	8106594 <rpmsg_virtio_rx_callback+0xa8>
 8106592:	e7fe      	b.n	8106592 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8106594:	69bb      	ldr	r3, [r7, #24]
 8106596:	3358      	adds	r3, #88	; 0x58
 8106598:	4618      	mov	r0, r3
 810659a:	f7ff fd80 	bl	810609e <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 810659e:	68fa      	ldr	r2, [r7, #12]
 81065a0:	897b      	ldrh	r3, [r7, #10]
 81065a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81065a4:	69f8      	ldr	r0, [r7, #28]
 81065a6:	f7ff fe42 	bl	810622e <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 81065aa:	f107 020a 	add.w	r2, r7, #10
 81065ae:	f107 030c 	add.w	r3, r7, #12
 81065b2:	4619      	mov	r1, r3
 81065b4:	69f8      	ldr	r0, [r7, #28]
 81065b6:	f7ff fe8b 	bl	81062d0 <rpmsg_virtio_get_rx_buffer>
 81065ba:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 81065bc:	69bb      	ldr	r3, [r7, #24]
 81065be:	3358      	adds	r3, #88	; 0x58
 81065c0:	4618      	mov	r0, r3
 81065c2:	f7ff fd77 	bl	81060b4 <metal_mutex_release>
	while (rp_hdr) {
 81065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81065c8:	2b00      	cmp	r3, #0
 81065ca:	d1af      	bne.n	810652c <rpmsg_virtio_rx_callback+0x40>
 81065cc:	e000      	b.n	81065d0 <rpmsg_virtio_rx_callback+0xe4>
			return;
 81065ce:	bf00      	nop
	}
}
 81065d0:	372c      	adds	r7, #44	; 0x2c
 81065d2:	46bd      	mov	sp, r7
 81065d4:	bd90      	pop	{r4, r7, pc}

081065d6 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 81065d6:	b580      	push	{r7, lr}
 81065d8:	b092      	sub	sp, #72	; 0x48
 81065da:	af00      	add	r7, sp, #0
 81065dc:	60f8      	str	r0, [r7, #12]
 81065de:	60b9      	str	r1, [r7, #8]
 81065e0:	607a      	str	r2, [r7, #4]
 81065e2:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81065e4:	68fb      	ldr	r3, [r7, #12]
 81065e6:	6a1b      	ldr	r3, [r3, #32]
 81065e8:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 81065ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81065ec:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 81065ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 81065f4:	68bb      	ldr	r3, [r7, #8]
 81065f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	2b28      	cmp	r3, #40	; 0x28
 81065fc:	d001      	beq.n	8106602 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 81065fe:	2300      	movs	r3, #0
 8106600:	e057      	b.n	81066b2 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8106602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8106604:	4619      	mov	r1, r3
 8106606:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8106608:	f7ff fce2 	bl	8105fd0 <metal_io_virt_to_offset>
 810660c:	4601      	mov	r1, r0
 810660e:	f107 0210 	add.w	r2, r7, #16
 8106612:	2320      	movs	r3, #32
 8106614:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8106616:	f7fe fe05 	bl	8105224 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 810661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810661c:	6a1b      	ldr	r3, [r3, #32]
 810661e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8106620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106622:	3358      	adds	r3, #88	; 0x58
 8106624:	4618      	mov	r0, r3
 8106626:	f7ff fd3a 	bl	810609e <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 810662a:	f107 0110 	add.w	r1, r7, #16
 810662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106630:	f04f 32ff 	mov.w	r2, #4294967295
 8106634:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8106636:	f7ff fb75 	bl	8105d24 <rpmsg_get_endpoint>
 810663a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 810663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106640:	f003 0301 	and.w	r3, r3, #1
 8106644:	2b00      	cmp	r3, #0
 8106646:	d017      	beq.n	8106678 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8106648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810664a:	2b00      	cmp	r3, #0
 810664c:	d003      	beq.n	8106656 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 810664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106650:	f04f 32ff 	mov.w	r2, #4294967295
 8106654:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8106656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106658:	3358      	adds	r3, #88	; 0x58
 810665a:	4618      	mov	r0, r3
 810665c:	f7ff fd2a 	bl	81060b4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8106660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106662:	2b00      	cmp	r3, #0
 8106664:	d024      	beq.n	81066b0 <rpmsg_virtio_ns_callback+0xda>
 8106666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810666a:	2b00      	cmp	r3, #0
 810666c:	d020      	beq.n	81066b0 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 810666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106672:	68f8      	ldr	r0, [r7, #12]
 8106674:	4798      	blx	r3
 8106676:	e01b      	b.n	81066b0 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8106678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810667a:	2b00      	cmp	r3, #0
 810667c:	d110      	bne.n	81066a0 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 810667e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106680:	3358      	adds	r3, #88	; 0x58
 8106682:	4618      	mov	r0, r3
 8106684:	f7ff fd16 	bl	81060b4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8106688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810668a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810668c:	2b00      	cmp	r3, #0
 810668e:	d00f      	beq.n	81066b0 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8106690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106694:	f107 0110 	add.w	r1, r7, #16
 8106698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810669a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 810669c:	4798      	blx	r3
 810669e:	e007      	b.n	81066b0 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 81066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81066a4:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 81066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81066a8:	3358      	adds	r3, #88	; 0x58
 81066aa:	4618      	mov	r0, r3
 81066ac:	f7ff fd02 	bl	81060b4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 81066b0:	2300      	movs	r3, #0
}
 81066b2:	4618      	mov	r0, r3
 81066b4:	3748      	adds	r7, #72	; 0x48
 81066b6:	46bd      	mov	sp, r7
 81066b8:	bd80      	pop	{r7, pc}
	...

081066bc <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 81066bc:	b580      	push	{r7, lr}
 81066be:	b090      	sub	sp, #64	; 0x40
 81066c0:	af02      	add	r7, sp, #8
 81066c2:	60f8      	str	r0, [r7, #12]
 81066c4:	60b9      	str	r1, [r7, #8]
 81066c6:	607a      	str	r2, [r7, #4]
 81066c8:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81066ca:	68fb      	ldr	r3, [r7, #12]
 81066cc:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 81066ce:	2264      	movs	r2, #100	; 0x64
 81066d0:	2100      	movs	r1, #0
 81066d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81066d4:	f000 fe38 	bl	8107348 <memset>
	metal_mutex_init(&rdev->lock);
 81066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066da:	3358      	adds	r3, #88	; 0x58
 81066dc:	4618      	mov	r0, r3
 81066de:	f7ff fcd3 	bl	8106088 <metal_mutex_init>
	rvdev->vdev = vdev;
 81066e2:	68fb      	ldr	r3, [r7, #12]
 81066e4:	68ba      	ldr	r2, [r7, #8]
 81066e6:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 81066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066ea:	687a      	ldr	r2, [r7, #4]
 81066ec:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 81066ee:	68bb      	ldr	r3, [r7, #8]
 81066f0:	68fa      	ldr	r2, [r7, #12]
 81066f2:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 81066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066f6:	4a38      	ldr	r2, [pc, #224]	; (81067d8 <rpmsg_init_vdev+0x11c>)
 81066f8:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 81066fa:	68f8      	ldr	r0, [r7, #12]
 81066fc:	f7ff fd02 	bl	8106104 <rpmsg_virtio_get_role>
 8106700:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8106702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106704:	2b01      	cmp	r3, #1
 8106706:	d112      	bne.n	810672e <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8106708:	4b34      	ldr	r3, [pc, #208]	; (81067dc <rpmsg_init_vdev+0x120>)
 810670a:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 810670c:	4b34      	ldr	r3, [pc, #208]	; (81067e0 <rpmsg_init_vdev+0x124>)
 810670e:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8106710:	4b34      	ldr	r3, [pc, #208]	; (81067e4 <rpmsg_init_vdev+0x128>)
 8106712:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8106714:	4b34      	ldr	r3, [pc, #208]	; (81067e8 <rpmsg_init_vdev+0x12c>)
 8106716:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8106718:	68bb      	ldr	r3, [r7, #8]
 810671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810671c:	3318      	adds	r3, #24
 810671e:	681a      	ldr	r2, [r3, #0]
 8106720:	68fb      	ldr	r3, [r7, #12]
 8106722:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8106724:	68bb      	ldr	r3, [r7, #8]
 8106726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106728:	681a      	ldr	r2, [r3, #0]
 810672a:	68fb      	ldr	r3, [r7, #12]
 810672c:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 810672e:	68fb      	ldr	r3, [r7, #12]
 8106730:	683a      	ldr	r2, [r7, #0]
 8106732:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106736:	2b01      	cmp	r3, #1
 8106738:	d102      	bne.n	8106740 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 810673a:	68f8      	ldr	r0, [r7, #12]
 810673c:	f7ff fded 	bl	810631a <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8106740:	f107 0218 	add.w	r2, r7, #24
 8106744:	f107 0310 	add.w	r3, r7, #16
 8106748:	9300      	str	r3, [sp, #0]
 810674a:	4613      	mov	r3, r2
 810674c:	2202      	movs	r2, #2
 810674e:	2100      	movs	r1, #0
 8106750:	68f8      	ldr	r0, [r7, #12]
 8106752:	f7ff fd19 	bl	8106188 <rpmsg_virtio_create_virtqueues>
 8106756:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8106758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810675a:	2b00      	cmp	r3, #0
 810675c:	d001      	beq.n	8106762 <rpmsg_init_vdev+0xa6>
		return status;
 810675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106760:	e035      	b.n	81067ce <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106762:	2300      	movs	r3, #0
 8106764:	637b      	str	r3, [r7, #52]	; 0x34
 8106766:	e00f      	b.n	8106788 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8106768:	68bb      	ldr	r3, [r7, #8]
 810676a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810676c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810676e:	4613      	mov	r3, r2
 8106770:	005b      	lsls	r3, r3, #1
 8106772:	4413      	add	r3, r2
 8106774:	00db      	lsls	r3, r3, #3
 8106776:	440b      	add	r3, r1
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 810677c:	6a3b      	ldr	r3, [r7, #32]
 810677e:	683a      	ldr	r2, [r7, #0]
 8106780:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106784:	3301      	adds	r3, #1
 8106786:	637b      	str	r3, [r7, #52]	; 0x34
 8106788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810678a:	2b01      	cmp	r3, #1
 810678c:	d9ec      	bls.n	8106768 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 810678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106790:	4618      	mov	r0, r3
 8106792:	f7ff fc0c 	bl	8105fae <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8106796:	68f8      	ldr	r0, [r7, #12]
 8106798:	f7ff fce5 	bl	8106166 <rpmsg_virtio_get_features>
 810679c:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 810679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067a0:	f003 0301 	and.w	r3, r3, #1
 81067a4:	2b00      	cmp	r3, #0
 81067a6:	d011      	beq.n	81067cc <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 81067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067aa:	f103 0008 	add.w	r0, r3, #8
 81067ae:	2300      	movs	r3, #0
 81067b0:	9301      	str	r3, [sp, #4]
 81067b2:	4b0e      	ldr	r3, [pc, #56]	; (81067ec <rpmsg_init_vdev+0x130>)
 81067b4:	9300      	str	r3, [sp, #0]
 81067b6:	2335      	movs	r3, #53	; 0x35
 81067b8:	2235      	movs	r2, #53	; 0x35
 81067ba:	490d      	ldr	r1, [pc, #52]	; (81067f0 <rpmsg_init_vdev+0x134>)
 81067bc:	f7ff fc85 	bl	81060ca <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 81067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067c2:	3308      	adds	r3, #8
 81067c4:	4619      	mov	r1, r3
 81067c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81067c8:	f7ff fb2e 	bl	8105e28 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 81067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 81067ce:	4618      	mov	r0, r3
 81067d0:	3738      	adds	r7, #56	; 0x38
 81067d2:	46bd      	mov	sp, r7
 81067d4:	bd80      	pop	{r7, pc}
 81067d6:	bf00      	nop
 81067d8:	08106389 	.word	0x08106389
 81067dc:	0810bd10 	.word	0x0810bd10
 81067e0:	0810bd18 	.word	0x0810bd18
 81067e4:	081064d9 	.word	0x081064d9
 81067e8:	081064ed 	.word	0x081064ed
 81067ec:	081065d7 	.word	0x081065d7
 81067f0:	0810bd20 	.word	0x0810bd20

081067f4 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 81067f4:	b480      	push	{r7}
 81067f6:	b083      	sub	sp, #12
 81067f8:	af00      	add	r7, sp, #0
 81067fa:	6078      	str	r0, [r7, #4]
 81067fc:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 81067fe:	bf00      	nop
 8106800:	370c      	adds	r7, #12
 8106802:	46bd      	mov	sp, r7
 8106804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106808:	4770      	bx	lr

0810680a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 810680a:	b480      	push	{r7}
 810680c:	b083      	sub	sp, #12
 810680e:	af00      	add	r7, sp, #0
 8106810:	6078      	str	r0, [r7, #4]
 8106812:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106814:	bf00      	nop
 8106816:	370c      	adds	r7, #12
 8106818:	46bd      	mov	sp, r7
 810681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810681e:	4770      	bx	lr

08106820 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8106820:	b480      	push	{r7}
 8106822:	b085      	sub	sp, #20
 8106824:	af00      	add	r7, sp, #0
 8106826:	60f8      	str	r0, [r7, #12]
 8106828:	60b9      	str	r1, [r7, #8]
 810682a:	607a      	str	r2, [r7, #4]
 810682c:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 810682e:	68fb      	ldr	r3, [r7, #12]
}
 8106830:	4618      	mov	r0, r3
 8106832:	3714      	adds	r7, #20
 8106834:	46bd      	mov	sp, r7
 8106836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810683a:	4770      	bx	lr

0810683c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 810683c:	b590      	push	{r4, r7, lr}
 810683e:	b08f      	sub	sp, #60	; 0x3c
 8106840:	af04      	add	r7, sp, #16
 8106842:	60f8      	str	r0, [r7, #12]
 8106844:	60b9      	str	r1, [r7, #8]
 8106846:	607a      	str	r2, [r7, #4]
 8106848:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 810684a:	68fb      	ldr	r3, [r7, #12]
 810684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810684e:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8106850:	687a      	ldr	r2, [r7, #4]
 8106852:	6a3b      	ldr	r3, [r7, #32]
 8106854:	429a      	cmp	r2, r3
 8106856:	d902      	bls.n	810685e <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8106858:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 810685c:	e036      	b.n	81068cc <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 810685e:	2300      	movs	r3, #0
 8106860:	627b      	str	r3, [r7, #36]	; 0x24
 8106862:	e02e      	b.n	81068c2 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8106864:	68fb      	ldr	r3, [r7, #12]
 8106866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810686a:	4613      	mov	r3, r2
 810686c:	005b      	lsls	r3, r3, #1
 810686e:	4413      	add	r3, r2
 8106870:	00db      	lsls	r3, r3, #3
 8106872:	440b      	add	r3, r1
 8106874:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 8106876:	69fb      	ldr	r3, [r7, #28]
 8106878:	3304      	adds	r3, #4
 810687a:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810687e:	b298      	uxth	r0, r3
 8106880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106882:	009b      	lsls	r3, r3, #2
 8106884:	683a      	ldr	r2, [r7, #0]
 8106886:	4413      	add	r3, r2
 8106888:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810688c:	009b      	lsls	r3, r3, #2
 810688e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106890:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106892:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8106894:	68fa      	ldr	r2, [r7, #12]
 8106896:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106898:	6a12      	ldr	r2, [r2, #32]
 810689a:	69f9      	ldr	r1, [r7, #28]
 810689c:	6809      	ldr	r1, [r1, #0]
 810689e:	9102      	str	r1, [sp, #8]
 81068a0:	9201      	str	r2, [sp, #4]
 81068a2:	9300      	str	r3, [sp, #0]
 81068a4:	69bb      	ldr	r3, [r7, #24]
 81068a6:	4622      	mov	r2, r4
 81068a8:	4601      	mov	r1, r0
 81068aa:	68f8      	ldr	r0, [r7, #12]
 81068ac:	f000 f8f6 	bl	8106a9c <virtqueue_create>
 81068b0:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 81068b2:	697b      	ldr	r3, [r7, #20]
 81068b4:	2b00      	cmp	r3, #0
 81068b6:	d001      	beq.n	81068bc <virtio_create_virtqueues+0x80>
			return ret;
 81068b8:	697b      	ldr	r3, [r7, #20]
 81068ba:	e007      	b.n	81068cc <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 81068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068be:	3301      	adds	r3, #1
 81068c0:	627b      	str	r3, [r7, #36]	; 0x24
 81068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	429a      	cmp	r2, r3
 81068c8:	d3cc      	bcc.n	8106864 <virtio_create_virtqueues+0x28>
	}
	return 0;
 81068ca:	2300      	movs	r3, #0
}
 81068cc:	4618      	mov	r0, r3
 81068ce:	372c      	adds	r7, #44	; 0x2c
 81068d0:	46bd      	mov	sp, r7
 81068d2:	bd90      	pop	{r4, r7, pc}

081068d4 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 81068d4:	b480      	push	{r7}
 81068d6:	b085      	sub	sp, #20
 81068d8:	af00      	add	r7, sp, #0
 81068da:	60f8      	str	r0, [r7, #12]
 81068dc:	60b9      	str	r1, [r7, #8]
 81068de:	607a      	str	r2, [r7, #4]
 81068e0:	603b      	str	r3, [r7, #0]
	vr->num = num;
 81068e2:	68fb      	ldr	r3, [r7, #12]
 81068e4:	68ba      	ldr	r2, [r7, #8]
 81068e6:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 81068e8:	68fb      	ldr	r3, [r7, #12]
 81068ea:	687a      	ldr	r2, [r7, #4]
 81068ec:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 81068ee:	68bb      	ldr	r3, [r7, #8]
 81068f0:	011b      	lsls	r3, r3, #4
 81068f2:	687a      	ldr	r2, [r7, #4]
 81068f4:	441a      	add	r2, r3
 81068f6:	68fb      	ldr	r3, [r7, #12]
 81068f8:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 81068fa:	68fb      	ldr	r3, [r7, #12]
 81068fc:	689a      	ldr	r2, [r3, #8]
 81068fe:	68bb      	ldr	r3, [r7, #8]
 8106900:	005b      	lsls	r3, r3, #1
 8106902:	4413      	add	r3, r2
 8106904:	3304      	adds	r3, #4
 8106906:	461a      	mov	r2, r3
 8106908:	683b      	ldr	r3, [r7, #0]
 810690a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 810690c:	1c5a      	adds	r2, r3, #1
 810690e:	683b      	ldr	r3, [r7, #0]
 8106910:	425b      	negs	r3, r3
 8106912:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8106914:	461a      	mov	r2, r3
 8106916:	68fb      	ldr	r3, [r7, #12]
 8106918:	60da      	str	r2, [r3, #12]
}
 810691a:	bf00      	nop
 810691c:	3714      	adds	r7, #20
 810691e:	46bd      	mov	sp, r7
 8106920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106924:	4770      	bx	lr

08106926 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8106926:	b480      	push	{r7}
 8106928:	b083      	sub	sp, #12
 810692a:	af00      	add	r7, sp, #0
 810692c:	4603      	mov	r3, r0
 810692e:	80fb      	strh	r3, [r7, #6]
 8106930:	460b      	mov	r3, r1
 8106932:	80bb      	strh	r3, [r7, #4]
 8106934:	4613      	mov	r3, r2
 8106936:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8106938:	88ba      	ldrh	r2, [r7, #4]
 810693a:	88fb      	ldrh	r3, [r7, #6]
 810693c:	1ad3      	subs	r3, r2, r3
 810693e:	b29b      	uxth	r3, r3
 8106940:	3b01      	subs	r3, #1
 8106942:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8106944:	88b9      	ldrh	r1, [r7, #4]
 8106946:	887b      	ldrh	r3, [r7, #2]
 8106948:	1acb      	subs	r3, r1, r3
 810694a:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 810694c:	429a      	cmp	r2, r3
 810694e:	bf34      	ite	cc
 8106950:	2301      	movcc	r3, #1
 8106952:	2300      	movcs	r3, #0
 8106954:	b2db      	uxtb	r3, r3
}
 8106956:	4618      	mov	r0, r3
 8106958:	370c      	adds	r7, #12
 810695a:	46bd      	mov	sp, r7
 810695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106960:	4770      	bx	lr

08106962 <metal_io_virt>:
{
 8106962:	b480      	push	{r7}
 8106964:	b083      	sub	sp, #12
 8106966:	af00      	add	r7, sp, #0
 8106968:	6078      	str	r0, [r7, #4]
 810696a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106974:	d009      	beq.n	810698a <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	689b      	ldr	r3, [r3, #8]
 810697a:	683a      	ldr	r2, [r7, #0]
 810697c:	429a      	cmp	r2, r3
 810697e:	d804      	bhi.n	810698a <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106984:	683b      	ldr	r3, [r7, #0]
 8106986:	4413      	add	r3, r2
 8106988:	e000      	b.n	810698c <metal_io_virt+0x2a>
 810698a:	2300      	movs	r3, #0
}
 810698c:	4618      	mov	r0, r3
 810698e:	370c      	adds	r7, #12
 8106990:	46bd      	mov	sp, r7
 8106992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106996:	4770      	bx	lr

08106998 <metal_io_phys>:
{
 8106998:	b480      	push	{r7}
 810699a:	b085      	sub	sp, #20
 810699c:	af00      	add	r7, sp, #0
 810699e:	6078      	str	r0, [r7, #4]
 81069a0:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 81069a2:	687b      	ldr	r3, [r7, #4]
 81069a4:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 81069a6:	2b1f      	cmp	r3, #31
 81069a8:	d805      	bhi.n	81069b6 <metal_io_phys+0x1e>
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	68db      	ldr	r3, [r3, #12]
 81069ae:	683a      	ldr	r2, [r7, #0]
 81069b0:	fa22 f303 	lsr.w	r3, r2, r3
 81069b4:	e000      	b.n	81069b8 <metal_io_phys+0x20>
 81069b6:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 81069b8:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 81069be:	2b00      	cmp	r3, #0
 81069c0:	d010      	beq.n	81069e4 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	689b      	ldr	r3, [r3, #8]
 81069c6:	683a      	ldr	r2, [r7, #0]
 81069c8:	429a      	cmp	r2, r3
 81069ca:	d80b      	bhi.n	81069e4 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	685a      	ldr	r2, [r3, #4]
 81069d0:	68fb      	ldr	r3, [r7, #12]
 81069d2:	009b      	lsls	r3, r3, #2
 81069d4:	4413      	add	r3, r2
 81069d6:	681a      	ldr	r2, [r3, #0]
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	6919      	ldr	r1, [r3, #16]
 81069dc:	683b      	ldr	r3, [r7, #0]
 81069de:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 81069e0:	4413      	add	r3, r2
 81069e2:	e001      	b.n	81069e8 <metal_io_phys+0x50>
 81069e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81069e8:	4618      	mov	r0, r3
 81069ea:	3714      	adds	r7, #20
 81069ec:	46bd      	mov	sp, r7
 81069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069f2:	4770      	bx	lr

081069f4 <metal_io_phys_to_offset>:
{
 81069f4:	b580      	push	{r7, lr}
 81069f6:	b084      	sub	sp, #16
 81069f8:	af00      	add	r7, sp, #0
 81069fa:	6078      	str	r0, [r7, #4]
 81069fc:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8106a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a06:	d105      	bne.n	8106a14 <metal_io_phys_to_offset+0x20>
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	685b      	ldr	r3, [r3, #4]
 8106a0c:	681b      	ldr	r3, [r3, #0]
 8106a0e:	683a      	ldr	r2, [r7, #0]
 8106a10:	1ad3      	subs	r3, r2, r3
 8106a12:	e003      	b.n	8106a1c <metal_io_phys_to_offset+0x28>
 8106a14:	687b      	ldr	r3, [r7, #4]
 8106a16:	691a      	ldr	r2, [r3, #16]
 8106a18:	683b      	ldr	r3, [r7, #0]
 8106a1a:	4013      	ands	r3, r2
	unsigned long offset =
 8106a1c:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8106a1e:	68f9      	ldr	r1, [r7, #12]
 8106a20:	6878      	ldr	r0, [r7, #4]
 8106a22:	f7ff ffb9 	bl	8106998 <metal_io_phys>
 8106a26:	4602      	mov	r2, r0
 8106a28:	683b      	ldr	r3, [r7, #0]
 8106a2a:	4293      	cmp	r3, r2
 8106a2c:	d101      	bne.n	8106a32 <metal_io_phys_to_offset+0x3e>
			return offset;
 8106a2e:	68fb      	ldr	r3, [r7, #12]
 8106a30:	e00c      	b.n	8106a4c <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8106a32:	687b      	ldr	r3, [r7, #4]
 8106a34:	691a      	ldr	r2, [r3, #16]
 8106a36:	68fb      	ldr	r3, [r7, #12]
 8106a38:	4413      	add	r3, r2
 8106a3a:	3301      	adds	r3, #1
 8106a3c:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	689b      	ldr	r3, [r3, #8]
 8106a42:	68fa      	ldr	r2, [r7, #12]
 8106a44:	429a      	cmp	r2, r3
 8106a46:	d3ea      	bcc.n	8106a1e <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8106a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106a4c:	4618      	mov	r0, r3
 8106a4e:	3710      	adds	r7, #16
 8106a50:	46bd      	mov	sp, r7
 8106a52:	bd80      	pop	{r7, pc}

08106a54 <metal_io_phys_to_virt>:
{
 8106a54:	b580      	push	{r7, lr}
 8106a56:	b082      	sub	sp, #8
 8106a58:	af00      	add	r7, sp, #0
 8106a5a:	6078      	str	r0, [r7, #4]
 8106a5c:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8106a5e:	6839      	ldr	r1, [r7, #0]
 8106a60:	6878      	ldr	r0, [r7, #4]
 8106a62:	f7ff ffc7 	bl	81069f4 <metal_io_phys_to_offset>
 8106a66:	4603      	mov	r3, r0
 8106a68:	4619      	mov	r1, r3
 8106a6a:	6878      	ldr	r0, [r7, #4]
 8106a6c:	f7ff ff79 	bl	8106962 <metal_io_virt>
 8106a70:	4603      	mov	r3, r0
}
 8106a72:	4618      	mov	r0, r3
 8106a74:	3708      	adds	r7, #8
 8106a76:	46bd      	mov	sp, r7
 8106a78:	bd80      	pop	{r7, pc}

08106a7a <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8106a7a:	b580      	push	{r7, lr}
 8106a7c:	b084      	sub	sp, #16
 8106a7e:	af00      	add	r7, sp, #0
 8106a80:	6078      	str	r0, [r7, #4]
 8106a82:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a88:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8106a8a:	6839      	ldr	r1, [r7, #0]
 8106a8c:	68f8      	ldr	r0, [r7, #12]
 8106a8e:	f7ff ffe1 	bl	8106a54 <metal_io_phys_to_virt>
 8106a92:	4603      	mov	r3, r0
}
 8106a94:	4618      	mov	r0, r3
 8106a96:	3710      	adds	r7, #16
 8106a98:	46bd      	mov	sp, r7
 8106a9a:	bd80      	pop	{r7, pc}

08106a9c <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8106a9c:	b580      	push	{r7, lr}
 8106a9e:	b086      	sub	sp, #24
 8106aa0:	af00      	add	r7, sp, #0
 8106aa2:	60f8      	str	r0, [r7, #12]
 8106aa4:	607a      	str	r2, [r7, #4]
 8106aa6:	603b      	str	r3, [r7, #0]
 8106aa8:	460b      	mov	r3, r1
 8106aaa:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8106aac:	2300      	movs	r3, #0
 8106aae:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8106ab0:	697b      	ldr	r3, [r7, #20]
 8106ab2:	2b00      	cmp	r3, #0
 8106ab4:	d121      	bne.n	8106afa <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8106ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ab8:	68fa      	ldr	r2, [r7, #12]
 8106aba:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8106abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106abe:	687a      	ldr	r2, [r7, #4]
 8106ac0:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8106ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ac4:	897a      	ldrh	r2, [r7, #10]
 8106ac6:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8106ac8:	683b      	ldr	r3, [r7, #0]
 8106aca:	891a      	ldrh	r2, [r3, #8]
 8106acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ace:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8106ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ad2:	895a      	ldrh	r2, [r3, #10]
 8106ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ad6:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8106ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ada:	6a3a      	ldr	r2, [r7, #32]
 8106adc:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8106ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106ae2:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8106ae4:	683b      	ldr	r3, [r7, #0]
 8106ae6:	6819      	ldr	r1, [r3, #0]
 8106ae8:	683b      	ldr	r3, [r7, #0]
 8106aea:	685b      	ldr	r3, [r3, #4]
 8106aec:	461a      	mov	r2, r3
 8106aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106af0:	f000 f8fb 	bl	8106cea <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8106af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106af6:	f000 f885 	bl	8106c04 <virtqueue_disable_cb>
	}

	return (status);
 8106afa:	697b      	ldr	r3, [r7, #20]
}
 8106afc:	4618      	mov	r0, r3
 8106afe:	3718      	adds	r7, #24
 8106b00:	46bd      	mov	sp, r7
 8106b02:	bd80      	pop	{r7, pc}

08106b04 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8106b04:	b580      	push	{r7, lr}
 8106b06:	b086      	sub	sp, #24
 8106b08:	af00      	add	r7, sp, #0
 8106b0a:	60f8      	str	r0, [r7, #12]
 8106b0c:	60b9      	str	r1, [r7, #8]
 8106b0e:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8106b10:	2300      	movs	r3, #0
 8106b12:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8106b14:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106b18:	68fb      	ldr	r3, [r7, #12]
 8106b1a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106b1c:	68fb      	ldr	r3, [r7, #12]
 8106b1e:	6a1b      	ldr	r3, [r3, #32]
 8106b20:	885b      	ldrh	r3, [r3, #2]
 8106b22:	429a      	cmp	r2, r3
 8106b24:	d101      	bne.n	8106b2a <virtqueue_get_available_buffer+0x26>
		return NULL;
 8106b26:	2300      	movs	r3, #0
 8106b28:	e02e      	b.n	8106b88 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8106b2a:	68fb      	ldr	r3, [r7, #12]
 8106b2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106b2e:	1c5a      	adds	r2, r3, #1
 8106b30:	b291      	uxth	r1, r2
 8106b32:	68fa      	ldr	r2, [r7, #12]
 8106b34:	8691      	strh	r1, [r2, #52]	; 0x34
 8106b36:	b21a      	sxth	r2, r3
 8106b38:	68fb      	ldr	r3, [r7, #12]
 8106b3a:	895b      	ldrh	r3, [r3, #10]
 8106b3c:	3b01      	subs	r3, #1
 8106b3e:	b29b      	uxth	r3, r3
 8106b40:	b21b      	sxth	r3, r3
 8106b42:	4013      	ands	r3, r2
 8106b44:	b21b      	sxth	r3, r3
 8106b46:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106b48:	68fb      	ldr	r3, [r7, #12]
 8106b4a:	6a1a      	ldr	r2, [r3, #32]
 8106b4c:	8afb      	ldrh	r3, [r7, #22]
 8106b4e:	005b      	lsls	r3, r3, #1
 8106b50:	4413      	add	r3, r2
 8106b52:	889a      	ldrh	r2, [r3, #4]
 8106b54:	68bb      	ldr	r3, [r7, #8]
 8106b56:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8106b58:	68fb      	ldr	r3, [r7, #12]
 8106b5a:	69da      	ldr	r2, [r3, #28]
 8106b5c:	68bb      	ldr	r3, [r7, #8]
 8106b5e:	881b      	ldrh	r3, [r3, #0]
 8106b60:	011b      	lsls	r3, r3, #4
 8106b62:	4413      	add	r3, r2
 8106b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b68:	4613      	mov	r3, r2
 8106b6a:	4619      	mov	r1, r3
 8106b6c:	68f8      	ldr	r0, [r7, #12]
 8106b6e:	f7ff ff84 	bl	8106a7a <virtqueue_phys_to_virt>
 8106b72:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8106b74:	68fb      	ldr	r3, [r7, #12]
 8106b76:	69da      	ldr	r2, [r3, #28]
 8106b78:	68bb      	ldr	r3, [r7, #8]
 8106b7a:	881b      	ldrh	r3, [r3, #0]
 8106b7c:	011b      	lsls	r3, r3, #4
 8106b7e:	4413      	add	r3, r2
 8106b80:	689a      	ldr	r2, [r3, #8]
 8106b82:	687b      	ldr	r3, [r7, #4]
 8106b84:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8106b86:	693b      	ldr	r3, [r7, #16]
}
 8106b88:	4618      	mov	r0, r3
 8106b8a:	3718      	adds	r7, #24
 8106b8c:	46bd      	mov	sp, r7
 8106b8e:	bd80      	pop	{r7, pc}

08106b90 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8106b90:	b480      	push	{r7}
 8106b92:	b087      	sub	sp, #28
 8106b94:	af00      	add	r7, sp, #0
 8106b96:	60f8      	str	r0, [r7, #12]
 8106b98:	460b      	mov	r3, r1
 8106b9a:	607a      	str	r2, [r7, #4]
 8106b9c:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8106b9e:	2300      	movs	r3, #0
 8106ba0:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8106ba2:	68fb      	ldr	r3, [r7, #12]
 8106ba4:	895b      	ldrh	r3, [r3, #10]
 8106ba6:	897a      	ldrh	r2, [r7, #10]
 8106ba8:	429a      	cmp	r2, r3
 8106baa:	d901      	bls.n	8106bb0 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8106bac:	4b14      	ldr	r3, [pc, #80]	; (8106c00 <virtqueue_add_consumed_buffer+0x70>)
 8106bae:	e021      	b.n	8106bf4 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8106bb0:	68fb      	ldr	r3, [r7, #12]
 8106bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bb4:	885b      	ldrh	r3, [r3, #2]
 8106bb6:	b21a      	sxth	r2, r3
 8106bb8:	68fb      	ldr	r3, [r7, #12]
 8106bba:	895b      	ldrh	r3, [r3, #10]
 8106bbc:	3b01      	subs	r3, #1
 8106bbe:	b29b      	uxth	r3, r3
 8106bc0:	b21b      	sxth	r3, r3
 8106bc2:	4013      	ands	r3, r2
 8106bc4:	b21b      	sxth	r3, r3
 8106bc6:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8106bc8:	68fb      	ldr	r3, [r7, #12]
 8106bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106bcc:	8a7b      	ldrh	r3, [r7, #18]
 8106bce:	00db      	lsls	r3, r3, #3
 8106bd0:	4413      	add	r3, r2
 8106bd2:	3304      	adds	r3, #4
 8106bd4:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8106bd6:	897a      	ldrh	r2, [r7, #10]
 8106bd8:	697b      	ldr	r3, [r7, #20]
 8106bda:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8106bdc:	697b      	ldr	r3, [r7, #20]
 8106bde:	687a      	ldr	r2, [r7, #4]
 8106be0:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8106be2:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8106be6:	68fb      	ldr	r3, [r7, #12]
 8106be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bea:	885a      	ldrh	r2, [r3, #2]
 8106bec:	3201      	adds	r2, #1
 8106bee:	b292      	uxth	r2, r2
 8106bf0:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8106bf2:	2300      	movs	r3, #0
}
 8106bf4:	4618      	mov	r0, r3
 8106bf6:	371c      	adds	r7, #28
 8106bf8:	46bd      	mov	sp, r7
 8106bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bfe:	4770      	bx	lr
 8106c00:	fffff441 	.word	0xfffff441

08106c04 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8106c04:	b480      	push	{r7}
 8106c06:	b083      	sub	sp, #12
 8106c08:	af00      	add	r7, sp, #0
 8106c0a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	68db      	ldr	r3, [r3, #12]
 8106c10:	f003 0302 	and.w	r3, r3, #2
 8106c14:	2b00      	cmp	r3, #0
 8106c16:	d010      	beq.n	8106c3a <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	895b      	ldrh	r3, [r3, #10]
 8106c20:	1ad3      	subs	r3, r2, r3
 8106c22:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	6a1a      	ldr	r2, [r3, #32]
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106c2c:	3901      	subs	r1, #1
 8106c2e:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8106c30:	005b      	lsls	r3, r3, #1
 8106c32:	4413      	add	r3, r2
 8106c34:	460a      	mov	r2, r1
 8106c36:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8106c38:	e008      	b.n	8106c4c <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	6a1b      	ldr	r3, [r3, #32]
 8106c3e:	881a      	ldrh	r2, [r3, #0]
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	6a1b      	ldr	r3, [r3, #32]
 8106c44:	f042 0201 	orr.w	r2, r2, #1
 8106c48:	b292      	uxth	r2, r2
 8106c4a:	801a      	strh	r2, [r3, #0]
}
 8106c4c:	bf00      	nop
 8106c4e:	370c      	adds	r7, #12
 8106c50:	46bd      	mov	sp, r7
 8106c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c56:	4770      	bx	lr

08106c58 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8106c58:	b580      	push	{r7, lr}
 8106c5a:	b082      	sub	sp, #8
 8106c5c:	af00      	add	r7, sp, #0
 8106c5e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8106c60:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8106c64:	6878      	ldr	r0, [r7, #4]
 8106c66:	f000 f885 	bl	8106d74 <vq_ring_must_notify_host>
 8106c6a:	4603      	mov	r3, r0
 8106c6c:	2b00      	cmp	r3, #0
 8106c6e:	d002      	beq.n	8106c76 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8106c70:	6878      	ldr	r0, [r7, #4]
 8106c72:	f000 f8b5 	bl	8106de0 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	2200      	movs	r2, #0
 8106c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8106c7c:	bf00      	nop
 8106c7e:	3708      	adds	r7, #8
 8106c80:	46bd      	mov	sp, r7
 8106c82:	bd80      	pop	{r7, pc}

08106c84 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8106c84:	b480      	push	{r7}
 8106c86:	b085      	sub	sp, #20
 8106c88:	af00      	add	r7, sp, #0
 8106c8a:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8106c8c:	2300      	movs	r3, #0
 8106c8e:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8106c90:	2300      	movs	r3, #0
 8106c92:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8106c94:	2300      	movs	r3, #0
 8106c96:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	6a1b      	ldr	r3, [r3, #32]
 8106ca0:	885b      	ldrh	r3, [r3, #2]
 8106ca2:	429a      	cmp	r2, r3
 8106ca4:	d101      	bne.n	8106caa <virtqueue_get_desc_size+0x26>
		return 0;
 8106ca6:	2300      	movs	r3, #0
 8106ca8:	e019      	b.n	8106cde <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106cae:	b21a      	sxth	r2, r3
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	895b      	ldrh	r3, [r3, #10]
 8106cb4:	3b01      	subs	r3, #1
 8106cb6:	b29b      	uxth	r3, r3
 8106cb8:	b21b      	sxth	r3, r3
 8106cba:	4013      	ands	r3, r2
 8106cbc:	b21b      	sxth	r3, r3
 8106cbe:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	6a1a      	ldr	r2, [r3, #32]
 8106cc4:	89fb      	ldrh	r3, [r7, #14]
 8106cc6:	005b      	lsls	r3, r3, #1
 8106cc8:	4413      	add	r3, r2
 8106cca:	889b      	ldrh	r3, [r3, #4]
 8106ccc:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	69da      	ldr	r2, [r3, #28]
 8106cd2:	89bb      	ldrh	r3, [r7, #12]
 8106cd4:	011b      	lsls	r3, r3, #4
 8106cd6:	4413      	add	r3, r2
 8106cd8:	689b      	ldr	r3, [r3, #8]
 8106cda:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8106cdc:	68bb      	ldr	r3, [r7, #8]
}
 8106cde:	4618      	mov	r0, r3
 8106ce0:	3714      	adds	r7, #20
 8106ce2:	46bd      	mov	sp, r7
 8106ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ce8:	4770      	bx	lr

08106cea <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8106cea:	b580      	push	{r7, lr}
 8106cec:	b088      	sub	sp, #32
 8106cee:	af00      	add	r7, sp, #0
 8106cf0:	60f8      	str	r0, [r7, #12]
 8106cf2:	60b9      	str	r1, [r7, #8]
 8106cf4:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	895b      	ldrh	r3, [r3, #10]
 8106cfa:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8106cfc:	68fb      	ldr	r3, [r7, #12]
 8106cfe:	3318      	adds	r3, #24
 8106d00:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8106d02:	69b9      	ldr	r1, [r7, #24]
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	68ba      	ldr	r2, [r7, #8]
 8106d08:	6978      	ldr	r0, [r7, #20]
 8106d0a:	f7ff fde3 	bl	81068d4 <vring_init>

	for (i = 0; i < size - 1; i++)
 8106d0e:	2300      	movs	r3, #0
 8106d10:	61fb      	str	r3, [r7, #28]
 8106d12:	e00c      	b.n	8106d2e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8106d14:	69fb      	ldr	r3, [r7, #28]
 8106d16:	b29a      	uxth	r2, r3
 8106d18:	697b      	ldr	r3, [r7, #20]
 8106d1a:	6859      	ldr	r1, [r3, #4]
 8106d1c:	69fb      	ldr	r3, [r7, #28]
 8106d1e:	011b      	lsls	r3, r3, #4
 8106d20:	440b      	add	r3, r1
 8106d22:	3201      	adds	r2, #1
 8106d24:	b292      	uxth	r2, r2
 8106d26:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8106d28:	69fb      	ldr	r3, [r7, #28]
 8106d2a:	3301      	adds	r3, #1
 8106d2c:	61fb      	str	r3, [r7, #28]
 8106d2e:	69bb      	ldr	r3, [r7, #24]
 8106d30:	3b01      	subs	r3, #1
 8106d32:	69fa      	ldr	r2, [r7, #28]
 8106d34:	429a      	cmp	r2, r3
 8106d36:	dbed      	blt.n	8106d14 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8106d38:	697b      	ldr	r3, [r7, #20]
 8106d3a:	685a      	ldr	r2, [r3, #4]
 8106d3c:	69fb      	ldr	r3, [r7, #28]
 8106d3e:	011b      	lsls	r3, r3, #4
 8106d40:	4413      	add	r3, r2
 8106d42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8106d46:	81da      	strh	r2, [r3, #14]
}
 8106d48:	bf00      	nop
 8106d4a:	3720      	adds	r7, #32
 8106d4c:	46bd      	mov	sp, r7
 8106d4e:	bd80      	pop	{r7, pc}

08106d50 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8106d50:	b580      	push	{r7, lr}
 8106d52:	b082      	sub	sp, #8
 8106d54:	af00      	add	r7, sp, #0
 8106d56:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8106d58:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8106d5c:	687b      	ldr	r3, [r7, #4]
 8106d5e:	691b      	ldr	r3, [r3, #16]
 8106d60:	2b00      	cmp	r3, #0
 8106d62:	d003      	beq.n	8106d6c <virtqueue_notification+0x1c>
		vq->callback(vq);
 8106d64:	687b      	ldr	r3, [r7, #4]
 8106d66:	691b      	ldr	r3, [r3, #16]
 8106d68:	6878      	ldr	r0, [r7, #4]
 8106d6a:	4798      	blx	r3
}
 8106d6c:	bf00      	nop
 8106d6e:	3708      	adds	r7, #8
 8106d70:	46bd      	mov	sp, r7
 8106d72:	bd80      	pop	{r7, pc}

08106d74 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8106d74:	b580      	push	{r7, lr}
 8106d76:	b084      	sub	sp, #16
 8106d78:	af00      	add	r7, sp, #0
 8106d7a:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	68db      	ldr	r3, [r3, #12]
 8106d80:	f003 0302 	and.w	r3, r3, #2
 8106d84:	2b00      	cmp	r3, #0
 8106d86:	d01d      	beq.n	8106dc4 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	6a1b      	ldr	r3, [r3, #32]
 8106d8c:	885b      	ldrh	r3, [r3, #2]
 8106d8e:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106d94:	89fa      	ldrh	r2, [r7, #14]
 8106d96:	1ad3      	subs	r3, r2, r3
 8106d98:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	699b      	ldr	r3, [r3, #24]
 8106da2:	00db      	lsls	r3, r3, #3
 8106da4:	4413      	add	r3, r2
 8106da6:	685b      	ldr	r3, [r3, #4]
 8106da8:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8106daa:	89ba      	ldrh	r2, [r7, #12]
 8106dac:	89f9      	ldrh	r1, [r7, #14]
 8106dae:	897b      	ldrh	r3, [r7, #10]
 8106db0:	4618      	mov	r0, r3
 8106db2:	f7ff fdb8 	bl	8106926 <vring_need_event>
 8106db6:	4603      	mov	r3, r0
 8106db8:	2b00      	cmp	r3, #0
 8106dba:	bf14      	ite	ne
 8106dbc:	2301      	movne	r3, #1
 8106dbe:	2300      	moveq	r3, #0
 8106dc0:	b2db      	uxtb	r3, r3
 8106dc2:	e009      	b.n	8106dd8 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106dc8:	881b      	ldrh	r3, [r3, #0]
 8106dca:	f003 0301 	and.w	r3, r3, #1
 8106dce:	2b00      	cmp	r3, #0
 8106dd0:	bf0c      	ite	eq
 8106dd2:	2301      	moveq	r3, #1
 8106dd4:	2300      	movne	r3, #0
 8106dd6:	b2db      	uxtb	r3, r3
}
 8106dd8:	4618      	mov	r0, r3
 8106dda:	3710      	adds	r7, #16
 8106ddc:	46bd      	mov	sp, r7
 8106dde:	bd80      	pop	{r7, pc}

08106de0 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8106de0:	b580      	push	{r7, lr}
 8106de2:	b082      	sub	sp, #8
 8106de4:	af00      	add	r7, sp, #0
 8106de6:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	695b      	ldr	r3, [r3, #20]
 8106dec:	2b00      	cmp	r3, #0
 8106dee:	d003      	beq.n	8106df8 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	695b      	ldr	r3, [r3, #20]
 8106df4:	6878      	ldr	r0, [r7, #4]
 8106df6:	4798      	blx	r3
}
 8106df8:	bf00      	nop
 8106dfa:	3708      	adds	r7, #8
 8106dfc:	46bd      	mov	sp, r7
 8106dfe:	bd80      	pop	{r7, pc}

08106e00 <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 8106e00:	b084      	sub	sp, #16
 8106e02:	b5b0      	push	{r4, r5, r7, lr}
 8106e04:	b092      	sub	sp, #72	; 0x48
 8106e06:	af10      	add	r7, sp, #64	; 0x40
 8106e08:	f107 0418 	add.w	r4, r7, #24
 8106e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 8106e10:	2300      	movs	r3, #0
 8106e12:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 8106e14:	466d      	mov	r5, sp
 8106e16:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8106e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106e26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8106e2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8106e2e:	f107 0318 	add.w	r3, r7, #24
 8106e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8106e34:	f7fd fbbc 	bl	81045b0 <MPU9250_Init>
 8106e38:	4603      	mov	r3, r0
 8106e3a:	71fb      	strb	r3, [r7, #7]
	return ret;
 8106e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8106e3e:	4618      	mov	r0, r3
 8106e40:	3708      	adds	r7, #8
 8106e42:	46bd      	mov	sp, r7
 8106e44:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8106e48:	b004      	add	sp, #16
 8106e4a:	4770      	bx	lr

08106e4c <parseRecievedMessages>:
 */

#include "main.h"

void parseRecievedMessages(uint8_t opCode)
{
 8106e4c:	b480      	push	{r7}
 8106e4e:	b085      	sub	sp, #20
 8106e50:	af00      	add	r7, sp, #0
 8106e52:	4603      	mov	r3, r0
 8106e54:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8106e56:	79fb      	ldrb	r3, [r7, #7]
 8106e58:	2b01      	cmp	r3, #1
 8106e5a:	d101      	bne.n	8106e60 <parseRecievedMessages+0x14>
	{
		case (1):
		{
			int a = 1;
 8106e5c:	2301      	movs	r3, #1
 8106e5e:	60fb      	str	r3, [r7, #12]
		default:
		{

		}
	}
}
 8106e60:	bf00      	nop
 8106e62:	3714      	adds	r7, #20
 8106e64:	46bd      	mov	sp, r7
 8106e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e6a:	4770      	bx	lr

08106e6c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8106e6c:	b580      	push	{r7, lr}
 8106e6e:	b082      	sub	sp, #8
 8106e70:	af00      	add	r7, sp, #0
 8106e72:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8106e74:	4b04      	ldr	r3, [pc, #16]	; (8106e88 <HAL_HSEM_FreeCallback+0x1c>)
 8106e76:	2201      	movs	r2, #1
 8106e78:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106e7a:	2001      	movs	r0, #1
 8106e7c:	f7fb f8a0 	bl	8101fc0 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8106e80:	bf00      	nop
 8106e82:	3708      	adds	r7, #8
 8106e84:	46bd      	mov	sp, r7
 8106e86:	bd80      	pop	{r7, pc}
 8106e88:	100002cc 	.word	0x100002cc

08106e8c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8106e8c:	b580      	push	{r7, lr}
 8106e8e:	b082      	sub	sp, #8
 8106e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8106e92:	4b0f      	ldr	r3, [pc, #60]	; (8106ed0 <MAILBOX_Init+0x44>)
 8106e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106e98:	4a0d      	ldr	r2, [pc, #52]	; (8106ed0 <MAILBOX_Init+0x44>)
 8106e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8106e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8106ea2:	4b0b      	ldr	r3, [pc, #44]	; (8106ed0 <MAILBOX_Init+0x44>)
 8106ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106eac:	607b      	str	r3, [r7, #4]
 8106eae:	687b      	ldr	r3, [r7, #4]
    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  /* Enable CM4 receive irq */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 1);
 8106eb0:	2201      	movs	r2, #1
 8106eb2:	2100      	movs	r1, #0
 8106eb4:	207e      	movs	r0, #126	; 0x7e
 8106eb6:	f7fa fe4e 	bl	8101b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8106eba:	207e      	movs	r0, #126	; 0x7e
 8106ebc:	f7fa fe65 	bl	8101b8a <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106ec0:	2001      	movs	r0, #1
 8106ec2:	f7fb f87d 	bl	8101fc0 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8106ec6:	2300      	movs	r3, #0
}
 8106ec8:	4618      	mov	r0, r3
 8106eca:	3708      	adds	r7, #8
 8106ecc:	46bd      	mov	sp, r7
 8106ece:	bd80      	pop	{r7, pc}
 8106ed0:	58024400 	.word	0x58024400

08106ed4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8106ed4:	b580      	push	{r7, lr}
 8106ed6:	b082      	sub	sp, #8
 8106ed8:	af00      	add	r7, sp, #0
 8106eda:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8106edc:	4b09      	ldr	r3, [pc, #36]	; (8106f04 <MAILBOX_Poll+0x30>)
 8106ede:	681b      	ldr	r3, [r3, #0]
 8106ee0:	2b01      	cmp	r3, #1
 8106ee2:	d108      	bne.n	8106ef6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8106ee4:	2101      	movs	r1, #1
 8106ee6:	6878      	ldr	r0, [r7, #4]
 8106ee8:	f7fe fce9 	bl	81058be <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8106eec:	4b05      	ldr	r3, [pc, #20]	; (8106f04 <MAILBOX_Poll+0x30>)
 8106eee:	2200      	movs	r2, #0
 8106ef0:	601a      	str	r2, [r3, #0]
    return 0;
 8106ef2:	2300      	movs	r3, #0
 8106ef4:	e001      	b.n	8106efa <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8106ef6:	f06f 030a 	mvn.w	r3, #10
}
 8106efa:	4618      	mov	r0, r3
 8106efc:	3708      	adds	r7, #8
 8106efe:	46bd      	mov	sp, r7
 8106f00:	bd80      	pop	{r7, pc}
 8106f02:	bf00      	nop
 8106f04:	100002cc 	.word	0x100002cc

08106f08 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8106f08:	b580      	push	{r7, lr}
 8106f0a:	b082      	sub	sp, #8
 8106f0c:	af00      	add	r7, sp, #0
 8106f0e:	6078      	str	r0, [r7, #4]
 8106f10:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8106f12:	2001      	movs	r0, #1
 8106f14:	f7fb f826 	bl	8101f64 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8106f18:	2100      	movs	r1, #0
 8106f1a:	2001      	movs	r0, #1
 8106f1c:	f7fb f83c 	bl	8101f98 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8106f20:	2300      	movs	r3, #0
}
 8106f22:	4618      	mov	r0, r3
 8106f24:	3708      	adds	r7, #8
 8106f26:	46bd      	mov	sp, r7
 8106f28:	bd80      	pop	{r7, pc}

08106f2a <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8106f2a:	b480      	push	{r7}
 8106f2c:	b083      	sub	sp, #12
 8106f2e:	af00      	add	r7, sp, #0
 8106f30:	6078      	str	r0, [r7, #4]
 8106f32:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8106f38:	683a      	ldr	r2, [r7, #0]
 8106f3a:	429a      	cmp	r2, r3
 8106f3c:	d209      	bcs.n	8106f52 <metal_device_io_region+0x28>
 8106f3e:	683a      	ldr	r2, [r7, #0]
 8106f40:	4613      	mov	r3, r2
 8106f42:	005b      	lsls	r3, r3, #1
 8106f44:	4413      	add	r3, r2
 8106f46:	011b      	lsls	r3, r3, #4
 8106f48:	3308      	adds	r3, #8
 8106f4a:	687a      	ldr	r2, [r7, #4]
 8106f4c:	4413      	add	r3, r2
 8106f4e:	3304      	adds	r3, #4
 8106f50:	e000      	b.n	8106f54 <metal_device_io_region+0x2a>
 8106f52:	2300      	movs	r3, #0
}
 8106f54:	4618      	mov	r0, r3
 8106f56:	370c      	adds	r7, #12
 8106f58:	46bd      	mov	sp, r7
 8106f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f5e:	4770      	bx	lr

08106f60 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8106f60:	b590      	push	{r4, r7, lr}
 8106f62:	b08d      	sub	sp, #52	; 0x34
 8106f64:	af04      	add	r7, sp, #16
 8106f66:	6078      	str	r0, [r7, #4]
  int status = 0;
 8106f68:	2300      	movs	r3, #0
 8106f6a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8106f6c:	2300      	movs	r3, #0
 8106f6e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8106f70:	4a41      	ldr	r2, [pc, #260]	; (8107078 <OPENAMP_shmem_init+0x118>)
 8106f72:	f107 0310 	add.w	r3, r7, #16
 8106f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8106f7a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8106f7e:	2300      	movs	r3, #0
 8106f80:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8106f82:	2300      	movs	r3, #0
 8106f84:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8106f86:	f107 0310 	add.w	r3, r7, #16
 8106f8a:	4618      	mov	r0, r3
 8106f8c:	f7fe f8ae 	bl	81050ec <metal_init>

  status = metal_register_generic_device(&shm_device);
 8106f90:	483a      	ldr	r0, [pc, #232]	; (810707c <OPENAMP_shmem_init+0x11c>)
 8106f92:	f7fd ff53 	bl	8104e3c <metal_register_generic_device>
 8106f96:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106f98:	69fb      	ldr	r3, [r7, #28]
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d001      	beq.n	8106fa2 <OPENAMP_shmem_init+0x42>
    return status;
 8106f9e:	69fb      	ldr	r3, [r7, #28]
 8106fa0:	e066      	b.n	8107070 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8106fa2:	f107 0318 	add.w	r3, r7, #24
 8106fa6:	461a      	mov	r2, r3
 8106fa8:	4935      	ldr	r1, [pc, #212]	; (8107080 <OPENAMP_shmem_init+0x120>)
 8106faa:	4836      	ldr	r0, [pc, #216]	; (8107084 <OPENAMP_shmem_init+0x124>)
 8106fac:	f7fd ff08 	bl	8104dc0 <metal_device_open>
 8106fb0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106fb2:	69fb      	ldr	r3, [r7, #28]
 8106fb4:	2b00      	cmp	r3, #0
 8106fb6:	d001      	beq.n	8106fbc <OPENAMP_shmem_init+0x5c>
    return status;
 8106fb8:	69fb      	ldr	r3, [r7, #28]
 8106fba:	e059      	b.n	8107070 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8106fbc:	4a32      	ldr	r2, [pc, #200]	; (8107088 <OPENAMP_shmem_init+0x128>)
 8106fbe:	4b33      	ldr	r3, [pc, #204]	; (810708c <OPENAMP_shmem_init+0x12c>)
 8106fc0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106fc2:	69bb      	ldr	r3, [r7, #24]
 8106fc4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8106fc8:	4a31      	ldr	r2, [pc, #196]	; (8107090 <OPENAMP_shmem_init+0x130>)
 8106fca:	4b2f      	ldr	r3, [pc, #188]	; (8107088 <OPENAMP_shmem_init+0x128>)
 8106fcc:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106fce:	461a      	mov	r2, r3
 8106fd0:	2300      	movs	r3, #0
 8106fd2:	9302      	str	r3, [sp, #8]
 8106fd4:	2300      	movs	r3, #0
 8106fd6:	9301      	str	r3, [sp, #4]
 8106fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8106fdc:	9300      	str	r3, [sp, #0]
 8106fde:	4613      	mov	r3, r2
 8106fe0:	4a2a      	ldr	r2, [pc, #168]	; (810708c <OPENAMP_shmem_init+0x12c>)
 8106fe2:	4929      	ldr	r1, [pc, #164]	; (8107088 <OPENAMP_shmem_init+0x128>)
 8106fe4:	f7fe f8cf 	bl	8105186 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8106fe8:	69bb      	ldr	r3, [r7, #24]
 8106fea:	2100      	movs	r1, #0
 8106fec:	4618      	mov	r0, r3
 8106fee:	f7ff ff9c 	bl	8106f2a <metal_device_io_region>
 8106ff2:	4603      	mov	r3, r0
 8106ff4:	4a27      	ldr	r2, [pc, #156]	; (8107094 <OPENAMP_shmem_init+0x134>)
 8106ff6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8106ff8:	4b26      	ldr	r3, [pc, #152]	; (8107094 <OPENAMP_shmem_init+0x134>)
 8106ffa:	681b      	ldr	r3, [r3, #0]
 8106ffc:	2b00      	cmp	r3, #0
 8106ffe:	d102      	bne.n	8107006 <OPENAMP_shmem_init+0xa6>
    return -1;
 8107000:	f04f 33ff 	mov.w	r3, #4294967295
 8107004:	e034      	b.n	8107070 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8107006:	f107 0208 	add.w	r2, r7, #8
 810700a:	f107 030c 	add.w	r3, r7, #12
 810700e:	4619      	mov	r1, r3
 8107010:	6878      	ldr	r0, [r7, #4]
 8107012:	f000 f905 	bl	8107220 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8107016:	68fb      	ldr	r3, [r7, #12]
 8107018:	4a1f      	ldr	r2, [pc, #124]	; (8107098 <OPENAMP_shmem_init+0x138>)
 810701a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 810701c:	4b1e      	ldr	r3, [pc, #120]	; (8107098 <OPENAMP_shmem_init+0x138>)
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	2b00      	cmp	r3, #0
 8107022:	d102      	bne.n	810702a <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8107024:	f04f 33ff 	mov.w	r3, #4294967295
 8107028:	e022      	b.n	8107070 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 810702a:	69bb      	ldr	r3, [r7, #24]
 810702c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8107030:	4b19      	ldr	r3, [pc, #100]	; (8107098 <OPENAMP_shmem_init+0x138>)
 8107032:	6819      	ldr	r1, [r3, #0]
 8107034:	4b18      	ldr	r3, [pc, #96]	; (8107098 <OPENAMP_shmem_init+0x138>)
 8107036:	681a      	ldr	r2, [r3, #0]
 8107038:	68bb      	ldr	r3, [r7, #8]
 810703a:	461c      	mov	r4, r3
 810703c:	2300      	movs	r3, #0
 810703e:	9302      	str	r3, [sp, #8]
 8107040:	2300      	movs	r3, #0
 8107042:	9301      	str	r3, [sp, #4]
 8107044:	f04f 33ff 	mov.w	r3, #4294967295
 8107048:	9300      	str	r3, [sp, #0]
 810704a:	4623      	mov	r3, r4
 810704c:	f7fe f89b 	bl	8105186 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8107050:	69bb      	ldr	r3, [r7, #24]
 8107052:	2101      	movs	r1, #1
 8107054:	4618      	mov	r0, r3
 8107056:	f7ff ff68 	bl	8106f2a <metal_device_io_region>
 810705a:	4603      	mov	r3, r0
 810705c:	4a0f      	ldr	r2, [pc, #60]	; (810709c <OPENAMP_shmem_init+0x13c>)
 810705e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8107060:	4b0e      	ldr	r3, [pc, #56]	; (810709c <OPENAMP_shmem_init+0x13c>)
 8107062:	681b      	ldr	r3, [r3, #0]
 8107064:	2b00      	cmp	r3, #0
 8107066:	d102      	bne.n	810706e <OPENAMP_shmem_init+0x10e>
    return -1;
 8107068:	f04f 33ff 	mov.w	r3, #4294967295
 810706c:	e000      	b.n	8107070 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810706e:	2300      	movs	r3, #0
}
 8107070:	4618      	mov	r0, r3
 8107072:	3724      	adds	r7, #36	; 0x24
 8107074:	46bd      	mov	sp, r7
 8107076:	bd90      	pop	{r4, r7, pc}
 8107078:	0810bd38 	.word	0x0810bd38
 810707c:	1000003c 	.word	0x1000003c
 8107080:	0810bd24 	.word	0x0810bd24
 8107084:	0810bd30 	.word	0x0810bd30
 8107088:	38000400 	.word	0x38000400
 810708c:	10000360 	.word	0x10000360
 8107090:	38010000 	.word	0x38010000
 8107094:	100002d0 	.word	0x100002d0
 8107098:	100002d8 	.word	0x100002d8
 810709c:	100002d4 	.word	0x100002d4

081070a0 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 81070a0:	b590      	push	{r4, r7, lr}
 81070a2:	b08b      	sub	sp, #44	; 0x2c
 81070a4:	af04      	add	r7, sp, #16
 81070a6:	6078      	str	r0, [r7, #4]
 81070a8:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 81070aa:	2300      	movs	r3, #0
 81070ac:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 81070ae:	2300      	movs	r3, #0
 81070b0:	613b      	str	r3, [r7, #16]
  int status = 0;
 81070b2:	2300      	movs	r3, #0
 81070b4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 81070b6:	f7ff fee9 	bl	8106e8c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 81070ba:	6878      	ldr	r0, [r7, #4]
 81070bc:	f7ff ff50 	bl	8106f60 <OPENAMP_shmem_init>
 81070c0:	60f8      	str	r0, [r7, #12]
  if(status)
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	2b00      	cmp	r3, #0
 81070c6:	d001      	beq.n	81070cc <MX_OPENAMP_Init+0x2c>
  {
    return status;
 81070c8:	68fb      	ldr	r3, [r7, #12]
 81070ca:	e06a      	b.n	81071a2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 81070cc:	6878      	ldr	r0, [r7, #4]
 81070ce:	4b37      	ldr	r3, [pc, #220]	; (81071ac <MX_OPENAMP_Init+0x10c>)
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	f103 0218 	add.w	r2, r3, #24
 81070d6:	4b36      	ldr	r3, [pc, #216]	; (81071b0 <MX_OPENAMP_Init+0x110>)
 81070d8:	681b      	ldr	r3, [r3, #0]
 81070da:	2100      	movs	r1, #0
 81070dc:	9102      	str	r1, [sp, #8]
 81070de:	4935      	ldr	r1, [pc, #212]	; (81071b4 <MX_OPENAMP_Init+0x114>)
 81070e0:	9101      	str	r1, [sp, #4]
 81070e2:	2100      	movs	r1, #0
 81070e4:	9100      	str	r1, [sp, #0]
 81070e6:	21ff      	movs	r1, #255	; 0xff
 81070e8:	f7fe fb0a 	bl	8105700 <rproc_virtio_create_vdev>
 81070ec:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 81070ee:	693b      	ldr	r3, [r7, #16]
 81070f0:	2b00      	cmp	r3, #0
 81070f2:	d102      	bne.n	81070fa <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 81070f4:	f04f 33ff 	mov.w	r3, #4294967295
 81070f8:	e053      	b.n	81071a2 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 81070fa:	6938      	ldr	r0, [r7, #16]
 81070fc:	f7fe fc1b 	bl	8105936 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8107100:	4b2a      	ldr	r3, [pc, #168]	; (81071ac <MX_OPENAMP_Init+0x10c>)
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	3334      	adds	r3, #52	; 0x34
 8107106:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107108:	697b      	ldr	r3, [r7, #20]
 810710a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810710c:	697b      	ldr	r3, [r7, #20]
 810710e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107110:	461c      	mov	r4, r3
 8107112:	4b29      	ldr	r3, [pc, #164]	; (81071b8 <MX_OPENAMP_Init+0x118>)
 8107114:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8107116:	697a      	ldr	r2, [r7, #20]
 8107118:	6892      	ldr	r2, [r2, #8]
 810711a:	6979      	ldr	r1, [r7, #20]
 810711c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810711e:	9102      	str	r1, [sp, #8]
 8107120:	9201      	str	r2, [sp, #4]
 8107122:	9300      	str	r3, [sp, #0]
 8107124:	4623      	mov	r3, r4
 8107126:	4602      	mov	r2, r0
 8107128:	2100      	movs	r1, #0
 810712a:	6938      	ldr	r0, [r7, #16]
 810712c:	f7fe fb96 	bl	810585c <rproc_virtio_init_vring>
 8107130:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8107132:	68fb      	ldr	r3, [r7, #12]
 8107134:	2b00      	cmp	r3, #0
 8107136:	d001      	beq.n	810713c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8107138:	68fb      	ldr	r3, [r7, #12]
 810713a:	e032      	b.n	81071a2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 810713c:	4b1b      	ldr	r3, [pc, #108]	; (81071ac <MX_OPENAMP_Init+0x10c>)
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	3348      	adds	r3, #72	; 0x48
 8107142:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8107144:	697b      	ldr	r3, [r7, #20]
 8107146:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8107148:	697b      	ldr	r3, [r7, #20]
 810714a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810714c:	461c      	mov	r4, r3
 810714e:	4b1a      	ldr	r3, [pc, #104]	; (81071b8 <MX_OPENAMP_Init+0x118>)
 8107150:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8107152:	697a      	ldr	r2, [r7, #20]
 8107154:	6892      	ldr	r2, [r2, #8]
 8107156:	6979      	ldr	r1, [r7, #20]
 8107158:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810715a:	9102      	str	r1, [sp, #8]
 810715c:	9201      	str	r2, [sp, #4]
 810715e:	9300      	str	r3, [sp, #0]
 8107160:	4623      	mov	r3, r4
 8107162:	4602      	mov	r2, r0
 8107164:	2101      	movs	r1, #1
 8107166:	6938      	ldr	r0, [r7, #16]
 8107168:	f7fe fb78 	bl	810585c <rproc_virtio_init_vring>
 810716c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810716e:	68fb      	ldr	r3, [r7, #12]
 8107170:	2b00      	cmp	r3, #0
 8107172:	d001      	beq.n	8107178 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8107174:	68fb      	ldr	r3, [r7, #12]
 8107176:	e014      	b.n	81071a2 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8107178:	4b10      	ldr	r3, [pc, #64]	; (81071bc <MX_OPENAMP_Init+0x11c>)
 810717a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810717e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8107180:	4a0f      	ldr	r2, [pc, #60]	; (81071c0 <MX_OPENAMP_Init+0x120>)
 8107182:	4b0e      	ldr	r3, [pc, #56]	; (81071bc <MX_OPENAMP_Init+0x11c>)
 8107184:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8107186:	461a      	mov	r2, r3
 8107188:	480e      	ldr	r0, [pc, #56]	; (81071c4 <MX_OPENAMP_Init+0x124>)
 810718a:	f7ff f823 	bl	81061d4 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 810718e:	4b0a      	ldr	r3, [pc, #40]	; (81071b8 <MX_OPENAMP_Init+0x118>)
 8107190:	681b      	ldr	r3, [r3, #0]
 8107192:	4a0c      	ldr	r2, [pc, #48]	; (81071c4 <MX_OPENAMP_Init+0x124>)
 8107194:	9200      	str	r2, [sp, #0]
 8107196:	683a      	ldr	r2, [r7, #0]
 8107198:	6939      	ldr	r1, [r7, #16]
 810719a:	480b      	ldr	r0, [pc, #44]	; (81071c8 <MX_OPENAMP_Init+0x128>)
 810719c:	f7ff fa8e 	bl	81066bc <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 81071a0:	2300      	movs	r3, #0
}
 81071a2:	4618      	mov	r0, r3
 81071a4:	371c      	adds	r7, #28
 81071a6:	46bd      	mov	sp, r7
 81071a8:	bd90      	pop	{r4, r7, pc}
 81071aa:	bf00      	nop
 81071ac:	100002d8 	.word	0x100002d8
 81071b0:	100002d4 	.word	0x100002d4
 81071b4:	08106f09 	.word	0x08106f09
 81071b8:	100002d0 	.word	0x100002d0
 81071bc:	38000400 	.word	0x38000400
 81071c0:	38010000 	.word	0x38010000
 81071c4:	100002dc 	.word	0x100002dc
 81071c8:	100002e8 	.word	0x100002e8

081071cc <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 81071cc:	b580      	push	{r7, lr}
 81071ce:	b08a      	sub	sp, #40	; 0x28
 81071d0:	af04      	add	r7, sp, #16
 81071d2:	60f8      	str	r0, [r7, #12]
 81071d4:	60b9      	str	r1, [r7, #8]
 81071d6:	607a      	str	r2, [r7, #4]
 81071d8:	603b      	str	r3, [r7, #0]
  int ret = 0;
 81071da:	2300      	movs	r3, #0
 81071dc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 81071de:	6a3b      	ldr	r3, [r7, #32]
 81071e0:	9302      	str	r3, [sp, #8]
 81071e2:	683b      	ldr	r3, [r7, #0]
 81071e4:	9301      	str	r3, [sp, #4]
 81071e6:	687b      	ldr	r3, [r7, #4]
 81071e8:	9300      	str	r3, [sp, #0]
 81071ea:	f04f 33ff 	mov.w	r3, #4294967295
 81071ee:	68ba      	ldr	r2, [r7, #8]
 81071f0:	4904      	ldr	r1, [pc, #16]	; (8107204 <OPENAMP_create_endpoint+0x38>)
 81071f2:	68f8      	ldr	r0, [r7, #12]
 81071f4:	f7fe fe2c 	bl	8105e50 <rpmsg_create_ept>
 81071f8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 81071fa:	697b      	ldr	r3, [r7, #20]
}
 81071fc:	4618      	mov	r0, r3
 81071fe:	3718      	adds	r7, #24
 8107200:	46bd      	mov	sp, r7
 8107202:	bd80      	pop	{r7, pc}
 8107204:	100002e8 	.word	0x100002e8

08107208 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8107208:	b580      	push	{r7, lr}
 810720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 810720c:	4b03      	ldr	r3, [pc, #12]	; (810721c <OPENAMP_check_for_message+0x14>)
 810720e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107210:	4618      	mov	r0, r3
 8107212:	f7ff fe5f 	bl	8106ed4 <MAILBOX_Poll>
}
 8107216:	bf00      	nop
 8107218:	bd80      	pop	{r7, pc}
 810721a:	bf00      	nop
 810721c:	100002e8 	.word	0x100002e8

08107220 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8107220:	b480      	push	{r7}
 8107222:	b085      	sub	sp, #20
 8107224:	af00      	add	r7, sp, #0
 8107226:	60f8      	str	r0, [r7, #12]
 8107228:	60b9      	str	r1, [r7, #8]
 810722a:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 810722c:	bf00      	nop
 810722e:	4b08      	ldr	r3, [pc, #32]	; (8107250 <resource_table_init+0x30>)
 8107230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107232:	4a08      	ldr	r2, [pc, #32]	; (8107254 <resource_table_init+0x34>)
 8107234:	4293      	cmp	r3, r2
 8107236:	d1fa      	bne.n	810722e <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8107238:	687b      	ldr	r3, [r7, #4]
 810723a:	228c      	movs	r2, #140	; 0x8c
 810723c:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 810723e:	68bb      	ldr	r3, [r7, #8]
 8107240:	4a03      	ldr	r2, [pc, #12]	; (8107250 <resource_table_init+0x30>)
 8107242:	601a      	str	r2, [r3, #0]
}
 8107244:	bf00      	nop
 8107246:	3714      	adds	r7, #20
 8107248:	46bd      	mov	sp, r7
 810724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810724e:	4770      	bx	lr
 8107250:	38000000 	.word	0x38000000
 8107254:	38000400 	.word	0x38000400

08107258 <__assert_func>:
 8107258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810725a:	4614      	mov	r4, r2
 810725c:	461a      	mov	r2, r3
 810725e:	4b09      	ldr	r3, [pc, #36]	; (8107284 <__assert_func+0x2c>)
 8107260:	681b      	ldr	r3, [r3, #0]
 8107262:	4605      	mov	r5, r0
 8107264:	68d8      	ldr	r0, [r3, #12]
 8107266:	b14c      	cbz	r4, 810727c <__assert_func+0x24>
 8107268:	4b07      	ldr	r3, [pc, #28]	; (8107288 <__assert_func+0x30>)
 810726a:	9100      	str	r1, [sp, #0]
 810726c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8107270:	4906      	ldr	r1, [pc, #24]	; (810728c <__assert_func+0x34>)
 8107272:	462b      	mov	r3, r5
 8107274:	f000 f814 	bl	81072a0 <fiprintf>
 8107278:	f002 f8bc 	bl	81093f4 <abort>
 810727c:	4b04      	ldr	r3, [pc, #16]	; (8107290 <__assert_func+0x38>)
 810727e:	461c      	mov	r4, r3
 8107280:	e7f3      	b.n	810726a <__assert_func+0x12>
 8107282:	bf00      	nop
 8107284:	100000b8 	.word	0x100000b8
 8107288:	0810bda6 	.word	0x0810bda6
 810728c:	0810bdb3 	.word	0x0810bdb3
 8107290:	0810bde1 	.word	0x0810bde1

08107294 <__errno>:
 8107294:	4b01      	ldr	r3, [pc, #4]	; (810729c <__errno+0x8>)
 8107296:	6818      	ldr	r0, [r3, #0]
 8107298:	4770      	bx	lr
 810729a:	bf00      	nop
 810729c:	100000b8 	.word	0x100000b8

081072a0 <fiprintf>:
 81072a0:	b40e      	push	{r1, r2, r3}
 81072a2:	b503      	push	{r0, r1, lr}
 81072a4:	4601      	mov	r1, r0
 81072a6:	ab03      	add	r3, sp, #12
 81072a8:	4805      	ldr	r0, [pc, #20]	; (81072c0 <fiprintf+0x20>)
 81072aa:	f853 2b04 	ldr.w	r2, [r3], #4
 81072ae:	6800      	ldr	r0, [r0, #0]
 81072b0:	9301      	str	r3, [sp, #4]
 81072b2:	f000 f925 	bl	8107500 <_vfiprintf_r>
 81072b6:	b002      	add	sp, #8
 81072b8:	f85d eb04 	ldr.w	lr, [sp], #4
 81072bc:	b003      	add	sp, #12
 81072be:	4770      	bx	lr
 81072c0:	100000b8 	.word	0x100000b8

081072c4 <__libc_init_array>:
 81072c4:	b570      	push	{r4, r5, r6, lr}
 81072c6:	4d0d      	ldr	r5, [pc, #52]	; (81072fc <__libc_init_array+0x38>)
 81072c8:	4c0d      	ldr	r4, [pc, #52]	; (8107300 <__libc_init_array+0x3c>)
 81072ca:	1b64      	subs	r4, r4, r5
 81072cc:	10a4      	asrs	r4, r4, #2
 81072ce:	2600      	movs	r6, #0
 81072d0:	42a6      	cmp	r6, r4
 81072d2:	d109      	bne.n	81072e8 <__libc_init_array+0x24>
 81072d4:	4d0b      	ldr	r5, [pc, #44]	; (8107304 <__libc_init_array+0x40>)
 81072d6:	4c0c      	ldr	r4, [pc, #48]	; (8107308 <__libc_init_array+0x44>)
 81072d8:	f004 fc2e 	bl	810bb38 <_init>
 81072dc:	1b64      	subs	r4, r4, r5
 81072de:	10a4      	asrs	r4, r4, #2
 81072e0:	2600      	movs	r6, #0
 81072e2:	42a6      	cmp	r6, r4
 81072e4:	d105      	bne.n	81072f2 <__libc_init_array+0x2e>
 81072e6:	bd70      	pop	{r4, r5, r6, pc}
 81072e8:	f855 3b04 	ldr.w	r3, [r5], #4
 81072ec:	4798      	blx	r3
 81072ee:	3601      	adds	r6, #1
 81072f0:	e7ee      	b.n	81072d0 <__libc_init_array+0xc>
 81072f2:	f855 3b04 	ldr.w	r3, [r5], #4
 81072f6:	4798      	blx	r3
 81072f8:	3601      	adds	r6, #1
 81072fa:	e7f2      	b.n	81072e2 <__libc_init_array+0x1e>
 81072fc:	0810c25c 	.word	0x0810c25c
 8107300:	0810c25c 	.word	0x0810c25c
 8107304:	0810c25c 	.word	0x0810c25c
 8107308:	0810c260 	.word	0x0810c260

0810730c <malloc>:
 810730c:	4b02      	ldr	r3, [pc, #8]	; (8107318 <malloc+0xc>)
 810730e:	4601      	mov	r1, r0
 8107310:	6818      	ldr	r0, [r3, #0]
 8107312:	f000 b871 	b.w	81073f8 <_malloc_r>
 8107316:	bf00      	nop
 8107318:	100000b8 	.word	0x100000b8

0810731c <free>:
 810731c:	4b02      	ldr	r3, [pc, #8]	; (8107328 <free+0xc>)
 810731e:	4601      	mov	r1, r0
 8107320:	6818      	ldr	r0, [r3, #0]
 8107322:	f000 b819 	b.w	8107358 <_free_r>
 8107326:	bf00      	nop
 8107328:	100000b8 	.word	0x100000b8

0810732c <memcpy>:
 810732c:	440a      	add	r2, r1
 810732e:	4291      	cmp	r1, r2
 8107330:	f100 33ff 	add.w	r3, r0, #4294967295
 8107334:	d100      	bne.n	8107338 <memcpy+0xc>
 8107336:	4770      	bx	lr
 8107338:	b510      	push	{r4, lr}
 810733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810733e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107342:	4291      	cmp	r1, r2
 8107344:	d1f9      	bne.n	810733a <memcpy+0xe>
 8107346:	bd10      	pop	{r4, pc}

08107348 <memset>:
 8107348:	4402      	add	r2, r0
 810734a:	4603      	mov	r3, r0
 810734c:	4293      	cmp	r3, r2
 810734e:	d100      	bne.n	8107352 <memset+0xa>
 8107350:	4770      	bx	lr
 8107352:	f803 1b01 	strb.w	r1, [r3], #1
 8107356:	e7f9      	b.n	810734c <memset+0x4>

08107358 <_free_r>:
 8107358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810735a:	2900      	cmp	r1, #0
 810735c:	d048      	beq.n	81073f0 <_free_r+0x98>
 810735e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107362:	9001      	str	r0, [sp, #4]
 8107364:	2b00      	cmp	r3, #0
 8107366:	f1a1 0404 	sub.w	r4, r1, #4
 810736a:	bfb8      	it	lt
 810736c:	18e4      	addlt	r4, r4, r3
 810736e:	f003 fc7d 	bl	810ac6c <__malloc_lock>
 8107372:	4a20      	ldr	r2, [pc, #128]	; (81073f4 <_free_r+0x9c>)
 8107374:	9801      	ldr	r0, [sp, #4]
 8107376:	6813      	ldr	r3, [r2, #0]
 8107378:	4615      	mov	r5, r2
 810737a:	b933      	cbnz	r3, 810738a <_free_r+0x32>
 810737c:	6063      	str	r3, [r4, #4]
 810737e:	6014      	str	r4, [r2, #0]
 8107380:	b003      	add	sp, #12
 8107382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8107386:	f003 bc77 	b.w	810ac78 <__malloc_unlock>
 810738a:	42a3      	cmp	r3, r4
 810738c:	d90b      	bls.n	81073a6 <_free_r+0x4e>
 810738e:	6821      	ldr	r1, [r4, #0]
 8107390:	1862      	adds	r2, r4, r1
 8107392:	4293      	cmp	r3, r2
 8107394:	bf04      	itt	eq
 8107396:	681a      	ldreq	r2, [r3, #0]
 8107398:	685b      	ldreq	r3, [r3, #4]
 810739a:	6063      	str	r3, [r4, #4]
 810739c:	bf04      	itt	eq
 810739e:	1852      	addeq	r2, r2, r1
 81073a0:	6022      	streq	r2, [r4, #0]
 81073a2:	602c      	str	r4, [r5, #0]
 81073a4:	e7ec      	b.n	8107380 <_free_r+0x28>
 81073a6:	461a      	mov	r2, r3
 81073a8:	685b      	ldr	r3, [r3, #4]
 81073aa:	b10b      	cbz	r3, 81073b0 <_free_r+0x58>
 81073ac:	42a3      	cmp	r3, r4
 81073ae:	d9fa      	bls.n	81073a6 <_free_r+0x4e>
 81073b0:	6811      	ldr	r1, [r2, #0]
 81073b2:	1855      	adds	r5, r2, r1
 81073b4:	42a5      	cmp	r5, r4
 81073b6:	d10b      	bne.n	81073d0 <_free_r+0x78>
 81073b8:	6824      	ldr	r4, [r4, #0]
 81073ba:	4421      	add	r1, r4
 81073bc:	1854      	adds	r4, r2, r1
 81073be:	42a3      	cmp	r3, r4
 81073c0:	6011      	str	r1, [r2, #0]
 81073c2:	d1dd      	bne.n	8107380 <_free_r+0x28>
 81073c4:	681c      	ldr	r4, [r3, #0]
 81073c6:	685b      	ldr	r3, [r3, #4]
 81073c8:	6053      	str	r3, [r2, #4]
 81073ca:	4421      	add	r1, r4
 81073cc:	6011      	str	r1, [r2, #0]
 81073ce:	e7d7      	b.n	8107380 <_free_r+0x28>
 81073d0:	d902      	bls.n	81073d8 <_free_r+0x80>
 81073d2:	230c      	movs	r3, #12
 81073d4:	6003      	str	r3, [r0, #0]
 81073d6:	e7d3      	b.n	8107380 <_free_r+0x28>
 81073d8:	6825      	ldr	r5, [r4, #0]
 81073da:	1961      	adds	r1, r4, r5
 81073dc:	428b      	cmp	r3, r1
 81073de:	bf04      	itt	eq
 81073e0:	6819      	ldreq	r1, [r3, #0]
 81073e2:	685b      	ldreq	r3, [r3, #4]
 81073e4:	6063      	str	r3, [r4, #4]
 81073e6:	bf04      	itt	eq
 81073e8:	1949      	addeq	r1, r1, r5
 81073ea:	6021      	streq	r1, [r4, #0]
 81073ec:	6054      	str	r4, [r2, #4]
 81073ee:	e7c7      	b.n	8107380 <_free_r+0x28>
 81073f0:	b003      	add	sp, #12
 81073f2:	bd30      	pop	{r4, r5, pc}
 81073f4:	10000364 	.word	0x10000364

081073f8 <_malloc_r>:
 81073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81073fa:	1ccd      	adds	r5, r1, #3
 81073fc:	f025 0503 	bic.w	r5, r5, #3
 8107400:	3508      	adds	r5, #8
 8107402:	2d0c      	cmp	r5, #12
 8107404:	bf38      	it	cc
 8107406:	250c      	movcc	r5, #12
 8107408:	2d00      	cmp	r5, #0
 810740a:	4606      	mov	r6, r0
 810740c:	db01      	blt.n	8107412 <_malloc_r+0x1a>
 810740e:	42a9      	cmp	r1, r5
 8107410:	d903      	bls.n	810741a <_malloc_r+0x22>
 8107412:	230c      	movs	r3, #12
 8107414:	6033      	str	r3, [r6, #0]
 8107416:	2000      	movs	r0, #0
 8107418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810741a:	f003 fc27 	bl	810ac6c <__malloc_lock>
 810741e:	4921      	ldr	r1, [pc, #132]	; (81074a4 <_malloc_r+0xac>)
 8107420:	680a      	ldr	r2, [r1, #0]
 8107422:	4614      	mov	r4, r2
 8107424:	b99c      	cbnz	r4, 810744e <_malloc_r+0x56>
 8107426:	4f20      	ldr	r7, [pc, #128]	; (81074a8 <_malloc_r+0xb0>)
 8107428:	683b      	ldr	r3, [r7, #0]
 810742a:	b923      	cbnz	r3, 8107436 <_malloc_r+0x3e>
 810742c:	4621      	mov	r1, r4
 810742e:	4630      	mov	r0, r6
 8107430:	f001 f810 	bl	8108454 <_sbrk_r>
 8107434:	6038      	str	r0, [r7, #0]
 8107436:	4629      	mov	r1, r5
 8107438:	4630      	mov	r0, r6
 810743a:	f001 f80b 	bl	8108454 <_sbrk_r>
 810743e:	1c43      	adds	r3, r0, #1
 8107440:	d123      	bne.n	810748a <_malloc_r+0x92>
 8107442:	230c      	movs	r3, #12
 8107444:	6033      	str	r3, [r6, #0]
 8107446:	4630      	mov	r0, r6
 8107448:	f003 fc16 	bl	810ac78 <__malloc_unlock>
 810744c:	e7e3      	b.n	8107416 <_malloc_r+0x1e>
 810744e:	6823      	ldr	r3, [r4, #0]
 8107450:	1b5b      	subs	r3, r3, r5
 8107452:	d417      	bmi.n	8107484 <_malloc_r+0x8c>
 8107454:	2b0b      	cmp	r3, #11
 8107456:	d903      	bls.n	8107460 <_malloc_r+0x68>
 8107458:	6023      	str	r3, [r4, #0]
 810745a:	441c      	add	r4, r3
 810745c:	6025      	str	r5, [r4, #0]
 810745e:	e004      	b.n	810746a <_malloc_r+0x72>
 8107460:	6863      	ldr	r3, [r4, #4]
 8107462:	42a2      	cmp	r2, r4
 8107464:	bf0c      	ite	eq
 8107466:	600b      	streq	r3, [r1, #0]
 8107468:	6053      	strne	r3, [r2, #4]
 810746a:	4630      	mov	r0, r6
 810746c:	f003 fc04 	bl	810ac78 <__malloc_unlock>
 8107470:	f104 000b 	add.w	r0, r4, #11
 8107474:	1d23      	adds	r3, r4, #4
 8107476:	f020 0007 	bic.w	r0, r0, #7
 810747a:	1ac2      	subs	r2, r0, r3
 810747c:	d0cc      	beq.n	8107418 <_malloc_r+0x20>
 810747e:	1a1b      	subs	r3, r3, r0
 8107480:	50a3      	str	r3, [r4, r2]
 8107482:	e7c9      	b.n	8107418 <_malloc_r+0x20>
 8107484:	4622      	mov	r2, r4
 8107486:	6864      	ldr	r4, [r4, #4]
 8107488:	e7cc      	b.n	8107424 <_malloc_r+0x2c>
 810748a:	1cc4      	adds	r4, r0, #3
 810748c:	f024 0403 	bic.w	r4, r4, #3
 8107490:	42a0      	cmp	r0, r4
 8107492:	d0e3      	beq.n	810745c <_malloc_r+0x64>
 8107494:	1a21      	subs	r1, r4, r0
 8107496:	4630      	mov	r0, r6
 8107498:	f000 ffdc 	bl	8108454 <_sbrk_r>
 810749c:	3001      	adds	r0, #1
 810749e:	d1dd      	bne.n	810745c <_malloc_r+0x64>
 81074a0:	e7cf      	b.n	8107442 <_malloc_r+0x4a>
 81074a2:	bf00      	nop
 81074a4:	10000364 	.word	0x10000364
 81074a8:	10000368 	.word	0x10000368

081074ac <__sfputc_r>:
 81074ac:	6893      	ldr	r3, [r2, #8]
 81074ae:	3b01      	subs	r3, #1
 81074b0:	2b00      	cmp	r3, #0
 81074b2:	b410      	push	{r4}
 81074b4:	6093      	str	r3, [r2, #8]
 81074b6:	da08      	bge.n	81074ca <__sfputc_r+0x1e>
 81074b8:	6994      	ldr	r4, [r2, #24]
 81074ba:	42a3      	cmp	r3, r4
 81074bc:	db01      	blt.n	81074c2 <__sfputc_r+0x16>
 81074be:	290a      	cmp	r1, #10
 81074c0:	d103      	bne.n	81074ca <__sfputc_r+0x1e>
 81074c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 81074c6:	f001 bed5 	b.w	8109274 <__swbuf_r>
 81074ca:	6813      	ldr	r3, [r2, #0]
 81074cc:	1c58      	adds	r0, r3, #1
 81074ce:	6010      	str	r0, [r2, #0]
 81074d0:	7019      	strb	r1, [r3, #0]
 81074d2:	4608      	mov	r0, r1
 81074d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 81074d8:	4770      	bx	lr

081074da <__sfputs_r>:
 81074da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81074dc:	4606      	mov	r6, r0
 81074de:	460f      	mov	r7, r1
 81074e0:	4614      	mov	r4, r2
 81074e2:	18d5      	adds	r5, r2, r3
 81074e4:	42ac      	cmp	r4, r5
 81074e6:	d101      	bne.n	81074ec <__sfputs_r+0x12>
 81074e8:	2000      	movs	r0, #0
 81074ea:	e007      	b.n	81074fc <__sfputs_r+0x22>
 81074ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 81074f0:	463a      	mov	r2, r7
 81074f2:	4630      	mov	r0, r6
 81074f4:	f7ff ffda 	bl	81074ac <__sfputc_r>
 81074f8:	1c43      	adds	r3, r0, #1
 81074fa:	d1f3      	bne.n	81074e4 <__sfputs_r+0xa>
 81074fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08107500 <_vfiprintf_r>:
 8107500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107504:	460d      	mov	r5, r1
 8107506:	b09d      	sub	sp, #116	; 0x74
 8107508:	4614      	mov	r4, r2
 810750a:	4698      	mov	r8, r3
 810750c:	4606      	mov	r6, r0
 810750e:	b118      	cbz	r0, 8107518 <_vfiprintf_r+0x18>
 8107510:	6983      	ldr	r3, [r0, #24]
 8107512:	b90b      	cbnz	r3, 8107518 <_vfiprintf_r+0x18>
 8107514:	f002 ff06 	bl	810a324 <__sinit>
 8107518:	4b89      	ldr	r3, [pc, #548]	; (8107740 <_vfiprintf_r+0x240>)
 810751a:	429d      	cmp	r5, r3
 810751c:	d11b      	bne.n	8107556 <_vfiprintf_r+0x56>
 810751e:	6875      	ldr	r5, [r6, #4]
 8107520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107522:	07d9      	lsls	r1, r3, #31
 8107524:	d405      	bmi.n	8107532 <_vfiprintf_r+0x32>
 8107526:	89ab      	ldrh	r3, [r5, #12]
 8107528:	059a      	lsls	r2, r3, #22
 810752a:	d402      	bmi.n	8107532 <_vfiprintf_r+0x32>
 810752c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810752e:	f003 fb0a 	bl	810ab46 <__retarget_lock_acquire_recursive>
 8107532:	89ab      	ldrh	r3, [r5, #12]
 8107534:	071b      	lsls	r3, r3, #28
 8107536:	d501      	bpl.n	810753c <_vfiprintf_r+0x3c>
 8107538:	692b      	ldr	r3, [r5, #16]
 810753a:	b9eb      	cbnz	r3, 8107578 <_vfiprintf_r+0x78>
 810753c:	4629      	mov	r1, r5
 810753e:	4630      	mov	r0, r6
 8107540:	f001 feea 	bl	8109318 <__swsetup_r>
 8107544:	b1c0      	cbz	r0, 8107578 <_vfiprintf_r+0x78>
 8107546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107548:	07dc      	lsls	r4, r3, #31
 810754a:	d50e      	bpl.n	810756a <_vfiprintf_r+0x6a>
 810754c:	f04f 30ff 	mov.w	r0, #4294967295
 8107550:	b01d      	add	sp, #116	; 0x74
 8107552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107556:	4b7b      	ldr	r3, [pc, #492]	; (8107744 <_vfiprintf_r+0x244>)
 8107558:	429d      	cmp	r5, r3
 810755a:	d101      	bne.n	8107560 <_vfiprintf_r+0x60>
 810755c:	68b5      	ldr	r5, [r6, #8]
 810755e:	e7df      	b.n	8107520 <_vfiprintf_r+0x20>
 8107560:	4b79      	ldr	r3, [pc, #484]	; (8107748 <_vfiprintf_r+0x248>)
 8107562:	429d      	cmp	r5, r3
 8107564:	bf08      	it	eq
 8107566:	68f5      	ldreq	r5, [r6, #12]
 8107568:	e7da      	b.n	8107520 <_vfiprintf_r+0x20>
 810756a:	89ab      	ldrh	r3, [r5, #12]
 810756c:	0598      	lsls	r0, r3, #22
 810756e:	d4ed      	bmi.n	810754c <_vfiprintf_r+0x4c>
 8107570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107572:	f003 fae9 	bl	810ab48 <__retarget_lock_release_recursive>
 8107576:	e7e9      	b.n	810754c <_vfiprintf_r+0x4c>
 8107578:	2300      	movs	r3, #0
 810757a:	9309      	str	r3, [sp, #36]	; 0x24
 810757c:	2320      	movs	r3, #32
 810757e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8107582:	f8cd 800c 	str.w	r8, [sp, #12]
 8107586:	2330      	movs	r3, #48	; 0x30
 8107588:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810774c <_vfiprintf_r+0x24c>
 810758c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8107590:	f04f 0901 	mov.w	r9, #1
 8107594:	4623      	mov	r3, r4
 8107596:	469a      	mov	sl, r3
 8107598:	f813 2b01 	ldrb.w	r2, [r3], #1
 810759c:	b10a      	cbz	r2, 81075a2 <_vfiprintf_r+0xa2>
 810759e:	2a25      	cmp	r2, #37	; 0x25
 81075a0:	d1f9      	bne.n	8107596 <_vfiprintf_r+0x96>
 81075a2:	ebba 0b04 	subs.w	fp, sl, r4
 81075a6:	d00b      	beq.n	81075c0 <_vfiprintf_r+0xc0>
 81075a8:	465b      	mov	r3, fp
 81075aa:	4622      	mov	r2, r4
 81075ac:	4629      	mov	r1, r5
 81075ae:	4630      	mov	r0, r6
 81075b0:	f7ff ff93 	bl	81074da <__sfputs_r>
 81075b4:	3001      	adds	r0, #1
 81075b6:	f000 80aa 	beq.w	810770e <_vfiprintf_r+0x20e>
 81075ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81075bc:	445a      	add	r2, fp
 81075be:	9209      	str	r2, [sp, #36]	; 0x24
 81075c0:	f89a 3000 	ldrb.w	r3, [sl]
 81075c4:	2b00      	cmp	r3, #0
 81075c6:	f000 80a2 	beq.w	810770e <_vfiprintf_r+0x20e>
 81075ca:	2300      	movs	r3, #0
 81075cc:	f04f 32ff 	mov.w	r2, #4294967295
 81075d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81075d4:	f10a 0a01 	add.w	sl, sl, #1
 81075d8:	9304      	str	r3, [sp, #16]
 81075da:	9307      	str	r3, [sp, #28]
 81075dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81075e0:	931a      	str	r3, [sp, #104]	; 0x68
 81075e2:	4654      	mov	r4, sl
 81075e4:	2205      	movs	r2, #5
 81075e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 81075ea:	4858      	ldr	r0, [pc, #352]	; (810774c <_vfiprintf_r+0x24c>)
 81075ec:	f7f8 fe90 	bl	8100310 <memchr>
 81075f0:	9a04      	ldr	r2, [sp, #16]
 81075f2:	b9d8      	cbnz	r0, 810762c <_vfiprintf_r+0x12c>
 81075f4:	06d1      	lsls	r1, r2, #27
 81075f6:	bf44      	itt	mi
 81075f8:	2320      	movmi	r3, #32
 81075fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81075fe:	0713      	lsls	r3, r2, #28
 8107600:	bf44      	itt	mi
 8107602:	232b      	movmi	r3, #43	; 0x2b
 8107604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107608:	f89a 3000 	ldrb.w	r3, [sl]
 810760c:	2b2a      	cmp	r3, #42	; 0x2a
 810760e:	d015      	beq.n	810763c <_vfiprintf_r+0x13c>
 8107610:	9a07      	ldr	r2, [sp, #28]
 8107612:	4654      	mov	r4, sl
 8107614:	2000      	movs	r0, #0
 8107616:	f04f 0c0a 	mov.w	ip, #10
 810761a:	4621      	mov	r1, r4
 810761c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107620:	3b30      	subs	r3, #48	; 0x30
 8107622:	2b09      	cmp	r3, #9
 8107624:	d94e      	bls.n	81076c4 <_vfiprintf_r+0x1c4>
 8107626:	b1b0      	cbz	r0, 8107656 <_vfiprintf_r+0x156>
 8107628:	9207      	str	r2, [sp, #28]
 810762a:	e014      	b.n	8107656 <_vfiprintf_r+0x156>
 810762c:	eba0 0308 	sub.w	r3, r0, r8
 8107630:	fa09 f303 	lsl.w	r3, r9, r3
 8107634:	4313      	orrs	r3, r2
 8107636:	9304      	str	r3, [sp, #16]
 8107638:	46a2      	mov	sl, r4
 810763a:	e7d2      	b.n	81075e2 <_vfiprintf_r+0xe2>
 810763c:	9b03      	ldr	r3, [sp, #12]
 810763e:	1d19      	adds	r1, r3, #4
 8107640:	681b      	ldr	r3, [r3, #0]
 8107642:	9103      	str	r1, [sp, #12]
 8107644:	2b00      	cmp	r3, #0
 8107646:	bfbb      	ittet	lt
 8107648:	425b      	neglt	r3, r3
 810764a:	f042 0202 	orrlt.w	r2, r2, #2
 810764e:	9307      	strge	r3, [sp, #28]
 8107650:	9307      	strlt	r3, [sp, #28]
 8107652:	bfb8      	it	lt
 8107654:	9204      	strlt	r2, [sp, #16]
 8107656:	7823      	ldrb	r3, [r4, #0]
 8107658:	2b2e      	cmp	r3, #46	; 0x2e
 810765a:	d10c      	bne.n	8107676 <_vfiprintf_r+0x176>
 810765c:	7863      	ldrb	r3, [r4, #1]
 810765e:	2b2a      	cmp	r3, #42	; 0x2a
 8107660:	d135      	bne.n	81076ce <_vfiprintf_r+0x1ce>
 8107662:	9b03      	ldr	r3, [sp, #12]
 8107664:	1d1a      	adds	r2, r3, #4
 8107666:	681b      	ldr	r3, [r3, #0]
 8107668:	9203      	str	r2, [sp, #12]
 810766a:	2b00      	cmp	r3, #0
 810766c:	bfb8      	it	lt
 810766e:	f04f 33ff 	movlt.w	r3, #4294967295
 8107672:	3402      	adds	r4, #2
 8107674:	9305      	str	r3, [sp, #20]
 8107676:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810775c <_vfiprintf_r+0x25c>
 810767a:	7821      	ldrb	r1, [r4, #0]
 810767c:	2203      	movs	r2, #3
 810767e:	4650      	mov	r0, sl
 8107680:	f7f8 fe46 	bl	8100310 <memchr>
 8107684:	b140      	cbz	r0, 8107698 <_vfiprintf_r+0x198>
 8107686:	2340      	movs	r3, #64	; 0x40
 8107688:	eba0 000a 	sub.w	r0, r0, sl
 810768c:	fa03 f000 	lsl.w	r0, r3, r0
 8107690:	9b04      	ldr	r3, [sp, #16]
 8107692:	4303      	orrs	r3, r0
 8107694:	3401      	adds	r4, #1
 8107696:	9304      	str	r3, [sp, #16]
 8107698:	f814 1b01 	ldrb.w	r1, [r4], #1
 810769c:	482c      	ldr	r0, [pc, #176]	; (8107750 <_vfiprintf_r+0x250>)
 810769e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81076a2:	2206      	movs	r2, #6
 81076a4:	f7f8 fe34 	bl	8100310 <memchr>
 81076a8:	2800      	cmp	r0, #0
 81076aa:	d03f      	beq.n	810772c <_vfiprintf_r+0x22c>
 81076ac:	4b29      	ldr	r3, [pc, #164]	; (8107754 <_vfiprintf_r+0x254>)
 81076ae:	bb1b      	cbnz	r3, 81076f8 <_vfiprintf_r+0x1f8>
 81076b0:	9b03      	ldr	r3, [sp, #12]
 81076b2:	3307      	adds	r3, #7
 81076b4:	f023 0307 	bic.w	r3, r3, #7
 81076b8:	3308      	adds	r3, #8
 81076ba:	9303      	str	r3, [sp, #12]
 81076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81076be:	443b      	add	r3, r7
 81076c0:	9309      	str	r3, [sp, #36]	; 0x24
 81076c2:	e767      	b.n	8107594 <_vfiprintf_r+0x94>
 81076c4:	fb0c 3202 	mla	r2, ip, r2, r3
 81076c8:	460c      	mov	r4, r1
 81076ca:	2001      	movs	r0, #1
 81076cc:	e7a5      	b.n	810761a <_vfiprintf_r+0x11a>
 81076ce:	2300      	movs	r3, #0
 81076d0:	3401      	adds	r4, #1
 81076d2:	9305      	str	r3, [sp, #20]
 81076d4:	4619      	mov	r1, r3
 81076d6:	f04f 0c0a 	mov.w	ip, #10
 81076da:	4620      	mov	r0, r4
 81076dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 81076e0:	3a30      	subs	r2, #48	; 0x30
 81076e2:	2a09      	cmp	r2, #9
 81076e4:	d903      	bls.n	81076ee <_vfiprintf_r+0x1ee>
 81076e6:	2b00      	cmp	r3, #0
 81076e8:	d0c5      	beq.n	8107676 <_vfiprintf_r+0x176>
 81076ea:	9105      	str	r1, [sp, #20]
 81076ec:	e7c3      	b.n	8107676 <_vfiprintf_r+0x176>
 81076ee:	fb0c 2101 	mla	r1, ip, r1, r2
 81076f2:	4604      	mov	r4, r0
 81076f4:	2301      	movs	r3, #1
 81076f6:	e7f0      	b.n	81076da <_vfiprintf_r+0x1da>
 81076f8:	ab03      	add	r3, sp, #12
 81076fa:	9300      	str	r3, [sp, #0]
 81076fc:	462a      	mov	r2, r5
 81076fe:	4b16      	ldr	r3, [pc, #88]	; (8107758 <_vfiprintf_r+0x258>)
 8107700:	a904      	add	r1, sp, #16
 8107702:	4630      	mov	r0, r6
 8107704:	f000 f8cc 	bl	81078a0 <_printf_float>
 8107708:	4607      	mov	r7, r0
 810770a:	1c78      	adds	r0, r7, #1
 810770c:	d1d6      	bne.n	81076bc <_vfiprintf_r+0x1bc>
 810770e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107710:	07d9      	lsls	r1, r3, #31
 8107712:	d405      	bmi.n	8107720 <_vfiprintf_r+0x220>
 8107714:	89ab      	ldrh	r3, [r5, #12]
 8107716:	059a      	lsls	r2, r3, #22
 8107718:	d402      	bmi.n	8107720 <_vfiprintf_r+0x220>
 810771a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810771c:	f003 fa14 	bl	810ab48 <__retarget_lock_release_recursive>
 8107720:	89ab      	ldrh	r3, [r5, #12]
 8107722:	065b      	lsls	r3, r3, #25
 8107724:	f53f af12 	bmi.w	810754c <_vfiprintf_r+0x4c>
 8107728:	9809      	ldr	r0, [sp, #36]	; 0x24
 810772a:	e711      	b.n	8107550 <_vfiprintf_r+0x50>
 810772c:	ab03      	add	r3, sp, #12
 810772e:	9300      	str	r3, [sp, #0]
 8107730:	462a      	mov	r2, r5
 8107732:	4b09      	ldr	r3, [pc, #36]	; (8107758 <_vfiprintf_r+0x258>)
 8107734:	a904      	add	r1, sp, #16
 8107736:	4630      	mov	r0, r6
 8107738:	f000 fb56 	bl	8107de8 <_printf_i>
 810773c:	e7e4      	b.n	8107708 <_vfiprintf_r+0x208>
 810773e:	bf00      	nop
 8107740:	0810c040 	.word	0x0810c040
 8107744:	0810c060 	.word	0x0810c060
 8107748:	0810c020 	.word	0x0810c020
 810774c:	0810bde8 	.word	0x0810bde8
 8107750:	0810bdf2 	.word	0x0810bdf2
 8107754:	081078a1 	.word	0x081078a1
 8107758:	081074db 	.word	0x081074db
 810775c:	0810bdee 	.word	0x0810bdee

08107760 <__cvt>:
 8107760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107764:	ec55 4b10 	vmov	r4, r5, d0
 8107768:	2d00      	cmp	r5, #0
 810776a:	460e      	mov	r6, r1
 810776c:	4619      	mov	r1, r3
 810776e:	462b      	mov	r3, r5
 8107770:	bfbb      	ittet	lt
 8107772:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8107776:	461d      	movlt	r5, r3
 8107778:	2300      	movge	r3, #0
 810777a:	232d      	movlt	r3, #45	; 0x2d
 810777c:	700b      	strb	r3, [r1, #0]
 810777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107780:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8107784:	4691      	mov	r9, r2
 8107786:	f023 0820 	bic.w	r8, r3, #32
 810778a:	bfbc      	itt	lt
 810778c:	4622      	movlt	r2, r4
 810778e:	4614      	movlt	r4, r2
 8107790:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107794:	d005      	beq.n	81077a2 <__cvt+0x42>
 8107796:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810779a:	d100      	bne.n	810779e <__cvt+0x3e>
 810779c:	3601      	adds	r6, #1
 810779e:	2102      	movs	r1, #2
 81077a0:	e000      	b.n	81077a4 <__cvt+0x44>
 81077a2:	2103      	movs	r1, #3
 81077a4:	ab03      	add	r3, sp, #12
 81077a6:	9301      	str	r3, [sp, #4]
 81077a8:	ab02      	add	r3, sp, #8
 81077aa:	9300      	str	r3, [sp, #0]
 81077ac:	ec45 4b10 	vmov	d0, r4, r5
 81077b0:	4653      	mov	r3, sl
 81077b2:	4632      	mov	r2, r6
 81077b4:	f001 feb0 	bl	8109518 <_dtoa_r>
 81077b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81077bc:	4607      	mov	r7, r0
 81077be:	d102      	bne.n	81077c6 <__cvt+0x66>
 81077c0:	f019 0f01 	tst.w	r9, #1
 81077c4:	d022      	beq.n	810780c <__cvt+0xac>
 81077c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81077ca:	eb07 0906 	add.w	r9, r7, r6
 81077ce:	d110      	bne.n	81077f2 <__cvt+0x92>
 81077d0:	783b      	ldrb	r3, [r7, #0]
 81077d2:	2b30      	cmp	r3, #48	; 0x30
 81077d4:	d10a      	bne.n	81077ec <__cvt+0x8c>
 81077d6:	2200      	movs	r2, #0
 81077d8:	2300      	movs	r3, #0
 81077da:	4620      	mov	r0, r4
 81077dc:	4629      	mov	r1, r5
 81077de:	f7f9 fa0b 	bl	8100bf8 <__aeabi_dcmpeq>
 81077e2:	b918      	cbnz	r0, 81077ec <__cvt+0x8c>
 81077e4:	f1c6 0601 	rsb	r6, r6, #1
 81077e8:	f8ca 6000 	str.w	r6, [sl]
 81077ec:	f8da 3000 	ldr.w	r3, [sl]
 81077f0:	4499      	add	r9, r3
 81077f2:	2200      	movs	r2, #0
 81077f4:	2300      	movs	r3, #0
 81077f6:	4620      	mov	r0, r4
 81077f8:	4629      	mov	r1, r5
 81077fa:	f7f9 f9fd 	bl	8100bf8 <__aeabi_dcmpeq>
 81077fe:	b108      	cbz	r0, 8107804 <__cvt+0xa4>
 8107800:	f8cd 900c 	str.w	r9, [sp, #12]
 8107804:	2230      	movs	r2, #48	; 0x30
 8107806:	9b03      	ldr	r3, [sp, #12]
 8107808:	454b      	cmp	r3, r9
 810780a:	d307      	bcc.n	810781c <__cvt+0xbc>
 810780c:	9b03      	ldr	r3, [sp, #12]
 810780e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107810:	1bdb      	subs	r3, r3, r7
 8107812:	4638      	mov	r0, r7
 8107814:	6013      	str	r3, [r2, #0]
 8107816:	b004      	add	sp, #16
 8107818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810781c:	1c59      	adds	r1, r3, #1
 810781e:	9103      	str	r1, [sp, #12]
 8107820:	701a      	strb	r2, [r3, #0]
 8107822:	e7f0      	b.n	8107806 <__cvt+0xa6>

08107824 <__exponent>:
 8107824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107826:	4603      	mov	r3, r0
 8107828:	2900      	cmp	r1, #0
 810782a:	bfb8      	it	lt
 810782c:	4249      	neglt	r1, r1
 810782e:	f803 2b02 	strb.w	r2, [r3], #2
 8107832:	bfb4      	ite	lt
 8107834:	222d      	movlt	r2, #45	; 0x2d
 8107836:	222b      	movge	r2, #43	; 0x2b
 8107838:	2909      	cmp	r1, #9
 810783a:	7042      	strb	r2, [r0, #1]
 810783c:	dd2a      	ble.n	8107894 <__exponent+0x70>
 810783e:	f10d 0407 	add.w	r4, sp, #7
 8107842:	46a4      	mov	ip, r4
 8107844:	270a      	movs	r7, #10
 8107846:	46a6      	mov	lr, r4
 8107848:	460a      	mov	r2, r1
 810784a:	fb91 f6f7 	sdiv	r6, r1, r7
 810784e:	fb07 1516 	mls	r5, r7, r6, r1
 8107852:	3530      	adds	r5, #48	; 0x30
 8107854:	2a63      	cmp	r2, #99	; 0x63
 8107856:	f104 34ff 	add.w	r4, r4, #4294967295
 810785a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810785e:	4631      	mov	r1, r6
 8107860:	dcf1      	bgt.n	8107846 <__exponent+0x22>
 8107862:	3130      	adds	r1, #48	; 0x30
 8107864:	f1ae 0502 	sub.w	r5, lr, #2
 8107868:	f804 1c01 	strb.w	r1, [r4, #-1]
 810786c:	1c44      	adds	r4, r0, #1
 810786e:	4629      	mov	r1, r5
 8107870:	4561      	cmp	r1, ip
 8107872:	d30a      	bcc.n	810788a <__exponent+0x66>
 8107874:	f10d 0209 	add.w	r2, sp, #9
 8107878:	eba2 020e 	sub.w	r2, r2, lr
 810787c:	4565      	cmp	r5, ip
 810787e:	bf88      	it	hi
 8107880:	2200      	movhi	r2, #0
 8107882:	4413      	add	r3, r2
 8107884:	1a18      	subs	r0, r3, r0
 8107886:	b003      	add	sp, #12
 8107888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810788a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810788e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107892:	e7ed      	b.n	8107870 <__exponent+0x4c>
 8107894:	2330      	movs	r3, #48	; 0x30
 8107896:	3130      	adds	r1, #48	; 0x30
 8107898:	7083      	strb	r3, [r0, #2]
 810789a:	70c1      	strb	r1, [r0, #3]
 810789c:	1d03      	adds	r3, r0, #4
 810789e:	e7f1      	b.n	8107884 <__exponent+0x60>

081078a0 <_printf_float>:
 81078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81078a4:	ed2d 8b02 	vpush	{d8}
 81078a8:	b08d      	sub	sp, #52	; 0x34
 81078aa:	460c      	mov	r4, r1
 81078ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81078b0:	4616      	mov	r6, r2
 81078b2:	461f      	mov	r7, r3
 81078b4:	4605      	mov	r5, r0
 81078b6:	f003 f941 	bl	810ab3c <_localeconv_r>
 81078ba:	f8d0 a000 	ldr.w	sl, [r0]
 81078be:	4650      	mov	r0, sl
 81078c0:	f7f8 fd18 	bl	81002f4 <strlen>
 81078c4:	2300      	movs	r3, #0
 81078c6:	930a      	str	r3, [sp, #40]	; 0x28
 81078c8:	6823      	ldr	r3, [r4, #0]
 81078ca:	9305      	str	r3, [sp, #20]
 81078cc:	f8d8 3000 	ldr.w	r3, [r8]
 81078d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 81078d4:	3307      	adds	r3, #7
 81078d6:	f023 0307 	bic.w	r3, r3, #7
 81078da:	f103 0208 	add.w	r2, r3, #8
 81078de:	f8c8 2000 	str.w	r2, [r8]
 81078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81078ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81078ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81078f2:	9307      	str	r3, [sp, #28]
 81078f4:	f8cd 8018 	str.w	r8, [sp, #24]
 81078f8:	ee08 0a10 	vmov	s16, r0
 81078fc:	4b9f      	ldr	r3, [pc, #636]	; (8107b7c <_printf_float+0x2dc>)
 81078fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107902:	f04f 32ff 	mov.w	r2, #4294967295
 8107906:	f7f9 f9a9 	bl	8100c5c <__aeabi_dcmpun>
 810790a:	bb88      	cbnz	r0, 8107970 <_printf_float+0xd0>
 810790c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107910:	4b9a      	ldr	r3, [pc, #616]	; (8107b7c <_printf_float+0x2dc>)
 8107912:	f04f 32ff 	mov.w	r2, #4294967295
 8107916:	f7f9 f983 	bl	8100c20 <__aeabi_dcmple>
 810791a:	bb48      	cbnz	r0, 8107970 <_printf_float+0xd0>
 810791c:	2200      	movs	r2, #0
 810791e:	2300      	movs	r3, #0
 8107920:	4640      	mov	r0, r8
 8107922:	4649      	mov	r1, r9
 8107924:	f7f9 f972 	bl	8100c0c <__aeabi_dcmplt>
 8107928:	b110      	cbz	r0, 8107930 <_printf_float+0x90>
 810792a:	232d      	movs	r3, #45	; 0x2d
 810792c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107930:	4b93      	ldr	r3, [pc, #588]	; (8107b80 <_printf_float+0x2e0>)
 8107932:	4894      	ldr	r0, [pc, #592]	; (8107b84 <_printf_float+0x2e4>)
 8107934:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107938:	bf94      	ite	ls
 810793a:	4698      	movls	r8, r3
 810793c:	4680      	movhi	r8, r0
 810793e:	2303      	movs	r3, #3
 8107940:	6123      	str	r3, [r4, #16]
 8107942:	9b05      	ldr	r3, [sp, #20]
 8107944:	f023 0204 	bic.w	r2, r3, #4
 8107948:	6022      	str	r2, [r4, #0]
 810794a:	f04f 0900 	mov.w	r9, #0
 810794e:	9700      	str	r7, [sp, #0]
 8107950:	4633      	mov	r3, r6
 8107952:	aa0b      	add	r2, sp, #44	; 0x2c
 8107954:	4621      	mov	r1, r4
 8107956:	4628      	mov	r0, r5
 8107958:	f000 f9d8 	bl	8107d0c <_printf_common>
 810795c:	3001      	adds	r0, #1
 810795e:	f040 8090 	bne.w	8107a82 <_printf_float+0x1e2>
 8107962:	f04f 30ff 	mov.w	r0, #4294967295
 8107966:	b00d      	add	sp, #52	; 0x34
 8107968:	ecbd 8b02 	vpop	{d8}
 810796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107970:	4642      	mov	r2, r8
 8107972:	464b      	mov	r3, r9
 8107974:	4640      	mov	r0, r8
 8107976:	4649      	mov	r1, r9
 8107978:	f7f9 f970 	bl	8100c5c <__aeabi_dcmpun>
 810797c:	b140      	cbz	r0, 8107990 <_printf_float+0xf0>
 810797e:	464b      	mov	r3, r9
 8107980:	2b00      	cmp	r3, #0
 8107982:	bfbc      	itt	lt
 8107984:	232d      	movlt	r3, #45	; 0x2d
 8107986:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810798a:	487f      	ldr	r0, [pc, #508]	; (8107b88 <_printf_float+0x2e8>)
 810798c:	4b7f      	ldr	r3, [pc, #508]	; (8107b8c <_printf_float+0x2ec>)
 810798e:	e7d1      	b.n	8107934 <_printf_float+0x94>
 8107990:	6863      	ldr	r3, [r4, #4]
 8107992:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107996:	9206      	str	r2, [sp, #24]
 8107998:	1c5a      	adds	r2, r3, #1
 810799a:	d13f      	bne.n	8107a1c <_printf_float+0x17c>
 810799c:	2306      	movs	r3, #6
 810799e:	6063      	str	r3, [r4, #4]
 81079a0:	9b05      	ldr	r3, [sp, #20]
 81079a2:	6861      	ldr	r1, [r4, #4]
 81079a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81079a8:	2300      	movs	r3, #0
 81079aa:	9303      	str	r3, [sp, #12]
 81079ac:	ab0a      	add	r3, sp, #40	; 0x28
 81079ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 81079b2:	ab09      	add	r3, sp, #36	; 0x24
 81079b4:	ec49 8b10 	vmov	d0, r8, r9
 81079b8:	9300      	str	r3, [sp, #0]
 81079ba:	6022      	str	r2, [r4, #0]
 81079bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81079c0:	4628      	mov	r0, r5
 81079c2:	f7ff fecd 	bl	8107760 <__cvt>
 81079c6:	9b06      	ldr	r3, [sp, #24]
 81079c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 81079ca:	2b47      	cmp	r3, #71	; 0x47
 81079cc:	4680      	mov	r8, r0
 81079ce:	d108      	bne.n	81079e2 <_printf_float+0x142>
 81079d0:	1cc8      	adds	r0, r1, #3
 81079d2:	db02      	blt.n	81079da <_printf_float+0x13a>
 81079d4:	6863      	ldr	r3, [r4, #4]
 81079d6:	4299      	cmp	r1, r3
 81079d8:	dd41      	ble.n	8107a5e <_printf_float+0x1be>
 81079da:	f1ab 0b02 	sub.w	fp, fp, #2
 81079de:	fa5f fb8b 	uxtb.w	fp, fp
 81079e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81079e6:	d820      	bhi.n	8107a2a <_printf_float+0x18a>
 81079e8:	3901      	subs	r1, #1
 81079ea:	465a      	mov	r2, fp
 81079ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81079f0:	9109      	str	r1, [sp, #36]	; 0x24
 81079f2:	f7ff ff17 	bl	8107824 <__exponent>
 81079f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81079f8:	1813      	adds	r3, r2, r0
 81079fa:	2a01      	cmp	r2, #1
 81079fc:	4681      	mov	r9, r0
 81079fe:	6123      	str	r3, [r4, #16]
 8107a00:	dc02      	bgt.n	8107a08 <_printf_float+0x168>
 8107a02:	6822      	ldr	r2, [r4, #0]
 8107a04:	07d2      	lsls	r2, r2, #31
 8107a06:	d501      	bpl.n	8107a0c <_printf_float+0x16c>
 8107a08:	3301      	adds	r3, #1
 8107a0a:	6123      	str	r3, [r4, #16]
 8107a0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107a10:	2b00      	cmp	r3, #0
 8107a12:	d09c      	beq.n	810794e <_printf_float+0xae>
 8107a14:	232d      	movs	r3, #45	; 0x2d
 8107a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107a1a:	e798      	b.n	810794e <_printf_float+0xae>
 8107a1c:	9a06      	ldr	r2, [sp, #24]
 8107a1e:	2a47      	cmp	r2, #71	; 0x47
 8107a20:	d1be      	bne.n	81079a0 <_printf_float+0x100>
 8107a22:	2b00      	cmp	r3, #0
 8107a24:	d1bc      	bne.n	81079a0 <_printf_float+0x100>
 8107a26:	2301      	movs	r3, #1
 8107a28:	e7b9      	b.n	810799e <_printf_float+0xfe>
 8107a2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107a2e:	d118      	bne.n	8107a62 <_printf_float+0x1c2>
 8107a30:	2900      	cmp	r1, #0
 8107a32:	6863      	ldr	r3, [r4, #4]
 8107a34:	dd0b      	ble.n	8107a4e <_printf_float+0x1ae>
 8107a36:	6121      	str	r1, [r4, #16]
 8107a38:	b913      	cbnz	r3, 8107a40 <_printf_float+0x1a0>
 8107a3a:	6822      	ldr	r2, [r4, #0]
 8107a3c:	07d0      	lsls	r0, r2, #31
 8107a3e:	d502      	bpl.n	8107a46 <_printf_float+0x1a6>
 8107a40:	3301      	adds	r3, #1
 8107a42:	440b      	add	r3, r1
 8107a44:	6123      	str	r3, [r4, #16]
 8107a46:	65a1      	str	r1, [r4, #88]	; 0x58
 8107a48:	f04f 0900 	mov.w	r9, #0
 8107a4c:	e7de      	b.n	8107a0c <_printf_float+0x16c>
 8107a4e:	b913      	cbnz	r3, 8107a56 <_printf_float+0x1b6>
 8107a50:	6822      	ldr	r2, [r4, #0]
 8107a52:	07d2      	lsls	r2, r2, #31
 8107a54:	d501      	bpl.n	8107a5a <_printf_float+0x1ba>
 8107a56:	3302      	adds	r3, #2
 8107a58:	e7f4      	b.n	8107a44 <_printf_float+0x1a4>
 8107a5a:	2301      	movs	r3, #1
 8107a5c:	e7f2      	b.n	8107a44 <_printf_float+0x1a4>
 8107a5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107a64:	4299      	cmp	r1, r3
 8107a66:	db05      	blt.n	8107a74 <_printf_float+0x1d4>
 8107a68:	6823      	ldr	r3, [r4, #0]
 8107a6a:	6121      	str	r1, [r4, #16]
 8107a6c:	07d8      	lsls	r0, r3, #31
 8107a6e:	d5ea      	bpl.n	8107a46 <_printf_float+0x1a6>
 8107a70:	1c4b      	adds	r3, r1, #1
 8107a72:	e7e7      	b.n	8107a44 <_printf_float+0x1a4>
 8107a74:	2900      	cmp	r1, #0
 8107a76:	bfd4      	ite	le
 8107a78:	f1c1 0202 	rsble	r2, r1, #2
 8107a7c:	2201      	movgt	r2, #1
 8107a7e:	4413      	add	r3, r2
 8107a80:	e7e0      	b.n	8107a44 <_printf_float+0x1a4>
 8107a82:	6823      	ldr	r3, [r4, #0]
 8107a84:	055a      	lsls	r2, r3, #21
 8107a86:	d407      	bmi.n	8107a98 <_printf_float+0x1f8>
 8107a88:	6923      	ldr	r3, [r4, #16]
 8107a8a:	4642      	mov	r2, r8
 8107a8c:	4631      	mov	r1, r6
 8107a8e:	4628      	mov	r0, r5
 8107a90:	47b8      	blx	r7
 8107a92:	3001      	adds	r0, #1
 8107a94:	d12c      	bne.n	8107af0 <_printf_float+0x250>
 8107a96:	e764      	b.n	8107962 <_printf_float+0xc2>
 8107a98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107a9c:	f240 80e0 	bls.w	8107c60 <_printf_float+0x3c0>
 8107aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107aa4:	2200      	movs	r2, #0
 8107aa6:	2300      	movs	r3, #0
 8107aa8:	f7f9 f8a6 	bl	8100bf8 <__aeabi_dcmpeq>
 8107aac:	2800      	cmp	r0, #0
 8107aae:	d034      	beq.n	8107b1a <_printf_float+0x27a>
 8107ab0:	4a37      	ldr	r2, [pc, #220]	; (8107b90 <_printf_float+0x2f0>)
 8107ab2:	2301      	movs	r3, #1
 8107ab4:	4631      	mov	r1, r6
 8107ab6:	4628      	mov	r0, r5
 8107ab8:	47b8      	blx	r7
 8107aba:	3001      	adds	r0, #1
 8107abc:	f43f af51 	beq.w	8107962 <_printf_float+0xc2>
 8107ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107ac4:	429a      	cmp	r2, r3
 8107ac6:	db02      	blt.n	8107ace <_printf_float+0x22e>
 8107ac8:	6823      	ldr	r3, [r4, #0]
 8107aca:	07d8      	lsls	r0, r3, #31
 8107acc:	d510      	bpl.n	8107af0 <_printf_float+0x250>
 8107ace:	ee18 3a10 	vmov	r3, s16
 8107ad2:	4652      	mov	r2, sl
 8107ad4:	4631      	mov	r1, r6
 8107ad6:	4628      	mov	r0, r5
 8107ad8:	47b8      	blx	r7
 8107ada:	3001      	adds	r0, #1
 8107adc:	f43f af41 	beq.w	8107962 <_printf_float+0xc2>
 8107ae0:	f04f 0800 	mov.w	r8, #0
 8107ae4:	f104 091a 	add.w	r9, r4, #26
 8107ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107aea:	3b01      	subs	r3, #1
 8107aec:	4543      	cmp	r3, r8
 8107aee:	dc09      	bgt.n	8107b04 <_printf_float+0x264>
 8107af0:	6823      	ldr	r3, [r4, #0]
 8107af2:	079b      	lsls	r3, r3, #30
 8107af4:	f100 8105 	bmi.w	8107d02 <_printf_float+0x462>
 8107af8:	68e0      	ldr	r0, [r4, #12]
 8107afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107afc:	4298      	cmp	r0, r3
 8107afe:	bfb8      	it	lt
 8107b00:	4618      	movlt	r0, r3
 8107b02:	e730      	b.n	8107966 <_printf_float+0xc6>
 8107b04:	2301      	movs	r3, #1
 8107b06:	464a      	mov	r2, r9
 8107b08:	4631      	mov	r1, r6
 8107b0a:	4628      	mov	r0, r5
 8107b0c:	47b8      	blx	r7
 8107b0e:	3001      	adds	r0, #1
 8107b10:	f43f af27 	beq.w	8107962 <_printf_float+0xc2>
 8107b14:	f108 0801 	add.w	r8, r8, #1
 8107b18:	e7e6      	b.n	8107ae8 <_printf_float+0x248>
 8107b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107b1c:	2b00      	cmp	r3, #0
 8107b1e:	dc39      	bgt.n	8107b94 <_printf_float+0x2f4>
 8107b20:	4a1b      	ldr	r2, [pc, #108]	; (8107b90 <_printf_float+0x2f0>)
 8107b22:	2301      	movs	r3, #1
 8107b24:	4631      	mov	r1, r6
 8107b26:	4628      	mov	r0, r5
 8107b28:	47b8      	blx	r7
 8107b2a:	3001      	adds	r0, #1
 8107b2c:	f43f af19 	beq.w	8107962 <_printf_float+0xc2>
 8107b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107b34:	4313      	orrs	r3, r2
 8107b36:	d102      	bne.n	8107b3e <_printf_float+0x29e>
 8107b38:	6823      	ldr	r3, [r4, #0]
 8107b3a:	07d9      	lsls	r1, r3, #31
 8107b3c:	d5d8      	bpl.n	8107af0 <_printf_float+0x250>
 8107b3e:	ee18 3a10 	vmov	r3, s16
 8107b42:	4652      	mov	r2, sl
 8107b44:	4631      	mov	r1, r6
 8107b46:	4628      	mov	r0, r5
 8107b48:	47b8      	blx	r7
 8107b4a:	3001      	adds	r0, #1
 8107b4c:	f43f af09 	beq.w	8107962 <_printf_float+0xc2>
 8107b50:	f04f 0900 	mov.w	r9, #0
 8107b54:	f104 0a1a 	add.w	sl, r4, #26
 8107b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107b5a:	425b      	negs	r3, r3
 8107b5c:	454b      	cmp	r3, r9
 8107b5e:	dc01      	bgt.n	8107b64 <_printf_float+0x2c4>
 8107b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107b62:	e792      	b.n	8107a8a <_printf_float+0x1ea>
 8107b64:	2301      	movs	r3, #1
 8107b66:	4652      	mov	r2, sl
 8107b68:	4631      	mov	r1, r6
 8107b6a:	4628      	mov	r0, r5
 8107b6c:	47b8      	blx	r7
 8107b6e:	3001      	adds	r0, #1
 8107b70:	f43f aef7 	beq.w	8107962 <_printf_float+0xc2>
 8107b74:	f109 0901 	add.w	r9, r9, #1
 8107b78:	e7ee      	b.n	8107b58 <_printf_float+0x2b8>
 8107b7a:	bf00      	nop
 8107b7c:	7fefffff 	.word	0x7fefffff
 8107b80:	0810bdf9 	.word	0x0810bdf9
 8107b84:	0810bdfd 	.word	0x0810bdfd
 8107b88:	0810be05 	.word	0x0810be05
 8107b8c:	0810be01 	.word	0x0810be01
 8107b90:	0810be09 	.word	0x0810be09
 8107b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107b98:	429a      	cmp	r2, r3
 8107b9a:	bfa8      	it	ge
 8107b9c:	461a      	movge	r2, r3
 8107b9e:	2a00      	cmp	r2, #0
 8107ba0:	4691      	mov	r9, r2
 8107ba2:	dc37      	bgt.n	8107c14 <_printf_float+0x374>
 8107ba4:	f04f 0b00 	mov.w	fp, #0
 8107ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107bac:	f104 021a 	add.w	r2, r4, #26
 8107bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107bb2:	9305      	str	r3, [sp, #20]
 8107bb4:	eba3 0309 	sub.w	r3, r3, r9
 8107bb8:	455b      	cmp	r3, fp
 8107bba:	dc33      	bgt.n	8107c24 <_printf_float+0x384>
 8107bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107bc0:	429a      	cmp	r2, r3
 8107bc2:	db3b      	blt.n	8107c3c <_printf_float+0x39c>
 8107bc4:	6823      	ldr	r3, [r4, #0]
 8107bc6:	07da      	lsls	r2, r3, #31
 8107bc8:	d438      	bmi.n	8107c3c <_printf_float+0x39c>
 8107bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107bcc:	9b05      	ldr	r3, [sp, #20]
 8107bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107bd0:	1ad3      	subs	r3, r2, r3
 8107bd2:	eba2 0901 	sub.w	r9, r2, r1
 8107bd6:	4599      	cmp	r9, r3
 8107bd8:	bfa8      	it	ge
 8107bda:	4699      	movge	r9, r3
 8107bdc:	f1b9 0f00 	cmp.w	r9, #0
 8107be0:	dc35      	bgt.n	8107c4e <_printf_float+0x3ae>
 8107be2:	f04f 0800 	mov.w	r8, #0
 8107be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107bea:	f104 0a1a 	add.w	sl, r4, #26
 8107bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107bf2:	1a9b      	subs	r3, r3, r2
 8107bf4:	eba3 0309 	sub.w	r3, r3, r9
 8107bf8:	4543      	cmp	r3, r8
 8107bfa:	f77f af79 	ble.w	8107af0 <_printf_float+0x250>
 8107bfe:	2301      	movs	r3, #1
 8107c00:	4652      	mov	r2, sl
 8107c02:	4631      	mov	r1, r6
 8107c04:	4628      	mov	r0, r5
 8107c06:	47b8      	blx	r7
 8107c08:	3001      	adds	r0, #1
 8107c0a:	f43f aeaa 	beq.w	8107962 <_printf_float+0xc2>
 8107c0e:	f108 0801 	add.w	r8, r8, #1
 8107c12:	e7ec      	b.n	8107bee <_printf_float+0x34e>
 8107c14:	4613      	mov	r3, r2
 8107c16:	4631      	mov	r1, r6
 8107c18:	4642      	mov	r2, r8
 8107c1a:	4628      	mov	r0, r5
 8107c1c:	47b8      	blx	r7
 8107c1e:	3001      	adds	r0, #1
 8107c20:	d1c0      	bne.n	8107ba4 <_printf_float+0x304>
 8107c22:	e69e      	b.n	8107962 <_printf_float+0xc2>
 8107c24:	2301      	movs	r3, #1
 8107c26:	4631      	mov	r1, r6
 8107c28:	4628      	mov	r0, r5
 8107c2a:	9205      	str	r2, [sp, #20]
 8107c2c:	47b8      	blx	r7
 8107c2e:	3001      	adds	r0, #1
 8107c30:	f43f ae97 	beq.w	8107962 <_printf_float+0xc2>
 8107c34:	9a05      	ldr	r2, [sp, #20]
 8107c36:	f10b 0b01 	add.w	fp, fp, #1
 8107c3a:	e7b9      	b.n	8107bb0 <_printf_float+0x310>
 8107c3c:	ee18 3a10 	vmov	r3, s16
 8107c40:	4652      	mov	r2, sl
 8107c42:	4631      	mov	r1, r6
 8107c44:	4628      	mov	r0, r5
 8107c46:	47b8      	blx	r7
 8107c48:	3001      	adds	r0, #1
 8107c4a:	d1be      	bne.n	8107bca <_printf_float+0x32a>
 8107c4c:	e689      	b.n	8107962 <_printf_float+0xc2>
 8107c4e:	9a05      	ldr	r2, [sp, #20]
 8107c50:	464b      	mov	r3, r9
 8107c52:	4442      	add	r2, r8
 8107c54:	4631      	mov	r1, r6
 8107c56:	4628      	mov	r0, r5
 8107c58:	47b8      	blx	r7
 8107c5a:	3001      	adds	r0, #1
 8107c5c:	d1c1      	bne.n	8107be2 <_printf_float+0x342>
 8107c5e:	e680      	b.n	8107962 <_printf_float+0xc2>
 8107c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107c62:	2a01      	cmp	r2, #1
 8107c64:	dc01      	bgt.n	8107c6a <_printf_float+0x3ca>
 8107c66:	07db      	lsls	r3, r3, #31
 8107c68:	d538      	bpl.n	8107cdc <_printf_float+0x43c>
 8107c6a:	2301      	movs	r3, #1
 8107c6c:	4642      	mov	r2, r8
 8107c6e:	4631      	mov	r1, r6
 8107c70:	4628      	mov	r0, r5
 8107c72:	47b8      	blx	r7
 8107c74:	3001      	adds	r0, #1
 8107c76:	f43f ae74 	beq.w	8107962 <_printf_float+0xc2>
 8107c7a:	ee18 3a10 	vmov	r3, s16
 8107c7e:	4652      	mov	r2, sl
 8107c80:	4631      	mov	r1, r6
 8107c82:	4628      	mov	r0, r5
 8107c84:	47b8      	blx	r7
 8107c86:	3001      	adds	r0, #1
 8107c88:	f43f ae6b 	beq.w	8107962 <_printf_float+0xc2>
 8107c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107c90:	2200      	movs	r2, #0
 8107c92:	2300      	movs	r3, #0
 8107c94:	f7f8 ffb0 	bl	8100bf8 <__aeabi_dcmpeq>
 8107c98:	b9d8      	cbnz	r0, 8107cd2 <_printf_float+0x432>
 8107c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c9c:	f108 0201 	add.w	r2, r8, #1
 8107ca0:	3b01      	subs	r3, #1
 8107ca2:	4631      	mov	r1, r6
 8107ca4:	4628      	mov	r0, r5
 8107ca6:	47b8      	blx	r7
 8107ca8:	3001      	adds	r0, #1
 8107caa:	d10e      	bne.n	8107cca <_printf_float+0x42a>
 8107cac:	e659      	b.n	8107962 <_printf_float+0xc2>
 8107cae:	2301      	movs	r3, #1
 8107cb0:	4652      	mov	r2, sl
 8107cb2:	4631      	mov	r1, r6
 8107cb4:	4628      	mov	r0, r5
 8107cb6:	47b8      	blx	r7
 8107cb8:	3001      	adds	r0, #1
 8107cba:	f43f ae52 	beq.w	8107962 <_printf_float+0xc2>
 8107cbe:	f108 0801 	add.w	r8, r8, #1
 8107cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107cc4:	3b01      	subs	r3, #1
 8107cc6:	4543      	cmp	r3, r8
 8107cc8:	dcf1      	bgt.n	8107cae <_printf_float+0x40e>
 8107cca:	464b      	mov	r3, r9
 8107ccc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107cd0:	e6dc      	b.n	8107a8c <_printf_float+0x1ec>
 8107cd2:	f04f 0800 	mov.w	r8, #0
 8107cd6:	f104 0a1a 	add.w	sl, r4, #26
 8107cda:	e7f2      	b.n	8107cc2 <_printf_float+0x422>
 8107cdc:	2301      	movs	r3, #1
 8107cde:	4642      	mov	r2, r8
 8107ce0:	e7df      	b.n	8107ca2 <_printf_float+0x402>
 8107ce2:	2301      	movs	r3, #1
 8107ce4:	464a      	mov	r2, r9
 8107ce6:	4631      	mov	r1, r6
 8107ce8:	4628      	mov	r0, r5
 8107cea:	47b8      	blx	r7
 8107cec:	3001      	adds	r0, #1
 8107cee:	f43f ae38 	beq.w	8107962 <_printf_float+0xc2>
 8107cf2:	f108 0801 	add.w	r8, r8, #1
 8107cf6:	68e3      	ldr	r3, [r4, #12]
 8107cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107cfa:	1a5b      	subs	r3, r3, r1
 8107cfc:	4543      	cmp	r3, r8
 8107cfe:	dcf0      	bgt.n	8107ce2 <_printf_float+0x442>
 8107d00:	e6fa      	b.n	8107af8 <_printf_float+0x258>
 8107d02:	f04f 0800 	mov.w	r8, #0
 8107d06:	f104 0919 	add.w	r9, r4, #25
 8107d0a:	e7f4      	b.n	8107cf6 <_printf_float+0x456>

08107d0c <_printf_common>:
 8107d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107d10:	4616      	mov	r6, r2
 8107d12:	4699      	mov	r9, r3
 8107d14:	688a      	ldr	r2, [r1, #8]
 8107d16:	690b      	ldr	r3, [r1, #16]
 8107d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107d1c:	4293      	cmp	r3, r2
 8107d1e:	bfb8      	it	lt
 8107d20:	4613      	movlt	r3, r2
 8107d22:	6033      	str	r3, [r6, #0]
 8107d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107d28:	4607      	mov	r7, r0
 8107d2a:	460c      	mov	r4, r1
 8107d2c:	b10a      	cbz	r2, 8107d32 <_printf_common+0x26>
 8107d2e:	3301      	adds	r3, #1
 8107d30:	6033      	str	r3, [r6, #0]
 8107d32:	6823      	ldr	r3, [r4, #0]
 8107d34:	0699      	lsls	r1, r3, #26
 8107d36:	bf42      	ittt	mi
 8107d38:	6833      	ldrmi	r3, [r6, #0]
 8107d3a:	3302      	addmi	r3, #2
 8107d3c:	6033      	strmi	r3, [r6, #0]
 8107d3e:	6825      	ldr	r5, [r4, #0]
 8107d40:	f015 0506 	ands.w	r5, r5, #6
 8107d44:	d106      	bne.n	8107d54 <_printf_common+0x48>
 8107d46:	f104 0a19 	add.w	sl, r4, #25
 8107d4a:	68e3      	ldr	r3, [r4, #12]
 8107d4c:	6832      	ldr	r2, [r6, #0]
 8107d4e:	1a9b      	subs	r3, r3, r2
 8107d50:	42ab      	cmp	r3, r5
 8107d52:	dc26      	bgt.n	8107da2 <_printf_common+0x96>
 8107d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107d58:	1e13      	subs	r3, r2, #0
 8107d5a:	6822      	ldr	r2, [r4, #0]
 8107d5c:	bf18      	it	ne
 8107d5e:	2301      	movne	r3, #1
 8107d60:	0692      	lsls	r2, r2, #26
 8107d62:	d42b      	bmi.n	8107dbc <_printf_common+0xb0>
 8107d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107d68:	4649      	mov	r1, r9
 8107d6a:	4638      	mov	r0, r7
 8107d6c:	47c0      	blx	r8
 8107d6e:	3001      	adds	r0, #1
 8107d70:	d01e      	beq.n	8107db0 <_printf_common+0xa4>
 8107d72:	6823      	ldr	r3, [r4, #0]
 8107d74:	68e5      	ldr	r5, [r4, #12]
 8107d76:	6832      	ldr	r2, [r6, #0]
 8107d78:	f003 0306 	and.w	r3, r3, #6
 8107d7c:	2b04      	cmp	r3, #4
 8107d7e:	bf08      	it	eq
 8107d80:	1aad      	subeq	r5, r5, r2
 8107d82:	68a3      	ldr	r3, [r4, #8]
 8107d84:	6922      	ldr	r2, [r4, #16]
 8107d86:	bf0c      	ite	eq
 8107d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107d8c:	2500      	movne	r5, #0
 8107d8e:	4293      	cmp	r3, r2
 8107d90:	bfc4      	itt	gt
 8107d92:	1a9b      	subgt	r3, r3, r2
 8107d94:	18ed      	addgt	r5, r5, r3
 8107d96:	2600      	movs	r6, #0
 8107d98:	341a      	adds	r4, #26
 8107d9a:	42b5      	cmp	r5, r6
 8107d9c:	d11a      	bne.n	8107dd4 <_printf_common+0xc8>
 8107d9e:	2000      	movs	r0, #0
 8107da0:	e008      	b.n	8107db4 <_printf_common+0xa8>
 8107da2:	2301      	movs	r3, #1
 8107da4:	4652      	mov	r2, sl
 8107da6:	4649      	mov	r1, r9
 8107da8:	4638      	mov	r0, r7
 8107daa:	47c0      	blx	r8
 8107dac:	3001      	adds	r0, #1
 8107dae:	d103      	bne.n	8107db8 <_printf_common+0xac>
 8107db0:	f04f 30ff 	mov.w	r0, #4294967295
 8107db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107db8:	3501      	adds	r5, #1
 8107dba:	e7c6      	b.n	8107d4a <_printf_common+0x3e>
 8107dbc:	18e1      	adds	r1, r4, r3
 8107dbe:	1c5a      	adds	r2, r3, #1
 8107dc0:	2030      	movs	r0, #48	; 0x30
 8107dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107dc6:	4422      	add	r2, r4
 8107dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8107dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8107dd0:	3302      	adds	r3, #2
 8107dd2:	e7c7      	b.n	8107d64 <_printf_common+0x58>
 8107dd4:	2301      	movs	r3, #1
 8107dd6:	4622      	mov	r2, r4
 8107dd8:	4649      	mov	r1, r9
 8107dda:	4638      	mov	r0, r7
 8107ddc:	47c0      	blx	r8
 8107dde:	3001      	adds	r0, #1
 8107de0:	d0e6      	beq.n	8107db0 <_printf_common+0xa4>
 8107de2:	3601      	adds	r6, #1
 8107de4:	e7d9      	b.n	8107d9a <_printf_common+0x8e>
	...

08107de8 <_printf_i>:
 8107de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107dec:	460c      	mov	r4, r1
 8107dee:	4691      	mov	r9, r2
 8107df0:	7e27      	ldrb	r7, [r4, #24]
 8107df2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8107df4:	2f78      	cmp	r7, #120	; 0x78
 8107df6:	4680      	mov	r8, r0
 8107df8:	469a      	mov	sl, r3
 8107dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107dfe:	d807      	bhi.n	8107e10 <_printf_i+0x28>
 8107e00:	2f62      	cmp	r7, #98	; 0x62
 8107e02:	d80a      	bhi.n	8107e1a <_printf_i+0x32>
 8107e04:	2f00      	cmp	r7, #0
 8107e06:	f000 80d8 	beq.w	8107fba <_printf_i+0x1d2>
 8107e0a:	2f58      	cmp	r7, #88	; 0x58
 8107e0c:	f000 80a3 	beq.w	8107f56 <_printf_i+0x16e>
 8107e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107e18:	e03a      	b.n	8107e90 <_printf_i+0xa8>
 8107e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107e1e:	2b15      	cmp	r3, #21
 8107e20:	d8f6      	bhi.n	8107e10 <_printf_i+0x28>
 8107e22:	a001      	add	r0, pc, #4	; (adr r0, 8107e28 <_printf_i+0x40>)
 8107e24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8107e28:	08107e81 	.word	0x08107e81
 8107e2c:	08107e95 	.word	0x08107e95
 8107e30:	08107e11 	.word	0x08107e11
 8107e34:	08107e11 	.word	0x08107e11
 8107e38:	08107e11 	.word	0x08107e11
 8107e3c:	08107e11 	.word	0x08107e11
 8107e40:	08107e95 	.word	0x08107e95
 8107e44:	08107e11 	.word	0x08107e11
 8107e48:	08107e11 	.word	0x08107e11
 8107e4c:	08107e11 	.word	0x08107e11
 8107e50:	08107e11 	.word	0x08107e11
 8107e54:	08107fa1 	.word	0x08107fa1
 8107e58:	08107ec5 	.word	0x08107ec5
 8107e5c:	08107f83 	.word	0x08107f83
 8107e60:	08107e11 	.word	0x08107e11
 8107e64:	08107e11 	.word	0x08107e11
 8107e68:	08107fc3 	.word	0x08107fc3
 8107e6c:	08107e11 	.word	0x08107e11
 8107e70:	08107ec5 	.word	0x08107ec5
 8107e74:	08107e11 	.word	0x08107e11
 8107e78:	08107e11 	.word	0x08107e11
 8107e7c:	08107f8b 	.word	0x08107f8b
 8107e80:	680b      	ldr	r3, [r1, #0]
 8107e82:	1d1a      	adds	r2, r3, #4
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	600a      	str	r2, [r1, #0]
 8107e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8107e90:	2301      	movs	r3, #1
 8107e92:	e0a3      	b.n	8107fdc <_printf_i+0x1f4>
 8107e94:	6825      	ldr	r5, [r4, #0]
 8107e96:	6808      	ldr	r0, [r1, #0]
 8107e98:	062e      	lsls	r6, r5, #24
 8107e9a:	f100 0304 	add.w	r3, r0, #4
 8107e9e:	d50a      	bpl.n	8107eb6 <_printf_i+0xce>
 8107ea0:	6805      	ldr	r5, [r0, #0]
 8107ea2:	600b      	str	r3, [r1, #0]
 8107ea4:	2d00      	cmp	r5, #0
 8107ea6:	da03      	bge.n	8107eb0 <_printf_i+0xc8>
 8107ea8:	232d      	movs	r3, #45	; 0x2d
 8107eaa:	426d      	negs	r5, r5
 8107eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107eb0:	485e      	ldr	r0, [pc, #376]	; (810802c <_printf_i+0x244>)
 8107eb2:	230a      	movs	r3, #10
 8107eb4:	e019      	b.n	8107eea <_printf_i+0x102>
 8107eb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8107eba:	6805      	ldr	r5, [r0, #0]
 8107ebc:	600b      	str	r3, [r1, #0]
 8107ebe:	bf18      	it	ne
 8107ec0:	b22d      	sxthne	r5, r5
 8107ec2:	e7ef      	b.n	8107ea4 <_printf_i+0xbc>
 8107ec4:	680b      	ldr	r3, [r1, #0]
 8107ec6:	6825      	ldr	r5, [r4, #0]
 8107ec8:	1d18      	adds	r0, r3, #4
 8107eca:	6008      	str	r0, [r1, #0]
 8107ecc:	0628      	lsls	r0, r5, #24
 8107ece:	d501      	bpl.n	8107ed4 <_printf_i+0xec>
 8107ed0:	681d      	ldr	r5, [r3, #0]
 8107ed2:	e002      	b.n	8107eda <_printf_i+0xf2>
 8107ed4:	0669      	lsls	r1, r5, #25
 8107ed6:	d5fb      	bpl.n	8107ed0 <_printf_i+0xe8>
 8107ed8:	881d      	ldrh	r5, [r3, #0]
 8107eda:	4854      	ldr	r0, [pc, #336]	; (810802c <_printf_i+0x244>)
 8107edc:	2f6f      	cmp	r7, #111	; 0x6f
 8107ede:	bf0c      	ite	eq
 8107ee0:	2308      	moveq	r3, #8
 8107ee2:	230a      	movne	r3, #10
 8107ee4:	2100      	movs	r1, #0
 8107ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107eea:	6866      	ldr	r6, [r4, #4]
 8107eec:	60a6      	str	r6, [r4, #8]
 8107eee:	2e00      	cmp	r6, #0
 8107ef0:	bfa2      	ittt	ge
 8107ef2:	6821      	ldrge	r1, [r4, #0]
 8107ef4:	f021 0104 	bicge.w	r1, r1, #4
 8107ef8:	6021      	strge	r1, [r4, #0]
 8107efa:	b90d      	cbnz	r5, 8107f00 <_printf_i+0x118>
 8107efc:	2e00      	cmp	r6, #0
 8107efe:	d04d      	beq.n	8107f9c <_printf_i+0x1b4>
 8107f00:	4616      	mov	r6, r2
 8107f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8107f06:	fb03 5711 	mls	r7, r3, r1, r5
 8107f0a:	5dc7      	ldrb	r7, [r0, r7]
 8107f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107f10:	462f      	mov	r7, r5
 8107f12:	42bb      	cmp	r3, r7
 8107f14:	460d      	mov	r5, r1
 8107f16:	d9f4      	bls.n	8107f02 <_printf_i+0x11a>
 8107f18:	2b08      	cmp	r3, #8
 8107f1a:	d10b      	bne.n	8107f34 <_printf_i+0x14c>
 8107f1c:	6823      	ldr	r3, [r4, #0]
 8107f1e:	07df      	lsls	r7, r3, #31
 8107f20:	d508      	bpl.n	8107f34 <_printf_i+0x14c>
 8107f22:	6923      	ldr	r3, [r4, #16]
 8107f24:	6861      	ldr	r1, [r4, #4]
 8107f26:	4299      	cmp	r1, r3
 8107f28:	bfde      	ittt	le
 8107f2a:	2330      	movle	r3, #48	; 0x30
 8107f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8107f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8107f34:	1b92      	subs	r2, r2, r6
 8107f36:	6122      	str	r2, [r4, #16]
 8107f38:	f8cd a000 	str.w	sl, [sp]
 8107f3c:	464b      	mov	r3, r9
 8107f3e:	aa03      	add	r2, sp, #12
 8107f40:	4621      	mov	r1, r4
 8107f42:	4640      	mov	r0, r8
 8107f44:	f7ff fee2 	bl	8107d0c <_printf_common>
 8107f48:	3001      	adds	r0, #1
 8107f4a:	d14c      	bne.n	8107fe6 <_printf_i+0x1fe>
 8107f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8107f50:	b004      	add	sp, #16
 8107f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107f56:	4835      	ldr	r0, [pc, #212]	; (810802c <_printf_i+0x244>)
 8107f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8107f5c:	6823      	ldr	r3, [r4, #0]
 8107f5e:	680e      	ldr	r6, [r1, #0]
 8107f60:	061f      	lsls	r7, r3, #24
 8107f62:	f856 5b04 	ldr.w	r5, [r6], #4
 8107f66:	600e      	str	r6, [r1, #0]
 8107f68:	d514      	bpl.n	8107f94 <_printf_i+0x1ac>
 8107f6a:	07d9      	lsls	r1, r3, #31
 8107f6c:	bf44      	itt	mi
 8107f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8107f72:	6023      	strmi	r3, [r4, #0]
 8107f74:	b91d      	cbnz	r5, 8107f7e <_printf_i+0x196>
 8107f76:	6823      	ldr	r3, [r4, #0]
 8107f78:	f023 0320 	bic.w	r3, r3, #32
 8107f7c:	6023      	str	r3, [r4, #0]
 8107f7e:	2310      	movs	r3, #16
 8107f80:	e7b0      	b.n	8107ee4 <_printf_i+0xfc>
 8107f82:	6823      	ldr	r3, [r4, #0]
 8107f84:	f043 0320 	orr.w	r3, r3, #32
 8107f88:	6023      	str	r3, [r4, #0]
 8107f8a:	2378      	movs	r3, #120	; 0x78
 8107f8c:	4828      	ldr	r0, [pc, #160]	; (8108030 <_printf_i+0x248>)
 8107f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8107f92:	e7e3      	b.n	8107f5c <_printf_i+0x174>
 8107f94:	065e      	lsls	r6, r3, #25
 8107f96:	bf48      	it	mi
 8107f98:	b2ad      	uxthmi	r5, r5
 8107f9a:	e7e6      	b.n	8107f6a <_printf_i+0x182>
 8107f9c:	4616      	mov	r6, r2
 8107f9e:	e7bb      	b.n	8107f18 <_printf_i+0x130>
 8107fa0:	680b      	ldr	r3, [r1, #0]
 8107fa2:	6826      	ldr	r6, [r4, #0]
 8107fa4:	6960      	ldr	r0, [r4, #20]
 8107fa6:	1d1d      	adds	r5, r3, #4
 8107fa8:	600d      	str	r5, [r1, #0]
 8107faa:	0635      	lsls	r5, r6, #24
 8107fac:	681b      	ldr	r3, [r3, #0]
 8107fae:	d501      	bpl.n	8107fb4 <_printf_i+0x1cc>
 8107fb0:	6018      	str	r0, [r3, #0]
 8107fb2:	e002      	b.n	8107fba <_printf_i+0x1d2>
 8107fb4:	0671      	lsls	r1, r6, #25
 8107fb6:	d5fb      	bpl.n	8107fb0 <_printf_i+0x1c8>
 8107fb8:	8018      	strh	r0, [r3, #0]
 8107fba:	2300      	movs	r3, #0
 8107fbc:	6123      	str	r3, [r4, #16]
 8107fbe:	4616      	mov	r6, r2
 8107fc0:	e7ba      	b.n	8107f38 <_printf_i+0x150>
 8107fc2:	680b      	ldr	r3, [r1, #0]
 8107fc4:	1d1a      	adds	r2, r3, #4
 8107fc6:	600a      	str	r2, [r1, #0]
 8107fc8:	681e      	ldr	r6, [r3, #0]
 8107fca:	6862      	ldr	r2, [r4, #4]
 8107fcc:	2100      	movs	r1, #0
 8107fce:	4630      	mov	r0, r6
 8107fd0:	f7f8 f99e 	bl	8100310 <memchr>
 8107fd4:	b108      	cbz	r0, 8107fda <_printf_i+0x1f2>
 8107fd6:	1b80      	subs	r0, r0, r6
 8107fd8:	6060      	str	r0, [r4, #4]
 8107fda:	6863      	ldr	r3, [r4, #4]
 8107fdc:	6123      	str	r3, [r4, #16]
 8107fde:	2300      	movs	r3, #0
 8107fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107fe4:	e7a8      	b.n	8107f38 <_printf_i+0x150>
 8107fe6:	6923      	ldr	r3, [r4, #16]
 8107fe8:	4632      	mov	r2, r6
 8107fea:	4649      	mov	r1, r9
 8107fec:	4640      	mov	r0, r8
 8107fee:	47d0      	blx	sl
 8107ff0:	3001      	adds	r0, #1
 8107ff2:	d0ab      	beq.n	8107f4c <_printf_i+0x164>
 8107ff4:	6823      	ldr	r3, [r4, #0]
 8107ff6:	079b      	lsls	r3, r3, #30
 8107ff8:	d413      	bmi.n	8108022 <_printf_i+0x23a>
 8107ffa:	68e0      	ldr	r0, [r4, #12]
 8107ffc:	9b03      	ldr	r3, [sp, #12]
 8107ffe:	4298      	cmp	r0, r3
 8108000:	bfb8      	it	lt
 8108002:	4618      	movlt	r0, r3
 8108004:	e7a4      	b.n	8107f50 <_printf_i+0x168>
 8108006:	2301      	movs	r3, #1
 8108008:	4632      	mov	r2, r6
 810800a:	4649      	mov	r1, r9
 810800c:	4640      	mov	r0, r8
 810800e:	47d0      	blx	sl
 8108010:	3001      	adds	r0, #1
 8108012:	d09b      	beq.n	8107f4c <_printf_i+0x164>
 8108014:	3501      	adds	r5, #1
 8108016:	68e3      	ldr	r3, [r4, #12]
 8108018:	9903      	ldr	r1, [sp, #12]
 810801a:	1a5b      	subs	r3, r3, r1
 810801c:	42ab      	cmp	r3, r5
 810801e:	dcf2      	bgt.n	8108006 <_printf_i+0x21e>
 8108020:	e7eb      	b.n	8107ffa <_printf_i+0x212>
 8108022:	2500      	movs	r5, #0
 8108024:	f104 0619 	add.w	r6, r4, #25
 8108028:	e7f5      	b.n	8108016 <_printf_i+0x22e>
 810802a:	bf00      	nop
 810802c:	0810be0b 	.word	0x0810be0b
 8108030:	0810be1c 	.word	0x0810be1c

08108034 <_scanf_float>:
 8108034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108038:	b087      	sub	sp, #28
 810803a:	4617      	mov	r7, r2
 810803c:	9303      	str	r3, [sp, #12]
 810803e:	688b      	ldr	r3, [r1, #8]
 8108040:	1e5a      	subs	r2, r3, #1
 8108042:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8108046:	bf83      	ittte	hi
 8108048:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810804c:	195b      	addhi	r3, r3, r5
 810804e:	9302      	strhi	r3, [sp, #8]
 8108050:	2300      	movls	r3, #0
 8108052:	bf86      	itte	hi
 8108054:	f240 135d 	movwhi	r3, #349	; 0x15d
 8108058:	608b      	strhi	r3, [r1, #8]
 810805a:	9302      	strls	r3, [sp, #8]
 810805c:	680b      	ldr	r3, [r1, #0]
 810805e:	468b      	mov	fp, r1
 8108060:	2500      	movs	r5, #0
 8108062:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8108066:	f84b 3b1c 	str.w	r3, [fp], #28
 810806a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810806e:	4680      	mov	r8, r0
 8108070:	460c      	mov	r4, r1
 8108072:	465e      	mov	r6, fp
 8108074:	46aa      	mov	sl, r5
 8108076:	46a9      	mov	r9, r5
 8108078:	9501      	str	r5, [sp, #4]
 810807a:	68a2      	ldr	r2, [r4, #8]
 810807c:	b152      	cbz	r2, 8108094 <_scanf_float+0x60>
 810807e:	683b      	ldr	r3, [r7, #0]
 8108080:	781b      	ldrb	r3, [r3, #0]
 8108082:	2b4e      	cmp	r3, #78	; 0x4e
 8108084:	d864      	bhi.n	8108150 <_scanf_float+0x11c>
 8108086:	2b40      	cmp	r3, #64	; 0x40
 8108088:	d83c      	bhi.n	8108104 <_scanf_float+0xd0>
 810808a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810808e:	b2c8      	uxtb	r0, r1
 8108090:	280e      	cmp	r0, #14
 8108092:	d93a      	bls.n	810810a <_scanf_float+0xd6>
 8108094:	f1b9 0f00 	cmp.w	r9, #0
 8108098:	d003      	beq.n	81080a2 <_scanf_float+0x6e>
 810809a:	6823      	ldr	r3, [r4, #0]
 810809c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81080a0:	6023      	str	r3, [r4, #0]
 81080a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81080a6:	f1ba 0f01 	cmp.w	sl, #1
 81080aa:	f200 8113 	bhi.w	81082d4 <_scanf_float+0x2a0>
 81080ae:	455e      	cmp	r6, fp
 81080b0:	f200 8105 	bhi.w	81082be <_scanf_float+0x28a>
 81080b4:	2501      	movs	r5, #1
 81080b6:	4628      	mov	r0, r5
 81080b8:	b007      	add	sp, #28
 81080ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81080be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81080c2:	2a0d      	cmp	r2, #13
 81080c4:	d8e6      	bhi.n	8108094 <_scanf_float+0x60>
 81080c6:	a101      	add	r1, pc, #4	; (adr r1, 81080cc <_scanf_float+0x98>)
 81080c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81080cc:	0810820b 	.word	0x0810820b
 81080d0:	08108095 	.word	0x08108095
 81080d4:	08108095 	.word	0x08108095
 81080d8:	08108095 	.word	0x08108095
 81080dc:	0810826b 	.word	0x0810826b
 81080e0:	08108243 	.word	0x08108243
 81080e4:	08108095 	.word	0x08108095
 81080e8:	08108095 	.word	0x08108095
 81080ec:	08108219 	.word	0x08108219
 81080f0:	08108095 	.word	0x08108095
 81080f4:	08108095 	.word	0x08108095
 81080f8:	08108095 	.word	0x08108095
 81080fc:	08108095 	.word	0x08108095
 8108100:	081081d1 	.word	0x081081d1
 8108104:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8108108:	e7db      	b.n	81080c2 <_scanf_float+0x8e>
 810810a:	290e      	cmp	r1, #14
 810810c:	d8c2      	bhi.n	8108094 <_scanf_float+0x60>
 810810e:	a001      	add	r0, pc, #4	; (adr r0, 8108114 <_scanf_float+0xe0>)
 8108110:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108114:	081081c3 	.word	0x081081c3
 8108118:	08108095 	.word	0x08108095
 810811c:	081081c3 	.word	0x081081c3
 8108120:	08108257 	.word	0x08108257
 8108124:	08108095 	.word	0x08108095
 8108128:	08108171 	.word	0x08108171
 810812c:	081081ad 	.word	0x081081ad
 8108130:	081081ad 	.word	0x081081ad
 8108134:	081081ad 	.word	0x081081ad
 8108138:	081081ad 	.word	0x081081ad
 810813c:	081081ad 	.word	0x081081ad
 8108140:	081081ad 	.word	0x081081ad
 8108144:	081081ad 	.word	0x081081ad
 8108148:	081081ad 	.word	0x081081ad
 810814c:	081081ad 	.word	0x081081ad
 8108150:	2b6e      	cmp	r3, #110	; 0x6e
 8108152:	d809      	bhi.n	8108168 <_scanf_float+0x134>
 8108154:	2b60      	cmp	r3, #96	; 0x60
 8108156:	d8b2      	bhi.n	81080be <_scanf_float+0x8a>
 8108158:	2b54      	cmp	r3, #84	; 0x54
 810815a:	d077      	beq.n	810824c <_scanf_float+0x218>
 810815c:	2b59      	cmp	r3, #89	; 0x59
 810815e:	d199      	bne.n	8108094 <_scanf_float+0x60>
 8108160:	2d07      	cmp	r5, #7
 8108162:	d197      	bne.n	8108094 <_scanf_float+0x60>
 8108164:	2508      	movs	r5, #8
 8108166:	e029      	b.n	81081bc <_scanf_float+0x188>
 8108168:	2b74      	cmp	r3, #116	; 0x74
 810816a:	d06f      	beq.n	810824c <_scanf_float+0x218>
 810816c:	2b79      	cmp	r3, #121	; 0x79
 810816e:	e7f6      	b.n	810815e <_scanf_float+0x12a>
 8108170:	6821      	ldr	r1, [r4, #0]
 8108172:	05c8      	lsls	r0, r1, #23
 8108174:	d51a      	bpl.n	81081ac <_scanf_float+0x178>
 8108176:	9b02      	ldr	r3, [sp, #8]
 8108178:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810817c:	6021      	str	r1, [r4, #0]
 810817e:	f109 0901 	add.w	r9, r9, #1
 8108182:	b11b      	cbz	r3, 810818c <_scanf_float+0x158>
 8108184:	3b01      	subs	r3, #1
 8108186:	3201      	adds	r2, #1
 8108188:	9302      	str	r3, [sp, #8]
 810818a:	60a2      	str	r2, [r4, #8]
 810818c:	68a3      	ldr	r3, [r4, #8]
 810818e:	3b01      	subs	r3, #1
 8108190:	60a3      	str	r3, [r4, #8]
 8108192:	6923      	ldr	r3, [r4, #16]
 8108194:	3301      	adds	r3, #1
 8108196:	6123      	str	r3, [r4, #16]
 8108198:	687b      	ldr	r3, [r7, #4]
 810819a:	3b01      	subs	r3, #1
 810819c:	2b00      	cmp	r3, #0
 810819e:	607b      	str	r3, [r7, #4]
 81081a0:	f340 8084 	ble.w	81082ac <_scanf_float+0x278>
 81081a4:	683b      	ldr	r3, [r7, #0]
 81081a6:	3301      	adds	r3, #1
 81081a8:	603b      	str	r3, [r7, #0]
 81081aa:	e766      	b.n	810807a <_scanf_float+0x46>
 81081ac:	eb1a 0f05 	cmn.w	sl, r5
 81081b0:	f47f af70 	bne.w	8108094 <_scanf_float+0x60>
 81081b4:	6822      	ldr	r2, [r4, #0]
 81081b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81081ba:	6022      	str	r2, [r4, #0]
 81081bc:	f806 3b01 	strb.w	r3, [r6], #1
 81081c0:	e7e4      	b.n	810818c <_scanf_float+0x158>
 81081c2:	6822      	ldr	r2, [r4, #0]
 81081c4:	0610      	lsls	r0, r2, #24
 81081c6:	f57f af65 	bpl.w	8108094 <_scanf_float+0x60>
 81081ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81081ce:	e7f4      	b.n	81081ba <_scanf_float+0x186>
 81081d0:	f1ba 0f00 	cmp.w	sl, #0
 81081d4:	d10e      	bne.n	81081f4 <_scanf_float+0x1c0>
 81081d6:	f1b9 0f00 	cmp.w	r9, #0
 81081da:	d10e      	bne.n	81081fa <_scanf_float+0x1c6>
 81081dc:	6822      	ldr	r2, [r4, #0]
 81081de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81081e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81081e6:	d108      	bne.n	81081fa <_scanf_float+0x1c6>
 81081e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81081ec:	6022      	str	r2, [r4, #0]
 81081ee:	f04f 0a01 	mov.w	sl, #1
 81081f2:	e7e3      	b.n	81081bc <_scanf_float+0x188>
 81081f4:	f1ba 0f02 	cmp.w	sl, #2
 81081f8:	d055      	beq.n	81082a6 <_scanf_float+0x272>
 81081fa:	2d01      	cmp	r5, #1
 81081fc:	d002      	beq.n	8108204 <_scanf_float+0x1d0>
 81081fe:	2d04      	cmp	r5, #4
 8108200:	f47f af48 	bne.w	8108094 <_scanf_float+0x60>
 8108204:	3501      	adds	r5, #1
 8108206:	b2ed      	uxtb	r5, r5
 8108208:	e7d8      	b.n	81081bc <_scanf_float+0x188>
 810820a:	f1ba 0f01 	cmp.w	sl, #1
 810820e:	f47f af41 	bne.w	8108094 <_scanf_float+0x60>
 8108212:	f04f 0a02 	mov.w	sl, #2
 8108216:	e7d1      	b.n	81081bc <_scanf_float+0x188>
 8108218:	b97d      	cbnz	r5, 810823a <_scanf_float+0x206>
 810821a:	f1b9 0f00 	cmp.w	r9, #0
 810821e:	f47f af3c 	bne.w	810809a <_scanf_float+0x66>
 8108222:	6822      	ldr	r2, [r4, #0]
 8108224:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108228:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810822c:	f47f af39 	bne.w	81080a2 <_scanf_float+0x6e>
 8108230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108234:	6022      	str	r2, [r4, #0]
 8108236:	2501      	movs	r5, #1
 8108238:	e7c0      	b.n	81081bc <_scanf_float+0x188>
 810823a:	2d03      	cmp	r5, #3
 810823c:	d0e2      	beq.n	8108204 <_scanf_float+0x1d0>
 810823e:	2d05      	cmp	r5, #5
 8108240:	e7de      	b.n	8108200 <_scanf_float+0x1cc>
 8108242:	2d02      	cmp	r5, #2
 8108244:	f47f af26 	bne.w	8108094 <_scanf_float+0x60>
 8108248:	2503      	movs	r5, #3
 810824a:	e7b7      	b.n	81081bc <_scanf_float+0x188>
 810824c:	2d06      	cmp	r5, #6
 810824e:	f47f af21 	bne.w	8108094 <_scanf_float+0x60>
 8108252:	2507      	movs	r5, #7
 8108254:	e7b2      	b.n	81081bc <_scanf_float+0x188>
 8108256:	6822      	ldr	r2, [r4, #0]
 8108258:	0591      	lsls	r1, r2, #22
 810825a:	f57f af1b 	bpl.w	8108094 <_scanf_float+0x60>
 810825e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8108262:	6022      	str	r2, [r4, #0]
 8108264:	f8cd 9004 	str.w	r9, [sp, #4]
 8108268:	e7a8      	b.n	81081bc <_scanf_float+0x188>
 810826a:	6822      	ldr	r2, [r4, #0]
 810826c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8108270:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108274:	d006      	beq.n	8108284 <_scanf_float+0x250>
 8108276:	0550      	lsls	r0, r2, #21
 8108278:	f57f af0c 	bpl.w	8108094 <_scanf_float+0x60>
 810827c:	f1b9 0f00 	cmp.w	r9, #0
 8108280:	f43f af0f 	beq.w	81080a2 <_scanf_float+0x6e>
 8108284:	0591      	lsls	r1, r2, #22
 8108286:	bf58      	it	pl
 8108288:	9901      	ldrpl	r1, [sp, #4]
 810828a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810828e:	bf58      	it	pl
 8108290:	eba9 0101 	subpl.w	r1, r9, r1
 8108294:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8108298:	bf58      	it	pl
 810829a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810829e:	6022      	str	r2, [r4, #0]
 81082a0:	f04f 0900 	mov.w	r9, #0
 81082a4:	e78a      	b.n	81081bc <_scanf_float+0x188>
 81082a6:	f04f 0a03 	mov.w	sl, #3
 81082aa:	e787      	b.n	81081bc <_scanf_float+0x188>
 81082ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81082b0:	4639      	mov	r1, r7
 81082b2:	4640      	mov	r0, r8
 81082b4:	4798      	blx	r3
 81082b6:	2800      	cmp	r0, #0
 81082b8:	f43f aedf 	beq.w	810807a <_scanf_float+0x46>
 81082bc:	e6ea      	b.n	8108094 <_scanf_float+0x60>
 81082be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81082c6:	463a      	mov	r2, r7
 81082c8:	4640      	mov	r0, r8
 81082ca:	4798      	blx	r3
 81082cc:	6923      	ldr	r3, [r4, #16]
 81082ce:	3b01      	subs	r3, #1
 81082d0:	6123      	str	r3, [r4, #16]
 81082d2:	e6ec      	b.n	81080ae <_scanf_float+0x7a>
 81082d4:	1e6b      	subs	r3, r5, #1
 81082d6:	2b06      	cmp	r3, #6
 81082d8:	d825      	bhi.n	8108326 <_scanf_float+0x2f2>
 81082da:	2d02      	cmp	r5, #2
 81082dc:	d836      	bhi.n	810834c <_scanf_float+0x318>
 81082de:	455e      	cmp	r6, fp
 81082e0:	f67f aee8 	bls.w	81080b4 <_scanf_float+0x80>
 81082e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81082ec:	463a      	mov	r2, r7
 81082ee:	4640      	mov	r0, r8
 81082f0:	4798      	blx	r3
 81082f2:	6923      	ldr	r3, [r4, #16]
 81082f4:	3b01      	subs	r3, #1
 81082f6:	6123      	str	r3, [r4, #16]
 81082f8:	e7f1      	b.n	81082de <_scanf_float+0x2aa>
 81082fa:	9802      	ldr	r0, [sp, #8]
 81082fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108300:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8108304:	9002      	str	r0, [sp, #8]
 8108306:	463a      	mov	r2, r7
 8108308:	4640      	mov	r0, r8
 810830a:	4798      	blx	r3
 810830c:	6923      	ldr	r3, [r4, #16]
 810830e:	3b01      	subs	r3, #1
 8108310:	6123      	str	r3, [r4, #16]
 8108312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108316:	fa5f fa8a 	uxtb.w	sl, sl
 810831a:	f1ba 0f02 	cmp.w	sl, #2
 810831e:	d1ec      	bne.n	81082fa <_scanf_float+0x2c6>
 8108320:	3d03      	subs	r5, #3
 8108322:	b2ed      	uxtb	r5, r5
 8108324:	1b76      	subs	r6, r6, r5
 8108326:	6823      	ldr	r3, [r4, #0]
 8108328:	05da      	lsls	r2, r3, #23
 810832a:	d52f      	bpl.n	810838c <_scanf_float+0x358>
 810832c:	055b      	lsls	r3, r3, #21
 810832e:	d510      	bpl.n	8108352 <_scanf_float+0x31e>
 8108330:	455e      	cmp	r6, fp
 8108332:	f67f aebf 	bls.w	81080b4 <_scanf_float+0x80>
 8108336:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810833a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810833e:	463a      	mov	r2, r7
 8108340:	4640      	mov	r0, r8
 8108342:	4798      	blx	r3
 8108344:	6923      	ldr	r3, [r4, #16]
 8108346:	3b01      	subs	r3, #1
 8108348:	6123      	str	r3, [r4, #16]
 810834a:	e7f1      	b.n	8108330 <_scanf_float+0x2fc>
 810834c:	46aa      	mov	sl, r5
 810834e:	9602      	str	r6, [sp, #8]
 8108350:	e7df      	b.n	8108312 <_scanf_float+0x2de>
 8108352:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8108356:	6923      	ldr	r3, [r4, #16]
 8108358:	2965      	cmp	r1, #101	; 0x65
 810835a:	f103 33ff 	add.w	r3, r3, #4294967295
 810835e:	f106 35ff 	add.w	r5, r6, #4294967295
 8108362:	6123      	str	r3, [r4, #16]
 8108364:	d00c      	beq.n	8108380 <_scanf_float+0x34c>
 8108366:	2945      	cmp	r1, #69	; 0x45
 8108368:	d00a      	beq.n	8108380 <_scanf_float+0x34c>
 810836a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810836e:	463a      	mov	r2, r7
 8108370:	4640      	mov	r0, r8
 8108372:	4798      	blx	r3
 8108374:	6923      	ldr	r3, [r4, #16]
 8108376:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810837a:	3b01      	subs	r3, #1
 810837c:	1eb5      	subs	r5, r6, #2
 810837e:	6123      	str	r3, [r4, #16]
 8108380:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108384:	463a      	mov	r2, r7
 8108386:	4640      	mov	r0, r8
 8108388:	4798      	blx	r3
 810838a:	462e      	mov	r6, r5
 810838c:	6825      	ldr	r5, [r4, #0]
 810838e:	f015 0510 	ands.w	r5, r5, #16
 8108392:	d158      	bne.n	8108446 <_scanf_float+0x412>
 8108394:	7035      	strb	r5, [r6, #0]
 8108396:	6823      	ldr	r3, [r4, #0]
 8108398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810839c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81083a0:	d11c      	bne.n	81083dc <_scanf_float+0x3a8>
 81083a2:	9b01      	ldr	r3, [sp, #4]
 81083a4:	454b      	cmp	r3, r9
 81083a6:	eba3 0209 	sub.w	r2, r3, r9
 81083aa:	d124      	bne.n	81083f6 <_scanf_float+0x3c2>
 81083ac:	2200      	movs	r2, #0
 81083ae:	4659      	mov	r1, fp
 81083b0:	4640      	mov	r0, r8
 81083b2:	f000 fed3 	bl	810915c <_strtod_r>
 81083b6:	9b03      	ldr	r3, [sp, #12]
 81083b8:	6821      	ldr	r1, [r4, #0]
 81083ba:	681b      	ldr	r3, [r3, #0]
 81083bc:	f011 0f02 	tst.w	r1, #2
 81083c0:	ec57 6b10 	vmov	r6, r7, d0
 81083c4:	f103 0204 	add.w	r2, r3, #4
 81083c8:	d020      	beq.n	810840c <_scanf_float+0x3d8>
 81083ca:	9903      	ldr	r1, [sp, #12]
 81083cc:	600a      	str	r2, [r1, #0]
 81083ce:	681b      	ldr	r3, [r3, #0]
 81083d0:	e9c3 6700 	strd	r6, r7, [r3]
 81083d4:	68e3      	ldr	r3, [r4, #12]
 81083d6:	3301      	adds	r3, #1
 81083d8:	60e3      	str	r3, [r4, #12]
 81083da:	e66c      	b.n	81080b6 <_scanf_float+0x82>
 81083dc:	9b04      	ldr	r3, [sp, #16]
 81083de:	2b00      	cmp	r3, #0
 81083e0:	d0e4      	beq.n	81083ac <_scanf_float+0x378>
 81083e2:	9905      	ldr	r1, [sp, #20]
 81083e4:	230a      	movs	r3, #10
 81083e6:	462a      	mov	r2, r5
 81083e8:	3101      	adds	r1, #1
 81083ea:	4640      	mov	r0, r8
 81083ec:	f000 ff40 	bl	8109270 <_strtol_r>
 81083f0:	9b04      	ldr	r3, [sp, #16]
 81083f2:	9e05      	ldr	r6, [sp, #20]
 81083f4:	1ac2      	subs	r2, r0, r3
 81083f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81083fa:	429e      	cmp	r6, r3
 81083fc:	bf28      	it	cs
 81083fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8108402:	4912      	ldr	r1, [pc, #72]	; (810844c <_scanf_float+0x418>)
 8108404:	4630      	mov	r0, r6
 8108406:	f000 f83b 	bl	8108480 <siprintf>
 810840a:	e7cf      	b.n	81083ac <_scanf_float+0x378>
 810840c:	f011 0f04 	tst.w	r1, #4
 8108410:	9903      	ldr	r1, [sp, #12]
 8108412:	600a      	str	r2, [r1, #0]
 8108414:	d1db      	bne.n	81083ce <_scanf_float+0x39a>
 8108416:	f8d3 8000 	ldr.w	r8, [r3]
 810841a:	ee10 2a10 	vmov	r2, s0
 810841e:	ee10 0a10 	vmov	r0, s0
 8108422:	463b      	mov	r3, r7
 8108424:	4639      	mov	r1, r7
 8108426:	f7f8 fc19 	bl	8100c5c <__aeabi_dcmpun>
 810842a:	b128      	cbz	r0, 8108438 <_scanf_float+0x404>
 810842c:	4808      	ldr	r0, [pc, #32]	; (8108450 <_scanf_float+0x41c>)
 810842e:	f000 f821 	bl	8108474 <nanf>
 8108432:	ed88 0a00 	vstr	s0, [r8]
 8108436:	e7cd      	b.n	81083d4 <_scanf_float+0x3a0>
 8108438:	4630      	mov	r0, r6
 810843a:	4639      	mov	r1, r7
 810843c:	f7f8 fc6c 	bl	8100d18 <__aeabi_d2f>
 8108440:	f8c8 0000 	str.w	r0, [r8]
 8108444:	e7c6      	b.n	81083d4 <_scanf_float+0x3a0>
 8108446:	2500      	movs	r5, #0
 8108448:	e635      	b.n	81080b6 <_scanf_float+0x82>
 810844a:	bf00      	nop
 810844c:	0810be2d 	.word	0x0810be2d
 8108450:	0810bde1 	.word	0x0810bde1

08108454 <_sbrk_r>:
 8108454:	b538      	push	{r3, r4, r5, lr}
 8108456:	4d06      	ldr	r5, [pc, #24]	; (8108470 <_sbrk_r+0x1c>)
 8108458:	2300      	movs	r3, #0
 810845a:	4604      	mov	r4, r0
 810845c:	4608      	mov	r0, r1
 810845e:	602b      	str	r3, [r5, #0]
 8108460:	f7f9 f948 	bl	81016f4 <_sbrk>
 8108464:	1c43      	adds	r3, r0, #1
 8108466:	d102      	bne.n	810846e <_sbrk_r+0x1a>
 8108468:	682b      	ldr	r3, [r5, #0]
 810846a:	b103      	cbz	r3, 810846e <_sbrk_r+0x1a>
 810846c:	6023      	str	r3, [r4, #0]
 810846e:	bd38      	pop	{r3, r4, r5, pc}
 8108470:	10000528 	.word	0x10000528

08108474 <nanf>:
 8108474:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810847c <nanf+0x8>
 8108478:	4770      	bx	lr
 810847a:	bf00      	nop
 810847c:	7fc00000 	.word	0x7fc00000

08108480 <siprintf>:
 8108480:	b40e      	push	{r1, r2, r3}
 8108482:	b500      	push	{lr}
 8108484:	b09c      	sub	sp, #112	; 0x70
 8108486:	ab1d      	add	r3, sp, #116	; 0x74
 8108488:	9002      	str	r0, [sp, #8]
 810848a:	9006      	str	r0, [sp, #24]
 810848c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108490:	4809      	ldr	r0, [pc, #36]	; (81084b8 <siprintf+0x38>)
 8108492:	9107      	str	r1, [sp, #28]
 8108494:	9104      	str	r1, [sp, #16]
 8108496:	4909      	ldr	r1, [pc, #36]	; (81084bc <siprintf+0x3c>)
 8108498:	f853 2b04 	ldr.w	r2, [r3], #4
 810849c:	9105      	str	r1, [sp, #20]
 810849e:	6800      	ldr	r0, [r0, #0]
 81084a0:	9301      	str	r3, [sp, #4]
 81084a2:	a902      	add	r1, sp, #8
 81084a4:	f003 f93a 	bl	810b71c <_svfiprintf_r>
 81084a8:	9b02      	ldr	r3, [sp, #8]
 81084aa:	2200      	movs	r2, #0
 81084ac:	701a      	strb	r2, [r3, #0]
 81084ae:	b01c      	add	sp, #112	; 0x70
 81084b0:	f85d eb04 	ldr.w	lr, [sp], #4
 81084b4:	b003      	add	sp, #12
 81084b6:	4770      	bx	lr
 81084b8:	100000b8 	.word	0x100000b8
 81084bc:	ffff0208 	.word	0xffff0208

081084c0 <strncmp>:
 81084c0:	b510      	push	{r4, lr}
 81084c2:	b16a      	cbz	r2, 81084e0 <strncmp+0x20>
 81084c4:	3901      	subs	r1, #1
 81084c6:	1884      	adds	r4, r0, r2
 81084c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 81084cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 81084d0:	4293      	cmp	r3, r2
 81084d2:	d103      	bne.n	81084dc <strncmp+0x1c>
 81084d4:	42a0      	cmp	r0, r4
 81084d6:	d001      	beq.n	81084dc <strncmp+0x1c>
 81084d8:	2b00      	cmp	r3, #0
 81084da:	d1f5      	bne.n	81084c8 <strncmp+0x8>
 81084dc:	1a98      	subs	r0, r3, r2
 81084de:	bd10      	pop	{r4, pc}
 81084e0:	4610      	mov	r0, r2
 81084e2:	e7fc      	b.n	81084de <strncmp+0x1e>

081084e4 <strncpy>:
 81084e4:	b510      	push	{r4, lr}
 81084e6:	3901      	subs	r1, #1
 81084e8:	4603      	mov	r3, r0
 81084ea:	b132      	cbz	r2, 81084fa <strncpy+0x16>
 81084ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81084f0:	f803 4b01 	strb.w	r4, [r3], #1
 81084f4:	3a01      	subs	r2, #1
 81084f6:	2c00      	cmp	r4, #0
 81084f8:	d1f7      	bne.n	81084ea <strncpy+0x6>
 81084fa:	441a      	add	r2, r3
 81084fc:	2100      	movs	r1, #0
 81084fe:	4293      	cmp	r3, r2
 8108500:	d100      	bne.n	8108504 <strncpy+0x20>
 8108502:	bd10      	pop	{r4, pc}
 8108504:	f803 1b01 	strb.w	r1, [r3], #1
 8108508:	e7f9      	b.n	81084fe <strncpy+0x1a>

0810850a <sulp>:
 810850a:	b570      	push	{r4, r5, r6, lr}
 810850c:	4604      	mov	r4, r0
 810850e:	460d      	mov	r5, r1
 8108510:	ec45 4b10 	vmov	d0, r4, r5
 8108514:	4616      	mov	r6, r2
 8108516:	f002 ff21 	bl	810b35c <__ulp>
 810851a:	ec51 0b10 	vmov	r0, r1, d0
 810851e:	b17e      	cbz	r6, 8108540 <sulp+0x36>
 8108520:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8108524:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108528:	2b00      	cmp	r3, #0
 810852a:	dd09      	ble.n	8108540 <sulp+0x36>
 810852c:	051b      	lsls	r3, r3, #20
 810852e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8108532:	2400      	movs	r4, #0
 8108534:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8108538:	4622      	mov	r2, r4
 810853a:	462b      	mov	r3, r5
 810853c:	f7f8 f8f4 	bl	8100728 <__aeabi_dmul>
 8108540:	bd70      	pop	{r4, r5, r6, pc}
 8108542:	0000      	movs	r0, r0
 8108544:	0000      	movs	r0, r0
	...

08108548 <_strtod_l>:
 8108548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810854c:	b0a3      	sub	sp, #140	; 0x8c
 810854e:	461f      	mov	r7, r3
 8108550:	2300      	movs	r3, #0
 8108552:	931e      	str	r3, [sp, #120]	; 0x78
 8108554:	4ba4      	ldr	r3, [pc, #656]	; (81087e8 <_strtod_l+0x2a0>)
 8108556:	9219      	str	r2, [sp, #100]	; 0x64
 8108558:	681b      	ldr	r3, [r3, #0]
 810855a:	9307      	str	r3, [sp, #28]
 810855c:	4604      	mov	r4, r0
 810855e:	4618      	mov	r0, r3
 8108560:	4688      	mov	r8, r1
 8108562:	f7f7 fec7 	bl	81002f4 <strlen>
 8108566:	f04f 0a00 	mov.w	sl, #0
 810856a:	4605      	mov	r5, r0
 810856c:	f04f 0b00 	mov.w	fp, #0
 8108570:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108576:	781a      	ldrb	r2, [r3, #0]
 8108578:	2a2b      	cmp	r2, #43	; 0x2b
 810857a:	d04c      	beq.n	8108616 <_strtod_l+0xce>
 810857c:	d839      	bhi.n	81085f2 <_strtod_l+0xaa>
 810857e:	2a0d      	cmp	r2, #13
 8108580:	d832      	bhi.n	81085e8 <_strtod_l+0xa0>
 8108582:	2a08      	cmp	r2, #8
 8108584:	d832      	bhi.n	81085ec <_strtod_l+0xa4>
 8108586:	2a00      	cmp	r2, #0
 8108588:	d03c      	beq.n	8108604 <_strtod_l+0xbc>
 810858a:	2300      	movs	r3, #0
 810858c:	930e      	str	r3, [sp, #56]	; 0x38
 810858e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8108590:	7833      	ldrb	r3, [r6, #0]
 8108592:	2b30      	cmp	r3, #48	; 0x30
 8108594:	f040 80b4 	bne.w	8108700 <_strtod_l+0x1b8>
 8108598:	7873      	ldrb	r3, [r6, #1]
 810859a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810859e:	2b58      	cmp	r3, #88	; 0x58
 81085a0:	d16c      	bne.n	810867c <_strtod_l+0x134>
 81085a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81085a4:	9301      	str	r3, [sp, #4]
 81085a6:	ab1e      	add	r3, sp, #120	; 0x78
 81085a8:	9702      	str	r7, [sp, #8]
 81085aa:	9300      	str	r3, [sp, #0]
 81085ac:	4a8f      	ldr	r2, [pc, #572]	; (81087ec <_strtod_l+0x2a4>)
 81085ae:	ab1f      	add	r3, sp, #124	; 0x7c
 81085b0:	a91d      	add	r1, sp, #116	; 0x74
 81085b2:	4620      	mov	r0, r4
 81085b4:	f001 ffba 	bl	810a52c <__gethex>
 81085b8:	f010 0707 	ands.w	r7, r0, #7
 81085bc:	4605      	mov	r5, r0
 81085be:	d005      	beq.n	81085cc <_strtod_l+0x84>
 81085c0:	2f06      	cmp	r7, #6
 81085c2:	d12a      	bne.n	810861a <_strtod_l+0xd2>
 81085c4:	3601      	adds	r6, #1
 81085c6:	2300      	movs	r3, #0
 81085c8:	961d      	str	r6, [sp, #116]	; 0x74
 81085ca:	930e      	str	r3, [sp, #56]	; 0x38
 81085cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81085ce:	2b00      	cmp	r3, #0
 81085d0:	f040 8596 	bne.w	8109100 <_strtod_l+0xbb8>
 81085d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81085d6:	b1db      	cbz	r3, 8108610 <_strtod_l+0xc8>
 81085d8:	4652      	mov	r2, sl
 81085da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 81085de:	ec43 2b10 	vmov	d0, r2, r3
 81085e2:	b023      	add	sp, #140	; 0x8c
 81085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81085e8:	2a20      	cmp	r2, #32
 81085ea:	d1ce      	bne.n	810858a <_strtod_l+0x42>
 81085ec:	3301      	adds	r3, #1
 81085ee:	931d      	str	r3, [sp, #116]	; 0x74
 81085f0:	e7c0      	b.n	8108574 <_strtod_l+0x2c>
 81085f2:	2a2d      	cmp	r2, #45	; 0x2d
 81085f4:	d1c9      	bne.n	810858a <_strtod_l+0x42>
 81085f6:	2201      	movs	r2, #1
 81085f8:	920e      	str	r2, [sp, #56]	; 0x38
 81085fa:	1c5a      	adds	r2, r3, #1
 81085fc:	921d      	str	r2, [sp, #116]	; 0x74
 81085fe:	785b      	ldrb	r3, [r3, #1]
 8108600:	2b00      	cmp	r3, #0
 8108602:	d1c4      	bne.n	810858e <_strtod_l+0x46>
 8108604:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108606:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810860a:	2b00      	cmp	r3, #0
 810860c:	f040 8576 	bne.w	81090fc <_strtod_l+0xbb4>
 8108610:	4652      	mov	r2, sl
 8108612:	465b      	mov	r3, fp
 8108614:	e7e3      	b.n	81085de <_strtod_l+0x96>
 8108616:	2200      	movs	r2, #0
 8108618:	e7ee      	b.n	81085f8 <_strtod_l+0xb0>
 810861a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810861c:	b13a      	cbz	r2, 810862e <_strtod_l+0xe6>
 810861e:	2135      	movs	r1, #53	; 0x35
 8108620:	a820      	add	r0, sp, #128	; 0x80
 8108622:	f002 ffa6 	bl	810b572 <__copybits>
 8108626:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108628:	4620      	mov	r0, r4
 810862a:	f002 fb6b 	bl	810ad04 <_Bfree>
 810862e:	3f01      	subs	r7, #1
 8108630:	2f05      	cmp	r7, #5
 8108632:	d807      	bhi.n	8108644 <_strtod_l+0xfc>
 8108634:	e8df f007 	tbb	[pc, r7]
 8108638:	1d180b0e 	.word	0x1d180b0e
 810863c:	030e      	.short	0x030e
 810863e:	f04f 0b00 	mov.w	fp, #0
 8108642:	46da      	mov	sl, fp
 8108644:	0728      	lsls	r0, r5, #28
 8108646:	d5c1      	bpl.n	81085cc <_strtod_l+0x84>
 8108648:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810864c:	e7be      	b.n	81085cc <_strtod_l+0x84>
 810864e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8108652:	e7f7      	b.n	8108644 <_strtod_l+0xfc>
 8108654:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8108658:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 810865a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810865e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8108662:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8108666:	e7ed      	b.n	8108644 <_strtod_l+0xfc>
 8108668:	f8df b184 	ldr.w	fp, [pc, #388]	; 81087f0 <_strtod_l+0x2a8>
 810866c:	f04f 0a00 	mov.w	sl, #0
 8108670:	e7e8      	b.n	8108644 <_strtod_l+0xfc>
 8108672:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8108676:	f04f 3aff 	mov.w	sl, #4294967295
 810867a:	e7e3      	b.n	8108644 <_strtod_l+0xfc>
 810867c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810867e:	1c5a      	adds	r2, r3, #1
 8108680:	921d      	str	r2, [sp, #116]	; 0x74
 8108682:	785b      	ldrb	r3, [r3, #1]
 8108684:	2b30      	cmp	r3, #48	; 0x30
 8108686:	d0f9      	beq.n	810867c <_strtod_l+0x134>
 8108688:	2b00      	cmp	r3, #0
 810868a:	d09f      	beq.n	81085cc <_strtod_l+0x84>
 810868c:	2301      	movs	r3, #1
 810868e:	f04f 0900 	mov.w	r9, #0
 8108692:	9304      	str	r3, [sp, #16]
 8108694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108696:	930a      	str	r3, [sp, #40]	; 0x28
 8108698:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810869c:	464f      	mov	r7, r9
 810869e:	220a      	movs	r2, #10
 81086a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 81086a2:	7806      	ldrb	r6, [r0, #0]
 81086a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 81086a8:	b2d9      	uxtb	r1, r3
 81086aa:	2909      	cmp	r1, #9
 81086ac:	d92a      	bls.n	8108704 <_strtod_l+0x1bc>
 81086ae:	9907      	ldr	r1, [sp, #28]
 81086b0:	462a      	mov	r2, r5
 81086b2:	f7ff ff05 	bl	81084c0 <strncmp>
 81086b6:	b398      	cbz	r0, 8108720 <_strtod_l+0x1d8>
 81086b8:	2000      	movs	r0, #0
 81086ba:	4633      	mov	r3, r6
 81086bc:	463d      	mov	r5, r7
 81086be:	9007      	str	r0, [sp, #28]
 81086c0:	4602      	mov	r2, r0
 81086c2:	2b65      	cmp	r3, #101	; 0x65
 81086c4:	d001      	beq.n	81086ca <_strtod_l+0x182>
 81086c6:	2b45      	cmp	r3, #69	; 0x45
 81086c8:	d118      	bne.n	81086fc <_strtod_l+0x1b4>
 81086ca:	b91d      	cbnz	r5, 81086d4 <_strtod_l+0x18c>
 81086cc:	9b04      	ldr	r3, [sp, #16]
 81086ce:	4303      	orrs	r3, r0
 81086d0:	d098      	beq.n	8108604 <_strtod_l+0xbc>
 81086d2:	2500      	movs	r5, #0
 81086d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 81086d8:	f108 0301 	add.w	r3, r8, #1
 81086dc:	931d      	str	r3, [sp, #116]	; 0x74
 81086de:	f898 3001 	ldrb.w	r3, [r8, #1]
 81086e2:	2b2b      	cmp	r3, #43	; 0x2b
 81086e4:	d075      	beq.n	81087d2 <_strtod_l+0x28a>
 81086e6:	2b2d      	cmp	r3, #45	; 0x2d
 81086e8:	d07b      	beq.n	81087e2 <_strtod_l+0x29a>
 81086ea:	f04f 0c00 	mov.w	ip, #0
 81086ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 81086f2:	2909      	cmp	r1, #9
 81086f4:	f240 8082 	bls.w	81087fc <_strtod_l+0x2b4>
 81086f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81086fc:	2600      	movs	r6, #0
 81086fe:	e09d      	b.n	810883c <_strtod_l+0x2f4>
 8108700:	2300      	movs	r3, #0
 8108702:	e7c4      	b.n	810868e <_strtod_l+0x146>
 8108704:	2f08      	cmp	r7, #8
 8108706:	bfd8      	it	le
 8108708:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810870a:	f100 0001 	add.w	r0, r0, #1
 810870e:	bfda      	itte	le
 8108710:	fb02 3301 	mlale	r3, r2, r1, r3
 8108714:	9309      	strle	r3, [sp, #36]	; 0x24
 8108716:	fb02 3909 	mlagt	r9, r2, r9, r3
 810871a:	3701      	adds	r7, #1
 810871c:	901d      	str	r0, [sp, #116]	; 0x74
 810871e:	e7bf      	b.n	81086a0 <_strtod_l+0x158>
 8108720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108722:	195a      	adds	r2, r3, r5
 8108724:	921d      	str	r2, [sp, #116]	; 0x74
 8108726:	5d5b      	ldrb	r3, [r3, r5]
 8108728:	2f00      	cmp	r7, #0
 810872a:	d037      	beq.n	810879c <_strtod_l+0x254>
 810872c:	9007      	str	r0, [sp, #28]
 810872e:	463d      	mov	r5, r7
 8108730:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8108734:	2a09      	cmp	r2, #9
 8108736:	d912      	bls.n	810875e <_strtod_l+0x216>
 8108738:	2201      	movs	r2, #1
 810873a:	e7c2      	b.n	81086c2 <_strtod_l+0x17a>
 810873c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810873e:	1c5a      	adds	r2, r3, #1
 8108740:	921d      	str	r2, [sp, #116]	; 0x74
 8108742:	785b      	ldrb	r3, [r3, #1]
 8108744:	3001      	adds	r0, #1
 8108746:	2b30      	cmp	r3, #48	; 0x30
 8108748:	d0f8      	beq.n	810873c <_strtod_l+0x1f4>
 810874a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 810874e:	2a08      	cmp	r2, #8
 8108750:	f200 84db 	bhi.w	810910a <_strtod_l+0xbc2>
 8108754:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8108756:	9007      	str	r0, [sp, #28]
 8108758:	2000      	movs	r0, #0
 810875a:	920a      	str	r2, [sp, #40]	; 0x28
 810875c:	4605      	mov	r5, r0
 810875e:	3b30      	subs	r3, #48	; 0x30
 8108760:	f100 0201 	add.w	r2, r0, #1
 8108764:	d014      	beq.n	8108790 <_strtod_l+0x248>
 8108766:	9907      	ldr	r1, [sp, #28]
 8108768:	4411      	add	r1, r2
 810876a:	9107      	str	r1, [sp, #28]
 810876c:	462a      	mov	r2, r5
 810876e:	eb00 0e05 	add.w	lr, r0, r5
 8108772:	210a      	movs	r1, #10
 8108774:	4572      	cmp	r2, lr
 8108776:	d113      	bne.n	81087a0 <_strtod_l+0x258>
 8108778:	182a      	adds	r2, r5, r0
 810877a:	2a08      	cmp	r2, #8
 810877c:	f105 0501 	add.w	r5, r5, #1
 8108780:	4405      	add	r5, r0
 8108782:	dc1c      	bgt.n	81087be <_strtod_l+0x276>
 8108784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108786:	220a      	movs	r2, #10
 8108788:	fb02 3301 	mla	r3, r2, r1, r3
 810878c:	9309      	str	r3, [sp, #36]	; 0x24
 810878e:	2200      	movs	r2, #0
 8108790:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108792:	1c59      	adds	r1, r3, #1
 8108794:	911d      	str	r1, [sp, #116]	; 0x74
 8108796:	785b      	ldrb	r3, [r3, #1]
 8108798:	4610      	mov	r0, r2
 810879a:	e7c9      	b.n	8108730 <_strtod_l+0x1e8>
 810879c:	4638      	mov	r0, r7
 810879e:	e7d2      	b.n	8108746 <_strtod_l+0x1fe>
 81087a0:	2a08      	cmp	r2, #8
 81087a2:	dc04      	bgt.n	81087ae <_strtod_l+0x266>
 81087a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 81087a6:	434e      	muls	r6, r1
 81087a8:	9609      	str	r6, [sp, #36]	; 0x24
 81087aa:	3201      	adds	r2, #1
 81087ac:	e7e2      	b.n	8108774 <_strtod_l+0x22c>
 81087ae:	f102 0c01 	add.w	ip, r2, #1
 81087b2:	f1bc 0f10 	cmp.w	ip, #16
 81087b6:	bfd8      	it	le
 81087b8:	fb01 f909 	mulle.w	r9, r1, r9
 81087bc:	e7f5      	b.n	81087aa <_strtod_l+0x262>
 81087be:	2d10      	cmp	r5, #16
 81087c0:	bfdc      	itt	le
 81087c2:	220a      	movle	r2, #10
 81087c4:	fb02 3909 	mlale	r9, r2, r9, r3
 81087c8:	e7e1      	b.n	810878e <_strtod_l+0x246>
 81087ca:	2300      	movs	r3, #0
 81087cc:	9307      	str	r3, [sp, #28]
 81087ce:	2201      	movs	r2, #1
 81087d0:	e77c      	b.n	81086cc <_strtod_l+0x184>
 81087d2:	f04f 0c00 	mov.w	ip, #0
 81087d6:	f108 0302 	add.w	r3, r8, #2
 81087da:	931d      	str	r3, [sp, #116]	; 0x74
 81087dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 81087e0:	e785      	b.n	81086ee <_strtod_l+0x1a6>
 81087e2:	f04f 0c01 	mov.w	ip, #1
 81087e6:	e7f6      	b.n	81087d6 <_strtod_l+0x28e>
 81087e8:	0810c0ec 	.word	0x0810c0ec
 81087ec:	0810be34 	.word	0x0810be34
 81087f0:	7ff00000 	.word	0x7ff00000
 81087f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81087f6:	1c59      	adds	r1, r3, #1
 81087f8:	911d      	str	r1, [sp, #116]	; 0x74
 81087fa:	785b      	ldrb	r3, [r3, #1]
 81087fc:	2b30      	cmp	r3, #48	; 0x30
 81087fe:	d0f9      	beq.n	81087f4 <_strtod_l+0x2ac>
 8108800:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8108804:	2908      	cmp	r1, #8
 8108806:	f63f af79 	bhi.w	81086fc <_strtod_l+0x1b4>
 810880a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 810880e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108810:	9308      	str	r3, [sp, #32]
 8108812:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108814:	1c59      	adds	r1, r3, #1
 8108816:	911d      	str	r1, [sp, #116]	; 0x74
 8108818:	785b      	ldrb	r3, [r3, #1]
 810881a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 810881e:	2e09      	cmp	r6, #9
 8108820:	d937      	bls.n	8108892 <_strtod_l+0x34a>
 8108822:	9e08      	ldr	r6, [sp, #32]
 8108824:	1b89      	subs	r1, r1, r6
 8108826:	2908      	cmp	r1, #8
 8108828:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810882c:	dc02      	bgt.n	8108834 <_strtod_l+0x2ec>
 810882e:	4576      	cmp	r6, lr
 8108830:	bfa8      	it	ge
 8108832:	4676      	movge	r6, lr
 8108834:	f1bc 0f00 	cmp.w	ip, #0
 8108838:	d000      	beq.n	810883c <_strtod_l+0x2f4>
 810883a:	4276      	negs	r6, r6
 810883c:	2d00      	cmp	r5, #0
 810883e:	d14f      	bne.n	81088e0 <_strtod_l+0x398>
 8108840:	9904      	ldr	r1, [sp, #16]
 8108842:	4301      	orrs	r1, r0
 8108844:	f47f aec2 	bne.w	81085cc <_strtod_l+0x84>
 8108848:	2a00      	cmp	r2, #0
 810884a:	f47f aedb 	bne.w	8108604 <_strtod_l+0xbc>
 810884e:	2b69      	cmp	r3, #105	; 0x69
 8108850:	d027      	beq.n	81088a2 <_strtod_l+0x35a>
 8108852:	dc24      	bgt.n	810889e <_strtod_l+0x356>
 8108854:	2b49      	cmp	r3, #73	; 0x49
 8108856:	d024      	beq.n	81088a2 <_strtod_l+0x35a>
 8108858:	2b4e      	cmp	r3, #78	; 0x4e
 810885a:	f47f aed3 	bne.w	8108604 <_strtod_l+0xbc>
 810885e:	499e      	ldr	r1, [pc, #632]	; (8108ad8 <_strtod_l+0x590>)
 8108860:	a81d      	add	r0, sp, #116	; 0x74
 8108862:	f002 f8bb 	bl	810a9dc <__match>
 8108866:	2800      	cmp	r0, #0
 8108868:	f43f aecc 	beq.w	8108604 <_strtod_l+0xbc>
 810886c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810886e:	781b      	ldrb	r3, [r3, #0]
 8108870:	2b28      	cmp	r3, #40	; 0x28
 8108872:	d12d      	bne.n	81088d0 <_strtod_l+0x388>
 8108874:	4999      	ldr	r1, [pc, #612]	; (8108adc <_strtod_l+0x594>)
 8108876:	aa20      	add	r2, sp, #128	; 0x80
 8108878:	a81d      	add	r0, sp, #116	; 0x74
 810887a:	f002 f8c3 	bl	810aa04 <__hexnan>
 810887e:	2805      	cmp	r0, #5
 8108880:	d126      	bne.n	81088d0 <_strtod_l+0x388>
 8108882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108884:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8108888:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810888c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108890:	e69c      	b.n	81085cc <_strtod_l+0x84>
 8108892:	210a      	movs	r1, #10
 8108894:	fb01 3e0e 	mla	lr, r1, lr, r3
 8108898:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810889c:	e7b9      	b.n	8108812 <_strtod_l+0x2ca>
 810889e:	2b6e      	cmp	r3, #110	; 0x6e
 81088a0:	e7db      	b.n	810885a <_strtod_l+0x312>
 81088a2:	498f      	ldr	r1, [pc, #572]	; (8108ae0 <_strtod_l+0x598>)
 81088a4:	a81d      	add	r0, sp, #116	; 0x74
 81088a6:	f002 f899 	bl	810a9dc <__match>
 81088aa:	2800      	cmp	r0, #0
 81088ac:	f43f aeaa 	beq.w	8108604 <_strtod_l+0xbc>
 81088b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81088b2:	498c      	ldr	r1, [pc, #560]	; (8108ae4 <_strtod_l+0x59c>)
 81088b4:	3b01      	subs	r3, #1
 81088b6:	a81d      	add	r0, sp, #116	; 0x74
 81088b8:	931d      	str	r3, [sp, #116]	; 0x74
 81088ba:	f002 f88f 	bl	810a9dc <__match>
 81088be:	b910      	cbnz	r0, 81088c6 <_strtod_l+0x37e>
 81088c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81088c2:	3301      	adds	r3, #1
 81088c4:	931d      	str	r3, [sp, #116]	; 0x74
 81088c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8108af4 <_strtod_l+0x5ac>
 81088ca:	f04f 0a00 	mov.w	sl, #0
 81088ce:	e67d      	b.n	81085cc <_strtod_l+0x84>
 81088d0:	4885      	ldr	r0, [pc, #532]	; (8108ae8 <_strtod_l+0x5a0>)
 81088d2:	f003 f825 	bl	810b920 <nan>
 81088d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 81088da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 81088de:	e675      	b.n	81085cc <_strtod_l+0x84>
 81088e0:	9b07      	ldr	r3, [sp, #28]
 81088e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 81088e4:	1af3      	subs	r3, r6, r3
 81088e6:	2f00      	cmp	r7, #0
 81088e8:	bf08      	it	eq
 81088ea:	462f      	moveq	r7, r5
 81088ec:	2d10      	cmp	r5, #16
 81088ee:	9308      	str	r3, [sp, #32]
 81088f0:	46a8      	mov	r8, r5
 81088f2:	bfa8      	it	ge
 81088f4:	f04f 0810 	movge.w	r8, #16
 81088f8:	f7f7 fe9c 	bl	8100634 <__aeabi_ui2d>
 81088fc:	2d09      	cmp	r5, #9
 81088fe:	4682      	mov	sl, r0
 8108900:	468b      	mov	fp, r1
 8108902:	dd13      	ble.n	810892c <_strtod_l+0x3e4>
 8108904:	4b79      	ldr	r3, [pc, #484]	; (8108aec <_strtod_l+0x5a4>)
 8108906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810890a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810890e:	f7f7 ff0b 	bl	8100728 <__aeabi_dmul>
 8108912:	4682      	mov	sl, r0
 8108914:	4648      	mov	r0, r9
 8108916:	468b      	mov	fp, r1
 8108918:	f7f7 fe8c 	bl	8100634 <__aeabi_ui2d>
 810891c:	4602      	mov	r2, r0
 810891e:	460b      	mov	r3, r1
 8108920:	4650      	mov	r0, sl
 8108922:	4659      	mov	r1, fp
 8108924:	f7f7 fd4a 	bl	81003bc <__adddf3>
 8108928:	4682      	mov	sl, r0
 810892a:	468b      	mov	fp, r1
 810892c:	2d0f      	cmp	r5, #15
 810892e:	dc38      	bgt.n	81089a2 <_strtod_l+0x45a>
 8108930:	9b08      	ldr	r3, [sp, #32]
 8108932:	2b00      	cmp	r3, #0
 8108934:	f43f ae4a 	beq.w	81085cc <_strtod_l+0x84>
 8108938:	dd24      	ble.n	8108984 <_strtod_l+0x43c>
 810893a:	2b16      	cmp	r3, #22
 810893c:	dc0b      	bgt.n	8108956 <_strtod_l+0x40e>
 810893e:	4d6b      	ldr	r5, [pc, #428]	; (8108aec <_strtod_l+0x5a4>)
 8108940:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8108944:	e9d5 0100 	ldrd	r0, r1, [r5]
 8108948:	4652      	mov	r2, sl
 810894a:	465b      	mov	r3, fp
 810894c:	f7f7 feec 	bl	8100728 <__aeabi_dmul>
 8108950:	4682      	mov	sl, r0
 8108952:	468b      	mov	fp, r1
 8108954:	e63a      	b.n	81085cc <_strtod_l+0x84>
 8108956:	9a08      	ldr	r2, [sp, #32]
 8108958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810895c:	4293      	cmp	r3, r2
 810895e:	db20      	blt.n	81089a2 <_strtod_l+0x45a>
 8108960:	4c62      	ldr	r4, [pc, #392]	; (8108aec <_strtod_l+0x5a4>)
 8108962:	f1c5 050f 	rsb	r5, r5, #15
 8108966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810896a:	4652      	mov	r2, sl
 810896c:	465b      	mov	r3, fp
 810896e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108972:	f7f7 fed9 	bl	8100728 <__aeabi_dmul>
 8108976:	9b08      	ldr	r3, [sp, #32]
 8108978:	1b5d      	subs	r5, r3, r5
 810897a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810897e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108982:	e7e3      	b.n	810894c <_strtod_l+0x404>
 8108984:	9b08      	ldr	r3, [sp, #32]
 8108986:	3316      	adds	r3, #22
 8108988:	db0b      	blt.n	81089a2 <_strtod_l+0x45a>
 810898a:	9b07      	ldr	r3, [sp, #28]
 810898c:	4a57      	ldr	r2, [pc, #348]	; (8108aec <_strtod_l+0x5a4>)
 810898e:	1b9e      	subs	r6, r3, r6
 8108990:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8108994:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108998:	4650      	mov	r0, sl
 810899a:	4659      	mov	r1, fp
 810899c:	f7f7 ffee 	bl	810097c <__aeabi_ddiv>
 81089a0:	e7d6      	b.n	8108950 <_strtod_l+0x408>
 81089a2:	9b08      	ldr	r3, [sp, #32]
 81089a4:	eba5 0808 	sub.w	r8, r5, r8
 81089a8:	4498      	add	r8, r3
 81089aa:	f1b8 0f00 	cmp.w	r8, #0
 81089ae:	dd71      	ble.n	8108a94 <_strtod_l+0x54c>
 81089b0:	f018 030f 	ands.w	r3, r8, #15
 81089b4:	d00a      	beq.n	81089cc <_strtod_l+0x484>
 81089b6:	494d      	ldr	r1, [pc, #308]	; (8108aec <_strtod_l+0x5a4>)
 81089b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81089bc:	4652      	mov	r2, sl
 81089be:	465b      	mov	r3, fp
 81089c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 81089c4:	f7f7 feb0 	bl	8100728 <__aeabi_dmul>
 81089c8:	4682      	mov	sl, r0
 81089ca:	468b      	mov	fp, r1
 81089cc:	f038 080f 	bics.w	r8, r8, #15
 81089d0:	d04d      	beq.n	8108a6e <_strtod_l+0x526>
 81089d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 81089d6:	dd22      	ble.n	8108a1e <_strtod_l+0x4d6>
 81089d8:	2500      	movs	r5, #0
 81089da:	462e      	mov	r6, r5
 81089dc:	9509      	str	r5, [sp, #36]	; 0x24
 81089de:	9507      	str	r5, [sp, #28]
 81089e0:	2322      	movs	r3, #34	; 0x22
 81089e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8108af4 <_strtod_l+0x5ac>
 81089e6:	6023      	str	r3, [r4, #0]
 81089e8:	f04f 0a00 	mov.w	sl, #0
 81089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81089ee:	2b00      	cmp	r3, #0
 81089f0:	f43f adec 	beq.w	81085cc <_strtod_l+0x84>
 81089f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 81089f6:	4620      	mov	r0, r4
 81089f8:	f002 f984 	bl	810ad04 <_Bfree>
 81089fc:	9907      	ldr	r1, [sp, #28]
 81089fe:	4620      	mov	r0, r4
 8108a00:	f002 f980 	bl	810ad04 <_Bfree>
 8108a04:	4631      	mov	r1, r6
 8108a06:	4620      	mov	r0, r4
 8108a08:	f002 f97c 	bl	810ad04 <_Bfree>
 8108a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108a0e:	4620      	mov	r0, r4
 8108a10:	f002 f978 	bl	810ad04 <_Bfree>
 8108a14:	4629      	mov	r1, r5
 8108a16:	4620      	mov	r0, r4
 8108a18:	f002 f974 	bl	810ad04 <_Bfree>
 8108a1c:	e5d6      	b.n	81085cc <_strtod_l+0x84>
 8108a1e:	2300      	movs	r3, #0
 8108a20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108a24:	4650      	mov	r0, sl
 8108a26:	4659      	mov	r1, fp
 8108a28:	4699      	mov	r9, r3
 8108a2a:	f1b8 0f01 	cmp.w	r8, #1
 8108a2e:	dc21      	bgt.n	8108a74 <_strtod_l+0x52c>
 8108a30:	b10b      	cbz	r3, 8108a36 <_strtod_l+0x4ee>
 8108a32:	4682      	mov	sl, r0
 8108a34:	468b      	mov	fp, r1
 8108a36:	4b2e      	ldr	r3, [pc, #184]	; (8108af0 <_strtod_l+0x5a8>)
 8108a38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108a3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108a40:	4652      	mov	r2, sl
 8108a42:	465b      	mov	r3, fp
 8108a44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108a48:	f7f7 fe6e 	bl	8100728 <__aeabi_dmul>
 8108a4c:	4b29      	ldr	r3, [pc, #164]	; (8108af4 <_strtod_l+0x5ac>)
 8108a4e:	460a      	mov	r2, r1
 8108a50:	400b      	ands	r3, r1
 8108a52:	4929      	ldr	r1, [pc, #164]	; (8108af8 <_strtod_l+0x5b0>)
 8108a54:	428b      	cmp	r3, r1
 8108a56:	4682      	mov	sl, r0
 8108a58:	d8be      	bhi.n	81089d8 <_strtod_l+0x490>
 8108a5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108a5e:	428b      	cmp	r3, r1
 8108a60:	bf86      	itte	hi
 8108a62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8108afc <_strtod_l+0x5b4>
 8108a66:	f04f 3aff 	movhi.w	sl, #4294967295
 8108a6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108a6e:	2300      	movs	r3, #0
 8108a70:	9304      	str	r3, [sp, #16]
 8108a72:	e081      	b.n	8108b78 <_strtod_l+0x630>
 8108a74:	f018 0f01 	tst.w	r8, #1
 8108a78:	d007      	beq.n	8108a8a <_strtod_l+0x542>
 8108a7a:	4b1d      	ldr	r3, [pc, #116]	; (8108af0 <_strtod_l+0x5a8>)
 8108a7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8108a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a84:	f7f7 fe50 	bl	8100728 <__aeabi_dmul>
 8108a88:	2301      	movs	r3, #1
 8108a8a:	f109 0901 	add.w	r9, r9, #1
 8108a8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108a92:	e7ca      	b.n	8108a2a <_strtod_l+0x4e2>
 8108a94:	d0eb      	beq.n	8108a6e <_strtod_l+0x526>
 8108a96:	f1c8 0800 	rsb	r8, r8, #0
 8108a9a:	f018 020f 	ands.w	r2, r8, #15
 8108a9e:	d00a      	beq.n	8108ab6 <_strtod_l+0x56e>
 8108aa0:	4b12      	ldr	r3, [pc, #72]	; (8108aec <_strtod_l+0x5a4>)
 8108aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108aa6:	4650      	mov	r0, sl
 8108aa8:	4659      	mov	r1, fp
 8108aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108aae:	f7f7 ff65 	bl	810097c <__aeabi_ddiv>
 8108ab2:	4682      	mov	sl, r0
 8108ab4:	468b      	mov	fp, r1
 8108ab6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8108aba:	d0d8      	beq.n	8108a6e <_strtod_l+0x526>
 8108abc:	f1b8 0f1f 	cmp.w	r8, #31
 8108ac0:	dd1e      	ble.n	8108b00 <_strtod_l+0x5b8>
 8108ac2:	2500      	movs	r5, #0
 8108ac4:	462e      	mov	r6, r5
 8108ac6:	9509      	str	r5, [sp, #36]	; 0x24
 8108ac8:	9507      	str	r5, [sp, #28]
 8108aca:	2322      	movs	r3, #34	; 0x22
 8108acc:	f04f 0a00 	mov.w	sl, #0
 8108ad0:	f04f 0b00 	mov.w	fp, #0
 8108ad4:	6023      	str	r3, [r4, #0]
 8108ad6:	e789      	b.n	81089ec <_strtod_l+0x4a4>
 8108ad8:	0810be06 	.word	0x0810be06
 8108adc:	0810be48 	.word	0x0810be48
 8108ae0:	0810bdfe 	.word	0x0810bdfe
 8108ae4:	0810bf8c 	.word	0x0810bf8c
 8108ae8:	0810bde1 	.word	0x0810bde1
 8108aec:	0810c188 	.word	0x0810c188
 8108af0:	0810c160 	.word	0x0810c160
 8108af4:	7ff00000 	.word	0x7ff00000
 8108af8:	7ca00000 	.word	0x7ca00000
 8108afc:	7fefffff 	.word	0x7fefffff
 8108b00:	f018 0310 	ands.w	r3, r8, #16
 8108b04:	bf18      	it	ne
 8108b06:	236a      	movne	r3, #106	; 0x6a
 8108b08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8108ec0 <_strtod_l+0x978>
 8108b0c:	9304      	str	r3, [sp, #16]
 8108b0e:	4650      	mov	r0, sl
 8108b10:	4659      	mov	r1, fp
 8108b12:	2300      	movs	r3, #0
 8108b14:	f018 0f01 	tst.w	r8, #1
 8108b18:	d004      	beq.n	8108b24 <_strtod_l+0x5dc>
 8108b1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108b1e:	f7f7 fe03 	bl	8100728 <__aeabi_dmul>
 8108b22:	2301      	movs	r3, #1
 8108b24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108b28:	f109 0908 	add.w	r9, r9, #8
 8108b2c:	d1f2      	bne.n	8108b14 <_strtod_l+0x5cc>
 8108b2e:	b10b      	cbz	r3, 8108b34 <_strtod_l+0x5ec>
 8108b30:	4682      	mov	sl, r0
 8108b32:	468b      	mov	fp, r1
 8108b34:	9b04      	ldr	r3, [sp, #16]
 8108b36:	b1bb      	cbz	r3, 8108b68 <_strtod_l+0x620>
 8108b38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8108b3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108b40:	2b00      	cmp	r3, #0
 8108b42:	4659      	mov	r1, fp
 8108b44:	dd10      	ble.n	8108b68 <_strtod_l+0x620>
 8108b46:	2b1f      	cmp	r3, #31
 8108b48:	f340 8128 	ble.w	8108d9c <_strtod_l+0x854>
 8108b4c:	2b34      	cmp	r3, #52	; 0x34
 8108b4e:	bfde      	ittt	le
 8108b50:	3b20      	suble	r3, #32
 8108b52:	f04f 32ff 	movle.w	r2, #4294967295
 8108b56:	fa02 f303 	lslle.w	r3, r2, r3
 8108b5a:	f04f 0a00 	mov.w	sl, #0
 8108b5e:	bfcc      	ite	gt
 8108b60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108b64:	ea03 0b01 	andle.w	fp, r3, r1
 8108b68:	2200      	movs	r2, #0
 8108b6a:	2300      	movs	r3, #0
 8108b6c:	4650      	mov	r0, sl
 8108b6e:	4659      	mov	r1, fp
 8108b70:	f7f8 f842 	bl	8100bf8 <__aeabi_dcmpeq>
 8108b74:	2800      	cmp	r0, #0
 8108b76:	d1a4      	bne.n	8108ac2 <_strtod_l+0x57a>
 8108b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b7a:	9300      	str	r3, [sp, #0]
 8108b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8108b7e:	462b      	mov	r3, r5
 8108b80:	463a      	mov	r2, r7
 8108b82:	4620      	mov	r0, r4
 8108b84:	f002 f92a 	bl	810addc <__s2b>
 8108b88:	9009      	str	r0, [sp, #36]	; 0x24
 8108b8a:	2800      	cmp	r0, #0
 8108b8c:	f43f af24 	beq.w	81089d8 <_strtod_l+0x490>
 8108b90:	9b07      	ldr	r3, [sp, #28]
 8108b92:	1b9e      	subs	r6, r3, r6
 8108b94:	9b08      	ldr	r3, [sp, #32]
 8108b96:	2b00      	cmp	r3, #0
 8108b98:	bfb4      	ite	lt
 8108b9a:	4633      	movlt	r3, r6
 8108b9c:	2300      	movge	r3, #0
 8108b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8108ba0:	9b08      	ldr	r3, [sp, #32]
 8108ba2:	2500      	movs	r5, #0
 8108ba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108ba8:	9318      	str	r3, [sp, #96]	; 0x60
 8108baa:	462e      	mov	r6, r5
 8108bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108bae:	4620      	mov	r0, r4
 8108bb0:	6859      	ldr	r1, [r3, #4]
 8108bb2:	f002 f867 	bl	810ac84 <_Balloc>
 8108bb6:	9007      	str	r0, [sp, #28]
 8108bb8:	2800      	cmp	r0, #0
 8108bba:	f43f af11 	beq.w	81089e0 <_strtod_l+0x498>
 8108bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108bc0:	691a      	ldr	r2, [r3, #16]
 8108bc2:	3202      	adds	r2, #2
 8108bc4:	f103 010c 	add.w	r1, r3, #12
 8108bc8:	0092      	lsls	r2, r2, #2
 8108bca:	300c      	adds	r0, #12
 8108bcc:	f7fe fbae 	bl	810732c <memcpy>
 8108bd0:	ec4b ab10 	vmov	d0, sl, fp
 8108bd4:	aa20      	add	r2, sp, #128	; 0x80
 8108bd6:	a91f      	add	r1, sp, #124	; 0x7c
 8108bd8:	4620      	mov	r0, r4
 8108bda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8108bde:	f002 fc39 	bl	810b454 <__d2b>
 8108be2:	901e      	str	r0, [sp, #120]	; 0x78
 8108be4:	2800      	cmp	r0, #0
 8108be6:	f43f aefb 	beq.w	81089e0 <_strtod_l+0x498>
 8108bea:	2101      	movs	r1, #1
 8108bec:	4620      	mov	r0, r4
 8108bee:	f002 f98f 	bl	810af10 <__i2b>
 8108bf2:	4606      	mov	r6, r0
 8108bf4:	2800      	cmp	r0, #0
 8108bf6:	f43f aef3 	beq.w	81089e0 <_strtod_l+0x498>
 8108bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8108bfc:	9904      	ldr	r1, [sp, #16]
 8108bfe:	2b00      	cmp	r3, #0
 8108c00:	bfab      	itete	ge
 8108c02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8108c04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8108c06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8108c08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8108c0c:	bfac      	ite	ge
 8108c0e:	eb03 0902 	addge.w	r9, r3, r2
 8108c12:	1ad7      	sublt	r7, r2, r3
 8108c14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8108c16:	eba3 0801 	sub.w	r8, r3, r1
 8108c1a:	4490      	add	r8, r2
 8108c1c:	4ba3      	ldr	r3, [pc, #652]	; (8108eac <_strtod_l+0x964>)
 8108c1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8108c22:	4598      	cmp	r8, r3
 8108c24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108c28:	f280 80cc 	bge.w	8108dc4 <_strtod_l+0x87c>
 8108c2c:	eba3 0308 	sub.w	r3, r3, r8
 8108c30:	2b1f      	cmp	r3, #31
 8108c32:	eba2 0203 	sub.w	r2, r2, r3
 8108c36:	f04f 0101 	mov.w	r1, #1
 8108c3a:	f300 80b6 	bgt.w	8108daa <_strtod_l+0x862>
 8108c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8108c42:	9311      	str	r3, [sp, #68]	; 0x44
 8108c44:	2300      	movs	r3, #0
 8108c46:	930c      	str	r3, [sp, #48]	; 0x30
 8108c48:	eb09 0802 	add.w	r8, r9, r2
 8108c4c:	9b04      	ldr	r3, [sp, #16]
 8108c4e:	45c1      	cmp	r9, r8
 8108c50:	4417      	add	r7, r2
 8108c52:	441f      	add	r7, r3
 8108c54:	464b      	mov	r3, r9
 8108c56:	bfa8      	it	ge
 8108c58:	4643      	movge	r3, r8
 8108c5a:	42bb      	cmp	r3, r7
 8108c5c:	bfa8      	it	ge
 8108c5e:	463b      	movge	r3, r7
 8108c60:	2b00      	cmp	r3, #0
 8108c62:	bfc2      	ittt	gt
 8108c64:	eba8 0803 	subgt.w	r8, r8, r3
 8108c68:	1aff      	subgt	r7, r7, r3
 8108c6a:	eba9 0903 	subgt.w	r9, r9, r3
 8108c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108c70:	2b00      	cmp	r3, #0
 8108c72:	dd17      	ble.n	8108ca4 <_strtod_l+0x75c>
 8108c74:	4631      	mov	r1, r6
 8108c76:	461a      	mov	r2, r3
 8108c78:	4620      	mov	r0, r4
 8108c7a:	f002 fa05 	bl	810b088 <__pow5mult>
 8108c7e:	4606      	mov	r6, r0
 8108c80:	2800      	cmp	r0, #0
 8108c82:	f43f aead 	beq.w	81089e0 <_strtod_l+0x498>
 8108c86:	4601      	mov	r1, r0
 8108c88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108c8a:	4620      	mov	r0, r4
 8108c8c:	f002 f956 	bl	810af3c <__multiply>
 8108c90:	900f      	str	r0, [sp, #60]	; 0x3c
 8108c92:	2800      	cmp	r0, #0
 8108c94:	f43f aea4 	beq.w	81089e0 <_strtod_l+0x498>
 8108c98:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108c9a:	4620      	mov	r0, r4
 8108c9c:	f002 f832 	bl	810ad04 <_Bfree>
 8108ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108ca2:	931e      	str	r3, [sp, #120]	; 0x78
 8108ca4:	f1b8 0f00 	cmp.w	r8, #0
 8108ca8:	f300 8091 	bgt.w	8108dce <_strtod_l+0x886>
 8108cac:	9b08      	ldr	r3, [sp, #32]
 8108cae:	2b00      	cmp	r3, #0
 8108cb0:	dd08      	ble.n	8108cc4 <_strtod_l+0x77c>
 8108cb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108cb4:	9907      	ldr	r1, [sp, #28]
 8108cb6:	4620      	mov	r0, r4
 8108cb8:	f002 f9e6 	bl	810b088 <__pow5mult>
 8108cbc:	9007      	str	r0, [sp, #28]
 8108cbe:	2800      	cmp	r0, #0
 8108cc0:	f43f ae8e 	beq.w	81089e0 <_strtod_l+0x498>
 8108cc4:	2f00      	cmp	r7, #0
 8108cc6:	dd08      	ble.n	8108cda <_strtod_l+0x792>
 8108cc8:	9907      	ldr	r1, [sp, #28]
 8108cca:	463a      	mov	r2, r7
 8108ccc:	4620      	mov	r0, r4
 8108cce:	f002 fa35 	bl	810b13c <__lshift>
 8108cd2:	9007      	str	r0, [sp, #28]
 8108cd4:	2800      	cmp	r0, #0
 8108cd6:	f43f ae83 	beq.w	81089e0 <_strtod_l+0x498>
 8108cda:	f1b9 0f00 	cmp.w	r9, #0
 8108cde:	dd08      	ble.n	8108cf2 <_strtod_l+0x7aa>
 8108ce0:	4631      	mov	r1, r6
 8108ce2:	464a      	mov	r2, r9
 8108ce4:	4620      	mov	r0, r4
 8108ce6:	f002 fa29 	bl	810b13c <__lshift>
 8108cea:	4606      	mov	r6, r0
 8108cec:	2800      	cmp	r0, #0
 8108cee:	f43f ae77 	beq.w	81089e0 <_strtod_l+0x498>
 8108cf2:	9a07      	ldr	r2, [sp, #28]
 8108cf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108cf6:	4620      	mov	r0, r4
 8108cf8:	f002 faa8 	bl	810b24c <__mdiff>
 8108cfc:	4605      	mov	r5, r0
 8108cfe:	2800      	cmp	r0, #0
 8108d00:	f43f ae6e 	beq.w	81089e0 <_strtod_l+0x498>
 8108d04:	68c3      	ldr	r3, [r0, #12]
 8108d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8108d08:	2300      	movs	r3, #0
 8108d0a:	60c3      	str	r3, [r0, #12]
 8108d0c:	4631      	mov	r1, r6
 8108d0e:	f002 fa81 	bl	810b214 <__mcmp>
 8108d12:	2800      	cmp	r0, #0
 8108d14:	da65      	bge.n	8108de2 <_strtod_l+0x89a>
 8108d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108d18:	ea53 030a 	orrs.w	r3, r3, sl
 8108d1c:	f040 8087 	bne.w	8108e2e <_strtod_l+0x8e6>
 8108d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108d24:	2b00      	cmp	r3, #0
 8108d26:	f040 8082 	bne.w	8108e2e <_strtod_l+0x8e6>
 8108d2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108d2e:	0d1b      	lsrs	r3, r3, #20
 8108d30:	051b      	lsls	r3, r3, #20
 8108d32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108d36:	d97a      	bls.n	8108e2e <_strtod_l+0x8e6>
 8108d38:	696b      	ldr	r3, [r5, #20]
 8108d3a:	b913      	cbnz	r3, 8108d42 <_strtod_l+0x7fa>
 8108d3c:	692b      	ldr	r3, [r5, #16]
 8108d3e:	2b01      	cmp	r3, #1
 8108d40:	dd75      	ble.n	8108e2e <_strtod_l+0x8e6>
 8108d42:	4629      	mov	r1, r5
 8108d44:	2201      	movs	r2, #1
 8108d46:	4620      	mov	r0, r4
 8108d48:	f002 f9f8 	bl	810b13c <__lshift>
 8108d4c:	4631      	mov	r1, r6
 8108d4e:	4605      	mov	r5, r0
 8108d50:	f002 fa60 	bl	810b214 <__mcmp>
 8108d54:	2800      	cmp	r0, #0
 8108d56:	dd6a      	ble.n	8108e2e <_strtod_l+0x8e6>
 8108d58:	9904      	ldr	r1, [sp, #16]
 8108d5a:	4a55      	ldr	r2, [pc, #340]	; (8108eb0 <_strtod_l+0x968>)
 8108d5c:	465b      	mov	r3, fp
 8108d5e:	2900      	cmp	r1, #0
 8108d60:	f000 8085 	beq.w	8108e6e <_strtod_l+0x926>
 8108d64:	ea02 010b 	and.w	r1, r2, fp
 8108d68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108d6c:	dc7f      	bgt.n	8108e6e <_strtod_l+0x926>
 8108d6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8108d72:	f77f aeaa 	ble.w	8108aca <_strtod_l+0x582>
 8108d76:	4a4f      	ldr	r2, [pc, #316]	; (8108eb4 <_strtod_l+0x96c>)
 8108d78:	2300      	movs	r3, #0
 8108d7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8108d7e:	4650      	mov	r0, sl
 8108d80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8108d84:	4659      	mov	r1, fp
 8108d86:	f7f7 fccf 	bl	8100728 <__aeabi_dmul>
 8108d8a:	460b      	mov	r3, r1
 8108d8c:	4303      	orrs	r3, r0
 8108d8e:	bf08      	it	eq
 8108d90:	2322      	moveq	r3, #34	; 0x22
 8108d92:	4682      	mov	sl, r0
 8108d94:	468b      	mov	fp, r1
 8108d96:	bf08      	it	eq
 8108d98:	6023      	streq	r3, [r4, #0]
 8108d9a:	e62b      	b.n	81089f4 <_strtod_l+0x4ac>
 8108d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8108da0:	fa02 f303 	lsl.w	r3, r2, r3
 8108da4:	ea03 0a0a 	and.w	sl, r3, sl
 8108da8:	e6de      	b.n	8108b68 <_strtod_l+0x620>
 8108daa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8108dae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108db2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108db6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8108dba:	fa01 f308 	lsl.w	r3, r1, r8
 8108dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8108dc0:	9111      	str	r1, [sp, #68]	; 0x44
 8108dc2:	e741      	b.n	8108c48 <_strtod_l+0x700>
 8108dc4:	2300      	movs	r3, #0
 8108dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8108dc8:	2301      	movs	r3, #1
 8108dca:	9311      	str	r3, [sp, #68]	; 0x44
 8108dcc:	e73c      	b.n	8108c48 <_strtod_l+0x700>
 8108dce:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108dd0:	4642      	mov	r2, r8
 8108dd2:	4620      	mov	r0, r4
 8108dd4:	f002 f9b2 	bl	810b13c <__lshift>
 8108dd8:	901e      	str	r0, [sp, #120]	; 0x78
 8108dda:	2800      	cmp	r0, #0
 8108ddc:	f47f af66 	bne.w	8108cac <_strtod_l+0x764>
 8108de0:	e5fe      	b.n	81089e0 <_strtod_l+0x498>
 8108de2:	465f      	mov	r7, fp
 8108de4:	d16e      	bne.n	8108ec4 <_strtod_l+0x97c>
 8108de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108dec:	b342      	cbz	r2, 8108e40 <_strtod_l+0x8f8>
 8108dee:	4a32      	ldr	r2, [pc, #200]	; (8108eb8 <_strtod_l+0x970>)
 8108df0:	4293      	cmp	r3, r2
 8108df2:	d128      	bne.n	8108e46 <_strtod_l+0x8fe>
 8108df4:	9b04      	ldr	r3, [sp, #16]
 8108df6:	4650      	mov	r0, sl
 8108df8:	b1eb      	cbz	r3, 8108e36 <_strtod_l+0x8ee>
 8108dfa:	4a2d      	ldr	r2, [pc, #180]	; (8108eb0 <_strtod_l+0x968>)
 8108dfc:	403a      	ands	r2, r7
 8108dfe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8108e02:	f04f 31ff 	mov.w	r1, #4294967295
 8108e06:	d819      	bhi.n	8108e3c <_strtod_l+0x8f4>
 8108e08:	0d12      	lsrs	r2, r2, #20
 8108e0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8108e12:	4298      	cmp	r0, r3
 8108e14:	d117      	bne.n	8108e46 <_strtod_l+0x8fe>
 8108e16:	4b29      	ldr	r3, [pc, #164]	; (8108ebc <_strtod_l+0x974>)
 8108e18:	429f      	cmp	r7, r3
 8108e1a:	d102      	bne.n	8108e22 <_strtod_l+0x8da>
 8108e1c:	3001      	adds	r0, #1
 8108e1e:	f43f addf 	beq.w	81089e0 <_strtod_l+0x498>
 8108e22:	4b23      	ldr	r3, [pc, #140]	; (8108eb0 <_strtod_l+0x968>)
 8108e24:	403b      	ands	r3, r7
 8108e26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108e2a:	f04f 0a00 	mov.w	sl, #0
 8108e2e:	9b04      	ldr	r3, [sp, #16]
 8108e30:	2b00      	cmp	r3, #0
 8108e32:	d1a0      	bne.n	8108d76 <_strtod_l+0x82e>
 8108e34:	e5de      	b.n	81089f4 <_strtod_l+0x4ac>
 8108e36:	f04f 33ff 	mov.w	r3, #4294967295
 8108e3a:	e7ea      	b.n	8108e12 <_strtod_l+0x8ca>
 8108e3c:	460b      	mov	r3, r1
 8108e3e:	e7e8      	b.n	8108e12 <_strtod_l+0x8ca>
 8108e40:	ea53 030a 	orrs.w	r3, r3, sl
 8108e44:	d088      	beq.n	8108d58 <_strtod_l+0x810>
 8108e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108e48:	b1db      	cbz	r3, 8108e82 <_strtod_l+0x93a>
 8108e4a:	423b      	tst	r3, r7
 8108e4c:	d0ef      	beq.n	8108e2e <_strtod_l+0x8e6>
 8108e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108e50:	9a04      	ldr	r2, [sp, #16]
 8108e52:	4650      	mov	r0, sl
 8108e54:	4659      	mov	r1, fp
 8108e56:	b1c3      	cbz	r3, 8108e8a <_strtod_l+0x942>
 8108e58:	f7ff fb57 	bl	810850a <sulp>
 8108e5c:	4602      	mov	r2, r0
 8108e5e:	460b      	mov	r3, r1
 8108e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108e64:	f7f7 faaa 	bl	81003bc <__adddf3>
 8108e68:	4682      	mov	sl, r0
 8108e6a:	468b      	mov	fp, r1
 8108e6c:	e7df      	b.n	8108e2e <_strtod_l+0x8e6>
 8108e6e:	4013      	ands	r3, r2
 8108e70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8108e74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108e78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108e7c:	f04f 3aff 	mov.w	sl, #4294967295
 8108e80:	e7d5      	b.n	8108e2e <_strtod_l+0x8e6>
 8108e82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108e84:	ea13 0f0a 	tst.w	r3, sl
 8108e88:	e7e0      	b.n	8108e4c <_strtod_l+0x904>
 8108e8a:	f7ff fb3e 	bl	810850a <sulp>
 8108e8e:	4602      	mov	r2, r0
 8108e90:	460b      	mov	r3, r1
 8108e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108e96:	f7f7 fa8f 	bl	81003b8 <__aeabi_dsub>
 8108e9a:	2200      	movs	r2, #0
 8108e9c:	2300      	movs	r3, #0
 8108e9e:	4682      	mov	sl, r0
 8108ea0:	468b      	mov	fp, r1
 8108ea2:	f7f7 fea9 	bl	8100bf8 <__aeabi_dcmpeq>
 8108ea6:	2800      	cmp	r0, #0
 8108ea8:	d0c1      	beq.n	8108e2e <_strtod_l+0x8e6>
 8108eaa:	e60e      	b.n	8108aca <_strtod_l+0x582>
 8108eac:	fffffc02 	.word	0xfffffc02
 8108eb0:	7ff00000 	.word	0x7ff00000
 8108eb4:	39500000 	.word	0x39500000
 8108eb8:	000fffff 	.word	0x000fffff
 8108ebc:	7fefffff 	.word	0x7fefffff
 8108ec0:	0810be60 	.word	0x0810be60
 8108ec4:	4631      	mov	r1, r6
 8108ec6:	4628      	mov	r0, r5
 8108ec8:	f002 fb20 	bl	810b50c <__ratio>
 8108ecc:	ec59 8b10 	vmov	r8, r9, d0
 8108ed0:	ee10 0a10 	vmov	r0, s0
 8108ed4:	2200      	movs	r2, #0
 8108ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8108eda:	4649      	mov	r1, r9
 8108edc:	f7f7 fea0 	bl	8100c20 <__aeabi_dcmple>
 8108ee0:	2800      	cmp	r0, #0
 8108ee2:	d07c      	beq.n	8108fde <_strtod_l+0xa96>
 8108ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d04c      	beq.n	8108f84 <_strtod_l+0xa3c>
 8108eea:	4b95      	ldr	r3, [pc, #596]	; (8109140 <_strtod_l+0xbf8>)
 8108eec:	2200      	movs	r2, #0
 8108eee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108ef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109140 <_strtod_l+0xbf8>
 8108ef6:	f04f 0800 	mov.w	r8, #0
 8108efa:	4b92      	ldr	r3, [pc, #584]	; (8109144 <_strtod_l+0xbfc>)
 8108efc:	403b      	ands	r3, r7
 8108efe:	9311      	str	r3, [sp, #68]	; 0x44
 8108f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108f02:	4b91      	ldr	r3, [pc, #580]	; (8109148 <_strtod_l+0xc00>)
 8108f04:	429a      	cmp	r2, r3
 8108f06:	f040 80b2 	bne.w	810906e <_strtod_l+0xb26>
 8108f0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8108f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108f12:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8108f16:	ec4b ab10 	vmov	d0, sl, fp
 8108f1a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8108f1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8108f22:	f002 fa1b 	bl	810b35c <__ulp>
 8108f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108f2a:	ec53 2b10 	vmov	r2, r3, d0
 8108f2e:	f7f7 fbfb 	bl	8100728 <__aeabi_dmul>
 8108f32:	4652      	mov	r2, sl
 8108f34:	465b      	mov	r3, fp
 8108f36:	f7f7 fa41 	bl	81003bc <__adddf3>
 8108f3a:	460b      	mov	r3, r1
 8108f3c:	4981      	ldr	r1, [pc, #516]	; (8109144 <_strtod_l+0xbfc>)
 8108f3e:	4a83      	ldr	r2, [pc, #524]	; (810914c <_strtod_l+0xc04>)
 8108f40:	4019      	ands	r1, r3
 8108f42:	4291      	cmp	r1, r2
 8108f44:	4682      	mov	sl, r0
 8108f46:	d95e      	bls.n	8109006 <_strtod_l+0xabe>
 8108f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108f4a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8108f4e:	4293      	cmp	r3, r2
 8108f50:	d103      	bne.n	8108f5a <_strtod_l+0xa12>
 8108f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f54:	3301      	adds	r3, #1
 8108f56:	f43f ad43 	beq.w	81089e0 <_strtod_l+0x498>
 8108f5a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8109158 <_strtod_l+0xc10>
 8108f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8108f62:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108f64:	4620      	mov	r0, r4
 8108f66:	f001 fecd 	bl	810ad04 <_Bfree>
 8108f6a:	9907      	ldr	r1, [sp, #28]
 8108f6c:	4620      	mov	r0, r4
 8108f6e:	f001 fec9 	bl	810ad04 <_Bfree>
 8108f72:	4631      	mov	r1, r6
 8108f74:	4620      	mov	r0, r4
 8108f76:	f001 fec5 	bl	810ad04 <_Bfree>
 8108f7a:	4629      	mov	r1, r5
 8108f7c:	4620      	mov	r0, r4
 8108f7e:	f001 fec1 	bl	810ad04 <_Bfree>
 8108f82:	e613      	b.n	8108bac <_strtod_l+0x664>
 8108f84:	f1ba 0f00 	cmp.w	sl, #0
 8108f88:	d11b      	bne.n	8108fc2 <_strtod_l+0xa7a>
 8108f8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108f8e:	b9f3      	cbnz	r3, 8108fce <_strtod_l+0xa86>
 8108f90:	4b6b      	ldr	r3, [pc, #428]	; (8109140 <_strtod_l+0xbf8>)
 8108f92:	2200      	movs	r2, #0
 8108f94:	4640      	mov	r0, r8
 8108f96:	4649      	mov	r1, r9
 8108f98:	f7f7 fe38 	bl	8100c0c <__aeabi_dcmplt>
 8108f9c:	b9d0      	cbnz	r0, 8108fd4 <_strtod_l+0xa8c>
 8108f9e:	4640      	mov	r0, r8
 8108fa0:	4649      	mov	r1, r9
 8108fa2:	4b6b      	ldr	r3, [pc, #428]	; (8109150 <_strtod_l+0xc08>)
 8108fa4:	2200      	movs	r2, #0
 8108fa6:	f7f7 fbbf 	bl	8100728 <__aeabi_dmul>
 8108faa:	4680      	mov	r8, r0
 8108fac:	4689      	mov	r9, r1
 8108fae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8108fb2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8108fb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8108fb8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8108fbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108fc0:	e79b      	b.n	8108efa <_strtod_l+0x9b2>
 8108fc2:	f1ba 0f01 	cmp.w	sl, #1
 8108fc6:	d102      	bne.n	8108fce <_strtod_l+0xa86>
 8108fc8:	2f00      	cmp	r7, #0
 8108fca:	f43f ad7e 	beq.w	8108aca <_strtod_l+0x582>
 8108fce:	4b61      	ldr	r3, [pc, #388]	; (8109154 <_strtod_l+0xc0c>)
 8108fd0:	2200      	movs	r2, #0
 8108fd2:	e78c      	b.n	8108eee <_strtod_l+0x9a6>
 8108fd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8109150 <_strtod_l+0xc08>
 8108fd8:	f04f 0800 	mov.w	r8, #0
 8108fdc:	e7e7      	b.n	8108fae <_strtod_l+0xa66>
 8108fde:	4b5c      	ldr	r3, [pc, #368]	; (8109150 <_strtod_l+0xc08>)
 8108fe0:	4640      	mov	r0, r8
 8108fe2:	4649      	mov	r1, r9
 8108fe4:	2200      	movs	r2, #0
 8108fe6:	f7f7 fb9f 	bl	8100728 <__aeabi_dmul>
 8108fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108fec:	4680      	mov	r8, r0
 8108fee:	4689      	mov	r9, r1
 8108ff0:	b933      	cbnz	r3, 8109000 <_strtod_l+0xab8>
 8108ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108ff6:	9012      	str	r0, [sp, #72]	; 0x48
 8108ff8:	9313      	str	r3, [sp, #76]	; 0x4c
 8108ffa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8108ffe:	e7dd      	b.n	8108fbc <_strtod_l+0xa74>
 8109000:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8109004:	e7f9      	b.n	8108ffa <_strtod_l+0xab2>
 8109006:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810900a:	9b04      	ldr	r3, [sp, #16]
 810900c:	2b00      	cmp	r3, #0
 810900e:	d1a8      	bne.n	8108f62 <_strtod_l+0xa1a>
 8109010:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109014:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109016:	0d1b      	lsrs	r3, r3, #20
 8109018:	051b      	lsls	r3, r3, #20
 810901a:	429a      	cmp	r2, r3
 810901c:	d1a1      	bne.n	8108f62 <_strtod_l+0xa1a>
 810901e:	4640      	mov	r0, r8
 8109020:	4649      	mov	r1, r9
 8109022:	f7f7 fec9 	bl	8100db8 <__aeabi_d2lz>
 8109026:	f7f7 fb51 	bl	81006cc <__aeabi_l2d>
 810902a:	4602      	mov	r2, r0
 810902c:	460b      	mov	r3, r1
 810902e:	4640      	mov	r0, r8
 8109030:	4649      	mov	r1, r9
 8109032:	f7f7 f9c1 	bl	81003b8 <__aeabi_dsub>
 8109036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109038:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810903c:	ea43 030a 	orr.w	r3, r3, sl
 8109040:	4313      	orrs	r3, r2
 8109042:	4680      	mov	r8, r0
 8109044:	4689      	mov	r9, r1
 8109046:	d053      	beq.n	81090f0 <_strtod_l+0xba8>
 8109048:	a335      	add	r3, pc, #212	; (adr r3, 8109120 <_strtod_l+0xbd8>)
 810904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810904e:	f7f7 fddd 	bl	8100c0c <__aeabi_dcmplt>
 8109052:	2800      	cmp	r0, #0
 8109054:	f47f acce 	bne.w	81089f4 <_strtod_l+0x4ac>
 8109058:	a333      	add	r3, pc, #204	; (adr r3, 8109128 <_strtod_l+0xbe0>)
 810905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810905e:	4640      	mov	r0, r8
 8109060:	4649      	mov	r1, r9
 8109062:	f7f7 fdf1 	bl	8100c48 <__aeabi_dcmpgt>
 8109066:	2800      	cmp	r0, #0
 8109068:	f43f af7b 	beq.w	8108f62 <_strtod_l+0xa1a>
 810906c:	e4c2      	b.n	81089f4 <_strtod_l+0x4ac>
 810906e:	9b04      	ldr	r3, [sp, #16]
 8109070:	b333      	cbz	r3, 81090c0 <_strtod_l+0xb78>
 8109072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109074:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109078:	d822      	bhi.n	81090c0 <_strtod_l+0xb78>
 810907a:	a32d      	add	r3, pc, #180	; (adr r3, 8109130 <_strtod_l+0xbe8>)
 810907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109080:	4640      	mov	r0, r8
 8109082:	4649      	mov	r1, r9
 8109084:	f7f7 fdcc 	bl	8100c20 <__aeabi_dcmple>
 8109088:	b1a0      	cbz	r0, 81090b4 <_strtod_l+0xb6c>
 810908a:	4649      	mov	r1, r9
 810908c:	4640      	mov	r0, r8
 810908e:	f7f7 fe23 	bl	8100cd8 <__aeabi_d2uiz>
 8109092:	2801      	cmp	r0, #1
 8109094:	bf38      	it	cc
 8109096:	2001      	movcc	r0, #1
 8109098:	f7f7 facc 	bl	8100634 <__aeabi_ui2d>
 810909c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810909e:	4680      	mov	r8, r0
 81090a0:	4689      	mov	r9, r1
 81090a2:	bb13      	cbnz	r3, 81090ea <_strtod_l+0xba2>
 81090a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81090a8:	9014      	str	r0, [sp, #80]	; 0x50
 81090aa:	9315      	str	r3, [sp, #84]	; 0x54
 81090ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81090b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81090b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81090b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81090b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81090bc:	1a9b      	subs	r3, r3, r2
 81090be:	930d      	str	r3, [sp, #52]	; 0x34
 81090c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81090c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81090c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81090cc:	f002 f946 	bl	810b35c <__ulp>
 81090d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81090d4:	ec53 2b10 	vmov	r2, r3, d0
 81090d8:	f7f7 fb26 	bl	8100728 <__aeabi_dmul>
 81090dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81090e0:	f7f7 f96c 	bl	81003bc <__adddf3>
 81090e4:	4682      	mov	sl, r0
 81090e6:	468b      	mov	fp, r1
 81090e8:	e78f      	b.n	810900a <_strtod_l+0xac2>
 81090ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 81090ee:	e7dd      	b.n	81090ac <_strtod_l+0xb64>
 81090f0:	a311      	add	r3, pc, #68	; (adr r3, 8109138 <_strtod_l+0xbf0>)
 81090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090f6:	f7f7 fd89 	bl	8100c0c <__aeabi_dcmplt>
 81090fa:	e7b4      	b.n	8109066 <_strtod_l+0xb1e>
 81090fc:	2300      	movs	r3, #0
 81090fe:	930e      	str	r3, [sp, #56]	; 0x38
 8109100:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8109102:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109104:	6013      	str	r3, [r2, #0]
 8109106:	f7ff ba65 	b.w	81085d4 <_strtod_l+0x8c>
 810910a:	2b65      	cmp	r3, #101	; 0x65
 810910c:	f43f ab5d 	beq.w	81087ca <_strtod_l+0x282>
 8109110:	2b45      	cmp	r3, #69	; 0x45
 8109112:	f43f ab5a 	beq.w	81087ca <_strtod_l+0x282>
 8109116:	2201      	movs	r2, #1
 8109118:	f7ff bb92 	b.w	8108840 <_strtod_l+0x2f8>
 810911c:	f3af 8000 	nop.w
 8109120:	94a03595 	.word	0x94a03595
 8109124:	3fdfffff 	.word	0x3fdfffff
 8109128:	35afe535 	.word	0x35afe535
 810912c:	3fe00000 	.word	0x3fe00000
 8109130:	ffc00000 	.word	0xffc00000
 8109134:	41dfffff 	.word	0x41dfffff
 8109138:	94a03595 	.word	0x94a03595
 810913c:	3fcfffff 	.word	0x3fcfffff
 8109140:	3ff00000 	.word	0x3ff00000
 8109144:	7ff00000 	.word	0x7ff00000
 8109148:	7fe00000 	.word	0x7fe00000
 810914c:	7c9fffff 	.word	0x7c9fffff
 8109150:	3fe00000 	.word	0x3fe00000
 8109154:	bff00000 	.word	0xbff00000
 8109158:	7fefffff 	.word	0x7fefffff

0810915c <_strtod_r>:
 810915c:	4b01      	ldr	r3, [pc, #4]	; (8109164 <_strtod_r+0x8>)
 810915e:	f7ff b9f3 	b.w	8108548 <_strtod_l>
 8109162:	bf00      	nop
 8109164:	10000120 	.word	0x10000120

08109168 <_strtol_l.isra.0>:
 8109168:	2b01      	cmp	r3, #1
 810916a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810916e:	d001      	beq.n	8109174 <_strtol_l.isra.0+0xc>
 8109170:	2b24      	cmp	r3, #36	; 0x24
 8109172:	d906      	bls.n	8109182 <_strtol_l.isra.0+0x1a>
 8109174:	f7fe f88e 	bl	8107294 <__errno>
 8109178:	2316      	movs	r3, #22
 810917a:	6003      	str	r3, [r0, #0]
 810917c:	2000      	movs	r0, #0
 810917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109182:	4f3a      	ldr	r7, [pc, #232]	; (810926c <_strtol_l.isra.0+0x104>)
 8109184:	468e      	mov	lr, r1
 8109186:	4676      	mov	r6, lr
 8109188:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810918c:	5de5      	ldrb	r5, [r4, r7]
 810918e:	f015 0508 	ands.w	r5, r5, #8
 8109192:	d1f8      	bne.n	8109186 <_strtol_l.isra.0+0x1e>
 8109194:	2c2d      	cmp	r4, #45	; 0x2d
 8109196:	d134      	bne.n	8109202 <_strtol_l.isra.0+0x9a>
 8109198:	f89e 4000 	ldrb.w	r4, [lr]
 810919c:	f04f 0801 	mov.w	r8, #1
 81091a0:	f106 0e02 	add.w	lr, r6, #2
 81091a4:	2b00      	cmp	r3, #0
 81091a6:	d05c      	beq.n	8109262 <_strtol_l.isra.0+0xfa>
 81091a8:	2b10      	cmp	r3, #16
 81091aa:	d10c      	bne.n	81091c6 <_strtol_l.isra.0+0x5e>
 81091ac:	2c30      	cmp	r4, #48	; 0x30
 81091ae:	d10a      	bne.n	81091c6 <_strtol_l.isra.0+0x5e>
 81091b0:	f89e 4000 	ldrb.w	r4, [lr]
 81091b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 81091b8:	2c58      	cmp	r4, #88	; 0x58
 81091ba:	d14d      	bne.n	8109258 <_strtol_l.isra.0+0xf0>
 81091bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 81091c0:	2310      	movs	r3, #16
 81091c2:	f10e 0e02 	add.w	lr, lr, #2
 81091c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 81091ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 81091ce:	2600      	movs	r6, #0
 81091d0:	fbbc f9f3 	udiv	r9, ip, r3
 81091d4:	4635      	mov	r5, r6
 81091d6:	fb03 ca19 	mls	sl, r3, r9, ip
 81091da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 81091de:	2f09      	cmp	r7, #9
 81091e0:	d818      	bhi.n	8109214 <_strtol_l.isra.0+0xac>
 81091e2:	463c      	mov	r4, r7
 81091e4:	42a3      	cmp	r3, r4
 81091e6:	dd24      	ble.n	8109232 <_strtol_l.isra.0+0xca>
 81091e8:	2e00      	cmp	r6, #0
 81091ea:	db1f      	blt.n	810922c <_strtol_l.isra.0+0xc4>
 81091ec:	45a9      	cmp	r9, r5
 81091ee:	d31d      	bcc.n	810922c <_strtol_l.isra.0+0xc4>
 81091f0:	d101      	bne.n	81091f6 <_strtol_l.isra.0+0x8e>
 81091f2:	45a2      	cmp	sl, r4
 81091f4:	db1a      	blt.n	810922c <_strtol_l.isra.0+0xc4>
 81091f6:	fb05 4503 	mla	r5, r5, r3, r4
 81091fa:	2601      	movs	r6, #1
 81091fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109200:	e7eb      	b.n	81091da <_strtol_l.isra.0+0x72>
 8109202:	2c2b      	cmp	r4, #43	; 0x2b
 8109204:	bf08      	it	eq
 8109206:	f89e 4000 	ldrbeq.w	r4, [lr]
 810920a:	46a8      	mov	r8, r5
 810920c:	bf08      	it	eq
 810920e:	f106 0e02 	addeq.w	lr, r6, #2
 8109212:	e7c7      	b.n	81091a4 <_strtol_l.isra.0+0x3c>
 8109214:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8109218:	2f19      	cmp	r7, #25
 810921a:	d801      	bhi.n	8109220 <_strtol_l.isra.0+0xb8>
 810921c:	3c37      	subs	r4, #55	; 0x37
 810921e:	e7e1      	b.n	81091e4 <_strtol_l.isra.0+0x7c>
 8109220:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8109224:	2f19      	cmp	r7, #25
 8109226:	d804      	bhi.n	8109232 <_strtol_l.isra.0+0xca>
 8109228:	3c57      	subs	r4, #87	; 0x57
 810922a:	e7db      	b.n	81091e4 <_strtol_l.isra.0+0x7c>
 810922c:	f04f 36ff 	mov.w	r6, #4294967295
 8109230:	e7e4      	b.n	81091fc <_strtol_l.isra.0+0x94>
 8109232:	2e00      	cmp	r6, #0
 8109234:	da05      	bge.n	8109242 <_strtol_l.isra.0+0xda>
 8109236:	2322      	movs	r3, #34	; 0x22
 8109238:	6003      	str	r3, [r0, #0]
 810923a:	4665      	mov	r5, ip
 810923c:	b942      	cbnz	r2, 8109250 <_strtol_l.isra.0+0xe8>
 810923e:	4628      	mov	r0, r5
 8109240:	e79d      	b.n	810917e <_strtol_l.isra.0+0x16>
 8109242:	f1b8 0f00 	cmp.w	r8, #0
 8109246:	d000      	beq.n	810924a <_strtol_l.isra.0+0xe2>
 8109248:	426d      	negs	r5, r5
 810924a:	2a00      	cmp	r2, #0
 810924c:	d0f7      	beq.n	810923e <_strtol_l.isra.0+0xd6>
 810924e:	b10e      	cbz	r6, 8109254 <_strtol_l.isra.0+0xec>
 8109250:	f10e 31ff 	add.w	r1, lr, #4294967295
 8109254:	6011      	str	r1, [r2, #0]
 8109256:	e7f2      	b.n	810923e <_strtol_l.isra.0+0xd6>
 8109258:	2430      	movs	r4, #48	; 0x30
 810925a:	2b00      	cmp	r3, #0
 810925c:	d1b3      	bne.n	81091c6 <_strtol_l.isra.0+0x5e>
 810925e:	2308      	movs	r3, #8
 8109260:	e7b1      	b.n	81091c6 <_strtol_l.isra.0+0x5e>
 8109262:	2c30      	cmp	r4, #48	; 0x30
 8109264:	d0a4      	beq.n	81091b0 <_strtol_l.isra.0+0x48>
 8109266:	230a      	movs	r3, #10
 8109268:	e7ad      	b.n	81091c6 <_strtol_l.isra.0+0x5e>
 810926a:	bf00      	nop
 810926c:	0810be89 	.word	0x0810be89

08109270 <_strtol_r>:
 8109270:	f7ff bf7a 	b.w	8109168 <_strtol_l.isra.0>

08109274 <__swbuf_r>:
 8109274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109276:	460e      	mov	r6, r1
 8109278:	4614      	mov	r4, r2
 810927a:	4605      	mov	r5, r0
 810927c:	b118      	cbz	r0, 8109286 <__swbuf_r+0x12>
 810927e:	6983      	ldr	r3, [r0, #24]
 8109280:	b90b      	cbnz	r3, 8109286 <__swbuf_r+0x12>
 8109282:	f001 f84f 	bl	810a324 <__sinit>
 8109286:	4b21      	ldr	r3, [pc, #132]	; (810930c <__swbuf_r+0x98>)
 8109288:	429c      	cmp	r4, r3
 810928a:	d12b      	bne.n	81092e4 <__swbuf_r+0x70>
 810928c:	686c      	ldr	r4, [r5, #4]
 810928e:	69a3      	ldr	r3, [r4, #24]
 8109290:	60a3      	str	r3, [r4, #8]
 8109292:	89a3      	ldrh	r3, [r4, #12]
 8109294:	071a      	lsls	r2, r3, #28
 8109296:	d52f      	bpl.n	81092f8 <__swbuf_r+0x84>
 8109298:	6923      	ldr	r3, [r4, #16]
 810929a:	b36b      	cbz	r3, 81092f8 <__swbuf_r+0x84>
 810929c:	6923      	ldr	r3, [r4, #16]
 810929e:	6820      	ldr	r0, [r4, #0]
 81092a0:	1ac0      	subs	r0, r0, r3
 81092a2:	6963      	ldr	r3, [r4, #20]
 81092a4:	b2f6      	uxtb	r6, r6
 81092a6:	4283      	cmp	r3, r0
 81092a8:	4637      	mov	r7, r6
 81092aa:	dc04      	bgt.n	81092b6 <__swbuf_r+0x42>
 81092ac:	4621      	mov	r1, r4
 81092ae:	4628      	mov	r0, r5
 81092b0:	f000 ffa4 	bl	810a1fc <_fflush_r>
 81092b4:	bb30      	cbnz	r0, 8109304 <__swbuf_r+0x90>
 81092b6:	68a3      	ldr	r3, [r4, #8]
 81092b8:	3b01      	subs	r3, #1
 81092ba:	60a3      	str	r3, [r4, #8]
 81092bc:	6823      	ldr	r3, [r4, #0]
 81092be:	1c5a      	adds	r2, r3, #1
 81092c0:	6022      	str	r2, [r4, #0]
 81092c2:	701e      	strb	r6, [r3, #0]
 81092c4:	6963      	ldr	r3, [r4, #20]
 81092c6:	3001      	adds	r0, #1
 81092c8:	4283      	cmp	r3, r0
 81092ca:	d004      	beq.n	81092d6 <__swbuf_r+0x62>
 81092cc:	89a3      	ldrh	r3, [r4, #12]
 81092ce:	07db      	lsls	r3, r3, #31
 81092d0:	d506      	bpl.n	81092e0 <__swbuf_r+0x6c>
 81092d2:	2e0a      	cmp	r6, #10
 81092d4:	d104      	bne.n	81092e0 <__swbuf_r+0x6c>
 81092d6:	4621      	mov	r1, r4
 81092d8:	4628      	mov	r0, r5
 81092da:	f000 ff8f 	bl	810a1fc <_fflush_r>
 81092de:	b988      	cbnz	r0, 8109304 <__swbuf_r+0x90>
 81092e0:	4638      	mov	r0, r7
 81092e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81092e4:	4b0a      	ldr	r3, [pc, #40]	; (8109310 <__swbuf_r+0x9c>)
 81092e6:	429c      	cmp	r4, r3
 81092e8:	d101      	bne.n	81092ee <__swbuf_r+0x7a>
 81092ea:	68ac      	ldr	r4, [r5, #8]
 81092ec:	e7cf      	b.n	810928e <__swbuf_r+0x1a>
 81092ee:	4b09      	ldr	r3, [pc, #36]	; (8109314 <__swbuf_r+0xa0>)
 81092f0:	429c      	cmp	r4, r3
 81092f2:	bf08      	it	eq
 81092f4:	68ec      	ldreq	r4, [r5, #12]
 81092f6:	e7ca      	b.n	810928e <__swbuf_r+0x1a>
 81092f8:	4621      	mov	r1, r4
 81092fa:	4628      	mov	r0, r5
 81092fc:	f000 f80c 	bl	8109318 <__swsetup_r>
 8109300:	2800      	cmp	r0, #0
 8109302:	d0cb      	beq.n	810929c <__swbuf_r+0x28>
 8109304:	f04f 37ff 	mov.w	r7, #4294967295
 8109308:	e7ea      	b.n	81092e0 <__swbuf_r+0x6c>
 810930a:	bf00      	nop
 810930c:	0810c040 	.word	0x0810c040
 8109310:	0810c060 	.word	0x0810c060
 8109314:	0810c020 	.word	0x0810c020

08109318 <__swsetup_r>:
 8109318:	4b32      	ldr	r3, [pc, #200]	; (81093e4 <__swsetup_r+0xcc>)
 810931a:	b570      	push	{r4, r5, r6, lr}
 810931c:	681d      	ldr	r5, [r3, #0]
 810931e:	4606      	mov	r6, r0
 8109320:	460c      	mov	r4, r1
 8109322:	b125      	cbz	r5, 810932e <__swsetup_r+0x16>
 8109324:	69ab      	ldr	r3, [r5, #24]
 8109326:	b913      	cbnz	r3, 810932e <__swsetup_r+0x16>
 8109328:	4628      	mov	r0, r5
 810932a:	f000 fffb 	bl	810a324 <__sinit>
 810932e:	4b2e      	ldr	r3, [pc, #184]	; (81093e8 <__swsetup_r+0xd0>)
 8109330:	429c      	cmp	r4, r3
 8109332:	d10f      	bne.n	8109354 <__swsetup_r+0x3c>
 8109334:	686c      	ldr	r4, [r5, #4]
 8109336:	89a3      	ldrh	r3, [r4, #12]
 8109338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810933c:	0719      	lsls	r1, r3, #28
 810933e:	d42c      	bmi.n	810939a <__swsetup_r+0x82>
 8109340:	06dd      	lsls	r5, r3, #27
 8109342:	d411      	bmi.n	8109368 <__swsetup_r+0x50>
 8109344:	2309      	movs	r3, #9
 8109346:	6033      	str	r3, [r6, #0]
 8109348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810934c:	81a3      	strh	r3, [r4, #12]
 810934e:	f04f 30ff 	mov.w	r0, #4294967295
 8109352:	e03e      	b.n	81093d2 <__swsetup_r+0xba>
 8109354:	4b25      	ldr	r3, [pc, #148]	; (81093ec <__swsetup_r+0xd4>)
 8109356:	429c      	cmp	r4, r3
 8109358:	d101      	bne.n	810935e <__swsetup_r+0x46>
 810935a:	68ac      	ldr	r4, [r5, #8]
 810935c:	e7eb      	b.n	8109336 <__swsetup_r+0x1e>
 810935e:	4b24      	ldr	r3, [pc, #144]	; (81093f0 <__swsetup_r+0xd8>)
 8109360:	429c      	cmp	r4, r3
 8109362:	bf08      	it	eq
 8109364:	68ec      	ldreq	r4, [r5, #12]
 8109366:	e7e6      	b.n	8109336 <__swsetup_r+0x1e>
 8109368:	0758      	lsls	r0, r3, #29
 810936a:	d512      	bpl.n	8109392 <__swsetup_r+0x7a>
 810936c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810936e:	b141      	cbz	r1, 8109382 <__swsetup_r+0x6a>
 8109370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109374:	4299      	cmp	r1, r3
 8109376:	d002      	beq.n	810937e <__swsetup_r+0x66>
 8109378:	4630      	mov	r0, r6
 810937a:	f7fd ffed 	bl	8107358 <_free_r>
 810937e:	2300      	movs	r3, #0
 8109380:	6363      	str	r3, [r4, #52]	; 0x34
 8109382:	89a3      	ldrh	r3, [r4, #12]
 8109384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109388:	81a3      	strh	r3, [r4, #12]
 810938a:	2300      	movs	r3, #0
 810938c:	6063      	str	r3, [r4, #4]
 810938e:	6923      	ldr	r3, [r4, #16]
 8109390:	6023      	str	r3, [r4, #0]
 8109392:	89a3      	ldrh	r3, [r4, #12]
 8109394:	f043 0308 	orr.w	r3, r3, #8
 8109398:	81a3      	strh	r3, [r4, #12]
 810939a:	6923      	ldr	r3, [r4, #16]
 810939c:	b94b      	cbnz	r3, 81093b2 <__swsetup_r+0x9a>
 810939e:	89a3      	ldrh	r3, [r4, #12]
 81093a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81093a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81093a8:	d003      	beq.n	81093b2 <__swsetup_r+0x9a>
 81093aa:	4621      	mov	r1, r4
 81093ac:	4630      	mov	r0, r6
 81093ae:	f001 fbf1 	bl	810ab94 <__smakebuf_r>
 81093b2:	89a0      	ldrh	r0, [r4, #12]
 81093b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81093b8:	f010 0301 	ands.w	r3, r0, #1
 81093bc:	d00a      	beq.n	81093d4 <__swsetup_r+0xbc>
 81093be:	2300      	movs	r3, #0
 81093c0:	60a3      	str	r3, [r4, #8]
 81093c2:	6963      	ldr	r3, [r4, #20]
 81093c4:	425b      	negs	r3, r3
 81093c6:	61a3      	str	r3, [r4, #24]
 81093c8:	6923      	ldr	r3, [r4, #16]
 81093ca:	b943      	cbnz	r3, 81093de <__swsetup_r+0xc6>
 81093cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81093d0:	d1ba      	bne.n	8109348 <__swsetup_r+0x30>
 81093d2:	bd70      	pop	{r4, r5, r6, pc}
 81093d4:	0781      	lsls	r1, r0, #30
 81093d6:	bf58      	it	pl
 81093d8:	6963      	ldrpl	r3, [r4, #20]
 81093da:	60a3      	str	r3, [r4, #8]
 81093dc:	e7f4      	b.n	81093c8 <__swsetup_r+0xb0>
 81093de:	2000      	movs	r0, #0
 81093e0:	e7f7      	b.n	81093d2 <__swsetup_r+0xba>
 81093e2:	bf00      	nop
 81093e4:	100000b8 	.word	0x100000b8
 81093e8:	0810c040 	.word	0x0810c040
 81093ec:	0810c060 	.word	0x0810c060
 81093f0:	0810c020 	.word	0x0810c020

081093f4 <abort>:
 81093f4:	b508      	push	{r3, lr}
 81093f6:	2006      	movs	r0, #6
 81093f8:	f002 fac2 	bl	810b980 <raise>
 81093fc:	2001      	movs	r0, #1
 81093fe:	f7f8 f901 	bl	8101604 <_exit>

08109402 <quorem>:
 8109402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109406:	6903      	ldr	r3, [r0, #16]
 8109408:	690c      	ldr	r4, [r1, #16]
 810940a:	42a3      	cmp	r3, r4
 810940c:	4607      	mov	r7, r0
 810940e:	f2c0 8081 	blt.w	8109514 <quorem+0x112>
 8109412:	3c01      	subs	r4, #1
 8109414:	f101 0814 	add.w	r8, r1, #20
 8109418:	f100 0514 	add.w	r5, r0, #20
 810941c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109420:	9301      	str	r3, [sp, #4]
 8109422:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810942a:	3301      	adds	r3, #1
 810942c:	429a      	cmp	r2, r3
 810942e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8109432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8109436:	fbb2 f6f3 	udiv	r6, r2, r3
 810943a:	d331      	bcc.n	81094a0 <quorem+0x9e>
 810943c:	f04f 0e00 	mov.w	lr, #0
 8109440:	4640      	mov	r0, r8
 8109442:	46ac      	mov	ip, r5
 8109444:	46f2      	mov	sl, lr
 8109446:	f850 2b04 	ldr.w	r2, [r0], #4
 810944a:	b293      	uxth	r3, r2
 810944c:	fb06 e303 	mla	r3, r6, r3, lr
 8109450:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8109454:	b29b      	uxth	r3, r3
 8109456:	ebaa 0303 	sub.w	r3, sl, r3
 810945a:	0c12      	lsrs	r2, r2, #16
 810945c:	f8dc a000 	ldr.w	sl, [ip]
 8109460:	fb06 e202 	mla	r2, r6, r2, lr
 8109464:	fa13 f38a 	uxtah	r3, r3, sl
 8109468:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810946c:	fa1f fa82 	uxth.w	sl, r2
 8109470:	f8dc 2000 	ldr.w	r2, [ip]
 8109474:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8109478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810947c:	b29b      	uxth	r3, r3
 810947e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109482:	4581      	cmp	r9, r0
 8109484:	f84c 3b04 	str.w	r3, [ip], #4
 8109488:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810948c:	d2db      	bcs.n	8109446 <quorem+0x44>
 810948e:	f855 300b 	ldr.w	r3, [r5, fp]
 8109492:	b92b      	cbnz	r3, 81094a0 <quorem+0x9e>
 8109494:	9b01      	ldr	r3, [sp, #4]
 8109496:	3b04      	subs	r3, #4
 8109498:	429d      	cmp	r5, r3
 810949a:	461a      	mov	r2, r3
 810949c:	d32e      	bcc.n	81094fc <quorem+0xfa>
 810949e:	613c      	str	r4, [r7, #16]
 81094a0:	4638      	mov	r0, r7
 81094a2:	f001 feb7 	bl	810b214 <__mcmp>
 81094a6:	2800      	cmp	r0, #0
 81094a8:	db24      	blt.n	81094f4 <quorem+0xf2>
 81094aa:	3601      	adds	r6, #1
 81094ac:	4628      	mov	r0, r5
 81094ae:	f04f 0c00 	mov.w	ip, #0
 81094b2:	f858 2b04 	ldr.w	r2, [r8], #4
 81094b6:	f8d0 e000 	ldr.w	lr, [r0]
 81094ba:	b293      	uxth	r3, r2
 81094bc:	ebac 0303 	sub.w	r3, ip, r3
 81094c0:	0c12      	lsrs	r2, r2, #16
 81094c2:	fa13 f38e 	uxtah	r3, r3, lr
 81094c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 81094ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81094ce:	b29b      	uxth	r3, r3
 81094d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81094d4:	45c1      	cmp	r9, r8
 81094d6:	f840 3b04 	str.w	r3, [r0], #4
 81094da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81094de:	d2e8      	bcs.n	81094b2 <quorem+0xb0>
 81094e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81094e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81094e8:	b922      	cbnz	r2, 81094f4 <quorem+0xf2>
 81094ea:	3b04      	subs	r3, #4
 81094ec:	429d      	cmp	r5, r3
 81094ee:	461a      	mov	r2, r3
 81094f0:	d30a      	bcc.n	8109508 <quorem+0x106>
 81094f2:	613c      	str	r4, [r7, #16]
 81094f4:	4630      	mov	r0, r6
 81094f6:	b003      	add	sp, #12
 81094f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81094fc:	6812      	ldr	r2, [r2, #0]
 81094fe:	3b04      	subs	r3, #4
 8109500:	2a00      	cmp	r2, #0
 8109502:	d1cc      	bne.n	810949e <quorem+0x9c>
 8109504:	3c01      	subs	r4, #1
 8109506:	e7c7      	b.n	8109498 <quorem+0x96>
 8109508:	6812      	ldr	r2, [r2, #0]
 810950a:	3b04      	subs	r3, #4
 810950c:	2a00      	cmp	r2, #0
 810950e:	d1f0      	bne.n	81094f2 <quorem+0xf0>
 8109510:	3c01      	subs	r4, #1
 8109512:	e7eb      	b.n	81094ec <quorem+0xea>
 8109514:	2000      	movs	r0, #0
 8109516:	e7ee      	b.n	81094f6 <quorem+0xf4>

08109518 <_dtoa_r>:
 8109518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810951c:	ed2d 8b02 	vpush	{d8}
 8109520:	ec57 6b10 	vmov	r6, r7, d0
 8109524:	b095      	sub	sp, #84	; 0x54
 8109526:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109528:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810952c:	9105      	str	r1, [sp, #20]
 810952e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8109532:	4604      	mov	r4, r0
 8109534:	9209      	str	r2, [sp, #36]	; 0x24
 8109536:	930f      	str	r3, [sp, #60]	; 0x3c
 8109538:	b975      	cbnz	r5, 8109558 <_dtoa_r+0x40>
 810953a:	2010      	movs	r0, #16
 810953c:	f7fd fee6 	bl	810730c <malloc>
 8109540:	4602      	mov	r2, r0
 8109542:	6260      	str	r0, [r4, #36]	; 0x24
 8109544:	b920      	cbnz	r0, 8109550 <_dtoa_r+0x38>
 8109546:	4bb2      	ldr	r3, [pc, #712]	; (8109810 <_dtoa_r+0x2f8>)
 8109548:	21ea      	movs	r1, #234	; 0xea
 810954a:	48b2      	ldr	r0, [pc, #712]	; (8109814 <_dtoa_r+0x2fc>)
 810954c:	f7fd fe84 	bl	8107258 <__assert_func>
 8109550:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8109554:	6005      	str	r5, [r0, #0]
 8109556:	60c5      	str	r5, [r0, #12]
 8109558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810955a:	6819      	ldr	r1, [r3, #0]
 810955c:	b151      	cbz	r1, 8109574 <_dtoa_r+0x5c>
 810955e:	685a      	ldr	r2, [r3, #4]
 8109560:	604a      	str	r2, [r1, #4]
 8109562:	2301      	movs	r3, #1
 8109564:	4093      	lsls	r3, r2
 8109566:	608b      	str	r3, [r1, #8]
 8109568:	4620      	mov	r0, r4
 810956a:	f001 fbcb 	bl	810ad04 <_Bfree>
 810956e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109570:	2200      	movs	r2, #0
 8109572:	601a      	str	r2, [r3, #0]
 8109574:	1e3b      	subs	r3, r7, #0
 8109576:	bfb9      	ittee	lt
 8109578:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810957c:	9303      	strlt	r3, [sp, #12]
 810957e:	2300      	movge	r3, #0
 8109580:	f8c8 3000 	strge.w	r3, [r8]
 8109584:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8109588:	4ba3      	ldr	r3, [pc, #652]	; (8109818 <_dtoa_r+0x300>)
 810958a:	bfbc      	itt	lt
 810958c:	2201      	movlt	r2, #1
 810958e:	f8c8 2000 	strlt.w	r2, [r8]
 8109592:	ea33 0309 	bics.w	r3, r3, r9
 8109596:	d11b      	bne.n	81095d0 <_dtoa_r+0xb8>
 8109598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810959a:	f242 730f 	movw	r3, #9999	; 0x270f
 810959e:	6013      	str	r3, [r2, #0]
 81095a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81095a4:	4333      	orrs	r3, r6
 81095a6:	f000 857a 	beq.w	810a09e <_dtoa_r+0xb86>
 81095aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81095ac:	b963      	cbnz	r3, 81095c8 <_dtoa_r+0xb0>
 81095ae:	4b9b      	ldr	r3, [pc, #620]	; (810981c <_dtoa_r+0x304>)
 81095b0:	e024      	b.n	81095fc <_dtoa_r+0xe4>
 81095b2:	4b9b      	ldr	r3, [pc, #620]	; (8109820 <_dtoa_r+0x308>)
 81095b4:	9300      	str	r3, [sp, #0]
 81095b6:	3308      	adds	r3, #8
 81095b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81095ba:	6013      	str	r3, [r2, #0]
 81095bc:	9800      	ldr	r0, [sp, #0]
 81095be:	b015      	add	sp, #84	; 0x54
 81095c0:	ecbd 8b02 	vpop	{d8}
 81095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81095c8:	4b94      	ldr	r3, [pc, #592]	; (810981c <_dtoa_r+0x304>)
 81095ca:	9300      	str	r3, [sp, #0]
 81095cc:	3303      	adds	r3, #3
 81095ce:	e7f3      	b.n	81095b8 <_dtoa_r+0xa0>
 81095d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 81095d4:	2200      	movs	r2, #0
 81095d6:	ec51 0b17 	vmov	r0, r1, d7
 81095da:	2300      	movs	r3, #0
 81095dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 81095e0:	f7f7 fb0a 	bl	8100bf8 <__aeabi_dcmpeq>
 81095e4:	4680      	mov	r8, r0
 81095e6:	b158      	cbz	r0, 8109600 <_dtoa_r+0xe8>
 81095e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81095ea:	2301      	movs	r3, #1
 81095ec:	6013      	str	r3, [r2, #0]
 81095ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81095f0:	2b00      	cmp	r3, #0
 81095f2:	f000 8551 	beq.w	810a098 <_dtoa_r+0xb80>
 81095f6:	488b      	ldr	r0, [pc, #556]	; (8109824 <_dtoa_r+0x30c>)
 81095f8:	6018      	str	r0, [r3, #0]
 81095fa:	1e43      	subs	r3, r0, #1
 81095fc:	9300      	str	r3, [sp, #0]
 81095fe:	e7dd      	b.n	81095bc <_dtoa_r+0xa4>
 8109600:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109604:	aa12      	add	r2, sp, #72	; 0x48
 8109606:	a913      	add	r1, sp, #76	; 0x4c
 8109608:	4620      	mov	r0, r4
 810960a:	f001 ff23 	bl	810b454 <__d2b>
 810960e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8109612:	4683      	mov	fp, r0
 8109614:	2d00      	cmp	r5, #0
 8109616:	d07c      	beq.n	8109712 <_dtoa_r+0x1fa>
 8109618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810961a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 810961e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109622:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8109626:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810962a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810962e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8109632:	4b7d      	ldr	r3, [pc, #500]	; (8109828 <_dtoa_r+0x310>)
 8109634:	2200      	movs	r2, #0
 8109636:	4630      	mov	r0, r6
 8109638:	4639      	mov	r1, r7
 810963a:	f7f6 febd 	bl	81003b8 <__aeabi_dsub>
 810963e:	a36e      	add	r3, pc, #440	; (adr r3, 81097f8 <_dtoa_r+0x2e0>)
 8109640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109644:	f7f7 f870 	bl	8100728 <__aeabi_dmul>
 8109648:	a36d      	add	r3, pc, #436	; (adr r3, 8109800 <_dtoa_r+0x2e8>)
 810964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810964e:	f7f6 feb5 	bl	81003bc <__adddf3>
 8109652:	4606      	mov	r6, r0
 8109654:	4628      	mov	r0, r5
 8109656:	460f      	mov	r7, r1
 8109658:	f7f6 fffc 	bl	8100654 <__aeabi_i2d>
 810965c:	a36a      	add	r3, pc, #424	; (adr r3, 8109808 <_dtoa_r+0x2f0>)
 810965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109662:	f7f7 f861 	bl	8100728 <__aeabi_dmul>
 8109666:	4602      	mov	r2, r0
 8109668:	460b      	mov	r3, r1
 810966a:	4630      	mov	r0, r6
 810966c:	4639      	mov	r1, r7
 810966e:	f7f6 fea5 	bl	81003bc <__adddf3>
 8109672:	4606      	mov	r6, r0
 8109674:	460f      	mov	r7, r1
 8109676:	f7f7 fb07 	bl	8100c88 <__aeabi_d2iz>
 810967a:	2200      	movs	r2, #0
 810967c:	4682      	mov	sl, r0
 810967e:	2300      	movs	r3, #0
 8109680:	4630      	mov	r0, r6
 8109682:	4639      	mov	r1, r7
 8109684:	f7f7 fac2 	bl	8100c0c <__aeabi_dcmplt>
 8109688:	b148      	cbz	r0, 810969e <_dtoa_r+0x186>
 810968a:	4650      	mov	r0, sl
 810968c:	f7f6 ffe2 	bl	8100654 <__aeabi_i2d>
 8109690:	4632      	mov	r2, r6
 8109692:	463b      	mov	r3, r7
 8109694:	f7f7 fab0 	bl	8100bf8 <__aeabi_dcmpeq>
 8109698:	b908      	cbnz	r0, 810969e <_dtoa_r+0x186>
 810969a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810969e:	f1ba 0f16 	cmp.w	sl, #22
 81096a2:	d854      	bhi.n	810974e <_dtoa_r+0x236>
 81096a4:	4b61      	ldr	r3, [pc, #388]	; (810982c <_dtoa_r+0x314>)
 81096a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81096b2:	f7f7 faab 	bl	8100c0c <__aeabi_dcmplt>
 81096b6:	2800      	cmp	r0, #0
 81096b8:	d04b      	beq.n	8109752 <_dtoa_r+0x23a>
 81096ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 81096be:	2300      	movs	r3, #0
 81096c0:	930e      	str	r3, [sp, #56]	; 0x38
 81096c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 81096c4:	1b5d      	subs	r5, r3, r5
 81096c6:	1e6b      	subs	r3, r5, #1
 81096c8:	9304      	str	r3, [sp, #16]
 81096ca:	bf43      	ittte	mi
 81096cc:	2300      	movmi	r3, #0
 81096ce:	f1c5 0801 	rsbmi	r8, r5, #1
 81096d2:	9304      	strmi	r3, [sp, #16]
 81096d4:	f04f 0800 	movpl.w	r8, #0
 81096d8:	f1ba 0f00 	cmp.w	sl, #0
 81096dc:	db3b      	blt.n	8109756 <_dtoa_r+0x23e>
 81096de:	9b04      	ldr	r3, [sp, #16]
 81096e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 81096e4:	4453      	add	r3, sl
 81096e6:	9304      	str	r3, [sp, #16]
 81096e8:	2300      	movs	r3, #0
 81096ea:	9306      	str	r3, [sp, #24]
 81096ec:	9b05      	ldr	r3, [sp, #20]
 81096ee:	2b09      	cmp	r3, #9
 81096f0:	d869      	bhi.n	81097c6 <_dtoa_r+0x2ae>
 81096f2:	2b05      	cmp	r3, #5
 81096f4:	bfc4      	itt	gt
 81096f6:	3b04      	subgt	r3, #4
 81096f8:	9305      	strgt	r3, [sp, #20]
 81096fa:	9b05      	ldr	r3, [sp, #20]
 81096fc:	f1a3 0302 	sub.w	r3, r3, #2
 8109700:	bfcc      	ite	gt
 8109702:	2500      	movgt	r5, #0
 8109704:	2501      	movle	r5, #1
 8109706:	2b03      	cmp	r3, #3
 8109708:	d869      	bhi.n	81097de <_dtoa_r+0x2c6>
 810970a:	e8df f003 	tbb	[pc, r3]
 810970e:	4e2c      	.short	0x4e2c
 8109710:	5a4c      	.short	0x5a4c
 8109712:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8109716:	441d      	add	r5, r3
 8109718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810971c:	2b20      	cmp	r3, #32
 810971e:	bfc1      	itttt	gt
 8109720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109724:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109728:	fa09 f303 	lslgt.w	r3, r9, r3
 810972c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109730:	bfda      	itte	le
 8109732:	f1c3 0320 	rsble	r3, r3, #32
 8109736:	fa06 f003 	lslle.w	r0, r6, r3
 810973a:	4318      	orrgt	r0, r3
 810973c:	f7f6 ff7a 	bl	8100634 <__aeabi_ui2d>
 8109740:	2301      	movs	r3, #1
 8109742:	4606      	mov	r6, r0
 8109744:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8109748:	3d01      	subs	r5, #1
 810974a:	9310      	str	r3, [sp, #64]	; 0x40
 810974c:	e771      	b.n	8109632 <_dtoa_r+0x11a>
 810974e:	2301      	movs	r3, #1
 8109750:	e7b6      	b.n	81096c0 <_dtoa_r+0x1a8>
 8109752:	900e      	str	r0, [sp, #56]	; 0x38
 8109754:	e7b5      	b.n	81096c2 <_dtoa_r+0x1aa>
 8109756:	f1ca 0300 	rsb	r3, sl, #0
 810975a:	9306      	str	r3, [sp, #24]
 810975c:	2300      	movs	r3, #0
 810975e:	eba8 080a 	sub.w	r8, r8, sl
 8109762:	930d      	str	r3, [sp, #52]	; 0x34
 8109764:	e7c2      	b.n	81096ec <_dtoa_r+0x1d4>
 8109766:	2300      	movs	r3, #0
 8109768:	9308      	str	r3, [sp, #32]
 810976a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810976c:	2b00      	cmp	r3, #0
 810976e:	dc39      	bgt.n	81097e4 <_dtoa_r+0x2cc>
 8109770:	f04f 0901 	mov.w	r9, #1
 8109774:	f8cd 9004 	str.w	r9, [sp, #4]
 8109778:	464b      	mov	r3, r9
 810977a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810977e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109780:	2200      	movs	r2, #0
 8109782:	6042      	str	r2, [r0, #4]
 8109784:	2204      	movs	r2, #4
 8109786:	f102 0614 	add.w	r6, r2, #20
 810978a:	429e      	cmp	r6, r3
 810978c:	6841      	ldr	r1, [r0, #4]
 810978e:	d92f      	bls.n	81097f0 <_dtoa_r+0x2d8>
 8109790:	4620      	mov	r0, r4
 8109792:	f001 fa77 	bl	810ac84 <_Balloc>
 8109796:	9000      	str	r0, [sp, #0]
 8109798:	2800      	cmp	r0, #0
 810979a:	d14b      	bne.n	8109834 <_dtoa_r+0x31c>
 810979c:	4b24      	ldr	r3, [pc, #144]	; (8109830 <_dtoa_r+0x318>)
 810979e:	4602      	mov	r2, r0
 81097a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 81097a4:	e6d1      	b.n	810954a <_dtoa_r+0x32>
 81097a6:	2301      	movs	r3, #1
 81097a8:	e7de      	b.n	8109768 <_dtoa_r+0x250>
 81097aa:	2300      	movs	r3, #0
 81097ac:	9308      	str	r3, [sp, #32]
 81097ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81097b0:	eb0a 0903 	add.w	r9, sl, r3
 81097b4:	f109 0301 	add.w	r3, r9, #1
 81097b8:	2b01      	cmp	r3, #1
 81097ba:	9301      	str	r3, [sp, #4]
 81097bc:	bfb8      	it	lt
 81097be:	2301      	movlt	r3, #1
 81097c0:	e7dd      	b.n	810977e <_dtoa_r+0x266>
 81097c2:	2301      	movs	r3, #1
 81097c4:	e7f2      	b.n	81097ac <_dtoa_r+0x294>
 81097c6:	2501      	movs	r5, #1
 81097c8:	2300      	movs	r3, #0
 81097ca:	9305      	str	r3, [sp, #20]
 81097cc:	9508      	str	r5, [sp, #32]
 81097ce:	f04f 39ff 	mov.w	r9, #4294967295
 81097d2:	2200      	movs	r2, #0
 81097d4:	f8cd 9004 	str.w	r9, [sp, #4]
 81097d8:	2312      	movs	r3, #18
 81097da:	9209      	str	r2, [sp, #36]	; 0x24
 81097dc:	e7cf      	b.n	810977e <_dtoa_r+0x266>
 81097de:	2301      	movs	r3, #1
 81097e0:	9308      	str	r3, [sp, #32]
 81097e2:	e7f4      	b.n	81097ce <_dtoa_r+0x2b6>
 81097e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 81097e8:	f8cd 9004 	str.w	r9, [sp, #4]
 81097ec:	464b      	mov	r3, r9
 81097ee:	e7c6      	b.n	810977e <_dtoa_r+0x266>
 81097f0:	3101      	adds	r1, #1
 81097f2:	6041      	str	r1, [r0, #4]
 81097f4:	0052      	lsls	r2, r2, #1
 81097f6:	e7c6      	b.n	8109786 <_dtoa_r+0x26e>
 81097f8:	636f4361 	.word	0x636f4361
 81097fc:	3fd287a7 	.word	0x3fd287a7
 8109800:	8b60c8b3 	.word	0x8b60c8b3
 8109804:	3fc68a28 	.word	0x3fc68a28
 8109808:	509f79fb 	.word	0x509f79fb
 810980c:	3fd34413 	.word	0x3fd34413
 8109810:	0810bf96 	.word	0x0810bf96
 8109814:	0810bfad 	.word	0x0810bfad
 8109818:	7ff00000 	.word	0x7ff00000
 810981c:	0810bf92 	.word	0x0810bf92
 8109820:	0810bf89 	.word	0x0810bf89
 8109824:	0810be0a 	.word	0x0810be0a
 8109828:	3ff80000 	.word	0x3ff80000
 810982c:	0810c188 	.word	0x0810c188
 8109830:	0810c00c 	.word	0x0810c00c
 8109834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109836:	9a00      	ldr	r2, [sp, #0]
 8109838:	601a      	str	r2, [r3, #0]
 810983a:	9b01      	ldr	r3, [sp, #4]
 810983c:	2b0e      	cmp	r3, #14
 810983e:	f200 80ad 	bhi.w	810999c <_dtoa_r+0x484>
 8109842:	2d00      	cmp	r5, #0
 8109844:	f000 80aa 	beq.w	810999c <_dtoa_r+0x484>
 8109848:	f1ba 0f00 	cmp.w	sl, #0
 810984c:	dd36      	ble.n	81098bc <_dtoa_r+0x3a4>
 810984e:	4ac3      	ldr	r2, [pc, #780]	; (8109b5c <_dtoa_r+0x644>)
 8109850:	f00a 030f 	and.w	r3, sl, #15
 8109854:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109858:	ed93 7b00 	vldr	d7, [r3]
 810985c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8109860:	ea4f 172a 	mov.w	r7, sl, asr #4
 8109864:	eeb0 8a47 	vmov.f32	s16, s14
 8109868:	eef0 8a67 	vmov.f32	s17, s15
 810986c:	d016      	beq.n	810989c <_dtoa_r+0x384>
 810986e:	4bbc      	ldr	r3, [pc, #752]	; (8109b60 <_dtoa_r+0x648>)
 8109870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109878:	f7f7 f880 	bl	810097c <__aeabi_ddiv>
 810987c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109880:	f007 070f 	and.w	r7, r7, #15
 8109884:	2503      	movs	r5, #3
 8109886:	4eb6      	ldr	r6, [pc, #728]	; (8109b60 <_dtoa_r+0x648>)
 8109888:	b957      	cbnz	r7, 81098a0 <_dtoa_r+0x388>
 810988a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810988e:	ec53 2b18 	vmov	r2, r3, d8
 8109892:	f7f7 f873 	bl	810097c <__aeabi_ddiv>
 8109896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810989a:	e029      	b.n	81098f0 <_dtoa_r+0x3d8>
 810989c:	2502      	movs	r5, #2
 810989e:	e7f2      	b.n	8109886 <_dtoa_r+0x36e>
 81098a0:	07f9      	lsls	r1, r7, #31
 81098a2:	d508      	bpl.n	81098b6 <_dtoa_r+0x39e>
 81098a4:	ec51 0b18 	vmov	r0, r1, d8
 81098a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 81098ac:	f7f6 ff3c 	bl	8100728 <__aeabi_dmul>
 81098b0:	ec41 0b18 	vmov	d8, r0, r1
 81098b4:	3501      	adds	r5, #1
 81098b6:	107f      	asrs	r7, r7, #1
 81098b8:	3608      	adds	r6, #8
 81098ba:	e7e5      	b.n	8109888 <_dtoa_r+0x370>
 81098bc:	f000 80a6 	beq.w	8109a0c <_dtoa_r+0x4f4>
 81098c0:	f1ca 0600 	rsb	r6, sl, #0
 81098c4:	4ba5      	ldr	r3, [pc, #660]	; (8109b5c <_dtoa_r+0x644>)
 81098c6:	4fa6      	ldr	r7, [pc, #664]	; (8109b60 <_dtoa_r+0x648>)
 81098c8:	f006 020f 	and.w	r2, r6, #15
 81098cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81098d8:	f7f6 ff26 	bl	8100728 <__aeabi_dmul>
 81098dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81098e0:	1136      	asrs	r6, r6, #4
 81098e2:	2300      	movs	r3, #0
 81098e4:	2502      	movs	r5, #2
 81098e6:	2e00      	cmp	r6, #0
 81098e8:	f040 8085 	bne.w	81099f6 <_dtoa_r+0x4de>
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	d1d2      	bne.n	8109896 <_dtoa_r+0x37e>
 81098f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	f000 808c 	beq.w	8109a10 <_dtoa_r+0x4f8>
 81098f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81098fc:	4b99      	ldr	r3, [pc, #612]	; (8109b64 <_dtoa_r+0x64c>)
 81098fe:	2200      	movs	r2, #0
 8109900:	4630      	mov	r0, r6
 8109902:	4639      	mov	r1, r7
 8109904:	f7f7 f982 	bl	8100c0c <__aeabi_dcmplt>
 8109908:	2800      	cmp	r0, #0
 810990a:	f000 8081 	beq.w	8109a10 <_dtoa_r+0x4f8>
 810990e:	9b01      	ldr	r3, [sp, #4]
 8109910:	2b00      	cmp	r3, #0
 8109912:	d07d      	beq.n	8109a10 <_dtoa_r+0x4f8>
 8109914:	f1b9 0f00 	cmp.w	r9, #0
 8109918:	dd3c      	ble.n	8109994 <_dtoa_r+0x47c>
 810991a:	f10a 33ff 	add.w	r3, sl, #4294967295
 810991e:	9307      	str	r3, [sp, #28]
 8109920:	2200      	movs	r2, #0
 8109922:	4b91      	ldr	r3, [pc, #580]	; (8109b68 <_dtoa_r+0x650>)
 8109924:	4630      	mov	r0, r6
 8109926:	4639      	mov	r1, r7
 8109928:	f7f6 fefe 	bl	8100728 <__aeabi_dmul>
 810992c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109930:	3501      	adds	r5, #1
 8109932:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8109936:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810993a:	4628      	mov	r0, r5
 810993c:	f7f6 fe8a 	bl	8100654 <__aeabi_i2d>
 8109940:	4632      	mov	r2, r6
 8109942:	463b      	mov	r3, r7
 8109944:	f7f6 fef0 	bl	8100728 <__aeabi_dmul>
 8109948:	4b88      	ldr	r3, [pc, #544]	; (8109b6c <_dtoa_r+0x654>)
 810994a:	2200      	movs	r2, #0
 810994c:	f7f6 fd36 	bl	81003bc <__adddf3>
 8109950:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8109954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109958:	9303      	str	r3, [sp, #12]
 810995a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810995c:	2b00      	cmp	r3, #0
 810995e:	d15c      	bne.n	8109a1a <_dtoa_r+0x502>
 8109960:	4b83      	ldr	r3, [pc, #524]	; (8109b70 <_dtoa_r+0x658>)
 8109962:	2200      	movs	r2, #0
 8109964:	4630      	mov	r0, r6
 8109966:	4639      	mov	r1, r7
 8109968:	f7f6 fd26 	bl	81003b8 <__aeabi_dsub>
 810996c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109970:	4606      	mov	r6, r0
 8109972:	460f      	mov	r7, r1
 8109974:	f7f7 f968 	bl	8100c48 <__aeabi_dcmpgt>
 8109978:	2800      	cmp	r0, #0
 810997a:	f040 8296 	bne.w	8109eaa <_dtoa_r+0x992>
 810997e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8109982:	4630      	mov	r0, r6
 8109984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109988:	4639      	mov	r1, r7
 810998a:	f7f7 f93f 	bl	8100c0c <__aeabi_dcmplt>
 810998e:	2800      	cmp	r0, #0
 8109990:	f040 8288 	bne.w	8109ea4 <_dtoa_r+0x98c>
 8109994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810999c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810999e:	2b00      	cmp	r3, #0
 81099a0:	f2c0 8158 	blt.w	8109c54 <_dtoa_r+0x73c>
 81099a4:	f1ba 0f0e 	cmp.w	sl, #14
 81099a8:	f300 8154 	bgt.w	8109c54 <_dtoa_r+0x73c>
 81099ac:	4b6b      	ldr	r3, [pc, #428]	; (8109b5c <_dtoa_r+0x644>)
 81099ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81099b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 81099b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81099b8:	2b00      	cmp	r3, #0
 81099ba:	f280 80e3 	bge.w	8109b84 <_dtoa_r+0x66c>
 81099be:	9b01      	ldr	r3, [sp, #4]
 81099c0:	2b00      	cmp	r3, #0
 81099c2:	f300 80df 	bgt.w	8109b84 <_dtoa_r+0x66c>
 81099c6:	f040 826d 	bne.w	8109ea4 <_dtoa_r+0x98c>
 81099ca:	4b69      	ldr	r3, [pc, #420]	; (8109b70 <_dtoa_r+0x658>)
 81099cc:	2200      	movs	r2, #0
 81099ce:	4640      	mov	r0, r8
 81099d0:	4649      	mov	r1, r9
 81099d2:	f7f6 fea9 	bl	8100728 <__aeabi_dmul>
 81099d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81099da:	f7f7 f92b 	bl	8100c34 <__aeabi_dcmpge>
 81099de:	9e01      	ldr	r6, [sp, #4]
 81099e0:	4637      	mov	r7, r6
 81099e2:	2800      	cmp	r0, #0
 81099e4:	f040 8243 	bne.w	8109e6e <_dtoa_r+0x956>
 81099e8:	9d00      	ldr	r5, [sp, #0]
 81099ea:	2331      	movs	r3, #49	; 0x31
 81099ec:	f805 3b01 	strb.w	r3, [r5], #1
 81099f0:	f10a 0a01 	add.w	sl, sl, #1
 81099f4:	e23f      	b.n	8109e76 <_dtoa_r+0x95e>
 81099f6:	07f2      	lsls	r2, r6, #31
 81099f8:	d505      	bpl.n	8109a06 <_dtoa_r+0x4ee>
 81099fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 81099fe:	f7f6 fe93 	bl	8100728 <__aeabi_dmul>
 8109a02:	3501      	adds	r5, #1
 8109a04:	2301      	movs	r3, #1
 8109a06:	1076      	asrs	r6, r6, #1
 8109a08:	3708      	adds	r7, #8
 8109a0a:	e76c      	b.n	81098e6 <_dtoa_r+0x3ce>
 8109a0c:	2502      	movs	r5, #2
 8109a0e:	e76f      	b.n	81098f0 <_dtoa_r+0x3d8>
 8109a10:	9b01      	ldr	r3, [sp, #4]
 8109a12:	f8cd a01c 	str.w	sl, [sp, #28]
 8109a16:	930c      	str	r3, [sp, #48]	; 0x30
 8109a18:	e78d      	b.n	8109936 <_dtoa_r+0x41e>
 8109a1a:	9900      	ldr	r1, [sp, #0]
 8109a1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8109a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109a20:	4b4e      	ldr	r3, [pc, #312]	; (8109b5c <_dtoa_r+0x644>)
 8109a22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109a26:	4401      	add	r1, r0
 8109a28:	9102      	str	r1, [sp, #8]
 8109a2a:	9908      	ldr	r1, [sp, #32]
 8109a2c:	eeb0 8a47 	vmov.f32	s16, s14
 8109a30:	eef0 8a67 	vmov.f32	s17, s15
 8109a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109a38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8109a3c:	2900      	cmp	r1, #0
 8109a3e:	d045      	beq.n	8109acc <_dtoa_r+0x5b4>
 8109a40:	494c      	ldr	r1, [pc, #304]	; (8109b74 <_dtoa_r+0x65c>)
 8109a42:	2000      	movs	r0, #0
 8109a44:	f7f6 ff9a 	bl	810097c <__aeabi_ddiv>
 8109a48:	ec53 2b18 	vmov	r2, r3, d8
 8109a4c:	f7f6 fcb4 	bl	81003b8 <__aeabi_dsub>
 8109a50:	9d00      	ldr	r5, [sp, #0]
 8109a52:	ec41 0b18 	vmov	d8, r0, r1
 8109a56:	4639      	mov	r1, r7
 8109a58:	4630      	mov	r0, r6
 8109a5a:	f7f7 f915 	bl	8100c88 <__aeabi_d2iz>
 8109a5e:	900c      	str	r0, [sp, #48]	; 0x30
 8109a60:	f7f6 fdf8 	bl	8100654 <__aeabi_i2d>
 8109a64:	4602      	mov	r2, r0
 8109a66:	460b      	mov	r3, r1
 8109a68:	4630      	mov	r0, r6
 8109a6a:	4639      	mov	r1, r7
 8109a6c:	f7f6 fca4 	bl	81003b8 <__aeabi_dsub>
 8109a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109a72:	3330      	adds	r3, #48	; 0x30
 8109a74:	f805 3b01 	strb.w	r3, [r5], #1
 8109a78:	ec53 2b18 	vmov	r2, r3, d8
 8109a7c:	4606      	mov	r6, r0
 8109a7e:	460f      	mov	r7, r1
 8109a80:	f7f7 f8c4 	bl	8100c0c <__aeabi_dcmplt>
 8109a84:	2800      	cmp	r0, #0
 8109a86:	d165      	bne.n	8109b54 <_dtoa_r+0x63c>
 8109a88:	4632      	mov	r2, r6
 8109a8a:	463b      	mov	r3, r7
 8109a8c:	4935      	ldr	r1, [pc, #212]	; (8109b64 <_dtoa_r+0x64c>)
 8109a8e:	2000      	movs	r0, #0
 8109a90:	f7f6 fc92 	bl	81003b8 <__aeabi_dsub>
 8109a94:	ec53 2b18 	vmov	r2, r3, d8
 8109a98:	f7f7 f8b8 	bl	8100c0c <__aeabi_dcmplt>
 8109a9c:	2800      	cmp	r0, #0
 8109a9e:	f040 80b9 	bne.w	8109c14 <_dtoa_r+0x6fc>
 8109aa2:	9b02      	ldr	r3, [sp, #8]
 8109aa4:	429d      	cmp	r5, r3
 8109aa6:	f43f af75 	beq.w	8109994 <_dtoa_r+0x47c>
 8109aaa:	4b2f      	ldr	r3, [pc, #188]	; (8109b68 <_dtoa_r+0x650>)
 8109aac:	ec51 0b18 	vmov	r0, r1, d8
 8109ab0:	2200      	movs	r2, #0
 8109ab2:	f7f6 fe39 	bl	8100728 <__aeabi_dmul>
 8109ab6:	4b2c      	ldr	r3, [pc, #176]	; (8109b68 <_dtoa_r+0x650>)
 8109ab8:	ec41 0b18 	vmov	d8, r0, r1
 8109abc:	2200      	movs	r2, #0
 8109abe:	4630      	mov	r0, r6
 8109ac0:	4639      	mov	r1, r7
 8109ac2:	f7f6 fe31 	bl	8100728 <__aeabi_dmul>
 8109ac6:	4606      	mov	r6, r0
 8109ac8:	460f      	mov	r7, r1
 8109aca:	e7c4      	b.n	8109a56 <_dtoa_r+0x53e>
 8109acc:	ec51 0b17 	vmov	r0, r1, d7
 8109ad0:	f7f6 fe2a 	bl	8100728 <__aeabi_dmul>
 8109ad4:	9b02      	ldr	r3, [sp, #8]
 8109ad6:	9d00      	ldr	r5, [sp, #0]
 8109ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8109ada:	ec41 0b18 	vmov	d8, r0, r1
 8109ade:	4639      	mov	r1, r7
 8109ae0:	4630      	mov	r0, r6
 8109ae2:	f7f7 f8d1 	bl	8100c88 <__aeabi_d2iz>
 8109ae6:	9011      	str	r0, [sp, #68]	; 0x44
 8109ae8:	f7f6 fdb4 	bl	8100654 <__aeabi_i2d>
 8109aec:	4602      	mov	r2, r0
 8109aee:	460b      	mov	r3, r1
 8109af0:	4630      	mov	r0, r6
 8109af2:	4639      	mov	r1, r7
 8109af4:	f7f6 fc60 	bl	81003b8 <__aeabi_dsub>
 8109af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109afa:	3330      	adds	r3, #48	; 0x30
 8109afc:	f805 3b01 	strb.w	r3, [r5], #1
 8109b00:	9b02      	ldr	r3, [sp, #8]
 8109b02:	429d      	cmp	r5, r3
 8109b04:	4606      	mov	r6, r0
 8109b06:	460f      	mov	r7, r1
 8109b08:	f04f 0200 	mov.w	r2, #0
 8109b0c:	d134      	bne.n	8109b78 <_dtoa_r+0x660>
 8109b0e:	4b19      	ldr	r3, [pc, #100]	; (8109b74 <_dtoa_r+0x65c>)
 8109b10:	ec51 0b18 	vmov	r0, r1, d8
 8109b14:	f7f6 fc52 	bl	81003bc <__adddf3>
 8109b18:	4602      	mov	r2, r0
 8109b1a:	460b      	mov	r3, r1
 8109b1c:	4630      	mov	r0, r6
 8109b1e:	4639      	mov	r1, r7
 8109b20:	f7f7 f892 	bl	8100c48 <__aeabi_dcmpgt>
 8109b24:	2800      	cmp	r0, #0
 8109b26:	d175      	bne.n	8109c14 <_dtoa_r+0x6fc>
 8109b28:	ec53 2b18 	vmov	r2, r3, d8
 8109b2c:	4911      	ldr	r1, [pc, #68]	; (8109b74 <_dtoa_r+0x65c>)
 8109b2e:	2000      	movs	r0, #0
 8109b30:	f7f6 fc42 	bl	81003b8 <__aeabi_dsub>
 8109b34:	4602      	mov	r2, r0
 8109b36:	460b      	mov	r3, r1
 8109b38:	4630      	mov	r0, r6
 8109b3a:	4639      	mov	r1, r7
 8109b3c:	f7f7 f866 	bl	8100c0c <__aeabi_dcmplt>
 8109b40:	2800      	cmp	r0, #0
 8109b42:	f43f af27 	beq.w	8109994 <_dtoa_r+0x47c>
 8109b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109b48:	1e6b      	subs	r3, r5, #1
 8109b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8109b4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109b50:	2b30      	cmp	r3, #48	; 0x30
 8109b52:	d0f8      	beq.n	8109b46 <_dtoa_r+0x62e>
 8109b54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109b58:	e04a      	b.n	8109bf0 <_dtoa_r+0x6d8>
 8109b5a:	bf00      	nop
 8109b5c:	0810c188 	.word	0x0810c188
 8109b60:	0810c160 	.word	0x0810c160
 8109b64:	3ff00000 	.word	0x3ff00000
 8109b68:	40240000 	.word	0x40240000
 8109b6c:	401c0000 	.word	0x401c0000
 8109b70:	40140000 	.word	0x40140000
 8109b74:	3fe00000 	.word	0x3fe00000
 8109b78:	4baf      	ldr	r3, [pc, #700]	; (8109e38 <_dtoa_r+0x920>)
 8109b7a:	f7f6 fdd5 	bl	8100728 <__aeabi_dmul>
 8109b7e:	4606      	mov	r6, r0
 8109b80:	460f      	mov	r7, r1
 8109b82:	e7ac      	b.n	8109ade <_dtoa_r+0x5c6>
 8109b84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109b88:	9d00      	ldr	r5, [sp, #0]
 8109b8a:	4642      	mov	r2, r8
 8109b8c:	464b      	mov	r3, r9
 8109b8e:	4630      	mov	r0, r6
 8109b90:	4639      	mov	r1, r7
 8109b92:	f7f6 fef3 	bl	810097c <__aeabi_ddiv>
 8109b96:	f7f7 f877 	bl	8100c88 <__aeabi_d2iz>
 8109b9a:	9002      	str	r0, [sp, #8]
 8109b9c:	f7f6 fd5a 	bl	8100654 <__aeabi_i2d>
 8109ba0:	4642      	mov	r2, r8
 8109ba2:	464b      	mov	r3, r9
 8109ba4:	f7f6 fdc0 	bl	8100728 <__aeabi_dmul>
 8109ba8:	4602      	mov	r2, r0
 8109baa:	460b      	mov	r3, r1
 8109bac:	4630      	mov	r0, r6
 8109bae:	4639      	mov	r1, r7
 8109bb0:	f7f6 fc02 	bl	81003b8 <__aeabi_dsub>
 8109bb4:	9e02      	ldr	r6, [sp, #8]
 8109bb6:	9f01      	ldr	r7, [sp, #4]
 8109bb8:	3630      	adds	r6, #48	; 0x30
 8109bba:	f805 6b01 	strb.w	r6, [r5], #1
 8109bbe:	9e00      	ldr	r6, [sp, #0]
 8109bc0:	1bae      	subs	r6, r5, r6
 8109bc2:	42b7      	cmp	r7, r6
 8109bc4:	4602      	mov	r2, r0
 8109bc6:	460b      	mov	r3, r1
 8109bc8:	d137      	bne.n	8109c3a <_dtoa_r+0x722>
 8109bca:	f7f6 fbf7 	bl	81003bc <__adddf3>
 8109bce:	4642      	mov	r2, r8
 8109bd0:	464b      	mov	r3, r9
 8109bd2:	4606      	mov	r6, r0
 8109bd4:	460f      	mov	r7, r1
 8109bd6:	f7f7 f837 	bl	8100c48 <__aeabi_dcmpgt>
 8109bda:	b9c8      	cbnz	r0, 8109c10 <_dtoa_r+0x6f8>
 8109bdc:	4642      	mov	r2, r8
 8109bde:	464b      	mov	r3, r9
 8109be0:	4630      	mov	r0, r6
 8109be2:	4639      	mov	r1, r7
 8109be4:	f7f7 f808 	bl	8100bf8 <__aeabi_dcmpeq>
 8109be8:	b110      	cbz	r0, 8109bf0 <_dtoa_r+0x6d8>
 8109bea:	9b02      	ldr	r3, [sp, #8]
 8109bec:	07d9      	lsls	r1, r3, #31
 8109bee:	d40f      	bmi.n	8109c10 <_dtoa_r+0x6f8>
 8109bf0:	4620      	mov	r0, r4
 8109bf2:	4659      	mov	r1, fp
 8109bf4:	f001 f886 	bl	810ad04 <_Bfree>
 8109bf8:	2300      	movs	r3, #0
 8109bfa:	702b      	strb	r3, [r5, #0]
 8109bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109bfe:	f10a 0001 	add.w	r0, sl, #1
 8109c02:	6018      	str	r0, [r3, #0]
 8109c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109c06:	2b00      	cmp	r3, #0
 8109c08:	f43f acd8 	beq.w	81095bc <_dtoa_r+0xa4>
 8109c0c:	601d      	str	r5, [r3, #0]
 8109c0e:	e4d5      	b.n	81095bc <_dtoa_r+0xa4>
 8109c10:	f8cd a01c 	str.w	sl, [sp, #28]
 8109c14:	462b      	mov	r3, r5
 8109c16:	461d      	mov	r5, r3
 8109c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109c1c:	2a39      	cmp	r2, #57	; 0x39
 8109c1e:	d108      	bne.n	8109c32 <_dtoa_r+0x71a>
 8109c20:	9a00      	ldr	r2, [sp, #0]
 8109c22:	429a      	cmp	r2, r3
 8109c24:	d1f7      	bne.n	8109c16 <_dtoa_r+0x6fe>
 8109c26:	9a07      	ldr	r2, [sp, #28]
 8109c28:	9900      	ldr	r1, [sp, #0]
 8109c2a:	3201      	adds	r2, #1
 8109c2c:	9207      	str	r2, [sp, #28]
 8109c2e:	2230      	movs	r2, #48	; 0x30
 8109c30:	700a      	strb	r2, [r1, #0]
 8109c32:	781a      	ldrb	r2, [r3, #0]
 8109c34:	3201      	adds	r2, #1
 8109c36:	701a      	strb	r2, [r3, #0]
 8109c38:	e78c      	b.n	8109b54 <_dtoa_r+0x63c>
 8109c3a:	4b7f      	ldr	r3, [pc, #508]	; (8109e38 <_dtoa_r+0x920>)
 8109c3c:	2200      	movs	r2, #0
 8109c3e:	f7f6 fd73 	bl	8100728 <__aeabi_dmul>
 8109c42:	2200      	movs	r2, #0
 8109c44:	2300      	movs	r3, #0
 8109c46:	4606      	mov	r6, r0
 8109c48:	460f      	mov	r7, r1
 8109c4a:	f7f6 ffd5 	bl	8100bf8 <__aeabi_dcmpeq>
 8109c4e:	2800      	cmp	r0, #0
 8109c50:	d09b      	beq.n	8109b8a <_dtoa_r+0x672>
 8109c52:	e7cd      	b.n	8109bf0 <_dtoa_r+0x6d8>
 8109c54:	9a08      	ldr	r2, [sp, #32]
 8109c56:	2a00      	cmp	r2, #0
 8109c58:	f000 80c4 	beq.w	8109de4 <_dtoa_r+0x8cc>
 8109c5c:	9a05      	ldr	r2, [sp, #20]
 8109c5e:	2a01      	cmp	r2, #1
 8109c60:	f300 80a8 	bgt.w	8109db4 <_dtoa_r+0x89c>
 8109c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8109c66:	2a00      	cmp	r2, #0
 8109c68:	f000 80a0 	beq.w	8109dac <_dtoa_r+0x894>
 8109c6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109c70:	9e06      	ldr	r6, [sp, #24]
 8109c72:	4645      	mov	r5, r8
 8109c74:	9a04      	ldr	r2, [sp, #16]
 8109c76:	2101      	movs	r1, #1
 8109c78:	441a      	add	r2, r3
 8109c7a:	4620      	mov	r0, r4
 8109c7c:	4498      	add	r8, r3
 8109c7e:	9204      	str	r2, [sp, #16]
 8109c80:	f001 f946 	bl	810af10 <__i2b>
 8109c84:	4607      	mov	r7, r0
 8109c86:	2d00      	cmp	r5, #0
 8109c88:	dd0b      	ble.n	8109ca2 <_dtoa_r+0x78a>
 8109c8a:	9b04      	ldr	r3, [sp, #16]
 8109c8c:	2b00      	cmp	r3, #0
 8109c8e:	dd08      	ble.n	8109ca2 <_dtoa_r+0x78a>
 8109c90:	42ab      	cmp	r3, r5
 8109c92:	9a04      	ldr	r2, [sp, #16]
 8109c94:	bfa8      	it	ge
 8109c96:	462b      	movge	r3, r5
 8109c98:	eba8 0803 	sub.w	r8, r8, r3
 8109c9c:	1aed      	subs	r5, r5, r3
 8109c9e:	1ad3      	subs	r3, r2, r3
 8109ca0:	9304      	str	r3, [sp, #16]
 8109ca2:	9b06      	ldr	r3, [sp, #24]
 8109ca4:	b1fb      	cbz	r3, 8109ce6 <_dtoa_r+0x7ce>
 8109ca6:	9b08      	ldr	r3, [sp, #32]
 8109ca8:	2b00      	cmp	r3, #0
 8109caa:	f000 809f 	beq.w	8109dec <_dtoa_r+0x8d4>
 8109cae:	2e00      	cmp	r6, #0
 8109cb0:	dd11      	ble.n	8109cd6 <_dtoa_r+0x7be>
 8109cb2:	4639      	mov	r1, r7
 8109cb4:	4632      	mov	r2, r6
 8109cb6:	4620      	mov	r0, r4
 8109cb8:	f001 f9e6 	bl	810b088 <__pow5mult>
 8109cbc:	465a      	mov	r2, fp
 8109cbe:	4601      	mov	r1, r0
 8109cc0:	4607      	mov	r7, r0
 8109cc2:	4620      	mov	r0, r4
 8109cc4:	f001 f93a 	bl	810af3c <__multiply>
 8109cc8:	4659      	mov	r1, fp
 8109cca:	9007      	str	r0, [sp, #28]
 8109ccc:	4620      	mov	r0, r4
 8109cce:	f001 f819 	bl	810ad04 <_Bfree>
 8109cd2:	9b07      	ldr	r3, [sp, #28]
 8109cd4:	469b      	mov	fp, r3
 8109cd6:	9b06      	ldr	r3, [sp, #24]
 8109cd8:	1b9a      	subs	r2, r3, r6
 8109cda:	d004      	beq.n	8109ce6 <_dtoa_r+0x7ce>
 8109cdc:	4659      	mov	r1, fp
 8109cde:	4620      	mov	r0, r4
 8109ce0:	f001 f9d2 	bl	810b088 <__pow5mult>
 8109ce4:	4683      	mov	fp, r0
 8109ce6:	2101      	movs	r1, #1
 8109ce8:	4620      	mov	r0, r4
 8109cea:	f001 f911 	bl	810af10 <__i2b>
 8109cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109cf0:	2b00      	cmp	r3, #0
 8109cf2:	4606      	mov	r6, r0
 8109cf4:	dd7c      	ble.n	8109df0 <_dtoa_r+0x8d8>
 8109cf6:	461a      	mov	r2, r3
 8109cf8:	4601      	mov	r1, r0
 8109cfa:	4620      	mov	r0, r4
 8109cfc:	f001 f9c4 	bl	810b088 <__pow5mult>
 8109d00:	9b05      	ldr	r3, [sp, #20]
 8109d02:	2b01      	cmp	r3, #1
 8109d04:	4606      	mov	r6, r0
 8109d06:	dd76      	ble.n	8109df6 <_dtoa_r+0x8de>
 8109d08:	2300      	movs	r3, #0
 8109d0a:	9306      	str	r3, [sp, #24]
 8109d0c:	6933      	ldr	r3, [r6, #16]
 8109d0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109d12:	6918      	ldr	r0, [r3, #16]
 8109d14:	f001 f8ac 	bl	810ae70 <__hi0bits>
 8109d18:	f1c0 0020 	rsb	r0, r0, #32
 8109d1c:	9b04      	ldr	r3, [sp, #16]
 8109d1e:	4418      	add	r0, r3
 8109d20:	f010 001f 	ands.w	r0, r0, #31
 8109d24:	f000 8086 	beq.w	8109e34 <_dtoa_r+0x91c>
 8109d28:	f1c0 0320 	rsb	r3, r0, #32
 8109d2c:	2b04      	cmp	r3, #4
 8109d2e:	dd7f      	ble.n	8109e30 <_dtoa_r+0x918>
 8109d30:	f1c0 001c 	rsb	r0, r0, #28
 8109d34:	9b04      	ldr	r3, [sp, #16]
 8109d36:	4403      	add	r3, r0
 8109d38:	4480      	add	r8, r0
 8109d3a:	4405      	add	r5, r0
 8109d3c:	9304      	str	r3, [sp, #16]
 8109d3e:	f1b8 0f00 	cmp.w	r8, #0
 8109d42:	dd05      	ble.n	8109d50 <_dtoa_r+0x838>
 8109d44:	4659      	mov	r1, fp
 8109d46:	4642      	mov	r2, r8
 8109d48:	4620      	mov	r0, r4
 8109d4a:	f001 f9f7 	bl	810b13c <__lshift>
 8109d4e:	4683      	mov	fp, r0
 8109d50:	9b04      	ldr	r3, [sp, #16]
 8109d52:	2b00      	cmp	r3, #0
 8109d54:	dd05      	ble.n	8109d62 <_dtoa_r+0x84a>
 8109d56:	4631      	mov	r1, r6
 8109d58:	461a      	mov	r2, r3
 8109d5a:	4620      	mov	r0, r4
 8109d5c:	f001 f9ee 	bl	810b13c <__lshift>
 8109d60:	4606      	mov	r6, r0
 8109d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109d64:	2b00      	cmp	r3, #0
 8109d66:	d069      	beq.n	8109e3c <_dtoa_r+0x924>
 8109d68:	4631      	mov	r1, r6
 8109d6a:	4658      	mov	r0, fp
 8109d6c:	f001 fa52 	bl	810b214 <__mcmp>
 8109d70:	2800      	cmp	r0, #0
 8109d72:	da63      	bge.n	8109e3c <_dtoa_r+0x924>
 8109d74:	2300      	movs	r3, #0
 8109d76:	4659      	mov	r1, fp
 8109d78:	220a      	movs	r2, #10
 8109d7a:	4620      	mov	r0, r4
 8109d7c:	f000 ffe4 	bl	810ad48 <__multadd>
 8109d80:	9b08      	ldr	r3, [sp, #32]
 8109d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109d86:	4683      	mov	fp, r0
 8109d88:	2b00      	cmp	r3, #0
 8109d8a:	f000 818f 	beq.w	810a0ac <_dtoa_r+0xb94>
 8109d8e:	4639      	mov	r1, r7
 8109d90:	2300      	movs	r3, #0
 8109d92:	220a      	movs	r2, #10
 8109d94:	4620      	mov	r0, r4
 8109d96:	f000 ffd7 	bl	810ad48 <__multadd>
 8109d9a:	f1b9 0f00 	cmp.w	r9, #0
 8109d9e:	4607      	mov	r7, r0
 8109da0:	f300 808e 	bgt.w	8109ec0 <_dtoa_r+0x9a8>
 8109da4:	9b05      	ldr	r3, [sp, #20]
 8109da6:	2b02      	cmp	r3, #2
 8109da8:	dc50      	bgt.n	8109e4c <_dtoa_r+0x934>
 8109daa:	e089      	b.n	8109ec0 <_dtoa_r+0x9a8>
 8109dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109db2:	e75d      	b.n	8109c70 <_dtoa_r+0x758>
 8109db4:	9b01      	ldr	r3, [sp, #4]
 8109db6:	1e5e      	subs	r6, r3, #1
 8109db8:	9b06      	ldr	r3, [sp, #24]
 8109dba:	42b3      	cmp	r3, r6
 8109dbc:	bfbf      	itttt	lt
 8109dbe:	9b06      	ldrlt	r3, [sp, #24]
 8109dc0:	9606      	strlt	r6, [sp, #24]
 8109dc2:	1af2      	sublt	r2, r6, r3
 8109dc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8109dc6:	bfb6      	itet	lt
 8109dc8:	189b      	addlt	r3, r3, r2
 8109dca:	1b9e      	subge	r6, r3, r6
 8109dcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8109dce:	9b01      	ldr	r3, [sp, #4]
 8109dd0:	bfb8      	it	lt
 8109dd2:	2600      	movlt	r6, #0
 8109dd4:	2b00      	cmp	r3, #0
 8109dd6:	bfb5      	itete	lt
 8109dd8:	eba8 0503 	sublt.w	r5, r8, r3
 8109ddc:	9b01      	ldrge	r3, [sp, #4]
 8109dde:	2300      	movlt	r3, #0
 8109de0:	4645      	movge	r5, r8
 8109de2:	e747      	b.n	8109c74 <_dtoa_r+0x75c>
 8109de4:	9e06      	ldr	r6, [sp, #24]
 8109de6:	9f08      	ldr	r7, [sp, #32]
 8109de8:	4645      	mov	r5, r8
 8109dea:	e74c      	b.n	8109c86 <_dtoa_r+0x76e>
 8109dec:	9a06      	ldr	r2, [sp, #24]
 8109dee:	e775      	b.n	8109cdc <_dtoa_r+0x7c4>
 8109df0:	9b05      	ldr	r3, [sp, #20]
 8109df2:	2b01      	cmp	r3, #1
 8109df4:	dc18      	bgt.n	8109e28 <_dtoa_r+0x910>
 8109df6:	9b02      	ldr	r3, [sp, #8]
 8109df8:	b9b3      	cbnz	r3, 8109e28 <_dtoa_r+0x910>
 8109dfa:	9b03      	ldr	r3, [sp, #12]
 8109dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109e00:	b9a3      	cbnz	r3, 8109e2c <_dtoa_r+0x914>
 8109e02:	9b03      	ldr	r3, [sp, #12]
 8109e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109e08:	0d1b      	lsrs	r3, r3, #20
 8109e0a:	051b      	lsls	r3, r3, #20
 8109e0c:	b12b      	cbz	r3, 8109e1a <_dtoa_r+0x902>
 8109e0e:	9b04      	ldr	r3, [sp, #16]
 8109e10:	3301      	adds	r3, #1
 8109e12:	9304      	str	r3, [sp, #16]
 8109e14:	f108 0801 	add.w	r8, r8, #1
 8109e18:	2301      	movs	r3, #1
 8109e1a:	9306      	str	r3, [sp, #24]
 8109e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109e1e:	2b00      	cmp	r3, #0
 8109e20:	f47f af74 	bne.w	8109d0c <_dtoa_r+0x7f4>
 8109e24:	2001      	movs	r0, #1
 8109e26:	e779      	b.n	8109d1c <_dtoa_r+0x804>
 8109e28:	2300      	movs	r3, #0
 8109e2a:	e7f6      	b.n	8109e1a <_dtoa_r+0x902>
 8109e2c:	9b02      	ldr	r3, [sp, #8]
 8109e2e:	e7f4      	b.n	8109e1a <_dtoa_r+0x902>
 8109e30:	d085      	beq.n	8109d3e <_dtoa_r+0x826>
 8109e32:	4618      	mov	r0, r3
 8109e34:	301c      	adds	r0, #28
 8109e36:	e77d      	b.n	8109d34 <_dtoa_r+0x81c>
 8109e38:	40240000 	.word	0x40240000
 8109e3c:	9b01      	ldr	r3, [sp, #4]
 8109e3e:	2b00      	cmp	r3, #0
 8109e40:	dc38      	bgt.n	8109eb4 <_dtoa_r+0x99c>
 8109e42:	9b05      	ldr	r3, [sp, #20]
 8109e44:	2b02      	cmp	r3, #2
 8109e46:	dd35      	ble.n	8109eb4 <_dtoa_r+0x99c>
 8109e48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109e4c:	f1b9 0f00 	cmp.w	r9, #0
 8109e50:	d10d      	bne.n	8109e6e <_dtoa_r+0x956>
 8109e52:	4631      	mov	r1, r6
 8109e54:	464b      	mov	r3, r9
 8109e56:	2205      	movs	r2, #5
 8109e58:	4620      	mov	r0, r4
 8109e5a:	f000 ff75 	bl	810ad48 <__multadd>
 8109e5e:	4601      	mov	r1, r0
 8109e60:	4606      	mov	r6, r0
 8109e62:	4658      	mov	r0, fp
 8109e64:	f001 f9d6 	bl	810b214 <__mcmp>
 8109e68:	2800      	cmp	r0, #0
 8109e6a:	f73f adbd 	bgt.w	81099e8 <_dtoa_r+0x4d0>
 8109e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e70:	9d00      	ldr	r5, [sp, #0]
 8109e72:	ea6f 0a03 	mvn.w	sl, r3
 8109e76:	f04f 0800 	mov.w	r8, #0
 8109e7a:	4631      	mov	r1, r6
 8109e7c:	4620      	mov	r0, r4
 8109e7e:	f000 ff41 	bl	810ad04 <_Bfree>
 8109e82:	2f00      	cmp	r7, #0
 8109e84:	f43f aeb4 	beq.w	8109bf0 <_dtoa_r+0x6d8>
 8109e88:	f1b8 0f00 	cmp.w	r8, #0
 8109e8c:	d005      	beq.n	8109e9a <_dtoa_r+0x982>
 8109e8e:	45b8      	cmp	r8, r7
 8109e90:	d003      	beq.n	8109e9a <_dtoa_r+0x982>
 8109e92:	4641      	mov	r1, r8
 8109e94:	4620      	mov	r0, r4
 8109e96:	f000 ff35 	bl	810ad04 <_Bfree>
 8109e9a:	4639      	mov	r1, r7
 8109e9c:	4620      	mov	r0, r4
 8109e9e:	f000 ff31 	bl	810ad04 <_Bfree>
 8109ea2:	e6a5      	b.n	8109bf0 <_dtoa_r+0x6d8>
 8109ea4:	2600      	movs	r6, #0
 8109ea6:	4637      	mov	r7, r6
 8109ea8:	e7e1      	b.n	8109e6e <_dtoa_r+0x956>
 8109eaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8109eac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109eb0:	4637      	mov	r7, r6
 8109eb2:	e599      	b.n	81099e8 <_dtoa_r+0x4d0>
 8109eb4:	9b08      	ldr	r3, [sp, #32]
 8109eb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109eba:	2b00      	cmp	r3, #0
 8109ebc:	f000 80fd 	beq.w	810a0ba <_dtoa_r+0xba2>
 8109ec0:	2d00      	cmp	r5, #0
 8109ec2:	dd05      	ble.n	8109ed0 <_dtoa_r+0x9b8>
 8109ec4:	4639      	mov	r1, r7
 8109ec6:	462a      	mov	r2, r5
 8109ec8:	4620      	mov	r0, r4
 8109eca:	f001 f937 	bl	810b13c <__lshift>
 8109ece:	4607      	mov	r7, r0
 8109ed0:	9b06      	ldr	r3, [sp, #24]
 8109ed2:	2b00      	cmp	r3, #0
 8109ed4:	d05c      	beq.n	8109f90 <_dtoa_r+0xa78>
 8109ed6:	6879      	ldr	r1, [r7, #4]
 8109ed8:	4620      	mov	r0, r4
 8109eda:	f000 fed3 	bl	810ac84 <_Balloc>
 8109ede:	4605      	mov	r5, r0
 8109ee0:	b928      	cbnz	r0, 8109eee <_dtoa_r+0x9d6>
 8109ee2:	4b80      	ldr	r3, [pc, #512]	; (810a0e4 <_dtoa_r+0xbcc>)
 8109ee4:	4602      	mov	r2, r0
 8109ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109eea:	f7ff bb2e 	b.w	810954a <_dtoa_r+0x32>
 8109eee:	693a      	ldr	r2, [r7, #16]
 8109ef0:	3202      	adds	r2, #2
 8109ef2:	0092      	lsls	r2, r2, #2
 8109ef4:	f107 010c 	add.w	r1, r7, #12
 8109ef8:	300c      	adds	r0, #12
 8109efa:	f7fd fa17 	bl	810732c <memcpy>
 8109efe:	2201      	movs	r2, #1
 8109f00:	4629      	mov	r1, r5
 8109f02:	4620      	mov	r0, r4
 8109f04:	f001 f91a 	bl	810b13c <__lshift>
 8109f08:	9b00      	ldr	r3, [sp, #0]
 8109f0a:	3301      	adds	r3, #1
 8109f0c:	9301      	str	r3, [sp, #4]
 8109f0e:	9b00      	ldr	r3, [sp, #0]
 8109f10:	444b      	add	r3, r9
 8109f12:	9307      	str	r3, [sp, #28]
 8109f14:	9b02      	ldr	r3, [sp, #8]
 8109f16:	f003 0301 	and.w	r3, r3, #1
 8109f1a:	46b8      	mov	r8, r7
 8109f1c:	9306      	str	r3, [sp, #24]
 8109f1e:	4607      	mov	r7, r0
 8109f20:	9b01      	ldr	r3, [sp, #4]
 8109f22:	4631      	mov	r1, r6
 8109f24:	3b01      	subs	r3, #1
 8109f26:	4658      	mov	r0, fp
 8109f28:	9302      	str	r3, [sp, #8]
 8109f2a:	f7ff fa6a 	bl	8109402 <quorem>
 8109f2e:	4603      	mov	r3, r0
 8109f30:	3330      	adds	r3, #48	; 0x30
 8109f32:	9004      	str	r0, [sp, #16]
 8109f34:	4641      	mov	r1, r8
 8109f36:	4658      	mov	r0, fp
 8109f38:	9308      	str	r3, [sp, #32]
 8109f3a:	f001 f96b 	bl	810b214 <__mcmp>
 8109f3e:	463a      	mov	r2, r7
 8109f40:	4681      	mov	r9, r0
 8109f42:	4631      	mov	r1, r6
 8109f44:	4620      	mov	r0, r4
 8109f46:	f001 f981 	bl	810b24c <__mdiff>
 8109f4a:	68c2      	ldr	r2, [r0, #12]
 8109f4c:	9b08      	ldr	r3, [sp, #32]
 8109f4e:	4605      	mov	r5, r0
 8109f50:	bb02      	cbnz	r2, 8109f94 <_dtoa_r+0xa7c>
 8109f52:	4601      	mov	r1, r0
 8109f54:	4658      	mov	r0, fp
 8109f56:	f001 f95d 	bl	810b214 <__mcmp>
 8109f5a:	9b08      	ldr	r3, [sp, #32]
 8109f5c:	4602      	mov	r2, r0
 8109f5e:	4629      	mov	r1, r5
 8109f60:	4620      	mov	r0, r4
 8109f62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8109f66:	f000 fecd 	bl	810ad04 <_Bfree>
 8109f6a:	9b05      	ldr	r3, [sp, #20]
 8109f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109f6e:	9d01      	ldr	r5, [sp, #4]
 8109f70:	ea43 0102 	orr.w	r1, r3, r2
 8109f74:	9b06      	ldr	r3, [sp, #24]
 8109f76:	430b      	orrs	r3, r1
 8109f78:	9b08      	ldr	r3, [sp, #32]
 8109f7a:	d10d      	bne.n	8109f98 <_dtoa_r+0xa80>
 8109f7c:	2b39      	cmp	r3, #57	; 0x39
 8109f7e:	d029      	beq.n	8109fd4 <_dtoa_r+0xabc>
 8109f80:	f1b9 0f00 	cmp.w	r9, #0
 8109f84:	dd01      	ble.n	8109f8a <_dtoa_r+0xa72>
 8109f86:	9b04      	ldr	r3, [sp, #16]
 8109f88:	3331      	adds	r3, #49	; 0x31
 8109f8a:	9a02      	ldr	r2, [sp, #8]
 8109f8c:	7013      	strb	r3, [r2, #0]
 8109f8e:	e774      	b.n	8109e7a <_dtoa_r+0x962>
 8109f90:	4638      	mov	r0, r7
 8109f92:	e7b9      	b.n	8109f08 <_dtoa_r+0x9f0>
 8109f94:	2201      	movs	r2, #1
 8109f96:	e7e2      	b.n	8109f5e <_dtoa_r+0xa46>
 8109f98:	f1b9 0f00 	cmp.w	r9, #0
 8109f9c:	db06      	blt.n	8109fac <_dtoa_r+0xa94>
 8109f9e:	9905      	ldr	r1, [sp, #20]
 8109fa0:	ea41 0909 	orr.w	r9, r1, r9
 8109fa4:	9906      	ldr	r1, [sp, #24]
 8109fa6:	ea59 0101 	orrs.w	r1, r9, r1
 8109faa:	d120      	bne.n	8109fee <_dtoa_r+0xad6>
 8109fac:	2a00      	cmp	r2, #0
 8109fae:	ddec      	ble.n	8109f8a <_dtoa_r+0xa72>
 8109fb0:	4659      	mov	r1, fp
 8109fb2:	2201      	movs	r2, #1
 8109fb4:	4620      	mov	r0, r4
 8109fb6:	9301      	str	r3, [sp, #4]
 8109fb8:	f001 f8c0 	bl	810b13c <__lshift>
 8109fbc:	4631      	mov	r1, r6
 8109fbe:	4683      	mov	fp, r0
 8109fc0:	f001 f928 	bl	810b214 <__mcmp>
 8109fc4:	2800      	cmp	r0, #0
 8109fc6:	9b01      	ldr	r3, [sp, #4]
 8109fc8:	dc02      	bgt.n	8109fd0 <_dtoa_r+0xab8>
 8109fca:	d1de      	bne.n	8109f8a <_dtoa_r+0xa72>
 8109fcc:	07da      	lsls	r2, r3, #31
 8109fce:	d5dc      	bpl.n	8109f8a <_dtoa_r+0xa72>
 8109fd0:	2b39      	cmp	r3, #57	; 0x39
 8109fd2:	d1d8      	bne.n	8109f86 <_dtoa_r+0xa6e>
 8109fd4:	9a02      	ldr	r2, [sp, #8]
 8109fd6:	2339      	movs	r3, #57	; 0x39
 8109fd8:	7013      	strb	r3, [r2, #0]
 8109fda:	462b      	mov	r3, r5
 8109fdc:	461d      	mov	r5, r3
 8109fde:	3b01      	subs	r3, #1
 8109fe0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8109fe4:	2a39      	cmp	r2, #57	; 0x39
 8109fe6:	d050      	beq.n	810a08a <_dtoa_r+0xb72>
 8109fe8:	3201      	adds	r2, #1
 8109fea:	701a      	strb	r2, [r3, #0]
 8109fec:	e745      	b.n	8109e7a <_dtoa_r+0x962>
 8109fee:	2a00      	cmp	r2, #0
 8109ff0:	dd03      	ble.n	8109ffa <_dtoa_r+0xae2>
 8109ff2:	2b39      	cmp	r3, #57	; 0x39
 8109ff4:	d0ee      	beq.n	8109fd4 <_dtoa_r+0xabc>
 8109ff6:	3301      	adds	r3, #1
 8109ff8:	e7c7      	b.n	8109f8a <_dtoa_r+0xa72>
 8109ffa:	9a01      	ldr	r2, [sp, #4]
 8109ffc:	9907      	ldr	r1, [sp, #28]
 8109ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 810a002:	428a      	cmp	r2, r1
 810a004:	d02a      	beq.n	810a05c <_dtoa_r+0xb44>
 810a006:	4659      	mov	r1, fp
 810a008:	2300      	movs	r3, #0
 810a00a:	220a      	movs	r2, #10
 810a00c:	4620      	mov	r0, r4
 810a00e:	f000 fe9b 	bl	810ad48 <__multadd>
 810a012:	45b8      	cmp	r8, r7
 810a014:	4683      	mov	fp, r0
 810a016:	f04f 0300 	mov.w	r3, #0
 810a01a:	f04f 020a 	mov.w	r2, #10
 810a01e:	4641      	mov	r1, r8
 810a020:	4620      	mov	r0, r4
 810a022:	d107      	bne.n	810a034 <_dtoa_r+0xb1c>
 810a024:	f000 fe90 	bl	810ad48 <__multadd>
 810a028:	4680      	mov	r8, r0
 810a02a:	4607      	mov	r7, r0
 810a02c:	9b01      	ldr	r3, [sp, #4]
 810a02e:	3301      	adds	r3, #1
 810a030:	9301      	str	r3, [sp, #4]
 810a032:	e775      	b.n	8109f20 <_dtoa_r+0xa08>
 810a034:	f000 fe88 	bl	810ad48 <__multadd>
 810a038:	4639      	mov	r1, r7
 810a03a:	4680      	mov	r8, r0
 810a03c:	2300      	movs	r3, #0
 810a03e:	220a      	movs	r2, #10
 810a040:	4620      	mov	r0, r4
 810a042:	f000 fe81 	bl	810ad48 <__multadd>
 810a046:	4607      	mov	r7, r0
 810a048:	e7f0      	b.n	810a02c <_dtoa_r+0xb14>
 810a04a:	f1b9 0f00 	cmp.w	r9, #0
 810a04e:	9a00      	ldr	r2, [sp, #0]
 810a050:	bfcc      	ite	gt
 810a052:	464d      	movgt	r5, r9
 810a054:	2501      	movle	r5, #1
 810a056:	4415      	add	r5, r2
 810a058:	f04f 0800 	mov.w	r8, #0
 810a05c:	4659      	mov	r1, fp
 810a05e:	2201      	movs	r2, #1
 810a060:	4620      	mov	r0, r4
 810a062:	9301      	str	r3, [sp, #4]
 810a064:	f001 f86a 	bl	810b13c <__lshift>
 810a068:	4631      	mov	r1, r6
 810a06a:	4683      	mov	fp, r0
 810a06c:	f001 f8d2 	bl	810b214 <__mcmp>
 810a070:	2800      	cmp	r0, #0
 810a072:	dcb2      	bgt.n	8109fda <_dtoa_r+0xac2>
 810a074:	d102      	bne.n	810a07c <_dtoa_r+0xb64>
 810a076:	9b01      	ldr	r3, [sp, #4]
 810a078:	07db      	lsls	r3, r3, #31
 810a07a:	d4ae      	bmi.n	8109fda <_dtoa_r+0xac2>
 810a07c:	462b      	mov	r3, r5
 810a07e:	461d      	mov	r5, r3
 810a080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a084:	2a30      	cmp	r2, #48	; 0x30
 810a086:	d0fa      	beq.n	810a07e <_dtoa_r+0xb66>
 810a088:	e6f7      	b.n	8109e7a <_dtoa_r+0x962>
 810a08a:	9a00      	ldr	r2, [sp, #0]
 810a08c:	429a      	cmp	r2, r3
 810a08e:	d1a5      	bne.n	8109fdc <_dtoa_r+0xac4>
 810a090:	f10a 0a01 	add.w	sl, sl, #1
 810a094:	2331      	movs	r3, #49	; 0x31
 810a096:	e779      	b.n	8109f8c <_dtoa_r+0xa74>
 810a098:	4b13      	ldr	r3, [pc, #76]	; (810a0e8 <_dtoa_r+0xbd0>)
 810a09a:	f7ff baaf 	b.w	81095fc <_dtoa_r+0xe4>
 810a09e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a0a0:	2b00      	cmp	r3, #0
 810a0a2:	f47f aa86 	bne.w	81095b2 <_dtoa_r+0x9a>
 810a0a6:	4b11      	ldr	r3, [pc, #68]	; (810a0ec <_dtoa_r+0xbd4>)
 810a0a8:	f7ff baa8 	b.w	81095fc <_dtoa_r+0xe4>
 810a0ac:	f1b9 0f00 	cmp.w	r9, #0
 810a0b0:	dc03      	bgt.n	810a0ba <_dtoa_r+0xba2>
 810a0b2:	9b05      	ldr	r3, [sp, #20]
 810a0b4:	2b02      	cmp	r3, #2
 810a0b6:	f73f aec9 	bgt.w	8109e4c <_dtoa_r+0x934>
 810a0ba:	9d00      	ldr	r5, [sp, #0]
 810a0bc:	4631      	mov	r1, r6
 810a0be:	4658      	mov	r0, fp
 810a0c0:	f7ff f99f 	bl	8109402 <quorem>
 810a0c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810a0c8:	f805 3b01 	strb.w	r3, [r5], #1
 810a0cc:	9a00      	ldr	r2, [sp, #0]
 810a0ce:	1aaa      	subs	r2, r5, r2
 810a0d0:	4591      	cmp	r9, r2
 810a0d2:	ddba      	ble.n	810a04a <_dtoa_r+0xb32>
 810a0d4:	4659      	mov	r1, fp
 810a0d6:	2300      	movs	r3, #0
 810a0d8:	220a      	movs	r2, #10
 810a0da:	4620      	mov	r0, r4
 810a0dc:	f000 fe34 	bl	810ad48 <__multadd>
 810a0e0:	4683      	mov	fp, r0
 810a0e2:	e7eb      	b.n	810a0bc <_dtoa_r+0xba4>
 810a0e4:	0810c00c 	.word	0x0810c00c
 810a0e8:	0810be09 	.word	0x0810be09
 810a0ec:	0810bf89 	.word	0x0810bf89

0810a0f0 <__sflush_r>:
 810a0f0:	898a      	ldrh	r2, [r1, #12]
 810a0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a0f6:	4605      	mov	r5, r0
 810a0f8:	0710      	lsls	r0, r2, #28
 810a0fa:	460c      	mov	r4, r1
 810a0fc:	d458      	bmi.n	810a1b0 <__sflush_r+0xc0>
 810a0fe:	684b      	ldr	r3, [r1, #4]
 810a100:	2b00      	cmp	r3, #0
 810a102:	dc05      	bgt.n	810a110 <__sflush_r+0x20>
 810a104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a106:	2b00      	cmp	r3, #0
 810a108:	dc02      	bgt.n	810a110 <__sflush_r+0x20>
 810a10a:	2000      	movs	r0, #0
 810a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a112:	2e00      	cmp	r6, #0
 810a114:	d0f9      	beq.n	810a10a <__sflush_r+0x1a>
 810a116:	2300      	movs	r3, #0
 810a118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a11c:	682f      	ldr	r7, [r5, #0]
 810a11e:	602b      	str	r3, [r5, #0]
 810a120:	d032      	beq.n	810a188 <__sflush_r+0x98>
 810a122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a124:	89a3      	ldrh	r3, [r4, #12]
 810a126:	075a      	lsls	r2, r3, #29
 810a128:	d505      	bpl.n	810a136 <__sflush_r+0x46>
 810a12a:	6863      	ldr	r3, [r4, #4]
 810a12c:	1ac0      	subs	r0, r0, r3
 810a12e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a130:	b10b      	cbz	r3, 810a136 <__sflush_r+0x46>
 810a132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a134:	1ac0      	subs	r0, r0, r3
 810a136:	2300      	movs	r3, #0
 810a138:	4602      	mov	r2, r0
 810a13a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a13c:	6a21      	ldr	r1, [r4, #32]
 810a13e:	4628      	mov	r0, r5
 810a140:	47b0      	blx	r6
 810a142:	1c43      	adds	r3, r0, #1
 810a144:	89a3      	ldrh	r3, [r4, #12]
 810a146:	d106      	bne.n	810a156 <__sflush_r+0x66>
 810a148:	6829      	ldr	r1, [r5, #0]
 810a14a:	291d      	cmp	r1, #29
 810a14c:	d82c      	bhi.n	810a1a8 <__sflush_r+0xb8>
 810a14e:	4a2a      	ldr	r2, [pc, #168]	; (810a1f8 <__sflush_r+0x108>)
 810a150:	40ca      	lsrs	r2, r1
 810a152:	07d6      	lsls	r6, r2, #31
 810a154:	d528      	bpl.n	810a1a8 <__sflush_r+0xb8>
 810a156:	2200      	movs	r2, #0
 810a158:	6062      	str	r2, [r4, #4]
 810a15a:	04d9      	lsls	r1, r3, #19
 810a15c:	6922      	ldr	r2, [r4, #16]
 810a15e:	6022      	str	r2, [r4, #0]
 810a160:	d504      	bpl.n	810a16c <__sflush_r+0x7c>
 810a162:	1c42      	adds	r2, r0, #1
 810a164:	d101      	bne.n	810a16a <__sflush_r+0x7a>
 810a166:	682b      	ldr	r3, [r5, #0]
 810a168:	b903      	cbnz	r3, 810a16c <__sflush_r+0x7c>
 810a16a:	6560      	str	r0, [r4, #84]	; 0x54
 810a16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a16e:	602f      	str	r7, [r5, #0]
 810a170:	2900      	cmp	r1, #0
 810a172:	d0ca      	beq.n	810a10a <__sflush_r+0x1a>
 810a174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a178:	4299      	cmp	r1, r3
 810a17a:	d002      	beq.n	810a182 <__sflush_r+0x92>
 810a17c:	4628      	mov	r0, r5
 810a17e:	f7fd f8eb 	bl	8107358 <_free_r>
 810a182:	2000      	movs	r0, #0
 810a184:	6360      	str	r0, [r4, #52]	; 0x34
 810a186:	e7c1      	b.n	810a10c <__sflush_r+0x1c>
 810a188:	6a21      	ldr	r1, [r4, #32]
 810a18a:	2301      	movs	r3, #1
 810a18c:	4628      	mov	r0, r5
 810a18e:	47b0      	blx	r6
 810a190:	1c41      	adds	r1, r0, #1
 810a192:	d1c7      	bne.n	810a124 <__sflush_r+0x34>
 810a194:	682b      	ldr	r3, [r5, #0]
 810a196:	2b00      	cmp	r3, #0
 810a198:	d0c4      	beq.n	810a124 <__sflush_r+0x34>
 810a19a:	2b1d      	cmp	r3, #29
 810a19c:	d001      	beq.n	810a1a2 <__sflush_r+0xb2>
 810a19e:	2b16      	cmp	r3, #22
 810a1a0:	d101      	bne.n	810a1a6 <__sflush_r+0xb6>
 810a1a2:	602f      	str	r7, [r5, #0]
 810a1a4:	e7b1      	b.n	810a10a <__sflush_r+0x1a>
 810a1a6:	89a3      	ldrh	r3, [r4, #12]
 810a1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a1ac:	81a3      	strh	r3, [r4, #12]
 810a1ae:	e7ad      	b.n	810a10c <__sflush_r+0x1c>
 810a1b0:	690f      	ldr	r7, [r1, #16]
 810a1b2:	2f00      	cmp	r7, #0
 810a1b4:	d0a9      	beq.n	810a10a <__sflush_r+0x1a>
 810a1b6:	0793      	lsls	r3, r2, #30
 810a1b8:	680e      	ldr	r6, [r1, #0]
 810a1ba:	bf08      	it	eq
 810a1bc:	694b      	ldreq	r3, [r1, #20]
 810a1be:	600f      	str	r7, [r1, #0]
 810a1c0:	bf18      	it	ne
 810a1c2:	2300      	movne	r3, #0
 810a1c4:	eba6 0807 	sub.w	r8, r6, r7
 810a1c8:	608b      	str	r3, [r1, #8]
 810a1ca:	f1b8 0f00 	cmp.w	r8, #0
 810a1ce:	dd9c      	ble.n	810a10a <__sflush_r+0x1a>
 810a1d0:	6a21      	ldr	r1, [r4, #32]
 810a1d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a1d4:	4643      	mov	r3, r8
 810a1d6:	463a      	mov	r2, r7
 810a1d8:	4628      	mov	r0, r5
 810a1da:	47b0      	blx	r6
 810a1dc:	2800      	cmp	r0, #0
 810a1de:	dc06      	bgt.n	810a1ee <__sflush_r+0xfe>
 810a1e0:	89a3      	ldrh	r3, [r4, #12]
 810a1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a1e6:	81a3      	strh	r3, [r4, #12]
 810a1e8:	f04f 30ff 	mov.w	r0, #4294967295
 810a1ec:	e78e      	b.n	810a10c <__sflush_r+0x1c>
 810a1ee:	4407      	add	r7, r0
 810a1f0:	eba8 0800 	sub.w	r8, r8, r0
 810a1f4:	e7e9      	b.n	810a1ca <__sflush_r+0xda>
 810a1f6:	bf00      	nop
 810a1f8:	20400001 	.word	0x20400001

0810a1fc <_fflush_r>:
 810a1fc:	b538      	push	{r3, r4, r5, lr}
 810a1fe:	690b      	ldr	r3, [r1, #16]
 810a200:	4605      	mov	r5, r0
 810a202:	460c      	mov	r4, r1
 810a204:	b913      	cbnz	r3, 810a20c <_fflush_r+0x10>
 810a206:	2500      	movs	r5, #0
 810a208:	4628      	mov	r0, r5
 810a20a:	bd38      	pop	{r3, r4, r5, pc}
 810a20c:	b118      	cbz	r0, 810a216 <_fflush_r+0x1a>
 810a20e:	6983      	ldr	r3, [r0, #24]
 810a210:	b90b      	cbnz	r3, 810a216 <_fflush_r+0x1a>
 810a212:	f000 f887 	bl	810a324 <__sinit>
 810a216:	4b14      	ldr	r3, [pc, #80]	; (810a268 <_fflush_r+0x6c>)
 810a218:	429c      	cmp	r4, r3
 810a21a:	d11b      	bne.n	810a254 <_fflush_r+0x58>
 810a21c:	686c      	ldr	r4, [r5, #4]
 810a21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a222:	2b00      	cmp	r3, #0
 810a224:	d0ef      	beq.n	810a206 <_fflush_r+0xa>
 810a226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a228:	07d0      	lsls	r0, r2, #31
 810a22a:	d404      	bmi.n	810a236 <_fflush_r+0x3a>
 810a22c:	0599      	lsls	r1, r3, #22
 810a22e:	d402      	bmi.n	810a236 <_fflush_r+0x3a>
 810a230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a232:	f000 fc88 	bl	810ab46 <__retarget_lock_acquire_recursive>
 810a236:	4628      	mov	r0, r5
 810a238:	4621      	mov	r1, r4
 810a23a:	f7ff ff59 	bl	810a0f0 <__sflush_r>
 810a23e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a240:	07da      	lsls	r2, r3, #31
 810a242:	4605      	mov	r5, r0
 810a244:	d4e0      	bmi.n	810a208 <_fflush_r+0xc>
 810a246:	89a3      	ldrh	r3, [r4, #12]
 810a248:	059b      	lsls	r3, r3, #22
 810a24a:	d4dd      	bmi.n	810a208 <_fflush_r+0xc>
 810a24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a24e:	f000 fc7b 	bl	810ab48 <__retarget_lock_release_recursive>
 810a252:	e7d9      	b.n	810a208 <_fflush_r+0xc>
 810a254:	4b05      	ldr	r3, [pc, #20]	; (810a26c <_fflush_r+0x70>)
 810a256:	429c      	cmp	r4, r3
 810a258:	d101      	bne.n	810a25e <_fflush_r+0x62>
 810a25a:	68ac      	ldr	r4, [r5, #8]
 810a25c:	e7df      	b.n	810a21e <_fflush_r+0x22>
 810a25e:	4b04      	ldr	r3, [pc, #16]	; (810a270 <_fflush_r+0x74>)
 810a260:	429c      	cmp	r4, r3
 810a262:	bf08      	it	eq
 810a264:	68ec      	ldreq	r4, [r5, #12]
 810a266:	e7da      	b.n	810a21e <_fflush_r+0x22>
 810a268:	0810c040 	.word	0x0810c040
 810a26c:	0810c060 	.word	0x0810c060
 810a270:	0810c020 	.word	0x0810c020

0810a274 <std>:
 810a274:	2300      	movs	r3, #0
 810a276:	b510      	push	{r4, lr}
 810a278:	4604      	mov	r4, r0
 810a27a:	e9c0 3300 	strd	r3, r3, [r0]
 810a27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a282:	6083      	str	r3, [r0, #8]
 810a284:	8181      	strh	r1, [r0, #12]
 810a286:	6643      	str	r3, [r0, #100]	; 0x64
 810a288:	81c2      	strh	r2, [r0, #14]
 810a28a:	6183      	str	r3, [r0, #24]
 810a28c:	4619      	mov	r1, r3
 810a28e:	2208      	movs	r2, #8
 810a290:	305c      	adds	r0, #92	; 0x5c
 810a292:	f7fd f859 	bl	8107348 <memset>
 810a296:	4b05      	ldr	r3, [pc, #20]	; (810a2ac <std+0x38>)
 810a298:	6263      	str	r3, [r4, #36]	; 0x24
 810a29a:	4b05      	ldr	r3, [pc, #20]	; (810a2b0 <std+0x3c>)
 810a29c:	62a3      	str	r3, [r4, #40]	; 0x28
 810a29e:	4b05      	ldr	r3, [pc, #20]	; (810a2b4 <std+0x40>)
 810a2a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a2a2:	4b05      	ldr	r3, [pc, #20]	; (810a2b8 <std+0x44>)
 810a2a4:	6224      	str	r4, [r4, #32]
 810a2a6:	6323      	str	r3, [r4, #48]	; 0x30
 810a2a8:	bd10      	pop	{r4, pc}
 810a2aa:	bf00      	nop
 810a2ac:	0810b9b9 	.word	0x0810b9b9
 810a2b0:	0810b9db 	.word	0x0810b9db
 810a2b4:	0810ba13 	.word	0x0810ba13
 810a2b8:	0810ba37 	.word	0x0810ba37

0810a2bc <_cleanup_r>:
 810a2bc:	4901      	ldr	r1, [pc, #4]	; (810a2c4 <_cleanup_r+0x8>)
 810a2be:	f000 b8af 	b.w	810a420 <_fwalk_reent>
 810a2c2:	bf00      	nop
 810a2c4:	0810a1fd 	.word	0x0810a1fd

0810a2c8 <__sfmoreglue>:
 810a2c8:	b570      	push	{r4, r5, r6, lr}
 810a2ca:	1e4a      	subs	r2, r1, #1
 810a2cc:	2568      	movs	r5, #104	; 0x68
 810a2ce:	4355      	muls	r5, r2
 810a2d0:	460e      	mov	r6, r1
 810a2d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a2d6:	f7fd f88f 	bl	81073f8 <_malloc_r>
 810a2da:	4604      	mov	r4, r0
 810a2dc:	b140      	cbz	r0, 810a2f0 <__sfmoreglue+0x28>
 810a2de:	2100      	movs	r1, #0
 810a2e0:	e9c0 1600 	strd	r1, r6, [r0]
 810a2e4:	300c      	adds	r0, #12
 810a2e6:	60a0      	str	r0, [r4, #8]
 810a2e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a2ec:	f7fd f82c 	bl	8107348 <memset>
 810a2f0:	4620      	mov	r0, r4
 810a2f2:	bd70      	pop	{r4, r5, r6, pc}

0810a2f4 <__sfp_lock_acquire>:
 810a2f4:	4801      	ldr	r0, [pc, #4]	; (810a2fc <__sfp_lock_acquire+0x8>)
 810a2f6:	f000 bc26 	b.w	810ab46 <__retarget_lock_acquire_recursive>
 810a2fa:	bf00      	nop
 810a2fc:	10000524 	.word	0x10000524

0810a300 <__sfp_lock_release>:
 810a300:	4801      	ldr	r0, [pc, #4]	; (810a308 <__sfp_lock_release+0x8>)
 810a302:	f000 bc21 	b.w	810ab48 <__retarget_lock_release_recursive>
 810a306:	bf00      	nop
 810a308:	10000524 	.word	0x10000524

0810a30c <__sinit_lock_acquire>:
 810a30c:	4801      	ldr	r0, [pc, #4]	; (810a314 <__sinit_lock_acquire+0x8>)
 810a30e:	f000 bc1a 	b.w	810ab46 <__retarget_lock_acquire_recursive>
 810a312:	bf00      	nop
 810a314:	1000051f 	.word	0x1000051f

0810a318 <__sinit_lock_release>:
 810a318:	4801      	ldr	r0, [pc, #4]	; (810a320 <__sinit_lock_release+0x8>)
 810a31a:	f000 bc15 	b.w	810ab48 <__retarget_lock_release_recursive>
 810a31e:	bf00      	nop
 810a320:	1000051f 	.word	0x1000051f

0810a324 <__sinit>:
 810a324:	b510      	push	{r4, lr}
 810a326:	4604      	mov	r4, r0
 810a328:	f7ff fff0 	bl	810a30c <__sinit_lock_acquire>
 810a32c:	69a3      	ldr	r3, [r4, #24]
 810a32e:	b11b      	cbz	r3, 810a338 <__sinit+0x14>
 810a330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a334:	f7ff bff0 	b.w	810a318 <__sinit_lock_release>
 810a338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a33c:	6523      	str	r3, [r4, #80]	; 0x50
 810a33e:	4b13      	ldr	r3, [pc, #76]	; (810a38c <__sinit+0x68>)
 810a340:	4a13      	ldr	r2, [pc, #76]	; (810a390 <__sinit+0x6c>)
 810a342:	681b      	ldr	r3, [r3, #0]
 810a344:	62a2      	str	r2, [r4, #40]	; 0x28
 810a346:	42a3      	cmp	r3, r4
 810a348:	bf04      	itt	eq
 810a34a:	2301      	moveq	r3, #1
 810a34c:	61a3      	streq	r3, [r4, #24]
 810a34e:	4620      	mov	r0, r4
 810a350:	f000 f820 	bl	810a394 <__sfp>
 810a354:	6060      	str	r0, [r4, #4]
 810a356:	4620      	mov	r0, r4
 810a358:	f000 f81c 	bl	810a394 <__sfp>
 810a35c:	60a0      	str	r0, [r4, #8]
 810a35e:	4620      	mov	r0, r4
 810a360:	f000 f818 	bl	810a394 <__sfp>
 810a364:	2200      	movs	r2, #0
 810a366:	60e0      	str	r0, [r4, #12]
 810a368:	2104      	movs	r1, #4
 810a36a:	6860      	ldr	r0, [r4, #4]
 810a36c:	f7ff ff82 	bl	810a274 <std>
 810a370:	68a0      	ldr	r0, [r4, #8]
 810a372:	2201      	movs	r2, #1
 810a374:	2109      	movs	r1, #9
 810a376:	f7ff ff7d 	bl	810a274 <std>
 810a37a:	68e0      	ldr	r0, [r4, #12]
 810a37c:	2202      	movs	r2, #2
 810a37e:	2112      	movs	r1, #18
 810a380:	f7ff ff78 	bl	810a274 <std>
 810a384:	2301      	movs	r3, #1
 810a386:	61a3      	str	r3, [r4, #24]
 810a388:	e7d2      	b.n	810a330 <__sinit+0xc>
 810a38a:	bf00      	nop
 810a38c:	0810bde4 	.word	0x0810bde4
 810a390:	0810a2bd 	.word	0x0810a2bd

0810a394 <__sfp>:
 810a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a396:	4607      	mov	r7, r0
 810a398:	f7ff ffac 	bl	810a2f4 <__sfp_lock_acquire>
 810a39c:	4b1e      	ldr	r3, [pc, #120]	; (810a418 <__sfp+0x84>)
 810a39e:	681e      	ldr	r6, [r3, #0]
 810a3a0:	69b3      	ldr	r3, [r6, #24]
 810a3a2:	b913      	cbnz	r3, 810a3aa <__sfp+0x16>
 810a3a4:	4630      	mov	r0, r6
 810a3a6:	f7ff ffbd 	bl	810a324 <__sinit>
 810a3aa:	3648      	adds	r6, #72	; 0x48
 810a3ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a3b0:	3b01      	subs	r3, #1
 810a3b2:	d503      	bpl.n	810a3bc <__sfp+0x28>
 810a3b4:	6833      	ldr	r3, [r6, #0]
 810a3b6:	b30b      	cbz	r3, 810a3fc <__sfp+0x68>
 810a3b8:	6836      	ldr	r6, [r6, #0]
 810a3ba:	e7f7      	b.n	810a3ac <__sfp+0x18>
 810a3bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a3c0:	b9d5      	cbnz	r5, 810a3f8 <__sfp+0x64>
 810a3c2:	4b16      	ldr	r3, [pc, #88]	; (810a41c <__sfp+0x88>)
 810a3c4:	60e3      	str	r3, [r4, #12]
 810a3c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a3ca:	6665      	str	r5, [r4, #100]	; 0x64
 810a3cc:	f000 fbba 	bl	810ab44 <__retarget_lock_init_recursive>
 810a3d0:	f7ff ff96 	bl	810a300 <__sfp_lock_release>
 810a3d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a3d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a3dc:	6025      	str	r5, [r4, #0]
 810a3de:	61a5      	str	r5, [r4, #24]
 810a3e0:	2208      	movs	r2, #8
 810a3e2:	4629      	mov	r1, r5
 810a3e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a3e8:	f7fc ffae 	bl	8107348 <memset>
 810a3ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a3f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a3f4:	4620      	mov	r0, r4
 810a3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a3f8:	3468      	adds	r4, #104	; 0x68
 810a3fa:	e7d9      	b.n	810a3b0 <__sfp+0x1c>
 810a3fc:	2104      	movs	r1, #4
 810a3fe:	4638      	mov	r0, r7
 810a400:	f7ff ff62 	bl	810a2c8 <__sfmoreglue>
 810a404:	4604      	mov	r4, r0
 810a406:	6030      	str	r0, [r6, #0]
 810a408:	2800      	cmp	r0, #0
 810a40a:	d1d5      	bne.n	810a3b8 <__sfp+0x24>
 810a40c:	f7ff ff78 	bl	810a300 <__sfp_lock_release>
 810a410:	230c      	movs	r3, #12
 810a412:	603b      	str	r3, [r7, #0]
 810a414:	e7ee      	b.n	810a3f4 <__sfp+0x60>
 810a416:	bf00      	nop
 810a418:	0810bde4 	.word	0x0810bde4
 810a41c:	ffff0001 	.word	0xffff0001

0810a420 <_fwalk_reent>:
 810a420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a424:	4606      	mov	r6, r0
 810a426:	4688      	mov	r8, r1
 810a428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a42c:	2700      	movs	r7, #0
 810a42e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a432:	f1b9 0901 	subs.w	r9, r9, #1
 810a436:	d505      	bpl.n	810a444 <_fwalk_reent+0x24>
 810a438:	6824      	ldr	r4, [r4, #0]
 810a43a:	2c00      	cmp	r4, #0
 810a43c:	d1f7      	bne.n	810a42e <_fwalk_reent+0xe>
 810a43e:	4638      	mov	r0, r7
 810a440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a444:	89ab      	ldrh	r3, [r5, #12]
 810a446:	2b01      	cmp	r3, #1
 810a448:	d907      	bls.n	810a45a <_fwalk_reent+0x3a>
 810a44a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a44e:	3301      	adds	r3, #1
 810a450:	d003      	beq.n	810a45a <_fwalk_reent+0x3a>
 810a452:	4629      	mov	r1, r5
 810a454:	4630      	mov	r0, r6
 810a456:	47c0      	blx	r8
 810a458:	4307      	orrs	r7, r0
 810a45a:	3568      	adds	r5, #104	; 0x68
 810a45c:	e7e9      	b.n	810a432 <_fwalk_reent+0x12>

0810a45e <rshift>:
 810a45e:	6903      	ldr	r3, [r0, #16]
 810a460:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a468:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a46c:	f100 0414 	add.w	r4, r0, #20
 810a470:	dd45      	ble.n	810a4fe <rshift+0xa0>
 810a472:	f011 011f 	ands.w	r1, r1, #31
 810a476:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a47a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a47e:	d10c      	bne.n	810a49a <rshift+0x3c>
 810a480:	f100 0710 	add.w	r7, r0, #16
 810a484:	4629      	mov	r1, r5
 810a486:	42b1      	cmp	r1, r6
 810a488:	d334      	bcc.n	810a4f4 <rshift+0x96>
 810a48a:	1a9b      	subs	r3, r3, r2
 810a48c:	009b      	lsls	r3, r3, #2
 810a48e:	1eea      	subs	r2, r5, #3
 810a490:	4296      	cmp	r6, r2
 810a492:	bf38      	it	cc
 810a494:	2300      	movcc	r3, #0
 810a496:	4423      	add	r3, r4
 810a498:	e015      	b.n	810a4c6 <rshift+0x68>
 810a49a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a49e:	f1c1 0820 	rsb	r8, r1, #32
 810a4a2:	40cf      	lsrs	r7, r1
 810a4a4:	f105 0e04 	add.w	lr, r5, #4
 810a4a8:	46a1      	mov	r9, r4
 810a4aa:	4576      	cmp	r6, lr
 810a4ac:	46f4      	mov	ip, lr
 810a4ae:	d815      	bhi.n	810a4dc <rshift+0x7e>
 810a4b0:	1a9b      	subs	r3, r3, r2
 810a4b2:	009a      	lsls	r2, r3, #2
 810a4b4:	3a04      	subs	r2, #4
 810a4b6:	3501      	adds	r5, #1
 810a4b8:	42ae      	cmp	r6, r5
 810a4ba:	bf38      	it	cc
 810a4bc:	2200      	movcc	r2, #0
 810a4be:	18a3      	adds	r3, r4, r2
 810a4c0:	50a7      	str	r7, [r4, r2]
 810a4c2:	b107      	cbz	r7, 810a4c6 <rshift+0x68>
 810a4c4:	3304      	adds	r3, #4
 810a4c6:	1b1a      	subs	r2, r3, r4
 810a4c8:	42a3      	cmp	r3, r4
 810a4ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a4ce:	bf08      	it	eq
 810a4d0:	2300      	moveq	r3, #0
 810a4d2:	6102      	str	r2, [r0, #16]
 810a4d4:	bf08      	it	eq
 810a4d6:	6143      	streq	r3, [r0, #20]
 810a4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a4dc:	f8dc c000 	ldr.w	ip, [ip]
 810a4e0:	fa0c fc08 	lsl.w	ip, ip, r8
 810a4e4:	ea4c 0707 	orr.w	r7, ip, r7
 810a4e8:	f849 7b04 	str.w	r7, [r9], #4
 810a4ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a4f0:	40cf      	lsrs	r7, r1
 810a4f2:	e7da      	b.n	810a4aa <rshift+0x4c>
 810a4f4:	f851 cb04 	ldr.w	ip, [r1], #4
 810a4f8:	f847 cf04 	str.w	ip, [r7, #4]!
 810a4fc:	e7c3      	b.n	810a486 <rshift+0x28>
 810a4fe:	4623      	mov	r3, r4
 810a500:	e7e1      	b.n	810a4c6 <rshift+0x68>

0810a502 <__hexdig_fun>:
 810a502:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a506:	2b09      	cmp	r3, #9
 810a508:	d802      	bhi.n	810a510 <__hexdig_fun+0xe>
 810a50a:	3820      	subs	r0, #32
 810a50c:	b2c0      	uxtb	r0, r0
 810a50e:	4770      	bx	lr
 810a510:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a514:	2b05      	cmp	r3, #5
 810a516:	d801      	bhi.n	810a51c <__hexdig_fun+0x1a>
 810a518:	3847      	subs	r0, #71	; 0x47
 810a51a:	e7f7      	b.n	810a50c <__hexdig_fun+0xa>
 810a51c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a520:	2b05      	cmp	r3, #5
 810a522:	d801      	bhi.n	810a528 <__hexdig_fun+0x26>
 810a524:	3827      	subs	r0, #39	; 0x27
 810a526:	e7f1      	b.n	810a50c <__hexdig_fun+0xa>
 810a528:	2000      	movs	r0, #0
 810a52a:	4770      	bx	lr

0810a52c <__gethex>:
 810a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a530:	ed2d 8b02 	vpush	{d8}
 810a534:	b089      	sub	sp, #36	; 0x24
 810a536:	ee08 0a10 	vmov	s16, r0
 810a53a:	9304      	str	r3, [sp, #16]
 810a53c:	4bbc      	ldr	r3, [pc, #752]	; (810a830 <__gethex+0x304>)
 810a53e:	681b      	ldr	r3, [r3, #0]
 810a540:	9301      	str	r3, [sp, #4]
 810a542:	4618      	mov	r0, r3
 810a544:	468b      	mov	fp, r1
 810a546:	4690      	mov	r8, r2
 810a548:	f7f5 fed4 	bl	81002f4 <strlen>
 810a54c:	9b01      	ldr	r3, [sp, #4]
 810a54e:	f8db 2000 	ldr.w	r2, [fp]
 810a552:	4403      	add	r3, r0
 810a554:	4682      	mov	sl, r0
 810a556:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a55a:	9305      	str	r3, [sp, #20]
 810a55c:	1c93      	adds	r3, r2, #2
 810a55e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a562:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a566:	32fe      	adds	r2, #254	; 0xfe
 810a568:	18d1      	adds	r1, r2, r3
 810a56a:	461f      	mov	r7, r3
 810a56c:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a570:	9100      	str	r1, [sp, #0]
 810a572:	2830      	cmp	r0, #48	; 0x30
 810a574:	d0f8      	beq.n	810a568 <__gethex+0x3c>
 810a576:	f7ff ffc4 	bl	810a502 <__hexdig_fun>
 810a57a:	4604      	mov	r4, r0
 810a57c:	2800      	cmp	r0, #0
 810a57e:	d13a      	bne.n	810a5f6 <__gethex+0xca>
 810a580:	9901      	ldr	r1, [sp, #4]
 810a582:	4652      	mov	r2, sl
 810a584:	4638      	mov	r0, r7
 810a586:	f7fd ff9b 	bl	81084c0 <strncmp>
 810a58a:	4605      	mov	r5, r0
 810a58c:	2800      	cmp	r0, #0
 810a58e:	d168      	bne.n	810a662 <__gethex+0x136>
 810a590:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a594:	eb07 060a 	add.w	r6, r7, sl
 810a598:	f7ff ffb3 	bl	810a502 <__hexdig_fun>
 810a59c:	2800      	cmp	r0, #0
 810a59e:	d062      	beq.n	810a666 <__gethex+0x13a>
 810a5a0:	4633      	mov	r3, r6
 810a5a2:	7818      	ldrb	r0, [r3, #0]
 810a5a4:	2830      	cmp	r0, #48	; 0x30
 810a5a6:	461f      	mov	r7, r3
 810a5a8:	f103 0301 	add.w	r3, r3, #1
 810a5ac:	d0f9      	beq.n	810a5a2 <__gethex+0x76>
 810a5ae:	f7ff ffa8 	bl	810a502 <__hexdig_fun>
 810a5b2:	2301      	movs	r3, #1
 810a5b4:	fab0 f480 	clz	r4, r0
 810a5b8:	0964      	lsrs	r4, r4, #5
 810a5ba:	4635      	mov	r5, r6
 810a5bc:	9300      	str	r3, [sp, #0]
 810a5be:	463a      	mov	r2, r7
 810a5c0:	4616      	mov	r6, r2
 810a5c2:	3201      	adds	r2, #1
 810a5c4:	7830      	ldrb	r0, [r6, #0]
 810a5c6:	f7ff ff9c 	bl	810a502 <__hexdig_fun>
 810a5ca:	2800      	cmp	r0, #0
 810a5cc:	d1f8      	bne.n	810a5c0 <__gethex+0x94>
 810a5ce:	9901      	ldr	r1, [sp, #4]
 810a5d0:	4652      	mov	r2, sl
 810a5d2:	4630      	mov	r0, r6
 810a5d4:	f7fd ff74 	bl	81084c0 <strncmp>
 810a5d8:	b980      	cbnz	r0, 810a5fc <__gethex+0xd0>
 810a5da:	b94d      	cbnz	r5, 810a5f0 <__gethex+0xc4>
 810a5dc:	eb06 050a 	add.w	r5, r6, sl
 810a5e0:	462a      	mov	r2, r5
 810a5e2:	4616      	mov	r6, r2
 810a5e4:	3201      	adds	r2, #1
 810a5e6:	7830      	ldrb	r0, [r6, #0]
 810a5e8:	f7ff ff8b 	bl	810a502 <__hexdig_fun>
 810a5ec:	2800      	cmp	r0, #0
 810a5ee:	d1f8      	bne.n	810a5e2 <__gethex+0xb6>
 810a5f0:	1bad      	subs	r5, r5, r6
 810a5f2:	00ad      	lsls	r5, r5, #2
 810a5f4:	e004      	b.n	810a600 <__gethex+0xd4>
 810a5f6:	2400      	movs	r4, #0
 810a5f8:	4625      	mov	r5, r4
 810a5fa:	e7e0      	b.n	810a5be <__gethex+0x92>
 810a5fc:	2d00      	cmp	r5, #0
 810a5fe:	d1f7      	bne.n	810a5f0 <__gethex+0xc4>
 810a600:	7833      	ldrb	r3, [r6, #0]
 810a602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a606:	2b50      	cmp	r3, #80	; 0x50
 810a608:	d13b      	bne.n	810a682 <__gethex+0x156>
 810a60a:	7873      	ldrb	r3, [r6, #1]
 810a60c:	2b2b      	cmp	r3, #43	; 0x2b
 810a60e:	d02c      	beq.n	810a66a <__gethex+0x13e>
 810a610:	2b2d      	cmp	r3, #45	; 0x2d
 810a612:	d02e      	beq.n	810a672 <__gethex+0x146>
 810a614:	1c71      	adds	r1, r6, #1
 810a616:	f04f 0900 	mov.w	r9, #0
 810a61a:	7808      	ldrb	r0, [r1, #0]
 810a61c:	f7ff ff71 	bl	810a502 <__hexdig_fun>
 810a620:	1e43      	subs	r3, r0, #1
 810a622:	b2db      	uxtb	r3, r3
 810a624:	2b18      	cmp	r3, #24
 810a626:	d82c      	bhi.n	810a682 <__gethex+0x156>
 810a628:	f1a0 0210 	sub.w	r2, r0, #16
 810a62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a630:	f7ff ff67 	bl	810a502 <__hexdig_fun>
 810a634:	1e43      	subs	r3, r0, #1
 810a636:	b2db      	uxtb	r3, r3
 810a638:	2b18      	cmp	r3, #24
 810a63a:	d91d      	bls.n	810a678 <__gethex+0x14c>
 810a63c:	f1b9 0f00 	cmp.w	r9, #0
 810a640:	d000      	beq.n	810a644 <__gethex+0x118>
 810a642:	4252      	negs	r2, r2
 810a644:	4415      	add	r5, r2
 810a646:	f8cb 1000 	str.w	r1, [fp]
 810a64a:	b1e4      	cbz	r4, 810a686 <__gethex+0x15a>
 810a64c:	9b00      	ldr	r3, [sp, #0]
 810a64e:	2b00      	cmp	r3, #0
 810a650:	bf14      	ite	ne
 810a652:	2700      	movne	r7, #0
 810a654:	2706      	moveq	r7, #6
 810a656:	4638      	mov	r0, r7
 810a658:	b009      	add	sp, #36	; 0x24
 810a65a:	ecbd 8b02 	vpop	{d8}
 810a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a662:	463e      	mov	r6, r7
 810a664:	4625      	mov	r5, r4
 810a666:	2401      	movs	r4, #1
 810a668:	e7ca      	b.n	810a600 <__gethex+0xd4>
 810a66a:	f04f 0900 	mov.w	r9, #0
 810a66e:	1cb1      	adds	r1, r6, #2
 810a670:	e7d3      	b.n	810a61a <__gethex+0xee>
 810a672:	f04f 0901 	mov.w	r9, #1
 810a676:	e7fa      	b.n	810a66e <__gethex+0x142>
 810a678:	230a      	movs	r3, #10
 810a67a:	fb03 0202 	mla	r2, r3, r2, r0
 810a67e:	3a10      	subs	r2, #16
 810a680:	e7d4      	b.n	810a62c <__gethex+0x100>
 810a682:	4631      	mov	r1, r6
 810a684:	e7df      	b.n	810a646 <__gethex+0x11a>
 810a686:	1bf3      	subs	r3, r6, r7
 810a688:	3b01      	subs	r3, #1
 810a68a:	4621      	mov	r1, r4
 810a68c:	2b07      	cmp	r3, #7
 810a68e:	dc0b      	bgt.n	810a6a8 <__gethex+0x17c>
 810a690:	ee18 0a10 	vmov	r0, s16
 810a694:	f000 faf6 	bl	810ac84 <_Balloc>
 810a698:	4604      	mov	r4, r0
 810a69a:	b940      	cbnz	r0, 810a6ae <__gethex+0x182>
 810a69c:	4b65      	ldr	r3, [pc, #404]	; (810a834 <__gethex+0x308>)
 810a69e:	4602      	mov	r2, r0
 810a6a0:	21de      	movs	r1, #222	; 0xde
 810a6a2:	4865      	ldr	r0, [pc, #404]	; (810a838 <__gethex+0x30c>)
 810a6a4:	f7fc fdd8 	bl	8107258 <__assert_func>
 810a6a8:	3101      	adds	r1, #1
 810a6aa:	105b      	asrs	r3, r3, #1
 810a6ac:	e7ee      	b.n	810a68c <__gethex+0x160>
 810a6ae:	f100 0914 	add.w	r9, r0, #20
 810a6b2:	f04f 0b00 	mov.w	fp, #0
 810a6b6:	f1ca 0301 	rsb	r3, sl, #1
 810a6ba:	f8cd 9008 	str.w	r9, [sp, #8]
 810a6be:	f8cd b000 	str.w	fp, [sp]
 810a6c2:	9306      	str	r3, [sp, #24]
 810a6c4:	42b7      	cmp	r7, r6
 810a6c6:	d340      	bcc.n	810a74a <__gethex+0x21e>
 810a6c8:	9802      	ldr	r0, [sp, #8]
 810a6ca:	9b00      	ldr	r3, [sp, #0]
 810a6cc:	f840 3b04 	str.w	r3, [r0], #4
 810a6d0:	eba0 0009 	sub.w	r0, r0, r9
 810a6d4:	1080      	asrs	r0, r0, #2
 810a6d6:	0146      	lsls	r6, r0, #5
 810a6d8:	6120      	str	r0, [r4, #16]
 810a6da:	4618      	mov	r0, r3
 810a6dc:	f000 fbc8 	bl	810ae70 <__hi0bits>
 810a6e0:	1a30      	subs	r0, r6, r0
 810a6e2:	f8d8 6000 	ldr.w	r6, [r8]
 810a6e6:	42b0      	cmp	r0, r6
 810a6e8:	dd63      	ble.n	810a7b2 <__gethex+0x286>
 810a6ea:	1b87      	subs	r7, r0, r6
 810a6ec:	4639      	mov	r1, r7
 810a6ee:	4620      	mov	r0, r4
 810a6f0:	f000 ff62 	bl	810b5b8 <__any_on>
 810a6f4:	4682      	mov	sl, r0
 810a6f6:	b1a8      	cbz	r0, 810a724 <__gethex+0x1f8>
 810a6f8:	1e7b      	subs	r3, r7, #1
 810a6fa:	1159      	asrs	r1, r3, #5
 810a6fc:	f003 021f 	and.w	r2, r3, #31
 810a700:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810a704:	f04f 0a01 	mov.w	sl, #1
 810a708:	fa0a f202 	lsl.w	r2, sl, r2
 810a70c:	420a      	tst	r2, r1
 810a70e:	d009      	beq.n	810a724 <__gethex+0x1f8>
 810a710:	4553      	cmp	r3, sl
 810a712:	dd05      	ble.n	810a720 <__gethex+0x1f4>
 810a714:	1eb9      	subs	r1, r7, #2
 810a716:	4620      	mov	r0, r4
 810a718:	f000 ff4e 	bl	810b5b8 <__any_on>
 810a71c:	2800      	cmp	r0, #0
 810a71e:	d145      	bne.n	810a7ac <__gethex+0x280>
 810a720:	f04f 0a02 	mov.w	sl, #2
 810a724:	4639      	mov	r1, r7
 810a726:	4620      	mov	r0, r4
 810a728:	f7ff fe99 	bl	810a45e <rshift>
 810a72c:	443d      	add	r5, r7
 810a72e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a732:	42ab      	cmp	r3, r5
 810a734:	da4c      	bge.n	810a7d0 <__gethex+0x2a4>
 810a736:	ee18 0a10 	vmov	r0, s16
 810a73a:	4621      	mov	r1, r4
 810a73c:	f000 fae2 	bl	810ad04 <_Bfree>
 810a740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a742:	2300      	movs	r3, #0
 810a744:	6013      	str	r3, [r2, #0]
 810a746:	27a3      	movs	r7, #163	; 0xa3
 810a748:	e785      	b.n	810a656 <__gethex+0x12a>
 810a74a:	1e73      	subs	r3, r6, #1
 810a74c:	9a05      	ldr	r2, [sp, #20]
 810a74e:	9303      	str	r3, [sp, #12]
 810a750:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810a754:	4293      	cmp	r3, r2
 810a756:	d019      	beq.n	810a78c <__gethex+0x260>
 810a758:	f1bb 0f20 	cmp.w	fp, #32
 810a75c:	d107      	bne.n	810a76e <__gethex+0x242>
 810a75e:	9b02      	ldr	r3, [sp, #8]
 810a760:	9a00      	ldr	r2, [sp, #0]
 810a762:	f843 2b04 	str.w	r2, [r3], #4
 810a766:	9302      	str	r3, [sp, #8]
 810a768:	2300      	movs	r3, #0
 810a76a:	9300      	str	r3, [sp, #0]
 810a76c:	469b      	mov	fp, r3
 810a76e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810a772:	f7ff fec6 	bl	810a502 <__hexdig_fun>
 810a776:	9b00      	ldr	r3, [sp, #0]
 810a778:	f000 000f 	and.w	r0, r0, #15
 810a77c:	fa00 f00b 	lsl.w	r0, r0, fp
 810a780:	4303      	orrs	r3, r0
 810a782:	9300      	str	r3, [sp, #0]
 810a784:	f10b 0b04 	add.w	fp, fp, #4
 810a788:	9b03      	ldr	r3, [sp, #12]
 810a78a:	e00d      	b.n	810a7a8 <__gethex+0x27c>
 810a78c:	9b03      	ldr	r3, [sp, #12]
 810a78e:	9a06      	ldr	r2, [sp, #24]
 810a790:	4413      	add	r3, r2
 810a792:	42bb      	cmp	r3, r7
 810a794:	d3e0      	bcc.n	810a758 <__gethex+0x22c>
 810a796:	4618      	mov	r0, r3
 810a798:	9901      	ldr	r1, [sp, #4]
 810a79a:	9307      	str	r3, [sp, #28]
 810a79c:	4652      	mov	r2, sl
 810a79e:	f7fd fe8f 	bl	81084c0 <strncmp>
 810a7a2:	9b07      	ldr	r3, [sp, #28]
 810a7a4:	2800      	cmp	r0, #0
 810a7a6:	d1d7      	bne.n	810a758 <__gethex+0x22c>
 810a7a8:	461e      	mov	r6, r3
 810a7aa:	e78b      	b.n	810a6c4 <__gethex+0x198>
 810a7ac:	f04f 0a03 	mov.w	sl, #3
 810a7b0:	e7b8      	b.n	810a724 <__gethex+0x1f8>
 810a7b2:	da0a      	bge.n	810a7ca <__gethex+0x29e>
 810a7b4:	1a37      	subs	r7, r6, r0
 810a7b6:	4621      	mov	r1, r4
 810a7b8:	ee18 0a10 	vmov	r0, s16
 810a7bc:	463a      	mov	r2, r7
 810a7be:	f000 fcbd 	bl	810b13c <__lshift>
 810a7c2:	1bed      	subs	r5, r5, r7
 810a7c4:	4604      	mov	r4, r0
 810a7c6:	f100 0914 	add.w	r9, r0, #20
 810a7ca:	f04f 0a00 	mov.w	sl, #0
 810a7ce:	e7ae      	b.n	810a72e <__gethex+0x202>
 810a7d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810a7d4:	42a8      	cmp	r0, r5
 810a7d6:	dd72      	ble.n	810a8be <__gethex+0x392>
 810a7d8:	1b45      	subs	r5, r0, r5
 810a7da:	42ae      	cmp	r6, r5
 810a7dc:	dc36      	bgt.n	810a84c <__gethex+0x320>
 810a7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a7e2:	2b02      	cmp	r3, #2
 810a7e4:	d02a      	beq.n	810a83c <__gethex+0x310>
 810a7e6:	2b03      	cmp	r3, #3
 810a7e8:	d02c      	beq.n	810a844 <__gethex+0x318>
 810a7ea:	2b01      	cmp	r3, #1
 810a7ec:	d115      	bne.n	810a81a <__gethex+0x2ee>
 810a7ee:	42ae      	cmp	r6, r5
 810a7f0:	d113      	bne.n	810a81a <__gethex+0x2ee>
 810a7f2:	2e01      	cmp	r6, #1
 810a7f4:	d10b      	bne.n	810a80e <__gethex+0x2e2>
 810a7f6:	9a04      	ldr	r2, [sp, #16]
 810a7f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810a7fc:	6013      	str	r3, [r2, #0]
 810a7fe:	2301      	movs	r3, #1
 810a800:	6123      	str	r3, [r4, #16]
 810a802:	f8c9 3000 	str.w	r3, [r9]
 810a806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a808:	2762      	movs	r7, #98	; 0x62
 810a80a:	601c      	str	r4, [r3, #0]
 810a80c:	e723      	b.n	810a656 <__gethex+0x12a>
 810a80e:	1e71      	subs	r1, r6, #1
 810a810:	4620      	mov	r0, r4
 810a812:	f000 fed1 	bl	810b5b8 <__any_on>
 810a816:	2800      	cmp	r0, #0
 810a818:	d1ed      	bne.n	810a7f6 <__gethex+0x2ca>
 810a81a:	ee18 0a10 	vmov	r0, s16
 810a81e:	4621      	mov	r1, r4
 810a820:	f000 fa70 	bl	810ad04 <_Bfree>
 810a824:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a826:	2300      	movs	r3, #0
 810a828:	6013      	str	r3, [r2, #0]
 810a82a:	2750      	movs	r7, #80	; 0x50
 810a82c:	e713      	b.n	810a656 <__gethex+0x12a>
 810a82e:	bf00      	nop
 810a830:	0810c0ec 	.word	0x0810c0ec
 810a834:	0810c00c 	.word	0x0810c00c
 810a838:	0810c080 	.word	0x0810c080
 810a83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d1eb      	bne.n	810a81a <__gethex+0x2ee>
 810a842:	e7d8      	b.n	810a7f6 <__gethex+0x2ca>
 810a844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a846:	2b00      	cmp	r3, #0
 810a848:	d1d5      	bne.n	810a7f6 <__gethex+0x2ca>
 810a84a:	e7e6      	b.n	810a81a <__gethex+0x2ee>
 810a84c:	1e6f      	subs	r7, r5, #1
 810a84e:	f1ba 0f00 	cmp.w	sl, #0
 810a852:	d131      	bne.n	810a8b8 <__gethex+0x38c>
 810a854:	b127      	cbz	r7, 810a860 <__gethex+0x334>
 810a856:	4639      	mov	r1, r7
 810a858:	4620      	mov	r0, r4
 810a85a:	f000 fead 	bl	810b5b8 <__any_on>
 810a85e:	4682      	mov	sl, r0
 810a860:	117b      	asrs	r3, r7, #5
 810a862:	2101      	movs	r1, #1
 810a864:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810a868:	f007 071f 	and.w	r7, r7, #31
 810a86c:	fa01 f707 	lsl.w	r7, r1, r7
 810a870:	421f      	tst	r7, r3
 810a872:	4629      	mov	r1, r5
 810a874:	4620      	mov	r0, r4
 810a876:	bf18      	it	ne
 810a878:	f04a 0a02 	orrne.w	sl, sl, #2
 810a87c:	1b76      	subs	r6, r6, r5
 810a87e:	f7ff fdee 	bl	810a45e <rshift>
 810a882:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810a886:	2702      	movs	r7, #2
 810a888:	f1ba 0f00 	cmp.w	sl, #0
 810a88c:	d048      	beq.n	810a920 <__gethex+0x3f4>
 810a88e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a892:	2b02      	cmp	r3, #2
 810a894:	d015      	beq.n	810a8c2 <__gethex+0x396>
 810a896:	2b03      	cmp	r3, #3
 810a898:	d017      	beq.n	810a8ca <__gethex+0x39e>
 810a89a:	2b01      	cmp	r3, #1
 810a89c:	d109      	bne.n	810a8b2 <__gethex+0x386>
 810a89e:	f01a 0f02 	tst.w	sl, #2
 810a8a2:	d006      	beq.n	810a8b2 <__gethex+0x386>
 810a8a4:	f8d9 0000 	ldr.w	r0, [r9]
 810a8a8:	ea4a 0a00 	orr.w	sl, sl, r0
 810a8ac:	f01a 0f01 	tst.w	sl, #1
 810a8b0:	d10e      	bne.n	810a8d0 <__gethex+0x3a4>
 810a8b2:	f047 0710 	orr.w	r7, r7, #16
 810a8b6:	e033      	b.n	810a920 <__gethex+0x3f4>
 810a8b8:	f04f 0a01 	mov.w	sl, #1
 810a8bc:	e7d0      	b.n	810a860 <__gethex+0x334>
 810a8be:	2701      	movs	r7, #1
 810a8c0:	e7e2      	b.n	810a888 <__gethex+0x35c>
 810a8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a8c4:	f1c3 0301 	rsb	r3, r3, #1
 810a8c8:	9315      	str	r3, [sp, #84]	; 0x54
 810a8ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a8cc:	2b00      	cmp	r3, #0
 810a8ce:	d0f0      	beq.n	810a8b2 <__gethex+0x386>
 810a8d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810a8d4:	f104 0314 	add.w	r3, r4, #20
 810a8d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810a8dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810a8e0:	f04f 0c00 	mov.w	ip, #0
 810a8e4:	4618      	mov	r0, r3
 810a8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 810a8ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 810a8ee:	d01c      	beq.n	810a92a <__gethex+0x3fe>
 810a8f0:	3201      	adds	r2, #1
 810a8f2:	6002      	str	r2, [r0, #0]
 810a8f4:	2f02      	cmp	r7, #2
 810a8f6:	f104 0314 	add.w	r3, r4, #20
 810a8fa:	d13f      	bne.n	810a97c <__gethex+0x450>
 810a8fc:	f8d8 2000 	ldr.w	r2, [r8]
 810a900:	3a01      	subs	r2, #1
 810a902:	42b2      	cmp	r2, r6
 810a904:	d10a      	bne.n	810a91c <__gethex+0x3f0>
 810a906:	1171      	asrs	r1, r6, #5
 810a908:	2201      	movs	r2, #1
 810a90a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810a90e:	f006 061f 	and.w	r6, r6, #31
 810a912:	fa02 f606 	lsl.w	r6, r2, r6
 810a916:	421e      	tst	r6, r3
 810a918:	bf18      	it	ne
 810a91a:	4617      	movne	r7, r2
 810a91c:	f047 0720 	orr.w	r7, r7, #32
 810a920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a922:	601c      	str	r4, [r3, #0]
 810a924:	9b04      	ldr	r3, [sp, #16]
 810a926:	601d      	str	r5, [r3, #0]
 810a928:	e695      	b.n	810a656 <__gethex+0x12a>
 810a92a:	4299      	cmp	r1, r3
 810a92c:	f843 cc04 	str.w	ip, [r3, #-4]
 810a930:	d8d8      	bhi.n	810a8e4 <__gethex+0x3b8>
 810a932:	68a3      	ldr	r3, [r4, #8]
 810a934:	459b      	cmp	fp, r3
 810a936:	db19      	blt.n	810a96c <__gethex+0x440>
 810a938:	6861      	ldr	r1, [r4, #4]
 810a93a:	ee18 0a10 	vmov	r0, s16
 810a93e:	3101      	adds	r1, #1
 810a940:	f000 f9a0 	bl	810ac84 <_Balloc>
 810a944:	4681      	mov	r9, r0
 810a946:	b918      	cbnz	r0, 810a950 <__gethex+0x424>
 810a948:	4b1a      	ldr	r3, [pc, #104]	; (810a9b4 <__gethex+0x488>)
 810a94a:	4602      	mov	r2, r0
 810a94c:	2184      	movs	r1, #132	; 0x84
 810a94e:	e6a8      	b.n	810a6a2 <__gethex+0x176>
 810a950:	6922      	ldr	r2, [r4, #16]
 810a952:	3202      	adds	r2, #2
 810a954:	f104 010c 	add.w	r1, r4, #12
 810a958:	0092      	lsls	r2, r2, #2
 810a95a:	300c      	adds	r0, #12
 810a95c:	f7fc fce6 	bl	810732c <memcpy>
 810a960:	4621      	mov	r1, r4
 810a962:	ee18 0a10 	vmov	r0, s16
 810a966:	f000 f9cd 	bl	810ad04 <_Bfree>
 810a96a:	464c      	mov	r4, r9
 810a96c:	6923      	ldr	r3, [r4, #16]
 810a96e:	1c5a      	adds	r2, r3, #1
 810a970:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810a974:	6122      	str	r2, [r4, #16]
 810a976:	2201      	movs	r2, #1
 810a978:	615a      	str	r2, [r3, #20]
 810a97a:	e7bb      	b.n	810a8f4 <__gethex+0x3c8>
 810a97c:	6922      	ldr	r2, [r4, #16]
 810a97e:	455a      	cmp	r2, fp
 810a980:	dd0b      	ble.n	810a99a <__gethex+0x46e>
 810a982:	2101      	movs	r1, #1
 810a984:	4620      	mov	r0, r4
 810a986:	f7ff fd6a 	bl	810a45e <rshift>
 810a98a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a98e:	3501      	adds	r5, #1
 810a990:	42ab      	cmp	r3, r5
 810a992:	f6ff aed0 	blt.w	810a736 <__gethex+0x20a>
 810a996:	2701      	movs	r7, #1
 810a998:	e7c0      	b.n	810a91c <__gethex+0x3f0>
 810a99a:	f016 061f 	ands.w	r6, r6, #31
 810a99e:	d0fa      	beq.n	810a996 <__gethex+0x46a>
 810a9a0:	449a      	add	sl, r3
 810a9a2:	f1c6 0620 	rsb	r6, r6, #32
 810a9a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810a9aa:	f000 fa61 	bl	810ae70 <__hi0bits>
 810a9ae:	42b0      	cmp	r0, r6
 810a9b0:	dbe7      	blt.n	810a982 <__gethex+0x456>
 810a9b2:	e7f0      	b.n	810a996 <__gethex+0x46a>
 810a9b4:	0810c00c 	.word	0x0810c00c

0810a9b8 <L_shift>:
 810a9b8:	f1c2 0208 	rsb	r2, r2, #8
 810a9bc:	0092      	lsls	r2, r2, #2
 810a9be:	b570      	push	{r4, r5, r6, lr}
 810a9c0:	f1c2 0620 	rsb	r6, r2, #32
 810a9c4:	6843      	ldr	r3, [r0, #4]
 810a9c6:	6804      	ldr	r4, [r0, #0]
 810a9c8:	fa03 f506 	lsl.w	r5, r3, r6
 810a9cc:	432c      	orrs	r4, r5
 810a9ce:	40d3      	lsrs	r3, r2
 810a9d0:	6004      	str	r4, [r0, #0]
 810a9d2:	f840 3f04 	str.w	r3, [r0, #4]!
 810a9d6:	4288      	cmp	r0, r1
 810a9d8:	d3f4      	bcc.n	810a9c4 <L_shift+0xc>
 810a9da:	bd70      	pop	{r4, r5, r6, pc}

0810a9dc <__match>:
 810a9dc:	b530      	push	{r4, r5, lr}
 810a9de:	6803      	ldr	r3, [r0, #0]
 810a9e0:	3301      	adds	r3, #1
 810a9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a9e6:	b914      	cbnz	r4, 810a9ee <__match+0x12>
 810a9e8:	6003      	str	r3, [r0, #0]
 810a9ea:	2001      	movs	r0, #1
 810a9ec:	bd30      	pop	{r4, r5, pc}
 810a9ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a9f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810a9f6:	2d19      	cmp	r5, #25
 810a9f8:	bf98      	it	ls
 810a9fa:	3220      	addls	r2, #32
 810a9fc:	42a2      	cmp	r2, r4
 810a9fe:	d0f0      	beq.n	810a9e2 <__match+0x6>
 810aa00:	2000      	movs	r0, #0
 810aa02:	e7f3      	b.n	810a9ec <__match+0x10>

0810aa04 <__hexnan>:
 810aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa08:	680b      	ldr	r3, [r1, #0]
 810aa0a:	6801      	ldr	r1, [r0, #0]
 810aa0c:	115e      	asrs	r6, r3, #5
 810aa0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810aa12:	f013 031f 	ands.w	r3, r3, #31
 810aa16:	b087      	sub	sp, #28
 810aa18:	bf18      	it	ne
 810aa1a:	3604      	addne	r6, #4
 810aa1c:	2500      	movs	r5, #0
 810aa1e:	1f37      	subs	r7, r6, #4
 810aa20:	4682      	mov	sl, r0
 810aa22:	4690      	mov	r8, r2
 810aa24:	9301      	str	r3, [sp, #4]
 810aa26:	f846 5c04 	str.w	r5, [r6, #-4]
 810aa2a:	46b9      	mov	r9, r7
 810aa2c:	463c      	mov	r4, r7
 810aa2e:	9502      	str	r5, [sp, #8]
 810aa30:	46ab      	mov	fp, r5
 810aa32:	784a      	ldrb	r2, [r1, #1]
 810aa34:	1c4b      	adds	r3, r1, #1
 810aa36:	9303      	str	r3, [sp, #12]
 810aa38:	b342      	cbz	r2, 810aa8c <__hexnan+0x88>
 810aa3a:	4610      	mov	r0, r2
 810aa3c:	9105      	str	r1, [sp, #20]
 810aa3e:	9204      	str	r2, [sp, #16]
 810aa40:	f7ff fd5f 	bl	810a502 <__hexdig_fun>
 810aa44:	2800      	cmp	r0, #0
 810aa46:	d14f      	bne.n	810aae8 <__hexnan+0xe4>
 810aa48:	9a04      	ldr	r2, [sp, #16]
 810aa4a:	9905      	ldr	r1, [sp, #20]
 810aa4c:	2a20      	cmp	r2, #32
 810aa4e:	d818      	bhi.n	810aa82 <__hexnan+0x7e>
 810aa50:	9b02      	ldr	r3, [sp, #8]
 810aa52:	459b      	cmp	fp, r3
 810aa54:	dd13      	ble.n	810aa7e <__hexnan+0x7a>
 810aa56:	454c      	cmp	r4, r9
 810aa58:	d206      	bcs.n	810aa68 <__hexnan+0x64>
 810aa5a:	2d07      	cmp	r5, #7
 810aa5c:	dc04      	bgt.n	810aa68 <__hexnan+0x64>
 810aa5e:	462a      	mov	r2, r5
 810aa60:	4649      	mov	r1, r9
 810aa62:	4620      	mov	r0, r4
 810aa64:	f7ff ffa8 	bl	810a9b8 <L_shift>
 810aa68:	4544      	cmp	r4, r8
 810aa6a:	d950      	bls.n	810ab0e <__hexnan+0x10a>
 810aa6c:	2300      	movs	r3, #0
 810aa6e:	f1a4 0904 	sub.w	r9, r4, #4
 810aa72:	f844 3c04 	str.w	r3, [r4, #-4]
 810aa76:	f8cd b008 	str.w	fp, [sp, #8]
 810aa7a:	464c      	mov	r4, r9
 810aa7c:	461d      	mov	r5, r3
 810aa7e:	9903      	ldr	r1, [sp, #12]
 810aa80:	e7d7      	b.n	810aa32 <__hexnan+0x2e>
 810aa82:	2a29      	cmp	r2, #41	; 0x29
 810aa84:	d156      	bne.n	810ab34 <__hexnan+0x130>
 810aa86:	3102      	adds	r1, #2
 810aa88:	f8ca 1000 	str.w	r1, [sl]
 810aa8c:	f1bb 0f00 	cmp.w	fp, #0
 810aa90:	d050      	beq.n	810ab34 <__hexnan+0x130>
 810aa92:	454c      	cmp	r4, r9
 810aa94:	d206      	bcs.n	810aaa4 <__hexnan+0xa0>
 810aa96:	2d07      	cmp	r5, #7
 810aa98:	dc04      	bgt.n	810aaa4 <__hexnan+0xa0>
 810aa9a:	462a      	mov	r2, r5
 810aa9c:	4649      	mov	r1, r9
 810aa9e:	4620      	mov	r0, r4
 810aaa0:	f7ff ff8a 	bl	810a9b8 <L_shift>
 810aaa4:	4544      	cmp	r4, r8
 810aaa6:	d934      	bls.n	810ab12 <__hexnan+0x10e>
 810aaa8:	f1a8 0204 	sub.w	r2, r8, #4
 810aaac:	4623      	mov	r3, r4
 810aaae:	f853 1b04 	ldr.w	r1, [r3], #4
 810aab2:	f842 1f04 	str.w	r1, [r2, #4]!
 810aab6:	429f      	cmp	r7, r3
 810aab8:	d2f9      	bcs.n	810aaae <__hexnan+0xaa>
 810aaba:	1b3b      	subs	r3, r7, r4
 810aabc:	f023 0303 	bic.w	r3, r3, #3
 810aac0:	3304      	adds	r3, #4
 810aac2:	3401      	adds	r4, #1
 810aac4:	3e03      	subs	r6, #3
 810aac6:	42b4      	cmp	r4, r6
 810aac8:	bf88      	it	hi
 810aaca:	2304      	movhi	r3, #4
 810aacc:	4443      	add	r3, r8
 810aace:	2200      	movs	r2, #0
 810aad0:	f843 2b04 	str.w	r2, [r3], #4
 810aad4:	429f      	cmp	r7, r3
 810aad6:	d2fb      	bcs.n	810aad0 <__hexnan+0xcc>
 810aad8:	683b      	ldr	r3, [r7, #0]
 810aada:	b91b      	cbnz	r3, 810aae4 <__hexnan+0xe0>
 810aadc:	4547      	cmp	r7, r8
 810aade:	d127      	bne.n	810ab30 <__hexnan+0x12c>
 810aae0:	2301      	movs	r3, #1
 810aae2:	603b      	str	r3, [r7, #0]
 810aae4:	2005      	movs	r0, #5
 810aae6:	e026      	b.n	810ab36 <__hexnan+0x132>
 810aae8:	3501      	adds	r5, #1
 810aaea:	2d08      	cmp	r5, #8
 810aaec:	f10b 0b01 	add.w	fp, fp, #1
 810aaf0:	dd06      	ble.n	810ab00 <__hexnan+0xfc>
 810aaf2:	4544      	cmp	r4, r8
 810aaf4:	d9c3      	bls.n	810aa7e <__hexnan+0x7a>
 810aaf6:	2300      	movs	r3, #0
 810aaf8:	f844 3c04 	str.w	r3, [r4, #-4]
 810aafc:	2501      	movs	r5, #1
 810aafe:	3c04      	subs	r4, #4
 810ab00:	6822      	ldr	r2, [r4, #0]
 810ab02:	f000 000f 	and.w	r0, r0, #15
 810ab06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810ab0a:	6022      	str	r2, [r4, #0]
 810ab0c:	e7b7      	b.n	810aa7e <__hexnan+0x7a>
 810ab0e:	2508      	movs	r5, #8
 810ab10:	e7b5      	b.n	810aa7e <__hexnan+0x7a>
 810ab12:	9b01      	ldr	r3, [sp, #4]
 810ab14:	2b00      	cmp	r3, #0
 810ab16:	d0df      	beq.n	810aad8 <__hexnan+0xd4>
 810ab18:	f04f 32ff 	mov.w	r2, #4294967295
 810ab1c:	f1c3 0320 	rsb	r3, r3, #32
 810ab20:	fa22 f303 	lsr.w	r3, r2, r3
 810ab24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ab28:	401a      	ands	r2, r3
 810ab2a:	f846 2c04 	str.w	r2, [r6, #-4]
 810ab2e:	e7d3      	b.n	810aad8 <__hexnan+0xd4>
 810ab30:	3f04      	subs	r7, #4
 810ab32:	e7d1      	b.n	810aad8 <__hexnan+0xd4>
 810ab34:	2004      	movs	r0, #4
 810ab36:	b007      	add	sp, #28
 810ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ab3c <_localeconv_r>:
 810ab3c:	4800      	ldr	r0, [pc, #0]	; (810ab40 <_localeconv_r+0x4>)
 810ab3e:	4770      	bx	lr
 810ab40:	10000210 	.word	0x10000210

0810ab44 <__retarget_lock_init_recursive>:
 810ab44:	4770      	bx	lr

0810ab46 <__retarget_lock_acquire_recursive>:
 810ab46:	4770      	bx	lr

0810ab48 <__retarget_lock_release_recursive>:
 810ab48:	4770      	bx	lr

0810ab4a <__swhatbuf_r>:
 810ab4a:	b570      	push	{r4, r5, r6, lr}
 810ab4c:	460e      	mov	r6, r1
 810ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ab52:	2900      	cmp	r1, #0
 810ab54:	b096      	sub	sp, #88	; 0x58
 810ab56:	4614      	mov	r4, r2
 810ab58:	461d      	mov	r5, r3
 810ab5a:	da07      	bge.n	810ab6c <__swhatbuf_r+0x22>
 810ab5c:	2300      	movs	r3, #0
 810ab5e:	602b      	str	r3, [r5, #0]
 810ab60:	89b3      	ldrh	r3, [r6, #12]
 810ab62:	061a      	lsls	r2, r3, #24
 810ab64:	d410      	bmi.n	810ab88 <__swhatbuf_r+0x3e>
 810ab66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810ab6a:	e00e      	b.n	810ab8a <__swhatbuf_r+0x40>
 810ab6c:	466a      	mov	r2, sp
 810ab6e:	f000 ff95 	bl	810ba9c <_fstat_r>
 810ab72:	2800      	cmp	r0, #0
 810ab74:	dbf2      	blt.n	810ab5c <__swhatbuf_r+0x12>
 810ab76:	9a01      	ldr	r2, [sp, #4]
 810ab78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810ab7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810ab80:	425a      	negs	r2, r3
 810ab82:	415a      	adcs	r2, r3
 810ab84:	602a      	str	r2, [r5, #0]
 810ab86:	e7ee      	b.n	810ab66 <__swhatbuf_r+0x1c>
 810ab88:	2340      	movs	r3, #64	; 0x40
 810ab8a:	2000      	movs	r0, #0
 810ab8c:	6023      	str	r3, [r4, #0]
 810ab8e:	b016      	add	sp, #88	; 0x58
 810ab90:	bd70      	pop	{r4, r5, r6, pc}
	...

0810ab94 <__smakebuf_r>:
 810ab94:	898b      	ldrh	r3, [r1, #12]
 810ab96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810ab98:	079d      	lsls	r5, r3, #30
 810ab9a:	4606      	mov	r6, r0
 810ab9c:	460c      	mov	r4, r1
 810ab9e:	d507      	bpl.n	810abb0 <__smakebuf_r+0x1c>
 810aba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810aba4:	6023      	str	r3, [r4, #0]
 810aba6:	6123      	str	r3, [r4, #16]
 810aba8:	2301      	movs	r3, #1
 810abaa:	6163      	str	r3, [r4, #20]
 810abac:	b002      	add	sp, #8
 810abae:	bd70      	pop	{r4, r5, r6, pc}
 810abb0:	ab01      	add	r3, sp, #4
 810abb2:	466a      	mov	r2, sp
 810abb4:	f7ff ffc9 	bl	810ab4a <__swhatbuf_r>
 810abb8:	9900      	ldr	r1, [sp, #0]
 810abba:	4605      	mov	r5, r0
 810abbc:	4630      	mov	r0, r6
 810abbe:	f7fc fc1b 	bl	81073f8 <_malloc_r>
 810abc2:	b948      	cbnz	r0, 810abd8 <__smakebuf_r+0x44>
 810abc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810abc8:	059a      	lsls	r2, r3, #22
 810abca:	d4ef      	bmi.n	810abac <__smakebuf_r+0x18>
 810abcc:	f023 0303 	bic.w	r3, r3, #3
 810abd0:	f043 0302 	orr.w	r3, r3, #2
 810abd4:	81a3      	strh	r3, [r4, #12]
 810abd6:	e7e3      	b.n	810aba0 <__smakebuf_r+0xc>
 810abd8:	4b0d      	ldr	r3, [pc, #52]	; (810ac10 <__smakebuf_r+0x7c>)
 810abda:	62b3      	str	r3, [r6, #40]	; 0x28
 810abdc:	89a3      	ldrh	r3, [r4, #12]
 810abde:	6020      	str	r0, [r4, #0]
 810abe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810abe4:	81a3      	strh	r3, [r4, #12]
 810abe6:	9b00      	ldr	r3, [sp, #0]
 810abe8:	6163      	str	r3, [r4, #20]
 810abea:	9b01      	ldr	r3, [sp, #4]
 810abec:	6120      	str	r0, [r4, #16]
 810abee:	b15b      	cbz	r3, 810ac08 <__smakebuf_r+0x74>
 810abf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810abf4:	4630      	mov	r0, r6
 810abf6:	f000 ff63 	bl	810bac0 <_isatty_r>
 810abfa:	b128      	cbz	r0, 810ac08 <__smakebuf_r+0x74>
 810abfc:	89a3      	ldrh	r3, [r4, #12]
 810abfe:	f023 0303 	bic.w	r3, r3, #3
 810ac02:	f043 0301 	orr.w	r3, r3, #1
 810ac06:	81a3      	strh	r3, [r4, #12]
 810ac08:	89a0      	ldrh	r0, [r4, #12]
 810ac0a:	4305      	orrs	r5, r0
 810ac0c:	81a5      	strh	r5, [r4, #12]
 810ac0e:	e7cd      	b.n	810abac <__smakebuf_r+0x18>
 810ac10:	0810a2bd 	.word	0x0810a2bd

0810ac14 <__ascii_mbtowc>:
 810ac14:	b082      	sub	sp, #8
 810ac16:	b901      	cbnz	r1, 810ac1a <__ascii_mbtowc+0x6>
 810ac18:	a901      	add	r1, sp, #4
 810ac1a:	b142      	cbz	r2, 810ac2e <__ascii_mbtowc+0x1a>
 810ac1c:	b14b      	cbz	r3, 810ac32 <__ascii_mbtowc+0x1e>
 810ac1e:	7813      	ldrb	r3, [r2, #0]
 810ac20:	600b      	str	r3, [r1, #0]
 810ac22:	7812      	ldrb	r2, [r2, #0]
 810ac24:	1e10      	subs	r0, r2, #0
 810ac26:	bf18      	it	ne
 810ac28:	2001      	movne	r0, #1
 810ac2a:	b002      	add	sp, #8
 810ac2c:	4770      	bx	lr
 810ac2e:	4610      	mov	r0, r2
 810ac30:	e7fb      	b.n	810ac2a <__ascii_mbtowc+0x16>
 810ac32:	f06f 0001 	mvn.w	r0, #1
 810ac36:	e7f8      	b.n	810ac2a <__ascii_mbtowc+0x16>

0810ac38 <memmove>:
 810ac38:	4288      	cmp	r0, r1
 810ac3a:	b510      	push	{r4, lr}
 810ac3c:	eb01 0402 	add.w	r4, r1, r2
 810ac40:	d902      	bls.n	810ac48 <memmove+0x10>
 810ac42:	4284      	cmp	r4, r0
 810ac44:	4623      	mov	r3, r4
 810ac46:	d807      	bhi.n	810ac58 <memmove+0x20>
 810ac48:	1e43      	subs	r3, r0, #1
 810ac4a:	42a1      	cmp	r1, r4
 810ac4c:	d008      	beq.n	810ac60 <memmove+0x28>
 810ac4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810ac52:	f803 2f01 	strb.w	r2, [r3, #1]!
 810ac56:	e7f8      	b.n	810ac4a <memmove+0x12>
 810ac58:	4402      	add	r2, r0
 810ac5a:	4601      	mov	r1, r0
 810ac5c:	428a      	cmp	r2, r1
 810ac5e:	d100      	bne.n	810ac62 <memmove+0x2a>
 810ac60:	bd10      	pop	{r4, pc}
 810ac62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810ac66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810ac6a:	e7f7      	b.n	810ac5c <memmove+0x24>

0810ac6c <__malloc_lock>:
 810ac6c:	4801      	ldr	r0, [pc, #4]	; (810ac74 <__malloc_lock+0x8>)
 810ac6e:	f7ff bf6a 	b.w	810ab46 <__retarget_lock_acquire_recursive>
 810ac72:	bf00      	nop
 810ac74:	10000520 	.word	0x10000520

0810ac78 <__malloc_unlock>:
 810ac78:	4801      	ldr	r0, [pc, #4]	; (810ac80 <__malloc_unlock+0x8>)
 810ac7a:	f7ff bf65 	b.w	810ab48 <__retarget_lock_release_recursive>
 810ac7e:	bf00      	nop
 810ac80:	10000520 	.word	0x10000520

0810ac84 <_Balloc>:
 810ac84:	b570      	push	{r4, r5, r6, lr}
 810ac86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ac88:	4604      	mov	r4, r0
 810ac8a:	460d      	mov	r5, r1
 810ac8c:	b976      	cbnz	r6, 810acac <_Balloc+0x28>
 810ac8e:	2010      	movs	r0, #16
 810ac90:	f7fc fb3c 	bl	810730c <malloc>
 810ac94:	4602      	mov	r2, r0
 810ac96:	6260      	str	r0, [r4, #36]	; 0x24
 810ac98:	b920      	cbnz	r0, 810aca4 <_Balloc+0x20>
 810ac9a:	4b18      	ldr	r3, [pc, #96]	; (810acfc <_Balloc+0x78>)
 810ac9c:	4818      	ldr	r0, [pc, #96]	; (810ad00 <_Balloc+0x7c>)
 810ac9e:	2166      	movs	r1, #102	; 0x66
 810aca0:	f7fc fada 	bl	8107258 <__assert_func>
 810aca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810aca8:	6006      	str	r6, [r0, #0]
 810acaa:	60c6      	str	r6, [r0, #12]
 810acac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810acae:	68f3      	ldr	r3, [r6, #12]
 810acb0:	b183      	cbz	r3, 810acd4 <_Balloc+0x50>
 810acb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810acb4:	68db      	ldr	r3, [r3, #12]
 810acb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810acba:	b9b8      	cbnz	r0, 810acec <_Balloc+0x68>
 810acbc:	2101      	movs	r1, #1
 810acbe:	fa01 f605 	lsl.w	r6, r1, r5
 810acc2:	1d72      	adds	r2, r6, #5
 810acc4:	0092      	lsls	r2, r2, #2
 810acc6:	4620      	mov	r0, r4
 810acc8:	f000 fc97 	bl	810b5fa <_calloc_r>
 810accc:	b160      	cbz	r0, 810ace8 <_Balloc+0x64>
 810acce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810acd2:	e00e      	b.n	810acf2 <_Balloc+0x6e>
 810acd4:	2221      	movs	r2, #33	; 0x21
 810acd6:	2104      	movs	r1, #4
 810acd8:	4620      	mov	r0, r4
 810acda:	f000 fc8e 	bl	810b5fa <_calloc_r>
 810acde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ace0:	60f0      	str	r0, [r6, #12]
 810ace2:	68db      	ldr	r3, [r3, #12]
 810ace4:	2b00      	cmp	r3, #0
 810ace6:	d1e4      	bne.n	810acb2 <_Balloc+0x2e>
 810ace8:	2000      	movs	r0, #0
 810acea:	bd70      	pop	{r4, r5, r6, pc}
 810acec:	6802      	ldr	r2, [r0, #0]
 810acee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810acf2:	2300      	movs	r3, #0
 810acf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810acf8:	e7f7      	b.n	810acea <_Balloc+0x66>
 810acfa:	bf00      	nop
 810acfc:	0810bf96 	.word	0x0810bf96
 810ad00:	0810c100 	.word	0x0810c100

0810ad04 <_Bfree>:
 810ad04:	b570      	push	{r4, r5, r6, lr}
 810ad06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ad08:	4605      	mov	r5, r0
 810ad0a:	460c      	mov	r4, r1
 810ad0c:	b976      	cbnz	r6, 810ad2c <_Bfree+0x28>
 810ad0e:	2010      	movs	r0, #16
 810ad10:	f7fc fafc 	bl	810730c <malloc>
 810ad14:	4602      	mov	r2, r0
 810ad16:	6268      	str	r0, [r5, #36]	; 0x24
 810ad18:	b920      	cbnz	r0, 810ad24 <_Bfree+0x20>
 810ad1a:	4b09      	ldr	r3, [pc, #36]	; (810ad40 <_Bfree+0x3c>)
 810ad1c:	4809      	ldr	r0, [pc, #36]	; (810ad44 <_Bfree+0x40>)
 810ad1e:	218a      	movs	r1, #138	; 0x8a
 810ad20:	f7fc fa9a 	bl	8107258 <__assert_func>
 810ad24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ad28:	6006      	str	r6, [r0, #0]
 810ad2a:	60c6      	str	r6, [r0, #12]
 810ad2c:	b13c      	cbz	r4, 810ad3e <_Bfree+0x3a>
 810ad2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810ad30:	6862      	ldr	r2, [r4, #4]
 810ad32:	68db      	ldr	r3, [r3, #12]
 810ad34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810ad38:	6021      	str	r1, [r4, #0]
 810ad3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810ad3e:	bd70      	pop	{r4, r5, r6, pc}
 810ad40:	0810bf96 	.word	0x0810bf96
 810ad44:	0810c100 	.word	0x0810c100

0810ad48 <__multadd>:
 810ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad4c:	690e      	ldr	r6, [r1, #16]
 810ad4e:	4607      	mov	r7, r0
 810ad50:	4698      	mov	r8, r3
 810ad52:	460c      	mov	r4, r1
 810ad54:	f101 0014 	add.w	r0, r1, #20
 810ad58:	2300      	movs	r3, #0
 810ad5a:	6805      	ldr	r5, [r0, #0]
 810ad5c:	b2a9      	uxth	r1, r5
 810ad5e:	fb02 8101 	mla	r1, r2, r1, r8
 810ad62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810ad66:	0c2d      	lsrs	r5, r5, #16
 810ad68:	fb02 c505 	mla	r5, r2, r5, ip
 810ad6c:	b289      	uxth	r1, r1
 810ad6e:	3301      	adds	r3, #1
 810ad70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810ad74:	429e      	cmp	r6, r3
 810ad76:	f840 1b04 	str.w	r1, [r0], #4
 810ad7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810ad7e:	dcec      	bgt.n	810ad5a <__multadd+0x12>
 810ad80:	f1b8 0f00 	cmp.w	r8, #0
 810ad84:	d022      	beq.n	810adcc <__multadd+0x84>
 810ad86:	68a3      	ldr	r3, [r4, #8]
 810ad88:	42b3      	cmp	r3, r6
 810ad8a:	dc19      	bgt.n	810adc0 <__multadd+0x78>
 810ad8c:	6861      	ldr	r1, [r4, #4]
 810ad8e:	4638      	mov	r0, r7
 810ad90:	3101      	adds	r1, #1
 810ad92:	f7ff ff77 	bl	810ac84 <_Balloc>
 810ad96:	4605      	mov	r5, r0
 810ad98:	b928      	cbnz	r0, 810ada6 <__multadd+0x5e>
 810ad9a:	4602      	mov	r2, r0
 810ad9c:	4b0d      	ldr	r3, [pc, #52]	; (810add4 <__multadd+0x8c>)
 810ad9e:	480e      	ldr	r0, [pc, #56]	; (810add8 <__multadd+0x90>)
 810ada0:	21b5      	movs	r1, #181	; 0xb5
 810ada2:	f7fc fa59 	bl	8107258 <__assert_func>
 810ada6:	6922      	ldr	r2, [r4, #16]
 810ada8:	3202      	adds	r2, #2
 810adaa:	f104 010c 	add.w	r1, r4, #12
 810adae:	0092      	lsls	r2, r2, #2
 810adb0:	300c      	adds	r0, #12
 810adb2:	f7fc fabb 	bl	810732c <memcpy>
 810adb6:	4621      	mov	r1, r4
 810adb8:	4638      	mov	r0, r7
 810adba:	f7ff ffa3 	bl	810ad04 <_Bfree>
 810adbe:	462c      	mov	r4, r5
 810adc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810adc4:	3601      	adds	r6, #1
 810adc6:	f8c3 8014 	str.w	r8, [r3, #20]
 810adca:	6126      	str	r6, [r4, #16]
 810adcc:	4620      	mov	r0, r4
 810adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810add2:	bf00      	nop
 810add4:	0810c00c 	.word	0x0810c00c
 810add8:	0810c100 	.word	0x0810c100

0810addc <__s2b>:
 810addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ade0:	460c      	mov	r4, r1
 810ade2:	4615      	mov	r5, r2
 810ade4:	461f      	mov	r7, r3
 810ade6:	2209      	movs	r2, #9
 810ade8:	3308      	adds	r3, #8
 810adea:	4606      	mov	r6, r0
 810adec:	fb93 f3f2 	sdiv	r3, r3, r2
 810adf0:	2100      	movs	r1, #0
 810adf2:	2201      	movs	r2, #1
 810adf4:	429a      	cmp	r2, r3
 810adf6:	db09      	blt.n	810ae0c <__s2b+0x30>
 810adf8:	4630      	mov	r0, r6
 810adfa:	f7ff ff43 	bl	810ac84 <_Balloc>
 810adfe:	b940      	cbnz	r0, 810ae12 <__s2b+0x36>
 810ae00:	4602      	mov	r2, r0
 810ae02:	4b19      	ldr	r3, [pc, #100]	; (810ae68 <__s2b+0x8c>)
 810ae04:	4819      	ldr	r0, [pc, #100]	; (810ae6c <__s2b+0x90>)
 810ae06:	21ce      	movs	r1, #206	; 0xce
 810ae08:	f7fc fa26 	bl	8107258 <__assert_func>
 810ae0c:	0052      	lsls	r2, r2, #1
 810ae0e:	3101      	adds	r1, #1
 810ae10:	e7f0      	b.n	810adf4 <__s2b+0x18>
 810ae12:	9b08      	ldr	r3, [sp, #32]
 810ae14:	6143      	str	r3, [r0, #20]
 810ae16:	2d09      	cmp	r5, #9
 810ae18:	f04f 0301 	mov.w	r3, #1
 810ae1c:	6103      	str	r3, [r0, #16]
 810ae1e:	dd16      	ble.n	810ae4e <__s2b+0x72>
 810ae20:	f104 0909 	add.w	r9, r4, #9
 810ae24:	46c8      	mov	r8, r9
 810ae26:	442c      	add	r4, r5
 810ae28:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ae2c:	4601      	mov	r1, r0
 810ae2e:	3b30      	subs	r3, #48	; 0x30
 810ae30:	220a      	movs	r2, #10
 810ae32:	4630      	mov	r0, r6
 810ae34:	f7ff ff88 	bl	810ad48 <__multadd>
 810ae38:	45a0      	cmp	r8, r4
 810ae3a:	d1f5      	bne.n	810ae28 <__s2b+0x4c>
 810ae3c:	f1a5 0408 	sub.w	r4, r5, #8
 810ae40:	444c      	add	r4, r9
 810ae42:	1b2d      	subs	r5, r5, r4
 810ae44:	1963      	adds	r3, r4, r5
 810ae46:	42bb      	cmp	r3, r7
 810ae48:	db04      	blt.n	810ae54 <__s2b+0x78>
 810ae4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ae4e:	340a      	adds	r4, #10
 810ae50:	2509      	movs	r5, #9
 810ae52:	e7f6      	b.n	810ae42 <__s2b+0x66>
 810ae54:	f814 3b01 	ldrb.w	r3, [r4], #1
 810ae58:	4601      	mov	r1, r0
 810ae5a:	3b30      	subs	r3, #48	; 0x30
 810ae5c:	220a      	movs	r2, #10
 810ae5e:	4630      	mov	r0, r6
 810ae60:	f7ff ff72 	bl	810ad48 <__multadd>
 810ae64:	e7ee      	b.n	810ae44 <__s2b+0x68>
 810ae66:	bf00      	nop
 810ae68:	0810c00c 	.word	0x0810c00c
 810ae6c:	0810c100 	.word	0x0810c100

0810ae70 <__hi0bits>:
 810ae70:	0c03      	lsrs	r3, r0, #16
 810ae72:	041b      	lsls	r3, r3, #16
 810ae74:	b9d3      	cbnz	r3, 810aeac <__hi0bits+0x3c>
 810ae76:	0400      	lsls	r0, r0, #16
 810ae78:	2310      	movs	r3, #16
 810ae7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810ae7e:	bf04      	itt	eq
 810ae80:	0200      	lsleq	r0, r0, #8
 810ae82:	3308      	addeq	r3, #8
 810ae84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810ae88:	bf04      	itt	eq
 810ae8a:	0100      	lsleq	r0, r0, #4
 810ae8c:	3304      	addeq	r3, #4
 810ae8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ae92:	bf04      	itt	eq
 810ae94:	0080      	lsleq	r0, r0, #2
 810ae96:	3302      	addeq	r3, #2
 810ae98:	2800      	cmp	r0, #0
 810ae9a:	db05      	blt.n	810aea8 <__hi0bits+0x38>
 810ae9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810aea0:	f103 0301 	add.w	r3, r3, #1
 810aea4:	bf08      	it	eq
 810aea6:	2320      	moveq	r3, #32
 810aea8:	4618      	mov	r0, r3
 810aeaa:	4770      	bx	lr
 810aeac:	2300      	movs	r3, #0
 810aeae:	e7e4      	b.n	810ae7a <__hi0bits+0xa>

0810aeb0 <__lo0bits>:
 810aeb0:	6803      	ldr	r3, [r0, #0]
 810aeb2:	f013 0207 	ands.w	r2, r3, #7
 810aeb6:	4601      	mov	r1, r0
 810aeb8:	d00b      	beq.n	810aed2 <__lo0bits+0x22>
 810aeba:	07da      	lsls	r2, r3, #31
 810aebc:	d424      	bmi.n	810af08 <__lo0bits+0x58>
 810aebe:	0798      	lsls	r0, r3, #30
 810aec0:	bf49      	itett	mi
 810aec2:	085b      	lsrmi	r3, r3, #1
 810aec4:	089b      	lsrpl	r3, r3, #2
 810aec6:	2001      	movmi	r0, #1
 810aec8:	600b      	strmi	r3, [r1, #0]
 810aeca:	bf5c      	itt	pl
 810aecc:	600b      	strpl	r3, [r1, #0]
 810aece:	2002      	movpl	r0, #2
 810aed0:	4770      	bx	lr
 810aed2:	b298      	uxth	r0, r3
 810aed4:	b9b0      	cbnz	r0, 810af04 <__lo0bits+0x54>
 810aed6:	0c1b      	lsrs	r3, r3, #16
 810aed8:	2010      	movs	r0, #16
 810aeda:	f013 0fff 	tst.w	r3, #255	; 0xff
 810aede:	bf04      	itt	eq
 810aee0:	0a1b      	lsreq	r3, r3, #8
 810aee2:	3008      	addeq	r0, #8
 810aee4:	071a      	lsls	r2, r3, #28
 810aee6:	bf04      	itt	eq
 810aee8:	091b      	lsreq	r3, r3, #4
 810aeea:	3004      	addeq	r0, #4
 810aeec:	079a      	lsls	r2, r3, #30
 810aeee:	bf04      	itt	eq
 810aef0:	089b      	lsreq	r3, r3, #2
 810aef2:	3002      	addeq	r0, #2
 810aef4:	07da      	lsls	r2, r3, #31
 810aef6:	d403      	bmi.n	810af00 <__lo0bits+0x50>
 810aef8:	085b      	lsrs	r3, r3, #1
 810aefa:	f100 0001 	add.w	r0, r0, #1
 810aefe:	d005      	beq.n	810af0c <__lo0bits+0x5c>
 810af00:	600b      	str	r3, [r1, #0]
 810af02:	4770      	bx	lr
 810af04:	4610      	mov	r0, r2
 810af06:	e7e8      	b.n	810aeda <__lo0bits+0x2a>
 810af08:	2000      	movs	r0, #0
 810af0a:	4770      	bx	lr
 810af0c:	2020      	movs	r0, #32
 810af0e:	4770      	bx	lr

0810af10 <__i2b>:
 810af10:	b510      	push	{r4, lr}
 810af12:	460c      	mov	r4, r1
 810af14:	2101      	movs	r1, #1
 810af16:	f7ff feb5 	bl	810ac84 <_Balloc>
 810af1a:	4602      	mov	r2, r0
 810af1c:	b928      	cbnz	r0, 810af2a <__i2b+0x1a>
 810af1e:	4b05      	ldr	r3, [pc, #20]	; (810af34 <__i2b+0x24>)
 810af20:	4805      	ldr	r0, [pc, #20]	; (810af38 <__i2b+0x28>)
 810af22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810af26:	f7fc f997 	bl	8107258 <__assert_func>
 810af2a:	2301      	movs	r3, #1
 810af2c:	6144      	str	r4, [r0, #20]
 810af2e:	6103      	str	r3, [r0, #16]
 810af30:	bd10      	pop	{r4, pc}
 810af32:	bf00      	nop
 810af34:	0810c00c 	.word	0x0810c00c
 810af38:	0810c100 	.word	0x0810c100

0810af3c <__multiply>:
 810af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810af40:	4614      	mov	r4, r2
 810af42:	690a      	ldr	r2, [r1, #16]
 810af44:	6923      	ldr	r3, [r4, #16]
 810af46:	429a      	cmp	r2, r3
 810af48:	bfb8      	it	lt
 810af4a:	460b      	movlt	r3, r1
 810af4c:	460d      	mov	r5, r1
 810af4e:	bfbc      	itt	lt
 810af50:	4625      	movlt	r5, r4
 810af52:	461c      	movlt	r4, r3
 810af54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810af58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810af5c:	68ab      	ldr	r3, [r5, #8]
 810af5e:	6869      	ldr	r1, [r5, #4]
 810af60:	eb0a 0709 	add.w	r7, sl, r9
 810af64:	42bb      	cmp	r3, r7
 810af66:	b085      	sub	sp, #20
 810af68:	bfb8      	it	lt
 810af6a:	3101      	addlt	r1, #1
 810af6c:	f7ff fe8a 	bl	810ac84 <_Balloc>
 810af70:	b930      	cbnz	r0, 810af80 <__multiply+0x44>
 810af72:	4602      	mov	r2, r0
 810af74:	4b42      	ldr	r3, [pc, #264]	; (810b080 <__multiply+0x144>)
 810af76:	4843      	ldr	r0, [pc, #268]	; (810b084 <__multiply+0x148>)
 810af78:	f240 115d 	movw	r1, #349	; 0x15d
 810af7c:	f7fc f96c 	bl	8107258 <__assert_func>
 810af80:	f100 0614 	add.w	r6, r0, #20
 810af84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810af88:	4633      	mov	r3, r6
 810af8a:	2200      	movs	r2, #0
 810af8c:	4543      	cmp	r3, r8
 810af8e:	d31e      	bcc.n	810afce <__multiply+0x92>
 810af90:	f105 0c14 	add.w	ip, r5, #20
 810af94:	f104 0314 	add.w	r3, r4, #20
 810af98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810af9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810afa0:	9202      	str	r2, [sp, #8]
 810afa2:	ebac 0205 	sub.w	r2, ip, r5
 810afa6:	3a15      	subs	r2, #21
 810afa8:	f022 0203 	bic.w	r2, r2, #3
 810afac:	3204      	adds	r2, #4
 810afae:	f105 0115 	add.w	r1, r5, #21
 810afb2:	458c      	cmp	ip, r1
 810afb4:	bf38      	it	cc
 810afb6:	2204      	movcc	r2, #4
 810afb8:	9201      	str	r2, [sp, #4]
 810afba:	9a02      	ldr	r2, [sp, #8]
 810afbc:	9303      	str	r3, [sp, #12]
 810afbe:	429a      	cmp	r2, r3
 810afc0:	d808      	bhi.n	810afd4 <__multiply+0x98>
 810afc2:	2f00      	cmp	r7, #0
 810afc4:	dc55      	bgt.n	810b072 <__multiply+0x136>
 810afc6:	6107      	str	r7, [r0, #16]
 810afc8:	b005      	add	sp, #20
 810afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810afce:	f843 2b04 	str.w	r2, [r3], #4
 810afd2:	e7db      	b.n	810af8c <__multiply+0x50>
 810afd4:	f8b3 a000 	ldrh.w	sl, [r3]
 810afd8:	f1ba 0f00 	cmp.w	sl, #0
 810afdc:	d020      	beq.n	810b020 <__multiply+0xe4>
 810afde:	f105 0e14 	add.w	lr, r5, #20
 810afe2:	46b1      	mov	r9, r6
 810afe4:	2200      	movs	r2, #0
 810afe6:	f85e 4b04 	ldr.w	r4, [lr], #4
 810afea:	f8d9 b000 	ldr.w	fp, [r9]
 810afee:	b2a1      	uxth	r1, r4
 810aff0:	fa1f fb8b 	uxth.w	fp, fp
 810aff4:	fb0a b101 	mla	r1, sl, r1, fp
 810aff8:	4411      	add	r1, r2
 810affa:	f8d9 2000 	ldr.w	r2, [r9]
 810affe:	0c24      	lsrs	r4, r4, #16
 810b000:	0c12      	lsrs	r2, r2, #16
 810b002:	fb0a 2404 	mla	r4, sl, r4, r2
 810b006:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810b00a:	b289      	uxth	r1, r1
 810b00c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810b010:	45f4      	cmp	ip, lr
 810b012:	f849 1b04 	str.w	r1, [r9], #4
 810b016:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810b01a:	d8e4      	bhi.n	810afe6 <__multiply+0xaa>
 810b01c:	9901      	ldr	r1, [sp, #4]
 810b01e:	5072      	str	r2, [r6, r1]
 810b020:	9a03      	ldr	r2, [sp, #12]
 810b022:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b026:	3304      	adds	r3, #4
 810b028:	f1b9 0f00 	cmp.w	r9, #0
 810b02c:	d01f      	beq.n	810b06e <__multiply+0x132>
 810b02e:	6834      	ldr	r4, [r6, #0]
 810b030:	f105 0114 	add.w	r1, r5, #20
 810b034:	46b6      	mov	lr, r6
 810b036:	f04f 0a00 	mov.w	sl, #0
 810b03a:	880a      	ldrh	r2, [r1, #0]
 810b03c:	f8be b002 	ldrh.w	fp, [lr, #2]
 810b040:	fb09 b202 	mla	r2, r9, r2, fp
 810b044:	4492      	add	sl, r2
 810b046:	b2a4      	uxth	r4, r4
 810b048:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810b04c:	f84e 4b04 	str.w	r4, [lr], #4
 810b050:	f851 4b04 	ldr.w	r4, [r1], #4
 810b054:	f8be 2000 	ldrh.w	r2, [lr]
 810b058:	0c24      	lsrs	r4, r4, #16
 810b05a:	fb09 2404 	mla	r4, r9, r4, r2
 810b05e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810b062:	458c      	cmp	ip, r1
 810b064:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810b068:	d8e7      	bhi.n	810b03a <__multiply+0xfe>
 810b06a:	9a01      	ldr	r2, [sp, #4]
 810b06c:	50b4      	str	r4, [r6, r2]
 810b06e:	3604      	adds	r6, #4
 810b070:	e7a3      	b.n	810afba <__multiply+0x7e>
 810b072:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b076:	2b00      	cmp	r3, #0
 810b078:	d1a5      	bne.n	810afc6 <__multiply+0x8a>
 810b07a:	3f01      	subs	r7, #1
 810b07c:	e7a1      	b.n	810afc2 <__multiply+0x86>
 810b07e:	bf00      	nop
 810b080:	0810c00c 	.word	0x0810c00c
 810b084:	0810c100 	.word	0x0810c100

0810b088 <__pow5mult>:
 810b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b08c:	4615      	mov	r5, r2
 810b08e:	f012 0203 	ands.w	r2, r2, #3
 810b092:	4606      	mov	r6, r0
 810b094:	460f      	mov	r7, r1
 810b096:	d007      	beq.n	810b0a8 <__pow5mult+0x20>
 810b098:	4c25      	ldr	r4, [pc, #148]	; (810b130 <__pow5mult+0xa8>)
 810b09a:	3a01      	subs	r2, #1
 810b09c:	2300      	movs	r3, #0
 810b09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b0a2:	f7ff fe51 	bl	810ad48 <__multadd>
 810b0a6:	4607      	mov	r7, r0
 810b0a8:	10ad      	asrs	r5, r5, #2
 810b0aa:	d03d      	beq.n	810b128 <__pow5mult+0xa0>
 810b0ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b0ae:	b97c      	cbnz	r4, 810b0d0 <__pow5mult+0x48>
 810b0b0:	2010      	movs	r0, #16
 810b0b2:	f7fc f92b 	bl	810730c <malloc>
 810b0b6:	4602      	mov	r2, r0
 810b0b8:	6270      	str	r0, [r6, #36]	; 0x24
 810b0ba:	b928      	cbnz	r0, 810b0c8 <__pow5mult+0x40>
 810b0bc:	4b1d      	ldr	r3, [pc, #116]	; (810b134 <__pow5mult+0xac>)
 810b0be:	481e      	ldr	r0, [pc, #120]	; (810b138 <__pow5mult+0xb0>)
 810b0c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b0c4:	f7fc f8c8 	bl	8107258 <__assert_func>
 810b0c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b0cc:	6004      	str	r4, [r0, #0]
 810b0ce:	60c4      	str	r4, [r0, #12]
 810b0d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b0d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b0d8:	b94c      	cbnz	r4, 810b0ee <__pow5mult+0x66>
 810b0da:	f240 2171 	movw	r1, #625	; 0x271
 810b0de:	4630      	mov	r0, r6
 810b0e0:	f7ff ff16 	bl	810af10 <__i2b>
 810b0e4:	2300      	movs	r3, #0
 810b0e6:	f8c8 0008 	str.w	r0, [r8, #8]
 810b0ea:	4604      	mov	r4, r0
 810b0ec:	6003      	str	r3, [r0, #0]
 810b0ee:	f04f 0900 	mov.w	r9, #0
 810b0f2:	07eb      	lsls	r3, r5, #31
 810b0f4:	d50a      	bpl.n	810b10c <__pow5mult+0x84>
 810b0f6:	4639      	mov	r1, r7
 810b0f8:	4622      	mov	r2, r4
 810b0fa:	4630      	mov	r0, r6
 810b0fc:	f7ff ff1e 	bl	810af3c <__multiply>
 810b100:	4639      	mov	r1, r7
 810b102:	4680      	mov	r8, r0
 810b104:	4630      	mov	r0, r6
 810b106:	f7ff fdfd 	bl	810ad04 <_Bfree>
 810b10a:	4647      	mov	r7, r8
 810b10c:	106d      	asrs	r5, r5, #1
 810b10e:	d00b      	beq.n	810b128 <__pow5mult+0xa0>
 810b110:	6820      	ldr	r0, [r4, #0]
 810b112:	b938      	cbnz	r0, 810b124 <__pow5mult+0x9c>
 810b114:	4622      	mov	r2, r4
 810b116:	4621      	mov	r1, r4
 810b118:	4630      	mov	r0, r6
 810b11a:	f7ff ff0f 	bl	810af3c <__multiply>
 810b11e:	6020      	str	r0, [r4, #0]
 810b120:	f8c0 9000 	str.w	r9, [r0]
 810b124:	4604      	mov	r4, r0
 810b126:	e7e4      	b.n	810b0f2 <__pow5mult+0x6a>
 810b128:	4638      	mov	r0, r7
 810b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b12e:	bf00      	nop
 810b130:	0810c250 	.word	0x0810c250
 810b134:	0810bf96 	.word	0x0810bf96
 810b138:	0810c100 	.word	0x0810c100

0810b13c <__lshift>:
 810b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b140:	460c      	mov	r4, r1
 810b142:	6849      	ldr	r1, [r1, #4]
 810b144:	6923      	ldr	r3, [r4, #16]
 810b146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b14a:	68a3      	ldr	r3, [r4, #8]
 810b14c:	4607      	mov	r7, r0
 810b14e:	4691      	mov	r9, r2
 810b150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b154:	f108 0601 	add.w	r6, r8, #1
 810b158:	42b3      	cmp	r3, r6
 810b15a:	db0b      	blt.n	810b174 <__lshift+0x38>
 810b15c:	4638      	mov	r0, r7
 810b15e:	f7ff fd91 	bl	810ac84 <_Balloc>
 810b162:	4605      	mov	r5, r0
 810b164:	b948      	cbnz	r0, 810b17a <__lshift+0x3e>
 810b166:	4602      	mov	r2, r0
 810b168:	4b28      	ldr	r3, [pc, #160]	; (810b20c <__lshift+0xd0>)
 810b16a:	4829      	ldr	r0, [pc, #164]	; (810b210 <__lshift+0xd4>)
 810b16c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b170:	f7fc f872 	bl	8107258 <__assert_func>
 810b174:	3101      	adds	r1, #1
 810b176:	005b      	lsls	r3, r3, #1
 810b178:	e7ee      	b.n	810b158 <__lshift+0x1c>
 810b17a:	2300      	movs	r3, #0
 810b17c:	f100 0114 	add.w	r1, r0, #20
 810b180:	f100 0210 	add.w	r2, r0, #16
 810b184:	4618      	mov	r0, r3
 810b186:	4553      	cmp	r3, sl
 810b188:	db33      	blt.n	810b1f2 <__lshift+0xb6>
 810b18a:	6920      	ldr	r0, [r4, #16]
 810b18c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b190:	f104 0314 	add.w	r3, r4, #20
 810b194:	f019 091f 	ands.w	r9, r9, #31
 810b198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b19c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810b1a0:	d02b      	beq.n	810b1fa <__lshift+0xbe>
 810b1a2:	f1c9 0e20 	rsb	lr, r9, #32
 810b1a6:	468a      	mov	sl, r1
 810b1a8:	2200      	movs	r2, #0
 810b1aa:	6818      	ldr	r0, [r3, #0]
 810b1ac:	fa00 f009 	lsl.w	r0, r0, r9
 810b1b0:	4302      	orrs	r2, r0
 810b1b2:	f84a 2b04 	str.w	r2, [sl], #4
 810b1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 810b1ba:	459c      	cmp	ip, r3
 810b1bc:	fa22 f20e 	lsr.w	r2, r2, lr
 810b1c0:	d8f3      	bhi.n	810b1aa <__lshift+0x6e>
 810b1c2:	ebac 0304 	sub.w	r3, ip, r4
 810b1c6:	3b15      	subs	r3, #21
 810b1c8:	f023 0303 	bic.w	r3, r3, #3
 810b1cc:	3304      	adds	r3, #4
 810b1ce:	f104 0015 	add.w	r0, r4, #21
 810b1d2:	4584      	cmp	ip, r0
 810b1d4:	bf38      	it	cc
 810b1d6:	2304      	movcc	r3, #4
 810b1d8:	50ca      	str	r2, [r1, r3]
 810b1da:	b10a      	cbz	r2, 810b1e0 <__lshift+0xa4>
 810b1dc:	f108 0602 	add.w	r6, r8, #2
 810b1e0:	3e01      	subs	r6, #1
 810b1e2:	4638      	mov	r0, r7
 810b1e4:	612e      	str	r6, [r5, #16]
 810b1e6:	4621      	mov	r1, r4
 810b1e8:	f7ff fd8c 	bl	810ad04 <_Bfree>
 810b1ec:	4628      	mov	r0, r5
 810b1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b1f2:	f842 0f04 	str.w	r0, [r2, #4]!
 810b1f6:	3301      	adds	r3, #1
 810b1f8:	e7c5      	b.n	810b186 <__lshift+0x4a>
 810b1fa:	3904      	subs	r1, #4
 810b1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 810b200:	f841 2f04 	str.w	r2, [r1, #4]!
 810b204:	459c      	cmp	ip, r3
 810b206:	d8f9      	bhi.n	810b1fc <__lshift+0xc0>
 810b208:	e7ea      	b.n	810b1e0 <__lshift+0xa4>
 810b20a:	bf00      	nop
 810b20c:	0810c00c 	.word	0x0810c00c
 810b210:	0810c100 	.word	0x0810c100

0810b214 <__mcmp>:
 810b214:	b530      	push	{r4, r5, lr}
 810b216:	6902      	ldr	r2, [r0, #16]
 810b218:	690c      	ldr	r4, [r1, #16]
 810b21a:	1b12      	subs	r2, r2, r4
 810b21c:	d10e      	bne.n	810b23c <__mcmp+0x28>
 810b21e:	f100 0314 	add.w	r3, r0, #20
 810b222:	3114      	adds	r1, #20
 810b224:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b228:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b22c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b230:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b234:	42a5      	cmp	r5, r4
 810b236:	d003      	beq.n	810b240 <__mcmp+0x2c>
 810b238:	d305      	bcc.n	810b246 <__mcmp+0x32>
 810b23a:	2201      	movs	r2, #1
 810b23c:	4610      	mov	r0, r2
 810b23e:	bd30      	pop	{r4, r5, pc}
 810b240:	4283      	cmp	r3, r0
 810b242:	d3f3      	bcc.n	810b22c <__mcmp+0x18>
 810b244:	e7fa      	b.n	810b23c <__mcmp+0x28>
 810b246:	f04f 32ff 	mov.w	r2, #4294967295
 810b24a:	e7f7      	b.n	810b23c <__mcmp+0x28>

0810b24c <__mdiff>:
 810b24c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b250:	460c      	mov	r4, r1
 810b252:	4606      	mov	r6, r0
 810b254:	4611      	mov	r1, r2
 810b256:	4620      	mov	r0, r4
 810b258:	4617      	mov	r7, r2
 810b25a:	f7ff ffdb 	bl	810b214 <__mcmp>
 810b25e:	1e05      	subs	r5, r0, #0
 810b260:	d110      	bne.n	810b284 <__mdiff+0x38>
 810b262:	4629      	mov	r1, r5
 810b264:	4630      	mov	r0, r6
 810b266:	f7ff fd0d 	bl	810ac84 <_Balloc>
 810b26a:	b930      	cbnz	r0, 810b27a <__mdiff+0x2e>
 810b26c:	4b39      	ldr	r3, [pc, #228]	; (810b354 <__mdiff+0x108>)
 810b26e:	4602      	mov	r2, r0
 810b270:	f240 2132 	movw	r1, #562	; 0x232
 810b274:	4838      	ldr	r0, [pc, #224]	; (810b358 <__mdiff+0x10c>)
 810b276:	f7fb ffef 	bl	8107258 <__assert_func>
 810b27a:	2301      	movs	r3, #1
 810b27c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b284:	bfa4      	itt	ge
 810b286:	463b      	movge	r3, r7
 810b288:	4627      	movge	r7, r4
 810b28a:	4630      	mov	r0, r6
 810b28c:	6879      	ldr	r1, [r7, #4]
 810b28e:	bfa6      	itte	ge
 810b290:	461c      	movge	r4, r3
 810b292:	2500      	movge	r5, #0
 810b294:	2501      	movlt	r5, #1
 810b296:	f7ff fcf5 	bl	810ac84 <_Balloc>
 810b29a:	b920      	cbnz	r0, 810b2a6 <__mdiff+0x5a>
 810b29c:	4b2d      	ldr	r3, [pc, #180]	; (810b354 <__mdiff+0x108>)
 810b29e:	4602      	mov	r2, r0
 810b2a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b2a4:	e7e6      	b.n	810b274 <__mdiff+0x28>
 810b2a6:	693e      	ldr	r6, [r7, #16]
 810b2a8:	60c5      	str	r5, [r0, #12]
 810b2aa:	6925      	ldr	r5, [r4, #16]
 810b2ac:	f107 0114 	add.w	r1, r7, #20
 810b2b0:	f104 0914 	add.w	r9, r4, #20
 810b2b4:	f100 0e14 	add.w	lr, r0, #20
 810b2b8:	f107 0210 	add.w	r2, r7, #16
 810b2bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810b2c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810b2c4:	46f2      	mov	sl, lr
 810b2c6:	2700      	movs	r7, #0
 810b2c8:	f859 3b04 	ldr.w	r3, [r9], #4
 810b2cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b2d0:	fa1f f883 	uxth.w	r8, r3
 810b2d4:	fa17 f78b 	uxtah	r7, r7, fp
 810b2d8:	0c1b      	lsrs	r3, r3, #16
 810b2da:	eba7 0808 	sub.w	r8, r7, r8
 810b2de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b2e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b2e6:	fa1f f888 	uxth.w	r8, r8
 810b2ea:	141f      	asrs	r7, r3, #16
 810b2ec:	454d      	cmp	r5, r9
 810b2ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b2f2:	f84a 3b04 	str.w	r3, [sl], #4
 810b2f6:	d8e7      	bhi.n	810b2c8 <__mdiff+0x7c>
 810b2f8:	1b2b      	subs	r3, r5, r4
 810b2fa:	3b15      	subs	r3, #21
 810b2fc:	f023 0303 	bic.w	r3, r3, #3
 810b300:	3304      	adds	r3, #4
 810b302:	3415      	adds	r4, #21
 810b304:	42a5      	cmp	r5, r4
 810b306:	bf38      	it	cc
 810b308:	2304      	movcc	r3, #4
 810b30a:	4419      	add	r1, r3
 810b30c:	4473      	add	r3, lr
 810b30e:	469e      	mov	lr, r3
 810b310:	460d      	mov	r5, r1
 810b312:	4565      	cmp	r5, ip
 810b314:	d30e      	bcc.n	810b334 <__mdiff+0xe8>
 810b316:	f10c 0203 	add.w	r2, ip, #3
 810b31a:	1a52      	subs	r2, r2, r1
 810b31c:	f022 0203 	bic.w	r2, r2, #3
 810b320:	3903      	subs	r1, #3
 810b322:	458c      	cmp	ip, r1
 810b324:	bf38      	it	cc
 810b326:	2200      	movcc	r2, #0
 810b328:	441a      	add	r2, r3
 810b32a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b32e:	b17b      	cbz	r3, 810b350 <__mdiff+0x104>
 810b330:	6106      	str	r6, [r0, #16]
 810b332:	e7a5      	b.n	810b280 <__mdiff+0x34>
 810b334:	f855 8b04 	ldr.w	r8, [r5], #4
 810b338:	fa17 f488 	uxtah	r4, r7, r8
 810b33c:	1422      	asrs	r2, r4, #16
 810b33e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810b342:	b2a4      	uxth	r4, r4
 810b344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810b348:	f84e 4b04 	str.w	r4, [lr], #4
 810b34c:	1417      	asrs	r7, r2, #16
 810b34e:	e7e0      	b.n	810b312 <__mdiff+0xc6>
 810b350:	3e01      	subs	r6, #1
 810b352:	e7ea      	b.n	810b32a <__mdiff+0xde>
 810b354:	0810c00c 	.word	0x0810c00c
 810b358:	0810c100 	.word	0x0810c100

0810b35c <__ulp>:
 810b35c:	b082      	sub	sp, #8
 810b35e:	ed8d 0b00 	vstr	d0, [sp]
 810b362:	9b01      	ldr	r3, [sp, #4]
 810b364:	4912      	ldr	r1, [pc, #72]	; (810b3b0 <__ulp+0x54>)
 810b366:	4019      	ands	r1, r3
 810b368:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b36c:	2900      	cmp	r1, #0
 810b36e:	dd05      	ble.n	810b37c <__ulp+0x20>
 810b370:	2200      	movs	r2, #0
 810b372:	460b      	mov	r3, r1
 810b374:	ec43 2b10 	vmov	d0, r2, r3
 810b378:	b002      	add	sp, #8
 810b37a:	4770      	bx	lr
 810b37c:	4249      	negs	r1, r1
 810b37e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b382:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b386:	f04f 0200 	mov.w	r2, #0
 810b38a:	f04f 0300 	mov.w	r3, #0
 810b38e:	da04      	bge.n	810b39a <__ulp+0x3e>
 810b390:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b394:	fa41 f300 	asr.w	r3, r1, r0
 810b398:	e7ec      	b.n	810b374 <__ulp+0x18>
 810b39a:	f1a0 0114 	sub.w	r1, r0, #20
 810b39e:	291e      	cmp	r1, #30
 810b3a0:	bfda      	itte	le
 810b3a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b3a6:	fa20 f101 	lsrle.w	r1, r0, r1
 810b3aa:	2101      	movgt	r1, #1
 810b3ac:	460a      	mov	r2, r1
 810b3ae:	e7e1      	b.n	810b374 <__ulp+0x18>
 810b3b0:	7ff00000 	.word	0x7ff00000

0810b3b4 <__b2d>:
 810b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b3b6:	6905      	ldr	r5, [r0, #16]
 810b3b8:	f100 0714 	add.w	r7, r0, #20
 810b3bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b3c0:	1f2e      	subs	r6, r5, #4
 810b3c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b3c6:	4620      	mov	r0, r4
 810b3c8:	f7ff fd52 	bl	810ae70 <__hi0bits>
 810b3cc:	f1c0 0320 	rsb	r3, r0, #32
 810b3d0:	280a      	cmp	r0, #10
 810b3d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b450 <__b2d+0x9c>
 810b3d6:	600b      	str	r3, [r1, #0]
 810b3d8:	dc14      	bgt.n	810b404 <__b2d+0x50>
 810b3da:	f1c0 0e0b 	rsb	lr, r0, #11
 810b3de:	fa24 f10e 	lsr.w	r1, r4, lr
 810b3e2:	42b7      	cmp	r7, r6
 810b3e4:	ea41 030c 	orr.w	r3, r1, ip
 810b3e8:	bf34      	ite	cc
 810b3ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b3ee:	2100      	movcs	r1, #0
 810b3f0:	3015      	adds	r0, #21
 810b3f2:	fa04 f000 	lsl.w	r0, r4, r0
 810b3f6:	fa21 f10e 	lsr.w	r1, r1, lr
 810b3fa:	ea40 0201 	orr.w	r2, r0, r1
 810b3fe:	ec43 2b10 	vmov	d0, r2, r3
 810b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b404:	42b7      	cmp	r7, r6
 810b406:	bf3a      	itte	cc
 810b408:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b40c:	f1a5 0608 	subcc.w	r6, r5, #8
 810b410:	2100      	movcs	r1, #0
 810b412:	380b      	subs	r0, #11
 810b414:	d017      	beq.n	810b446 <__b2d+0x92>
 810b416:	f1c0 0c20 	rsb	ip, r0, #32
 810b41a:	fa04 f500 	lsl.w	r5, r4, r0
 810b41e:	42be      	cmp	r6, r7
 810b420:	fa21 f40c 	lsr.w	r4, r1, ip
 810b424:	ea45 0504 	orr.w	r5, r5, r4
 810b428:	bf8c      	ite	hi
 810b42a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b42e:	2400      	movls	r4, #0
 810b430:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b434:	fa01 f000 	lsl.w	r0, r1, r0
 810b438:	fa24 f40c 	lsr.w	r4, r4, ip
 810b43c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b440:	ea40 0204 	orr.w	r2, r0, r4
 810b444:	e7db      	b.n	810b3fe <__b2d+0x4a>
 810b446:	ea44 030c 	orr.w	r3, r4, ip
 810b44a:	460a      	mov	r2, r1
 810b44c:	e7d7      	b.n	810b3fe <__b2d+0x4a>
 810b44e:	bf00      	nop
 810b450:	3ff00000 	.word	0x3ff00000

0810b454 <__d2b>:
 810b454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b458:	4689      	mov	r9, r1
 810b45a:	2101      	movs	r1, #1
 810b45c:	ec57 6b10 	vmov	r6, r7, d0
 810b460:	4690      	mov	r8, r2
 810b462:	f7ff fc0f 	bl	810ac84 <_Balloc>
 810b466:	4604      	mov	r4, r0
 810b468:	b930      	cbnz	r0, 810b478 <__d2b+0x24>
 810b46a:	4602      	mov	r2, r0
 810b46c:	4b25      	ldr	r3, [pc, #148]	; (810b504 <__d2b+0xb0>)
 810b46e:	4826      	ldr	r0, [pc, #152]	; (810b508 <__d2b+0xb4>)
 810b470:	f240 310a 	movw	r1, #778	; 0x30a
 810b474:	f7fb fef0 	bl	8107258 <__assert_func>
 810b478:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b47c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b480:	bb35      	cbnz	r5, 810b4d0 <__d2b+0x7c>
 810b482:	2e00      	cmp	r6, #0
 810b484:	9301      	str	r3, [sp, #4]
 810b486:	d028      	beq.n	810b4da <__d2b+0x86>
 810b488:	4668      	mov	r0, sp
 810b48a:	9600      	str	r6, [sp, #0]
 810b48c:	f7ff fd10 	bl	810aeb0 <__lo0bits>
 810b490:	9900      	ldr	r1, [sp, #0]
 810b492:	b300      	cbz	r0, 810b4d6 <__d2b+0x82>
 810b494:	9a01      	ldr	r2, [sp, #4]
 810b496:	f1c0 0320 	rsb	r3, r0, #32
 810b49a:	fa02 f303 	lsl.w	r3, r2, r3
 810b49e:	430b      	orrs	r3, r1
 810b4a0:	40c2      	lsrs	r2, r0
 810b4a2:	6163      	str	r3, [r4, #20]
 810b4a4:	9201      	str	r2, [sp, #4]
 810b4a6:	9b01      	ldr	r3, [sp, #4]
 810b4a8:	61a3      	str	r3, [r4, #24]
 810b4aa:	2b00      	cmp	r3, #0
 810b4ac:	bf14      	ite	ne
 810b4ae:	2202      	movne	r2, #2
 810b4b0:	2201      	moveq	r2, #1
 810b4b2:	6122      	str	r2, [r4, #16]
 810b4b4:	b1d5      	cbz	r5, 810b4ec <__d2b+0x98>
 810b4b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b4ba:	4405      	add	r5, r0
 810b4bc:	f8c9 5000 	str.w	r5, [r9]
 810b4c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b4c4:	f8c8 0000 	str.w	r0, [r8]
 810b4c8:	4620      	mov	r0, r4
 810b4ca:	b003      	add	sp, #12
 810b4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b4d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b4d4:	e7d5      	b.n	810b482 <__d2b+0x2e>
 810b4d6:	6161      	str	r1, [r4, #20]
 810b4d8:	e7e5      	b.n	810b4a6 <__d2b+0x52>
 810b4da:	a801      	add	r0, sp, #4
 810b4dc:	f7ff fce8 	bl	810aeb0 <__lo0bits>
 810b4e0:	9b01      	ldr	r3, [sp, #4]
 810b4e2:	6163      	str	r3, [r4, #20]
 810b4e4:	2201      	movs	r2, #1
 810b4e6:	6122      	str	r2, [r4, #16]
 810b4e8:	3020      	adds	r0, #32
 810b4ea:	e7e3      	b.n	810b4b4 <__d2b+0x60>
 810b4ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b4f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b4f4:	f8c9 0000 	str.w	r0, [r9]
 810b4f8:	6918      	ldr	r0, [r3, #16]
 810b4fa:	f7ff fcb9 	bl	810ae70 <__hi0bits>
 810b4fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b502:	e7df      	b.n	810b4c4 <__d2b+0x70>
 810b504:	0810c00c 	.word	0x0810c00c
 810b508:	0810c100 	.word	0x0810c100

0810b50c <__ratio>:
 810b50c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b510:	4688      	mov	r8, r1
 810b512:	4669      	mov	r1, sp
 810b514:	4681      	mov	r9, r0
 810b516:	f7ff ff4d 	bl	810b3b4 <__b2d>
 810b51a:	a901      	add	r1, sp, #4
 810b51c:	4640      	mov	r0, r8
 810b51e:	ec55 4b10 	vmov	r4, r5, d0
 810b522:	f7ff ff47 	bl	810b3b4 <__b2d>
 810b526:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b52a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b52e:	eba3 0c02 	sub.w	ip, r3, r2
 810b532:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b536:	1a9b      	subs	r3, r3, r2
 810b538:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b53c:	ec51 0b10 	vmov	r0, r1, d0
 810b540:	2b00      	cmp	r3, #0
 810b542:	bfd6      	itet	le
 810b544:	460a      	movle	r2, r1
 810b546:	462a      	movgt	r2, r5
 810b548:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b54c:	468b      	mov	fp, r1
 810b54e:	462f      	mov	r7, r5
 810b550:	bfd4      	ite	le
 810b552:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b556:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b55a:	4620      	mov	r0, r4
 810b55c:	ee10 2a10 	vmov	r2, s0
 810b560:	465b      	mov	r3, fp
 810b562:	4639      	mov	r1, r7
 810b564:	f7f5 fa0a 	bl	810097c <__aeabi_ddiv>
 810b568:	ec41 0b10 	vmov	d0, r0, r1
 810b56c:	b003      	add	sp, #12
 810b56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b572 <__copybits>:
 810b572:	3901      	subs	r1, #1
 810b574:	b570      	push	{r4, r5, r6, lr}
 810b576:	1149      	asrs	r1, r1, #5
 810b578:	6914      	ldr	r4, [r2, #16]
 810b57a:	3101      	adds	r1, #1
 810b57c:	f102 0314 	add.w	r3, r2, #20
 810b580:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b584:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b588:	1f05      	subs	r5, r0, #4
 810b58a:	42a3      	cmp	r3, r4
 810b58c:	d30c      	bcc.n	810b5a8 <__copybits+0x36>
 810b58e:	1aa3      	subs	r3, r4, r2
 810b590:	3b11      	subs	r3, #17
 810b592:	f023 0303 	bic.w	r3, r3, #3
 810b596:	3211      	adds	r2, #17
 810b598:	42a2      	cmp	r2, r4
 810b59a:	bf88      	it	hi
 810b59c:	2300      	movhi	r3, #0
 810b59e:	4418      	add	r0, r3
 810b5a0:	2300      	movs	r3, #0
 810b5a2:	4288      	cmp	r0, r1
 810b5a4:	d305      	bcc.n	810b5b2 <__copybits+0x40>
 810b5a6:	bd70      	pop	{r4, r5, r6, pc}
 810b5a8:	f853 6b04 	ldr.w	r6, [r3], #4
 810b5ac:	f845 6f04 	str.w	r6, [r5, #4]!
 810b5b0:	e7eb      	b.n	810b58a <__copybits+0x18>
 810b5b2:	f840 3b04 	str.w	r3, [r0], #4
 810b5b6:	e7f4      	b.n	810b5a2 <__copybits+0x30>

0810b5b8 <__any_on>:
 810b5b8:	f100 0214 	add.w	r2, r0, #20
 810b5bc:	6900      	ldr	r0, [r0, #16]
 810b5be:	114b      	asrs	r3, r1, #5
 810b5c0:	4298      	cmp	r0, r3
 810b5c2:	b510      	push	{r4, lr}
 810b5c4:	db11      	blt.n	810b5ea <__any_on+0x32>
 810b5c6:	dd0a      	ble.n	810b5de <__any_on+0x26>
 810b5c8:	f011 011f 	ands.w	r1, r1, #31
 810b5cc:	d007      	beq.n	810b5de <__any_on+0x26>
 810b5ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b5d2:	fa24 f001 	lsr.w	r0, r4, r1
 810b5d6:	fa00 f101 	lsl.w	r1, r0, r1
 810b5da:	428c      	cmp	r4, r1
 810b5dc:	d10b      	bne.n	810b5f6 <__any_on+0x3e>
 810b5de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b5e2:	4293      	cmp	r3, r2
 810b5e4:	d803      	bhi.n	810b5ee <__any_on+0x36>
 810b5e6:	2000      	movs	r0, #0
 810b5e8:	bd10      	pop	{r4, pc}
 810b5ea:	4603      	mov	r3, r0
 810b5ec:	e7f7      	b.n	810b5de <__any_on+0x26>
 810b5ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b5f2:	2900      	cmp	r1, #0
 810b5f4:	d0f5      	beq.n	810b5e2 <__any_on+0x2a>
 810b5f6:	2001      	movs	r0, #1
 810b5f8:	e7f6      	b.n	810b5e8 <__any_on+0x30>

0810b5fa <_calloc_r>:
 810b5fa:	b513      	push	{r0, r1, r4, lr}
 810b5fc:	434a      	muls	r2, r1
 810b5fe:	4611      	mov	r1, r2
 810b600:	9201      	str	r2, [sp, #4]
 810b602:	f7fb fef9 	bl	81073f8 <_malloc_r>
 810b606:	4604      	mov	r4, r0
 810b608:	b118      	cbz	r0, 810b612 <_calloc_r+0x18>
 810b60a:	9a01      	ldr	r2, [sp, #4]
 810b60c:	2100      	movs	r1, #0
 810b60e:	f7fb fe9b 	bl	8107348 <memset>
 810b612:	4620      	mov	r0, r4
 810b614:	b002      	add	sp, #8
 810b616:	bd10      	pop	{r4, pc}

0810b618 <_realloc_r>:
 810b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b61a:	4607      	mov	r7, r0
 810b61c:	4614      	mov	r4, r2
 810b61e:	460e      	mov	r6, r1
 810b620:	b921      	cbnz	r1, 810b62c <_realloc_r+0x14>
 810b622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810b626:	4611      	mov	r1, r2
 810b628:	f7fb bee6 	b.w	81073f8 <_malloc_r>
 810b62c:	b922      	cbnz	r2, 810b638 <_realloc_r+0x20>
 810b62e:	f7fb fe93 	bl	8107358 <_free_r>
 810b632:	4625      	mov	r5, r4
 810b634:	4628      	mov	r0, r5
 810b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b638:	f000 fa64 	bl	810bb04 <_malloc_usable_size_r>
 810b63c:	42a0      	cmp	r0, r4
 810b63e:	d20f      	bcs.n	810b660 <_realloc_r+0x48>
 810b640:	4621      	mov	r1, r4
 810b642:	4638      	mov	r0, r7
 810b644:	f7fb fed8 	bl	81073f8 <_malloc_r>
 810b648:	4605      	mov	r5, r0
 810b64a:	2800      	cmp	r0, #0
 810b64c:	d0f2      	beq.n	810b634 <_realloc_r+0x1c>
 810b64e:	4631      	mov	r1, r6
 810b650:	4622      	mov	r2, r4
 810b652:	f7fb fe6b 	bl	810732c <memcpy>
 810b656:	4631      	mov	r1, r6
 810b658:	4638      	mov	r0, r7
 810b65a:	f7fb fe7d 	bl	8107358 <_free_r>
 810b65e:	e7e9      	b.n	810b634 <_realloc_r+0x1c>
 810b660:	4635      	mov	r5, r6
 810b662:	e7e7      	b.n	810b634 <_realloc_r+0x1c>

0810b664 <__ssputs_r>:
 810b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b668:	688e      	ldr	r6, [r1, #8]
 810b66a:	429e      	cmp	r6, r3
 810b66c:	4682      	mov	sl, r0
 810b66e:	460c      	mov	r4, r1
 810b670:	4690      	mov	r8, r2
 810b672:	461f      	mov	r7, r3
 810b674:	d838      	bhi.n	810b6e8 <__ssputs_r+0x84>
 810b676:	898a      	ldrh	r2, [r1, #12]
 810b678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b67c:	d032      	beq.n	810b6e4 <__ssputs_r+0x80>
 810b67e:	6825      	ldr	r5, [r4, #0]
 810b680:	6909      	ldr	r1, [r1, #16]
 810b682:	eba5 0901 	sub.w	r9, r5, r1
 810b686:	6965      	ldr	r5, [r4, #20]
 810b688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b68c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b690:	3301      	adds	r3, #1
 810b692:	444b      	add	r3, r9
 810b694:	106d      	asrs	r5, r5, #1
 810b696:	429d      	cmp	r5, r3
 810b698:	bf38      	it	cc
 810b69a:	461d      	movcc	r5, r3
 810b69c:	0553      	lsls	r3, r2, #21
 810b69e:	d531      	bpl.n	810b704 <__ssputs_r+0xa0>
 810b6a0:	4629      	mov	r1, r5
 810b6a2:	f7fb fea9 	bl	81073f8 <_malloc_r>
 810b6a6:	4606      	mov	r6, r0
 810b6a8:	b950      	cbnz	r0, 810b6c0 <__ssputs_r+0x5c>
 810b6aa:	230c      	movs	r3, #12
 810b6ac:	f8ca 3000 	str.w	r3, [sl]
 810b6b0:	89a3      	ldrh	r3, [r4, #12]
 810b6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b6b6:	81a3      	strh	r3, [r4, #12]
 810b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 810b6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b6c0:	6921      	ldr	r1, [r4, #16]
 810b6c2:	464a      	mov	r2, r9
 810b6c4:	f7fb fe32 	bl	810732c <memcpy>
 810b6c8:	89a3      	ldrh	r3, [r4, #12]
 810b6ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b6d2:	81a3      	strh	r3, [r4, #12]
 810b6d4:	6126      	str	r6, [r4, #16]
 810b6d6:	6165      	str	r5, [r4, #20]
 810b6d8:	444e      	add	r6, r9
 810b6da:	eba5 0509 	sub.w	r5, r5, r9
 810b6de:	6026      	str	r6, [r4, #0]
 810b6e0:	60a5      	str	r5, [r4, #8]
 810b6e2:	463e      	mov	r6, r7
 810b6e4:	42be      	cmp	r6, r7
 810b6e6:	d900      	bls.n	810b6ea <__ssputs_r+0x86>
 810b6e8:	463e      	mov	r6, r7
 810b6ea:	4632      	mov	r2, r6
 810b6ec:	6820      	ldr	r0, [r4, #0]
 810b6ee:	4641      	mov	r1, r8
 810b6f0:	f7ff faa2 	bl	810ac38 <memmove>
 810b6f4:	68a3      	ldr	r3, [r4, #8]
 810b6f6:	6822      	ldr	r2, [r4, #0]
 810b6f8:	1b9b      	subs	r3, r3, r6
 810b6fa:	4432      	add	r2, r6
 810b6fc:	60a3      	str	r3, [r4, #8]
 810b6fe:	6022      	str	r2, [r4, #0]
 810b700:	2000      	movs	r0, #0
 810b702:	e7db      	b.n	810b6bc <__ssputs_r+0x58>
 810b704:	462a      	mov	r2, r5
 810b706:	f7ff ff87 	bl	810b618 <_realloc_r>
 810b70a:	4606      	mov	r6, r0
 810b70c:	2800      	cmp	r0, #0
 810b70e:	d1e1      	bne.n	810b6d4 <__ssputs_r+0x70>
 810b710:	6921      	ldr	r1, [r4, #16]
 810b712:	4650      	mov	r0, sl
 810b714:	f7fb fe20 	bl	8107358 <_free_r>
 810b718:	e7c7      	b.n	810b6aa <__ssputs_r+0x46>
	...

0810b71c <_svfiprintf_r>:
 810b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b720:	4698      	mov	r8, r3
 810b722:	898b      	ldrh	r3, [r1, #12]
 810b724:	061b      	lsls	r3, r3, #24
 810b726:	b09d      	sub	sp, #116	; 0x74
 810b728:	4607      	mov	r7, r0
 810b72a:	460d      	mov	r5, r1
 810b72c:	4614      	mov	r4, r2
 810b72e:	d50e      	bpl.n	810b74e <_svfiprintf_r+0x32>
 810b730:	690b      	ldr	r3, [r1, #16]
 810b732:	b963      	cbnz	r3, 810b74e <_svfiprintf_r+0x32>
 810b734:	2140      	movs	r1, #64	; 0x40
 810b736:	f7fb fe5f 	bl	81073f8 <_malloc_r>
 810b73a:	6028      	str	r0, [r5, #0]
 810b73c:	6128      	str	r0, [r5, #16]
 810b73e:	b920      	cbnz	r0, 810b74a <_svfiprintf_r+0x2e>
 810b740:	230c      	movs	r3, #12
 810b742:	603b      	str	r3, [r7, #0]
 810b744:	f04f 30ff 	mov.w	r0, #4294967295
 810b748:	e0d1      	b.n	810b8ee <_svfiprintf_r+0x1d2>
 810b74a:	2340      	movs	r3, #64	; 0x40
 810b74c:	616b      	str	r3, [r5, #20]
 810b74e:	2300      	movs	r3, #0
 810b750:	9309      	str	r3, [sp, #36]	; 0x24
 810b752:	2320      	movs	r3, #32
 810b754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b758:	f8cd 800c 	str.w	r8, [sp, #12]
 810b75c:	2330      	movs	r3, #48	; 0x30
 810b75e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810b908 <_svfiprintf_r+0x1ec>
 810b762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b766:	f04f 0901 	mov.w	r9, #1
 810b76a:	4623      	mov	r3, r4
 810b76c:	469a      	mov	sl, r3
 810b76e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b772:	b10a      	cbz	r2, 810b778 <_svfiprintf_r+0x5c>
 810b774:	2a25      	cmp	r2, #37	; 0x25
 810b776:	d1f9      	bne.n	810b76c <_svfiprintf_r+0x50>
 810b778:	ebba 0b04 	subs.w	fp, sl, r4
 810b77c:	d00b      	beq.n	810b796 <_svfiprintf_r+0x7a>
 810b77e:	465b      	mov	r3, fp
 810b780:	4622      	mov	r2, r4
 810b782:	4629      	mov	r1, r5
 810b784:	4638      	mov	r0, r7
 810b786:	f7ff ff6d 	bl	810b664 <__ssputs_r>
 810b78a:	3001      	adds	r0, #1
 810b78c:	f000 80aa 	beq.w	810b8e4 <_svfiprintf_r+0x1c8>
 810b790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b792:	445a      	add	r2, fp
 810b794:	9209      	str	r2, [sp, #36]	; 0x24
 810b796:	f89a 3000 	ldrb.w	r3, [sl]
 810b79a:	2b00      	cmp	r3, #0
 810b79c:	f000 80a2 	beq.w	810b8e4 <_svfiprintf_r+0x1c8>
 810b7a0:	2300      	movs	r3, #0
 810b7a2:	f04f 32ff 	mov.w	r2, #4294967295
 810b7a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b7aa:	f10a 0a01 	add.w	sl, sl, #1
 810b7ae:	9304      	str	r3, [sp, #16]
 810b7b0:	9307      	str	r3, [sp, #28]
 810b7b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b7b6:	931a      	str	r3, [sp, #104]	; 0x68
 810b7b8:	4654      	mov	r4, sl
 810b7ba:	2205      	movs	r2, #5
 810b7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b7c0:	4851      	ldr	r0, [pc, #324]	; (810b908 <_svfiprintf_r+0x1ec>)
 810b7c2:	f7f4 fda5 	bl	8100310 <memchr>
 810b7c6:	9a04      	ldr	r2, [sp, #16]
 810b7c8:	b9d8      	cbnz	r0, 810b802 <_svfiprintf_r+0xe6>
 810b7ca:	06d0      	lsls	r0, r2, #27
 810b7cc:	bf44      	itt	mi
 810b7ce:	2320      	movmi	r3, #32
 810b7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b7d4:	0711      	lsls	r1, r2, #28
 810b7d6:	bf44      	itt	mi
 810b7d8:	232b      	movmi	r3, #43	; 0x2b
 810b7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b7de:	f89a 3000 	ldrb.w	r3, [sl]
 810b7e2:	2b2a      	cmp	r3, #42	; 0x2a
 810b7e4:	d015      	beq.n	810b812 <_svfiprintf_r+0xf6>
 810b7e6:	9a07      	ldr	r2, [sp, #28]
 810b7e8:	4654      	mov	r4, sl
 810b7ea:	2000      	movs	r0, #0
 810b7ec:	f04f 0c0a 	mov.w	ip, #10
 810b7f0:	4621      	mov	r1, r4
 810b7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b7f6:	3b30      	subs	r3, #48	; 0x30
 810b7f8:	2b09      	cmp	r3, #9
 810b7fa:	d94e      	bls.n	810b89a <_svfiprintf_r+0x17e>
 810b7fc:	b1b0      	cbz	r0, 810b82c <_svfiprintf_r+0x110>
 810b7fe:	9207      	str	r2, [sp, #28]
 810b800:	e014      	b.n	810b82c <_svfiprintf_r+0x110>
 810b802:	eba0 0308 	sub.w	r3, r0, r8
 810b806:	fa09 f303 	lsl.w	r3, r9, r3
 810b80a:	4313      	orrs	r3, r2
 810b80c:	9304      	str	r3, [sp, #16]
 810b80e:	46a2      	mov	sl, r4
 810b810:	e7d2      	b.n	810b7b8 <_svfiprintf_r+0x9c>
 810b812:	9b03      	ldr	r3, [sp, #12]
 810b814:	1d19      	adds	r1, r3, #4
 810b816:	681b      	ldr	r3, [r3, #0]
 810b818:	9103      	str	r1, [sp, #12]
 810b81a:	2b00      	cmp	r3, #0
 810b81c:	bfbb      	ittet	lt
 810b81e:	425b      	neglt	r3, r3
 810b820:	f042 0202 	orrlt.w	r2, r2, #2
 810b824:	9307      	strge	r3, [sp, #28]
 810b826:	9307      	strlt	r3, [sp, #28]
 810b828:	bfb8      	it	lt
 810b82a:	9204      	strlt	r2, [sp, #16]
 810b82c:	7823      	ldrb	r3, [r4, #0]
 810b82e:	2b2e      	cmp	r3, #46	; 0x2e
 810b830:	d10c      	bne.n	810b84c <_svfiprintf_r+0x130>
 810b832:	7863      	ldrb	r3, [r4, #1]
 810b834:	2b2a      	cmp	r3, #42	; 0x2a
 810b836:	d135      	bne.n	810b8a4 <_svfiprintf_r+0x188>
 810b838:	9b03      	ldr	r3, [sp, #12]
 810b83a:	1d1a      	adds	r2, r3, #4
 810b83c:	681b      	ldr	r3, [r3, #0]
 810b83e:	9203      	str	r2, [sp, #12]
 810b840:	2b00      	cmp	r3, #0
 810b842:	bfb8      	it	lt
 810b844:	f04f 33ff 	movlt.w	r3, #4294967295
 810b848:	3402      	adds	r4, #2
 810b84a:	9305      	str	r3, [sp, #20]
 810b84c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810b918 <_svfiprintf_r+0x1fc>
 810b850:	7821      	ldrb	r1, [r4, #0]
 810b852:	2203      	movs	r2, #3
 810b854:	4650      	mov	r0, sl
 810b856:	f7f4 fd5b 	bl	8100310 <memchr>
 810b85a:	b140      	cbz	r0, 810b86e <_svfiprintf_r+0x152>
 810b85c:	2340      	movs	r3, #64	; 0x40
 810b85e:	eba0 000a 	sub.w	r0, r0, sl
 810b862:	fa03 f000 	lsl.w	r0, r3, r0
 810b866:	9b04      	ldr	r3, [sp, #16]
 810b868:	4303      	orrs	r3, r0
 810b86a:	3401      	adds	r4, #1
 810b86c:	9304      	str	r3, [sp, #16]
 810b86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b872:	4826      	ldr	r0, [pc, #152]	; (810b90c <_svfiprintf_r+0x1f0>)
 810b874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b878:	2206      	movs	r2, #6
 810b87a:	f7f4 fd49 	bl	8100310 <memchr>
 810b87e:	2800      	cmp	r0, #0
 810b880:	d038      	beq.n	810b8f4 <_svfiprintf_r+0x1d8>
 810b882:	4b23      	ldr	r3, [pc, #140]	; (810b910 <_svfiprintf_r+0x1f4>)
 810b884:	bb1b      	cbnz	r3, 810b8ce <_svfiprintf_r+0x1b2>
 810b886:	9b03      	ldr	r3, [sp, #12]
 810b888:	3307      	adds	r3, #7
 810b88a:	f023 0307 	bic.w	r3, r3, #7
 810b88e:	3308      	adds	r3, #8
 810b890:	9303      	str	r3, [sp, #12]
 810b892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b894:	4433      	add	r3, r6
 810b896:	9309      	str	r3, [sp, #36]	; 0x24
 810b898:	e767      	b.n	810b76a <_svfiprintf_r+0x4e>
 810b89a:	fb0c 3202 	mla	r2, ip, r2, r3
 810b89e:	460c      	mov	r4, r1
 810b8a0:	2001      	movs	r0, #1
 810b8a2:	e7a5      	b.n	810b7f0 <_svfiprintf_r+0xd4>
 810b8a4:	2300      	movs	r3, #0
 810b8a6:	3401      	adds	r4, #1
 810b8a8:	9305      	str	r3, [sp, #20]
 810b8aa:	4619      	mov	r1, r3
 810b8ac:	f04f 0c0a 	mov.w	ip, #10
 810b8b0:	4620      	mov	r0, r4
 810b8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b8b6:	3a30      	subs	r2, #48	; 0x30
 810b8b8:	2a09      	cmp	r2, #9
 810b8ba:	d903      	bls.n	810b8c4 <_svfiprintf_r+0x1a8>
 810b8bc:	2b00      	cmp	r3, #0
 810b8be:	d0c5      	beq.n	810b84c <_svfiprintf_r+0x130>
 810b8c0:	9105      	str	r1, [sp, #20]
 810b8c2:	e7c3      	b.n	810b84c <_svfiprintf_r+0x130>
 810b8c4:	fb0c 2101 	mla	r1, ip, r1, r2
 810b8c8:	4604      	mov	r4, r0
 810b8ca:	2301      	movs	r3, #1
 810b8cc:	e7f0      	b.n	810b8b0 <_svfiprintf_r+0x194>
 810b8ce:	ab03      	add	r3, sp, #12
 810b8d0:	9300      	str	r3, [sp, #0]
 810b8d2:	462a      	mov	r2, r5
 810b8d4:	4b0f      	ldr	r3, [pc, #60]	; (810b914 <_svfiprintf_r+0x1f8>)
 810b8d6:	a904      	add	r1, sp, #16
 810b8d8:	4638      	mov	r0, r7
 810b8da:	f7fb ffe1 	bl	81078a0 <_printf_float>
 810b8de:	1c42      	adds	r2, r0, #1
 810b8e0:	4606      	mov	r6, r0
 810b8e2:	d1d6      	bne.n	810b892 <_svfiprintf_r+0x176>
 810b8e4:	89ab      	ldrh	r3, [r5, #12]
 810b8e6:	065b      	lsls	r3, r3, #25
 810b8e8:	f53f af2c 	bmi.w	810b744 <_svfiprintf_r+0x28>
 810b8ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b8ee:	b01d      	add	sp, #116	; 0x74
 810b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b8f4:	ab03      	add	r3, sp, #12
 810b8f6:	9300      	str	r3, [sp, #0]
 810b8f8:	462a      	mov	r2, r5
 810b8fa:	4b06      	ldr	r3, [pc, #24]	; (810b914 <_svfiprintf_r+0x1f8>)
 810b8fc:	a904      	add	r1, sp, #16
 810b8fe:	4638      	mov	r0, r7
 810b900:	f7fc fa72 	bl	8107de8 <_printf_i>
 810b904:	e7eb      	b.n	810b8de <_svfiprintf_r+0x1c2>
 810b906:	bf00      	nop
 810b908:	0810bde8 	.word	0x0810bde8
 810b90c:	0810bdf2 	.word	0x0810bdf2
 810b910:	081078a1 	.word	0x081078a1
 810b914:	0810b665 	.word	0x0810b665
 810b918:	0810bdee 	.word	0x0810bdee
 810b91c:	00000000 	.word	0x00000000

0810b920 <nan>:
 810b920:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b928 <nan+0x8>
 810b924:	4770      	bx	lr
 810b926:	bf00      	nop
 810b928:	00000000 	.word	0x00000000
 810b92c:	7ff80000 	.word	0x7ff80000

0810b930 <_raise_r>:
 810b930:	291f      	cmp	r1, #31
 810b932:	b538      	push	{r3, r4, r5, lr}
 810b934:	4604      	mov	r4, r0
 810b936:	460d      	mov	r5, r1
 810b938:	d904      	bls.n	810b944 <_raise_r+0x14>
 810b93a:	2316      	movs	r3, #22
 810b93c:	6003      	str	r3, [r0, #0]
 810b93e:	f04f 30ff 	mov.w	r0, #4294967295
 810b942:	bd38      	pop	{r3, r4, r5, pc}
 810b944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b946:	b112      	cbz	r2, 810b94e <_raise_r+0x1e>
 810b948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b94c:	b94b      	cbnz	r3, 810b962 <_raise_r+0x32>
 810b94e:	4620      	mov	r0, r4
 810b950:	f000 f830 	bl	810b9b4 <_getpid_r>
 810b954:	462a      	mov	r2, r5
 810b956:	4601      	mov	r1, r0
 810b958:	4620      	mov	r0, r4
 810b95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b95e:	f000 b817 	b.w	810b990 <_kill_r>
 810b962:	2b01      	cmp	r3, #1
 810b964:	d00a      	beq.n	810b97c <_raise_r+0x4c>
 810b966:	1c59      	adds	r1, r3, #1
 810b968:	d103      	bne.n	810b972 <_raise_r+0x42>
 810b96a:	2316      	movs	r3, #22
 810b96c:	6003      	str	r3, [r0, #0]
 810b96e:	2001      	movs	r0, #1
 810b970:	e7e7      	b.n	810b942 <_raise_r+0x12>
 810b972:	2400      	movs	r4, #0
 810b974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b978:	4628      	mov	r0, r5
 810b97a:	4798      	blx	r3
 810b97c:	2000      	movs	r0, #0
 810b97e:	e7e0      	b.n	810b942 <_raise_r+0x12>

0810b980 <raise>:
 810b980:	4b02      	ldr	r3, [pc, #8]	; (810b98c <raise+0xc>)
 810b982:	4601      	mov	r1, r0
 810b984:	6818      	ldr	r0, [r3, #0]
 810b986:	f7ff bfd3 	b.w	810b930 <_raise_r>
 810b98a:	bf00      	nop
 810b98c:	100000b8 	.word	0x100000b8

0810b990 <_kill_r>:
 810b990:	b538      	push	{r3, r4, r5, lr}
 810b992:	4d07      	ldr	r5, [pc, #28]	; (810b9b0 <_kill_r+0x20>)
 810b994:	2300      	movs	r3, #0
 810b996:	4604      	mov	r4, r0
 810b998:	4608      	mov	r0, r1
 810b99a:	4611      	mov	r1, r2
 810b99c:	602b      	str	r3, [r5, #0]
 810b99e:	f7f5 fe21 	bl	81015e4 <_kill>
 810b9a2:	1c43      	adds	r3, r0, #1
 810b9a4:	d102      	bne.n	810b9ac <_kill_r+0x1c>
 810b9a6:	682b      	ldr	r3, [r5, #0]
 810b9a8:	b103      	cbz	r3, 810b9ac <_kill_r+0x1c>
 810b9aa:	6023      	str	r3, [r4, #0]
 810b9ac:	bd38      	pop	{r3, r4, r5, pc}
 810b9ae:	bf00      	nop
 810b9b0:	10000528 	.word	0x10000528

0810b9b4 <_getpid_r>:
 810b9b4:	f7f5 be0e 	b.w	81015d4 <_getpid>

0810b9b8 <__sread>:
 810b9b8:	b510      	push	{r4, lr}
 810b9ba:	460c      	mov	r4, r1
 810b9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b9c0:	f000 f8a8 	bl	810bb14 <_read_r>
 810b9c4:	2800      	cmp	r0, #0
 810b9c6:	bfab      	itete	ge
 810b9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b9ca:	89a3      	ldrhlt	r3, [r4, #12]
 810b9cc:	181b      	addge	r3, r3, r0
 810b9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b9d2:	bfac      	ite	ge
 810b9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 810b9d6:	81a3      	strhlt	r3, [r4, #12]
 810b9d8:	bd10      	pop	{r4, pc}

0810b9da <__swrite>:
 810b9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b9de:	461f      	mov	r7, r3
 810b9e0:	898b      	ldrh	r3, [r1, #12]
 810b9e2:	05db      	lsls	r3, r3, #23
 810b9e4:	4605      	mov	r5, r0
 810b9e6:	460c      	mov	r4, r1
 810b9e8:	4616      	mov	r6, r2
 810b9ea:	d505      	bpl.n	810b9f8 <__swrite+0x1e>
 810b9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b9f0:	2302      	movs	r3, #2
 810b9f2:	2200      	movs	r2, #0
 810b9f4:	f000 f874 	bl	810bae0 <_lseek_r>
 810b9f8:	89a3      	ldrh	r3, [r4, #12]
 810b9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ba02:	81a3      	strh	r3, [r4, #12]
 810ba04:	4632      	mov	r2, r6
 810ba06:	463b      	mov	r3, r7
 810ba08:	4628      	mov	r0, r5
 810ba0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ba0e:	f000 b823 	b.w	810ba58 <_write_r>

0810ba12 <__sseek>:
 810ba12:	b510      	push	{r4, lr}
 810ba14:	460c      	mov	r4, r1
 810ba16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ba1a:	f000 f861 	bl	810bae0 <_lseek_r>
 810ba1e:	1c43      	adds	r3, r0, #1
 810ba20:	89a3      	ldrh	r3, [r4, #12]
 810ba22:	bf15      	itete	ne
 810ba24:	6560      	strne	r0, [r4, #84]	; 0x54
 810ba26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810ba2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810ba2e:	81a3      	strheq	r3, [r4, #12]
 810ba30:	bf18      	it	ne
 810ba32:	81a3      	strhne	r3, [r4, #12]
 810ba34:	bd10      	pop	{r4, pc}

0810ba36 <__sclose>:
 810ba36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ba3a:	f000 b81f 	b.w	810ba7c <_close_r>

0810ba3e <__ascii_wctomb>:
 810ba3e:	b149      	cbz	r1, 810ba54 <__ascii_wctomb+0x16>
 810ba40:	2aff      	cmp	r2, #255	; 0xff
 810ba42:	bf85      	ittet	hi
 810ba44:	238a      	movhi	r3, #138	; 0x8a
 810ba46:	6003      	strhi	r3, [r0, #0]
 810ba48:	700a      	strbls	r2, [r1, #0]
 810ba4a:	f04f 30ff 	movhi.w	r0, #4294967295
 810ba4e:	bf98      	it	ls
 810ba50:	2001      	movls	r0, #1
 810ba52:	4770      	bx	lr
 810ba54:	4608      	mov	r0, r1
 810ba56:	4770      	bx	lr

0810ba58 <_write_r>:
 810ba58:	b538      	push	{r3, r4, r5, lr}
 810ba5a:	4d07      	ldr	r5, [pc, #28]	; (810ba78 <_write_r+0x20>)
 810ba5c:	4604      	mov	r4, r0
 810ba5e:	4608      	mov	r0, r1
 810ba60:	4611      	mov	r1, r2
 810ba62:	2200      	movs	r2, #0
 810ba64:	602a      	str	r2, [r5, #0]
 810ba66:	461a      	mov	r2, r3
 810ba68:	f7f5 fdf3 	bl	8101652 <_write>
 810ba6c:	1c43      	adds	r3, r0, #1
 810ba6e:	d102      	bne.n	810ba76 <_write_r+0x1e>
 810ba70:	682b      	ldr	r3, [r5, #0]
 810ba72:	b103      	cbz	r3, 810ba76 <_write_r+0x1e>
 810ba74:	6023      	str	r3, [r4, #0]
 810ba76:	bd38      	pop	{r3, r4, r5, pc}
 810ba78:	10000528 	.word	0x10000528

0810ba7c <_close_r>:
 810ba7c:	b538      	push	{r3, r4, r5, lr}
 810ba7e:	4d06      	ldr	r5, [pc, #24]	; (810ba98 <_close_r+0x1c>)
 810ba80:	2300      	movs	r3, #0
 810ba82:	4604      	mov	r4, r0
 810ba84:	4608      	mov	r0, r1
 810ba86:	602b      	str	r3, [r5, #0]
 810ba88:	f7f5 fdff 	bl	810168a <_close>
 810ba8c:	1c43      	adds	r3, r0, #1
 810ba8e:	d102      	bne.n	810ba96 <_close_r+0x1a>
 810ba90:	682b      	ldr	r3, [r5, #0]
 810ba92:	b103      	cbz	r3, 810ba96 <_close_r+0x1a>
 810ba94:	6023      	str	r3, [r4, #0]
 810ba96:	bd38      	pop	{r3, r4, r5, pc}
 810ba98:	10000528 	.word	0x10000528

0810ba9c <_fstat_r>:
 810ba9c:	b538      	push	{r3, r4, r5, lr}
 810ba9e:	4d07      	ldr	r5, [pc, #28]	; (810babc <_fstat_r+0x20>)
 810baa0:	2300      	movs	r3, #0
 810baa2:	4604      	mov	r4, r0
 810baa4:	4608      	mov	r0, r1
 810baa6:	4611      	mov	r1, r2
 810baa8:	602b      	str	r3, [r5, #0]
 810baaa:	f7f5 fdfa 	bl	81016a2 <_fstat>
 810baae:	1c43      	adds	r3, r0, #1
 810bab0:	d102      	bne.n	810bab8 <_fstat_r+0x1c>
 810bab2:	682b      	ldr	r3, [r5, #0]
 810bab4:	b103      	cbz	r3, 810bab8 <_fstat_r+0x1c>
 810bab6:	6023      	str	r3, [r4, #0]
 810bab8:	bd38      	pop	{r3, r4, r5, pc}
 810baba:	bf00      	nop
 810babc:	10000528 	.word	0x10000528

0810bac0 <_isatty_r>:
 810bac0:	b538      	push	{r3, r4, r5, lr}
 810bac2:	4d06      	ldr	r5, [pc, #24]	; (810badc <_isatty_r+0x1c>)
 810bac4:	2300      	movs	r3, #0
 810bac6:	4604      	mov	r4, r0
 810bac8:	4608      	mov	r0, r1
 810baca:	602b      	str	r3, [r5, #0]
 810bacc:	f7f5 fdf9 	bl	81016c2 <_isatty>
 810bad0:	1c43      	adds	r3, r0, #1
 810bad2:	d102      	bne.n	810bada <_isatty_r+0x1a>
 810bad4:	682b      	ldr	r3, [r5, #0]
 810bad6:	b103      	cbz	r3, 810bada <_isatty_r+0x1a>
 810bad8:	6023      	str	r3, [r4, #0]
 810bada:	bd38      	pop	{r3, r4, r5, pc}
 810badc:	10000528 	.word	0x10000528

0810bae0 <_lseek_r>:
 810bae0:	b538      	push	{r3, r4, r5, lr}
 810bae2:	4d07      	ldr	r5, [pc, #28]	; (810bb00 <_lseek_r+0x20>)
 810bae4:	4604      	mov	r4, r0
 810bae6:	4608      	mov	r0, r1
 810bae8:	4611      	mov	r1, r2
 810baea:	2200      	movs	r2, #0
 810baec:	602a      	str	r2, [r5, #0]
 810baee:	461a      	mov	r2, r3
 810baf0:	f7f5 fdf2 	bl	81016d8 <_lseek>
 810baf4:	1c43      	adds	r3, r0, #1
 810baf6:	d102      	bne.n	810bafe <_lseek_r+0x1e>
 810baf8:	682b      	ldr	r3, [r5, #0]
 810bafa:	b103      	cbz	r3, 810bafe <_lseek_r+0x1e>
 810bafc:	6023      	str	r3, [r4, #0]
 810bafe:	bd38      	pop	{r3, r4, r5, pc}
 810bb00:	10000528 	.word	0x10000528

0810bb04 <_malloc_usable_size_r>:
 810bb04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810bb08:	1f18      	subs	r0, r3, #4
 810bb0a:	2b00      	cmp	r3, #0
 810bb0c:	bfbc      	itt	lt
 810bb0e:	580b      	ldrlt	r3, [r1, r0]
 810bb10:	18c0      	addlt	r0, r0, r3
 810bb12:	4770      	bx	lr

0810bb14 <_read_r>:
 810bb14:	b538      	push	{r3, r4, r5, lr}
 810bb16:	4d07      	ldr	r5, [pc, #28]	; (810bb34 <_read_r+0x20>)
 810bb18:	4604      	mov	r4, r0
 810bb1a:	4608      	mov	r0, r1
 810bb1c:	4611      	mov	r1, r2
 810bb1e:	2200      	movs	r2, #0
 810bb20:	602a      	str	r2, [r5, #0]
 810bb22:	461a      	mov	r2, r3
 810bb24:	f7f5 fd78 	bl	8101618 <_read>
 810bb28:	1c43      	adds	r3, r0, #1
 810bb2a:	d102      	bne.n	810bb32 <_read_r+0x1e>
 810bb2c:	682b      	ldr	r3, [r5, #0]
 810bb2e:	b103      	cbz	r3, 810bb32 <_read_r+0x1e>
 810bb30:	6023      	str	r3, [r4, #0]
 810bb32:	bd38      	pop	{r3, r4, r5, pc}
 810bb34:	10000528 	.word	0x10000528

0810bb38 <_init>:
 810bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb3a:	bf00      	nop
 810bb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bb3e:	bc08      	pop	{r3}
 810bb40:	469e      	mov	lr, r3
 810bb42:	4770      	bx	lr

0810bb44 <_fini>:
 810bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb46:	bf00      	nop
 810bb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bb4a:	bc08      	pop	{r3}
 810bb4c:	469e      	mov	lr, r3
 810bb4e:	4770      	bx	lr
