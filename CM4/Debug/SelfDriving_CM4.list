
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b820  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0810bac0  0810bac0  0001bac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810c1cc  0810c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810c1d0  0810c1d0  0001c1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000028c  10000000  0810c1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000280  1000028c  0810c460  0002028c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000050c  0810c460  0002050c  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810c460  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034f61  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006392  00000000  00000000  0005521d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001550  00000000  00000000  0005b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001310  00000000  00000000  0005cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040634  00000000  00000000  0005de10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021080  00000000  00000000  0009e444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185830  00000000  00000000  000bf4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00244cf4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a50  00000000  00000000  00244d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000028c 	.word	0x1000028c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810baa8 	.word	0x0810baa8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000290 	.word	0x10000290
 81002dc:	0810baa8 	.word	0x0810baa8

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_d2lz>:
 8100db8:	b538      	push	{r3, r4, r5, lr}
 8100dba:	2200      	movs	r2, #0
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	460d      	mov	r5, r1
 8100dc2:	f7ff ff23 	bl	8100c0c <__aeabi_dcmplt>
 8100dc6:	b928      	cbnz	r0, 8100dd4 <__aeabi_d2lz+0x1c>
 8100dc8:	4620      	mov	r0, r4
 8100dca:	4629      	mov	r1, r5
 8100dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100dd0:	f000 b80a 	b.w	8100de8 <__aeabi_d2ulz>
 8100dd4:	4620      	mov	r0, r4
 8100dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dda:	f000 f805 	bl	8100de8 <__aeabi_d2ulz>
 8100dde:	4240      	negs	r0, r0
 8100de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100de4:	bd38      	pop	{r3, r4, r5, pc}
 8100de6:	bf00      	nop

08100de8 <__aeabi_d2ulz>:
 8100de8:	b5d0      	push	{r4, r6, r7, lr}
 8100dea:	4b0c      	ldr	r3, [pc, #48]	; (8100e1c <__aeabi_d2ulz+0x34>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	4606      	mov	r6, r0
 8100df0:	460f      	mov	r7, r1
 8100df2:	f7ff fc99 	bl	8100728 <__aeabi_dmul>
 8100df6:	f7ff ff6f 	bl	8100cd8 <__aeabi_d2uiz>
 8100dfa:	4604      	mov	r4, r0
 8100dfc:	f7ff fc1a 	bl	8100634 <__aeabi_ui2d>
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <__aeabi_d2ulz+0x38>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	f7ff fc90 	bl	8100728 <__aeabi_dmul>
 8100e08:	4602      	mov	r2, r0
 8100e0a:	460b      	mov	r3, r1
 8100e0c:	4630      	mov	r0, r6
 8100e0e:	4639      	mov	r1, r7
 8100e10:	f7ff fad2 	bl	81003b8 <__aeabi_dsub>
 8100e14:	f7ff ff60 	bl	8100cd8 <__aeabi_d2uiz>
 8100e18:	4621      	mov	r1, r4
 8100e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e1c:	3df00000 	.word	0x3df00000
 8100e20:	41f00000 	.word	0x41f00000

08100e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e24:	b480      	push	{r7}
 8100e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e28:	4b0b      	ldr	r3, [pc, #44]	; (8100e58 <SystemInit+0x34>)
 8100e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e2e:	4a0a      	ldr	r2, [pc, #40]	; (8100e58 <SystemInit+0x34>)
 8100e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e38:	4b07      	ldr	r3, [pc, #28]	; (8100e58 <SystemInit+0x34>)
 8100e3a:	691b      	ldr	r3, [r3, #16]
 8100e3c:	4a06      	ldr	r2, [pc, #24]	; (8100e58 <SystemInit+0x34>)
 8100e3e:	f043 0310 	orr.w	r3, r3, #16
 8100e42:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100e44:	4b04      	ldr	r3, [pc, #16]	; (8100e58 <SystemInit+0x34>)
 8100e46:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100e4a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100e4c:	bf00      	nop
 8100e4e:	46bd      	mov	sp, r7
 8100e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e54:	4770      	bx	lr
 8100e56:	bf00      	nop
 8100e58:	e000ed00 	.word	0xe000ed00

08100e5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100e5c:	b480      	push	{r7}
 8100e5e:	b085      	sub	sp, #20
 8100e60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100e62:	4b19      	ldr	r3, [pc, #100]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e68:	4a17      	ldr	r2, [pc, #92]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100e6a:	f043 0301 	orr.w	r3, r3, #1
 8100e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e72:	4b15      	ldr	r3, [pc, #84]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e78:	f003 0301 	and.w	r3, r3, #1
 8100e7c:	60fb      	str	r3, [r7, #12]
 8100e7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100e80:	4b11      	ldr	r3, [pc, #68]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e86:	4a10      	ldr	r2, [pc, #64]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100e88:	f043 0302 	orr.w	r3, r3, #2
 8100e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e90:	4b0d      	ldr	r3, [pc, #52]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e96:	f003 0302 	and.w	r3, r3, #2
 8100e9a:	60bb      	str	r3, [r7, #8]
 8100e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e9e:	4b0a      	ldr	r3, [pc, #40]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ea4:	4a08      	ldr	r2, [pc, #32]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100ea6:	f043 0308 	orr.w	r3, r3, #8
 8100eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100eae:	4b06      	ldr	r3, [pc, #24]	; (8100ec8 <MX_GPIO_Init+0x6c>)
 8100eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eb4:	f003 0308 	and.w	r3, r3, #8
 8100eb8:	607b      	str	r3, [r7, #4]
 8100eba:	687b      	ldr	r3, [r7, #4]

}
 8100ebc:	bf00      	nop
 8100ebe:	3714      	adds	r7, #20
 8100ec0:	46bd      	mov	sp, r7
 8100ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec6:	4770      	bx	lr
 8100ec8:	58024400 	.word	0x58024400

08100ecc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8100ecc:	b580      	push	{r7, lr}
 8100ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100ed0:	4b1b      	ldr	r3, [pc, #108]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100ed2:	4a1c      	ldr	r2, [pc, #112]	; (8100f44 <MX_I2C2_Init+0x78>)
 8100ed4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 8100ed6:	4b1a      	ldr	r3, [pc, #104]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100ed8:	4a1b      	ldr	r2, [pc, #108]	; (8100f48 <MX_I2C2_Init+0x7c>)
 8100eda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100edc:	4b18      	ldr	r3, [pc, #96]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100ee2:	4b17      	ldr	r3, [pc, #92]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100ee4:	2201      	movs	r2, #1
 8100ee6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100ee8:	4b15      	ldr	r3, [pc, #84]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100eea:	2200      	movs	r2, #0
 8100eec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100eee:	4b14      	ldr	r3, [pc, #80]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100ef0:	2200      	movs	r2, #0
 8100ef2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100ef4:	4b12      	ldr	r3, [pc, #72]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100ef6:	2200      	movs	r2, #0
 8100ef8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100efa:	4b11      	ldr	r3, [pc, #68]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100efc:	2200      	movs	r2, #0
 8100efe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f00:	4b0f      	ldr	r3, [pc, #60]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100f02:	2200      	movs	r2, #0
 8100f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100f06:	480e      	ldr	r0, [pc, #56]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100f08:	f001 f850 	bl	8101fac <HAL_I2C_Init>
 8100f0c:	4603      	mov	r3, r0
 8100f0e:	2b00      	cmp	r3, #0
 8100f10:	d001      	beq.n	8100f16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100f12:	f000 f9c9 	bl	81012a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100f16:	2100      	movs	r1, #0
 8100f18:	4809      	ldr	r0, [pc, #36]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100f1a:	f001 fd3b 	bl	8102994 <HAL_I2CEx_ConfigAnalogFilter>
 8100f1e:	4603      	mov	r3, r0
 8100f20:	2b00      	cmp	r3, #0
 8100f22:	d001      	beq.n	8100f28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100f24:	f000 f9c0 	bl	81012a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100f28:	2100      	movs	r1, #0
 8100f2a:	4805      	ldr	r0, [pc, #20]	; (8100f40 <MX_I2C2_Init+0x74>)
 8100f2c:	f001 fd7d 	bl	8102a2a <HAL_I2CEx_ConfigDigitalFilter>
 8100f30:	4603      	mov	r3, r0
 8100f32:	2b00      	cmp	r3, #0
 8100f34:	d001      	beq.n	8100f3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100f36:	f000 f9b7 	bl	81012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100f3a:	bf00      	nop
 8100f3c:	bd80      	pop	{r7, pc}
 8100f3e:	bf00      	nop
 8100f40:	100003b4 	.word	0x100003b4
 8100f44:	40005800 	.word	0x40005800
 8100f48:	00301242 	.word	0x00301242

08100f4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100f4c:	b580      	push	{r7, lr}
 8100f4e:	b0b8      	sub	sp, #224	; 0xe0
 8100f50:	af00      	add	r7, sp, #0
 8100f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f58:	2200      	movs	r2, #0
 8100f5a:	601a      	str	r2, [r3, #0]
 8100f5c:	605a      	str	r2, [r3, #4]
 8100f5e:	609a      	str	r2, [r3, #8]
 8100f60:	60da      	str	r2, [r3, #12]
 8100f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f64:	f107 0310 	add.w	r3, r7, #16
 8100f68:	22bc      	movs	r2, #188	; 0xbc
 8100f6a:	2100      	movs	r1, #0
 8100f6c:	4618      	mov	r0, r3
 8100f6e:	f006 f9a5 	bl	81072bc <memset>
  if(i2cHandle->Instance==I2C2)
 8100f72:	687b      	ldr	r3, [r7, #4]
 8100f74:	681b      	ldr	r3, [r3, #0]
 8100f76:	4a29      	ldr	r2, [pc, #164]	; (810101c <HAL_I2C_MspInit+0xd0>)
 8100f78:	4293      	cmp	r3, r2
 8100f7a:	d14a      	bne.n	8101012 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100f7c:	2308      	movs	r3, #8
 8100f7e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100f80:	2300      	movs	r3, #0
 8100f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f86:	f107 0310 	add.w	r3, r7, #16
 8100f8a:	4618      	mov	r0, r3
 8100f8c:	f001 ff9c 	bl	8102ec8 <HAL_RCCEx_PeriphCLKConfig>
 8100f90:	4603      	mov	r3, r0
 8100f92:	2b00      	cmp	r3, #0
 8100f94:	d001      	beq.n	8100f9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100f96:	f000 f987 	bl	81012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f9a:	4b21      	ldr	r3, [pc, #132]	; (8101020 <HAL_I2C_MspInit+0xd4>)
 8100f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fa0:	4a1f      	ldr	r2, [pc, #124]	; (8101020 <HAL_I2C_MspInit+0xd4>)
 8100fa2:	f043 0302 	orr.w	r3, r3, #2
 8100fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100faa:	4b1d      	ldr	r3, [pc, #116]	; (8101020 <HAL_I2C_MspInit+0xd4>)
 8100fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fb0:	f003 0302 	and.w	r3, r3, #2
 8100fb4:	60fb      	str	r3, [r7, #12]
 8100fb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8100fb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100fc0:	2312      	movs	r3, #18
 8100fc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fc6:	2300      	movs	r3, #0
 8100fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fcc:	2300      	movs	r3, #0
 8100fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100fd2:	2304      	movs	r3, #4
 8100fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100fd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fdc:	4619      	mov	r1, r3
 8100fde:	4811      	ldr	r0, [pc, #68]	; (8101024 <HAL_I2C_MspInit+0xd8>)
 8100fe0:	f000 fdda 	bl	8101b98 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100fe4:	4b0e      	ldr	r3, [pc, #56]	; (8101020 <HAL_I2C_MspInit+0xd4>)
 8100fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fea:	4a0d      	ldr	r2, [pc, #52]	; (8101020 <HAL_I2C_MspInit+0xd4>)
 8100fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100ff4:	4b0a      	ldr	r3, [pc, #40]	; (8101020 <HAL_I2C_MspInit+0xd4>)
 8100ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100ffe:	60bb      	str	r3, [r7, #8]
 8101000:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8101002:	2200      	movs	r2, #0
 8101004:	2100      	movs	r1, #0
 8101006:	2021      	movs	r0, #33	; 0x21
 8101008:	f000 fd6f 	bl	8101aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 810100c:	2021      	movs	r0, #33	; 0x21
 810100e:	f000 fd86 	bl	8101b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8101012:	bf00      	nop
 8101014:	37e0      	adds	r7, #224	; 0xe0
 8101016:	46bd      	mov	sp, r7
 8101018:	bd80      	pop	{r7, pc}
 810101a:	bf00      	nop
 810101c:	40005800 	.word	0x40005800
 8101020:	58024400 	.word	0x58024400
 8101024:	58020400 	.word	0x58020400

08101028 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8101028:	b580      	push	{r7, lr}
 810102a:	b086      	sub	sp, #24
 810102c:	af02      	add	r7, sp, #8
 810102e:	60f8      	str	r0, [r7, #12]
 8101030:	60b9      	str	r1, [r7, #8]
 8101032:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8101034:	68fb      	ldr	r3, [r7, #12]
 8101036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101038:	f1b3 3fff 	cmp.w	r3, #4294967295
 810103c:	d101      	bne.n	8101042 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 810103e:	4b09      	ldr	r3, [pc, #36]	; (8101064 <rpmsg_send+0x3c>)
 8101040:	e00c      	b.n	810105c <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8101042:	68fb      	ldr	r3, [r7, #12]
 8101044:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8101046:	68fb      	ldr	r3, [r7, #12]
 8101048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 810104a:	2301      	movs	r3, #1
 810104c:	9301      	str	r3, [sp, #4]
 810104e:	687b      	ldr	r3, [r7, #4]
 8101050:	9300      	str	r3, [sp, #0]
 8101052:	68bb      	ldr	r3, [r7, #8]
 8101054:	68f8      	ldr	r0, [r7, #12]
 8101056:	f004 fdd5 	bl	8105c04 <rpmsg_send_offchannel_raw>
 810105a:	4603      	mov	r3, r0
					 len, true);
}
 810105c:	4618      	mov	r0, r3
 810105e:	3710      	adds	r7, #16
 8101060:	46bd      	mov	sp, r7
 8101062:	bd80      	pop	{r7, pc}
 8101064:	fffff829 	.word	0xfffff829

08101068 <rpmsg_recv_callback>:
/* USER CODE BEGIN 0 */
HSEM_TypeDef * HSEM_DEBUG= HSEM;

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8101068:	b480      	push	{r7}
 810106a:	b085      	sub	sp, #20
 810106c:	af00      	add	r7, sp, #0
 810106e:	60f8      	str	r0, [r7, #12]
 8101070:	60b9      	str	r1, [r7, #8]
 8101072:	607a      	str	r2, [r7, #4]
 8101074:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8101076:	68bb      	ldr	r3, [r7, #8]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	4a06      	ldr	r2, [pc, #24]	; (8101094 <rpmsg_recv_callback+0x2c>)
 810107c:	6013      	str	r3, [r2, #0]
	message_received=1;
 810107e:	4b06      	ldr	r3, [pc, #24]	; (8101098 <rpmsg_recv_callback+0x30>)
 8101080:	2201      	movs	r2, #1
 8101082:	601a      	str	r2, [r3, #0]

	return 0;
 8101084:	2300      	movs	r3, #0
}
 8101086:	4618      	mov	r0, r3
 8101088:	3714      	adds	r7, #20
 810108a:	46bd      	mov	sp, r7
 810108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101090:	4770      	bx	lr
 8101092:	bf00      	nop
 8101094:	100002b0 	.word	0x100002b0
 8101098:	100002ac 	.word	0x100002ac

0810109c <receive_message>:

unsigned int receive_message(void)
{
 810109c:	b580      	push	{r7, lr}
 810109e:	af00      	add	r7, sp, #0
	while (message_received == 0)
 81010a0:	e001      	b.n	81010a6 <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 81010a2:	f006 f86b 	bl	810717c <OPENAMP_check_for_message>
	while (message_received == 0)
 81010a6:	4b05      	ldr	r3, [pc, #20]	; (81010bc <receive_message+0x20>)
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	2b00      	cmp	r3, #0
 81010ac:	d0f9      	beq.n	81010a2 <receive_message+0x6>
	}
	message_received = 0;
 81010ae:	4b03      	ldr	r3, [pc, #12]	; (81010bc <receive_message+0x20>)
 81010b0:	2200      	movs	r2, #0
 81010b2:	601a      	str	r2, [r3, #0]

	return received_data;
 81010b4:	4b02      	ldr	r3, [pc, #8]	; (81010c0 <receive_message+0x24>)
 81010b6:	681b      	ldr	r3, [r3, #0]
}
 81010b8:	4618      	mov	r0, r3
 81010ba:	bd80      	pop	{r7, pc}
 81010bc:	100002ac 	.word	0x100002ac
 81010c0:	100002b0 	.word	0x100002b0

081010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81010c6:	b09f      	sub	sp, #124	; 0x7c
 81010c8:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 81010ca:	2300      	movs	r3, #0
 81010cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 81010ce:	4b6d      	ldr	r3, [pc, #436]	; (8101284 <main+0x1c0>)
 81010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010d4:	4a6b      	ldr	r2, [pc, #428]	; (8101284 <main+0x1c0>)
 81010d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81010da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010de:	4b69      	ldr	r3, [pc, #420]	; (8101284 <main+0x1c0>)
 81010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81010e8:	607b      	str	r3, [r7, #4]
 81010ea:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81010ec:	2001      	movs	r0, #1
 81010ee:	f000 ff31 	bl	8101f54 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 81010f2:	f001 fd61 	bl	8102bb8 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81010f6:	2201      	movs	r2, #1
 81010f8:	2102      	movs	r1, #2
 81010fa:	2000      	movs	r0, #0
 81010fc:	f001 fce2 	bl	8102ac4 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101100:	4b61      	ldr	r3, [pc, #388]	; (8101288 <main+0x1c4>)
 8101102:	681b      	ldr	r3, [r3, #0]
 8101104:	091b      	lsrs	r3, r3, #4
 8101106:	f003 030f 	and.w	r3, r3, #15
 810110a:	2b07      	cmp	r3, #7
 810110c:	d108      	bne.n	8101120 <main+0x5c>
 810110e:	4b5f      	ldr	r3, [pc, #380]	; (810128c <main+0x1c8>)
 8101110:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101114:	4a5d      	ldr	r2, [pc, #372]	; (810128c <main+0x1c8>)
 8101116:	f043 0301 	orr.w	r3, r3, #1
 810111a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810111e:	e007      	b.n	8101130 <main+0x6c>
 8101120:	4b5a      	ldr	r3, [pc, #360]	; (810128c <main+0x1c8>)
 8101122:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101126:	4a59      	ldr	r2, [pc, #356]	; (810128c <main+0x1c8>)
 8101128:	f043 0301 	orr.w	r3, r3, #1
 810112c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 8101130:	207e      	movs	r0, #126	; 0x7e
 8101132:	f000 fd0e 	bl	8101b52 <HAL_NVIC_ClearPendingIRQ>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101136:	f000 fb07 	bl	8101748 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810113a:	f7ff fe8f 	bl	8100e5c <MX_GPIO_Init>
  MX_I2C2_Init();
 810113e:	f7ff fec5 	bl	8100ecc <MX_I2C2_Init>
  MX_SPI1_Init();
 8101142:	f000 f8b7 	bl	81012b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 8101146:	f005 fe5b 	bl	8106e00 <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 810114a:	2100      	movs	r1, #0
 810114c:	2001      	movs	r0, #1
 810114e:	f005 ff61 	bl	8107014 <MX_OPENAMP_Init>
 8101152:	4603      	mov	r3, r0
 8101154:	2b00      	cmp	r3, #0
 8101156:	d001      	beq.n	810115c <main+0x98>
	{
		Error_Handler();
 8101158:	f000 f8a6 	bl	81012a8 <Error_Handler>
	}

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 810115c:	2300      	movs	r3, #0
 810115e:	9300      	str	r3, [sp, #0]
 8101160:	4b4b      	ldr	r3, [pc, #300]	; (8101290 <main+0x1cc>)
 8101162:	f04f 32ff 	mov.w	r2, #4294967295
 8101166:	494b      	ldr	r1, [pc, #300]	; (8101294 <main+0x1d0>)
 8101168:	484b      	ldr	r0, [pc, #300]	; (8101298 <main+0x1d4>)
 810116a:	f005 ffe9 	bl	8107140 <OPENAMP_create_endpoint>
 810116e:	6278      	str	r0, [r7, #36]	; 0x24
			rpmsg_recv_callback, NULL);
	if (status < 0)
 8101170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101172:	2b00      	cmp	r3, #0
 8101174:	da17      	bge.n	81011a6 <main+0xe2>
	{
		Error_Handler();
 8101176:	f000 f897 	bl	81012a8 <Error_Handler>
	}

	/* Pingpong application*/
	/* Reveice an interger from the master, incremennt it and send back the result to the master*/
	while (message < 100)
 810117a:	e014      	b.n	81011a6 <main+0xe2>
	{
		message = receive_message();
 810117c:	f7ff ff8e 	bl	810109c <receive_message>
 8101180:	4603      	mov	r3, r0
 8101182:	4a46      	ldr	r2, [pc, #280]	; (810129c <main+0x1d8>)
 8101184:	6013      	str	r3, [r2, #0]
		message++;
 8101186:	4b45      	ldr	r3, [pc, #276]	; (810129c <main+0x1d8>)
 8101188:	681b      	ldr	r3, [r3, #0]
 810118a:	3301      	adds	r3, #1
 810118c:	4a43      	ldr	r2, [pc, #268]	; (810129c <main+0x1d8>)
 810118e:	6013      	str	r3, [r2, #0]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8101190:	2204      	movs	r2, #4
 8101192:	4942      	ldr	r1, [pc, #264]	; (810129c <main+0x1d8>)
 8101194:	4840      	ldr	r0, [pc, #256]	; (8101298 <main+0x1d4>)
 8101196:	f7ff ff47 	bl	8101028 <rpmsg_send>
 810119a:	6278      	str	r0, [r7, #36]	; 0x24
		if (status < 0)
 810119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810119e:	2b00      	cmp	r3, #0
 81011a0:	da01      	bge.n	81011a6 <main+0xe2>
		{
			Error_Handler();
 81011a2:	f000 f881 	bl	81012a8 <Error_Handler>
	while (message < 100)
 81011a6:	4b3d      	ldr	r3, [pc, #244]	; (810129c <main+0x1d8>)
 81011a8:	681b      	ldr	r3, [r3, #0]
 81011aa:	2b63      	cmp	r3, #99	; 0x63
 81011ac:	d9e6      	bls.n	810117c <main+0xb8>
	}

	/* Deinitialize OpenAMP */
//		OPENAMP_DeInit();

	chasisIMU.deviceAddress = 0x68<<1;
 81011ae:	4b3c      	ldr	r3, [pc, #240]	; (81012a0 <main+0x1dc>)
 81011b0:	22d0      	movs	r2, #208	; 0xd0
 81011b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 81011b6:	4a3a      	ldr	r2, [pc, #232]	; (81012a0 <main+0x1dc>)
 81011b8:	4b3a      	ldr	r3, [pc, #232]	; (81012a4 <main+0x1e0>)
 81011ba:	4610      	mov	r0, r2
 81011bc:	4619      	mov	r1, r3
 81011be:	234c      	movs	r3, #76	; 0x4c
 81011c0:	461a      	mov	r2, r3
 81011c2:	f006 f86d 	bl	81072a0 <memcpy>
	initMPU(chasisIMU);
 81011c6:	4e36      	ldr	r6, [pc, #216]	; (81012a0 <main+0x1dc>)
 81011c8:	466d      	mov	r5, sp
 81011ca:	f106 0410 	add.w	r4, r6, #16
 81011ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81011de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81011e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81011e6:	f005 fdd5 	bl	8106d94 <initMPU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int16_t AccData[3], GyroData[3], MagData[3];
	MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81011ea:	4e2d      	ldr	r6, [pc, #180]	; (81012a0 <main+0x1dc>)
 81011ec:	f107 0314 	add.w	r3, r7, #20
 81011f0:	9312      	str	r3, [sp, #72]	; 0x48
 81011f2:	f107 030c 	add.w	r3, r7, #12
 81011f6:	9311      	str	r3, [sp, #68]	; 0x44
 81011f8:	f107 031c 	add.w	r3, r7, #28
 81011fc:	9310      	str	r3, [sp, #64]	; 0x40
 81011fe:	466d      	mov	r5, sp
 8101200:	f106 0410 	add.w	r4, r6, #16
 8101204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810120a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810120c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101210:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101214:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101218:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 810121c:	f003 fbd0 	bl	81049c0 <MPU9250_GetData>
	uint8_t R = 0;
 8101220:	2300      	movs	r3, #0
 8101222:	72fb      	strb	r3, [r7, #11]
	while (1)
	{
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 8101224:	4e1e      	ldr	r6, [pc, #120]	; (81012a0 <main+0x1dc>)
 8101226:	f107 0314 	add.w	r3, r7, #20
 810122a:	9312      	str	r3, [sp, #72]	; 0x48
 810122c:	f107 030c 	add.w	r3, r7, #12
 8101230:	9311      	str	r3, [sp, #68]	; 0x44
 8101232:	f107 031c 	add.w	r3, r7, #28
 8101236:	9310      	str	r3, [sp, #64]	; 0x40
 8101238:	466d      	mov	r5, sp
 810123a:	f106 0410 	add.w	r4, r6, #16
 810123e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810124a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810124e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101252:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101256:	f003 fbb3 	bl	81049c0 <MPU9250_GetData>
		status = OPENAMP_send(&rp_endpoint,&R, sizeof(R));
 810125a:	f107 030b 	add.w	r3, r7, #11
 810125e:	2201      	movs	r2, #1
 8101260:	4619      	mov	r1, r3
 8101262:	480d      	ldr	r0, [pc, #52]	; (8101298 <main+0x1d4>)
 8101264:	f7ff fee0 	bl	8101028 <rpmsg_send>
 8101268:	6278      	str	r0, [r7, #36]	; 0x24
		R++;
 810126a:	7afb      	ldrb	r3, [r7, #11]
 810126c:	3301      	adds	r3, #1
 810126e:	b2db      	uxtb	r3, r3
 8101270:	72fb      	strb	r3, [r7, #11]
		if (R == 200)
 8101272:	7afb      	ldrb	r3, [r7, #11]
 8101274:	2bc8      	cmp	r3, #200	; 0xc8
 8101276:	d101      	bne.n	810127c <main+0x1b8>
		{
			R = 0;
 8101278:	2300      	movs	r3, #0
 810127a:	72fb      	strb	r3, [r7, #11]
		}
		HAL_Delay(100);
 810127c:	2064      	movs	r0, #100	; 0x64
 810127e:	f000 fb17 	bl	81018b0 <HAL_Delay>
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 8101282:	e7cf      	b.n	8101224 <main+0x160>
 8101284:	58024400 	.word	0x58024400
 8101288:	e000ed00 	.word	0xe000ed00
 810128c:	58026400 	.word	0x58026400
 8101290:	08101069 	.word	0x08101069
 8101294:	0810bac0 	.word	0x0810bac0
 8101298:	100002b4 	.word	0x100002b4
 810129c:	100002a8 	.word	0x100002a8
 81012a0:	10000400 	.word	0x10000400
 81012a4:	100003b4 	.word	0x100003b4

081012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81012a8:	b480      	push	{r7}
 81012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81012ac:	b672      	cpsid	i
}
 81012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 81012b0:	e7fe      	b.n	81012b0 <Error_Handler+0x8>
	...

081012b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81012b4:	b580      	push	{r7, lr}
 81012b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 81012b8:	4b28      	ldr	r3, [pc, #160]	; (810135c <MX_SPI1_Init+0xa8>)
 81012ba:	4a29      	ldr	r2, [pc, #164]	; (8101360 <MX_SPI1_Init+0xac>)
 81012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81012be:	4b27      	ldr	r3, [pc, #156]	; (810135c <MX_SPI1_Init+0xa8>)
 81012c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 81012c6:	4b25      	ldr	r3, [pc, #148]	; (810135c <MX_SPI1_Init+0xa8>)
 81012c8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 81012cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 81012ce:	4b23      	ldr	r3, [pc, #140]	; (810135c <MX_SPI1_Init+0xa8>)
 81012d0:	2203      	movs	r2, #3
 81012d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81012d4:	4b21      	ldr	r3, [pc, #132]	; (810135c <MX_SPI1_Init+0xa8>)
 81012d6:	2200      	movs	r2, #0
 81012d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81012da:	4b20      	ldr	r3, [pc, #128]	; (810135c <MX_SPI1_Init+0xa8>)
 81012dc:	2200      	movs	r2, #0
 81012de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81012e0:	4b1e      	ldr	r3, [pc, #120]	; (810135c <MX_SPI1_Init+0xa8>)
 81012e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 81012e8:	4b1c      	ldr	r3, [pc, #112]	; (810135c <MX_SPI1_Init+0xa8>)
 81012ea:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 81012ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81012f0:	4b1a      	ldr	r3, [pc, #104]	; (810135c <MX_SPI1_Init+0xa8>)
 81012f2:	2200      	movs	r2, #0
 81012f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81012f6:	4b19      	ldr	r3, [pc, #100]	; (810135c <MX_SPI1_Init+0xa8>)
 81012f8:	2200      	movs	r2, #0
 81012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81012fc:	4b17      	ldr	r3, [pc, #92]	; (810135c <MX_SPI1_Init+0xa8>)
 81012fe:	2200      	movs	r2, #0
 8101300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101302:	4b16      	ldr	r3, [pc, #88]	; (810135c <MX_SPI1_Init+0xa8>)
 8101304:	2200      	movs	r2, #0
 8101306:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101308:	4b14      	ldr	r3, [pc, #80]	; (810135c <MX_SPI1_Init+0xa8>)
 810130a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810130e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101310:	4b12      	ldr	r3, [pc, #72]	; (810135c <MX_SPI1_Init+0xa8>)
 8101312:	2200      	movs	r2, #0
 8101314:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101316:	4b11      	ldr	r3, [pc, #68]	; (810135c <MX_SPI1_Init+0xa8>)
 8101318:	2200      	movs	r2, #0
 810131a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810131c:	4b0f      	ldr	r3, [pc, #60]	; (810135c <MX_SPI1_Init+0xa8>)
 810131e:	2200      	movs	r2, #0
 8101320:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101322:	4b0e      	ldr	r3, [pc, #56]	; (810135c <MX_SPI1_Init+0xa8>)
 8101324:	2200      	movs	r2, #0
 8101326:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101328:	4b0c      	ldr	r3, [pc, #48]	; (810135c <MX_SPI1_Init+0xa8>)
 810132a:	2200      	movs	r2, #0
 810132c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810132e:	4b0b      	ldr	r3, [pc, #44]	; (810135c <MX_SPI1_Init+0xa8>)
 8101330:	2200      	movs	r2, #0
 8101332:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101334:	4b09      	ldr	r3, [pc, #36]	; (810135c <MX_SPI1_Init+0xa8>)
 8101336:	2200      	movs	r2, #0
 8101338:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810133a:	4b08      	ldr	r3, [pc, #32]	; (810135c <MX_SPI1_Init+0xa8>)
 810133c:	2200      	movs	r2, #0
 810133e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101340:	4b06      	ldr	r3, [pc, #24]	; (810135c <MX_SPI1_Init+0xa8>)
 8101342:	2200      	movs	r2, #0
 8101344:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101346:	4805      	ldr	r0, [pc, #20]	; (810135c <MX_SPI1_Init+0xa8>)
 8101348:	f002 fe62 	bl	8104010 <HAL_SPI_Init>
 810134c:	4603      	mov	r3, r0
 810134e:	2b00      	cmp	r3, #0
 8101350:	d001      	beq.n	8101356 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8101352:	f7ff ffa9 	bl	81012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101356:	bf00      	nop
 8101358:	bd80      	pop	{r7, pc}
 810135a:	bf00      	nop
 810135c:	10000450 	.word	0x10000450
 8101360:	40013000 	.word	0x40013000

08101364 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b0ba      	sub	sp, #232	; 0xe8
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810136c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101370:	2200      	movs	r2, #0
 8101372:	601a      	str	r2, [r3, #0]
 8101374:	605a      	str	r2, [r3, #4]
 8101376:	609a      	str	r2, [r3, #8]
 8101378:	60da      	str	r2, [r3, #12]
 810137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810137c:	f107 0318 	add.w	r3, r7, #24
 8101380:	22bc      	movs	r2, #188	; 0xbc
 8101382:	2100      	movs	r1, #0
 8101384:	4618      	mov	r0, r3
 8101386:	f005 ff99 	bl	81072bc <memset>
  if(spiHandle->Instance==SPI1)
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	4a36      	ldr	r2, [pc, #216]	; (8101468 <HAL_SPI_MspInit+0x104>)
 8101390:	4293      	cmp	r3, r2
 8101392:	d165      	bne.n	8101460 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101398:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 810139a:	2300      	movs	r3, #0
 810139c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810139e:	f107 0318 	add.w	r3, r7, #24
 81013a2:	4618      	mov	r0, r3
 81013a4:	f001 fd90 	bl	8102ec8 <HAL_RCCEx_PeriphCLKConfig>
 81013a8:	4603      	mov	r3, r0
 81013aa:	2b00      	cmp	r3, #0
 81013ac:	d001      	beq.n	81013b2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 81013ae:	f7ff ff7b 	bl	81012a8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81013b2:	4b2e      	ldr	r3, [pc, #184]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81013b8:	4a2c      	ldr	r2, [pc, #176]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81013be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81013c2:	4b2a      	ldr	r3, [pc, #168]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81013c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81013cc:	617b      	str	r3, [r7, #20]
 81013ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81013d0:	4b26      	ldr	r3, [pc, #152]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d6:	4a25      	ldr	r2, [pc, #148]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013d8:	f043 0301 	orr.w	r3, r3, #1
 81013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013e0:	4b22      	ldr	r3, [pc, #136]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013e6:	f003 0301 	and.w	r3, r3, #1
 81013ea:	613b      	str	r3, [r7, #16]
 81013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81013ee:	4b1f      	ldr	r3, [pc, #124]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f4:	4a1d      	ldr	r2, [pc, #116]	; (810146c <HAL_SPI_MspInit+0x108>)
 81013f6:	f043 0308 	orr.w	r3, r3, #8
 81013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013fe:	4b1b      	ldr	r3, [pc, #108]	; (810146c <HAL_SPI_MspInit+0x108>)
 8101400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101404:	f003 0308 	and.w	r3, r3, #8
 8101408:	60fb      	str	r3, [r7, #12]
 810140a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810140c:	2320      	movs	r3, #32
 810140e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101412:	2302      	movs	r3, #2
 8101414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101418:	2300      	movs	r3, #0
 810141a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810141e:	2300      	movs	r3, #0
 8101420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101424:	2305      	movs	r3, #5
 8101426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810142a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810142e:	4619      	mov	r1, r3
 8101430:	480f      	ldr	r0, [pc, #60]	; (8101470 <HAL_SPI_MspInit+0x10c>)
 8101432:	f000 fbb1 	bl	8101b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101436:	2380      	movs	r3, #128	; 0x80
 8101438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810143c:	2302      	movs	r3, #2
 810143e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101442:	2300      	movs	r3, #0
 8101444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101448:	2300      	movs	r3, #0
 810144a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810144e:	2305      	movs	r3, #5
 8101450:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101454:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101458:	4619      	mov	r1, r3
 810145a:	4806      	ldr	r0, [pc, #24]	; (8101474 <HAL_SPI_MspInit+0x110>)
 810145c:	f000 fb9c 	bl	8101b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101460:	bf00      	nop
 8101462:	37e8      	adds	r7, #232	; 0xe8
 8101464:	46bd      	mov	sp, r7
 8101466:	bd80      	pop	{r7, pc}
 8101468:	40013000 	.word	0x40013000
 810146c:	58024400 	.word	0x58024400
 8101470:	58020000 	.word	0x58020000
 8101474:	58020c00 	.word	0x58020c00

08101478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101478:	b580      	push	{r7, lr}
 810147a:	b082      	sub	sp, #8
 810147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810147e:	4b15      	ldr	r3, [pc, #84]	; (81014d4 <HAL_MspInit+0x5c>)
 8101480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101484:	4a13      	ldr	r2, [pc, #76]	; (81014d4 <HAL_MspInit+0x5c>)
 8101486:	f043 0302 	orr.w	r3, r3, #2
 810148a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810148e:	4b11      	ldr	r3, [pc, #68]	; (81014d4 <HAL_MspInit+0x5c>)
 8101490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101494:	f003 0302 	and.w	r3, r3, #2
 8101498:	607b      	str	r3, [r7, #4]
 810149a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 4, 0);
 810149c:	2200      	movs	r2, #0
 810149e:	2104      	movs	r1, #4
 81014a0:	2040      	movs	r0, #64	; 0x40
 81014a2:	f000 fb22 	bl	8101aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 81014a6:	2040      	movs	r0, #64	; 0x40
 81014a8:	f000 fb39 	bl	8101b1e <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 4, 0);
 81014ac:	2200      	movs	r2, #0
 81014ae:	2104      	movs	r1, #4
 81014b0:	207e      	movs	r0, #126	; 0x7e
 81014b2:	f000 fb1a 	bl	8101aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81014b6:	207e      	movs	r0, #126	; 0x7e
 81014b8:	f000 fb31 	bl	8101b1e <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 81014bc:	2200      	movs	r2, #0
 81014be:	2104      	movs	r1, #4
 81014c0:	2094      	movs	r0, #148	; 0x94
 81014c2:	f000 fb12 	bl	8101aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 81014c6:	2094      	movs	r0, #148	; 0x94
 81014c8:	f000 fb29 	bl	8101b1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81014cc:	bf00      	nop
 81014ce:	3708      	adds	r7, #8
 81014d0:	46bd      	mov	sp, r7
 81014d2:	bd80      	pop	{r7, pc}
 81014d4:	58024400 	.word	0x58024400

081014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81014d8:	b480      	push	{r7}
 81014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81014dc:	e7fe      	b.n	81014dc <NMI_Handler+0x4>

081014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81014de:	b480      	push	{r7}
 81014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81014e2:	e7fe      	b.n	81014e2 <HardFault_Handler+0x4>

081014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81014e4:	b480      	push	{r7}
 81014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81014e8:	e7fe      	b.n	81014e8 <MemManage_Handler+0x4>

081014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81014ea:	b480      	push	{r7}
 81014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81014ee:	e7fe      	b.n	81014ee <BusFault_Handler+0x4>

081014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81014f0:	b480      	push	{r7}
 81014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81014f4:	e7fe      	b.n	81014f4 <UsageFault_Handler+0x4>

081014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81014f6:	b480      	push	{r7}
 81014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81014fa:	bf00      	nop
 81014fc:	46bd      	mov	sp, r7
 81014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101502:	4770      	bx	lr

08101504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101504:	b480      	push	{r7}
 8101506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101508:	bf00      	nop
 810150a:	46bd      	mov	sp, r7
 810150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101510:	4770      	bx	lr

08101512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101512:	b480      	push	{r7}
 8101514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101516:	bf00      	nop
 8101518:	46bd      	mov	sp, r7
 810151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810151e:	4770      	bx	lr

08101520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101520:	b580      	push	{r7, lr}
 8101522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101524:	f000 f9a4 	bl	8101870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101528:	bf00      	nop
 810152a:	bd80      	pop	{r7, pc}

0810152c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 810152c:	b580      	push	{r7, lr}
 810152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8101530:	4802      	ldr	r0, [pc, #8]	; (810153c <I2C2_EV_IRQHandler+0x10>)
 8101532:	f000 fff9 	bl	8102528 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8101536:	bf00      	nop
 8101538:	bd80      	pop	{r7, pc}
 810153a:	bf00      	nop
 810153c:	100003b4 	.word	0x100003b4

08101540 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101540:	b480      	push	{r7}
 8101542:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8101544:	bf00      	nop
 8101546:	46bd      	mov	sp, r7
 8101548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810154c:	4770      	bx	lr

0810154e <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 810154e:	b580      	push	{r7, lr}
 8101550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101552:	f000 fd11 	bl	8101f78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101556:	bf00      	nop
 8101558:	bd80      	pop	{r7, pc}

0810155a <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 810155a:	b480      	push	{r7}
 810155c:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 810155e:	bf00      	nop
 8101560:	46bd      	mov	sp, r7
 8101562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101566:	4770      	bx	lr

08101568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101568:	b480      	push	{r7}
 810156a:	af00      	add	r7, sp, #0
	return 1;
 810156c:	2301      	movs	r3, #1
}
 810156e:	4618      	mov	r0, r3
 8101570:	46bd      	mov	sp, r7
 8101572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101576:	4770      	bx	lr

08101578 <_kill>:

int _kill(int pid, int sig)
{
 8101578:	b580      	push	{r7, lr}
 810157a:	b082      	sub	sp, #8
 810157c:	af00      	add	r7, sp, #0
 810157e:	6078      	str	r0, [r7, #4]
 8101580:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101582:	f005 fe41 	bl	8107208 <__errno>
 8101586:	4603      	mov	r3, r0
 8101588:	2216      	movs	r2, #22
 810158a:	601a      	str	r2, [r3, #0]
	return -1;
 810158c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101590:	4618      	mov	r0, r3
 8101592:	3708      	adds	r7, #8
 8101594:	46bd      	mov	sp, r7
 8101596:	bd80      	pop	{r7, pc}

08101598 <_exit>:

void _exit (int status)
{
 8101598:	b580      	push	{r7, lr}
 810159a:	b082      	sub	sp, #8
 810159c:	af00      	add	r7, sp, #0
 810159e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81015a0:	f04f 31ff 	mov.w	r1, #4294967295
 81015a4:	6878      	ldr	r0, [r7, #4]
 81015a6:	f7ff ffe7 	bl	8101578 <_kill>
	while (1) {}		/* Make sure we hang here */
 81015aa:	e7fe      	b.n	81015aa <_exit+0x12>

081015ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81015ac:	b580      	push	{r7, lr}
 81015ae:	b086      	sub	sp, #24
 81015b0:	af00      	add	r7, sp, #0
 81015b2:	60f8      	str	r0, [r7, #12]
 81015b4:	60b9      	str	r1, [r7, #8]
 81015b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81015b8:	2300      	movs	r3, #0
 81015ba:	617b      	str	r3, [r7, #20]
 81015bc:	e00a      	b.n	81015d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81015be:	f3af 8000 	nop.w
 81015c2:	4601      	mov	r1, r0
 81015c4:	68bb      	ldr	r3, [r7, #8]
 81015c6:	1c5a      	adds	r2, r3, #1
 81015c8:	60ba      	str	r2, [r7, #8]
 81015ca:	b2ca      	uxtb	r2, r1
 81015cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81015ce:	697b      	ldr	r3, [r7, #20]
 81015d0:	3301      	adds	r3, #1
 81015d2:	617b      	str	r3, [r7, #20]
 81015d4:	697a      	ldr	r2, [r7, #20]
 81015d6:	687b      	ldr	r3, [r7, #4]
 81015d8:	429a      	cmp	r2, r3
 81015da:	dbf0      	blt.n	81015be <_read+0x12>
	}

return len;
 81015dc:	687b      	ldr	r3, [r7, #4]
}
 81015de:	4618      	mov	r0, r3
 81015e0:	3718      	adds	r7, #24
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bd80      	pop	{r7, pc}

081015e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81015e6:	b580      	push	{r7, lr}
 81015e8:	b086      	sub	sp, #24
 81015ea:	af00      	add	r7, sp, #0
 81015ec:	60f8      	str	r0, [r7, #12]
 81015ee:	60b9      	str	r1, [r7, #8]
 81015f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81015f2:	2300      	movs	r3, #0
 81015f4:	617b      	str	r3, [r7, #20]
 81015f6:	e009      	b.n	810160c <_write+0x26>
	{
		__io_putchar(*ptr++);
 81015f8:	68bb      	ldr	r3, [r7, #8]
 81015fa:	1c5a      	adds	r2, r3, #1
 81015fc:	60ba      	str	r2, [r7, #8]
 81015fe:	781b      	ldrb	r3, [r3, #0]
 8101600:	4618      	mov	r0, r3
 8101602:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101606:	697b      	ldr	r3, [r7, #20]
 8101608:	3301      	adds	r3, #1
 810160a:	617b      	str	r3, [r7, #20]
 810160c:	697a      	ldr	r2, [r7, #20]
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	429a      	cmp	r2, r3
 8101612:	dbf1      	blt.n	81015f8 <_write+0x12>
	}
	return len;
 8101614:	687b      	ldr	r3, [r7, #4]
}
 8101616:	4618      	mov	r0, r3
 8101618:	3718      	adds	r7, #24
 810161a:	46bd      	mov	sp, r7
 810161c:	bd80      	pop	{r7, pc}

0810161e <_close>:

int _close(int file)
{
 810161e:	b480      	push	{r7}
 8101620:	b083      	sub	sp, #12
 8101622:	af00      	add	r7, sp, #0
 8101624:	6078      	str	r0, [r7, #4]
	return -1;
 8101626:	f04f 33ff 	mov.w	r3, #4294967295
}
 810162a:	4618      	mov	r0, r3
 810162c:	370c      	adds	r7, #12
 810162e:	46bd      	mov	sp, r7
 8101630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101634:	4770      	bx	lr

08101636 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101636:	b480      	push	{r7}
 8101638:	b083      	sub	sp, #12
 810163a:	af00      	add	r7, sp, #0
 810163c:	6078      	str	r0, [r7, #4]
 810163e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101640:	683b      	ldr	r3, [r7, #0]
 8101642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101646:	605a      	str	r2, [r3, #4]
	return 0;
 8101648:	2300      	movs	r3, #0
}
 810164a:	4618      	mov	r0, r3
 810164c:	370c      	adds	r7, #12
 810164e:	46bd      	mov	sp, r7
 8101650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101654:	4770      	bx	lr

08101656 <_isatty>:

int _isatty(int file)
{
 8101656:	b480      	push	{r7}
 8101658:	b083      	sub	sp, #12
 810165a:	af00      	add	r7, sp, #0
 810165c:	6078      	str	r0, [r7, #4]
	return 1;
 810165e:	2301      	movs	r3, #1
}
 8101660:	4618      	mov	r0, r3
 8101662:	370c      	adds	r7, #12
 8101664:	46bd      	mov	sp, r7
 8101666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166a:	4770      	bx	lr

0810166c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810166c:	b480      	push	{r7}
 810166e:	b085      	sub	sp, #20
 8101670:	af00      	add	r7, sp, #0
 8101672:	60f8      	str	r0, [r7, #12]
 8101674:	60b9      	str	r1, [r7, #8]
 8101676:	607a      	str	r2, [r7, #4]
	return 0;
 8101678:	2300      	movs	r3, #0
}
 810167a:	4618      	mov	r0, r3
 810167c:	3714      	adds	r7, #20
 810167e:	46bd      	mov	sp, r7
 8101680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101684:	4770      	bx	lr
	...

08101688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101688:	b580      	push	{r7, lr}
 810168a:	b086      	sub	sp, #24
 810168c:	af00      	add	r7, sp, #0
 810168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101690:	4a14      	ldr	r2, [pc, #80]	; (81016e4 <_sbrk+0x5c>)
 8101692:	4b15      	ldr	r3, [pc, #84]	; (81016e8 <_sbrk+0x60>)
 8101694:	1ad3      	subs	r3, r2, r3
 8101696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101698:	697b      	ldr	r3, [r7, #20]
 810169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810169c:	4b13      	ldr	r3, [pc, #76]	; (81016ec <_sbrk+0x64>)
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	2b00      	cmp	r3, #0
 81016a2:	d102      	bne.n	81016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81016a4:	4b11      	ldr	r3, [pc, #68]	; (81016ec <_sbrk+0x64>)
 81016a6:	4a12      	ldr	r2, [pc, #72]	; (81016f0 <_sbrk+0x68>)
 81016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81016aa:	4b10      	ldr	r3, [pc, #64]	; (81016ec <_sbrk+0x64>)
 81016ac:	681a      	ldr	r2, [r3, #0]
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	4413      	add	r3, r2
 81016b2:	693a      	ldr	r2, [r7, #16]
 81016b4:	429a      	cmp	r2, r3
 81016b6:	d207      	bcs.n	81016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81016b8:	f005 fda6 	bl	8107208 <__errno>
 81016bc:	4603      	mov	r3, r0
 81016be:	220c      	movs	r2, #12
 81016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81016c2:	f04f 33ff 	mov.w	r3, #4294967295
 81016c6:	e009      	b.n	81016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81016c8:	4b08      	ldr	r3, [pc, #32]	; (81016ec <_sbrk+0x64>)
 81016ca:	681b      	ldr	r3, [r3, #0]
 81016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81016ce:	4b07      	ldr	r3, [pc, #28]	; (81016ec <_sbrk+0x64>)
 81016d0:	681a      	ldr	r2, [r3, #0]
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	4413      	add	r3, r2
 81016d6:	4a05      	ldr	r2, [pc, #20]	; (81016ec <_sbrk+0x64>)
 81016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81016da:	68fb      	ldr	r3, [r7, #12]
}
 81016dc:	4618      	mov	r0, r3
 81016de:	3718      	adds	r7, #24
 81016e0:	46bd      	mov	sp, r7
 81016e2:	bd80      	pop	{r7, pc}
 81016e4:	10048000 	.word	0x10048000
 81016e8:	00000400 	.word	0x00000400
 81016ec:	100002f4 	.word	0x100002f4
 81016f0:	10000510 	.word	0x10000510

081016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810172c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81016f8:	f7ff fb94 	bl	8100e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81016fc:	480c      	ldr	r0, [pc, #48]	; (8101730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81016fe:	490d      	ldr	r1, [pc, #52]	; (8101734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101700:	4a0d      	ldr	r2, [pc, #52]	; (8101738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101704:	e002      	b.n	810170c <LoopCopyDataInit>

08101706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810170a:	3304      	adds	r3, #4

0810170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101710:	d3f9      	bcc.n	8101706 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101712:	4a0a      	ldr	r2, [pc, #40]	; (810173c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101714:	4c0a      	ldr	r4, [pc, #40]	; (8101740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101718:	e001      	b.n	810171e <LoopFillZerobss>

0810171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810171c:	3204      	adds	r2, #4

0810171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101720:	d3fb      	bcc.n	810171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101722:	f005 fd89 	bl	8107238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101726:	f7ff fccd 	bl	81010c4 <main>
  bx  lr
 810172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810172c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101730:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101734:	1000028c 	.word	0x1000028c
  ldr r2, =_sidata
 8101738:	0810c1d4 	.word	0x0810c1d4
  ldr r2, =_sbss
 810173c:	1000028c 	.word	0x1000028c
  ldr r4, =_ebss
 8101740:	1000050c 	.word	0x1000050c

08101744 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101744:	e7fe      	b.n	8101744 <ADC3_IRQHandler>
	...

08101748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101748:	b580      	push	{r7, lr}
 810174a:	b082      	sub	sp, #8
 810174c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810174e:	4b28      	ldr	r3, [pc, #160]	; (81017f0 <HAL_Init+0xa8>)
 8101750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101754:	4a26      	ldr	r2, [pc, #152]	; (81017f0 <HAL_Init+0xa8>)
 8101756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810175a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810175e:	4b24      	ldr	r3, [pc, #144]	; (81017f0 <HAL_Init+0xa8>)
 8101760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101768:	603b      	str	r3, [r7, #0]
 810176a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810176c:	4b21      	ldr	r3, [pc, #132]	; (81017f4 <HAL_Init+0xac>)
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101778:	4a1e      	ldr	r2, [pc, #120]	; (81017f4 <HAL_Init+0xac>)
 810177a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810177e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101780:	4b1c      	ldr	r3, [pc, #112]	; (81017f4 <HAL_Init+0xac>)
 8101782:	681b      	ldr	r3, [r3, #0]
 8101784:	4a1b      	ldr	r2, [pc, #108]	; (81017f4 <HAL_Init+0xac>)
 8101786:	f043 0301 	orr.w	r3, r3, #1
 810178a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810178c:	2003      	movs	r0, #3
 810178e:	f000 f9a1 	bl	8101ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101792:	f001 fa1f 	bl	8102bd4 <HAL_RCC_GetSysClockFreq>
 8101796:	4602      	mov	r2, r0
 8101798:	4b15      	ldr	r3, [pc, #84]	; (81017f0 <HAL_Init+0xa8>)
 810179a:	699b      	ldr	r3, [r3, #24]
 810179c:	0a1b      	lsrs	r3, r3, #8
 810179e:	f003 030f 	and.w	r3, r3, #15
 81017a2:	4915      	ldr	r1, [pc, #84]	; (81017f8 <HAL_Init+0xb0>)
 81017a4:	5ccb      	ldrb	r3, [r1, r3]
 81017a6:	f003 031f 	and.w	r3, r3, #31
 81017aa:	fa22 f303 	lsr.w	r3, r2, r3
 81017ae:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81017b0:	4b0f      	ldr	r3, [pc, #60]	; (81017f0 <HAL_Init+0xa8>)
 81017b2:	699b      	ldr	r3, [r3, #24]
 81017b4:	f003 030f 	and.w	r3, r3, #15
 81017b8:	4a0f      	ldr	r2, [pc, #60]	; (81017f8 <HAL_Init+0xb0>)
 81017ba:	5cd3      	ldrb	r3, [r2, r3]
 81017bc:	f003 031f 	and.w	r3, r3, #31
 81017c0:	687a      	ldr	r2, [r7, #4]
 81017c2:	fa22 f303 	lsr.w	r3, r2, r3
 81017c6:	4a0d      	ldr	r2, [pc, #52]	; (81017fc <HAL_Init+0xb4>)
 81017c8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017ca:	4b0c      	ldr	r3, [pc, #48]	; (81017fc <HAL_Init+0xb4>)
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	4a0c      	ldr	r2, [pc, #48]	; (8101800 <HAL_Init+0xb8>)
 81017d0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81017d2:	2000      	movs	r0, #0
 81017d4:	f000 f816 	bl	8101804 <HAL_InitTick>
 81017d8:	4603      	mov	r3, r0
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d001      	beq.n	81017e2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81017de:	2301      	movs	r3, #1
 81017e0:	e002      	b.n	81017e8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81017e2:	f7ff fe49 	bl	8101478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81017e6:	2300      	movs	r3, #0
}
 81017e8:	4618      	mov	r0, r3
 81017ea:	3708      	adds	r7, #8
 81017ec:	46bd      	mov	sp, r7
 81017ee:	bd80      	pop	{r7, pc}
 81017f0:	58024400 	.word	0x58024400
 81017f4:	40024400 	.word	0x40024400
 81017f8:	0810bcb4 	.word	0x0810bcb4
 81017fc:	10000004 	.word	0x10000004
 8101800:	10000000 	.word	0x10000000

08101804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101804:	b580      	push	{r7, lr}
 8101806:	b082      	sub	sp, #8
 8101808:	af00      	add	r7, sp, #0
 810180a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810180c:	4b15      	ldr	r3, [pc, #84]	; (8101864 <HAL_InitTick+0x60>)
 810180e:	781b      	ldrb	r3, [r3, #0]
 8101810:	2b00      	cmp	r3, #0
 8101812:	d101      	bne.n	8101818 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101814:	2301      	movs	r3, #1
 8101816:	e021      	b.n	810185c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101818:	4b13      	ldr	r3, [pc, #76]	; (8101868 <HAL_InitTick+0x64>)
 810181a:	681a      	ldr	r2, [r3, #0]
 810181c:	4b11      	ldr	r3, [pc, #68]	; (8101864 <HAL_InitTick+0x60>)
 810181e:	781b      	ldrb	r3, [r3, #0]
 8101820:	4619      	mov	r1, r3
 8101822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101826:	fbb3 f3f1 	udiv	r3, r3, r1
 810182a:	fbb2 f3f3 	udiv	r3, r2, r3
 810182e:	4618      	mov	r0, r3
 8101830:	f000 f983 	bl	8101b3a <HAL_SYSTICK_Config>
 8101834:	4603      	mov	r3, r0
 8101836:	2b00      	cmp	r3, #0
 8101838:	d001      	beq.n	810183e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810183a:	2301      	movs	r3, #1
 810183c:	e00e      	b.n	810185c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	2b0f      	cmp	r3, #15
 8101842:	d80a      	bhi.n	810185a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101844:	2200      	movs	r2, #0
 8101846:	6879      	ldr	r1, [r7, #4]
 8101848:	f04f 30ff 	mov.w	r0, #4294967295
 810184c:	f000 f94d 	bl	8101aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101850:	4a06      	ldr	r2, [pc, #24]	; (810186c <HAL_InitTick+0x68>)
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101856:	2300      	movs	r3, #0
 8101858:	e000      	b.n	810185c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810185a:	2301      	movs	r3, #1
}
 810185c:	4618      	mov	r0, r3
 810185e:	3708      	adds	r7, #8
 8101860:	46bd      	mov	sp, r7
 8101862:	bd80      	pop	{r7, pc}
 8101864:	1000000c 	.word	0x1000000c
 8101868:	10000000 	.word	0x10000000
 810186c:	10000008 	.word	0x10000008

08101870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101870:	b480      	push	{r7}
 8101872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101874:	4b06      	ldr	r3, [pc, #24]	; (8101890 <HAL_IncTick+0x20>)
 8101876:	781b      	ldrb	r3, [r3, #0]
 8101878:	461a      	mov	r2, r3
 810187a:	4b06      	ldr	r3, [pc, #24]	; (8101894 <HAL_IncTick+0x24>)
 810187c:	681b      	ldr	r3, [r3, #0]
 810187e:	4413      	add	r3, r2
 8101880:	4a04      	ldr	r2, [pc, #16]	; (8101894 <HAL_IncTick+0x24>)
 8101882:	6013      	str	r3, [r2, #0]
}
 8101884:	bf00      	nop
 8101886:	46bd      	mov	sp, r7
 8101888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188c:	4770      	bx	lr
 810188e:	bf00      	nop
 8101890:	1000000c 	.word	0x1000000c
 8101894:	100004d8 	.word	0x100004d8

08101898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101898:	b480      	push	{r7}
 810189a:	af00      	add	r7, sp, #0
  return uwTick;
 810189c:	4b03      	ldr	r3, [pc, #12]	; (81018ac <HAL_GetTick+0x14>)
 810189e:	681b      	ldr	r3, [r3, #0]
}
 81018a0:	4618      	mov	r0, r3
 81018a2:	46bd      	mov	sp, r7
 81018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a8:	4770      	bx	lr
 81018aa:	bf00      	nop
 81018ac:	100004d8 	.word	0x100004d8

081018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b084      	sub	sp, #16
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81018b8:	f7ff ffee 	bl	8101898 <HAL_GetTick>
 81018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81018c2:	68fb      	ldr	r3, [r7, #12]
 81018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018c8:	d005      	beq.n	81018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81018ca:	4b0a      	ldr	r3, [pc, #40]	; (81018f4 <HAL_Delay+0x44>)
 81018cc:	781b      	ldrb	r3, [r3, #0]
 81018ce:	461a      	mov	r2, r3
 81018d0:	68fb      	ldr	r3, [r7, #12]
 81018d2:	4413      	add	r3, r2
 81018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81018d6:	bf00      	nop
 81018d8:	f7ff ffde 	bl	8101898 <HAL_GetTick>
 81018dc:	4602      	mov	r2, r0
 81018de:	68bb      	ldr	r3, [r7, #8]
 81018e0:	1ad3      	subs	r3, r2, r3
 81018e2:	68fa      	ldr	r2, [r7, #12]
 81018e4:	429a      	cmp	r2, r3
 81018e6:	d8f7      	bhi.n	81018d8 <HAL_Delay+0x28>
  {
  }
}
 81018e8:	bf00      	nop
 81018ea:	bf00      	nop
 81018ec:	3710      	adds	r7, #16
 81018ee:	46bd      	mov	sp, r7
 81018f0:	bd80      	pop	{r7, pc}
 81018f2:	bf00      	nop
 81018f4:	1000000c 	.word	0x1000000c

081018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81018f8:	b480      	push	{r7}
 81018fa:	b085      	sub	sp, #20
 81018fc:	af00      	add	r7, sp, #0
 81018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	f003 0307 	and.w	r3, r3, #7
 8101906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101908:	4b0c      	ldr	r3, [pc, #48]	; (810193c <__NVIC_SetPriorityGrouping+0x44>)
 810190a:	68db      	ldr	r3, [r3, #12]
 810190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810190e:	68ba      	ldr	r2, [r7, #8]
 8101910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101914:	4013      	ands	r3, r2
 8101916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101918:	68fb      	ldr	r3, [r7, #12]
 810191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810191c:	68bb      	ldr	r3, [r7, #8]
 810191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810192a:	4a04      	ldr	r2, [pc, #16]	; (810193c <__NVIC_SetPriorityGrouping+0x44>)
 810192c:	68bb      	ldr	r3, [r7, #8]
 810192e:	60d3      	str	r3, [r2, #12]
}
 8101930:	bf00      	nop
 8101932:	3714      	adds	r7, #20
 8101934:	46bd      	mov	sp, r7
 8101936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810193a:	4770      	bx	lr
 810193c:	e000ed00 	.word	0xe000ed00

08101940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101940:	b480      	push	{r7}
 8101942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101944:	4b04      	ldr	r3, [pc, #16]	; (8101958 <__NVIC_GetPriorityGrouping+0x18>)
 8101946:	68db      	ldr	r3, [r3, #12]
 8101948:	0a1b      	lsrs	r3, r3, #8
 810194a:	f003 0307 	and.w	r3, r3, #7
}
 810194e:	4618      	mov	r0, r3
 8101950:	46bd      	mov	sp, r7
 8101952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101956:	4770      	bx	lr
 8101958:	e000ed00 	.word	0xe000ed00

0810195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810195c:	b480      	push	{r7}
 810195e:	b083      	sub	sp, #12
 8101960:	af00      	add	r7, sp, #0
 8101962:	4603      	mov	r3, r0
 8101964:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810196a:	2b00      	cmp	r3, #0
 810196c:	db0b      	blt.n	8101986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810196e:	88fb      	ldrh	r3, [r7, #6]
 8101970:	f003 021f 	and.w	r2, r3, #31
 8101974:	4907      	ldr	r1, [pc, #28]	; (8101994 <__NVIC_EnableIRQ+0x38>)
 8101976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810197a:	095b      	lsrs	r3, r3, #5
 810197c:	2001      	movs	r0, #1
 810197e:	fa00 f202 	lsl.w	r2, r0, r2
 8101982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101986:	bf00      	nop
 8101988:	370c      	adds	r7, #12
 810198a:	46bd      	mov	sp, r7
 810198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101990:	4770      	bx	lr
 8101992:	bf00      	nop
 8101994:	e000e100 	.word	0xe000e100

08101998 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101998:	b480      	push	{r7}
 810199a:	b083      	sub	sp, #12
 810199c:	af00      	add	r7, sp, #0
 810199e:	4603      	mov	r3, r0
 81019a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019a6:	2b00      	cmp	r3, #0
 81019a8:	db0c      	blt.n	81019c4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81019aa:	88fb      	ldrh	r3, [r7, #6]
 81019ac:	f003 021f 	and.w	r2, r3, #31
 81019b0:	4907      	ldr	r1, [pc, #28]	; (81019d0 <__NVIC_ClearPendingIRQ+0x38>)
 81019b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019b6:	095b      	lsrs	r3, r3, #5
 81019b8:	2001      	movs	r0, #1
 81019ba:	fa00 f202 	lsl.w	r2, r0, r2
 81019be:	3360      	adds	r3, #96	; 0x60
 81019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 81019c4:	bf00      	nop
 81019c6:	370c      	adds	r7, #12
 81019c8:	46bd      	mov	sp, r7
 81019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ce:	4770      	bx	lr
 81019d0:	e000e100 	.word	0xe000e100

081019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81019d4:	b480      	push	{r7}
 81019d6:	b083      	sub	sp, #12
 81019d8:	af00      	add	r7, sp, #0
 81019da:	4603      	mov	r3, r0
 81019dc:	6039      	str	r1, [r7, #0]
 81019de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	db0a      	blt.n	81019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019e8:	683b      	ldr	r3, [r7, #0]
 81019ea:	b2da      	uxtb	r2, r3
 81019ec:	490c      	ldr	r1, [pc, #48]	; (8101a20 <__NVIC_SetPriority+0x4c>)
 81019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019f2:	0112      	lsls	r2, r2, #4
 81019f4:	b2d2      	uxtb	r2, r2
 81019f6:	440b      	add	r3, r1
 81019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81019fc:	e00a      	b.n	8101a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019fe:	683b      	ldr	r3, [r7, #0]
 8101a00:	b2da      	uxtb	r2, r3
 8101a02:	4908      	ldr	r1, [pc, #32]	; (8101a24 <__NVIC_SetPriority+0x50>)
 8101a04:	88fb      	ldrh	r3, [r7, #6]
 8101a06:	f003 030f 	and.w	r3, r3, #15
 8101a0a:	3b04      	subs	r3, #4
 8101a0c:	0112      	lsls	r2, r2, #4
 8101a0e:	b2d2      	uxtb	r2, r2
 8101a10:	440b      	add	r3, r1
 8101a12:	761a      	strb	r2, [r3, #24]
}
 8101a14:	bf00      	nop
 8101a16:	370c      	adds	r7, #12
 8101a18:	46bd      	mov	sp, r7
 8101a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a1e:	4770      	bx	lr
 8101a20:	e000e100 	.word	0xe000e100
 8101a24:	e000ed00 	.word	0xe000ed00

08101a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a28:	b480      	push	{r7}
 8101a2a:	b089      	sub	sp, #36	; 0x24
 8101a2c:	af00      	add	r7, sp, #0
 8101a2e:	60f8      	str	r0, [r7, #12]
 8101a30:	60b9      	str	r1, [r7, #8]
 8101a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101a34:	68fb      	ldr	r3, [r7, #12]
 8101a36:	f003 0307 	and.w	r3, r3, #7
 8101a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101a3c:	69fb      	ldr	r3, [r7, #28]
 8101a3e:	f1c3 0307 	rsb	r3, r3, #7
 8101a42:	2b04      	cmp	r3, #4
 8101a44:	bf28      	it	cs
 8101a46:	2304      	movcs	r3, #4
 8101a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101a4a:	69fb      	ldr	r3, [r7, #28]
 8101a4c:	3304      	adds	r3, #4
 8101a4e:	2b06      	cmp	r3, #6
 8101a50:	d902      	bls.n	8101a58 <NVIC_EncodePriority+0x30>
 8101a52:	69fb      	ldr	r3, [r7, #28]
 8101a54:	3b03      	subs	r3, #3
 8101a56:	e000      	b.n	8101a5a <NVIC_EncodePriority+0x32>
 8101a58:	2300      	movs	r3, #0
 8101a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8101a60:	69bb      	ldr	r3, [r7, #24]
 8101a62:	fa02 f303 	lsl.w	r3, r2, r3
 8101a66:	43da      	mvns	r2, r3
 8101a68:	68bb      	ldr	r3, [r7, #8]
 8101a6a:	401a      	ands	r2, r3
 8101a6c:	697b      	ldr	r3, [r7, #20]
 8101a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a70:	f04f 31ff 	mov.w	r1, #4294967295
 8101a74:	697b      	ldr	r3, [r7, #20]
 8101a76:	fa01 f303 	lsl.w	r3, r1, r3
 8101a7a:	43d9      	mvns	r1, r3
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a80:	4313      	orrs	r3, r2
         );
}
 8101a82:	4618      	mov	r0, r3
 8101a84:	3724      	adds	r7, #36	; 0x24
 8101a86:	46bd      	mov	sp, r7
 8101a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a8c:	4770      	bx	lr
	...

08101a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a90:	b580      	push	{r7, lr}
 8101a92:	b082      	sub	sp, #8
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	3b01      	subs	r3, #1
 8101a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101aa0:	d301      	bcc.n	8101aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101aa2:	2301      	movs	r3, #1
 8101aa4:	e00f      	b.n	8101ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101aa6:	4a0a      	ldr	r2, [pc, #40]	; (8101ad0 <SysTick_Config+0x40>)
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	3b01      	subs	r3, #1
 8101aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101aae:	210f      	movs	r1, #15
 8101ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8101ab4:	f7ff ff8e 	bl	81019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101ab8:	4b05      	ldr	r3, [pc, #20]	; (8101ad0 <SysTick_Config+0x40>)
 8101aba:	2200      	movs	r2, #0
 8101abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101abe:	4b04      	ldr	r3, [pc, #16]	; (8101ad0 <SysTick_Config+0x40>)
 8101ac0:	2207      	movs	r2, #7
 8101ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101ac4:	2300      	movs	r3, #0
}
 8101ac6:	4618      	mov	r0, r3
 8101ac8:	3708      	adds	r7, #8
 8101aca:	46bd      	mov	sp, r7
 8101acc:	bd80      	pop	{r7, pc}
 8101ace:	bf00      	nop
 8101ad0:	e000e010 	.word	0xe000e010

08101ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	b082      	sub	sp, #8
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101adc:	6878      	ldr	r0, [r7, #4]
 8101ade:	f7ff ff0b 	bl	81018f8 <__NVIC_SetPriorityGrouping>
}
 8101ae2:	bf00      	nop
 8101ae4:	3708      	adds	r7, #8
 8101ae6:	46bd      	mov	sp, r7
 8101ae8:	bd80      	pop	{r7, pc}

08101aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101aea:	b580      	push	{r7, lr}
 8101aec:	b086      	sub	sp, #24
 8101aee:	af00      	add	r7, sp, #0
 8101af0:	4603      	mov	r3, r0
 8101af2:	60b9      	str	r1, [r7, #8]
 8101af4:	607a      	str	r2, [r7, #4]
 8101af6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101af8:	f7ff ff22 	bl	8101940 <__NVIC_GetPriorityGrouping>
 8101afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101afe:	687a      	ldr	r2, [r7, #4]
 8101b00:	68b9      	ldr	r1, [r7, #8]
 8101b02:	6978      	ldr	r0, [r7, #20]
 8101b04:	f7ff ff90 	bl	8101a28 <NVIC_EncodePriority>
 8101b08:	4602      	mov	r2, r0
 8101b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101b0e:	4611      	mov	r1, r2
 8101b10:	4618      	mov	r0, r3
 8101b12:	f7ff ff5f 	bl	81019d4 <__NVIC_SetPriority>
}
 8101b16:	bf00      	nop
 8101b18:	3718      	adds	r7, #24
 8101b1a:	46bd      	mov	sp, r7
 8101b1c:	bd80      	pop	{r7, pc}

08101b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101b1e:	b580      	push	{r7, lr}
 8101b20:	b082      	sub	sp, #8
 8101b22:	af00      	add	r7, sp, #0
 8101b24:	4603      	mov	r3, r0
 8101b26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b2c:	4618      	mov	r0, r3
 8101b2e:	f7ff ff15 	bl	810195c <__NVIC_EnableIRQ>
}
 8101b32:	bf00      	nop
 8101b34:	3708      	adds	r7, #8
 8101b36:	46bd      	mov	sp, r7
 8101b38:	bd80      	pop	{r7, pc}

08101b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101b3a:	b580      	push	{r7, lr}
 8101b3c:	b082      	sub	sp, #8
 8101b3e:	af00      	add	r7, sp, #0
 8101b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101b42:	6878      	ldr	r0, [r7, #4]
 8101b44:	f7ff ffa4 	bl	8101a90 <SysTick_Config>
 8101b48:	4603      	mov	r3, r0
}
 8101b4a:	4618      	mov	r0, r3
 8101b4c:	3708      	adds	r7, #8
 8101b4e:	46bd      	mov	sp, r7
 8101b50:	bd80      	pop	{r7, pc}

08101b52 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101b52:	b580      	push	{r7, lr}
 8101b54:	b082      	sub	sp, #8
 8101b56:	af00      	add	r7, sp, #0
 8101b58:	4603      	mov	r3, r0
 8101b5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8101b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b60:	4618      	mov	r0, r3
 8101b62:	f7ff ff19 	bl	8101998 <__NVIC_ClearPendingIRQ>
}
 8101b66:	bf00      	nop
 8101b68:	3708      	adds	r7, #8
 8101b6a:	46bd      	mov	sp, r7
 8101b6c:	bd80      	pop	{r7, pc}
	...

08101b70 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101b70:	b480      	push	{r7}
 8101b72:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101b74:	4b07      	ldr	r3, [pc, #28]	; (8101b94 <HAL_GetCurrentCPUID+0x24>)
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	091b      	lsrs	r3, r3, #4
 8101b7a:	f003 030f 	and.w	r3, r3, #15
 8101b7e:	2b07      	cmp	r3, #7
 8101b80:	d101      	bne.n	8101b86 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b82:	2303      	movs	r3, #3
 8101b84:	e000      	b.n	8101b88 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101b86:	2301      	movs	r3, #1
  }
}
 8101b88:	4618      	mov	r0, r3
 8101b8a:	46bd      	mov	sp, r7
 8101b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b90:	4770      	bx	lr
 8101b92:	bf00      	nop
 8101b94:	e000ed00 	.word	0xe000ed00

08101b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101b98:	b480      	push	{r7}
 8101b9a:	b089      	sub	sp, #36	; 0x24
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	6078      	str	r0, [r7, #4]
 8101ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101ba2:	2300      	movs	r3, #0
 8101ba4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101ba6:	4b89      	ldr	r3, [pc, #548]	; (8101dcc <HAL_GPIO_Init+0x234>)
 8101ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101baa:	e194      	b.n	8101ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101bac:	683b      	ldr	r3, [r7, #0]
 8101bae:	681a      	ldr	r2, [r3, #0]
 8101bb0:	2101      	movs	r1, #1
 8101bb2:	69fb      	ldr	r3, [r7, #28]
 8101bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8101bb8:	4013      	ands	r3, r2
 8101bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101bbc:	693b      	ldr	r3, [r7, #16]
 8101bbe:	2b00      	cmp	r3, #0
 8101bc0:	f000 8186 	beq.w	8101ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101bc4:	683b      	ldr	r3, [r7, #0]
 8101bc6:	685b      	ldr	r3, [r3, #4]
 8101bc8:	2b01      	cmp	r3, #1
 8101bca:	d00b      	beq.n	8101be4 <HAL_GPIO_Init+0x4c>
 8101bcc:	683b      	ldr	r3, [r7, #0]
 8101bce:	685b      	ldr	r3, [r3, #4]
 8101bd0:	2b02      	cmp	r3, #2
 8101bd2:	d007      	beq.n	8101be4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101bd4:	683b      	ldr	r3, [r7, #0]
 8101bd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101bd8:	2b11      	cmp	r3, #17
 8101bda:	d003      	beq.n	8101be4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101bdc:	683b      	ldr	r3, [r7, #0]
 8101bde:	685b      	ldr	r3, [r3, #4]
 8101be0:	2b12      	cmp	r3, #18
 8101be2:	d130      	bne.n	8101c46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	689b      	ldr	r3, [r3, #8]
 8101be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101bea:	69fb      	ldr	r3, [r7, #28]
 8101bec:	005b      	lsls	r3, r3, #1
 8101bee:	2203      	movs	r2, #3
 8101bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8101bf4:	43db      	mvns	r3, r3
 8101bf6:	69ba      	ldr	r2, [r7, #24]
 8101bf8:	4013      	ands	r3, r2
 8101bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101bfc:	683b      	ldr	r3, [r7, #0]
 8101bfe:	68da      	ldr	r2, [r3, #12]
 8101c00:	69fb      	ldr	r3, [r7, #28]
 8101c02:	005b      	lsls	r3, r3, #1
 8101c04:	fa02 f303 	lsl.w	r3, r2, r3
 8101c08:	69ba      	ldr	r2, [r7, #24]
 8101c0a:	4313      	orrs	r3, r2
 8101c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	69ba      	ldr	r2, [r7, #24]
 8101c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	685b      	ldr	r3, [r3, #4]
 8101c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101c1a:	2201      	movs	r2, #1
 8101c1c:	69fb      	ldr	r3, [r7, #28]
 8101c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8101c22:	43db      	mvns	r3, r3
 8101c24:	69ba      	ldr	r2, [r7, #24]
 8101c26:	4013      	ands	r3, r2
 8101c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101c2a:	683b      	ldr	r3, [r7, #0]
 8101c2c:	685b      	ldr	r3, [r3, #4]
 8101c2e:	091b      	lsrs	r3, r3, #4
 8101c30:	f003 0201 	and.w	r2, r3, #1
 8101c34:	69fb      	ldr	r3, [r7, #28]
 8101c36:	fa02 f303 	lsl.w	r3, r2, r3
 8101c3a:	69ba      	ldr	r2, [r7, #24]
 8101c3c:	4313      	orrs	r3, r2
 8101c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	69ba      	ldr	r2, [r7, #24]
 8101c44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	68db      	ldr	r3, [r3, #12]
 8101c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101c4c:	69fb      	ldr	r3, [r7, #28]
 8101c4e:	005b      	lsls	r3, r3, #1
 8101c50:	2203      	movs	r2, #3
 8101c52:	fa02 f303 	lsl.w	r3, r2, r3
 8101c56:	43db      	mvns	r3, r3
 8101c58:	69ba      	ldr	r2, [r7, #24]
 8101c5a:	4013      	ands	r3, r2
 8101c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101c5e:	683b      	ldr	r3, [r7, #0]
 8101c60:	689a      	ldr	r2, [r3, #8]
 8101c62:	69fb      	ldr	r3, [r7, #28]
 8101c64:	005b      	lsls	r3, r3, #1
 8101c66:	fa02 f303 	lsl.w	r3, r2, r3
 8101c6a:	69ba      	ldr	r2, [r7, #24]
 8101c6c:	4313      	orrs	r3, r2
 8101c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	69ba      	ldr	r2, [r7, #24]
 8101c74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101c76:	683b      	ldr	r3, [r7, #0]
 8101c78:	685b      	ldr	r3, [r3, #4]
 8101c7a:	2b02      	cmp	r3, #2
 8101c7c:	d003      	beq.n	8101c86 <HAL_GPIO_Init+0xee>
 8101c7e:	683b      	ldr	r3, [r7, #0]
 8101c80:	685b      	ldr	r3, [r3, #4]
 8101c82:	2b12      	cmp	r3, #18
 8101c84:	d123      	bne.n	8101cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101c86:	69fb      	ldr	r3, [r7, #28]
 8101c88:	08da      	lsrs	r2, r3, #3
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	3208      	adds	r2, #8
 8101c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101c94:	69fb      	ldr	r3, [r7, #28]
 8101c96:	f003 0307 	and.w	r3, r3, #7
 8101c9a:	009b      	lsls	r3, r3, #2
 8101c9c:	220f      	movs	r2, #15
 8101c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca2:	43db      	mvns	r3, r3
 8101ca4:	69ba      	ldr	r2, [r7, #24]
 8101ca6:	4013      	ands	r3, r2
 8101ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101caa:	683b      	ldr	r3, [r7, #0]
 8101cac:	691a      	ldr	r2, [r3, #16]
 8101cae:	69fb      	ldr	r3, [r7, #28]
 8101cb0:	f003 0307 	and.w	r3, r3, #7
 8101cb4:	009b      	lsls	r3, r3, #2
 8101cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cba:	69ba      	ldr	r2, [r7, #24]
 8101cbc:	4313      	orrs	r3, r2
 8101cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101cc0:	69fb      	ldr	r3, [r7, #28]
 8101cc2:	08da      	lsrs	r2, r3, #3
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	3208      	adds	r2, #8
 8101cc8:	69b9      	ldr	r1, [r7, #24]
 8101cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101cd4:	69fb      	ldr	r3, [r7, #28]
 8101cd6:	005b      	lsls	r3, r3, #1
 8101cd8:	2203      	movs	r2, #3
 8101cda:	fa02 f303 	lsl.w	r3, r2, r3
 8101cde:	43db      	mvns	r3, r3
 8101ce0:	69ba      	ldr	r2, [r7, #24]
 8101ce2:	4013      	ands	r3, r2
 8101ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101ce6:	683b      	ldr	r3, [r7, #0]
 8101ce8:	685b      	ldr	r3, [r3, #4]
 8101cea:	f003 0203 	and.w	r2, r3, #3
 8101cee:	69fb      	ldr	r3, [r7, #28]
 8101cf0:	005b      	lsls	r3, r3, #1
 8101cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8101cf6:	69ba      	ldr	r2, [r7, #24]
 8101cf8:	4313      	orrs	r3, r2
 8101cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	69ba      	ldr	r2, [r7, #24]
 8101d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101d02:	683b      	ldr	r3, [r7, #0]
 8101d04:	685b      	ldr	r3, [r3, #4]
 8101d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101d0a:	2b00      	cmp	r3, #0
 8101d0c:	f000 80e0 	beq.w	8101ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d10:	4b2f      	ldr	r3, [pc, #188]	; (8101dd0 <HAL_GPIO_Init+0x238>)
 8101d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d16:	4a2e      	ldr	r2, [pc, #184]	; (8101dd0 <HAL_GPIO_Init+0x238>)
 8101d18:	f043 0302 	orr.w	r3, r3, #2
 8101d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101d20:	4b2b      	ldr	r3, [pc, #172]	; (8101dd0 <HAL_GPIO_Init+0x238>)
 8101d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d26:	f003 0302 	and.w	r3, r3, #2
 8101d2a:	60fb      	str	r3, [r7, #12]
 8101d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101d2e:	4a29      	ldr	r2, [pc, #164]	; (8101dd4 <HAL_GPIO_Init+0x23c>)
 8101d30:	69fb      	ldr	r3, [r7, #28]
 8101d32:	089b      	lsrs	r3, r3, #2
 8101d34:	3302      	adds	r3, #2
 8101d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101d3c:	69fb      	ldr	r3, [r7, #28]
 8101d3e:	f003 0303 	and.w	r3, r3, #3
 8101d42:	009b      	lsls	r3, r3, #2
 8101d44:	220f      	movs	r2, #15
 8101d46:	fa02 f303 	lsl.w	r3, r2, r3
 8101d4a:	43db      	mvns	r3, r3
 8101d4c:	69ba      	ldr	r2, [r7, #24]
 8101d4e:	4013      	ands	r3, r2
 8101d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	4a20      	ldr	r2, [pc, #128]	; (8101dd8 <HAL_GPIO_Init+0x240>)
 8101d56:	4293      	cmp	r3, r2
 8101d58:	d052      	beq.n	8101e00 <HAL_GPIO_Init+0x268>
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	4a1f      	ldr	r2, [pc, #124]	; (8101ddc <HAL_GPIO_Init+0x244>)
 8101d5e:	4293      	cmp	r3, r2
 8101d60:	d031      	beq.n	8101dc6 <HAL_GPIO_Init+0x22e>
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	4a1e      	ldr	r2, [pc, #120]	; (8101de0 <HAL_GPIO_Init+0x248>)
 8101d66:	4293      	cmp	r3, r2
 8101d68:	d02b      	beq.n	8101dc2 <HAL_GPIO_Init+0x22a>
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	4a1d      	ldr	r2, [pc, #116]	; (8101de4 <HAL_GPIO_Init+0x24c>)
 8101d6e:	4293      	cmp	r3, r2
 8101d70:	d025      	beq.n	8101dbe <HAL_GPIO_Init+0x226>
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	4a1c      	ldr	r2, [pc, #112]	; (8101de8 <HAL_GPIO_Init+0x250>)
 8101d76:	4293      	cmp	r3, r2
 8101d78:	d01f      	beq.n	8101dba <HAL_GPIO_Init+0x222>
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	4a1b      	ldr	r2, [pc, #108]	; (8101dec <HAL_GPIO_Init+0x254>)
 8101d7e:	4293      	cmp	r3, r2
 8101d80:	d019      	beq.n	8101db6 <HAL_GPIO_Init+0x21e>
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	4a1a      	ldr	r2, [pc, #104]	; (8101df0 <HAL_GPIO_Init+0x258>)
 8101d86:	4293      	cmp	r3, r2
 8101d88:	d013      	beq.n	8101db2 <HAL_GPIO_Init+0x21a>
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	4a19      	ldr	r2, [pc, #100]	; (8101df4 <HAL_GPIO_Init+0x25c>)
 8101d8e:	4293      	cmp	r3, r2
 8101d90:	d00d      	beq.n	8101dae <HAL_GPIO_Init+0x216>
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	4a18      	ldr	r2, [pc, #96]	; (8101df8 <HAL_GPIO_Init+0x260>)
 8101d96:	4293      	cmp	r3, r2
 8101d98:	d007      	beq.n	8101daa <HAL_GPIO_Init+0x212>
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	4a17      	ldr	r2, [pc, #92]	; (8101dfc <HAL_GPIO_Init+0x264>)
 8101d9e:	4293      	cmp	r3, r2
 8101da0:	d101      	bne.n	8101da6 <HAL_GPIO_Init+0x20e>
 8101da2:	2309      	movs	r3, #9
 8101da4:	e02d      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101da6:	230a      	movs	r3, #10
 8101da8:	e02b      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101daa:	2308      	movs	r3, #8
 8101dac:	e029      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dae:	2307      	movs	r3, #7
 8101db0:	e027      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101db2:	2306      	movs	r3, #6
 8101db4:	e025      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101db6:	2305      	movs	r3, #5
 8101db8:	e023      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dba:	2304      	movs	r3, #4
 8101dbc:	e021      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dbe:	2303      	movs	r3, #3
 8101dc0:	e01f      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dc2:	2302      	movs	r3, #2
 8101dc4:	e01d      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dc6:	2301      	movs	r3, #1
 8101dc8:	e01b      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dca:	bf00      	nop
 8101dcc:	580000c0 	.word	0x580000c0
 8101dd0:	58024400 	.word	0x58024400
 8101dd4:	58000400 	.word	0x58000400
 8101dd8:	58020000 	.word	0x58020000
 8101ddc:	58020400 	.word	0x58020400
 8101de0:	58020800 	.word	0x58020800
 8101de4:	58020c00 	.word	0x58020c00
 8101de8:	58021000 	.word	0x58021000
 8101dec:	58021400 	.word	0x58021400
 8101df0:	58021800 	.word	0x58021800
 8101df4:	58021c00 	.word	0x58021c00
 8101df8:	58022000 	.word	0x58022000
 8101dfc:	58022400 	.word	0x58022400
 8101e00:	2300      	movs	r3, #0
 8101e02:	69fa      	ldr	r2, [r7, #28]
 8101e04:	f002 0203 	and.w	r2, r2, #3
 8101e08:	0092      	lsls	r2, r2, #2
 8101e0a:	4093      	lsls	r3, r2
 8101e0c:	69ba      	ldr	r2, [r7, #24]
 8101e0e:	4313      	orrs	r3, r2
 8101e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101e12:	4938      	ldr	r1, [pc, #224]	; (8101ef4 <HAL_GPIO_Init+0x35c>)
 8101e14:	69fb      	ldr	r3, [r7, #28]
 8101e16:	089b      	lsrs	r3, r3, #2
 8101e18:	3302      	adds	r3, #2
 8101e1a:	69ba      	ldr	r2, [r7, #24]
 8101e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101e20:	697b      	ldr	r3, [r7, #20]
 8101e22:	681b      	ldr	r3, [r3, #0]
 8101e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e26:	693b      	ldr	r3, [r7, #16]
 8101e28:	43db      	mvns	r3, r3
 8101e2a:	69ba      	ldr	r2, [r7, #24]
 8101e2c:	4013      	ands	r3, r2
 8101e2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101e30:	683b      	ldr	r3, [r7, #0]
 8101e32:	685b      	ldr	r3, [r3, #4]
 8101e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d003      	beq.n	8101e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101e3c:	69ba      	ldr	r2, [r7, #24]
 8101e3e:	693b      	ldr	r3, [r7, #16]
 8101e40:	4313      	orrs	r3, r2
 8101e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101e44:	697b      	ldr	r3, [r7, #20]
 8101e46:	69ba      	ldr	r2, [r7, #24]
 8101e48:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101e4a:	697b      	ldr	r3, [r7, #20]
 8101e4c:	685b      	ldr	r3, [r3, #4]
 8101e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e50:	693b      	ldr	r3, [r7, #16]
 8101e52:	43db      	mvns	r3, r3
 8101e54:	69ba      	ldr	r2, [r7, #24]
 8101e56:	4013      	ands	r3, r2
 8101e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101e5a:	683b      	ldr	r3, [r7, #0]
 8101e5c:	685b      	ldr	r3, [r3, #4]
 8101e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101e62:	2b00      	cmp	r3, #0
 8101e64:	d003      	beq.n	8101e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101e66:	69ba      	ldr	r2, [r7, #24]
 8101e68:	693b      	ldr	r3, [r7, #16]
 8101e6a:	4313      	orrs	r3, r2
 8101e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101e6e:	697b      	ldr	r3, [r7, #20]
 8101e70:	69ba      	ldr	r2, [r7, #24]
 8101e72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101e78:	681b      	ldr	r3, [r3, #0]
 8101e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e7c:	693b      	ldr	r3, [r7, #16]
 8101e7e:	43db      	mvns	r3, r3
 8101e80:	69ba      	ldr	r2, [r7, #24]
 8101e82:	4013      	ands	r3, r2
 8101e84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101e86:	683b      	ldr	r3, [r7, #0]
 8101e88:	685b      	ldr	r3, [r3, #4]
 8101e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101e8e:	2b00      	cmp	r3, #0
 8101e90:	d003      	beq.n	8101e9a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101e92:	69ba      	ldr	r2, [r7, #24]
 8101e94:	693b      	ldr	r3, [r7, #16]
 8101e96:	4313      	orrs	r3, r2
 8101e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101e9e:	69bb      	ldr	r3, [r7, #24]
 8101ea0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ea6:	685b      	ldr	r3, [r3, #4]
 8101ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101eaa:	693b      	ldr	r3, [r7, #16]
 8101eac:	43db      	mvns	r3, r3
 8101eae:	69ba      	ldr	r2, [r7, #24]
 8101eb0:	4013      	ands	r3, r2
 8101eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101eb4:	683b      	ldr	r3, [r7, #0]
 8101eb6:	685b      	ldr	r3, [r3, #4]
 8101eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d003      	beq.n	8101ec8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101ec0:	69ba      	ldr	r2, [r7, #24]
 8101ec2:	693b      	ldr	r3, [r7, #16]
 8101ec4:	4313      	orrs	r3, r2
 8101ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101ecc:	69bb      	ldr	r3, [r7, #24]
 8101ece:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101ed0:	69fb      	ldr	r3, [r7, #28]
 8101ed2:	3301      	adds	r3, #1
 8101ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101ed6:	683b      	ldr	r3, [r7, #0]
 8101ed8:	681a      	ldr	r2, [r3, #0]
 8101eda:	69fb      	ldr	r3, [r7, #28]
 8101edc:	fa22 f303 	lsr.w	r3, r2, r3
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	f47f ae63 	bne.w	8101bac <HAL_GPIO_Init+0x14>
  }
}
 8101ee6:	bf00      	nop
 8101ee8:	bf00      	nop
 8101eea:	3724      	adds	r7, #36	; 0x24
 8101eec:	46bd      	mov	sp, r7
 8101eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ef2:	4770      	bx	lr
 8101ef4:	58000400 	.word	0x58000400

08101ef8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8101ef8:	b480      	push	{r7}
 8101efa:	b083      	sub	sp, #12
 8101efc:	af00      	add	r7, sp, #0
 8101efe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101f00:	4a08      	ldr	r2, [pc, #32]	; (8101f24 <HAL_HSEM_FastTake+0x2c>)
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	3320      	adds	r3, #32
 8101f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101f0a:	4a07      	ldr	r2, [pc, #28]	; (8101f28 <HAL_HSEM_FastTake+0x30>)
 8101f0c:	4293      	cmp	r3, r2
 8101f0e:	d101      	bne.n	8101f14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101f10:	2300      	movs	r3, #0
 8101f12:	e000      	b.n	8101f16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101f14:	2301      	movs	r3, #1
}
 8101f16:	4618      	mov	r0, r3
 8101f18:	370c      	adds	r7, #12
 8101f1a:	46bd      	mov	sp, r7
 8101f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f20:	4770      	bx	lr
 8101f22:	bf00      	nop
 8101f24:	58026400 	.word	0x58026400
 8101f28:	80000100 	.word	0x80000100

08101f2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101f2c:	b480      	push	{r7}
 8101f2e:	b083      	sub	sp, #12
 8101f30:	af00      	add	r7, sp, #0
 8101f32:	6078      	str	r0, [r7, #4]
 8101f34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101f36:	4906      	ldr	r1, [pc, #24]	; (8101f50 <HAL_HSEM_Release+0x24>)
 8101f38:	683b      	ldr	r3, [r7, #0]
 8101f3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101f44:	bf00      	nop
 8101f46:	370c      	adds	r7, #12
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4e:	4770      	bx	lr
 8101f50:	58026400 	.word	0x58026400

08101f54 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101f54:	b480      	push	{r7}
 8101f56:	b083      	sub	sp, #12
 8101f58:	af00      	add	r7, sp, #0
 8101f5a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101f5c:	4b05      	ldr	r3, [pc, #20]	; (8101f74 <HAL_HSEM_ActivateNotification+0x20>)
 8101f5e:	681a      	ldr	r2, [r3, #0]
 8101f60:	4904      	ldr	r1, [pc, #16]	; (8101f74 <HAL_HSEM_ActivateNotification+0x20>)
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	4313      	orrs	r3, r2
 8101f66:	600b      	str	r3, [r1, #0]
#endif
}
 8101f68:	bf00      	nop
 8101f6a:	370c      	adds	r7, #12
 8101f6c:	46bd      	mov	sp, r7
 8101f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f72:	4770      	bx	lr
 8101f74:	58026510 	.word	0x58026510

08101f78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101f78:	b580      	push	{r7, lr}
 8101f7a:	b082      	sub	sp, #8
 8101f7c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8101f7e:	4b0a      	ldr	r3, [pc, #40]	; (8101fa8 <HAL_HSEM_IRQHandler+0x30>)
 8101f80:	68db      	ldr	r3, [r3, #12]
 8101f82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101f84:	4b08      	ldr	r3, [pc, #32]	; (8101fa8 <HAL_HSEM_IRQHandler+0x30>)
 8101f86:	681a      	ldr	r2, [r3, #0]
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	43db      	mvns	r3, r3
 8101f8c:	4906      	ldr	r1, [pc, #24]	; (8101fa8 <HAL_HSEM_IRQHandler+0x30>)
 8101f8e:	4013      	ands	r3, r2
 8101f90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8101f92:	4a05      	ldr	r2, [pc, #20]	; (8101fa8 <HAL_HSEM_IRQHandler+0x30>)
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8101f98:	6878      	ldr	r0, [r7, #4]
 8101f9a:	f004 ff21 	bl	8106de0 <HAL_HSEM_FreeCallback>
}
 8101f9e:	bf00      	nop
 8101fa0:	3708      	adds	r7, #8
 8101fa2:	46bd      	mov	sp, r7
 8101fa4:	bd80      	pop	{r7, pc}
 8101fa6:	bf00      	nop
 8101fa8:	58026510 	.word	0x58026510

08101fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101fac:	b580      	push	{r7, lr}
 8101fae:	b082      	sub	sp, #8
 8101fb0:	af00      	add	r7, sp, #0
 8101fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2b00      	cmp	r3, #0
 8101fb8:	d101      	bne.n	8101fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101fba:	2301      	movs	r3, #1
 8101fbc:	e081      	b.n	81020c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101fc4:	b2db      	uxtb	r3, r3
 8101fc6:	2b00      	cmp	r3, #0
 8101fc8:	d106      	bne.n	8101fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	2200      	movs	r2, #0
 8101fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101fd2:	6878      	ldr	r0, [r7, #4]
 8101fd4:	f7fe ffba 	bl	8100f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	2224      	movs	r2, #36	; 0x24
 8101fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	681a      	ldr	r2, [r3, #0]
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	681b      	ldr	r3, [r3, #0]
 8101fea:	f022 0201 	bic.w	r2, r2, #1
 8101fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	685a      	ldr	r2, [r3, #4]
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	689a      	ldr	r2, [r3, #8]
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810200c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	68db      	ldr	r3, [r3, #12]
 8102012:	2b01      	cmp	r3, #1
 8102014:	d107      	bne.n	8102026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	689a      	ldr	r2, [r3, #8]
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102022:	609a      	str	r2, [r3, #8]
 8102024:	e006      	b.n	8102034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	689a      	ldr	r2, [r3, #8]
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	681b      	ldr	r3, [r3, #0]
 810202e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	68db      	ldr	r3, [r3, #12]
 8102038:	2b02      	cmp	r3, #2
 810203a:	d104      	bne.n	8102046 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	685b      	ldr	r3, [r3, #4]
 810204c:	687a      	ldr	r2, [r7, #4]
 810204e:	6812      	ldr	r2, [r2, #0]
 8102050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	68da      	ldr	r2, [r3, #12]
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	691a      	ldr	r2, [r3, #16]
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	695b      	ldr	r3, [r3, #20]
 8102072:	ea42 0103 	orr.w	r1, r2, r3
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	699b      	ldr	r3, [r3, #24]
 810207a:	021a      	lsls	r2, r3, #8
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	430a      	orrs	r2, r1
 8102082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	69d9      	ldr	r1, [r3, #28]
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	6a1a      	ldr	r2, [r3, #32]
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	681b      	ldr	r3, [r3, #0]
 8102090:	430a      	orrs	r2, r1
 8102092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	681a      	ldr	r2, [r3, #0]
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	f042 0201 	orr.w	r2, r2, #1
 81020a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	2200      	movs	r2, #0
 81020a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	2220      	movs	r2, #32
 81020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	2200      	movs	r2, #0
 81020b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	2200      	movs	r2, #0
 81020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81020c0:	2300      	movs	r3, #0
}
 81020c2:	4618      	mov	r0, r3
 81020c4:	3708      	adds	r7, #8
 81020c6:	46bd      	mov	sp, r7
 81020c8:	bd80      	pop	{r7, pc}
	...

081020cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81020cc:	b580      	push	{r7, lr}
 81020ce:	b088      	sub	sp, #32
 81020d0:	af02      	add	r7, sp, #8
 81020d2:	60f8      	str	r0, [r7, #12]
 81020d4:	4608      	mov	r0, r1
 81020d6:	4611      	mov	r1, r2
 81020d8:	461a      	mov	r2, r3
 81020da:	4603      	mov	r3, r0
 81020dc:	817b      	strh	r3, [r7, #10]
 81020de:	460b      	mov	r3, r1
 81020e0:	813b      	strh	r3, [r7, #8]
 81020e2:	4613      	mov	r3, r2
 81020e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81020e6:	68fb      	ldr	r3, [r7, #12]
 81020e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81020ec:	b2db      	uxtb	r3, r3
 81020ee:	2b20      	cmp	r3, #32
 81020f0:	f040 80f9 	bne.w	81022e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81020f4:	6a3b      	ldr	r3, [r7, #32]
 81020f6:	2b00      	cmp	r3, #0
 81020f8:	d002      	beq.n	8102100 <HAL_I2C_Mem_Write+0x34>
 81020fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81020fc:	2b00      	cmp	r3, #0
 81020fe:	d105      	bne.n	810210c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102100:	68fb      	ldr	r3, [r7, #12]
 8102102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102106:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102108:	2301      	movs	r3, #1
 810210a:	e0ed      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810210c:	68fb      	ldr	r3, [r7, #12]
 810210e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102112:	2b01      	cmp	r3, #1
 8102114:	d101      	bne.n	810211a <HAL_I2C_Mem_Write+0x4e>
 8102116:	2302      	movs	r3, #2
 8102118:	e0e6      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
 810211a:	68fb      	ldr	r3, [r7, #12]
 810211c:	2201      	movs	r2, #1
 810211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102122:	f7ff fbb9 	bl	8101898 <HAL_GetTick>
 8102126:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102128:	697b      	ldr	r3, [r7, #20]
 810212a:	9300      	str	r3, [sp, #0]
 810212c:	2319      	movs	r3, #25
 810212e:	2201      	movs	r2, #1
 8102130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102134:	68f8      	ldr	r0, [r7, #12]
 8102136:	f000 fadd 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 810213a:	4603      	mov	r3, r0
 810213c:	2b00      	cmp	r3, #0
 810213e:	d001      	beq.n	8102144 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102140:	2301      	movs	r3, #1
 8102142:	e0d1      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102144:	68fb      	ldr	r3, [r7, #12]
 8102146:	2221      	movs	r2, #33	; 0x21
 8102148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810214c:	68fb      	ldr	r3, [r7, #12]
 810214e:	2240      	movs	r2, #64	; 0x40
 8102150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102154:	68fb      	ldr	r3, [r7, #12]
 8102156:	2200      	movs	r2, #0
 8102158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	6a3a      	ldr	r2, [r7, #32]
 810215e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102166:	68fb      	ldr	r3, [r7, #12]
 8102168:	2200      	movs	r2, #0
 810216a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810216c:	88f8      	ldrh	r0, [r7, #6]
 810216e:	893a      	ldrh	r2, [r7, #8]
 8102170:	8979      	ldrh	r1, [r7, #10]
 8102172:	697b      	ldr	r3, [r7, #20]
 8102174:	9301      	str	r3, [sp, #4]
 8102176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102178:	9300      	str	r3, [sp, #0]
 810217a:	4603      	mov	r3, r0
 810217c:	68f8      	ldr	r0, [r7, #12]
 810217e:	f000 f9ed 	bl	810255c <I2C_RequestMemoryWrite>
 8102182:	4603      	mov	r3, r0
 8102184:	2b00      	cmp	r3, #0
 8102186:	d005      	beq.n	8102194 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102188:	68fb      	ldr	r3, [r7, #12]
 810218a:	2200      	movs	r2, #0
 810218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102190:	2301      	movs	r3, #1
 8102192:	e0a9      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102194:	68fb      	ldr	r3, [r7, #12]
 8102196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102198:	b29b      	uxth	r3, r3
 810219a:	2bff      	cmp	r3, #255	; 0xff
 810219c:	d90e      	bls.n	81021bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810219e:	68fb      	ldr	r3, [r7, #12]
 81021a0:	22ff      	movs	r2, #255	; 0xff
 81021a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81021a4:	68fb      	ldr	r3, [r7, #12]
 81021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81021a8:	b2da      	uxtb	r2, r3
 81021aa:	8979      	ldrh	r1, [r7, #10]
 81021ac:	2300      	movs	r3, #0
 81021ae:	9300      	str	r3, [sp, #0]
 81021b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81021b4:	68f8      	ldr	r0, [r7, #12]
 81021b6:	f000 fbbf 	bl	8102938 <I2C_TransferConfig>
 81021ba:	e00f      	b.n	81021dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81021bc:	68fb      	ldr	r3, [r7, #12]
 81021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81021c0:	b29a      	uxth	r2, r3
 81021c2:	68fb      	ldr	r3, [r7, #12]
 81021c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81021ca:	b2da      	uxtb	r2, r3
 81021cc:	8979      	ldrh	r1, [r7, #10]
 81021ce:	2300      	movs	r3, #0
 81021d0:	9300      	str	r3, [sp, #0]
 81021d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81021d6:	68f8      	ldr	r0, [r7, #12]
 81021d8:	f000 fbae 	bl	8102938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81021dc:	697a      	ldr	r2, [r7, #20]
 81021de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81021e0:	68f8      	ldr	r0, [r7, #12]
 81021e2:	f000 fac7 	bl	8102774 <I2C_WaitOnTXISFlagUntilTimeout>
 81021e6:	4603      	mov	r3, r0
 81021e8:	2b00      	cmp	r3, #0
 81021ea:	d001      	beq.n	81021f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81021ec:	2301      	movs	r3, #1
 81021ee:	e07b      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81021f0:	68fb      	ldr	r3, [r7, #12]
 81021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81021f4:	781a      	ldrb	r2, [r3, #0]
 81021f6:	68fb      	ldr	r3, [r7, #12]
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102200:	1c5a      	adds	r2, r3, #1
 8102202:	68fb      	ldr	r3, [r7, #12]
 8102204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102206:	68fb      	ldr	r3, [r7, #12]
 8102208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810220a:	b29b      	uxth	r3, r3
 810220c:	3b01      	subs	r3, #1
 810220e:	b29a      	uxth	r2, r3
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102214:	68fb      	ldr	r3, [r7, #12]
 8102216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102218:	3b01      	subs	r3, #1
 810221a:	b29a      	uxth	r2, r3
 810221c:	68fb      	ldr	r3, [r7, #12]
 810221e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102224:	b29b      	uxth	r3, r3
 8102226:	2b00      	cmp	r3, #0
 8102228:	d034      	beq.n	8102294 <HAL_I2C_Mem_Write+0x1c8>
 810222a:	68fb      	ldr	r3, [r7, #12]
 810222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810222e:	2b00      	cmp	r3, #0
 8102230:	d130      	bne.n	8102294 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102232:	697b      	ldr	r3, [r7, #20]
 8102234:	9300      	str	r3, [sp, #0]
 8102236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102238:	2200      	movs	r2, #0
 810223a:	2180      	movs	r1, #128	; 0x80
 810223c:	68f8      	ldr	r0, [r7, #12]
 810223e:	f000 fa59 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 8102242:	4603      	mov	r3, r0
 8102244:	2b00      	cmp	r3, #0
 8102246:	d001      	beq.n	810224c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8102248:	2301      	movs	r3, #1
 810224a:	e04d      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102250:	b29b      	uxth	r3, r3
 8102252:	2bff      	cmp	r3, #255	; 0xff
 8102254:	d90e      	bls.n	8102274 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102256:	68fb      	ldr	r3, [r7, #12]
 8102258:	22ff      	movs	r2, #255	; 0xff
 810225a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810225c:	68fb      	ldr	r3, [r7, #12]
 810225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102260:	b2da      	uxtb	r2, r3
 8102262:	8979      	ldrh	r1, [r7, #10]
 8102264:	2300      	movs	r3, #0
 8102266:	9300      	str	r3, [sp, #0]
 8102268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810226c:	68f8      	ldr	r0, [r7, #12]
 810226e:	f000 fb63 	bl	8102938 <I2C_TransferConfig>
 8102272:	e00f      	b.n	8102294 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102274:	68fb      	ldr	r3, [r7, #12]
 8102276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102278:	b29a      	uxth	r2, r3
 810227a:	68fb      	ldr	r3, [r7, #12]
 810227c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810227e:	68fb      	ldr	r3, [r7, #12]
 8102280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102282:	b2da      	uxtb	r2, r3
 8102284:	8979      	ldrh	r1, [r7, #10]
 8102286:	2300      	movs	r3, #0
 8102288:	9300      	str	r3, [sp, #0]
 810228a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810228e:	68f8      	ldr	r0, [r7, #12]
 8102290:	f000 fb52 	bl	8102938 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8102294:	68fb      	ldr	r3, [r7, #12]
 8102296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102298:	b29b      	uxth	r3, r3
 810229a:	2b00      	cmp	r3, #0
 810229c:	d19e      	bne.n	81021dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810229e:	697a      	ldr	r2, [r7, #20]
 81022a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81022a2:	68f8      	ldr	r0, [r7, #12]
 81022a4:	f000 faa6 	bl	81027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 81022a8:	4603      	mov	r3, r0
 81022aa:	2b00      	cmp	r3, #0
 81022ac:	d001      	beq.n	81022b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81022ae:	2301      	movs	r3, #1
 81022b0:	e01a      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	681b      	ldr	r3, [r3, #0]
 81022b6:	2220      	movs	r2, #32
 81022b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81022ba:	68fb      	ldr	r3, [r7, #12]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	6859      	ldr	r1, [r3, #4]
 81022c0:	68fb      	ldr	r3, [r7, #12]
 81022c2:	681a      	ldr	r2, [r3, #0]
 81022c4:	4b0a      	ldr	r3, [pc, #40]	; (81022f0 <HAL_I2C_Mem_Write+0x224>)
 81022c6:	400b      	ands	r3, r1
 81022c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81022ca:	68fb      	ldr	r3, [r7, #12]
 81022cc:	2220      	movs	r2, #32
 81022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81022d2:	68fb      	ldr	r3, [r7, #12]
 81022d4:	2200      	movs	r2, #0
 81022d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81022da:	68fb      	ldr	r3, [r7, #12]
 81022dc:	2200      	movs	r2, #0
 81022de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81022e2:	2300      	movs	r3, #0
 81022e4:	e000      	b.n	81022e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81022e6:	2302      	movs	r3, #2
  }
}
 81022e8:	4618      	mov	r0, r3
 81022ea:	3718      	adds	r7, #24
 81022ec:	46bd      	mov	sp, r7
 81022ee:	bd80      	pop	{r7, pc}
 81022f0:	fe00e800 	.word	0xfe00e800

081022f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81022f4:	b580      	push	{r7, lr}
 81022f6:	b088      	sub	sp, #32
 81022f8:	af02      	add	r7, sp, #8
 81022fa:	60f8      	str	r0, [r7, #12]
 81022fc:	4608      	mov	r0, r1
 81022fe:	4611      	mov	r1, r2
 8102300:	461a      	mov	r2, r3
 8102302:	4603      	mov	r3, r0
 8102304:	817b      	strh	r3, [r7, #10]
 8102306:	460b      	mov	r3, r1
 8102308:	813b      	strh	r3, [r7, #8]
 810230a:	4613      	mov	r3, r2
 810230c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810230e:	68fb      	ldr	r3, [r7, #12]
 8102310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102314:	b2db      	uxtb	r3, r3
 8102316:	2b20      	cmp	r3, #32
 8102318:	f040 80fd 	bne.w	8102516 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810231c:	6a3b      	ldr	r3, [r7, #32]
 810231e:	2b00      	cmp	r3, #0
 8102320:	d002      	beq.n	8102328 <HAL_I2C_Mem_Read+0x34>
 8102322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102324:	2b00      	cmp	r3, #0
 8102326:	d105      	bne.n	8102334 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102328:	68fb      	ldr	r3, [r7, #12]
 810232a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810232e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102330:	2301      	movs	r3, #1
 8102332:	e0f1      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102334:	68fb      	ldr	r3, [r7, #12]
 8102336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810233a:	2b01      	cmp	r3, #1
 810233c:	d101      	bne.n	8102342 <HAL_I2C_Mem_Read+0x4e>
 810233e:	2302      	movs	r3, #2
 8102340:	e0ea      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
 8102342:	68fb      	ldr	r3, [r7, #12]
 8102344:	2201      	movs	r2, #1
 8102346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810234a:	f7ff faa5 	bl	8101898 <HAL_GetTick>
 810234e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102350:	697b      	ldr	r3, [r7, #20]
 8102352:	9300      	str	r3, [sp, #0]
 8102354:	2319      	movs	r3, #25
 8102356:	2201      	movs	r2, #1
 8102358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810235c:	68f8      	ldr	r0, [r7, #12]
 810235e:	f000 f9c9 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 8102362:	4603      	mov	r3, r0
 8102364:	2b00      	cmp	r3, #0
 8102366:	d001      	beq.n	810236c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102368:	2301      	movs	r3, #1
 810236a:	e0d5      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810236c:	68fb      	ldr	r3, [r7, #12]
 810236e:	2222      	movs	r2, #34	; 0x22
 8102370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102374:	68fb      	ldr	r3, [r7, #12]
 8102376:	2240      	movs	r2, #64	; 0x40
 8102378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810237c:	68fb      	ldr	r3, [r7, #12]
 810237e:	2200      	movs	r2, #0
 8102380:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102382:	68fb      	ldr	r3, [r7, #12]
 8102384:	6a3a      	ldr	r2, [r7, #32]
 8102386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102388:	68fb      	ldr	r3, [r7, #12]
 810238a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810238c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810238e:	68fb      	ldr	r3, [r7, #12]
 8102390:	2200      	movs	r2, #0
 8102392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102394:	88f8      	ldrh	r0, [r7, #6]
 8102396:	893a      	ldrh	r2, [r7, #8]
 8102398:	8979      	ldrh	r1, [r7, #10]
 810239a:	697b      	ldr	r3, [r7, #20]
 810239c:	9301      	str	r3, [sp, #4]
 810239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81023a0:	9300      	str	r3, [sp, #0]
 81023a2:	4603      	mov	r3, r0
 81023a4:	68f8      	ldr	r0, [r7, #12]
 81023a6:	f000 f92d 	bl	8102604 <I2C_RequestMemoryRead>
 81023aa:	4603      	mov	r3, r0
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d005      	beq.n	81023bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81023b0:	68fb      	ldr	r3, [r7, #12]
 81023b2:	2200      	movs	r2, #0
 81023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81023b8:	2301      	movs	r3, #1
 81023ba:	e0ad      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81023bc:	68fb      	ldr	r3, [r7, #12]
 81023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81023c0:	b29b      	uxth	r3, r3
 81023c2:	2bff      	cmp	r3, #255	; 0xff
 81023c4:	d90e      	bls.n	81023e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81023c6:	68fb      	ldr	r3, [r7, #12]
 81023c8:	22ff      	movs	r2, #255	; 0xff
 81023ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81023cc:	68fb      	ldr	r3, [r7, #12]
 81023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81023d0:	b2da      	uxtb	r2, r3
 81023d2:	8979      	ldrh	r1, [r7, #10]
 81023d4:	4b52      	ldr	r3, [pc, #328]	; (8102520 <HAL_I2C_Mem_Read+0x22c>)
 81023d6:	9300      	str	r3, [sp, #0]
 81023d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81023dc:	68f8      	ldr	r0, [r7, #12]
 81023de:	f000 faab 	bl	8102938 <I2C_TransferConfig>
 81023e2:	e00f      	b.n	8102404 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81023e4:	68fb      	ldr	r3, [r7, #12]
 81023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81023e8:	b29a      	uxth	r2, r3
 81023ea:	68fb      	ldr	r3, [r7, #12]
 81023ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81023ee:	68fb      	ldr	r3, [r7, #12]
 81023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81023f2:	b2da      	uxtb	r2, r3
 81023f4:	8979      	ldrh	r1, [r7, #10]
 81023f6:	4b4a      	ldr	r3, [pc, #296]	; (8102520 <HAL_I2C_Mem_Read+0x22c>)
 81023f8:	9300      	str	r3, [sp, #0]
 81023fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81023fe:	68f8      	ldr	r0, [r7, #12]
 8102400:	f000 fa9a 	bl	8102938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102404:	697b      	ldr	r3, [r7, #20]
 8102406:	9300      	str	r3, [sp, #0]
 8102408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810240a:	2200      	movs	r2, #0
 810240c:	2104      	movs	r1, #4
 810240e:	68f8      	ldr	r0, [r7, #12]
 8102410:	f000 f970 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 8102414:	4603      	mov	r3, r0
 8102416:	2b00      	cmp	r3, #0
 8102418:	d001      	beq.n	810241e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810241a:	2301      	movs	r3, #1
 810241c:	e07c      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810241e:	68fb      	ldr	r3, [r7, #12]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102424:	68fb      	ldr	r3, [r7, #12]
 8102426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102428:	b2d2      	uxtb	r2, r2
 810242a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810242c:	68fb      	ldr	r3, [r7, #12]
 810242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102430:	1c5a      	adds	r2, r3, #1
 8102432:	68fb      	ldr	r3, [r7, #12]
 8102434:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102436:	68fb      	ldr	r3, [r7, #12]
 8102438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810243a:	3b01      	subs	r3, #1
 810243c:	b29a      	uxth	r2, r3
 810243e:	68fb      	ldr	r3, [r7, #12]
 8102440:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102442:	68fb      	ldr	r3, [r7, #12]
 8102444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102446:	b29b      	uxth	r3, r3
 8102448:	3b01      	subs	r3, #1
 810244a:	b29a      	uxth	r2, r3
 810244c:	68fb      	ldr	r3, [r7, #12]
 810244e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102450:	68fb      	ldr	r3, [r7, #12]
 8102452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102454:	b29b      	uxth	r3, r3
 8102456:	2b00      	cmp	r3, #0
 8102458:	d034      	beq.n	81024c4 <HAL_I2C_Mem_Read+0x1d0>
 810245a:	68fb      	ldr	r3, [r7, #12]
 810245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810245e:	2b00      	cmp	r3, #0
 8102460:	d130      	bne.n	81024c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102462:	697b      	ldr	r3, [r7, #20]
 8102464:	9300      	str	r3, [sp, #0]
 8102466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102468:	2200      	movs	r2, #0
 810246a:	2180      	movs	r1, #128	; 0x80
 810246c:	68f8      	ldr	r0, [r7, #12]
 810246e:	f000 f941 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 8102472:	4603      	mov	r3, r0
 8102474:	2b00      	cmp	r3, #0
 8102476:	d001      	beq.n	810247c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102478:	2301      	movs	r3, #1
 810247a:	e04d      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810247c:	68fb      	ldr	r3, [r7, #12]
 810247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102480:	b29b      	uxth	r3, r3
 8102482:	2bff      	cmp	r3, #255	; 0xff
 8102484:	d90e      	bls.n	81024a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102486:	68fb      	ldr	r3, [r7, #12]
 8102488:	22ff      	movs	r2, #255	; 0xff
 810248a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810248c:	68fb      	ldr	r3, [r7, #12]
 810248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102490:	b2da      	uxtb	r2, r3
 8102492:	8979      	ldrh	r1, [r7, #10]
 8102494:	2300      	movs	r3, #0
 8102496:	9300      	str	r3, [sp, #0]
 8102498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810249c:	68f8      	ldr	r0, [r7, #12]
 810249e:	f000 fa4b 	bl	8102938 <I2C_TransferConfig>
 81024a2:	e00f      	b.n	81024c4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81024a4:	68fb      	ldr	r3, [r7, #12]
 81024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024a8:	b29a      	uxth	r2, r3
 81024aa:	68fb      	ldr	r3, [r7, #12]
 81024ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81024ae:	68fb      	ldr	r3, [r7, #12]
 81024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024b2:	b2da      	uxtb	r2, r3
 81024b4:	8979      	ldrh	r1, [r7, #10]
 81024b6:	2300      	movs	r3, #0
 81024b8:	9300      	str	r3, [sp, #0]
 81024ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81024be:	68f8      	ldr	r0, [r7, #12]
 81024c0:	f000 fa3a 	bl	8102938 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 81024c4:	68fb      	ldr	r3, [r7, #12]
 81024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024c8:	b29b      	uxth	r3, r3
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d19a      	bne.n	8102404 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81024ce:	697a      	ldr	r2, [r7, #20]
 81024d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81024d2:	68f8      	ldr	r0, [r7, #12]
 81024d4:	f000 f98e 	bl	81027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 81024d8:	4603      	mov	r3, r0
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d001      	beq.n	81024e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81024de:	2301      	movs	r3, #1
 81024e0:	e01a      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81024e2:	68fb      	ldr	r3, [r7, #12]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	2220      	movs	r2, #32
 81024e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81024ea:	68fb      	ldr	r3, [r7, #12]
 81024ec:	681b      	ldr	r3, [r3, #0]
 81024ee:	6859      	ldr	r1, [r3, #4]
 81024f0:	68fb      	ldr	r3, [r7, #12]
 81024f2:	681a      	ldr	r2, [r3, #0]
 81024f4:	4b0b      	ldr	r3, [pc, #44]	; (8102524 <HAL_I2C_Mem_Read+0x230>)
 81024f6:	400b      	ands	r3, r1
 81024f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81024fa:	68fb      	ldr	r3, [r7, #12]
 81024fc:	2220      	movs	r2, #32
 81024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102502:	68fb      	ldr	r3, [r7, #12]
 8102504:	2200      	movs	r2, #0
 8102506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810250a:	68fb      	ldr	r3, [r7, #12]
 810250c:	2200      	movs	r2, #0
 810250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102512:	2300      	movs	r3, #0
 8102514:	e000      	b.n	8102518 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102516:	2302      	movs	r3, #2
  }
}
 8102518:	4618      	mov	r0, r3
 810251a:	3718      	adds	r7, #24
 810251c:	46bd      	mov	sp, r7
 810251e:	bd80      	pop	{r7, pc}
 8102520:	80002400 	.word	0x80002400
 8102524:	fe00e800 	.word	0xfe00e800

08102528 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8102528:	b580      	push	{r7, lr}
 810252a:	b084      	sub	sp, #16
 810252c:	af00      	add	r7, sp, #0
 810252e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	699b      	ldr	r3, [r3, #24]
 8102536:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102544:	2b00      	cmp	r3, #0
 8102546:	d005      	beq.n	8102554 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810254c:	68ba      	ldr	r2, [r7, #8]
 810254e:	68f9      	ldr	r1, [r7, #12]
 8102550:	6878      	ldr	r0, [r7, #4]
 8102552:	4798      	blx	r3
  }
}
 8102554:	bf00      	nop
 8102556:	3710      	adds	r7, #16
 8102558:	46bd      	mov	sp, r7
 810255a:	bd80      	pop	{r7, pc}

0810255c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 810255c:	b580      	push	{r7, lr}
 810255e:	b086      	sub	sp, #24
 8102560:	af02      	add	r7, sp, #8
 8102562:	60f8      	str	r0, [r7, #12]
 8102564:	4608      	mov	r0, r1
 8102566:	4611      	mov	r1, r2
 8102568:	461a      	mov	r2, r3
 810256a:	4603      	mov	r3, r0
 810256c:	817b      	strh	r3, [r7, #10]
 810256e:	460b      	mov	r3, r1
 8102570:	813b      	strh	r3, [r7, #8]
 8102572:	4613      	mov	r3, r2
 8102574:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8102576:	88fb      	ldrh	r3, [r7, #6]
 8102578:	b2da      	uxtb	r2, r3
 810257a:	8979      	ldrh	r1, [r7, #10]
 810257c:	4b20      	ldr	r3, [pc, #128]	; (8102600 <I2C_RequestMemoryWrite+0xa4>)
 810257e:	9300      	str	r3, [sp, #0]
 8102580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102584:	68f8      	ldr	r0, [r7, #12]
 8102586:	f000 f9d7 	bl	8102938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810258a:	69fa      	ldr	r2, [r7, #28]
 810258c:	69b9      	ldr	r1, [r7, #24]
 810258e:	68f8      	ldr	r0, [r7, #12]
 8102590:	f000 f8f0 	bl	8102774 <I2C_WaitOnTXISFlagUntilTimeout>
 8102594:	4603      	mov	r3, r0
 8102596:	2b00      	cmp	r3, #0
 8102598:	d001      	beq.n	810259e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810259a:	2301      	movs	r3, #1
 810259c:	e02c      	b.n	81025f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810259e:	88fb      	ldrh	r3, [r7, #6]
 81025a0:	2b01      	cmp	r3, #1
 81025a2:	d105      	bne.n	81025b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81025a4:	893b      	ldrh	r3, [r7, #8]
 81025a6:	b2da      	uxtb	r2, r3
 81025a8:	68fb      	ldr	r3, [r7, #12]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	629a      	str	r2, [r3, #40]	; 0x28
 81025ae:	e015      	b.n	81025dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81025b0:	893b      	ldrh	r3, [r7, #8]
 81025b2:	0a1b      	lsrs	r3, r3, #8
 81025b4:	b29b      	uxth	r3, r3
 81025b6:	b2da      	uxtb	r2, r3
 81025b8:	68fb      	ldr	r3, [r7, #12]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81025be:	69fa      	ldr	r2, [r7, #28]
 81025c0:	69b9      	ldr	r1, [r7, #24]
 81025c2:	68f8      	ldr	r0, [r7, #12]
 81025c4:	f000 f8d6 	bl	8102774 <I2C_WaitOnTXISFlagUntilTimeout>
 81025c8:	4603      	mov	r3, r0
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d001      	beq.n	81025d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81025ce:	2301      	movs	r3, #1
 81025d0:	e012      	b.n	81025f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81025d2:	893b      	ldrh	r3, [r7, #8]
 81025d4:	b2da      	uxtb	r2, r3
 81025d6:	68fb      	ldr	r3, [r7, #12]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81025dc:	69fb      	ldr	r3, [r7, #28]
 81025de:	9300      	str	r3, [sp, #0]
 81025e0:	69bb      	ldr	r3, [r7, #24]
 81025e2:	2200      	movs	r2, #0
 81025e4:	2180      	movs	r1, #128	; 0x80
 81025e6:	68f8      	ldr	r0, [r7, #12]
 81025e8:	f000 f884 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 81025ec:	4603      	mov	r3, r0
 81025ee:	2b00      	cmp	r3, #0
 81025f0:	d001      	beq.n	81025f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81025f2:	2301      	movs	r3, #1
 81025f4:	e000      	b.n	81025f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81025f6:	2300      	movs	r3, #0
}
 81025f8:	4618      	mov	r0, r3
 81025fa:	3710      	adds	r7, #16
 81025fc:	46bd      	mov	sp, r7
 81025fe:	bd80      	pop	{r7, pc}
 8102600:	80002000 	.word	0x80002000

08102604 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102604:	b580      	push	{r7, lr}
 8102606:	b086      	sub	sp, #24
 8102608:	af02      	add	r7, sp, #8
 810260a:	60f8      	str	r0, [r7, #12]
 810260c:	4608      	mov	r0, r1
 810260e:	4611      	mov	r1, r2
 8102610:	461a      	mov	r2, r3
 8102612:	4603      	mov	r3, r0
 8102614:	817b      	strh	r3, [r7, #10]
 8102616:	460b      	mov	r3, r1
 8102618:	813b      	strh	r3, [r7, #8]
 810261a:	4613      	mov	r3, r2
 810261c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810261e:	88fb      	ldrh	r3, [r7, #6]
 8102620:	b2da      	uxtb	r2, r3
 8102622:	8979      	ldrh	r1, [r7, #10]
 8102624:	4b20      	ldr	r3, [pc, #128]	; (81026a8 <I2C_RequestMemoryRead+0xa4>)
 8102626:	9300      	str	r3, [sp, #0]
 8102628:	2300      	movs	r3, #0
 810262a:	68f8      	ldr	r0, [r7, #12]
 810262c:	f000 f984 	bl	8102938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102630:	69fa      	ldr	r2, [r7, #28]
 8102632:	69b9      	ldr	r1, [r7, #24]
 8102634:	68f8      	ldr	r0, [r7, #12]
 8102636:	f000 f89d 	bl	8102774 <I2C_WaitOnTXISFlagUntilTimeout>
 810263a:	4603      	mov	r3, r0
 810263c:	2b00      	cmp	r3, #0
 810263e:	d001      	beq.n	8102644 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102640:	2301      	movs	r3, #1
 8102642:	e02c      	b.n	810269e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102644:	88fb      	ldrh	r3, [r7, #6]
 8102646:	2b01      	cmp	r3, #1
 8102648:	d105      	bne.n	8102656 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810264a:	893b      	ldrh	r3, [r7, #8]
 810264c:	b2da      	uxtb	r2, r3
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	629a      	str	r2, [r3, #40]	; 0x28
 8102654:	e015      	b.n	8102682 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102656:	893b      	ldrh	r3, [r7, #8]
 8102658:	0a1b      	lsrs	r3, r3, #8
 810265a:	b29b      	uxth	r3, r3
 810265c:	b2da      	uxtb	r2, r3
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102664:	69fa      	ldr	r2, [r7, #28]
 8102666:	69b9      	ldr	r1, [r7, #24]
 8102668:	68f8      	ldr	r0, [r7, #12]
 810266a:	f000 f883 	bl	8102774 <I2C_WaitOnTXISFlagUntilTimeout>
 810266e:	4603      	mov	r3, r0
 8102670:	2b00      	cmp	r3, #0
 8102672:	d001      	beq.n	8102678 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102674:	2301      	movs	r3, #1
 8102676:	e012      	b.n	810269e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102678:	893b      	ldrh	r3, [r7, #8]
 810267a:	b2da      	uxtb	r2, r3
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102682:	69fb      	ldr	r3, [r7, #28]
 8102684:	9300      	str	r3, [sp, #0]
 8102686:	69bb      	ldr	r3, [r7, #24]
 8102688:	2200      	movs	r2, #0
 810268a:	2140      	movs	r1, #64	; 0x40
 810268c:	68f8      	ldr	r0, [r7, #12]
 810268e:	f000 f831 	bl	81026f4 <I2C_WaitOnFlagUntilTimeout>
 8102692:	4603      	mov	r3, r0
 8102694:	2b00      	cmp	r3, #0
 8102696:	d001      	beq.n	810269c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102698:	2301      	movs	r3, #1
 810269a:	e000      	b.n	810269e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810269c:	2300      	movs	r3, #0
}
 810269e:	4618      	mov	r0, r3
 81026a0:	3710      	adds	r7, #16
 81026a2:	46bd      	mov	sp, r7
 81026a4:	bd80      	pop	{r7, pc}
 81026a6:	bf00      	nop
 81026a8:	80002000 	.word	0x80002000

081026ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81026ac:	b480      	push	{r7}
 81026ae:	b083      	sub	sp, #12
 81026b0:	af00      	add	r7, sp, #0
 81026b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	681b      	ldr	r3, [r3, #0]
 81026b8:	699b      	ldr	r3, [r3, #24]
 81026ba:	f003 0302 	and.w	r3, r3, #2
 81026be:	2b02      	cmp	r3, #2
 81026c0:	d103      	bne.n	81026ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	2200      	movs	r2, #0
 81026c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	681b      	ldr	r3, [r3, #0]
 81026ce:	699b      	ldr	r3, [r3, #24]
 81026d0:	f003 0301 	and.w	r3, r3, #1
 81026d4:	2b01      	cmp	r3, #1
 81026d6:	d007      	beq.n	81026e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	699a      	ldr	r2, [r3, #24]
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	681b      	ldr	r3, [r3, #0]
 81026e2:	f042 0201 	orr.w	r2, r2, #1
 81026e6:	619a      	str	r2, [r3, #24]
  }
}
 81026e8:	bf00      	nop
 81026ea:	370c      	adds	r7, #12
 81026ec:	46bd      	mov	sp, r7
 81026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026f2:	4770      	bx	lr

081026f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81026f4:	b580      	push	{r7, lr}
 81026f6:	b084      	sub	sp, #16
 81026f8:	af00      	add	r7, sp, #0
 81026fa:	60f8      	str	r0, [r7, #12]
 81026fc:	60b9      	str	r1, [r7, #8]
 81026fe:	603b      	str	r3, [r7, #0]
 8102700:	4613      	mov	r3, r2
 8102702:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102704:	e022      	b.n	810274c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102706:	683b      	ldr	r3, [r7, #0]
 8102708:	f1b3 3fff 	cmp.w	r3, #4294967295
 810270c:	d01e      	beq.n	810274c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810270e:	f7ff f8c3 	bl	8101898 <HAL_GetTick>
 8102712:	4602      	mov	r2, r0
 8102714:	69bb      	ldr	r3, [r7, #24]
 8102716:	1ad3      	subs	r3, r2, r3
 8102718:	683a      	ldr	r2, [r7, #0]
 810271a:	429a      	cmp	r2, r3
 810271c:	d302      	bcc.n	8102724 <I2C_WaitOnFlagUntilTimeout+0x30>
 810271e:	683b      	ldr	r3, [r7, #0]
 8102720:	2b00      	cmp	r3, #0
 8102722:	d113      	bne.n	810274c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102728:	f043 0220 	orr.w	r2, r3, #32
 810272c:	68fb      	ldr	r3, [r7, #12]
 810272e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102730:	68fb      	ldr	r3, [r7, #12]
 8102732:	2220      	movs	r2, #32
 8102734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102738:	68fb      	ldr	r3, [r7, #12]
 810273a:	2200      	movs	r2, #0
 810273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102740:	68fb      	ldr	r3, [r7, #12]
 8102742:	2200      	movs	r2, #0
 8102744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102748:	2301      	movs	r3, #1
 810274a:	e00f      	b.n	810276c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	699a      	ldr	r2, [r3, #24]
 8102752:	68bb      	ldr	r3, [r7, #8]
 8102754:	4013      	ands	r3, r2
 8102756:	68ba      	ldr	r2, [r7, #8]
 8102758:	429a      	cmp	r2, r3
 810275a:	bf0c      	ite	eq
 810275c:	2301      	moveq	r3, #1
 810275e:	2300      	movne	r3, #0
 8102760:	b2db      	uxtb	r3, r3
 8102762:	461a      	mov	r2, r3
 8102764:	79fb      	ldrb	r3, [r7, #7]
 8102766:	429a      	cmp	r2, r3
 8102768:	d0cd      	beq.n	8102706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810276a:	2300      	movs	r3, #0
}
 810276c:	4618      	mov	r0, r3
 810276e:	3710      	adds	r7, #16
 8102770:	46bd      	mov	sp, r7
 8102772:	bd80      	pop	{r7, pc}

08102774 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102774:	b580      	push	{r7, lr}
 8102776:	b084      	sub	sp, #16
 8102778:	af00      	add	r7, sp, #0
 810277a:	60f8      	str	r0, [r7, #12]
 810277c:	60b9      	str	r1, [r7, #8]
 810277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102780:	e02c      	b.n	81027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102782:	687a      	ldr	r2, [r7, #4]
 8102784:	68b9      	ldr	r1, [r7, #8]
 8102786:	68f8      	ldr	r0, [r7, #12]
 8102788:	f000 f870 	bl	810286c <I2C_IsAcknowledgeFailed>
 810278c:	4603      	mov	r3, r0
 810278e:	2b00      	cmp	r3, #0
 8102790:	d001      	beq.n	8102796 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102792:	2301      	movs	r3, #1
 8102794:	e02a      	b.n	81027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102796:	68bb      	ldr	r3, [r7, #8]
 8102798:	f1b3 3fff 	cmp.w	r3, #4294967295
 810279c:	d01e      	beq.n	81027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810279e:	f7ff f87b 	bl	8101898 <HAL_GetTick>
 81027a2:	4602      	mov	r2, r0
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	1ad3      	subs	r3, r2, r3
 81027a8:	68ba      	ldr	r2, [r7, #8]
 81027aa:	429a      	cmp	r2, r3
 81027ac:	d302      	bcc.n	81027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81027ae:	68bb      	ldr	r3, [r7, #8]
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d113      	bne.n	81027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81027b4:	68fb      	ldr	r3, [r7, #12]
 81027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81027b8:	f043 0220 	orr.w	r2, r3, #32
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	2220      	movs	r2, #32
 81027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81027c8:	68fb      	ldr	r3, [r7, #12]
 81027ca:	2200      	movs	r2, #0
 81027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	2200      	movs	r2, #0
 81027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81027d8:	2301      	movs	r3, #1
 81027da:	e007      	b.n	81027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81027dc:	68fb      	ldr	r3, [r7, #12]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	699b      	ldr	r3, [r3, #24]
 81027e2:	f003 0302 	and.w	r3, r3, #2
 81027e6:	2b02      	cmp	r3, #2
 81027e8:	d1cb      	bne.n	8102782 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81027ea:	2300      	movs	r3, #0
}
 81027ec:	4618      	mov	r0, r3
 81027ee:	3710      	adds	r7, #16
 81027f0:	46bd      	mov	sp, r7
 81027f2:	bd80      	pop	{r7, pc}

081027f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81027f4:	b580      	push	{r7, lr}
 81027f6:	b084      	sub	sp, #16
 81027f8:	af00      	add	r7, sp, #0
 81027fa:	60f8      	str	r0, [r7, #12]
 81027fc:	60b9      	str	r1, [r7, #8]
 81027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102800:	e028      	b.n	8102854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102802:	687a      	ldr	r2, [r7, #4]
 8102804:	68b9      	ldr	r1, [r7, #8]
 8102806:	68f8      	ldr	r0, [r7, #12]
 8102808:	f000 f830 	bl	810286c <I2C_IsAcknowledgeFailed>
 810280c:	4603      	mov	r3, r0
 810280e:	2b00      	cmp	r3, #0
 8102810:	d001      	beq.n	8102816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102812:	2301      	movs	r3, #1
 8102814:	e026      	b.n	8102864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102816:	f7ff f83f 	bl	8101898 <HAL_GetTick>
 810281a:	4602      	mov	r2, r0
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	1ad3      	subs	r3, r2, r3
 8102820:	68ba      	ldr	r2, [r7, #8]
 8102822:	429a      	cmp	r2, r3
 8102824:	d302      	bcc.n	810282c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102826:	68bb      	ldr	r3, [r7, #8]
 8102828:	2b00      	cmp	r3, #0
 810282a:	d113      	bne.n	8102854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810282c:	68fb      	ldr	r3, [r7, #12]
 810282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102830:	f043 0220 	orr.w	r2, r3, #32
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	2220      	movs	r2, #32
 810283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102840:	68fb      	ldr	r3, [r7, #12]
 8102842:	2200      	movs	r2, #0
 8102844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	2200      	movs	r2, #0
 810284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102850:	2301      	movs	r3, #1
 8102852:	e007      	b.n	8102864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	699b      	ldr	r3, [r3, #24]
 810285a:	f003 0320 	and.w	r3, r3, #32
 810285e:	2b20      	cmp	r3, #32
 8102860:	d1cf      	bne.n	8102802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102862:	2300      	movs	r3, #0
}
 8102864:	4618      	mov	r0, r3
 8102866:	3710      	adds	r7, #16
 8102868:	46bd      	mov	sp, r7
 810286a:	bd80      	pop	{r7, pc}

0810286c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810286c:	b580      	push	{r7, lr}
 810286e:	b084      	sub	sp, #16
 8102870:	af00      	add	r7, sp, #0
 8102872:	60f8      	str	r0, [r7, #12]
 8102874:	60b9      	str	r1, [r7, #8]
 8102876:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102878:	68fb      	ldr	r3, [r7, #12]
 810287a:	681b      	ldr	r3, [r3, #0]
 810287c:	699b      	ldr	r3, [r3, #24]
 810287e:	f003 0310 	and.w	r3, r3, #16
 8102882:	2b10      	cmp	r3, #16
 8102884:	d151      	bne.n	810292a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102886:	e022      	b.n	81028ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102888:	68bb      	ldr	r3, [r7, #8]
 810288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810288e:	d01e      	beq.n	81028ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102890:	f7ff f802 	bl	8101898 <HAL_GetTick>
 8102894:	4602      	mov	r2, r0
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	1ad3      	subs	r3, r2, r3
 810289a:	68ba      	ldr	r2, [r7, #8]
 810289c:	429a      	cmp	r2, r3
 810289e:	d302      	bcc.n	81028a6 <I2C_IsAcknowledgeFailed+0x3a>
 81028a0:	68bb      	ldr	r3, [r7, #8]
 81028a2:	2b00      	cmp	r3, #0
 81028a4:	d113      	bne.n	81028ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81028a6:	68fb      	ldr	r3, [r7, #12]
 81028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81028aa:	f043 0220 	orr.w	r2, r3, #32
 81028ae:	68fb      	ldr	r3, [r7, #12]
 81028b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81028b2:	68fb      	ldr	r3, [r7, #12]
 81028b4:	2220      	movs	r2, #32
 81028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81028ba:	68fb      	ldr	r3, [r7, #12]
 81028bc:	2200      	movs	r2, #0
 81028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81028c2:	68fb      	ldr	r3, [r7, #12]
 81028c4:	2200      	movs	r2, #0
 81028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81028ca:	2301      	movs	r3, #1
 81028cc:	e02e      	b.n	810292c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81028ce:	68fb      	ldr	r3, [r7, #12]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	699b      	ldr	r3, [r3, #24]
 81028d4:	f003 0320 	and.w	r3, r3, #32
 81028d8:	2b20      	cmp	r3, #32
 81028da:	d1d5      	bne.n	8102888 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81028dc:	68fb      	ldr	r3, [r7, #12]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	2210      	movs	r2, #16
 81028e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	2220      	movs	r2, #32
 81028ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81028ec:	68f8      	ldr	r0, [r7, #12]
 81028ee:	f7ff fedd 	bl	81026ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81028f2:	68fb      	ldr	r3, [r7, #12]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	6859      	ldr	r1, [r3, #4]
 81028f8:	68fb      	ldr	r3, [r7, #12]
 81028fa:	681a      	ldr	r2, [r3, #0]
 81028fc:	4b0d      	ldr	r3, [pc, #52]	; (8102934 <I2C_IsAcknowledgeFailed+0xc8>)
 81028fe:	400b      	ands	r3, r1
 8102900:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102906:	f043 0204 	orr.w	r2, r3, #4
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810290e:	68fb      	ldr	r3, [r7, #12]
 8102910:	2220      	movs	r2, #32
 8102912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102916:	68fb      	ldr	r3, [r7, #12]
 8102918:	2200      	movs	r2, #0
 810291a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810291e:	68fb      	ldr	r3, [r7, #12]
 8102920:	2200      	movs	r2, #0
 8102922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102926:	2301      	movs	r3, #1
 8102928:	e000      	b.n	810292c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 810292a:	2300      	movs	r3, #0
}
 810292c:	4618      	mov	r0, r3
 810292e:	3710      	adds	r7, #16
 8102930:	46bd      	mov	sp, r7
 8102932:	bd80      	pop	{r7, pc}
 8102934:	fe00e800 	.word	0xfe00e800

08102938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102938:	b480      	push	{r7}
 810293a:	b085      	sub	sp, #20
 810293c:	af00      	add	r7, sp, #0
 810293e:	60f8      	str	r0, [r7, #12]
 8102940:	607b      	str	r3, [r7, #4]
 8102942:	460b      	mov	r3, r1
 8102944:	817b      	strh	r3, [r7, #10]
 8102946:	4613      	mov	r3, r2
 8102948:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 810294a:	68fb      	ldr	r3, [r7, #12]
 810294c:	681b      	ldr	r3, [r3, #0]
 810294e:	685a      	ldr	r2, [r3, #4]
 8102950:	69bb      	ldr	r3, [r7, #24]
 8102952:	0d5b      	lsrs	r3, r3, #21
 8102954:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102958:	4b0d      	ldr	r3, [pc, #52]	; (8102990 <I2C_TransferConfig+0x58>)
 810295a:	430b      	orrs	r3, r1
 810295c:	43db      	mvns	r3, r3
 810295e:	ea02 0103 	and.w	r1, r2, r3
 8102962:	897b      	ldrh	r3, [r7, #10]
 8102964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8102968:	7a7b      	ldrb	r3, [r7, #9]
 810296a:	041b      	lsls	r3, r3, #16
 810296c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8102970:	431a      	orrs	r2, r3
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	431a      	orrs	r2, r3
 8102976:	69bb      	ldr	r3, [r7, #24]
 8102978:	431a      	orrs	r2, r3
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	430a      	orrs	r2, r1
 8102980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102982:	bf00      	nop
 8102984:	3714      	adds	r7, #20
 8102986:	46bd      	mov	sp, r7
 8102988:	f85d 7b04 	ldr.w	r7, [sp], #4
 810298c:	4770      	bx	lr
 810298e:	bf00      	nop
 8102990:	03ff63ff 	.word	0x03ff63ff

08102994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102994:	b480      	push	{r7}
 8102996:	b083      	sub	sp, #12
 8102998:	af00      	add	r7, sp, #0
 810299a:	6078      	str	r0, [r7, #4]
 810299c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81029a4:	b2db      	uxtb	r3, r3
 81029a6:	2b20      	cmp	r3, #32
 81029a8:	d138      	bne.n	8102a1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81029b0:	2b01      	cmp	r3, #1
 81029b2:	d101      	bne.n	81029b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81029b4:	2302      	movs	r3, #2
 81029b6:	e032      	b.n	8102a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	2201      	movs	r2, #1
 81029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	2224      	movs	r2, #36	; 0x24
 81029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	681a      	ldr	r2, [r3, #0]
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	681b      	ldr	r3, [r3, #0]
 81029d2:	f022 0201 	bic.w	r2, r2, #1
 81029d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	681a      	ldr	r2, [r3, #0]
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81029e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	6819      	ldr	r1, [r3, #0]
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	683a      	ldr	r2, [r7, #0]
 81029f4:	430a      	orrs	r2, r1
 81029f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	681a      	ldr	r2, [r3, #0]
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	681b      	ldr	r3, [r3, #0]
 8102a02:	f042 0201 	orr.w	r2, r2, #1
 8102a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	2220      	movs	r2, #32
 8102a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	2200      	movs	r2, #0
 8102a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102a18:	2300      	movs	r3, #0
 8102a1a:	e000      	b.n	8102a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102a1c:	2302      	movs	r3, #2
  }
}
 8102a1e:	4618      	mov	r0, r3
 8102a20:	370c      	adds	r7, #12
 8102a22:	46bd      	mov	sp, r7
 8102a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a28:	4770      	bx	lr

08102a2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102a2a:	b480      	push	{r7}
 8102a2c:	b085      	sub	sp, #20
 8102a2e:	af00      	add	r7, sp, #0
 8102a30:	6078      	str	r0, [r7, #4]
 8102a32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102a3a:	b2db      	uxtb	r3, r3
 8102a3c:	2b20      	cmp	r3, #32
 8102a3e:	d139      	bne.n	8102ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102a46:	2b01      	cmp	r3, #1
 8102a48:	d101      	bne.n	8102a4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102a4a:	2302      	movs	r3, #2
 8102a4c:	e033      	b.n	8102ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	2201      	movs	r2, #1
 8102a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	2224      	movs	r2, #36	; 0x24
 8102a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	681a      	ldr	r2, [r3, #0]
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	f022 0201 	bic.w	r2, r2, #1
 8102a6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	681b      	ldr	r3, [r3, #0]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102a7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102a7e:	683b      	ldr	r3, [r7, #0]
 8102a80:	021b      	lsls	r3, r3, #8
 8102a82:	68fa      	ldr	r2, [r7, #12]
 8102a84:	4313      	orrs	r3, r2
 8102a86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	68fa      	ldr	r2, [r7, #12]
 8102a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	681a      	ldr	r2, [r3, #0]
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	f042 0201 	orr.w	r2, r2, #1
 8102a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	2220      	movs	r2, #32
 8102aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	2200      	movs	r2, #0
 8102aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102ab0:	2300      	movs	r3, #0
 8102ab2:	e000      	b.n	8102ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102ab4:	2302      	movs	r3, #2
  }
}
 8102ab6:	4618      	mov	r0, r3
 8102ab8:	3714      	adds	r7, #20
 8102aba:	46bd      	mov	sp, r7
 8102abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac0:	4770      	bx	lr
	...

08102ac4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102ac4:	b580      	push	{r7, lr}
 8102ac6:	b084      	sub	sp, #16
 8102ac8:	af00      	add	r7, sp, #0
 8102aca:	60f8      	str	r0, [r7, #12]
 8102acc:	460b      	mov	r3, r1
 8102ace:	607a      	str	r2, [r7, #4]
 8102ad0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102ad2:	4b37      	ldr	r3, [pc, #220]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	f023 0201 	bic.w	r2, r3, #1
 8102ada:	4935      	ldr	r1, [pc, #212]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	4313      	orrs	r3, r2
 8102ae0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	2b00      	cmp	r3, #0
 8102ae6:	d123      	bne.n	8102b30 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102ae8:	f7ff f842 	bl	8101b70 <HAL_GetCurrentCPUID>
 8102aec:	4603      	mov	r3, r0
 8102aee:	2b03      	cmp	r3, #3
 8102af0:	d158      	bne.n	8102ba4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102af2:	4b2f      	ldr	r3, [pc, #188]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102af4:	691b      	ldr	r3, [r3, #16]
 8102af6:	4a2e      	ldr	r2, [pc, #184]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102af8:	f023 0301 	bic.w	r3, r3, #1
 8102afc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102afe:	4b2d      	ldr	r3, [pc, #180]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b00:	691b      	ldr	r3, [r3, #16]
 8102b02:	4a2c      	ldr	r2, [pc, #176]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b04:	f043 0304 	orr.w	r3, r3, #4
 8102b08:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102b0a:	f3bf 8f4f 	dsb	sy
}
 8102b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b10:	f3bf 8f6f 	isb	sy
}
 8102b14:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b16:	7afb      	ldrb	r3, [r7, #11]
 8102b18:	2b01      	cmp	r3, #1
 8102b1a:	d101      	bne.n	8102b20 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b1c:	bf30      	wfi
 8102b1e:	e000      	b.n	8102b22 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b20:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b22:	4b24      	ldr	r3, [pc, #144]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b24:	691b      	ldr	r3, [r3, #16]
 8102b26:	4a23      	ldr	r2, [pc, #140]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b28:	f023 0304 	bic.w	r3, r3, #4
 8102b2c:	6113      	str	r3, [r2, #16]
 8102b2e:	e03c      	b.n	8102baa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	2b01      	cmp	r3, #1
 8102b34:	d123      	bne.n	8102b7e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102b36:	f7ff f81b 	bl	8101b70 <HAL_GetCurrentCPUID>
 8102b3a:	4603      	mov	r3, r0
 8102b3c:	2b01      	cmp	r3, #1
 8102b3e:	d133      	bne.n	8102ba8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102b40:	4b1b      	ldr	r3, [pc, #108]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b42:	695b      	ldr	r3, [r3, #20]
 8102b44:	4a1a      	ldr	r2, [pc, #104]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b46:	f023 0302 	bic.w	r3, r3, #2
 8102b4a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b4c:	4b19      	ldr	r3, [pc, #100]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b4e:	691b      	ldr	r3, [r3, #16]
 8102b50:	4a18      	ldr	r2, [pc, #96]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b52:	f043 0304 	orr.w	r3, r3, #4
 8102b56:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102b58:	f3bf 8f4f 	dsb	sy
}
 8102b5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b5e:	f3bf 8f6f 	isb	sy
}
 8102b62:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b64:	7afb      	ldrb	r3, [r7, #11]
 8102b66:	2b01      	cmp	r3, #1
 8102b68:	d101      	bne.n	8102b6e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b6a:	bf30      	wfi
 8102b6c:	e000      	b.n	8102b70 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b6e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b70:	4b10      	ldr	r3, [pc, #64]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b72:	691b      	ldr	r3, [r3, #16]
 8102b74:	4a0f      	ldr	r2, [pc, #60]	; (8102bb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b76:	f023 0304 	bic.w	r3, r3, #4
 8102b7a:	6113      	str	r3, [r2, #16]
 8102b7c:	e015      	b.n	8102baa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102b7e:	f7fe fff7 	bl	8101b70 <HAL_GetCurrentCPUID>
 8102b82:	4603      	mov	r3, r0
 8102b84:	2b03      	cmp	r3, #3
 8102b86:	d106      	bne.n	8102b96 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102b88:	4b09      	ldr	r3, [pc, #36]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b8a:	691b      	ldr	r3, [r3, #16]
 8102b8c:	4a08      	ldr	r2, [pc, #32]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b8e:	f023 0304 	bic.w	r3, r3, #4
 8102b92:	6113      	str	r3, [r2, #16]
 8102b94:	e009      	b.n	8102baa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102b96:	4b06      	ldr	r3, [pc, #24]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b98:	695b      	ldr	r3, [r3, #20]
 8102b9a:	4a05      	ldr	r2, [pc, #20]	; (8102bb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b9c:	f023 0304 	bic.w	r3, r3, #4
 8102ba0:	6153      	str	r3, [r2, #20]
 8102ba2:	e002      	b.n	8102baa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102ba4:	bf00      	nop
 8102ba6:	e000      	b.n	8102baa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102ba8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102baa:	3710      	adds	r7, #16
 8102bac:	46bd      	mov	sp, r7
 8102bae:	bd80      	pop	{r7, pc}
 8102bb0:	58024800 	.word	0x58024800
 8102bb4:	e000ed00 	.word	0xe000ed00

08102bb8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102bb8:	b580      	push	{r7, lr}
 8102bba:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102bbc:	f7fe ffd8 	bl	8101b70 <HAL_GetCurrentCPUID>
 8102bc0:	4603      	mov	r3, r0
 8102bc2:	2b03      	cmp	r3, #3
 8102bc4:	d101      	bne.n	8102bca <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102bc6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102bc8:	e001      	b.n	8102bce <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102bca:	bf40      	sev
    __WFE ();
 8102bcc:	bf20      	wfe
}
 8102bce:	bf00      	nop
 8102bd0:	bd80      	pop	{r7, pc}
	...

08102bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102bd4:	b480      	push	{r7}
 8102bd6:	b089      	sub	sp, #36	; 0x24
 8102bd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102bda:	4bb3      	ldr	r3, [pc, #716]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bdc:	691b      	ldr	r3, [r3, #16]
 8102bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102be2:	2b18      	cmp	r3, #24
 8102be4:	f200 8155 	bhi.w	8102e92 <HAL_RCC_GetSysClockFreq+0x2be>
 8102be8:	a201      	add	r2, pc, #4	; (adr r2, 8102bf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bee:	bf00      	nop
 8102bf0:	08102c55 	.word	0x08102c55
 8102bf4:	08102e93 	.word	0x08102e93
 8102bf8:	08102e93 	.word	0x08102e93
 8102bfc:	08102e93 	.word	0x08102e93
 8102c00:	08102e93 	.word	0x08102e93
 8102c04:	08102e93 	.word	0x08102e93
 8102c08:	08102e93 	.word	0x08102e93
 8102c0c:	08102e93 	.word	0x08102e93
 8102c10:	08102c7b 	.word	0x08102c7b
 8102c14:	08102e93 	.word	0x08102e93
 8102c18:	08102e93 	.word	0x08102e93
 8102c1c:	08102e93 	.word	0x08102e93
 8102c20:	08102e93 	.word	0x08102e93
 8102c24:	08102e93 	.word	0x08102e93
 8102c28:	08102e93 	.word	0x08102e93
 8102c2c:	08102e93 	.word	0x08102e93
 8102c30:	08102c81 	.word	0x08102c81
 8102c34:	08102e93 	.word	0x08102e93
 8102c38:	08102e93 	.word	0x08102e93
 8102c3c:	08102e93 	.word	0x08102e93
 8102c40:	08102e93 	.word	0x08102e93
 8102c44:	08102e93 	.word	0x08102e93
 8102c48:	08102e93 	.word	0x08102e93
 8102c4c:	08102e93 	.word	0x08102e93
 8102c50:	08102c87 	.word	0x08102c87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102c54:	4b94      	ldr	r3, [pc, #592]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	f003 0320 	and.w	r3, r3, #32
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d009      	beq.n	8102c74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102c60:	4b91      	ldr	r3, [pc, #580]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	08db      	lsrs	r3, r3, #3
 8102c66:	f003 0303 	and.w	r3, r3, #3
 8102c6a:	4a90      	ldr	r2, [pc, #576]	; (8102eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8102c70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102c72:	e111      	b.n	8102e98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102c74:	4b8d      	ldr	r3, [pc, #564]	; (8102eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c76:	61bb      	str	r3, [r7, #24]
    break;
 8102c78:	e10e      	b.n	8102e98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102c7a:	4b8d      	ldr	r3, [pc, #564]	; (8102eb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c7c:	61bb      	str	r3, [r7, #24]
    break;
 8102c7e:	e10b      	b.n	8102e98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102c80:	4b8c      	ldr	r3, [pc, #560]	; (8102eb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102c82:	61bb      	str	r3, [r7, #24]
    break;
 8102c84:	e108      	b.n	8102e98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c86:	4b88      	ldr	r3, [pc, #544]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c8a:	f003 0303 	and.w	r3, r3, #3
 8102c8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102c90:	4b85      	ldr	r3, [pc, #532]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c94:	091b      	lsrs	r3, r3, #4
 8102c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102c9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102c9c:	4b82      	ldr	r3, [pc, #520]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ca0:	f003 0301 	and.w	r3, r3, #1
 8102ca4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102ca6:	4b80      	ldr	r3, [pc, #512]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102caa:	08db      	lsrs	r3, r3, #3
 8102cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102cb0:	68fa      	ldr	r2, [r7, #12]
 8102cb2:	fb02 f303 	mul.w	r3, r2, r3
 8102cb6:	ee07 3a90 	vmov	s15, r3
 8102cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102cc2:	693b      	ldr	r3, [r7, #16]
 8102cc4:	2b00      	cmp	r3, #0
 8102cc6:	f000 80e1 	beq.w	8102e8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8102cca:	697b      	ldr	r3, [r7, #20]
 8102ccc:	2b02      	cmp	r3, #2
 8102cce:	f000 8083 	beq.w	8102dd8 <HAL_RCC_GetSysClockFreq+0x204>
 8102cd2:	697b      	ldr	r3, [r7, #20]
 8102cd4:	2b02      	cmp	r3, #2
 8102cd6:	f200 80a1 	bhi.w	8102e1c <HAL_RCC_GetSysClockFreq+0x248>
 8102cda:	697b      	ldr	r3, [r7, #20]
 8102cdc:	2b00      	cmp	r3, #0
 8102cde:	d003      	beq.n	8102ce8 <HAL_RCC_GetSysClockFreq+0x114>
 8102ce0:	697b      	ldr	r3, [r7, #20]
 8102ce2:	2b01      	cmp	r3, #1
 8102ce4:	d056      	beq.n	8102d94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102ce6:	e099      	b.n	8102e1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ce8:	4b6f      	ldr	r3, [pc, #444]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cea:	681b      	ldr	r3, [r3, #0]
 8102cec:	f003 0320 	and.w	r3, r3, #32
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d02d      	beq.n	8102d50 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102cf4:	4b6c      	ldr	r3, [pc, #432]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	08db      	lsrs	r3, r3, #3
 8102cfa:	f003 0303 	and.w	r3, r3, #3
 8102cfe:	4a6b      	ldr	r2, [pc, #428]	; (8102eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102d00:	fa22 f303 	lsr.w	r3, r2, r3
 8102d04:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	ee07 3a90 	vmov	s15, r3
 8102d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d10:	693b      	ldr	r3, [r7, #16]
 8102d12:	ee07 3a90 	vmov	s15, r3
 8102d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d1e:	4b62      	ldr	r3, [pc, #392]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d26:	ee07 3a90 	vmov	s15, r3
 8102d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102d4e:	e087      	b.n	8102e60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d50:	693b      	ldr	r3, [r7, #16]
 8102d52:	ee07 3a90 	vmov	s15, r3
 8102d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102ebc <HAL_RCC_GetSysClockFreq+0x2e8>
 8102d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d62:	4b51      	ldr	r3, [pc, #324]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d6a:	ee07 3a90 	vmov	s15, r3
 8102d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d92:	e065      	b.n	8102e60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d94:	693b      	ldr	r3, [r7, #16]
 8102d96:	ee07 3a90 	vmov	s15, r3
 8102d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102ec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102da6:	4b40      	ldr	r3, [pc, #256]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dae:	ee07 3a90 	vmov	s15, r3
 8102db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102dd6:	e043      	b.n	8102e60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102dd8:	693b      	ldr	r3, [r7, #16]
 8102dda:	ee07 3a90 	vmov	s15, r3
 8102dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102de2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102ec4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dea:	4b2f      	ldr	r3, [pc, #188]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102df2:	ee07 3a90 	vmov	s15, r3
 8102df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dfe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e1a:	e021      	b.n	8102e60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102e1c:	693b      	ldr	r3, [r7, #16]
 8102e1e:	ee07 3a90 	vmov	s15, r3
 8102e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102ec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e2e:	4b1e      	ldr	r3, [pc, #120]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e36:	ee07 3a90 	vmov	s15, r3
 8102e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102e60:	4b11      	ldr	r3, [pc, #68]	; (8102ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e64:	0a5b      	lsrs	r3, r3, #9
 8102e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102e6a:	3301      	adds	r3, #1
 8102e6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102e6e:	683b      	ldr	r3, [r7, #0]
 8102e70:	ee07 3a90 	vmov	s15, r3
 8102e74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e84:	ee17 3a90 	vmov	r3, s15
 8102e88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102e8a:	e005      	b.n	8102e98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102e8c:	2300      	movs	r3, #0
 8102e8e:	61bb      	str	r3, [r7, #24]
    break;
 8102e90:	e002      	b.n	8102e98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102e92:	4b07      	ldr	r3, [pc, #28]	; (8102eb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102e94:	61bb      	str	r3, [r7, #24]
    break;
 8102e96:	bf00      	nop
  }

  return sysclockfreq;
 8102e98:	69bb      	ldr	r3, [r7, #24]
}
 8102e9a:	4618      	mov	r0, r3
 8102e9c:	3724      	adds	r7, #36	; 0x24
 8102e9e:	46bd      	mov	sp, r7
 8102ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea4:	4770      	bx	lr
 8102ea6:	bf00      	nop
 8102ea8:	58024400 	.word	0x58024400
 8102eac:	03d09000 	.word	0x03d09000
 8102eb0:	003d0900 	.word	0x003d0900
 8102eb4:	007a1200 	.word	0x007a1200
 8102eb8:	46000000 	.word	0x46000000
 8102ebc:	4c742400 	.word	0x4c742400
 8102ec0:	4a742400 	.word	0x4a742400
 8102ec4:	4af42400 	.word	0x4af42400

08102ec8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102ec8:	b580      	push	{r7, lr}
 8102eca:	b086      	sub	sp, #24
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102ed0:	2300      	movs	r3, #0
 8102ed2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102ed4:	2300      	movs	r3, #0
 8102ed6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102ee0:	2b00      	cmp	r3, #0
 8102ee2:	d03f      	beq.n	8102f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102ee8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102eec:	d02a      	beq.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ef2:	d824      	bhi.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ef8:	d018      	beq.n	8102f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102efe:	d81e      	bhi.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f00:	2b00      	cmp	r3, #0
 8102f02:	d003      	beq.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102f08:	d007      	beq.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102f0a:	e018      	b.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f0c:	4bab      	ldr	r3, [pc, #684]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f10:	4aaa      	ldr	r2, [pc, #680]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f18:	e015      	b.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	3304      	adds	r3, #4
 8102f1e:	2102      	movs	r1, #2
 8102f20:	4618      	mov	r0, r3
 8102f22:	f000 ff11 	bl	8103d48 <RCCEx_PLL2_Config>
 8102f26:	4603      	mov	r3, r0
 8102f28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f2a:	e00c      	b.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	3324      	adds	r3, #36	; 0x24
 8102f30:	2102      	movs	r1, #2
 8102f32:	4618      	mov	r0, r3
 8102f34:	f000 ffba 	bl	8103eac <RCCEx_PLL3_Config>
 8102f38:	4603      	mov	r3, r0
 8102f3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f3c:	e003      	b.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f3e:	2301      	movs	r3, #1
 8102f40:	75fb      	strb	r3, [r7, #23]
      break;
 8102f42:	e000      	b.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f46:	7dfb      	ldrb	r3, [r7, #23]
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d109      	bne.n	8102f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102f4c:	4b9b      	ldr	r3, [pc, #620]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102f58:	4998      	ldr	r1, [pc, #608]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f5a:	4313      	orrs	r3, r2
 8102f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8102f5e:	e001      	b.n	8102f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f60:	7dfb      	ldrb	r3, [r7, #23]
 8102f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	681b      	ldr	r3, [r3, #0]
 8102f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102f6c:	2b00      	cmp	r3, #0
 8102f6e:	d03d      	beq.n	8102fec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f74:	2b04      	cmp	r3, #4
 8102f76:	d826      	bhi.n	8102fc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102f78:	a201      	add	r2, pc, #4	; (adr r2, 8102f80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f7e:	bf00      	nop
 8102f80:	08102f95 	.word	0x08102f95
 8102f84:	08102fa3 	.word	0x08102fa3
 8102f88:	08102fb5 	.word	0x08102fb5
 8102f8c:	08102fcd 	.word	0x08102fcd
 8102f90:	08102fcd 	.word	0x08102fcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f94:	4b89      	ldr	r3, [pc, #548]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f98:	4a88      	ldr	r2, [pc, #544]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fa0:	e015      	b.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	3304      	adds	r3, #4
 8102fa6:	2100      	movs	r1, #0
 8102fa8:	4618      	mov	r0, r3
 8102faa:	f000 fecd 	bl	8103d48 <RCCEx_PLL2_Config>
 8102fae:	4603      	mov	r3, r0
 8102fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fb2:	e00c      	b.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	3324      	adds	r3, #36	; 0x24
 8102fb8:	2100      	movs	r1, #0
 8102fba:	4618      	mov	r0, r3
 8102fbc:	f000 ff76 	bl	8103eac <RCCEx_PLL3_Config>
 8102fc0:	4603      	mov	r3, r0
 8102fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fc4:	e003      	b.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fc6:	2301      	movs	r3, #1
 8102fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8102fca:	e000      	b.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fce:	7dfb      	ldrb	r3, [r7, #23]
 8102fd0:	2b00      	cmp	r3, #0
 8102fd2:	d109      	bne.n	8102fe8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102fd4:	4b79      	ldr	r3, [pc, #484]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fd8:	f023 0207 	bic.w	r2, r3, #7
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fe0:	4976      	ldr	r1, [pc, #472]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fe2:	4313      	orrs	r3, r2
 8102fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8102fe6:	e001      	b.n	8102fec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fe8:	7dfb      	ldrb	r3, [r7, #23]
 8102fea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102ff4:	2b00      	cmp	r3, #0
 8102ff6:	d042      	beq.n	810307e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103000:	d02b      	beq.n	810305a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103006:	d825      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103008:	2bc0      	cmp	r3, #192	; 0xc0
 810300a:	d028      	beq.n	810305e <HAL_RCCEx_PeriphCLKConfig+0x196>
 810300c:	2bc0      	cmp	r3, #192	; 0xc0
 810300e:	d821      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103010:	2b80      	cmp	r3, #128	; 0x80
 8103012:	d016      	beq.n	8103042 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103014:	2b80      	cmp	r3, #128	; 0x80
 8103016:	d81d      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103018:	2b00      	cmp	r3, #0
 810301a:	d002      	beq.n	8103022 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810301c:	2b40      	cmp	r3, #64	; 0x40
 810301e:	d007      	beq.n	8103030 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103020:	e018      	b.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103022:	4b66      	ldr	r3, [pc, #408]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103026:	4a65      	ldr	r2, [pc, #404]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810302c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810302e:	e017      	b.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	3304      	adds	r3, #4
 8103034:	2100      	movs	r1, #0
 8103036:	4618      	mov	r0, r3
 8103038:	f000 fe86 	bl	8103d48 <RCCEx_PLL2_Config>
 810303c:	4603      	mov	r3, r0
 810303e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103040:	e00e      	b.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	3324      	adds	r3, #36	; 0x24
 8103046:	2100      	movs	r1, #0
 8103048:	4618      	mov	r0, r3
 810304a:	f000 ff2f 	bl	8103eac <RCCEx_PLL3_Config>
 810304e:	4603      	mov	r3, r0
 8103050:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103052:	e005      	b.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103054:	2301      	movs	r3, #1
 8103056:	75fb      	strb	r3, [r7, #23]
      break;
 8103058:	e002      	b.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810305a:	bf00      	nop
 810305c:	e000      	b.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810305e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103060:	7dfb      	ldrb	r3, [r7, #23]
 8103062:	2b00      	cmp	r3, #0
 8103064:	d109      	bne.n	810307a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103066:	4b55      	ldr	r3, [pc, #340]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810306a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103072:	4952      	ldr	r1, [pc, #328]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103074:	4313      	orrs	r3, r2
 8103076:	650b      	str	r3, [r1, #80]	; 0x50
 8103078:	e001      	b.n	810307e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810307a:	7dfb      	ldrb	r3, [r7, #23]
 810307c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103086:	2b00      	cmp	r3, #0
 8103088:	d049      	beq.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103094:	d030      	beq.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810309a:	d82a      	bhi.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810309c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81030a0:	d02c      	beq.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 81030a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81030a6:	d824      	bhi.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81030a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81030ac:	d018      	beq.n	81030e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81030ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81030b2:	d81e      	bhi.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	d003      	beq.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81030b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81030bc:	d007      	beq.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 81030be:	e018      	b.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030c0:	4b3e      	ldr	r3, [pc, #248]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030c4:	4a3d      	ldr	r2, [pc, #244]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81030cc:	e017      	b.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	3304      	adds	r3, #4
 81030d2:	2100      	movs	r1, #0
 81030d4:	4618      	mov	r0, r3
 81030d6:	f000 fe37 	bl	8103d48 <RCCEx_PLL2_Config>
 81030da:	4603      	mov	r3, r0
 81030dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81030de:	e00e      	b.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	3324      	adds	r3, #36	; 0x24
 81030e4:	2100      	movs	r1, #0
 81030e6:	4618      	mov	r0, r3
 81030e8:	f000 fee0 	bl	8103eac <RCCEx_PLL3_Config>
 81030ec:	4603      	mov	r3, r0
 81030ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81030f0:	e005      	b.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81030f2:	2301      	movs	r3, #1
 81030f4:	75fb      	strb	r3, [r7, #23]
      break;
 81030f6:	e002      	b.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81030f8:	bf00      	nop
 81030fa:	e000      	b.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81030fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030fe:	7dfb      	ldrb	r3, [r7, #23]
 8103100:	2b00      	cmp	r3, #0
 8103102:	d10a      	bne.n	810311a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103104:	4b2d      	ldr	r3, [pc, #180]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103108:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103112:	492a      	ldr	r1, [pc, #168]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103114:	4313      	orrs	r3, r2
 8103116:	658b      	str	r3, [r1, #88]	; 0x58
 8103118:	e001      	b.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810311a:	7dfb      	ldrb	r3, [r7, #23]
 810311c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103126:	2b00      	cmp	r3, #0
 8103128:	d04c      	beq.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103134:	d030      	beq.n	8103198 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810313a:	d82a      	bhi.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810313c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103140:	d02c      	beq.n	810319c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103142:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103146:	d824      	bhi.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810314c:	d018      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810314e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103152:	d81e      	bhi.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103154:	2b00      	cmp	r3, #0
 8103156:	d003      	beq.n	8103160 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810315c:	d007      	beq.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810315e:	e018      	b.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103160:	4b16      	ldr	r3, [pc, #88]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103164:	4a15      	ldr	r2, [pc, #84]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810316a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810316c:	e017      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	3304      	adds	r3, #4
 8103172:	2100      	movs	r1, #0
 8103174:	4618      	mov	r0, r3
 8103176:	f000 fde7 	bl	8103d48 <RCCEx_PLL2_Config>
 810317a:	4603      	mov	r3, r0
 810317c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810317e:	e00e      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	3324      	adds	r3, #36	; 0x24
 8103184:	2100      	movs	r1, #0
 8103186:	4618      	mov	r0, r3
 8103188:	f000 fe90 	bl	8103eac <RCCEx_PLL3_Config>
 810318c:	4603      	mov	r3, r0
 810318e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103190:	e005      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103192:	2301      	movs	r3, #1
 8103194:	75fb      	strb	r3, [r7, #23]
      break;
 8103196:	e002      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103198:	bf00      	nop
 810319a:	e000      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810319c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810319e:	7dfb      	ldrb	r3, [r7, #23]
 81031a0:	2b00      	cmp	r3, #0
 81031a2:	d10d      	bne.n	81031c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81031a4:	4b05      	ldr	r3, [pc, #20]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81031b2:	4902      	ldr	r1, [pc, #8]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031b4:	4313      	orrs	r3, r2
 81031b6:	658b      	str	r3, [r1, #88]	; 0x58
 81031b8:	e004      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81031ba:	bf00      	nop
 81031bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031c0:	7dfb      	ldrb	r3, [r7, #23]
 81031c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81031cc:	2b00      	cmp	r3, #0
 81031ce:	d032      	beq.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81031d4:	2b30      	cmp	r3, #48	; 0x30
 81031d6:	d01c      	beq.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81031d8:	2b30      	cmp	r3, #48	; 0x30
 81031da:	d817      	bhi.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x344>
 81031dc:	2b20      	cmp	r3, #32
 81031de:	d00c      	beq.n	81031fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 81031e0:	2b20      	cmp	r3, #32
 81031e2:	d813      	bhi.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x344>
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	d016      	beq.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81031e8:	2b10      	cmp	r3, #16
 81031ea:	d10f      	bne.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031ec:	4baf      	ldr	r3, [pc, #700]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031f0:	4aae      	ldr	r2, [pc, #696]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81031f8:	e00e      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	3304      	adds	r3, #4
 81031fe:	2102      	movs	r1, #2
 8103200:	4618      	mov	r0, r3
 8103202:	f000 fda1 	bl	8103d48 <RCCEx_PLL2_Config>
 8103206:	4603      	mov	r3, r0
 8103208:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810320a:	e005      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810320c:	2301      	movs	r3, #1
 810320e:	75fb      	strb	r3, [r7, #23]
      break;
 8103210:	e002      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103212:	bf00      	nop
 8103214:	e000      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103218:	7dfb      	ldrb	r3, [r7, #23]
 810321a:	2b00      	cmp	r3, #0
 810321c:	d109      	bne.n	8103232 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810321e:	4ba3      	ldr	r3, [pc, #652]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103222:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810322a:	49a0      	ldr	r1, [pc, #640]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810322c:	4313      	orrs	r3, r2
 810322e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103230:	e001      	b.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103232:	7dfb      	ldrb	r3, [r7, #23]
 8103234:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810323e:	2b00      	cmp	r3, #0
 8103240:	d047      	beq.n	81032d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810324a:	d030      	beq.n	81032ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810324c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103250:	d82a      	bhi.n	81032a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103252:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103256:	d02c      	beq.n	81032b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8103258:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810325c:	d824      	bhi.n	81032a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103262:	d018      	beq.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103268:	d81e      	bhi.n	81032a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810326a:	2b00      	cmp	r3, #0
 810326c:	d003      	beq.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103272:	d007      	beq.n	8103284 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103274:	e018      	b.n	81032a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103276:	4b8d      	ldr	r3, [pc, #564]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810327a:	4a8c      	ldr	r2, [pc, #560]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103282:	e017      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	3304      	adds	r3, #4
 8103288:	2100      	movs	r1, #0
 810328a:	4618      	mov	r0, r3
 810328c:	f000 fd5c 	bl	8103d48 <RCCEx_PLL2_Config>
 8103290:	4603      	mov	r3, r0
 8103292:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103294:	e00e      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	3324      	adds	r3, #36	; 0x24
 810329a:	2100      	movs	r1, #0
 810329c:	4618      	mov	r0, r3
 810329e:	f000 fe05 	bl	8103eac <RCCEx_PLL3_Config>
 81032a2:	4603      	mov	r3, r0
 81032a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81032a6:	e005      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81032a8:	2301      	movs	r3, #1
 81032aa:	75fb      	strb	r3, [r7, #23]
      break;
 81032ac:	e002      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81032ae:	bf00      	nop
 81032b0:	e000      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81032b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032b4:	7dfb      	ldrb	r3, [r7, #23]
 81032b6:	2b00      	cmp	r3, #0
 81032b8:	d109      	bne.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81032ba:	4b7c      	ldr	r3, [pc, #496]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032c6:	4979      	ldr	r1, [pc, #484]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032c8:	4313      	orrs	r3, r2
 81032ca:	650b      	str	r3, [r1, #80]	; 0x50
 81032cc:	e001      	b.n	81032d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ce:	7dfb      	ldrb	r3, [r7, #23]
 81032d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81032da:	2b00      	cmp	r3, #0
 81032dc:	d049      	beq.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81032e6:	d02e      	beq.n	8103346 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81032ec:	d828      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81032ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81032f2:	d02a      	beq.n	810334a <HAL_RCCEx_PeriphCLKConfig+0x482>
 81032f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81032f8:	d822      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81032fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032fe:	d026      	beq.n	810334e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103300:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103304:	d81c      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810330a:	d010      	beq.n	810332e <HAL_RCCEx_PeriphCLKConfig+0x466>
 810330c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103310:	d816      	bhi.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103312:	2b00      	cmp	r3, #0
 8103314:	d01d      	beq.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8103316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810331a:	d111      	bne.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	3304      	adds	r3, #4
 8103320:	2101      	movs	r1, #1
 8103322:	4618      	mov	r0, r3
 8103324:	f000 fd10 	bl	8103d48 <RCCEx_PLL2_Config>
 8103328:	4603      	mov	r3, r0
 810332a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810332c:	e012      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	3324      	adds	r3, #36	; 0x24
 8103332:	2101      	movs	r1, #1
 8103334:	4618      	mov	r0, r3
 8103336:	f000 fdb9 	bl	8103eac <RCCEx_PLL3_Config>
 810333a:	4603      	mov	r3, r0
 810333c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810333e:	e009      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103340:	2301      	movs	r3, #1
 8103342:	75fb      	strb	r3, [r7, #23]
      break;
 8103344:	e006      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103346:	bf00      	nop
 8103348:	e004      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810334a:	bf00      	nop
 810334c:	e002      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810334e:	bf00      	nop
 8103350:	e000      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103354:	7dfb      	ldrb	r3, [r7, #23]
 8103356:	2b00      	cmp	r3, #0
 8103358:	d109      	bne.n	810336e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810335a:	4b54      	ldr	r3, [pc, #336]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810335e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103366:	4951      	ldr	r1, [pc, #324]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103368:	4313      	orrs	r3, r2
 810336a:	650b      	str	r3, [r1, #80]	; 0x50
 810336c:	e001      	b.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810336e:	7dfb      	ldrb	r3, [r7, #23]
 8103370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810337a:	2b00      	cmp	r3, #0
 810337c:	d04b      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103388:	d02e      	beq.n	81033e8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 810338a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810338e:	d828      	bhi.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103394:	d02a      	beq.n	81033ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810339a:	d822      	bhi.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810339c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81033a0:	d026      	beq.n	81033f0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81033a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81033a6:	d81c      	bhi.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81033a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033ac:	d010      	beq.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 81033ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033b2:	d816      	bhi.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81033b4:	2b00      	cmp	r3, #0
 81033b6:	d01d      	beq.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81033b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81033bc:	d111      	bne.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	3304      	adds	r3, #4
 81033c2:	2101      	movs	r1, #1
 81033c4:	4618      	mov	r0, r3
 81033c6:	f000 fcbf 	bl	8103d48 <RCCEx_PLL2_Config>
 81033ca:	4603      	mov	r3, r0
 81033cc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81033ce:	e012      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	3324      	adds	r3, #36	; 0x24
 81033d4:	2101      	movs	r1, #1
 81033d6:	4618      	mov	r0, r3
 81033d8:	f000 fd68 	bl	8103eac <RCCEx_PLL3_Config>
 81033dc:	4603      	mov	r3, r0
 81033de:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81033e0:	e009      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81033e2:	2301      	movs	r3, #1
 81033e4:	75fb      	strb	r3, [r7, #23]
      break;
 81033e6:	e006      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033e8:	bf00      	nop
 81033ea:	e004      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033ec:	bf00      	nop
 81033ee:	e002      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033f0:	bf00      	nop
 81033f2:	e000      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81033f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033f6:	7dfb      	ldrb	r3, [r7, #23]
 81033f8:	2b00      	cmp	r3, #0
 81033fa:	d10a      	bne.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81033fc:	4b2b      	ldr	r3, [pc, #172]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103400:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810340a:	4928      	ldr	r1, [pc, #160]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810340c:	4313      	orrs	r3, r2
 810340e:	658b      	str	r3, [r1, #88]	; 0x58
 8103410:	e001      	b.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103412:	7dfb      	ldrb	r3, [r7, #23]
 8103414:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810341e:	2b00      	cmp	r3, #0
 8103420:	d02f      	beq.n	8103482 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810342a:	d00e      	beq.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x582>
 810342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103430:	d814      	bhi.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8103432:	2b00      	cmp	r3, #0
 8103434:	d015      	beq.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810343a:	d10f      	bne.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810343c:	4b1b      	ldr	r3, [pc, #108]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103440:	4a1a      	ldr	r2, [pc, #104]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103448:	e00c      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	3304      	adds	r3, #4
 810344e:	2101      	movs	r1, #1
 8103450:	4618      	mov	r0, r3
 8103452:	f000 fc79 	bl	8103d48 <RCCEx_PLL2_Config>
 8103456:	4603      	mov	r3, r0
 8103458:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810345a:	e003      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810345c:	2301      	movs	r3, #1
 810345e:	75fb      	strb	r3, [r7, #23]
      break;
 8103460:	e000      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103464:	7dfb      	ldrb	r3, [r7, #23]
 8103466:	2b00      	cmp	r3, #0
 8103468:	d109      	bne.n	810347e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810346a:	4b10      	ldr	r3, [pc, #64]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810346e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103476:	490d      	ldr	r1, [pc, #52]	; (81034ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103478:	4313      	orrs	r3, r2
 810347a:	650b      	str	r3, [r1, #80]	; 0x50
 810347c:	e001      	b.n	8103482 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810347e:	7dfb      	ldrb	r3, [r7, #23]
 8103480:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810348a:	2b00      	cmp	r3, #0
 810348c:	d033      	beq.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103492:	2b03      	cmp	r3, #3
 8103494:	d81c      	bhi.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103496:	a201      	add	r2, pc, #4	; (adr r2, 810349c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810349c:	081034d7 	.word	0x081034d7
 81034a0:	081034b1 	.word	0x081034b1
 81034a4:	081034bf 	.word	0x081034bf
 81034a8:	081034d7 	.word	0x081034d7
 81034ac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034b0:	4bb9      	ldr	r3, [pc, #740]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034b4:	4ab8      	ldr	r2, [pc, #736]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81034bc:	e00c      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	3304      	adds	r3, #4
 81034c2:	2102      	movs	r1, #2
 81034c4:	4618      	mov	r0, r3
 81034c6:	f000 fc3f 	bl	8103d48 <RCCEx_PLL2_Config>
 81034ca:	4603      	mov	r3, r0
 81034cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81034ce:	e003      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81034d0:	2301      	movs	r3, #1
 81034d2:	75fb      	strb	r3, [r7, #23]
      break;
 81034d4:	e000      	b.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81034d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034d8:	7dfb      	ldrb	r3, [r7, #23]
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d109      	bne.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81034de:	4bae      	ldr	r3, [pc, #696]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81034e2:	f023 0203 	bic.w	r2, r3, #3
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034ea:	49ab      	ldr	r1, [pc, #684]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034ec:	4313      	orrs	r3, r2
 81034ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 81034f0:	e001      	b.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034f2:	7dfb      	ldrb	r3, [r7, #23]
 81034f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81034fe:	2b00      	cmp	r3, #0
 8103500:	f000 8088 	beq.w	8103614 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103504:	4ba5      	ldr	r3, [pc, #660]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	4aa4      	ldr	r2, [pc, #656]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810350e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103510:	f7fe f9c2 	bl	8101898 <HAL_GetTick>
 8103514:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103516:	e009      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103518:	f7fe f9be 	bl	8101898 <HAL_GetTick>
 810351c:	4602      	mov	r2, r0
 810351e:	693b      	ldr	r3, [r7, #16]
 8103520:	1ad3      	subs	r3, r2, r3
 8103522:	2b64      	cmp	r3, #100	; 0x64
 8103524:	d902      	bls.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103526:	2303      	movs	r3, #3
 8103528:	75fb      	strb	r3, [r7, #23]
        break;
 810352a:	e005      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810352c:	4b9b      	ldr	r3, [pc, #620]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103534:	2b00      	cmp	r3, #0
 8103536:	d0ef      	beq.n	8103518 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103538:	7dfb      	ldrb	r3, [r7, #23]
 810353a:	2b00      	cmp	r3, #0
 810353c:	d168      	bne.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810353e:	4b96      	ldr	r3, [pc, #600]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103548:	4053      	eors	r3, r2
 810354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810354e:	2b00      	cmp	r3, #0
 8103550:	d013      	beq.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103552:	4b91      	ldr	r3, [pc, #580]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810355a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810355c:	4b8e      	ldr	r3, [pc, #568]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103560:	4a8d      	ldr	r2, [pc, #564]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103566:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103568:	4b8b      	ldr	r3, [pc, #556]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810356c:	4a8a      	ldr	r2, [pc, #552]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103572:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103574:	4a88      	ldr	r2, [pc, #544]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103576:	68fb      	ldr	r3, [r7, #12]
 8103578:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103584:	d115      	bne.n	81035b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103586:	f7fe f987 	bl	8101898 <HAL_GetTick>
 810358a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810358c:	e00b      	b.n	81035a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810358e:	f7fe f983 	bl	8101898 <HAL_GetTick>
 8103592:	4602      	mov	r2, r0
 8103594:	693b      	ldr	r3, [r7, #16]
 8103596:	1ad3      	subs	r3, r2, r3
 8103598:	f241 3288 	movw	r2, #5000	; 0x1388
 810359c:	4293      	cmp	r3, r2
 810359e:	d902      	bls.n	81035a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81035a0:	2303      	movs	r3, #3
 81035a2:	75fb      	strb	r3, [r7, #23]
            break;
 81035a4:	e005      	b.n	81035b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81035a6:	4b7c      	ldr	r3, [pc, #496]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035aa:	f003 0302 	and.w	r3, r3, #2
 81035ae:	2b00      	cmp	r3, #0
 81035b0:	d0ed      	beq.n	810358e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81035b2:	7dfb      	ldrb	r3, [r7, #23]
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	d128      	bne.n	810360a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81035c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81035c6:	d10f      	bne.n	81035e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81035c8:	4b73      	ldr	r3, [pc, #460]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ca:	691b      	ldr	r3, [r3, #16]
 81035cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035d6:	091b      	lsrs	r3, r3, #4
 81035d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81035dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81035e0:	496d      	ldr	r1, [pc, #436]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035e2:	4313      	orrs	r3, r2
 81035e4:	610b      	str	r3, [r1, #16]
 81035e6:	e005      	b.n	81035f4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81035e8:	4b6b      	ldr	r3, [pc, #428]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ea:	691b      	ldr	r3, [r3, #16]
 81035ec:	4a6a      	ldr	r2, [pc, #424]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81035f2:	6113      	str	r3, [r2, #16]
 81035f4:	4b68      	ldr	r3, [pc, #416]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103602:	4965      	ldr	r1, [pc, #404]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103604:	4313      	orrs	r3, r2
 8103606:	670b      	str	r3, [r1, #112]	; 0x70
 8103608:	e004      	b.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810360a:	7dfb      	ldrb	r3, [r7, #23]
 810360c:	75bb      	strb	r3, [r7, #22]
 810360e:	e001      	b.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103610:	7dfb      	ldrb	r3, [r7, #23]
 8103612:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	f003 0301 	and.w	r3, r3, #1
 810361c:	2b00      	cmp	r3, #0
 810361e:	d07e      	beq.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103624:	2b28      	cmp	r3, #40	; 0x28
 8103626:	d867      	bhi.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103628:	a201      	add	r2, pc, #4	; (adr r2, 8103630 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810362e:	bf00      	nop
 8103630:	081036ff 	.word	0x081036ff
 8103634:	081036f9 	.word	0x081036f9
 8103638:	081036f9 	.word	0x081036f9
 810363c:	081036f9 	.word	0x081036f9
 8103640:	081036f9 	.word	0x081036f9
 8103644:	081036f9 	.word	0x081036f9
 8103648:	081036f9 	.word	0x081036f9
 810364c:	081036f9 	.word	0x081036f9
 8103650:	081036d5 	.word	0x081036d5
 8103654:	081036f9 	.word	0x081036f9
 8103658:	081036f9 	.word	0x081036f9
 810365c:	081036f9 	.word	0x081036f9
 8103660:	081036f9 	.word	0x081036f9
 8103664:	081036f9 	.word	0x081036f9
 8103668:	081036f9 	.word	0x081036f9
 810366c:	081036f9 	.word	0x081036f9
 8103670:	081036e7 	.word	0x081036e7
 8103674:	081036f9 	.word	0x081036f9
 8103678:	081036f9 	.word	0x081036f9
 810367c:	081036f9 	.word	0x081036f9
 8103680:	081036f9 	.word	0x081036f9
 8103684:	081036f9 	.word	0x081036f9
 8103688:	081036f9 	.word	0x081036f9
 810368c:	081036f9 	.word	0x081036f9
 8103690:	081036ff 	.word	0x081036ff
 8103694:	081036f9 	.word	0x081036f9
 8103698:	081036f9 	.word	0x081036f9
 810369c:	081036f9 	.word	0x081036f9
 81036a0:	081036f9 	.word	0x081036f9
 81036a4:	081036f9 	.word	0x081036f9
 81036a8:	081036f9 	.word	0x081036f9
 81036ac:	081036f9 	.word	0x081036f9
 81036b0:	081036ff 	.word	0x081036ff
 81036b4:	081036f9 	.word	0x081036f9
 81036b8:	081036f9 	.word	0x081036f9
 81036bc:	081036f9 	.word	0x081036f9
 81036c0:	081036f9 	.word	0x081036f9
 81036c4:	081036f9 	.word	0x081036f9
 81036c8:	081036f9 	.word	0x081036f9
 81036cc:	081036f9 	.word	0x081036f9
 81036d0:	081036ff 	.word	0x081036ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	3304      	adds	r3, #4
 81036d8:	2101      	movs	r1, #1
 81036da:	4618      	mov	r0, r3
 81036dc:	f000 fb34 	bl	8103d48 <RCCEx_PLL2_Config>
 81036e0:	4603      	mov	r3, r0
 81036e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81036e4:	e00c      	b.n	8103700 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	3324      	adds	r3, #36	; 0x24
 81036ea:	2101      	movs	r1, #1
 81036ec:	4618      	mov	r0, r3
 81036ee:	f000 fbdd 	bl	8103eac <RCCEx_PLL3_Config>
 81036f2:	4603      	mov	r3, r0
 81036f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81036f6:	e003      	b.n	8103700 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036f8:	2301      	movs	r3, #1
 81036fa:	75fb      	strb	r3, [r7, #23]
      break;
 81036fc:	e000      	b.n	8103700 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81036fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103700:	7dfb      	ldrb	r3, [r7, #23]
 8103702:	2b00      	cmp	r3, #0
 8103704:	d109      	bne.n	810371a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103706:	4b24      	ldr	r3, [pc, #144]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810370a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103712:	4921      	ldr	r1, [pc, #132]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103714:	4313      	orrs	r3, r2
 8103716:	654b      	str	r3, [r1, #84]	; 0x54
 8103718:	e001      	b.n	810371e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810371a:	7dfb      	ldrb	r3, [r7, #23]
 810371c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	f003 0302 	and.w	r3, r3, #2
 8103726:	2b00      	cmp	r3, #0
 8103728:	d03c      	beq.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810372e:	2b05      	cmp	r3, #5
 8103730:	d820      	bhi.n	8103774 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103732:	a201      	add	r2, pc, #4	; (adr r2, 8103738 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103738:	0810377b 	.word	0x0810377b
 810373c:	08103751 	.word	0x08103751
 8103740:	08103763 	.word	0x08103763
 8103744:	0810377b 	.word	0x0810377b
 8103748:	0810377b 	.word	0x0810377b
 810374c:	0810377b 	.word	0x0810377b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	3304      	adds	r3, #4
 8103754:	2101      	movs	r1, #1
 8103756:	4618      	mov	r0, r3
 8103758:	f000 faf6 	bl	8103d48 <RCCEx_PLL2_Config>
 810375c:	4603      	mov	r3, r0
 810375e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103760:	e00c      	b.n	810377c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	3324      	adds	r3, #36	; 0x24
 8103766:	2101      	movs	r1, #1
 8103768:	4618      	mov	r0, r3
 810376a:	f000 fb9f 	bl	8103eac <RCCEx_PLL3_Config>
 810376e:	4603      	mov	r3, r0
 8103770:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103772:	e003      	b.n	810377c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103774:	2301      	movs	r3, #1
 8103776:	75fb      	strb	r3, [r7, #23]
      break;
 8103778:	e000      	b.n	810377c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810377a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810377c:	7dfb      	ldrb	r3, [r7, #23]
 810377e:	2b00      	cmp	r3, #0
 8103780:	d10e      	bne.n	81037a0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103782:	4b05      	ldr	r3, [pc, #20]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103786:	f023 0207 	bic.w	r2, r3, #7
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810378e:	4902      	ldr	r1, [pc, #8]	; (8103798 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103790:	4313      	orrs	r3, r2
 8103792:	654b      	str	r3, [r1, #84]	; 0x54
 8103794:	e006      	b.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103796:	bf00      	nop
 8103798:	58024400 	.word	0x58024400
 810379c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037a0:	7dfb      	ldrb	r3, [r7, #23]
 81037a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	f003 0304 	and.w	r3, r3, #4
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d039      	beq.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81037b6:	2b05      	cmp	r3, #5
 81037b8:	d820      	bhi.n	81037fc <HAL_RCCEx_PeriphCLKConfig+0x934>
 81037ba:	a201      	add	r2, pc, #4	; (adr r2, 81037c0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037c0:	08103803 	.word	0x08103803
 81037c4:	081037d9 	.word	0x081037d9
 81037c8:	081037eb 	.word	0x081037eb
 81037cc:	08103803 	.word	0x08103803
 81037d0:	08103803 	.word	0x08103803
 81037d4:	08103803 	.word	0x08103803
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	3304      	adds	r3, #4
 81037dc:	2101      	movs	r1, #1
 81037de:	4618      	mov	r0, r3
 81037e0:	f000 fab2 	bl	8103d48 <RCCEx_PLL2_Config>
 81037e4:	4603      	mov	r3, r0
 81037e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81037e8:	e00c      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	3324      	adds	r3, #36	; 0x24
 81037ee:	2101      	movs	r1, #1
 81037f0:	4618      	mov	r0, r3
 81037f2:	f000 fb5b 	bl	8103eac <RCCEx_PLL3_Config>
 81037f6:	4603      	mov	r3, r0
 81037f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81037fa:	e003      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037fc:	2301      	movs	r3, #1
 81037fe:	75fb      	strb	r3, [r7, #23]
      break;
 8103800:	e000      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103804:	7dfb      	ldrb	r3, [r7, #23]
 8103806:	2b00      	cmp	r3, #0
 8103808:	d10a      	bne.n	8103820 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810380a:	4bb7      	ldr	r3, [pc, #732]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810380e:	f023 0207 	bic.w	r2, r3, #7
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103818:	49b3      	ldr	r1, [pc, #716]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810381a:	4313      	orrs	r3, r2
 810381c:	658b      	str	r3, [r1, #88]	; 0x58
 810381e:	e001      	b.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103820:	7dfb      	ldrb	r3, [r7, #23]
 8103822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	f003 0320 	and.w	r3, r3, #32
 810382c:	2b00      	cmp	r3, #0
 810382e:	d04b      	beq.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810383a:	d02e      	beq.n	810389a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103840:	d828      	bhi.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103846:	d02a      	beq.n	810389e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810384c:	d822      	bhi.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810384e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103852:	d026      	beq.n	81038a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103858:	d81c      	bhi.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810385a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810385e:	d010      	beq.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103864:	d816      	bhi.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103866:	2b00      	cmp	r3, #0
 8103868:	d01d      	beq.n	81038a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810386a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810386e:	d111      	bne.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	3304      	adds	r3, #4
 8103874:	2100      	movs	r1, #0
 8103876:	4618      	mov	r0, r3
 8103878:	f000 fa66 	bl	8103d48 <RCCEx_PLL2_Config>
 810387c:	4603      	mov	r3, r0
 810387e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103880:	e012      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	3324      	adds	r3, #36	; 0x24
 8103886:	2102      	movs	r1, #2
 8103888:	4618      	mov	r0, r3
 810388a:	f000 fb0f 	bl	8103eac <RCCEx_PLL3_Config>
 810388e:	4603      	mov	r3, r0
 8103890:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103892:	e009      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103894:	2301      	movs	r3, #1
 8103896:	75fb      	strb	r3, [r7, #23]
      break;
 8103898:	e006      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810389a:	bf00      	nop
 810389c:	e004      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810389e:	bf00      	nop
 81038a0:	e002      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81038a2:	bf00      	nop
 81038a4:	e000      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81038a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038a8:	7dfb      	ldrb	r3, [r7, #23]
 81038aa:	2b00      	cmp	r3, #0
 81038ac:	d10a      	bne.n	81038c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81038ae:	4b8e      	ldr	r3, [pc, #568]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81038bc:	498a      	ldr	r1, [pc, #552]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81038be:	4313      	orrs	r3, r2
 81038c0:	654b      	str	r3, [r1, #84]	; 0x54
 81038c2:	e001      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038c4:	7dfb      	ldrb	r3, [r7, #23]
 81038c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81038d0:	2b00      	cmp	r3, #0
 81038d2:	d04b      	beq.n	810396c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81038da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81038de:	d02e      	beq.n	810393e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81038e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81038e4:	d828      	bhi.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81038ea:	d02a      	beq.n	8103942 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81038f0:	d822      	bhi.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81038f6:	d026      	beq.n	8103946 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81038f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81038fc:	d81c      	bhi.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81038fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103902:	d010      	beq.n	8103926 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103908:	d816      	bhi.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810390a:	2b00      	cmp	r3, #0
 810390c:	d01d      	beq.n	810394a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103912:	d111      	bne.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	3304      	adds	r3, #4
 8103918:	2100      	movs	r1, #0
 810391a:	4618      	mov	r0, r3
 810391c:	f000 fa14 	bl	8103d48 <RCCEx_PLL2_Config>
 8103920:	4603      	mov	r3, r0
 8103922:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103924:	e012      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	3324      	adds	r3, #36	; 0x24
 810392a:	2102      	movs	r1, #2
 810392c:	4618      	mov	r0, r3
 810392e:	f000 fabd 	bl	8103eac <RCCEx_PLL3_Config>
 8103932:	4603      	mov	r3, r0
 8103934:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103936:	e009      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103938:	2301      	movs	r3, #1
 810393a:	75fb      	strb	r3, [r7, #23]
      break;
 810393c:	e006      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810393e:	bf00      	nop
 8103940:	e004      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103942:	bf00      	nop
 8103944:	e002      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103946:	bf00      	nop
 8103948:	e000      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810394c:	7dfb      	ldrb	r3, [r7, #23]
 810394e:	2b00      	cmp	r3, #0
 8103950:	d10a      	bne.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103952:	4b65      	ldr	r3, [pc, #404]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103956:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103960:	4961      	ldr	r1, [pc, #388]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103962:	4313      	orrs	r3, r2
 8103964:	658b      	str	r3, [r1, #88]	; 0x58
 8103966:	e001      	b.n	810396c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103968:	7dfb      	ldrb	r3, [r7, #23]
 810396a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103974:	2b00      	cmp	r3, #0
 8103976:	d04b      	beq.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810397e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103982:	d02e      	beq.n	81039e2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103984:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103988:	d828      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810398e:	d02a      	beq.n	81039e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103994:	d822      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103996:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810399a:	d026      	beq.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810399c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81039a0:	d81c      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81039a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81039a6:	d010      	beq.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81039a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81039ac:	d816      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d01d      	beq.n	81039ee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81039b6:	d111      	bne.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	3304      	adds	r3, #4
 81039bc:	2100      	movs	r1, #0
 81039be:	4618      	mov	r0, r3
 81039c0:	f000 f9c2 	bl	8103d48 <RCCEx_PLL2_Config>
 81039c4:	4603      	mov	r3, r0
 81039c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81039c8:	e012      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	3324      	adds	r3, #36	; 0x24
 81039ce:	2102      	movs	r1, #2
 81039d0:	4618      	mov	r0, r3
 81039d2:	f000 fa6b 	bl	8103eac <RCCEx_PLL3_Config>
 81039d6:	4603      	mov	r3, r0
 81039d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81039da:	e009      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039dc:	2301      	movs	r3, #1
 81039de:	75fb      	strb	r3, [r7, #23]
      break;
 81039e0:	e006      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039e2:	bf00      	nop
 81039e4:	e004      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039e6:	bf00      	nop
 81039e8:	e002      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039ea:	bf00      	nop
 81039ec:	e000      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81039ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039f0:	7dfb      	ldrb	r3, [r7, #23]
 81039f2:	2b00      	cmp	r3, #0
 81039f4:	d10a      	bne.n	8103a0c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81039f6:	4b3c      	ldr	r3, [pc, #240]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a04:	4938      	ldr	r1, [pc, #224]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a06:	4313      	orrs	r3, r2
 8103a08:	658b      	str	r3, [r1, #88]	; 0x58
 8103a0a:	e001      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a0c:	7dfb      	ldrb	r3, [r7, #23]
 8103a0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	f003 0308 	and.w	r3, r3, #8
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d01a      	beq.n	8103a52 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103a26:	d10a      	bne.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	3324      	adds	r3, #36	; 0x24
 8103a2c:	2102      	movs	r1, #2
 8103a2e:	4618      	mov	r0, r3
 8103a30:	f000 fa3c 	bl	8103eac <RCCEx_PLL3_Config>
 8103a34:	4603      	mov	r3, r0
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d001      	beq.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103a3a:	2301      	movs	r3, #1
 8103a3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103a3e:	4b2a      	ldr	r3, [pc, #168]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103a4c:	4926      	ldr	r1, [pc, #152]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a4e:	4313      	orrs	r3, r2
 8103a50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	f003 0310 	and.w	r3, r3, #16
 8103a5a:	2b00      	cmp	r3, #0
 8103a5c:	d01a      	beq.n	8103a94 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a68:	d10a      	bne.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	3324      	adds	r3, #36	; 0x24
 8103a6e:	2102      	movs	r1, #2
 8103a70:	4618      	mov	r0, r3
 8103a72:	f000 fa1b 	bl	8103eac <RCCEx_PLL3_Config>
 8103a76:	4603      	mov	r3, r0
 8103a78:	2b00      	cmp	r3, #0
 8103a7a:	d001      	beq.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103a7c:	2301      	movs	r3, #1
 8103a7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103a80:	4b19      	ldr	r3, [pc, #100]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a8e:	4916      	ldr	r1, [pc, #88]	; (8103ae8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a90:	4313      	orrs	r3, r2
 8103a92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d036      	beq.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103aaa:	d01f      	beq.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103ab0:	d817      	bhi.n	8103ae2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d003      	beq.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103aba:	d009      	beq.n	8103ad0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103abc:	e011      	b.n	8103ae2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	3304      	adds	r3, #4
 8103ac2:	2100      	movs	r1, #0
 8103ac4:	4618      	mov	r0, r3
 8103ac6:	f000 f93f 	bl	8103d48 <RCCEx_PLL2_Config>
 8103aca:	4603      	mov	r3, r0
 8103acc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103ace:	e00e      	b.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	3324      	adds	r3, #36	; 0x24
 8103ad4:	2102      	movs	r1, #2
 8103ad6:	4618      	mov	r0, r3
 8103ad8:	f000 f9e8 	bl	8103eac <RCCEx_PLL3_Config>
 8103adc:	4603      	mov	r3, r0
 8103ade:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103ae0:	e005      	b.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ae2:	2301      	movs	r3, #1
 8103ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8103ae6:	e002      	b.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103ae8:	58024400 	.word	0x58024400
      break;
 8103aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103aee:	7dfb      	ldrb	r3, [r7, #23]
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d10a      	bne.n	8103b0a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103af4:	4b93      	ldr	r3, [pc, #588]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b02:	4990      	ldr	r1, [pc, #576]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b04:	4313      	orrs	r3, r2
 8103b06:	658b      	str	r3, [r1, #88]	; 0x58
 8103b08:	e001      	b.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b0a:	7dfb      	ldrb	r3, [r7, #23]
 8103b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b16:	2b00      	cmp	r3, #0
 8103b18:	d033      	beq.n	8103b82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103b20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b24:	d01c      	beq.n	8103b60 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103b26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b2a:	d816      	bhi.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103b30:	d003      	beq.n	8103b3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b36:	d007      	beq.n	8103b48 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103b38:	e00f      	b.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b3a:	4b82      	ldr	r3, [pc, #520]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b3e:	4a81      	ldr	r2, [pc, #516]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103b46:	e00c      	b.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	3324      	adds	r3, #36	; 0x24
 8103b4c:	2101      	movs	r1, #1
 8103b4e:	4618      	mov	r0, r3
 8103b50:	f000 f9ac 	bl	8103eac <RCCEx_PLL3_Config>
 8103b54:	4603      	mov	r3, r0
 8103b56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103b58:	e003      	b.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b5a:	2301      	movs	r3, #1
 8103b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8103b5e:	e000      	b.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b62:	7dfb      	ldrb	r3, [r7, #23]
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	d10a      	bne.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103b68:	4b76      	ldr	r3, [pc, #472]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103b76:	4973      	ldr	r1, [pc, #460]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b78:	4313      	orrs	r3, r2
 8103b7a:	654b      	str	r3, [r1, #84]	; 0x54
 8103b7c:	e001      	b.n	8103b82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b7e:	7dfb      	ldrb	r3, [r7, #23]
 8103b80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	681b      	ldr	r3, [r3, #0]
 8103b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b8a:	2b00      	cmp	r3, #0
 8103b8c:	d029      	beq.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	d003      	beq.n	8103b9e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b9a:	d007      	beq.n	8103bac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103b9c:	e00f      	b.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b9e:	4b69      	ldr	r3, [pc, #420]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ba2:	4a68      	ldr	r2, [pc, #416]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103baa:	e00b      	b.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	3304      	adds	r3, #4
 8103bb0:	2102      	movs	r1, #2
 8103bb2:	4618      	mov	r0, r3
 8103bb4:	f000 f8c8 	bl	8103d48 <RCCEx_PLL2_Config>
 8103bb8:	4603      	mov	r3, r0
 8103bba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103bbc:	e002      	b.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103bbe:	2301      	movs	r3, #1
 8103bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8103bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bc4:	7dfb      	ldrb	r3, [r7, #23]
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d109      	bne.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103bca:	4b5e      	ldr	r3, [pc, #376]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bd6:	495b      	ldr	r1, [pc, #364]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bd8:	4313      	orrs	r3, r2
 8103bda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103bdc:	e001      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bde:	7dfb      	ldrb	r3, [r7, #23]
 8103be0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103bea:	2b00      	cmp	r3, #0
 8103bec:	d00a      	beq.n	8103c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	3324      	adds	r3, #36	; 0x24
 8103bf2:	2102      	movs	r1, #2
 8103bf4:	4618      	mov	r0, r3
 8103bf6:	f000 f959 	bl	8103eac <RCCEx_PLL3_Config>
 8103bfa:	4603      	mov	r3, r0
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d001      	beq.n	8103c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103c00:	2301      	movs	r3, #1
 8103c02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103c0c:	2b00      	cmp	r3, #0
 8103c0e:	d030      	beq.n	8103c72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c18:	d017      	beq.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c1e:	d811      	bhi.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c24:	d013      	beq.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103c2a:	d80b      	bhi.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d010      	beq.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c34:	d106      	bne.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c36:	4b43      	ldr	r3, [pc, #268]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c3a:	4a42      	ldr	r2, [pc, #264]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103c42:	e007      	b.n	8103c54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c44:	2301      	movs	r3, #1
 8103c46:	75fb      	strb	r3, [r7, #23]
      break;
 8103c48:	e004      	b.n	8103c54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103c4a:	bf00      	nop
 8103c4c:	e002      	b.n	8103c54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103c4e:	bf00      	nop
 8103c50:	e000      	b.n	8103c54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c54:	7dfb      	ldrb	r3, [r7, #23]
 8103c56:	2b00      	cmp	r3, #0
 8103c58:	d109      	bne.n	8103c6e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103c5a:	4b3a      	ldr	r3, [pc, #232]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103c66:	4937      	ldr	r1, [pc, #220]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c68:	4313      	orrs	r3, r2
 8103c6a:	654b      	str	r3, [r1, #84]	; 0x54
 8103c6c:	e001      	b.n	8103c72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c6e:	7dfb      	ldrb	r3, [r7, #23]
 8103c70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d008      	beq.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103c7e:	4b31      	ldr	r3, [pc, #196]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103c8a:	492e      	ldr	r1, [pc, #184]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c8c:	4313      	orrs	r3, r2
 8103c8e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103c98:	2b00      	cmp	r3, #0
 8103c9a:	d009      	beq.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103c9c:	4b29      	ldr	r3, [pc, #164]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c9e:	691b      	ldr	r3, [r3, #16]
 8103ca0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103caa:	4926      	ldr	r1, [pc, #152]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cac:	4313      	orrs	r3, r2
 8103cae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103cb8:	2b00      	cmp	r3, #0
 8103cba:	d008      	beq.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103cbc:	4b21      	ldr	r3, [pc, #132]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103cc8:	491e      	ldr	r1, [pc, #120]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cca:	4313      	orrs	r3, r2
 8103ccc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103cd6:	2b00      	cmp	r3, #0
 8103cd8:	d00d      	beq.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103cda:	4b1a      	ldr	r3, [pc, #104]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cdc:	691b      	ldr	r3, [r3, #16]
 8103cde:	4a19      	ldr	r2, [pc, #100]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ce0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103ce4:	6113      	str	r3, [r2, #16]
 8103ce6:	4b17      	ldr	r3, [pc, #92]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ce8:	691a      	ldr	r2, [r3, #16]
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103cf0:	4914      	ldr	r1, [pc, #80]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cf2:	4313      	orrs	r3, r2
 8103cf4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	da08      	bge.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103cfe:	4b11      	ldr	r3, [pc, #68]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d0a:	490e      	ldr	r1, [pc, #56]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d0c:	4313      	orrs	r3, r2
 8103d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	d009      	beq.n	8103d30 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103d1c:	4b09      	ldr	r3, [pc, #36]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103d2a:	4906      	ldr	r1, [pc, #24]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d2c:	4313      	orrs	r3, r2
 8103d2e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103d30:	7dbb      	ldrb	r3, [r7, #22]
 8103d32:	2b00      	cmp	r3, #0
 8103d34:	d101      	bne.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103d36:	2300      	movs	r3, #0
 8103d38:	e000      	b.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103d3a:	2301      	movs	r3, #1
}
 8103d3c:	4618      	mov	r0, r3
 8103d3e:	3718      	adds	r7, #24
 8103d40:	46bd      	mov	sp, r7
 8103d42:	bd80      	pop	{r7, pc}
 8103d44:	58024400 	.word	0x58024400

08103d48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103d48:	b580      	push	{r7, lr}
 8103d4a:	b084      	sub	sp, #16
 8103d4c:	af00      	add	r7, sp, #0
 8103d4e:	6078      	str	r0, [r7, #4]
 8103d50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103d52:	2300      	movs	r3, #0
 8103d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103d56:	4b54      	ldr	r3, [pc, #336]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d5a:	f003 0303 	and.w	r3, r3, #3
 8103d5e:	2b03      	cmp	r3, #3
 8103d60:	d101      	bne.n	8103d66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103d62:	2301      	movs	r3, #1
 8103d64:	e09b      	b.n	8103e9e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103d66:	4b50      	ldr	r3, [pc, #320]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	4a4f      	ldr	r2, [pc, #316]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103d72:	f7fd fd91 	bl	8101898 <HAL_GetTick>
 8103d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103d78:	e008      	b.n	8103d8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103d7a:	f7fd fd8d 	bl	8101898 <HAL_GetTick>
 8103d7e:	4602      	mov	r2, r0
 8103d80:	68bb      	ldr	r3, [r7, #8]
 8103d82:	1ad3      	subs	r3, r2, r3
 8103d84:	2b02      	cmp	r3, #2
 8103d86:	d901      	bls.n	8103d8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103d88:	2303      	movs	r3, #3
 8103d8a:	e088      	b.n	8103e9e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103d8c:	4b46      	ldr	r3, [pc, #280]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103d8e:	681b      	ldr	r3, [r3, #0]
 8103d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103d94:	2b00      	cmp	r3, #0
 8103d96:	d1f0      	bne.n	8103d7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103d98:	4b43      	ldr	r3, [pc, #268]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	031b      	lsls	r3, r3, #12
 8103da6:	4940      	ldr	r1, [pc, #256]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103da8:	4313      	orrs	r3, r2
 8103daa:	628b      	str	r3, [r1, #40]	; 0x28
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	685b      	ldr	r3, [r3, #4]
 8103db0:	3b01      	subs	r3, #1
 8103db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	689b      	ldr	r3, [r3, #8]
 8103dba:	3b01      	subs	r3, #1
 8103dbc:	025b      	lsls	r3, r3, #9
 8103dbe:	b29b      	uxth	r3, r3
 8103dc0:	431a      	orrs	r2, r3
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	68db      	ldr	r3, [r3, #12]
 8103dc6:	3b01      	subs	r3, #1
 8103dc8:	041b      	lsls	r3, r3, #16
 8103dca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103dce:	431a      	orrs	r2, r3
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	691b      	ldr	r3, [r3, #16]
 8103dd4:	3b01      	subs	r3, #1
 8103dd6:	061b      	lsls	r3, r3, #24
 8103dd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103ddc:	4932      	ldr	r1, [pc, #200]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103dde:	4313      	orrs	r3, r2
 8103de0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103de2:	4b31      	ldr	r3, [pc, #196]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	695b      	ldr	r3, [r3, #20]
 8103dee:	492e      	ldr	r1, [pc, #184]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103df0:	4313      	orrs	r3, r2
 8103df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103df4:	4b2c      	ldr	r3, [pc, #176]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103df8:	f023 0220 	bic.w	r2, r3, #32
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	699b      	ldr	r3, [r3, #24]
 8103e00:	4929      	ldr	r1, [pc, #164]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e02:	4313      	orrs	r3, r2
 8103e04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103e06:	4b28      	ldr	r3, [pc, #160]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e0a:	4a27      	ldr	r2, [pc, #156]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e0c:	f023 0310 	bic.w	r3, r3, #16
 8103e10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103e12:	4b25      	ldr	r3, [pc, #148]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103e1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103e1e:	687a      	ldr	r2, [r7, #4]
 8103e20:	69d2      	ldr	r2, [r2, #28]
 8103e22:	00d2      	lsls	r2, r2, #3
 8103e24:	4920      	ldr	r1, [pc, #128]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e26:	4313      	orrs	r3, r2
 8103e28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103e2a:	4b1f      	ldr	r3, [pc, #124]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e2e:	4a1e      	ldr	r2, [pc, #120]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e30:	f043 0310 	orr.w	r3, r3, #16
 8103e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103e36:	683b      	ldr	r3, [r7, #0]
 8103e38:	2b00      	cmp	r3, #0
 8103e3a:	d106      	bne.n	8103e4a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103e3c:	4b1a      	ldr	r3, [pc, #104]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e40:	4a19      	ldr	r2, [pc, #100]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103e46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103e48:	e00f      	b.n	8103e6a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103e4a:	683b      	ldr	r3, [r7, #0]
 8103e4c:	2b01      	cmp	r3, #1
 8103e4e:	d106      	bne.n	8103e5e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103e50:	4b15      	ldr	r3, [pc, #84]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e54:	4a14      	ldr	r2, [pc, #80]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103e5c:	e005      	b.n	8103e6a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103e5e:	4b12      	ldr	r3, [pc, #72]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e62:	4a11      	ldr	r2, [pc, #68]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103e68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103e6a:	4b0f      	ldr	r3, [pc, #60]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	4a0e      	ldr	r2, [pc, #56]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103e76:	f7fd fd0f 	bl	8101898 <HAL_GetTick>
 8103e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103e7c:	e008      	b.n	8103e90 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103e7e:	f7fd fd0b 	bl	8101898 <HAL_GetTick>
 8103e82:	4602      	mov	r2, r0
 8103e84:	68bb      	ldr	r3, [r7, #8]
 8103e86:	1ad3      	subs	r3, r2, r3
 8103e88:	2b02      	cmp	r3, #2
 8103e8a:	d901      	bls.n	8103e90 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103e8c:	2303      	movs	r3, #3
 8103e8e:	e006      	b.n	8103e9e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103e90:	4b05      	ldr	r3, [pc, #20]	; (8103ea8 <RCCEx_PLL2_Config+0x160>)
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	d0f0      	beq.n	8103e7e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103e9e:	4618      	mov	r0, r3
 8103ea0:	3710      	adds	r7, #16
 8103ea2:	46bd      	mov	sp, r7
 8103ea4:	bd80      	pop	{r7, pc}
 8103ea6:	bf00      	nop
 8103ea8:	58024400 	.word	0x58024400

08103eac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103eac:	b580      	push	{r7, lr}
 8103eae:	b084      	sub	sp, #16
 8103eb0:	af00      	add	r7, sp, #0
 8103eb2:	6078      	str	r0, [r7, #4]
 8103eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103eb6:	2300      	movs	r3, #0
 8103eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103eba:	4b54      	ldr	r3, [pc, #336]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ebe:	f003 0303 	and.w	r3, r3, #3
 8103ec2:	2b03      	cmp	r3, #3
 8103ec4:	d101      	bne.n	8103eca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103ec6:	2301      	movs	r3, #1
 8103ec8:	e09b      	b.n	8104002 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103eca:	4b50      	ldr	r3, [pc, #320]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	4a4f      	ldr	r2, [pc, #316]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103ed6:	f7fd fcdf 	bl	8101898 <HAL_GetTick>
 8103eda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103edc:	e008      	b.n	8103ef0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103ede:	f7fd fcdb 	bl	8101898 <HAL_GetTick>
 8103ee2:	4602      	mov	r2, r0
 8103ee4:	68bb      	ldr	r3, [r7, #8]
 8103ee6:	1ad3      	subs	r3, r2, r3
 8103ee8:	2b02      	cmp	r3, #2
 8103eea:	d901      	bls.n	8103ef0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103eec:	2303      	movs	r3, #3
 8103eee:	e088      	b.n	8104002 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103ef0:	4b46      	ldr	r3, [pc, #280]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103ef8:	2b00      	cmp	r3, #0
 8103efa:	d1f0      	bne.n	8103ede <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103efc:	4b43      	ldr	r3, [pc, #268]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	051b      	lsls	r3, r3, #20
 8103f0a:	4940      	ldr	r1, [pc, #256]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f0c:	4313      	orrs	r3, r2
 8103f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	685b      	ldr	r3, [r3, #4]
 8103f14:	3b01      	subs	r3, #1
 8103f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	689b      	ldr	r3, [r3, #8]
 8103f1e:	3b01      	subs	r3, #1
 8103f20:	025b      	lsls	r3, r3, #9
 8103f22:	b29b      	uxth	r3, r3
 8103f24:	431a      	orrs	r2, r3
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	68db      	ldr	r3, [r3, #12]
 8103f2a:	3b01      	subs	r3, #1
 8103f2c:	041b      	lsls	r3, r3, #16
 8103f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103f32:	431a      	orrs	r2, r3
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	691b      	ldr	r3, [r3, #16]
 8103f38:	3b01      	subs	r3, #1
 8103f3a:	061b      	lsls	r3, r3, #24
 8103f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103f40:	4932      	ldr	r1, [pc, #200]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f42:	4313      	orrs	r3, r2
 8103f44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103f46:	4b31      	ldr	r3, [pc, #196]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	695b      	ldr	r3, [r3, #20]
 8103f52:	492e      	ldr	r1, [pc, #184]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f54:	4313      	orrs	r3, r2
 8103f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103f58:	4b2c      	ldr	r3, [pc, #176]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	699b      	ldr	r3, [r3, #24]
 8103f64:	4929      	ldr	r1, [pc, #164]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f66:	4313      	orrs	r3, r2
 8103f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103f6a:	4b28      	ldr	r3, [pc, #160]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f6e:	4a27      	ldr	r2, [pc, #156]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103f76:	4b25      	ldr	r3, [pc, #148]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103f7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103f82:	687a      	ldr	r2, [r7, #4]
 8103f84:	69d2      	ldr	r2, [r2, #28]
 8103f86:	00d2      	lsls	r2, r2, #3
 8103f88:	4920      	ldr	r1, [pc, #128]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f8a:	4313      	orrs	r3, r2
 8103f8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103f8e:	4b1f      	ldr	r3, [pc, #124]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f92:	4a1e      	ldr	r2, [pc, #120]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103f98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103f9a:	683b      	ldr	r3, [r7, #0]
 8103f9c:	2b00      	cmp	r3, #0
 8103f9e:	d106      	bne.n	8103fae <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103fa0:	4b1a      	ldr	r3, [pc, #104]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fa4:	4a19      	ldr	r2, [pc, #100]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103faa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103fac:	e00f      	b.n	8103fce <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103fae:	683b      	ldr	r3, [r7, #0]
 8103fb0:	2b01      	cmp	r3, #1
 8103fb2:	d106      	bne.n	8103fc2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103fb4:	4b15      	ldr	r3, [pc, #84]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fb8:	4a14      	ldr	r2, [pc, #80]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103fc0:	e005      	b.n	8103fce <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103fc2:	4b12      	ldr	r3, [pc, #72]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fc6:	4a11      	ldr	r2, [pc, #68]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103fce:	4b0f      	ldr	r3, [pc, #60]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	4a0e      	ldr	r2, [pc, #56]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103fda:	f7fd fc5d 	bl	8101898 <HAL_GetTick>
 8103fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103fe0:	e008      	b.n	8103ff4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103fe2:	f7fd fc59 	bl	8101898 <HAL_GetTick>
 8103fe6:	4602      	mov	r2, r0
 8103fe8:	68bb      	ldr	r3, [r7, #8]
 8103fea:	1ad3      	subs	r3, r2, r3
 8103fec:	2b02      	cmp	r3, #2
 8103fee:	d901      	bls.n	8103ff4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103ff0:	2303      	movs	r3, #3
 8103ff2:	e006      	b.n	8104002 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103ff4:	4b05      	ldr	r3, [pc, #20]	; (810400c <RCCEx_PLL3_Config+0x160>)
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103ffc:	2b00      	cmp	r3, #0
 8103ffe:	d0f0      	beq.n	8103fe2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104000:	7bfb      	ldrb	r3, [r7, #15]
}
 8104002:	4618      	mov	r0, r3
 8104004:	3710      	adds	r7, #16
 8104006:	46bd      	mov	sp, r7
 8104008:	bd80      	pop	{r7, pc}
 810400a:	bf00      	nop
 810400c:	58024400 	.word	0x58024400

08104010 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104010:	b580      	push	{r7, lr}
 8104012:	b084      	sub	sp, #16
 8104014:	af00      	add	r7, sp, #0
 8104016:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8104018:	2300      	movs	r3, #0
 810401a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	2b00      	cmp	r3, #0
 8104020:	d101      	bne.n	8104026 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8104022:	2301      	movs	r3, #1
 8104024:	e0eb      	b.n	81041fe <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	2200      	movs	r2, #0
 810402a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	681b      	ldr	r3, [r3, #0]
 8104030:	4a75      	ldr	r2, [pc, #468]	; (8104208 <HAL_SPI_Init+0x1f8>)
 8104032:	4293      	cmp	r3, r2
 8104034:	d00f      	beq.n	8104056 <HAL_SPI_Init+0x46>
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	4a74      	ldr	r2, [pc, #464]	; (810420c <HAL_SPI_Init+0x1fc>)
 810403c:	4293      	cmp	r3, r2
 810403e:	d00a      	beq.n	8104056 <HAL_SPI_Init+0x46>
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	4a72      	ldr	r2, [pc, #456]	; (8104210 <HAL_SPI_Init+0x200>)
 8104046:	4293      	cmp	r3, r2
 8104048:	d005      	beq.n	8104056 <HAL_SPI_Init+0x46>
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	68db      	ldr	r3, [r3, #12]
 810404e:	2b0f      	cmp	r3, #15
 8104050:	d901      	bls.n	8104056 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8104052:	2301      	movs	r3, #1
 8104054:	e0d3      	b.n	81041fe <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104056:	6878      	ldr	r0, [r7, #4]
 8104058:	f000 f8dc 	bl	8104214 <SPI_GetPacketSize>
 810405c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	4a69      	ldr	r2, [pc, #420]	; (8104208 <HAL_SPI_Init+0x1f8>)
 8104064:	4293      	cmp	r3, r2
 8104066:	d00c      	beq.n	8104082 <HAL_SPI_Init+0x72>
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	681b      	ldr	r3, [r3, #0]
 810406c:	4a67      	ldr	r2, [pc, #412]	; (810420c <HAL_SPI_Init+0x1fc>)
 810406e:	4293      	cmp	r3, r2
 8104070:	d007      	beq.n	8104082 <HAL_SPI_Init+0x72>
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	4a66      	ldr	r2, [pc, #408]	; (8104210 <HAL_SPI_Init+0x200>)
 8104078:	4293      	cmp	r3, r2
 810407a:	d002      	beq.n	8104082 <HAL_SPI_Init+0x72>
 810407c:	68bb      	ldr	r3, [r7, #8]
 810407e:	2b08      	cmp	r3, #8
 8104080:	d811      	bhi.n	81040a6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104086:	4a60      	ldr	r2, [pc, #384]	; (8104208 <HAL_SPI_Init+0x1f8>)
 8104088:	4293      	cmp	r3, r2
 810408a:	d009      	beq.n	81040a0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	4a5e      	ldr	r2, [pc, #376]	; (810420c <HAL_SPI_Init+0x1fc>)
 8104092:	4293      	cmp	r3, r2
 8104094:	d004      	beq.n	81040a0 <HAL_SPI_Init+0x90>
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	4a5d      	ldr	r2, [pc, #372]	; (8104210 <HAL_SPI_Init+0x200>)
 810409c:	4293      	cmp	r3, r2
 810409e:	d104      	bne.n	81040aa <HAL_SPI_Init+0x9a>
 81040a0:	68bb      	ldr	r3, [r7, #8]
 81040a2:	2b10      	cmp	r3, #16
 81040a4:	d901      	bls.n	81040aa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 81040a6:	2301      	movs	r3, #1
 81040a8:	e0a9      	b.n	81041fe <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81040b0:	b2db      	uxtb	r3, r3
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	d106      	bne.n	81040c4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	2200      	movs	r2, #0
 81040ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81040be:	6878      	ldr	r0, [r7, #4]
 81040c0:	f7fd f950 	bl	8101364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	2202      	movs	r2, #2
 81040c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	681b      	ldr	r3, [r3, #0]
 81040d0:	681a      	ldr	r2, [r3, #0]
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	f022 0201 	bic.w	r2, r2, #1
 81040da:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	699b      	ldr	r3, [r3, #24]
 81040e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81040e4:	d119      	bne.n	810411a <HAL_SPI_Init+0x10a>
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	685b      	ldr	r3, [r3, #4]
 81040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81040ee:	d103      	bne.n	81040f8 <HAL_SPI_Init+0xe8>
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d008      	beq.n	810410a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81040fc:	2b00      	cmp	r3, #0
 81040fe:	d10c      	bne.n	810411a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104108:	d107      	bne.n	810411a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	681a      	ldr	r2, [r3, #0]
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104118:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	69da      	ldr	r2, [r3, #28]
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104122:	431a      	orrs	r2, r3
 8104124:	68fb      	ldr	r3, [r7, #12]
 8104126:	431a      	orrs	r2, r3
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810412c:	ea42 0103 	orr.w	r1, r2, r3
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	68da      	ldr	r2, [r3, #12]
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	430a      	orrs	r2, r1
 810413a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104144:	431a      	orrs	r2, r3
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810414a:	431a      	orrs	r2, r3
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	699b      	ldr	r3, [r3, #24]
 8104150:	431a      	orrs	r2, r3
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	691b      	ldr	r3, [r3, #16]
 8104156:	431a      	orrs	r2, r3
 8104158:	687b      	ldr	r3, [r7, #4]
 810415a:	695b      	ldr	r3, [r3, #20]
 810415c:	431a      	orrs	r2, r3
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	6a1b      	ldr	r3, [r3, #32]
 8104162:	431a      	orrs	r2, r3
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	685b      	ldr	r3, [r3, #4]
 8104168:	431a      	orrs	r2, r3
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810416e:	431a      	orrs	r2, r3
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	689b      	ldr	r3, [r3, #8]
 8104174:	431a      	orrs	r2, r3
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810417a:	ea42 0103 	orr.w	r1, r2, r3
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	430a      	orrs	r2, r1
 8104188:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	685b      	ldr	r3, [r3, #4]
 810418e:	2b00      	cmp	r3, #0
 8104190:	d113      	bne.n	81041ba <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	689b      	ldr	r3, [r3, #8]
 8104198:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81041a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	689b      	ldr	r3, [r3, #8]
 81041ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81041b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	f022 0201 	bic.w	r2, r2, #1
 81041c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	685b      	ldr	r3, [r3, #4]
 81041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81041d2:	2b00      	cmp	r3, #0
 81041d4:	d00a      	beq.n	81041ec <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	68db      	ldr	r3, [r3, #12]
 81041dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	430a      	orrs	r2, r1
 81041ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	2200      	movs	r2, #0
 81041f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	2201      	movs	r2, #1
 81041f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81041fc:	2300      	movs	r3, #0
}
 81041fe:	4618      	mov	r0, r3
 8104200:	3710      	adds	r7, #16
 8104202:	46bd      	mov	sp, r7
 8104204:	bd80      	pop	{r7, pc}
 8104206:	bf00      	nop
 8104208:	40013000 	.word	0x40013000
 810420c:	40003800 	.word	0x40003800
 8104210:	40003c00 	.word	0x40003c00

08104214 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104214:	b480      	push	{r7}
 8104216:	b085      	sub	sp, #20
 8104218:	af00      	add	r7, sp, #0
 810421a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104220:	095b      	lsrs	r3, r3, #5
 8104222:	3301      	adds	r3, #1
 8104224:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	68db      	ldr	r3, [r3, #12]
 810422a:	3301      	adds	r3, #1
 810422c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810422e:	68bb      	ldr	r3, [r7, #8]
 8104230:	3307      	adds	r3, #7
 8104232:	08db      	lsrs	r3, r3, #3
 8104234:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8104236:	68bb      	ldr	r3, [r7, #8]
 8104238:	68fa      	ldr	r2, [r7, #12]
 810423a:	fb02 f303 	mul.w	r3, r2, r3
}
 810423e:	4618      	mov	r0, r3
 8104240:	3714      	adds	r7, #20
 8104242:	46bd      	mov	sp, r7
 8104244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104248:	4770      	bx	lr

0810424a <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 810424a:	b084      	sub	sp, #16
 810424c:	b580      	push	{r7, lr}
 810424e:	b086      	sub	sp, #24
 8104250:	af04      	add	r7, sp, #16
 8104252:	f107 0c10 	add.w	ip, r7, #16
 8104256:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 810425a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 810425e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, HAL_MAX_DELAY);
 8104260:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8104264:	b299      	uxth	r1, r3
 8104266:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 810426a:	b29a      	uxth	r2, r3
 810426c:	f04f 33ff 	mov.w	r3, #4294967295
 8104270:	9302      	str	r3, [sp, #8]
 8104272:	2301      	movs	r3, #1
 8104274:	9301      	str	r3, [sp, #4]
 8104276:	1d3b      	adds	r3, r7, #4
 8104278:	9300      	str	r3, [sp, #0]
 810427a:	2301      	movs	r3, #1
 810427c:	f107 0010 	add.w	r0, r7, #16
 8104280:	f7fd ff24 	bl	81020cc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8104284:	200a      	movs	r0, #10
 8104286:	f7fd fb13 	bl	81018b0 <HAL_Delay>
}
 810428a:	bf00      	nop
 810428c:	3708      	adds	r7, #8
 810428e:	46bd      	mov	sp, r7
 8104290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8104294:	b004      	add	sp, #16
 8104296:	4770      	bx	lr

08104298 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8104298:	b084      	sub	sp, #16
 810429a:	b580      	push	{r7, lr}
 810429c:	b084      	sub	sp, #16
 810429e:	af04      	add	r7, sp, #16
 81042a0:	f107 0c08 	add.w	ip, r7, #8
 81042a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, HAL_MAX_DELAY-1);
 81042a8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 81042ac:	b299      	uxth	r1, r3
 81042ae:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 81042b2:	b29a      	uxth	r2, r3
 81042b4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 81042b8:	b29b      	uxth	r3, r3
 81042ba:	f06f 0001 	mvn.w	r0, #1
 81042be:	9002      	str	r0, [sp, #8]
 81042c0:	9301      	str	r3, [sp, #4]
 81042c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81042c4:	9300      	str	r3, [sp, #0]
 81042c6:	2301      	movs	r3, #1
 81042c8:	f107 0008 	add.w	r0, r7, #8
 81042cc:	f7fe f812 	bl	81022f4 <HAL_I2C_Mem_Read>
}
 81042d0:	bf00      	nop
 81042d2:	46bd      	mov	sp, r7
 81042d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81042d8:	b004      	add	sp, #16
 81042da:	4770      	bx	lr

081042dc <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 81042dc:	b084      	sub	sp, #16
 81042de:	b5b0      	push	{r4, r5, r7, lr}
 81042e0:	b092      	sub	sp, #72	; 0x48
 81042e2:	af12      	add	r7, sp, #72	; 0x48
 81042e4:	f107 0410 	add.w	r4, r7, #16
 81042e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 81042ec:	2325      	movs	r3, #37	; 0x25
 81042ee:	220c      	movs	r2, #12
 81042f0:	9211      	str	r2, [sp, #68]	; 0x44
 81042f2:	9310      	str	r3, [sp, #64]	; 0x40
 81042f4:	466d      	mov	r5, sp
 81042f6:	f107 0420 	add.w	r4, r7, #32
 81042fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81042fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81042fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104306:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810430a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810430e:	f107 0310 	add.w	r3, r7, #16
 8104312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104314:	f7ff ff99 	bl	810424a <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104318:	2226      	movs	r2, #38	; 0x26
 810431a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 810431e:	9311      	str	r3, [sp, #68]	; 0x44
 8104320:	9210      	str	r2, [sp, #64]	; 0x40
 8104322:	466d      	mov	r5, sp
 8104324:	f107 0420 	add.w	r4, r7, #32
 8104328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810432a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810432c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810432e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104334:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104338:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810433c:	f107 0310 	add.w	r3, r7, #16
 8104340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104342:	f7ff ff82 	bl	810424a <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 8104346:	2263      	movs	r2, #99	; 0x63
 8104348:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 810434c:	9311      	str	r3, [sp, #68]	; 0x44
 810434e:	9210      	str	r2, [sp, #64]	; 0x40
 8104350:	466d      	mov	r5, sp
 8104352:	f107 0420 	add.w	r4, r7, #32
 8104356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810435a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810435c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810435e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104362:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104366:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810436a:	f107 0310 	add.w	r3, r7, #16
 810436e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104370:	f7ff ff6b 	bl	810424a <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8104374:	2227      	movs	r2, #39	; 0x27
 8104376:	2380      	movs	r3, #128	; 0x80
 8104378:	f043 0301 	orr.w	r3, r3, #1
 810437c:	b2db      	uxtb	r3, r3
 810437e:	9311      	str	r3, [sp, #68]	; 0x44
 8104380:	9210      	str	r2, [sp, #64]	; 0x40
 8104382:	466d      	mov	r5, sp
 8104384:	f107 0420 	add.w	r4, r7, #32
 8104388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810438a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810438c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810438e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104394:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104398:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810439c:	f107 0310 	add.w	r3, r7, #16
 81043a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043a2:	f7ff ff52 	bl	810424a <writeRegister>
}
 81043a6:	bf00      	nop
 81043a8:	46bd      	mov	sp, r7
 81043aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81043ae:	b004      	add	sp, #16
 81043b0:	4770      	bx	lr

081043b2 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 81043b2:	b084      	sub	sp, #16
 81043b4:	b5b0      	push	{r4, r5, r7, lr}
 81043b6:	b094      	sub	sp, #80	; 0x50
 81043b8:	af14      	add	r7, sp, #80	; 0x50
 81043ba:	f107 0410 	add.w	r4, r7, #16
 81043be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 81043c2:	2225      	movs	r2, #37	; 0x25
 81043c4:	210c      	movs	r1, #12
 81043c6:	2380      	movs	r3, #128	; 0x80
 81043c8:	430b      	orrs	r3, r1
 81043ca:	b2db      	uxtb	r3, r3
 81043cc:	9311      	str	r3, [sp, #68]	; 0x44
 81043ce:	9210      	str	r2, [sp, #64]	; 0x40
 81043d0:	466d      	mov	r5, sp
 81043d2:	f107 0420 	add.w	r4, r7, #32
 81043d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043ea:	f107 0310 	add.w	r3, r7, #16
 81043ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043f0:	f7ff ff2b 	bl	810424a <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 81043f4:	2226      	movs	r2, #38	; 0x26
 81043f6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81043fa:	9311      	str	r3, [sp, #68]	; 0x44
 81043fc:	9210      	str	r2, [sp, #64]	; 0x40
 81043fe:	466d      	mov	r5, sp
 8104400:	f107 0420 	add.w	r4, r7, #32
 8104404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810440a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810440c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810440e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104410:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104414:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104418:	f107 0310 	add.w	r3, r7, #16
 810441c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810441e:	f7ff ff14 	bl	810424a <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8104422:	2227      	movs	r2, #39	; 0x27
 8104424:	2180      	movs	r1, #128	; 0x80
 8104426:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 810442a:	430b      	orrs	r3, r1
 810442c:	b2db      	uxtb	r3, r3
 810442e:	9311      	str	r3, [sp, #68]	; 0x44
 8104430:	9210      	str	r2, [sp, #64]	; 0x40
 8104432:	466d      	mov	r5, sp
 8104434:	f107 0420 	add.w	r4, r7, #32
 8104438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810443a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810443c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810443e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104444:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104448:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810444c:	f107 0310 	add.w	r3, r7, #16
 8104450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104452:	f7ff fefa 	bl	810424a <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8104456:	2001      	movs	r0, #1
 8104458:	f7fd fa2a 	bl	81018b0 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 810445c:	2249      	movs	r2, #73	; 0x49
 810445e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104460:	9312      	str	r3, [sp, #72]	; 0x48
 8104462:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8104466:	9311      	str	r3, [sp, #68]	; 0x44
 8104468:	9210      	str	r2, [sp, #64]	; 0x40
 810446a:	466d      	mov	r5, sp
 810446c:	f107 0420 	add.w	r4, r7, #32
 8104470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810447a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810447c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104480:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104484:	f107 0310 	add.w	r3, r7, #16
 8104488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810448a:	f7ff ff05 	bl	8104298 <readRegisters>
}
 810448e:	bf00      	nop
 8104490:	46bd      	mov	sp, r7
 8104492:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104496:	b004      	add	sp, #16
 8104498:	4770      	bx	lr
	...

0810449c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 810449c:	b084      	sub	sp, #16
 810449e:	b5b0      	push	{r4, r5, r7, lr}
 81044a0:	b094      	sub	sp, #80	; 0x50
 81044a2:	af14      	add	r7, sp, #80	; 0x50
 81044a4:	f107 0410 	add.w	r4, r7, #16
 81044a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 81044ac:	2375      	movs	r3, #117	; 0x75
 81044ae:	4a0f      	ldr	r2, [pc, #60]	; (81044ec <whoAmI+0x50>)
 81044b0:	9212      	str	r2, [sp, #72]	; 0x48
 81044b2:	2201      	movs	r2, #1
 81044b4:	9211      	str	r2, [sp, #68]	; 0x44
 81044b6:	9310      	str	r3, [sp, #64]	; 0x40
 81044b8:	466d      	mov	r5, sp
 81044ba:	f107 0420 	add.w	r4, r7, #32
 81044be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81044ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81044d2:	f107 0310 	add.w	r3, r7, #16
 81044d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044d8:	f7ff fede 	bl	8104298 <readRegisters>

	// return the register value
	return _buffer[0];
 81044dc:	4b03      	ldr	r3, [pc, #12]	; (81044ec <whoAmI+0x50>)
 81044de:	781b      	ldrb	r3, [r3, #0]
}
 81044e0:	4618      	mov	r0, r3
 81044e2:	46bd      	mov	sp, r7
 81044e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81044e8:	b004      	add	sp, #16
 81044ea:	4770      	bx	lr
 81044ec:	100002f8 	.word	0x100002f8

081044f0 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 81044f0:	b084      	sub	sp, #16
 81044f2:	b5b0      	push	{r4, r5, r7, lr}
 81044f4:	b094      	sub	sp, #80	; 0x50
 81044f6:	af14      	add	r7, sp, #80	; 0x50
 81044f8:	f107 0410 	add.w	r4, r7, #16
 81044fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 8104500:	2300      	movs	r3, #0
 8104502:	4a0f      	ldr	r2, [pc, #60]	; (8104540 <whoAmIAK8963+0x50>)
 8104504:	9212      	str	r2, [sp, #72]	; 0x48
 8104506:	2201      	movs	r2, #1
 8104508:	9211      	str	r2, [sp, #68]	; 0x44
 810450a:	9310      	str	r3, [sp, #64]	; 0x40
 810450c:	466d      	mov	r5, sp
 810450e:	f107 0420 	add.w	r4, r7, #32
 8104512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810451a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810451c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810451e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104522:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104526:	f107 0310 	add.w	r3, r7, #16
 810452a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810452c:	f7ff ff41 	bl	81043b2 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8104530:	4b03      	ldr	r3, [pc, #12]	; (8104540 <whoAmIAK8963+0x50>)
 8104532:	781b      	ldrb	r3, [r3, #0]
}
 8104534:	4618      	mov	r0, r3
 8104536:	46bd      	mov	sp, r7
 8104538:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 810453c:	b004      	add	sp, #16
 810453e:	4770      	bx	lr
 8104540:	100002f8 	.word	0x100002f8

08104544 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 8104544:	b084      	sub	sp, #16
 8104546:	b5b0      	push	{r4, r5, r7, lr}
 8104548:	b096      	sub	sp, #88	; 0x58
 810454a:	af14      	add	r7, sp, #80	; 0x50
 810454c:	f107 0418 	add.w	r4, r7, #24
 8104550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 8104554:	236b      	movs	r3, #107	; 0x6b
 8104556:	2201      	movs	r2, #1
 8104558:	9211      	str	r2, [sp, #68]	; 0x44
 810455a:	9310      	str	r3, [sp, #64]	; 0x40
 810455c:	466d      	mov	r5, sp
 810455e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810456a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810456c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810456e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104572:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104576:	f107 0318 	add.w	r3, r7, #24
 810457a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810457c:	f7ff fe65 	bl	810424a <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 8104580:	236a      	movs	r3, #106	; 0x6a
 8104582:	2220      	movs	r2, #32
 8104584:	9211      	str	r2, [sp, #68]	; 0x44
 8104586:	9310      	str	r3, [sp, #64]	; 0x40
 8104588:	466d      	mov	r5, sp
 810458a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810458e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810459a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810459e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045a2:	f107 0318 	add.w	r3, r7, #24
 81045a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81045a8:	f7ff fe4f 	bl	810424a <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 81045ac:	2324      	movs	r3, #36	; 0x24
 81045ae:	220d      	movs	r2, #13
 81045b0:	9211      	str	r2, [sp, #68]	; 0x44
 81045b2:	9310      	str	r3, [sp, #64]	; 0x40
 81045b4:	466d      	mov	r5, sp
 81045b6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81045ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045ce:	f107 0318 	add.w	r3, r7, #24
 81045d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81045d4:	f7ff fe39 	bl	810424a <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81045d8:	230a      	movs	r3, #10
 81045da:	2200      	movs	r2, #0
 81045dc:	9211      	str	r2, [sp, #68]	; 0x44
 81045de:	9310      	str	r3, [sp, #64]	; 0x40
 81045e0:	466d      	mov	r5, sp
 81045e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81045f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045fa:	f107 0318 	add.w	r3, r7, #24
 81045fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104600:	f7ff fe6c 	bl	81042dc <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 8104604:	236b      	movs	r3, #107	; 0x6b
 8104606:	2280      	movs	r2, #128	; 0x80
 8104608:	9211      	str	r2, [sp, #68]	; 0x44
 810460a:	9310      	str	r3, [sp, #64]	; 0x40
 810460c:	466d      	mov	r5, sp
 810460e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810461e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104622:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104626:	f107 0318 	add.w	r3, r7, #24
 810462a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810462c:	f7ff fe0d 	bl	810424a <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8104630:	200a      	movs	r0, #10
 8104632:	f7fd f93d 	bl	81018b0 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 8104636:	230b      	movs	r3, #11
 8104638:	2201      	movs	r2, #1
 810463a:	9211      	str	r2, [sp, #68]	; 0x44
 810463c:	9310      	str	r3, [sp, #64]	; 0x40
 810463e:	466d      	mov	r5, sp
 8104640:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810464a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810464e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104654:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104658:	f107 0318 	add.w	r3, r7, #24
 810465c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810465e:	f7ff fe3d 	bl	81042dc <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 8104662:	236b      	movs	r3, #107	; 0x6b
 8104664:	2201      	movs	r2, #1
 8104666:	9211      	str	r2, [sp, #68]	; 0x44
 8104668:	9310      	str	r3, [sp, #64]	; 0x40
 810466a:	466d      	mov	r5, sp
 810466c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810467a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810467c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104680:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104684:	f107 0318 	add.w	r3, r7, #24
 8104688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810468a:	f7ff fdde 	bl	810424a <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 810468e:	466d      	mov	r5, sp
 8104690:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810469a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810469c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810469e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046a8:	f107 0318 	add.w	r3, r7, #24
 81046ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046ae:	f7ff fef5 	bl	810449c <whoAmI>
 81046b2:	4603      	mov	r3, r0
 81046b4:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 81046b6:	79fb      	ldrb	r3, [r7, #7]
 81046b8:	2b71      	cmp	r3, #113	; 0x71
 81046ba:	d004      	beq.n	81046c6 <MPU9250_Init+0x182>
 81046bc:	79fb      	ldrb	r3, [r7, #7]
 81046be:	2b73      	cmp	r3, #115	; 0x73
 81046c0:	d001      	beq.n	81046c6 <MPU9250_Init+0x182>
	{
		return 1;
 81046c2:	2301      	movs	r3, #1
 81046c4:	e171      	b.n	81049aa <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 81046c6:	236c      	movs	r3, #108	; 0x6c
 81046c8:	2200      	movs	r2, #0
 81046ca:	9211      	str	r2, [sp, #68]	; 0x44
 81046cc:	9310      	str	r3, [sp, #64]	; 0x40
 81046ce:	466d      	mov	r5, sp
 81046d0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046e8:	f107 0318 	add.w	r3, r7, #24
 81046ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046ee:	f7ff fdac 	bl	810424a <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 81046f2:	231c      	movs	r3, #28
 81046f4:	2200      	movs	r2, #0
 81046f6:	9211      	str	r2, [sp, #68]	; 0x44
 81046f8:	9310      	str	r3, [sp, #64]	; 0x40
 81046fa:	466d      	mov	r5, sp
 81046fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810470a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810470c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104710:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104714:	f107 0318 	add.w	r3, r7, #24
 8104718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810471a:	f7ff fd96 	bl	810424a <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 810471e:	231b      	movs	r3, #27
 8104720:	2200      	movs	r2, #0
 8104722:	9211      	str	r2, [sp, #68]	; 0x44
 8104724:	9310      	str	r3, [sp, #64]	; 0x40
 8104726:	466d      	mov	r5, sp
 8104728:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810472c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810472e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104738:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810473c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104740:	f107 0318 	add.w	r3, r7, #24
 8104744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104746:	f7ff fd80 	bl	810424a <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 810474a:	231d      	movs	r3, #29
 810474c:	2201      	movs	r2, #1
 810474e:	9211      	str	r2, [sp, #68]	; 0x44
 8104750:	9310      	str	r3, [sp, #64]	; 0x40
 8104752:	466d      	mov	r5, sp
 8104754:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810475a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810475c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810475e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104764:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104768:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810476c:	f107 0318 	add.w	r3, r7, #24
 8104770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104772:	f7ff fd6a 	bl	810424a <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 8104776:	231a      	movs	r3, #26
 8104778:	2201      	movs	r2, #1
 810477a:	9211      	str	r2, [sp, #68]	; 0x44
 810477c:	9310      	str	r3, [sp, #64]	; 0x40
 810477e:	466d      	mov	r5, sp
 8104780:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810478a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810478c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810478e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104794:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104798:	f107 0318 	add.w	r3, r7, #24
 810479c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810479e:	f7ff fd54 	bl	810424a <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 81047a2:	2319      	movs	r3, #25
 81047a4:	2200      	movs	r2, #0
 81047a6:	9211      	str	r2, [sp, #68]	; 0x44
 81047a8:	9310      	str	r3, [sp, #64]	; 0x40
 81047aa:	466d      	mov	r5, sp
 81047ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81047b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047c4:	f107 0318 	add.w	r3, r7, #24
 81047c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047ca:	f7ff fd3e 	bl	810424a <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 81047ce:	236a      	movs	r3, #106	; 0x6a
 81047d0:	2220      	movs	r2, #32
 81047d2:	9211      	str	r2, [sp, #68]	; 0x44
 81047d4:	9310      	str	r3, [sp, #64]	; 0x40
 81047d6:	466d      	mov	r5, sp
 81047d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81047dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047f0:	f107 0318 	add.w	r3, r7, #24
 81047f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047f6:	f7ff fd28 	bl	810424a <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 81047fa:	2324      	movs	r3, #36	; 0x24
 81047fc:	220d      	movs	r2, #13
 81047fe:	9211      	str	r2, [sp, #68]	; 0x44
 8104800:	9310      	str	r3, [sp, #64]	; 0x40
 8104802:	466d      	mov	r5, sp
 8104804:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810480a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810480c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810480e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810481c:	f107 0318 	add.w	r3, r7, #24
 8104820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104822:	f7ff fd12 	bl	810424a <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 8104826:	466d      	mov	r5, sp
 8104828:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810482c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810482e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104838:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810483c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104840:	f107 0318 	add.w	r3, r7, #24
 8104844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104846:	f7ff fe53 	bl	81044f0 <whoAmIAK8963>
 810484a:	4603      	mov	r3, r0
 810484c:	2b48      	cmp	r3, #72	; 0x48
 810484e:	d001      	beq.n	8104854 <MPU9250_Init+0x310>
	{
		return 1;
 8104850:	2301      	movs	r3, #1
 8104852:	e0aa      	b.n	81049aa <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104854:	230a      	movs	r3, #10
 8104856:	2200      	movs	r2, #0
 8104858:	9211      	str	r2, [sp, #68]	; 0x44
 810485a:	9310      	str	r3, [sp, #64]	; 0x40
 810485c:	466d      	mov	r5, sp
 810485e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810486a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810486c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810486e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104872:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104876:	f107 0318 	add.w	r3, r7, #24
 810487a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810487c:	f7ff fd2e 	bl	81042dc <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8104880:	2064      	movs	r0, #100	; 0x64
 8104882:	f7fd f815 	bl	81018b0 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 8104886:	230a      	movs	r3, #10
 8104888:	220f      	movs	r2, #15
 810488a:	9211      	str	r2, [sp, #68]	; 0x44
 810488c:	9310      	str	r3, [sp, #64]	; 0x40
 810488e:	466d      	mov	r5, sp
 8104890:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810489a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810489c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810489e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048a8:	f107 0318 	add.w	r3, r7, #24
 81048ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048ae:	f7ff fd15 	bl	81042dc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 81048b2:	2064      	movs	r0, #100	; 0x64
 81048b4:	f7fc fffc 	bl	81018b0 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 81048b8:	2310      	movs	r3, #16
 81048ba:	4a3f      	ldr	r2, [pc, #252]	; (81049b8 <MPU9250_Init+0x474>)
 81048bc:	9212      	str	r2, [sp, #72]	; 0x48
 81048be:	2203      	movs	r2, #3
 81048c0:	9211      	str	r2, [sp, #68]	; 0x44
 81048c2:	9310      	str	r3, [sp, #64]	; 0x40
 81048c4:	466d      	mov	r5, sp
 81048c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048de:	f107 0318 	add.w	r3, r7, #24
 81048e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048e4:	f7ff fd65 	bl	81043b2 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81048e8:	230a      	movs	r3, #10
 81048ea:	2200      	movs	r2, #0
 81048ec:	9211      	str	r2, [sp, #68]	; 0x44
 81048ee:	9310      	str	r3, [sp, #64]	; 0x40
 81048f0:	466d      	mov	r5, sp
 81048f2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104902:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104906:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810490a:	f107 0318 	add.w	r3, r7, #24
 810490e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104910:	f7ff fce4 	bl	81042dc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104914:	2064      	movs	r0, #100	; 0x64
 8104916:	f7fc ffcb 	bl	81018b0 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 810491a:	230a      	movs	r3, #10
 810491c:	2216      	movs	r2, #22
 810491e:	9211      	str	r2, [sp, #68]	; 0x44
 8104920:	9310      	str	r3, [sp, #64]	; 0x40
 8104922:	466d      	mov	r5, sp
 8104924:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810492a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810492c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810492e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104934:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104938:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810493c:	f107 0318 	add.w	r3, r7, #24
 8104940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104942:	f7ff fccb 	bl	81042dc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104946:	2064      	movs	r0, #100	; 0x64
 8104948:	f7fc ffb2 	bl	81018b0 <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 810494c:	236b      	movs	r3, #107	; 0x6b
 810494e:	2201      	movs	r2, #1
 8104950:	9211      	str	r2, [sp, #68]	; 0x44
 8104952:	9310      	str	r3, [sp, #64]	; 0x40
 8104954:	466d      	mov	r5, sp
 8104956:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810495a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810495c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810495e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104966:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810496a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810496e:	f107 0318 	add.w	r3, r7, #24
 8104972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104974:	f7ff fc69 	bl	810424a <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 8104978:	2303      	movs	r3, #3
 810497a:	4a10      	ldr	r2, [pc, #64]	; (81049bc <MPU9250_Init+0x478>)
 810497c:	9212      	str	r2, [sp, #72]	; 0x48
 810497e:	2207      	movs	r2, #7
 8104980:	9211      	str	r2, [sp, #68]	; 0x44
 8104982:	9310      	str	r3, [sp, #64]	; 0x40
 8104984:	466d      	mov	r5, sp
 8104986:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810498a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810498c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810498e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104996:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810499a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810499e:	f107 0318 	add.w	r3, r7, #24
 81049a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049a4:	f7ff fd05 	bl	81043b2 <readAK8963Registers>

	// successful init, return 0
	return 0;
 81049a8:	2300      	movs	r3, #0
}
 81049aa:	4618      	mov	r0, r3
 81049ac:	3708      	adds	r7, #8
 81049ae:	46bd      	mov	sp, r7
 81049b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81049b4:	b004      	add	sp, #16
 81049b6:	4770      	bx	lr
 81049b8:	10000310 	.word	0x10000310
 81049bc:	100002f8 	.word	0x100002f8

081049c0 <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 81049c0:	b084      	sub	sp, #16
 81049c2:	b5b0      	push	{r4, r5, r7, lr}
 81049c4:	b096      	sub	sp, #88	; 0x58
 81049c6:	af14      	add	r7, sp, #80	; 0x50
 81049c8:	f107 0418 	add.w	r4, r7, #24
 81049cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 81049d0:	233b      	movs	r3, #59	; 0x3b
 81049d2:	4a6d      	ldr	r2, [pc, #436]	; (8104b88 <MPU9250_GetData+0x1c8>)
 81049d4:	9212      	str	r2, [sp, #72]	; 0x48
 81049d6:	2215      	movs	r2, #21
 81049d8:	9211      	str	r2, [sp, #68]	; 0x44
 81049da:	9310      	str	r3, [sp, #64]	; 0x40
 81049dc:	466d      	mov	r5, sp
 81049de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049f6:	f107 0318 	add.w	r3, r7, #24
 81049fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049fc:	f7ff fc4c 	bl	8104298 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8104a00:	4b61      	ldr	r3, [pc, #388]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a02:	781b      	ldrb	r3, [r3, #0]
 8104a04:	021b      	lsls	r3, r3, #8
 8104a06:	b21a      	sxth	r2, r3
 8104a08:	4b5f      	ldr	r3, [pc, #380]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a0a:	785b      	ldrb	r3, [r3, #1]
 8104a0c:	b21b      	sxth	r3, r3
 8104a0e:	4313      	orrs	r3, r2
 8104a10:	b21a      	sxth	r2, r3
 8104a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104a14:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8104a16:	4b5c      	ldr	r3, [pc, #368]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a18:	789b      	ldrb	r3, [r3, #2]
 8104a1a:	021b      	lsls	r3, r3, #8
 8104a1c:	b219      	sxth	r1, r3
 8104a1e:	4b5a      	ldr	r3, [pc, #360]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a20:	78db      	ldrb	r3, [r3, #3]
 8104a22:	b21a      	sxth	r2, r3
 8104a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104a26:	3302      	adds	r3, #2
 8104a28:	430a      	orrs	r2, r1
 8104a2a:	b212      	sxth	r2, r2
 8104a2c:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8104a2e:	4b56      	ldr	r3, [pc, #344]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a30:	791b      	ldrb	r3, [r3, #4]
 8104a32:	021b      	lsls	r3, r3, #8
 8104a34:	b219      	sxth	r1, r3
 8104a36:	4b54      	ldr	r3, [pc, #336]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a38:	795b      	ldrb	r3, [r3, #5]
 8104a3a:	b21a      	sxth	r2, r3
 8104a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104a3e:	3304      	adds	r3, #4
 8104a40:	430a      	orrs	r2, r1
 8104a42:	b212      	sxth	r2, r2
 8104a44:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8104a46:	4b50      	ldr	r3, [pc, #320]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a48:	7a1b      	ldrb	r3, [r3, #8]
 8104a4a:	021b      	lsls	r3, r3, #8
 8104a4c:	b21a      	sxth	r2, r3
 8104a4e:	4b4e      	ldr	r3, [pc, #312]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a50:	7a5b      	ldrb	r3, [r3, #9]
 8104a52:	b21b      	sxth	r3, r3
 8104a54:	4313      	orrs	r3, r2
 8104a56:	b21a      	sxth	r2, r3
 8104a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104a5a:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8104a5c:	4b4a      	ldr	r3, [pc, #296]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a5e:	7a9b      	ldrb	r3, [r3, #10]
 8104a60:	021b      	lsls	r3, r3, #8
 8104a62:	b219      	sxth	r1, r3
 8104a64:	4b48      	ldr	r3, [pc, #288]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a66:	7adb      	ldrb	r3, [r3, #11]
 8104a68:	b21a      	sxth	r2, r3
 8104a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104a6c:	3302      	adds	r3, #2
 8104a6e:	430a      	orrs	r2, r1
 8104a70:	b212      	sxth	r2, r2
 8104a72:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8104a74:	4b44      	ldr	r3, [pc, #272]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a76:	7b1b      	ldrb	r3, [r3, #12]
 8104a78:	021b      	lsls	r3, r3, #8
 8104a7a:	b219      	sxth	r1, r3
 8104a7c:	4b42      	ldr	r3, [pc, #264]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a7e:	7b5b      	ldrb	r3, [r3, #13]
 8104a80:	b21a      	sxth	r2, r3
 8104a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104a84:	3304      	adds	r3, #4
 8104a86:	430a      	orrs	r2, r1
 8104a88:	b212      	sxth	r2, r2
 8104a8a:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8104a8c:	4b3e      	ldr	r3, [pc, #248]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a8e:	7bdb      	ldrb	r3, [r3, #15]
 8104a90:	021b      	lsls	r3, r3, #8
 8104a92:	b21a      	sxth	r2, r3
 8104a94:	4b3c      	ldr	r3, [pc, #240]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104a96:	7b9b      	ldrb	r3, [r3, #14]
 8104a98:	b21b      	sxth	r3, r3
 8104a9a:	4313      	orrs	r3, r2
 8104a9c:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8104a9e:	4b3a      	ldr	r3, [pc, #232]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104aa0:	7c5b      	ldrb	r3, [r3, #17]
 8104aa2:	021b      	lsls	r3, r3, #8
 8104aa4:	b21a      	sxth	r2, r3
 8104aa6:	4b38      	ldr	r3, [pc, #224]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104aa8:	7c1b      	ldrb	r3, [r3, #16]
 8104aaa:	b21b      	sxth	r3, r3
 8104aac:	4313      	orrs	r3, r2
 8104aae:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8104ab0:	4b35      	ldr	r3, [pc, #212]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104ab2:	7cdb      	ldrb	r3, [r3, #19]
 8104ab4:	021b      	lsls	r3, r3, #8
 8104ab6:	b21a      	sxth	r2, r3
 8104ab8:	4b33      	ldr	r3, [pc, #204]	; (8104b88 <MPU9250_GetData+0x1c8>)
 8104aba:	7c9b      	ldrb	r3, [r3, #18]
 8104abc:	b21b      	sxth	r3, r3
 8104abe:	4313      	orrs	r3, r2
 8104ac0:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8104ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104ac6:	ee07 3a90 	vmov	s15, r3
 8104aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104ace:	4b2f      	ldr	r3, [pc, #188]	; (8104b8c <MPU9250_GetData+0x1cc>)
 8104ad0:	781b      	ldrb	r3, [r3, #0]
 8104ad2:	3b80      	subs	r3, #128	; 0x80
 8104ad4:	ee07 3a90 	vmov	s15, r3
 8104ad8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104adc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8104b90 <MPU9250_GetData+0x1d0>
 8104ae0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104af4:	ee17 3a90 	vmov	r3, s15
 8104af8:	b21a      	sxth	r2, r3
 8104afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104afc:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8104afe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8104b02:	ee07 3a90 	vmov	s15, r3
 8104b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104b0a:	4b20      	ldr	r3, [pc, #128]	; (8104b8c <MPU9250_GetData+0x1cc>)
 8104b0c:	785b      	ldrb	r3, [r3, #1]
 8104b0e:	3b80      	subs	r3, #128	; 0x80
 8104b10:	ee07 3a90 	vmov	s15, r3
 8104b14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104b18:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8104b90 <MPU9250_GetData+0x1d0>
 8104b1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104b2e:	3302      	adds	r3, #2
 8104b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104b34:	ee17 2a90 	vmov	r2, s15
 8104b38:	b212      	sxth	r2, r2
 8104b3a:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8104b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8104b40:	ee07 3a90 	vmov	s15, r3
 8104b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104b48:	4b10      	ldr	r3, [pc, #64]	; (8104b8c <MPU9250_GetData+0x1cc>)
 8104b4a:	789b      	ldrb	r3, [r3, #2]
 8104b4c:	3b80      	subs	r3, #128	; 0x80
 8104b4e:	ee07 3a90 	vmov	s15, r3
 8104b52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104b56:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8104b90 <MPU9250_GetData+0x1d0>
 8104b5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104b6c:	3304      	adds	r3, #4
 8104b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104b72:	ee17 2a90 	vmov	r2, s15
 8104b76:	b212      	sxth	r2, r2
 8104b78:	801a      	strh	r2, [r3, #0]
}
 8104b7a:	bf00      	nop
 8104b7c:	3708      	adds	r7, #8
 8104b7e:	46bd      	mov	sp, r7
 8104b80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104b84:	b004      	add	sp, #16
 8104b86:	4770      	bx	lr
 8104b88:	100002f8 	.word	0x100002f8
 8104b8c:	10000310 	.word	0x10000310
 8104b90:	43800000 	.word	0x43800000

08104b94 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8104b94:	b480      	push	{r7}
 8104b96:	b083      	sub	sp, #12
 8104b98:	af00      	add	r7, sp, #0
 8104b9a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	687a      	ldr	r2, [r7, #4]
 8104ba0:	605a      	str	r2, [r3, #4]
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	685a      	ldr	r2, [r3, #4]
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	601a      	str	r2, [r3, #0]
}
 8104baa:	bf00      	nop
 8104bac:	370c      	adds	r7, #12
 8104bae:	46bd      	mov	sp, r7
 8104bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bb4:	4770      	bx	lr

08104bb6 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8104bb6:	b480      	push	{r7}
 8104bb8:	b083      	sub	sp, #12
 8104bba:	af00      	add	r7, sp, #0
 8104bbc:	6078      	str	r0, [r7, #4]
 8104bbe:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	685a      	ldr	r2, [r3, #4]
 8104bc4:	683b      	ldr	r3, [r7, #0]
 8104bc6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8104bc8:	683b      	ldr	r3, [r7, #0]
 8104bca:	687a      	ldr	r2, [r7, #4]
 8104bcc:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8104bce:	683b      	ldr	r3, [r7, #0]
 8104bd0:	681b      	ldr	r3, [r3, #0]
 8104bd2:	683a      	ldr	r2, [r7, #0]
 8104bd4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8104bd6:	683b      	ldr	r3, [r7, #0]
 8104bd8:	685b      	ldr	r3, [r3, #4]
 8104bda:	683a      	ldr	r2, [r7, #0]
 8104bdc:	601a      	str	r2, [r3, #0]
}
 8104bde:	bf00      	nop
 8104be0:	370c      	adds	r7, #12
 8104be2:	46bd      	mov	sp, r7
 8104be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104be8:	4770      	bx	lr

08104bea <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8104bea:	b580      	push	{r7, lr}
 8104bec:	b082      	sub	sp, #8
 8104bee:	af00      	add	r7, sp, #0
 8104bf0:	6078      	str	r0, [r7, #4]
 8104bf2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8104bf4:	6839      	ldr	r1, [r7, #0]
 8104bf6:	6878      	ldr	r0, [r7, #4]
 8104bf8:	f7ff ffdd 	bl	8104bb6 <metal_list_add_before>
}
 8104bfc:	bf00      	nop
 8104bfe:	3708      	adds	r7, #8
 8104c00:	46bd      	mov	sp, r7
 8104c02:	bd80      	pop	{r7, pc}

08104c04 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8104c04:	b580      	push	{r7, lr}
 8104c06:	b082      	sub	sp, #8
 8104c08:	af00      	add	r7, sp, #0
 8104c0a:	6078      	str	r0, [r7, #4]
 8104c0c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8104c0e:	6839      	ldr	r1, [r7, #0]
 8104c10:	6878      	ldr	r0, [r7, #4]
 8104c12:	f001 fdb9 	bl	8106788 <metal_machine_cache_flush>
}
 8104c16:	bf00      	nop
 8104c18:	3708      	adds	r7, #8
 8104c1a:	46bd      	mov	sp, r7
 8104c1c:	bd80      	pop	{r7, pc}

08104c1e <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8104c1e:	b580      	push	{r7, lr}
 8104c20:	b082      	sub	sp, #8
 8104c22:	af00      	add	r7, sp, #0
 8104c24:	6078      	str	r0, [r7, #4]
 8104c26:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8104c28:	6839      	ldr	r1, [r7, #0]
 8104c2a:	6878      	ldr	r0, [r7, #4]
 8104c2c:	f001 fdb7 	bl	810679e <metal_machine_cache_invalidate>
}
 8104c30:	bf00      	nop
 8104c32:	3708      	adds	r7, #8
 8104c34:	46bd      	mov	sp, r7
 8104c36:	bd80      	pop	{r7, pc}

08104c38 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8104c38:	b580      	push	{r7, lr}
 8104c3a:	b082      	sub	sp, #8
 8104c3c:	af00      	add	r7, sp, #0
 8104c3e:	6078      	str	r0, [r7, #4]
 8104c40:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8104c42:	6839      	ldr	r1, [r7, #0]
 8104c44:	6878      	ldr	r0, [r7, #4]
 8104c46:	f7ff ffdd 	bl	8104c04 <__metal_cache_flush>
}
 8104c4a:	bf00      	nop
 8104c4c:	3708      	adds	r7, #8
 8104c4e:	46bd      	mov	sp, r7
 8104c50:	bd80      	pop	{r7, pc}

08104c52 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8104c52:	b580      	push	{r7, lr}
 8104c54:	b082      	sub	sp, #8
 8104c56:	af00      	add	r7, sp, #0
 8104c58:	6078      	str	r0, [r7, #4]
 8104c5a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8104c5c:	6839      	ldr	r1, [r7, #0]
 8104c5e:	6878      	ldr	r0, [r7, #4]
 8104c60:	f7ff ffdd 	bl	8104c1e <__metal_cache_invalidate>
}
 8104c64:	bf00      	nop
 8104c66:	3708      	adds	r7, #8
 8104c68:	46bd      	mov	sp, r7
 8104c6a:	bd80      	pop	{r7, pc}

08104c6c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8104c6c:	b580      	push	{r7, lr}
 8104c6e:	b082      	sub	sp, #8
 8104c70:	af00      	add	r7, sp, #0
 8104c72:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	2b00      	cmp	r3, #0
 8104c78:	d008      	beq.n	8104c8c <metal_bus_register+0x20>
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	2b00      	cmp	r3, #0
 8104c80:	d004      	beq.n	8104c8c <metal_bus_register+0x20>
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	781b      	ldrb	r3, [r3, #0]
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d102      	bne.n	8104c92 <metal_bus_register+0x26>
		return -EINVAL;
 8104c8c:	f06f 0315 	mvn.w	r3, #21
 8104c90:	e026      	b.n	8104ce0 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	2100      	movs	r1, #0
 8104c98:	4618      	mov	r0, r3
 8104c9a:	f000 f82b 	bl	8104cf4 <metal_bus_find>
 8104c9e:	4603      	mov	r3, r0
 8104ca0:	2b00      	cmp	r3, #0
 8104ca2:	d102      	bne.n	8104caa <metal_bus_register+0x3e>
		return -EEXIST;
 8104ca4:	f06f 0310 	mvn.w	r3, #16
 8104ca8:	e01a      	b.n	8104ce0 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	331c      	adds	r3, #28
 8104cae:	4618      	mov	r0, r3
 8104cb0:	f7ff ff70 	bl	8104b94 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	3324      	adds	r3, #36	; 0x24
 8104cb8:	4619      	mov	r1, r3
 8104cba:	480b      	ldr	r0, [pc, #44]	; (8104ce8 <metal_bus_register+0x7c>)
 8104cbc:	f7ff ff95 	bl	8104bea <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8104cc0:	4b0a      	ldr	r3, [pc, #40]	; (8104cec <metal_bus_register+0x80>)
 8104cc2:	781b      	ldrb	r3, [r3, #0]
 8104cc4:	2b06      	cmp	r3, #6
 8104cc6:	d90a      	bls.n	8104cde <metal_bus_register+0x72>
 8104cc8:	4b08      	ldr	r3, [pc, #32]	; (8104cec <metal_bus_register+0x80>)
 8104cca:	685b      	ldr	r3, [r3, #4]
 8104ccc:	2b00      	cmp	r3, #0
 8104cce:	d006      	beq.n	8104cde <metal_bus_register+0x72>
 8104cd0:	4b06      	ldr	r3, [pc, #24]	; (8104cec <metal_bus_register+0x80>)
 8104cd2:	685b      	ldr	r3, [r3, #4]
 8104cd4:	687a      	ldr	r2, [r7, #4]
 8104cd6:	6812      	ldr	r2, [r2, #0]
 8104cd8:	4905      	ldr	r1, [pc, #20]	; (8104cf0 <metal_bus_register+0x84>)
 8104cda:	2007      	movs	r0, #7
 8104cdc:	4798      	blx	r3
	return 0;
 8104cde:	2300      	movs	r3, #0
}
 8104ce0:	4618      	mov	r0, r3
 8104ce2:	3708      	adds	r7, #8
 8104ce4:	46bd      	mov	sp, r7
 8104ce6:	bd80      	pop	{r7, pc}
 8104ce8:	100004e4 	.word	0x100004e4
 8104cec:	100004dc 	.word	0x100004dc
 8104cf0:	0810bad8 	.word	0x0810bad8

08104cf4 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8104cf4:	b580      	push	{r7, lr}
 8104cf6:	b084      	sub	sp, #16
 8104cf8:	af00      	add	r7, sp, #0
 8104cfa:	6078      	str	r0, [r7, #4]
 8104cfc:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8104cfe:	4b13      	ldr	r3, [pc, #76]	; (8104d4c <metal_bus_find+0x58>)
 8104d00:	689b      	ldr	r3, [r3, #8]
 8104d02:	60fb      	str	r3, [r7, #12]
 8104d04:	e017      	b.n	8104d36 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8104d06:	68fb      	ldr	r3, [r7, #12]
 8104d08:	3b24      	subs	r3, #36	; 0x24
 8104d0a:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8104d0c:	68bb      	ldr	r3, [r7, #8]
 8104d0e:	681b      	ldr	r3, [r3, #0]
 8104d10:	6879      	ldr	r1, [r7, #4]
 8104d12:	4618      	mov	r0, r3
 8104d14:	f7fb fae4 	bl	81002e0 <strcmp>
 8104d18:	4603      	mov	r3, r0
 8104d1a:	2b00      	cmp	r3, #0
 8104d1c:	d003      	beq.n	8104d26 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104d1e:	68fb      	ldr	r3, [r7, #12]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	60fb      	str	r3, [r7, #12]
 8104d24:	e007      	b.n	8104d36 <metal_bus_find+0x42>
			continue;
		if (result)
 8104d26:	683b      	ldr	r3, [r7, #0]
 8104d28:	2b00      	cmp	r3, #0
 8104d2a:	d002      	beq.n	8104d32 <metal_bus_find+0x3e>
			*result = bus;
 8104d2c:	683b      	ldr	r3, [r7, #0]
 8104d2e:	68ba      	ldr	r2, [r7, #8]
 8104d30:	601a      	str	r2, [r3, #0]
		return 0;
 8104d32:	2300      	movs	r3, #0
 8104d34:	e005      	b.n	8104d42 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104d36:	68fb      	ldr	r3, [r7, #12]
 8104d38:	4a05      	ldr	r2, [pc, #20]	; (8104d50 <metal_bus_find+0x5c>)
 8104d3a:	4293      	cmp	r3, r2
 8104d3c:	d1e3      	bne.n	8104d06 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8104d3e:	f06f 0301 	mvn.w	r3, #1
}
 8104d42:	4618      	mov	r0, r3
 8104d44:	3710      	adds	r7, #16
 8104d46:	46bd      	mov	sp, r7
 8104d48:	bd80      	pop	{r7, pc}
 8104d4a:	bf00      	nop
 8104d4c:	100004dc 	.word	0x100004dc
 8104d50:	100004e4 	.word	0x100004e4

08104d54 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8104d54:	b580      	push	{r7, lr}
 8104d56:	b086      	sub	sp, #24
 8104d58:	af00      	add	r7, sp, #0
 8104d5a:	60f8      	str	r0, [r7, #12]
 8104d5c:	60b9      	str	r1, [r7, #8]
 8104d5e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8104d60:	68fb      	ldr	r3, [r7, #12]
 8104d62:	2b00      	cmp	r3, #0
 8104d64:	d00d      	beq.n	8104d82 <metal_device_open+0x2e>
 8104d66:	68fb      	ldr	r3, [r7, #12]
 8104d68:	781b      	ldrb	r3, [r3, #0]
 8104d6a:	2b00      	cmp	r3, #0
 8104d6c:	d009      	beq.n	8104d82 <metal_device_open+0x2e>
 8104d6e:	68bb      	ldr	r3, [r7, #8]
 8104d70:	2b00      	cmp	r3, #0
 8104d72:	d006      	beq.n	8104d82 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8104d74:	68bb      	ldr	r3, [r7, #8]
 8104d76:	781b      	ldrb	r3, [r3, #0]
 8104d78:	2b00      	cmp	r3, #0
 8104d7a:	d002      	beq.n	8104d82 <metal_device_open+0x2e>
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	2b00      	cmp	r3, #0
 8104d80:	d102      	bne.n	8104d88 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8104d82:	f06f 0315 	mvn.w	r3, #21
 8104d86:	e01f      	b.n	8104dc8 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8104d88:	f107 0310 	add.w	r3, r7, #16
 8104d8c:	4619      	mov	r1, r3
 8104d8e:	68f8      	ldr	r0, [r7, #12]
 8104d90:	f7ff ffb0 	bl	8104cf4 <metal_bus_find>
 8104d94:	6178      	str	r0, [r7, #20]
	if (error)
 8104d96:	697b      	ldr	r3, [r7, #20]
 8104d98:	2b00      	cmp	r3, #0
 8104d9a:	d001      	beq.n	8104da0 <metal_device_open+0x4c>
		return error;
 8104d9c:	697b      	ldr	r3, [r7, #20]
 8104d9e:	e013      	b.n	8104dc8 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8104da0:	693b      	ldr	r3, [r7, #16]
 8104da2:	689b      	ldr	r3, [r3, #8]
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d102      	bne.n	8104dae <metal_device_open+0x5a>
		return -ENODEV;
 8104da8:	f06f 0312 	mvn.w	r3, #18
 8104dac:	e00c      	b.n	8104dc8 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8104dae:	693b      	ldr	r3, [r7, #16]
 8104db0:	689b      	ldr	r3, [r3, #8]
 8104db2:	6938      	ldr	r0, [r7, #16]
 8104db4:	687a      	ldr	r2, [r7, #4]
 8104db6:	68b9      	ldr	r1, [r7, #8]
 8104db8:	4798      	blx	r3
 8104dba:	6178      	str	r0, [r7, #20]
	if (error)
 8104dbc:	697b      	ldr	r3, [r7, #20]
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d001      	beq.n	8104dc6 <metal_device_open+0x72>
		return error;
 8104dc2:	697b      	ldr	r3, [r7, #20]
 8104dc4:	e000      	b.n	8104dc8 <metal_device_open+0x74>

	return 0;
 8104dc6:	2300      	movs	r3, #0
}
 8104dc8:	4618      	mov	r0, r3
 8104dca:	3718      	adds	r7, #24
 8104dcc:	46bd      	mov	sp, r7
 8104dce:	bd80      	pop	{r7, pc}

08104dd0 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8104dd0:	b580      	push	{r7, lr}
 8104dd2:	b082      	sub	sp, #8
 8104dd4:	af00      	add	r7, sp, #0
 8104dd6:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	2b00      	cmp	r3, #0
 8104dde:	d008      	beq.n	8104df2 <metal_register_generic_device+0x22>
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	781b      	ldrb	r3, [r3, #0]
 8104de6:	2b00      	cmp	r3, #0
 8104de8:	d003      	beq.n	8104df2 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8104dee:	2b02      	cmp	r3, #2
 8104df0:	d902      	bls.n	8104df8 <metal_register_generic_device+0x28>
		return -EINVAL;
 8104df2:	f06f 0315 	mvn.w	r3, #21
 8104df6:	e009      	b.n	8104e0c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	4a06      	ldr	r2, [pc, #24]	; (8104e14 <metal_register_generic_device+0x44>)
 8104dfc:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	336c      	adds	r3, #108	; 0x6c
 8104e02:	4619      	mov	r1, r3
 8104e04:	4804      	ldr	r0, [pc, #16]	; (8104e18 <metal_register_generic_device+0x48>)
 8104e06:	f7ff fef0 	bl	8104bea <metal_list_add_tail>
			    &device->node);
	return 0;
 8104e0a:	2300      	movs	r3, #0
}
 8104e0c:	4618      	mov	r0, r3
 8104e0e:	3708      	adds	r7, #8
 8104e10:	46bd      	mov	sp, r7
 8104e12:	bd80      	pop	{r7, pc}
 8104e14:	10000010 	.word	0x10000010
 8104e18:	100004f4 	.word	0x100004f4

08104e1c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8104e1c:	b580      	push	{r7, lr}
 8104e1e:	b086      	sub	sp, #24
 8104e20:	af00      	add	r7, sp, #0
 8104e22:	60f8      	str	r0, [r7, #12]
 8104e24:	60b9      	str	r1, [r7, #8]
 8104e26:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104e28:	4b12      	ldr	r3, [pc, #72]	; (8104e74 <metal_generic_dev_open+0x58>)
 8104e2a:	699b      	ldr	r3, [r3, #24]
 8104e2c:	617b      	str	r3, [r7, #20]
 8104e2e:	e017      	b.n	8104e60 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8104e30:	697b      	ldr	r3, [r7, #20]
 8104e32:	3b6c      	subs	r3, #108	; 0x6c
 8104e34:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8104e36:	693b      	ldr	r3, [r7, #16]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	68b9      	ldr	r1, [r7, #8]
 8104e3c:	4618      	mov	r0, r3
 8104e3e:	f7fb fa4f 	bl	81002e0 <strcmp>
 8104e42:	4603      	mov	r3, r0
 8104e44:	2b00      	cmp	r3, #0
 8104e46:	d003      	beq.n	8104e50 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104e48:	697b      	ldr	r3, [r7, #20]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	617b      	str	r3, [r7, #20]
 8104e4e:	e007      	b.n	8104e60 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	693a      	ldr	r2, [r7, #16]
 8104e54:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8104e56:	6938      	ldr	r0, [r7, #16]
 8104e58:	f000 f88c 	bl	8104f74 <metal_generic_dev_sys_open>
 8104e5c:	4603      	mov	r3, r0
 8104e5e:	e005      	b.n	8104e6c <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104e60:	697b      	ldr	r3, [r7, #20]
 8104e62:	4a05      	ldr	r2, [pc, #20]	; (8104e78 <metal_generic_dev_open+0x5c>)
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d1e3      	bne.n	8104e30 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8104e68:	f06f 0312 	mvn.w	r3, #18
}
 8104e6c:	4618      	mov	r0, r3
 8104e6e:	3718      	adds	r7, #24
 8104e70:	46bd      	mov	sp, r7
 8104e72:	bd80      	pop	{r7, pc}
 8104e74:	100004dc 	.word	0x100004dc
 8104e78:	100004f4 	.word	0x100004f4

08104e7c <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8104e7c:	b580      	push	{r7, lr}
 8104e7e:	b086      	sub	sp, #24
 8104e80:	af00      	add	r7, sp, #0
 8104e82:	60f8      	str	r0, [r7, #12]
 8104e84:	60b9      	str	r1, [r7, #8]
 8104e86:	607a      	str	r2, [r7, #4]
 8104e88:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8104e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104e8c:	683b      	ldr	r3, [r7, #0]
 8104e8e:	429a      	cmp	r2, r3
 8104e90:	d009      	beq.n	8104ea6 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8104e92:	6a3a      	ldr	r2, [r7, #32]
 8104e94:	4613      	mov	r3, r2
 8104e96:	005b      	lsls	r3, r3, #1
 8104e98:	4413      	add	r3, r2
 8104e9a:	009b      	lsls	r3, r3, #2
 8104e9c:	461a      	mov	r2, r3
 8104e9e:	6839      	ldr	r1, [r7, #0]
 8104ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8104ea2:	f002 f9fd 	bl	81072a0 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8104ea6:	2300      	movs	r3, #0
 8104ea8:	617b      	str	r3, [r7, #20]
 8104eaa:	e02f      	b.n	8104f0c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	2b02      	cmp	r3, #2
 8104eb0:	d114      	bne.n	8104edc <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8104eb2:	697a      	ldr	r2, [r7, #20]
 8104eb4:	4613      	mov	r3, r2
 8104eb6:	005b      	lsls	r3, r3, #1
 8104eb8:	4413      	add	r3, r2
 8104eba:	009b      	lsls	r3, r3, #2
 8104ebc:	461a      	mov	r2, r3
 8104ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ec0:	4413      	add	r3, r2
 8104ec2:	6818      	ldr	r0, [r3, #0]
 8104ec4:	697a      	ldr	r2, [r7, #20]
 8104ec6:	4613      	mov	r3, r2
 8104ec8:	005b      	lsls	r3, r3, #1
 8104eca:	4413      	add	r3, r2
 8104ecc:	009b      	lsls	r3, r3, #2
 8104ece:	461a      	mov	r2, r3
 8104ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ed2:	4413      	add	r3, r2
 8104ed4:	689b      	ldr	r3, [r3, #8]
 8104ed6:	4619      	mov	r1, r3
 8104ed8:	f7ff feae 	bl	8104c38 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8104edc:	697a      	ldr	r2, [r7, #20]
 8104ede:	4613      	mov	r3, r2
 8104ee0:	005b      	lsls	r3, r3, #1
 8104ee2:	4413      	add	r3, r2
 8104ee4:	009b      	lsls	r3, r3, #2
 8104ee6:	461a      	mov	r2, r3
 8104ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104eea:	4413      	add	r3, r2
 8104eec:	6818      	ldr	r0, [r3, #0]
 8104eee:	697a      	ldr	r2, [r7, #20]
 8104ef0:	4613      	mov	r3, r2
 8104ef2:	005b      	lsls	r3, r3, #1
 8104ef4:	4413      	add	r3, r2
 8104ef6:	009b      	lsls	r3, r3, #2
 8104ef8:	461a      	mov	r2, r3
 8104efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104efc:	4413      	add	r3, r2
 8104efe:	689b      	ldr	r3, [r3, #8]
 8104f00:	4619      	mov	r1, r3
 8104f02:	f7ff fea6 	bl	8104c52 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8104f06:	697b      	ldr	r3, [r7, #20]
 8104f08:	3301      	adds	r3, #1
 8104f0a:	617b      	str	r3, [r7, #20]
 8104f0c:	697a      	ldr	r2, [r7, #20]
 8104f0e:	6a3b      	ldr	r3, [r7, #32]
 8104f10:	429a      	cmp	r2, r3
 8104f12:	dbcb      	blt.n	8104eac <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8104f14:	6a3b      	ldr	r3, [r7, #32]
}
 8104f16:	4618      	mov	r0, r3
 8104f18:	3718      	adds	r7, #24
 8104f1a:	46bd      	mov	sp, r7
 8104f1c:	bd80      	pop	{r7, pc}

08104f1e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8104f1e:	b580      	push	{r7, lr}
 8104f20:	b086      	sub	sp, #24
 8104f22:	af00      	add	r7, sp, #0
 8104f24:	60f8      	str	r0, [r7, #12]
 8104f26:	60b9      	str	r1, [r7, #8]
 8104f28:	607a      	str	r2, [r7, #4]
 8104f2a:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8104f2c:	2300      	movs	r3, #0
 8104f2e:	617b      	str	r3, [r7, #20]
 8104f30:	e017      	b.n	8104f62 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8104f32:	697a      	ldr	r2, [r7, #20]
 8104f34:	4613      	mov	r3, r2
 8104f36:	005b      	lsls	r3, r3, #1
 8104f38:	4413      	add	r3, r2
 8104f3a:	009b      	lsls	r3, r3, #2
 8104f3c:	461a      	mov	r2, r3
 8104f3e:	683b      	ldr	r3, [r7, #0]
 8104f40:	4413      	add	r3, r2
 8104f42:	6818      	ldr	r0, [r3, #0]
 8104f44:	697a      	ldr	r2, [r7, #20]
 8104f46:	4613      	mov	r3, r2
 8104f48:	005b      	lsls	r3, r3, #1
 8104f4a:	4413      	add	r3, r2
 8104f4c:	009b      	lsls	r3, r3, #2
 8104f4e:	461a      	mov	r2, r3
 8104f50:	683b      	ldr	r3, [r7, #0]
 8104f52:	4413      	add	r3, r2
 8104f54:	689b      	ldr	r3, [r3, #8]
 8104f56:	4619      	mov	r1, r3
 8104f58:	f7ff fe7b 	bl	8104c52 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8104f5c:	697b      	ldr	r3, [r7, #20]
 8104f5e:	3301      	adds	r3, #1
 8104f60:	617b      	str	r3, [r7, #20]
 8104f62:	697a      	ldr	r2, [r7, #20]
 8104f64:	6a3b      	ldr	r3, [r7, #32]
 8104f66:	429a      	cmp	r2, r3
 8104f68:	dbe3      	blt.n	8104f32 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8104f6a:	bf00      	nop
 8104f6c:	bf00      	nop
 8104f6e:	3718      	adds	r7, #24
 8104f70:	46bd      	mov	sp, r7
 8104f72:	bd80      	pop	{r7, pc}

08104f74 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8104f74:	b580      	push	{r7, lr}
 8104f76:	b084      	sub	sp, #16
 8104f78:	af00      	add	r7, sp, #0
 8104f7a:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8104f7c:	2300      	movs	r3, #0
 8104f7e:	60fb      	str	r3, [r7, #12]
 8104f80:	e013      	b.n	8104faa <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8104f82:	68fa      	ldr	r2, [r7, #12]
 8104f84:	4613      	mov	r3, r2
 8104f86:	005b      	lsls	r3, r3, #1
 8104f88:	4413      	add	r3, r2
 8104f8a:	011b      	lsls	r3, r3, #4
 8104f8c:	3308      	adds	r3, #8
 8104f8e:	687a      	ldr	r2, [r7, #4]
 8104f90:	4413      	add	r3, r2
 8104f92:	3304      	adds	r3, #4
 8104f94:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8104f96:	68bb      	ldr	r3, [r7, #8]
 8104f98:	689b      	ldr	r3, [r3, #8]
 8104f9a:	2b00      	cmp	r3, #0
 8104f9c:	d00b      	beq.n	8104fb6 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8104f9e:	68b8      	ldr	r0, [r7, #8]
 8104fa0:	f000 f81e 	bl	8104fe0 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8104fa4:	68fb      	ldr	r3, [r7, #12]
 8104fa6:	3301      	adds	r3, #1
 8104fa8:	60fb      	str	r3, [r7, #12]
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	689b      	ldr	r3, [r3, #8]
 8104fae:	68fa      	ldr	r2, [r7, #12]
 8104fb0:	429a      	cmp	r2, r3
 8104fb2:	d3e6      	bcc.n	8104f82 <metal_generic_dev_sys_open+0xe>
 8104fb4:	e000      	b.n	8104fb8 <metal_generic_dev_sys_open+0x44>
			break;
 8104fb6:	bf00      	nop
	}

	return 0;
 8104fb8:	2300      	movs	r3, #0
}
 8104fba:	4618      	mov	r0, r3
 8104fbc:	3710      	adds	r7, #16
 8104fbe:	46bd      	mov	sp, r7
 8104fc0:	bd80      	pop	{r7, pc}
	...

08104fc4 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8104fc4:	b580      	push	{r7, lr}
 8104fc6:	b082      	sub	sp, #8
 8104fc8:	af00      	add	r7, sp, #0
 8104fca:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8104fcc:	4803      	ldr	r0, [pc, #12]	; (8104fdc <metal_sys_init+0x18>)
 8104fce:	f7ff fe4d 	bl	8104c6c <metal_bus_register>
	return 0;
 8104fd2:	2300      	movs	r3, #0
}
 8104fd4:	4618      	mov	r0, r3
 8104fd6:	3708      	adds	r7, #8
 8104fd8:	46bd      	mov	sp, r7
 8104fda:	bd80      	pop	{r7, pc}
 8104fdc:	10000010 	.word	0x10000010

08104fe0 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8104fe0:	b580      	push	{r7, lr}
 8104fe2:	b086      	sub	sp, #24
 8104fe4:	af00      	add	r7, sp, #0
 8104fe6:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	689b      	ldr	r3, [r3, #8]
 8104ff2:	613b      	str	r3, [r7, #16]
	if (psize) {
 8104ff4:	693b      	ldr	r3, [r7, #16]
 8104ff6:	2b00      	cmp	r3, #0
 8104ff8:	d02c      	beq.n	8105054 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	68db      	ldr	r3, [r3, #12]
 8104ffe:	693a      	ldr	r2, [r7, #16]
 8105000:	fa22 f303 	lsr.w	r3, r2, r3
 8105004:	2b00      	cmp	r3, #0
 8105006:	d005      	beq.n	8105014 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	68db      	ldr	r3, [r3, #12]
 810500c:	2201      	movs	r2, #1
 810500e:	fa02 f303 	lsl.w	r3, r2, r3
 8105012:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8105014:	2300      	movs	r3, #0
 8105016:	617b      	str	r3, [r7, #20]
 8105018:	e013      	b.n	8105042 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	685a      	ldr	r2, [r3, #4]
 810501e:	697b      	ldr	r3, [r7, #20]
 8105020:	009b      	lsls	r3, r3, #2
 8105022:	4413      	add	r3, r2
 8105024:	6819      	ldr	r1, [r3, #0]
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	695b      	ldr	r3, [r3, #20]
 810502a:	693a      	ldr	r2, [r7, #16]
 810502c:	68f8      	ldr	r0, [r7, #12]
 810502e:	f001 fbc1 	bl	81067b4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8105032:	693b      	ldr	r3, [r7, #16]
 8105034:	009b      	lsls	r3, r3, #2
 8105036:	68fa      	ldr	r2, [r7, #12]
 8105038:	4413      	add	r3, r2
 810503a:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810503c:	697b      	ldr	r3, [r7, #20]
 810503e:	3301      	adds	r3, #1
 8105040:	617b      	str	r3, [r7, #20]
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	689a      	ldr	r2, [r3, #8]
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	68db      	ldr	r3, [r3, #12]
 810504a:	fa22 f303 	lsr.w	r3, r2, r3
 810504e:	697a      	ldr	r2, [r7, #20]
 8105050:	429a      	cmp	r2, r3
 8105052:	d9e2      	bls.n	810501a <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8105054:	bf00      	nop
 8105056:	3718      	adds	r7, #24
 8105058:	46bd      	mov	sp, r7
 810505a:	bd80      	pop	{r7, pc}

0810505c <metal_list_init>:
{
 810505c:	b480      	push	{r7}
 810505e:	b083      	sub	sp, #12
 8105060:	af00      	add	r7, sp, #0
 8105062:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	687a      	ldr	r2, [r7, #4]
 8105068:	605a      	str	r2, [r3, #4]
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	685a      	ldr	r2, [r3, #4]
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	601a      	str	r2, [r3, #0]
}
 8105072:	bf00      	nop
 8105074:	370c      	adds	r7, #12
 8105076:	46bd      	mov	sp, r7
 8105078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810507c:	4770      	bx	lr
	...

08105080 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8105080:	b580      	push	{r7, lr}
 8105082:	b084      	sub	sp, #16
 8105084:	af00      	add	r7, sp, #0
 8105086:	6078      	str	r0, [r7, #4]
	int error = 0;
 8105088:	2300      	movs	r3, #0
 810508a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 810508c:	2220      	movs	r2, #32
 810508e:	2100      	movs	r1, #0
 8105090:	4810      	ldr	r0, [pc, #64]	; (81050d4 <metal_init+0x54>)
 8105092:	f002 f913 	bl	81072bc <memset>

	_metal.common.log_handler   = params->log_handler;
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	4a0e      	ldr	r2, [pc, #56]	; (81050d4 <metal_init+0x54>)
 810509c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	791a      	ldrb	r2, [r3, #4]
 81050a2:	4b0c      	ldr	r3, [pc, #48]	; (81050d4 <metal_init+0x54>)
 81050a4:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 81050a6:	480c      	ldr	r0, [pc, #48]	; (81050d8 <metal_init+0x58>)
 81050a8:	f7ff ffd8 	bl	810505c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 81050ac:	480b      	ldr	r0, [pc, #44]	; (81050dc <metal_init+0x5c>)
 81050ae:	f7ff ffd5 	bl	810505c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 81050b2:	480b      	ldr	r0, [pc, #44]	; (81050e0 <metal_init+0x60>)
 81050b4:	f7ff ffd2 	bl	810505c <metal_list_init>

	error = metal_sys_init(params);
 81050b8:	6878      	ldr	r0, [r7, #4]
 81050ba:	f7ff ff83 	bl	8104fc4 <metal_sys_init>
 81050be:	60f8      	str	r0, [r7, #12]
	if (error)
 81050c0:	68fb      	ldr	r3, [r7, #12]
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d001      	beq.n	81050ca <metal_init+0x4a>
		return error;
 81050c6:	68fb      	ldr	r3, [r7, #12]
 81050c8:	e000      	b.n	81050cc <metal_init+0x4c>

	return error;
 81050ca:	68fb      	ldr	r3, [r7, #12]
}
 81050cc:	4618      	mov	r0, r3
 81050ce:	3710      	adds	r7, #16
 81050d0:	46bd      	mov	sp, r7
 81050d2:	bd80      	pop	{r7, pc}
 81050d4:	100004dc 	.word	0x100004dc
 81050d8:	100004e4 	.word	0x100004e4
 81050dc:	100004ec 	.word	0x100004ec
 81050e0:	100004f4 	.word	0x100004f4

081050e4 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 81050e4:	b480      	push	{r7}
 81050e6:	b083      	sub	sp, #12
 81050e8:	af00      	add	r7, sp, #0
 81050ea:	6078      	str	r0, [r7, #4]
 81050ec:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 81050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81050f6:	d009      	beq.n	810510c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	689b      	ldr	r3, [r3, #8]
 81050fc:	683a      	ldr	r2, [r7, #0]
 81050fe:	429a      	cmp	r2, r3
 8105100:	d804      	bhi.n	810510c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8105106:	683b      	ldr	r3, [r7, #0]
 8105108:	4413      	add	r3, r2
 810510a:	e000      	b.n	810510e <metal_io_virt+0x2a>
 810510c:	2300      	movs	r3, #0
}
 810510e:	4618      	mov	r0, r3
 8105110:	370c      	adds	r7, #12
 8105112:	46bd      	mov	sp, r7
 8105114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105118:	4770      	bx	lr

0810511a <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 810511a:	b5b0      	push	{r4, r5, r7, lr}
 810511c:	b08a      	sub	sp, #40	; 0x28
 810511e:	af00      	add	r7, sp, #0
 8105120:	60f8      	str	r0, [r7, #12]
 8105122:	60b9      	str	r1, [r7, #8]
 8105124:	607a      	str	r2, [r7, #4]
 8105126:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8105128:	f107 0310 	add.w	r3, r7, #16
 810512c:	2200      	movs	r2, #0
 810512e:	601a      	str	r2, [r3, #0]
 8105130:	605a      	str	r2, [r3, #4]
 8105132:	609a      	str	r2, [r3, #8]
 8105134:	60da      	str	r2, [r3, #12]
 8105136:	611a      	str	r2, [r3, #16]
 8105138:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	68ba      	ldr	r2, [r7, #8]
 810513e:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	687a      	ldr	r2, [r7, #4]
 8105144:	605a      	str	r2, [r3, #4]
	io->size = size;
 8105146:	68fb      	ldr	r3, [r7, #12]
 8105148:	683a      	ldr	r2, [r7, #0]
 810514a:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105150:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8105152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105154:	2b1f      	cmp	r3, #31
 8105156:	d904      	bls.n	8105162 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	f04f 32ff 	mov.w	r2, #4294967295
 810515e:	611a      	str	r2, [r3, #16]
 8105160:	e006      	b.n	8105170 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8105162:	2201      	movs	r2, #1
 8105164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105166:	fa02 f303 	lsl.w	r3, r2, r3
 810516a:	1e5a      	subs	r2, r3, #1
 810516c:	68fb      	ldr	r3, [r7, #12]
 810516e:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8105170:	68fb      	ldr	r3, [r7, #12]
 8105172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8105174:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8105176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105178:	2b00      	cmp	r3, #0
 810517a:	d00b      	beq.n	8105194 <metal_io_init+0x7a>
 810517c:	68fb      	ldr	r3, [r7, #12]
 810517e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105180:	f103 0418 	add.w	r4, r3, #24
 8105184:	4615      	mov	r5, r2
 8105186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810518a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810518e:	e884 0003 	stmia.w	r4, {r0, r1}
 8105192:	e00a      	b.n	81051aa <metal_io_init+0x90>
 8105194:	68fb      	ldr	r3, [r7, #12]
 8105196:	f103 0418 	add.w	r4, r3, #24
 810519a:	f107 0510 	add.w	r5, r7, #16
 810519e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81051a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81051a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 81051a6:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 81051aa:	68f8      	ldr	r0, [r7, #12]
 81051ac:	f7ff ff18 	bl	8104fe0 <metal_sys_io_mem_map>
}
 81051b0:	bf00      	nop
 81051b2:	3728      	adds	r7, #40	; 0x28
 81051b4:	46bd      	mov	sp, r7
 81051b6:	bdb0      	pop	{r4, r5, r7, pc}

081051b8 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 81051b8:	b590      	push	{r4, r7, lr}
 81051ba:	b08b      	sub	sp, #44	; 0x2c
 81051bc:	af02      	add	r7, sp, #8
 81051be:	60f8      	str	r0, [r7, #12]
 81051c0:	60b9      	str	r1, [r7, #8]
 81051c2:	607a      	str	r2, [r7, #4]
 81051c4:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81051c6:	68b9      	ldr	r1, [r7, #8]
 81051c8:	68f8      	ldr	r0, [r7, #12]
 81051ca:	f7ff ff8b 	bl	81050e4 <metal_io_virt>
 81051ce:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	689b      	ldr	r3, [r3, #8]
 81051d8:	68ba      	ldr	r2, [r7, #8]
 81051da:	429a      	cmp	r2, r3
 81051dc:	d902      	bls.n	81051e4 <metal_io_block_read+0x2c>
		return -ERANGE;
 81051de:	f06f 0321 	mvn.w	r3, #33	; 0x21
 81051e2:	e05c      	b.n	810529e <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 81051e4:	683a      	ldr	r2, [r7, #0]
 81051e6:	68bb      	ldr	r3, [r7, #8]
 81051e8:	441a      	add	r2, r3
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	689b      	ldr	r3, [r3, #8]
 81051ee:	429a      	cmp	r2, r3
 81051f0:	d904      	bls.n	81051fc <metal_io_block_read+0x44>
		len = io->size - offset;
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	689a      	ldr	r2, [r3, #8]
 81051f6:	68bb      	ldr	r3, [r7, #8]
 81051f8:	1ad3      	subs	r3, r2, r3
 81051fa:	603b      	str	r3, [r7, #0]
	retlen = len;
 81051fc:	683b      	ldr	r3, [r7, #0]
 81051fe:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	6a1b      	ldr	r3, [r3, #32]
 8105204:	2b00      	cmp	r3, #0
 8105206:	d00a      	beq.n	810521e <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	6a1c      	ldr	r4, [r3, #32]
 810520c:	683b      	ldr	r3, [r7, #0]
 810520e:	9300      	str	r3, [sp, #0]
 8105210:	2305      	movs	r3, #5
 8105212:	687a      	ldr	r2, [r7, #4]
 8105214:	68b9      	ldr	r1, [r7, #8]
 8105216:	68f8      	ldr	r0, [r7, #12]
 8105218:	47a0      	blx	r4
 810521a:	6178      	str	r0, [r7, #20]
 810521c:	e03e      	b.n	810529c <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 810521e:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8105222:	e00c      	b.n	810523e <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8105224:	69fb      	ldr	r3, [r7, #28]
 8105226:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8105228:	69bb      	ldr	r3, [r7, #24]
 810522a:	701a      	strb	r2, [r3, #0]
			dest++;
 810522c:	69bb      	ldr	r3, [r7, #24]
 810522e:	3301      	adds	r3, #1
 8105230:	61bb      	str	r3, [r7, #24]
			ptr++;
 8105232:	69fb      	ldr	r3, [r7, #28]
 8105234:	3301      	adds	r3, #1
 8105236:	61fb      	str	r3, [r7, #28]
			len--;
 8105238:	683b      	ldr	r3, [r7, #0]
 810523a:	3b01      	subs	r3, #1
 810523c:	603b      	str	r3, [r7, #0]
		while ( len && (
 810523e:	683b      	ldr	r3, [r7, #0]
 8105240:	2b00      	cmp	r3, #0
 8105242:	d017      	beq.n	8105274 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8105244:	69bb      	ldr	r3, [r7, #24]
 8105246:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810524a:	2b00      	cmp	r3, #0
 810524c:	d1ea      	bne.n	8105224 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 810524e:	69fb      	ldr	r3, [r7, #28]
 8105250:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8105254:	2b00      	cmp	r3, #0
 8105256:	d1e5      	bne.n	8105224 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8105258:	e00c      	b.n	8105274 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 810525a:	69fb      	ldr	r3, [r7, #28]
 810525c:	681a      	ldr	r2, [r3, #0]
 810525e:	69bb      	ldr	r3, [r7, #24]
 8105260:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8105262:	69bb      	ldr	r3, [r7, #24]
 8105264:	3304      	adds	r3, #4
 8105266:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8105268:	69fb      	ldr	r3, [r7, #28]
 810526a:	3304      	adds	r3, #4
 810526c:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 810526e:	683b      	ldr	r3, [r7, #0]
 8105270:	3b04      	subs	r3, #4
 8105272:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8105274:	683b      	ldr	r3, [r7, #0]
 8105276:	2b03      	cmp	r3, #3
 8105278:	dcef      	bgt.n	810525a <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 810527a:	e00c      	b.n	8105296 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810527c:	69fb      	ldr	r3, [r7, #28]
 810527e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8105280:	69bb      	ldr	r3, [r7, #24]
 8105282:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8105284:	69bb      	ldr	r3, [r7, #24]
 8105286:	3301      	adds	r3, #1
 8105288:	61bb      	str	r3, [r7, #24]
 810528a:	69fb      	ldr	r3, [r7, #28]
 810528c:	3301      	adds	r3, #1
 810528e:	61fb      	str	r3, [r7, #28]
 8105290:	683b      	ldr	r3, [r7, #0]
 8105292:	3b01      	subs	r3, #1
 8105294:	603b      	str	r3, [r7, #0]
 8105296:	683b      	ldr	r3, [r7, #0]
 8105298:	2b00      	cmp	r3, #0
 810529a:	d1ef      	bne.n	810527c <metal_io_block_read+0xc4>
	}
	return retlen;
 810529c:	697b      	ldr	r3, [r7, #20]
}
 810529e:	4618      	mov	r0, r3
 81052a0:	3724      	adds	r7, #36	; 0x24
 81052a2:	46bd      	mov	sp, r7
 81052a4:	bd90      	pop	{r4, r7, pc}

081052a6 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 81052a6:	b590      	push	{r4, r7, lr}
 81052a8:	b08b      	sub	sp, #44	; 0x2c
 81052aa:	af02      	add	r7, sp, #8
 81052ac:	60f8      	str	r0, [r7, #12]
 81052ae:	60b9      	str	r1, [r7, #8]
 81052b0:	607a      	str	r2, [r7, #4]
 81052b2:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81052b4:	68b9      	ldr	r1, [r7, #8]
 81052b6:	68f8      	ldr	r0, [r7, #12]
 81052b8:	f7ff ff14 	bl	81050e4 <metal_io_virt>
 81052bc:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 81052c2:	68fb      	ldr	r3, [r7, #12]
 81052c4:	689b      	ldr	r3, [r3, #8]
 81052c6:	68ba      	ldr	r2, [r7, #8]
 81052c8:	429a      	cmp	r2, r3
 81052ca:	d902      	bls.n	81052d2 <metal_io_block_write+0x2c>
		return -ERANGE;
 81052cc:	f06f 0321 	mvn.w	r3, #33	; 0x21
 81052d0:	e05b      	b.n	810538a <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 81052d2:	683a      	ldr	r2, [r7, #0]
 81052d4:	68bb      	ldr	r3, [r7, #8]
 81052d6:	441a      	add	r2, r3
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	689b      	ldr	r3, [r3, #8]
 81052dc:	429a      	cmp	r2, r3
 81052de:	d904      	bls.n	81052ea <metal_io_block_write+0x44>
		len = io->size - offset;
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	689a      	ldr	r2, [r3, #8]
 81052e4:	68bb      	ldr	r3, [r7, #8]
 81052e6:	1ad3      	subs	r3, r2, r3
 81052e8:	603b      	str	r3, [r7, #0]
	retlen = len;
 81052ea:	683b      	ldr	r3, [r7, #0]
 81052ec:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 81052ee:	68fb      	ldr	r3, [r7, #12]
 81052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052f2:	2b00      	cmp	r3, #0
 81052f4:	d017      	beq.n	8105326 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 81052f6:	68fb      	ldr	r3, [r7, #12]
 81052f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 81052fa:	683b      	ldr	r3, [r7, #0]
 81052fc:	9300      	str	r3, [sp, #0]
 81052fe:	2305      	movs	r3, #5
 8105300:	687a      	ldr	r2, [r7, #4]
 8105302:	68b9      	ldr	r1, [r7, #8]
 8105304:	68f8      	ldr	r0, [r7, #12]
 8105306:	47a0      	blx	r4
 8105308:	6178      	str	r0, [r7, #20]
 810530a:	e03d      	b.n	8105388 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810530c:	69bb      	ldr	r3, [r7, #24]
 810530e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8105310:	69fb      	ldr	r3, [r7, #28]
 8105312:	701a      	strb	r2, [r3, #0]
			ptr++;
 8105314:	69fb      	ldr	r3, [r7, #28]
 8105316:	3301      	adds	r3, #1
 8105318:	61fb      	str	r3, [r7, #28]
			source++;
 810531a:	69bb      	ldr	r3, [r7, #24]
 810531c:	3301      	adds	r3, #1
 810531e:	61bb      	str	r3, [r7, #24]
			len--;
 8105320:	683b      	ldr	r3, [r7, #0]
 8105322:	3b01      	subs	r3, #1
 8105324:	603b      	str	r3, [r7, #0]
		while ( len && (
 8105326:	683b      	ldr	r3, [r7, #0]
 8105328:	2b00      	cmp	r3, #0
 810532a:	d017      	beq.n	810535c <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 810532c:	69fb      	ldr	r3, [r7, #28]
 810532e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8105332:	2b00      	cmp	r3, #0
 8105334:	d1ea      	bne.n	810530c <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8105336:	69bb      	ldr	r3, [r7, #24]
 8105338:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 810533c:	2b00      	cmp	r3, #0
 810533e:	d1e5      	bne.n	810530c <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105340:	e00c      	b.n	810535c <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8105342:	69bb      	ldr	r3, [r7, #24]
 8105344:	681a      	ldr	r2, [r3, #0]
 8105346:	69fb      	ldr	r3, [r7, #28]
 8105348:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810534a:	69fb      	ldr	r3, [r7, #28]
 810534c:	3304      	adds	r3, #4
 810534e:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8105350:	69bb      	ldr	r3, [r7, #24]
 8105352:	3304      	adds	r3, #4
 8105354:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8105356:	683b      	ldr	r3, [r7, #0]
 8105358:	3b04      	subs	r3, #4
 810535a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810535c:	683b      	ldr	r3, [r7, #0]
 810535e:	2b03      	cmp	r3, #3
 8105360:	dcef      	bgt.n	8105342 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8105362:	e00c      	b.n	810537e <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8105364:	69bb      	ldr	r3, [r7, #24]
 8105366:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8105368:	69fb      	ldr	r3, [r7, #28]
 810536a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 810536c:	69fb      	ldr	r3, [r7, #28]
 810536e:	3301      	adds	r3, #1
 8105370:	61fb      	str	r3, [r7, #28]
 8105372:	69bb      	ldr	r3, [r7, #24]
 8105374:	3301      	adds	r3, #1
 8105376:	61bb      	str	r3, [r7, #24]
 8105378:	683b      	ldr	r3, [r7, #0]
 810537a:	3b01      	subs	r3, #1
 810537c:	603b      	str	r3, [r7, #0]
 810537e:	683b      	ldr	r3, [r7, #0]
 8105380:	2b00      	cmp	r3, #0
 8105382:	d1ef      	bne.n	8105364 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8105384:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8105388:	697b      	ldr	r3, [r7, #20]
}
 810538a:	4618      	mov	r0, r3
 810538c:	3724      	adds	r7, #36	; 0x24
 810538e:	46bd      	mov	sp, r7
 8105390:	bd90      	pop	{r4, r7, pc}

08105392 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8105392:	b40e      	push	{r1, r2, r3}
 8105394:	b480      	push	{r7}
 8105396:	b082      	sub	sp, #8
 8105398:	af00      	add	r7, sp, #0
 810539a:	4603      	mov	r3, r0
 810539c:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 810539e:	bf00      	nop
 81053a0:	3708      	adds	r7, #8
 81053a2:	46bd      	mov	sp, r7
 81053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053a8:	b003      	add	sp, #12
 81053aa:	4770      	bx	lr

081053ac <metal_io_virt>:
{
 81053ac:	b480      	push	{r7}
 81053ae:	b083      	sub	sp, #12
 81053b0:	af00      	add	r7, sp, #0
 81053b2:	6078      	str	r0, [r7, #4]
 81053b4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81053be:	d009      	beq.n	81053d4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	689b      	ldr	r3, [r3, #8]
 81053c4:	683a      	ldr	r2, [r7, #0]
 81053c6:	429a      	cmp	r2, r3
 81053c8:	d804      	bhi.n	81053d4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81053ce:	683b      	ldr	r3, [r7, #0]
 81053d0:	4413      	add	r3, r2
 81053d2:	e000      	b.n	81053d6 <metal_io_virt+0x2a>
 81053d4:	2300      	movs	r3, #0
}
 81053d6:	4618      	mov	r0, r3
 81053d8:	370c      	adds	r7, #12
 81053da:	46bd      	mov	sp, r7
 81053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053e0:	4770      	bx	lr

081053e2 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 81053e2:	b480      	push	{r7}
 81053e4:	b085      	sub	sp, #20
 81053e6:	af00      	add	r7, sp, #0
 81053e8:	6078      	str	r0, [r7, #4]
 81053ea:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	683a      	ldr	r2, [r7, #0]
 81053f2:	1ad3      	subs	r3, r2, r3
 81053f4:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	689b      	ldr	r3, [r3, #8]
 81053fa:	68fa      	ldr	r2, [r7, #12]
 81053fc:	429a      	cmp	r2, r3
 81053fe:	d201      	bcs.n	8105404 <metal_io_virt_to_offset+0x22>
 8105400:	68fb      	ldr	r3, [r7, #12]
 8105402:	e001      	b.n	8105408 <metal_io_virt_to_offset+0x26>
 8105404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105408:	4618      	mov	r0, r3
 810540a:	3714      	adds	r7, #20
 810540c:	46bd      	mov	sp, r7
 810540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105412:	4770      	bx	lr

08105414 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8105414:	b590      	push	{r4, r7, lr}
 8105416:	b08d      	sub	sp, #52	; 0x34
 8105418:	af00      	add	r7, sp, #0
 810541a:	60f8      	str	r0, [r7, #12]
 810541c:	60b9      	str	r1, [r7, #8]
 810541e:	603b      	str	r3, [r7, #0]
 8105420:	4613      	mov	r3, r2
 8105422:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8105424:	68b9      	ldr	r1, [r7, #8]
 8105426:	68f8      	ldr	r0, [r7, #12]
 8105428:	f7ff ffc0 	bl	81053ac <metal_io_virt>
 810542c:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 810542e:	68fb      	ldr	r3, [r7, #12]
 8105430:	699b      	ldr	r3, [r3, #24]
 8105432:	2b00      	cmp	r3, #0
 8105434:	d009      	beq.n	810544a <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8105436:	68fb      	ldr	r3, [r7, #12]
 8105438:	699c      	ldr	r4, [r3, #24]
 810543a:	79fa      	ldrb	r2, [r7, #7]
 810543c:	683b      	ldr	r3, [r7, #0]
 810543e:	68b9      	ldr	r1, [r7, #8]
 8105440:	68f8      	ldr	r0, [r7, #12]
 8105442:	47a0      	blx	r4
 8105444:	4602      	mov	r2, r0
 8105446:	460b      	mov	r3, r1
 8105448:	e057      	b.n	81054fa <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 810544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810544c:	2b00      	cmp	r3, #0
 810544e:	d011      	beq.n	8105474 <metal_io_read+0x60>
 8105450:	683b      	ldr	r3, [r7, #0]
 8105452:	2b01      	cmp	r3, #1
 8105454:	d10e      	bne.n	8105474 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8105456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105458:	62bb      	str	r3, [r7, #40]	; 0x28
 810545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810545c:	f3bf 8f5b 	dmb	ish
 8105460:	781b      	ldrb	r3, [r3, #0]
 8105462:	f3bf 8f5b 	dmb	ish
 8105466:	b2db      	uxtb	r3, r3
 8105468:	76fb      	strb	r3, [r7, #27]
 810546a:	7efb      	ldrb	r3, [r7, #27]
 810546c:	b2da      	uxtb	r2, r3
 810546e:	f04f 0300 	mov.w	r3, #0
 8105472:	e042      	b.n	81054fa <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 8105474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105476:	2b00      	cmp	r3, #0
 8105478:	d011      	beq.n	810549e <metal_io_read+0x8a>
 810547a:	683b      	ldr	r3, [r7, #0]
 810547c:	2b02      	cmp	r3, #2
 810547e:	d10e      	bne.n	810549e <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8105480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105482:	627b      	str	r3, [r7, #36]	; 0x24
 8105484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105486:	f3bf 8f5b 	dmb	ish
 810548a:	881b      	ldrh	r3, [r3, #0]
 810548c:	f3bf 8f5b 	dmb	ish
 8105490:	b29b      	uxth	r3, r3
 8105492:	833b      	strh	r3, [r7, #24]
 8105494:	8b3b      	ldrh	r3, [r7, #24]
 8105496:	b29a      	uxth	r2, r3
 8105498:	f04f 0300 	mov.w	r3, #0
 810549c:	e02d      	b.n	81054fa <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 810549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054a0:	2b00      	cmp	r3, #0
 81054a2:	d010      	beq.n	81054c6 <metal_io_read+0xb2>
 81054a4:	683b      	ldr	r3, [r7, #0]
 81054a6:	2b04      	cmp	r3, #4
 81054a8:	d10d      	bne.n	81054c6 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 81054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054ac:	623b      	str	r3, [r7, #32]
 81054ae:	6a3b      	ldr	r3, [r7, #32]
 81054b0:	f3bf 8f5b 	dmb	ish
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	f3bf 8f5b 	dmb	ish
 81054ba:	617b      	str	r3, [r7, #20]
 81054bc:	697b      	ldr	r3, [r7, #20]
 81054be:	461a      	mov	r2, r3
 81054c0:	f04f 0300 	mov.w	r3, #0
 81054c4:	e019      	b.n	81054fa <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 81054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054c8:	2b00      	cmp	r3, #0
 81054ca:	d010      	beq.n	81054ee <metal_io_read+0xda>
 81054cc:	683b      	ldr	r3, [r7, #0]
 81054ce:	2b04      	cmp	r3, #4
 81054d0:	d10d      	bne.n	81054ee <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 81054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054d4:	61fb      	str	r3, [r7, #28]
 81054d6:	69fb      	ldr	r3, [r7, #28]
 81054d8:	f3bf 8f5b 	dmb	ish
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	f3bf 8f5b 	dmb	ish
 81054e2:	613b      	str	r3, [r7, #16]
 81054e4:	693b      	ldr	r3, [r7, #16]
 81054e6:	461a      	mov	r2, r3
 81054e8:	f04f 0300 	mov.w	r3, #0
 81054ec:	e005      	b.n	81054fa <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 81054ee:	4b05      	ldr	r3, [pc, #20]	; (8105504 <metal_io_read+0xf0>)
 81054f0:	4a05      	ldr	r2, [pc, #20]	; (8105508 <metal_io_read+0xf4>)
 81054f2:	21f0      	movs	r1, #240	; 0xf0
 81054f4:	4805      	ldr	r0, [pc, #20]	; (810550c <metal_io_read+0xf8>)
 81054f6:	f001 fe69 	bl	81071cc <__assert_func>
	return 0; /* quiet compiler */
}
 81054fa:	4610      	mov	r0, r2
 81054fc:	4619      	mov	r1, r3
 81054fe:	3734      	adds	r7, #52	; 0x34
 8105500:	46bd      	mov	sp, r7
 8105502:	bd90      	pop	{r4, r7, pc}
 8105504:	0810bb94 	.word	0x0810bb94
 8105508:	0810bd08 	.word	0x0810bd08
 810550c:	0810bb98 	.word	0x0810bb98

08105510 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8105510:	b580      	push	{r7, lr}
 8105512:	b082      	sub	sp, #8
 8105514:	af00      	add	r7, sp, #0
 8105516:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8105518:	6878      	ldr	r0, [r7, #4]
 810551a:	f001 feb1 	bl	8107280 <malloc>
 810551e:	4603      	mov	r3, r0
}
 8105520:	4618      	mov	r0, r3
 8105522:	3708      	adds	r7, #8
 8105524:	46bd      	mov	sp, r7
 8105526:	bd80      	pop	{r7, pc}

08105528 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8105528:	b580      	push	{r7, lr}
 810552a:	b082      	sub	sp, #8
 810552c:	af00      	add	r7, sp, #0
 810552e:	6078      	str	r0, [r7, #4]
	free(ptr);
 8105530:	6878      	ldr	r0, [r7, #4]
 8105532:	f001 fead 	bl	8107290 <free>
}
 8105536:	bf00      	nop
 8105538:	3708      	adds	r7, #8
 810553a:	46bd      	mov	sp, r7
 810553c:	bd80      	pop	{r7, pc}

0810553e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 810553e:	b580      	push	{r7, lr}
 8105540:	b084      	sub	sp, #16
 8105542:	af00      	add	r7, sp, #0
 8105544:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	3307      	adds	r3, #7
 810554a:	00db      	lsls	r3, r3, #3
 810554c:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 810554e:	68f8      	ldr	r0, [r7, #12]
 8105550:	f7ff ffde 	bl	8105510 <metal_allocate_memory>
 8105554:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8105556:	68bb      	ldr	r3, [r7, #8]
 8105558:	2b00      	cmp	r3, #0
 810555a:	d004      	beq.n	8105566 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 810555c:	68fa      	ldr	r2, [r7, #12]
 810555e:	2100      	movs	r1, #0
 8105560:	68b8      	ldr	r0, [r7, #8]
 8105562:	f001 feab 	bl	81072bc <memset>
	}

	return vqs;
 8105566:	68bb      	ldr	r3, [r7, #8]
}
 8105568:	4618      	mov	r0, r3
 810556a:	3710      	adds	r7, #16
 810556c:	46bd      	mov	sp, r7
 810556e:	bd80      	pop	{r7, pc}

08105570 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8105570:	b580      	push	{r7, lr}
 8105572:	b086      	sub	sp, #24
 8105574:	af00      	add	r7, sp, #0
 8105576:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	891b      	ldrh	r3, [r3, #8]
 810557c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105584:	693b      	ldr	r3, [r7, #16]
 8105586:	3b18      	subs	r3, #24
 8105588:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810558a:	693b      	ldr	r3, [r7, #16]
 810558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810558e:	697a      	ldr	r2, [r7, #20]
 8105590:	429a      	cmp	r2, r3
 8105592:	d905      	bls.n	81055a0 <rproc_virtio_virtqueue_notify+0x30>
 8105594:	4b0d      	ldr	r3, [pc, #52]	; (81055cc <rproc_virtio_virtqueue_notify+0x5c>)
 8105596:	4a0e      	ldr	r2, [pc, #56]	; (81055d0 <rproc_virtio_virtqueue_notify+0x60>)
 8105598:	2133      	movs	r1, #51	; 0x33
 810559a:	480e      	ldr	r0, [pc, #56]	; (81055d4 <rproc_virtio_virtqueue_notify+0x64>)
 810559c:	f001 fe16 	bl	81071cc <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 81055a0:	693b      	ldr	r3, [r7, #16]
 81055a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81055a4:	697a      	ldr	r2, [r7, #20]
 81055a6:	4613      	mov	r3, r2
 81055a8:	005b      	lsls	r3, r3, #1
 81055aa:	4413      	add	r3, r2
 81055ac:	00db      	lsls	r3, r3, #3
 81055ae:	440b      	add	r3, r1
 81055b0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 81055b2:	68fb      	ldr	r3, [r7, #12]
 81055b4:	691b      	ldr	r3, [r3, #16]
 81055b6:	68fa      	ldr	r2, [r7, #12]
 81055b8:	6810      	ldr	r0, [r2, #0]
 81055ba:	68ba      	ldr	r2, [r7, #8]
 81055bc:	6912      	ldr	r2, [r2, #16]
 81055be:	4611      	mov	r1, r2
 81055c0:	4798      	blx	r3
}
 81055c2:	bf00      	nop
 81055c4:	3718      	adds	r7, #24
 81055c6:	46bd      	mov	sp, r7
 81055c8:	bd80      	pop	{r7, pc}
 81055ca:	bf00      	nop
 81055cc:	0810bbe0 	.word	0x0810bbe0
 81055d0:	0810bce8 	.word	0x0810bce8
 81055d4:	0810bbfc 	.word	0x0810bbfc

081055d8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 81055d8:	b580      	push	{r7, lr}
 81055da:	b086      	sub	sp, #24
 81055dc:	af00      	add	r7, sp, #0
 81055de:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	3b18      	subs	r3, #24
 81055e4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81055e6:	697b      	ldr	r3, [r7, #20]
 81055e8:	689b      	ldr	r3, [r3, #8]
 81055ea:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81055ec:	697b      	ldr	r3, [r7, #20]
 81055ee:	68db      	ldr	r3, [r3, #12]
 81055f0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 81055f2:	693b      	ldr	r3, [r7, #16]
 81055f4:	3318      	adds	r3, #24
 81055f6:	4619      	mov	r1, r3
 81055f8:	68f8      	ldr	r0, [r7, #12]
 81055fa:	f7ff fef2 	bl	81053e2 <metal_io_virt_to_offset>
 81055fe:	4601      	mov	r1, r0
 8105600:	2301      	movs	r3, #1
 8105602:	2205      	movs	r2, #5
 8105604:	68f8      	ldr	r0, [r7, #12]
 8105606:	f7ff ff05 	bl	8105414 <metal_io_read>
 810560a:	4602      	mov	r2, r0
 810560c:	460b      	mov	r3, r1
 810560e:	4613      	mov	r3, r2
 8105610:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8105612:	7afb      	ldrb	r3, [r7, #11]
}
 8105614:	4618      	mov	r0, r3
 8105616:	3718      	adds	r7, #24
 8105618:	46bd      	mov	sp, r7
 810561a:	bd80      	pop	{r7, pc}

0810561c <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 810561c:	b580      	push	{r7, lr}
 810561e:	b086      	sub	sp, #24
 8105620:	af00      	add	r7, sp, #0
 8105622:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	3b18      	subs	r3, #24
 8105628:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810562a:	697b      	ldr	r3, [r7, #20]
 810562c:	689b      	ldr	r3, [r3, #8]
 810562e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105630:	697b      	ldr	r3, [r7, #20]
 8105632:	68db      	ldr	r3, [r3, #12]
 8105634:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8105636:	693b      	ldr	r3, [r7, #16]
 8105638:	330c      	adds	r3, #12
 810563a:	4619      	mov	r1, r3
 810563c:	68f8      	ldr	r0, [r7, #12]
 810563e:	f7ff fed0 	bl	81053e2 <metal_io_virt_to_offset>
 8105642:	4601      	mov	r1, r0
 8105644:	2304      	movs	r3, #4
 8105646:	2205      	movs	r2, #5
 8105648:	68f8      	ldr	r0, [r7, #12]
 810564a:	f7ff fee3 	bl	8105414 <metal_io_read>
 810564e:	4602      	mov	r2, r0
 8105650:	460b      	mov	r3, r1
 8105652:	4613      	mov	r3, r2
 8105654:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8105656:	68bb      	ldr	r3, [r7, #8]
}
 8105658:	4618      	mov	r0, r3
 810565a:	3718      	adds	r7, #24
 810565c:	46bd      	mov	sp, r7
 810565e:	bd80      	pop	{r7, pc}

08105660 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8105660:	b480      	push	{r7}
 8105662:	b083      	sub	sp, #12
 8105664:	af00      	add	r7, sp, #0
 8105666:	6078      	str	r0, [r7, #4]
 8105668:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 810566a:	2300      	movs	r3, #0
}
 810566c:	4618      	mov	r0, r3
 810566e:	370c      	adds	r7, #12
 8105670:	46bd      	mov	sp, r7
 8105672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105676:	4770      	bx	lr

08105678 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8105678:	b480      	push	{r7}
 810567a:	b085      	sub	sp, #20
 810567c:	af00      	add	r7, sp, #0
 810567e:	60f8      	str	r0, [r7, #12]
 8105680:	60b9      	str	r1, [r7, #8]
 8105682:	607a      	str	r2, [r7, #4]
 8105684:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8105686:	bf00      	nop
 8105688:	3714      	adds	r7, #20
 810568a:	46bd      	mov	sp, r7
 810568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105690:	4770      	bx	lr
	...

08105694 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8105694:	b580      	push	{r7, lr}
 8105696:	b08e      	sub	sp, #56	; 0x38
 8105698:	af00      	add	r7, sp, #0
 810569a:	60f8      	str	r0, [r7, #12]
 810569c:	60b9      	str	r1, [r7, #8]
 810569e:	607a      	str	r2, [r7, #4]
 81056a0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 81056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056a8:	7e5b      	ldrb	r3, [r3, #25]
 81056aa:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 81056ac:	2050      	movs	r0, #80	; 0x50
 81056ae:	f7ff ff2f 	bl	8105510 <metal_allocate_memory>
 81056b2:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 81056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d101      	bne.n	81056be <rproc_virtio_create_vdev+0x2a>
		return NULL;
 81056ba:	2300      	movs	r3, #0
 81056bc:	e092      	b.n	81057e4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 81056be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81056c0:	4613      	mov	r3, r2
 81056c2:	005b      	lsls	r3, r3, #1
 81056c4:	4413      	add	r3, r2
 81056c6:	00db      	lsls	r3, r3, #3
 81056c8:	4618      	mov	r0, r3
 81056ca:	f7ff ff21 	bl	8105510 <metal_allocate_memory>
 81056ce:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 81056d0:	6a3b      	ldr	r3, [r7, #32]
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	f000 8081 	beq.w	81057da <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 81056d8:	2250      	movs	r2, #80	; 0x50
 81056da:	2100      	movs	r1, #0
 81056dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81056de:	f001 fded 	bl	81072bc <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 81056e2:	2218      	movs	r2, #24
 81056e4:	2100      	movs	r1, #0
 81056e6:	6a38      	ldr	r0, [r7, #32]
 81056e8:	f001 fde8 	bl	81072bc <memset>
	vdev = &rpvdev->vdev;
 81056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81056ee:	3318      	adds	r3, #24
 81056f0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 81056f2:	2300      	movs	r3, #0
 81056f4:	637b      	str	r3, [r7, #52]	; 0x34
 81056f6:	e025      	b.n	8105744 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 81056f8:	2300      	movs	r3, #0
 81056fa:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 81056fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81056fe:	4613      	mov	r3, r2
 8105700:	009b      	lsls	r3, r3, #2
 8105702:	4413      	add	r3, r2
 8105704:	009b      	lsls	r3, r3, #2
 8105706:	3318      	adds	r3, #24
 8105708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810570a:	4413      	add	r3, r2
 810570c:	3304      	adds	r3, #4
 810570e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8105710:	68fb      	ldr	r3, [r7, #12]
 8105712:	2b00      	cmp	r3, #0
 8105714:	d102      	bne.n	810571c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8105716:	69bb      	ldr	r3, [r7, #24]
 8105718:	689b      	ldr	r3, [r3, #8]
 810571a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 810571c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810571e:	f7ff ff0e 	bl	810553e <virtqueue_allocate>
 8105722:	6178      	str	r0, [r7, #20]
		if (!vq)
 8105724:	697b      	ldr	r3, [r7, #20]
 8105726:	2b00      	cmp	r3, #0
 8105728:	d031      	beq.n	810578e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 810572a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810572c:	4613      	mov	r3, r2
 810572e:	005b      	lsls	r3, r3, #1
 8105730:	4413      	add	r3, r2
 8105732:	00db      	lsls	r3, r3, #3
 8105734:	461a      	mov	r2, r3
 8105736:	6a3b      	ldr	r3, [r7, #32]
 8105738:	4413      	add	r3, r2
 810573a:	697a      	ldr	r2, [r7, #20]
 810573c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 810573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105740:	3301      	adds	r3, #1
 8105742:	637b      	str	r3, [r7, #52]	; 0x34
 8105744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105748:	429a      	cmp	r2, r3
 810574a:	d3d5      	bcc.n	81056f8 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 810574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810574e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105750:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8105752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105756:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8105758:	69fb      	ldr	r3, [r7, #28]
 810575a:	6a3a      	ldr	r2, [r7, #32]
 810575c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 810575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105762:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8105764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105766:	683a      	ldr	r2, [r7, #0]
 8105768:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 810576a:	69fb      	ldr	r3, [r7, #28]
 810576c:	68ba      	ldr	r2, [r7, #8]
 810576e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8105770:	69fb      	ldr	r3, [r7, #28]
 8105772:	68fa      	ldr	r2, [r7, #12]
 8105774:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8105776:	69fb      	ldr	r3, [r7, #28]
 8105778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810577a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 810577c:	69fb      	ldr	r3, [r7, #28]
 810577e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105780:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8105782:	69fb      	ldr	r3, [r7, #28]
 8105784:	4a19      	ldr	r2, [pc, #100]	; (81057ec <rproc_virtio_create_vdev+0x158>)
 8105786:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8105788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810578a:	3318      	adds	r3, #24
 810578c:	e02a      	b.n	81057e4 <rproc_virtio_create_vdev+0x150>
			goto err1;
 810578e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8105790:	2300      	movs	r3, #0
 8105792:	637b      	str	r3, [r7, #52]	; 0x34
 8105794:	e019      	b.n	81057ca <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8105796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105798:	4613      	mov	r3, r2
 810579a:	005b      	lsls	r3, r3, #1
 810579c:	4413      	add	r3, r2
 810579e:	00db      	lsls	r3, r3, #3
 81057a0:	461a      	mov	r2, r3
 81057a2:	6a3b      	ldr	r3, [r7, #32]
 81057a4:	4413      	add	r3, r2
 81057a6:	681b      	ldr	r3, [r3, #0]
 81057a8:	2b00      	cmp	r3, #0
 81057aa:	d00b      	beq.n	81057c4 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 81057ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057ae:	4613      	mov	r3, r2
 81057b0:	005b      	lsls	r3, r3, #1
 81057b2:	4413      	add	r3, r2
 81057b4:	00db      	lsls	r3, r3, #3
 81057b6:	461a      	mov	r2, r3
 81057b8:	6a3b      	ldr	r3, [r7, #32]
 81057ba:	4413      	add	r3, r2
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	4618      	mov	r0, r3
 81057c0:	f7ff feb2 	bl	8105528 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 81057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81057c6:	3301      	adds	r3, #1
 81057c8:	637b      	str	r3, [r7, #52]	; 0x34
 81057ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057ce:	429a      	cmp	r2, r3
 81057d0:	d3e1      	bcc.n	8105796 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 81057d2:	6a38      	ldr	r0, [r7, #32]
 81057d4:	f7ff fea8 	bl	8105528 <metal_free_memory>
 81057d8:	e000      	b.n	81057dc <rproc_virtio_create_vdev+0x148>
		goto err0;
 81057da:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 81057dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81057de:	f7ff fea3 	bl	8105528 <metal_free_memory>
	return NULL;
 81057e2:	2300      	movs	r3, #0
}
 81057e4:	4618      	mov	r0, r3
 81057e6:	3738      	adds	r7, #56	; 0x38
 81057e8:	46bd      	mov	sp, r7
 81057ea:	bd80      	pop	{r7, pc}
 81057ec:	0810bcc4 	.word	0x0810bcc4

081057f0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 81057f0:	b480      	push	{r7}
 81057f2:	b087      	sub	sp, #28
 81057f4:	af00      	add	r7, sp, #0
 81057f6:	60f8      	str	r0, [r7, #12]
 81057f8:	60b9      	str	r1, [r7, #8]
 81057fa:	607a      	str	r2, [r7, #4]
 81057fc:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105802:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8105804:	68ba      	ldr	r2, [r7, #8]
 8105806:	697b      	ldr	r3, [r7, #20]
 8105808:	429a      	cmp	r2, r3
 810580a:	d302      	bcc.n	8105812 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 810580c:	f06f 0301 	mvn.w	r3, #1
 8105810:	e019      	b.n	8105846 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8105812:	68fb      	ldr	r3, [r7, #12]
 8105814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105816:	68ba      	ldr	r2, [r7, #8]
 8105818:	4613      	mov	r3, r2
 810581a:	005b      	lsls	r3, r3, #1
 810581c:	4413      	add	r3, r2
 810581e:	00db      	lsls	r3, r3, #3
 8105820:	440b      	add	r3, r1
 8105822:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8105824:	693b      	ldr	r3, [r7, #16]
 8105826:	6a3a      	ldr	r2, [r7, #32]
 8105828:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 810582a:	693b      	ldr	r3, [r7, #16]
 810582c:	687a      	ldr	r2, [r7, #4]
 810582e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8105830:	693b      	ldr	r3, [r7, #16]
 8105832:	683a      	ldr	r2, [r7, #0]
 8105834:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8105836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105838:	b29a      	uxth	r2, r3
 810583a:	693b      	ldr	r3, [r7, #16]
 810583c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 810583e:	693b      	ldr	r3, [r7, #16]
 8105840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105842:	609a      	str	r2, [r3, #8]

	return 0;
 8105844:	2300      	movs	r3, #0
}
 8105846:	4618      	mov	r0, r3
 8105848:	371c      	adds	r7, #28
 810584a:	46bd      	mov	sp, r7
 810584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105850:	4770      	bx	lr

08105852 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8105852:	b580      	push	{r7, lr}
 8105854:	b086      	sub	sp, #24
 8105856:	af00      	add	r7, sp, #0
 8105858:	6078      	str	r0, [r7, #4]
 810585a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	2b00      	cmp	r3, #0
 8105860:	d102      	bne.n	8105868 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8105862:	f06f 0315 	mvn.w	r3, #21
 8105866:	e02c      	b.n	81058c2 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	683a      	ldr	r2, [r7, #0]
 810586e:	429a      	cmp	r2, r3
 8105870:	d101      	bne.n	8105876 <rproc_virtio_notified+0x24>
		return 0;
 8105872:	2300      	movs	r3, #0
 8105874:	e025      	b.n	81058c2 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810587a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 810587c:	2300      	movs	r3, #0
 810587e:	617b      	str	r3, [r7, #20]
 8105880:	e01a      	b.n	81058b8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105886:	697a      	ldr	r2, [r7, #20]
 8105888:	4613      	mov	r3, r2
 810588a:	005b      	lsls	r3, r3, #1
 810588c:	4413      	add	r3, r2
 810588e:	00db      	lsls	r3, r3, #3
 8105890:	440b      	add	r3, r1
 8105892:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8105894:	68fb      	ldr	r3, [r7, #12]
 8105896:	691b      	ldr	r3, [r3, #16]
 8105898:	683a      	ldr	r2, [r7, #0]
 810589a:	429a      	cmp	r2, r3
 810589c:	d003      	beq.n	81058a6 <rproc_virtio_notified+0x54>
 810589e:	683b      	ldr	r3, [r7, #0]
 81058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81058a4:	d105      	bne.n	81058b2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 81058ac:	68b8      	ldr	r0, [r7, #8]
 81058ae:	f001 fa19 	bl	8106ce4 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 81058b2:	697b      	ldr	r3, [r7, #20]
 81058b4:	3301      	adds	r3, #1
 81058b6:	617b      	str	r3, [r7, #20]
 81058b8:	697a      	ldr	r2, [r7, #20]
 81058ba:	693b      	ldr	r3, [r7, #16]
 81058bc:	429a      	cmp	r2, r3
 81058be:	d3e0      	bcc.n	8105882 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 81058c0:	2300      	movs	r3, #0
}
 81058c2:	4618      	mov	r0, r3
 81058c4:	3718      	adds	r7, #24
 81058c6:	46bd      	mov	sp, r7
 81058c8:	bd80      	pop	{r7, pc}

081058ca <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 81058ca:	b580      	push	{r7, lr}
 81058cc:	b084      	sub	sp, #16
 81058ce:	af00      	add	r7, sp, #0
 81058d0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 81058d2:	687b      	ldr	r3, [r7, #4]
 81058d4:	699b      	ldr	r3, [r3, #24]
 81058d6:	2b00      	cmp	r3, #0
 81058d8:	d00a      	beq.n	81058f0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 81058da:	6878      	ldr	r0, [r7, #4]
 81058dc:	f7ff fe7c 	bl	81055d8 <rproc_virtio_get_status>
 81058e0:	4603      	mov	r3, r0
 81058e2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 81058e4:	7bfb      	ldrb	r3, [r7, #15]
 81058e6:	f003 0304 	and.w	r3, r3, #4
 81058ea:	2b00      	cmp	r3, #0
 81058ec:	d102      	bne.n	81058f4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 81058ee:	e7f4      	b.n	81058da <rproc_virtio_wait_remote_ready+0x10>
		return;
 81058f0:	bf00      	nop
 81058f2:	e000      	b.n	81058f6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81058f4:	bf00      	nop
	}
}
 81058f6:	3710      	adds	r7, #16
 81058f8:	46bd      	mov	sp, r7
 81058fa:	bd80      	pop	{r7, pc}

081058fc <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81058fc:	b480      	push	{r7}
 81058fe:	b083      	sub	sp, #12
 8105900:	af00      	add	r7, sp, #0
 8105902:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105904:	bf00      	nop
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	2201      	movs	r2, #1
 810590a:	4611      	mov	r1, r2
 810590c:	f3bf 8f5b 	dmb	ish
 8105910:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105914:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105918:	2800      	cmp	r0, #0
 810591a:	d1f9      	bne.n	8105910 <__metal_mutex_acquire+0x14>
 810591c:	f3bf 8f5b 	dmb	ish
 8105920:	b2d3      	uxtb	r3, r2
 8105922:	2b00      	cmp	r3, #0
 8105924:	d1ef      	bne.n	8105906 <__metal_mutex_acquire+0xa>
		;
	}
}
 8105926:	bf00      	nop
 8105928:	bf00      	nop
 810592a:	370c      	adds	r7, #12
 810592c:	46bd      	mov	sp, r7
 810592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105932:	4770      	bx	lr

08105934 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8105934:	b480      	push	{r7}
 8105936:	b083      	sub	sp, #12
 8105938:	af00      	add	r7, sp, #0
 810593a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	f3bf 8f5b 	dmb	ish
 8105942:	2200      	movs	r2, #0
 8105944:	701a      	strb	r2, [r3, #0]
 8105946:	f3bf 8f5b 	dmb	ish
}
 810594a:	bf00      	nop
 810594c:	370c      	adds	r7, #12
 810594e:	46bd      	mov	sp, r7
 8105950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105954:	4770      	bx	lr

08105956 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105956:	b580      	push	{r7, lr}
 8105958:	b082      	sub	sp, #8
 810595a:	af00      	add	r7, sp, #0
 810595c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 810595e:	6878      	ldr	r0, [r7, #4]
 8105960:	f7ff ffcc 	bl	81058fc <__metal_mutex_acquire>
}
 8105964:	bf00      	nop
 8105966:	3708      	adds	r7, #8
 8105968:	46bd      	mov	sp, r7
 810596a:	bd80      	pop	{r7, pc}

0810596c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 810596c:	b580      	push	{r7, lr}
 810596e:	b082      	sub	sp, #8
 8105970:	af00      	add	r7, sp, #0
 8105972:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8105974:	6878      	ldr	r0, [r7, #4]
 8105976:	f7ff ffdd 	bl	8105934 <__metal_mutex_release>
}
 810597a:	bf00      	nop
 810597c:	3708      	adds	r7, #8
 810597e:	46bd      	mov	sp, r7
 8105980:	bd80      	pop	{r7, pc}

08105982 <metal_list_add_before>:
{
 8105982:	b480      	push	{r7}
 8105984:	b083      	sub	sp, #12
 8105986:	af00      	add	r7, sp, #0
 8105988:	6078      	str	r0, [r7, #4]
 810598a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	685a      	ldr	r2, [r3, #4]
 8105990:	683b      	ldr	r3, [r7, #0]
 8105992:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105994:	683b      	ldr	r3, [r7, #0]
 8105996:	687a      	ldr	r2, [r7, #4]
 8105998:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810599a:	683b      	ldr	r3, [r7, #0]
 810599c:	681b      	ldr	r3, [r3, #0]
 810599e:	683a      	ldr	r2, [r7, #0]
 81059a0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 81059a2:	683b      	ldr	r3, [r7, #0]
 81059a4:	685b      	ldr	r3, [r3, #4]
 81059a6:	683a      	ldr	r2, [r7, #0]
 81059a8:	601a      	str	r2, [r3, #0]
}
 81059aa:	bf00      	nop
 81059ac:	370c      	adds	r7, #12
 81059ae:	46bd      	mov	sp, r7
 81059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059b4:	4770      	bx	lr

081059b6 <metal_list_add_tail>:
{
 81059b6:	b580      	push	{r7, lr}
 81059b8:	b082      	sub	sp, #8
 81059ba:	af00      	add	r7, sp, #0
 81059bc:	6078      	str	r0, [r7, #4]
 81059be:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 81059c0:	6839      	ldr	r1, [r7, #0]
 81059c2:	6878      	ldr	r0, [r7, #4]
 81059c4:	f7ff ffdd 	bl	8105982 <metal_list_add_before>
}
 81059c8:	bf00      	nop
 81059ca:	3708      	adds	r7, #8
 81059cc:	46bd      	mov	sp, r7
 81059ce:	bd80      	pop	{r7, pc}

081059d0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 81059d0:	b480      	push	{r7}
 81059d2:	b083      	sub	sp, #12
 81059d4:	af00      	add	r7, sp, #0
 81059d6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	687a      	ldr	r2, [r7, #4]
 81059de:	6852      	ldr	r2, [r2, #4]
 81059e0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	685b      	ldr	r3, [r3, #4]
 81059e6:	687a      	ldr	r2, [r7, #4]
 81059e8:	6812      	ldr	r2, [r2, #0]
 81059ea:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	687a      	ldr	r2, [r7, #4]
 81059f0:	605a      	str	r2, [r3, #4]
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	685a      	ldr	r2, [r3, #4]
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	601a      	str	r2, [r3, #0]
}
 81059fa:	bf00      	nop
 81059fc:	370c      	adds	r7, #12
 81059fe:	46bd      	mov	sp, r7
 8105a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a04:	4770      	bx	lr

08105a06 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8105a06:	b480      	push	{r7}
 8105a08:	b083      	sub	sp, #12
 8105a0a:	af00      	add	r7, sp, #0
 8105a0c:	6078      	str	r0, [r7, #4]
 8105a0e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105a10:	683b      	ldr	r3, [r7, #0]
 8105a12:	095b      	lsrs	r3, r3, #5
 8105a14:	009a      	lsls	r2, r3, #2
 8105a16:	6879      	ldr	r1, [r7, #4]
 8105a18:	440a      	add	r2, r1
 8105a1a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105a1c:	683a      	ldr	r2, [r7, #0]
 8105a1e:	f002 021f 	and.w	r2, r2, #31
 8105a22:	2001      	movs	r0, #1
 8105a24:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105a28:	009b      	lsls	r3, r3, #2
 8105a2a:	6878      	ldr	r0, [r7, #4]
 8105a2c:	4403      	add	r3, r0
 8105a2e:	430a      	orrs	r2, r1
 8105a30:	601a      	str	r2, [r3, #0]
}
 8105a32:	bf00      	nop
 8105a34:	370c      	adds	r7, #12
 8105a36:	46bd      	mov	sp, r7
 8105a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a3c:	4770      	bx	lr

08105a3e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8105a3e:	b480      	push	{r7}
 8105a40:	b083      	sub	sp, #12
 8105a42:	af00      	add	r7, sp, #0
 8105a44:	6078      	str	r0, [r7, #4]
 8105a46:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105a48:	683b      	ldr	r3, [r7, #0]
 8105a4a:	095b      	lsrs	r3, r3, #5
 8105a4c:	009b      	lsls	r3, r3, #2
 8105a4e:	687a      	ldr	r2, [r7, #4]
 8105a50:	4413      	add	r3, r2
 8105a52:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105a54:	683b      	ldr	r3, [r7, #0]
 8105a56:	f003 031f 	and.w	r3, r3, #31
 8105a5a:	2101      	movs	r1, #1
 8105a5c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105a60:	4013      	ands	r3, r2
}
 8105a62:	4618      	mov	r0, r3
 8105a64:	370c      	adds	r7, #12
 8105a66:	46bd      	mov	sp, r7
 8105a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a6c:	4770      	bx	lr

08105a6e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8105a6e:	b480      	push	{r7}
 8105a70:	b083      	sub	sp, #12
 8105a72:	af00      	add	r7, sp, #0
 8105a74:	6078      	str	r0, [r7, #4]
 8105a76:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105a78:	683b      	ldr	r3, [r7, #0]
 8105a7a:	095b      	lsrs	r3, r3, #5
 8105a7c:	009a      	lsls	r2, r3, #2
 8105a7e:	6879      	ldr	r1, [r7, #4]
 8105a80:	440a      	add	r2, r1
 8105a82:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105a84:	683a      	ldr	r2, [r7, #0]
 8105a86:	f002 021f 	and.w	r2, r2, #31
 8105a8a:	2001      	movs	r0, #1
 8105a8c:	fa00 f202 	lsl.w	r2, r0, r2
 8105a90:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105a92:	009b      	lsls	r3, r3, #2
 8105a94:	6878      	ldr	r0, [r7, #4]
 8105a96:	4403      	add	r3, r0
 8105a98:	400a      	ands	r2, r1
 8105a9a:	601a      	str	r2, [r3, #0]
}
 8105a9c:	bf00      	nop
 8105a9e:	370c      	adds	r7, #12
 8105aa0:	46bd      	mov	sp, r7
 8105aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aa6:	4770      	bx	lr

08105aa8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8105aa8:	b580      	push	{r7, lr}
 8105aaa:	b082      	sub	sp, #8
 8105aac:	af00      	add	r7, sp, #0
 8105aae:	6078      	str	r0, [r7, #4]
 8105ab0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8105ab2:	6839      	ldr	r1, [r7, #0]
 8105ab4:	6878      	ldr	r0, [r7, #4]
 8105ab6:	f7ff ffc2 	bl	8105a3e <metal_bitmap_is_bit_set>
 8105aba:	4603      	mov	r3, r0
 8105abc:	2b00      	cmp	r3, #0
 8105abe:	bf0c      	ite	eq
 8105ac0:	2301      	moveq	r3, #1
 8105ac2:	2300      	movne	r3, #0
 8105ac4:	b2db      	uxtb	r3, r3
}
 8105ac6:	4618      	mov	r0, r3
 8105ac8:	3708      	adds	r7, #8
 8105aca:	46bd      	mov	sp, r7
 8105acc:	bd80      	pop	{r7, pc}

08105ace <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8105ace:	b580      	push	{r7, lr}
 8105ad0:	b086      	sub	sp, #24
 8105ad2:	af00      	add	r7, sp, #0
 8105ad4:	60f8      	str	r0, [r7, #12]
 8105ad6:	60b9      	str	r1, [r7, #8]
 8105ad8:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8105ada:	68bb      	ldr	r3, [r7, #8]
 8105adc:	617b      	str	r3, [r7, #20]
 8105ade:	e002      	b.n	8105ae6 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8105ae0:	697b      	ldr	r3, [r7, #20]
 8105ae2:	3301      	adds	r3, #1
 8105ae4:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8105ae6:	697a      	ldr	r2, [r7, #20]
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	429a      	cmp	r2, r3
 8105aec:	d207      	bcs.n	8105afe <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8105aee:	697b      	ldr	r3, [r7, #20]
 8105af0:	4619      	mov	r1, r3
 8105af2:	68f8      	ldr	r0, [r7, #12]
 8105af4:	f7ff ffd8 	bl	8105aa8 <metal_bitmap_is_bit_clear>
 8105af8:	4603      	mov	r3, r0
 8105afa:	2b00      	cmp	r3, #0
 8105afc:	d0f0      	beq.n	8105ae0 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8105afe:	697b      	ldr	r3, [r7, #20]
}
 8105b00:	4618      	mov	r0, r3
 8105b02:	3718      	adds	r7, #24
 8105b04:	46bd      	mov	sp, r7
 8105b06:	bd80      	pop	{r7, pc}

08105b08 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8105b08:	b580      	push	{r7, lr}
 8105b0a:	b084      	sub	sp, #16
 8105b0c:	af00      	add	r7, sp, #0
 8105b0e:	60f8      	str	r0, [r7, #12]
 8105b10:	60b9      	str	r1, [r7, #8]
 8105b12:	607a      	str	r2, [r7, #4]
 8105b14:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105b16:	68fb      	ldr	r3, [r7, #12]
 8105b18:	2220      	movs	r2, #32
 8105b1a:	68b9      	ldr	r1, [r7, #8]
 8105b1c:	4618      	mov	r0, r3
 8105b1e:	f002 fc9b 	bl	8108458 <strncpy>
	ept->addr = src;
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	687a      	ldr	r2, [r7, #4]
 8105b26:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8105b28:	68fb      	ldr	r3, [r7, #12]
 8105b2a:	683a      	ldr	r2, [r7, #0]
 8105b2c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8105b2e:	68fb      	ldr	r3, [r7, #12]
 8105b30:	69ba      	ldr	r2, [r7, #24]
 8105b32:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105b34:	68fb      	ldr	r3, [r7, #12]
 8105b36:	69fa      	ldr	r2, [r7, #28]
 8105b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8105b3a:	bf00      	nop
 8105b3c:	3710      	adds	r7, #16
 8105b3e:	46bd      	mov	sp, r7
 8105b40:	bd80      	pop	{r7, pc}

08105b42 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8105b42:	b580      	push	{r7, lr}
 8105b44:	b084      	sub	sp, #16
 8105b46:	af00      	add	r7, sp, #0
 8105b48:	6078      	str	r0, [r7, #4]
 8105b4a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8105b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8105b50:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8105b52:	683b      	ldr	r3, [r7, #0]
 8105b54:	461a      	mov	r2, r3
 8105b56:	2100      	movs	r1, #0
 8105b58:	6878      	ldr	r0, [r7, #4]
 8105b5a:	f7ff ffb8 	bl	8105ace <metal_bitmap_next_clear_bit>
 8105b5e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8105b60:	683b      	ldr	r3, [r7, #0]
 8105b62:	68ba      	ldr	r2, [r7, #8]
 8105b64:	429a      	cmp	r2, r3
 8105b66:	d206      	bcs.n	8105b76 <rpmsg_get_address+0x34>
		addr = nextbit;
 8105b68:	68bb      	ldr	r3, [r7, #8]
 8105b6a:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8105b6c:	68bb      	ldr	r3, [r7, #8]
 8105b6e:	4619      	mov	r1, r3
 8105b70:	6878      	ldr	r0, [r7, #4]
 8105b72:	f7ff ff48 	bl	8105a06 <metal_bitmap_set_bit>
	}

	return addr;
 8105b76:	68fb      	ldr	r3, [r7, #12]
}
 8105b78:	4618      	mov	r0, r3
 8105b7a:	3710      	adds	r7, #16
 8105b7c:	46bd      	mov	sp, r7
 8105b7e:	bd80      	pop	{r7, pc}

08105b80 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8105b80:	b580      	push	{r7, lr}
 8105b82:	b084      	sub	sp, #16
 8105b84:	af00      	add	r7, sp, #0
 8105b86:	60f8      	str	r0, [r7, #12]
 8105b88:	60b9      	str	r1, [r7, #8]
 8105b8a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105b8c:	687a      	ldr	r2, [r7, #4]
 8105b8e:	68bb      	ldr	r3, [r7, #8]
 8105b90:	429a      	cmp	r2, r3
 8105b92:	da03      	bge.n	8105b9c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8105b94:	6879      	ldr	r1, [r7, #4]
 8105b96:	68f8      	ldr	r0, [r7, #12]
 8105b98:	f7ff ff69 	bl	8105a6e <metal_bitmap_clear_bit>
}
 8105b9c:	bf00      	nop
 8105b9e:	3710      	adds	r7, #16
 8105ba0:	46bd      	mov	sp, r7
 8105ba2:	bd80      	pop	{r7, pc}

08105ba4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8105ba4:	b580      	push	{r7, lr}
 8105ba6:	b084      	sub	sp, #16
 8105ba8:	af00      	add	r7, sp, #0
 8105baa:	60f8      	str	r0, [r7, #12]
 8105bac:	60b9      	str	r1, [r7, #8]
 8105bae:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105bb0:	687a      	ldr	r2, [r7, #4]
 8105bb2:	68bb      	ldr	r3, [r7, #8]
 8105bb4:	429a      	cmp	r2, r3
 8105bb6:	da05      	bge.n	8105bc4 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8105bb8:	6879      	ldr	r1, [r7, #4]
 8105bba:	68f8      	ldr	r0, [r7, #12]
 8105bbc:	f7ff ff3f 	bl	8105a3e <metal_bitmap_is_bit_set>
 8105bc0:	4603      	mov	r3, r0
 8105bc2:	e000      	b.n	8105bc6 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8105bc4:	4b02      	ldr	r3, [pc, #8]	; (8105bd0 <rpmsg_is_address_set+0x2c>)
}
 8105bc6:	4618      	mov	r0, r3
 8105bc8:	3710      	adds	r7, #16
 8105bca:	46bd      	mov	sp, r7
 8105bcc:	bd80      	pop	{r7, pc}
 8105bce:	bf00      	nop
 8105bd0:	fffff82d 	.word	0xfffff82d

08105bd4 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8105bd4:	b580      	push	{r7, lr}
 8105bd6:	b084      	sub	sp, #16
 8105bd8:	af00      	add	r7, sp, #0
 8105bda:	60f8      	str	r0, [r7, #12]
 8105bdc:	60b9      	str	r1, [r7, #8]
 8105bde:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8105be0:	687a      	ldr	r2, [r7, #4]
 8105be2:	68bb      	ldr	r3, [r7, #8]
 8105be4:	429a      	cmp	r2, r3
 8105be6:	da05      	bge.n	8105bf4 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8105be8:	6879      	ldr	r1, [r7, #4]
 8105bea:	68f8      	ldr	r0, [r7, #12]
 8105bec:	f7ff ff0b 	bl	8105a06 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8105bf0:	2300      	movs	r3, #0
 8105bf2:	e000      	b.n	8105bf6 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8105bf4:	4b02      	ldr	r3, [pc, #8]	; (8105c00 <rpmsg_set_address+0x2c>)
	}
}
 8105bf6:	4618      	mov	r0, r3
 8105bf8:	3710      	adds	r7, #16
 8105bfa:	46bd      	mov	sp, r7
 8105bfc:	bd80      	pop	{r7, pc}
 8105bfe:	bf00      	nop
 8105c00:	fffff82d 	.word	0xfffff82d

08105c04 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8105c04:	b590      	push	{r4, r7, lr}
 8105c06:	b089      	sub	sp, #36	; 0x24
 8105c08:	af02      	add	r7, sp, #8
 8105c0a:	60f8      	str	r0, [r7, #12]
 8105c0c:	60b9      	str	r1, [r7, #8]
 8105c0e:	607a      	str	r2, [r7, #4]
 8105c10:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8105c12:	68fb      	ldr	r3, [r7, #12]
 8105c14:	2b00      	cmp	r3, #0
 8105c16:	d00a      	beq.n	8105c2e <rpmsg_send_offchannel_raw+0x2a>
 8105c18:	68fb      	ldr	r3, [r7, #12]
 8105c1a:	6a1b      	ldr	r3, [r3, #32]
 8105c1c:	2b00      	cmp	r3, #0
 8105c1e:	d006      	beq.n	8105c2e <rpmsg_send_offchannel_raw+0x2a>
 8105c20:	683b      	ldr	r3, [r7, #0]
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d003      	beq.n	8105c2e <rpmsg_send_offchannel_raw+0x2a>
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c2c:	d101      	bne.n	8105c32 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8105c2e:	4b0d      	ldr	r3, [pc, #52]	; (8105c64 <rpmsg_send_offchannel_raw+0x60>)
 8105c30:	e014      	b.n	8105c5c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8105c32:	68fb      	ldr	r3, [r7, #12]
 8105c34:	6a1b      	ldr	r3, [r3, #32]
 8105c36:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8105c38:	697b      	ldr	r3, [r7, #20]
 8105c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105c3c:	2b00      	cmp	r3, #0
 8105c3e:	d00c      	beq.n	8105c5a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8105c40:	697b      	ldr	r3, [r7, #20]
 8105c42:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8105c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105c46:	9301      	str	r3, [sp, #4]
 8105c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105c4a:	9300      	str	r3, [sp, #0]
 8105c4c:	683b      	ldr	r3, [r7, #0]
 8105c4e:	687a      	ldr	r2, [r7, #4]
 8105c50:	68b9      	ldr	r1, [r7, #8]
 8105c52:	6978      	ldr	r0, [r7, #20]
 8105c54:	47a0      	blx	r4
 8105c56:	4603      	mov	r3, r0
 8105c58:	e000      	b.n	8105c5c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8105c5a:	4b02      	ldr	r3, [pc, #8]	; (8105c64 <rpmsg_send_offchannel_raw+0x60>)
}
 8105c5c:	4618      	mov	r0, r3
 8105c5e:	371c      	adds	r7, #28
 8105c60:	46bd      	mov	sp, r7
 8105c62:	bd90      	pop	{r4, r7, pc}
 8105c64:	fffff82d 	.word	0xfffff82d

08105c68 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8105c68:	b580      	push	{r7, lr}
 8105c6a:	b090      	sub	sp, #64	; 0x40
 8105c6c:	af02      	add	r7, sp, #8
 8105c6e:	6078      	str	r0, [r7, #4]
 8105c70:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8105c72:	683b      	ldr	r3, [r7, #0]
 8105c74:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8105c7c:	6879      	ldr	r1, [r7, #4]
 8105c7e:	f107 030c 	add.w	r3, r7, #12
 8105c82:	2220      	movs	r2, #32
 8105c84:	4618      	mov	r0, r3
 8105c86:	f002 fbe7 	bl	8108458 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8105c8a:	687b      	ldr	r3, [r7, #4]
 8105c8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8105c8e:	f107 030c 	add.w	r3, r7, #12
 8105c92:	2201      	movs	r2, #1
 8105c94:	9201      	str	r2, [sp, #4]
 8105c96:	2228      	movs	r2, #40	; 0x28
 8105c98:	9200      	str	r2, [sp, #0]
 8105c9a:	2235      	movs	r2, #53	; 0x35
 8105c9c:	6878      	ldr	r0, [r7, #4]
 8105c9e:	f7ff ffb1 	bl	8105c04 <rpmsg_send_offchannel_raw>
 8105ca2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8105ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ca6:	2b00      	cmp	r3, #0
 8105ca8:	da01      	bge.n	8105cae <rpmsg_send_ns_message+0x46>
		return ret;
 8105caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105cac:	e000      	b.n	8105cb0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8105cae:	2300      	movs	r3, #0
}
 8105cb0:	4618      	mov	r0, r3
 8105cb2:	3738      	adds	r7, #56	; 0x38
 8105cb4:	46bd      	mov	sp, r7
 8105cb6:	bd80      	pop	{r7, pc}

08105cb8 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8105cb8:	b580      	push	{r7, lr}
 8105cba:	b088      	sub	sp, #32
 8105cbc:	af00      	add	r7, sp, #0
 8105cbe:	60f8      	str	r0, [r7, #12]
 8105cc0:	60b9      	str	r1, [r7, #8]
 8105cc2:	607a      	str	r2, [r7, #4]
 8105cc4:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	61fb      	str	r3, [r7, #28]
 8105ccc:	e04b      	b.n	8105d66 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8105cce:	2300      	movs	r3, #0
 8105cd0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8105cd2:	69fb      	ldr	r3, [r7, #28]
 8105cd4:	3b34      	subs	r3, #52	; 0x34
 8105cd6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105cde:	d006      	beq.n	8105cee <rpmsg_get_endpoint+0x36>
 8105ce0:	697b      	ldr	r3, [r7, #20]
 8105ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ce4:	687a      	ldr	r2, [r7, #4]
 8105ce6:	429a      	cmp	r2, r3
 8105ce8:	d101      	bne.n	8105cee <rpmsg_get_endpoint+0x36>
			return ept;
 8105cea:	697b      	ldr	r3, [r7, #20]
 8105cec:	e040      	b.n	8105d70 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8105cee:	697b      	ldr	r3, [r7, #20]
 8105cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105cf2:	687a      	ldr	r2, [r7, #4]
 8105cf4:	429a      	cmp	r2, r3
 8105cf6:	d106      	bne.n	8105d06 <rpmsg_get_endpoint+0x4e>
 8105cf8:	697b      	ldr	r3, [r7, #20]
 8105cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105cfc:	683a      	ldr	r2, [r7, #0]
 8105cfe:	429a      	cmp	r2, r3
 8105d00:	d101      	bne.n	8105d06 <rpmsg_get_endpoint+0x4e>
			return ept;
 8105d02:	697b      	ldr	r3, [r7, #20]
 8105d04:	e034      	b.n	8105d70 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8105d06:	68bb      	ldr	r3, [r7, #8]
 8105d08:	2b00      	cmp	r3, #0
 8105d0a:	d00c      	beq.n	8105d26 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8105d0c:	697b      	ldr	r3, [r7, #20]
 8105d0e:	2220      	movs	r2, #32
 8105d10:	68b9      	ldr	r1, [r7, #8]
 8105d12:	4618      	mov	r0, r3
 8105d14:	f002 fb8e 	bl	8108434 <strncmp>
 8105d18:	4603      	mov	r3, r0
 8105d1a:	2b00      	cmp	r3, #0
 8105d1c:	bf0c      	ite	eq
 8105d1e:	2301      	moveq	r3, #1
 8105d20:	2300      	movne	r3, #0
 8105d22:	b2db      	uxtb	r3, r3
 8105d24:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8105d26:	68bb      	ldr	r3, [r7, #8]
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d018      	beq.n	8105d5e <rpmsg_get_endpoint+0xa6>
 8105d2c:	69bb      	ldr	r3, [r7, #24]
 8105d2e:	2b00      	cmp	r3, #0
 8105d30:	d015      	beq.n	8105d5e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8105d32:	683b      	ldr	r3, [r7, #0]
 8105d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d38:	d006      	beq.n	8105d48 <rpmsg_get_endpoint+0x90>
 8105d3a:	697b      	ldr	r3, [r7, #20]
 8105d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d3e:	683a      	ldr	r2, [r7, #0]
 8105d40:	429a      	cmp	r2, r3
 8105d42:	d101      	bne.n	8105d48 <rpmsg_get_endpoint+0x90>
			return ept;
 8105d44:	697b      	ldr	r3, [r7, #20]
 8105d46:	e013      	b.n	8105d70 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d4e:	d107      	bne.n	8105d60 <rpmsg_get_endpoint+0xa8>
 8105d50:	697b      	ldr	r3, [r7, #20]
 8105d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d58:	d102      	bne.n	8105d60 <rpmsg_get_endpoint+0xa8>
			return ept;
 8105d5a:	697b      	ldr	r3, [r7, #20]
 8105d5c:	e008      	b.n	8105d70 <rpmsg_get_endpoint+0xb8>
			continue;
 8105d5e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8105d60:	69fb      	ldr	r3, [r7, #28]
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	61fb      	str	r3, [r7, #28]
 8105d66:	68fb      	ldr	r3, [r7, #12]
 8105d68:	69fa      	ldr	r2, [r7, #28]
 8105d6a:	429a      	cmp	r2, r3
 8105d6c:	d1af      	bne.n	8105cce <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8105d6e:	2300      	movs	r3, #0
}
 8105d70:	4618      	mov	r0, r3
 8105d72:	3720      	adds	r7, #32
 8105d74:	46bd      	mov	sp, r7
 8105d76:	bd80      	pop	{r7, pc}

08105d78 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8105d78:	b580      	push	{r7, lr}
 8105d7a:	b084      	sub	sp, #16
 8105d7c:	af00      	add	r7, sp, #0
 8105d7e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	2b00      	cmp	r3, #0
 8105d84:	d016      	beq.n	8105db4 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	6a1b      	ldr	r3, [r3, #32]
 8105d8a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d94:	d008      	beq.n	8105da8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105d96:	68fb      	ldr	r3, [r7, #12]
 8105d98:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105da0:	461a      	mov	r2, r3
 8105da2:	2180      	movs	r1, #128	; 0x80
 8105da4:	f7ff feec 	bl	8105b80 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	3334      	adds	r3, #52	; 0x34
 8105dac:	4618      	mov	r0, r3
 8105dae:	f7ff fe0f 	bl	81059d0 <metal_list_del>
 8105db2:	e000      	b.n	8105db6 <rpmsg_unregister_endpoint+0x3e>
		return;
 8105db4:	bf00      	nop
}
 8105db6:	3710      	adds	r7, #16
 8105db8:	46bd      	mov	sp, r7
 8105dba:	bd80      	pop	{r7, pc}

08105dbc <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8105dbc:	b580      	push	{r7, lr}
 8105dbe:	b082      	sub	sp, #8
 8105dc0:	af00      	add	r7, sp, #0
 8105dc2:	6078      	str	r0, [r7, #4]
 8105dc4:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8105dc6:	683b      	ldr	r3, [r7, #0]
 8105dc8:	687a      	ldr	r2, [r7, #4]
 8105dca:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8105dcc:	687a      	ldr	r2, [r7, #4]
 8105dce:	683b      	ldr	r3, [r7, #0]
 8105dd0:	3334      	adds	r3, #52	; 0x34
 8105dd2:	4619      	mov	r1, r3
 8105dd4:	4610      	mov	r0, r2
 8105dd6:	f7ff fdee 	bl	81059b6 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8105dda:	2300      	movs	r3, #0
}
 8105ddc:	4618      	mov	r0, r3
 8105dde:	3708      	adds	r7, #8
 8105de0:	46bd      	mov	sp, r7
 8105de2:	bd80      	pop	{r7, pc}

08105de4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8105de4:	b580      	push	{r7, lr}
 8105de6:	b088      	sub	sp, #32
 8105de8:	af02      	add	r7, sp, #8
 8105dea:	60f8      	str	r0, [r7, #12]
 8105dec:	60b9      	str	r1, [r7, #8]
 8105dee:	607a      	str	r2, [r7, #4]
 8105df0:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8105df2:	683b      	ldr	r3, [r7, #0]
 8105df4:	613b      	str	r3, [r7, #16]

	if (!ept)
 8105df6:	68fb      	ldr	r3, [r7, #12]
 8105df8:	2b00      	cmp	r3, #0
 8105dfa:	d101      	bne.n	8105e00 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8105dfc:	4b37      	ldr	r3, [pc, #220]	; (8105edc <rpmsg_create_ept+0xf8>)
 8105dfe:	e068      	b.n	8105ed2 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8105e00:	68bb      	ldr	r3, [r7, #8]
 8105e02:	3358      	adds	r3, #88	; 0x58
 8105e04:	4618      	mov	r0, r3
 8105e06:	f7ff fda6 	bl	8105956 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8105e0a:	683b      	ldr	r3, [r7, #0]
 8105e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e10:	d018      	beq.n	8105e44 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8105e12:	68bb      	ldr	r3, [r7, #8]
 8105e14:	3348      	adds	r3, #72	; 0x48
 8105e16:	683a      	ldr	r2, [r7, #0]
 8105e18:	2180      	movs	r1, #128	; 0x80
 8105e1a:	4618      	mov	r0, r3
 8105e1c:	f7ff fec2 	bl	8105ba4 <rpmsg_is_address_set>
 8105e20:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8105e22:	697b      	ldr	r3, [r7, #20]
 8105e24:	2b00      	cmp	r3, #0
 8105e26:	d107      	bne.n	8105e38 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105e28:	68bb      	ldr	r3, [r7, #8]
 8105e2a:	3348      	adds	r3, #72	; 0x48
 8105e2c:	683a      	ldr	r2, [r7, #0]
 8105e2e:	2180      	movs	r1, #128	; 0x80
 8105e30:	4618      	mov	r0, r3
 8105e32:	f7ff fecf 	bl	8105bd4 <rpmsg_set_address>
 8105e36:	e00c      	b.n	8105e52 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8105e38:	697b      	ldr	r3, [r7, #20]
 8105e3a:	2b00      	cmp	r3, #0
 8105e3c:	dd40      	ble.n	8105ec0 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8105e3e:	2300      	movs	r3, #0
 8105e40:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8105e42:	e040      	b.n	8105ec6 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8105e44:	68bb      	ldr	r3, [r7, #8]
 8105e46:	3348      	adds	r3, #72	; 0x48
 8105e48:	2180      	movs	r1, #128	; 0x80
 8105e4a:	4618      	mov	r0, r3
 8105e4c:	f7ff fe79 	bl	8105b42 <rpmsg_get_address>
 8105e50:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8105e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105e54:	9301      	str	r3, [sp, #4]
 8105e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105e58:	9300      	str	r3, [sp, #0]
 8105e5a:	6a3b      	ldr	r3, [r7, #32]
 8105e5c:	693a      	ldr	r2, [r7, #16]
 8105e5e:	6879      	ldr	r1, [r7, #4]
 8105e60:	68f8      	ldr	r0, [r7, #12]
 8105e62:	f7ff fe51 	bl	8105b08 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8105e66:	68f9      	ldr	r1, [r7, #12]
 8105e68:	68b8      	ldr	r0, [r7, #8]
 8105e6a:	f7ff ffa7 	bl	8105dbc <rpmsg_register_endpoint>
 8105e6e:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8105e70:	697b      	ldr	r3, [r7, #20]
 8105e72:	2b00      	cmp	r3, #0
 8105e74:	da06      	bge.n	8105e84 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8105e76:	68bb      	ldr	r3, [r7, #8]
 8105e78:	3348      	adds	r3, #72	; 0x48
 8105e7a:	693a      	ldr	r2, [r7, #16]
 8105e7c:	2180      	movs	r1, #128	; 0x80
 8105e7e:	4618      	mov	r0, r3
 8105e80:	f7ff fe7e 	bl	8105b80 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8105e84:	697b      	ldr	r3, [r7, #20]
 8105e86:	2b00      	cmp	r3, #0
 8105e88:	d11c      	bne.n	8105ec4 <rpmsg_create_ept+0xe0>
 8105e8a:	68fb      	ldr	r3, [r7, #12]
 8105e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e92:	d117      	bne.n	8105ec4 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8105e94:	68bb      	ldr	r3, [r7, #8]
 8105e96:	3358      	adds	r3, #88	; 0x58
 8105e98:	4618      	mov	r0, r3
 8105e9a:	f7ff fd67 	bl	810596c <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8105e9e:	2100      	movs	r1, #0
 8105ea0:	68f8      	ldr	r0, [r7, #12]
 8105ea2:	f7ff fee1 	bl	8105c68 <rpmsg_send_ns_message>
 8105ea6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8105ea8:	68bb      	ldr	r3, [r7, #8]
 8105eaa:	3358      	adds	r3, #88	; 0x58
 8105eac:	4618      	mov	r0, r3
 8105eae:	f7ff fd52 	bl	8105956 <metal_mutex_acquire>
		if (status)
 8105eb2:	697b      	ldr	r3, [r7, #20]
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	d005      	beq.n	8105ec4 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8105eb8:	68f8      	ldr	r0, [r7, #12]
 8105eba:	f7ff ff5d 	bl	8105d78 <rpmsg_unregister_endpoint>
 8105ebe:	e002      	b.n	8105ec6 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8105ec0:	bf00      	nop
 8105ec2:	e000      	b.n	8105ec6 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8105ec4:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8105ec6:	68bb      	ldr	r3, [r7, #8]
 8105ec8:	3358      	adds	r3, #88	; 0x58
 8105eca:	4618      	mov	r0, r3
 8105ecc:	f7ff fd4e 	bl	810596c <metal_mutex_release>
	return status;
 8105ed0:	697b      	ldr	r3, [r7, #20]
}
 8105ed2:	4618      	mov	r0, r3
 8105ed4:	3718      	adds	r7, #24
 8105ed6:	46bd      	mov	sp, r7
 8105ed8:	bd80      	pop	{r7, pc}
 8105eda:	bf00      	nop
 8105edc:	fffff82d 	.word	0xfffff82d

08105ee0 <__metal_cache_invalidate>:
{
 8105ee0:	b580      	push	{r7, lr}
 8105ee2:	b082      	sub	sp, #8
 8105ee4:	af00      	add	r7, sp, #0
 8105ee6:	6078      	str	r0, [r7, #4]
 8105ee8:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8105eea:	6839      	ldr	r1, [r7, #0]
 8105eec:	6878      	ldr	r0, [r7, #4]
 8105eee:	f000 fc56 	bl	810679e <metal_machine_cache_invalidate>
}
 8105ef2:	bf00      	nop
 8105ef4:	3708      	adds	r7, #8
 8105ef6:	46bd      	mov	sp, r7
 8105ef8:	bd80      	pop	{r7, pc}

08105efa <metal_cache_invalidate>:
{
 8105efa:	b580      	push	{r7, lr}
 8105efc:	b082      	sub	sp, #8
 8105efe:	af00      	add	r7, sp, #0
 8105f00:	6078      	str	r0, [r7, #4]
 8105f02:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8105f04:	6839      	ldr	r1, [r7, #0]
 8105f06:	6878      	ldr	r0, [r7, #4]
 8105f08:	f7ff ffea 	bl	8105ee0 <__metal_cache_invalidate>
}
 8105f0c:	bf00      	nop
 8105f0e:	3708      	adds	r7, #8
 8105f10:	46bd      	mov	sp, r7
 8105f12:	bd80      	pop	{r7, pc}

08105f14 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8105f14:	b480      	push	{r7}
 8105f16:	b083      	sub	sp, #12
 8105f18:	af00      	add	r7, sp, #0
 8105f1a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8105f1c:	2300      	movs	r3, #0
}
 8105f1e:	4618      	mov	r0, r3
 8105f20:	370c      	adds	r7, #12
 8105f22:	46bd      	mov	sp, r7
 8105f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f28:	4770      	bx	lr

08105f2a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8105f2a:	b580      	push	{r7, lr}
 8105f2c:	b082      	sub	sp, #8
 8105f2e:	af00      	add	r7, sp, #0
 8105f30:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8105f32:	6878      	ldr	r0, [r7, #4]
 8105f34:	f7ff ffee 	bl	8105f14 <__metal_sleep_usec>
 8105f38:	4603      	mov	r3, r0
}
 8105f3a:	4618      	mov	r0, r3
 8105f3c:	3708      	adds	r7, #8
 8105f3e:	46bd      	mov	sp, r7
 8105f40:	bd80      	pop	{r7, pc}

08105f42 <metal_list_init>:
{
 8105f42:	b480      	push	{r7}
 8105f44:	b083      	sub	sp, #12
 8105f46:	af00      	add	r7, sp, #0
 8105f48:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	687a      	ldr	r2, [r7, #4]
 8105f4e:	605a      	str	r2, [r3, #4]
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	685a      	ldr	r2, [r3, #4]
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	601a      	str	r2, [r3, #0]
}
 8105f58:	bf00      	nop
 8105f5a:	370c      	adds	r7, #12
 8105f5c:	46bd      	mov	sp, r7
 8105f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f62:	4770      	bx	lr

08105f64 <metal_io_virt_to_offset>:
{
 8105f64:	b480      	push	{r7}
 8105f66:	b085      	sub	sp, #20
 8105f68:	af00      	add	r7, sp, #0
 8105f6a:	6078      	str	r0, [r7, #4]
 8105f6c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	681b      	ldr	r3, [r3, #0]
 8105f72:	683a      	ldr	r2, [r7, #0]
 8105f74:	1ad3      	subs	r3, r2, r3
 8105f76:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	689b      	ldr	r3, [r3, #8]
 8105f7c:	68fa      	ldr	r2, [r7, #12]
 8105f7e:	429a      	cmp	r2, r3
 8105f80:	d201      	bcs.n	8105f86 <metal_io_virt_to_offset+0x22>
 8105f82:	68fb      	ldr	r3, [r7, #12]
 8105f84:	e001      	b.n	8105f8a <metal_io_virt_to_offset+0x26>
 8105f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105f8a:	4618      	mov	r0, r3
 8105f8c:	3714      	adds	r7, #20
 8105f8e:	46bd      	mov	sp, r7
 8105f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f94:	4770      	bx	lr

08105f96 <__metal_mutex_init>:
{
 8105f96:	b480      	push	{r7}
 8105f98:	b085      	sub	sp, #20
 8105f9a:	af00      	add	r7, sp, #0
 8105f9c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	60fb      	str	r3, [r7, #12]
 8105fa2:	2300      	movs	r3, #0
 8105fa4:	60bb      	str	r3, [r7, #8]
 8105fa6:	68bb      	ldr	r3, [r7, #8]
 8105fa8:	461a      	mov	r2, r3
 8105faa:	68fb      	ldr	r3, [r7, #12]
 8105fac:	f3bf 8f5b 	dmb	ish
 8105fb0:	601a      	str	r2, [r3, #0]
 8105fb2:	f3bf 8f5b 	dmb	ish
}
 8105fb6:	bf00      	nop
 8105fb8:	3714      	adds	r7, #20
 8105fba:	46bd      	mov	sp, r7
 8105fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fc0:	4770      	bx	lr

08105fc2 <__metal_mutex_acquire>:
{
 8105fc2:	b480      	push	{r7}
 8105fc4:	b083      	sub	sp, #12
 8105fc6:	af00      	add	r7, sp, #0
 8105fc8:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105fca:	bf00      	nop
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	2201      	movs	r2, #1
 8105fd0:	4611      	mov	r1, r2
 8105fd2:	f3bf 8f5b 	dmb	ish
 8105fd6:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105fda:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105fde:	2800      	cmp	r0, #0
 8105fe0:	d1f9      	bne.n	8105fd6 <__metal_mutex_acquire+0x14>
 8105fe2:	f3bf 8f5b 	dmb	ish
 8105fe6:	b2d3      	uxtb	r3, r2
 8105fe8:	2b00      	cmp	r3, #0
 8105fea:	d1ef      	bne.n	8105fcc <__metal_mutex_acquire+0xa>
}
 8105fec:	bf00      	nop
 8105fee:	bf00      	nop
 8105ff0:	370c      	adds	r7, #12
 8105ff2:	46bd      	mov	sp, r7
 8105ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ff8:	4770      	bx	lr

08105ffa <__metal_mutex_release>:
{
 8105ffa:	b480      	push	{r7}
 8105ffc:	b083      	sub	sp, #12
 8105ffe:	af00      	add	r7, sp, #0
 8106000:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	f3bf 8f5b 	dmb	ish
 8106008:	2200      	movs	r2, #0
 810600a:	701a      	strb	r2, [r3, #0]
 810600c:	f3bf 8f5b 	dmb	ish
}
 8106010:	bf00      	nop
 8106012:	370c      	adds	r7, #12
 8106014:	46bd      	mov	sp, r7
 8106016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810601a:	4770      	bx	lr

0810601c <metal_mutex_init>:
{
 810601c:	b580      	push	{r7, lr}
 810601e:	b082      	sub	sp, #8
 8106020:	af00      	add	r7, sp, #0
 8106022:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8106024:	6878      	ldr	r0, [r7, #4]
 8106026:	f7ff ffb6 	bl	8105f96 <__metal_mutex_init>
}
 810602a:	bf00      	nop
 810602c:	3708      	adds	r7, #8
 810602e:	46bd      	mov	sp, r7
 8106030:	bd80      	pop	{r7, pc}

08106032 <metal_mutex_acquire>:
{
 8106032:	b580      	push	{r7, lr}
 8106034:	b082      	sub	sp, #8
 8106036:	af00      	add	r7, sp, #0
 8106038:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 810603a:	6878      	ldr	r0, [r7, #4]
 810603c:	f7ff ffc1 	bl	8105fc2 <__metal_mutex_acquire>
}
 8106040:	bf00      	nop
 8106042:	3708      	adds	r7, #8
 8106044:	46bd      	mov	sp, r7
 8106046:	bd80      	pop	{r7, pc}

08106048 <metal_mutex_release>:
{
 8106048:	b580      	push	{r7, lr}
 810604a:	b082      	sub	sp, #8
 810604c:	af00      	add	r7, sp, #0
 810604e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8106050:	6878      	ldr	r0, [r7, #4]
 8106052:	f7ff ffd2 	bl	8105ffa <__metal_mutex_release>
}
 8106056:	bf00      	nop
 8106058:	3708      	adds	r7, #8
 810605a:	46bd      	mov	sp, r7
 810605c:	bd80      	pop	{r7, pc}

0810605e <rpmsg_init_ept>:
{
 810605e:	b580      	push	{r7, lr}
 8106060:	b084      	sub	sp, #16
 8106062:	af00      	add	r7, sp, #0
 8106064:	60f8      	str	r0, [r7, #12]
 8106066:	60b9      	str	r1, [r7, #8]
 8106068:	607a      	str	r2, [r7, #4]
 810606a:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 810606c:	68fb      	ldr	r3, [r7, #12]
 810606e:	2220      	movs	r2, #32
 8106070:	68b9      	ldr	r1, [r7, #8]
 8106072:	4618      	mov	r0, r3
 8106074:	f002 f9f0 	bl	8108458 <strncpy>
	ept->addr = src;
 8106078:	68fb      	ldr	r3, [r7, #12]
 810607a:	687a      	ldr	r2, [r7, #4]
 810607c:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 810607e:	68fb      	ldr	r3, [r7, #12]
 8106080:	683a      	ldr	r2, [r7, #0]
 8106082:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8106084:	68fb      	ldr	r3, [r7, #12]
 8106086:	69ba      	ldr	r2, [r7, #24]
 8106088:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 810608a:	68fb      	ldr	r3, [r7, #12]
 810608c:	69fa      	ldr	r2, [r7, #28]
 810608e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8106090:	bf00      	nop
 8106092:	3710      	adds	r7, #16
 8106094:	46bd      	mov	sp, r7
 8106096:	bd80      	pop	{r7, pc}

08106098 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8106098:	b480      	push	{r7}
 810609a:	b083      	sub	sp, #12
 810609c:	af00      	add	r7, sp, #0
 810609e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81060a4:	699b      	ldr	r3, [r3, #24]
}
 81060a6:	4618      	mov	r0, r3
 81060a8:	370c      	adds	r7, #12
 81060aa:	46bd      	mov	sp, r7
 81060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b0:	4770      	bx	lr

081060b2 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 81060b2:	b580      	push	{r7, lr}
 81060b4:	b082      	sub	sp, #8
 81060b6:	af00      	add	r7, sp, #0
 81060b8:	6078      	str	r0, [r7, #4]
 81060ba:	460b      	mov	r3, r1
 81060bc:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81060c2:	6a1b      	ldr	r3, [r3, #32]
 81060c4:	685b      	ldr	r3, [r3, #4]
 81060c6:	687a      	ldr	r2, [r7, #4]
 81060c8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 81060ca:	78f9      	ldrb	r1, [r7, #3]
 81060cc:	4610      	mov	r0, r2
 81060ce:	4798      	blx	r3
}
 81060d0:	bf00      	nop
 81060d2:	3708      	adds	r7, #8
 81060d4:	46bd      	mov	sp, r7
 81060d6:	bd80      	pop	{r7, pc}

081060d8 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 81060d8:	b580      	push	{r7, lr}
 81060da:	b082      	sub	sp, #8
 81060dc:	af00      	add	r7, sp, #0
 81060de:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81060e4:	6a1b      	ldr	r3, [r3, #32]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	687a      	ldr	r2, [r7, #4]
 81060ea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 81060ec:	4610      	mov	r0, r2
 81060ee:	4798      	blx	r3
 81060f0:	4603      	mov	r3, r0
}
 81060f2:	4618      	mov	r0, r3
 81060f4:	3708      	adds	r7, #8
 81060f6:	46bd      	mov	sp, r7
 81060f8:	bd80      	pop	{r7, pc}

081060fa <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 81060fa:	b580      	push	{r7, lr}
 81060fc:	b082      	sub	sp, #8
 81060fe:	af00      	add	r7, sp, #0
 8106100:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106106:	6a1b      	ldr	r3, [r3, #32]
 8106108:	689b      	ldr	r3, [r3, #8]
 810610a:	687a      	ldr	r2, [r7, #4]
 810610c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810610e:	4610      	mov	r0, r2
 8106110:	4798      	blx	r3
 8106112:	4603      	mov	r3, r0
}
 8106114:	4618      	mov	r0, r3
 8106116:	3708      	adds	r7, #8
 8106118:	46bd      	mov	sp, r7
 810611a:	bd80      	pop	{r7, pc}

0810611c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 810611c:	b580      	push	{r7, lr}
 810611e:	b086      	sub	sp, #24
 8106120:	af02      	add	r7, sp, #8
 8106122:	60f8      	str	r0, [r7, #12]
 8106124:	60b9      	str	r1, [r7, #8]
 8106126:	607a      	str	r2, [r7, #4]
 8106128:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 810612a:	68fb      	ldr	r3, [r7, #12]
 810612c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 810612e:	68b9      	ldr	r1, [r7, #8]
 8106130:	69bb      	ldr	r3, [r7, #24]
 8106132:	9300      	str	r3, [sp, #0]
 8106134:	683b      	ldr	r3, [r7, #0]
 8106136:	687a      	ldr	r2, [r7, #4]
 8106138:	f000 fb4a 	bl	81067d0 <virtio_create_virtqueues>
 810613c:	4603      	mov	r3, r0
					callbacks);
}
 810613e:	4618      	mov	r0, r3
 8106140:	3710      	adds	r7, #16
 8106142:	46bd      	mov	sp, r7
 8106144:	bd80      	pop	{r7, pc}

08106146 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8106146:	b580      	push	{r7, lr}
 8106148:	b082      	sub	sp, #8
 810614a:	af00      	add	r7, sp, #0
 810614c:	6078      	str	r0, [r7, #4]
 810614e:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8106150:	f04f 33ff 	mov.w	r3, #4294967295
 8106154:	683a      	ldr	r2, [r7, #0]
 8106156:	2100      	movs	r1, #0
 8106158:	6878      	ldr	r0, [r7, #4]
 810615a:	f7ff fdad 	bl	8105cb8 <rpmsg_get_endpoint>
 810615e:	4603      	mov	r3, r0
}
 8106160:	4618      	mov	r0, r3
 8106162:	3708      	adds	r7, #8
 8106164:	46bd      	mov	sp, r7
 8106166:	bd80      	pop	{r7, pc}

08106168 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8106168:	b480      	push	{r7}
 810616a:	b085      	sub	sp, #20
 810616c:	af00      	add	r7, sp, #0
 810616e:	60f8      	str	r0, [r7, #12]
 8106170:	60b9      	str	r1, [r7, #8]
 8106172:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8106174:	68fb      	ldr	r3, [r7, #12]
 8106176:	2b00      	cmp	r3, #0
 8106178:	d01d      	beq.n	81061b6 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 810617a:	68fb      	ldr	r3, [r7, #12]
 810617c:	68ba      	ldr	r2, [r7, #8]
 810617e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	f003 0303 	and.w	r3, r3, #3
 8106186:	2b00      	cmp	r3, #0
 8106188:	d004      	beq.n	8106194 <rpmsg_virtio_init_shm_pool+0x2c>
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	f023 0303 	bic.w	r3, r3, #3
 8106190:	3304      	adds	r3, #4
 8106192:	e000      	b.n	8106196 <rpmsg_virtio_init_shm_pool+0x2e>
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	68fa      	ldr	r2, [r7, #12]
 8106198:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	f003 0303 	and.w	r3, r3, #3
 81061a0:	2b00      	cmp	r3, #0
 81061a2:	d004      	beq.n	81061ae <rpmsg_virtio_init_shm_pool+0x46>
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	f023 0303 	bic.w	r3, r3, #3
 81061aa:	3304      	adds	r3, #4
 81061ac:	e000      	b.n	81061b0 <rpmsg_virtio_init_shm_pool+0x48>
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	68fa      	ldr	r2, [r7, #12]
 81061b2:	6053      	str	r3, [r2, #4]
 81061b4:	e000      	b.n	81061b8 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 81061b6:	bf00      	nop
}
 81061b8:	3714      	adds	r7, #20
 81061ba:	46bd      	mov	sp, r7
 81061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061c0:	4770      	bx	lr

081061c2 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 81061c2:	b580      	push	{r7, lr}
 81061c4:	b086      	sub	sp, #24
 81061c6:	af00      	add	r7, sp, #0
 81061c8:	60f8      	str	r0, [r7, #12]
 81061ca:	60b9      	str	r1, [r7, #8]
 81061cc:	607a      	str	r2, [r7, #4]
 81061ce:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81061d0:	68f8      	ldr	r0, [r7, #12]
 81061d2:	f7ff ff61 	bl	8106098 <rpmsg_virtio_get_role>
 81061d6:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81061d8:	697b      	ldr	r3, [r7, #20]
 81061da:	2b01      	cmp	r3, #1
 81061dc:	d106      	bne.n	81061ec <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 81061de:	68fb      	ldr	r3, [r7, #12]
 81061e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81061e2:	8879      	ldrh	r1, [r7, #2]
 81061e4:	687a      	ldr	r2, [r7, #4]
 81061e6:	4618      	mov	r0, r3
 81061e8:	f000 fc9c 	bl	8106b24 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 81061ec:	bf00      	nop
 81061ee:	3718      	adds	r7, #24
 81061f0:	46bd      	mov	sp, r7
 81061f2:	bd80      	pop	{r7, pc}

081061f4 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 81061f4:	b580      	push	{r7, lr}
 81061f6:	b086      	sub	sp, #24
 81061f8:	af00      	add	r7, sp, #0
 81061fa:	60f8      	str	r0, [r7, #12]
 81061fc:	60b9      	str	r1, [r7, #8]
 81061fe:	607a      	str	r2, [r7, #4]
 8106200:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106202:	68f8      	ldr	r0, [r7, #12]
 8106204:	f7ff ff48 	bl	8106098 <rpmsg_virtio_get_role>
 8106208:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810620a:	697b      	ldr	r3, [r7, #20]
 810620c:	2b01      	cmp	r3, #1
 810620e:	d108      	bne.n	8106222 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8106210:	68fb      	ldr	r3, [r7, #12]
 8106212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106214:	8879      	ldrh	r1, [r7, #2]
 8106216:	687a      	ldr	r2, [r7, #4]
 8106218:	4618      	mov	r0, r3
 810621a:	f000 fc83 	bl	8106b24 <virtqueue_add_consumed_buffer>
 810621e:	4603      	mov	r3, r0
 8106220:	e000      	b.n	8106224 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8106222:	2300      	movs	r3, #0
}
 8106224:	4618      	mov	r0, r3
 8106226:	3718      	adds	r7, #24
 8106228:	46bd      	mov	sp, r7
 810622a:	bd80      	pop	{r7, pc}

0810622c <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 810622c:	b580      	push	{r7, lr}
 810622e:	b086      	sub	sp, #24
 8106230:	af00      	add	r7, sp, #0
 8106232:	60f8      	str	r0, [r7, #12]
 8106234:	60b9      	str	r1, [r7, #8]
 8106236:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106238:	68f8      	ldr	r0, [r7, #12]
 810623a:	f7ff ff2d 	bl	8106098 <rpmsg_virtio_get_role>
 810623e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8106240:	2300      	movs	r3, #0
 8106242:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106244:	693b      	ldr	r3, [r7, #16]
 8106246:	2b01      	cmp	r3, #1
 8106248:	d107      	bne.n	810625a <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 810624a:	68fb      	ldr	r3, [r7, #12]
 810624c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810624e:	68ba      	ldr	r2, [r7, #8]
 8106250:	6879      	ldr	r1, [r7, #4]
 8106252:	4618      	mov	r0, r3
 8106254:	f000 fc20 	bl	8106a98 <virtqueue_get_available_buffer>
 8106258:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 810625a:	697b      	ldr	r3, [r7, #20]
}
 810625c:	4618      	mov	r0, r3
 810625e:	3718      	adds	r7, #24
 8106260:	46bd      	mov	sp, r7
 8106262:	bd80      	pop	{r7, pc}

08106264 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8106264:	b580      	push	{r7, lr}
 8106266:	b086      	sub	sp, #24
 8106268:	af00      	add	r7, sp, #0
 810626a:	60f8      	str	r0, [r7, #12]
 810626c:	60b9      	str	r1, [r7, #8]
 810626e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106270:	68f8      	ldr	r0, [r7, #12]
 8106272:	f7ff ff11 	bl	8106098 <rpmsg_virtio_get_role>
 8106276:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8106278:	2300      	movs	r3, #0
 810627a:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810627c:	693b      	ldr	r3, [r7, #16]
 810627e:	2b01      	cmp	r3, #1
 8106280:	d107      	bne.n	8106292 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8106282:	68fb      	ldr	r3, [r7, #12]
 8106284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106286:	68ba      	ldr	r2, [r7, #8]
 8106288:	6879      	ldr	r1, [r7, #4]
 810628a:	4618      	mov	r0, r3
 810628c:	f000 fc04 	bl	8106a98 <virtqueue_get_available_buffer>
 8106290:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8106292:	697b      	ldr	r3, [r7, #20]
 8106294:	2b00      	cmp	r3, #0
 8106296:	d005      	beq.n	81062a4 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8106298:	68bb      	ldr	r3, [r7, #8]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	4619      	mov	r1, r3
 810629e:	6978      	ldr	r0, [r7, #20]
 81062a0:	f7ff fe2b 	bl	8105efa <metal_cache_invalidate>
	}

	return data;
 81062a4:	697b      	ldr	r3, [r7, #20]
}
 81062a6:	4618      	mov	r0, r3
 81062a8:	3718      	adds	r7, #24
 81062aa:	46bd      	mov	sp, r7
 81062ac:	bd80      	pop	{r7, pc}

081062ae <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 81062ae:	b580      	push	{r7, lr}
 81062b0:	b084      	sub	sp, #16
 81062b2:	af00      	add	r7, sp, #0
 81062b4:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 81062b6:	6878      	ldr	r0, [r7, #4]
 81062b8:	f7ff ff0e 	bl	81060d8 <rpmsg_virtio_get_status>
 81062bc:	4603      	mov	r3, r0
 81062be:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 81062c0:	7bfb      	ldrb	r3, [r7, #15]
 81062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81062c6:	2b00      	cmp	r3, #0
 81062c8:	d004      	beq.n	81062d4 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 81062ca:	2100      	movs	r1, #0
 81062cc:	6878      	ldr	r0, [r7, #4]
 81062ce:	f7ff fef0 	bl	81060b2 <rpmsg_virtio_set_status>
 81062d2:	e7f0      	b.n	81062b6 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 81062d4:	7bfb      	ldrb	r3, [r7, #15]
 81062d6:	f003 0304 	and.w	r3, r3, #4
 81062da:	2b00      	cmp	r3, #0
 81062dc:	d0eb      	beq.n	81062b6 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 81062de:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 81062e0:	4618      	mov	r0, r3
 81062e2:	3710      	adds	r7, #16
 81062e4:	46bd      	mov	sp, r7
 81062e6:	bd80      	pop	{r7, pc}

081062e8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 81062e8:	b580      	push	{r7, lr}
 81062ea:	b084      	sub	sp, #16
 81062ec:	af00      	add	r7, sp, #0
 81062ee:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81062f0:	6878      	ldr	r0, [r7, #4]
 81062f2:	f7ff fed1 	bl	8106098 <rpmsg_virtio_get_role>
 81062f6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 81062f8:	2300      	movs	r3, #0
 81062fa:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81062fc:	68bb      	ldr	r3, [r7, #8]
 81062fe:	2b01      	cmp	r3, #1
 8106300:	d107      	bne.n	8106312 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106306:	4618      	mov	r0, r3
 8106308:	f000 fc86 	bl	8106c18 <virtqueue_get_desc_size>
 810630c:	4603      	mov	r3, r0
 810630e:	3b10      	subs	r3, #16
		length =
 8106310:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8106312:	68fb      	ldr	r3, [r7, #12]
}
 8106314:	4618      	mov	r0, r3
 8106316:	3710      	adds	r7, #16
 8106318:	46bd      	mov	sp, r7
 810631a:	bd80      	pop	{r7, pc}

0810631c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 810631c:	b580      	push	{r7, lr}
 810631e:	b090      	sub	sp, #64	; 0x40
 8106320:	af00      	add	r7, sp, #0
 8106322:	60f8      	str	r0, [r7, #12]
 8106324:	60b9      	str	r1, [r7, #8]
 8106326:	607a      	str	r2, [r7, #4]
 8106328:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 810632a:	2300      	movs	r3, #0
 810632c:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 810632e:	2300      	movs	r3, #0
 8106330:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8106332:	68fb      	ldr	r3, [r7, #12]
 8106334:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8106336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106338:	f7ff fece 	bl	81060d8 <rpmsg_virtio_get_status>
 810633c:	4603      	mov	r3, r0
 810633e:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8106340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106342:	f003 0304 	and.w	r3, r3, #4
 8106346:	2b00      	cmp	r3, #0
 8106348:	d101      	bne.n	810634e <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 810634a:	4b45      	ldr	r3, [pc, #276]	; (8106460 <rpmsg_virtio_send_offchannel_raw+0x144>)
 810634c:	e083      	b.n	8106456 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 810634e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106350:	2b00      	cmp	r3, #0
 8106352:	d003      	beq.n	810635c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8106354:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8106358:	63bb      	str	r3, [r7, #56]	; 0x38
 810635a:	e001      	b.n	8106360 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 810635c:	2300      	movs	r3, #0
 810635e:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8106360:	68fb      	ldr	r3, [r7, #12]
 8106362:	3358      	adds	r3, #88	; 0x58
 8106364:	4618      	mov	r0, r3
 8106366:	f7ff fe64 	bl	8106032 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 810636a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810636c:	f7ff ffbc 	bl	81062e8 <_rpmsg_virtio_get_buffer_size>
 8106370:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8106372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106376:	429a      	cmp	r2, r3
 8106378:	dc08      	bgt.n	810638c <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 810637a:	f107 0216 	add.w	r2, r7, #22
 810637e:	f107 0310 	add.w	r3, r7, #16
 8106382:	4619      	mov	r1, r3
 8106384:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106386:	f7ff ff51 	bl	810622c <rpmsg_virtio_get_tx_buffer>
 810638a:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 810638c:	68fb      	ldr	r3, [r7, #12]
 810638e:	3358      	adds	r3, #88	; 0x58
 8106390:	4618      	mov	r0, r3
 8106392:	f7ff fe59 	bl	8106048 <metal_mutex_release>
		if (buffer || !tick_count)
 8106396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106398:	2b00      	cmp	r3, #0
 810639a:	d10e      	bne.n	81063ba <rpmsg_virtio_send_offchannel_raw+0x9e>
 810639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810639e:	2b00      	cmp	r3, #0
 81063a0:	d00b      	beq.n	81063ba <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 81063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d001      	beq.n	81063ac <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 81063a8:	4b2e      	ldr	r3, [pc, #184]	; (8106464 <rpmsg_virtio_send_offchannel_raw+0x148>)
 81063aa:	e054      	b.n	8106456 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 81063ac:	200a      	movs	r0, #10
 81063ae:	f7ff fdbc 	bl	8105f2a <metal_sleep_usec>
		tick_count--;
 81063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81063b4:	3b01      	subs	r3, #1
 81063b6:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 81063b8:	e7d2      	b.n	8106360 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 81063ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81063bc:	2b00      	cmp	r3, #0
 81063be:	d101      	bne.n	81063c4 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 81063c0:	4b29      	ldr	r3, [pc, #164]	; (8106468 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 81063c2:	e048      	b.n	8106456 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 81063c8:	68bb      	ldr	r3, [r7, #8]
 81063ca:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 81063cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81063ce:	b29b      	uxth	r3, r3
 81063d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 81063d2:	2300      	movs	r3, #0
 81063d4:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 81063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81063da:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 81063dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81063de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81063e0:	f7ff fdc0 	bl	8105f64 <metal_io_virt_to_offset>
 81063e4:	4601      	mov	r1, r0
 81063e6:	f107 0218 	add.w	r2, r7, #24
 81063ea:	2310      	movs	r3, #16
 81063ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81063ee:	f7fe ff5a 	bl	81052a6 <metal_io_block_write>
 81063f2:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 81063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063f6:	2b10      	cmp	r3, #16
 81063f8:	d000      	beq.n	81063fc <rpmsg_virtio_send_offchannel_raw+0xe0>
 81063fa:	e7fe      	b.n	81063fa <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 81063fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81063fe:	3310      	adds	r3, #16
 8106400:	4619      	mov	r1, r3
 8106402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106404:	f7ff fdae 	bl	8105f64 <metal_io_virt_to_offset>
 8106408:	4601      	mov	r1, r0
 810640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810640c:	683a      	ldr	r2, [r7, #0]
 810640e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106410:	f7fe ff49 	bl	81052a6 <metal_io_block_write>
 8106414:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8106416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810641a:	429a      	cmp	r2, r3
 810641c:	d000      	beq.n	8106420 <rpmsg_virtio_send_offchannel_raw+0x104>
 810641e:	e7fe      	b.n	810641e <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8106420:	68fb      	ldr	r3, [r7, #12]
 8106422:	3358      	adds	r3, #88	; 0x58
 8106424:	4618      	mov	r0, r3
 8106426:	f7ff fe04 	bl	8106032 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 810642a:	693a      	ldr	r2, [r7, #16]
 810642c:	8afb      	ldrh	r3, [r7, #22]
 810642e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106430:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106432:	f7ff fedf 	bl	81061f4 <rpmsg_virtio_enqueue_buffer>
 8106436:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8106438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810643a:	2b00      	cmp	r3, #0
 810643c:	d000      	beq.n	8106440 <rpmsg_virtio_send_offchannel_raw+0x124>
 810643e:	e7fe      	b.n	810643e <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8106440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106444:	4618      	mov	r0, r3
 8106446:	f000 fbd1 	bl	8106bec <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 810644a:	68fb      	ldr	r3, [r7, #12]
 810644c:	3358      	adds	r3, #88	; 0x58
 810644e:	4618      	mov	r0, r3
 8106450:	f7ff fdfa 	bl	8106048 <metal_mutex_release>

	return size;
 8106454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8106456:	4618      	mov	r0, r3
 8106458:	3740      	adds	r7, #64	; 0x40
 810645a:	46bd      	mov	sp, r7
 810645c:	bd80      	pop	{r7, pc}
 810645e:	bf00      	nop
 8106460:	fffff82c 	.word	0xfffff82c
 8106464:	fffff82b 	.word	0xfffff82b
 8106468:	fffff82e 	.word	0xfffff82e

0810646c <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 810646c:	b480      	push	{r7}
 810646e:	b083      	sub	sp, #12
 8106470:	af00      	add	r7, sp, #0
 8106472:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8106474:	bf00      	nop
 8106476:	370c      	adds	r7, #12
 8106478:	46bd      	mov	sp, r7
 810647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810647e:	4770      	bx	lr

08106480 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8106480:	b590      	push	{r4, r7, lr}
 8106482:	b08d      	sub	sp, #52	; 0x34
 8106484:	af02      	add	r7, sp, #8
 8106486:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 810648e:	6a3b      	ldr	r3, [r7, #32]
 8106490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106492:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8106494:	69fb      	ldr	r3, [r7, #28]
 8106496:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8106498:	69bb      	ldr	r3, [r7, #24]
 810649a:	3358      	adds	r3, #88	; 0x58
 810649c:	4618      	mov	r0, r3
 810649e:	f7ff fdc8 	bl	8106032 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 81064a2:	f107 020a 	add.w	r2, r7, #10
 81064a6:	f107 030c 	add.w	r3, r7, #12
 81064aa:	4619      	mov	r1, r3
 81064ac:	69f8      	ldr	r0, [r7, #28]
 81064ae:	f7ff fed9 	bl	8106264 <rpmsg_virtio_get_rx_buffer>
 81064b2:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 81064b4:	69bb      	ldr	r3, [r7, #24]
 81064b6:	3358      	adds	r3, #88	; 0x58
 81064b8:	4618      	mov	r0, r3
 81064ba:	f7ff fdc5 	bl	8106048 <metal_mutex_release>

	while (rp_hdr) {
 81064be:	e04c      	b.n	810655a <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 81064c0:	69bb      	ldr	r3, [r7, #24]
 81064c2:	3358      	adds	r3, #88	; 0x58
 81064c4:	4618      	mov	r0, r3
 81064c6:	f7ff fdb4 	bl	8106032 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 81064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064cc:	685b      	ldr	r3, [r3, #4]
 81064ce:	4619      	mov	r1, r3
 81064d0:	69b8      	ldr	r0, [r7, #24]
 81064d2:	f7ff fe38 	bl	8106146 <rpmsg_get_ept_from_addr>
 81064d6:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 81064d8:	69bb      	ldr	r3, [r7, #24]
 81064da:	3358      	adds	r3, #88	; 0x58
 81064dc:	4618      	mov	r0, r3
 81064de:	f7ff fdb3 	bl	8106048 <metal_mutex_release>

		if (!ept)
 81064e2:	697b      	ldr	r3, [r7, #20]
 81064e4:	2b00      	cmp	r3, #0
 81064e6:	d03c      	beq.n	8106562 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 81064e8:	697b      	ldr	r3, [r7, #20]
 81064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81064f0:	d103      	bne.n	81064fa <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 81064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064f4:	681a      	ldr	r2, [r3, #0]
 81064f6:	697b      	ldr	r3, [r7, #20]
 81064f8:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 81064fa:	697b      	ldr	r3, [r7, #20]
 81064fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 81064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106500:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8106504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106506:	899b      	ldrh	r3, [r3, #12]
 8106508:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810650a:	4618      	mov	r0, r3
 810650c:	697b      	ldr	r3, [r7, #20]
 810650e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106510:	697b      	ldr	r3, [r7, #20]
 8106512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106514:	9300      	str	r3, [sp, #0]
 8106516:	4613      	mov	r3, r2
 8106518:	4602      	mov	r2, r0
 810651a:	6978      	ldr	r0, [r7, #20]
 810651c:	47a0      	blx	r4
 810651e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8106520:	693b      	ldr	r3, [r7, #16]
 8106522:	2b00      	cmp	r3, #0
 8106524:	d000      	beq.n	8106528 <rpmsg_virtio_rx_callback+0xa8>
 8106526:	e7fe      	b.n	8106526 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8106528:	69bb      	ldr	r3, [r7, #24]
 810652a:	3358      	adds	r3, #88	; 0x58
 810652c:	4618      	mov	r0, r3
 810652e:	f7ff fd80 	bl	8106032 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8106532:	68fa      	ldr	r2, [r7, #12]
 8106534:	897b      	ldrh	r3, [r7, #10]
 8106536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8106538:	69f8      	ldr	r0, [r7, #28]
 810653a:	f7ff fe42 	bl	81061c2 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 810653e:	f107 020a 	add.w	r2, r7, #10
 8106542:	f107 030c 	add.w	r3, r7, #12
 8106546:	4619      	mov	r1, r3
 8106548:	69f8      	ldr	r0, [r7, #28]
 810654a:	f7ff fe8b 	bl	8106264 <rpmsg_virtio_get_rx_buffer>
 810654e:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8106550:	69bb      	ldr	r3, [r7, #24]
 8106552:	3358      	adds	r3, #88	; 0x58
 8106554:	4618      	mov	r0, r3
 8106556:	f7ff fd77 	bl	8106048 <metal_mutex_release>
	while (rp_hdr) {
 810655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810655c:	2b00      	cmp	r3, #0
 810655e:	d1af      	bne.n	81064c0 <rpmsg_virtio_rx_callback+0x40>
 8106560:	e000      	b.n	8106564 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8106562:	bf00      	nop
	}
}
 8106564:	372c      	adds	r7, #44	; 0x2c
 8106566:	46bd      	mov	sp, r7
 8106568:	bd90      	pop	{r4, r7, pc}

0810656a <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 810656a:	b580      	push	{r7, lr}
 810656c:	b092      	sub	sp, #72	; 0x48
 810656e:	af00      	add	r7, sp, #0
 8106570:	60f8      	str	r0, [r7, #12]
 8106572:	60b9      	str	r1, [r7, #8]
 8106574:	607a      	str	r2, [r7, #4]
 8106576:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8106578:	68fb      	ldr	r3, [r7, #12]
 810657a:	6a1b      	ldr	r3, [r3, #32]
 810657c:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 810657e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106580:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8106582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106586:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8106588:	68bb      	ldr	r3, [r7, #8]
 810658a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	2b28      	cmp	r3, #40	; 0x28
 8106590:	d001      	beq.n	8106596 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8106592:	2300      	movs	r3, #0
 8106594:	e057      	b.n	8106646 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8106596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8106598:	4619      	mov	r1, r3
 810659a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810659c:	f7ff fce2 	bl	8105f64 <metal_io_virt_to_offset>
 81065a0:	4601      	mov	r1, r0
 81065a2:	f107 0210 	add.w	r2, r7, #16
 81065a6:	2320      	movs	r3, #32
 81065a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 81065aa:	f7fe fe05 	bl	81051b8 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 81065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065b0:	6a1b      	ldr	r3, [r3, #32]
 81065b2:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 81065b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81065b6:	3358      	adds	r3, #88	; 0x58
 81065b8:	4618      	mov	r0, r3
 81065ba:	f7ff fd3a 	bl	8106032 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 81065be:	f107 0110 	add.w	r1, r7, #16
 81065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81065c4:	f04f 32ff 	mov.w	r2, #4294967295
 81065c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81065ca:	f7ff fb75 	bl	8105cb8 <rpmsg_get_endpoint>
 81065ce:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 81065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81065d4:	f003 0301 	and.w	r3, r3, #1
 81065d8:	2b00      	cmp	r3, #0
 81065da:	d017      	beq.n	810660c <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 81065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065de:	2b00      	cmp	r3, #0
 81065e0:	d003      	beq.n	81065ea <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 81065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065e4:	f04f 32ff 	mov.w	r2, #4294967295
 81065e8:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 81065ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81065ec:	3358      	adds	r3, #88	; 0x58
 81065ee:	4618      	mov	r0, r3
 81065f0:	f7ff fd2a 	bl	8106048 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 81065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d024      	beq.n	8106644 <rpmsg_virtio_ns_callback+0xda>
 81065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d020      	beq.n	8106644 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8106602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106606:	68f8      	ldr	r0, [r7, #12]
 8106608:	4798      	blx	r3
 810660a:	e01b      	b.n	8106644 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 810660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810660e:	2b00      	cmp	r3, #0
 8106610:	d110      	bne.n	8106634 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8106612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106614:	3358      	adds	r3, #88	; 0x58
 8106616:	4618      	mov	r0, r3
 8106618:	f7ff fd16 	bl	8106048 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 810661c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810661e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106620:	2b00      	cmp	r3, #0
 8106622:	d00f      	beq.n	8106644 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8106624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106628:	f107 0110 	add.w	r1, r7, #16
 810662c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810662e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8106630:	4798      	blx	r3
 8106632:	e007      	b.n	8106644 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8106634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106638:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 810663a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810663c:	3358      	adds	r3, #88	; 0x58
 810663e:	4618      	mov	r0, r3
 8106640:	f7ff fd02 	bl	8106048 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8106644:	2300      	movs	r3, #0
}
 8106646:	4618      	mov	r0, r3
 8106648:	3748      	adds	r7, #72	; 0x48
 810664a:	46bd      	mov	sp, r7
 810664c:	bd80      	pop	{r7, pc}
	...

08106650 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8106650:	b580      	push	{r7, lr}
 8106652:	b090      	sub	sp, #64	; 0x40
 8106654:	af02      	add	r7, sp, #8
 8106656:	60f8      	str	r0, [r7, #12]
 8106658:	60b9      	str	r1, [r7, #8]
 810665a:	607a      	str	r2, [r7, #4]
 810665c:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 8106662:	2264      	movs	r2, #100	; 0x64
 8106664:	2100      	movs	r1, #0
 8106666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106668:	f000 fe28 	bl	81072bc <memset>
	metal_mutex_init(&rdev->lock);
 810666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810666e:	3358      	adds	r3, #88	; 0x58
 8106670:	4618      	mov	r0, r3
 8106672:	f7ff fcd3 	bl	810601c <metal_mutex_init>
	rvdev->vdev = vdev;
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	68ba      	ldr	r2, [r7, #8]
 810667a:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 810667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810667e:	687a      	ldr	r2, [r7, #4]
 8106680:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8106682:	68bb      	ldr	r3, [r7, #8]
 8106684:	68fa      	ldr	r2, [r7, #12]
 8106686:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8106688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810668a:	4a38      	ldr	r2, [pc, #224]	; (810676c <rpmsg_init_vdev+0x11c>)
 810668c:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 810668e:	68f8      	ldr	r0, [r7, #12]
 8106690:	f7ff fd02 	bl	8106098 <rpmsg_virtio_get_role>
 8106694:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8106696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106698:	2b01      	cmp	r3, #1
 810669a:	d112      	bne.n	81066c2 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 810669c:	4b34      	ldr	r3, [pc, #208]	; (8106770 <rpmsg_init_vdev+0x120>)
 810669e:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 81066a0:	4b34      	ldr	r3, [pc, #208]	; (8106774 <rpmsg_init_vdev+0x124>)
 81066a2:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 81066a4:	4b34      	ldr	r3, [pc, #208]	; (8106778 <rpmsg_init_vdev+0x128>)
 81066a6:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 81066a8:	4b34      	ldr	r3, [pc, #208]	; (810677c <rpmsg_init_vdev+0x12c>)
 81066aa:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 81066ac:	68bb      	ldr	r3, [r7, #8]
 81066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066b0:	3318      	adds	r3, #24
 81066b2:	681a      	ldr	r2, [r3, #0]
 81066b4:	68fb      	ldr	r3, [r7, #12]
 81066b6:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 81066b8:	68bb      	ldr	r3, [r7, #8]
 81066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066bc:	681a      	ldr	r2, [r3, #0]
 81066be:	68fb      	ldr	r3, [r7, #12]
 81066c0:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 81066c2:	68fb      	ldr	r3, [r7, #12]
 81066c4:	683a      	ldr	r2, [r7, #0]
 81066c6:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81066ca:	2b01      	cmp	r3, #1
 81066cc:	d102      	bne.n	81066d4 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 81066ce:	68f8      	ldr	r0, [r7, #12]
 81066d0:	f7ff fded 	bl	81062ae <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 81066d4:	f107 0218 	add.w	r2, r7, #24
 81066d8:	f107 0310 	add.w	r3, r7, #16
 81066dc:	9300      	str	r3, [sp, #0]
 81066de:	4613      	mov	r3, r2
 81066e0:	2202      	movs	r2, #2
 81066e2:	2100      	movs	r1, #0
 81066e4:	68f8      	ldr	r0, [r7, #12]
 81066e6:	f7ff fd19 	bl	810611c <rpmsg_virtio_create_virtqueues>
 81066ea:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 81066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066ee:	2b00      	cmp	r3, #0
 81066f0:	d001      	beq.n	81066f6 <rpmsg_init_vdev+0xa6>
		return status;
 81066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066f4:	e035      	b.n	8106762 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 81066f6:	2300      	movs	r3, #0
 81066f8:	637b      	str	r3, [r7, #52]	; 0x34
 81066fa:	e00f      	b.n	810671c <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 81066fc:	68bb      	ldr	r3, [r7, #8]
 81066fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106702:	4613      	mov	r3, r2
 8106704:	005b      	lsls	r3, r3, #1
 8106706:	4413      	add	r3, r2
 8106708:	00db      	lsls	r3, r3, #3
 810670a:	440b      	add	r3, r1
 810670c:	681b      	ldr	r3, [r3, #0]
 810670e:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8106710:	6a3b      	ldr	r3, [r7, #32]
 8106712:	683a      	ldr	r2, [r7, #0]
 8106714:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106718:	3301      	adds	r3, #1
 810671a:	637b      	str	r3, [r7, #52]	; 0x34
 810671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810671e:	2b01      	cmp	r3, #1
 8106720:	d9ec      	bls.n	81066fc <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8106722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106724:	4618      	mov	r0, r3
 8106726:	f7ff fc0c 	bl	8105f42 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 810672a:	68f8      	ldr	r0, [r7, #12]
 810672c:	f7ff fce5 	bl	81060fa <rpmsg_virtio_get_features>
 8106730:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8106732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106734:	f003 0301 	and.w	r3, r3, #1
 8106738:	2b00      	cmp	r3, #0
 810673a:	d011      	beq.n	8106760 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 810673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810673e:	f103 0008 	add.w	r0, r3, #8
 8106742:	2300      	movs	r3, #0
 8106744:	9301      	str	r3, [sp, #4]
 8106746:	4b0e      	ldr	r3, [pc, #56]	; (8106780 <rpmsg_init_vdev+0x130>)
 8106748:	9300      	str	r3, [sp, #0]
 810674a:	2335      	movs	r3, #53	; 0x35
 810674c:	2235      	movs	r2, #53	; 0x35
 810674e:	490d      	ldr	r1, [pc, #52]	; (8106784 <rpmsg_init_vdev+0x134>)
 8106750:	f7ff fc85 	bl	810605e <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8106754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106756:	3308      	adds	r3, #8
 8106758:	4619      	mov	r1, r3
 810675a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810675c:	f7ff fb2e 	bl	8105dbc <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8106760:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8106762:	4618      	mov	r0, r3
 8106764:	3738      	adds	r7, #56	; 0x38
 8106766:	46bd      	mov	sp, r7
 8106768:	bd80      	pop	{r7, pc}
 810676a:	bf00      	nop
 810676c:	0810631d 	.word	0x0810631d
 8106770:	0810bc80 	.word	0x0810bc80
 8106774:	0810bc88 	.word	0x0810bc88
 8106778:	0810646d 	.word	0x0810646d
 810677c:	08106481 	.word	0x08106481
 8106780:	0810656b 	.word	0x0810656b
 8106784:	0810bc90 	.word	0x0810bc90

08106788 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8106788:	b480      	push	{r7}
 810678a:	b083      	sub	sp, #12
 810678c:	af00      	add	r7, sp, #0
 810678e:	6078      	str	r0, [r7, #4]
 8106790:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106792:	bf00      	nop
 8106794:	370c      	adds	r7, #12
 8106796:	46bd      	mov	sp, r7
 8106798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679c:	4770      	bx	lr

0810679e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 810679e:	b480      	push	{r7}
 81067a0:	b083      	sub	sp, #12
 81067a2:	af00      	add	r7, sp, #0
 81067a4:	6078      	str	r0, [r7, #4]
 81067a6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 81067a8:	bf00      	nop
 81067aa:	370c      	adds	r7, #12
 81067ac:	46bd      	mov	sp, r7
 81067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b2:	4770      	bx	lr

081067b4 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 81067b4:	b480      	push	{r7}
 81067b6:	b085      	sub	sp, #20
 81067b8:	af00      	add	r7, sp, #0
 81067ba:	60f8      	str	r0, [r7, #12]
 81067bc:	60b9      	str	r1, [r7, #8]
 81067be:	607a      	str	r2, [r7, #4]
 81067c0:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 81067c2:	68fb      	ldr	r3, [r7, #12]
}
 81067c4:	4618      	mov	r0, r3
 81067c6:	3714      	adds	r7, #20
 81067c8:	46bd      	mov	sp, r7
 81067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ce:	4770      	bx	lr

081067d0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 81067d0:	b590      	push	{r4, r7, lr}
 81067d2:	b08f      	sub	sp, #60	; 0x3c
 81067d4:	af04      	add	r7, sp, #16
 81067d6:	60f8      	str	r0, [r7, #12]
 81067d8:	60b9      	str	r1, [r7, #8]
 81067da:	607a      	str	r2, [r7, #4]
 81067dc:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 81067de:	68fb      	ldr	r3, [r7, #12]
 81067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067e2:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 81067e4:	687a      	ldr	r2, [r7, #4]
 81067e6:	6a3b      	ldr	r3, [r7, #32]
 81067e8:	429a      	cmp	r2, r3
 81067ea:	d902      	bls.n	81067f2 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 81067ec:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 81067f0:	e036      	b.n	8106860 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 81067f2:	2300      	movs	r3, #0
 81067f4:	627b      	str	r3, [r7, #36]	; 0x24
 81067f6:	e02e      	b.n	8106856 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 81067f8:	68fb      	ldr	r3, [r7, #12]
 81067fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81067fe:	4613      	mov	r3, r2
 8106800:	005b      	lsls	r3, r3, #1
 8106802:	4413      	add	r3, r2
 8106804:	00db      	lsls	r3, r3, #3
 8106806:	440b      	add	r3, r1
 8106808:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 810680a:	69fb      	ldr	r3, [r7, #28]
 810680c:	3304      	adds	r3, #4
 810680e:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106812:	b298      	uxth	r0, r3
 8106814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106816:	009b      	lsls	r3, r3, #2
 8106818:	683a      	ldr	r2, [r7, #0]
 810681a:	4413      	add	r3, r2
 810681c:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106820:	009b      	lsls	r3, r3, #2
 8106822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106824:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106826:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8106828:	68fa      	ldr	r2, [r7, #12]
 810682a:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810682c:	6a12      	ldr	r2, [r2, #32]
 810682e:	69f9      	ldr	r1, [r7, #28]
 8106830:	6809      	ldr	r1, [r1, #0]
 8106832:	9102      	str	r1, [sp, #8]
 8106834:	9201      	str	r2, [sp, #4]
 8106836:	9300      	str	r3, [sp, #0]
 8106838:	69bb      	ldr	r3, [r7, #24]
 810683a:	4622      	mov	r2, r4
 810683c:	4601      	mov	r1, r0
 810683e:	68f8      	ldr	r0, [r7, #12]
 8106840:	f000 f8f6 	bl	8106a30 <virtqueue_create>
 8106844:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8106846:	697b      	ldr	r3, [r7, #20]
 8106848:	2b00      	cmp	r3, #0
 810684a:	d001      	beq.n	8106850 <virtio_create_virtqueues+0x80>
			return ret;
 810684c:	697b      	ldr	r3, [r7, #20]
 810684e:	e007      	b.n	8106860 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8106850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106852:	3301      	adds	r3, #1
 8106854:	627b      	str	r3, [r7, #36]	; 0x24
 8106856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	429a      	cmp	r2, r3
 810685c:	d3cc      	bcc.n	81067f8 <virtio_create_virtqueues+0x28>
	}
	return 0;
 810685e:	2300      	movs	r3, #0
}
 8106860:	4618      	mov	r0, r3
 8106862:	372c      	adds	r7, #44	; 0x2c
 8106864:	46bd      	mov	sp, r7
 8106866:	bd90      	pop	{r4, r7, pc}

08106868 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8106868:	b480      	push	{r7}
 810686a:	b085      	sub	sp, #20
 810686c:	af00      	add	r7, sp, #0
 810686e:	60f8      	str	r0, [r7, #12]
 8106870:	60b9      	str	r1, [r7, #8]
 8106872:	607a      	str	r2, [r7, #4]
 8106874:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8106876:	68fb      	ldr	r3, [r7, #12]
 8106878:	68ba      	ldr	r2, [r7, #8]
 810687a:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 810687c:	68fb      	ldr	r3, [r7, #12]
 810687e:	687a      	ldr	r2, [r7, #4]
 8106880:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8106882:	68bb      	ldr	r3, [r7, #8]
 8106884:	011b      	lsls	r3, r3, #4
 8106886:	687a      	ldr	r2, [r7, #4]
 8106888:	441a      	add	r2, r3
 810688a:	68fb      	ldr	r3, [r7, #12]
 810688c:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 810688e:	68fb      	ldr	r3, [r7, #12]
 8106890:	689a      	ldr	r2, [r3, #8]
 8106892:	68bb      	ldr	r3, [r7, #8]
 8106894:	005b      	lsls	r3, r3, #1
 8106896:	4413      	add	r3, r2
 8106898:	3304      	adds	r3, #4
 810689a:	461a      	mov	r2, r3
 810689c:	683b      	ldr	r3, [r7, #0]
 810689e:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 81068a0:	1c5a      	adds	r2, r3, #1
 81068a2:	683b      	ldr	r3, [r7, #0]
 81068a4:	425b      	negs	r3, r3
 81068a6:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 81068a8:	461a      	mov	r2, r3
 81068aa:	68fb      	ldr	r3, [r7, #12]
 81068ac:	60da      	str	r2, [r3, #12]
}
 81068ae:	bf00      	nop
 81068b0:	3714      	adds	r7, #20
 81068b2:	46bd      	mov	sp, r7
 81068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068b8:	4770      	bx	lr

081068ba <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 81068ba:	b480      	push	{r7}
 81068bc:	b083      	sub	sp, #12
 81068be:	af00      	add	r7, sp, #0
 81068c0:	4603      	mov	r3, r0
 81068c2:	80fb      	strh	r3, [r7, #6]
 81068c4:	460b      	mov	r3, r1
 81068c6:	80bb      	strh	r3, [r7, #4]
 81068c8:	4613      	mov	r3, r2
 81068ca:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 81068cc:	88ba      	ldrh	r2, [r7, #4]
 81068ce:	88fb      	ldrh	r3, [r7, #6]
 81068d0:	1ad3      	subs	r3, r2, r3
 81068d2:	b29b      	uxth	r3, r3
 81068d4:	3b01      	subs	r3, #1
 81068d6:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 81068d8:	88b9      	ldrh	r1, [r7, #4]
 81068da:	887b      	ldrh	r3, [r7, #2]
 81068dc:	1acb      	subs	r3, r1, r3
 81068de:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 81068e0:	429a      	cmp	r2, r3
 81068e2:	bf34      	ite	cc
 81068e4:	2301      	movcc	r3, #1
 81068e6:	2300      	movcs	r3, #0
 81068e8:	b2db      	uxtb	r3, r3
}
 81068ea:	4618      	mov	r0, r3
 81068ec:	370c      	adds	r7, #12
 81068ee:	46bd      	mov	sp, r7
 81068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068f4:	4770      	bx	lr

081068f6 <metal_io_virt>:
{
 81068f6:	b480      	push	{r7}
 81068f8:	b083      	sub	sp, #12
 81068fa:	af00      	add	r7, sp, #0
 81068fc:	6078      	str	r0, [r7, #4]
 81068fe:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106908:	d009      	beq.n	810691e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	689b      	ldr	r3, [r3, #8]
 810690e:	683a      	ldr	r2, [r7, #0]
 8106910:	429a      	cmp	r2, r3
 8106912:	d804      	bhi.n	810691e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106918:	683b      	ldr	r3, [r7, #0]
 810691a:	4413      	add	r3, r2
 810691c:	e000      	b.n	8106920 <metal_io_virt+0x2a>
 810691e:	2300      	movs	r3, #0
}
 8106920:	4618      	mov	r0, r3
 8106922:	370c      	adds	r7, #12
 8106924:	46bd      	mov	sp, r7
 8106926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810692a:	4770      	bx	lr

0810692c <metal_io_phys>:
{
 810692c:	b480      	push	{r7}
 810692e:	b085      	sub	sp, #20
 8106930:	af00      	add	r7, sp, #0
 8106932:	6078      	str	r0, [r7, #4]
 8106934:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 810693a:	2b1f      	cmp	r3, #31
 810693c:	d805      	bhi.n	810694a <metal_io_phys+0x1e>
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	68db      	ldr	r3, [r3, #12]
 8106942:	683a      	ldr	r2, [r7, #0]
 8106944:	fa22 f303 	lsr.w	r3, r2, r3
 8106948:	e000      	b.n	810694c <metal_io_phys+0x20>
 810694a:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 810694c:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8106952:	2b00      	cmp	r3, #0
 8106954:	d010      	beq.n	8106978 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	689b      	ldr	r3, [r3, #8]
 810695a:	683a      	ldr	r2, [r7, #0]
 810695c:	429a      	cmp	r2, r3
 810695e:	d80b      	bhi.n	8106978 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	685a      	ldr	r2, [r3, #4]
 8106964:	68fb      	ldr	r3, [r7, #12]
 8106966:	009b      	lsls	r3, r3, #2
 8106968:	4413      	add	r3, r2
 810696a:	681a      	ldr	r2, [r3, #0]
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	6919      	ldr	r1, [r3, #16]
 8106970:	683b      	ldr	r3, [r7, #0]
 8106972:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8106974:	4413      	add	r3, r2
 8106976:	e001      	b.n	810697c <metal_io_phys+0x50>
 8106978:	f04f 33ff 	mov.w	r3, #4294967295
}
 810697c:	4618      	mov	r0, r3
 810697e:	3714      	adds	r7, #20
 8106980:	46bd      	mov	sp, r7
 8106982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106986:	4770      	bx	lr

08106988 <metal_io_phys_to_offset>:
{
 8106988:	b580      	push	{r7, lr}
 810698a:	b084      	sub	sp, #16
 810698c:	af00      	add	r7, sp, #0
 810698e:	6078      	str	r0, [r7, #4]
 8106990:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8106996:	f1b3 3fff 	cmp.w	r3, #4294967295
 810699a:	d105      	bne.n	81069a8 <metal_io_phys_to_offset+0x20>
 810699c:	687b      	ldr	r3, [r7, #4]
 810699e:	685b      	ldr	r3, [r3, #4]
 81069a0:	681b      	ldr	r3, [r3, #0]
 81069a2:	683a      	ldr	r2, [r7, #0]
 81069a4:	1ad3      	subs	r3, r2, r3
 81069a6:	e003      	b.n	81069b0 <metal_io_phys_to_offset+0x28>
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	691a      	ldr	r2, [r3, #16]
 81069ac:	683b      	ldr	r3, [r7, #0]
 81069ae:	4013      	ands	r3, r2
	unsigned long offset =
 81069b0:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 81069b2:	68f9      	ldr	r1, [r7, #12]
 81069b4:	6878      	ldr	r0, [r7, #4]
 81069b6:	f7ff ffb9 	bl	810692c <metal_io_phys>
 81069ba:	4602      	mov	r2, r0
 81069bc:	683b      	ldr	r3, [r7, #0]
 81069be:	4293      	cmp	r3, r2
 81069c0:	d101      	bne.n	81069c6 <metal_io_phys_to_offset+0x3e>
			return offset;
 81069c2:	68fb      	ldr	r3, [r7, #12]
 81069c4:	e00c      	b.n	81069e0 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	691a      	ldr	r2, [r3, #16]
 81069ca:	68fb      	ldr	r3, [r7, #12]
 81069cc:	4413      	add	r3, r2
 81069ce:	3301      	adds	r3, #1
 81069d0:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	689b      	ldr	r3, [r3, #8]
 81069d6:	68fa      	ldr	r2, [r7, #12]
 81069d8:	429a      	cmp	r2, r3
 81069da:	d3ea      	bcc.n	81069b2 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 81069dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 81069e0:	4618      	mov	r0, r3
 81069e2:	3710      	adds	r7, #16
 81069e4:	46bd      	mov	sp, r7
 81069e6:	bd80      	pop	{r7, pc}

081069e8 <metal_io_phys_to_virt>:
{
 81069e8:	b580      	push	{r7, lr}
 81069ea:	b082      	sub	sp, #8
 81069ec:	af00      	add	r7, sp, #0
 81069ee:	6078      	str	r0, [r7, #4]
 81069f0:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 81069f2:	6839      	ldr	r1, [r7, #0]
 81069f4:	6878      	ldr	r0, [r7, #4]
 81069f6:	f7ff ffc7 	bl	8106988 <metal_io_phys_to_offset>
 81069fa:	4603      	mov	r3, r0
 81069fc:	4619      	mov	r1, r3
 81069fe:	6878      	ldr	r0, [r7, #4]
 8106a00:	f7ff ff79 	bl	81068f6 <metal_io_virt>
 8106a04:	4603      	mov	r3, r0
}
 8106a06:	4618      	mov	r0, r3
 8106a08:	3708      	adds	r7, #8
 8106a0a:	46bd      	mov	sp, r7
 8106a0c:	bd80      	pop	{r7, pc}

08106a0e <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8106a0e:	b580      	push	{r7, lr}
 8106a10:	b084      	sub	sp, #16
 8106a12:	af00      	add	r7, sp, #0
 8106a14:	6078      	str	r0, [r7, #4]
 8106a16:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a1c:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8106a1e:	6839      	ldr	r1, [r7, #0]
 8106a20:	68f8      	ldr	r0, [r7, #12]
 8106a22:	f7ff ffe1 	bl	81069e8 <metal_io_phys_to_virt>
 8106a26:	4603      	mov	r3, r0
}
 8106a28:	4618      	mov	r0, r3
 8106a2a:	3710      	adds	r7, #16
 8106a2c:	46bd      	mov	sp, r7
 8106a2e:	bd80      	pop	{r7, pc}

08106a30 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8106a30:	b580      	push	{r7, lr}
 8106a32:	b086      	sub	sp, #24
 8106a34:	af00      	add	r7, sp, #0
 8106a36:	60f8      	str	r0, [r7, #12]
 8106a38:	607a      	str	r2, [r7, #4]
 8106a3a:	603b      	str	r3, [r7, #0]
 8106a3c:	460b      	mov	r3, r1
 8106a3e:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8106a40:	2300      	movs	r3, #0
 8106a42:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8106a44:	697b      	ldr	r3, [r7, #20]
 8106a46:	2b00      	cmp	r3, #0
 8106a48:	d121      	bne.n	8106a8e <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8106a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a4c:	68fa      	ldr	r2, [r7, #12]
 8106a4e:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8106a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a52:	687a      	ldr	r2, [r7, #4]
 8106a54:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8106a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a58:	897a      	ldrh	r2, [r7, #10]
 8106a5a:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8106a5c:	683b      	ldr	r3, [r7, #0]
 8106a5e:	891a      	ldrh	r2, [r3, #8]
 8106a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a62:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8106a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a66:	895a      	ldrh	r2, [r3, #10]
 8106a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a6a:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8106a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a6e:	6a3a      	ldr	r2, [r7, #32]
 8106a70:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8106a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106a76:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8106a78:	683b      	ldr	r3, [r7, #0]
 8106a7a:	6819      	ldr	r1, [r3, #0]
 8106a7c:	683b      	ldr	r3, [r7, #0]
 8106a7e:	685b      	ldr	r3, [r3, #4]
 8106a80:	461a      	mov	r2, r3
 8106a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a84:	f000 f8fb 	bl	8106c7e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8106a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a8a:	f000 f885 	bl	8106b98 <virtqueue_disable_cb>
	}

	return (status);
 8106a8e:	697b      	ldr	r3, [r7, #20]
}
 8106a90:	4618      	mov	r0, r3
 8106a92:	3718      	adds	r7, #24
 8106a94:	46bd      	mov	sp, r7
 8106a96:	bd80      	pop	{r7, pc}

08106a98 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8106a98:	b580      	push	{r7, lr}
 8106a9a:	b086      	sub	sp, #24
 8106a9c:	af00      	add	r7, sp, #0
 8106a9e:	60f8      	str	r0, [r7, #12]
 8106aa0:	60b9      	str	r1, [r7, #8]
 8106aa2:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8106aa4:	2300      	movs	r3, #0
 8106aa6:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8106aa8:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106ab0:	68fb      	ldr	r3, [r7, #12]
 8106ab2:	6a1b      	ldr	r3, [r3, #32]
 8106ab4:	885b      	ldrh	r3, [r3, #2]
 8106ab6:	429a      	cmp	r2, r3
 8106ab8:	d101      	bne.n	8106abe <virtqueue_get_available_buffer+0x26>
		return NULL;
 8106aba:	2300      	movs	r3, #0
 8106abc:	e02e      	b.n	8106b1c <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8106abe:	68fb      	ldr	r3, [r7, #12]
 8106ac0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106ac2:	1c5a      	adds	r2, r3, #1
 8106ac4:	b291      	uxth	r1, r2
 8106ac6:	68fa      	ldr	r2, [r7, #12]
 8106ac8:	8691      	strh	r1, [r2, #52]	; 0x34
 8106aca:	b21a      	sxth	r2, r3
 8106acc:	68fb      	ldr	r3, [r7, #12]
 8106ace:	895b      	ldrh	r3, [r3, #10]
 8106ad0:	3b01      	subs	r3, #1
 8106ad2:	b29b      	uxth	r3, r3
 8106ad4:	b21b      	sxth	r3, r3
 8106ad6:	4013      	ands	r3, r2
 8106ad8:	b21b      	sxth	r3, r3
 8106ada:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106adc:	68fb      	ldr	r3, [r7, #12]
 8106ade:	6a1a      	ldr	r2, [r3, #32]
 8106ae0:	8afb      	ldrh	r3, [r7, #22]
 8106ae2:	005b      	lsls	r3, r3, #1
 8106ae4:	4413      	add	r3, r2
 8106ae6:	889a      	ldrh	r2, [r3, #4]
 8106ae8:	68bb      	ldr	r3, [r7, #8]
 8106aea:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8106aec:	68fb      	ldr	r3, [r7, #12]
 8106aee:	69da      	ldr	r2, [r3, #28]
 8106af0:	68bb      	ldr	r3, [r7, #8]
 8106af2:	881b      	ldrh	r3, [r3, #0]
 8106af4:	011b      	lsls	r3, r3, #4
 8106af6:	4413      	add	r3, r2
 8106af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106afc:	4613      	mov	r3, r2
 8106afe:	4619      	mov	r1, r3
 8106b00:	68f8      	ldr	r0, [r7, #12]
 8106b02:	f7ff ff84 	bl	8106a0e <virtqueue_phys_to_virt>
 8106b06:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8106b08:	68fb      	ldr	r3, [r7, #12]
 8106b0a:	69da      	ldr	r2, [r3, #28]
 8106b0c:	68bb      	ldr	r3, [r7, #8]
 8106b0e:	881b      	ldrh	r3, [r3, #0]
 8106b10:	011b      	lsls	r3, r3, #4
 8106b12:	4413      	add	r3, r2
 8106b14:	689a      	ldr	r2, [r3, #8]
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8106b1a:	693b      	ldr	r3, [r7, #16]
}
 8106b1c:	4618      	mov	r0, r3
 8106b1e:	3718      	adds	r7, #24
 8106b20:	46bd      	mov	sp, r7
 8106b22:	bd80      	pop	{r7, pc}

08106b24 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8106b24:	b480      	push	{r7}
 8106b26:	b087      	sub	sp, #28
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	60f8      	str	r0, [r7, #12]
 8106b2c:	460b      	mov	r3, r1
 8106b2e:	607a      	str	r2, [r7, #4]
 8106b30:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8106b32:	2300      	movs	r3, #0
 8106b34:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8106b36:	68fb      	ldr	r3, [r7, #12]
 8106b38:	895b      	ldrh	r3, [r3, #10]
 8106b3a:	897a      	ldrh	r2, [r7, #10]
 8106b3c:	429a      	cmp	r2, r3
 8106b3e:	d901      	bls.n	8106b44 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8106b40:	4b14      	ldr	r3, [pc, #80]	; (8106b94 <virtqueue_add_consumed_buffer+0x70>)
 8106b42:	e021      	b.n	8106b88 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8106b44:	68fb      	ldr	r3, [r7, #12]
 8106b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106b48:	885b      	ldrh	r3, [r3, #2]
 8106b4a:	b21a      	sxth	r2, r3
 8106b4c:	68fb      	ldr	r3, [r7, #12]
 8106b4e:	895b      	ldrh	r3, [r3, #10]
 8106b50:	3b01      	subs	r3, #1
 8106b52:	b29b      	uxth	r3, r3
 8106b54:	b21b      	sxth	r3, r3
 8106b56:	4013      	ands	r3, r2
 8106b58:	b21b      	sxth	r3, r3
 8106b5a:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106b60:	8a7b      	ldrh	r3, [r7, #18]
 8106b62:	00db      	lsls	r3, r3, #3
 8106b64:	4413      	add	r3, r2
 8106b66:	3304      	adds	r3, #4
 8106b68:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8106b6a:	897a      	ldrh	r2, [r7, #10]
 8106b6c:	697b      	ldr	r3, [r7, #20]
 8106b6e:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8106b70:	697b      	ldr	r3, [r7, #20]
 8106b72:	687a      	ldr	r2, [r7, #4]
 8106b74:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8106b76:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8106b7a:	68fb      	ldr	r3, [r7, #12]
 8106b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106b7e:	885a      	ldrh	r2, [r3, #2]
 8106b80:	3201      	adds	r2, #1
 8106b82:	b292      	uxth	r2, r2
 8106b84:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8106b86:	2300      	movs	r3, #0
}
 8106b88:	4618      	mov	r0, r3
 8106b8a:	371c      	adds	r7, #28
 8106b8c:	46bd      	mov	sp, r7
 8106b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b92:	4770      	bx	lr
 8106b94:	fffff441 	.word	0xfffff441

08106b98 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8106b98:	b480      	push	{r7}
 8106b9a:	b083      	sub	sp, #12
 8106b9c:	af00      	add	r7, sp, #0
 8106b9e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	68db      	ldr	r3, [r3, #12]
 8106ba4:	f003 0302 	and.w	r3, r3, #2
 8106ba8:	2b00      	cmp	r3, #0
 8106baa:	d010      	beq.n	8106bce <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	895b      	ldrh	r3, [r3, #10]
 8106bb4:	1ad3      	subs	r3, r2, r3
 8106bb6:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8106bb8:	687b      	ldr	r3, [r7, #4]
 8106bba:	6a1a      	ldr	r2, [r3, #32]
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106bc0:	3901      	subs	r1, #1
 8106bc2:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8106bc4:	005b      	lsls	r3, r3, #1
 8106bc6:	4413      	add	r3, r2
 8106bc8:	460a      	mov	r2, r1
 8106bca:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8106bcc:	e008      	b.n	8106be0 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	6a1b      	ldr	r3, [r3, #32]
 8106bd2:	881a      	ldrh	r2, [r3, #0]
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	6a1b      	ldr	r3, [r3, #32]
 8106bd8:	f042 0201 	orr.w	r2, r2, #1
 8106bdc:	b292      	uxth	r2, r2
 8106bde:	801a      	strh	r2, [r3, #0]
}
 8106be0:	bf00      	nop
 8106be2:	370c      	adds	r7, #12
 8106be4:	46bd      	mov	sp, r7
 8106be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bea:	4770      	bx	lr

08106bec <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8106bec:	b580      	push	{r7, lr}
 8106bee:	b082      	sub	sp, #8
 8106bf0:	af00      	add	r7, sp, #0
 8106bf2:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8106bf4:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8106bf8:	6878      	ldr	r0, [r7, #4]
 8106bfa:	f000 f885 	bl	8106d08 <vq_ring_must_notify_host>
 8106bfe:	4603      	mov	r3, r0
 8106c00:	2b00      	cmp	r3, #0
 8106c02:	d002      	beq.n	8106c0a <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8106c04:	6878      	ldr	r0, [r7, #4]
 8106c06:	f000 f8b5 	bl	8106d74 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	2200      	movs	r2, #0
 8106c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8106c10:	bf00      	nop
 8106c12:	3708      	adds	r7, #8
 8106c14:	46bd      	mov	sp, r7
 8106c16:	bd80      	pop	{r7, pc}

08106c18 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8106c18:	b480      	push	{r7}
 8106c1a:	b085      	sub	sp, #20
 8106c1c:	af00      	add	r7, sp, #0
 8106c1e:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8106c20:	2300      	movs	r3, #0
 8106c22:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8106c24:	2300      	movs	r3, #0
 8106c26:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8106c28:	2300      	movs	r3, #0
 8106c2a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	6a1b      	ldr	r3, [r3, #32]
 8106c34:	885b      	ldrh	r3, [r3, #2]
 8106c36:	429a      	cmp	r2, r3
 8106c38:	d101      	bne.n	8106c3e <virtqueue_get_desc_size+0x26>
		return 0;
 8106c3a:	2300      	movs	r3, #0
 8106c3c:	e019      	b.n	8106c72 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106c42:	b21a      	sxth	r2, r3
 8106c44:	687b      	ldr	r3, [r7, #4]
 8106c46:	895b      	ldrh	r3, [r3, #10]
 8106c48:	3b01      	subs	r3, #1
 8106c4a:	b29b      	uxth	r3, r3
 8106c4c:	b21b      	sxth	r3, r3
 8106c4e:	4013      	ands	r3, r2
 8106c50:	b21b      	sxth	r3, r3
 8106c52:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106c54:	687b      	ldr	r3, [r7, #4]
 8106c56:	6a1a      	ldr	r2, [r3, #32]
 8106c58:	89fb      	ldrh	r3, [r7, #14]
 8106c5a:	005b      	lsls	r3, r3, #1
 8106c5c:	4413      	add	r3, r2
 8106c5e:	889b      	ldrh	r3, [r3, #4]
 8106c60:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	69da      	ldr	r2, [r3, #28]
 8106c66:	89bb      	ldrh	r3, [r7, #12]
 8106c68:	011b      	lsls	r3, r3, #4
 8106c6a:	4413      	add	r3, r2
 8106c6c:	689b      	ldr	r3, [r3, #8]
 8106c6e:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8106c70:	68bb      	ldr	r3, [r7, #8]
}
 8106c72:	4618      	mov	r0, r3
 8106c74:	3714      	adds	r7, #20
 8106c76:	46bd      	mov	sp, r7
 8106c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c7c:	4770      	bx	lr

08106c7e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8106c7e:	b580      	push	{r7, lr}
 8106c80:	b088      	sub	sp, #32
 8106c82:	af00      	add	r7, sp, #0
 8106c84:	60f8      	str	r0, [r7, #12]
 8106c86:	60b9      	str	r1, [r7, #8]
 8106c88:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8106c8a:	68fb      	ldr	r3, [r7, #12]
 8106c8c:	895b      	ldrh	r3, [r3, #10]
 8106c8e:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8106c90:	68fb      	ldr	r3, [r7, #12]
 8106c92:	3318      	adds	r3, #24
 8106c94:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8106c96:	69b9      	ldr	r1, [r7, #24]
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	68ba      	ldr	r2, [r7, #8]
 8106c9c:	6978      	ldr	r0, [r7, #20]
 8106c9e:	f7ff fde3 	bl	8106868 <vring_init>

	for (i = 0; i < size - 1; i++)
 8106ca2:	2300      	movs	r3, #0
 8106ca4:	61fb      	str	r3, [r7, #28]
 8106ca6:	e00c      	b.n	8106cc2 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8106ca8:	69fb      	ldr	r3, [r7, #28]
 8106caa:	b29a      	uxth	r2, r3
 8106cac:	697b      	ldr	r3, [r7, #20]
 8106cae:	6859      	ldr	r1, [r3, #4]
 8106cb0:	69fb      	ldr	r3, [r7, #28]
 8106cb2:	011b      	lsls	r3, r3, #4
 8106cb4:	440b      	add	r3, r1
 8106cb6:	3201      	adds	r2, #1
 8106cb8:	b292      	uxth	r2, r2
 8106cba:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8106cbc:	69fb      	ldr	r3, [r7, #28]
 8106cbe:	3301      	adds	r3, #1
 8106cc0:	61fb      	str	r3, [r7, #28]
 8106cc2:	69bb      	ldr	r3, [r7, #24]
 8106cc4:	3b01      	subs	r3, #1
 8106cc6:	69fa      	ldr	r2, [r7, #28]
 8106cc8:	429a      	cmp	r2, r3
 8106cca:	dbed      	blt.n	8106ca8 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8106ccc:	697b      	ldr	r3, [r7, #20]
 8106cce:	685a      	ldr	r2, [r3, #4]
 8106cd0:	69fb      	ldr	r3, [r7, #28]
 8106cd2:	011b      	lsls	r3, r3, #4
 8106cd4:	4413      	add	r3, r2
 8106cd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8106cda:	81da      	strh	r2, [r3, #14]
}
 8106cdc:	bf00      	nop
 8106cde:	3720      	adds	r7, #32
 8106ce0:	46bd      	mov	sp, r7
 8106ce2:	bd80      	pop	{r7, pc}

08106ce4 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8106ce4:	b580      	push	{r7, lr}
 8106ce6:	b082      	sub	sp, #8
 8106ce8:	af00      	add	r7, sp, #0
 8106cea:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8106cec:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	691b      	ldr	r3, [r3, #16]
 8106cf4:	2b00      	cmp	r3, #0
 8106cf6:	d003      	beq.n	8106d00 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	691b      	ldr	r3, [r3, #16]
 8106cfc:	6878      	ldr	r0, [r7, #4]
 8106cfe:	4798      	blx	r3
}
 8106d00:	bf00      	nop
 8106d02:	3708      	adds	r7, #8
 8106d04:	46bd      	mov	sp, r7
 8106d06:	bd80      	pop	{r7, pc}

08106d08 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8106d08:	b580      	push	{r7, lr}
 8106d0a:	b084      	sub	sp, #16
 8106d0c:	af00      	add	r7, sp, #0
 8106d0e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	68db      	ldr	r3, [r3, #12]
 8106d14:	f003 0302 	and.w	r3, r3, #2
 8106d18:	2b00      	cmp	r3, #0
 8106d1a:	d01d      	beq.n	8106d58 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	6a1b      	ldr	r3, [r3, #32]
 8106d20:	885b      	ldrh	r3, [r3, #2]
 8106d22:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106d28:	89fa      	ldrh	r2, [r7, #14]
 8106d2a:	1ad3      	subs	r3, r2, r3
 8106d2c:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	699b      	ldr	r3, [r3, #24]
 8106d36:	00db      	lsls	r3, r3, #3
 8106d38:	4413      	add	r3, r2
 8106d3a:	685b      	ldr	r3, [r3, #4]
 8106d3c:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8106d3e:	89ba      	ldrh	r2, [r7, #12]
 8106d40:	89f9      	ldrh	r1, [r7, #14]
 8106d42:	897b      	ldrh	r3, [r7, #10]
 8106d44:	4618      	mov	r0, r3
 8106d46:	f7ff fdb8 	bl	81068ba <vring_need_event>
 8106d4a:	4603      	mov	r3, r0
 8106d4c:	2b00      	cmp	r3, #0
 8106d4e:	bf14      	ite	ne
 8106d50:	2301      	movne	r3, #1
 8106d52:	2300      	moveq	r3, #0
 8106d54:	b2db      	uxtb	r3, r3
 8106d56:	e009      	b.n	8106d6c <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d5c:	881b      	ldrh	r3, [r3, #0]
 8106d5e:	f003 0301 	and.w	r3, r3, #1
 8106d62:	2b00      	cmp	r3, #0
 8106d64:	bf0c      	ite	eq
 8106d66:	2301      	moveq	r3, #1
 8106d68:	2300      	movne	r3, #0
 8106d6a:	b2db      	uxtb	r3, r3
}
 8106d6c:	4618      	mov	r0, r3
 8106d6e:	3710      	adds	r7, #16
 8106d70:	46bd      	mov	sp, r7
 8106d72:	bd80      	pop	{r7, pc}

08106d74 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8106d74:	b580      	push	{r7, lr}
 8106d76:	b082      	sub	sp, #8
 8106d78:	af00      	add	r7, sp, #0
 8106d7a:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	695b      	ldr	r3, [r3, #20]
 8106d80:	2b00      	cmp	r3, #0
 8106d82:	d003      	beq.n	8106d8c <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	695b      	ldr	r3, [r3, #20]
 8106d88:	6878      	ldr	r0, [r7, #4]
 8106d8a:	4798      	blx	r3
}
 8106d8c:	bf00      	nop
 8106d8e:	3708      	adds	r7, #8
 8106d90:	46bd      	mov	sp, r7
 8106d92:	bd80      	pop	{r7, pc}

08106d94 <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 8106d94:	b084      	sub	sp, #16
 8106d96:	b5b0      	push	{r4, r5, r7, lr}
 8106d98:	b092      	sub	sp, #72	; 0x48
 8106d9a:	af10      	add	r7, sp, #64	; 0x40
 8106d9c:	f107 0418 	add.w	r4, r7, #24
 8106da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 8106da4:	2300      	movs	r3, #0
 8106da6:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 8106da8:	466d      	mov	r5, sp
 8106daa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8106dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106dba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8106dbe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8106dc2:	f107 0318 	add.w	r3, r7, #24
 8106dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8106dc8:	f7fd fbbc 	bl	8104544 <MPU9250_Init>
 8106dcc:	4603      	mov	r3, r0
 8106dce:	71fb      	strb	r3, [r7, #7]
	return ret;
 8106dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8106dd2:	4618      	mov	r0, r3
 8106dd4:	3708      	adds	r7, #8
 8106dd6:	46bd      	mov	sp, r7
 8106dd8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8106ddc:	b004      	add	sp, #16
 8106dde:	4770      	bx	lr

08106de0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8106de0:	b580      	push	{r7, lr}
 8106de2:	b082      	sub	sp, #8
 8106de4:	af00      	add	r7, sp, #0
 8106de6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8106de8:	4b04      	ldr	r3, [pc, #16]	; (8106dfc <HAL_HSEM_FreeCallback+0x1c>)
 8106dea:	2201      	movs	r2, #1
 8106dec:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106dee:	2001      	movs	r0, #1
 8106df0:	f7fb f8b0 	bl	8101f54 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8106df4:	bf00      	nop
 8106df6:	3708      	adds	r7, #8
 8106df8:	46bd      	mov	sp, r7
 8106dfa:	bd80      	pop	{r7, pc}
 8106dfc:	10000314 	.word	0x10000314

08106e00 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8106e00:	b580      	push	{r7, lr}
 8106e02:	b082      	sub	sp, #8
 8106e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8106e06:	4b0f      	ldr	r3, [pc, #60]	; (8106e44 <MAILBOX_Init+0x44>)
 8106e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106e0c:	4a0d      	ldr	r2, [pc, #52]	; (8106e44 <MAILBOX_Init+0x44>)
 8106e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8106e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8106e16:	4b0b      	ldr	r3, [pc, #44]	; (8106e44 <MAILBOX_Init+0x44>)
 8106e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106e20:	607b      	str	r3, [r7, #4]
 8106e22:	687b      	ldr	r3, [r7, #4]
    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  /* Enable CM4 receive irq */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 1);
 8106e24:	2201      	movs	r2, #1
 8106e26:	2100      	movs	r1, #0
 8106e28:	207e      	movs	r0, #126	; 0x7e
 8106e2a:	f7fa fe5e 	bl	8101aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8106e2e:	207e      	movs	r0, #126	; 0x7e
 8106e30:	f7fa fe75 	bl	8101b1e <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106e34:	2001      	movs	r0, #1
 8106e36:	f7fb f88d 	bl	8101f54 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8106e3a:	2300      	movs	r3, #0
}
 8106e3c:	4618      	mov	r0, r3
 8106e3e:	3708      	adds	r7, #8
 8106e40:	46bd      	mov	sp, r7
 8106e42:	bd80      	pop	{r7, pc}
 8106e44:	58024400 	.word	0x58024400

08106e48 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8106e48:	b580      	push	{r7, lr}
 8106e4a:	b082      	sub	sp, #8
 8106e4c:	af00      	add	r7, sp, #0
 8106e4e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8106e50:	4b09      	ldr	r3, [pc, #36]	; (8106e78 <MAILBOX_Poll+0x30>)
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	2b01      	cmp	r3, #1
 8106e56:	d108      	bne.n	8106e6a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8106e58:	2101      	movs	r1, #1
 8106e5a:	6878      	ldr	r0, [r7, #4]
 8106e5c:	f7fe fcf9 	bl	8105852 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8106e60:	4b05      	ldr	r3, [pc, #20]	; (8106e78 <MAILBOX_Poll+0x30>)
 8106e62:	2200      	movs	r2, #0
 8106e64:	601a      	str	r2, [r3, #0]
    return 0;
 8106e66:	2300      	movs	r3, #0
 8106e68:	e001      	b.n	8106e6e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8106e6a:	f06f 030a 	mvn.w	r3, #10
}
 8106e6e:	4618      	mov	r0, r3
 8106e70:	3708      	adds	r7, #8
 8106e72:	46bd      	mov	sp, r7
 8106e74:	bd80      	pop	{r7, pc}
 8106e76:	bf00      	nop
 8106e78:	10000314 	.word	0x10000314

08106e7c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8106e7c:	b580      	push	{r7, lr}
 8106e7e:	b082      	sub	sp, #8
 8106e80:	af00      	add	r7, sp, #0
 8106e82:	6078      	str	r0, [r7, #4]
 8106e84:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8106e86:	2001      	movs	r0, #1
 8106e88:	f7fb f836 	bl	8101ef8 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8106e8c:	2100      	movs	r1, #0
 8106e8e:	2001      	movs	r0, #1
 8106e90:	f7fb f84c 	bl	8101f2c <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8106e94:	2300      	movs	r3, #0
}
 8106e96:	4618      	mov	r0, r3
 8106e98:	3708      	adds	r7, #8
 8106e9a:	46bd      	mov	sp, r7
 8106e9c:	bd80      	pop	{r7, pc}

08106e9e <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8106e9e:	b480      	push	{r7}
 8106ea0:	b083      	sub	sp, #12
 8106ea2:	af00      	add	r7, sp, #0
 8106ea4:	6078      	str	r0, [r7, #4]
 8106ea6:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8106eac:	683a      	ldr	r2, [r7, #0]
 8106eae:	429a      	cmp	r2, r3
 8106eb0:	d209      	bcs.n	8106ec6 <metal_device_io_region+0x28>
 8106eb2:	683a      	ldr	r2, [r7, #0]
 8106eb4:	4613      	mov	r3, r2
 8106eb6:	005b      	lsls	r3, r3, #1
 8106eb8:	4413      	add	r3, r2
 8106eba:	011b      	lsls	r3, r3, #4
 8106ebc:	3308      	adds	r3, #8
 8106ebe:	687a      	ldr	r2, [r7, #4]
 8106ec0:	4413      	add	r3, r2
 8106ec2:	3304      	adds	r3, #4
 8106ec4:	e000      	b.n	8106ec8 <metal_device_io_region+0x2a>
 8106ec6:	2300      	movs	r3, #0
}
 8106ec8:	4618      	mov	r0, r3
 8106eca:	370c      	adds	r7, #12
 8106ecc:	46bd      	mov	sp, r7
 8106ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ed2:	4770      	bx	lr

08106ed4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8106ed4:	b590      	push	{r4, r7, lr}
 8106ed6:	b08d      	sub	sp, #52	; 0x34
 8106ed8:	af04      	add	r7, sp, #16
 8106eda:	6078      	str	r0, [r7, #4]
  int status = 0;
 8106edc:	2300      	movs	r3, #0
 8106ede:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8106ee0:	2300      	movs	r3, #0
 8106ee2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8106ee4:	4a41      	ldr	r2, [pc, #260]	; (8106fec <OPENAMP_shmem_init+0x118>)
 8106ee6:	f107 0310 	add.w	r3, r7, #16
 8106eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8106eee:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8106ef2:	2300      	movs	r3, #0
 8106ef4:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8106ef6:	2300      	movs	r3, #0
 8106ef8:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8106efa:	f107 0310 	add.w	r3, r7, #16
 8106efe:	4618      	mov	r0, r3
 8106f00:	f7fe f8be 	bl	8105080 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8106f04:	483a      	ldr	r0, [pc, #232]	; (8106ff0 <OPENAMP_shmem_init+0x11c>)
 8106f06:	f7fd ff63 	bl	8104dd0 <metal_register_generic_device>
 8106f0a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106f0c:	69fb      	ldr	r3, [r7, #28]
 8106f0e:	2b00      	cmp	r3, #0
 8106f10:	d001      	beq.n	8106f16 <OPENAMP_shmem_init+0x42>
    return status;
 8106f12:	69fb      	ldr	r3, [r7, #28]
 8106f14:	e066      	b.n	8106fe4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8106f16:	f107 0318 	add.w	r3, r7, #24
 8106f1a:	461a      	mov	r2, r3
 8106f1c:	4935      	ldr	r1, [pc, #212]	; (8106ff4 <OPENAMP_shmem_init+0x120>)
 8106f1e:	4836      	ldr	r0, [pc, #216]	; (8106ff8 <OPENAMP_shmem_init+0x124>)
 8106f20:	f7fd ff18 	bl	8104d54 <metal_device_open>
 8106f24:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106f26:	69fb      	ldr	r3, [r7, #28]
 8106f28:	2b00      	cmp	r3, #0
 8106f2a:	d001      	beq.n	8106f30 <OPENAMP_shmem_init+0x5c>
    return status;
 8106f2c:	69fb      	ldr	r3, [r7, #28]
 8106f2e:	e059      	b.n	8106fe4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8106f30:	4a32      	ldr	r2, [pc, #200]	; (8106ffc <OPENAMP_shmem_init+0x128>)
 8106f32:	4b33      	ldr	r3, [pc, #204]	; (8107000 <OPENAMP_shmem_init+0x12c>)
 8106f34:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106f36:	69bb      	ldr	r3, [r7, #24]
 8106f38:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8106f3c:	4a31      	ldr	r2, [pc, #196]	; (8107004 <OPENAMP_shmem_init+0x130>)
 8106f3e:	4b2f      	ldr	r3, [pc, #188]	; (8106ffc <OPENAMP_shmem_init+0x128>)
 8106f40:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106f42:	461a      	mov	r2, r3
 8106f44:	2300      	movs	r3, #0
 8106f46:	9302      	str	r3, [sp, #8]
 8106f48:	2300      	movs	r3, #0
 8106f4a:	9301      	str	r3, [sp, #4]
 8106f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8106f50:	9300      	str	r3, [sp, #0]
 8106f52:	4613      	mov	r3, r2
 8106f54:	4a2a      	ldr	r2, [pc, #168]	; (8107000 <OPENAMP_shmem_init+0x12c>)
 8106f56:	4929      	ldr	r1, [pc, #164]	; (8106ffc <OPENAMP_shmem_init+0x128>)
 8106f58:	f7fe f8df 	bl	810511a <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8106f5c:	69bb      	ldr	r3, [r7, #24]
 8106f5e:	2100      	movs	r1, #0
 8106f60:	4618      	mov	r0, r3
 8106f62:	f7ff ff9c 	bl	8106e9e <metal_device_io_region>
 8106f66:	4603      	mov	r3, r0
 8106f68:	4a27      	ldr	r2, [pc, #156]	; (8107008 <OPENAMP_shmem_init+0x134>)
 8106f6a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8106f6c:	4b26      	ldr	r3, [pc, #152]	; (8107008 <OPENAMP_shmem_init+0x134>)
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	2b00      	cmp	r3, #0
 8106f72:	d102      	bne.n	8106f7a <OPENAMP_shmem_init+0xa6>
    return -1;
 8106f74:	f04f 33ff 	mov.w	r3, #4294967295
 8106f78:	e034      	b.n	8106fe4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8106f7a:	f107 0208 	add.w	r2, r7, #8
 8106f7e:	f107 030c 	add.w	r3, r7, #12
 8106f82:	4619      	mov	r1, r3
 8106f84:	6878      	ldr	r0, [r7, #4]
 8106f86:	f000 f905 	bl	8107194 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8106f8a:	68fb      	ldr	r3, [r7, #12]
 8106f8c:	4a1f      	ldr	r2, [pc, #124]	; (810700c <OPENAMP_shmem_init+0x138>)
 8106f8e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8106f90:	4b1e      	ldr	r3, [pc, #120]	; (810700c <OPENAMP_shmem_init+0x138>)
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	2b00      	cmp	r3, #0
 8106f96:	d102      	bne.n	8106f9e <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8106f98:	f04f 33ff 	mov.w	r3, #4294967295
 8106f9c:	e022      	b.n	8106fe4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8106f9e:	69bb      	ldr	r3, [r7, #24]
 8106fa0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8106fa4:	4b19      	ldr	r3, [pc, #100]	; (810700c <OPENAMP_shmem_init+0x138>)
 8106fa6:	6819      	ldr	r1, [r3, #0]
 8106fa8:	4b18      	ldr	r3, [pc, #96]	; (810700c <OPENAMP_shmem_init+0x138>)
 8106faa:	681a      	ldr	r2, [r3, #0]
 8106fac:	68bb      	ldr	r3, [r7, #8]
 8106fae:	461c      	mov	r4, r3
 8106fb0:	2300      	movs	r3, #0
 8106fb2:	9302      	str	r3, [sp, #8]
 8106fb4:	2300      	movs	r3, #0
 8106fb6:	9301      	str	r3, [sp, #4]
 8106fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8106fbc:	9300      	str	r3, [sp, #0]
 8106fbe:	4623      	mov	r3, r4
 8106fc0:	f7fe f8ab 	bl	810511a <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8106fc4:	69bb      	ldr	r3, [r7, #24]
 8106fc6:	2101      	movs	r1, #1
 8106fc8:	4618      	mov	r0, r3
 8106fca:	f7ff ff68 	bl	8106e9e <metal_device_io_region>
 8106fce:	4603      	mov	r3, r0
 8106fd0:	4a0f      	ldr	r2, [pc, #60]	; (8107010 <OPENAMP_shmem_init+0x13c>)
 8106fd2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8106fd4:	4b0e      	ldr	r3, [pc, #56]	; (8107010 <OPENAMP_shmem_init+0x13c>)
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	2b00      	cmp	r3, #0
 8106fda:	d102      	bne.n	8106fe2 <OPENAMP_shmem_init+0x10e>
    return -1;
 8106fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8106fe0:	e000      	b.n	8106fe4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8106fe2:	2300      	movs	r3, #0
}
 8106fe4:	4618      	mov	r0, r3
 8106fe6:	3724      	adds	r7, #36	; 0x24
 8106fe8:	46bd      	mov	sp, r7
 8106fea:	bd90      	pop	{r4, r7, pc}
 8106fec:	0810bca8 	.word	0x0810bca8
 8106ff0:	1000003c 	.word	0x1000003c
 8106ff4:	0810bc94 	.word	0x0810bc94
 8106ff8:	0810bca0 	.word	0x0810bca0
 8106ffc:	38000400 	.word	0x38000400
 8107000:	100003a8 	.word	0x100003a8
 8107004:	38010000 	.word	0x38010000
 8107008:	10000318 	.word	0x10000318
 810700c:	10000320 	.word	0x10000320
 8107010:	1000031c 	.word	0x1000031c

08107014 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8107014:	b590      	push	{r4, r7, lr}
 8107016:	b08b      	sub	sp, #44	; 0x2c
 8107018:	af04      	add	r7, sp, #16
 810701a:	6078      	str	r0, [r7, #4]
 810701c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810701e:	2300      	movs	r3, #0
 8107020:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8107022:	2300      	movs	r3, #0
 8107024:	613b      	str	r3, [r7, #16]
  int status = 0;
 8107026:	2300      	movs	r3, #0
 8107028:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810702a:	f7ff fee9 	bl	8106e00 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 810702e:	6878      	ldr	r0, [r7, #4]
 8107030:	f7ff ff50 	bl	8106ed4 <OPENAMP_shmem_init>
 8107034:	60f8      	str	r0, [r7, #12]
  if(status)
 8107036:	68fb      	ldr	r3, [r7, #12]
 8107038:	2b00      	cmp	r3, #0
 810703a:	d001      	beq.n	8107040 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 810703c:	68fb      	ldr	r3, [r7, #12]
 810703e:	e06a      	b.n	8107116 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8107040:	6878      	ldr	r0, [r7, #4]
 8107042:	4b37      	ldr	r3, [pc, #220]	; (8107120 <MX_OPENAMP_Init+0x10c>)
 8107044:	681b      	ldr	r3, [r3, #0]
 8107046:	f103 0218 	add.w	r2, r3, #24
 810704a:	4b36      	ldr	r3, [pc, #216]	; (8107124 <MX_OPENAMP_Init+0x110>)
 810704c:	681b      	ldr	r3, [r3, #0]
 810704e:	2100      	movs	r1, #0
 8107050:	9102      	str	r1, [sp, #8]
 8107052:	4935      	ldr	r1, [pc, #212]	; (8107128 <MX_OPENAMP_Init+0x114>)
 8107054:	9101      	str	r1, [sp, #4]
 8107056:	2100      	movs	r1, #0
 8107058:	9100      	str	r1, [sp, #0]
 810705a:	21ff      	movs	r1, #255	; 0xff
 810705c:	f7fe fb1a 	bl	8105694 <rproc_virtio_create_vdev>
 8107060:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8107062:	693b      	ldr	r3, [r7, #16]
 8107064:	2b00      	cmp	r3, #0
 8107066:	d102      	bne.n	810706e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8107068:	f04f 33ff 	mov.w	r3, #4294967295
 810706c:	e053      	b.n	8107116 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 810706e:	6938      	ldr	r0, [r7, #16]
 8107070:	f7fe fc2b 	bl	81058ca <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8107074:	4b2a      	ldr	r3, [pc, #168]	; (8107120 <MX_OPENAMP_Init+0x10c>)
 8107076:	681b      	ldr	r3, [r3, #0]
 8107078:	3334      	adds	r3, #52	; 0x34
 810707a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810707c:	697b      	ldr	r3, [r7, #20]
 810707e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8107080:	697b      	ldr	r3, [r7, #20]
 8107082:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107084:	461c      	mov	r4, r3
 8107086:	4b29      	ldr	r3, [pc, #164]	; (810712c <MX_OPENAMP_Init+0x118>)
 8107088:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810708a:	697a      	ldr	r2, [r7, #20]
 810708c:	6892      	ldr	r2, [r2, #8]
 810708e:	6979      	ldr	r1, [r7, #20]
 8107090:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107092:	9102      	str	r1, [sp, #8]
 8107094:	9201      	str	r2, [sp, #4]
 8107096:	9300      	str	r3, [sp, #0]
 8107098:	4623      	mov	r3, r4
 810709a:	4602      	mov	r2, r0
 810709c:	2100      	movs	r1, #0
 810709e:	6938      	ldr	r0, [r7, #16]
 81070a0:	f7fe fba6 	bl	81057f0 <rproc_virtio_init_vring>
 81070a4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81070a6:	68fb      	ldr	r3, [r7, #12]
 81070a8:	2b00      	cmp	r3, #0
 81070aa:	d001      	beq.n	81070b0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 81070ac:	68fb      	ldr	r3, [r7, #12]
 81070ae:	e032      	b.n	8107116 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 81070b0:	4b1b      	ldr	r3, [pc, #108]	; (8107120 <MX_OPENAMP_Init+0x10c>)
 81070b2:	681b      	ldr	r3, [r3, #0]
 81070b4:	3348      	adds	r3, #72	; 0x48
 81070b6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81070b8:	697b      	ldr	r3, [r7, #20]
 81070ba:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 81070bc:	697b      	ldr	r3, [r7, #20]
 81070be:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81070c0:	461c      	mov	r4, r3
 81070c2:	4b1a      	ldr	r3, [pc, #104]	; (810712c <MX_OPENAMP_Init+0x118>)
 81070c4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 81070c6:	697a      	ldr	r2, [r7, #20]
 81070c8:	6892      	ldr	r2, [r2, #8]
 81070ca:	6979      	ldr	r1, [r7, #20]
 81070cc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81070ce:	9102      	str	r1, [sp, #8]
 81070d0:	9201      	str	r2, [sp, #4]
 81070d2:	9300      	str	r3, [sp, #0]
 81070d4:	4623      	mov	r3, r4
 81070d6:	4602      	mov	r2, r0
 81070d8:	2101      	movs	r1, #1
 81070da:	6938      	ldr	r0, [r7, #16]
 81070dc:	f7fe fb88 	bl	81057f0 <rproc_virtio_init_vring>
 81070e0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81070e2:	68fb      	ldr	r3, [r7, #12]
 81070e4:	2b00      	cmp	r3, #0
 81070e6:	d001      	beq.n	81070ec <MX_OPENAMP_Init+0xd8>
  {
    return status;
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	e014      	b.n	8107116 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81070ec:	4b10      	ldr	r3, [pc, #64]	; (8107130 <MX_OPENAMP_Init+0x11c>)
 81070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81070f2:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 81070f4:	4a0f      	ldr	r2, [pc, #60]	; (8107134 <MX_OPENAMP_Init+0x120>)
 81070f6:	4b0e      	ldr	r3, [pc, #56]	; (8107130 <MX_OPENAMP_Init+0x11c>)
 81070f8:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81070fa:	461a      	mov	r2, r3
 81070fc:	480e      	ldr	r0, [pc, #56]	; (8107138 <MX_OPENAMP_Init+0x124>)
 81070fe:	f7ff f833 	bl	8106168 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8107102:	4b0a      	ldr	r3, [pc, #40]	; (810712c <MX_OPENAMP_Init+0x118>)
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	4a0c      	ldr	r2, [pc, #48]	; (8107138 <MX_OPENAMP_Init+0x124>)
 8107108:	9200      	str	r2, [sp, #0]
 810710a:	683a      	ldr	r2, [r7, #0]
 810710c:	6939      	ldr	r1, [r7, #16]
 810710e:	480b      	ldr	r0, [pc, #44]	; (810713c <MX_OPENAMP_Init+0x128>)
 8107110:	f7ff fa9e 	bl	8106650 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8107114:	2300      	movs	r3, #0
}
 8107116:	4618      	mov	r0, r3
 8107118:	371c      	adds	r7, #28
 810711a:	46bd      	mov	sp, r7
 810711c:	bd90      	pop	{r4, r7, pc}
 810711e:	bf00      	nop
 8107120:	10000320 	.word	0x10000320
 8107124:	1000031c 	.word	0x1000031c
 8107128:	08106e7d 	.word	0x08106e7d
 810712c:	10000318 	.word	0x10000318
 8107130:	38000400 	.word	0x38000400
 8107134:	38010000 	.word	0x38010000
 8107138:	10000324 	.word	0x10000324
 810713c:	10000330 	.word	0x10000330

08107140 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8107140:	b580      	push	{r7, lr}
 8107142:	b08a      	sub	sp, #40	; 0x28
 8107144:	af04      	add	r7, sp, #16
 8107146:	60f8      	str	r0, [r7, #12]
 8107148:	60b9      	str	r1, [r7, #8]
 810714a:	607a      	str	r2, [r7, #4]
 810714c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 810714e:	2300      	movs	r3, #0
 8107150:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8107152:	6a3b      	ldr	r3, [r7, #32]
 8107154:	9302      	str	r3, [sp, #8]
 8107156:	683b      	ldr	r3, [r7, #0]
 8107158:	9301      	str	r3, [sp, #4]
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	9300      	str	r3, [sp, #0]
 810715e:	f04f 33ff 	mov.w	r3, #4294967295
 8107162:	68ba      	ldr	r2, [r7, #8]
 8107164:	4904      	ldr	r1, [pc, #16]	; (8107178 <OPENAMP_create_endpoint+0x38>)
 8107166:	68f8      	ldr	r0, [r7, #12]
 8107168:	f7fe fe3c 	bl	8105de4 <rpmsg_create_ept>
 810716c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 810716e:	697b      	ldr	r3, [r7, #20]
}
 8107170:	4618      	mov	r0, r3
 8107172:	3718      	adds	r7, #24
 8107174:	46bd      	mov	sp, r7
 8107176:	bd80      	pop	{r7, pc}
 8107178:	10000330 	.word	0x10000330

0810717c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 810717c:	b580      	push	{r7, lr}
 810717e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8107180:	4b03      	ldr	r3, [pc, #12]	; (8107190 <OPENAMP_check_for_message+0x14>)
 8107182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107184:	4618      	mov	r0, r3
 8107186:	f7ff fe5f 	bl	8106e48 <MAILBOX_Poll>
}
 810718a:	bf00      	nop
 810718c:	bd80      	pop	{r7, pc}
 810718e:	bf00      	nop
 8107190:	10000330 	.word	0x10000330

08107194 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8107194:	b480      	push	{r7}
 8107196:	b085      	sub	sp, #20
 8107198:	af00      	add	r7, sp, #0
 810719a:	60f8      	str	r0, [r7, #12]
 810719c:	60b9      	str	r1, [r7, #8]
 810719e:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 81071a0:	bf00      	nop
 81071a2:	4b08      	ldr	r3, [pc, #32]	; (81071c4 <resource_table_init+0x30>)
 81071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81071a6:	4a08      	ldr	r2, [pc, #32]	; (81071c8 <resource_table_init+0x34>)
 81071a8:	4293      	cmp	r3, r2
 81071aa:	d1fa      	bne.n	81071a2 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	228c      	movs	r2, #140	; 0x8c
 81071b0:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 81071b2:	68bb      	ldr	r3, [r7, #8]
 81071b4:	4a03      	ldr	r2, [pc, #12]	; (81071c4 <resource_table_init+0x30>)
 81071b6:	601a      	str	r2, [r3, #0]
}
 81071b8:	bf00      	nop
 81071ba:	3714      	adds	r7, #20
 81071bc:	46bd      	mov	sp, r7
 81071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071c2:	4770      	bx	lr
 81071c4:	38000000 	.word	0x38000000
 81071c8:	38000400 	.word	0x38000400

081071cc <__assert_func>:
 81071cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81071ce:	4614      	mov	r4, r2
 81071d0:	461a      	mov	r2, r3
 81071d2:	4b09      	ldr	r3, [pc, #36]	; (81071f8 <__assert_func+0x2c>)
 81071d4:	681b      	ldr	r3, [r3, #0]
 81071d6:	4605      	mov	r5, r0
 81071d8:	68d8      	ldr	r0, [r3, #12]
 81071da:	b14c      	cbz	r4, 81071f0 <__assert_func+0x24>
 81071dc:	4b07      	ldr	r3, [pc, #28]	; (81071fc <__assert_func+0x30>)
 81071de:	9100      	str	r1, [sp, #0]
 81071e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81071e4:	4906      	ldr	r1, [pc, #24]	; (8107200 <__assert_func+0x34>)
 81071e6:	462b      	mov	r3, r5
 81071e8:	f000 f814 	bl	8107214 <fiprintf>
 81071ec:	f002 f8ba 	bl	8109364 <abort>
 81071f0:	4b04      	ldr	r3, [pc, #16]	; (8107204 <__assert_func+0x38>)
 81071f2:	461c      	mov	r4, r3
 81071f4:	e7f3      	b.n	81071de <__assert_func+0x12>
 81071f6:	bf00      	nop
 81071f8:	100000b8 	.word	0x100000b8
 81071fc:	0810bd16 	.word	0x0810bd16
 8107200:	0810bd23 	.word	0x0810bd23
 8107204:	0810bd51 	.word	0x0810bd51

08107208 <__errno>:
 8107208:	4b01      	ldr	r3, [pc, #4]	; (8107210 <__errno+0x8>)
 810720a:	6818      	ldr	r0, [r3, #0]
 810720c:	4770      	bx	lr
 810720e:	bf00      	nop
 8107210:	100000b8 	.word	0x100000b8

08107214 <fiprintf>:
 8107214:	b40e      	push	{r1, r2, r3}
 8107216:	b503      	push	{r0, r1, lr}
 8107218:	4601      	mov	r1, r0
 810721a:	ab03      	add	r3, sp, #12
 810721c:	4805      	ldr	r0, [pc, #20]	; (8107234 <fiprintf+0x20>)
 810721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8107222:	6800      	ldr	r0, [r0, #0]
 8107224:	9301      	str	r3, [sp, #4]
 8107226:	f000 f925 	bl	8107474 <_vfiprintf_r>
 810722a:	b002      	add	sp, #8
 810722c:	f85d eb04 	ldr.w	lr, [sp], #4
 8107230:	b003      	add	sp, #12
 8107232:	4770      	bx	lr
 8107234:	100000b8 	.word	0x100000b8

08107238 <__libc_init_array>:
 8107238:	b570      	push	{r4, r5, r6, lr}
 810723a:	4d0d      	ldr	r5, [pc, #52]	; (8107270 <__libc_init_array+0x38>)
 810723c:	4c0d      	ldr	r4, [pc, #52]	; (8107274 <__libc_init_array+0x3c>)
 810723e:	1b64      	subs	r4, r4, r5
 8107240:	10a4      	asrs	r4, r4, #2
 8107242:	2600      	movs	r6, #0
 8107244:	42a6      	cmp	r6, r4
 8107246:	d109      	bne.n	810725c <__libc_init_array+0x24>
 8107248:	4d0b      	ldr	r5, [pc, #44]	; (8107278 <__libc_init_array+0x40>)
 810724a:	4c0c      	ldr	r4, [pc, #48]	; (810727c <__libc_init_array+0x44>)
 810724c:	f004 fc2c 	bl	810baa8 <_init>
 8107250:	1b64      	subs	r4, r4, r5
 8107252:	10a4      	asrs	r4, r4, #2
 8107254:	2600      	movs	r6, #0
 8107256:	42a6      	cmp	r6, r4
 8107258:	d105      	bne.n	8107266 <__libc_init_array+0x2e>
 810725a:	bd70      	pop	{r4, r5, r6, pc}
 810725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8107260:	4798      	blx	r3
 8107262:	3601      	adds	r6, #1
 8107264:	e7ee      	b.n	8107244 <__libc_init_array+0xc>
 8107266:	f855 3b04 	ldr.w	r3, [r5], #4
 810726a:	4798      	blx	r3
 810726c:	3601      	adds	r6, #1
 810726e:	e7f2      	b.n	8107256 <__libc_init_array+0x1e>
 8107270:	0810c1cc 	.word	0x0810c1cc
 8107274:	0810c1cc 	.word	0x0810c1cc
 8107278:	0810c1cc 	.word	0x0810c1cc
 810727c:	0810c1d0 	.word	0x0810c1d0

08107280 <malloc>:
 8107280:	4b02      	ldr	r3, [pc, #8]	; (810728c <malloc+0xc>)
 8107282:	4601      	mov	r1, r0
 8107284:	6818      	ldr	r0, [r3, #0]
 8107286:	f000 b871 	b.w	810736c <_malloc_r>
 810728a:	bf00      	nop
 810728c:	100000b8 	.word	0x100000b8

08107290 <free>:
 8107290:	4b02      	ldr	r3, [pc, #8]	; (810729c <free+0xc>)
 8107292:	4601      	mov	r1, r0
 8107294:	6818      	ldr	r0, [r3, #0]
 8107296:	f000 b819 	b.w	81072cc <_free_r>
 810729a:	bf00      	nop
 810729c:	100000b8 	.word	0x100000b8

081072a0 <memcpy>:
 81072a0:	440a      	add	r2, r1
 81072a2:	4291      	cmp	r1, r2
 81072a4:	f100 33ff 	add.w	r3, r0, #4294967295
 81072a8:	d100      	bne.n	81072ac <memcpy+0xc>
 81072aa:	4770      	bx	lr
 81072ac:	b510      	push	{r4, lr}
 81072ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 81072b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 81072b6:	4291      	cmp	r1, r2
 81072b8:	d1f9      	bne.n	81072ae <memcpy+0xe>
 81072ba:	bd10      	pop	{r4, pc}

081072bc <memset>:
 81072bc:	4402      	add	r2, r0
 81072be:	4603      	mov	r3, r0
 81072c0:	4293      	cmp	r3, r2
 81072c2:	d100      	bne.n	81072c6 <memset+0xa>
 81072c4:	4770      	bx	lr
 81072c6:	f803 1b01 	strb.w	r1, [r3], #1
 81072ca:	e7f9      	b.n	81072c0 <memset+0x4>

081072cc <_free_r>:
 81072cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81072ce:	2900      	cmp	r1, #0
 81072d0:	d048      	beq.n	8107364 <_free_r+0x98>
 81072d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81072d6:	9001      	str	r0, [sp, #4]
 81072d8:	2b00      	cmp	r3, #0
 81072da:	f1a1 0404 	sub.w	r4, r1, #4
 81072de:	bfb8      	it	lt
 81072e0:	18e4      	addlt	r4, r4, r3
 81072e2:	f003 fc7b 	bl	810abdc <__malloc_lock>
 81072e6:	4a20      	ldr	r2, [pc, #128]	; (8107368 <_free_r+0x9c>)
 81072e8:	9801      	ldr	r0, [sp, #4]
 81072ea:	6813      	ldr	r3, [r2, #0]
 81072ec:	4615      	mov	r5, r2
 81072ee:	b933      	cbnz	r3, 81072fe <_free_r+0x32>
 81072f0:	6063      	str	r3, [r4, #4]
 81072f2:	6014      	str	r4, [r2, #0]
 81072f4:	b003      	add	sp, #12
 81072f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81072fa:	f003 bc75 	b.w	810abe8 <__malloc_unlock>
 81072fe:	42a3      	cmp	r3, r4
 8107300:	d90b      	bls.n	810731a <_free_r+0x4e>
 8107302:	6821      	ldr	r1, [r4, #0]
 8107304:	1862      	adds	r2, r4, r1
 8107306:	4293      	cmp	r3, r2
 8107308:	bf04      	itt	eq
 810730a:	681a      	ldreq	r2, [r3, #0]
 810730c:	685b      	ldreq	r3, [r3, #4]
 810730e:	6063      	str	r3, [r4, #4]
 8107310:	bf04      	itt	eq
 8107312:	1852      	addeq	r2, r2, r1
 8107314:	6022      	streq	r2, [r4, #0]
 8107316:	602c      	str	r4, [r5, #0]
 8107318:	e7ec      	b.n	81072f4 <_free_r+0x28>
 810731a:	461a      	mov	r2, r3
 810731c:	685b      	ldr	r3, [r3, #4]
 810731e:	b10b      	cbz	r3, 8107324 <_free_r+0x58>
 8107320:	42a3      	cmp	r3, r4
 8107322:	d9fa      	bls.n	810731a <_free_r+0x4e>
 8107324:	6811      	ldr	r1, [r2, #0]
 8107326:	1855      	adds	r5, r2, r1
 8107328:	42a5      	cmp	r5, r4
 810732a:	d10b      	bne.n	8107344 <_free_r+0x78>
 810732c:	6824      	ldr	r4, [r4, #0]
 810732e:	4421      	add	r1, r4
 8107330:	1854      	adds	r4, r2, r1
 8107332:	42a3      	cmp	r3, r4
 8107334:	6011      	str	r1, [r2, #0]
 8107336:	d1dd      	bne.n	81072f4 <_free_r+0x28>
 8107338:	681c      	ldr	r4, [r3, #0]
 810733a:	685b      	ldr	r3, [r3, #4]
 810733c:	6053      	str	r3, [r2, #4]
 810733e:	4421      	add	r1, r4
 8107340:	6011      	str	r1, [r2, #0]
 8107342:	e7d7      	b.n	81072f4 <_free_r+0x28>
 8107344:	d902      	bls.n	810734c <_free_r+0x80>
 8107346:	230c      	movs	r3, #12
 8107348:	6003      	str	r3, [r0, #0]
 810734a:	e7d3      	b.n	81072f4 <_free_r+0x28>
 810734c:	6825      	ldr	r5, [r4, #0]
 810734e:	1961      	adds	r1, r4, r5
 8107350:	428b      	cmp	r3, r1
 8107352:	bf04      	itt	eq
 8107354:	6819      	ldreq	r1, [r3, #0]
 8107356:	685b      	ldreq	r3, [r3, #4]
 8107358:	6063      	str	r3, [r4, #4]
 810735a:	bf04      	itt	eq
 810735c:	1949      	addeq	r1, r1, r5
 810735e:	6021      	streq	r1, [r4, #0]
 8107360:	6054      	str	r4, [r2, #4]
 8107362:	e7c7      	b.n	81072f4 <_free_r+0x28>
 8107364:	b003      	add	sp, #12
 8107366:	bd30      	pop	{r4, r5, pc}
 8107368:	100003ac 	.word	0x100003ac

0810736c <_malloc_r>:
 810736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810736e:	1ccd      	adds	r5, r1, #3
 8107370:	f025 0503 	bic.w	r5, r5, #3
 8107374:	3508      	adds	r5, #8
 8107376:	2d0c      	cmp	r5, #12
 8107378:	bf38      	it	cc
 810737a:	250c      	movcc	r5, #12
 810737c:	2d00      	cmp	r5, #0
 810737e:	4606      	mov	r6, r0
 8107380:	db01      	blt.n	8107386 <_malloc_r+0x1a>
 8107382:	42a9      	cmp	r1, r5
 8107384:	d903      	bls.n	810738e <_malloc_r+0x22>
 8107386:	230c      	movs	r3, #12
 8107388:	6033      	str	r3, [r6, #0]
 810738a:	2000      	movs	r0, #0
 810738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810738e:	f003 fc25 	bl	810abdc <__malloc_lock>
 8107392:	4921      	ldr	r1, [pc, #132]	; (8107418 <_malloc_r+0xac>)
 8107394:	680a      	ldr	r2, [r1, #0]
 8107396:	4614      	mov	r4, r2
 8107398:	b99c      	cbnz	r4, 81073c2 <_malloc_r+0x56>
 810739a:	4f20      	ldr	r7, [pc, #128]	; (810741c <_malloc_r+0xb0>)
 810739c:	683b      	ldr	r3, [r7, #0]
 810739e:	b923      	cbnz	r3, 81073aa <_malloc_r+0x3e>
 81073a0:	4621      	mov	r1, r4
 81073a2:	4630      	mov	r0, r6
 81073a4:	f001 f810 	bl	81083c8 <_sbrk_r>
 81073a8:	6038      	str	r0, [r7, #0]
 81073aa:	4629      	mov	r1, r5
 81073ac:	4630      	mov	r0, r6
 81073ae:	f001 f80b 	bl	81083c8 <_sbrk_r>
 81073b2:	1c43      	adds	r3, r0, #1
 81073b4:	d123      	bne.n	81073fe <_malloc_r+0x92>
 81073b6:	230c      	movs	r3, #12
 81073b8:	6033      	str	r3, [r6, #0]
 81073ba:	4630      	mov	r0, r6
 81073bc:	f003 fc14 	bl	810abe8 <__malloc_unlock>
 81073c0:	e7e3      	b.n	810738a <_malloc_r+0x1e>
 81073c2:	6823      	ldr	r3, [r4, #0]
 81073c4:	1b5b      	subs	r3, r3, r5
 81073c6:	d417      	bmi.n	81073f8 <_malloc_r+0x8c>
 81073c8:	2b0b      	cmp	r3, #11
 81073ca:	d903      	bls.n	81073d4 <_malloc_r+0x68>
 81073cc:	6023      	str	r3, [r4, #0]
 81073ce:	441c      	add	r4, r3
 81073d0:	6025      	str	r5, [r4, #0]
 81073d2:	e004      	b.n	81073de <_malloc_r+0x72>
 81073d4:	6863      	ldr	r3, [r4, #4]
 81073d6:	42a2      	cmp	r2, r4
 81073d8:	bf0c      	ite	eq
 81073da:	600b      	streq	r3, [r1, #0]
 81073dc:	6053      	strne	r3, [r2, #4]
 81073de:	4630      	mov	r0, r6
 81073e0:	f003 fc02 	bl	810abe8 <__malloc_unlock>
 81073e4:	f104 000b 	add.w	r0, r4, #11
 81073e8:	1d23      	adds	r3, r4, #4
 81073ea:	f020 0007 	bic.w	r0, r0, #7
 81073ee:	1ac2      	subs	r2, r0, r3
 81073f0:	d0cc      	beq.n	810738c <_malloc_r+0x20>
 81073f2:	1a1b      	subs	r3, r3, r0
 81073f4:	50a3      	str	r3, [r4, r2]
 81073f6:	e7c9      	b.n	810738c <_malloc_r+0x20>
 81073f8:	4622      	mov	r2, r4
 81073fa:	6864      	ldr	r4, [r4, #4]
 81073fc:	e7cc      	b.n	8107398 <_malloc_r+0x2c>
 81073fe:	1cc4      	adds	r4, r0, #3
 8107400:	f024 0403 	bic.w	r4, r4, #3
 8107404:	42a0      	cmp	r0, r4
 8107406:	d0e3      	beq.n	81073d0 <_malloc_r+0x64>
 8107408:	1a21      	subs	r1, r4, r0
 810740a:	4630      	mov	r0, r6
 810740c:	f000 ffdc 	bl	81083c8 <_sbrk_r>
 8107410:	3001      	adds	r0, #1
 8107412:	d1dd      	bne.n	81073d0 <_malloc_r+0x64>
 8107414:	e7cf      	b.n	81073b6 <_malloc_r+0x4a>
 8107416:	bf00      	nop
 8107418:	100003ac 	.word	0x100003ac
 810741c:	100003b0 	.word	0x100003b0

08107420 <__sfputc_r>:
 8107420:	6893      	ldr	r3, [r2, #8]
 8107422:	3b01      	subs	r3, #1
 8107424:	2b00      	cmp	r3, #0
 8107426:	b410      	push	{r4}
 8107428:	6093      	str	r3, [r2, #8]
 810742a:	da08      	bge.n	810743e <__sfputc_r+0x1e>
 810742c:	6994      	ldr	r4, [r2, #24]
 810742e:	42a3      	cmp	r3, r4
 8107430:	db01      	blt.n	8107436 <__sfputc_r+0x16>
 8107432:	290a      	cmp	r1, #10
 8107434:	d103      	bne.n	810743e <__sfputc_r+0x1e>
 8107436:	f85d 4b04 	ldr.w	r4, [sp], #4
 810743a:	f001 bed3 	b.w	81091e4 <__swbuf_r>
 810743e:	6813      	ldr	r3, [r2, #0]
 8107440:	1c58      	adds	r0, r3, #1
 8107442:	6010      	str	r0, [r2, #0]
 8107444:	7019      	strb	r1, [r3, #0]
 8107446:	4608      	mov	r0, r1
 8107448:	f85d 4b04 	ldr.w	r4, [sp], #4
 810744c:	4770      	bx	lr

0810744e <__sfputs_r>:
 810744e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107450:	4606      	mov	r6, r0
 8107452:	460f      	mov	r7, r1
 8107454:	4614      	mov	r4, r2
 8107456:	18d5      	adds	r5, r2, r3
 8107458:	42ac      	cmp	r4, r5
 810745a:	d101      	bne.n	8107460 <__sfputs_r+0x12>
 810745c:	2000      	movs	r0, #0
 810745e:	e007      	b.n	8107470 <__sfputs_r+0x22>
 8107460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107464:	463a      	mov	r2, r7
 8107466:	4630      	mov	r0, r6
 8107468:	f7ff ffda 	bl	8107420 <__sfputc_r>
 810746c:	1c43      	adds	r3, r0, #1
 810746e:	d1f3      	bne.n	8107458 <__sfputs_r+0xa>
 8107470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08107474 <_vfiprintf_r>:
 8107474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107478:	460d      	mov	r5, r1
 810747a:	b09d      	sub	sp, #116	; 0x74
 810747c:	4614      	mov	r4, r2
 810747e:	4698      	mov	r8, r3
 8107480:	4606      	mov	r6, r0
 8107482:	b118      	cbz	r0, 810748c <_vfiprintf_r+0x18>
 8107484:	6983      	ldr	r3, [r0, #24]
 8107486:	b90b      	cbnz	r3, 810748c <_vfiprintf_r+0x18>
 8107488:	f002 ff04 	bl	810a294 <__sinit>
 810748c:	4b89      	ldr	r3, [pc, #548]	; (81076b4 <_vfiprintf_r+0x240>)
 810748e:	429d      	cmp	r5, r3
 8107490:	d11b      	bne.n	81074ca <_vfiprintf_r+0x56>
 8107492:	6875      	ldr	r5, [r6, #4]
 8107494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107496:	07d9      	lsls	r1, r3, #31
 8107498:	d405      	bmi.n	81074a6 <_vfiprintf_r+0x32>
 810749a:	89ab      	ldrh	r3, [r5, #12]
 810749c:	059a      	lsls	r2, r3, #22
 810749e:	d402      	bmi.n	81074a6 <_vfiprintf_r+0x32>
 81074a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81074a2:	f003 fb08 	bl	810aab6 <__retarget_lock_acquire_recursive>
 81074a6:	89ab      	ldrh	r3, [r5, #12]
 81074a8:	071b      	lsls	r3, r3, #28
 81074aa:	d501      	bpl.n	81074b0 <_vfiprintf_r+0x3c>
 81074ac:	692b      	ldr	r3, [r5, #16]
 81074ae:	b9eb      	cbnz	r3, 81074ec <_vfiprintf_r+0x78>
 81074b0:	4629      	mov	r1, r5
 81074b2:	4630      	mov	r0, r6
 81074b4:	f001 fee8 	bl	8109288 <__swsetup_r>
 81074b8:	b1c0      	cbz	r0, 81074ec <_vfiprintf_r+0x78>
 81074ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81074bc:	07dc      	lsls	r4, r3, #31
 81074be:	d50e      	bpl.n	81074de <_vfiprintf_r+0x6a>
 81074c0:	f04f 30ff 	mov.w	r0, #4294967295
 81074c4:	b01d      	add	sp, #116	; 0x74
 81074c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81074ca:	4b7b      	ldr	r3, [pc, #492]	; (81076b8 <_vfiprintf_r+0x244>)
 81074cc:	429d      	cmp	r5, r3
 81074ce:	d101      	bne.n	81074d4 <_vfiprintf_r+0x60>
 81074d0:	68b5      	ldr	r5, [r6, #8]
 81074d2:	e7df      	b.n	8107494 <_vfiprintf_r+0x20>
 81074d4:	4b79      	ldr	r3, [pc, #484]	; (81076bc <_vfiprintf_r+0x248>)
 81074d6:	429d      	cmp	r5, r3
 81074d8:	bf08      	it	eq
 81074da:	68f5      	ldreq	r5, [r6, #12]
 81074dc:	e7da      	b.n	8107494 <_vfiprintf_r+0x20>
 81074de:	89ab      	ldrh	r3, [r5, #12]
 81074e0:	0598      	lsls	r0, r3, #22
 81074e2:	d4ed      	bmi.n	81074c0 <_vfiprintf_r+0x4c>
 81074e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81074e6:	f003 fae7 	bl	810aab8 <__retarget_lock_release_recursive>
 81074ea:	e7e9      	b.n	81074c0 <_vfiprintf_r+0x4c>
 81074ec:	2300      	movs	r3, #0
 81074ee:	9309      	str	r3, [sp, #36]	; 0x24
 81074f0:	2320      	movs	r3, #32
 81074f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81074f6:	f8cd 800c 	str.w	r8, [sp, #12]
 81074fa:	2330      	movs	r3, #48	; 0x30
 81074fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 81076c0 <_vfiprintf_r+0x24c>
 8107500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8107504:	f04f 0901 	mov.w	r9, #1
 8107508:	4623      	mov	r3, r4
 810750a:	469a      	mov	sl, r3
 810750c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107510:	b10a      	cbz	r2, 8107516 <_vfiprintf_r+0xa2>
 8107512:	2a25      	cmp	r2, #37	; 0x25
 8107514:	d1f9      	bne.n	810750a <_vfiprintf_r+0x96>
 8107516:	ebba 0b04 	subs.w	fp, sl, r4
 810751a:	d00b      	beq.n	8107534 <_vfiprintf_r+0xc0>
 810751c:	465b      	mov	r3, fp
 810751e:	4622      	mov	r2, r4
 8107520:	4629      	mov	r1, r5
 8107522:	4630      	mov	r0, r6
 8107524:	f7ff ff93 	bl	810744e <__sfputs_r>
 8107528:	3001      	adds	r0, #1
 810752a:	f000 80aa 	beq.w	8107682 <_vfiprintf_r+0x20e>
 810752e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8107530:	445a      	add	r2, fp
 8107532:	9209      	str	r2, [sp, #36]	; 0x24
 8107534:	f89a 3000 	ldrb.w	r3, [sl]
 8107538:	2b00      	cmp	r3, #0
 810753a:	f000 80a2 	beq.w	8107682 <_vfiprintf_r+0x20e>
 810753e:	2300      	movs	r3, #0
 8107540:	f04f 32ff 	mov.w	r2, #4294967295
 8107544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8107548:	f10a 0a01 	add.w	sl, sl, #1
 810754c:	9304      	str	r3, [sp, #16]
 810754e:	9307      	str	r3, [sp, #28]
 8107550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8107554:	931a      	str	r3, [sp, #104]	; 0x68
 8107556:	4654      	mov	r4, sl
 8107558:	2205      	movs	r2, #5
 810755a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810755e:	4858      	ldr	r0, [pc, #352]	; (81076c0 <_vfiprintf_r+0x24c>)
 8107560:	f7f8 fed6 	bl	8100310 <memchr>
 8107564:	9a04      	ldr	r2, [sp, #16]
 8107566:	b9d8      	cbnz	r0, 81075a0 <_vfiprintf_r+0x12c>
 8107568:	06d1      	lsls	r1, r2, #27
 810756a:	bf44      	itt	mi
 810756c:	2320      	movmi	r3, #32
 810756e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107572:	0713      	lsls	r3, r2, #28
 8107574:	bf44      	itt	mi
 8107576:	232b      	movmi	r3, #43	; 0x2b
 8107578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810757c:	f89a 3000 	ldrb.w	r3, [sl]
 8107580:	2b2a      	cmp	r3, #42	; 0x2a
 8107582:	d015      	beq.n	81075b0 <_vfiprintf_r+0x13c>
 8107584:	9a07      	ldr	r2, [sp, #28]
 8107586:	4654      	mov	r4, sl
 8107588:	2000      	movs	r0, #0
 810758a:	f04f 0c0a 	mov.w	ip, #10
 810758e:	4621      	mov	r1, r4
 8107590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107594:	3b30      	subs	r3, #48	; 0x30
 8107596:	2b09      	cmp	r3, #9
 8107598:	d94e      	bls.n	8107638 <_vfiprintf_r+0x1c4>
 810759a:	b1b0      	cbz	r0, 81075ca <_vfiprintf_r+0x156>
 810759c:	9207      	str	r2, [sp, #28]
 810759e:	e014      	b.n	81075ca <_vfiprintf_r+0x156>
 81075a0:	eba0 0308 	sub.w	r3, r0, r8
 81075a4:	fa09 f303 	lsl.w	r3, r9, r3
 81075a8:	4313      	orrs	r3, r2
 81075aa:	9304      	str	r3, [sp, #16]
 81075ac:	46a2      	mov	sl, r4
 81075ae:	e7d2      	b.n	8107556 <_vfiprintf_r+0xe2>
 81075b0:	9b03      	ldr	r3, [sp, #12]
 81075b2:	1d19      	adds	r1, r3, #4
 81075b4:	681b      	ldr	r3, [r3, #0]
 81075b6:	9103      	str	r1, [sp, #12]
 81075b8:	2b00      	cmp	r3, #0
 81075ba:	bfbb      	ittet	lt
 81075bc:	425b      	neglt	r3, r3
 81075be:	f042 0202 	orrlt.w	r2, r2, #2
 81075c2:	9307      	strge	r3, [sp, #28]
 81075c4:	9307      	strlt	r3, [sp, #28]
 81075c6:	bfb8      	it	lt
 81075c8:	9204      	strlt	r2, [sp, #16]
 81075ca:	7823      	ldrb	r3, [r4, #0]
 81075cc:	2b2e      	cmp	r3, #46	; 0x2e
 81075ce:	d10c      	bne.n	81075ea <_vfiprintf_r+0x176>
 81075d0:	7863      	ldrb	r3, [r4, #1]
 81075d2:	2b2a      	cmp	r3, #42	; 0x2a
 81075d4:	d135      	bne.n	8107642 <_vfiprintf_r+0x1ce>
 81075d6:	9b03      	ldr	r3, [sp, #12]
 81075d8:	1d1a      	adds	r2, r3, #4
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	9203      	str	r2, [sp, #12]
 81075de:	2b00      	cmp	r3, #0
 81075e0:	bfb8      	it	lt
 81075e2:	f04f 33ff 	movlt.w	r3, #4294967295
 81075e6:	3402      	adds	r4, #2
 81075e8:	9305      	str	r3, [sp, #20]
 81075ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81076d0 <_vfiprintf_r+0x25c>
 81075ee:	7821      	ldrb	r1, [r4, #0]
 81075f0:	2203      	movs	r2, #3
 81075f2:	4650      	mov	r0, sl
 81075f4:	f7f8 fe8c 	bl	8100310 <memchr>
 81075f8:	b140      	cbz	r0, 810760c <_vfiprintf_r+0x198>
 81075fa:	2340      	movs	r3, #64	; 0x40
 81075fc:	eba0 000a 	sub.w	r0, r0, sl
 8107600:	fa03 f000 	lsl.w	r0, r3, r0
 8107604:	9b04      	ldr	r3, [sp, #16]
 8107606:	4303      	orrs	r3, r0
 8107608:	3401      	adds	r4, #1
 810760a:	9304      	str	r3, [sp, #16]
 810760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107610:	482c      	ldr	r0, [pc, #176]	; (81076c4 <_vfiprintf_r+0x250>)
 8107612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8107616:	2206      	movs	r2, #6
 8107618:	f7f8 fe7a 	bl	8100310 <memchr>
 810761c:	2800      	cmp	r0, #0
 810761e:	d03f      	beq.n	81076a0 <_vfiprintf_r+0x22c>
 8107620:	4b29      	ldr	r3, [pc, #164]	; (81076c8 <_vfiprintf_r+0x254>)
 8107622:	bb1b      	cbnz	r3, 810766c <_vfiprintf_r+0x1f8>
 8107624:	9b03      	ldr	r3, [sp, #12]
 8107626:	3307      	adds	r3, #7
 8107628:	f023 0307 	bic.w	r3, r3, #7
 810762c:	3308      	adds	r3, #8
 810762e:	9303      	str	r3, [sp, #12]
 8107630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107632:	443b      	add	r3, r7
 8107634:	9309      	str	r3, [sp, #36]	; 0x24
 8107636:	e767      	b.n	8107508 <_vfiprintf_r+0x94>
 8107638:	fb0c 3202 	mla	r2, ip, r2, r3
 810763c:	460c      	mov	r4, r1
 810763e:	2001      	movs	r0, #1
 8107640:	e7a5      	b.n	810758e <_vfiprintf_r+0x11a>
 8107642:	2300      	movs	r3, #0
 8107644:	3401      	adds	r4, #1
 8107646:	9305      	str	r3, [sp, #20]
 8107648:	4619      	mov	r1, r3
 810764a:	f04f 0c0a 	mov.w	ip, #10
 810764e:	4620      	mov	r0, r4
 8107650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107654:	3a30      	subs	r2, #48	; 0x30
 8107656:	2a09      	cmp	r2, #9
 8107658:	d903      	bls.n	8107662 <_vfiprintf_r+0x1ee>
 810765a:	2b00      	cmp	r3, #0
 810765c:	d0c5      	beq.n	81075ea <_vfiprintf_r+0x176>
 810765e:	9105      	str	r1, [sp, #20]
 8107660:	e7c3      	b.n	81075ea <_vfiprintf_r+0x176>
 8107662:	fb0c 2101 	mla	r1, ip, r1, r2
 8107666:	4604      	mov	r4, r0
 8107668:	2301      	movs	r3, #1
 810766a:	e7f0      	b.n	810764e <_vfiprintf_r+0x1da>
 810766c:	ab03      	add	r3, sp, #12
 810766e:	9300      	str	r3, [sp, #0]
 8107670:	462a      	mov	r2, r5
 8107672:	4b16      	ldr	r3, [pc, #88]	; (81076cc <_vfiprintf_r+0x258>)
 8107674:	a904      	add	r1, sp, #16
 8107676:	4630      	mov	r0, r6
 8107678:	f000 f8cc 	bl	8107814 <_printf_float>
 810767c:	4607      	mov	r7, r0
 810767e:	1c78      	adds	r0, r7, #1
 8107680:	d1d6      	bne.n	8107630 <_vfiprintf_r+0x1bc>
 8107682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107684:	07d9      	lsls	r1, r3, #31
 8107686:	d405      	bmi.n	8107694 <_vfiprintf_r+0x220>
 8107688:	89ab      	ldrh	r3, [r5, #12]
 810768a:	059a      	lsls	r2, r3, #22
 810768c:	d402      	bmi.n	8107694 <_vfiprintf_r+0x220>
 810768e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107690:	f003 fa12 	bl	810aab8 <__retarget_lock_release_recursive>
 8107694:	89ab      	ldrh	r3, [r5, #12]
 8107696:	065b      	lsls	r3, r3, #25
 8107698:	f53f af12 	bmi.w	81074c0 <_vfiprintf_r+0x4c>
 810769c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810769e:	e711      	b.n	81074c4 <_vfiprintf_r+0x50>
 81076a0:	ab03      	add	r3, sp, #12
 81076a2:	9300      	str	r3, [sp, #0]
 81076a4:	462a      	mov	r2, r5
 81076a6:	4b09      	ldr	r3, [pc, #36]	; (81076cc <_vfiprintf_r+0x258>)
 81076a8:	a904      	add	r1, sp, #16
 81076aa:	4630      	mov	r0, r6
 81076ac:	f000 fb56 	bl	8107d5c <_printf_i>
 81076b0:	e7e4      	b.n	810767c <_vfiprintf_r+0x208>
 81076b2:	bf00      	nop
 81076b4:	0810bfb0 	.word	0x0810bfb0
 81076b8:	0810bfd0 	.word	0x0810bfd0
 81076bc:	0810bf90 	.word	0x0810bf90
 81076c0:	0810bd58 	.word	0x0810bd58
 81076c4:	0810bd62 	.word	0x0810bd62
 81076c8:	08107815 	.word	0x08107815
 81076cc:	0810744f 	.word	0x0810744f
 81076d0:	0810bd5e 	.word	0x0810bd5e

081076d4 <__cvt>:
 81076d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81076d8:	ec55 4b10 	vmov	r4, r5, d0
 81076dc:	2d00      	cmp	r5, #0
 81076de:	460e      	mov	r6, r1
 81076e0:	4619      	mov	r1, r3
 81076e2:	462b      	mov	r3, r5
 81076e4:	bfbb      	ittet	lt
 81076e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81076ea:	461d      	movlt	r5, r3
 81076ec:	2300      	movge	r3, #0
 81076ee:	232d      	movlt	r3, #45	; 0x2d
 81076f0:	700b      	strb	r3, [r1, #0]
 81076f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81076f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81076f8:	4691      	mov	r9, r2
 81076fa:	f023 0820 	bic.w	r8, r3, #32
 81076fe:	bfbc      	itt	lt
 8107700:	4622      	movlt	r2, r4
 8107702:	4614      	movlt	r4, r2
 8107704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107708:	d005      	beq.n	8107716 <__cvt+0x42>
 810770a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810770e:	d100      	bne.n	8107712 <__cvt+0x3e>
 8107710:	3601      	adds	r6, #1
 8107712:	2102      	movs	r1, #2
 8107714:	e000      	b.n	8107718 <__cvt+0x44>
 8107716:	2103      	movs	r1, #3
 8107718:	ab03      	add	r3, sp, #12
 810771a:	9301      	str	r3, [sp, #4]
 810771c:	ab02      	add	r3, sp, #8
 810771e:	9300      	str	r3, [sp, #0]
 8107720:	ec45 4b10 	vmov	d0, r4, r5
 8107724:	4653      	mov	r3, sl
 8107726:	4632      	mov	r2, r6
 8107728:	f001 feae 	bl	8109488 <_dtoa_r>
 810772c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8107730:	4607      	mov	r7, r0
 8107732:	d102      	bne.n	810773a <__cvt+0x66>
 8107734:	f019 0f01 	tst.w	r9, #1
 8107738:	d022      	beq.n	8107780 <__cvt+0xac>
 810773a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810773e:	eb07 0906 	add.w	r9, r7, r6
 8107742:	d110      	bne.n	8107766 <__cvt+0x92>
 8107744:	783b      	ldrb	r3, [r7, #0]
 8107746:	2b30      	cmp	r3, #48	; 0x30
 8107748:	d10a      	bne.n	8107760 <__cvt+0x8c>
 810774a:	2200      	movs	r2, #0
 810774c:	2300      	movs	r3, #0
 810774e:	4620      	mov	r0, r4
 8107750:	4629      	mov	r1, r5
 8107752:	f7f9 fa51 	bl	8100bf8 <__aeabi_dcmpeq>
 8107756:	b918      	cbnz	r0, 8107760 <__cvt+0x8c>
 8107758:	f1c6 0601 	rsb	r6, r6, #1
 810775c:	f8ca 6000 	str.w	r6, [sl]
 8107760:	f8da 3000 	ldr.w	r3, [sl]
 8107764:	4499      	add	r9, r3
 8107766:	2200      	movs	r2, #0
 8107768:	2300      	movs	r3, #0
 810776a:	4620      	mov	r0, r4
 810776c:	4629      	mov	r1, r5
 810776e:	f7f9 fa43 	bl	8100bf8 <__aeabi_dcmpeq>
 8107772:	b108      	cbz	r0, 8107778 <__cvt+0xa4>
 8107774:	f8cd 900c 	str.w	r9, [sp, #12]
 8107778:	2230      	movs	r2, #48	; 0x30
 810777a:	9b03      	ldr	r3, [sp, #12]
 810777c:	454b      	cmp	r3, r9
 810777e:	d307      	bcc.n	8107790 <__cvt+0xbc>
 8107780:	9b03      	ldr	r3, [sp, #12]
 8107782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107784:	1bdb      	subs	r3, r3, r7
 8107786:	4638      	mov	r0, r7
 8107788:	6013      	str	r3, [r2, #0]
 810778a:	b004      	add	sp, #16
 810778c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107790:	1c59      	adds	r1, r3, #1
 8107792:	9103      	str	r1, [sp, #12]
 8107794:	701a      	strb	r2, [r3, #0]
 8107796:	e7f0      	b.n	810777a <__cvt+0xa6>

08107798 <__exponent>:
 8107798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810779a:	4603      	mov	r3, r0
 810779c:	2900      	cmp	r1, #0
 810779e:	bfb8      	it	lt
 81077a0:	4249      	neglt	r1, r1
 81077a2:	f803 2b02 	strb.w	r2, [r3], #2
 81077a6:	bfb4      	ite	lt
 81077a8:	222d      	movlt	r2, #45	; 0x2d
 81077aa:	222b      	movge	r2, #43	; 0x2b
 81077ac:	2909      	cmp	r1, #9
 81077ae:	7042      	strb	r2, [r0, #1]
 81077b0:	dd2a      	ble.n	8107808 <__exponent+0x70>
 81077b2:	f10d 0407 	add.w	r4, sp, #7
 81077b6:	46a4      	mov	ip, r4
 81077b8:	270a      	movs	r7, #10
 81077ba:	46a6      	mov	lr, r4
 81077bc:	460a      	mov	r2, r1
 81077be:	fb91 f6f7 	sdiv	r6, r1, r7
 81077c2:	fb07 1516 	mls	r5, r7, r6, r1
 81077c6:	3530      	adds	r5, #48	; 0x30
 81077c8:	2a63      	cmp	r2, #99	; 0x63
 81077ca:	f104 34ff 	add.w	r4, r4, #4294967295
 81077ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 81077d2:	4631      	mov	r1, r6
 81077d4:	dcf1      	bgt.n	81077ba <__exponent+0x22>
 81077d6:	3130      	adds	r1, #48	; 0x30
 81077d8:	f1ae 0502 	sub.w	r5, lr, #2
 81077dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 81077e0:	1c44      	adds	r4, r0, #1
 81077e2:	4629      	mov	r1, r5
 81077e4:	4561      	cmp	r1, ip
 81077e6:	d30a      	bcc.n	81077fe <__exponent+0x66>
 81077e8:	f10d 0209 	add.w	r2, sp, #9
 81077ec:	eba2 020e 	sub.w	r2, r2, lr
 81077f0:	4565      	cmp	r5, ip
 81077f2:	bf88      	it	hi
 81077f4:	2200      	movhi	r2, #0
 81077f6:	4413      	add	r3, r2
 81077f8:	1a18      	subs	r0, r3, r0
 81077fa:	b003      	add	sp, #12
 81077fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81077fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107802:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107806:	e7ed      	b.n	81077e4 <__exponent+0x4c>
 8107808:	2330      	movs	r3, #48	; 0x30
 810780a:	3130      	adds	r1, #48	; 0x30
 810780c:	7083      	strb	r3, [r0, #2]
 810780e:	70c1      	strb	r1, [r0, #3]
 8107810:	1d03      	adds	r3, r0, #4
 8107812:	e7f1      	b.n	81077f8 <__exponent+0x60>

08107814 <_printf_float>:
 8107814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107818:	ed2d 8b02 	vpush	{d8}
 810781c:	b08d      	sub	sp, #52	; 0x34
 810781e:	460c      	mov	r4, r1
 8107820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107824:	4616      	mov	r6, r2
 8107826:	461f      	mov	r7, r3
 8107828:	4605      	mov	r5, r0
 810782a:	f003 f93f 	bl	810aaac <_localeconv_r>
 810782e:	f8d0 a000 	ldr.w	sl, [r0]
 8107832:	4650      	mov	r0, sl
 8107834:	f7f8 fd5e 	bl	81002f4 <strlen>
 8107838:	2300      	movs	r3, #0
 810783a:	930a      	str	r3, [sp, #40]	; 0x28
 810783c:	6823      	ldr	r3, [r4, #0]
 810783e:	9305      	str	r3, [sp, #20]
 8107840:	f8d8 3000 	ldr.w	r3, [r8]
 8107844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107848:	3307      	adds	r3, #7
 810784a:	f023 0307 	bic.w	r3, r3, #7
 810784e:	f103 0208 	add.w	r2, r3, #8
 8107852:	f8c8 2000 	str.w	r2, [r8]
 8107856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810785a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810785e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107866:	9307      	str	r3, [sp, #28]
 8107868:	f8cd 8018 	str.w	r8, [sp, #24]
 810786c:	ee08 0a10 	vmov	s16, r0
 8107870:	4b9f      	ldr	r3, [pc, #636]	; (8107af0 <_printf_float+0x2dc>)
 8107872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107876:	f04f 32ff 	mov.w	r2, #4294967295
 810787a:	f7f9 f9ef 	bl	8100c5c <__aeabi_dcmpun>
 810787e:	bb88      	cbnz	r0, 81078e4 <_printf_float+0xd0>
 8107880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107884:	4b9a      	ldr	r3, [pc, #616]	; (8107af0 <_printf_float+0x2dc>)
 8107886:	f04f 32ff 	mov.w	r2, #4294967295
 810788a:	f7f9 f9c9 	bl	8100c20 <__aeabi_dcmple>
 810788e:	bb48      	cbnz	r0, 81078e4 <_printf_float+0xd0>
 8107890:	2200      	movs	r2, #0
 8107892:	2300      	movs	r3, #0
 8107894:	4640      	mov	r0, r8
 8107896:	4649      	mov	r1, r9
 8107898:	f7f9 f9b8 	bl	8100c0c <__aeabi_dcmplt>
 810789c:	b110      	cbz	r0, 81078a4 <_printf_float+0x90>
 810789e:	232d      	movs	r3, #45	; 0x2d
 81078a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81078a4:	4b93      	ldr	r3, [pc, #588]	; (8107af4 <_printf_float+0x2e0>)
 81078a6:	4894      	ldr	r0, [pc, #592]	; (8107af8 <_printf_float+0x2e4>)
 81078a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81078ac:	bf94      	ite	ls
 81078ae:	4698      	movls	r8, r3
 81078b0:	4680      	movhi	r8, r0
 81078b2:	2303      	movs	r3, #3
 81078b4:	6123      	str	r3, [r4, #16]
 81078b6:	9b05      	ldr	r3, [sp, #20]
 81078b8:	f023 0204 	bic.w	r2, r3, #4
 81078bc:	6022      	str	r2, [r4, #0]
 81078be:	f04f 0900 	mov.w	r9, #0
 81078c2:	9700      	str	r7, [sp, #0]
 81078c4:	4633      	mov	r3, r6
 81078c6:	aa0b      	add	r2, sp, #44	; 0x2c
 81078c8:	4621      	mov	r1, r4
 81078ca:	4628      	mov	r0, r5
 81078cc:	f000 f9d8 	bl	8107c80 <_printf_common>
 81078d0:	3001      	adds	r0, #1
 81078d2:	f040 8090 	bne.w	81079f6 <_printf_float+0x1e2>
 81078d6:	f04f 30ff 	mov.w	r0, #4294967295
 81078da:	b00d      	add	sp, #52	; 0x34
 81078dc:	ecbd 8b02 	vpop	{d8}
 81078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81078e4:	4642      	mov	r2, r8
 81078e6:	464b      	mov	r3, r9
 81078e8:	4640      	mov	r0, r8
 81078ea:	4649      	mov	r1, r9
 81078ec:	f7f9 f9b6 	bl	8100c5c <__aeabi_dcmpun>
 81078f0:	b140      	cbz	r0, 8107904 <_printf_float+0xf0>
 81078f2:	464b      	mov	r3, r9
 81078f4:	2b00      	cmp	r3, #0
 81078f6:	bfbc      	itt	lt
 81078f8:	232d      	movlt	r3, #45	; 0x2d
 81078fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81078fe:	487f      	ldr	r0, [pc, #508]	; (8107afc <_printf_float+0x2e8>)
 8107900:	4b7f      	ldr	r3, [pc, #508]	; (8107b00 <_printf_float+0x2ec>)
 8107902:	e7d1      	b.n	81078a8 <_printf_float+0x94>
 8107904:	6863      	ldr	r3, [r4, #4]
 8107906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810790a:	9206      	str	r2, [sp, #24]
 810790c:	1c5a      	adds	r2, r3, #1
 810790e:	d13f      	bne.n	8107990 <_printf_float+0x17c>
 8107910:	2306      	movs	r3, #6
 8107912:	6063      	str	r3, [r4, #4]
 8107914:	9b05      	ldr	r3, [sp, #20]
 8107916:	6861      	ldr	r1, [r4, #4]
 8107918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810791c:	2300      	movs	r3, #0
 810791e:	9303      	str	r3, [sp, #12]
 8107920:	ab0a      	add	r3, sp, #40	; 0x28
 8107922:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107926:	ab09      	add	r3, sp, #36	; 0x24
 8107928:	ec49 8b10 	vmov	d0, r8, r9
 810792c:	9300      	str	r3, [sp, #0]
 810792e:	6022      	str	r2, [r4, #0]
 8107930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107934:	4628      	mov	r0, r5
 8107936:	f7ff fecd 	bl	81076d4 <__cvt>
 810793a:	9b06      	ldr	r3, [sp, #24]
 810793c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810793e:	2b47      	cmp	r3, #71	; 0x47
 8107940:	4680      	mov	r8, r0
 8107942:	d108      	bne.n	8107956 <_printf_float+0x142>
 8107944:	1cc8      	adds	r0, r1, #3
 8107946:	db02      	blt.n	810794e <_printf_float+0x13a>
 8107948:	6863      	ldr	r3, [r4, #4]
 810794a:	4299      	cmp	r1, r3
 810794c:	dd41      	ble.n	81079d2 <_printf_float+0x1be>
 810794e:	f1ab 0b02 	sub.w	fp, fp, #2
 8107952:	fa5f fb8b 	uxtb.w	fp, fp
 8107956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810795a:	d820      	bhi.n	810799e <_printf_float+0x18a>
 810795c:	3901      	subs	r1, #1
 810795e:	465a      	mov	r2, fp
 8107960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107964:	9109      	str	r1, [sp, #36]	; 0x24
 8107966:	f7ff ff17 	bl	8107798 <__exponent>
 810796a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810796c:	1813      	adds	r3, r2, r0
 810796e:	2a01      	cmp	r2, #1
 8107970:	4681      	mov	r9, r0
 8107972:	6123      	str	r3, [r4, #16]
 8107974:	dc02      	bgt.n	810797c <_printf_float+0x168>
 8107976:	6822      	ldr	r2, [r4, #0]
 8107978:	07d2      	lsls	r2, r2, #31
 810797a:	d501      	bpl.n	8107980 <_printf_float+0x16c>
 810797c:	3301      	adds	r3, #1
 810797e:	6123      	str	r3, [r4, #16]
 8107980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107984:	2b00      	cmp	r3, #0
 8107986:	d09c      	beq.n	81078c2 <_printf_float+0xae>
 8107988:	232d      	movs	r3, #45	; 0x2d
 810798a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810798e:	e798      	b.n	81078c2 <_printf_float+0xae>
 8107990:	9a06      	ldr	r2, [sp, #24]
 8107992:	2a47      	cmp	r2, #71	; 0x47
 8107994:	d1be      	bne.n	8107914 <_printf_float+0x100>
 8107996:	2b00      	cmp	r3, #0
 8107998:	d1bc      	bne.n	8107914 <_printf_float+0x100>
 810799a:	2301      	movs	r3, #1
 810799c:	e7b9      	b.n	8107912 <_printf_float+0xfe>
 810799e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81079a2:	d118      	bne.n	81079d6 <_printf_float+0x1c2>
 81079a4:	2900      	cmp	r1, #0
 81079a6:	6863      	ldr	r3, [r4, #4]
 81079a8:	dd0b      	ble.n	81079c2 <_printf_float+0x1ae>
 81079aa:	6121      	str	r1, [r4, #16]
 81079ac:	b913      	cbnz	r3, 81079b4 <_printf_float+0x1a0>
 81079ae:	6822      	ldr	r2, [r4, #0]
 81079b0:	07d0      	lsls	r0, r2, #31
 81079b2:	d502      	bpl.n	81079ba <_printf_float+0x1a6>
 81079b4:	3301      	adds	r3, #1
 81079b6:	440b      	add	r3, r1
 81079b8:	6123      	str	r3, [r4, #16]
 81079ba:	65a1      	str	r1, [r4, #88]	; 0x58
 81079bc:	f04f 0900 	mov.w	r9, #0
 81079c0:	e7de      	b.n	8107980 <_printf_float+0x16c>
 81079c2:	b913      	cbnz	r3, 81079ca <_printf_float+0x1b6>
 81079c4:	6822      	ldr	r2, [r4, #0]
 81079c6:	07d2      	lsls	r2, r2, #31
 81079c8:	d501      	bpl.n	81079ce <_printf_float+0x1ba>
 81079ca:	3302      	adds	r3, #2
 81079cc:	e7f4      	b.n	81079b8 <_printf_float+0x1a4>
 81079ce:	2301      	movs	r3, #1
 81079d0:	e7f2      	b.n	81079b8 <_printf_float+0x1a4>
 81079d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81079d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81079d8:	4299      	cmp	r1, r3
 81079da:	db05      	blt.n	81079e8 <_printf_float+0x1d4>
 81079dc:	6823      	ldr	r3, [r4, #0]
 81079de:	6121      	str	r1, [r4, #16]
 81079e0:	07d8      	lsls	r0, r3, #31
 81079e2:	d5ea      	bpl.n	81079ba <_printf_float+0x1a6>
 81079e4:	1c4b      	adds	r3, r1, #1
 81079e6:	e7e7      	b.n	81079b8 <_printf_float+0x1a4>
 81079e8:	2900      	cmp	r1, #0
 81079ea:	bfd4      	ite	le
 81079ec:	f1c1 0202 	rsble	r2, r1, #2
 81079f0:	2201      	movgt	r2, #1
 81079f2:	4413      	add	r3, r2
 81079f4:	e7e0      	b.n	81079b8 <_printf_float+0x1a4>
 81079f6:	6823      	ldr	r3, [r4, #0]
 81079f8:	055a      	lsls	r2, r3, #21
 81079fa:	d407      	bmi.n	8107a0c <_printf_float+0x1f8>
 81079fc:	6923      	ldr	r3, [r4, #16]
 81079fe:	4642      	mov	r2, r8
 8107a00:	4631      	mov	r1, r6
 8107a02:	4628      	mov	r0, r5
 8107a04:	47b8      	blx	r7
 8107a06:	3001      	adds	r0, #1
 8107a08:	d12c      	bne.n	8107a64 <_printf_float+0x250>
 8107a0a:	e764      	b.n	81078d6 <_printf_float+0xc2>
 8107a0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107a10:	f240 80e0 	bls.w	8107bd4 <_printf_float+0x3c0>
 8107a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107a18:	2200      	movs	r2, #0
 8107a1a:	2300      	movs	r3, #0
 8107a1c:	f7f9 f8ec 	bl	8100bf8 <__aeabi_dcmpeq>
 8107a20:	2800      	cmp	r0, #0
 8107a22:	d034      	beq.n	8107a8e <_printf_float+0x27a>
 8107a24:	4a37      	ldr	r2, [pc, #220]	; (8107b04 <_printf_float+0x2f0>)
 8107a26:	2301      	movs	r3, #1
 8107a28:	4631      	mov	r1, r6
 8107a2a:	4628      	mov	r0, r5
 8107a2c:	47b8      	blx	r7
 8107a2e:	3001      	adds	r0, #1
 8107a30:	f43f af51 	beq.w	81078d6 <_printf_float+0xc2>
 8107a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107a38:	429a      	cmp	r2, r3
 8107a3a:	db02      	blt.n	8107a42 <_printf_float+0x22e>
 8107a3c:	6823      	ldr	r3, [r4, #0]
 8107a3e:	07d8      	lsls	r0, r3, #31
 8107a40:	d510      	bpl.n	8107a64 <_printf_float+0x250>
 8107a42:	ee18 3a10 	vmov	r3, s16
 8107a46:	4652      	mov	r2, sl
 8107a48:	4631      	mov	r1, r6
 8107a4a:	4628      	mov	r0, r5
 8107a4c:	47b8      	blx	r7
 8107a4e:	3001      	adds	r0, #1
 8107a50:	f43f af41 	beq.w	81078d6 <_printf_float+0xc2>
 8107a54:	f04f 0800 	mov.w	r8, #0
 8107a58:	f104 091a 	add.w	r9, r4, #26
 8107a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107a5e:	3b01      	subs	r3, #1
 8107a60:	4543      	cmp	r3, r8
 8107a62:	dc09      	bgt.n	8107a78 <_printf_float+0x264>
 8107a64:	6823      	ldr	r3, [r4, #0]
 8107a66:	079b      	lsls	r3, r3, #30
 8107a68:	f100 8105 	bmi.w	8107c76 <_printf_float+0x462>
 8107a6c:	68e0      	ldr	r0, [r4, #12]
 8107a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107a70:	4298      	cmp	r0, r3
 8107a72:	bfb8      	it	lt
 8107a74:	4618      	movlt	r0, r3
 8107a76:	e730      	b.n	81078da <_printf_float+0xc6>
 8107a78:	2301      	movs	r3, #1
 8107a7a:	464a      	mov	r2, r9
 8107a7c:	4631      	mov	r1, r6
 8107a7e:	4628      	mov	r0, r5
 8107a80:	47b8      	blx	r7
 8107a82:	3001      	adds	r0, #1
 8107a84:	f43f af27 	beq.w	81078d6 <_printf_float+0xc2>
 8107a88:	f108 0801 	add.w	r8, r8, #1
 8107a8c:	e7e6      	b.n	8107a5c <_printf_float+0x248>
 8107a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107a90:	2b00      	cmp	r3, #0
 8107a92:	dc39      	bgt.n	8107b08 <_printf_float+0x2f4>
 8107a94:	4a1b      	ldr	r2, [pc, #108]	; (8107b04 <_printf_float+0x2f0>)
 8107a96:	2301      	movs	r3, #1
 8107a98:	4631      	mov	r1, r6
 8107a9a:	4628      	mov	r0, r5
 8107a9c:	47b8      	blx	r7
 8107a9e:	3001      	adds	r0, #1
 8107aa0:	f43f af19 	beq.w	81078d6 <_printf_float+0xc2>
 8107aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107aa8:	4313      	orrs	r3, r2
 8107aaa:	d102      	bne.n	8107ab2 <_printf_float+0x29e>
 8107aac:	6823      	ldr	r3, [r4, #0]
 8107aae:	07d9      	lsls	r1, r3, #31
 8107ab0:	d5d8      	bpl.n	8107a64 <_printf_float+0x250>
 8107ab2:	ee18 3a10 	vmov	r3, s16
 8107ab6:	4652      	mov	r2, sl
 8107ab8:	4631      	mov	r1, r6
 8107aba:	4628      	mov	r0, r5
 8107abc:	47b8      	blx	r7
 8107abe:	3001      	adds	r0, #1
 8107ac0:	f43f af09 	beq.w	81078d6 <_printf_float+0xc2>
 8107ac4:	f04f 0900 	mov.w	r9, #0
 8107ac8:	f104 0a1a 	add.w	sl, r4, #26
 8107acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107ace:	425b      	negs	r3, r3
 8107ad0:	454b      	cmp	r3, r9
 8107ad2:	dc01      	bgt.n	8107ad8 <_printf_float+0x2c4>
 8107ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107ad6:	e792      	b.n	81079fe <_printf_float+0x1ea>
 8107ad8:	2301      	movs	r3, #1
 8107ada:	4652      	mov	r2, sl
 8107adc:	4631      	mov	r1, r6
 8107ade:	4628      	mov	r0, r5
 8107ae0:	47b8      	blx	r7
 8107ae2:	3001      	adds	r0, #1
 8107ae4:	f43f aef7 	beq.w	81078d6 <_printf_float+0xc2>
 8107ae8:	f109 0901 	add.w	r9, r9, #1
 8107aec:	e7ee      	b.n	8107acc <_printf_float+0x2b8>
 8107aee:	bf00      	nop
 8107af0:	7fefffff 	.word	0x7fefffff
 8107af4:	0810bd69 	.word	0x0810bd69
 8107af8:	0810bd6d 	.word	0x0810bd6d
 8107afc:	0810bd75 	.word	0x0810bd75
 8107b00:	0810bd71 	.word	0x0810bd71
 8107b04:	0810bd79 	.word	0x0810bd79
 8107b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107b0c:	429a      	cmp	r2, r3
 8107b0e:	bfa8      	it	ge
 8107b10:	461a      	movge	r2, r3
 8107b12:	2a00      	cmp	r2, #0
 8107b14:	4691      	mov	r9, r2
 8107b16:	dc37      	bgt.n	8107b88 <_printf_float+0x374>
 8107b18:	f04f 0b00 	mov.w	fp, #0
 8107b1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107b20:	f104 021a 	add.w	r2, r4, #26
 8107b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107b26:	9305      	str	r3, [sp, #20]
 8107b28:	eba3 0309 	sub.w	r3, r3, r9
 8107b2c:	455b      	cmp	r3, fp
 8107b2e:	dc33      	bgt.n	8107b98 <_printf_float+0x384>
 8107b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107b34:	429a      	cmp	r2, r3
 8107b36:	db3b      	blt.n	8107bb0 <_printf_float+0x39c>
 8107b38:	6823      	ldr	r3, [r4, #0]
 8107b3a:	07da      	lsls	r2, r3, #31
 8107b3c:	d438      	bmi.n	8107bb0 <_printf_float+0x39c>
 8107b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107b40:	9b05      	ldr	r3, [sp, #20]
 8107b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107b44:	1ad3      	subs	r3, r2, r3
 8107b46:	eba2 0901 	sub.w	r9, r2, r1
 8107b4a:	4599      	cmp	r9, r3
 8107b4c:	bfa8      	it	ge
 8107b4e:	4699      	movge	r9, r3
 8107b50:	f1b9 0f00 	cmp.w	r9, #0
 8107b54:	dc35      	bgt.n	8107bc2 <_printf_float+0x3ae>
 8107b56:	f04f 0800 	mov.w	r8, #0
 8107b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107b5e:	f104 0a1a 	add.w	sl, r4, #26
 8107b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107b66:	1a9b      	subs	r3, r3, r2
 8107b68:	eba3 0309 	sub.w	r3, r3, r9
 8107b6c:	4543      	cmp	r3, r8
 8107b6e:	f77f af79 	ble.w	8107a64 <_printf_float+0x250>
 8107b72:	2301      	movs	r3, #1
 8107b74:	4652      	mov	r2, sl
 8107b76:	4631      	mov	r1, r6
 8107b78:	4628      	mov	r0, r5
 8107b7a:	47b8      	blx	r7
 8107b7c:	3001      	adds	r0, #1
 8107b7e:	f43f aeaa 	beq.w	81078d6 <_printf_float+0xc2>
 8107b82:	f108 0801 	add.w	r8, r8, #1
 8107b86:	e7ec      	b.n	8107b62 <_printf_float+0x34e>
 8107b88:	4613      	mov	r3, r2
 8107b8a:	4631      	mov	r1, r6
 8107b8c:	4642      	mov	r2, r8
 8107b8e:	4628      	mov	r0, r5
 8107b90:	47b8      	blx	r7
 8107b92:	3001      	adds	r0, #1
 8107b94:	d1c0      	bne.n	8107b18 <_printf_float+0x304>
 8107b96:	e69e      	b.n	81078d6 <_printf_float+0xc2>
 8107b98:	2301      	movs	r3, #1
 8107b9a:	4631      	mov	r1, r6
 8107b9c:	4628      	mov	r0, r5
 8107b9e:	9205      	str	r2, [sp, #20]
 8107ba0:	47b8      	blx	r7
 8107ba2:	3001      	adds	r0, #1
 8107ba4:	f43f ae97 	beq.w	81078d6 <_printf_float+0xc2>
 8107ba8:	9a05      	ldr	r2, [sp, #20]
 8107baa:	f10b 0b01 	add.w	fp, fp, #1
 8107bae:	e7b9      	b.n	8107b24 <_printf_float+0x310>
 8107bb0:	ee18 3a10 	vmov	r3, s16
 8107bb4:	4652      	mov	r2, sl
 8107bb6:	4631      	mov	r1, r6
 8107bb8:	4628      	mov	r0, r5
 8107bba:	47b8      	blx	r7
 8107bbc:	3001      	adds	r0, #1
 8107bbe:	d1be      	bne.n	8107b3e <_printf_float+0x32a>
 8107bc0:	e689      	b.n	81078d6 <_printf_float+0xc2>
 8107bc2:	9a05      	ldr	r2, [sp, #20]
 8107bc4:	464b      	mov	r3, r9
 8107bc6:	4442      	add	r2, r8
 8107bc8:	4631      	mov	r1, r6
 8107bca:	4628      	mov	r0, r5
 8107bcc:	47b8      	blx	r7
 8107bce:	3001      	adds	r0, #1
 8107bd0:	d1c1      	bne.n	8107b56 <_printf_float+0x342>
 8107bd2:	e680      	b.n	81078d6 <_printf_float+0xc2>
 8107bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107bd6:	2a01      	cmp	r2, #1
 8107bd8:	dc01      	bgt.n	8107bde <_printf_float+0x3ca>
 8107bda:	07db      	lsls	r3, r3, #31
 8107bdc:	d538      	bpl.n	8107c50 <_printf_float+0x43c>
 8107bde:	2301      	movs	r3, #1
 8107be0:	4642      	mov	r2, r8
 8107be2:	4631      	mov	r1, r6
 8107be4:	4628      	mov	r0, r5
 8107be6:	47b8      	blx	r7
 8107be8:	3001      	adds	r0, #1
 8107bea:	f43f ae74 	beq.w	81078d6 <_printf_float+0xc2>
 8107bee:	ee18 3a10 	vmov	r3, s16
 8107bf2:	4652      	mov	r2, sl
 8107bf4:	4631      	mov	r1, r6
 8107bf6:	4628      	mov	r0, r5
 8107bf8:	47b8      	blx	r7
 8107bfa:	3001      	adds	r0, #1
 8107bfc:	f43f ae6b 	beq.w	81078d6 <_printf_float+0xc2>
 8107c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107c04:	2200      	movs	r2, #0
 8107c06:	2300      	movs	r3, #0
 8107c08:	f7f8 fff6 	bl	8100bf8 <__aeabi_dcmpeq>
 8107c0c:	b9d8      	cbnz	r0, 8107c46 <_printf_float+0x432>
 8107c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c10:	f108 0201 	add.w	r2, r8, #1
 8107c14:	3b01      	subs	r3, #1
 8107c16:	4631      	mov	r1, r6
 8107c18:	4628      	mov	r0, r5
 8107c1a:	47b8      	blx	r7
 8107c1c:	3001      	adds	r0, #1
 8107c1e:	d10e      	bne.n	8107c3e <_printf_float+0x42a>
 8107c20:	e659      	b.n	81078d6 <_printf_float+0xc2>
 8107c22:	2301      	movs	r3, #1
 8107c24:	4652      	mov	r2, sl
 8107c26:	4631      	mov	r1, r6
 8107c28:	4628      	mov	r0, r5
 8107c2a:	47b8      	blx	r7
 8107c2c:	3001      	adds	r0, #1
 8107c2e:	f43f ae52 	beq.w	81078d6 <_printf_float+0xc2>
 8107c32:	f108 0801 	add.w	r8, r8, #1
 8107c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c38:	3b01      	subs	r3, #1
 8107c3a:	4543      	cmp	r3, r8
 8107c3c:	dcf1      	bgt.n	8107c22 <_printf_float+0x40e>
 8107c3e:	464b      	mov	r3, r9
 8107c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107c44:	e6dc      	b.n	8107a00 <_printf_float+0x1ec>
 8107c46:	f04f 0800 	mov.w	r8, #0
 8107c4a:	f104 0a1a 	add.w	sl, r4, #26
 8107c4e:	e7f2      	b.n	8107c36 <_printf_float+0x422>
 8107c50:	2301      	movs	r3, #1
 8107c52:	4642      	mov	r2, r8
 8107c54:	e7df      	b.n	8107c16 <_printf_float+0x402>
 8107c56:	2301      	movs	r3, #1
 8107c58:	464a      	mov	r2, r9
 8107c5a:	4631      	mov	r1, r6
 8107c5c:	4628      	mov	r0, r5
 8107c5e:	47b8      	blx	r7
 8107c60:	3001      	adds	r0, #1
 8107c62:	f43f ae38 	beq.w	81078d6 <_printf_float+0xc2>
 8107c66:	f108 0801 	add.w	r8, r8, #1
 8107c6a:	68e3      	ldr	r3, [r4, #12]
 8107c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107c6e:	1a5b      	subs	r3, r3, r1
 8107c70:	4543      	cmp	r3, r8
 8107c72:	dcf0      	bgt.n	8107c56 <_printf_float+0x442>
 8107c74:	e6fa      	b.n	8107a6c <_printf_float+0x258>
 8107c76:	f04f 0800 	mov.w	r8, #0
 8107c7a:	f104 0919 	add.w	r9, r4, #25
 8107c7e:	e7f4      	b.n	8107c6a <_printf_float+0x456>

08107c80 <_printf_common>:
 8107c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107c84:	4616      	mov	r6, r2
 8107c86:	4699      	mov	r9, r3
 8107c88:	688a      	ldr	r2, [r1, #8]
 8107c8a:	690b      	ldr	r3, [r1, #16]
 8107c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107c90:	4293      	cmp	r3, r2
 8107c92:	bfb8      	it	lt
 8107c94:	4613      	movlt	r3, r2
 8107c96:	6033      	str	r3, [r6, #0]
 8107c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107c9c:	4607      	mov	r7, r0
 8107c9e:	460c      	mov	r4, r1
 8107ca0:	b10a      	cbz	r2, 8107ca6 <_printf_common+0x26>
 8107ca2:	3301      	adds	r3, #1
 8107ca4:	6033      	str	r3, [r6, #0]
 8107ca6:	6823      	ldr	r3, [r4, #0]
 8107ca8:	0699      	lsls	r1, r3, #26
 8107caa:	bf42      	ittt	mi
 8107cac:	6833      	ldrmi	r3, [r6, #0]
 8107cae:	3302      	addmi	r3, #2
 8107cb0:	6033      	strmi	r3, [r6, #0]
 8107cb2:	6825      	ldr	r5, [r4, #0]
 8107cb4:	f015 0506 	ands.w	r5, r5, #6
 8107cb8:	d106      	bne.n	8107cc8 <_printf_common+0x48>
 8107cba:	f104 0a19 	add.w	sl, r4, #25
 8107cbe:	68e3      	ldr	r3, [r4, #12]
 8107cc0:	6832      	ldr	r2, [r6, #0]
 8107cc2:	1a9b      	subs	r3, r3, r2
 8107cc4:	42ab      	cmp	r3, r5
 8107cc6:	dc26      	bgt.n	8107d16 <_printf_common+0x96>
 8107cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107ccc:	1e13      	subs	r3, r2, #0
 8107cce:	6822      	ldr	r2, [r4, #0]
 8107cd0:	bf18      	it	ne
 8107cd2:	2301      	movne	r3, #1
 8107cd4:	0692      	lsls	r2, r2, #26
 8107cd6:	d42b      	bmi.n	8107d30 <_printf_common+0xb0>
 8107cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107cdc:	4649      	mov	r1, r9
 8107cde:	4638      	mov	r0, r7
 8107ce0:	47c0      	blx	r8
 8107ce2:	3001      	adds	r0, #1
 8107ce4:	d01e      	beq.n	8107d24 <_printf_common+0xa4>
 8107ce6:	6823      	ldr	r3, [r4, #0]
 8107ce8:	68e5      	ldr	r5, [r4, #12]
 8107cea:	6832      	ldr	r2, [r6, #0]
 8107cec:	f003 0306 	and.w	r3, r3, #6
 8107cf0:	2b04      	cmp	r3, #4
 8107cf2:	bf08      	it	eq
 8107cf4:	1aad      	subeq	r5, r5, r2
 8107cf6:	68a3      	ldr	r3, [r4, #8]
 8107cf8:	6922      	ldr	r2, [r4, #16]
 8107cfa:	bf0c      	ite	eq
 8107cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107d00:	2500      	movne	r5, #0
 8107d02:	4293      	cmp	r3, r2
 8107d04:	bfc4      	itt	gt
 8107d06:	1a9b      	subgt	r3, r3, r2
 8107d08:	18ed      	addgt	r5, r5, r3
 8107d0a:	2600      	movs	r6, #0
 8107d0c:	341a      	adds	r4, #26
 8107d0e:	42b5      	cmp	r5, r6
 8107d10:	d11a      	bne.n	8107d48 <_printf_common+0xc8>
 8107d12:	2000      	movs	r0, #0
 8107d14:	e008      	b.n	8107d28 <_printf_common+0xa8>
 8107d16:	2301      	movs	r3, #1
 8107d18:	4652      	mov	r2, sl
 8107d1a:	4649      	mov	r1, r9
 8107d1c:	4638      	mov	r0, r7
 8107d1e:	47c0      	blx	r8
 8107d20:	3001      	adds	r0, #1
 8107d22:	d103      	bne.n	8107d2c <_printf_common+0xac>
 8107d24:	f04f 30ff 	mov.w	r0, #4294967295
 8107d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107d2c:	3501      	adds	r5, #1
 8107d2e:	e7c6      	b.n	8107cbe <_printf_common+0x3e>
 8107d30:	18e1      	adds	r1, r4, r3
 8107d32:	1c5a      	adds	r2, r3, #1
 8107d34:	2030      	movs	r0, #48	; 0x30
 8107d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107d3a:	4422      	add	r2, r4
 8107d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8107d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8107d44:	3302      	adds	r3, #2
 8107d46:	e7c7      	b.n	8107cd8 <_printf_common+0x58>
 8107d48:	2301      	movs	r3, #1
 8107d4a:	4622      	mov	r2, r4
 8107d4c:	4649      	mov	r1, r9
 8107d4e:	4638      	mov	r0, r7
 8107d50:	47c0      	blx	r8
 8107d52:	3001      	adds	r0, #1
 8107d54:	d0e6      	beq.n	8107d24 <_printf_common+0xa4>
 8107d56:	3601      	adds	r6, #1
 8107d58:	e7d9      	b.n	8107d0e <_printf_common+0x8e>
	...

08107d5c <_printf_i>:
 8107d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107d60:	460c      	mov	r4, r1
 8107d62:	4691      	mov	r9, r2
 8107d64:	7e27      	ldrb	r7, [r4, #24]
 8107d66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8107d68:	2f78      	cmp	r7, #120	; 0x78
 8107d6a:	4680      	mov	r8, r0
 8107d6c:	469a      	mov	sl, r3
 8107d6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107d72:	d807      	bhi.n	8107d84 <_printf_i+0x28>
 8107d74:	2f62      	cmp	r7, #98	; 0x62
 8107d76:	d80a      	bhi.n	8107d8e <_printf_i+0x32>
 8107d78:	2f00      	cmp	r7, #0
 8107d7a:	f000 80d8 	beq.w	8107f2e <_printf_i+0x1d2>
 8107d7e:	2f58      	cmp	r7, #88	; 0x58
 8107d80:	f000 80a3 	beq.w	8107eca <_printf_i+0x16e>
 8107d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107d8c:	e03a      	b.n	8107e04 <_printf_i+0xa8>
 8107d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107d92:	2b15      	cmp	r3, #21
 8107d94:	d8f6      	bhi.n	8107d84 <_printf_i+0x28>
 8107d96:	a001      	add	r0, pc, #4	; (adr r0, 8107d9c <_printf_i+0x40>)
 8107d98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8107d9c:	08107df5 	.word	0x08107df5
 8107da0:	08107e09 	.word	0x08107e09
 8107da4:	08107d85 	.word	0x08107d85
 8107da8:	08107d85 	.word	0x08107d85
 8107dac:	08107d85 	.word	0x08107d85
 8107db0:	08107d85 	.word	0x08107d85
 8107db4:	08107e09 	.word	0x08107e09
 8107db8:	08107d85 	.word	0x08107d85
 8107dbc:	08107d85 	.word	0x08107d85
 8107dc0:	08107d85 	.word	0x08107d85
 8107dc4:	08107d85 	.word	0x08107d85
 8107dc8:	08107f15 	.word	0x08107f15
 8107dcc:	08107e39 	.word	0x08107e39
 8107dd0:	08107ef7 	.word	0x08107ef7
 8107dd4:	08107d85 	.word	0x08107d85
 8107dd8:	08107d85 	.word	0x08107d85
 8107ddc:	08107f37 	.word	0x08107f37
 8107de0:	08107d85 	.word	0x08107d85
 8107de4:	08107e39 	.word	0x08107e39
 8107de8:	08107d85 	.word	0x08107d85
 8107dec:	08107d85 	.word	0x08107d85
 8107df0:	08107eff 	.word	0x08107eff
 8107df4:	680b      	ldr	r3, [r1, #0]
 8107df6:	1d1a      	adds	r2, r3, #4
 8107df8:	681b      	ldr	r3, [r3, #0]
 8107dfa:	600a      	str	r2, [r1, #0]
 8107dfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8107e04:	2301      	movs	r3, #1
 8107e06:	e0a3      	b.n	8107f50 <_printf_i+0x1f4>
 8107e08:	6825      	ldr	r5, [r4, #0]
 8107e0a:	6808      	ldr	r0, [r1, #0]
 8107e0c:	062e      	lsls	r6, r5, #24
 8107e0e:	f100 0304 	add.w	r3, r0, #4
 8107e12:	d50a      	bpl.n	8107e2a <_printf_i+0xce>
 8107e14:	6805      	ldr	r5, [r0, #0]
 8107e16:	600b      	str	r3, [r1, #0]
 8107e18:	2d00      	cmp	r5, #0
 8107e1a:	da03      	bge.n	8107e24 <_printf_i+0xc8>
 8107e1c:	232d      	movs	r3, #45	; 0x2d
 8107e1e:	426d      	negs	r5, r5
 8107e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107e24:	485e      	ldr	r0, [pc, #376]	; (8107fa0 <_printf_i+0x244>)
 8107e26:	230a      	movs	r3, #10
 8107e28:	e019      	b.n	8107e5e <_printf_i+0x102>
 8107e2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8107e2e:	6805      	ldr	r5, [r0, #0]
 8107e30:	600b      	str	r3, [r1, #0]
 8107e32:	bf18      	it	ne
 8107e34:	b22d      	sxthne	r5, r5
 8107e36:	e7ef      	b.n	8107e18 <_printf_i+0xbc>
 8107e38:	680b      	ldr	r3, [r1, #0]
 8107e3a:	6825      	ldr	r5, [r4, #0]
 8107e3c:	1d18      	adds	r0, r3, #4
 8107e3e:	6008      	str	r0, [r1, #0]
 8107e40:	0628      	lsls	r0, r5, #24
 8107e42:	d501      	bpl.n	8107e48 <_printf_i+0xec>
 8107e44:	681d      	ldr	r5, [r3, #0]
 8107e46:	e002      	b.n	8107e4e <_printf_i+0xf2>
 8107e48:	0669      	lsls	r1, r5, #25
 8107e4a:	d5fb      	bpl.n	8107e44 <_printf_i+0xe8>
 8107e4c:	881d      	ldrh	r5, [r3, #0]
 8107e4e:	4854      	ldr	r0, [pc, #336]	; (8107fa0 <_printf_i+0x244>)
 8107e50:	2f6f      	cmp	r7, #111	; 0x6f
 8107e52:	bf0c      	ite	eq
 8107e54:	2308      	moveq	r3, #8
 8107e56:	230a      	movne	r3, #10
 8107e58:	2100      	movs	r1, #0
 8107e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107e5e:	6866      	ldr	r6, [r4, #4]
 8107e60:	60a6      	str	r6, [r4, #8]
 8107e62:	2e00      	cmp	r6, #0
 8107e64:	bfa2      	ittt	ge
 8107e66:	6821      	ldrge	r1, [r4, #0]
 8107e68:	f021 0104 	bicge.w	r1, r1, #4
 8107e6c:	6021      	strge	r1, [r4, #0]
 8107e6e:	b90d      	cbnz	r5, 8107e74 <_printf_i+0x118>
 8107e70:	2e00      	cmp	r6, #0
 8107e72:	d04d      	beq.n	8107f10 <_printf_i+0x1b4>
 8107e74:	4616      	mov	r6, r2
 8107e76:	fbb5 f1f3 	udiv	r1, r5, r3
 8107e7a:	fb03 5711 	mls	r7, r3, r1, r5
 8107e7e:	5dc7      	ldrb	r7, [r0, r7]
 8107e80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107e84:	462f      	mov	r7, r5
 8107e86:	42bb      	cmp	r3, r7
 8107e88:	460d      	mov	r5, r1
 8107e8a:	d9f4      	bls.n	8107e76 <_printf_i+0x11a>
 8107e8c:	2b08      	cmp	r3, #8
 8107e8e:	d10b      	bne.n	8107ea8 <_printf_i+0x14c>
 8107e90:	6823      	ldr	r3, [r4, #0]
 8107e92:	07df      	lsls	r7, r3, #31
 8107e94:	d508      	bpl.n	8107ea8 <_printf_i+0x14c>
 8107e96:	6923      	ldr	r3, [r4, #16]
 8107e98:	6861      	ldr	r1, [r4, #4]
 8107e9a:	4299      	cmp	r1, r3
 8107e9c:	bfde      	ittt	le
 8107e9e:	2330      	movle	r3, #48	; 0x30
 8107ea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8107ea4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8107ea8:	1b92      	subs	r2, r2, r6
 8107eaa:	6122      	str	r2, [r4, #16]
 8107eac:	f8cd a000 	str.w	sl, [sp]
 8107eb0:	464b      	mov	r3, r9
 8107eb2:	aa03      	add	r2, sp, #12
 8107eb4:	4621      	mov	r1, r4
 8107eb6:	4640      	mov	r0, r8
 8107eb8:	f7ff fee2 	bl	8107c80 <_printf_common>
 8107ebc:	3001      	adds	r0, #1
 8107ebe:	d14c      	bne.n	8107f5a <_printf_i+0x1fe>
 8107ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8107ec4:	b004      	add	sp, #16
 8107ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107eca:	4835      	ldr	r0, [pc, #212]	; (8107fa0 <_printf_i+0x244>)
 8107ecc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8107ed0:	6823      	ldr	r3, [r4, #0]
 8107ed2:	680e      	ldr	r6, [r1, #0]
 8107ed4:	061f      	lsls	r7, r3, #24
 8107ed6:	f856 5b04 	ldr.w	r5, [r6], #4
 8107eda:	600e      	str	r6, [r1, #0]
 8107edc:	d514      	bpl.n	8107f08 <_printf_i+0x1ac>
 8107ede:	07d9      	lsls	r1, r3, #31
 8107ee0:	bf44      	itt	mi
 8107ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8107ee6:	6023      	strmi	r3, [r4, #0]
 8107ee8:	b91d      	cbnz	r5, 8107ef2 <_printf_i+0x196>
 8107eea:	6823      	ldr	r3, [r4, #0]
 8107eec:	f023 0320 	bic.w	r3, r3, #32
 8107ef0:	6023      	str	r3, [r4, #0]
 8107ef2:	2310      	movs	r3, #16
 8107ef4:	e7b0      	b.n	8107e58 <_printf_i+0xfc>
 8107ef6:	6823      	ldr	r3, [r4, #0]
 8107ef8:	f043 0320 	orr.w	r3, r3, #32
 8107efc:	6023      	str	r3, [r4, #0]
 8107efe:	2378      	movs	r3, #120	; 0x78
 8107f00:	4828      	ldr	r0, [pc, #160]	; (8107fa4 <_printf_i+0x248>)
 8107f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8107f06:	e7e3      	b.n	8107ed0 <_printf_i+0x174>
 8107f08:	065e      	lsls	r6, r3, #25
 8107f0a:	bf48      	it	mi
 8107f0c:	b2ad      	uxthmi	r5, r5
 8107f0e:	e7e6      	b.n	8107ede <_printf_i+0x182>
 8107f10:	4616      	mov	r6, r2
 8107f12:	e7bb      	b.n	8107e8c <_printf_i+0x130>
 8107f14:	680b      	ldr	r3, [r1, #0]
 8107f16:	6826      	ldr	r6, [r4, #0]
 8107f18:	6960      	ldr	r0, [r4, #20]
 8107f1a:	1d1d      	adds	r5, r3, #4
 8107f1c:	600d      	str	r5, [r1, #0]
 8107f1e:	0635      	lsls	r5, r6, #24
 8107f20:	681b      	ldr	r3, [r3, #0]
 8107f22:	d501      	bpl.n	8107f28 <_printf_i+0x1cc>
 8107f24:	6018      	str	r0, [r3, #0]
 8107f26:	e002      	b.n	8107f2e <_printf_i+0x1d2>
 8107f28:	0671      	lsls	r1, r6, #25
 8107f2a:	d5fb      	bpl.n	8107f24 <_printf_i+0x1c8>
 8107f2c:	8018      	strh	r0, [r3, #0]
 8107f2e:	2300      	movs	r3, #0
 8107f30:	6123      	str	r3, [r4, #16]
 8107f32:	4616      	mov	r6, r2
 8107f34:	e7ba      	b.n	8107eac <_printf_i+0x150>
 8107f36:	680b      	ldr	r3, [r1, #0]
 8107f38:	1d1a      	adds	r2, r3, #4
 8107f3a:	600a      	str	r2, [r1, #0]
 8107f3c:	681e      	ldr	r6, [r3, #0]
 8107f3e:	6862      	ldr	r2, [r4, #4]
 8107f40:	2100      	movs	r1, #0
 8107f42:	4630      	mov	r0, r6
 8107f44:	f7f8 f9e4 	bl	8100310 <memchr>
 8107f48:	b108      	cbz	r0, 8107f4e <_printf_i+0x1f2>
 8107f4a:	1b80      	subs	r0, r0, r6
 8107f4c:	6060      	str	r0, [r4, #4]
 8107f4e:	6863      	ldr	r3, [r4, #4]
 8107f50:	6123      	str	r3, [r4, #16]
 8107f52:	2300      	movs	r3, #0
 8107f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107f58:	e7a8      	b.n	8107eac <_printf_i+0x150>
 8107f5a:	6923      	ldr	r3, [r4, #16]
 8107f5c:	4632      	mov	r2, r6
 8107f5e:	4649      	mov	r1, r9
 8107f60:	4640      	mov	r0, r8
 8107f62:	47d0      	blx	sl
 8107f64:	3001      	adds	r0, #1
 8107f66:	d0ab      	beq.n	8107ec0 <_printf_i+0x164>
 8107f68:	6823      	ldr	r3, [r4, #0]
 8107f6a:	079b      	lsls	r3, r3, #30
 8107f6c:	d413      	bmi.n	8107f96 <_printf_i+0x23a>
 8107f6e:	68e0      	ldr	r0, [r4, #12]
 8107f70:	9b03      	ldr	r3, [sp, #12]
 8107f72:	4298      	cmp	r0, r3
 8107f74:	bfb8      	it	lt
 8107f76:	4618      	movlt	r0, r3
 8107f78:	e7a4      	b.n	8107ec4 <_printf_i+0x168>
 8107f7a:	2301      	movs	r3, #1
 8107f7c:	4632      	mov	r2, r6
 8107f7e:	4649      	mov	r1, r9
 8107f80:	4640      	mov	r0, r8
 8107f82:	47d0      	blx	sl
 8107f84:	3001      	adds	r0, #1
 8107f86:	d09b      	beq.n	8107ec0 <_printf_i+0x164>
 8107f88:	3501      	adds	r5, #1
 8107f8a:	68e3      	ldr	r3, [r4, #12]
 8107f8c:	9903      	ldr	r1, [sp, #12]
 8107f8e:	1a5b      	subs	r3, r3, r1
 8107f90:	42ab      	cmp	r3, r5
 8107f92:	dcf2      	bgt.n	8107f7a <_printf_i+0x21e>
 8107f94:	e7eb      	b.n	8107f6e <_printf_i+0x212>
 8107f96:	2500      	movs	r5, #0
 8107f98:	f104 0619 	add.w	r6, r4, #25
 8107f9c:	e7f5      	b.n	8107f8a <_printf_i+0x22e>
 8107f9e:	bf00      	nop
 8107fa0:	0810bd7b 	.word	0x0810bd7b
 8107fa4:	0810bd8c 	.word	0x0810bd8c

08107fa8 <_scanf_float>:
 8107fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107fac:	b087      	sub	sp, #28
 8107fae:	4617      	mov	r7, r2
 8107fb0:	9303      	str	r3, [sp, #12]
 8107fb2:	688b      	ldr	r3, [r1, #8]
 8107fb4:	1e5a      	subs	r2, r3, #1
 8107fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8107fba:	bf83      	ittte	hi
 8107fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8107fc0:	195b      	addhi	r3, r3, r5
 8107fc2:	9302      	strhi	r3, [sp, #8]
 8107fc4:	2300      	movls	r3, #0
 8107fc6:	bf86      	itte	hi
 8107fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8107fcc:	608b      	strhi	r3, [r1, #8]
 8107fce:	9302      	strls	r3, [sp, #8]
 8107fd0:	680b      	ldr	r3, [r1, #0]
 8107fd2:	468b      	mov	fp, r1
 8107fd4:	2500      	movs	r5, #0
 8107fd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8107fda:	f84b 3b1c 	str.w	r3, [fp], #28
 8107fde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8107fe2:	4680      	mov	r8, r0
 8107fe4:	460c      	mov	r4, r1
 8107fe6:	465e      	mov	r6, fp
 8107fe8:	46aa      	mov	sl, r5
 8107fea:	46a9      	mov	r9, r5
 8107fec:	9501      	str	r5, [sp, #4]
 8107fee:	68a2      	ldr	r2, [r4, #8]
 8107ff0:	b152      	cbz	r2, 8108008 <_scanf_float+0x60>
 8107ff2:	683b      	ldr	r3, [r7, #0]
 8107ff4:	781b      	ldrb	r3, [r3, #0]
 8107ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8107ff8:	d864      	bhi.n	81080c4 <_scanf_float+0x11c>
 8107ffa:	2b40      	cmp	r3, #64	; 0x40
 8107ffc:	d83c      	bhi.n	8108078 <_scanf_float+0xd0>
 8107ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108002:	b2c8      	uxtb	r0, r1
 8108004:	280e      	cmp	r0, #14
 8108006:	d93a      	bls.n	810807e <_scanf_float+0xd6>
 8108008:	f1b9 0f00 	cmp.w	r9, #0
 810800c:	d003      	beq.n	8108016 <_scanf_float+0x6e>
 810800e:	6823      	ldr	r3, [r4, #0]
 8108010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108014:	6023      	str	r3, [r4, #0]
 8108016:	f10a 3aff 	add.w	sl, sl, #4294967295
 810801a:	f1ba 0f01 	cmp.w	sl, #1
 810801e:	f200 8113 	bhi.w	8108248 <_scanf_float+0x2a0>
 8108022:	455e      	cmp	r6, fp
 8108024:	f200 8105 	bhi.w	8108232 <_scanf_float+0x28a>
 8108028:	2501      	movs	r5, #1
 810802a:	4628      	mov	r0, r5
 810802c:	b007      	add	sp, #28
 810802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8108036:	2a0d      	cmp	r2, #13
 8108038:	d8e6      	bhi.n	8108008 <_scanf_float+0x60>
 810803a:	a101      	add	r1, pc, #4	; (adr r1, 8108040 <_scanf_float+0x98>)
 810803c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8108040:	0810817f 	.word	0x0810817f
 8108044:	08108009 	.word	0x08108009
 8108048:	08108009 	.word	0x08108009
 810804c:	08108009 	.word	0x08108009
 8108050:	081081df 	.word	0x081081df
 8108054:	081081b7 	.word	0x081081b7
 8108058:	08108009 	.word	0x08108009
 810805c:	08108009 	.word	0x08108009
 8108060:	0810818d 	.word	0x0810818d
 8108064:	08108009 	.word	0x08108009
 8108068:	08108009 	.word	0x08108009
 810806c:	08108009 	.word	0x08108009
 8108070:	08108009 	.word	0x08108009
 8108074:	08108145 	.word	0x08108145
 8108078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810807c:	e7db      	b.n	8108036 <_scanf_float+0x8e>
 810807e:	290e      	cmp	r1, #14
 8108080:	d8c2      	bhi.n	8108008 <_scanf_float+0x60>
 8108082:	a001      	add	r0, pc, #4	; (adr r0, 8108088 <_scanf_float+0xe0>)
 8108084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108088:	08108137 	.word	0x08108137
 810808c:	08108009 	.word	0x08108009
 8108090:	08108137 	.word	0x08108137
 8108094:	081081cb 	.word	0x081081cb
 8108098:	08108009 	.word	0x08108009
 810809c:	081080e5 	.word	0x081080e5
 81080a0:	08108121 	.word	0x08108121
 81080a4:	08108121 	.word	0x08108121
 81080a8:	08108121 	.word	0x08108121
 81080ac:	08108121 	.word	0x08108121
 81080b0:	08108121 	.word	0x08108121
 81080b4:	08108121 	.word	0x08108121
 81080b8:	08108121 	.word	0x08108121
 81080bc:	08108121 	.word	0x08108121
 81080c0:	08108121 	.word	0x08108121
 81080c4:	2b6e      	cmp	r3, #110	; 0x6e
 81080c6:	d809      	bhi.n	81080dc <_scanf_float+0x134>
 81080c8:	2b60      	cmp	r3, #96	; 0x60
 81080ca:	d8b2      	bhi.n	8108032 <_scanf_float+0x8a>
 81080cc:	2b54      	cmp	r3, #84	; 0x54
 81080ce:	d077      	beq.n	81081c0 <_scanf_float+0x218>
 81080d0:	2b59      	cmp	r3, #89	; 0x59
 81080d2:	d199      	bne.n	8108008 <_scanf_float+0x60>
 81080d4:	2d07      	cmp	r5, #7
 81080d6:	d197      	bne.n	8108008 <_scanf_float+0x60>
 81080d8:	2508      	movs	r5, #8
 81080da:	e029      	b.n	8108130 <_scanf_float+0x188>
 81080dc:	2b74      	cmp	r3, #116	; 0x74
 81080de:	d06f      	beq.n	81081c0 <_scanf_float+0x218>
 81080e0:	2b79      	cmp	r3, #121	; 0x79
 81080e2:	e7f6      	b.n	81080d2 <_scanf_float+0x12a>
 81080e4:	6821      	ldr	r1, [r4, #0]
 81080e6:	05c8      	lsls	r0, r1, #23
 81080e8:	d51a      	bpl.n	8108120 <_scanf_float+0x178>
 81080ea:	9b02      	ldr	r3, [sp, #8]
 81080ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81080f0:	6021      	str	r1, [r4, #0]
 81080f2:	f109 0901 	add.w	r9, r9, #1
 81080f6:	b11b      	cbz	r3, 8108100 <_scanf_float+0x158>
 81080f8:	3b01      	subs	r3, #1
 81080fa:	3201      	adds	r2, #1
 81080fc:	9302      	str	r3, [sp, #8]
 81080fe:	60a2      	str	r2, [r4, #8]
 8108100:	68a3      	ldr	r3, [r4, #8]
 8108102:	3b01      	subs	r3, #1
 8108104:	60a3      	str	r3, [r4, #8]
 8108106:	6923      	ldr	r3, [r4, #16]
 8108108:	3301      	adds	r3, #1
 810810a:	6123      	str	r3, [r4, #16]
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	3b01      	subs	r3, #1
 8108110:	2b00      	cmp	r3, #0
 8108112:	607b      	str	r3, [r7, #4]
 8108114:	f340 8084 	ble.w	8108220 <_scanf_float+0x278>
 8108118:	683b      	ldr	r3, [r7, #0]
 810811a:	3301      	adds	r3, #1
 810811c:	603b      	str	r3, [r7, #0]
 810811e:	e766      	b.n	8107fee <_scanf_float+0x46>
 8108120:	eb1a 0f05 	cmn.w	sl, r5
 8108124:	f47f af70 	bne.w	8108008 <_scanf_float+0x60>
 8108128:	6822      	ldr	r2, [r4, #0]
 810812a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810812e:	6022      	str	r2, [r4, #0]
 8108130:	f806 3b01 	strb.w	r3, [r6], #1
 8108134:	e7e4      	b.n	8108100 <_scanf_float+0x158>
 8108136:	6822      	ldr	r2, [r4, #0]
 8108138:	0610      	lsls	r0, r2, #24
 810813a:	f57f af65 	bpl.w	8108008 <_scanf_float+0x60>
 810813e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8108142:	e7f4      	b.n	810812e <_scanf_float+0x186>
 8108144:	f1ba 0f00 	cmp.w	sl, #0
 8108148:	d10e      	bne.n	8108168 <_scanf_float+0x1c0>
 810814a:	f1b9 0f00 	cmp.w	r9, #0
 810814e:	d10e      	bne.n	810816e <_scanf_float+0x1c6>
 8108150:	6822      	ldr	r2, [r4, #0]
 8108152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810815a:	d108      	bne.n	810816e <_scanf_float+0x1c6>
 810815c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108160:	6022      	str	r2, [r4, #0]
 8108162:	f04f 0a01 	mov.w	sl, #1
 8108166:	e7e3      	b.n	8108130 <_scanf_float+0x188>
 8108168:	f1ba 0f02 	cmp.w	sl, #2
 810816c:	d055      	beq.n	810821a <_scanf_float+0x272>
 810816e:	2d01      	cmp	r5, #1
 8108170:	d002      	beq.n	8108178 <_scanf_float+0x1d0>
 8108172:	2d04      	cmp	r5, #4
 8108174:	f47f af48 	bne.w	8108008 <_scanf_float+0x60>
 8108178:	3501      	adds	r5, #1
 810817a:	b2ed      	uxtb	r5, r5
 810817c:	e7d8      	b.n	8108130 <_scanf_float+0x188>
 810817e:	f1ba 0f01 	cmp.w	sl, #1
 8108182:	f47f af41 	bne.w	8108008 <_scanf_float+0x60>
 8108186:	f04f 0a02 	mov.w	sl, #2
 810818a:	e7d1      	b.n	8108130 <_scanf_float+0x188>
 810818c:	b97d      	cbnz	r5, 81081ae <_scanf_float+0x206>
 810818e:	f1b9 0f00 	cmp.w	r9, #0
 8108192:	f47f af3c 	bne.w	810800e <_scanf_float+0x66>
 8108196:	6822      	ldr	r2, [r4, #0]
 8108198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810819c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81081a0:	f47f af39 	bne.w	8108016 <_scanf_float+0x6e>
 81081a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81081a8:	6022      	str	r2, [r4, #0]
 81081aa:	2501      	movs	r5, #1
 81081ac:	e7c0      	b.n	8108130 <_scanf_float+0x188>
 81081ae:	2d03      	cmp	r5, #3
 81081b0:	d0e2      	beq.n	8108178 <_scanf_float+0x1d0>
 81081b2:	2d05      	cmp	r5, #5
 81081b4:	e7de      	b.n	8108174 <_scanf_float+0x1cc>
 81081b6:	2d02      	cmp	r5, #2
 81081b8:	f47f af26 	bne.w	8108008 <_scanf_float+0x60>
 81081bc:	2503      	movs	r5, #3
 81081be:	e7b7      	b.n	8108130 <_scanf_float+0x188>
 81081c0:	2d06      	cmp	r5, #6
 81081c2:	f47f af21 	bne.w	8108008 <_scanf_float+0x60>
 81081c6:	2507      	movs	r5, #7
 81081c8:	e7b2      	b.n	8108130 <_scanf_float+0x188>
 81081ca:	6822      	ldr	r2, [r4, #0]
 81081cc:	0591      	lsls	r1, r2, #22
 81081ce:	f57f af1b 	bpl.w	8108008 <_scanf_float+0x60>
 81081d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81081d6:	6022      	str	r2, [r4, #0]
 81081d8:	f8cd 9004 	str.w	r9, [sp, #4]
 81081dc:	e7a8      	b.n	8108130 <_scanf_float+0x188>
 81081de:	6822      	ldr	r2, [r4, #0]
 81081e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81081e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81081e8:	d006      	beq.n	81081f8 <_scanf_float+0x250>
 81081ea:	0550      	lsls	r0, r2, #21
 81081ec:	f57f af0c 	bpl.w	8108008 <_scanf_float+0x60>
 81081f0:	f1b9 0f00 	cmp.w	r9, #0
 81081f4:	f43f af0f 	beq.w	8108016 <_scanf_float+0x6e>
 81081f8:	0591      	lsls	r1, r2, #22
 81081fa:	bf58      	it	pl
 81081fc:	9901      	ldrpl	r1, [sp, #4]
 81081fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108202:	bf58      	it	pl
 8108204:	eba9 0101 	subpl.w	r1, r9, r1
 8108208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810820c:	bf58      	it	pl
 810820e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8108212:	6022      	str	r2, [r4, #0]
 8108214:	f04f 0900 	mov.w	r9, #0
 8108218:	e78a      	b.n	8108130 <_scanf_float+0x188>
 810821a:	f04f 0a03 	mov.w	sl, #3
 810821e:	e787      	b.n	8108130 <_scanf_float+0x188>
 8108220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8108224:	4639      	mov	r1, r7
 8108226:	4640      	mov	r0, r8
 8108228:	4798      	blx	r3
 810822a:	2800      	cmp	r0, #0
 810822c:	f43f aedf 	beq.w	8107fee <_scanf_float+0x46>
 8108230:	e6ea      	b.n	8108008 <_scanf_float+0x60>
 8108232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810823a:	463a      	mov	r2, r7
 810823c:	4640      	mov	r0, r8
 810823e:	4798      	blx	r3
 8108240:	6923      	ldr	r3, [r4, #16]
 8108242:	3b01      	subs	r3, #1
 8108244:	6123      	str	r3, [r4, #16]
 8108246:	e6ec      	b.n	8108022 <_scanf_float+0x7a>
 8108248:	1e6b      	subs	r3, r5, #1
 810824a:	2b06      	cmp	r3, #6
 810824c:	d825      	bhi.n	810829a <_scanf_float+0x2f2>
 810824e:	2d02      	cmp	r5, #2
 8108250:	d836      	bhi.n	81082c0 <_scanf_float+0x318>
 8108252:	455e      	cmp	r6, fp
 8108254:	f67f aee8 	bls.w	8108028 <_scanf_float+0x80>
 8108258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810825c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108260:	463a      	mov	r2, r7
 8108262:	4640      	mov	r0, r8
 8108264:	4798      	blx	r3
 8108266:	6923      	ldr	r3, [r4, #16]
 8108268:	3b01      	subs	r3, #1
 810826a:	6123      	str	r3, [r4, #16]
 810826c:	e7f1      	b.n	8108252 <_scanf_float+0x2aa>
 810826e:	9802      	ldr	r0, [sp, #8]
 8108270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8108278:	9002      	str	r0, [sp, #8]
 810827a:	463a      	mov	r2, r7
 810827c:	4640      	mov	r0, r8
 810827e:	4798      	blx	r3
 8108280:	6923      	ldr	r3, [r4, #16]
 8108282:	3b01      	subs	r3, #1
 8108284:	6123      	str	r3, [r4, #16]
 8108286:	f10a 3aff 	add.w	sl, sl, #4294967295
 810828a:	fa5f fa8a 	uxtb.w	sl, sl
 810828e:	f1ba 0f02 	cmp.w	sl, #2
 8108292:	d1ec      	bne.n	810826e <_scanf_float+0x2c6>
 8108294:	3d03      	subs	r5, #3
 8108296:	b2ed      	uxtb	r5, r5
 8108298:	1b76      	subs	r6, r6, r5
 810829a:	6823      	ldr	r3, [r4, #0]
 810829c:	05da      	lsls	r2, r3, #23
 810829e:	d52f      	bpl.n	8108300 <_scanf_float+0x358>
 81082a0:	055b      	lsls	r3, r3, #21
 81082a2:	d510      	bpl.n	81082c6 <_scanf_float+0x31e>
 81082a4:	455e      	cmp	r6, fp
 81082a6:	f67f aebf 	bls.w	8108028 <_scanf_float+0x80>
 81082aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81082b2:	463a      	mov	r2, r7
 81082b4:	4640      	mov	r0, r8
 81082b6:	4798      	blx	r3
 81082b8:	6923      	ldr	r3, [r4, #16]
 81082ba:	3b01      	subs	r3, #1
 81082bc:	6123      	str	r3, [r4, #16]
 81082be:	e7f1      	b.n	81082a4 <_scanf_float+0x2fc>
 81082c0:	46aa      	mov	sl, r5
 81082c2:	9602      	str	r6, [sp, #8]
 81082c4:	e7df      	b.n	8108286 <_scanf_float+0x2de>
 81082c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81082ca:	6923      	ldr	r3, [r4, #16]
 81082cc:	2965      	cmp	r1, #101	; 0x65
 81082ce:	f103 33ff 	add.w	r3, r3, #4294967295
 81082d2:	f106 35ff 	add.w	r5, r6, #4294967295
 81082d6:	6123      	str	r3, [r4, #16]
 81082d8:	d00c      	beq.n	81082f4 <_scanf_float+0x34c>
 81082da:	2945      	cmp	r1, #69	; 0x45
 81082dc:	d00a      	beq.n	81082f4 <_scanf_float+0x34c>
 81082de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082e2:	463a      	mov	r2, r7
 81082e4:	4640      	mov	r0, r8
 81082e6:	4798      	blx	r3
 81082e8:	6923      	ldr	r3, [r4, #16]
 81082ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81082ee:	3b01      	subs	r3, #1
 81082f0:	1eb5      	subs	r5, r6, #2
 81082f2:	6123      	str	r3, [r4, #16]
 81082f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082f8:	463a      	mov	r2, r7
 81082fa:	4640      	mov	r0, r8
 81082fc:	4798      	blx	r3
 81082fe:	462e      	mov	r6, r5
 8108300:	6825      	ldr	r5, [r4, #0]
 8108302:	f015 0510 	ands.w	r5, r5, #16
 8108306:	d158      	bne.n	81083ba <_scanf_float+0x412>
 8108308:	7035      	strb	r5, [r6, #0]
 810830a:	6823      	ldr	r3, [r4, #0]
 810830c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8108310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108314:	d11c      	bne.n	8108350 <_scanf_float+0x3a8>
 8108316:	9b01      	ldr	r3, [sp, #4]
 8108318:	454b      	cmp	r3, r9
 810831a:	eba3 0209 	sub.w	r2, r3, r9
 810831e:	d124      	bne.n	810836a <_scanf_float+0x3c2>
 8108320:	2200      	movs	r2, #0
 8108322:	4659      	mov	r1, fp
 8108324:	4640      	mov	r0, r8
 8108326:	f000 fed1 	bl	81090cc <_strtod_r>
 810832a:	9b03      	ldr	r3, [sp, #12]
 810832c:	6821      	ldr	r1, [r4, #0]
 810832e:	681b      	ldr	r3, [r3, #0]
 8108330:	f011 0f02 	tst.w	r1, #2
 8108334:	ec57 6b10 	vmov	r6, r7, d0
 8108338:	f103 0204 	add.w	r2, r3, #4
 810833c:	d020      	beq.n	8108380 <_scanf_float+0x3d8>
 810833e:	9903      	ldr	r1, [sp, #12]
 8108340:	600a      	str	r2, [r1, #0]
 8108342:	681b      	ldr	r3, [r3, #0]
 8108344:	e9c3 6700 	strd	r6, r7, [r3]
 8108348:	68e3      	ldr	r3, [r4, #12]
 810834a:	3301      	adds	r3, #1
 810834c:	60e3      	str	r3, [r4, #12]
 810834e:	e66c      	b.n	810802a <_scanf_float+0x82>
 8108350:	9b04      	ldr	r3, [sp, #16]
 8108352:	2b00      	cmp	r3, #0
 8108354:	d0e4      	beq.n	8108320 <_scanf_float+0x378>
 8108356:	9905      	ldr	r1, [sp, #20]
 8108358:	230a      	movs	r3, #10
 810835a:	462a      	mov	r2, r5
 810835c:	3101      	adds	r1, #1
 810835e:	4640      	mov	r0, r8
 8108360:	f000 ff3e 	bl	81091e0 <_strtol_r>
 8108364:	9b04      	ldr	r3, [sp, #16]
 8108366:	9e05      	ldr	r6, [sp, #20]
 8108368:	1ac2      	subs	r2, r0, r3
 810836a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810836e:	429e      	cmp	r6, r3
 8108370:	bf28      	it	cs
 8108372:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8108376:	4912      	ldr	r1, [pc, #72]	; (81083c0 <_scanf_float+0x418>)
 8108378:	4630      	mov	r0, r6
 810837a:	f000 f83b 	bl	81083f4 <siprintf>
 810837e:	e7cf      	b.n	8108320 <_scanf_float+0x378>
 8108380:	f011 0f04 	tst.w	r1, #4
 8108384:	9903      	ldr	r1, [sp, #12]
 8108386:	600a      	str	r2, [r1, #0]
 8108388:	d1db      	bne.n	8108342 <_scanf_float+0x39a>
 810838a:	f8d3 8000 	ldr.w	r8, [r3]
 810838e:	ee10 2a10 	vmov	r2, s0
 8108392:	ee10 0a10 	vmov	r0, s0
 8108396:	463b      	mov	r3, r7
 8108398:	4639      	mov	r1, r7
 810839a:	f7f8 fc5f 	bl	8100c5c <__aeabi_dcmpun>
 810839e:	b128      	cbz	r0, 81083ac <_scanf_float+0x404>
 81083a0:	4808      	ldr	r0, [pc, #32]	; (81083c4 <_scanf_float+0x41c>)
 81083a2:	f000 f821 	bl	81083e8 <nanf>
 81083a6:	ed88 0a00 	vstr	s0, [r8]
 81083aa:	e7cd      	b.n	8108348 <_scanf_float+0x3a0>
 81083ac:	4630      	mov	r0, r6
 81083ae:	4639      	mov	r1, r7
 81083b0:	f7f8 fcb2 	bl	8100d18 <__aeabi_d2f>
 81083b4:	f8c8 0000 	str.w	r0, [r8]
 81083b8:	e7c6      	b.n	8108348 <_scanf_float+0x3a0>
 81083ba:	2500      	movs	r5, #0
 81083bc:	e635      	b.n	810802a <_scanf_float+0x82>
 81083be:	bf00      	nop
 81083c0:	0810bd9d 	.word	0x0810bd9d
 81083c4:	0810bd51 	.word	0x0810bd51

081083c8 <_sbrk_r>:
 81083c8:	b538      	push	{r3, r4, r5, lr}
 81083ca:	4d06      	ldr	r5, [pc, #24]	; (81083e4 <_sbrk_r+0x1c>)
 81083cc:	2300      	movs	r3, #0
 81083ce:	4604      	mov	r4, r0
 81083d0:	4608      	mov	r0, r1
 81083d2:	602b      	str	r3, [r5, #0]
 81083d4:	f7f9 f958 	bl	8101688 <_sbrk>
 81083d8:	1c43      	adds	r3, r0, #1
 81083da:	d102      	bne.n	81083e2 <_sbrk_r+0x1a>
 81083dc:	682b      	ldr	r3, [r5, #0]
 81083de:	b103      	cbz	r3, 81083e2 <_sbrk_r+0x1a>
 81083e0:	6023      	str	r3, [r4, #0]
 81083e2:	bd38      	pop	{r3, r4, r5, pc}
 81083e4:	10000508 	.word	0x10000508

081083e8 <nanf>:
 81083e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 81083f0 <nanf+0x8>
 81083ec:	4770      	bx	lr
 81083ee:	bf00      	nop
 81083f0:	7fc00000 	.word	0x7fc00000

081083f4 <siprintf>:
 81083f4:	b40e      	push	{r1, r2, r3}
 81083f6:	b500      	push	{lr}
 81083f8:	b09c      	sub	sp, #112	; 0x70
 81083fa:	ab1d      	add	r3, sp, #116	; 0x74
 81083fc:	9002      	str	r0, [sp, #8]
 81083fe:	9006      	str	r0, [sp, #24]
 8108400:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108404:	4809      	ldr	r0, [pc, #36]	; (810842c <siprintf+0x38>)
 8108406:	9107      	str	r1, [sp, #28]
 8108408:	9104      	str	r1, [sp, #16]
 810840a:	4909      	ldr	r1, [pc, #36]	; (8108430 <siprintf+0x3c>)
 810840c:	f853 2b04 	ldr.w	r2, [r3], #4
 8108410:	9105      	str	r1, [sp, #20]
 8108412:	6800      	ldr	r0, [r0, #0]
 8108414:	9301      	str	r3, [sp, #4]
 8108416:	a902      	add	r1, sp, #8
 8108418:	f003 f938 	bl	810b68c <_svfiprintf_r>
 810841c:	9b02      	ldr	r3, [sp, #8]
 810841e:	2200      	movs	r2, #0
 8108420:	701a      	strb	r2, [r3, #0]
 8108422:	b01c      	add	sp, #112	; 0x70
 8108424:	f85d eb04 	ldr.w	lr, [sp], #4
 8108428:	b003      	add	sp, #12
 810842a:	4770      	bx	lr
 810842c:	100000b8 	.word	0x100000b8
 8108430:	ffff0208 	.word	0xffff0208

08108434 <strncmp>:
 8108434:	b510      	push	{r4, lr}
 8108436:	b16a      	cbz	r2, 8108454 <strncmp+0x20>
 8108438:	3901      	subs	r1, #1
 810843a:	1884      	adds	r4, r0, r2
 810843c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8108440:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8108444:	4293      	cmp	r3, r2
 8108446:	d103      	bne.n	8108450 <strncmp+0x1c>
 8108448:	42a0      	cmp	r0, r4
 810844a:	d001      	beq.n	8108450 <strncmp+0x1c>
 810844c:	2b00      	cmp	r3, #0
 810844e:	d1f5      	bne.n	810843c <strncmp+0x8>
 8108450:	1a98      	subs	r0, r3, r2
 8108452:	bd10      	pop	{r4, pc}
 8108454:	4610      	mov	r0, r2
 8108456:	e7fc      	b.n	8108452 <strncmp+0x1e>

08108458 <strncpy>:
 8108458:	b510      	push	{r4, lr}
 810845a:	3901      	subs	r1, #1
 810845c:	4603      	mov	r3, r0
 810845e:	b132      	cbz	r2, 810846e <strncpy+0x16>
 8108460:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8108464:	f803 4b01 	strb.w	r4, [r3], #1
 8108468:	3a01      	subs	r2, #1
 810846a:	2c00      	cmp	r4, #0
 810846c:	d1f7      	bne.n	810845e <strncpy+0x6>
 810846e:	441a      	add	r2, r3
 8108470:	2100      	movs	r1, #0
 8108472:	4293      	cmp	r3, r2
 8108474:	d100      	bne.n	8108478 <strncpy+0x20>
 8108476:	bd10      	pop	{r4, pc}
 8108478:	f803 1b01 	strb.w	r1, [r3], #1
 810847c:	e7f9      	b.n	8108472 <strncpy+0x1a>

0810847e <sulp>:
 810847e:	b570      	push	{r4, r5, r6, lr}
 8108480:	4604      	mov	r4, r0
 8108482:	460d      	mov	r5, r1
 8108484:	ec45 4b10 	vmov	d0, r4, r5
 8108488:	4616      	mov	r6, r2
 810848a:	f002 ff1f 	bl	810b2cc <__ulp>
 810848e:	ec51 0b10 	vmov	r0, r1, d0
 8108492:	b17e      	cbz	r6, 81084b4 <sulp+0x36>
 8108494:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8108498:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810849c:	2b00      	cmp	r3, #0
 810849e:	dd09      	ble.n	81084b4 <sulp+0x36>
 81084a0:	051b      	lsls	r3, r3, #20
 81084a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 81084a6:	2400      	movs	r4, #0
 81084a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 81084ac:	4622      	mov	r2, r4
 81084ae:	462b      	mov	r3, r5
 81084b0:	f7f8 f93a 	bl	8100728 <__aeabi_dmul>
 81084b4:	bd70      	pop	{r4, r5, r6, pc}
	...

081084b8 <_strtod_l>:
 81084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81084bc:	b0a3      	sub	sp, #140	; 0x8c
 81084be:	461f      	mov	r7, r3
 81084c0:	2300      	movs	r3, #0
 81084c2:	931e      	str	r3, [sp, #120]	; 0x78
 81084c4:	4ba4      	ldr	r3, [pc, #656]	; (8108758 <_strtod_l+0x2a0>)
 81084c6:	9219      	str	r2, [sp, #100]	; 0x64
 81084c8:	681b      	ldr	r3, [r3, #0]
 81084ca:	9307      	str	r3, [sp, #28]
 81084cc:	4604      	mov	r4, r0
 81084ce:	4618      	mov	r0, r3
 81084d0:	4688      	mov	r8, r1
 81084d2:	f7f7 ff0f 	bl	81002f4 <strlen>
 81084d6:	f04f 0a00 	mov.w	sl, #0
 81084da:	4605      	mov	r5, r0
 81084dc:	f04f 0b00 	mov.w	fp, #0
 81084e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81084e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81084e6:	781a      	ldrb	r2, [r3, #0]
 81084e8:	2a2b      	cmp	r2, #43	; 0x2b
 81084ea:	d04c      	beq.n	8108586 <_strtod_l+0xce>
 81084ec:	d839      	bhi.n	8108562 <_strtod_l+0xaa>
 81084ee:	2a0d      	cmp	r2, #13
 81084f0:	d832      	bhi.n	8108558 <_strtod_l+0xa0>
 81084f2:	2a08      	cmp	r2, #8
 81084f4:	d832      	bhi.n	810855c <_strtod_l+0xa4>
 81084f6:	2a00      	cmp	r2, #0
 81084f8:	d03c      	beq.n	8108574 <_strtod_l+0xbc>
 81084fa:	2300      	movs	r3, #0
 81084fc:	930e      	str	r3, [sp, #56]	; 0x38
 81084fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8108500:	7833      	ldrb	r3, [r6, #0]
 8108502:	2b30      	cmp	r3, #48	; 0x30
 8108504:	f040 80b4 	bne.w	8108670 <_strtod_l+0x1b8>
 8108508:	7873      	ldrb	r3, [r6, #1]
 810850a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810850e:	2b58      	cmp	r3, #88	; 0x58
 8108510:	d16c      	bne.n	81085ec <_strtod_l+0x134>
 8108512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108514:	9301      	str	r3, [sp, #4]
 8108516:	ab1e      	add	r3, sp, #120	; 0x78
 8108518:	9702      	str	r7, [sp, #8]
 810851a:	9300      	str	r3, [sp, #0]
 810851c:	4a8f      	ldr	r2, [pc, #572]	; (810875c <_strtod_l+0x2a4>)
 810851e:	ab1f      	add	r3, sp, #124	; 0x7c
 8108520:	a91d      	add	r1, sp, #116	; 0x74
 8108522:	4620      	mov	r0, r4
 8108524:	f001 ffba 	bl	810a49c <__gethex>
 8108528:	f010 0707 	ands.w	r7, r0, #7
 810852c:	4605      	mov	r5, r0
 810852e:	d005      	beq.n	810853c <_strtod_l+0x84>
 8108530:	2f06      	cmp	r7, #6
 8108532:	d12a      	bne.n	810858a <_strtod_l+0xd2>
 8108534:	3601      	adds	r6, #1
 8108536:	2300      	movs	r3, #0
 8108538:	961d      	str	r6, [sp, #116]	; 0x74
 810853a:	930e      	str	r3, [sp, #56]	; 0x38
 810853c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810853e:	2b00      	cmp	r3, #0
 8108540:	f040 8596 	bne.w	8109070 <_strtod_l+0xbb8>
 8108544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108546:	b1db      	cbz	r3, 8108580 <_strtod_l+0xc8>
 8108548:	4652      	mov	r2, sl
 810854a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810854e:	ec43 2b10 	vmov	d0, r2, r3
 8108552:	b023      	add	sp, #140	; 0x8c
 8108554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108558:	2a20      	cmp	r2, #32
 810855a:	d1ce      	bne.n	81084fa <_strtod_l+0x42>
 810855c:	3301      	adds	r3, #1
 810855e:	931d      	str	r3, [sp, #116]	; 0x74
 8108560:	e7c0      	b.n	81084e4 <_strtod_l+0x2c>
 8108562:	2a2d      	cmp	r2, #45	; 0x2d
 8108564:	d1c9      	bne.n	81084fa <_strtod_l+0x42>
 8108566:	2201      	movs	r2, #1
 8108568:	920e      	str	r2, [sp, #56]	; 0x38
 810856a:	1c5a      	adds	r2, r3, #1
 810856c:	921d      	str	r2, [sp, #116]	; 0x74
 810856e:	785b      	ldrb	r3, [r3, #1]
 8108570:	2b00      	cmp	r3, #0
 8108572:	d1c4      	bne.n	81084fe <_strtod_l+0x46>
 8108574:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108576:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810857a:	2b00      	cmp	r3, #0
 810857c:	f040 8576 	bne.w	810906c <_strtod_l+0xbb4>
 8108580:	4652      	mov	r2, sl
 8108582:	465b      	mov	r3, fp
 8108584:	e7e3      	b.n	810854e <_strtod_l+0x96>
 8108586:	2200      	movs	r2, #0
 8108588:	e7ee      	b.n	8108568 <_strtod_l+0xb0>
 810858a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810858c:	b13a      	cbz	r2, 810859e <_strtod_l+0xe6>
 810858e:	2135      	movs	r1, #53	; 0x35
 8108590:	a820      	add	r0, sp, #128	; 0x80
 8108592:	f002 ffa6 	bl	810b4e2 <__copybits>
 8108596:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108598:	4620      	mov	r0, r4
 810859a:	f002 fb6b 	bl	810ac74 <_Bfree>
 810859e:	3f01      	subs	r7, #1
 81085a0:	2f05      	cmp	r7, #5
 81085a2:	d807      	bhi.n	81085b4 <_strtod_l+0xfc>
 81085a4:	e8df f007 	tbb	[pc, r7]
 81085a8:	1d180b0e 	.word	0x1d180b0e
 81085ac:	030e      	.short	0x030e
 81085ae:	f04f 0b00 	mov.w	fp, #0
 81085b2:	46da      	mov	sl, fp
 81085b4:	0728      	lsls	r0, r5, #28
 81085b6:	d5c1      	bpl.n	810853c <_strtod_l+0x84>
 81085b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 81085bc:	e7be      	b.n	810853c <_strtod_l+0x84>
 81085be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 81085c2:	e7f7      	b.n	81085b4 <_strtod_l+0xfc>
 81085c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 81085c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 81085ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81085ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 81085d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 81085d6:	e7ed      	b.n	81085b4 <_strtod_l+0xfc>
 81085d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8108760 <_strtod_l+0x2a8>
 81085dc:	f04f 0a00 	mov.w	sl, #0
 81085e0:	e7e8      	b.n	81085b4 <_strtod_l+0xfc>
 81085e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 81085e6:	f04f 3aff 	mov.w	sl, #4294967295
 81085ea:	e7e3      	b.n	81085b4 <_strtod_l+0xfc>
 81085ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81085ee:	1c5a      	adds	r2, r3, #1
 81085f0:	921d      	str	r2, [sp, #116]	; 0x74
 81085f2:	785b      	ldrb	r3, [r3, #1]
 81085f4:	2b30      	cmp	r3, #48	; 0x30
 81085f6:	d0f9      	beq.n	81085ec <_strtod_l+0x134>
 81085f8:	2b00      	cmp	r3, #0
 81085fa:	d09f      	beq.n	810853c <_strtod_l+0x84>
 81085fc:	2301      	movs	r3, #1
 81085fe:	f04f 0900 	mov.w	r9, #0
 8108602:	9304      	str	r3, [sp, #16]
 8108604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108606:	930a      	str	r3, [sp, #40]	; 0x28
 8108608:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810860c:	464f      	mov	r7, r9
 810860e:	220a      	movs	r2, #10
 8108610:	981d      	ldr	r0, [sp, #116]	; 0x74
 8108612:	7806      	ldrb	r6, [r0, #0]
 8108614:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8108618:	b2d9      	uxtb	r1, r3
 810861a:	2909      	cmp	r1, #9
 810861c:	d92a      	bls.n	8108674 <_strtod_l+0x1bc>
 810861e:	9907      	ldr	r1, [sp, #28]
 8108620:	462a      	mov	r2, r5
 8108622:	f7ff ff07 	bl	8108434 <strncmp>
 8108626:	b398      	cbz	r0, 8108690 <_strtod_l+0x1d8>
 8108628:	2000      	movs	r0, #0
 810862a:	4633      	mov	r3, r6
 810862c:	463d      	mov	r5, r7
 810862e:	9007      	str	r0, [sp, #28]
 8108630:	4602      	mov	r2, r0
 8108632:	2b65      	cmp	r3, #101	; 0x65
 8108634:	d001      	beq.n	810863a <_strtod_l+0x182>
 8108636:	2b45      	cmp	r3, #69	; 0x45
 8108638:	d118      	bne.n	810866c <_strtod_l+0x1b4>
 810863a:	b91d      	cbnz	r5, 8108644 <_strtod_l+0x18c>
 810863c:	9b04      	ldr	r3, [sp, #16]
 810863e:	4303      	orrs	r3, r0
 8108640:	d098      	beq.n	8108574 <_strtod_l+0xbc>
 8108642:	2500      	movs	r5, #0
 8108644:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8108648:	f108 0301 	add.w	r3, r8, #1
 810864c:	931d      	str	r3, [sp, #116]	; 0x74
 810864e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8108652:	2b2b      	cmp	r3, #43	; 0x2b
 8108654:	d075      	beq.n	8108742 <_strtod_l+0x28a>
 8108656:	2b2d      	cmp	r3, #45	; 0x2d
 8108658:	d07b      	beq.n	8108752 <_strtod_l+0x29a>
 810865a:	f04f 0c00 	mov.w	ip, #0
 810865e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8108662:	2909      	cmp	r1, #9
 8108664:	f240 8082 	bls.w	810876c <_strtod_l+0x2b4>
 8108668:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810866c:	2600      	movs	r6, #0
 810866e:	e09d      	b.n	81087ac <_strtod_l+0x2f4>
 8108670:	2300      	movs	r3, #0
 8108672:	e7c4      	b.n	81085fe <_strtod_l+0x146>
 8108674:	2f08      	cmp	r7, #8
 8108676:	bfd8      	it	le
 8108678:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810867a:	f100 0001 	add.w	r0, r0, #1
 810867e:	bfda      	itte	le
 8108680:	fb02 3301 	mlale	r3, r2, r1, r3
 8108684:	9309      	strle	r3, [sp, #36]	; 0x24
 8108686:	fb02 3909 	mlagt	r9, r2, r9, r3
 810868a:	3701      	adds	r7, #1
 810868c:	901d      	str	r0, [sp, #116]	; 0x74
 810868e:	e7bf      	b.n	8108610 <_strtod_l+0x158>
 8108690:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108692:	195a      	adds	r2, r3, r5
 8108694:	921d      	str	r2, [sp, #116]	; 0x74
 8108696:	5d5b      	ldrb	r3, [r3, r5]
 8108698:	2f00      	cmp	r7, #0
 810869a:	d037      	beq.n	810870c <_strtod_l+0x254>
 810869c:	9007      	str	r0, [sp, #28]
 810869e:	463d      	mov	r5, r7
 81086a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 81086a4:	2a09      	cmp	r2, #9
 81086a6:	d912      	bls.n	81086ce <_strtod_l+0x216>
 81086a8:	2201      	movs	r2, #1
 81086aa:	e7c2      	b.n	8108632 <_strtod_l+0x17a>
 81086ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81086ae:	1c5a      	adds	r2, r3, #1
 81086b0:	921d      	str	r2, [sp, #116]	; 0x74
 81086b2:	785b      	ldrb	r3, [r3, #1]
 81086b4:	3001      	adds	r0, #1
 81086b6:	2b30      	cmp	r3, #48	; 0x30
 81086b8:	d0f8      	beq.n	81086ac <_strtod_l+0x1f4>
 81086ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 81086be:	2a08      	cmp	r2, #8
 81086c0:	f200 84db 	bhi.w	810907a <_strtod_l+0xbc2>
 81086c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 81086c6:	9007      	str	r0, [sp, #28]
 81086c8:	2000      	movs	r0, #0
 81086ca:	920a      	str	r2, [sp, #40]	; 0x28
 81086cc:	4605      	mov	r5, r0
 81086ce:	3b30      	subs	r3, #48	; 0x30
 81086d0:	f100 0201 	add.w	r2, r0, #1
 81086d4:	d014      	beq.n	8108700 <_strtod_l+0x248>
 81086d6:	9907      	ldr	r1, [sp, #28]
 81086d8:	4411      	add	r1, r2
 81086da:	9107      	str	r1, [sp, #28]
 81086dc:	462a      	mov	r2, r5
 81086de:	eb00 0e05 	add.w	lr, r0, r5
 81086e2:	210a      	movs	r1, #10
 81086e4:	4572      	cmp	r2, lr
 81086e6:	d113      	bne.n	8108710 <_strtod_l+0x258>
 81086e8:	182a      	adds	r2, r5, r0
 81086ea:	2a08      	cmp	r2, #8
 81086ec:	f105 0501 	add.w	r5, r5, #1
 81086f0:	4405      	add	r5, r0
 81086f2:	dc1c      	bgt.n	810872e <_strtod_l+0x276>
 81086f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 81086f6:	220a      	movs	r2, #10
 81086f8:	fb02 3301 	mla	r3, r2, r1, r3
 81086fc:	9309      	str	r3, [sp, #36]	; 0x24
 81086fe:	2200      	movs	r2, #0
 8108700:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108702:	1c59      	adds	r1, r3, #1
 8108704:	911d      	str	r1, [sp, #116]	; 0x74
 8108706:	785b      	ldrb	r3, [r3, #1]
 8108708:	4610      	mov	r0, r2
 810870a:	e7c9      	b.n	81086a0 <_strtod_l+0x1e8>
 810870c:	4638      	mov	r0, r7
 810870e:	e7d2      	b.n	81086b6 <_strtod_l+0x1fe>
 8108710:	2a08      	cmp	r2, #8
 8108712:	dc04      	bgt.n	810871e <_strtod_l+0x266>
 8108714:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8108716:	434e      	muls	r6, r1
 8108718:	9609      	str	r6, [sp, #36]	; 0x24
 810871a:	3201      	adds	r2, #1
 810871c:	e7e2      	b.n	81086e4 <_strtod_l+0x22c>
 810871e:	f102 0c01 	add.w	ip, r2, #1
 8108722:	f1bc 0f10 	cmp.w	ip, #16
 8108726:	bfd8      	it	le
 8108728:	fb01 f909 	mulle.w	r9, r1, r9
 810872c:	e7f5      	b.n	810871a <_strtod_l+0x262>
 810872e:	2d10      	cmp	r5, #16
 8108730:	bfdc      	itt	le
 8108732:	220a      	movle	r2, #10
 8108734:	fb02 3909 	mlale	r9, r2, r9, r3
 8108738:	e7e1      	b.n	81086fe <_strtod_l+0x246>
 810873a:	2300      	movs	r3, #0
 810873c:	9307      	str	r3, [sp, #28]
 810873e:	2201      	movs	r2, #1
 8108740:	e77c      	b.n	810863c <_strtod_l+0x184>
 8108742:	f04f 0c00 	mov.w	ip, #0
 8108746:	f108 0302 	add.w	r3, r8, #2
 810874a:	931d      	str	r3, [sp, #116]	; 0x74
 810874c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8108750:	e785      	b.n	810865e <_strtod_l+0x1a6>
 8108752:	f04f 0c01 	mov.w	ip, #1
 8108756:	e7f6      	b.n	8108746 <_strtod_l+0x28e>
 8108758:	0810c05c 	.word	0x0810c05c
 810875c:	0810bda4 	.word	0x0810bda4
 8108760:	7ff00000 	.word	0x7ff00000
 8108764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108766:	1c59      	adds	r1, r3, #1
 8108768:	911d      	str	r1, [sp, #116]	; 0x74
 810876a:	785b      	ldrb	r3, [r3, #1]
 810876c:	2b30      	cmp	r3, #48	; 0x30
 810876e:	d0f9      	beq.n	8108764 <_strtod_l+0x2ac>
 8108770:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8108774:	2908      	cmp	r1, #8
 8108776:	f63f af79 	bhi.w	810866c <_strtod_l+0x1b4>
 810877a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 810877e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108780:	9308      	str	r3, [sp, #32]
 8108782:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108784:	1c59      	adds	r1, r3, #1
 8108786:	911d      	str	r1, [sp, #116]	; 0x74
 8108788:	785b      	ldrb	r3, [r3, #1]
 810878a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 810878e:	2e09      	cmp	r6, #9
 8108790:	d937      	bls.n	8108802 <_strtod_l+0x34a>
 8108792:	9e08      	ldr	r6, [sp, #32]
 8108794:	1b89      	subs	r1, r1, r6
 8108796:	2908      	cmp	r1, #8
 8108798:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810879c:	dc02      	bgt.n	81087a4 <_strtod_l+0x2ec>
 810879e:	4576      	cmp	r6, lr
 81087a0:	bfa8      	it	ge
 81087a2:	4676      	movge	r6, lr
 81087a4:	f1bc 0f00 	cmp.w	ip, #0
 81087a8:	d000      	beq.n	81087ac <_strtod_l+0x2f4>
 81087aa:	4276      	negs	r6, r6
 81087ac:	2d00      	cmp	r5, #0
 81087ae:	d14f      	bne.n	8108850 <_strtod_l+0x398>
 81087b0:	9904      	ldr	r1, [sp, #16]
 81087b2:	4301      	orrs	r1, r0
 81087b4:	f47f aec2 	bne.w	810853c <_strtod_l+0x84>
 81087b8:	2a00      	cmp	r2, #0
 81087ba:	f47f aedb 	bne.w	8108574 <_strtod_l+0xbc>
 81087be:	2b69      	cmp	r3, #105	; 0x69
 81087c0:	d027      	beq.n	8108812 <_strtod_l+0x35a>
 81087c2:	dc24      	bgt.n	810880e <_strtod_l+0x356>
 81087c4:	2b49      	cmp	r3, #73	; 0x49
 81087c6:	d024      	beq.n	8108812 <_strtod_l+0x35a>
 81087c8:	2b4e      	cmp	r3, #78	; 0x4e
 81087ca:	f47f aed3 	bne.w	8108574 <_strtod_l+0xbc>
 81087ce:	499e      	ldr	r1, [pc, #632]	; (8108a48 <_strtod_l+0x590>)
 81087d0:	a81d      	add	r0, sp, #116	; 0x74
 81087d2:	f002 f8bb 	bl	810a94c <__match>
 81087d6:	2800      	cmp	r0, #0
 81087d8:	f43f aecc 	beq.w	8108574 <_strtod_l+0xbc>
 81087dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81087de:	781b      	ldrb	r3, [r3, #0]
 81087e0:	2b28      	cmp	r3, #40	; 0x28
 81087e2:	d12d      	bne.n	8108840 <_strtod_l+0x388>
 81087e4:	4999      	ldr	r1, [pc, #612]	; (8108a4c <_strtod_l+0x594>)
 81087e6:	aa20      	add	r2, sp, #128	; 0x80
 81087e8:	a81d      	add	r0, sp, #116	; 0x74
 81087ea:	f002 f8c3 	bl	810a974 <__hexnan>
 81087ee:	2805      	cmp	r0, #5
 81087f0:	d126      	bne.n	8108840 <_strtod_l+0x388>
 81087f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81087f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 81087f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 81087fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108800:	e69c      	b.n	810853c <_strtod_l+0x84>
 8108802:	210a      	movs	r1, #10
 8108804:	fb01 3e0e 	mla	lr, r1, lr, r3
 8108808:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810880c:	e7b9      	b.n	8108782 <_strtod_l+0x2ca>
 810880e:	2b6e      	cmp	r3, #110	; 0x6e
 8108810:	e7db      	b.n	81087ca <_strtod_l+0x312>
 8108812:	498f      	ldr	r1, [pc, #572]	; (8108a50 <_strtod_l+0x598>)
 8108814:	a81d      	add	r0, sp, #116	; 0x74
 8108816:	f002 f899 	bl	810a94c <__match>
 810881a:	2800      	cmp	r0, #0
 810881c:	f43f aeaa 	beq.w	8108574 <_strtod_l+0xbc>
 8108820:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108822:	498c      	ldr	r1, [pc, #560]	; (8108a54 <_strtod_l+0x59c>)
 8108824:	3b01      	subs	r3, #1
 8108826:	a81d      	add	r0, sp, #116	; 0x74
 8108828:	931d      	str	r3, [sp, #116]	; 0x74
 810882a:	f002 f88f 	bl	810a94c <__match>
 810882e:	b910      	cbnz	r0, 8108836 <_strtod_l+0x37e>
 8108830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108832:	3301      	adds	r3, #1
 8108834:	931d      	str	r3, [sp, #116]	; 0x74
 8108836:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8108a64 <_strtod_l+0x5ac>
 810883a:	f04f 0a00 	mov.w	sl, #0
 810883e:	e67d      	b.n	810853c <_strtod_l+0x84>
 8108840:	4885      	ldr	r0, [pc, #532]	; (8108a58 <_strtod_l+0x5a0>)
 8108842:	f003 f825 	bl	810b890 <nan>
 8108846:	ed8d 0b04 	vstr	d0, [sp, #16]
 810884a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 810884e:	e675      	b.n	810853c <_strtod_l+0x84>
 8108850:	9b07      	ldr	r3, [sp, #28]
 8108852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108854:	1af3      	subs	r3, r6, r3
 8108856:	2f00      	cmp	r7, #0
 8108858:	bf08      	it	eq
 810885a:	462f      	moveq	r7, r5
 810885c:	2d10      	cmp	r5, #16
 810885e:	9308      	str	r3, [sp, #32]
 8108860:	46a8      	mov	r8, r5
 8108862:	bfa8      	it	ge
 8108864:	f04f 0810 	movge.w	r8, #16
 8108868:	f7f7 fee4 	bl	8100634 <__aeabi_ui2d>
 810886c:	2d09      	cmp	r5, #9
 810886e:	4682      	mov	sl, r0
 8108870:	468b      	mov	fp, r1
 8108872:	dd13      	ble.n	810889c <_strtod_l+0x3e4>
 8108874:	4b79      	ldr	r3, [pc, #484]	; (8108a5c <_strtod_l+0x5a4>)
 8108876:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810887a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810887e:	f7f7 ff53 	bl	8100728 <__aeabi_dmul>
 8108882:	4682      	mov	sl, r0
 8108884:	4648      	mov	r0, r9
 8108886:	468b      	mov	fp, r1
 8108888:	f7f7 fed4 	bl	8100634 <__aeabi_ui2d>
 810888c:	4602      	mov	r2, r0
 810888e:	460b      	mov	r3, r1
 8108890:	4650      	mov	r0, sl
 8108892:	4659      	mov	r1, fp
 8108894:	f7f7 fd92 	bl	81003bc <__adddf3>
 8108898:	4682      	mov	sl, r0
 810889a:	468b      	mov	fp, r1
 810889c:	2d0f      	cmp	r5, #15
 810889e:	dc38      	bgt.n	8108912 <_strtod_l+0x45a>
 81088a0:	9b08      	ldr	r3, [sp, #32]
 81088a2:	2b00      	cmp	r3, #0
 81088a4:	f43f ae4a 	beq.w	810853c <_strtod_l+0x84>
 81088a8:	dd24      	ble.n	81088f4 <_strtod_l+0x43c>
 81088aa:	2b16      	cmp	r3, #22
 81088ac:	dc0b      	bgt.n	81088c6 <_strtod_l+0x40e>
 81088ae:	4d6b      	ldr	r5, [pc, #428]	; (8108a5c <_strtod_l+0x5a4>)
 81088b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 81088b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 81088b8:	4652      	mov	r2, sl
 81088ba:	465b      	mov	r3, fp
 81088bc:	f7f7 ff34 	bl	8100728 <__aeabi_dmul>
 81088c0:	4682      	mov	sl, r0
 81088c2:	468b      	mov	fp, r1
 81088c4:	e63a      	b.n	810853c <_strtod_l+0x84>
 81088c6:	9a08      	ldr	r2, [sp, #32]
 81088c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 81088cc:	4293      	cmp	r3, r2
 81088ce:	db20      	blt.n	8108912 <_strtod_l+0x45a>
 81088d0:	4c62      	ldr	r4, [pc, #392]	; (8108a5c <_strtod_l+0x5a4>)
 81088d2:	f1c5 050f 	rsb	r5, r5, #15
 81088d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81088da:	4652      	mov	r2, sl
 81088dc:	465b      	mov	r3, fp
 81088de:	e9d1 0100 	ldrd	r0, r1, [r1]
 81088e2:	f7f7 ff21 	bl	8100728 <__aeabi_dmul>
 81088e6:	9b08      	ldr	r3, [sp, #32]
 81088e8:	1b5d      	subs	r5, r3, r5
 81088ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81088ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 81088f2:	e7e3      	b.n	81088bc <_strtod_l+0x404>
 81088f4:	9b08      	ldr	r3, [sp, #32]
 81088f6:	3316      	adds	r3, #22
 81088f8:	db0b      	blt.n	8108912 <_strtod_l+0x45a>
 81088fa:	9b07      	ldr	r3, [sp, #28]
 81088fc:	4a57      	ldr	r2, [pc, #348]	; (8108a5c <_strtod_l+0x5a4>)
 81088fe:	1b9e      	subs	r6, r3, r6
 8108900:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8108904:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108908:	4650      	mov	r0, sl
 810890a:	4659      	mov	r1, fp
 810890c:	f7f8 f836 	bl	810097c <__aeabi_ddiv>
 8108910:	e7d6      	b.n	81088c0 <_strtod_l+0x408>
 8108912:	9b08      	ldr	r3, [sp, #32]
 8108914:	eba5 0808 	sub.w	r8, r5, r8
 8108918:	4498      	add	r8, r3
 810891a:	f1b8 0f00 	cmp.w	r8, #0
 810891e:	dd71      	ble.n	8108a04 <_strtod_l+0x54c>
 8108920:	f018 030f 	ands.w	r3, r8, #15
 8108924:	d00a      	beq.n	810893c <_strtod_l+0x484>
 8108926:	494d      	ldr	r1, [pc, #308]	; (8108a5c <_strtod_l+0x5a4>)
 8108928:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810892c:	4652      	mov	r2, sl
 810892e:	465b      	mov	r3, fp
 8108930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108934:	f7f7 fef8 	bl	8100728 <__aeabi_dmul>
 8108938:	4682      	mov	sl, r0
 810893a:	468b      	mov	fp, r1
 810893c:	f038 080f 	bics.w	r8, r8, #15
 8108940:	d04d      	beq.n	81089de <_strtod_l+0x526>
 8108942:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8108946:	dd22      	ble.n	810898e <_strtod_l+0x4d6>
 8108948:	2500      	movs	r5, #0
 810894a:	462e      	mov	r6, r5
 810894c:	9509      	str	r5, [sp, #36]	; 0x24
 810894e:	9507      	str	r5, [sp, #28]
 8108950:	2322      	movs	r3, #34	; 0x22
 8108952:	f8df b110 	ldr.w	fp, [pc, #272]	; 8108a64 <_strtod_l+0x5ac>
 8108956:	6023      	str	r3, [r4, #0]
 8108958:	f04f 0a00 	mov.w	sl, #0
 810895c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810895e:	2b00      	cmp	r3, #0
 8108960:	f43f adec 	beq.w	810853c <_strtod_l+0x84>
 8108964:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108966:	4620      	mov	r0, r4
 8108968:	f002 f984 	bl	810ac74 <_Bfree>
 810896c:	9907      	ldr	r1, [sp, #28]
 810896e:	4620      	mov	r0, r4
 8108970:	f002 f980 	bl	810ac74 <_Bfree>
 8108974:	4631      	mov	r1, r6
 8108976:	4620      	mov	r0, r4
 8108978:	f002 f97c 	bl	810ac74 <_Bfree>
 810897c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810897e:	4620      	mov	r0, r4
 8108980:	f002 f978 	bl	810ac74 <_Bfree>
 8108984:	4629      	mov	r1, r5
 8108986:	4620      	mov	r0, r4
 8108988:	f002 f974 	bl	810ac74 <_Bfree>
 810898c:	e5d6      	b.n	810853c <_strtod_l+0x84>
 810898e:	2300      	movs	r3, #0
 8108990:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108994:	4650      	mov	r0, sl
 8108996:	4659      	mov	r1, fp
 8108998:	4699      	mov	r9, r3
 810899a:	f1b8 0f01 	cmp.w	r8, #1
 810899e:	dc21      	bgt.n	81089e4 <_strtod_l+0x52c>
 81089a0:	b10b      	cbz	r3, 81089a6 <_strtod_l+0x4ee>
 81089a2:	4682      	mov	sl, r0
 81089a4:	468b      	mov	fp, r1
 81089a6:	4b2e      	ldr	r3, [pc, #184]	; (8108a60 <_strtod_l+0x5a8>)
 81089a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 81089ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 81089b0:	4652      	mov	r2, sl
 81089b2:	465b      	mov	r3, fp
 81089b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 81089b8:	f7f7 feb6 	bl	8100728 <__aeabi_dmul>
 81089bc:	4b29      	ldr	r3, [pc, #164]	; (8108a64 <_strtod_l+0x5ac>)
 81089be:	460a      	mov	r2, r1
 81089c0:	400b      	ands	r3, r1
 81089c2:	4929      	ldr	r1, [pc, #164]	; (8108a68 <_strtod_l+0x5b0>)
 81089c4:	428b      	cmp	r3, r1
 81089c6:	4682      	mov	sl, r0
 81089c8:	d8be      	bhi.n	8108948 <_strtod_l+0x490>
 81089ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 81089ce:	428b      	cmp	r3, r1
 81089d0:	bf86      	itte	hi
 81089d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8108a6c <_strtod_l+0x5b4>
 81089d6:	f04f 3aff 	movhi.w	sl, #4294967295
 81089da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 81089de:	2300      	movs	r3, #0
 81089e0:	9304      	str	r3, [sp, #16]
 81089e2:	e081      	b.n	8108ae8 <_strtod_l+0x630>
 81089e4:	f018 0f01 	tst.w	r8, #1
 81089e8:	d007      	beq.n	81089fa <_strtod_l+0x542>
 81089ea:	4b1d      	ldr	r3, [pc, #116]	; (8108a60 <_strtod_l+0x5a8>)
 81089ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 81089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81089f4:	f7f7 fe98 	bl	8100728 <__aeabi_dmul>
 81089f8:	2301      	movs	r3, #1
 81089fa:	f109 0901 	add.w	r9, r9, #1
 81089fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108a02:	e7ca      	b.n	810899a <_strtod_l+0x4e2>
 8108a04:	d0eb      	beq.n	81089de <_strtod_l+0x526>
 8108a06:	f1c8 0800 	rsb	r8, r8, #0
 8108a0a:	f018 020f 	ands.w	r2, r8, #15
 8108a0e:	d00a      	beq.n	8108a26 <_strtod_l+0x56e>
 8108a10:	4b12      	ldr	r3, [pc, #72]	; (8108a5c <_strtod_l+0x5a4>)
 8108a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108a16:	4650      	mov	r0, sl
 8108a18:	4659      	mov	r1, fp
 8108a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a1e:	f7f7 ffad 	bl	810097c <__aeabi_ddiv>
 8108a22:	4682      	mov	sl, r0
 8108a24:	468b      	mov	fp, r1
 8108a26:	ea5f 1828 	movs.w	r8, r8, asr #4
 8108a2a:	d0d8      	beq.n	81089de <_strtod_l+0x526>
 8108a2c:	f1b8 0f1f 	cmp.w	r8, #31
 8108a30:	dd1e      	ble.n	8108a70 <_strtod_l+0x5b8>
 8108a32:	2500      	movs	r5, #0
 8108a34:	462e      	mov	r6, r5
 8108a36:	9509      	str	r5, [sp, #36]	; 0x24
 8108a38:	9507      	str	r5, [sp, #28]
 8108a3a:	2322      	movs	r3, #34	; 0x22
 8108a3c:	f04f 0a00 	mov.w	sl, #0
 8108a40:	f04f 0b00 	mov.w	fp, #0
 8108a44:	6023      	str	r3, [r4, #0]
 8108a46:	e789      	b.n	810895c <_strtod_l+0x4a4>
 8108a48:	0810bd76 	.word	0x0810bd76
 8108a4c:	0810bdb8 	.word	0x0810bdb8
 8108a50:	0810bd6e 	.word	0x0810bd6e
 8108a54:	0810befc 	.word	0x0810befc
 8108a58:	0810bd51 	.word	0x0810bd51
 8108a5c:	0810c0f8 	.word	0x0810c0f8
 8108a60:	0810c0d0 	.word	0x0810c0d0
 8108a64:	7ff00000 	.word	0x7ff00000
 8108a68:	7ca00000 	.word	0x7ca00000
 8108a6c:	7fefffff 	.word	0x7fefffff
 8108a70:	f018 0310 	ands.w	r3, r8, #16
 8108a74:	bf18      	it	ne
 8108a76:	236a      	movne	r3, #106	; 0x6a
 8108a78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8108e30 <_strtod_l+0x978>
 8108a7c:	9304      	str	r3, [sp, #16]
 8108a7e:	4650      	mov	r0, sl
 8108a80:	4659      	mov	r1, fp
 8108a82:	2300      	movs	r3, #0
 8108a84:	f018 0f01 	tst.w	r8, #1
 8108a88:	d004      	beq.n	8108a94 <_strtod_l+0x5dc>
 8108a8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108a8e:	f7f7 fe4b 	bl	8100728 <__aeabi_dmul>
 8108a92:	2301      	movs	r3, #1
 8108a94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108a98:	f109 0908 	add.w	r9, r9, #8
 8108a9c:	d1f2      	bne.n	8108a84 <_strtod_l+0x5cc>
 8108a9e:	b10b      	cbz	r3, 8108aa4 <_strtod_l+0x5ec>
 8108aa0:	4682      	mov	sl, r0
 8108aa2:	468b      	mov	fp, r1
 8108aa4:	9b04      	ldr	r3, [sp, #16]
 8108aa6:	b1bb      	cbz	r3, 8108ad8 <_strtod_l+0x620>
 8108aa8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8108aac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108ab0:	2b00      	cmp	r3, #0
 8108ab2:	4659      	mov	r1, fp
 8108ab4:	dd10      	ble.n	8108ad8 <_strtod_l+0x620>
 8108ab6:	2b1f      	cmp	r3, #31
 8108ab8:	f340 8128 	ble.w	8108d0c <_strtod_l+0x854>
 8108abc:	2b34      	cmp	r3, #52	; 0x34
 8108abe:	bfde      	ittt	le
 8108ac0:	3b20      	suble	r3, #32
 8108ac2:	f04f 32ff 	movle.w	r2, #4294967295
 8108ac6:	fa02 f303 	lslle.w	r3, r2, r3
 8108aca:	f04f 0a00 	mov.w	sl, #0
 8108ace:	bfcc      	ite	gt
 8108ad0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108ad4:	ea03 0b01 	andle.w	fp, r3, r1
 8108ad8:	2200      	movs	r2, #0
 8108ada:	2300      	movs	r3, #0
 8108adc:	4650      	mov	r0, sl
 8108ade:	4659      	mov	r1, fp
 8108ae0:	f7f8 f88a 	bl	8100bf8 <__aeabi_dcmpeq>
 8108ae4:	2800      	cmp	r0, #0
 8108ae6:	d1a4      	bne.n	8108a32 <_strtod_l+0x57a>
 8108ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108aea:	9300      	str	r3, [sp, #0]
 8108aec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8108aee:	462b      	mov	r3, r5
 8108af0:	463a      	mov	r2, r7
 8108af2:	4620      	mov	r0, r4
 8108af4:	f002 f92a 	bl	810ad4c <__s2b>
 8108af8:	9009      	str	r0, [sp, #36]	; 0x24
 8108afa:	2800      	cmp	r0, #0
 8108afc:	f43f af24 	beq.w	8108948 <_strtod_l+0x490>
 8108b00:	9b07      	ldr	r3, [sp, #28]
 8108b02:	1b9e      	subs	r6, r3, r6
 8108b04:	9b08      	ldr	r3, [sp, #32]
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	bfb4      	ite	lt
 8108b0a:	4633      	movlt	r3, r6
 8108b0c:	2300      	movge	r3, #0
 8108b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8108b10:	9b08      	ldr	r3, [sp, #32]
 8108b12:	2500      	movs	r5, #0
 8108b14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108b18:	9318      	str	r3, [sp, #96]	; 0x60
 8108b1a:	462e      	mov	r6, r5
 8108b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b1e:	4620      	mov	r0, r4
 8108b20:	6859      	ldr	r1, [r3, #4]
 8108b22:	f002 f867 	bl	810abf4 <_Balloc>
 8108b26:	9007      	str	r0, [sp, #28]
 8108b28:	2800      	cmp	r0, #0
 8108b2a:	f43f af11 	beq.w	8108950 <_strtod_l+0x498>
 8108b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b30:	691a      	ldr	r2, [r3, #16]
 8108b32:	3202      	adds	r2, #2
 8108b34:	f103 010c 	add.w	r1, r3, #12
 8108b38:	0092      	lsls	r2, r2, #2
 8108b3a:	300c      	adds	r0, #12
 8108b3c:	f7fe fbb0 	bl	81072a0 <memcpy>
 8108b40:	ec4b ab10 	vmov	d0, sl, fp
 8108b44:	aa20      	add	r2, sp, #128	; 0x80
 8108b46:	a91f      	add	r1, sp, #124	; 0x7c
 8108b48:	4620      	mov	r0, r4
 8108b4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8108b4e:	f002 fc39 	bl	810b3c4 <__d2b>
 8108b52:	901e      	str	r0, [sp, #120]	; 0x78
 8108b54:	2800      	cmp	r0, #0
 8108b56:	f43f aefb 	beq.w	8108950 <_strtod_l+0x498>
 8108b5a:	2101      	movs	r1, #1
 8108b5c:	4620      	mov	r0, r4
 8108b5e:	f002 f98f 	bl	810ae80 <__i2b>
 8108b62:	4606      	mov	r6, r0
 8108b64:	2800      	cmp	r0, #0
 8108b66:	f43f aef3 	beq.w	8108950 <_strtod_l+0x498>
 8108b6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8108b6c:	9904      	ldr	r1, [sp, #16]
 8108b6e:	2b00      	cmp	r3, #0
 8108b70:	bfab      	itete	ge
 8108b72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8108b74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8108b76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8108b78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8108b7c:	bfac      	ite	ge
 8108b7e:	eb03 0902 	addge.w	r9, r3, r2
 8108b82:	1ad7      	sublt	r7, r2, r3
 8108b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8108b86:	eba3 0801 	sub.w	r8, r3, r1
 8108b8a:	4490      	add	r8, r2
 8108b8c:	4ba3      	ldr	r3, [pc, #652]	; (8108e1c <_strtod_l+0x964>)
 8108b8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8108b92:	4598      	cmp	r8, r3
 8108b94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108b98:	f280 80cc 	bge.w	8108d34 <_strtod_l+0x87c>
 8108b9c:	eba3 0308 	sub.w	r3, r3, r8
 8108ba0:	2b1f      	cmp	r3, #31
 8108ba2:	eba2 0203 	sub.w	r2, r2, r3
 8108ba6:	f04f 0101 	mov.w	r1, #1
 8108baa:	f300 80b6 	bgt.w	8108d1a <_strtod_l+0x862>
 8108bae:	fa01 f303 	lsl.w	r3, r1, r3
 8108bb2:	9311      	str	r3, [sp, #68]	; 0x44
 8108bb4:	2300      	movs	r3, #0
 8108bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8108bb8:	eb09 0802 	add.w	r8, r9, r2
 8108bbc:	9b04      	ldr	r3, [sp, #16]
 8108bbe:	45c1      	cmp	r9, r8
 8108bc0:	4417      	add	r7, r2
 8108bc2:	441f      	add	r7, r3
 8108bc4:	464b      	mov	r3, r9
 8108bc6:	bfa8      	it	ge
 8108bc8:	4643      	movge	r3, r8
 8108bca:	42bb      	cmp	r3, r7
 8108bcc:	bfa8      	it	ge
 8108bce:	463b      	movge	r3, r7
 8108bd0:	2b00      	cmp	r3, #0
 8108bd2:	bfc2      	ittt	gt
 8108bd4:	eba8 0803 	subgt.w	r8, r8, r3
 8108bd8:	1aff      	subgt	r7, r7, r3
 8108bda:	eba9 0903 	subgt.w	r9, r9, r3
 8108bde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108be0:	2b00      	cmp	r3, #0
 8108be2:	dd17      	ble.n	8108c14 <_strtod_l+0x75c>
 8108be4:	4631      	mov	r1, r6
 8108be6:	461a      	mov	r2, r3
 8108be8:	4620      	mov	r0, r4
 8108bea:	f002 fa05 	bl	810aff8 <__pow5mult>
 8108bee:	4606      	mov	r6, r0
 8108bf0:	2800      	cmp	r0, #0
 8108bf2:	f43f aead 	beq.w	8108950 <_strtod_l+0x498>
 8108bf6:	4601      	mov	r1, r0
 8108bf8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108bfa:	4620      	mov	r0, r4
 8108bfc:	f002 f956 	bl	810aeac <__multiply>
 8108c00:	900f      	str	r0, [sp, #60]	; 0x3c
 8108c02:	2800      	cmp	r0, #0
 8108c04:	f43f aea4 	beq.w	8108950 <_strtod_l+0x498>
 8108c08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108c0a:	4620      	mov	r0, r4
 8108c0c:	f002 f832 	bl	810ac74 <_Bfree>
 8108c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108c12:	931e      	str	r3, [sp, #120]	; 0x78
 8108c14:	f1b8 0f00 	cmp.w	r8, #0
 8108c18:	f300 8091 	bgt.w	8108d3e <_strtod_l+0x886>
 8108c1c:	9b08      	ldr	r3, [sp, #32]
 8108c1e:	2b00      	cmp	r3, #0
 8108c20:	dd08      	ble.n	8108c34 <_strtod_l+0x77c>
 8108c22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108c24:	9907      	ldr	r1, [sp, #28]
 8108c26:	4620      	mov	r0, r4
 8108c28:	f002 f9e6 	bl	810aff8 <__pow5mult>
 8108c2c:	9007      	str	r0, [sp, #28]
 8108c2e:	2800      	cmp	r0, #0
 8108c30:	f43f ae8e 	beq.w	8108950 <_strtod_l+0x498>
 8108c34:	2f00      	cmp	r7, #0
 8108c36:	dd08      	ble.n	8108c4a <_strtod_l+0x792>
 8108c38:	9907      	ldr	r1, [sp, #28]
 8108c3a:	463a      	mov	r2, r7
 8108c3c:	4620      	mov	r0, r4
 8108c3e:	f002 fa35 	bl	810b0ac <__lshift>
 8108c42:	9007      	str	r0, [sp, #28]
 8108c44:	2800      	cmp	r0, #0
 8108c46:	f43f ae83 	beq.w	8108950 <_strtod_l+0x498>
 8108c4a:	f1b9 0f00 	cmp.w	r9, #0
 8108c4e:	dd08      	ble.n	8108c62 <_strtod_l+0x7aa>
 8108c50:	4631      	mov	r1, r6
 8108c52:	464a      	mov	r2, r9
 8108c54:	4620      	mov	r0, r4
 8108c56:	f002 fa29 	bl	810b0ac <__lshift>
 8108c5a:	4606      	mov	r6, r0
 8108c5c:	2800      	cmp	r0, #0
 8108c5e:	f43f ae77 	beq.w	8108950 <_strtod_l+0x498>
 8108c62:	9a07      	ldr	r2, [sp, #28]
 8108c64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108c66:	4620      	mov	r0, r4
 8108c68:	f002 faa8 	bl	810b1bc <__mdiff>
 8108c6c:	4605      	mov	r5, r0
 8108c6e:	2800      	cmp	r0, #0
 8108c70:	f43f ae6e 	beq.w	8108950 <_strtod_l+0x498>
 8108c74:	68c3      	ldr	r3, [r0, #12]
 8108c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8108c78:	2300      	movs	r3, #0
 8108c7a:	60c3      	str	r3, [r0, #12]
 8108c7c:	4631      	mov	r1, r6
 8108c7e:	f002 fa81 	bl	810b184 <__mcmp>
 8108c82:	2800      	cmp	r0, #0
 8108c84:	da65      	bge.n	8108d52 <_strtod_l+0x89a>
 8108c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108c88:	ea53 030a 	orrs.w	r3, r3, sl
 8108c8c:	f040 8087 	bne.w	8108d9e <_strtod_l+0x8e6>
 8108c90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108c94:	2b00      	cmp	r3, #0
 8108c96:	f040 8082 	bne.w	8108d9e <_strtod_l+0x8e6>
 8108c9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108c9e:	0d1b      	lsrs	r3, r3, #20
 8108ca0:	051b      	lsls	r3, r3, #20
 8108ca2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108ca6:	d97a      	bls.n	8108d9e <_strtod_l+0x8e6>
 8108ca8:	696b      	ldr	r3, [r5, #20]
 8108caa:	b913      	cbnz	r3, 8108cb2 <_strtod_l+0x7fa>
 8108cac:	692b      	ldr	r3, [r5, #16]
 8108cae:	2b01      	cmp	r3, #1
 8108cb0:	dd75      	ble.n	8108d9e <_strtod_l+0x8e6>
 8108cb2:	4629      	mov	r1, r5
 8108cb4:	2201      	movs	r2, #1
 8108cb6:	4620      	mov	r0, r4
 8108cb8:	f002 f9f8 	bl	810b0ac <__lshift>
 8108cbc:	4631      	mov	r1, r6
 8108cbe:	4605      	mov	r5, r0
 8108cc0:	f002 fa60 	bl	810b184 <__mcmp>
 8108cc4:	2800      	cmp	r0, #0
 8108cc6:	dd6a      	ble.n	8108d9e <_strtod_l+0x8e6>
 8108cc8:	9904      	ldr	r1, [sp, #16]
 8108cca:	4a55      	ldr	r2, [pc, #340]	; (8108e20 <_strtod_l+0x968>)
 8108ccc:	465b      	mov	r3, fp
 8108cce:	2900      	cmp	r1, #0
 8108cd0:	f000 8085 	beq.w	8108dde <_strtod_l+0x926>
 8108cd4:	ea02 010b 	and.w	r1, r2, fp
 8108cd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108cdc:	dc7f      	bgt.n	8108dde <_strtod_l+0x926>
 8108cde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8108ce2:	f77f aeaa 	ble.w	8108a3a <_strtod_l+0x582>
 8108ce6:	4a4f      	ldr	r2, [pc, #316]	; (8108e24 <_strtod_l+0x96c>)
 8108ce8:	2300      	movs	r3, #0
 8108cea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8108cee:	4650      	mov	r0, sl
 8108cf0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8108cf4:	4659      	mov	r1, fp
 8108cf6:	f7f7 fd17 	bl	8100728 <__aeabi_dmul>
 8108cfa:	460b      	mov	r3, r1
 8108cfc:	4303      	orrs	r3, r0
 8108cfe:	bf08      	it	eq
 8108d00:	2322      	moveq	r3, #34	; 0x22
 8108d02:	4682      	mov	sl, r0
 8108d04:	468b      	mov	fp, r1
 8108d06:	bf08      	it	eq
 8108d08:	6023      	streq	r3, [r4, #0]
 8108d0a:	e62b      	b.n	8108964 <_strtod_l+0x4ac>
 8108d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8108d10:	fa02 f303 	lsl.w	r3, r2, r3
 8108d14:	ea03 0a0a 	and.w	sl, r3, sl
 8108d18:	e6de      	b.n	8108ad8 <_strtod_l+0x620>
 8108d1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8108d1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108d22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108d26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8108d2a:	fa01 f308 	lsl.w	r3, r1, r8
 8108d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8108d30:	9111      	str	r1, [sp, #68]	; 0x44
 8108d32:	e741      	b.n	8108bb8 <_strtod_l+0x700>
 8108d34:	2300      	movs	r3, #0
 8108d36:	930c      	str	r3, [sp, #48]	; 0x30
 8108d38:	2301      	movs	r3, #1
 8108d3a:	9311      	str	r3, [sp, #68]	; 0x44
 8108d3c:	e73c      	b.n	8108bb8 <_strtod_l+0x700>
 8108d3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108d40:	4642      	mov	r2, r8
 8108d42:	4620      	mov	r0, r4
 8108d44:	f002 f9b2 	bl	810b0ac <__lshift>
 8108d48:	901e      	str	r0, [sp, #120]	; 0x78
 8108d4a:	2800      	cmp	r0, #0
 8108d4c:	f47f af66 	bne.w	8108c1c <_strtod_l+0x764>
 8108d50:	e5fe      	b.n	8108950 <_strtod_l+0x498>
 8108d52:	465f      	mov	r7, fp
 8108d54:	d16e      	bne.n	8108e34 <_strtod_l+0x97c>
 8108d56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108d58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108d5c:	b342      	cbz	r2, 8108db0 <_strtod_l+0x8f8>
 8108d5e:	4a32      	ldr	r2, [pc, #200]	; (8108e28 <_strtod_l+0x970>)
 8108d60:	4293      	cmp	r3, r2
 8108d62:	d128      	bne.n	8108db6 <_strtod_l+0x8fe>
 8108d64:	9b04      	ldr	r3, [sp, #16]
 8108d66:	4650      	mov	r0, sl
 8108d68:	b1eb      	cbz	r3, 8108da6 <_strtod_l+0x8ee>
 8108d6a:	4a2d      	ldr	r2, [pc, #180]	; (8108e20 <_strtod_l+0x968>)
 8108d6c:	403a      	ands	r2, r7
 8108d6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8108d72:	f04f 31ff 	mov.w	r1, #4294967295
 8108d76:	d819      	bhi.n	8108dac <_strtod_l+0x8f4>
 8108d78:	0d12      	lsrs	r2, r2, #20
 8108d7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8108d82:	4298      	cmp	r0, r3
 8108d84:	d117      	bne.n	8108db6 <_strtod_l+0x8fe>
 8108d86:	4b29      	ldr	r3, [pc, #164]	; (8108e2c <_strtod_l+0x974>)
 8108d88:	429f      	cmp	r7, r3
 8108d8a:	d102      	bne.n	8108d92 <_strtod_l+0x8da>
 8108d8c:	3001      	adds	r0, #1
 8108d8e:	f43f addf 	beq.w	8108950 <_strtod_l+0x498>
 8108d92:	4b23      	ldr	r3, [pc, #140]	; (8108e20 <_strtod_l+0x968>)
 8108d94:	403b      	ands	r3, r7
 8108d96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108d9a:	f04f 0a00 	mov.w	sl, #0
 8108d9e:	9b04      	ldr	r3, [sp, #16]
 8108da0:	2b00      	cmp	r3, #0
 8108da2:	d1a0      	bne.n	8108ce6 <_strtod_l+0x82e>
 8108da4:	e5de      	b.n	8108964 <_strtod_l+0x4ac>
 8108da6:	f04f 33ff 	mov.w	r3, #4294967295
 8108daa:	e7ea      	b.n	8108d82 <_strtod_l+0x8ca>
 8108dac:	460b      	mov	r3, r1
 8108dae:	e7e8      	b.n	8108d82 <_strtod_l+0x8ca>
 8108db0:	ea53 030a 	orrs.w	r3, r3, sl
 8108db4:	d088      	beq.n	8108cc8 <_strtod_l+0x810>
 8108db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108db8:	b1db      	cbz	r3, 8108df2 <_strtod_l+0x93a>
 8108dba:	423b      	tst	r3, r7
 8108dbc:	d0ef      	beq.n	8108d9e <_strtod_l+0x8e6>
 8108dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108dc0:	9a04      	ldr	r2, [sp, #16]
 8108dc2:	4650      	mov	r0, sl
 8108dc4:	4659      	mov	r1, fp
 8108dc6:	b1c3      	cbz	r3, 8108dfa <_strtod_l+0x942>
 8108dc8:	f7ff fb59 	bl	810847e <sulp>
 8108dcc:	4602      	mov	r2, r0
 8108dce:	460b      	mov	r3, r1
 8108dd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108dd4:	f7f7 faf2 	bl	81003bc <__adddf3>
 8108dd8:	4682      	mov	sl, r0
 8108dda:	468b      	mov	fp, r1
 8108ddc:	e7df      	b.n	8108d9e <_strtod_l+0x8e6>
 8108dde:	4013      	ands	r3, r2
 8108de0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8108de4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108de8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108dec:	f04f 3aff 	mov.w	sl, #4294967295
 8108df0:	e7d5      	b.n	8108d9e <_strtod_l+0x8e6>
 8108df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108df4:	ea13 0f0a 	tst.w	r3, sl
 8108df8:	e7e0      	b.n	8108dbc <_strtod_l+0x904>
 8108dfa:	f7ff fb40 	bl	810847e <sulp>
 8108dfe:	4602      	mov	r2, r0
 8108e00:	460b      	mov	r3, r1
 8108e02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108e06:	f7f7 fad7 	bl	81003b8 <__aeabi_dsub>
 8108e0a:	2200      	movs	r2, #0
 8108e0c:	2300      	movs	r3, #0
 8108e0e:	4682      	mov	sl, r0
 8108e10:	468b      	mov	fp, r1
 8108e12:	f7f7 fef1 	bl	8100bf8 <__aeabi_dcmpeq>
 8108e16:	2800      	cmp	r0, #0
 8108e18:	d0c1      	beq.n	8108d9e <_strtod_l+0x8e6>
 8108e1a:	e60e      	b.n	8108a3a <_strtod_l+0x582>
 8108e1c:	fffffc02 	.word	0xfffffc02
 8108e20:	7ff00000 	.word	0x7ff00000
 8108e24:	39500000 	.word	0x39500000
 8108e28:	000fffff 	.word	0x000fffff
 8108e2c:	7fefffff 	.word	0x7fefffff
 8108e30:	0810bdd0 	.word	0x0810bdd0
 8108e34:	4631      	mov	r1, r6
 8108e36:	4628      	mov	r0, r5
 8108e38:	f002 fb20 	bl	810b47c <__ratio>
 8108e3c:	ec59 8b10 	vmov	r8, r9, d0
 8108e40:	ee10 0a10 	vmov	r0, s0
 8108e44:	2200      	movs	r2, #0
 8108e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8108e4a:	4649      	mov	r1, r9
 8108e4c:	f7f7 fee8 	bl	8100c20 <__aeabi_dcmple>
 8108e50:	2800      	cmp	r0, #0
 8108e52:	d07c      	beq.n	8108f4e <_strtod_l+0xa96>
 8108e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108e56:	2b00      	cmp	r3, #0
 8108e58:	d04c      	beq.n	8108ef4 <_strtod_l+0xa3c>
 8108e5a:	4b95      	ldr	r3, [pc, #596]	; (81090b0 <_strtod_l+0xbf8>)
 8108e5c:	2200      	movs	r2, #0
 8108e5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108e62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 81090b0 <_strtod_l+0xbf8>
 8108e66:	f04f 0800 	mov.w	r8, #0
 8108e6a:	4b92      	ldr	r3, [pc, #584]	; (81090b4 <_strtod_l+0xbfc>)
 8108e6c:	403b      	ands	r3, r7
 8108e6e:	9311      	str	r3, [sp, #68]	; 0x44
 8108e70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108e72:	4b91      	ldr	r3, [pc, #580]	; (81090b8 <_strtod_l+0xc00>)
 8108e74:	429a      	cmp	r2, r3
 8108e76:	f040 80b2 	bne.w	8108fde <_strtod_l+0xb26>
 8108e7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8108e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108e82:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8108e86:	ec4b ab10 	vmov	d0, sl, fp
 8108e8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8108e8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8108e92:	f002 fa1b 	bl	810b2cc <__ulp>
 8108e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108e9a:	ec53 2b10 	vmov	r2, r3, d0
 8108e9e:	f7f7 fc43 	bl	8100728 <__aeabi_dmul>
 8108ea2:	4652      	mov	r2, sl
 8108ea4:	465b      	mov	r3, fp
 8108ea6:	f7f7 fa89 	bl	81003bc <__adddf3>
 8108eaa:	460b      	mov	r3, r1
 8108eac:	4981      	ldr	r1, [pc, #516]	; (81090b4 <_strtod_l+0xbfc>)
 8108eae:	4a83      	ldr	r2, [pc, #524]	; (81090bc <_strtod_l+0xc04>)
 8108eb0:	4019      	ands	r1, r3
 8108eb2:	4291      	cmp	r1, r2
 8108eb4:	4682      	mov	sl, r0
 8108eb6:	d95e      	bls.n	8108f76 <_strtod_l+0xabe>
 8108eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108eba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8108ebe:	4293      	cmp	r3, r2
 8108ec0:	d103      	bne.n	8108eca <_strtod_l+0xa12>
 8108ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108ec4:	3301      	adds	r3, #1
 8108ec6:	f43f ad43 	beq.w	8108950 <_strtod_l+0x498>
 8108eca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 81090c8 <_strtod_l+0xc10>
 8108ece:	f04f 3aff 	mov.w	sl, #4294967295
 8108ed2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108ed4:	4620      	mov	r0, r4
 8108ed6:	f001 fecd 	bl	810ac74 <_Bfree>
 8108eda:	9907      	ldr	r1, [sp, #28]
 8108edc:	4620      	mov	r0, r4
 8108ede:	f001 fec9 	bl	810ac74 <_Bfree>
 8108ee2:	4631      	mov	r1, r6
 8108ee4:	4620      	mov	r0, r4
 8108ee6:	f001 fec5 	bl	810ac74 <_Bfree>
 8108eea:	4629      	mov	r1, r5
 8108eec:	4620      	mov	r0, r4
 8108eee:	f001 fec1 	bl	810ac74 <_Bfree>
 8108ef2:	e613      	b.n	8108b1c <_strtod_l+0x664>
 8108ef4:	f1ba 0f00 	cmp.w	sl, #0
 8108ef8:	d11b      	bne.n	8108f32 <_strtod_l+0xa7a>
 8108efa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108efe:	b9f3      	cbnz	r3, 8108f3e <_strtod_l+0xa86>
 8108f00:	4b6b      	ldr	r3, [pc, #428]	; (81090b0 <_strtod_l+0xbf8>)
 8108f02:	2200      	movs	r2, #0
 8108f04:	4640      	mov	r0, r8
 8108f06:	4649      	mov	r1, r9
 8108f08:	f7f7 fe80 	bl	8100c0c <__aeabi_dcmplt>
 8108f0c:	b9d0      	cbnz	r0, 8108f44 <_strtod_l+0xa8c>
 8108f0e:	4640      	mov	r0, r8
 8108f10:	4649      	mov	r1, r9
 8108f12:	4b6b      	ldr	r3, [pc, #428]	; (81090c0 <_strtod_l+0xc08>)
 8108f14:	2200      	movs	r2, #0
 8108f16:	f7f7 fc07 	bl	8100728 <__aeabi_dmul>
 8108f1a:	4680      	mov	r8, r0
 8108f1c:	4689      	mov	r9, r1
 8108f1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8108f22:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8108f26:	931b      	str	r3, [sp, #108]	; 0x6c
 8108f28:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8108f2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108f30:	e79b      	b.n	8108e6a <_strtod_l+0x9b2>
 8108f32:	f1ba 0f01 	cmp.w	sl, #1
 8108f36:	d102      	bne.n	8108f3e <_strtod_l+0xa86>
 8108f38:	2f00      	cmp	r7, #0
 8108f3a:	f43f ad7e 	beq.w	8108a3a <_strtod_l+0x582>
 8108f3e:	4b61      	ldr	r3, [pc, #388]	; (81090c4 <_strtod_l+0xc0c>)
 8108f40:	2200      	movs	r2, #0
 8108f42:	e78c      	b.n	8108e5e <_strtod_l+0x9a6>
 8108f44:	f8df 9178 	ldr.w	r9, [pc, #376]	; 81090c0 <_strtod_l+0xc08>
 8108f48:	f04f 0800 	mov.w	r8, #0
 8108f4c:	e7e7      	b.n	8108f1e <_strtod_l+0xa66>
 8108f4e:	4b5c      	ldr	r3, [pc, #368]	; (81090c0 <_strtod_l+0xc08>)
 8108f50:	4640      	mov	r0, r8
 8108f52:	4649      	mov	r1, r9
 8108f54:	2200      	movs	r2, #0
 8108f56:	f7f7 fbe7 	bl	8100728 <__aeabi_dmul>
 8108f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108f5c:	4680      	mov	r8, r0
 8108f5e:	4689      	mov	r9, r1
 8108f60:	b933      	cbnz	r3, 8108f70 <_strtod_l+0xab8>
 8108f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108f66:	9012      	str	r0, [sp, #72]	; 0x48
 8108f68:	9313      	str	r3, [sp, #76]	; 0x4c
 8108f6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8108f6e:	e7dd      	b.n	8108f2c <_strtod_l+0xa74>
 8108f70:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8108f74:	e7f9      	b.n	8108f6a <_strtod_l+0xab2>
 8108f76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8108f7a:	9b04      	ldr	r3, [sp, #16]
 8108f7c:	2b00      	cmp	r3, #0
 8108f7e:	d1a8      	bne.n	8108ed2 <_strtod_l+0xa1a>
 8108f80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108f84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108f86:	0d1b      	lsrs	r3, r3, #20
 8108f88:	051b      	lsls	r3, r3, #20
 8108f8a:	429a      	cmp	r2, r3
 8108f8c:	d1a1      	bne.n	8108ed2 <_strtod_l+0xa1a>
 8108f8e:	4640      	mov	r0, r8
 8108f90:	4649      	mov	r1, r9
 8108f92:	f7f7 ff11 	bl	8100db8 <__aeabi_d2lz>
 8108f96:	f7f7 fb99 	bl	81006cc <__aeabi_l2d>
 8108f9a:	4602      	mov	r2, r0
 8108f9c:	460b      	mov	r3, r1
 8108f9e:	4640      	mov	r0, r8
 8108fa0:	4649      	mov	r1, r9
 8108fa2:	f7f7 fa09 	bl	81003b8 <__aeabi_dsub>
 8108fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108fac:	ea43 030a 	orr.w	r3, r3, sl
 8108fb0:	4313      	orrs	r3, r2
 8108fb2:	4680      	mov	r8, r0
 8108fb4:	4689      	mov	r9, r1
 8108fb6:	d053      	beq.n	8109060 <_strtod_l+0xba8>
 8108fb8:	a335      	add	r3, pc, #212	; (adr r3, 8109090 <_strtod_l+0xbd8>)
 8108fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fbe:	f7f7 fe25 	bl	8100c0c <__aeabi_dcmplt>
 8108fc2:	2800      	cmp	r0, #0
 8108fc4:	f47f acce 	bne.w	8108964 <_strtod_l+0x4ac>
 8108fc8:	a333      	add	r3, pc, #204	; (adr r3, 8109098 <_strtod_l+0xbe0>)
 8108fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fce:	4640      	mov	r0, r8
 8108fd0:	4649      	mov	r1, r9
 8108fd2:	f7f7 fe39 	bl	8100c48 <__aeabi_dcmpgt>
 8108fd6:	2800      	cmp	r0, #0
 8108fd8:	f43f af7b 	beq.w	8108ed2 <_strtod_l+0xa1a>
 8108fdc:	e4c2      	b.n	8108964 <_strtod_l+0x4ac>
 8108fde:	9b04      	ldr	r3, [sp, #16]
 8108fe0:	b333      	cbz	r3, 8109030 <_strtod_l+0xb78>
 8108fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108fe4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8108fe8:	d822      	bhi.n	8109030 <_strtod_l+0xb78>
 8108fea:	a32d      	add	r3, pc, #180	; (adr r3, 81090a0 <_strtod_l+0xbe8>)
 8108fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ff0:	4640      	mov	r0, r8
 8108ff2:	4649      	mov	r1, r9
 8108ff4:	f7f7 fe14 	bl	8100c20 <__aeabi_dcmple>
 8108ff8:	b1a0      	cbz	r0, 8109024 <_strtod_l+0xb6c>
 8108ffa:	4649      	mov	r1, r9
 8108ffc:	4640      	mov	r0, r8
 8108ffe:	f7f7 fe6b 	bl	8100cd8 <__aeabi_d2uiz>
 8109002:	2801      	cmp	r0, #1
 8109004:	bf38      	it	cc
 8109006:	2001      	movcc	r0, #1
 8109008:	f7f7 fb14 	bl	8100634 <__aeabi_ui2d>
 810900c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810900e:	4680      	mov	r8, r0
 8109010:	4689      	mov	r9, r1
 8109012:	bb13      	cbnz	r3, 810905a <_strtod_l+0xba2>
 8109014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109018:	9014      	str	r0, [sp, #80]	; 0x50
 810901a:	9315      	str	r3, [sp, #84]	; 0x54
 810901c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109020:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8109024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109026:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109028:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810902c:	1a9b      	subs	r3, r3, r2
 810902e:	930d      	str	r3, [sp, #52]	; 0x34
 8109030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109034:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109038:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810903c:	f002 f946 	bl	810b2cc <__ulp>
 8109040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109044:	ec53 2b10 	vmov	r2, r3, d0
 8109048:	f7f7 fb6e 	bl	8100728 <__aeabi_dmul>
 810904c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109050:	f7f7 f9b4 	bl	81003bc <__adddf3>
 8109054:	4682      	mov	sl, r0
 8109056:	468b      	mov	fp, r1
 8109058:	e78f      	b.n	8108f7a <_strtod_l+0xac2>
 810905a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 810905e:	e7dd      	b.n	810901c <_strtod_l+0xb64>
 8109060:	a311      	add	r3, pc, #68	; (adr r3, 81090a8 <_strtod_l+0xbf0>)
 8109062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109066:	f7f7 fdd1 	bl	8100c0c <__aeabi_dcmplt>
 810906a:	e7b4      	b.n	8108fd6 <_strtod_l+0xb1e>
 810906c:	2300      	movs	r3, #0
 810906e:	930e      	str	r3, [sp, #56]	; 0x38
 8109070:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8109072:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109074:	6013      	str	r3, [r2, #0]
 8109076:	f7ff ba65 	b.w	8108544 <_strtod_l+0x8c>
 810907a:	2b65      	cmp	r3, #101	; 0x65
 810907c:	f43f ab5d 	beq.w	810873a <_strtod_l+0x282>
 8109080:	2b45      	cmp	r3, #69	; 0x45
 8109082:	f43f ab5a 	beq.w	810873a <_strtod_l+0x282>
 8109086:	2201      	movs	r2, #1
 8109088:	f7ff bb92 	b.w	81087b0 <_strtod_l+0x2f8>
 810908c:	f3af 8000 	nop.w
 8109090:	94a03595 	.word	0x94a03595
 8109094:	3fdfffff 	.word	0x3fdfffff
 8109098:	35afe535 	.word	0x35afe535
 810909c:	3fe00000 	.word	0x3fe00000
 81090a0:	ffc00000 	.word	0xffc00000
 81090a4:	41dfffff 	.word	0x41dfffff
 81090a8:	94a03595 	.word	0x94a03595
 81090ac:	3fcfffff 	.word	0x3fcfffff
 81090b0:	3ff00000 	.word	0x3ff00000
 81090b4:	7ff00000 	.word	0x7ff00000
 81090b8:	7fe00000 	.word	0x7fe00000
 81090bc:	7c9fffff 	.word	0x7c9fffff
 81090c0:	3fe00000 	.word	0x3fe00000
 81090c4:	bff00000 	.word	0xbff00000
 81090c8:	7fefffff 	.word	0x7fefffff

081090cc <_strtod_r>:
 81090cc:	4b01      	ldr	r3, [pc, #4]	; (81090d4 <_strtod_r+0x8>)
 81090ce:	f7ff b9f3 	b.w	81084b8 <_strtod_l>
 81090d2:	bf00      	nop
 81090d4:	10000120 	.word	0x10000120

081090d8 <_strtol_l.isra.0>:
 81090d8:	2b01      	cmp	r3, #1
 81090da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81090de:	d001      	beq.n	81090e4 <_strtol_l.isra.0+0xc>
 81090e0:	2b24      	cmp	r3, #36	; 0x24
 81090e2:	d906      	bls.n	81090f2 <_strtol_l.isra.0+0x1a>
 81090e4:	f7fe f890 	bl	8107208 <__errno>
 81090e8:	2316      	movs	r3, #22
 81090ea:	6003      	str	r3, [r0, #0]
 81090ec:	2000      	movs	r0, #0
 81090ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81090f2:	4f3a      	ldr	r7, [pc, #232]	; (81091dc <_strtol_l.isra.0+0x104>)
 81090f4:	468e      	mov	lr, r1
 81090f6:	4676      	mov	r6, lr
 81090f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 81090fc:	5de5      	ldrb	r5, [r4, r7]
 81090fe:	f015 0508 	ands.w	r5, r5, #8
 8109102:	d1f8      	bne.n	81090f6 <_strtol_l.isra.0+0x1e>
 8109104:	2c2d      	cmp	r4, #45	; 0x2d
 8109106:	d134      	bne.n	8109172 <_strtol_l.isra.0+0x9a>
 8109108:	f89e 4000 	ldrb.w	r4, [lr]
 810910c:	f04f 0801 	mov.w	r8, #1
 8109110:	f106 0e02 	add.w	lr, r6, #2
 8109114:	2b00      	cmp	r3, #0
 8109116:	d05c      	beq.n	81091d2 <_strtol_l.isra.0+0xfa>
 8109118:	2b10      	cmp	r3, #16
 810911a:	d10c      	bne.n	8109136 <_strtol_l.isra.0+0x5e>
 810911c:	2c30      	cmp	r4, #48	; 0x30
 810911e:	d10a      	bne.n	8109136 <_strtol_l.isra.0+0x5e>
 8109120:	f89e 4000 	ldrb.w	r4, [lr]
 8109124:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109128:	2c58      	cmp	r4, #88	; 0x58
 810912a:	d14d      	bne.n	81091c8 <_strtol_l.isra.0+0xf0>
 810912c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8109130:	2310      	movs	r3, #16
 8109132:	f10e 0e02 	add.w	lr, lr, #2
 8109136:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 810913a:	f10c 3cff 	add.w	ip, ip, #4294967295
 810913e:	2600      	movs	r6, #0
 8109140:	fbbc f9f3 	udiv	r9, ip, r3
 8109144:	4635      	mov	r5, r6
 8109146:	fb03 ca19 	mls	sl, r3, r9, ip
 810914a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 810914e:	2f09      	cmp	r7, #9
 8109150:	d818      	bhi.n	8109184 <_strtol_l.isra.0+0xac>
 8109152:	463c      	mov	r4, r7
 8109154:	42a3      	cmp	r3, r4
 8109156:	dd24      	ble.n	81091a2 <_strtol_l.isra.0+0xca>
 8109158:	2e00      	cmp	r6, #0
 810915a:	db1f      	blt.n	810919c <_strtol_l.isra.0+0xc4>
 810915c:	45a9      	cmp	r9, r5
 810915e:	d31d      	bcc.n	810919c <_strtol_l.isra.0+0xc4>
 8109160:	d101      	bne.n	8109166 <_strtol_l.isra.0+0x8e>
 8109162:	45a2      	cmp	sl, r4
 8109164:	db1a      	blt.n	810919c <_strtol_l.isra.0+0xc4>
 8109166:	fb05 4503 	mla	r5, r5, r3, r4
 810916a:	2601      	movs	r6, #1
 810916c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109170:	e7eb      	b.n	810914a <_strtol_l.isra.0+0x72>
 8109172:	2c2b      	cmp	r4, #43	; 0x2b
 8109174:	bf08      	it	eq
 8109176:	f89e 4000 	ldrbeq.w	r4, [lr]
 810917a:	46a8      	mov	r8, r5
 810917c:	bf08      	it	eq
 810917e:	f106 0e02 	addeq.w	lr, r6, #2
 8109182:	e7c7      	b.n	8109114 <_strtol_l.isra.0+0x3c>
 8109184:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8109188:	2f19      	cmp	r7, #25
 810918a:	d801      	bhi.n	8109190 <_strtol_l.isra.0+0xb8>
 810918c:	3c37      	subs	r4, #55	; 0x37
 810918e:	e7e1      	b.n	8109154 <_strtol_l.isra.0+0x7c>
 8109190:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8109194:	2f19      	cmp	r7, #25
 8109196:	d804      	bhi.n	81091a2 <_strtol_l.isra.0+0xca>
 8109198:	3c57      	subs	r4, #87	; 0x57
 810919a:	e7db      	b.n	8109154 <_strtol_l.isra.0+0x7c>
 810919c:	f04f 36ff 	mov.w	r6, #4294967295
 81091a0:	e7e4      	b.n	810916c <_strtol_l.isra.0+0x94>
 81091a2:	2e00      	cmp	r6, #0
 81091a4:	da05      	bge.n	81091b2 <_strtol_l.isra.0+0xda>
 81091a6:	2322      	movs	r3, #34	; 0x22
 81091a8:	6003      	str	r3, [r0, #0]
 81091aa:	4665      	mov	r5, ip
 81091ac:	b942      	cbnz	r2, 81091c0 <_strtol_l.isra.0+0xe8>
 81091ae:	4628      	mov	r0, r5
 81091b0:	e79d      	b.n	81090ee <_strtol_l.isra.0+0x16>
 81091b2:	f1b8 0f00 	cmp.w	r8, #0
 81091b6:	d000      	beq.n	81091ba <_strtol_l.isra.0+0xe2>
 81091b8:	426d      	negs	r5, r5
 81091ba:	2a00      	cmp	r2, #0
 81091bc:	d0f7      	beq.n	81091ae <_strtol_l.isra.0+0xd6>
 81091be:	b10e      	cbz	r6, 81091c4 <_strtol_l.isra.0+0xec>
 81091c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 81091c4:	6011      	str	r1, [r2, #0]
 81091c6:	e7f2      	b.n	81091ae <_strtol_l.isra.0+0xd6>
 81091c8:	2430      	movs	r4, #48	; 0x30
 81091ca:	2b00      	cmp	r3, #0
 81091cc:	d1b3      	bne.n	8109136 <_strtol_l.isra.0+0x5e>
 81091ce:	2308      	movs	r3, #8
 81091d0:	e7b1      	b.n	8109136 <_strtol_l.isra.0+0x5e>
 81091d2:	2c30      	cmp	r4, #48	; 0x30
 81091d4:	d0a4      	beq.n	8109120 <_strtol_l.isra.0+0x48>
 81091d6:	230a      	movs	r3, #10
 81091d8:	e7ad      	b.n	8109136 <_strtol_l.isra.0+0x5e>
 81091da:	bf00      	nop
 81091dc:	0810bdf9 	.word	0x0810bdf9

081091e0 <_strtol_r>:
 81091e0:	f7ff bf7a 	b.w	81090d8 <_strtol_l.isra.0>

081091e4 <__swbuf_r>:
 81091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81091e6:	460e      	mov	r6, r1
 81091e8:	4614      	mov	r4, r2
 81091ea:	4605      	mov	r5, r0
 81091ec:	b118      	cbz	r0, 81091f6 <__swbuf_r+0x12>
 81091ee:	6983      	ldr	r3, [r0, #24]
 81091f0:	b90b      	cbnz	r3, 81091f6 <__swbuf_r+0x12>
 81091f2:	f001 f84f 	bl	810a294 <__sinit>
 81091f6:	4b21      	ldr	r3, [pc, #132]	; (810927c <__swbuf_r+0x98>)
 81091f8:	429c      	cmp	r4, r3
 81091fa:	d12b      	bne.n	8109254 <__swbuf_r+0x70>
 81091fc:	686c      	ldr	r4, [r5, #4]
 81091fe:	69a3      	ldr	r3, [r4, #24]
 8109200:	60a3      	str	r3, [r4, #8]
 8109202:	89a3      	ldrh	r3, [r4, #12]
 8109204:	071a      	lsls	r2, r3, #28
 8109206:	d52f      	bpl.n	8109268 <__swbuf_r+0x84>
 8109208:	6923      	ldr	r3, [r4, #16]
 810920a:	b36b      	cbz	r3, 8109268 <__swbuf_r+0x84>
 810920c:	6923      	ldr	r3, [r4, #16]
 810920e:	6820      	ldr	r0, [r4, #0]
 8109210:	1ac0      	subs	r0, r0, r3
 8109212:	6963      	ldr	r3, [r4, #20]
 8109214:	b2f6      	uxtb	r6, r6
 8109216:	4283      	cmp	r3, r0
 8109218:	4637      	mov	r7, r6
 810921a:	dc04      	bgt.n	8109226 <__swbuf_r+0x42>
 810921c:	4621      	mov	r1, r4
 810921e:	4628      	mov	r0, r5
 8109220:	f000 ffa4 	bl	810a16c <_fflush_r>
 8109224:	bb30      	cbnz	r0, 8109274 <__swbuf_r+0x90>
 8109226:	68a3      	ldr	r3, [r4, #8]
 8109228:	3b01      	subs	r3, #1
 810922a:	60a3      	str	r3, [r4, #8]
 810922c:	6823      	ldr	r3, [r4, #0]
 810922e:	1c5a      	adds	r2, r3, #1
 8109230:	6022      	str	r2, [r4, #0]
 8109232:	701e      	strb	r6, [r3, #0]
 8109234:	6963      	ldr	r3, [r4, #20]
 8109236:	3001      	adds	r0, #1
 8109238:	4283      	cmp	r3, r0
 810923a:	d004      	beq.n	8109246 <__swbuf_r+0x62>
 810923c:	89a3      	ldrh	r3, [r4, #12]
 810923e:	07db      	lsls	r3, r3, #31
 8109240:	d506      	bpl.n	8109250 <__swbuf_r+0x6c>
 8109242:	2e0a      	cmp	r6, #10
 8109244:	d104      	bne.n	8109250 <__swbuf_r+0x6c>
 8109246:	4621      	mov	r1, r4
 8109248:	4628      	mov	r0, r5
 810924a:	f000 ff8f 	bl	810a16c <_fflush_r>
 810924e:	b988      	cbnz	r0, 8109274 <__swbuf_r+0x90>
 8109250:	4638      	mov	r0, r7
 8109252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109254:	4b0a      	ldr	r3, [pc, #40]	; (8109280 <__swbuf_r+0x9c>)
 8109256:	429c      	cmp	r4, r3
 8109258:	d101      	bne.n	810925e <__swbuf_r+0x7a>
 810925a:	68ac      	ldr	r4, [r5, #8]
 810925c:	e7cf      	b.n	81091fe <__swbuf_r+0x1a>
 810925e:	4b09      	ldr	r3, [pc, #36]	; (8109284 <__swbuf_r+0xa0>)
 8109260:	429c      	cmp	r4, r3
 8109262:	bf08      	it	eq
 8109264:	68ec      	ldreq	r4, [r5, #12]
 8109266:	e7ca      	b.n	81091fe <__swbuf_r+0x1a>
 8109268:	4621      	mov	r1, r4
 810926a:	4628      	mov	r0, r5
 810926c:	f000 f80c 	bl	8109288 <__swsetup_r>
 8109270:	2800      	cmp	r0, #0
 8109272:	d0cb      	beq.n	810920c <__swbuf_r+0x28>
 8109274:	f04f 37ff 	mov.w	r7, #4294967295
 8109278:	e7ea      	b.n	8109250 <__swbuf_r+0x6c>
 810927a:	bf00      	nop
 810927c:	0810bfb0 	.word	0x0810bfb0
 8109280:	0810bfd0 	.word	0x0810bfd0
 8109284:	0810bf90 	.word	0x0810bf90

08109288 <__swsetup_r>:
 8109288:	4b32      	ldr	r3, [pc, #200]	; (8109354 <__swsetup_r+0xcc>)
 810928a:	b570      	push	{r4, r5, r6, lr}
 810928c:	681d      	ldr	r5, [r3, #0]
 810928e:	4606      	mov	r6, r0
 8109290:	460c      	mov	r4, r1
 8109292:	b125      	cbz	r5, 810929e <__swsetup_r+0x16>
 8109294:	69ab      	ldr	r3, [r5, #24]
 8109296:	b913      	cbnz	r3, 810929e <__swsetup_r+0x16>
 8109298:	4628      	mov	r0, r5
 810929a:	f000 fffb 	bl	810a294 <__sinit>
 810929e:	4b2e      	ldr	r3, [pc, #184]	; (8109358 <__swsetup_r+0xd0>)
 81092a0:	429c      	cmp	r4, r3
 81092a2:	d10f      	bne.n	81092c4 <__swsetup_r+0x3c>
 81092a4:	686c      	ldr	r4, [r5, #4]
 81092a6:	89a3      	ldrh	r3, [r4, #12]
 81092a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81092ac:	0719      	lsls	r1, r3, #28
 81092ae:	d42c      	bmi.n	810930a <__swsetup_r+0x82>
 81092b0:	06dd      	lsls	r5, r3, #27
 81092b2:	d411      	bmi.n	81092d8 <__swsetup_r+0x50>
 81092b4:	2309      	movs	r3, #9
 81092b6:	6033      	str	r3, [r6, #0]
 81092b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81092bc:	81a3      	strh	r3, [r4, #12]
 81092be:	f04f 30ff 	mov.w	r0, #4294967295
 81092c2:	e03e      	b.n	8109342 <__swsetup_r+0xba>
 81092c4:	4b25      	ldr	r3, [pc, #148]	; (810935c <__swsetup_r+0xd4>)
 81092c6:	429c      	cmp	r4, r3
 81092c8:	d101      	bne.n	81092ce <__swsetup_r+0x46>
 81092ca:	68ac      	ldr	r4, [r5, #8]
 81092cc:	e7eb      	b.n	81092a6 <__swsetup_r+0x1e>
 81092ce:	4b24      	ldr	r3, [pc, #144]	; (8109360 <__swsetup_r+0xd8>)
 81092d0:	429c      	cmp	r4, r3
 81092d2:	bf08      	it	eq
 81092d4:	68ec      	ldreq	r4, [r5, #12]
 81092d6:	e7e6      	b.n	81092a6 <__swsetup_r+0x1e>
 81092d8:	0758      	lsls	r0, r3, #29
 81092da:	d512      	bpl.n	8109302 <__swsetup_r+0x7a>
 81092dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81092de:	b141      	cbz	r1, 81092f2 <__swsetup_r+0x6a>
 81092e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81092e4:	4299      	cmp	r1, r3
 81092e6:	d002      	beq.n	81092ee <__swsetup_r+0x66>
 81092e8:	4630      	mov	r0, r6
 81092ea:	f7fd ffef 	bl	81072cc <_free_r>
 81092ee:	2300      	movs	r3, #0
 81092f0:	6363      	str	r3, [r4, #52]	; 0x34
 81092f2:	89a3      	ldrh	r3, [r4, #12]
 81092f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81092f8:	81a3      	strh	r3, [r4, #12]
 81092fa:	2300      	movs	r3, #0
 81092fc:	6063      	str	r3, [r4, #4]
 81092fe:	6923      	ldr	r3, [r4, #16]
 8109300:	6023      	str	r3, [r4, #0]
 8109302:	89a3      	ldrh	r3, [r4, #12]
 8109304:	f043 0308 	orr.w	r3, r3, #8
 8109308:	81a3      	strh	r3, [r4, #12]
 810930a:	6923      	ldr	r3, [r4, #16]
 810930c:	b94b      	cbnz	r3, 8109322 <__swsetup_r+0x9a>
 810930e:	89a3      	ldrh	r3, [r4, #12]
 8109310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109318:	d003      	beq.n	8109322 <__swsetup_r+0x9a>
 810931a:	4621      	mov	r1, r4
 810931c:	4630      	mov	r0, r6
 810931e:	f001 fbf1 	bl	810ab04 <__smakebuf_r>
 8109322:	89a0      	ldrh	r0, [r4, #12]
 8109324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109328:	f010 0301 	ands.w	r3, r0, #1
 810932c:	d00a      	beq.n	8109344 <__swsetup_r+0xbc>
 810932e:	2300      	movs	r3, #0
 8109330:	60a3      	str	r3, [r4, #8]
 8109332:	6963      	ldr	r3, [r4, #20]
 8109334:	425b      	negs	r3, r3
 8109336:	61a3      	str	r3, [r4, #24]
 8109338:	6923      	ldr	r3, [r4, #16]
 810933a:	b943      	cbnz	r3, 810934e <__swsetup_r+0xc6>
 810933c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8109340:	d1ba      	bne.n	81092b8 <__swsetup_r+0x30>
 8109342:	bd70      	pop	{r4, r5, r6, pc}
 8109344:	0781      	lsls	r1, r0, #30
 8109346:	bf58      	it	pl
 8109348:	6963      	ldrpl	r3, [r4, #20]
 810934a:	60a3      	str	r3, [r4, #8]
 810934c:	e7f4      	b.n	8109338 <__swsetup_r+0xb0>
 810934e:	2000      	movs	r0, #0
 8109350:	e7f7      	b.n	8109342 <__swsetup_r+0xba>
 8109352:	bf00      	nop
 8109354:	100000b8 	.word	0x100000b8
 8109358:	0810bfb0 	.word	0x0810bfb0
 810935c:	0810bfd0 	.word	0x0810bfd0
 8109360:	0810bf90 	.word	0x0810bf90

08109364 <abort>:
 8109364:	b508      	push	{r3, lr}
 8109366:	2006      	movs	r0, #6
 8109368:	f002 fac2 	bl	810b8f0 <raise>
 810936c:	2001      	movs	r0, #1
 810936e:	f7f8 f913 	bl	8101598 <_exit>

08109372 <quorem>:
 8109372:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109376:	6903      	ldr	r3, [r0, #16]
 8109378:	690c      	ldr	r4, [r1, #16]
 810937a:	42a3      	cmp	r3, r4
 810937c:	4607      	mov	r7, r0
 810937e:	f2c0 8081 	blt.w	8109484 <quorem+0x112>
 8109382:	3c01      	subs	r4, #1
 8109384:	f101 0814 	add.w	r8, r1, #20
 8109388:	f100 0514 	add.w	r5, r0, #20
 810938c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109390:	9301      	str	r3, [sp, #4]
 8109392:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810939a:	3301      	adds	r3, #1
 810939c:	429a      	cmp	r2, r3
 810939e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81093a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81093a6:	fbb2 f6f3 	udiv	r6, r2, r3
 81093aa:	d331      	bcc.n	8109410 <quorem+0x9e>
 81093ac:	f04f 0e00 	mov.w	lr, #0
 81093b0:	4640      	mov	r0, r8
 81093b2:	46ac      	mov	ip, r5
 81093b4:	46f2      	mov	sl, lr
 81093b6:	f850 2b04 	ldr.w	r2, [r0], #4
 81093ba:	b293      	uxth	r3, r2
 81093bc:	fb06 e303 	mla	r3, r6, r3, lr
 81093c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81093c4:	b29b      	uxth	r3, r3
 81093c6:	ebaa 0303 	sub.w	r3, sl, r3
 81093ca:	0c12      	lsrs	r2, r2, #16
 81093cc:	f8dc a000 	ldr.w	sl, [ip]
 81093d0:	fb06 e202 	mla	r2, r6, r2, lr
 81093d4:	fa13 f38a 	uxtah	r3, r3, sl
 81093d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81093dc:	fa1f fa82 	uxth.w	sl, r2
 81093e0:	f8dc 2000 	ldr.w	r2, [ip]
 81093e4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81093e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81093ec:	b29b      	uxth	r3, r3
 81093ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81093f2:	4581      	cmp	r9, r0
 81093f4:	f84c 3b04 	str.w	r3, [ip], #4
 81093f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81093fc:	d2db      	bcs.n	81093b6 <quorem+0x44>
 81093fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8109402:	b92b      	cbnz	r3, 8109410 <quorem+0x9e>
 8109404:	9b01      	ldr	r3, [sp, #4]
 8109406:	3b04      	subs	r3, #4
 8109408:	429d      	cmp	r5, r3
 810940a:	461a      	mov	r2, r3
 810940c:	d32e      	bcc.n	810946c <quorem+0xfa>
 810940e:	613c      	str	r4, [r7, #16]
 8109410:	4638      	mov	r0, r7
 8109412:	f001 feb7 	bl	810b184 <__mcmp>
 8109416:	2800      	cmp	r0, #0
 8109418:	db24      	blt.n	8109464 <quorem+0xf2>
 810941a:	3601      	adds	r6, #1
 810941c:	4628      	mov	r0, r5
 810941e:	f04f 0c00 	mov.w	ip, #0
 8109422:	f858 2b04 	ldr.w	r2, [r8], #4
 8109426:	f8d0 e000 	ldr.w	lr, [r0]
 810942a:	b293      	uxth	r3, r2
 810942c:	ebac 0303 	sub.w	r3, ip, r3
 8109430:	0c12      	lsrs	r2, r2, #16
 8109432:	fa13 f38e 	uxtah	r3, r3, lr
 8109436:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810943a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810943e:	b29b      	uxth	r3, r3
 8109440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109444:	45c1      	cmp	r9, r8
 8109446:	f840 3b04 	str.w	r3, [r0], #4
 810944a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810944e:	d2e8      	bcs.n	8109422 <quorem+0xb0>
 8109450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109458:	b922      	cbnz	r2, 8109464 <quorem+0xf2>
 810945a:	3b04      	subs	r3, #4
 810945c:	429d      	cmp	r5, r3
 810945e:	461a      	mov	r2, r3
 8109460:	d30a      	bcc.n	8109478 <quorem+0x106>
 8109462:	613c      	str	r4, [r7, #16]
 8109464:	4630      	mov	r0, r6
 8109466:	b003      	add	sp, #12
 8109468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810946c:	6812      	ldr	r2, [r2, #0]
 810946e:	3b04      	subs	r3, #4
 8109470:	2a00      	cmp	r2, #0
 8109472:	d1cc      	bne.n	810940e <quorem+0x9c>
 8109474:	3c01      	subs	r4, #1
 8109476:	e7c7      	b.n	8109408 <quorem+0x96>
 8109478:	6812      	ldr	r2, [r2, #0]
 810947a:	3b04      	subs	r3, #4
 810947c:	2a00      	cmp	r2, #0
 810947e:	d1f0      	bne.n	8109462 <quorem+0xf0>
 8109480:	3c01      	subs	r4, #1
 8109482:	e7eb      	b.n	810945c <quorem+0xea>
 8109484:	2000      	movs	r0, #0
 8109486:	e7ee      	b.n	8109466 <quorem+0xf4>

08109488 <_dtoa_r>:
 8109488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810948c:	ed2d 8b02 	vpush	{d8}
 8109490:	ec57 6b10 	vmov	r6, r7, d0
 8109494:	b095      	sub	sp, #84	; 0x54
 8109496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810949c:	9105      	str	r1, [sp, #20]
 810949e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 81094a2:	4604      	mov	r4, r0
 81094a4:	9209      	str	r2, [sp, #36]	; 0x24
 81094a6:	930f      	str	r3, [sp, #60]	; 0x3c
 81094a8:	b975      	cbnz	r5, 81094c8 <_dtoa_r+0x40>
 81094aa:	2010      	movs	r0, #16
 81094ac:	f7fd fee8 	bl	8107280 <malloc>
 81094b0:	4602      	mov	r2, r0
 81094b2:	6260      	str	r0, [r4, #36]	; 0x24
 81094b4:	b920      	cbnz	r0, 81094c0 <_dtoa_r+0x38>
 81094b6:	4bb2      	ldr	r3, [pc, #712]	; (8109780 <_dtoa_r+0x2f8>)
 81094b8:	21ea      	movs	r1, #234	; 0xea
 81094ba:	48b2      	ldr	r0, [pc, #712]	; (8109784 <_dtoa_r+0x2fc>)
 81094bc:	f7fd fe86 	bl	81071cc <__assert_func>
 81094c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81094c4:	6005      	str	r5, [r0, #0]
 81094c6:	60c5      	str	r5, [r0, #12]
 81094c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81094ca:	6819      	ldr	r1, [r3, #0]
 81094cc:	b151      	cbz	r1, 81094e4 <_dtoa_r+0x5c>
 81094ce:	685a      	ldr	r2, [r3, #4]
 81094d0:	604a      	str	r2, [r1, #4]
 81094d2:	2301      	movs	r3, #1
 81094d4:	4093      	lsls	r3, r2
 81094d6:	608b      	str	r3, [r1, #8]
 81094d8:	4620      	mov	r0, r4
 81094da:	f001 fbcb 	bl	810ac74 <_Bfree>
 81094de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81094e0:	2200      	movs	r2, #0
 81094e2:	601a      	str	r2, [r3, #0]
 81094e4:	1e3b      	subs	r3, r7, #0
 81094e6:	bfb9      	ittee	lt
 81094e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81094ec:	9303      	strlt	r3, [sp, #12]
 81094ee:	2300      	movge	r3, #0
 81094f0:	f8c8 3000 	strge.w	r3, [r8]
 81094f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81094f8:	4ba3      	ldr	r3, [pc, #652]	; (8109788 <_dtoa_r+0x300>)
 81094fa:	bfbc      	itt	lt
 81094fc:	2201      	movlt	r2, #1
 81094fe:	f8c8 2000 	strlt.w	r2, [r8]
 8109502:	ea33 0309 	bics.w	r3, r3, r9
 8109506:	d11b      	bne.n	8109540 <_dtoa_r+0xb8>
 8109508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810950a:	f242 730f 	movw	r3, #9999	; 0x270f
 810950e:	6013      	str	r3, [r2, #0]
 8109510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109514:	4333      	orrs	r3, r6
 8109516:	f000 857a 	beq.w	810a00e <_dtoa_r+0xb86>
 810951a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810951c:	b963      	cbnz	r3, 8109538 <_dtoa_r+0xb0>
 810951e:	4b9b      	ldr	r3, [pc, #620]	; (810978c <_dtoa_r+0x304>)
 8109520:	e024      	b.n	810956c <_dtoa_r+0xe4>
 8109522:	4b9b      	ldr	r3, [pc, #620]	; (8109790 <_dtoa_r+0x308>)
 8109524:	9300      	str	r3, [sp, #0]
 8109526:	3308      	adds	r3, #8
 8109528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810952a:	6013      	str	r3, [r2, #0]
 810952c:	9800      	ldr	r0, [sp, #0]
 810952e:	b015      	add	sp, #84	; 0x54
 8109530:	ecbd 8b02 	vpop	{d8}
 8109534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109538:	4b94      	ldr	r3, [pc, #592]	; (810978c <_dtoa_r+0x304>)
 810953a:	9300      	str	r3, [sp, #0]
 810953c:	3303      	adds	r3, #3
 810953e:	e7f3      	b.n	8109528 <_dtoa_r+0xa0>
 8109540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109544:	2200      	movs	r2, #0
 8109546:	ec51 0b17 	vmov	r0, r1, d7
 810954a:	2300      	movs	r3, #0
 810954c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8109550:	f7f7 fb52 	bl	8100bf8 <__aeabi_dcmpeq>
 8109554:	4680      	mov	r8, r0
 8109556:	b158      	cbz	r0, 8109570 <_dtoa_r+0xe8>
 8109558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810955a:	2301      	movs	r3, #1
 810955c:	6013      	str	r3, [r2, #0]
 810955e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109560:	2b00      	cmp	r3, #0
 8109562:	f000 8551 	beq.w	810a008 <_dtoa_r+0xb80>
 8109566:	488b      	ldr	r0, [pc, #556]	; (8109794 <_dtoa_r+0x30c>)
 8109568:	6018      	str	r0, [r3, #0]
 810956a:	1e43      	subs	r3, r0, #1
 810956c:	9300      	str	r3, [sp, #0]
 810956e:	e7dd      	b.n	810952c <_dtoa_r+0xa4>
 8109570:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109574:	aa12      	add	r2, sp, #72	; 0x48
 8109576:	a913      	add	r1, sp, #76	; 0x4c
 8109578:	4620      	mov	r0, r4
 810957a:	f001 ff23 	bl	810b3c4 <__d2b>
 810957e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8109582:	4683      	mov	fp, r0
 8109584:	2d00      	cmp	r5, #0
 8109586:	d07c      	beq.n	8109682 <_dtoa_r+0x1fa>
 8109588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810958a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 810958e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109592:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8109596:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810959a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810959e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81095a2:	4b7d      	ldr	r3, [pc, #500]	; (8109798 <_dtoa_r+0x310>)
 81095a4:	2200      	movs	r2, #0
 81095a6:	4630      	mov	r0, r6
 81095a8:	4639      	mov	r1, r7
 81095aa:	f7f6 ff05 	bl	81003b8 <__aeabi_dsub>
 81095ae:	a36e      	add	r3, pc, #440	; (adr r3, 8109768 <_dtoa_r+0x2e0>)
 81095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81095b4:	f7f7 f8b8 	bl	8100728 <__aeabi_dmul>
 81095b8:	a36d      	add	r3, pc, #436	; (adr r3, 8109770 <_dtoa_r+0x2e8>)
 81095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81095be:	f7f6 fefd 	bl	81003bc <__adddf3>
 81095c2:	4606      	mov	r6, r0
 81095c4:	4628      	mov	r0, r5
 81095c6:	460f      	mov	r7, r1
 81095c8:	f7f7 f844 	bl	8100654 <__aeabi_i2d>
 81095cc:	a36a      	add	r3, pc, #424	; (adr r3, 8109778 <_dtoa_r+0x2f0>)
 81095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81095d2:	f7f7 f8a9 	bl	8100728 <__aeabi_dmul>
 81095d6:	4602      	mov	r2, r0
 81095d8:	460b      	mov	r3, r1
 81095da:	4630      	mov	r0, r6
 81095dc:	4639      	mov	r1, r7
 81095de:	f7f6 feed 	bl	81003bc <__adddf3>
 81095e2:	4606      	mov	r6, r0
 81095e4:	460f      	mov	r7, r1
 81095e6:	f7f7 fb4f 	bl	8100c88 <__aeabi_d2iz>
 81095ea:	2200      	movs	r2, #0
 81095ec:	4682      	mov	sl, r0
 81095ee:	2300      	movs	r3, #0
 81095f0:	4630      	mov	r0, r6
 81095f2:	4639      	mov	r1, r7
 81095f4:	f7f7 fb0a 	bl	8100c0c <__aeabi_dcmplt>
 81095f8:	b148      	cbz	r0, 810960e <_dtoa_r+0x186>
 81095fa:	4650      	mov	r0, sl
 81095fc:	f7f7 f82a 	bl	8100654 <__aeabi_i2d>
 8109600:	4632      	mov	r2, r6
 8109602:	463b      	mov	r3, r7
 8109604:	f7f7 faf8 	bl	8100bf8 <__aeabi_dcmpeq>
 8109608:	b908      	cbnz	r0, 810960e <_dtoa_r+0x186>
 810960a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810960e:	f1ba 0f16 	cmp.w	sl, #22
 8109612:	d854      	bhi.n	81096be <_dtoa_r+0x236>
 8109614:	4b61      	ldr	r3, [pc, #388]	; (810979c <_dtoa_r+0x314>)
 8109616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810961e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109622:	f7f7 faf3 	bl	8100c0c <__aeabi_dcmplt>
 8109626:	2800      	cmp	r0, #0
 8109628:	d04b      	beq.n	81096c2 <_dtoa_r+0x23a>
 810962a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810962e:	2300      	movs	r3, #0
 8109630:	930e      	str	r3, [sp, #56]	; 0x38
 8109632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109634:	1b5d      	subs	r5, r3, r5
 8109636:	1e6b      	subs	r3, r5, #1
 8109638:	9304      	str	r3, [sp, #16]
 810963a:	bf43      	ittte	mi
 810963c:	2300      	movmi	r3, #0
 810963e:	f1c5 0801 	rsbmi	r8, r5, #1
 8109642:	9304      	strmi	r3, [sp, #16]
 8109644:	f04f 0800 	movpl.w	r8, #0
 8109648:	f1ba 0f00 	cmp.w	sl, #0
 810964c:	db3b      	blt.n	81096c6 <_dtoa_r+0x23e>
 810964e:	9b04      	ldr	r3, [sp, #16]
 8109650:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8109654:	4453      	add	r3, sl
 8109656:	9304      	str	r3, [sp, #16]
 8109658:	2300      	movs	r3, #0
 810965a:	9306      	str	r3, [sp, #24]
 810965c:	9b05      	ldr	r3, [sp, #20]
 810965e:	2b09      	cmp	r3, #9
 8109660:	d869      	bhi.n	8109736 <_dtoa_r+0x2ae>
 8109662:	2b05      	cmp	r3, #5
 8109664:	bfc4      	itt	gt
 8109666:	3b04      	subgt	r3, #4
 8109668:	9305      	strgt	r3, [sp, #20]
 810966a:	9b05      	ldr	r3, [sp, #20]
 810966c:	f1a3 0302 	sub.w	r3, r3, #2
 8109670:	bfcc      	ite	gt
 8109672:	2500      	movgt	r5, #0
 8109674:	2501      	movle	r5, #1
 8109676:	2b03      	cmp	r3, #3
 8109678:	d869      	bhi.n	810974e <_dtoa_r+0x2c6>
 810967a:	e8df f003 	tbb	[pc, r3]
 810967e:	4e2c      	.short	0x4e2c
 8109680:	5a4c      	.short	0x5a4c
 8109682:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8109686:	441d      	add	r5, r3
 8109688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810968c:	2b20      	cmp	r3, #32
 810968e:	bfc1      	itttt	gt
 8109690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109694:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109698:	fa09 f303 	lslgt.w	r3, r9, r3
 810969c:	fa26 f000 	lsrgt.w	r0, r6, r0
 81096a0:	bfda      	itte	le
 81096a2:	f1c3 0320 	rsble	r3, r3, #32
 81096a6:	fa06 f003 	lslle.w	r0, r6, r3
 81096aa:	4318      	orrgt	r0, r3
 81096ac:	f7f6 ffc2 	bl	8100634 <__aeabi_ui2d>
 81096b0:	2301      	movs	r3, #1
 81096b2:	4606      	mov	r6, r0
 81096b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81096b8:	3d01      	subs	r5, #1
 81096ba:	9310      	str	r3, [sp, #64]	; 0x40
 81096bc:	e771      	b.n	81095a2 <_dtoa_r+0x11a>
 81096be:	2301      	movs	r3, #1
 81096c0:	e7b6      	b.n	8109630 <_dtoa_r+0x1a8>
 81096c2:	900e      	str	r0, [sp, #56]	; 0x38
 81096c4:	e7b5      	b.n	8109632 <_dtoa_r+0x1aa>
 81096c6:	f1ca 0300 	rsb	r3, sl, #0
 81096ca:	9306      	str	r3, [sp, #24]
 81096cc:	2300      	movs	r3, #0
 81096ce:	eba8 080a 	sub.w	r8, r8, sl
 81096d2:	930d      	str	r3, [sp, #52]	; 0x34
 81096d4:	e7c2      	b.n	810965c <_dtoa_r+0x1d4>
 81096d6:	2300      	movs	r3, #0
 81096d8:	9308      	str	r3, [sp, #32]
 81096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81096dc:	2b00      	cmp	r3, #0
 81096de:	dc39      	bgt.n	8109754 <_dtoa_r+0x2cc>
 81096e0:	f04f 0901 	mov.w	r9, #1
 81096e4:	f8cd 9004 	str.w	r9, [sp, #4]
 81096e8:	464b      	mov	r3, r9
 81096ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81096ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81096f0:	2200      	movs	r2, #0
 81096f2:	6042      	str	r2, [r0, #4]
 81096f4:	2204      	movs	r2, #4
 81096f6:	f102 0614 	add.w	r6, r2, #20
 81096fa:	429e      	cmp	r6, r3
 81096fc:	6841      	ldr	r1, [r0, #4]
 81096fe:	d92f      	bls.n	8109760 <_dtoa_r+0x2d8>
 8109700:	4620      	mov	r0, r4
 8109702:	f001 fa77 	bl	810abf4 <_Balloc>
 8109706:	9000      	str	r0, [sp, #0]
 8109708:	2800      	cmp	r0, #0
 810970a:	d14b      	bne.n	81097a4 <_dtoa_r+0x31c>
 810970c:	4b24      	ldr	r3, [pc, #144]	; (81097a0 <_dtoa_r+0x318>)
 810970e:	4602      	mov	r2, r0
 8109710:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8109714:	e6d1      	b.n	81094ba <_dtoa_r+0x32>
 8109716:	2301      	movs	r3, #1
 8109718:	e7de      	b.n	81096d8 <_dtoa_r+0x250>
 810971a:	2300      	movs	r3, #0
 810971c:	9308      	str	r3, [sp, #32]
 810971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109720:	eb0a 0903 	add.w	r9, sl, r3
 8109724:	f109 0301 	add.w	r3, r9, #1
 8109728:	2b01      	cmp	r3, #1
 810972a:	9301      	str	r3, [sp, #4]
 810972c:	bfb8      	it	lt
 810972e:	2301      	movlt	r3, #1
 8109730:	e7dd      	b.n	81096ee <_dtoa_r+0x266>
 8109732:	2301      	movs	r3, #1
 8109734:	e7f2      	b.n	810971c <_dtoa_r+0x294>
 8109736:	2501      	movs	r5, #1
 8109738:	2300      	movs	r3, #0
 810973a:	9305      	str	r3, [sp, #20]
 810973c:	9508      	str	r5, [sp, #32]
 810973e:	f04f 39ff 	mov.w	r9, #4294967295
 8109742:	2200      	movs	r2, #0
 8109744:	f8cd 9004 	str.w	r9, [sp, #4]
 8109748:	2312      	movs	r3, #18
 810974a:	9209      	str	r2, [sp, #36]	; 0x24
 810974c:	e7cf      	b.n	81096ee <_dtoa_r+0x266>
 810974e:	2301      	movs	r3, #1
 8109750:	9308      	str	r3, [sp, #32]
 8109752:	e7f4      	b.n	810973e <_dtoa_r+0x2b6>
 8109754:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8109758:	f8cd 9004 	str.w	r9, [sp, #4]
 810975c:	464b      	mov	r3, r9
 810975e:	e7c6      	b.n	81096ee <_dtoa_r+0x266>
 8109760:	3101      	adds	r1, #1
 8109762:	6041      	str	r1, [r0, #4]
 8109764:	0052      	lsls	r2, r2, #1
 8109766:	e7c6      	b.n	81096f6 <_dtoa_r+0x26e>
 8109768:	636f4361 	.word	0x636f4361
 810976c:	3fd287a7 	.word	0x3fd287a7
 8109770:	8b60c8b3 	.word	0x8b60c8b3
 8109774:	3fc68a28 	.word	0x3fc68a28
 8109778:	509f79fb 	.word	0x509f79fb
 810977c:	3fd34413 	.word	0x3fd34413
 8109780:	0810bf06 	.word	0x0810bf06
 8109784:	0810bf1d 	.word	0x0810bf1d
 8109788:	7ff00000 	.word	0x7ff00000
 810978c:	0810bf02 	.word	0x0810bf02
 8109790:	0810bef9 	.word	0x0810bef9
 8109794:	0810bd7a 	.word	0x0810bd7a
 8109798:	3ff80000 	.word	0x3ff80000
 810979c:	0810c0f8 	.word	0x0810c0f8
 81097a0:	0810bf7c 	.word	0x0810bf7c
 81097a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81097a6:	9a00      	ldr	r2, [sp, #0]
 81097a8:	601a      	str	r2, [r3, #0]
 81097aa:	9b01      	ldr	r3, [sp, #4]
 81097ac:	2b0e      	cmp	r3, #14
 81097ae:	f200 80ad 	bhi.w	810990c <_dtoa_r+0x484>
 81097b2:	2d00      	cmp	r5, #0
 81097b4:	f000 80aa 	beq.w	810990c <_dtoa_r+0x484>
 81097b8:	f1ba 0f00 	cmp.w	sl, #0
 81097bc:	dd36      	ble.n	810982c <_dtoa_r+0x3a4>
 81097be:	4ac3      	ldr	r2, [pc, #780]	; (8109acc <_dtoa_r+0x644>)
 81097c0:	f00a 030f 	and.w	r3, sl, #15
 81097c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81097c8:	ed93 7b00 	vldr	d7, [r3]
 81097cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81097d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 81097d4:	eeb0 8a47 	vmov.f32	s16, s14
 81097d8:	eef0 8a67 	vmov.f32	s17, s15
 81097dc:	d016      	beq.n	810980c <_dtoa_r+0x384>
 81097de:	4bbc      	ldr	r3, [pc, #752]	; (8109ad0 <_dtoa_r+0x648>)
 81097e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81097e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81097e8:	f7f7 f8c8 	bl	810097c <__aeabi_ddiv>
 81097ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81097f0:	f007 070f 	and.w	r7, r7, #15
 81097f4:	2503      	movs	r5, #3
 81097f6:	4eb6      	ldr	r6, [pc, #728]	; (8109ad0 <_dtoa_r+0x648>)
 81097f8:	b957      	cbnz	r7, 8109810 <_dtoa_r+0x388>
 81097fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81097fe:	ec53 2b18 	vmov	r2, r3, d8
 8109802:	f7f7 f8bb 	bl	810097c <__aeabi_ddiv>
 8109806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810980a:	e029      	b.n	8109860 <_dtoa_r+0x3d8>
 810980c:	2502      	movs	r5, #2
 810980e:	e7f2      	b.n	81097f6 <_dtoa_r+0x36e>
 8109810:	07f9      	lsls	r1, r7, #31
 8109812:	d508      	bpl.n	8109826 <_dtoa_r+0x39e>
 8109814:	ec51 0b18 	vmov	r0, r1, d8
 8109818:	e9d6 2300 	ldrd	r2, r3, [r6]
 810981c:	f7f6 ff84 	bl	8100728 <__aeabi_dmul>
 8109820:	ec41 0b18 	vmov	d8, r0, r1
 8109824:	3501      	adds	r5, #1
 8109826:	107f      	asrs	r7, r7, #1
 8109828:	3608      	adds	r6, #8
 810982a:	e7e5      	b.n	81097f8 <_dtoa_r+0x370>
 810982c:	f000 80a6 	beq.w	810997c <_dtoa_r+0x4f4>
 8109830:	f1ca 0600 	rsb	r6, sl, #0
 8109834:	4ba5      	ldr	r3, [pc, #660]	; (8109acc <_dtoa_r+0x644>)
 8109836:	4fa6      	ldr	r7, [pc, #664]	; (8109ad0 <_dtoa_r+0x648>)
 8109838:	f006 020f 	and.w	r2, r6, #15
 810983c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109844:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109848:	f7f6 ff6e 	bl	8100728 <__aeabi_dmul>
 810984c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109850:	1136      	asrs	r6, r6, #4
 8109852:	2300      	movs	r3, #0
 8109854:	2502      	movs	r5, #2
 8109856:	2e00      	cmp	r6, #0
 8109858:	f040 8085 	bne.w	8109966 <_dtoa_r+0x4de>
 810985c:	2b00      	cmp	r3, #0
 810985e:	d1d2      	bne.n	8109806 <_dtoa_r+0x37e>
 8109860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109862:	2b00      	cmp	r3, #0
 8109864:	f000 808c 	beq.w	8109980 <_dtoa_r+0x4f8>
 8109868:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810986c:	4b99      	ldr	r3, [pc, #612]	; (8109ad4 <_dtoa_r+0x64c>)
 810986e:	2200      	movs	r2, #0
 8109870:	4630      	mov	r0, r6
 8109872:	4639      	mov	r1, r7
 8109874:	f7f7 f9ca 	bl	8100c0c <__aeabi_dcmplt>
 8109878:	2800      	cmp	r0, #0
 810987a:	f000 8081 	beq.w	8109980 <_dtoa_r+0x4f8>
 810987e:	9b01      	ldr	r3, [sp, #4]
 8109880:	2b00      	cmp	r3, #0
 8109882:	d07d      	beq.n	8109980 <_dtoa_r+0x4f8>
 8109884:	f1b9 0f00 	cmp.w	r9, #0
 8109888:	dd3c      	ble.n	8109904 <_dtoa_r+0x47c>
 810988a:	f10a 33ff 	add.w	r3, sl, #4294967295
 810988e:	9307      	str	r3, [sp, #28]
 8109890:	2200      	movs	r2, #0
 8109892:	4b91      	ldr	r3, [pc, #580]	; (8109ad8 <_dtoa_r+0x650>)
 8109894:	4630      	mov	r0, r6
 8109896:	4639      	mov	r1, r7
 8109898:	f7f6 ff46 	bl	8100728 <__aeabi_dmul>
 810989c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81098a0:	3501      	adds	r5, #1
 81098a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 81098a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81098aa:	4628      	mov	r0, r5
 81098ac:	f7f6 fed2 	bl	8100654 <__aeabi_i2d>
 81098b0:	4632      	mov	r2, r6
 81098b2:	463b      	mov	r3, r7
 81098b4:	f7f6 ff38 	bl	8100728 <__aeabi_dmul>
 81098b8:	4b88      	ldr	r3, [pc, #544]	; (8109adc <_dtoa_r+0x654>)
 81098ba:	2200      	movs	r2, #0
 81098bc:	f7f6 fd7e 	bl	81003bc <__adddf3>
 81098c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81098c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81098c8:	9303      	str	r3, [sp, #12]
 81098ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81098cc:	2b00      	cmp	r3, #0
 81098ce:	d15c      	bne.n	810998a <_dtoa_r+0x502>
 81098d0:	4b83      	ldr	r3, [pc, #524]	; (8109ae0 <_dtoa_r+0x658>)
 81098d2:	2200      	movs	r2, #0
 81098d4:	4630      	mov	r0, r6
 81098d6:	4639      	mov	r1, r7
 81098d8:	f7f6 fd6e 	bl	81003b8 <__aeabi_dsub>
 81098dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81098e0:	4606      	mov	r6, r0
 81098e2:	460f      	mov	r7, r1
 81098e4:	f7f7 f9b0 	bl	8100c48 <__aeabi_dcmpgt>
 81098e8:	2800      	cmp	r0, #0
 81098ea:	f040 8296 	bne.w	8109e1a <_dtoa_r+0x992>
 81098ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 81098f2:	4630      	mov	r0, r6
 81098f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81098f8:	4639      	mov	r1, r7
 81098fa:	f7f7 f987 	bl	8100c0c <__aeabi_dcmplt>
 81098fe:	2800      	cmp	r0, #0
 8109900:	f040 8288 	bne.w	8109e14 <_dtoa_r+0x98c>
 8109904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810990c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810990e:	2b00      	cmp	r3, #0
 8109910:	f2c0 8158 	blt.w	8109bc4 <_dtoa_r+0x73c>
 8109914:	f1ba 0f0e 	cmp.w	sl, #14
 8109918:	f300 8154 	bgt.w	8109bc4 <_dtoa_r+0x73c>
 810991c:	4b6b      	ldr	r3, [pc, #428]	; (8109acc <_dtoa_r+0x644>)
 810991e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109922:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109928:	2b00      	cmp	r3, #0
 810992a:	f280 80e3 	bge.w	8109af4 <_dtoa_r+0x66c>
 810992e:	9b01      	ldr	r3, [sp, #4]
 8109930:	2b00      	cmp	r3, #0
 8109932:	f300 80df 	bgt.w	8109af4 <_dtoa_r+0x66c>
 8109936:	f040 826d 	bne.w	8109e14 <_dtoa_r+0x98c>
 810993a:	4b69      	ldr	r3, [pc, #420]	; (8109ae0 <_dtoa_r+0x658>)
 810993c:	2200      	movs	r2, #0
 810993e:	4640      	mov	r0, r8
 8109940:	4649      	mov	r1, r9
 8109942:	f7f6 fef1 	bl	8100728 <__aeabi_dmul>
 8109946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810994a:	f7f7 f973 	bl	8100c34 <__aeabi_dcmpge>
 810994e:	9e01      	ldr	r6, [sp, #4]
 8109950:	4637      	mov	r7, r6
 8109952:	2800      	cmp	r0, #0
 8109954:	f040 8243 	bne.w	8109dde <_dtoa_r+0x956>
 8109958:	9d00      	ldr	r5, [sp, #0]
 810995a:	2331      	movs	r3, #49	; 0x31
 810995c:	f805 3b01 	strb.w	r3, [r5], #1
 8109960:	f10a 0a01 	add.w	sl, sl, #1
 8109964:	e23f      	b.n	8109de6 <_dtoa_r+0x95e>
 8109966:	07f2      	lsls	r2, r6, #31
 8109968:	d505      	bpl.n	8109976 <_dtoa_r+0x4ee>
 810996a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810996e:	f7f6 fedb 	bl	8100728 <__aeabi_dmul>
 8109972:	3501      	adds	r5, #1
 8109974:	2301      	movs	r3, #1
 8109976:	1076      	asrs	r6, r6, #1
 8109978:	3708      	adds	r7, #8
 810997a:	e76c      	b.n	8109856 <_dtoa_r+0x3ce>
 810997c:	2502      	movs	r5, #2
 810997e:	e76f      	b.n	8109860 <_dtoa_r+0x3d8>
 8109980:	9b01      	ldr	r3, [sp, #4]
 8109982:	f8cd a01c 	str.w	sl, [sp, #28]
 8109986:	930c      	str	r3, [sp, #48]	; 0x30
 8109988:	e78d      	b.n	81098a6 <_dtoa_r+0x41e>
 810998a:	9900      	ldr	r1, [sp, #0]
 810998c:	980c      	ldr	r0, [sp, #48]	; 0x30
 810998e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109990:	4b4e      	ldr	r3, [pc, #312]	; (8109acc <_dtoa_r+0x644>)
 8109992:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109996:	4401      	add	r1, r0
 8109998:	9102      	str	r1, [sp, #8]
 810999a:	9908      	ldr	r1, [sp, #32]
 810999c:	eeb0 8a47 	vmov.f32	s16, s14
 81099a0:	eef0 8a67 	vmov.f32	s17, s15
 81099a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81099a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81099ac:	2900      	cmp	r1, #0
 81099ae:	d045      	beq.n	8109a3c <_dtoa_r+0x5b4>
 81099b0:	494c      	ldr	r1, [pc, #304]	; (8109ae4 <_dtoa_r+0x65c>)
 81099b2:	2000      	movs	r0, #0
 81099b4:	f7f6 ffe2 	bl	810097c <__aeabi_ddiv>
 81099b8:	ec53 2b18 	vmov	r2, r3, d8
 81099bc:	f7f6 fcfc 	bl	81003b8 <__aeabi_dsub>
 81099c0:	9d00      	ldr	r5, [sp, #0]
 81099c2:	ec41 0b18 	vmov	d8, r0, r1
 81099c6:	4639      	mov	r1, r7
 81099c8:	4630      	mov	r0, r6
 81099ca:	f7f7 f95d 	bl	8100c88 <__aeabi_d2iz>
 81099ce:	900c      	str	r0, [sp, #48]	; 0x30
 81099d0:	f7f6 fe40 	bl	8100654 <__aeabi_i2d>
 81099d4:	4602      	mov	r2, r0
 81099d6:	460b      	mov	r3, r1
 81099d8:	4630      	mov	r0, r6
 81099da:	4639      	mov	r1, r7
 81099dc:	f7f6 fcec 	bl	81003b8 <__aeabi_dsub>
 81099e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81099e2:	3330      	adds	r3, #48	; 0x30
 81099e4:	f805 3b01 	strb.w	r3, [r5], #1
 81099e8:	ec53 2b18 	vmov	r2, r3, d8
 81099ec:	4606      	mov	r6, r0
 81099ee:	460f      	mov	r7, r1
 81099f0:	f7f7 f90c 	bl	8100c0c <__aeabi_dcmplt>
 81099f4:	2800      	cmp	r0, #0
 81099f6:	d165      	bne.n	8109ac4 <_dtoa_r+0x63c>
 81099f8:	4632      	mov	r2, r6
 81099fa:	463b      	mov	r3, r7
 81099fc:	4935      	ldr	r1, [pc, #212]	; (8109ad4 <_dtoa_r+0x64c>)
 81099fe:	2000      	movs	r0, #0
 8109a00:	f7f6 fcda 	bl	81003b8 <__aeabi_dsub>
 8109a04:	ec53 2b18 	vmov	r2, r3, d8
 8109a08:	f7f7 f900 	bl	8100c0c <__aeabi_dcmplt>
 8109a0c:	2800      	cmp	r0, #0
 8109a0e:	f040 80b9 	bne.w	8109b84 <_dtoa_r+0x6fc>
 8109a12:	9b02      	ldr	r3, [sp, #8]
 8109a14:	429d      	cmp	r5, r3
 8109a16:	f43f af75 	beq.w	8109904 <_dtoa_r+0x47c>
 8109a1a:	4b2f      	ldr	r3, [pc, #188]	; (8109ad8 <_dtoa_r+0x650>)
 8109a1c:	ec51 0b18 	vmov	r0, r1, d8
 8109a20:	2200      	movs	r2, #0
 8109a22:	f7f6 fe81 	bl	8100728 <__aeabi_dmul>
 8109a26:	4b2c      	ldr	r3, [pc, #176]	; (8109ad8 <_dtoa_r+0x650>)
 8109a28:	ec41 0b18 	vmov	d8, r0, r1
 8109a2c:	2200      	movs	r2, #0
 8109a2e:	4630      	mov	r0, r6
 8109a30:	4639      	mov	r1, r7
 8109a32:	f7f6 fe79 	bl	8100728 <__aeabi_dmul>
 8109a36:	4606      	mov	r6, r0
 8109a38:	460f      	mov	r7, r1
 8109a3a:	e7c4      	b.n	81099c6 <_dtoa_r+0x53e>
 8109a3c:	ec51 0b17 	vmov	r0, r1, d7
 8109a40:	f7f6 fe72 	bl	8100728 <__aeabi_dmul>
 8109a44:	9b02      	ldr	r3, [sp, #8]
 8109a46:	9d00      	ldr	r5, [sp, #0]
 8109a48:	930c      	str	r3, [sp, #48]	; 0x30
 8109a4a:	ec41 0b18 	vmov	d8, r0, r1
 8109a4e:	4639      	mov	r1, r7
 8109a50:	4630      	mov	r0, r6
 8109a52:	f7f7 f919 	bl	8100c88 <__aeabi_d2iz>
 8109a56:	9011      	str	r0, [sp, #68]	; 0x44
 8109a58:	f7f6 fdfc 	bl	8100654 <__aeabi_i2d>
 8109a5c:	4602      	mov	r2, r0
 8109a5e:	460b      	mov	r3, r1
 8109a60:	4630      	mov	r0, r6
 8109a62:	4639      	mov	r1, r7
 8109a64:	f7f6 fca8 	bl	81003b8 <__aeabi_dsub>
 8109a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109a6a:	3330      	adds	r3, #48	; 0x30
 8109a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8109a70:	9b02      	ldr	r3, [sp, #8]
 8109a72:	429d      	cmp	r5, r3
 8109a74:	4606      	mov	r6, r0
 8109a76:	460f      	mov	r7, r1
 8109a78:	f04f 0200 	mov.w	r2, #0
 8109a7c:	d134      	bne.n	8109ae8 <_dtoa_r+0x660>
 8109a7e:	4b19      	ldr	r3, [pc, #100]	; (8109ae4 <_dtoa_r+0x65c>)
 8109a80:	ec51 0b18 	vmov	r0, r1, d8
 8109a84:	f7f6 fc9a 	bl	81003bc <__adddf3>
 8109a88:	4602      	mov	r2, r0
 8109a8a:	460b      	mov	r3, r1
 8109a8c:	4630      	mov	r0, r6
 8109a8e:	4639      	mov	r1, r7
 8109a90:	f7f7 f8da 	bl	8100c48 <__aeabi_dcmpgt>
 8109a94:	2800      	cmp	r0, #0
 8109a96:	d175      	bne.n	8109b84 <_dtoa_r+0x6fc>
 8109a98:	ec53 2b18 	vmov	r2, r3, d8
 8109a9c:	4911      	ldr	r1, [pc, #68]	; (8109ae4 <_dtoa_r+0x65c>)
 8109a9e:	2000      	movs	r0, #0
 8109aa0:	f7f6 fc8a 	bl	81003b8 <__aeabi_dsub>
 8109aa4:	4602      	mov	r2, r0
 8109aa6:	460b      	mov	r3, r1
 8109aa8:	4630      	mov	r0, r6
 8109aaa:	4639      	mov	r1, r7
 8109aac:	f7f7 f8ae 	bl	8100c0c <__aeabi_dcmplt>
 8109ab0:	2800      	cmp	r0, #0
 8109ab2:	f43f af27 	beq.w	8109904 <_dtoa_r+0x47c>
 8109ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109ab8:	1e6b      	subs	r3, r5, #1
 8109aba:	930c      	str	r3, [sp, #48]	; 0x30
 8109abc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109ac0:	2b30      	cmp	r3, #48	; 0x30
 8109ac2:	d0f8      	beq.n	8109ab6 <_dtoa_r+0x62e>
 8109ac4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109ac8:	e04a      	b.n	8109b60 <_dtoa_r+0x6d8>
 8109aca:	bf00      	nop
 8109acc:	0810c0f8 	.word	0x0810c0f8
 8109ad0:	0810c0d0 	.word	0x0810c0d0
 8109ad4:	3ff00000 	.word	0x3ff00000
 8109ad8:	40240000 	.word	0x40240000
 8109adc:	401c0000 	.word	0x401c0000
 8109ae0:	40140000 	.word	0x40140000
 8109ae4:	3fe00000 	.word	0x3fe00000
 8109ae8:	4baf      	ldr	r3, [pc, #700]	; (8109da8 <_dtoa_r+0x920>)
 8109aea:	f7f6 fe1d 	bl	8100728 <__aeabi_dmul>
 8109aee:	4606      	mov	r6, r0
 8109af0:	460f      	mov	r7, r1
 8109af2:	e7ac      	b.n	8109a4e <_dtoa_r+0x5c6>
 8109af4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109af8:	9d00      	ldr	r5, [sp, #0]
 8109afa:	4642      	mov	r2, r8
 8109afc:	464b      	mov	r3, r9
 8109afe:	4630      	mov	r0, r6
 8109b00:	4639      	mov	r1, r7
 8109b02:	f7f6 ff3b 	bl	810097c <__aeabi_ddiv>
 8109b06:	f7f7 f8bf 	bl	8100c88 <__aeabi_d2iz>
 8109b0a:	9002      	str	r0, [sp, #8]
 8109b0c:	f7f6 fda2 	bl	8100654 <__aeabi_i2d>
 8109b10:	4642      	mov	r2, r8
 8109b12:	464b      	mov	r3, r9
 8109b14:	f7f6 fe08 	bl	8100728 <__aeabi_dmul>
 8109b18:	4602      	mov	r2, r0
 8109b1a:	460b      	mov	r3, r1
 8109b1c:	4630      	mov	r0, r6
 8109b1e:	4639      	mov	r1, r7
 8109b20:	f7f6 fc4a 	bl	81003b8 <__aeabi_dsub>
 8109b24:	9e02      	ldr	r6, [sp, #8]
 8109b26:	9f01      	ldr	r7, [sp, #4]
 8109b28:	3630      	adds	r6, #48	; 0x30
 8109b2a:	f805 6b01 	strb.w	r6, [r5], #1
 8109b2e:	9e00      	ldr	r6, [sp, #0]
 8109b30:	1bae      	subs	r6, r5, r6
 8109b32:	42b7      	cmp	r7, r6
 8109b34:	4602      	mov	r2, r0
 8109b36:	460b      	mov	r3, r1
 8109b38:	d137      	bne.n	8109baa <_dtoa_r+0x722>
 8109b3a:	f7f6 fc3f 	bl	81003bc <__adddf3>
 8109b3e:	4642      	mov	r2, r8
 8109b40:	464b      	mov	r3, r9
 8109b42:	4606      	mov	r6, r0
 8109b44:	460f      	mov	r7, r1
 8109b46:	f7f7 f87f 	bl	8100c48 <__aeabi_dcmpgt>
 8109b4a:	b9c8      	cbnz	r0, 8109b80 <_dtoa_r+0x6f8>
 8109b4c:	4642      	mov	r2, r8
 8109b4e:	464b      	mov	r3, r9
 8109b50:	4630      	mov	r0, r6
 8109b52:	4639      	mov	r1, r7
 8109b54:	f7f7 f850 	bl	8100bf8 <__aeabi_dcmpeq>
 8109b58:	b110      	cbz	r0, 8109b60 <_dtoa_r+0x6d8>
 8109b5a:	9b02      	ldr	r3, [sp, #8]
 8109b5c:	07d9      	lsls	r1, r3, #31
 8109b5e:	d40f      	bmi.n	8109b80 <_dtoa_r+0x6f8>
 8109b60:	4620      	mov	r0, r4
 8109b62:	4659      	mov	r1, fp
 8109b64:	f001 f886 	bl	810ac74 <_Bfree>
 8109b68:	2300      	movs	r3, #0
 8109b6a:	702b      	strb	r3, [r5, #0]
 8109b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109b6e:	f10a 0001 	add.w	r0, sl, #1
 8109b72:	6018      	str	r0, [r3, #0]
 8109b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109b76:	2b00      	cmp	r3, #0
 8109b78:	f43f acd8 	beq.w	810952c <_dtoa_r+0xa4>
 8109b7c:	601d      	str	r5, [r3, #0]
 8109b7e:	e4d5      	b.n	810952c <_dtoa_r+0xa4>
 8109b80:	f8cd a01c 	str.w	sl, [sp, #28]
 8109b84:	462b      	mov	r3, r5
 8109b86:	461d      	mov	r5, r3
 8109b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109b8c:	2a39      	cmp	r2, #57	; 0x39
 8109b8e:	d108      	bne.n	8109ba2 <_dtoa_r+0x71a>
 8109b90:	9a00      	ldr	r2, [sp, #0]
 8109b92:	429a      	cmp	r2, r3
 8109b94:	d1f7      	bne.n	8109b86 <_dtoa_r+0x6fe>
 8109b96:	9a07      	ldr	r2, [sp, #28]
 8109b98:	9900      	ldr	r1, [sp, #0]
 8109b9a:	3201      	adds	r2, #1
 8109b9c:	9207      	str	r2, [sp, #28]
 8109b9e:	2230      	movs	r2, #48	; 0x30
 8109ba0:	700a      	strb	r2, [r1, #0]
 8109ba2:	781a      	ldrb	r2, [r3, #0]
 8109ba4:	3201      	adds	r2, #1
 8109ba6:	701a      	strb	r2, [r3, #0]
 8109ba8:	e78c      	b.n	8109ac4 <_dtoa_r+0x63c>
 8109baa:	4b7f      	ldr	r3, [pc, #508]	; (8109da8 <_dtoa_r+0x920>)
 8109bac:	2200      	movs	r2, #0
 8109bae:	f7f6 fdbb 	bl	8100728 <__aeabi_dmul>
 8109bb2:	2200      	movs	r2, #0
 8109bb4:	2300      	movs	r3, #0
 8109bb6:	4606      	mov	r6, r0
 8109bb8:	460f      	mov	r7, r1
 8109bba:	f7f7 f81d 	bl	8100bf8 <__aeabi_dcmpeq>
 8109bbe:	2800      	cmp	r0, #0
 8109bc0:	d09b      	beq.n	8109afa <_dtoa_r+0x672>
 8109bc2:	e7cd      	b.n	8109b60 <_dtoa_r+0x6d8>
 8109bc4:	9a08      	ldr	r2, [sp, #32]
 8109bc6:	2a00      	cmp	r2, #0
 8109bc8:	f000 80c4 	beq.w	8109d54 <_dtoa_r+0x8cc>
 8109bcc:	9a05      	ldr	r2, [sp, #20]
 8109bce:	2a01      	cmp	r2, #1
 8109bd0:	f300 80a8 	bgt.w	8109d24 <_dtoa_r+0x89c>
 8109bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8109bd6:	2a00      	cmp	r2, #0
 8109bd8:	f000 80a0 	beq.w	8109d1c <_dtoa_r+0x894>
 8109bdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109be0:	9e06      	ldr	r6, [sp, #24]
 8109be2:	4645      	mov	r5, r8
 8109be4:	9a04      	ldr	r2, [sp, #16]
 8109be6:	2101      	movs	r1, #1
 8109be8:	441a      	add	r2, r3
 8109bea:	4620      	mov	r0, r4
 8109bec:	4498      	add	r8, r3
 8109bee:	9204      	str	r2, [sp, #16]
 8109bf0:	f001 f946 	bl	810ae80 <__i2b>
 8109bf4:	4607      	mov	r7, r0
 8109bf6:	2d00      	cmp	r5, #0
 8109bf8:	dd0b      	ble.n	8109c12 <_dtoa_r+0x78a>
 8109bfa:	9b04      	ldr	r3, [sp, #16]
 8109bfc:	2b00      	cmp	r3, #0
 8109bfe:	dd08      	ble.n	8109c12 <_dtoa_r+0x78a>
 8109c00:	42ab      	cmp	r3, r5
 8109c02:	9a04      	ldr	r2, [sp, #16]
 8109c04:	bfa8      	it	ge
 8109c06:	462b      	movge	r3, r5
 8109c08:	eba8 0803 	sub.w	r8, r8, r3
 8109c0c:	1aed      	subs	r5, r5, r3
 8109c0e:	1ad3      	subs	r3, r2, r3
 8109c10:	9304      	str	r3, [sp, #16]
 8109c12:	9b06      	ldr	r3, [sp, #24]
 8109c14:	b1fb      	cbz	r3, 8109c56 <_dtoa_r+0x7ce>
 8109c16:	9b08      	ldr	r3, [sp, #32]
 8109c18:	2b00      	cmp	r3, #0
 8109c1a:	f000 809f 	beq.w	8109d5c <_dtoa_r+0x8d4>
 8109c1e:	2e00      	cmp	r6, #0
 8109c20:	dd11      	ble.n	8109c46 <_dtoa_r+0x7be>
 8109c22:	4639      	mov	r1, r7
 8109c24:	4632      	mov	r2, r6
 8109c26:	4620      	mov	r0, r4
 8109c28:	f001 f9e6 	bl	810aff8 <__pow5mult>
 8109c2c:	465a      	mov	r2, fp
 8109c2e:	4601      	mov	r1, r0
 8109c30:	4607      	mov	r7, r0
 8109c32:	4620      	mov	r0, r4
 8109c34:	f001 f93a 	bl	810aeac <__multiply>
 8109c38:	4659      	mov	r1, fp
 8109c3a:	9007      	str	r0, [sp, #28]
 8109c3c:	4620      	mov	r0, r4
 8109c3e:	f001 f819 	bl	810ac74 <_Bfree>
 8109c42:	9b07      	ldr	r3, [sp, #28]
 8109c44:	469b      	mov	fp, r3
 8109c46:	9b06      	ldr	r3, [sp, #24]
 8109c48:	1b9a      	subs	r2, r3, r6
 8109c4a:	d004      	beq.n	8109c56 <_dtoa_r+0x7ce>
 8109c4c:	4659      	mov	r1, fp
 8109c4e:	4620      	mov	r0, r4
 8109c50:	f001 f9d2 	bl	810aff8 <__pow5mult>
 8109c54:	4683      	mov	fp, r0
 8109c56:	2101      	movs	r1, #1
 8109c58:	4620      	mov	r0, r4
 8109c5a:	f001 f911 	bl	810ae80 <__i2b>
 8109c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109c60:	2b00      	cmp	r3, #0
 8109c62:	4606      	mov	r6, r0
 8109c64:	dd7c      	ble.n	8109d60 <_dtoa_r+0x8d8>
 8109c66:	461a      	mov	r2, r3
 8109c68:	4601      	mov	r1, r0
 8109c6a:	4620      	mov	r0, r4
 8109c6c:	f001 f9c4 	bl	810aff8 <__pow5mult>
 8109c70:	9b05      	ldr	r3, [sp, #20]
 8109c72:	2b01      	cmp	r3, #1
 8109c74:	4606      	mov	r6, r0
 8109c76:	dd76      	ble.n	8109d66 <_dtoa_r+0x8de>
 8109c78:	2300      	movs	r3, #0
 8109c7a:	9306      	str	r3, [sp, #24]
 8109c7c:	6933      	ldr	r3, [r6, #16]
 8109c7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109c82:	6918      	ldr	r0, [r3, #16]
 8109c84:	f001 f8ac 	bl	810ade0 <__hi0bits>
 8109c88:	f1c0 0020 	rsb	r0, r0, #32
 8109c8c:	9b04      	ldr	r3, [sp, #16]
 8109c8e:	4418      	add	r0, r3
 8109c90:	f010 001f 	ands.w	r0, r0, #31
 8109c94:	f000 8086 	beq.w	8109da4 <_dtoa_r+0x91c>
 8109c98:	f1c0 0320 	rsb	r3, r0, #32
 8109c9c:	2b04      	cmp	r3, #4
 8109c9e:	dd7f      	ble.n	8109da0 <_dtoa_r+0x918>
 8109ca0:	f1c0 001c 	rsb	r0, r0, #28
 8109ca4:	9b04      	ldr	r3, [sp, #16]
 8109ca6:	4403      	add	r3, r0
 8109ca8:	4480      	add	r8, r0
 8109caa:	4405      	add	r5, r0
 8109cac:	9304      	str	r3, [sp, #16]
 8109cae:	f1b8 0f00 	cmp.w	r8, #0
 8109cb2:	dd05      	ble.n	8109cc0 <_dtoa_r+0x838>
 8109cb4:	4659      	mov	r1, fp
 8109cb6:	4642      	mov	r2, r8
 8109cb8:	4620      	mov	r0, r4
 8109cba:	f001 f9f7 	bl	810b0ac <__lshift>
 8109cbe:	4683      	mov	fp, r0
 8109cc0:	9b04      	ldr	r3, [sp, #16]
 8109cc2:	2b00      	cmp	r3, #0
 8109cc4:	dd05      	ble.n	8109cd2 <_dtoa_r+0x84a>
 8109cc6:	4631      	mov	r1, r6
 8109cc8:	461a      	mov	r2, r3
 8109cca:	4620      	mov	r0, r4
 8109ccc:	f001 f9ee 	bl	810b0ac <__lshift>
 8109cd0:	4606      	mov	r6, r0
 8109cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109cd4:	2b00      	cmp	r3, #0
 8109cd6:	d069      	beq.n	8109dac <_dtoa_r+0x924>
 8109cd8:	4631      	mov	r1, r6
 8109cda:	4658      	mov	r0, fp
 8109cdc:	f001 fa52 	bl	810b184 <__mcmp>
 8109ce0:	2800      	cmp	r0, #0
 8109ce2:	da63      	bge.n	8109dac <_dtoa_r+0x924>
 8109ce4:	2300      	movs	r3, #0
 8109ce6:	4659      	mov	r1, fp
 8109ce8:	220a      	movs	r2, #10
 8109cea:	4620      	mov	r0, r4
 8109cec:	f000 ffe4 	bl	810acb8 <__multadd>
 8109cf0:	9b08      	ldr	r3, [sp, #32]
 8109cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109cf6:	4683      	mov	fp, r0
 8109cf8:	2b00      	cmp	r3, #0
 8109cfa:	f000 818f 	beq.w	810a01c <_dtoa_r+0xb94>
 8109cfe:	4639      	mov	r1, r7
 8109d00:	2300      	movs	r3, #0
 8109d02:	220a      	movs	r2, #10
 8109d04:	4620      	mov	r0, r4
 8109d06:	f000 ffd7 	bl	810acb8 <__multadd>
 8109d0a:	f1b9 0f00 	cmp.w	r9, #0
 8109d0e:	4607      	mov	r7, r0
 8109d10:	f300 808e 	bgt.w	8109e30 <_dtoa_r+0x9a8>
 8109d14:	9b05      	ldr	r3, [sp, #20]
 8109d16:	2b02      	cmp	r3, #2
 8109d18:	dc50      	bgt.n	8109dbc <_dtoa_r+0x934>
 8109d1a:	e089      	b.n	8109e30 <_dtoa_r+0x9a8>
 8109d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109d22:	e75d      	b.n	8109be0 <_dtoa_r+0x758>
 8109d24:	9b01      	ldr	r3, [sp, #4]
 8109d26:	1e5e      	subs	r6, r3, #1
 8109d28:	9b06      	ldr	r3, [sp, #24]
 8109d2a:	42b3      	cmp	r3, r6
 8109d2c:	bfbf      	itttt	lt
 8109d2e:	9b06      	ldrlt	r3, [sp, #24]
 8109d30:	9606      	strlt	r6, [sp, #24]
 8109d32:	1af2      	sublt	r2, r6, r3
 8109d34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8109d36:	bfb6      	itet	lt
 8109d38:	189b      	addlt	r3, r3, r2
 8109d3a:	1b9e      	subge	r6, r3, r6
 8109d3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8109d3e:	9b01      	ldr	r3, [sp, #4]
 8109d40:	bfb8      	it	lt
 8109d42:	2600      	movlt	r6, #0
 8109d44:	2b00      	cmp	r3, #0
 8109d46:	bfb5      	itete	lt
 8109d48:	eba8 0503 	sublt.w	r5, r8, r3
 8109d4c:	9b01      	ldrge	r3, [sp, #4]
 8109d4e:	2300      	movlt	r3, #0
 8109d50:	4645      	movge	r5, r8
 8109d52:	e747      	b.n	8109be4 <_dtoa_r+0x75c>
 8109d54:	9e06      	ldr	r6, [sp, #24]
 8109d56:	9f08      	ldr	r7, [sp, #32]
 8109d58:	4645      	mov	r5, r8
 8109d5a:	e74c      	b.n	8109bf6 <_dtoa_r+0x76e>
 8109d5c:	9a06      	ldr	r2, [sp, #24]
 8109d5e:	e775      	b.n	8109c4c <_dtoa_r+0x7c4>
 8109d60:	9b05      	ldr	r3, [sp, #20]
 8109d62:	2b01      	cmp	r3, #1
 8109d64:	dc18      	bgt.n	8109d98 <_dtoa_r+0x910>
 8109d66:	9b02      	ldr	r3, [sp, #8]
 8109d68:	b9b3      	cbnz	r3, 8109d98 <_dtoa_r+0x910>
 8109d6a:	9b03      	ldr	r3, [sp, #12]
 8109d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109d70:	b9a3      	cbnz	r3, 8109d9c <_dtoa_r+0x914>
 8109d72:	9b03      	ldr	r3, [sp, #12]
 8109d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109d78:	0d1b      	lsrs	r3, r3, #20
 8109d7a:	051b      	lsls	r3, r3, #20
 8109d7c:	b12b      	cbz	r3, 8109d8a <_dtoa_r+0x902>
 8109d7e:	9b04      	ldr	r3, [sp, #16]
 8109d80:	3301      	adds	r3, #1
 8109d82:	9304      	str	r3, [sp, #16]
 8109d84:	f108 0801 	add.w	r8, r8, #1
 8109d88:	2301      	movs	r3, #1
 8109d8a:	9306      	str	r3, [sp, #24]
 8109d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109d8e:	2b00      	cmp	r3, #0
 8109d90:	f47f af74 	bne.w	8109c7c <_dtoa_r+0x7f4>
 8109d94:	2001      	movs	r0, #1
 8109d96:	e779      	b.n	8109c8c <_dtoa_r+0x804>
 8109d98:	2300      	movs	r3, #0
 8109d9a:	e7f6      	b.n	8109d8a <_dtoa_r+0x902>
 8109d9c:	9b02      	ldr	r3, [sp, #8]
 8109d9e:	e7f4      	b.n	8109d8a <_dtoa_r+0x902>
 8109da0:	d085      	beq.n	8109cae <_dtoa_r+0x826>
 8109da2:	4618      	mov	r0, r3
 8109da4:	301c      	adds	r0, #28
 8109da6:	e77d      	b.n	8109ca4 <_dtoa_r+0x81c>
 8109da8:	40240000 	.word	0x40240000
 8109dac:	9b01      	ldr	r3, [sp, #4]
 8109dae:	2b00      	cmp	r3, #0
 8109db0:	dc38      	bgt.n	8109e24 <_dtoa_r+0x99c>
 8109db2:	9b05      	ldr	r3, [sp, #20]
 8109db4:	2b02      	cmp	r3, #2
 8109db6:	dd35      	ble.n	8109e24 <_dtoa_r+0x99c>
 8109db8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109dbc:	f1b9 0f00 	cmp.w	r9, #0
 8109dc0:	d10d      	bne.n	8109dde <_dtoa_r+0x956>
 8109dc2:	4631      	mov	r1, r6
 8109dc4:	464b      	mov	r3, r9
 8109dc6:	2205      	movs	r2, #5
 8109dc8:	4620      	mov	r0, r4
 8109dca:	f000 ff75 	bl	810acb8 <__multadd>
 8109dce:	4601      	mov	r1, r0
 8109dd0:	4606      	mov	r6, r0
 8109dd2:	4658      	mov	r0, fp
 8109dd4:	f001 f9d6 	bl	810b184 <__mcmp>
 8109dd8:	2800      	cmp	r0, #0
 8109dda:	f73f adbd 	bgt.w	8109958 <_dtoa_r+0x4d0>
 8109dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109de0:	9d00      	ldr	r5, [sp, #0]
 8109de2:	ea6f 0a03 	mvn.w	sl, r3
 8109de6:	f04f 0800 	mov.w	r8, #0
 8109dea:	4631      	mov	r1, r6
 8109dec:	4620      	mov	r0, r4
 8109dee:	f000 ff41 	bl	810ac74 <_Bfree>
 8109df2:	2f00      	cmp	r7, #0
 8109df4:	f43f aeb4 	beq.w	8109b60 <_dtoa_r+0x6d8>
 8109df8:	f1b8 0f00 	cmp.w	r8, #0
 8109dfc:	d005      	beq.n	8109e0a <_dtoa_r+0x982>
 8109dfe:	45b8      	cmp	r8, r7
 8109e00:	d003      	beq.n	8109e0a <_dtoa_r+0x982>
 8109e02:	4641      	mov	r1, r8
 8109e04:	4620      	mov	r0, r4
 8109e06:	f000 ff35 	bl	810ac74 <_Bfree>
 8109e0a:	4639      	mov	r1, r7
 8109e0c:	4620      	mov	r0, r4
 8109e0e:	f000 ff31 	bl	810ac74 <_Bfree>
 8109e12:	e6a5      	b.n	8109b60 <_dtoa_r+0x6d8>
 8109e14:	2600      	movs	r6, #0
 8109e16:	4637      	mov	r7, r6
 8109e18:	e7e1      	b.n	8109dde <_dtoa_r+0x956>
 8109e1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8109e1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109e20:	4637      	mov	r7, r6
 8109e22:	e599      	b.n	8109958 <_dtoa_r+0x4d0>
 8109e24:	9b08      	ldr	r3, [sp, #32]
 8109e26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109e2a:	2b00      	cmp	r3, #0
 8109e2c:	f000 80fd 	beq.w	810a02a <_dtoa_r+0xba2>
 8109e30:	2d00      	cmp	r5, #0
 8109e32:	dd05      	ble.n	8109e40 <_dtoa_r+0x9b8>
 8109e34:	4639      	mov	r1, r7
 8109e36:	462a      	mov	r2, r5
 8109e38:	4620      	mov	r0, r4
 8109e3a:	f001 f937 	bl	810b0ac <__lshift>
 8109e3e:	4607      	mov	r7, r0
 8109e40:	9b06      	ldr	r3, [sp, #24]
 8109e42:	2b00      	cmp	r3, #0
 8109e44:	d05c      	beq.n	8109f00 <_dtoa_r+0xa78>
 8109e46:	6879      	ldr	r1, [r7, #4]
 8109e48:	4620      	mov	r0, r4
 8109e4a:	f000 fed3 	bl	810abf4 <_Balloc>
 8109e4e:	4605      	mov	r5, r0
 8109e50:	b928      	cbnz	r0, 8109e5e <_dtoa_r+0x9d6>
 8109e52:	4b80      	ldr	r3, [pc, #512]	; (810a054 <_dtoa_r+0xbcc>)
 8109e54:	4602      	mov	r2, r0
 8109e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109e5a:	f7ff bb2e 	b.w	81094ba <_dtoa_r+0x32>
 8109e5e:	693a      	ldr	r2, [r7, #16]
 8109e60:	3202      	adds	r2, #2
 8109e62:	0092      	lsls	r2, r2, #2
 8109e64:	f107 010c 	add.w	r1, r7, #12
 8109e68:	300c      	adds	r0, #12
 8109e6a:	f7fd fa19 	bl	81072a0 <memcpy>
 8109e6e:	2201      	movs	r2, #1
 8109e70:	4629      	mov	r1, r5
 8109e72:	4620      	mov	r0, r4
 8109e74:	f001 f91a 	bl	810b0ac <__lshift>
 8109e78:	9b00      	ldr	r3, [sp, #0]
 8109e7a:	3301      	adds	r3, #1
 8109e7c:	9301      	str	r3, [sp, #4]
 8109e7e:	9b00      	ldr	r3, [sp, #0]
 8109e80:	444b      	add	r3, r9
 8109e82:	9307      	str	r3, [sp, #28]
 8109e84:	9b02      	ldr	r3, [sp, #8]
 8109e86:	f003 0301 	and.w	r3, r3, #1
 8109e8a:	46b8      	mov	r8, r7
 8109e8c:	9306      	str	r3, [sp, #24]
 8109e8e:	4607      	mov	r7, r0
 8109e90:	9b01      	ldr	r3, [sp, #4]
 8109e92:	4631      	mov	r1, r6
 8109e94:	3b01      	subs	r3, #1
 8109e96:	4658      	mov	r0, fp
 8109e98:	9302      	str	r3, [sp, #8]
 8109e9a:	f7ff fa6a 	bl	8109372 <quorem>
 8109e9e:	4603      	mov	r3, r0
 8109ea0:	3330      	adds	r3, #48	; 0x30
 8109ea2:	9004      	str	r0, [sp, #16]
 8109ea4:	4641      	mov	r1, r8
 8109ea6:	4658      	mov	r0, fp
 8109ea8:	9308      	str	r3, [sp, #32]
 8109eaa:	f001 f96b 	bl	810b184 <__mcmp>
 8109eae:	463a      	mov	r2, r7
 8109eb0:	4681      	mov	r9, r0
 8109eb2:	4631      	mov	r1, r6
 8109eb4:	4620      	mov	r0, r4
 8109eb6:	f001 f981 	bl	810b1bc <__mdiff>
 8109eba:	68c2      	ldr	r2, [r0, #12]
 8109ebc:	9b08      	ldr	r3, [sp, #32]
 8109ebe:	4605      	mov	r5, r0
 8109ec0:	bb02      	cbnz	r2, 8109f04 <_dtoa_r+0xa7c>
 8109ec2:	4601      	mov	r1, r0
 8109ec4:	4658      	mov	r0, fp
 8109ec6:	f001 f95d 	bl	810b184 <__mcmp>
 8109eca:	9b08      	ldr	r3, [sp, #32]
 8109ecc:	4602      	mov	r2, r0
 8109ece:	4629      	mov	r1, r5
 8109ed0:	4620      	mov	r0, r4
 8109ed2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8109ed6:	f000 fecd 	bl	810ac74 <_Bfree>
 8109eda:	9b05      	ldr	r3, [sp, #20]
 8109edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109ede:	9d01      	ldr	r5, [sp, #4]
 8109ee0:	ea43 0102 	orr.w	r1, r3, r2
 8109ee4:	9b06      	ldr	r3, [sp, #24]
 8109ee6:	430b      	orrs	r3, r1
 8109ee8:	9b08      	ldr	r3, [sp, #32]
 8109eea:	d10d      	bne.n	8109f08 <_dtoa_r+0xa80>
 8109eec:	2b39      	cmp	r3, #57	; 0x39
 8109eee:	d029      	beq.n	8109f44 <_dtoa_r+0xabc>
 8109ef0:	f1b9 0f00 	cmp.w	r9, #0
 8109ef4:	dd01      	ble.n	8109efa <_dtoa_r+0xa72>
 8109ef6:	9b04      	ldr	r3, [sp, #16]
 8109ef8:	3331      	adds	r3, #49	; 0x31
 8109efa:	9a02      	ldr	r2, [sp, #8]
 8109efc:	7013      	strb	r3, [r2, #0]
 8109efe:	e774      	b.n	8109dea <_dtoa_r+0x962>
 8109f00:	4638      	mov	r0, r7
 8109f02:	e7b9      	b.n	8109e78 <_dtoa_r+0x9f0>
 8109f04:	2201      	movs	r2, #1
 8109f06:	e7e2      	b.n	8109ece <_dtoa_r+0xa46>
 8109f08:	f1b9 0f00 	cmp.w	r9, #0
 8109f0c:	db06      	blt.n	8109f1c <_dtoa_r+0xa94>
 8109f0e:	9905      	ldr	r1, [sp, #20]
 8109f10:	ea41 0909 	orr.w	r9, r1, r9
 8109f14:	9906      	ldr	r1, [sp, #24]
 8109f16:	ea59 0101 	orrs.w	r1, r9, r1
 8109f1a:	d120      	bne.n	8109f5e <_dtoa_r+0xad6>
 8109f1c:	2a00      	cmp	r2, #0
 8109f1e:	ddec      	ble.n	8109efa <_dtoa_r+0xa72>
 8109f20:	4659      	mov	r1, fp
 8109f22:	2201      	movs	r2, #1
 8109f24:	4620      	mov	r0, r4
 8109f26:	9301      	str	r3, [sp, #4]
 8109f28:	f001 f8c0 	bl	810b0ac <__lshift>
 8109f2c:	4631      	mov	r1, r6
 8109f2e:	4683      	mov	fp, r0
 8109f30:	f001 f928 	bl	810b184 <__mcmp>
 8109f34:	2800      	cmp	r0, #0
 8109f36:	9b01      	ldr	r3, [sp, #4]
 8109f38:	dc02      	bgt.n	8109f40 <_dtoa_r+0xab8>
 8109f3a:	d1de      	bne.n	8109efa <_dtoa_r+0xa72>
 8109f3c:	07da      	lsls	r2, r3, #31
 8109f3e:	d5dc      	bpl.n	8109efa <_dtoa_r+0xa72>
 8109f40:	2b39      	cmp	r3, #57	; 0x39
 8109f42:	d1d8      	bne.n	8109ef6 <_dtoa_r+0xa6e>
 8109f44:	9a02      	ldr	r2, [sp, #8]
 8109f46:	2339      	movs	r3, #57	; 0x39
 8109f48:	7013      	strb	r3, [r2, #0]
 8109f4a:	462b      	mov	r3, r5
 8109f4c:	461d      	mov	r5, r3
 8109f4e:	3b01      	subs	r3, #1
 8109f50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8109f54:	2a39      	cmp	r2, #57	; 0x39
 8109f56:	d050      	beq.n	8109ffa <_dtoa_r+0xb72>
 8109f58:	3201      	adds	r2, #1
 8109f5a:	701a      	strb	r2, [r3, #0]
 8109f5c:	e745      	b.n	8109dea <_dtoa_r+0x962>
 8109f5e:	2a00      	cmp	r2, #0
 8109f60:	dd03      	ble.n	8109f6a <_dtoa_r+0xae2>
 8109f62:	2b39      	cmp	r3, #57	; 0x39
 8109f64:	d0ee      	beq.n	8109f44 <_dtoa_r+0xabc>
 8109f66:	3301      	adds	r3, #1
 8109f68:	e7c7      	b.n	8109efa <_dtoa_r+0xa72>
 8109f6a:	9a01      	ldr	r2, [sp, #4]
 8109f6c:	9907      	ldr	r1, [sp, #28]
 8109f6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8109f72:	428a      	cmp	r2, r1
 8109f74:	d02a      	beq.n	8109fcc <_dtoa_r+0xb44>
 8109f76:	4659      	mov	r1, fp
 8109f78:	2300      	movs	r3, #0
 8109f7a:	220a      	movs	r2, #10
 8109f7c:	4620      	mov	r0, r4
 8109f7e:	f000 fe9b 	bl	810acb8 <__multadd>
 8109f82:	45b8      	cmp	r8, r7
 8109f84:	4683      	mov	fp, r0
 8109f86:	f04f 0300 	mov.w	r3, #0
 8109f8a:	f04f 020a 	mov.w	r2, #10
 8109f8e:	4641      	mov	r1, r8
 8109f90:	4620      	mov	r0, r4
 8109f92:	d107      	bne.n	8109fa4 <_dtoa_r+0xb1c>
 8109f94:	f000 fe90 	bl	810acb8 <__multadd>
 8109f98:	4680      	mov	r8, r0
 8109f9a:	4607      	mov	r7, r0
 8109f9c:	9b01      	ldr	r3, [sp, #4]
 8109f9e:	3301      	adds	r3, #1
 8109fa0:	9301      	str	r3, [sp, #4]
 8109fa2:	e775      	b.n	8109e90 <_dtoa_r+0xa08>
 8109fa4:	f000 fe88 	bl	810acb8 <__multadd>
 8109fa8:	4639      	mov	r1, r7
 8109faa:	4680      	mov	r8, r0
 8109fac:	2300      	movs	r3, #0
 8109fae:	220a      	movs	r2, #10
 8109fb0:	4620      	mov	r0, r4
 8109fb2:	f000 fe81 	bl	810acb8 <__multadd>
 8109fb6:	4607      	mov	r7, r0
 8109fb8:	e7f0      	b.n	8109f9c <_dtoa_r+0xb14>
 8109fba:	f1b9 0f00 	cmp.w	r9, #0
 8109fbe:	9a00      	ldr	r2, [sp, #0]
 8109fc0:	bfcc      	ite	gt
 8109fc2:	464d      	movgt	r5, r9
 8109fc4:	2501      	movle	r5, #1
 8109fc6:	4415      	add	r5, r2
 8109fc8:	f04f 0800 	mov.w	r8, #0
 8109fcc:	4659      	mov	r1, fp
 8109fce:	2201      	movs	r2, #1
 8109fd0:	4620      	mov	r0, r4
 8109fd2:	9301      	str	r3, [sp, #4]
 8109fd4:	f001 f86a 	bl	810b0ac <__lshift>
 8109fd8:	4631      	mov	r1, r6
 8109fda:	4683      	mov	fp, r0
 8109fdc:	f001 f8d2 	bl	810b184 <__mcmp>
 8109fe0:	2800      	cmp	r0, #0
 8109fe2:	dcb2      	bgt.n	8109f4a <_dtoa_r+0xac2>
 8109fe4:	d102      	bne.n	8109fec <_dtoa_r+0xb64>
 8109fe6:	9b01      	ldr	r3, [sp, #4]
 8109fe8:	07db      	lsls	r3, r3, #31
 8109fea:	d4ae      	bmi.n	8109f4a <_dtoa_r+0xac2>
 8109fec:	462b      	mov	r3, r5
 8109fee:	461d      	mov	r5, r3
 8109ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109ff4:	2a30      	cmp	r2, #48	; 0x30
 8109ff6:	d0fa      	beq.n	8109fee <_dtoa_r+0xb66>
 8109ff8:	e6f7      	b.n	8109dea <_dtoa_r+0x962>
 8109ffa:	9a00      	ldr	r2, [sp, #0]
 8109ffc:	429a      	cmp	r2, r3
 8109ffe:	d1a5      	bne.n	8109f4c <_dtoa_r+0xac4>
 810a000:	f10a 0a01 	add.w	sl, sl, #1
 810a004:	2331      	movs	r3, #49	; 0x31
 810a006:	e779      	b.n	8109efc <_dtoa_r+0xa74>
 810a008:	4b13      	ldr	r3, [pc, #76]	; (810a058 <_dtoa_r+0xbd0>)
 810a00a:	f7ff baaf 	b.w	810956c <_dtoa_r+0xe4>
 810a00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a010:	2b00      	cmp	r3, #0
 810a012:	f47f aa86 	bne.w	8109522 <_dtoa_r+0x9a>
 810a016:	4b11      	ldr	r3, [pc, #68]	; (810a05c <_dtoa_r+0xbd4>)
 810a018:	f7ff baa8 	b.w	810956c <_dtoa_r+0xe4>
 810a01c:	f1b9 0f00 	cmp.w	r9, #0
 810a020:	dc03      	bgt.n	810a02a <_dtoa_r+0xba2>
 810a022:	9b05      	ldr	r3, [sp, #20]
 810a024:	2b02      	cmp	r3, #2
 810a026:	f73f aec9 	bgt.w	8109dbc <_dtoa_r+0x934>
 810a02a:	9d00      	ldr	r5, [sp, #0]
 810a02c:	4631      	mov	r1, r6
 810a02e:	4658      	mov	r0, fp
 810a030:	f7ff f99f 	bl	8109372 <quorem>
 810a034:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810a038:	f805 3b01 	strb.w	r3, [r5], #1
 810a03c:	9a00      	ldr	r2, [sp, #0]
 810a03e:	1aaa      	subs	r2, r5, r2
 810a040:	4591      	cmp	r9, r2
 810a042:	ddba      	ble.n	8109fba <_dtoa_r+0xb32>
 810a044:	4659      	mov	r1, fp
 810a046:	2300      	movs	r3, #0
 810a048:	220a      	movs	r2, #10
 810a04a:	4620      	mov	r0, r4
 810a04c:	f000 fe34 	bl	810acb8 <__multadd>
 810a050:	4683      	mov	fp, r0
 810a052:	e7eb      	b.n	810a02c <_dtoa_r+0xba4>
 810a054:	0810bf7c 	.word	0x0810bf7c
 810a058:	0810bd79 	.word	0x0810bd79
 810a05c:	0810bef9 	.word	0x0810bef9

0810a060 <__sflush_r>:
 810a060:	898a      	ldrh	r2, [r1, #12]
 810a062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a066:	4605      	mov	r5, r0
 810a068:	0710      	lsls	r0, r2, #28
 810a06a:	460c      	mov	r4, r1
 810a06c:	d458      	bmi.n	810a120 <__sflush_r+0xc0>
 810a06e:	684b      	ldr	r3, [r1, #4]
 810a070:	2b00      	cmp	r3, #0
 810a072:	dc05      	bgt.n	810a080 <__sflush_r+0x20>
 810a074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a076:	2b00      	cmp	r3, #0
 810a078:	dc02      	bgt.n	810a080 <__sflush_r+0x20>
 810a07a:	2000      	movs	r0, #0
 810a07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a082:	2e00      	cmp	r6, #0
 810a084:	d0f9      	beq.n	810a07a <__sflush_r+0x1a>
 810a086:	2300      	movs	r3, #0
 810a088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a08c:	682f      	ldr	r7, [r5, #0]
 810a08e:	602b      	str	r3, [r5, #0]
 810a090:	d032      	beq.n	810a0f8 <__sflush_r+0x98>
 810a092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a094:	89a3      	ldrh	r3, [r4, #12]
 810a096:	075a      	lsls	r2, r3, #29
 810a098:	d505      	bpl.n	810a0a6 <__sflush_r+0x46>
 810a09a:	6863      	ldr	r3, [r4, #4]
 810a09c:	1ac0      	subs	r0, r0, r3
 810a09e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a0a0:	b10b      	cbz	r3, 810a0a6 <__sflush_r+0x46>
 810a0a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a0a4:	1ac0      	subs	r0, r0, r3
 810a0a6:	2300      	movs	r3, #0
 810a0a8:	4602      	mov	r2, r0
 810a0aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a0ac:	6a21      	ldr	r1, [r4, #32]
 810a0ae:	4628      	mov	r0, r5
 810a0b0:	47b0      	blx	r6
 810a0b2:	1c43      	adds	r3, r0, #1
 810a0b4:	89a3      	ldrh	r3, [r4, #12]
 810a0b6:	d106      	bne.n	810a0c6 <__sflush_r+0x66>
 810a0b8:	6829      	ldr	r1, [r5, #0]
 810a0ba:	291d      	cmp	r1, #29
 810a0bc:	d82c      	bhi.n	810a118 <__sflush_r+0xb8>
 810a0be:	4a2a      	ldr	r2, [pc, #168]	; (810a168 <__sflush_r+0x108>)
 810a0c0:	40ca      	lsrs	r2, r1
 810a0c2:	07d6      	lsls	r6, r2, #31
 810a0c4:	d528      	bpl.n	810a118 <__sflush_r+0xb8>
 810a0c6:	2200      	movs	r2, #0
 810a0c8:	6062      	str	r2, [r4, #4]
 810a0ca:	04d9      	lsls	r1, r3, #19
 810a0cc:	6922      	ldr	r2, [r4, #16]
 810a0ce:	6022      	str	r2, [r4, #0]
 810a0d0:	d504      	bpl.n	810a0dc <__sflush_r+0x7c>
 810a0d2:	1c42      	adds	r2, r0, #1
 810a0d4:	d101      	bne.n	810a0da <__sflush_r+0x7a>
 810a0d6:	682b      	ldr	r3, [r5, #0]
 810a0d8:	b903      	cbnz	r3, 810a0dc <__sflush_r+0x7c>
 810a0da:	6560      	str	r0, [r4, #84]	; 0x54
 810a0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a0de:	602f      	str	r7, [r5, #0]
 810a0e0:	2900      	cmp	r1, #0
 810a0e2:	d0ca      	beq.n	810a07a <__sflush_r+0x1a>
 810a0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a0e8:	4299      	cmp	r1, r3
 810a0ea:	d002      	beq.n	810a0f2 <__sflush_r+0x92>
 810a0ec:	4628      	mov	r0, r5
 810a0ee:	f7fd f8ed 	bl	81072cc <_free_r>
 810a0f2:	2000      	movs	r0, #0
 810a0f4:	6360      	str	r0, [r4, #52]	; 0x34
 810a0f6:	e7c1      	b.n	810a07c <__sflush_r+0x1c>
 810a0f8:	6a21      	ldr	r1, [r4, #32]
 810a0fa:	2301      	movs	r3, #1
 810a0fc:	4628      	mov	r0, r5
 810a0fe:	47b0      	blx	r6
 810a100:	1c41      	adds	r1, r0, #1
 810a102:	d1c7      	bne.n	810a094 <__sflush_r+0x34>
 810a104:	682b      	ldr	r3, [r5, #0]
 810a106:	2b00      	cmp	r3, #0
 810a108:	d0c4      	beq.n	810a094 <__sflush_r+0x34>
 810a10a:	2b1d      	cmp	r3, #29
 810a10c:	d001      	beq.n	810a112 <__sflush_r+0xb2>
 810a10e:	2b16      	cmp	r3, #22
 810a110:	d101      	bne.n	810a116 <__sflush_r+0xb6>
 810a112:	602f      	str	r7, [r5, #0]
 810a114:	e7b1      	b.n	810a07a <__sflush_r+0x1a>
 810a116:	89a3      	ldrh	r3, [r4, #12]
 810a118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a11c:	81a3      	strh	r3, [r4, #12]
 810a11e:	e7ad      	b.n	810a07c <__sflush_r+0x1c>
 810a120:	690f      	ldr	r7, [r1, #16]
 810a122:	2f00      	cmp	r7, #0
 810a124:	d0a9      	beq.n	810a07a <__sflush_r+0x1a>
 810a126:	0793      	lsls	r3, r2, #30
 810a128:	680e      	ldr	r6, [r1, #0]
 810a12a:	bf08      	it	eq
 810a12c:	694b      	ldreq	r3, [r1, #20]
 810a12e:	600f      	str	r7, [r1, #0]
 810a130:	bf18      	it	ne
 810a132:	2300      	movne	r3, #0
 810a134:	eba6 0807 	sub.w	r8, r6, r7
 810a138:	608b      	str	r3, [r1, #8]
 810a13a:	f1b8 0f00 	cmp.w	r8, #0
 810a13e:	dd9c      	ble.n	810a07a <__sflush_r+0x1a>
 810a140:	6a21      	ldr	r1, [r4, #32]
 810a142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a144:	4643      	mov	r3, r8
 810a146:	463a      	mov	r2, r7
 810a148:	4628      	mov	r0, r5
 810a14a:	47b0      	blx	r6
 810a14c:	2800      	cmp	r0, #0
 810a14e:	dc06      	bgt.n	810a15e <__sflush_r+0xfe>
 810a150:	89a3      	ldrh	r3, [r4, #12]
 810a152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a156:	81a3      	strh	r3, [r4, #12]
 810a158:	f04f 30ff 	mov.w	r0, #4294967295
 810a15c:	e78e      	b.n	810a07c <__sflush_r+0x1c>
 810a15e:	4407      	add	r7, r0
 810a160:	eba8 0800 	sub.w	r8, r8, r0
 810a164:	e7e9      	b.n	810a13a <__sflush_r+0xda>
 810a166:	bf00      	nop
 810a168:	20400001 	.word	0x20400001

0810a16c <_fflush_r>:
 810a16c:	b538      	push	{r3, r4, r5, lr}
 810a16e:	690b      	ldr	r3, [r1, #16]
 810a170:	4605      	mov	r5, r0
 810a172:	460c      	mov	r4, r1
 810a174:	b913      	cbnz	r3, 810a17c <_fflush_r+0x10>
 810a176:	2500      	movs	r5, #0
 810a178:	4628      	mov	r0, r5
 810a17a:	bd38      	pop	{r3, r4, r5, pc}
 810a17c:	b118      	cbz	r0, 810a186 <_fflush_r+0x1a>
 810a17e:	6983      	ldr	r3, [r0, #24]
 810a180:	b90b      	cbnz	r3, 810a186 <_fflush_r+0x1a>
 810a182:	f000 f887 	bl	810a294 <__sinit>
 810a186:	4b14      	ldr	r3, [pc, #80]	; (810a1d8 <_fflush_r+0x6c>)
 810a188:	429c      	cmp	r4, r3
 810a18a:	d11b      	bne.n	810a1c4 <_fflush_r+0x58>
 810a18c:	686c      	ldr	r4, [r5, #4]
 810a18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a192:	2b00      	cmp	r3, #0
 810a194:	d0ef      	beq.n	810a176 <_fflush_r+0xa>
 810a196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a198:	07d0      	lsls	r0, r2, #31
 810a19a:	d404      	bmi.n	810a1a6 <_fflush_r+0x3a>
 810a19c:	0599      	lsls	r1, r3, #22
 810a19e:	d402      	bmi.n	810a1a6 <_fflush_r+0x3a>
 810a1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a1a2:	f000 fc88 	bl	810aab6 <__retarget_lock_acquire_recursive>
 810a1a6:	4628      	mov	r0, r5
 810a1a8:	4621      	mov	r1, r4
 810a1aa:	f7ff ff59 	bl	810a060 <__sflush_r>
 810a1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a1b0:	07da      	lsls	r2, r3, #31
 810a1b2:	4605      	mov	r5, r0
 810a1b4:	d4e0      	bmi.n	810a178 <_fflush_r+0xc>
 810a1b6:	89a3      	ldrh	r3, [r4, #12]
 810a1b8:	059b      	lsls	r3, r3, #22
 810a1ba:	d4dd      	bmi.n	810a178 <_fflush_r+0xc>
 810a1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a1be:	f000 fc7b 	bl	810aab8 <__retarget_lock_release_recursive>
 810a1c2:	e7d9      	b.n	810a178 <_fflush_r+0xc>
 810a1c4:	4b05      	ldr	r3, [pc, #20]	; (810a1dc <_fflush_r+0x70>)
 810a1c6:	429c      	cmp	r4, r3
 810a1c8:	d101      	bne.n	810a1ce <_fflush_r+0x62>
 810a1ca:	68ac      	ldr	r4, [r5, #8]
 810a1cc:	e7df      	b.n	810a18e <_fflush_r+0x22>
 810a1ce:	4b04      	ldr	r3, [pc, #16]	; (810a1e0 <_fflush_r+0x74>)
 810a1d0:	429c      	cmp	r4, r3
 810a1d2:	bf08      	it	eq
 810a1d4:	68ec      	ldreq	r4, [r5, #12]
 810a1d6:	e7da      	b.n	810a18e <_fflush_r+0x22>
 810a1d8:	0810bfb0 	.word	0x0810bfb0
 810a1dc:	0810bfd0 	.word	0x0810bfd0
 810a1e0:	0810bf90 	.word	0x0810bf90

0810a1e4 <std>:
 810a1e4:	2300      	movs	r3, #0
 810a1e6:	b510      	push	{r4, lr}
 810a1e8:	4604      	mov	r4, r0
 810a1ea:	e9c0 3300 	strd	r3, r3, [r0]
 810a1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a1f2:	6083      	str	r3, [r0, #8]
 810a1f4:	8181      	strh	r1, [r0, #12]
 810a1f6:	6643      	str	r3, [r0, #100]	; 0x64
 810a1f8:	81c2      	strh	r2, [r0, #14]
 810a1fa:	6183      	str	r3, [r0, #24]
 810a1fc:	4619      	mov	r1, r3
 810a1fe:	2208      	movs	r2, #8
 810a200:	305c      	adds	r0, #92	; 0x5c
 810a202:	f7fd f85b 	bl	81072bc <memset>
 810a206:	4b05      	ldr	r3, [pc, #20]	; (810a21c <std+0x38>)
 810a208:	6263      	str	r3, [r4, #36]	; 0x24
 810a20a:	4b05      	ldr	r3, [pc, #20]	; (810a220 <std+0x3c>)
 810a20c:	62a3      	str	r3, [r4, #40]	; 0x28
 810a20e:	4b05      	ldr	r3, [pc, #20]	; (810a224 <std+0x40>)
 810a210:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a212:	4b05      	ldr	r3, [pc, #20]	; (810a228 <std+0x44>)
 810a214:	6224      	str	r4, [r4, #32]
 810a216:	6323      	str	r3, [r4, #48]	; 0x30
 810a218:	bd10      	pop	{r4, pc}
 810a21a:	bf00      	nop
 810a21c:	0810b929 	.word	0x0810b929
 810a220:	0810b94b 	.word	0x0810b94b
 810a224:	0810b983 	.word	0x0810b983
 810a228:	0810b9a7 	.word	0x0810b9a7

0810a22c <_cleanup_r>:
 810a22c:	4901      	ldr	r1, [pc, #4]	; (810a234 <_cleanup_r+0x8>)
 810a22e:	f000 b8af 	b.w	810a390 <_fwalk_reent>
 810a232:	bf00      	nop
 810a234:	0810a16d 	.word	0x0810a16d

0810a238 <__sfmoreglue>:
 810a238:	b570      	push	{r4, r5, r6, lr}
 810a23a:	1e4a      	subs	r2, r1, #1
 810a23c:	2568      	movs	r5, #104	; 0x68
 810a23e:	4355      	muls	r5, r2
 810a240:	460e      	mov	r6, r1
 810a242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a246:	f7fd f891 	bl	810736c <_malloc_r>
 810a24a:	4604      	mov	r4, r0
 810a24c:	b140      	cbz	r0, 810a260 <__sfmoreglue+0x28>
 810a24e:	2100      	movs	r1, #0
 810a250:	e9c0 1600 	strd	r1, r6, [r0]
 810a254:	300c      	adds	r0, #12
 810a256:	60a0      	str	r0, [r4, #8]
 810a258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a25c:	f7fd f82e 	bl	81072bc <memset>
 810a260:	4620      	mov	r0, r4
 810a262:	bd70      	pop	{r4, r5, r6, pc}

0810a264 <__sfp_lock_acquire>:
 810a264:	4801      	ldr	r0, [pc, #4]	; (810a26c <__sfp_lock_acquire+0x8>)
 810a266:	f000 bc26 	b.w	810aab6 <__retarget_lock_acquire_recursive>
 810a26a:	bf00      	nop
 810a26c:	10000504 	.word	0x10000504

0810a270 <__sfp_lock_release>:
 810a270:	4801      	ldr	r0, [pc, #4]	; (810a278 <__sfp_lock_release+0x8>)
 810a272:	f000 bc21 	b.w	810aab8 <__retarget_lock_release_recursive>
 810a276:	bf00      	nop
 810a278:	10000504 	.word	0x10000504

0810a27c <__sinit_lock_acquire>:
 810a27c:	4801      	ldr	r0, [pc, #4]	; (810a284 <__sinit_lock_acquire+0x8>)
 810a27e:	f000 bc1a 	b.w	810aab6 <__retarget_lock_acquire_recursive>
 810a282:	bf00      	nop
 810a284:	100004ff 	.word	0x100004ff

0810a288 <__sinit_lock_release>:
 810a288:	4801      	ldr	r0, [pc, #4]	; (810a290 <__sinit_lock_release+0x8>)
 810a28a:	f000 bc15 	b.w	810aab8 <__retarget_lock_release_recursive>
 810a28e:	bf00      	nop
 810a290:	100004ff 	.word	0x100004ff

0810a294 <__sinit>:
 810a294:	b510      	push	{r4, lr}
 810a296:	4604      	mov	r4, r0
 810a298:	f7ff fff0 	bl	810a27c <__sinit_lock_acquire>
 810a29c:	69a3      	ldr	r3, [r4, #24]
 810a29e:	b11b      	cbz	r3, 810a2a8 <__sinit+0x14>
 810a2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a2a4:	f7ff bff0 	b.w	810a288 <__sinit_lock_release>
 810a2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a2ac:	6523      	str	r3, [r4, #80]	; 0x50
 810a2ae:	4b13      	ldr	r3, [pc, #76]	; (810a2fc <__sinit+0x68>)
 810a2b0:	4a13      	ldr	r2, [pc, #76]	; (810a300 <__sinit+0x6c>)
 810a2b2:	681b      	ldr	r3, [r3, #0]
 810a2b4:	62a2      	str	r2, [r4, #40]	; 0x28
 810a2b6:	42a3      	cmp	r3, r4
 810a2b8:	bf04      	itt	eq
 810a2ba:	2301      	moveq	r3, #1
 810a2bc:	61a3      	streq	r3, [r4, #24]
 810a2be:	4620      	mov	r0, r4
 810a2c0:	f000 f820 	bl	810a304 <__sfp>
 810a2c4:	6060      	str	r0, [r4, #4]
 810a2c6:	4620      	mov	r0, r4
 810a2c8:	f000 f81c 	bl	810a304 <__sfp>
 810a2cc:	60a0      	str	r0, [r4, #8]
 810a2ce:	4620      	mov	r0, r4
 810a2d0:	f000 f818 	bl	810a304 <__sfp>
 810a2d4:	2200      	movs	r2, #0
 810a2d6:	60e0      	str	r0, [r4, #12]
 810a2d8:	2104      	movs	r1, #4
 810a2da:	6860      	ldr	r0, [r4, #4]
 810a2dc:	f7ff ff82 	bl	810a1e4 <std>
 810a2e0:	68a0      	ldr	r0, [r4, #8]
 810a2e2:	2201      	movs	r2, #1
 810a2e4:	2109      	movs	r1, #9
 810a2e6:	f7ff ff7d 	bl	810a1e4 <std>
 810a2ea:	68e0      	ldr	r0, [r4, #12]
 810a2ec:	2202      	movs	r2, #2
 810a2ee:	2112      	movs	r1, #18
 810a2f0:	f7ff ff78 	bl	810a1e4 <std>
 810a2f4:	2301      	movs	r3, #1
 810a2f6:	61a3      	str	r3, [r4, #24]
 810a2f8:	e7d2      	b.n	810a2a0 <__sinit+0xc>
 810a2fa:	bf00      	nop
 810a2fc:	0810bd54 	.word	0x0810bd54
 810a300:	0810a22d 	.word	0x0810a22d

0810a304 <__sfp>:
 810a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a306:	4607      	mov	r7, r0
 810a308:	f7ff ffac 	bl	810a264 <__sfp_lock_acquire>
 810a30c:	4b1e      	ldr	r3, [pc, #120]	; (810a388 <__sfp+0x84>)
 810a30e:	681e      	ldr	r6, [r3, #0]
 810a310:	69b3      	ldr	r3, [r6, #24]
 810a312:	b913      	cbnz	r3, 810a31a <__sfp+0x16>
 810a314:	4630      	mov	r0, r6
 810a316:	f7ff ffbd 	bl	810a294 <__sinit>
 810a31a:	3648      	adds	r6, #72	; 0x48
 810a31c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a320:	3b01      	subs	r3, #1
 810a322:	d503      	bpl.n	810a32c <__sfp+0x28>
 810a324:	6833      	ldr	r3, [r6, #0]
 810a326:	b30b      	cbz	r3, 810a36c <__sfp+0x68>
 810a328:	6836      	ldr	r6, [r6, #0]
 810a32a:	e7f7      	b.n	810a31c <__sfp+0x18>
 810a32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a330:	b9d5      	cbnz	r5, 810a368 <__sfp+0x64>
 810a332:	4b16      	ldr	r3, [pc, #88]	; (810a38c <__sfp+0x88>)
 810a334:	60e3      	str	r3, [r4, #12]
 810a336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a33a:	6665      	str	r5, [r4, #100]	; 0x64
 810a33c:	f000 fbba 	bl	810aab4 <__retarget_lock_init_recursive>
 810a340:	f7ff ff96 	bl	810a270 <__sfp_lock_release>
 810a344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a34c:	6025      	str	r5, [r4, #0]
 810a34e:	61a5      	str	r5, [r4, #24]
 810a350:	2208      	movs	r2, #8
 810a352:	4629      	mov	r1, r5
 810a354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a358:	f7fc ffb0 	bl	81072bc <memset>
 810a35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a364:	4620      	mov	r0, r4
 810a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a368:	3468      	adds	r4, #104	; 0x68
 810a36a:	e7d9      	b.n	810a320 <__sfp+0x1c>
 810a36c:	2104      	movs	r1, #4
 810a36e:	4638      	mov	r0, r7
 810a370:	f7ff ff62 	bl	810a238 <__sfmoreglue>
 810a374:	4604      	mov	r4, r0
 810a376:	6030      	str	r0, [r6, #0]
 810a378:	2800      	cmp	r0, #0
 810a37a:	d1d5      	bne.n	810a328 <__sfp+0x24>
 810a37c:	f7ff ff78 	bl	810a270 <__sfp_lock_release>
 810a380:	230c      	movs	r3, #12
 810a382:	603b      	str	r3, [r7, #0]
 810a384:	e7ee      	b.n	810a364 <__sfp+0x60>
 810a386:	bf00      	nop
 810a388:	0810bd54 	.word	0x0810bd54
 810a38c:	ffff0001 	.word	0xffff0001

0810a390 <_fwalk_reent>:
 810a390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a394:	4606      	mov	r6, r0
 810a396:	4688      	mov	r8, r1
 810a398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a39c:	2700      	movs	r7, #0
 810a39e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a3a2:	f1b9 0901 	subs.w	r9, r9, #1
 810a3a6:	d505      	bpl.n	810a3b4 <_fwalk_reent+0x24>
 810a3a8:	6824      	ldr	r4, [r4, #0]
 810a3aa:	2c00      	cmp	r4, #0
 810a3ac:	d1f7      	bne.n	810a39e <_fwalk_reent+0xe>
 810a3ae:	4638      	mov	r0, r7
 810a3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a3b4:	89ab      	ldrh	r3, [r5, #12]
 810a3b6:	2b01      	cmp	r3, #1
 810a3b8:	d907      	bls.n	810a3ca <_fwalk_reent+0x3a>
 810a3ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a3be:	3301      	adds	r3, #1
 810a3c0:	d003      	beq.n	810a3ca <_fwalk_reent+0x3a>
 810a3c2:	4629      	mov	r1, r5
 810a3c4:	4630      	mov	r0, r6
 810a3c6:	47c0      	blx	r8
 810a3c8:	4307      	orrs	r7, r0
 810a3ca:	3568      	adds	r5, #104	; 0x68
 810a3cc:	e7e9      	b.n	810a3a2 <_fwalk_reent+0x12>

0810a3ce <rshift>:
 810a3ce:	6903      	ldr	r3, [r0, #16]
 810a3d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a3d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a3dc:	f100 0414 	add.w	r4, r0, #20
 810a3e0:	dd45      	ble.n	810a46e <rshift+0xa0>
 810a3e2:	f011 011f 	ands.w	r1, r1, #31
 810a3e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a3ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a3ee:	d10c      	bne.n	810a40a <rshift+0x3c>
 810a3f0:	f100 0710 	add.w	r7, r0, #16
 810a3f4:	4629      	mov	r1, r5
 810a3f6:	42b1      	cmp	r1, r6
 810a3f8:	d334      	bcc.n	810a464 <rshift+0x96>
 810a3fa:	1a9b      	subs	r3, r3, r2
 810a3fc:	009b      	lsls	r3, r3, #2
 810a3fe:	1eea      	subs	r2, r5, #3
 810a400:	4296      	cmp	r6, r2
 810a402:	bf38      	it	cc
 810a404:	2300      	movcc	r3, #0
 810a406:	4423      	add	r3, r4
 810a408:	e015      	b.n	810a436 <rshift+0x68>
 810a40a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a40e:	f1c1 0820 	rsb	r8, r1, #32
 810a412:	40cf      	lsrs	r7, r1
 810a414:	f105 0e04 	add.w	lr, r5, #4
 810a418:	46a1      	mov	r9, r4
 810a41a:	4576      	cmp	r6, lr
 810a41c:	46f4      	mov	ip, lr
 810a41e:	d815      	bhi.n	810a44c <rshift+0x7e>
 810a420:	1a9b      	subs	r3, r3, r2
 810a422:	009a      	lsls	r2, r3, #2
 810a424:	3a04      	subs	r2, #4
 810a426:	3501      	adds	r5, #1
 810a428:	42ae      	cmp	r6, r5
 810a42a:	bf38      	it	cc
 810a42c:	2200      	movcc	r2, #0
 810a42e:	18a3      	adds	r3, r4, r2
 810a430:	50a7      	str	r7, [r4, r2]
 810a432:	b107      	cbz	r7, 810a436 <rshift+0x68>
 810a434:	3304      	adds	r3, #4
 810a436:	1b1a      	subs	r2, r3, r4
 810a438:	42a3      	cmp	r3, r4
 810a43a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a43e:	bf08      	it	eq
 810a440:	2300      	moveq	r3, #0
 810a442:	6102      	str	r2, [r0, #16]
 810a444:	bf08      	it	eq
 810a446:	6143      	streq	r3, [r0, #20]
 810a448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a44c:	f8dc c000 	ldr.w	ip, [ip]
 810a450:	fa0c fc08 	lsl.w	ip, ip, r8
 810a454:	ea4c 0707 	orr.w	r7, ip, r7
 810a458:	f849 7b04 	str.w	r7, [r9], #4
 810a45c:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a460:	40cf      	lsrs	r7, r1
 810a462:	e7da      	b.n	810a41a <rshift+0x4c>
 810a464:	f851 cb04 	ldr.w	ip, [r1], #4
 810a468:	f847 cf04 	str.w	ip, [r7, #4]!
 810a46c:	e7c3      	b.n	810a3f6 <rshift+0x28>
 810a46e:	4623      	mov	r3, r4
 810a470:	e7e1      	b.n	810a436 <rshift+0x68>

0810a472 <__hexdig_fun>:
 810a472:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a476:	2b09      	cmp	r3, #9
 810a478:	d802      	bhi.n	810a480 <__hexdig_fun+0xe>
 810a47a:	3820      	subs	r0, #32
 810a47c:	b2c0      	uxtb	r0, r0
 810a47e:	4770      	bx	lr
 810a480:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a484:	2b05      	cmp	r3, #5
 810a486:	d801      	bhi.n	810a48c <__hexdig_fun+0x1a>
 810a488:	3847      	subs	r0, #71	; 0x47
 810a48a:	e7f7      	b.n	810a47c <__hexdig_fun+0xa>
 810a48c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a490:	2b05      	cmp	r3, #5
 810a492:	d801      	bhi.n	810a498 <__hexdig_fun+0x26>
 810a494:	3827      	subs	r0, #39	; 0x27
 810a496:	e7f1      	b.n	810a47c <__hexdig_fun+0xa>
 810a498:	2000      	movs	r0, #0
 810a49a:	4770      	bx	lr

0810a49c <__gethex>:
 810a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a4a0:	ed2d 8b02 	vpush	{d8}
 810a4a4:	b089      	sub	sp, #36	; 0x24
 810a4a6:	ee08 0a10 	vmov	s16, r0
 810a4aa:	9304      	str	r3, [sp, #16]
 810a4ac:	4bbc      	ldr	r3, [pc, #752]	; (810a7a0 <__gethex+0x304>)
 810a4ae:	681b      	ldr	r3, [r3, #0]
 810a4b0:	9301      	str	r3, [sp, #4]
 810a4b2:	4618      	mov	r0, r3
 810a4b4:	468b      	mov	fp, r1
 810a4b6:	4690      	mov	r8, r2
 810a4b8:	f7f5 ff1c 	bl	81002f4 <strlen>
 810a4bc:	9b01      	ldr	r3, [sp, #4]
 810a4be:	f8db 2000 	ldr.w	r2, [fp]
 810a4c2:	4403      	add	r3, r0
 810a4c4:	4682      	mov	sl, r0
 810a4c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a4ca:	9305      	str	r3, [sp, #20]
 810a4cc:	1c93      	adds	r3, r2, #2
 810a4ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a4d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a4d6:	32fe      	adds	r2, #254	; 0xfe
 810a4d8:	18d1      	adds	r1, r2, r3
 810a4da:	461f      	mov	r7, r3
 810a4dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a4e0:	9100      	str	r1, [sp, #0]
 810a4e2:	2830      	cmp	r0, #48	; 0x30
 810a4e4:	d0f8      	beq.n	810a4d8 <__gethex+0x3c>
 810a4e6:	f7ff ffc4 	bl	810a472 <__hexdig_fun>
 810a4ea:	4604      	mov	r4, r0
 810a4ec:	2800      	cmp	r0, #0
 810a4ee:	d13a      	bne.n	810a566 <__gethex+0xca>
 810a4f0:	9901      	ldr	r1, [sp, #4]
 810a4f2:	4652      	mov	r2, sl
 810a4f4:	4638      	mov	r0, r7
 810a4f6:	f7fd ff9d 	bl	8108434 <strncmp>
 810a4fa:	4605      	mov	r5, r0
 810a4fc:	2800      	cmp	r0, #0
 810a4fe:	d168      	bne.n	810a5d2 <__gethex+0x136>
 810a500:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a504:	eb07 060a 	add.w	r6, r7, sl
 810a508:	f7ff ffb3 	bl	810a472 <__hexdig_fun>
 810a50c:	2800      	cmp	r0, #0
 810a50e:	d062      	beq.n	810a5d6 <__gethex+0x13a>
 810a510:	4633      	mov	r3, r6
 810a512:	7818      	ldrb	r0, [r3, #0]
 810a514:	2830      	cmp	r0, #48	; 0x30
 810a516:	461f      	mov	r7, r3
 810a518:	f103 0301 	add.w	r3, r3, #1
 810a51c:	d0f9      	beq.n	810a512 <__gethex+0x76>
 810a51e:	f7ff ffa8 	bl	810a472 <__hexdig_fun>
 810a522:	2301      	movs	r3, #1
 810a524:	fab0 f480 	clz	r4, r0
 810a528:	0964      	lsrs	r4, r4, #5
 810a52a:	4635      	mov	r5, r6
 810a52c:	9300      	str	r3, [sp, #0]
 810a52e:	463a      	mov	r2, r7
 810a530:	4616      	mov	r6, r2
 810a532:	3201      	adds	r2, #1
 810a534:	7830      	ldrb	r0, [r6, #0]
 810a536:	f7ff ff9c 	bl	810a472 <__hexdig_fun>
 810a53a:	2800      	cmp	r0, #0
 810a53c:	d1f8      	bne.n	810a530 <__gethex+0x94>
 810a53e:	9901      	ldr	r1, [sp, #4]
 810a540:	4652      	mov	r2, sl
 810a542:	4630      	mov	r0, r6
 810a544:	f7fd ff76 	bl	8108434 <strncmp>
 810a548:	b980      	cbnz	r0, 810a56c <__gethex+0xd0>
 810a54a:	b94d      	cbnz	r5, 810a560 <__gethex+0xc4>
 810a54c:	eb06 050a 	add.w	r5, r6, sl
 810a550:	462a      	mov	r2, r5
 810a552:	4616      	mov	r6, r2
 810a554:	3201      	adds	r2, #1
 810a556:	7830      	ldrb	r0, [r6, #0]
 810a558:	f7ff ff8b 	bl	810a472 <__hexdig_fun>
 810a55c:	2800      	cmp	r0, #0
 810a55e:	d1f8      	bne.n	810a552 <__gethex+0xb6>
 810a560:	1bad      	subs	r5, r5, r6
 810a562:	00ad      	lsls	r5, r5, #2
 810a564:	e004      	b.n	810a570 <__gethex+0xd4>
 810a566:	2400      	movs	r4, #0
 810a568:	4625      	mov	r5, r4
 810a56a:	e7e0      	b.n	810a52e <__gethex+0x92>
 810a56c:	2d00      	cmp	r5, #0
 810a56e:	d1f7      	bne.n	810a560 <__gethex+0xc4>
 810a570:	7833      	ldrb	r3, [r6, #0]
 810a572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a576:	2b50      	cmp	r3, #80	; 0x50
 810a578:	d13b      	bne.n	810a5f2 <__gethex+0x156>
 810a57a:	7873      	ldrb	r3, [r6, #1]
 810a57c:	2b2b      	cmp	r3, #43	; 0x2b
 810a57e:	d02c      	beq.n	810a5da <__gethex+0x13e>
 810a580:	2b2d      	cmp	r3, #45	; 0x2d
 810a582:	d02e      	beq.n	810a5e2 <__gethex+0x146>
 810a584:	1c71      	adds	r1, r6, #1
 810a586:	f04f 0900 	mov.w	r9, #0
 810a58a:	7808      	ldrb	r0, [r1, #0]
 810a58c:	f7ff ff71 	bl	810a472 <__hexdig_fun>
 810a590:	1e43      	subs	r3, r0, #1
 810a592:	b2db      	uxtb	r3, r3
 810a594:	2b18      	cmp	r3, #24
 810a596:	d82c      	bhi.n	810a5f2 <__gethex+0x156>
 810a598:	f1a0 0210 	sub.w	r2, r0, #16
 810a59c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a5a0:	f7ff ff67 	bl	810a472 <__hexdig_fun>
 810a5a4:	1e43      	subs	r3, r0, #1
 810a5a6:	b2db      	uxtb	r3, r3
 810a5a8:	2b18      	cmp	r3, #24
 810a5aa:	d91d      	bls.n	810a5e8 <__gethex+0x14c>
 810a5ac:	f1b9 0f00 	cmp.w	r9, #0
 810a5b0:	d000      	beq.n	810a5b4 <__gethex+0x118>
 810a5b2:	4252      	negs	r2, r2
 810a5b4:	4415      	add	r5, r2
 810a5b6:	f8cb 1000 	str.w	r1, [fp]
 810a5ba:	b1e4      	cbz	r4, 810a5f6 <__gethex+0x15a>
 810a5bc:	9b00      	ldr	r3, [sp, #0]
 810a5be:	2b00      	cmp	r3, #0
 810a5c0:	bf14      	ite	ne
 810a5c2:	2700      	movne	r7, #0
 810a5c4:	2706      	moveq	r7, #6
 810a5c6:	4638      	mov	r0, r7
 810a5c8:	b009      	add	sp, #36	; 0x24
 810a5ca:	ecbd 8b02 	vpop	{d8}
 810a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a5d2:	463e      	mov	r6, r7
 810a5d4:	4625      	mov	r5, r4
 810a5d6:	2401      	movs	r4, #1
 810a5d8:	e7ca      	b.n	810a570 <__gethex+0xd4>
 810a5da:	f04f 0900 	mov.w	r9, #0
 810a5de:	1cb1      	adds	r1, r6, #2
 810a5e0:	e7d3      	b.n	810a58a <__gethex+0xee>
 810a5e2:	f04f 0901 	mov.w	r9, #1
 810a5e6:	e7fa      	b.n	810a5de <__gethex+0x142>
 810a5e8:	230a      	movs	r3, #10
 810a5ea:	fb03 0202 	mla	r2, r3, r2, r0
 810a5ee:	3a10      	subs	r2, #16
 810a5f0:	e7d4      	b.n	810a59c <__gethex+0x100>
 810a5f2:	4631      	mov	r1, r6
 810a5f4:	e7df      	b.n	810a5b6 <__gethex+0x11a>
 810a5f6:	1bf3      	subs	r3, r6, r7
 810a5f8:	3b01      	subs	r3, #1
 810a5fa:	4621      	mov	r1, r4
 810a5fc:	2b07      	cmp	r3, #7
 810a5fe:	dc0b      	bgt.n	810a618 <__gethex+0x17c>
 810a600:	ee18 0a10 	vmov	r0, s16
 810a604:	f000 faf6 	bl	810abf4 <_Balloc>
 810a608:	4604      	mov	r4, r0
 810a60a:	b940      	cbnz	r0, 810a61e <__gethex+0x182>
 810a60c:	4b65      	ldr	r3, [pc, #404]	; (810a7a4 <__gethex+0x308>)
 810a60e:	4602      	mov	r2, r0
 810a610:	21de      	movs	r1, #222	; 0xde
 810a612:	4865      	ldr	r0, [pc, #404]	; (810a7a8 <__gethex+0x30c>)
 810a614:	f7fc fdda 	bl	81071cc <__assert_func>
 810a618:	3101      	adds	r1, #1
 810a61a:	105b      	asrs	r3, r3, #1
 810a61c:	e7ee      	b.n	810a5fc <__gethex+0x160>
 810a61e:	f100 0914 	add.w	r9, r0, #20
 810a622:	f04f 0b00 	mov.w	fp, #0
 810a626:	f1ca 0301 	rsb	r3, sl, #1
 810a62a:	f8cd 9008 	str.w	r9, [sp, #8]
 810a62e:	f8cd b000 	str.w	fp, [sp]
 810a632:	9306      	str	r3, [sp, #24]
 810a634:	42b7      	cmp	r7, r6
 810a636:	d340      	bcc.n	810a6ba <__gethex+0x21e>
 810a638:	9802      	ldr	r0, [sp, #8]
 810a63a:	9b00      	ldr	r3, [sp, #0]
 810a63c:	f840 3b04 	str.w	r3, [r0], #4
 810a640:	eba0 0009 	sub.w	r0, r0, r9
 810a644:	1080      	asrs	r0, r0, #2
 810a646:	0146      	lsls	r6, r0, #5
 810a648:	6120      	str	r0, [r4, #16]
 810a64a:	4618      	mov	r0, r3
 810a64c:	f000 fbc8 	bl	810ade0 <__hi0bits>
 810a650:	1a30      	subs	r0, r6, r0
 810a652:	f8d8 6000 	ldr.w	r6, [r8]
 810a656:	42b0      	cmp	r0, r6
 810a658:	dd63      	ble.n	810a722 <__gethex+0x286>
 810a65a:	1b87      	subs	r7, r0, r6
 810a65c:	4639      	mov	r1, r7
 810a65e:	4620      	mov	r0, r4
 810a660:	f000 ff62 	bl	810b528 <__any_on>
 810a664:	4682      	mov	sl, r0
 810a666:	b1a8      	cbz	r0, 810a694 <__gethex+0x1f8>
 810a668:	1e7b      	subs	r3, r7, #1
 810a66a:	1159      	asrs	r1, r3, #5
 810a66c:	f003 021f 	and.w	r2, r3, #31
 810a670:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810a674:	f04f 0a01 	mov.w	sl, #1
 810a678:	fa0a f202 	lsl.w	r2, sl, r2
 810a67c:	420a      	tst	r2, r1
 810a67e:	d009      	beq.n	810a694 <__gethex+0x1f8>
 810a680:	4553      	cmp	r3, sl
 810a682:	dd05      	ble.n	810a690 <__gethex+0x1f4>
 810a684:	1eb9      	subs	r1, r7, #2
 810a686:	4620      	mov	r0, r4
 810a688:	f000 ff4e 	bl	810b528 <__any_on>
 810a68c:	2800      	cmp	r0, #0
 810a68e:	d145      	bne.n	810a71c <__gethex+0x280>
 810a690:	f04f 0a02 	mov.w	sl, #2
 810a694:	4639      	mov	r1, r7
 810a696:	4620      	mov	r0, r4
 810a698:	f7ff fe99 	bl	810a3ce <rshift>
 810a69c:	443d      	add	r5, r7
 810a69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a6a2:	42ab      	cmp	r3, r5
 810a6a4:	da4c      	bge.n	810a740 <__gethex+0x2a4>
 810a6a6:	ee18 0a10 	vmov	r0, s16
 810a6aa:	4621      	mov	r1, r4
 810a6ac:	f000 fae2 	bl	810ac74 <_Bfree>
 810a6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a6b2:	2300      	movs	r3, #0
 810a6b4:	6013      	str	r3, [r2, #0]
 810a6b6:	27a3      	movs	r7, #163	; 0xa3
 810a6b8:	e785      	b.n	810a5c6 <__gethex+0x12a>
 810a6ba:	1e73      	subs	r3, r6, #1
 810a6bc:	9a05      	ldr	r2, [sp, #20]
 810a6be:	9303      	str	r3, [sp, #12]
 810a6c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810a6c4:	4293      	cmp	r3, r2
 810a6c6:	d019      	beq.n	810a6fc <__gethex+0x260>
 810a6c8:	f1bb 0f20 	cmp.w	fp, #32
 810a6cc:	d107      	bne.n	810a6de <__gethex+0x242>
 810a6ce:	9b02      	ldr	r3, [sp, #8]
 810a6d0:	9a00      	ldr	r2, [sp, #0]
 810a6d2:	f843 2b04 	str.w	r2, [r3], #4
 810a6d6:	9302      	str	r3, [sp, #8]
 810a6d8:	2300      	movs	r3, #0
 810a6da:	9300      	str	r3, [sp, #0]
 810a6dc:	469b      	mov	fp, r3
 810a6de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810a6e2:	f7ff fec6 	bl	810a472 <__hexdig_fun>
 810a6e6:	9b00      	ldr	r3, [sp, #0]
 810a6e8:	f000 000f 	and.w	r0, r0, #15
 810a6ec:	fa00 f00b 	lsl.w	r0, r0, fp
 810a6f0:	4303      	orrs	r3, r0
 810a6f2:	9300      	str	r3, [sp, #0]
 810a6f4:	f10b 0b04 	add.w	fp, fp, #4
 810a6f8:	9b03      	ldr	r3, [sp, #12]
 810a6fa:	e00d      	b.n	810a718 <__gethex+0x27c>
 810a6fc:	9b03      	ldr	r3, [sp, #12]
 810a6fe:	9a06      	ldr	r2, [sp, #24]
 810a700:	4413      	add	r3, r2
 810a702:	42bb      	cmp	r3, r7
 810a704:	d3e0      	bcc.n	810a6c8 <__gethex+0x22c>
 810a706:	4618      	mov	r0, r3
 810a708:	9901      	ldr	r1, [sp, #4]
 810a70a:	9307      	str	r3, [sp, #28]
 810a70c:	4652      	mov	r2, sl
 810a70e:	f7fd fe91 	bl	8108434 <strncmp>
 810a712:	9b07      	ldr	r3, [sp, #28]
 810a714:	2800      	cmp	r0, #0
 810a716:	d1d7      	bne.n	810a6c8 <__gethex+0x22c>
 810a718:	461e      	mov	r6, r3
 810a71a:	e78b      	b.n	810a634 <__gethex+0x198>
 810a71c:	f04f 0a03 	mov.w	sl, #3
 810a720:	e7b8      	b.n	810a694 <__gethex+0x1f8>
 810a722:	da0a      	bge.n	810a73a <__gethex+0x29e>
 810a724:	1a37      	subs	r7, r6, r0
 810a726:	4621      	mov	r1, r4
 810a728:	ee18 0a10 	vmov	r0, s16
 810a72c:	463a      	mov	r2, r7
 810a72e:	f000 fcbd 	bl	810b0ac <__lshift>
 810a732:	1bed      	subs	r5, r5, r7
 810a734:	4604      	mov	r4, r0
 810a736:	f100 0914 	add.w	r9, r0, #20
 810a73a:	f04f 0a00 	mov.w	sl, #0
 810a73e:	e7ae      	b.n	810a69e <__gethex+0x202>
 810a740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810a744:	42a8      	cmp	r0, r5
 810a746:	dd72      	ble.n	810a82e <__gethex+0x392>
 810a748:	1b45      	subs	r5, r0, r5
 810a74a:	42ae      	cmp	r6, r5
 810a74c:	dc36      	bgt.n	810a7bc <__gethex+0x320>
 810a74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a752:	2b02      	cmp	r3, #2
 810a754:	d02a      	beq.n	810a7ac <__gethex+0x310>
 810a756:	2b03      	cmp	r3, #3
 810a758:	d02c      	beq.n	810a7b4 <__gethex+0x318>
 810a75a:	2b01      	cmp	r3, #1
 810a75c:	d115      	bne.n	810a78a <__gethex+0x2ee>
 810a75e:	42ae      	cmp	r6, r5
 810a760:	d113      	bne.n	810a78a <__gethex+0x2ee>
 810a762:	2e01      	cmp	r6, #1
 810a764:	d10b      	bne.n	810a77e <__gethex+0x2e2>
 810a766:	9a04      	ldr	r2, [sp, #16]
 810a768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810a76c:	6013      	str	r3, [r2, #0]
 810a76e:	2301      	movs	r3, #1
 810a770:	6123      	str	r3, [r4, #16]
 810a772:	f8c9 3000 	str.w	r3, [r9]
 810a776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a778:	2762      	movs	r7, #98	; 0x62
 810a77a:	601c      	str	r4, [r3, #0]
 810a77c:	e723      	b.n	810a5c6 <__gethex+0x12a>
 810a77e:	1e71      	subs	r1, r6, #1
 810a780:	4620      	mov	r0, r4
 810a782:	f000 fed1 	bl	810b528 <__any_on>
 810a786:	2800      	cmp	r0, #0
 810a788:	d1ed      	bne.n	810a766 <__gethex+0x2ca>
 810a78a:	ee18 0a10 	vmov	r0, s16
 810a78e:	4621      	mov	r1, r4
 810a790:	f000 fa70 	bl	810ac74 <_Bfree>
 810a794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a796:	2300      	movs	r3, #0
 810a798:	6013      	str	r3, [r2, #0]
 810a79a:	2750      	movs	r7, #80	; 0x50
 810a79c:	e713      	b.n	810a5c6 <__gethex+0x12a>
 810a79e:	bf00      	nop
 810a7a0:	0810c05c 	.word	0x0810c05c
 810a7a4:	0810bf7c 	.word	0x0810bf7c
 810a7a8:	0810bff0 	.word	0x0810bff0
 810a7ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a7ae:	2b00      	cmp	r3, #0
 810a7b0:	d1eb      	bne.n	810a78a <__gethex+0x2ee>
 810a7b2:	e7d8      	b.n	810a766 <__gethex+0x2ca>
 810a7b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a7b6:	2b00      	cmp	r3, #0
 810a7b8:	d1d5      	bne.n	810a766 <__gethex+0x2ca>
 810a7ba:	e7e6      	b.n	810a78a <__gethex+0x2ee>
 810a7bc:	1e6f      	subs	r7, r5, #1
 810a7be:	f1ba 0f00 	cmp.w	sl, #0
 810a7c2:	d131      	bne.n	810a828 <__gethex+0x38c>
 810a7c4:	b127      	cbz	r7, 810a7d0 <__gethex+0x334>
 810a7c6:	4639      	mov	r1, r7
 810a7c8:	4620      	mov	r0, r4
 810a7ca:	f000 fead 	bl	810b528 <__any_on>
 810a7ce:	4682      	mov	sl, r0
 810a7d0:	117b      	asrs	r3, r7, #5
 810a7d2:	2101      	movs	r1, #1
 810a7d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810a7d8:	f007 071f 	and.w	r7, r7, #31
 810a7dc:	fa01 f707 	lsl.w	r7, r1, r7
 810a7e0:	421f      	tst	r7, r3
 810a7e2:	4629      	mov	r1, r5
 810a7e4:	4620      	mov	r0, r4
 810a7e6:	bf18      	it	ne
 810a7e8:	f04a 0a02 	orrne.w	sl, sl, #2
 810a7ec:	1b76      	subs	r6, r6, r5
 810a7ee:	f7ff fdee 	bl	810a3ce <rshift>
 810a7f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810a7f6:	2702      	movs	r7, #2
 810a7f8:	f1ba 0f00 	cmp.w	sl, #0
 810a7fc:	d048      	beq.n	810a890 <__gethex+0x3f4>
 810a7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a802:	2b02      	cmp	r3, #2
 810a804:	d015      	beq.n	810a832 <__gethex+0x396>
 810a806:	2b03      	cmp	r3, #3
 810a808:	d017      	beq.n	810a83a <__gethex+0x39e>
 810a80a:	2b01      	cmp	r3, #1
 810a80c:	d109      	bne.n	810a822 <__gethex+0x386>
 810a80e:	f01a 0f02 	tst.w	sl, #2
 810a812:	d006      	beq.n	810a822 <__gethex+0x386>
 810a814:	f8d9 0000 	ldr.w	r0, [r9]
 810a818:	ea4a 0a00 	orr.w	sl, sl, r0
 810a81c:	f01a 0f01 	tst.w	sl, #1
 810a820:	d10e      	bne.n	810a840 <__gethex+0x3a4>
 810a822:	f047 0710 	orr.w	r7, r7, #16
 810a826:	e033      	b.n	810a890 <__gethex+0x3f4>
 810a828:	f04f 0a01 	mov.w	sl, #1
 810a82c:	e7d0      	b.n	810a7d0 <__gethex+0x334>
 810a82e:	2701      	movs	r7, #1
 810a830:	e7e2      	b.n	810a7f8 <__gethex+0x35c>
 810a832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a834:	f1c3 0301 	rsb	r3, r3, #1
 810a838:	9315      	str	r3, [sp, #84]	; 0x54
 810a83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a83c:	2b00      	cmp	r3, #0
 810a83e:	d0f0      	beq.n	810a822 <__gethex+0x386>
 810a840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810a844:	f104 0314 	add.w	r3, r4, #20
 810a848:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810a84c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810a850:	f04f 0c00 	mov.w	ip, #0
 810a854:	4618      	mov	r0, r3
 810a856:	f853 2b04 	ldr.w	r2, [r3], #4
 810a85a:	f1b2 3fff 	cmp.w	r2, #4294967295
 810a85e:	d01c      	beq.n	810a89a <__gethex+0x3fe>
 810a860:	3201      	adds	r2, #1
 810a862:	6002      	str	r2, [r0, #0]
 810a864:	2f02      	cmp	r7, #2
 810a866:	f104 0314 	add.w	r3, r4, #20
 810a86a:	d13f      	bne.n	810a8ec <__gethex+0x450>
 810a86c:	f8d8 2000 	ldr.w	r2, [r8]
 810a870:	3a01      	subs	r2, #1
 810a872:	42b2      	cmp	r2, r6
 810a874:	d10a      	bne.n	810a88c <__gethex+0x3f0>
 810a876:	1171      	asrs	r1, r6, #5
 810a878:	2201      	movs	r2, #1
 810a87a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810a87e:	f006 061f 	and.w	r6, r6, #31
 810a882:	fa02 f606 	lsl.w	r6, r2, r6
 810a886:	421e      	tst	r6, r3
 810a888:	bf18      	it	ne
 810a88a:	4617      	movne	r7, r2
 810a88c:	f047 0720 	orr.w	r7, r7, #32
 810a890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a892:	601c      	str	r4, [r3, #0]
 810a894:	9b04      	ldr	r3, [sp, #16]
 810a896:	601d      	str	r5, [r3, #0]
 810a898:	e695      	b.n	810a5c6 <__gethex+0x12a>
 810a89a:	4299      	cmp	r1, r3
 810a89c:	f843 cc04 	str.w	ip, [r3, #-4]
 810a8a0:	d8d8      	bhi.n	810a854 <__gethex+0x3b8>
 810a8a2:	68a3      	ldr	r3, [r4, #8]
 810a8a4:	459b      	cmp	fp, r3
 810a8a6:	db19      	blt.n	810a8dc <__gethex+0x440>
 810a8a8:	6861      	ldr	r1, [r4, #4]
 810a8aa:	ee18 0a10 	vmov	r0, s16
 810a8ae:	3101      	adds	r1, #1
 810a8b0:	f000 f9a0 	bl	810abf4 <_Balloc>
 810a8b4:	4681      	mov	r9, r0
 810a8b6:	b918      	cbnz	r0, 810a8c0 <__gethex+0x424>
 810a8b8:	4b1a      	ldr	r3, [pc, #104]	; (810a924 <__gethex+0x488>)
 810a8ba:	4602      	mov	r2, r0
 810a8bc:	2184      	movs	r1, #132	; 0x84
 810a8be:	e6a8      	b.n	810a612 <__gethex+0x176>
 810a8c0:	6922      	ldr	r2, [r4, #16]
 810a8c2:	3202      	adds	r2, #2
 810a8c4:	f104 010c 	add.w	r1, r4, #12
 810a8c8:	0092      	lsls	r2, r2, #2
 810a8ca:	300c      	adds	r0, #12
 810a8cc:	f7fc fce8 	bl	81072a0 <memcpy>
 810a8d0:	4621      	mov	r1, r4
 810a8d2:	ee18 0a10 	vmov	r0, s16
 810a8d6:	f000 f9cd 	bl	810ac74 <_Bfree>
 810a8da:	464c      	mov	r4, r9
 810a8dc:	6923      	ldr	r3, [r4, #16]
 810a8de:	1c5a      	adds	r2, r3, #1
 810a8e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810a8e4:	6122      	str	r2, [r4, #16]
 810a8e6:	2201      	movs	r2, #1
 810a8e8:	615a      	str	r2, [r3, #20]
 810a8ea:	e7bb      	b.n	810a864 <__gethex+0x3c8>
 810a8ec:	6922      	ldr	r2, [r4, #16]
 810a8ee:	455a      	cmp	r2, fp
 810a8f0:	dd0b      	ble.n	810a90a <__gethex+0x46e>
 810a8f2:	2101      	movs	r1, #1
 810a8f4:	4620      	mov	r0, r4
 810a8f6:	f7ff fd6a 	bl	810a3ce <rshift>
 810a8fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a8fe:	3501      	adds	r5, #1
 810a900:	42ab      	cmp	r3, r5
 810a902:	f6ff aed0 	blt.w	810a6a6 <__gethex+0x20a>
 810a906:	2701      	movs	r7, #1
 810a908:	e7c0      	b.n	810a88c <__gethex+0x3f0>
 810a90a:	f016 061f 	ands.w	r6, r6, #31
 810a90e:	d0fa      	beq.n	810a906 <__gethex+0x46a>
 810a910:	449a      	add	sl, r3
 810a912:	f1c6 0620 	rsb	r6, r6, #32
 810a916:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810a91a:	f000 fa61 	bl	810ade0 <__hi0bits>
 810a91e:	42b0      	cmp	r0, r6
 810a920:	dbe7      	blt.n	810a8f2 <__gethex+0x456>
 810a922:	e7f0      	b.n	810a906 <__gethex+0x46a>
 810a924:	0810bf7c 	.word	0x0810bf7c

0810a928 <L_shift>:
 810a928:	f1c2 0208 	rsb	r2, r2, #8
 810a92c:	0092      	lsls	r2, r2, #2
 810a92e:	b570      	push	{r4, r5, r6, lr}
 810a930:	f1c2 0620 	rsb	r6, r2, #32
 810a934:	6843      	ldr	r3, [r0, #4]
 810a936:	6804      	ldr	r4, [r0, #0]
 810a938:	fa03 f506 	lsl.w	r5, r3, r6
 810a93c:	432c      	orrs	r4, r5
 810a93e:	40d3      	lsrs	r3, r2
 810a940:	6004      	str	r4, [r0, #0]
 810a942:	f840 3f04 	str.w	r3, [r0, #4]!
 810a946:	4288      	cmp	r0, r1
 810a948:	d3f4      	bcc.n	810a934 <L_shift+0xc>
 810a94a:	bd70      	pop	{r4, r5, r6, pc}

0810a94c <__match>:
 810a94c:	b530      	push	{r4, r5, lr}
 810a94e:	6803      	ldr	r3, [r0, #0]
 810a950:	3301      	adds	r3, #1
 810a952:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a956:	b914      	cbnz	r4, 810a95e <__match+0x12>
 810a958:	6003      	str	r3, [r0, #0]
 810a95a:	2001      	movs	r0, #1
 810a95c:	bd30      	pop	{r4, r5, pc}
 810a95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810a966:	2d19      	cmp	r5, #25
 810a968:	bf98      	it	ls
 810a96a:	3220      	addls	r2, #32
 810a96c:	42a2      	cmp	r2, r4
 810a96e:	d0f0      	beq.n	810a952 <__match+0x6>
 810a970:	2000      	movs	r0, #0
 810a972:	e7f3      	b.n	810a95c <__match+0x10>

0810a974 <__hexnan>:
 810a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a978:	680b      	ldr	r3, [r1, #0]
 810a97a:	6801      	ldr	r1, [r0, #0]
 810a97c:	115e      	asrs	r6, r3, #5
 810a97e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810a982:	f013 031f 	ands.w	r3, r3, #31
 810a986:	b087      	sub	sp, #28
 810a988:	bf18      	it	ne
 810a98a:	3604      	addne	r6, #4
 810a98c:	2500      	movs	r5, #0
 810a98e:	1f37      	subs	r7, r6, #4
 810a990:	4682      	mov	sl, r0
 810a992:	4690      	mov	r8, r2
 810a994:	9301      	str	r3, [sp, #4]
 810a996:	f846 5c04 	str.w	r5, [r6, #-4]
 810a99a:	46b9      	mov	r9, r7
 810a99c:	463c      	mov	r4, r7
 810a99e:	9502      	str	r5, [sp, #8]
 810a9a0:	46ab      	mov	fp, r5
 810a9a2:	784a      	ldrb	r2, [r1, #1]
 810a9a4:	1c4b      	adds	r3, r1, #1
 810a9a6:	9303      	str	r3, [sp, #12]
 810a9a8:	b342      	cbz	r2, 810a9fc <__hexnan+0x88>
 810a9aa:	4610      	mov	r0, r2
 810a9ac:	9105      	str	r1, [sp, #20]
 810a9ae:	9204      	str	r2, [sp, #16]
 810a9b0:	f7ff fd5f 	bl	810a472 <__hexdig_fun>
 810a9b4:	2800      	cmp	r0, #0
 810a9b6:	d14f      	bne.n	810aa58 <__hexnan+0xe4>
 810a9b8:	9a04      	ldr	r2, [sp, #16]
 810a9ba:	9905      	ldr	r1, [sp, #20]
 810a9bc:	2a20      	cmp	r2, #32
 810a9be:	d818      	bhi.n	810a9f2 <__hexnan+0x7e>
 810a9c0:	9b02      	ldr	r3, [sp, #8]
 810a9c2:	459b      	cmp	fp, r3
 810a9c4:	dd13      	ble.n	810a9ee <__hexnan+0x7a>
 810a9c6:	454c      	cmp	r4, r9
 810a9c8:	d206      	bcs.n	810a9d8 <__hexnan+0x64>
 810a9ca:	2d07      	cmp	r5, #7
 810a9cc:	dc04      	bgt.n	810a9d8 <__hexnan+0x64>
 810a9ce:	462a      	mov	r2, r5
 810a9d0:	4649      	mov	r1, r9
 810a9d2:	4620      	mov	r0, r4
 810a9d4:	f7ff ffa8 	bl	810a928 <L_shift>
 810a9d8:	4544      	cmp	r4, r8
 810a9da:	d950      	bls.n	810aa7e <__hexnan+0x10a>
 810a9dc:	2300      	movs	r3, #0
 810a9de:	f1a4 0904 	sub.w	r9, r4, #4
 810a9e2:	f844 3c04 	str.w	r3, [r4, #-4]
 810a9e6:	f8cd b008 	str.w	fp, [sp, #8]
 810a9ea:	464c      	mov	r4, r9
 810a9ec:	461d      	mov	r5, r3
 810a9ee:	9903      	ldr	r1, [sp, #12]
 810a9f0:	e7d7      	b.n	810a9a2 <__hexnan+0x2e>
 810a9f2:	2a29      	cmp	r2, #41	; 0x29
 810a9f4:	d156      	bne.n	810aaa4 <__hexnan+0x130>
 810a9f6:	3102      	adds	r1, #2
 810a9f8:	f8ca 1000 	str.w	r1, [sl]
 810a9fc:	f1bb 0f00 	cmp.w	fp, #0
 810aa00:	d050      	beq.n	810aaa4 <__hexnan+0x130>
 810aa02:	454c      	cmp	r4, r9
 810aa04:	d206      	bcs.n	810aa14 <__hexnan+0xa0>
 810aa06:	2d07      	cmp	r5, #7
 810aa08:	dc04      	bgt.n	810aa14 <__hexnan+0xa0>
 810aa0a:	462a      	mov	r2, r5
 810aa0c:	4649      	mov	r1, r9
 810aa0e:	4620      	mov	r0, r4
 810aa10:	f7ff ff8a 	bl	810a928 <L_shift>
 810aa14:	4544      	cmp	r4, r8
 810aa16:	d934      	bls.n	810aa82 <__hexnan+0x10e>
 810aa18:	f1a8 0204 	sub.w	r2, r8, #4
 810aa1c:	4623      	mov	r3, r4
 810aa1e:	f853 1b04 	ldr.w	r1, [r3], #4
 810aa22:	f842 1f04 	str.w	r1, [r2, #4]!
 810aa26:	429f      	cmp	r7, r3
 810aa28:	d2f9      	bcs.n	810aa1e <__hexnan+0xaa>
 810aa2a:	1b3b      	subs	r3, r7, r4
 810aa2c:	f023 0303 	bic.w	r3, r3, #3
 810aa30:	3304      	adds	r3, #4
 810aa32:	3401      	adds	r4, #1
 810aa34:	3e03      	subs	r6, #3
 810aa36:	42b4      	cmp	r4, r6
 810aa38:	bf88      	it	hi
 810aa3a:	2304      	movhi	r3, #4
 810aa3c:	4443      	add	r3, r8
 810aa3e:	2200      	movs	r2, #0
 810aa40:	f843 2b04 	str.w	r2, [r3], #4
 810aa44:	429f      	cmp	r7, r3
 810aa46:	d2fb      	bcs.n	810aa40 <__hexnan+0xcc>
 810aa48:	683b      	ldr	r3, [r7, #0]
 810aa4a:	b91b      	cbnz	r3, 810aa54 <__hexnan+0xe0>
 810aa4c:	4547      	cmp	r7, r8
 810aa4e:	d127      	bne.n	810aaa0 <__hexnan+0x12c>
 810aa50:	2301      	movs	r3, #1
 810aa52:	603b      	str	r3, [r7, #0]
 810aa54:	2005      	movs	r0, #5
 810aa56:	e026      	b.n	810aaa6 <__hexnan+0x132>
 810aa58:	3501      	adds	r5, #1
 810aa5a:	2d08      	cmp	r5, #8
 810aa5c:	f10b 0b01 	add.w	fp, fp, #1
 810aa60:	dd06      	ble.n	810aa70 <__hexnan+0xfc>
 810aa62:	4544      	cmp	r4, r8
 810aa64:	d9c3      	bls.n	810a9ee <__hexnan+0x7a>
 810aa66:	2300      	movs	r3, #0
 810aa68:	f844 3c04 	str.w	r3, [r4, #-4]
 810aa6c:	2501      	movs	r5, #1
 810aa6e:	3c04      	subs	r4, #4
 810aa70:	6822      	ldr	r2, [r4, #0]
 810aa72:	f000 000f 	and.w	r0, r0, #15
 810aa76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810aa7a:	6022      	str	r2, [r4, #0]
 810aa7c:	e7b7      	b.n	810a9ee <__hexnan+0x7a>
 810aa7e:	2508      	movs	r5, #8
 810aa80:	e7b5      	b.n	810a9ee <__hexnan+0x7a>
 810aa82:	9b01      	ldr	r3, [sp, #4]
 810aa84:	2b00      	cmp	r3, #0
 810aa86:	d0df      	beq.n	810aa48 <__hexnan+0xd4>
 810aa88:	f04f 32ff 	mov.w	r2, #4294967295
 810aa8c:	f1c3 0320 	rsb	r3, r3, #32
 810aa90:	fa22 f303 	lsr.w	r3, r2, r3
 810aa94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810aa98:	401a      	ands	r2, r3
 810aa9a:	f846 2c04 	str.w	r2, [r6, #-4]
 810aa9e:	e7d3      	b.n	810aa48 <__hexnan+0xd4>
 810aaa0:	3f04      	subs	r7, #4
 810aaa2:	e7d1      	b.n	810aa48 <__hexnan+0xd4>
 810aaa4:	2004      	movs	r0, #4
 810aaa6:	b007      	add	sp, #28
 810aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810aaac <_localeconv_r>:
 810aaac:	4800      	ldr	r0, [pc, #0]	; (810aab0 <_localeconv_r+0x4>)
 810aaae:	4770      	bx	lr
 810aab0:	10000210 	.word	0x10000210

0810aab4 <__retarget_lock_init_recursive>:
 810aab4:	4770      	bx	lr

0810aab6 <__retarget_lock_acquire_recursive>:
 810aab6:	4770      	bx	lr

0810aab8 <__retarget_lock_release_recursive>:
 810aab8:	4770      	bx	lr

0810aaba <__swhatbuf_r>:
 810aaba:	b570      	push	{r4, r5, r6, lr}
 810aabc:	460e      	mov	r6, r1
 810aabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810aac2:	2900      	cmp	r1, #0
 810aac4:	b096      	sub	sp, #88	; 0x58
 810aac6:	4614      	mov	r4, r2
 810aac8:	461d      	mov	r5, r3
 810aaca:	da07      	bge.n	810aadc <__swhatbuf_r+0x22>
 810aacc:	2300      	movs	r3, #0
 810aace:	602b      	str	r3, [r5, #0]
 810aad0:	89b3      	ldrh	r3, [r6, #12]
 810aad2:	061a      	lsls	r2, r3, #24
 810aad4:	d410      	bmi.n	810aaf8 <__swhatbuf_r+0x3e>
 810aad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810aada:	e00e      	b.n	810aafa <__swhatbuf_r+0x40>
 810aadc:	466a      	mov	r2, sp
 810aade:	f000 ff95 	bl	810ba0c <_fstat_r>
 810aae2:	2800      	cmp	r0, #0
 810aae4:	dbf2      	blt.n	810aacc <__swhatbuf_r+0x12>
 810aae6:	9a01      	ldr	r2, [sp, #4]
 810aae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810aaec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810aaf0:	425a      	negs	r2, r3
 810aaf2:	415a      	adcs	r2, r3
 810aaf4:	602a      	str	r2, [r5, #0]
 810aaf6:	e7ee      	b.n	810aad6 <__swhatbuf_r+0x1c>
 810aaf8:	2340      	movs	r3, #64	; 0x40
 810aafa:	2000      	movs	r0, #0
 810aafc:	6023      	str	r3, [r4, #0]
 810aafe:	b016      	add	sp, #88	; 0x58
 810ab00:	bd70      	pop	{r4, r5, r6, pc}
	...

0810ab04 <__smakebuf_r>:
 810ab04:	898b      	ldrh	r3, [r1, #12]
 810ab06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810ab08:	079d      	lsls	r5, r3, #30
 810ab0a:	4606      	mov	r6, r0
 810ab0c:	460c      	mov	r4, r1
 810ab0e:	d507      	bpl.n	810ab20 <__smakebuf_r+0x1c>
 810ab10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810ab14:	6023      	str	r3, [r4, #0]
 810ab16:	6123      	str	r3, [r4, #16]
 810ab18:	2301      	movs	r3, #1
 810ab1a:	6163      	str	r3, [r4, #20]
 810ab1c:	b002      	add	sp, #8
 810ab1e:	bd70      	pop	{r4, r5, r6, pc}
 810ab20:	ab01      	add	r3, sp, #4
 810ab22:	466a      	mov	r2, sp
 810ab24:	f7ff ffc9 	bl	810aaba <__swhatbuf_r>
 810ab28:	9900      	ldr	r1, [sp, #0]
 810ab2a:	4605      	mov	r5, r0
 810ab2c:	4630      	mov	r0, r6
 810ab2e:	f7fc fc1d 	bl	810736c <_malloc_r>
 810ab32:	b948      	cbnz	r0, 810ab48 <__smakebuf_r+0x44>
 810ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ab38:	059a      	lsls	r2, r3, #22
 810ab3a:	d4ef      	bmi.n	810ab1c <__smakebuf_r+0x18>
 810ab3c:	f023 0303 	bic.w	r3, r3, #3
 810ab40:	f043 0302 	orr.w	r3, r3, #2
 810ab44:	81a3      	strh	r3, [r4, #12]
 810ab46:	e7e3      	b.n	810ab10 <__smakebuf_r+0xc>
 810ab48:	4b0d      	ldr	r3, [pc, #52]	; (810ab80 <__smakebuf_r+0x7c>)
 810ab4a:	62b3      	str	r3, [r6, #40]	; 0x28
 810ab4c:	89a3      	ldrh	r3, [r4, #12]
 810ab4e:	6020      	str	r0, [r4, #0]
 810ab50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810ab54:	81a3      	strh	r3, [r4, #12]
 810ab56:	9b00      	ldr	r3, [sp, #0]
 810ab58:	6163      	str	r3, [r4, #20]
 810ab5a:	9b01      	ldr	r3, [sp, #4]
 810ab5c:	6120      	str	r0, [r4, #16]
 810ab5e:	b15b      	cbz	r3, 810ab78 <__smakebuf_r+0x74>
 810ab60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ab64:	4630      	mov	r0, r6
 810ab66:	f000 ff63 	bl	810ba30 <_isatty_r>
 810ab6a:	b128      	cbz	r0, 810ab78 <__smakebuf_r+0x74>
 810ab6c:	89a3      	ldrh	r3, [r4, #12]
 810ab6e:	f023 0303 	bic.w	r3, r3, #3
 810ab72:	f043 0301 	orr.w	r3, r3, #1
 810ab76:	81a3      	strh	r3, [r4, #12]
 810ab78:	89a0      	ldrh	r0, [r4, #12]
 810ab7a:	4305      	orrs	r5, r0
 810ab7c:	81a5      	strh	r5, [r4, #12]
 810ab7e:	e7cd      	b.n	810ab1c <__smakebuf_r+0x18>
 810ab80:	0810a22d 	.word	0x0810a22d

0810ab84 <__ascii_mbtowc>:
 810ab84:	b082      	sub	sp, #8
 810ab86:	b901      	cbnz	r1, 810ab8a <__ascii_mbtowc+0x6>
 810ab88:	a901      	add	r1, sp, #4
 810ab8a:	b142      	cbz	r2, 810ab9e <__ascii_mbtowc+0x1a>
 810ab8c:	b14b      	cbz	r3, 810aba2 <__ascii_mbtowc+0x1e>
 810ab8e:	7813      	ldrb	r3, [r2, #0]
 810ab90:	600b      	str	r3, [r1, #0]
 810ab92:	7812      	ldrb	r2, [r2, #0]
 810ab94:	1e10      	subs	r0, r2, #0
 810ab96:	bf18      	it	ne
 810ab98:	2001      	movne	r0, #1
 810ab9a:	b002      	add	sp, #8
 810ab9c:	4770      	bx	lr
 810ab9e:	4610      	mov	r0, r2
 810aba0:	e7fb      	b.n	810ab9a <__ascii_mbtowc+0x16>
 810aba2:	f06f 0001 	mvn.w	r0, #1
 810aba6:	e7f8      	b.n	810ab9a <__ascii_mbtowc+0x16>

0810aba8 <memmove>:
 810aba8:	4288      	cmp	r0, r1
 810abaa:	b510      	push	{r4, lr}
 810abac:	eb01 0402 	add.w	r4, r1, r2
 810abb0:	d902      	bls.n	810abb8 <memmove+0x10>
 810abb2:	4284      	cmp	r4, r0
 810abb4:	4623      	mov	r3, r4
 810abb6:	d807      	bhi.n	810abc8 <memmove+0x20>
 810abb8:	1e43      	subs	r3, r0, #1
 810abba:	42a1      	cmp	r1, r4
 810abbc:	d008      	beq.n	810abd0 <memmove+0x28>
 810abbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 810abc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 810abc6:	e7f8      	b.n	810abba <memmove+0x12>
 810abc8:	4402      	add	r2, r0
 810abca:	4601      	mov	r1, r0
 810abcc:	428a      	cmp	r2, r1
 810abce:	d100      	bne.n	810abd2 <memmove+0x2a>
 810abd0:	bd10      	pop	{r4, pc}
 810abd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810abd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810abda:	e7f7      	b.n	810abcc <memmove+0x24>

0810abdc <__malloc_lock>:
 810abdc:	4801      	ldr	r0, [pc, #4]	; (810abe4 <__malloc_lock+0x8>)
 810abde:	f7ff bf6a 	b.w	810aab6 <__retarget_lock_acquire_recursive>
 810abe2:	bf00      	nop
 810abe4:	10000500 	.word	0x10000500

0810abe8 <__malloc_unlock>:
 810abe8:	4801      	ldr	r0, [pc, #4]	; (810abf0 <__malloc_unlock+0x8>)
 810abea:	f7ff bf65 	b.w	810aab8 <__retarget_lock_release_recursive>
 810abee:	bf00      	nop
 810abf0:	10000500 	.word	0x10000500

0810abf4 <_Balloc>:
 810abf4:	b570      	push	{r4, r5, r6, lr}
 810abf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810abf8:	4604      	mov	r4, r0
 810abfa:	460d      	mov	r5, r1
 810abfc:	b976      	cbnz	r6, 810ac1c <_Balloc+0x28>
 810abfe:	2010      	movs	r0, #16
 810ac00:	f7fc fb3e 	bl	8107280 <malloc>
 810ac04:	4602      	mov	r2, r0
 810ac06:	6260      	str	r0, [r4, #36]	; 0x24
 810ac08:	b920      	cbnz	r0, 810ac14 <_Balloc+0x20>
 810ac0a:	4b18      	ldr	r3, [pc, #96]	; (810ac6c <_Balloc+0x78>)
 810ac0c:	4818      	ldr	r0, [pc, #96]	; (810ac70 <_Balloc+0x7c>)
 810ac0e:	2166      	movs	r1, #102	; 0x66
 810ac10:	f7fc fadc 	bl	81071cc <__assert_func>
 810ac14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ac18:	6006      	str	r6, [r0, #0]
 810ac1a:	60c6      	str	r6, [r0, #12]
 810ac1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810ac1e:	68f3      	ldr	r3, [r6, #12]
 810ac20:	b183      	cbz	r3, 810ac44 <_Balloc+0x50>
 810ac22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ac24:	68db      	ldr	r3, [r3, #12]
 810ac26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810ac2a:	b9b8      	cbnz	r0, 810ac5c <_Balloc+0x68>
 810ac2c:	2101      	movs	r1, #1
 810ac2e:	fa01 f605 	lsl.w	r6, r1, r5
 810ac32:	1d72      	adds	r2, r6, #5
 810ac34:	0092      	lsls	r2, r2, #2
 810ac36:	4620      	mov	r0, r4
 810ac38:	f000 fc97 	bl	810b56a <_calloc_r>
 810ac3c:	b160      	cbz	r0, 810ac58 <_Balloc+0x64>
 810ac3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810ac42:	e00e      	b.n	810ac62 <_Balloc+0x6e>
 810ac44:	2221      	movs	r2, #33	; 0x21
 810ac46:	2104      	movs	r1, #4
 810ac48:	4620      	mov	r0, r4
 810ac4a:	f000 fc8e 	bl	810b56a <_calloc_r>
 810ac4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ac50:	60f0      	str	r0, [r6, #12]
 810ac52:	68db      	ldr	r3, [r3, #12]
 810ac54:	2b00      	cmp	r3, #0
 810ac56:	d1e4      	bne.n	810ac22 <_Balloc+0x2e>
 810ac58:	2000      	movs	r0, #0
 810ac5a:	bd70      	pop	{r4, r5, r6, pc}
 810ac5c:	6802      	ldr	r2, [r0, #0]
 810ac5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810ac62:	2300      	movs	r3, #0
 810ac64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810ac68:	e7f7      	b.n	810ac5a <_Balloc+0x66>
 810ac6a:	bf00      	nop
 810ac6c:	0810bf06 	.word	0x0810bf06
 810ac70:	0810c070 	.word	0x0810c070

0810ac74 <_Bfree>:
 810ac74:	b570      	push	{r4, r5, r6, lr}
 810ac76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ac78:	4605      	mov	r5, r0
 810ac7a:	460c      	mov	r4, r1
 810ac7c:	b976      	cbnz	r6, 810ac9c <_Bfree+0x28>
 810ac7e:	2010      	movs	r0, #16
 810ac80:	f7fc fafe 	bl	8107280 <malloc>
 810ac84:	4602      	mov	r2, r0
 810ac86:	6268      	str	r0, [r5, #36]	; 0x24
 810ac88:	b920      	cbnz	r0, 810ac94 <_Bfree+0x20>
 810ac8a:	4b09      	ldr	r3, [pc, #36]	; (810acb0 <_Bfree+0x3c>)
 810ac8c:	4809      	ldr	r0, [pc, #36]	; (810acb4 <_Bfree+0x40>)
 810ac8e:	218a      	movs	r1, #138	; 0x8a
 810ac90:	f7fc fa9c 	bl	81071cc <__assert_func>
 810ac94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ac98:	6006      	str	r6, [r0, #0]
 810ac9a:	60c6      	str	r6, [r0, #12]
 810ac9c:	b13c      	cbz	r4, 810acae <_Bfree+0x3a>
 810ac9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810aca0:	6862      	ldr	r2, [r4, #4]
 810aca2:	68db      	ldr	r3, [r3, #12]
 810aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810aca8:	6021      	str	r1, [r4, #0]
 810acaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810acae:	bd70      	pop	{r4, r5, r6, pc}
 810acb0:	0810bf06 	.word	0x0810bf06
 810acb4:	0810c070 	.word	0x0810c070

0810acb8 <__multadd>:
 810acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810acbc:	690e      	ldr	r6, [r1, #16]
 810acbe:	4607      	mov	r7, r0
 810acc0:	4698      	mov	r8, r3
 810acc2:	460c      	mov	r4, r1
 810acc4:	f101 0014 	add.w	r0, r1, #20
 810acc8:	2300      	movs	r3, #0
 810acca:	6805      	ldr	r5, [r0, #0]
 810accc:	b2a9      	uxth	r1, r5
 810acce:	fb02 8101 	mla	r1, r2, r1, r8
 810acd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810acd6:	0c2d      	lsrs	r5, r5, #16
 810acd8:	fb02 c505 	mla	r5, r2, r5, ip
 810acdc:	b289      	uxth	r1, r1
 810acde:	3301      	adds	r3, #1
 810ace0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810ace4:	429e      	cmp	r6, r3
 810ace6:	f840 1b04 	str.w	r1, [r0], #4
 810acea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810acee:	dcec      	bgt.n	810acca <__multadd+0x12>
 810acf0:	f1b8 0f00 	cmp.w	r8, #0
 810acf4:	d022      	beq.n	810ad3c <__multadd+0x84>
 810acf6:	68a3      	ldr	r3, [r4, #8]
 810acf8:	42b3      	cmp	r3, r6
 810acfa:	dc19      	bgt.n	810ad30 <__multadd+0x78>
 810acfc:	6861      	ldr	r1, [r4, #4]
 810acfe:	4638      	mov	r0, r7
 810ad00:	3101      	adds	r1, #1
 810ad02:	f7ff ff77 	bl	810abf4 <_Balloc>
 810ad06:	4605      	mov	r5, r0
 810ad08:	b928      	cbnz	r0, 810ad16 <__multadd+0x5e>
 810ad0a:	4602      	mov	r2, r0
 810ad0c:	4b0d      	ldr	r3, [pc, #52]	; (810ad44 <__multadd+0x8c>)
 810ad0e:	480e      	ldr	r0, [pc, #56]	; (810ad48 <__multadd+0x90>)
 810ad10:	21b5      	movs	r1, #181	; 0xb5
 810ad12:	f7fc fa5b 	bl	81071cc <__assert_func>
 810ad16:	6922      	ldr	r2, [r4, #16]
 810ad18:	3202      	adds	r2, #2
 810ad1a:	f104 010c 	add.w	r1, r4, #12
 810ad1e:	0092      	lsls	r2, r2, #2
 810ad20:	300c      	adds	r0, #12
 810ad22:	f7fc fabd 	bl	81072a0 <memcpy>
 810ad26:	4621      	mov	r1, r4
 810ad28:	4638      	mov	r0, r7
 810ad2a:	f7ff ffa3 	bl	810ac74 <_Bfree>
 810ad2e:	462c      	mov	r4, r5
 810ad30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810ad34:	3601      	adds	r6, #1
 810ad36:	f8c3 8014 	str.w	r8, [r3, #20]
 810ad3a:	6126      	str	r6, [r4, #16]
 810ad3c:	4620      	mov	r0, r4
 810ad3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ad42:	bf00      	nop
 810ad44:	0810bf7c 	.word	0x0810bf7c
 810ad48:	0810c070 	.word	0x0810c070

0810ad4c <__s2b>:
 810ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ad50:	460c      	mov	r4, r1
 810ad52:	4615      	mov	r5, r2
 810ad54:	461f      	mov	r7, r3
 810ad56:	2209      	movs	r2, #9
 810ad58:	3308      	adds	r3, #8
 810ad5a:	4606      	mov	r6, r0
 810ad5c:	fb93 f3f2 	sdiv	r3, r3, r2
 810ad60:	2100      	movs	r1, #0
 810ad62:	2201      	movs	r2, #1
 810ad64:	429a      	cmp	r2, r3
 810ad66:	db09      	blt.n	810ad7c <__s2b+0x30>
 810ad68:	4630      	mov	r0, r6
 810ad6a:	f7ff ff43 	bl	810abf4 <_Balloc>
 810ad6e:	b940      	cbnz	r0, 810ad82 <__s2b+0x36>
 810ad70:	4602      	mov	r2, r0
 810ad72:	4b19      	ldr	r3, [pc, #100]	; (810add8 <__s2b+0x8c>)
 810ad74:	4819      	ldr	r0, [pc, #100]	; (810addc <__s2b+0x90>)
 810ad76:	21ce      	movs	r1, #206	; 0xce
 810ad78:	f7fc fa28 	bl	81071cc <__assert_func>
 810ad7c:	0052      	lsls	r2, r2, #1
 810ad7e:	3101      	adds	r1, #1
 810ad80:	e7f0      	b.n	810ad64 <__s2b+0x18>
 810ad82:	9b08      	ldr	r3, [sp, #32]
 810ad84:	6143      	str	r3, [r0, #20]
 810ad86:	2d09      	cmp	r5, #9
 810ad88:	f04f 0301 	mov.w	r3, #1
 810ad8c:	6103      	str	r3, [r0, #16]
 810ad8e:	dd16      	ble.n	810adbe <__s2b+0x72>
 810ad90:	f104 0909 	add.w	r9, r4, #9
 810ad94:	46c8      	mov	r8, r9
 810ad96:	442c      	add	r4, r5
 810ad98:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ad9c:	4601      	mov	r1, r0
 810ad9e:	3b30      	subs	r3, #48	; 0x30
 810ada0:	220a      	movs	r2, #10
 810ada2:	4630      	mov	r0, r6
 810ada4:	f7ff ff88 	bl	810acb8 <__multadd>
 810ada8:	45a0      	cmp	r8, r4
 810adaa:	d1f5      	bne.n	810ad98 <__s2b+0x4c>
 810adac:	f1a5 0408 	sub.w	r4, r5, #8
 810adb0:	444c      	add	r4, r9
 810adb2:	1b2d      	subs	r5, r5, r4
 810adb4:	1963      	adds	r3, r4, r5
 810adb6:	42bb      	cmp	r3, r7
 810adb8:	db04      	blt.n	810adc4 <__s2b+0x78>
 810adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810adbe:	340a      	adds	r4, #10
 810adc0:	2509      	movs	r5, #9
 810adc2:	e7f6      	b.n	810adb2 <__s2b+0x66>
 810adc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 810adc8:	4601      	mov	r1, r0
 810adca:	3b30      	subs	r3, #48	; 0x30
 810adcc:	220a      	movs	r2, #10
 810adce:	4630      	mov	r0, r6
 810add0:	f7ff ff72 	bl	810acb8 <__multadd>
 810add4:	e7ee      	b.n	810adb4 <__s2b+0x68>
 810add6:	bf00      	nop
 810add8:	0810bf7c 	.word	0x0810bf7c
 810addc:	0810c070 	.word	0x0810c070

0810ade0 <__hi0bits>:
 810ade0:	0c03      	lsrs	r3, r0, #16
 810ade2:	041b      	lsls	r3, r3, #16
 810ade4:	b9d3      	cbnz	r3, 810ae1c <__hi0bits+0x3c>
 810ade6:	0400      	lsls	r0, r0, #16
 810ade8:	2310      	movs	r3, #16
 810adea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810adee:	bf04      	itt	eq
 810adf0:	0200      	lsleq	r0, r0, #8
 810adf2:	3308      	addeq	r3, #8
 810adf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810adf8:	bf04      	itt	eq
 810adfa:	0100      	lsleq	r0, r0, #4
 810adfc:	3304      	addeq	r3, #4
 810adfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ae02:	bf04      	itt	eq
 810ae04:	0080      	lsleq	r0, r0, #2
 810ae06:	3302      	addeq	r3, #2
 810ae08:	2800      	cmp	r0, #0
 810ae0a:	db05      	blt.n	810ae18 <__hi0bits+0x38>
 810ae0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810ae10:	f103 0301 	add.w	r3, r3, #1
 810ae14:	bf08      	it	eq
 810ae16:	2320      	moveq	r3, #32
 810ae18:	4618      	mov	r0, r3
 810ae1a:	4770      	bx	lr
 810ae1c:	2300      	movs	r3, #0
 810ae1e:	e7e4      	b.n	810adea <__hi0bits+0xa>

0810ae20 <__lo0bits>:
 810ae20:	6803      	ldr	r3, [r0, #0]
 810ae22:	f013 0207 	ands.w	r2, r3, #7
 810ae26:	4601      	mov	r1, r0
 810ae28:	d00b      	beq.n	810ae42 <__lo0bits+0x22>
 810ae2a:	07da      	lsls	r2, r3, #31
 810ae2c:	d424      	bmi.n	810ae78 <__lo0bits+0x58>
 810ae2e:	0798      	lsls	r0, r3, #30
 810ae30:	bf49      	itett	mi
 810ae32:	085b      	lsrmi	r3, r3, #1
 810ae34:	089b      	lsrpl	r3, r3, #2
 810ae36:	2001      	movmi	r0, #1
 810ae38:	600b      	strmi	r3, [r1, #0]
 810ae3a:	bf5c      	itt	pl
 810ae3c:	600b      	strpl	r3, [r1, #0]
 810ae3e:	2002      	movpl	r0, #2
 810ae40:	4770      	bx	lr
 810ae42:	b298      	uxth	r0, r3
 810ae44:	b9b0      	cbnz	r0, 810ae74 <__lo0bits+0x54>
 810ae46:	0c1b      	lsrs	r3, r3, #16
 810ae48:	2010      	movs	r0, #16
 810ae4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 810ae4e:	bf04      	itt	eq
 810ae50:	0a1b      	lsreq	r3, r3, #8
 810ae52:	3008      	addeq	r0, #8
 810ae54:	071a      	lsls	r2, r3, #28
 810ae56:	bf04      	itt	eq
 810ae58:	091b      	lsreq	r3, r3, #4
 810ae5a:	3004      	addeq	r0, #4
 810ae5c:	079a      	lsls	r2, r3, #30
 810ae5e:	bf04      	itt	eq
 810ae60:	089b      	lsreq	r3, r3, #2
 810ae62:	3002      	addeq	r0, #2
 810ae64:	07da      	lsls	r2, r3, #31
 810ae66:	d403      	bmi.n	810ae70 <__lo0bits+0x50>
 810ae68:	085b      	lsrs	r3, r3, #1
 810ae6a:	f100 0001 	add.w	r0, r0, #1
 810ae6e:	d005      	beq.n	810ae7c <__lo0bits+0x5c>
 810ae70:	600b      	str	r3, [r1, #0]
 810ae72:	4770      	bx	lr
 810ae74:	4610      	mov	r0, r2
 810ae76:	e7e8      	b.n	810ae4a <__lo0bits+0x2a>
 810ae78:	2000      	movs	r0, #0
 810ae7a:	4770      	bx	lr
 810ae7c:	2020      	movs	r0, #32
 810ae7e:	4770      	bx	lr

0810ae80 <__i2b>:
 810ae80:	b510      	push	{r4, lr}
 810ae82:	460c      	mov	r4, r1
 810ae84:	2101      	movs	r1, #1
 810ae86:	f7ff feb5 	bl	810abf4 <_Balloc>
 810ae8a:	4602      	mov	r2, r0
 810ae8c:	b928      	cbnz	r0, 810ae9a <__i2b+0x1a>
 810ae8e:	4b05      	ldr	r3, [pc, #20]	; (810aea4 <__i2b+0x24>)
 810ae90:	4805      	ldr	r0, [pc, #20]	; (810aea8 <__i2b+0x28>)
 810ae92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810ae96:	f7fc f999 	bl	81071cc <__assert_func>
 810ae9a:	2301      	movs	r3, #1
 810ae9c:	6144      	str	r4, [r0, #20]
 810ae9e:	6103      	str	r3, [r0, #16]
 810aea0:	bd10      	pop	{r4, pc}
 810aea2:	bf00      	nop
 810aea4:	0810bf7c 	.word	0x0810bf7c
 810aea8:	0810c070 	.word	0x0810c070

0810aeac <__multiply>:
 810aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aeb0:	4614      	mov	r4, r2
 810aeb2:	690a      	ldr	r2, [r1, #16]
 810aeb4:	6923      	ldr	r3, [r4, #16]
 810aeb6:	429a      	cmp	r2, r3
 810aeb8:	bfb8      	it	lt
 810aeba:	460b      	movlt	r3, r1
 810aebc:	460d      	mov	r5, r1
 810aebe:	bfbc      	itt	lt
 810aec0:	4625      	movlt	r5, r4
 810aec2:	461c      	movlt	r4, r3
 810aec4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810aec8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810aecc:	68ab      	ldr	r3, [r5, #8]
 810aece:	6869      	ldr	r1, [r5, #4]
 810aed0:	eb0a 0709 	add.w	r7, sl, r9
 810aed4:	42bb      	cmp	r3, r7
 810aed6:	b085      	sub	sp, #20
 810aed8:	bfb8      	it	lt
 810aeda:	3101      	addlt	r1, #1
 810aedc:	f7ff fe8a 	bl	810abf4 <_Balloc>
 810aee0:	b930      	cbnz	r0, 810aef0 <__multiply+0x44>
 810aee2:	4602      	mov	r2, r0
 810aee4:	4b42      	ldr	r3, [pc, #264]	; (810aff0 <__multiply+0x144>)
 810aee6:	4843      	ldr	r0, [pc, #268]	; (810aff4 <__multiply+0x148>)
 810aee8:	f240 115d 	movw	r1, #349	; 0x15d
 810aeec:	f7fc f96e 	bl	81071cc <__assert_func>
 810aef0:	f100 0614 	add.w	r6, r0, #20
 810aef4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810aef8:	4633      	mov	r3, r6
 810aefa:	2200      	movs	r2, #0
 810aefc:	4543      	cmp	r3, r8
 810aefe:	d31e      	bcc.n	810af3e <__multiply+0x92>
 810af00:	f105 0c14 	add.w	ip, r5, #20
 810af04:	f104 0314 	add.w	r3, r4, #20
 810af08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810af0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810af10:	9202      	str	r2, [sp, #8]
 810af12:	ebac 0205 	sub.w	r2, ip, r5
 810af16:	3a15      	subs	r2, #21
 810af18:	f022 0203 	bic.w	r2, r2, #3
 810af1c:	3204      	adds	r2, #4
 810af1e:	f105 0115 	add.w	r1, r5, #21
 810af22:	458c      	cmp	ip, r1
 810af24:	bf38      	it	cc
 810af26:	2204      	movcc	r2, #4
 810af28:	9201      	str	r2, [sp, #4]
 810af2a:	9a02      	ldr	r2, [sp, #8]
 810af2c:	9303      	str	r3, [sp, #12]
 810af2e:	429a      	cmp	r2, r3
 810af30:	d808      	bhi.n	810af44 <__multiply+0x98>
 810af32:	2f00      	cmp	r7, #0
 810af34:	dc55      	bgt.n	810afe2 <__multiply+0x136>
 810af36:	6107      	str	r7, [r0, #16]
 810af38:	b005      	add	sp, #20
 810af3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af3e:	f843 2b04 	str.w	r2, [r3], #4
 810af42:	e7db      	b.n	810aefc <__multiply+0x50>
 810af44:	f8b3 a000 	ldrh.w	sl, [r3]
 810af48:	f1ba 0f00 	cmp.w	sl, #0
 810af4c:	d020      	beq.n	810af90 <__multiply+0xe4>
 810af4e:	f105 0e14 	add.w	lr, r5, #20
 810af52:	46b1      	mov	r9, r6
 810af54:	2200      	movs	r2, #0
 810af56:	f85e 4b04 	ldr.w	r4, [lr], #4
 810af5a:	f8d9 b000 	ldr.w	fp, [r9]
 810af5e:	b2a1      	uxth	r1, r4
 810af60:	fa1f fb8b 	uxth.w	fp, fp
 810af64:	fb0a b101 	mla	r1, sl, r1, fp
 810af68:	4411      	add	r1, r2
 810af6a:	f8d9 2000 	ldr.w	r2, [r9]
 810af6e:	0c24      	lsrs	r4, r4, #16
 810af70:	0c12      	lsrs	r2, r2, #16
 810af72:	fb0a 2404 	mla	r4, sl, r4, r2
 810af76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810af7a:	b289      	uxth	r1, r1
 810af7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810af80:	45f4      	cmp	ip, lr
 810af82:	f849 1b04 	str.w	r1, [r9], #4
 810af86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810af8a:	d8e4      	bhi.n	810af56 <__multiply+0xaa>
 810af8c:	9901      	ldr	r1, [sp, #4]
 810af8e:	5072      	str	r2, [r6, r1]
 810af90:	9a03      	ldr	r2, [sp, #12]
 810af92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810af96:	3304      	adds	r3, #4
 810af98:	f1b9 0f00 	cmp.w	r9, #0
 810af9c:	d01f      	beq.n	810afde <__multiply+0x132>
 810af9e:	6834      	ldr	r4, [r6, #0]
 810afa0:	f105 0114 	add.w	r1, r5, #20
 810afa4:	46b6      	mov	lr, r6
 810afa6:	f04f 0a00 	mov.w	sl, #0
 810afaa:	880a      	ldrh	r2, [r1, #0]
 810afac:	f8be b002 	ldrh.w	fp, [lr, #2]
 810afb0:	fb09 b202 	mla	r2, r9, r2, fp
 810afb4:	4492      	add	sl, r2
 810afb6:	b2a4      	uxth	r4, r4
 810afb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810afbc:	f84e 4b04 	str.w	r4, [lr], #4
 810afc0:	f851 4b04 	ldr.w	r4, [r1], #4
 810afc4:	f8be 2000 	ldrh.w	r2, [lr]
 810afc8:	0c24      	lsrs	r4, r4, #16
 810afca:	fb09 2404 	mla	r4, r9, r4, r2
 810afce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810afd2:	458c      	cmp	ip, r1
 810afd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810afd8:	d8e7      	bhi.n	810afaa <__multiply+0xfe>
 810afda:	9a01      	ldr	r2, [sp, #4]
 810afdc:	50b4      	str	r4, [r6, r2]
 810afde:	3604      	adds	r6, #4
 810afe0:	e7a3      	b.n	810af2a <__multiply+0x7e>
 810afe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810afe6:	2b00      	cmp	r3, #0
 810afe8:	d1a5      	bne.n	810af36 <__multiply+0x8a>
 810afea:	3f01      	subs	r7, #1
 810afec:	e7a1      	b.n	810af32 <__multiply+0x86>
 810afee:	bf00      	nop
 810aff0:	0810bf7c 	.word	0x0810bf7c
 810aff4:	0810c070 	.word	0x0810c070

0810aff8 <__pow5mult>:
 810aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810affc:	4615      	mov	r5, r2
 810affe:	f012 0203 	ands.w	r2, r2, #3
 810b002:	4606      	mov	r6, r0
 810b004:	460f      	mov	r7, r1
 810b006:	d007      	beq.n	810b018 <__pow5mult+0x20>
 810b008:	4c25      	ldr	r4, [pc, #148]	; (810b0a0 <__pow5mult+0xa8>)
 810b00a:	3a01      	subs	r2, #1
 810b00c:	2300      	movs	r3, #0
 810b00e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b012:	f7ff fe51 	bl	810acb8 <__multadd>
 810b016:	4607      	mov	r7, r0
 810b018:	10ad      	asrs	r5, r5, #2
 810b01a:	d03d      	beq.n	810b098 <__pow5mult+0xa0>
 810b01c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b01e:	b97c      	cbnz	r4, 810b040 <__pow5mult+0x48>
 810b020:	2010      	movs	r0, #16
 810b022:	f7fc f92d 	bl	8107280 <malloc>
 810b026:	4602      	mov	r2, r0
 810b028:	6270      	str	r0, [r6, #36]	; 0x24
 810b02a:	b928      	cbnz	r0, 810b038 <__pow5mult+0x40>
 810b02c:	4b1d      	ldr	r3, [pc, #116]	; (810b0a4 <__pow5mult+0xac>)
 810b02e:	481e      	ldr	r0, [pc, #120]	; (810b0a8 <__pow5mult+0xb0>)
 810b030:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b034:	f7fc f8ca 	bl	81071cc <__assert_func>
 810b038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b03c:	6004      	str	r4, [r0, #0]
 810b03e:	60c4      	str	r4, [r0, #12]
 810b040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b048:	b94c      	cbnz	r4, 810b05e <__pow5mult+0x66>
 810b04a:	f240 2171 	movw	r1, #625	; 0x271
 810b04e:	4630      	mov	r0, r6
 810b050:	f7ff ff16 	bl	810ae80 <__i2b>
 810b054:	2300      	movs	r3, #0
 810b056:	f8c8 0008 	str.w	r0, [r8, #8]
 810b05a:	4604      	mov	r4, r0
 810b05c:	6003      	str	r3, [r0, #0]
 810b05e:	f04f 0900 	mov.w	r9, #0
 810b062:	07eb      	lsls	r3, r5, #31
 810b064:	d50a      	bpl.n	810b07c <__pow5mult+0x84>
 810b066:	4639      	mov	r1, r7
 810b068:	4622      	mov	r2, r4
 810b06a:	4630      	mov	r0, r6
 810b06c:	f7ff ff1e 	bl	810aeac <__multiply>
 810b070:	4639      	mov	r1, r7
 810b072:	4680      	mov	r8, r0
 810b074:	4630      	mov	r0, r6
 810b076:	f7ff fdfd 	bl	810ac74 <_Bfree>
 810b07a:	4647      	mov	r7, r8
 810b07c:	106d      	asrs	r5, r5, #1
 810b07e:	d00b      	beq.n	810b098 <__pow5mult+0xa0>
 810b080:	6820      	ldr	r0, [r4, #0]
 810b082:	b938      	cbnz	r0, 810b094 <__pow5mult+0x9c>
 810b084:	4622      	mov	r2, r4
 810b086:	4621      	mov	r1, r4
 810b088:	4630      	mov	r0, r6
 810b08a:	f7ff ff0f 	bl	810aeac <__multiply>
 810b08e:	6020      	str	r0, [r4, #0]
 810b090:	f8c0 9000 	str.w	r9, [r0]
 810b094:	4604      	mov	r4, r0
 810b096:	e7e4      	b.n	810b062 <__pow5mult+0x6a>
 810b098:	4638      	mov	r0, r7
 810b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b09e:	bf00      	nop
 810b0a0:	0810c1c0 	.word	0x0810c1c0
 810b0a4:	0810bf06 	.word	0x0810bf06
 810b0a8:	0810c070 	.word	0x0810c070

0810b0ac <__lshift>:
 810b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b0b0:	460c      	mov	r4, r1
 810b0b2:	6849      	ldr	r1, [r1, #4]
 810b0b4:	6923      	ldr	r3, [r4, #16]
 810b0b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b0ba:	68a3      	ldr	r3, [r4, #8]
 810b0bc:	4607      	mov	r7, r0
 810b0be:	4691      	mov	r9, r2
 810b0c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b0c4:	f108 0601 	add.w	r6, r8, #1
 810b0c8:	42b3      	cmp	r3, r6
 810b0ca:	db0b      	blt.n	810b0e4 <__lshift+0x38>
 810b0cc:	4638      	mov	r0, r7
 810b0ce:	f7ff fd91 	bl	810abf4 <_Balloc>
 810b0d2:	4605      	mov	r5, r0
 810b0d4:	b948      	cbnz	r0, 810b0ea <__lshift+0x3e>
 810b0d6:	4602      	mov	r2, r0
 810b0d8:	4b28      	ldr	r3, [pc, #160]	; (810b17c <__lshift+0xd0>)
 810b0da:	4829      	ldr	r0, [pc, #164]	; (810b180 <__lshift+0xd4>)
 810b0dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b0e0:	f7fc f874 	bl	81071cc <__assert_func>
 810b0e4:	3101      	adds	r1, #1
 810b0e6:	005b      	lsls	r3, r3, #1
 810b0e8:	e7ee      	b.n	810b0c8 <__lshift+0x1c>
 810b0ea:	2300      	movs	r3, #0
 810b0ec:	f100 0114 	add.w	r1, r0, #20
 810b0f0:	f100 0210 	add.w	r2, r0, #16
 810b0f4:	4618      	mov	r0, r3
 810b0f6:	4553      	cmp	r3, sl
 810b0f8:	db33      	blt.n	810b162 <__lshift+0xb6>
 810b0fa:	6920      	ldr	r0, [r4, #16]
 810b0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b100:	f104 0314 	add.w	r3, r4, #20
 810b104:	f019 091f 	ands.w	r9, r9, #31
 810b108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b10c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810b110:	d02b      	beq.n	810b16a <__lshift+0xbe>
 810b112:	f1c9 0e20 	rsb	lr, r9, #32
 810b116:	468a      	mov	sl, r1
 810b118:	2200      	movs	r2, #0
 810b11a:	6818      	ldr	r0, [r3, #0]
 810b11c:	fa00 f009 	lsl.w	r0, r0, r9
 810b120:	4302      	orrs	r2, r0
 810b122:	f84a 2b04 	str.w	r2, [sl], #4
 810b126:	f853 2b04 	ldr.w	r2, [r3], #4
 810b12a:	459c      	cmp	ip, r3
 810b12c:	fa22 f20e 	lsr.w	r2, r2, lr
 810b130:	d8f3      	bhi.n	810b11a <__lshift+0x6e>
 810b132:	ebac 0304 	sub.w	r3, ip, r4
 810b136:	3b15      	subs	r3, #21
 810b138:	f023 0303 	bic.w	r3, r3, #3
 810b13c:	3304      	adds	r3, #4
 810b13e:	f104 0015 	add.w	r0, r4, #21
 810b142:	4584      	cmp	ip, r0
 810b144:	bf38      	it	cc
 810b146:	2304      	movcc	r3, #4
 810b148:	50ca      	str	r2, [r1, r3]
 810b14a:	b10a      	cbz	r2, 810b150 <__lshift+0xa4>
 810b14c:	f108 0602 	add.w	r6, r8, #2
 810b150:	3e01      	subs	r6, #1
 810b152:	4638      	mov	r0, r7
 810b154:	612e      	str	r6, [r5, #16]
 810b156:	4621      	mov	r1, r4
 810b158:	f7ff fd8c 	bl	810ac74 <_Bfree>
 810b15c:	4628      	mov	r0, r5
 810b15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b162:	f842 0f04 	str.w	r0, [r2, #4]!
 810b166:	3301      	adds	r3, #1
 810b168:	e7c5      	b.n	810b0f6 <__lshift+0x4a>
 810b16a:	3904      	subs	r1, #4
 810b16c:	f853 2b04 	ldr.w	r2, [r3], #4
 810b170:	f841 2f04 	str.w	r2, [r1, #4]!
 810b174:	459c      	cmp	ip, r3
 810b176:	d8f9      	bhi.n	810b16c <__lshift+0xc0>
 810b178:	e7ea      	b.n	810b150 <__lshift+0xa4>
 810b17a:	bf00      	nop
 810b17c:	0810bf7c 	.word	0x0810bf7c
 810b180:	0810c070 	.word	0x0810c070

0810b184 <__mcmp>:
 810b184:	b530      	push	{r4, r5, lr}
 810b186:	6902      	ldr	r2, [r0, #16]
 810b188:	690c      	ldr	r4, [r1, #16]
 810b18a:	1b12      	subs	r2, r2, r4
 810b18c:	d10e      	bne.n	810b1ac <__mcmp+0x28>
 810b18e:	f100 0314 	add.w	r3, r0, #20
 810b192:	3114      	adds	r1, #20
 810b194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b19c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b1a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b1a4:	42a5      	cmp	r5, r4
 810b1a6:	d003      	beq.n	810b1b0 <__mcmp+0x2c>
 810b1a8:	d305      	bcc.n	810b1b6 <__mcmp+0x32>
 810b1aa:	2201      	movs	r2, #1
 810b1ac:	4610      	mov	r0, r2
 810b1ae:	bd30      	pop	{r4, r5, pc}
 810b1b0:	4283      	cmp	r3, r0
 810b1b2:	d3f3      	bcc.n	810b19c <__mcmp+0x18>
 810b1b4:	e7fa      	b.n	810b1ac <__mcmp+0x28>
 810b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 810b1ba:	e7f7      	b.n	810b1ac <__mcmp+0x28>

0810b1bc <__mdiff>:
 810b1bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b1c0:	460c      	mov	r4, r1
 810b1c2:	4606      	mov	r6, r0
 810b1c4:	4611      	mov	r1, r2
 810b1c6:	4620      	mov	r0, r4
 810b1c8:	4617      	mov	r7, r2
 810b1ca:	f7ff ffdb 	bl	810b184 <__mcmp>
 810b1ce:	1e05      	subs	r5, r0, #0
 810b1d0:	d110      	bne.n	810b1f4 <__mdiff+0x38>
 810b1d2:	4629      	mov	r1, r5
 810b1d4:	4630      	mov	r0, r6
 810b1d6:	f7ff fd0d 	bl	810abf4 <_Balloc>
 810b1da:	b930      	cbnz	r0, 810b1ea <__mdiff+0x2e>
 810b1dc:	4b39      	ldr	r3, [pc, #228]	; (810b2c4 <__mdiff+0x108>)
 810b1de:	4602      	mov	r2, r0
 810b1e0:	f240 2132 	movw	r1, #562	; 0x232
 810b1e4:	4838      	ldr	r0, [pc, #224]	; (810b2c8 <__mdiff+0x10c>)
 810b1e6:	f7fb fff1 	bl	81071cc <__assert_func>
 810b1ea:	2301      	movs	r3, #1
 810b1ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b1f4:	bfa4      	itt	ge
 810b1f6:	463b      	movge	r3, r7
 810b1f8:	4627      	movge	r7, r4
 810b1fa:	4630      	mov	r0, r6
 810b1fc:	6879      	ldr	r1, [r7, #4]
 810b1fe:	bfa6      	itte	ge
 810b200:	461c      	movge	r4, r3
 810b202:	2500      	movge	r5, #0
 810b204:	2501      	movlt	r5, #1
 810b206:	f7ff fcf5 	bl	810abf4 <_Balloc>
 810b20a:	b920      	cbnz	r0, 810b216 <__mdiff+0x5a>
 810b20c:	4b2d      	ldr	r3, [pc, #180]	; (810b2c4 <__mdiff+0x108>)
 810b20e:	4602      	mov	r2, r0
 810b210:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b214:	e7e6      	b.n	810b1e4 <__mdiff+0x28>
 810b216:	693e      	ldr	r6, [r7, #16]
 810b218:	60c5      	str	r5, [r0, #12]
 810b21a:	6925      	ldr	r5, [r4, #16]
 810b21c:	f107 0114 	add.w	r1, r7, #20
 810b220:	f104 0914 	add.w	r9, r4, #20
 810b224:	f100 0e14 	add.w	lr, r0, #20
 810b228:	f107 0210 	add.w	r2, r7, #16
 810b22c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810b230:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810b234:	46f2      	mov	sl, lr
 810b236:	2700      	movs	r7, #0
 810b238:	f859 3b04 	ldr.w	r3, [r9], #4
 810b23c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b240:	fa1f f883 	uxth.w	r8, r3
 810b244:	fa17 f78b 	uxtah	r7, r7, fp
 810b248:	0c1b      	lsrs	r3, r3, #16
 810b24a:	eba7 0808 	sub.w	r8, r7, r8
 810b24e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b256:	fa1f f888 	uxth.w	r8, r8
 810b25a:	141f      	asrs	r7, r3, #16
 810b25c:	454d      	cmp	r5, r9
 810b25e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b262:	f84a 3b04 	str.w	r3, [sl], #4
 810b266:	d8e7      	bhi.n	810b238 <__mdiff+0x7c>
 810b268:	1b2b      	subs	r3, r5, r4
 810b26a:	3b15      	subs	r3, #21
 810b26c:	f023 0303 	bic.w	r3, r3, #3
 810b270:	3304      	adds	r3, #4
 810b272:	3415      	adds	r4, #21
 810b274:	42a5      	cmp	r5, r4
 810b276:	bf38      	it	cc
 810b278:	2304      	movcc	r3, #4
 810b27a:	4419      	add	r1, r3
 810b27c:	4473      	add	r3, lr
 810b27e:	469e      	mov	lr, r3
 810b280:	460d      	mov	r5, r1
 810b282:	4565      	cmp	r5, ip
 810b284:	d30e      	bcc.n	810b2a4 <__mdiff+0xe8>
 810b286:	f10c 0203 	add.w	r2, ip, #3
 810b28a:	1a52      	subs	r2, r2, r1
 810b28c:	f022 0203 	bic.w	r2, r2, #3
 810b290:	3903      	subs	r1, #3
 810b292:	458c      	cmp	ip, r1
 810b294:	bf38      	it	cc
 810b296:	2200      	movcc	r2, #0
 810b298:	441a      	add	r2, r3
 810b29a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b29e:	b17b      	cbz	r3, 810b2c0 <__mdiff+0x104>
 810b2a0:	6106      	str	r6, [r0, #16]
 810b2a2:	e7a5      	b.n	810b1f0 <__mdiff+0x34>
 810b2a4:	f855 8b04 	ldr.w	r8, [r5], #4
 810b2a8:	fa17 f488 	uxtah	r4, r7, r8
 810b2ac:	1422      	asrs	r2, r4, #16
 810b2ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810b2b2:	b2a4      	uxth	r4, r4
 810b2b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810b2b8:	f84e 4b04 	str.w	r4, [lr], #4
 810b2bc:	1417      	asrs	r7, r2, #16
 810b2be:	e7e0      	b.n	810b282 <__mdiff+0xc6>
 810b2c0:	3e01      	subs	r6, #1
 810b2c2:	e7ea      	b.n	810b29a <__mdiff+0xde>
 810b2c4:	0810bf7c 	.word	0x0810bf7c
 810b2c8:	0810c070 	.word	0x0810c070

0810b2cc <__ulp>:
 810b2cc:	b082      	sub	sp, #8
 810b2ce:	ed8d 0b00 	vstr	d0, [sp]
 810b2d2:	9b01      	ldr	r3, [sp, #4]
 810b2d4:	4912      	ldr	r1, [pc, #72]	; (810b320 <__ulp+0x54>)
 810b2d6:	4019      	ands	r1, r3
 810b2d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b2dc:	2900      	cmp	r1, #0
 810b2de:	dd05      	ble.n	810b2ec <__ulp+0x20>
 810b2e0:	2200      	movs	r2, #0
 810b2e2:	460b      	mov	r3, r1
 810b2e4:	ec43 2b10 	vmov	d0, r2, r3
 810b2e8:	b002      	add	sp, #8
 810b2ea:	4770      	bx	lr
 810b2ec:	4249      	negs	r1, r1
 810b2ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b2f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b2f6:	f04f 0200 	mov.w	r2, #0
 810b2fa:	f04f 0300 	mov.w	r3, #0
 810b2fe:	da04      	bge.n	810b30a <__ulp+0x3e>
 810b300:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b304:	fa41 f300 	asr.w	r3, r1, r0
 810b308:	e7ec      	b.n	810b2e4 <__ulp+0x18>
 810b30a:	f1a0 0114 	sub.w	r1, r0, #20
 810b30e:	291e      	cmp	r1, #30
 810b310:	bfda      	itte	le
 810b312:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b316:	fa20 f101 	lsrle.w	r1, r0, r1
 810b31a:	2101      	movgt	r1, #1
 810b31c:	460a      	mov	r2, r1
 810b31e:	e7e1      	b.n	810b2e4 <__ulp+0x18>
 810b320:	7ff00000 	.word	0x7ff00000

0810b324 <__b2d>:
 810b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b326:	6905      	ldr	r5, [r0, #16]
 810b328:	f100 0714 	add.w	r7, r0, #20
 810b32c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b330:	1f2e      	subs	r6, r5, #4
 810b332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b336:	4620      	mov	r0, r4
 810b338:	f7ff fd52 	bl	810ade0 <__hi0bits>
 810b33c:	f1c0 0320 	rsb	r3, r0, #32
 810b340:	280a      	cmp	r0, #10
 810b342:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b3c0 <__b2d+0x9c>
 810b346:	600b      	str	r3, [r1, #0]
 810b348:	dc14      	bgt.n	810b374 <__b2d+0x50>
 810b34a:	f1c0 0e0b 	rsb	lr, r0, #11
 810b34e:	fa24 f10e 	lsr.w	r1, r4, lr
 810b352:	42b7      	cmp	r7, r6
 810b354:	ea41 030c 	orr.w	r3, r1, ip
 810b358:	bf34      	ite	cc
 810b35a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b35e:	2100      	movcs	r1, #0
 810b360:	3015      	adds	r0, #21
 810b362:	fa04 f000 	lsl.w	r0, r4, r0
 810b366:	fa21 f10e 	lsr.w	r1, r1, lr
 810b36a:	ea40 0201 	orr.w	r2, r0, r1
 810b36e:	ec43 2b10 	vmov	d0, r2, r3
 810b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b374:	42b7      	cmp	r7, r6
 810b376:	bf3a      	itte	cc
 810b378:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b37c:	f1a5 0608 	subcc.w	r6, r5, #8
 810b380:	2100      	movcs	r1, #0
 810b382:	380b      	subs	r0, #11
 810b384:	d017      	beq.n	810b3b6 <__b2d+0x92>
 810b386:	f1c0 0c20 	rsb	ip, r0, #32
 810b38a:	fa04 f500 	lsl.w	r5, r4, r0
 810b38e:	42be      	cmp	r6, r7
 810b390:	fa21 f40c 	lsr.w	r4, r1, ip
 810b394:	ea45 0504 	orr.w	r5, r5, r4
 810b398:	bf8c      	ite	hi
 810b39a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b39e:	2400      	movls	r4, #0
 810b3a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b3a4:	fa01 f000 	lsl.w	r0, r1, r0
 810b3a8:	fa24 f40c 	lsr.w	r4, r4, ip
 810b3ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b3b0:	ea40 0204 	orr.w	r2, r0, r4
 810b3b4:	e7db      	b.n	810b36e <__b2d+0x4a>
 810b3b6:	ea44 030c 	orr.w	r3, r4, ip
 810b3ba:	460a      	mov	r2, r1
 810b3bc:	e7d7      	b.n	810b36e <__b2d+0x4a>
 810b3be:	bf00      	nop
 810b3c0:	3ff00000 	.word	0x3ff00000

0810b3c4 <__d2b>:
 810b3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b3c8:	4689      	mov	r9, r1
 810b3ca:	2101      	movs	r1, #1
 810b3cc:	ec57 6b10 	vmov	r6, r7, d0
 810b3d0:	4690      	mov	r8, r2
 810b3d2:	f7ff fc0f 	bl	810abf4 <_Balloc>
 810b3d6:	4604      	mov	r4, r0
 810b3d8:	b930      	cbnz	r0, 810b3e8 <__d2b+0x24>
 810b3da:	4602      	mov	r2, r0
 810b3dc:	4b25      	ldr	r3, [pc, #148]	; (810b474 <__d2b+0xb0>)
 810b3de:	4826      	ldr	r0, [pc, #152]	; (810b478 <__d2b+0xb4>)
 810b3e0:	f240 310a 	movw	r1, #778	; 0x30a
 810b3e4:	f7fb fef2 	bl	81071cc <__assert_func>
 810b3e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b3ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b3f0:	bb35      	cbnz	r5, 810b440 <__d2b+0x7c>
 810b3f2:	2e00      	cmp	r6, #0
 810b3f4:	9301      	str	r3, [sp, #4]
 810b3f6:	d028      	beq.n	810b44a <__d2b+0x86>
 810b3f8:	4668      	mov	r0, sp
 810b3fa:	9600      	str	r6, [sp, #0]
 810b3fc:	f7ff fd10 	bl	810ae20 <__lo0bits>
 810b400:	9900      	ldr	r1, [sp, #0]
 810b402:	b300      	cbz	r0, 810b446 <__d2b+0x82>
 810b404:	9a01      	ldr	r2, [sp, #4]
 810b406:	f1c0 0320 	rsb	r3, r0, #32
 810b40a:	fa02 f303 	lsl.w	r3, r2, r3
 810b40e:	430b      	orrs	r3, r1
 810b410:	40c2      	lsrs	r2, r0
 810b412:	6163      	str	r3, [r4, #20]
 810b414:	9201      	str	r2, [sp, #4]
 810b416:	9b01      	ldr	r3, [sp, #4]
 810b418:	61a3      	str	r3, [r4, #24]
 810b41a:	2b00      	cmp	r3, #0
 810b41c:	bf14      	ite	ne
 810b41e:	2202      	movne	r2, #2
 810b420:	2201      	moveq	r2, #1
 810b422:	6122      	str	r2, [r4, #16]
 810b424:	b1d5      	cbz	r5, 810b45c <__d2b+0x98>
 810b426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b42a:	4405      	add	r5, r0
 810b42c:	f8c9 5000 	str.w	r5, [r9]
 810b430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b434:	f8c8 0000 	str.w	r0, [r8]
 810b438:	4620      	mov	r0, r4
 810b43a:	b003      	add	sp, #12
 810b43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b444:	e7d5      	b.n	810b3f2 <__d2b+0x2e>
 810b446:	6161      	str	r1, [r4, #20]
 810b448:	e7e5      	b.n	810b416 <__d2b+0x52>
 810b44a:	a801      	add	r0, sp, #4
 810b44c:	f7ff fce8 	bl	810ae20 <__lo0bits>
 810b450:	9b01      	ldr	r3, [sp, #4]
 810b452:	6163      	str	r3, [r4, #20]
 810b454:	2201      	movs	r2, #1
 810b456:	6122      	str	r2, [r4, #16]
 810b458:	3020      	adds	r0, #32
 810b45a:	e7e3      	b.n	810b424 <__d2b+0x60>
 810b45c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b464:	f8c9 0000 	str.w	r0, [r9]
 810b468:	6918      	ldr	r0, [r3, #16]
 810b46a:	f7ff fcb9 	bl	810ade0 <__hi0bits>
 810b46e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b472:	e7df      	b.n	810b434 <__d2b+0x70>
 810b474:	0810bf7c 	.word	0x0810bf7c
 810b478:	0810c070 	.word	0x0810c070

0810b47c <__ratio>:
 810b47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b480:	4688      	mov	r8, r1
 810b482:	4669      	mov	r1, sp
 810b484:	4681      	mov	r9, r0
 810b486:	f7ff ff4d 	bl	810b324 <__b2d>
 810b48a:	a901      	add	r1, sp, #4
 810b48c:	4640      	mov	r0, r8
 810b48e:	ec55 4b10 	vmov	r4, r5, d0
 810b492:	f7ff ff47 	bl	810b324 <__b2d>
 810b496:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b49a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b49e:	eba3 0c02 	sub.w	ip, r3, r2
 810b4a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b4a6:	1a9b      	subs	r3, r3, r2
 810b4a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b4ac:	ec51 0b10 	vmov	r0, r1, d0
 810b4b0:	2b00      	cmp	r3, #0
 810b4b2:	bfd6      	itet	le
 810b4b4:	460a      	movle	r2, r1
 810b4b6:	462a      	movgt	r2, r5
 810b4b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b4bc:	468b      	mov	fp, r1
 810b4be:	462f      	mov	r7, r5
 810b4c0:	bfd4      	ite	le
 810b4c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b4c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b4ca:	4620      	mov	r0, r4
 810b4cc:	ee10 2a10 	vmov	r2, s0
 810b4d0:	465b      	mov	r3, fp
 810b4d2:	4639      	mov	r1, r7
 810b4d4:	f7f5 fa52 	bl	810097c <__aeabi_ddiv>
 810b4d8:	ec41 0b10 	vmov	d0, r0, r1
 810b4dc:	b003      	add	sp, #12
 810b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b4e2 <__copybits>:
 810b4e2:	3901      	subs	r1, #1
 810b4e4:	b570      	push	{r4, r5, r6, lr}
 810b4e6:	1149      	asrs	r1, r1, #5
 810b4e8:	6914      	ldr	r4, [r2, #16]
 810b4ea:	3101      	adds	r1, #1
 810b4ec:	f102 0314 	add.w	r3, r2, #20
 810b4f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b4f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b4f8:	1f05      	subs	r5, r0, #4
 810b4fa:	42a3      	cmp	r3, r4
 810b4fc:	d30c      	bcc.n	810b518 <__copybits+0x36>
 810b4fe:	1aa3      	subs	r3, r4, r2
 810b500:	3b11      	subs	r3, #17
 810b502:	f023 0303 	bic.w	r3, r3, #3
 810b506:	3211      	adds	r2, #17
 810b508:	42a2      	cmp	r2, r4
 810b50a:	bf88      	it	hi
 810b50c:	2300      	movhi	r3, #0
 810b50e:	4418      	add	r0, r3
 810b510:	2300      	movs	r3, #0
 810b512:	4288      	cmp	r0, r1
 810b514:	d305      	bcc.n	810b522 <__copybits+0x40>
 810b516:	bd70      	pop	{r4, r5, r6, pc}
 810b518:	f853 6b04 	ldr.w	r6, [r3], #4
 810b51c:	f845 6f04 	str.w	r6, [r5, #4]!
 810b520:	e7eb      	b.n	810b4fa <__copybits+0x18>
 810b522:	f840 3b04 	str.w	r3, [r0], #4
 810b526:	e7f4      	b.n	810b512 <__copybits+0x30>

0810b528 <__any_on>:
 810b528:	f100 0214 	add.w	r2, r0, #20
 810b52c:	6900      	ldr	r0, [r0, #16]
 810b52e:	114b      	asrs	r3, r1, #5
 810b530:	4298      	cmp	r0, r3
 810b532:	b510      	push	{r4, lr}
 810b534:	db11      	blt.n	810b55a <__any_on+0x32>
 810b536:	dd0a      	ble.n	810b54e <__any_on+0x26>
 810b538:	f011 011f 	ands.w	r1, r1, #31
 810b53c:	d007      	beq.n	810b54e <__any_on+0x26>
 810b53e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b542:	fa24 f001 	lsr.w	r0, r4, r1
 810b546:	fa00 f101 	lsl.w	r1, r0, r1
 810b54a:	428c      	cmp	r4, r1
 810b54c:	d10b      	bne.n	810b566 <__any_on+0x3e>
 810b54e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b552:	4293      	cmp	r3, r2
 810b554:	d803      	bhi.n	810b55e <__any_on+0x36>
 810b556:	2000      	movs	r0, #0
 810b558:	bd10      	pop	{r4, pc}
 810b55a:	4603      	mov	r3, r0
 810b55c:	e7f7      	b.n	810b54e <__any_on+0x26>
 810b55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b562:	2900      	cmp	r1, #0
 810b564:	d0f5      	beq.n	810b552 <__any_on+0x2a>
 810b566:	2001      	movs	r0, #1
 810b568:	e7f6      	b.n	810b558 <__any_on+0x30>

0810b56a <_calloc_r>:
 810b56a:	b513      	push	{r0, r1, r4, lr}
 810b56c:	434a      	muls	r2, r1
 810b56e:	4611      	mov	r1, r2
 810b570:	9201      	str	r2, [sp, #4]
 810b572:	f7fb fefb 	bl	810736c <_malloc_r>
 810b576:	4604      	mov	r4, r0
 810b578:	b118      	cbz	r0, 810b582 <_calloc_r+0x18>
 810b57a:	9a01      	ldr	r2, [sp, #4]
 810b57c:	2100      	movs	r1, #0
 810b57e:	f7fb fe9d 	bl	81072bc <memset>
 810b582:	4620      	mov	r0, r4
 810b584:	b002      	add	sp, #8
 810b586:	bd10      	pop	{r4, pc}

0810b588 <_realloc_r>:
 810b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b58a:	4607      	mov	r7, r0
 810b58c:	4614      	mov	r4, r2
 810b58e:	460e      	mov	r6, r1
 810b590:	b921      	cbnz	r1, 810b59c <_realloc_r+0x14>
 810b592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810b596:	4611      	mov	r1, r2
 810b598:	f7fb bee8 	b.w	810736c <_malloc_r>
 810b59c:	b922      	cbnz	r2, 810b5a8 <_realloc_r+0x20>
 810b59e:	f7fb fe95 	bl	81072cc <_free_r>
 810b5a2:	4625      	mov	r5, r4
 810b5a4:	4628      	mov	r0, r5
 810b5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b5a8:	f000 fa64 	bl	810ba74 <_malloc_usable_size_r>
 810b5ac:	42a0      	cmp	r0, r4
 810b5ae:	d20f      	bcs.n	810b5d0 <_realloc_r+0x48>
 810b5b0:	4621      	mov	r1, r4
 810b5b2:	4638      	mov	r0, r7
 810b5b4:	f7fb feda 	bl	810736c <_malloc_r>
 810b5b8:	4605      	mov	r5, r0
 810b5ba:	2800      	cmp	r0, #0
 810b5bc:	d0f2      	beq.n	810b5a4 <_realloc_r+0x1c>
 810b5be:	4631      	mov	r1, r6
 810b5c0:	4622      	mov	r2, r4
 810b5c2:	f7fb fe6d 	bl	81072a0 <memcpy>
 810b5c6:	4631      	mov	r1, r6
 810b5c8:	4638      	mov	r0, r7
 810b5ca:	f7fb fe7f 	bl	81072cc <_free_r>
 810b5ce:	e7e9      	b.n	810b5a4 <_realloc_r+0x1c>
 810b5d0:	4635      	mov	r5, r6
 810b5d2:	e7e7      	b.n	810b5a4 <_realloc_r+0x1c>

0810b5d4 <__ssputs_r>:
 810b5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b5d8:	688e      	ldr	r6, [r1, #8]
 810b5da:	429e      	cmp	r6, r3
 810b5dc:	4682      	mov	sl, r0
 810b5de:	460c      	mov	r4, r1
 810b5e0:	4690      	mov	r8, r2
 810b5e2:	461f      	mov	r7, r3
 810b5e4:	d838      	bhi.n	810b658 <__ssputs_r+0x84>
 810b5e6:	898a      	ldrh	r2, [r1, #12]
 810b5e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b5ec:	d032      	beq.n	810b654 <__ssputs_r+0x80>
 810b5ee:	6825      	ldr	r5, [r4, #0]
 810b5f0:	6909      	ldr	r1, [r1, #16]
 810b5f2:	eba5 0901 	sub.w	r9, r5, r1
 810b5f6:	6965      	ldr	r5, [r4, #20]
 810b5f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b5fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b600:	3301      	adds	r3, #1
 810b602:	444b      	add	r3, r9
 810b604:	106d      	asrs	r5, r5, #1
 810b606:	429d      	cmp	r5, r3
 810b608:	bf38      	it	cc
 810b60a:	461d      	movcc	r5, r3
 810b60c:	0553      	lsls	r3, r2, #21
 810b60e:	d531      	bpl.n	810b674 <__ssputs_r+0xa0>
 810b610:	4629      	mov	r1, r5
 810b612:	f7fb feab 	bl	810736c <_malloc_r>
 810b616:	4606      	mov	r6, r0
 810b618:	b950      	cbnz	r0, 810b630 <__ssputs_r+0x5c>
 810b61a:	230c      	movs	r3, #12
 810b61c:	f8ca 3000 	str.w	r3, [sl]
 810b620:	89a3      	ldrh	r3, [r4, #12]
 810b622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b626:	81a3      	strh	r3, [r4, #12]
 810b628:	f04f 30ff 	mov.w	r0, #4294967295
 810b62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b630:	6921      	ldr	r1, [r4, #16]
 810b632:	464a      	mov	r2, r9
 810b634:	f7fb fe34 	bl	81072a0 <memcpy>
 810b638:	89a3      	ldrh	r3, [r4, #12]
 810b63a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b63e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b642:	81a3      	strh	r3, [r4, #12]
 810b644:	6126      	str	r6, [r4, #16]
 810b646:	6165      	str	r5, [r4, #20]
 810b648:	444e      	add	r6, r9
 810b64a:	eba5 0509 	sub.w	r5, r5, r9
 810b64e:	6026      	str	r6, [r4, #0]
 810b650:	60a5      	str	r5, [r4, #8]
 810b652:	463e      	mov	r6, r7
 810b654:	42be      	cmp	r6, r7
 810b656:	d900      	bls.n	810b65a <__ssputs_r+0x86>
 810b658:	463e      	mov	r6, r7
 810b65a:	4632      	mov	r2, r6
 810b65c:	6820      	ldr	r0, [r4, #0]
 810b65e:	4641      	mov	r1, r8
 810b660:	f7ff faa2 	bl	810aba8 <memmove>
 810b664:	68a3      	ldr	r3, [r4, #8]
 810b666:	6822      	ldr	r2, [r4, #0]
 810b668:	1b9b      	subs	r3, r3, r6
 810b66a:	4432      	add	r2, r6
 810b66c:	60a3      	str	r3, [r4, #8]
 810b66e:	6022      	str	r2, [r4, #0]
 810b670:	2000      	movs	r0, #0
 810b672:	e7db      	b.n	810b62c <__ssputs_r+0x58>
 810b674:	462a      	mov	r2, r5
 810b676:	f7ff ff87 	bl	810b588 <_realloc_r>
 810b67a:	4606      	mov	r6, r0
 810b67c:	2800      	cmp	r0, #0
 810b67e:	d1e1      	bne.n	810b644 <__ssputs_r+0x70>
 810b680:	6921      	ldr	r1, [r4, #16]
 810b682:	4650      	mov	r0, sl
 810b684:	f7fb fe22 	bl	81072cc <_free_r>
 810b688:	e7c7      	b.n	810b61a <__ssputs_r+0x46>
	...

0810b68c <_svfiprintf_r>:
 810b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b690:	4698      	mov	r8, r3
 810b692:	898b      	ldrh	r3, [r1, #12]
 810b694:	061b      	lsls	r3, r3, #24
 810b696:	b09d      	sub	sp, #116	; 0x74
 810b698:	4607      	mov	r7, r0
 810b69a:	460d      	mov	r5, r1
 810b69c:	4614      	mov	r4, r2
 810b69e:	d50e      	bpl.n	810b6be <_svfiprintf_r+0x32>
 810b6a0:	690b      	ldr	r3, [r1, #16]
 810b6a2:	b963      	cbnz	r3, 810b6be <_svfiprintf_r+0x32>
 810b6a4:	2140      	movs	r1, #64	; 0x40
 810b6a6:	f7fb fe61 	bl	810736c <_malloc_r>
 810b6aa:	6028      	str	r0, [r5, #0]
 810b6ac:	6128      	str	r0, [r5, #16]
 810b6ae:	b920      	cbnz	r0, 810b6ba <_svfiprintf_r+0x2e>
 810b6b0:	230c      	movs	r3, #12
 810b6b2:	603b      	str	r3, [r7, #0]
 810b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 810b6b8:	e0d1      	b.n	810b85e <_svfiprintf_r+0x1d2>
 810b6ba:	2340      	movs	r3, #64	; 0x40
 810b6bc:	616b      	str	r3, [r5, #20]
 810b6be:	2300      	movs	r3, #0
 810b6c0:	9309      	str	r3, [sp, #36]	; 0x24
 810b6c2:	2320      	movs	r3, #32
 810b6c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b6c8:	f8cd 800c 	str.w	r8, [sp, #12]
 810b6cc:	2330      	movs	r3, #48	; 0x30
 810b6ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810b878 <_svfiprintf_r+0x1ec>
 810b6d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b6d6:	f04f 0901 	mov.w	r9, #1
 810b6da:	4623      	mov	r3, r4
 810b6dc:	469a      	mov	sl, r3
 810b6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b6e2:	b10a      	cbz	r2, 810b6e8 <_svfiprintf_r+0x5c>
 810b6e4:	2a25      	cmp	r2, #37	; 0x25
 810b6e6:	d1f9      	bne.n	810b6dc <_svfiprintf_r+0x50>
 810b6e8:	ebba 0b04 	subs.w	fp, sl, r4
 810b6ec:	d00b      	beq.n	810b706 <_svfiprintf_r+0x7a>
 810b6ee:	465b      	mov	r3, fp
 810b6f0:	4622      	mov	r2, r4
 810b6f2:	4629      	mov	r1, r5
 810b6f4:	4638      	mov	r0, r7
 810b6f6:	f7ff ff6d 	bl	810b5d4 <__ssputs_r>
 810b6fa:	3001      	adds	r0, #1
 810b6fc:	f000 80aa 	beq.w	810b854 <_svfiprintf_r+0x1c8>
 810b700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b702:	445a      	add	r2, fp
 810b704:	9209      	str	r2, [sp, #36]	; 0x24
 810b706:	f89a 3000 	ldrb.w	r3, [sl]
 810b70a:	2b00      	cmp	r3, #0
 810b70c:	f000 80a2 	beq.w	810b854 <_svfiprintf_r+0x1c8>
 810b710:	2300      	movs	r3, #0
 810b712:	f04f 32ff 	mov.w	r2, #4294967295
 810b716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b71a:	f10a 0a01 	add.w	sl, sl, #1
 810b71e:	9304      	str	r3, [sp, #16]
 810b720:	9307      	str	r3, [sp, #28]
 810b722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b726:	931a      	str	r3, [sp, #104]	; 0x68
 810b728:	4654      	mov	r4, sl
 810b72a:	2205      	movs	r2, #5
 810b72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b730:	4851      	ldr	r0, [pc, #324]	; (810b878 <_svfiprintf_r+0x1ec>)
 810b732:	f7f4 fded 	bl	8100310 <memchr>
 810b736:	9a04      	ldr	r2, [sp, #16]
 810b738:	b9d8      	cbnz	r0, 810b772 <_svfiprintf_r+0xe6>
 810b73a:	06d0      	lsls	r0, r2, #27
 810b73c:	bf44      	itt	mi
 810b73e:	2320      	movmi	r3, #32
 810b740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b744:	0711      	lsls	r1, r2, #28
 810b746:	bf44      	itt	mi
 810b748:	232b      	movmi	r3, #43	; 0x2b
 810b74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b74e:	f89a 3000 	ldrb.w	r3, [sl]
 810b752:	2b2a      	cmp	r3, #42	; 0x2a
 810b754:	d015      	beq.n	810b782 <_svfiprintf_r+0xf6>
 810b756:	9a07      	ldr	r2, [sp, #28]
 810b758:	4654      	mov	r4, sl
 810b75a:	2000      	movs	r0, #0
 810b75c:	f04f 0c0a 	mov.w	ip, #10
 810b760:	4621      	mov	r1, r4
 810b762:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b766:	3b30      	subs	r3, #48	; 0x30
 810b768:	2b09      	cmp	r3, #9
 810b76a:	d94e      	bls.n	810b80a <_svfiprintf_r+0x17e>
 810b76c:	b1b0      	cbz	r0, 810b79c <_svfiprintf_r+0x110>
 810b76e:	9207      	str	r2, [sp, #28]
 810b770:	e014      	b.n	810b79c <_svfiprintf_r+0x110>
 810b772:	eba0 0308 	sub.w	r3, r0, r8
 810b776:	fa09 f303 	lsl.w	r3, r9, r3
 810b77a:	4313      	orrs	r3, r2
 810b77c:	9304      	str	r3, [sp, #16]
 810b77e:	46a2      	mov	sl, r4
 810b780:	e7d2      	b.n	810b728 <_svfiprintf_r+0x9c>
 810b782:	9b03      	ldr	r3, [sp, #12]
 810b784:	1d19      	adds	r1, r3, #4
 810b786:	681b      	ldr	r3, [r3, #0]
 810b788:	9103      	str	r1, [sp, #12]
 810b78a:	2b00      	cmp	r3, #0
 810b78c:	bfbb      	ittet	lt
 810b78e:	425b      	neglt	r3, r3
 810b790:	f042 0202 	orrlt.w	r2, r2, #2
 810b794:	9307      	strge	r3, [sp, #28]
 810b796:	9307      	strlt	r3, [sp, #28]
 810b798:	bfb8      	it	lt
 810b79a:	9204      	strlt	r2, [sp, #16]
 810b79c:	7823      	ldrb	r3, [r4, #0]
 810b79e:	2b2e      	cmp	r3, #46	; 0x2e
 810b7a0:	d10c      	bne.n	810b7bc <_svfiprintf_r+0x130>
 810b7a2:	7863      	ldrb	r3, [r4, #1]
 810b7a4:	2b2a      	cmp	r3, #42	; 0x2a
 810b7a6:	d135      	bne.n	810b814 <_svfiprintf_r+0x188>
 810b7a8:	9b03      	ldr	r3, [sp, #12]
 810b7aa:	1d1a      	adds	r2, r3, #4
 810b7ac:	681b      	ldr	r3, [r3, #0]
 810b7ae:	9203      	str	r2, [sp, #12]
 810b7b0:	2b00      	cmp	r3, #0
 810b7b2:	bfb8      	it	lt
 810b7b4:	f04f 33ff 	movlt.w	r3, #4294967295
 810b7b8:	3402      	adds	r4, #2
 810b7ba:	9305      	str	r3, [sp, #20]
 810b7bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810b888 <_svfiprintf_r+0x1fc>
 810b7c0:	7821      	ldrb	r1, [r4, #0]
 810b7c2:	2203      	movs	r2, #3
 810b7c4:	4650      	mov	r0, sl
 810b7c6:	f7f4 fda3 	bl	8100310 <memchr>
 810b7ca:	b140      	cbz	r0, 810b7de <_svfiprintf_r+0x152>
 810b7cc:	2340      	movs	r3, #64	; 0x40
 810b7ce:	eba0 000a 	sub.w	r0, r0, sl
 810b7d2:	fa03 f000 	lsl.w	r0, r3, r0
 810b7d6:	9b04      	ldr	r3, [sp, #16]
 810b7d8:	4303      	orrs	r3, r0
 810b7da:	3401      	adds	r4, #1
 810b7dc:	9304      	str	r3, [sp, #16]
 810b7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b7e2:	4826      	ldr	r0, [pc, #152]	; (810b87c <_svfiprintf_r+0x1f0>)
 810b7e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b7e8:	2206      	movs	r2, #6
 810b7ea:	f7f4 fd91 	bl	8100310 <memchr>
 810b7ee:	2800      	cmp	r0, #0
 810b7f0:	d038      	beq.n	810b864 <_svfiprintf_r+0x1d8>
 810b7f2:	4b23      	ldr	r3, [pc, #140]	; (810b880 <_svfiprintf_r+0x1f4>)
 810b7f4:	bb1b      	cbnz	r3, 810b83e <_svfiprintf_r+0x1b2>
 810b7f6:	9b03      	ldr	r3, [sp, #12]
 810b7f8:	3307      	adds	r3, #7
 810b7fa:	f023 0307 	bic.w	r3, r3, #7
 810b7fe:	3308      	adds	r3, #8
 810b800:	9303      	str	r3, [sp, #12]
 810b802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b804:	4433      	add	r3, r6
 810b806:	9309      	str	r3, [sp, #36]	; 0x24
 810b808:	e767      	b.n	810b6da <_svfiprintf_r+0x4e>
 810b80a:	fb0c 3202 	mla	r2, ip, r2, r3
 810b80e:	460c      	mov	r4, r1
 810b810:	2001      	movs	r0, #1
 810b812:	e7a5      	b.n	810b760 <_svfiprintf_r+0xd4>
 810b814:	2300      	movs	r3, #0
 810b816:	3401      	adds	r4, #1
 810b818:	9305      	str	r3, [sp, #20]
 810b81a:	4619      	mov	r1, r3
 810b81c:	f04f 0c0a 	mov.w	ip, #10
 810b820:	4620      	mov	r0, r4
 810b822:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b826:	3a30      	subs	r2, #48	; 0x30
 810b828:	2a09      	cmp	r2, #9
 810b82a:	d903      	bls.n	810b834 <_svfiprintf_r+0x1a8>
 810b82c:	2b00      	cmp	r3, #0
 810b82e:	d0c5      	beq.n	810b7bc <_svfiprintf_r+0x130>
 810b830:	9105      	str	r1, [sp, #20]
 810b832:	e7c3      	b.n	810b7bc <_svfiprintf_r+0x130>
 810b834:	fb0c 2101 	mla	r1, ip, r1, r2
 810b838:	4604      	mov	r4, r0
 810b83a:	2301      	movs	r3, #1
 810b83c:	e7f0      	b.n	810b820 <_svfiprintf_r+0x194>
 810b83e:	ab03      	add	r3, sp, #12
 810b840:	9300      	str	r3, [sp, #0]
 810b842:	462a      	mov	r2, r5
 810b844:	4b0f      	ldr	r3, [pc, #60]	; (810b884 <_svfiprintf_r+0x1f8>)
 810b846:	a904      	add	r1, sp, #16
 810b848:	4638      	mov	r0, r7
 810b84a:	f7fb ffe3 	bl	8107814 <_printf_float>
 810b84e:	1c42      	adds	r2, r0, #1
 810b850:	4606      	mov	r6, r0
 810b852:	d1d6      	bne.n	810b802 <_svfiprintf_r+0x176>
 810b854:	89ab      	ldrh	r3, [r5, #12]
 810b856:	065b      	lsls	r3, r3, #25
 810b858:	f53f af2c 	bmi.w	810b6b4 <_svfiprintf_r+0x28>
 810b85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b85e:	b01d      	add	sp, #116	; 0x74
 810b860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b864:	ab03      	add	r3, sp, #12
 810b866:	9300      	str	r3, [sp, #0]
 810b868:	462a      	mov	r2, r5
 810b86a:	4b06      	ldr	r3, [pc, #24]	; (810b884 <_svfiprintf_r+0x1f8>)
 810b86c:	a904      	add	r1, sp, #16
 810b86e:	4638      	mov	r0, r7
 810b870:	f7fc fa74 	bl	8107d5c <_printf_i>
 810b874:	e7eb      	b.n	810b84e <_svfiprintf_r+0x1c2>
 810b876:	bf00      	nop
 810b878:	0810bd58 	.word	0x0810bd58
 810b87c:	0810bd62 	.word	0x0810bd62
 810b880:	08107815 	.word	0x08107815
 810b884:	0810b5d5 	.word	0x0810b5d5
 810b888:	0810bd5e 	.word	0x0810bd5e
 810b88c:	00000000 	.word	0x00000000

0810b890 <nan>:
 810b890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b898 <nan+0x8>
 810b894:	4770      	bx	lr
 810b896:	bf00      	nop
 810b898:	00000000 	.word	0x00000000
 810b89c:	7ff80000 	.word	0x7ff80000

0810b8a0 <_raise_r>:
 810b8a0:	291f      	cmp	r1, #31
 810b8a2:	b538      	push	{r3, r4, r5, lr}
 810b8a4:	4604      	mov	r4, r0
 810b8a6:	460d      	mov	r5, r1
 810b8a8:	d904      	bls.n	810b8b4 <_raise_r+0x14>
 810b8aa:	2316      	movs	r3, #22
 810b8ac:	6003      	str	r3, [r0, #0]
 810b8ae:	f04f 30ff 	mov.w	r0, #4294967295
 810b8b2:	bd38      	pop	{r3, r4, r5, pc}
 810b8b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b8b6:	b112      	cbz	r2, 810b8be <_raise_r+0x1e>
 810b8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b8bc:	b94b      	cbnz	r3, 810b8d2 <_raise_r+0x32>
 810b8be:	4620      	mov	r0, r4
 810b8c0:	f000 f830 	bl	810b924 <_getpid_r>
 810b8c4:	462a      	mov	r2, r5
 810b8c6:	4601      	mov	r1, r0
 810b8c8:	4620      	mov	r0, r4
 810b8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b8ce:	f000 b817 	b.w	810b900 <_kill_r>
 810b8d2:	2b01      	cmp	r3, #1
 810b8d4:	d00a      	beq.n	810b8ec <_raise_r+0x4c>
 810b8d6:	1c59      	adds	r1, r3, #1
 810b8d8:	d103      	bne.n	810b8e2 <_raise_r+0x42>
 810b8da:	2316      	movs	r3, #22
 810b8dc:	6003      	str	r3, [r0, #0]
 810b8de:	2001      	movs	r0, #1
 810b8e0:	e7e7      	b.n	810b8b2 <_raise_r+0x12>
 810b8e2:	2400      	movs	r4, #0
 810b8e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b8e8:	4628      	mov	r0, r5
 810b8ea:	4798      	blx	r3
 810b8ec:	2000      	movs	r0, #0
 810b8ee:	e7e0      	b.n	810b8b2 <_raise_r+0x12>

0810b8f0 <raise>:
 810b8f0:	4b02      	ldr	r3, [pc, #8]	; (810b8fc <raise+0xc>)
 810b8f2:	4601      	mov	r1, r0
 810b8f4:	6818      	ldr	r0, [r3, #0]
 810b8f6:	f7ff bfd3 	b.w	810b8a0 <_raise_r>
 810b8fa:	bf00      	nop
 810b8fc:	100000b8 	.word	0x100000b8

0810b900 <_kill_r>:
 810b900:	b538      	push	{r3, r4, r5, lr}
 810b902:	4d07      	ldr	r5, [pc, #28]	; (810b920 <_kill_r+0x20>)
 810b904:	2300      	movs	r3, #0
 810b906:	4604      	mov	r4, r0
 810b908:	4608      	mov	r0, r1
 810b90a:	4611      	mov	r1, r2
 810b90c:	602b      	str	r3, [r5, #0]
 810b90e:	f7f5 fe33 	bl	8101578 <_kill>
 810b912:	1c43      	adds	r3, r0, #1
 810b914:	d102      	bne.n	810b91c <_kill_r+0x1c>
 810b916:	682b      	ldr	r3, [r5, #0]
 810b918:	b103      	cbz	r3, 810b91c <_kill_r+0x1c>
 810b91a:	6023      	str	r3, [r4, #0]
 810b91c:	bd38      	pop	{r3, r4, r5, pc}
 810b91e:	bf00      	nop
 810b920:	10000508 	.word	0x10000508

0810b924 <_getpid_r>:
 810b924:	f7f5 be20 	b.w	8101568 <_getpid>

0810b928 <__sread>:
 810b928:	b510      	push	{r4, lr}
 810b92a:	460c      	mov	r4, r1
 810b92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b930:	f000 f8a8 	bl	810ba84 <_read_r>
 810b934:	2800      	cmp	r0, #0
 810b936:	bfab      	itete	ge
 810b938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b93a:	89a3      	ldrhlt	r3, [r4, #12]
 810b93c:	181b      	addge	r3, r3, r0
 810b93e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b942:	bfac      	ite	ge
 810b944:	6563      	strge	r3, [r4, #84]	; 0x54
 810b946:	81a3      	strhlt	r3, [r4, #12]
 810b948:	bd10      	pop	{r4, pc}

0810b94a <__swrite>:
 810b94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b94e:	461f      	mov	r7, r3
 810b950:	898b      	ldrh	r3, [r1, #12]
 810b952:	05db      	lsls	r3, r3, #23
 810b954:	4605      	mov	r5, r0
 810b956:	460c      	mov	r4, r1
 810b958:	4616      	mov	r6, r2
 810b95a:	d505      	bpl.n	810b968 <__swrite+0x1e>
 810b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b960:	2302      	movs	r3, #2
 810b962:	2200      	movs	r2, #0
 810b964:	f000 f874 	bl	810ba50 <_lseek_r>
 810b968:	89a3      	ldrh	r3, [r4, #12]
 810b96a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b96e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b972:	81a3      	strh	r3, [r4, #12]
 810b974:	4632      	mov	r2, r6
 810b976:	463b      	mov	r3, r7
 810b978:	4628      	mov	r0, r5
 810b97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b97e:	f000 b823 	b.w	810b9c8 <_write_r>

0810b982 <__sseek>:
 810b982:	b510      	push	{r4, lr}
 810b984:	460c      	mov	r4, r1
 810b986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b98a:	f000 f861 	bl	810ba50 <_lseek_r>
 810b98e:	1c43      	adds	r3, r0, #1
 810b990:	89a3      	ldrh	r3, [r4, #12]
 810b992:	bf15      	itete	ne
 810b994:	6560      	strne	r0, [r4, #84]	; 0x54
 810b996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b99a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b99e:	81a3      	strheq	r3, [r4, #12]
 810b9a0:	bf18      	it	ne
 810b9a2:	81a3      	strhne	r3, [r4, #12]
 810b9a4:	bd10      	pop	{r4, pc}

0810b9a6 <__sclose>:
 810b9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b9aa:	f000 b81f 	b.w	810b9ec <_close_r>

0810b9ae <__ascii_wctomb>:
 810b9ae:	b149      	cbz	r1, 810b9c4 <__ascii_wctomb+0x16>
 810b9b0:	2aff      	cmp	r2, #255	; 0xff
 810b9b2:	bf85      	ittet	hi
 810b9b4:	238a      	movhi	r3, #138	; 0x8a
 810b9b6:	6003      	strhi	r3, [r0, #0]
 810b9b8:	700a      	strbls	r2, [r1, #0]
 810b9ba:	f04f 30ff 	movhi.w	r0, #4294967295
 810b9be:	bf98      	it	ls
 810b9c0:	2001      	movls	r0, #1
 810b9c2:	4770      	bx	lr
 810b9c4:	4608      	mov	r0, r1
 810b9c6:	4770      	bx	lr

0810b9c8 <_write_r>:
 810b9c8:	b538      	push	{r3, r4, r5, lr}
 810b9ca:	4d07      	ldr	r5, [pc, #28]	; (810b9e8 <_write_r+0x20>)
 810b9cc:	4604      	mov	r4, r0
 810b9ce:	4608      	mov	r0, r1
 810b9d0:	4611      	mov	r1, r2
 810b9d2:	2200      	movs	r2, #0
 810b9d4:	602a      	str	r2, [r5, #0]
 810b9d6:	461a      	mov	r2, r3
 810b9d8:	f7f5 fe05 	bl	81015e6 <_write>
 810b9dc:	1c43      	adds	r3, r0, #1
 810b9de:	d102      	bne.n	810b9e6 <_write_r+0x1e>
 810b9e0:	682b      	ldr	r3, [r5, #0]
 810b9e2:	b103      	cbz	r3, 810b9e6 <_write_r+0x1e>
 810b9e4:	6023      	str	r3, [r4, #0]
 810b9e6:	bd38      	pop	{r3, r4, r5, pc}
 810b9e8:	10000508 	.word	0x10000508

0810b9ec <_close_r>:
 810b9ec:	b538      	push	{r3, r4, r5, lr}
 810b9ee:	4d06      	ldr	r5, [pc, #24]	; (810ba08 <_close_r+0x1c>)
 810b9f0:	2300      	movs	r3, #0
 810b9f2:	4604      	mov	r4, r0
 810b9f4:	4608      	mov	r0, r1
 810b9f6:	602b      	str	r3, [r5, #0]
 810b9f8:	f7f5 fe11 	bl	810161e <_close>
 810b9fc:	1c43      	adds	r3, r0, #1
 810b9fe:	d102      	bne.n	810ba06 <_close_r+0x1a>
 810ba00:	682b      	ldr	r3, [r5, #0]
 810ba02:	b103      	cbz	r3, 810ba06 <_close_r+0x1a>
 810ba04:	6023      	str	r3, [r4, #0]
 810ba06:	bd38      	pop	{r3, r4, r5, pc}
 810ba08:	10000508 	.word	0x10000508

0810ba0c <_fstat_r>:
 810ba0c:	b538      	push	{r3, r4, r5, lr}
 810ba0e:	4d07      	ldr	r5, [pc, #28]	; (810ba2c <_fstat_r+0x20>)
 810ba10:	2300      	movs	r3, #0
 810ba12:	4604      	mov	r4, r0
 810ba14:	4608      	mov	r0, r1
 810ba16:	4611      	mov	r1, r2
 810ba18:	602b      	str	r3, [r5, #0]
 810ba1a:	f7f5 fe0c 	bl	8101636 <_fstat>
 810ba1e:	1c43      	adds	r3, r0, #1
 810ba20:	d102      	bne.n	810ba28 <_fstat_r+0x1c>
 810ba22:	682b      	ldr	r3, [r5, #0]
 810ba24:	b103      	cbz	r3, 810ba28 <_fstat_r+0x1c>
 810ba26:	6023      	str	r3, [r4, #0]
 810ba28:	bd38      	pop	{r3, r4, r5, pc}
 810ba2a:	bf00      	nop
 810ba2c:	10000508 	.word	0x10000508

0810ba30 <_isatty_r>:
 810ba30:	b538      	push	{r3, r4, r5, lr}
 810ba32:	4d06      	ldr	r5, [pc, #24]	; (810ba4c <_isatty_r+0x1c>)
 810ba34:	2300      	movs	r3, #0
 810ba36:	4604      	mov	r4, r0
 810ba38:	4608      	mov	r0, r1
 810ba3a:	602b      	str	r3, [r5, #0]
 810ba3c:	f7f5 fe0b 	bl	8101656 <_isatty>
 810ba40:	1c43      	adds	r3, r0, #1
 810ba42:	d102      	bne.n	810ba4a <_isatty_r+0x1a>
 810ba44:	682b      	ldr	r3, [r5, #0]
 810ba46:	b103      	cbz	r3, 810ba4a <_isatty_r+0x1a>
 810ba48:	6023      	str	r3, [r4, #0]
 810ba4a:	bd38      	pop	{r3, r4, r5, pc}
 810ba4c:	10000508 	.word	0x10000508

0810ba50 <_lseek_r>:
 810ba50:	b538      	push	{r3, r4, r5, lr}
 810ba52:	4d07      	ldr	r5, [pc, #28]	; (810ba70 <_lseek_r+0x20>)
 810ba54:	4604      	mov	r4, r0
 810ba56:	4608      	mov	r0, r1
 810ba58:	4611      	mov	r1, r2
 810ba5a:	2200      	movs	r2, #0
 810ba5c:	602a      	str	r2, [r5, #0]
 810ba5e:	461a      	mov	r2, r3
 810ba60:	f7f5 fe04 	bl	810166c <_lseek>
 810ba64:	1c43      	adds	r3, r0, #1
 810ba66:	d102      	bne.n	810ba6e <_lseek_r+0x1e>
 810ba68:	682b      	ldr	r3, [r5, #0]
 810ba6a:	b103      	cbz	r3, 810ba6e <_lseek_r+0x1e>
 810ba6c:	6023      	str	r3, [r4, #0]
 810ba6e:	bd38      	pop	{r3, r4, r5, pc}
 810ba70:	10000508 	.word	0x10000508

0810ba74 <_malloc_usable_size_r>:
 810ba74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ba78:	1f18      	subs	r0, r3, #4
 810ba7a:	2b00      	cmp	r3, #0
 810ba7c:	bfbc      	itt	lt
 810ba7e:	580b      	ldrlt	r3, [r1, r0]
 810ba80:	18c0      	addlt	r0, r0, r3
 810ba82:	4770      	bx	lr

0810ba84 <_read_r>:
 810ba84:	b538      	push	{r3, r4, r5, lr}
 810ba86:	4d07      	ldr	r5, [pc, #28]	; (810baa4 <_read_r+0x20>)
 810ba88:	4604      	mov	r4, r0
 810ba8a:	4608      	mov	r0, r1
 810ba8c:	4611      	mov	r1, r2
 810ba8e:	2200      	movs	r2, #0
 810ba90:	602a      	str	r2, [r5, #0]
 810ba92:	461a      	mov	r2, r3
 810ba94:	f7f5 fd8a 	bl	81015ac <_read>
 810ba98:	1c43      	adds	r3, r0, #1
 810ba9a:	d102      	bne.n	810baa2 <_read_r+0x1e>
 810ba9c:	682b      	ldr	r3, [r5, #0]
 810ba9e:	b103      	cbz	r3, 810baa2 <_read_r+0x1e>
 810baa0:	6023      	str	r3, [r4, #0]
 810baa2:	bd38      	pop	{r3, r4, r5, pc}
 810baa4:	10000508 	.word	0x10000508

0810baa8 <_init>:
 810baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810baaa:	bf00      	nop
 810baac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810baae:	bc08      	pop	{r3}
 810bab0:	469e      	mov	lr, r3
 810bab2:	4770      	bx	lr

0810bab4 <_fini>:
 810bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bab6:	bf00      	nop
 810bab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810baba:	bc08      	pop	{r3}
 810babc:	469e      	mov	lr, r3
 810babe:	4770      	bx	lr
