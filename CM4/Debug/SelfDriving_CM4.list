
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0810d978  0810d978  0001d978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810e0f8  0810e0f8  0001e0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810e0fc  0810e0fc  0001e0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000290  10000000  0810e100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a4  10000290  0810e390  00020290  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000534  0810e390  00020534  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810e390  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003916f  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006a0f  00000000  00000000  0005942f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015b8  00000000  00000000  0005fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001348  00000000  00000000  000613f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000419d2  00000000  00000000  00062740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023f23  00000000  00000000  000a4112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185b1d  00000000  00000000  000c8035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024db52  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ce8  00000000  00000000  0024dba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000290 	.word	0x10000290
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810d95c 	.word	0x0810d95c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000294 	.word	0x10000294
 81002dc:	0810d95c 	.word	0x0810d95c

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_d2lz>:
 8100db8:	b538      	push	{r3, r4, r5, lr}
 8100dba:	2200      	movs	r2, #0
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	460d      	mov	r5, r1
 8100dc2:	f7ff ff23 	bl	8100c0c <__aeabi_dcmplt>
 8100dc6:	b928      	cbnz	r0, 8100dd4 <__aeabi_d2lz+0x1c>
 8100dc8:	4620      	mov	r0, r4
 8100dca:	4629      	mov	r1, r5
 8100dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100dd0:	f000 b80a 	b.w	8100de8 <__aeabi_d2ulz>
 8100dd4:	4620      	mov	r0, r4
 8100dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dda:	f000 f805 	bl	8100de8 <__aeabi_d2ulz>
 8100dde:	4240      	negs	r0, r0
 8100de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100de4:	bd38      	pop	{r3, r4, r5, pc}
 8100de6:	bf00      	nop

08100de8 <__aeabi_d2ulz>:
 8100de8:	b5d0      	push	{r4, r6, r7, lr}
 8100dea:	4b0c      	ldr	r3, [pc, #48]	; (8100e1c <__aeabi_d2ulz+0x34>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	4606      	mov	r6, r0
 8100df0:	460f      	mov	r7, r1
 8100df2:	f7ff fc99 	bl	8100728 <__aeabi_dmul>
 8100df6:	f7ff ff6f 	bl	8100cd8 <__aeabi_d2uiz>
 8100dfa:	4604      	mov	r4, r0
 8100dfc:	f7ff fc1a 	bl	8100634 <__aeabi_ui2d>
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <__aeabi_d2ulz+0x38>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	f7ff fc90 	bl	8100728 <__aeabi_dmul>
 8100e08:	4602      	mov	r2, r0
 8100e0a:	460b      	mov	r3, r1
 8100e0c:	4630      	mov	r0, r6
 8100e0e:	4639      	mov	r1, r7
 8100e10:	f7ff fad2 	bl	81003b8 <__aeabi_dsub>
 8100e14:	f7ff ff60 	bl	8100cd8 <__aeabi_d2uiz>
 8100e18:	4621      	mov	r1, r4
 8100e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e1c:	3df00000 	.word	0x3df00000
 8100e20:	41f00000 	.word	0x41f00000

08100e24 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b084      	sub	sp, #16
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	60f8      	str	r0, [r7, #12]
 8100e2c:	60b9      	str	r1, [r7, #8]
 8100e2e:	607a      	str	r2, [r7, #4]
 8100e30:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8100e32:	68bb      	ldr	r3, [r7, #8]
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	4a09      	ldr	r2, [pc, #36]	; (8100e5c <rpmsg_recv_callback+0x38>)
 8100e38:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8100e3a:	68bb      	ldr	r3, [r7, #8]
 8100e3c:	4a08      	ldr	r2, [pc, #32]	; (8100e60 <rpmsg_recv_callback+0x3c>)
 8100e3e:	6013      	str	r3, [r2, #0]
	message_received=1;
 8100e40:	4b08      	ldr	r3, [pc, #32]	; (8100e64 <rpmsg_recv_callback+0x40>)
 8100e42:	2201      	movs	r2, #1
 8100e44:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8100e46:	4b05      	ldr	r3, [pc, #20]	; (8100e5c <rpmsg_recv_callback+0x38>)
 8100e48:	681b      	ldr	r3, [r3, #0]
 8100e4a:	b2db      	uxtb	r3, r3
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	f000 f81f 	bl	8100e90 <parseRecievedMessages>
	return 0;
 8100e52:	2300      	movs	r3, #0
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	3710      	adds	r7, #16
 8100e58:	46bd      	mov	sp, r7
 8100e5a:	bd80      	pop	{r7, pc}
 8100e5c:	100003c4 	.word	0x100003c4
 8100e60:	100002ac 	.word	0x100002ac
 8100e64:	10000474 	.word	0x10000474

08100e68 <receive_message>:

#ifdef CORE_CM4
unsigned int receive_message(void)
{
 8100e68:	b580      	push	{r7, lr}
 8100e6a:	af00      	add	r7, sp, #0
	while (message_received == 0)
 8100e6c:	e001      	b.n	8100e72 <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8100e6e:	f007 fb2f 	bl	81084d0 <OPENAMP_check_for_message>
	while (message_received == 0)
 8100e72:	4b05      	ldr	r3, [pc, #20]	; (8100e88 <receive_message+0x20>)
 8100e74:	681b      	ldr	r3, [r3, #0]
 8100e76:	2b00      	cmp	r3, #0
 8100e78:	d0f9      	beq.n	8100e6e <receive_message+0x6>
	}
	message_received = 0;
 8100e7a:	4b03      	ldr	r3, [pc, #12]	; (8100e88 <receive_message+0x20>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	601a      	str	r2, [r3, #0]

	return received_data;
 8100e80:	4b02      	ldr	r3, [pc, #8]	; (8100e8c <receive_message+0x24>)
 8100e82:	681b      	ldr	r3, [r3, #0]
}
 8100e84:	4618      	mov	r0, r3
 8100e86:	bd80      	pop	{r7, pc}
 8100e88:	10000474 	.word	0x10000474
 8100e8c:	100003c4 	.word	0x100003c4

08100e90 <parseRecievedMessages>:
 */

#include "main.h"

void parseRecievedMessages(uint8_t opCode)
{
 8100e90:	b480      	push	{r7}
 8100e92:	b083      	sub	sp, #12
 8100e94:	af00      	add	r7, sp, #0
 8100e96:	4603      	mov	r3, r0
 8100e98:	71fb      	strb	r3, [r7, #7]
		default:
		{

		}
	}
}
 8100e9a:	bf00      	nop
 8100e9c:	370c      	adds	r7, #12
 8100e9e:	46bd      	mov	sp, r7
 8100ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ea4:	4770      	bx	lr
	...

08100ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100ea8:	b480      	push	{r7}
 8100eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100eac:	4b0b      	ldr	r3, [pc, #44]	; (8100edc <SystemInit+0x34>)
 8100eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100eb2:	4a0a      	ldr	r2, [pc, #40]	; (8100edc <SystemInit+0x34>)
 8100eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100ebc:	4b07      	ldr	r3, [pc, #28]	; (8100edc <SystemInit+0x34>)
 8100ebe:	691b      	ldr	r3, [r3, #16]
 8100ec0:	4a06      	ldr	r2, [pc, #24]	; (8100edc <SystemInit+0x34>)
 8100ec2:	f043 0310 	orr.w	r3, r3, #16
 8100ec6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100ec8:	4b04      	ldr	r3, [pc, #16]	; (8100edc <SystemInit+0x34>)
 8100eca:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100ece:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100ed0:	bf00      	nop
 8100ed2:	46bd      	mov	sp, r7
 8100ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed8:	4770      	bx	lr
 8100eda:	bf00      	nop
 8100edc:	e000ed00 	.word	0xe000ed00

08100ee0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100ee0:	b480      	push	{r7}
 8100ee2:	b085      	sub	sp, #20
 8100ee4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100ee6:	4b19      	ldr	r3, [pc, #100]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eec:	4a17      	ldr	r2, [pc, #92]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100eee:	f043 0301 	orr.w	r3, r3, #1
 8100ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ef6:	4b15      	ldr	r3, [pc, #84]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100efc:	f003 0301 	and.w	r3, r3, #1
 8100f00:	60fb      	str	r3, [r7, #12]
 8100f02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f04:	4b11      	ldr	r3, [pc, #68]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f0a:	4a10      	ldr	r2, [pc, #64]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f0c:	f043 0302 	orr.w	r3, r3, #2
 8100f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f14:	4b0d      	ldr	r3, [pc, #52]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f1a:	f003 0302 	and.w	r3, r3, #2
 8100f1e:	60bb      	str	r3, [r7, #8]
 8100f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f22:	4b0a      	ldr	r3, [pc, #40]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f28:	4a08      	ldr	r2, [pc, #32]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f2a:	f043 0308 	orr.w	r3, r3, #8
 8100f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f32:	4b06      	ldr	r3, [pc, #24]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f38:	f003 0308 	and.w	r3, r3, #8
 8100f3c:	607b      	str	r3, [r7, #4]
 8100f3e:	687b      	ldr	r3, [r7, #4]

}
 8100f40:	bf00      	nop
 8100f42:	3714      	adds	r7, #20
 8100f44:	46bd      	mov	sp, r7
 8100f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4a:	4770      	bx	lr
 8100f4c:	58024400 	.word	0x58024400

08100f50 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8100f50:	b580      	push	{r7, lr}
 8100f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100f54:	4b1b      	ldr	r3, [pc, #108]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f56:	4a1c      	ldr	r2, [pc, #112]	; (8100fc8 <MX_I2C2_Init+0x78>)
 8100f58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 8100f5a:	4b1a      	ldr	r3, [pc, #104]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f5c:	4a1b      	ldr	r2, [pc, #108]	; (8100fcc <MX_I2C2_Init+0x7c>)
 8100f5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100f60:	4b18      	ldr	r3, [pc, #96]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100f66:	4b17      	ldr	r3, [pc, #92]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f68:	2201      	movs	r2, #1
 8100f6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f6c:	4b15      	ldr	r3, [pc, #84]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100f72:	4b14      	ldr	r3, [pc, #80]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f74:	2200      	movs	r2, #0
 8100f76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f78:	4b12      	ldr	r3, [pc, #72]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f7a:	2200      	movs	r2, #0
 8100f7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f7e:	4b11      	ldr	r3, [pc, #68]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f84:	4b0f      	ldr	r3, [pc, #60]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100f8a:	480e      	ldr	r0, [pc, #56]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f8c:	f001 f9ba 	bl	8102304 <HAL_I2C_Init>
 8100f90:	4603      	mov	r3, r0
 8100f92:	2b00      	cmp	r3, #0
 8100f94:	d001      	beq.n	8100f9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100f96:	f000 fb33 	bl	8101600 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100f9a:	2100      	movs	r1, #0
 8100f9c:	4809      	ldr	r0, [pc, #36]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f9e:	f001 fea5 	bl	8102cec <HAL_I2CEx_ConfigAnalogFilter>
 8100fa2:	4603      	mov	r3, r0
 8100fa4:	2b00      	cmp	r3, #0
 8100fa6:	d001      	beq.n	8100fac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100fa8:	f000 fb2a 	bl	8101600 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100fac:	2100      	movs	r1, #0
 8100fae:	4805      	ldr	r0, [pc, #20]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100fb0:	f001 fee7 	bl	8102d82 <HAL_I2CEx_ConfigDigitalFilter>
 8100fb4:	4603      	mov	r3, r0
 8100fb6:	2b00      	cmp	r3, #0
 8100fb8:	d001      	beq.n	8100fbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100fba:	f000 fb21 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100fbe:	bf00      	nop
 8100fc0:	bd80      	pop	{r7, pc}
 8100fc2:	bf00      	nop
 8100fc4:	10000374 	.word	0x10000374
 8100fc8:	40005800 	.word	0x40005800
 8100fcc:	00301242 	.word	0x00301242

08100fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	b0b8      	sub	sp, #224	; 0xe0
 8100fd4:	af00      	add	r7, sp, #0
 8100fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fdc:	2200      	movs	r2, #0
 8100fde:	601a      	str	r2, [r3, #0]
 8100fe0:	605a      	str	r2, [r3, #4]
 8100fe2:	609a      	str	r2, [r3, #8]
 8100fe4:	60da      	str	r2, [r3, #12]
 8100fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fe8:	f107 0310 	add.w	r3, r7, #16
 8100fec:	22bc      	movs	r2, #188	; 0xbc
 8100fee:	2100      	movs	r1, #0
 8100ff0:	4618      	mov	r0, r3
 8100ff2:	f007 fb0d 	bl	8108610 <memset>
  if(i2cHandle->Instance==I2C2)
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	4a29      	ldr	r2, [pc, #164]	; (81010a0 <HAL_I2C_MspInit+0xd0>)
 8100ffc:	4293      	cmp	r3, r2
 8100ffe:	d14a      	bne.n	8101096 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101000:	2308      	movs	r3, #8
 8101002:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101004:	2300      	movs	r3, #0
 8101006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810100a:	f107 0310 	add.w	r3, r7, #16
 810100e:	4618      	mov	r0, r3
 8101010:	f002 f906 	bl	8103220 <HAL_RCCEx_PeriphCLKConfig>
 8101014:	4603      	mov	r3, r0
 8101016:	2b00      	cmp	r3, #0
 8101018:	d001      	beq.n	810101e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 810101a:	f000 faf1 	bl	8101600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810101e:	4b21      	ldr	r3, [pc, #132]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101024:	4a1f      	ldr	r2, [pc, #124]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101026:	f043 0302 	orr.w	r3, r3, #2
 810102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810102e:	4b1d      	ldr	r3, [pc, #116]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101034:	f003 0302 	and.w	r3, r3, #2
 8101038:	60fb      	str	r3, [r7, #12]
 810103a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 810103c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101044:	2312      	movs	r3, #18
 8101046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810104a:	2300      	movs	r3, #0
 810104c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101050:	2300      	movs	r3, #0
 8101052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101056:	2304      	movs	r3, #4
 8101058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810105c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101060:	4619      	mov	r1, r3
 8101062:	4811      	ldr	r0, [pc, #68]	; (81010a8 <HAL_I2C_MspInit+0xd8>)
 8101064:	f000 ff44 	bl	8101ef0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101068:	4b0e      	ldr	r3, [pc, #56]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 810106a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810106e:	4a0d      	ldr	r2, [pc, #52]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101074:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101078:	4b0a      	ldr	r3, [pc, #40]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 810107a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101082:	60bb      	str	r3, [r7, #8]
 8101084:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8101086:	2200      	movs	r2, #0
 8101088:	2100      	movs	r1, #0
 810108a:	2021      	movs	r0, #33	; 0x21
 810108c:	f000 fed9 	bl	8101e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8101090:	2021      	movs	r0, #33	; 0x21
 8101092:	f000 fef0 	bl	8101e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8101096:	bf00      	nop
 8101098:	37e0      	adds	r7, #224	; 0xe0
 810109a:	46bd      	mov	sp, r7
 810109c:	bd80      	pop	{r7, pc}
 810109e:	bf00      	nop
 81010a0:	40005800 	.word	0x40005800
 81010a4:	58024400 	.word	0x58024400
 81010a8:	58020400 	.word	0x58020400

081010ac <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 81010ac:	b580      	push	{r7, lr}
 81010ae:	b086      	sub	sp, #24
 81010b0:	af02      	add	r7, sp, #8
 81010b2:	60f8      	str	r0, [r7, #12]
 81010b4:	60b9      	str	r1, [r7, #8]
 81010b6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81010b8:	68fb      	ldr	r3, [r7, #12]
 81010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81010c0:	d101      	bne.n	81010c6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81010c2:	4b09      	ldr	r3, [pc, #36]	; (81010e8 <rpmsg_send+0x3c>)
 81010c4:	e00c      	b.n	81010e0 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81010c6:	68fb      	ldr	r3, [r7, #12]
 81010c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81010ca:	68fb      	ldr	r3, [r7, #12]
 81010cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81010ce:	2301      	movs	r3, #1
 81010d0:	9301      	str	r3, [sp, #4]
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	9300      	str	r3, [sp, #0]
 81010d6:	68bb      	ldr	r3, [r7, #8]
 81010d8:	68f8      	ldr	r0, [r7, #12]
 81010da:	f004 ff3f 	bl	8105f5c <rpmsg_send_offchannel_raw>
 81010de:	4603      	mov	r3, r0
					 len, true);
}
 81010e0:	4618      	mov	r0, r3
 81010e2:	3710      	adds	r7, #16
 81010e4:	46bd      	mov	sp, r7
 81010e6:	bd80      	pop	{r7, pc}
 81010e8:	fffff829 	.word	0xfffff829
 81010ec:	00000000 	.word	0x00000000

081010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 81010f2:	b0b1      	sub	sp, #196	; 0xc4
 81010f4:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 81010f6:	2300      	movs	r3, #0
 81010f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 81010fa:	4b2b      	ldr	r3, [pc, #172]	; (81011a8 <main+0xb8>)
 81010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101100:	4a29      	ldr	r2, [pc, #164]	; (81011a8 <main+0xb8>)
 8101102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810110a:	4b27      	ldr	r3, [pc, #156]	; (81011a8 <main+0xb8>)
 810110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101114:	603b      	str	r3, [r7, #0]
 8101116:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101118:	2001      	movs	r0, #1
 810111a:	f001 f8c7 	bl	81022ac <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810111e:	f001 fef7 	bl	8102f10 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101122:	2201      	movs	r2, #1
 8101124:	2102      	movs	r1, #2
 8101126:	2000      	movs	r0, #0
 8101128:	f001 fe78 	bl	8102e1c <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810112c:	4b1f      	ldr	r3, [pc, #124]	; (81011ac <main+0xbc>)
 810112e:	681b      	ldr	r3, [r3, #0]
 8101130:	091b      	lsrs	r3, r3, #4
 8101132:	f003 030f 	and.w	r3, r3, #15
 8101136:	2b07      	cmp	r3, #7
 8101138:	d108      	bne.n	810114c <main+0x5c>
 810113a:	4b1d      	ldr	r3, [pc, #116]	; (81011b0 <main+0xc0>)
 810113c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101140:	4a1b      	ldr	r2, [pc, #108]	; (81011b0 <main+0xc0>)
 8101142:	f043 0301 	orr.w	r3, r3, #1
 8101146:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810114a:	e007      	b.n	810115c <main+0x6c>
 810114c:	4b18      	ldr	r3, [pc, #96]	; (81011b0 <main+0xc0>)
 810114e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101152:	4a17      	ldr	r2, [pc, #92]	; (81011b0 <main+0xc0>)
 8101154:	f043 0301 	orr.w	r3, r3, #1
 8101158:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 810115c:	207e      	movs	r0, #126	; 0x7e
 810115e:	f000 fea4 	bl	8101eaa <HAL_NVIC_ClearPendingIRQ>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101162:	f000 fc9d 	bl	8101aa0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101166:	f7ff febb 	bl	8100ee0 <MX_GPIO_Init>
  MX_I2C2_Init();
 810116a:	f7ff fef1 	bl	8100f50 <MX_I2C2_Init>
  MX_SPI1_Init();
 810116e:	f000 fa4d 	bl	810160c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 8101172:	f006 ffef 	bl	8108154 <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 8101176:	2100      	movs	r1, #0
 8101178:	2001      	movs	r0, #1
 810117a:	f007 f8f5 	bl	8108368 <MX_OPENAMP_Init>
 810117e:	4603      	mov	r3, r0
 8101180:	2b00      	cmp	r3, #0
 8101182:	d001      	beq.n	8101188 <main+0x98>
	{
		Error_Handler();
 8101184:	f000 fa3c 	bl	8101600 <Error_Handler>
	}

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 8101188:	2300      	movs	r3, #0
 810118a:	9300      	str	r3, [sp, #0]
 810118c:	4b09      	ldr	r3, [pc, #36]	; (81011b4 <main+0xc4>)
 810118e:	f04f 32ff 	mov.w	r2, #4294967295
 8101192:	4909      	ldr	r1, [pc, #36]	; (81011b8 <main+0xc8>)
 8101194:	4809      	ldr	r0, [pc, #36]	; (81011bc <main+0xcc>)
 8101196:	f007 f97d 	bl	8108494 <OPENAMP_create_endpoint>
 810119a:	66f8      	str	r0, [r7, #108]	; 0x6c
			rpmsg_recv_callback, NULL);
	if (status < 0)
 810119c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810119e:	2b00      	cmp	r3, #0
 81011a0:	da23      	bge.n	81011ea <main+0xfa>
	{
		Error_Handler();
 81011a2:	f000 fa2d 	bl	8101600 <Error_Handler>
	}

	/* Pingpong application*/
	/* Reveice an interger from the master, incremennt it and send back the result to the master*/
	while (message < 100)
 81011a6:	e020      	b.n	81011ea <main+0xfa>
 81011a8:	58024400 	.word	0x58024400
 81011ac:	e000ed00 	.word	0xe000ed00
 81011b0:	58026400 	.word	0x58026400
 81011b4:	08100e25 	.word	0x08100e25
 81011b8:	0810d978 	.word	0x0810d978
 81011bc:	10000418 	.word	0x10000418
	{
		message = receive_message();
 81011c0:	f7ff fe52 	bl	8100e68 <receive_message>
 81011c4:	4603      	mov	r3, r0
 81011c6:	4ace      	ldr	r2, [pc, #824]	; (8101500 <main+0x410>)
 81011c8:	6013      	str	r3, [r2, #0]
		message++;
 81011ca:	4bcd      	ldr	r3, [pc, #820]	; (8101500 <main+0x410>)
 81011cc:	681b      	ldr	r3, [r3, #0]
 81011ce:	3301      	adds	r3, #1
 81011d0:	4acb      	ldr	r2, [pc, #812]	; (8101500 <main+0x410>)
 81011d2:	6013      	str	r3, [r2, #0]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 81011d4:	2204      	movs	r2, #4
 81011d6:	49ca      	ldr	r1, [pc, #808]	; (8101500 <main+0x410>)
 81011d8:	48ca      	ldr	r0, [pc, #808]	; (8101504 <main+0x414>)
 81011da:	f7ff ff67 	bl	81010ac <rpmsg_send>
 81011de:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (status < 0)
 81011e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81011e2:	2b00      	cmp	r3, #0
 81011e4:	da01      	bge.n	81011ea <main+0xfa>
		{
			Error_Handler();
 81011e6:	f000 fa0b 	bl	8101600 <Error_Handler>
	while (message < 100)
 81011ea:	4bc5      	ldr	r3, [pc, #788]	; (8101500 <main+0x410>)
 81011ec:	681b      	ldr	r3, [r3, #0]
 81011ee:	2b63      	cmp	r3, #99	; 0x63
 81011f0:	d9e6      	bls.n	81011c0 <main+0xd0>
		}
	}

	chasisIMU.deviceAddress = 0x68<<1;
 81011f2:	4bc5      	ldr	r3, [pc, #788]	; (8101508 <main+0x418>)
 81011f4:	22d0      	movs	r2, #208	; 0xd0
 81011f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 81011fa:	4ac3      	ldr	r2, [pc, #780]	; (8101508 <main+0x418>)
 81011fc:	4bc3      	ldr	r3, [pc, #780]	; (810150c <main+0x41c>)
 81011fe:	4610      	mov	r0, r2
 8101200:	4619      	mov	r1, r3
 8101202:	234c      	movs	r3, #76	; 0x4c
 8101204:	461a      	mov	r2, r3
 8101206:	f007 f9f5 	bl	81085f4 <memcpy>
	initMPU(chasisIMU);
 810120a:	4ebf      	ldr	r6, [pc, #764]	; (8101508 <main+0x418>)
 810120c:	466d      	mov	r5, sp
 810120e:	f106 0410 	add.w	r4, r6, #16
 8101212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810121a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810121c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810121e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101222:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101226:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 810122a:	f006 ff5d 	bl	81080e8 <initMPU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int16_t AccData[3], GyroData[3], MagData[3];
	MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 810122e:	4eb6      	ldr	r6, [pc, #728]	; (8101508 <main+0x418>)
 8101230:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8101234:	9312      	str	r3, [sp, #72]	; 0x48
 8101236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 810123a:	9311      	str	r3, [sp, #68]	; 0x44
 810123c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8101240:	9310      	str	r3, [sp, #64]	; 0x40
 8101242:	466d      	mov	r5, sp
 8101244:	f106 0410 	add.w	r4, r6, #16
 8101248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810124e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101254:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101258:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810125c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101260:	f003 fd5a 	bl	8104d18 <MPU9250_GetData>

	uint8_t R = 0;
 8101264:	2300      	movs	r3, #0
 8101266:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	tAHRSDATA chasisIMUAHRS;
	chasisIMUAHRS.q0 = 1;
 810126a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 810126e:	61bb      	str	r3, [r7, #24]
	chasisIMUAHRS.q1 = 0;
 8101270:	f04f 0300 	mov.w	r3, #0
 8101274:	61fb      	str	r3, [r7, #28]
	chasisIMUAHRS.q2 = 0;
 8101276:	f04f 0300 	mov.w	r3, #0
 810127a:	623b      	str	r3, [r7, #32]
	chasisIMUAHRS.q3 = 0;
 810127c:	f04f 0300 	mov.w	r3, #0
 8101280:	627b      	str	r3, [r7, #36]	; 0x24
	chasisIMUAHRS.sampleRate = 1/20.0;
 8101282:	4ba3      	ldr	r3, [pc, #652]	; (8101510 <main+0x420>)
 8101284:	62bb      	str	r3, [r7, #40]	; 0x28

	while (1)
	{
		if (HAL_GetTick() - lastIMU1Measurement > 50)
 8101286:	f000 fcb3 	bl	8101bf0 <HAL_GetTick>
 810128a:	4602      	mov	r2, r0
 810128c:	4ba1      	ldr	r3, [pc, #644]	; (8101514 <main+0x424>)
 810128e:	681b      	ldr	r3, [r3, #0]
 8101290:	1ad3      	subs	r3, r2, r3
 8101292:	2b32      	cmp	r3, #50	; 0x32
 8101294:	f240 816e 	bls.w	8101574 <main+0x484>
		{
			MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 8101298:	4e9b      	ldr	r6, [pc, #620]	; (8101508 <main+0x418>)
 810129a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 810129e:	9312      	str	r3, [sp, #72]	; 0x48
 81012a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 81012a4:	9311      	str	r3, [sp, #68]	; 0x44
 81012a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 81012aa:	9310      	str	r3, [sp, #64]	; 0x40
 81012ac:	466d      	mov	r5, sp
 81012ae:	f106 0410 	add.w	r4, r6, #16
 81012b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81012b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81012b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81012b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81012be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81012c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81012c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81012ca:	f003 fd25 	bl	8104d18 <MPU9250_GetData>
			chasisIMUAHRS.AccData[0] = 9.80665 * AccData[0] / 16384.0;
 81012ce:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 81012d2:	4618      	mov	r0, r3
 81012d4:	f7ff f9be 	bl	8100654 <__aeabi_i2d>
 81012d8:	a381      	add	r3, pc, #516	; (adr r3, 81014e0 <main+0x3f0>)
 81012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81012de:	f7ff fa23 	bl	8100728 <__aeabi_dmul>
 81012e2:	4602      	mov	r2, r0
 81012e4:	460b      	mov	r3, r1
 81012e6:	4610      	mov	r0, r2
 81012e8:	4619      	mov	r1, r3
 81012ea:	f04f 0200 	mov.w	r2, #0
 81012ee:	4b8a      	ldr	r3, [pc, #552]	; (8101518 <main+0x428>)
 81012f0:	f7ff fb44 	bl	810097c <__aeabi_ddiv>
 81012f4:	4602      	mov	r2, r0
 81012f6:	460b      	mov	r3, r1
 81012f8:	4610      	mov	r0, r2
 81012fa:	4619      	mov	r1, r3
 81012fc:	f7ff fd0c 	bl	8100d18 <__aeabi_d2f>
 8101300:	4603      	mov	r3, r0
 8101302:	62fb      	str	r3, [r7, #44]	; 0x2c
			chasisIMUAHRS.AccData[1] = 9.80665 * AccData[1] / 16384.0;
 8101304:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8101308:	4618      	mov	r0, r3
 810130a:	f7ff f9a3 	bl	8100654 <__aeabi_i2d>
 810130e:	a374      	add	r3, pc, #464	; (adr r3, 81014e0 <main+0x3f0>)
 8101310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101314:	f7ff fa08 	bl	8100728 <__aeabi_dmul>
 8101318:	4602      	mov	r2, r0
 810131a:	460b      	mov	r3, r1
 810131c:	4610      	mov	r0, r2
 810131e:	4619      	mov	r1, r3
 8101320:	f04f 0200 	mov.w	r2, #0
 8101324:	4b7c      	ldr	r3, [pc, #496]	; (8101518 <main+0x428>)
 8101326:	f7ff fb29 	bl	810097c <__aeabi_ddiv>
 810132a:	4602      	mov	r2, r0
 810132c:	460b      	mov	r3, r1
 810132e:	4610      	mov	r0, r2
 8101330:	4619      	mov	r1, r3
 8101332:	f7ff fcf1 	bl	8100d18 <__aeabi_d2f>
 8101336:	4603      	mov	r3, r0
 8101338:	633b      	str	r3, [r7, #48]	; 0x30
			chasisIMUAHRS.AccData[2] = 9.80665 * AccData[2] / 16384.0;
 810133a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 810133e:	4618      	mov	r0, r3
 8101340:	f7ff f988 	bl	8100654 <__aeabi_i2d>
 8101344:	a366      	add	r3, pc, #408	; (adr r3, 81014e0 <main+0x3f0>)
 8101346:	e9d3 2300 	ldrd	r2, r3, [r3]
 810134a:	f7ff f9ed 	bl	8100728 <__aeabi_dmul>
 810134e:	4602      	mov	r2, r0
 8101350:	460b      	mov	r3, r1
 8101352:	4610      	mov	r0, r2
 8101354:	4619      	mov	r1, r3
 8101356:	f04f 0200 	mov.w	r2, #0
 810135a:	4b6f      	ldr	r3, [pc, #444]	; (8101518 <main+0x428>)
 810135c:	f7ff fb0e 	bl	810097c <__aeabi_ddiv>
 8101360:	4602      	mov	r2, r0
 8101362:	460b      	mov	r3, r1
 8101364:	4610      	mov	r0, r2
 8101366:	4619      	mov	r1, r3
 8101368:	f7ff fcd6 	bl	8100d18 <__aeabi_d2f>
 810136c:	4603      	mov	r3, r0
 810136e:	637b      	str	r3, [r7, #52]	; 0x34

			chasisIMUAHRS.GyroData[0] = GyroData[0] / 131.0; // Degrees / Sec
 8101370:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8101374:	4618      	mov	r0, r3
 8101376:	f7ff f96d 	bl	8100654 <__aeabi_i2d>
 810137a:	a35b      	add	r3, pc, #364	; (adr r3, 81014e8 <main+0x3f8>)
 810137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101380:	f7ff fafc 	bl	810097c <__aeabi_ddiv>
 8101384:	4602      	mov	r2, r0
 8101386:	460b      	mov	r3, r1
 8101388:	4610      	mov	r0, r2
 810138a:	4619      	mov	r1, r3
 810138c:	f7ff fcc4 	bl	8100d18 <__aeabi_d2f>
 8101390:	4603      	mov	r3, r0
 8101392:	63bb      	str	r3, [r7, #56]	; 0x38
			chasisIMUAHRS.GyroData[1] = GyroData[1] / 131.0;
 8101394:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8101398:	4618      	mov	r0, r3
 810139a:	f7ff f95b 	bl	8100654 <__aeabi_i2d>
 810139e:	a352      	add	r3, pc, #328	; (adr r3, 81014e8 <main+0x3f8>)
 81013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013a4:	f7ff faea 	bl	810097c <__aeabi_ddiv>
 81013a8:	4602      	mov	r2, r0
 81013aa:	460b      	mov	r3, r1
 81013ac:	4610      	mov	r0, r2
 81013ae:	4619      	mov	r1, r3
 81013b0:	f7ff fcb2 	bl	8100d18 <__aeabi_d2f>
 81013b4:	4603      	mov	r3, r0
 81013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
			chasisIMUAHRS.GyroData[2] = GyroData[2] / 131.0;
 81013b8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 81013bc:	4618      	mov	r0, r3
 81013be:	f7ff f949 	bl	8100654 <__aeabi_i2d>
 81013c2:	a349      	add	r3, pc, #292	; (adr r3, 81014e8 <main+0x3f8>)
 81013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013c8:	f7ff fad8 	bl	810097c <__aeabi_ddiv>
 81013cc:	4602      	mov	r2, r0
 81013ce:	460b      	mov	r3, r1
 81013d0:	4610      	mov	r0, r2
 81013d2:	4619      	mov	r1, r3
 81013d4:	f7ff fca0 	bl	8100d18 <__aeabi_d2f>
 81013d8:	4603      	mov	r3, r0
 81013da:	643b      	str	r3, [r7, #64]	; 0x40

			chasisIMUAHRS.MagData[0] = MagData[0] * 0.6;
 81013dc:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 81013e0:	4618      	mov	r0, r3
 81013e2:	f7ff f937 	bl	8100654 <__aeabi_i2d>
 81013e6:	a342      	add	r3, pc, #264	; (adr r3, 81014f0 <main+0x400>)
 81013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013ec:	f7ff f99c 	bl	8100728 <__aeabi_dmul>
 81013f0:	4602      	mov	r2, r0
 81013f2:	460b      	mov	r3, r1
 81013f4:	4610      	mov	r0, r2
 81013f6:	4619      	mov	r1, r3
 81013f8:	f7ff fc8e 	bl	8100d18 <__aeabi_d2f>
 81013fc:	4603      	mov	r3, r0
 81013fe:	647b      	str	r3, [r7, #68]	; 0x44
			chasisIMUAHRS.MagData[1] = MagData[1] * 0.6;
 8101400:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8101404:	4618      	mov	r0, r3
 8101406:	f7ff f925 	bl	8100654 <__aeabi_i2d>
 810140a:	a339      	add	r3, pc, #228	; (adr r3, 81014f0 <main+0x400>)
 810140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101410:	f7ff f98a 	bl	8100728 <__aeabi_dmul>
 8101414:	4602      	mov	r2, r0
 8101416:	460b      	mov	r3, r1
 8101418:	4610      	mov	r0, r2
 810141a:	4619      	mov	r1, r3
 810141c:	f7ff fc7c 	bl	8100d18 <__aeabi_d2f>
 8101420:	4603      	mov	r3, r0
 8101422:	64bb      	str	r3, [r7, #72]	; 0x48
			chasisIMUAHRS.MagData[2] = MagData[2] * 0.6;
 8101424:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8101428:	4618      	mov	r0, r3
 810142a:	f7ff f913 	bl	8100654 <__aeabi_i2d>
 810142e:	a330      	add	r3, pc, #192	; (adr r3, 81014f0 <main+0x400>)
 8101430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101434:	f7ff f978 	bl	8100728 <__aeabi_dmul>
 8101438:	4602      	mov	r2, r0
 810143a:	460b      	mov	r3, r1
 810143c:	4610      	mov	r0, r2
 810143e:	4619      	mov	r1, r3
 8101440:	f7ff fc6a 	bl	8100d18 <__aeabi_d2f>
 8101444:	4603      	mov	r3, r0
 8101446:	64fb      	str	r3, [r7, #76]	; 0x4c

			UpdateAHRS(&chasisIMUAHRS,
					chasisIMUAHRS.GyroData[0] * AHRSIMU_DEG2RAD, chasisIMUAHRS.GyroData[1] * AHRSIMU_DEG2RAD,
 8101448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810144a:	4618      	mov	r0, r3
 810144c:	f7ff f914 	bl	8100678 <__aeabi_f2d>
 8101450:	a329      	add	r3, pc, #164	; (adr r3, 81014f8 <main+0x408>)
 8101452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101456:	f7ff f967 	bl	8100728 <__aeabi_dmul>
 810145a:	4602      	mov	r2, r0
 810145c:	460b      	mov	r3, r1
 810145e:	4610      	mov	r0, r2
 8101460:	4619      	mov	r1, r3
 8101462:	f04f 0200 	mov.w	r2, #0
 8101466:	4b2d      	ldr	r3, [pc, #180]	; (810151c <main+0x42c>)
 8101468:	f7ff fa88 	bl	810097c <__aeabi_ddiv>
 810146c:	4602      	mov	r2, r0
 810146e:	460b      	mov	r3, r1
			UpdateAHRS(&chasisIMUAHRS,
 8101470:	4610      	mov	r0, r2
 8101472:	4619      	mov	r1, r3
 8101474:	f7ff fc50 	bl	8100d18 <__aeabi_d2f>
 8101478:	4604      	mov	r4, r0
					chasisIMUAHRS.GyroData[0] * AHRSIMU_DEG2RAD, chasisIMUAHRS.GyroData[1] * AHRSIMU_DEG2RAD,
 810147a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810147c:	4618      	mov	r0, r3
 810147e:	f7ff f8fb 	bl	8100678 <__aeabi_f2d>
 8101482:	a31d      	add	r3, pc, #116	; (adr r3, 81014f8 <main+0x408>)
 8101484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101488:	f7ff f94e 	bl	8100728 <__aeabi_dmul>
 810148c:	4602      	mov	r2, r0
 810148e:	460b      	mov	r3, r1
 8101490:	4610      	mov	r0, r2
 8101492:	4619      	mov	r1, r3
 8101494:	f04f 0200 	mov.w	r2, #0
 8101498:	4b20      	ldr	r3, [pc, #128]	; (810151c <main+0x42c>)
 810149a:	f7ff fa6f 	bl	810097c <__aeabi_ddiv>
 810149e:	4602      	mov	r2, r0
 81014a0:	460b      	mov	r3, r1
			UpdateAHRS(&chasisIMUAHRS,
 81014a2:	4610      	mov	r0, r2
 81014a4:	4619      	mov	r1, r3
 81014a6:	f7ff fc37 	bl	8100d18 <__aeabi_d2f>
 81014aa:	4605      	mov	r5, r0
					chasisIMUAHRS.GyroData[2] * AHRSIMU_DEG2RAD,
 81014ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81014ae:	4618      	mov	r0, r3
 81014b0:	f7ff f8e2 	bl	8100678 <__aeabi_f2d>
 81014b4:	a310      	add	r3, pc, #64	; (adr r3, 81014f8 <main+0x408>)
 81014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014ba:	f7ff f935 	bl	8100728 <__aeabi_dmul>
 81014be:	4602      	mov	r2, r0
 81014c0:	460b      	mov	r3, r1
 81014c2:	4610      	mov	r0, r2
 81014c4:	4619      	mov	r1, r3
 81014c6:	f04f 0200 	mov.w	r2, #0
 81014ca:	4b14      	ldr	r3, [pc, #80]	; (810151c <main+0x42c>)
 81014cc:	f7ff fa56 	bl	810097c <__aeabi_ddiv>
 81014d0:	4602      	mov	r2, r0
 81014d2:	460b      	mov	r3, r1
			UpdateAHRS(&chasisIMUAHRS,
 81014d4:	4610      	mov	r0, r2
 81014d6:	4619      	mov	r1, r3
 81014d8:	e022      	b.n	8101520 <main+0x430>
 81014da:	bf00      	nop
 81014dc:	f3af 8000 	nop.w
 81014e0:	3a92a305 	.word	0x3a92a305
 81014e4:	40239d01 	.word	0x40239d01
 81014e8:	00000000 	.word	0x00000000
 81014ec:	40606000 	.word	0x40606000
 81014f0:	33333333 	.word	0x33333333
 81014f4:	3fe33333 	.word	0x3fe33333
 81014f8:	54442d18 	.word	0x54442d18
 81014fc:	400921fb 	.word	0x400921fb
 8101500:	100003c0 	.word	0x100003c0
 8101504:	10000418 	.word	0x10000418
 8101508:	100003c8 	.word	0x100003c8
 810150c:	10000374 	.word	0x10000374
 8101510:	3d4ccccd 	.word	0x3d4ccccd
 8101514:	100002b0 	.word	0x100002b0
 8101518:	40d00000 	.word	0x40d00000
 810151c:	40668000 	.word	0x40668000
 8101520:	f7ff fbfa 	bl	8100d18 <__aeabi_d2f>
 8101524:	4602      	mov	r2, r0
 8101526:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 810152a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 810152e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8101532:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8101536:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 810153a:	ed97 5a13 	vldr	s10, [r7, #76]	; 0x4c
 810153e:	1d3b      	adds	r3, r7, #4
 8101540:	eeb0 4a45 	vmov.f32	s8, s10
 8101544:	eef0 3a65 	vmov.f32	s7, s11
 8101548:	eeb0 3a46 	vmov.f32	s6, s12
 810154c:	eef0 2a66 	vmov.f32	s5, s13
 8101550:	eeb0 2a47 	vmov.f32	s4, s14
 8101554:	eef0 1a67 	vmov.f32	s3, s15
 8101558:	ee01 2a10 	vmov	s2, r2
 810155c:	ee00 5a90 	vmov	s1, r5
 8101560:	ee00 4a10 	vmov	s0, r4
 8101564:	4618      	mov	r0, r3
 8101566:	f005 ff15 	bl	8107394 <UpdateAHRS>
					chasisIMUAHRS.AccData[0], chasisIMUAHRS.AccData[1], chasisIMUAHRS.AccData[2],
					chasisIMUAHRS.MagData[0], chasisIMUAHRS.MagData[1], chasisIMUAHRS.MagData[2]);
			lastIMU1Measurement = HAL_GetTick();
 810156a:	f000 fb41 	bl	8101bf0 <HAL_GetTick>
 810156e:	4603      	mov	r3, r0
 8101570:	4a1d      	ldr	r2, [pc, #116]	; (81015e8 <main+0x4f8>)
 8101572:	6013      	str	r3, [r2, #0]
		}
		sentAnglesData.opCode = 1;
 8101574:	4b1d      	ldr	r3, [pc, #116]	; (81015ec <main+0x4fc>)
 8101576:	2201      	movs	r2, #1
 8101578:	701a      	strb	r2, [r3, #0]
		sentAnglesData.bodyAngles.Pitch = chasisIMUAHRS.Pitch;
 810157a:	68bb      	ldr	r3, [r7, #8]
 810157c:	4a1b      	ldr	r2, [pc, #108]	; (81015ec <main+0x4fc>)
 810157e:	6093      	str	r3, [r2, #8]
		sentAnglesData.bodyAngles.Roll = chasisIMUAHRS.Roll;
 8101580:	687b      	ldr	r3, [r7, #4]
 8101582:	4a1a      	ldr	r2, [pc, #104]	; (81015ec <main+0x4fc>)
 8101584:	6053      	str	r3, [r2, #4]
		sentAnglesData.bodyAngles.Yaw = chasisIMUAHRS.Yaw;
 8101586:	68fb      	ldr	r3, [r7, #12]
 8101588:	4a18      	ldr	r2, [pc, #96]	; (81015ec <main+0x4fc>)
 810158a:	60d3      	str	r3, [r2, #12]
		sentAnglesData.lidarAngles.Pitch = 45;
 810158c:	4b17      	ldr	r3, [pc, #92]	; (81015ec <main+0x4fc>)
 810158e:	4a18      	ldr	r2, [pc, #96]	; (81015f0 <main+0x500>)
 8101590:	615a      	str	r2, [r3, #20]
		sentAnglesData.lidarAngles.Roll = 46;
 8101592:	4b16      	ldr	r3, [pc, #88]	; (81015ec <main+0x4fc>)
 8101594:	4a17      	ldr	r2, [pc, #92]	; (81015f4 <main+0x504>)
 8101596:	611a      	str	r2, [r3, #16]
		sentAnglesData.lidarAngles.Yaw = 47;
 8101598:	4b14      	ldr	r3, [pc, #80]	; (81015ec <main+0x4fc>)
 810159a:	4a17      	ldr	r2, [pc, #92]	; (81015f8 <main+0x508>)
 810159c:	619a      	str	r2, [r3, #24]
		if (R == 1)
 810159e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 81015a2:	2b01      	cmp	r3, #1
 81015a4:	d106      	bne.n	81015b4 <main+0x4c4>
		{
			status = OPENAMP_send(&rp_endpoint,&sentAnglesData, sizeof(sentAnglesData));
 81015a6:	221c      	movs	r2, #28
 81015a8:	4910      	ldr	r1, [pc, #64]	; (81015ec <main+0x4fc>)
 81015aa:	4814      	ldr	r0, [pc, #80]	; (81015fc <main+0x50c>)
 81015ac:	f7ff fd7e 	bl	81010ac <rpmsg_send>
 81015b0:	66f8      	str	r0, [r7, #108]	; 0x6c
 81015b2:	e007      	b.n	81015c4 <main+0x4d4>
		}
		else
		{
			status = OPENAMP_send(&rp_endpoint,&R, sizeof(R));
 81015b4:	f107 0353 	add.w	r3, r7, #83	; 0x53
 81015b8:	2201      	movs	r2, #1
 81015ba:	4619      	mov	r1, r3
 81015bc:	480f      	ldr	r0, [pc, #60]	; (81015fc <main+0x50c>)
 81015be:	f7ff fd75 	bl	81010ac <rpmsg_send>
 81015c2:	66f8      	str	r0, [r7, #108]	; 0x6c
		}
		R++;
 81015c4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 81015c8:	3301      	adds	r3, #1
 81015ca:	b2db      	uxtb	r3, r3
 81015cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (R == 200)
 81015d0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 81015d4:	2bc8      	cmp	r3, #200	; 0xc8
 81015d6:	d102      	bne.n	81015de <main+0x4ee>
		{
			R = 0;
 81015d8:	2300      	movs	r3, #0
 81015da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		}
		HAL_Delay(1);
 81015de:	2001      	movs	r0, #1
 81015e0:	f000 fb12 	bl	8101c08 <HAL_Delay>
		if (HAL_GetTick() - lastIMU1Measurement > 50)
 81015e4:	e64f      	b.n	8101286 <main+0x196>
 81015e6:	bf00      	nop
 81015e8:	100002b0 	.word	0x100002b0
 81015ec:	10000458 	.word	0x10000458
 81015f0:	42340000 	.word	0x42340000
 81015f4:	42380000 	.word	0x42380000
 81015f8:	423c0000 	.word	0x423c0000
 81015fc:	10000418 	.word	0x10000418

08101600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101600:	b480      	push	{r7}
 8101602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101604:	b672      	cpsid	i
}
 8101606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8101608:	e7fe      	b.n	8101608 <Error_Handler+0x8>
	...

0810160c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 810160c:	b580      	push	{r7, lr}
 810160e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101610:	4b28      	ldr	r3, [pc, #160]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101612:	4a29      	ldr	r2, [pc, #164]	; (81016b8 <MX_SPI1_Init+0xac>)
 8101614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101616:	4b27      	ldr	r3, [pc, #156]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101618:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810161c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 810161e:	4b25      	ldr	r3, [pc, #148]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101620:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8101624:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101626:	4b23      	ldr	r3, [pc, #140]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101628:	2203      	movs	r2, #3
 810162a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810162c:	4b21      	ldr	r3, [pc, #132]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810162e:	2200      	movs	r2, #0
 8101630:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101632:	4b20      	ldr	r3, [pc, #128]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101634:	2200      	movs	r2, #0
 8101636:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101638:	4b1e      	ldr	r3, [pc, #120]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810163a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810163e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8101640:	4b1c      	ldr	r3, [pc, #112]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101642:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8101646:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101648:	4b1a      	ldr	r3, [pc, #104]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810164a:	2200      	movs	r2, #0
 810164c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810164e:	4b19      	ldr	r3, [pc, #100]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101650:	2200      	movs	r2, #0
 8101652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101654:	4b17      	ldr	r3, [pc, #92]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101656:	2200      	movs	r2, #0
 8101658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810165a:	4b16      	ldr	r3, [pc, #88]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810165c:	2200      	movs	r2, #0
 810165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101660:	4b14      	ldr	r3, [pc, #80]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101666:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101668:	4b12      	ldr	r3, [pc, #72]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810166a:	2200      	movs	r2, #0
 810166c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810166e:	4b11      	ldr	r3, [pc, #68]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101670:	2200      	movs	r2, #0
 8101672:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101674:	4b0f      	ldr	r3, [pc, #60]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101676:	2200      	movs	r2, #0
 8101678:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810167a:	4b0e      	ldr	r3, [pc, #56]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810167c:	2200      	movs	r2, #0
 810167e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101680:	4b0c      	ldr	r3, [pc, #48]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101682:	2200      	movs	r2, #0
 8101684:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101686:	4b0b      	ldr	r3, [pc, #44]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101688:	2200      	movs	r2, #0
 810168a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810168c:	4b09      	ldr	r3, [pc, #36]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810168e:	2200      	movs	r2, #0
 8101690:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101692:	4b08      	ldr	r3, [pc, #32]	; (81016b4 <MX_SPI1_Init+0xa8>)
 8101694:	2200      	movs	r2, #0
 8101696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101698:	4b06      	ldr	r3, [pc, #24]	; (81016b4 <MX_SPI1_Init+0xa8>)
 810169a:	2200      	movs	r2, #0
 810169c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810169e:	4805      	ldr	r0, [pc, #20]	; (81016b4 <MX_SPI1_Init+0xa8>)
 81016a0:	f002 fe62 	bl	8104368 <HAL_SPI_Init>
 81016a4:	4603      	mov	r3, r0
 81016a6:	2b00      	cmp	r3, #0
 81016a8:	d001      	beq.n	81016ae <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 81016aa:	f7ff ffa9 	bl	8101600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81016ae:	bf00      	nop
 81016b0:	bd80      	pop	{r7, pc}
 81016b2:	bf00      	nop
 81016b4:	10000478 	.word	0x10000478
 81016b8:	40013000 	.word	0x40013000

081016bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81016bc:	b580      	push	{r7, lr}
 81016be:	b0ba      	sub	sp, #232	; 0xe8
 81016c0:	af00      	add	r7, sp, #0
 81016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81016c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81016c8:	2200      	movs	r2, #0
 81016ca:	601a      	str	r2, [r3, #0]
 81016cc:	605a      	str	r2, [r3, #4]
 81016ce:	609a      	str	r2, [r3, #8]
 81016d0:	60da      	str	r2, [r3, #12]
 81016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016d4:	f107 0318 	add.w	r3, r7, #24
 81016d8:	22bc      	movs	r2, #188	; 0xbc
 81016da:	2100      	movs	r1, #0
 81016dc:	4618      	mov	r0, r3
 81016de:	f006 ff97 	bl	8108610 <memset>
  if(spiHandle->Instance==SPI1)
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	681b      	ldr	r3, [r3, #0]
 81016e6:	4a36      	ldr	r2, [pc, #216]	; (81017c0 <HAL_SPI_MspInit+0x104>)
 81016e8:	4293      	cmp	r3, r2
 81016ea:	d165      	bne.n	81017b8 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81016ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81016f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81016f2:	2300      	movs	r3, #0
 81016f4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016f6:	f107 0318 	add.w	r3, r7, #24
 81016fa:	4618      	mov	r0, r3
 81016fc:	f001 fd90 	bl	8103220 <HAL_RCCEx_PeriphCLKConfig>
 8101700:	4603      	mov	r3, r0
 8101702:	2b00      	cmp	r3, #0
 8101704:	d001      	beq.n	810170a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8101706:	f7ff ff7b 	bl	8101600 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 810170a:	4b2e      	ldr	r3, [pc, #184]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 810170c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101710:	4a2c      	ldr	r2, [pc, #176]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 8101712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101716:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810171a:	4b2a      	ldr	r3, [pc, #168]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 810171c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101724:	617b      	str	r3, [r7, #20]
 8101726:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101728:	4b26      	ldr	r3, [pc, #152]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 810172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810172e:	4a25      	ldr	r2, [pc, #148]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 8101730:	f043 0301 	orr.w	r3, r3, #1
 8101734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101738:	4b22      	ldr	r3, [pc, #136]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 810173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810173e:	f003 0301 	and.w	r3, r3, #1
 8101742:	613b      	str	r3, [r7, #16]
 8101744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101746:	4b1f      	ldr	r3, [pc, #124]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 8101748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810174c:	4a1d      	ldr	r2, [pc, #116]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 810174e:	f043 0308 	orr.w	r3, r3, #8
 8101752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101756:	4b1b      	ldr	r3, [pc, #108]	; (81017c4 <HAL_SPI_MspInit+0x108>)
 8101758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810175c:	f003 0308 	and.w	r3, r3, #8
 8101760:	60fb      	str	r3, [r7, #12]
 8101762:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101764:	2320      	movs	r3, #32
 8101766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810176a:	2302      	movs	r3, #2
 810176c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101770:	2300      	movs	r3, #0
 8101772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101776:	2300      	movs	r3, #0
 8101778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810177c:	2305      	movs	r3, #5
 810177e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101786:	4619      	mov	r1, r3
 8101788:	480f      	ldr	r0, [pc, #60]	; (81017c8 <HAL_SPI_MspInit+0x10c>)
 810178a:	f000 fbb1 	bl	8101ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 810178e:	2380      	movs	r3, #128	; 0x80
 8101790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101794:	2302      	movs	r3, #2
 8101796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810179a:	2300      	movs	r3, #0
 810179c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017a0:	2300      	movs	r3, #0
 81017a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81017a6:	2305      	movs	r3, #5
 81017a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81017ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81017b0:	4619      	mov	r1, r3
 81017b2:	4806      	ldr	r0, [pc, #24]	; (81017cc <HAL_SPI_MspInit+0x110>)
 81017b4:	f000 fb9c 	bl	8101ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81017b8:	bf00      	nop
 81017ba:	37e8      	adds	r7, #232	; 0xe8
 81017bc:	46bd      	mov	sp, r7
 81017be:	bd80      	pop	{r7, pc}
 81017c0:	40013000 	.word	0x40013000
 81017c4:	58024400 	.word	0x58024400
 81017c8:	58020000 	.word	0x58020000
 81017cc:	58020c00 	.word	0x58020c00

081017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81017d0:	b580      	push	{r7, lr}
 81017d2:	b082      	sub	sp, #8
 81017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81017d6:	4b15      	ldr	r3, [pc, #84]	; (810182c <HAL_MspInit+0x5c>)
 81017d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81017dc:	4a13      	ldr	r2, [pc, #76]	; (810182c <HAL_MspInit+0x5c>)
 81017de:	f043 0302 	orr.w	r3, r3, #2
 81017e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81017e6:	4b11      	ldr	r3, [pc, #68]	; (810182c <HAL_MspInit+0x5c>)
 81017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81017ec:	f003 0302 	and.w	r3, r3, #2
 81017f0:	607b      	str	r3, [r7, #4]
 81017f2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 4, 0);
 81017f4:	2200      	movs	r2, #0
 81017f6:	2104      	movs	r1, #4
 81017f8:	2040      	movs	r0, #64	; 0x40
 81017fa:	f000 fb22 	bl	8101e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 81017fe:	2040      	movs	r0, #64	; 0x40
 8101800:	f000 fb39 	bl	8101e76 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 4, 0);
 8101804:	2200      	movs	r2, #0
 8101806:	2104      	movs	r1, #4
 8101808:	207e      	movs	r0, #126	; 0x7e
 810180a:	f000 fb1a 	bl	8101e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810180e:	207e      	movs	r0, #126	; 0x7e
 8101810:	f000 fb31 	bl	8101e76 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8101814:	2200      	movs	r2, #0
 8101816:	2104      	movs	r1, #4
 8101818:	2094      	movs	r0, #148	; 0x94
 810181a:	f000 fb12 	bl	8101e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 810181e:	2094      	movs	r0, #148	; 0x94
 8101820:	f000 fb29 	bl	8101e76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101824:	bf00      	nop
 8101826:	3708      	adds	r7, #8
 8101828:	46bd      	mov	sp, r7
 810182a:	bd80      	pop	{r7, pc}
 810182c:	58024400 	.word	0x58024400

08101830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101830:	b480      	push	{r7}
 8101832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101834:	e7fe      	b.n	8101834 <NMI_Handler+0x4>

08101836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101836:	b480      	push	{r7}
 8101838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810183a:	e7fe      	b.n	810183a <HardFault_Handler+0x4>

0810183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810183c:	b480      	push	{r7}
 810183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101840:	e7fe      	b.n	8101840 <MemManage_Handler+0x4>

08101842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101842:	b480      	push	{r7}
 8101844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101846:	e7fe      	b.n	8101846 <BusFault_Handler+0x4>

08101848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101848:	b480      	push	{r7}
 810184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810184c:	e7fe      	b.n	810184c <UsageFault_Handler+0x4>

0810184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810184e:	b480      	push	{r7}
 8101850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101852:	bf00      	nop
 8101854:	46bd      	mov	sp, r7
 8101856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810185a:	4770      	bx	lr

0810185c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810185c:	b480      	push	{r7}
 810185e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101860:	bf00      	nop
 8101862:	46bd      	mov	sp, r7
 8101864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101868:	4770      	bx	lr

0810186a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810186a:	b480      	push	{r7}
 810186c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810186e:	bf00      	nop
 8101870:	46bd      	mov	sp, r7
 8101872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101876:	4770      	bx	lr

08101878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101878:	b580      	push	{r7, lr}
 810187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810187c:	f000 f9a4 	bl	8101bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101880:	bf00      	nop
 8101882:	bd80      	pop	{r7, pc}

08101884 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8101884:	b580      	push	{r7, lr}
 8101886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8101888:	4802      	ldr	r0, [pc, #8]	; (8101894 <I2C2_EV_IRQHandler+0x10>)
 810188a:	f000 fff9 	bl	8102880 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 810188e:	bf00      	nop
 8101890:	bd80      	pop	{r7, pc}
 8101892:	bf00      	nop
 8101894:	10000374 	.word	0x10000374

08101898 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101898:	b480      	push	{r7}
 810189a:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 810189c:	bf00      	nop
 810189e:	46bd      	mov	sp, r7
 81018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a4:	4770      	bx	lr

081018a6 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81018a6:	b580      	push	{r7, lr}
 81018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81018aa:	f000 fd11 	bl	81022d0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81018ae:	bf00      	nop
 81018b0:	bd80      	pop	{r7, pc}

081018b2 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 81018b2:	b480      	push	{r7}
 81018b4:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 81018b6:	bf00      	nop
 81018b8:	46bd      	mov	sp, r7
 81018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018be:	4770      	bx	lr

081018c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81018c0:	b480      	push	{r7}
 81018c2:	af00      	add	r7, sp, #0
	return 1;
 81018c4:	2301      	movs	r3, #1
}
 81018c6:	4618      	mov	r0, r3
 81018c8:	46bd      	mov	sp, r7
 81018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ce:	4770      	bx	lr

081018d0 <_kill>:

int _kill(int pid, int sig)
{
 81018d0:	b580      	push	{r7, lr}
 81018d2:	b082      	sub	sp, #8
 81018d4:	af00      	add	r7, sp, #0
 81018d6:	6078      	str	r0, [r7, #4]
 81018d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81018da:	f006 fe3f 	bl	810855c <__errno>
 81018de:	4603      	mov	r3, r0
 81018e0:	2216      	movs	r2, #22
 81018e2:	601a      	str	r2, [r3, #0]
	return -1;
 81018e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81018e8:	4618      	mov	r0, r3
 81018ea:	3708      	adds	r7, #8
 81018ec:	46bd      	mov	sp, r7
 81018ee:	bd80      	pop	{r7, pc}

081018f0 <_exit>:

void _exit (int status)
{
 81018f0:	b580      	push	{r7, lr}
 81018f2:	b082      	sub	sp, #8
 81018f4:	af00      	add	r7, sp, #0
 81018f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81018f8:	f04f 31ff 	mov.w	r1, #4294967295
 81018fc:	6878      	ldr	r0, [r7, #4]
 81018fe:	f7ff ffe7 	bl	81018d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101902:	e7fe      	b.n	8101902 <_exit+0x12>

08101904 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101904:	b580      	push	{r7, lr}
 8101906:	b086      	sub	sp, #24
 8101908:	af00      	add	r7, sp, #0
 810190a:	60f8      	str	r0, [r7, #12]
 810190c:	60b9      	str	r1, [r7, #8]
 810190e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101910:	2300      	movs	r3, #0
 8101912:	617b      	str	r3, [r7, #20]
 8101914:	e00a      	b.n	810192c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101916:	f3af 8000 	nop.w
 810191a:	4601      	mov	r1, r0
 810191c:	68bb      	ldr	r3, [r7, #8]
 810191e:	1c5a      	adds	r2, r3, #1
 8101920:	60ba      	str	r2, [r7, #8]
 8101922:	b2ca      	uxtb	r2, r1
 8101924:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101926:	697b      	ldr	r3, [r7, #20]
 8101928:	3301      	adds	r3, #1
 810192a:	617b      	str	r3, [r7, #20]
 810192c:	697a      	ldr	r2, [r7, #20]
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	429a      	cmp	r2, r3
 8101932:	dbf0      	blt.n	8101916 <_read+0x12>
	}

return len;
 8101934:	687b      	ldr	r3, [r7, #4]
}
 8101936:	4618      	mov	r0, r3
 8101938:	3718      	adds	r7, #24
 810193a:	46bd      	mov	sp, r7
 810193c:	bd80      	pop	{r7, pc}

0810193e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810193e:	b580      	push	{r7, lr}
 8101940:	b086      	sub	sp, #24
 8101942:	af00      	add	r7, sp, #0
 8101944:	60f8      	str	r0, [r7, #12]
 8101946:	60b9      	str	r1, [r7, #8]
 8101948:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810194a:	2300      	movs	r3, #0
 810194c:	617b      	str	r3, [r7, #20]
 810194e:	e009      	b.n	8101964 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101950:	68bb      	ldr	r3, [r7, #8]
 8101952:	1c5a      	adds	r2, r3, #1
 8101954:	60ba      	str	r2, [r7, #8]
 8101956:	781b      	ldrb	r3, [r3, #0]
 8101958:	4618      	mov	r0, r3
 810195a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810195e:	697b      	ldr	r3, [r7, #20]
 8101960:	3301      	adds	r3, #1
 8101962:	617b      	str	r3, [r7, #20]
 8101964:	697a      	ldr	r2, [r7, #20]
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	429a      	cmp	r2, r3
 810196a:	dbf1      	blt.n	8101950 <_write+0x12>
	}
	return len;
 810196c:	687b      	ldr	r3, [r7, #4]
}
 810196e:	4618      	mov	r0, r3
 8101970:	3718      	adds	r7, #24
 8101972:	46bd      	mov	sp, r7
 8101974:	bd80      	pop	{r7, pc}

08101976 <_close>:

int _close(int file)
{
 8101976:	b480      	push	{r7}
 8101978:	b083      	sub	sp, #12
 810197a:	af00      	add	r7, sp, #0
 810197c:	6078      	str	r0, [r7, #4]
	return -1;
 810197e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101982:	4618      	mov	r0, r3
 8101984:	370c      	adds	r7, #12
 8101986:	46bd      	mov	sp, r7
 8101988:	f85d 7b04 	ldr.w	r7, [sp], #4
 810198c:	4770      	bx	lr

0810198e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810198e:	b480      	push	{r7}
 8101990:	b083      	sub	sp, #12
 8101992:	af00      	add	r7, sp, #0
 8101994:	6078      	str	r0, [r7, #4]
 8101996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101998:	683b      	ldr	r3, [r7, #0]
 810199a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810199e:	605a      	str	r2, [r3, #4]
	return 0;
 81019a0:	2300      	movs	r3, #0
}
 81019a2:	4618      	mov	r0, r3
 81019a4:	370c      	adds	r7, #12
 81019a6:	46bd      	mov	sp, r7
 81019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ac:	4770      	bx	lr

081019ae <_isatty>:

int _isatty(int file)
{
 81019ae:	b480      	push	{r7}
 81019b0:	b083      	sub	sp, #12
 81019b2:	af00      	add	r7, sp, #0
 81019b4:	6078      	str	r0, [r7, #4]
	return 1;
 81019b6:	2301      	movs	r3, #1
}
 81019b8:	4618      	mov	r0, r3
 81019ba:	370c      	adds	r7, #12
 81019bc:	46bd      	mov	sp, r7
 81019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c2:	4770      	bx	lr

081019c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81019c4:	b480      	push	{r7}
 81019c6:	b085      	sub	sp, #20
 81019c8:	af00      	add	r7, sp, #0
 81019ca:	60f8      	str	r0, [r7, #12]
 81019cc:	60b9      	str	r1, [r7, #8]
 81019ce:	607a      	str	r2, [r7, #4]
	return 0;
 81019d0:	2300      	movs	r3, #0
}
 81019d2:	4618      	mov	r0, r3
 81019d4:	3714      	adds	r7, #20
 81019d6:	46bd      	mov	sp, r7
 81019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019dc:	4770      	bx	lr
	...

081019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81019e0:	b580      	push	{r7, lr}
 81019e2:	b086      	sub	sp, #24
 81019e4:	af00      	add	r7, sp, #0
 81019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81019e8:	4a14      	ldr	r2, [pc, #80]	; (8101a3c <_sbrk+0x5c>)
 81019ea:	4b15      	ldr	r3, [pc, #84]	; (8101a40 <_sbrk+0x60>)
 81019ec:	1ad3      	subs	r3, r2, r3
 81019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81019f0:	697b      	ldr	r3, [r7, #20]
 81019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81019f4:	4b13      	ldr	r3, [pc, #76]	; (8101a44 <_sbrk+0x64>)
 81019f6:	681b      	ldr	r3, [r3, #0]
 81019f8:	2b00      	cmp	r3, #0
 81019fa:	d102      	bne.n	8101a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81019fc:	4b11      	ldr	r3, [pc, #68]	; (8101a44 <_sbrk+0x64>)
 81019fe:	4a12      	ldr	r2, [pc, #72]	; (8101a48 <_sbrk+0x68>)
 8101a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101a02:	4b10      	ldr	r3, [pc, #64]	; (8101a44 <_sbrk+0x64>)
 8101a04:	681a      	ldr	r2, [r3, #0]
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	4413      	add	r3, r2
 8101a0a:	693a      	ldr	r2, [r7, #16]
 8101a0c:	429a      	cmp	r2, r3
 8101a0e:	d207      	bcs.n	8101a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101a10:	f006 fda4 	bl	810855c <__errno>
 8101a14:	4603      	mov	r3, r0
 8101a16:	220c      	movs	r2, #12
 8101a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8101a1e:	e009      	b.n	8101a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101a20:	4b08      	ldr	r3, [pc, #32]	; (8101a44 <_sbrk+0x64>)
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101a26:	4b07      	ldr	r3, [pc, #28]	; (8101a44 <_sbrk+0x64>)
 8101a28:	681a      	ldr	r2, [r3, #0]
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	4413      	add	r3, r2
 8101a2e:	4a05      	ldr	r2, [pc, #20]	; (8101a44 <_sbrk+0x64>)
 8101a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101a32:	68fb      	ldr	r3, [r7, #12]
}
 8101a34:	4618      	mov	r0, r3
 8101a36:	3718      	adds	r7, #24
 8101a38:	46bd      	mov	sp, r7
 8101a3a:	bd80      	pop	{r7, pc}
 8101a3c:	10048000 	.word	0x10048000
 8101a40:	00000400 	.word	0x00000400
 8101a44:	100002b4 	.word	0x100002b4
 8101a48:	10000538 	.word	0x10000538

08101a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101a84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101a50:	f7ff fa2a 	bl	8100ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101a54:	480c      	ldr	r0, [pc, #48]	; (8101a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101a56:	490d      	ldr	r1, [pc, #52]	; (8101a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101a58:	4a0d      	ldr	r2, [pc, #52]	; (8101a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101a5c:	e002      	b.n	8101a64 <LoopCopyDataInit>

08101a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101a62:	3304      	adds	r3, #4

08101a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101a68:	d3f9      	bcc.n	8101a5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101a6a:	4a0a      	ldr	r2, [pc, #40]	; (8101a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101a6c:	4c0a      	ldr	r4, [pc, #40]	; (8101a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101a70:	e001      	b.n	8101a76 <LoopFillZerobss>

08101a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101a74:	3204      	adds	r2, #4

08101a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101a78:	d3fb      	bcc.n	8101a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101a7a:	f006 fd87 	bl	810858c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101a7e:	f7ff fb37 	bl	81010f0 <main>
  bx  lr
 8101a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101a84:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101a88:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101a8c:	10000290 	.word	0x10000290
  ldr r2, =_sidata
 8101a90:	0810e100 	.word	0x0810e100
  ldr r2, =_sbss
 8101a94:	10000290 	.word	0x10000290
  ldr r4, =_ebss
 8101a98:	10000534 	.word	0x10000534

08101a9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101a9c:	e7fe      	b.n	8101a9c <ADC3_IRQHandler>
	...

08101aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101aa0:	b580      	push	{r7, lr}
 8101aa2:	b082      	sub	sp, #8
 8101aa4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101aa6:	4b28      	ldr	r3, [pc, #160]	; (8101b48 <HAL_Init+0xa8>)
 8101aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101aac:	4a26      	ldr	r2, [pc, #152]	; (8101b48 <HAL_Init+0xa8>)
 8101aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ab6:	4b24      	ldr	r3, [pc, #144]	; (8101b48 <HAL_Init+0xa8>)
 8101ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101ac0:	603b      	str	r3, [r7, #0]
 8101ac2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101ac4:	4b21      	ldr	r3, [pc, #132]	; (8101b4c <HAL_Init+0xac>)
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101acc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101ad0:	4a1e      	ldr	r2, [pc, #120]	; (8101b4c <HAL_Init+0xac>)
 8101ad2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101ad6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101ad8:	4b1c      	ldr	r3, [pc, #112]	; (8101b4c <HAL_Init+0xac>)
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	4a1b      	ldr	r2, [pc, #108]	; (8101b4c <HAL_Init+0xac>)
 8101ade:	f043 0301 	orr.w	r3, r3, #1
 8101ae2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101ae4:	2003      	movs	r0, #3
 8101ae6:	f000 f9a1 	bl	8101e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101aea:	f001 fa1f 	bl	8102f2c <HAL_RCC_GetSysClockFreq>
 8101aee:	4602      	mov	r2, r0
 8101af0:	4b15      	ldr	r3, [pc, #84]	; (8101b48 <HAL_Init+0xa8>)
 8101af2:	699b      	ldr	r3, [r3, #24]
 8101af4:	0a1b      	lsrs	r3, r3, #8
 8101af6:	f003 030f 	and.w	r3, r3, #15
 8101afa:	4915      	ldr	r1, [pc, #84]	; (8101b50 <HAL_Init+0xb0>)
 8101afc:	5ccb      	ldrb	r3, [r1, r3]
 8101afe:	f003 031f 	and.w	r3, r3, #31
 8101b02:	fa22 f303 	lsr.w	r3, r2, r3
 8101b06:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101b08:	4b0f      	ldr	r3, [pc, #60]	; (8101b48 <HAL_Init+0xa8>)
 8101b0a:	699b      	ldr	r3, [r3, #24]
 8101b0c:	f003 030f 	and.w	r3, r3, #15
 8101b10:	4a0f      	ldr	r2, [pc, #60]	; (8101b50 <HAL_Init+0xb0>)
 8101b12:	5cd3      	ldrb	r3, [r2, r3]
 8101b14:	f003 031f 	and.w	r3, r3, #31
 8101b18:	687a      	ldr	r2, [r7, #4]
 8101b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8101b1e:	4a0d      	ldr	r2, [pc, #52]	; (8101b54 <HAL_Init+0xb4>)
 8101b20:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101b22:	4b0c      	ldr	r3, [pc, #48]	; (8101b54 <HAL_Init+0xb4>)
 8101b24:	681b      	ldr	r3, [r3, #0]
 8101b26:	4a0c      	ldr	r2, [pc, #48]	; (8101b58 <HAL_Init+0xb8>)
 8101b28:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101b2a:	2000      	movs	r0, #0
 8101b2c:	f000 f816 	bl	8101b5c <HAL_InitTick>
 8101b30:	4603      	mov	r3, r0
 8101b32:	2b00      	cmp	r3, #0
 8101b34:	d001      	beq.n	8101b3a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101b36:	2301      	movs	r3, #1
 8101b38:	e002      	b.n	8101b40 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101b3a:	f7ff fe49 	bl	81017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101b3e:	2300      	movs	r3, #0
}
 8101b40:	4618      	mov	r0, r3
 8101b42:	3708      	adds	r7, #8
 8101b44:	46bd      	mov	sp, r7
 8101b46:	bd80      	pop	{r7, pc}
 8101b48:	58024400 	.word	0x58024400
 8101b4c:	40024400 	.word	0x40024400
 8101b50:	0810db6c 	.word	0x0810db6c
 8101b54:	10000004 	.word	0x10000004
 8101b58:	10000000 	.word	0x10000000

08101b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b5c:	b580      	push	{r7, lr}
 8101b5e:	b082      	sub	sp, #8
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101b64:	4b15      	ldr	r3, [pc, #84]	; (8101bbc <HAL_InitTick+0x60>)
 8101b66:	781b      	ldrb	r3, [r3, #0]
 8101b68:	2b00      	cmp	r3, #0
 8101b6a:	d101      	bne.n	8101b70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101b6c:	2301      	movs	r3, #1
 8101b6e:	e021      	b.n	8101bb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101b70:	4b13      	ldr	r3, [pc, #76]	; (8101bc0 <HAL_InitTick+0x64>)
 8101b72:	681a      	ldr	r2, [r3, #0]
 8101b74:	4b11      	ldr	r3, [pc, #68]	; (8101bbc <HAL_InitTick+0x60>)
 8101b76:	781b      	ldrb	r3, [r3, #0]
 8101b78:	4619      	mov	r1, r3
 8101b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8101b86:	4618      	mov	r0, r3
 8101b88:	f000 f983 	bl	8101e92 <HAL_SYSTICK_Config>
 8101b8c:	4603      	mov	r3, r0
 8101b8e:	2b00      	cmp	r3, #0
 8101b90:	d001      	beq.n	8101b96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101b92:	2301      	movs	r3, #1
 8101b94:	e00e      	b.n	8101bb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	2b0f      	cmp	r3, #15
 8101b9a:	d80a      	bhi.n	8101bb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101b9c:	2200      	movs	r2, #0
 8101b9e:	6879      	ldr	r1, [r7, #4]
 8101ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8101ba4:	f000 f94d 	bl	8101e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101ba8:	4a06      	ldr	r2, [pc, #24]	; (8101bc4 <HAL_InitTick+0x68>)
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101bae:	2300      	movs	r3, #0
 8101bb0:	e000      	b.n	8101bb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101bb2:	2301      	movs	r3, #1
}
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	3708      	adds	r7, #8
 8101bb8:	46bd      	mov	sp, r7
 8101bba:	bd80      	pop	{r7, pc}
 8101bbc:	1000000c 	.word	0x1000000c
 8101bc0:	10000000 	.word	0x10000000
 8101bc4:	10000008 	.word	0x10000008

08101bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101bc8:	b480      	push	{r7}
 8101bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101bcc:	4b06      	ldr	r3, [pc, #24]	; (8101be8 <HAL_IncTick+0x20>)
 8101bce:	781b      	ldrb	r3, [r3, #0]
 8101bd0:	461a      	mov	r2, r3
 8101bd2:	4b06      	ldr	r3, [pc, #24]	; (8101bec <HAL_IncTick+0x24>)
 8101bd4:	681b      	ldr	r3, [r3, #0]
 8101bd6:	4413      	add	r3, r2
 8101bd8:	4a04      	ldr	r2, [pc, #16]	; (8101bec <HAL_IncTick+0x24>)
 8101bda:	6013      	str	r3, [r2, #0]
}
 8101bdc:	bf00      	nop
 8101bde:	46bd      	mov	sp, r7
 8101be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be4:	4770      	bx	lr
 8101be6:	bf00      	nop
 8101be8:	1000000c 	.word	0x1000000c
 8101bec:	10000500 	.word	0x10000500

08101bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101bf0:	b480      	push	{r7}
 8101bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8101bf4:	4b03      	ldr	r3, [pc, #12]	; (8101c04 <HAL_GetTick+0x14>)
 8101bf6:	681b      	ldr	r3, [r3, #0]
}
 8101bf8:	4618      	mov	r0, r3
 8101bfa:	46bd      	mov	sp, r7
 8101bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c00:	4770      	bx	lr
 8101c02:	bf00      	nop
 8101c04:	10000500 	.word	0x10000500

08101c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101c08:	b580      	push	{r7, lr}
 8101c0a:	b084      	sub	sp, #16
 8101c0c:	af00      	add	r7, sp, #0
 8101c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101c10:	f7ff ffee 	bl	8101bf0 <HAL_GetTick>
 8101c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101c1a:	68fb      	ldr	r3, [r7, #12]
 8101c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101c20:	d005      	beq.n	8101c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101c22:	4b0a      	ldr	r3, [pc, #40]	; (8101c4c <HAL_Delay+0x44>)
 8101c24:	781b      	ldrb	r3, [r3, #0]
 8101c26:	461a      	mov	r2, r3
 8101c28:	68fb      	ldr	r3, [r7, #12]
 8101c2a:	4413      	add	r3, r2
 8101c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101c2e:	bf00      	nop
 8101c30:	f7ff ffde 	bl	8101bf0 <HAL_GetTick>
 8101c34:	4602      	mov	r2, r0
 8101c36:	68bb      	ldr	r3, [r7, #8]
 8101c38:	1ad3      	subs	r3, r2, r3
 8101c3a:	68fa      	ldr	r2, [r7, #12]
 8101c3c:	429a      	cmp	r2, r3
 8101c3e:	d8f7      	bhi.n	8101c30 <HAL_Delay+0x28>
  {
  }
}
 8101c40:	bf00      	nop
 8101c42:	bf00      	nop
 8101c44:	3710      	adds	r7, #16
 8101c46:	46bd      	mov	sp, r7
 8101c48:	bd80      	pop	{r7, pc}
 8101c4a:	bf00      	nop
 8101c4c:	1000000c 	.word	0x1000000c

08101c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101c50:	b480      	push	{r7}
 8101c52:	b085      	sub	sp, #20
 8101c54:	af00      	add	r7, sp, #0
 8101c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	f003 0307 	and.w	r3, r3, #7
 8101c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101c60:	4b0c      	ldr	r3, [pc, #48]	; (8101c94 <__NVIC_SetPriorityGrouping+0x44>)
 8101c62:	68db      	ldr	r3, [r3, #12]
 8101c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101c66:	68ba      	ldr	r2, [r7, #8]
 8101c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101c6c:	4013      	ands	r3, r2
 8101c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101c70:	68fb      	ldr	r3, [r7, #12]
 8101c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101c74:	68bb      	ldr	r3, [r7, #8]
 8101c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101c82:	4a04      	ldr	r2, [pc, #16]	; (8101c94 <__NVIC_SetPriorityGrouping+0x44>)
 8101c84:	68bb      	ldr	r3, [r7, #8]
 8101c86:	60d3      	str	r3, [r2, #12]
}
 8101c88:	bf00      	nop
 8101c8a:	3714      	adds	r7, #20
 8101c8c:	46bd      	mov	sp, r7
 8101c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c92:	4770      	bx	lr
 8101c94:	e000ed00 	.word	0xe000ed00

08101c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101c98:	b480      	push	{r7}
 8101c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101c9c:	4b04      	ldr	r3, [pc, #16]	; (8101cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8101c9e:	68db      	ldr	r3, [r3, #12]
 8101ca0:	0a1b      	lsrs	r3, r3, #8
 8101ca2:	f003 0307 	and.w	r3, r3, #7
}
 8101ca6:	4618      	mov	r0, r3
 8101ca8:	46bd      	mov	sp, r7
 8101caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cae:	4770      	bx	lr
 8101cb0:	e000ed00 	.word	0xe000ed00

08101cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101cb4:	b480      	push	{r7}
 8101cb6:	b083      	sub	sp, #12
 8101cb8:	af00      	add	r7, sp, #0
 8101cba:	4603      	mov	r3, r0
 8101cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cc2:	2b00      	cmp	r3, #0
 8101cc4:	db0b      	blt.n	8101cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101cc6:	88fb      	ldrh	r3, [r7, #6]
 8101cc8:	f003 021f 	and.w	r2, r3, #31
 8101ccc:	4907      	ldr	r1, [pc, #28]	; (8101cec <__NVIC_EnableIRQ+0x38>)
 8101cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cd2:	095b      	lsrs	r3, r3, #5
 8101cd4:	2001      	movs	r0, #1
 8101cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8101cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101cde:	bf00      	nop
 8101ce0:	370c      	adds	r7, #12
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce8:	4770      	bx	lr
 8101cea:	bf00      	nop
 8101cec:	e000e100 	.word	0xe000e100

08101cf0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101cf0:	b480      	push	{r7}
 8101cf2:	b083      	sub	sp, #12
 8101cf4:	af00      	add	r7, sp, #0
 8101cf6:	4603      	mov	r3, r0
 8101cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cfe:	2b00      	cmp	r3, #0
 8101d00:	db0c      	blt.n	8101d1c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101d02:	88fb      	ldrh	r3, [r7, #6]
 8101d04:	f003 021f 	and.w	r2, r3, #31
 8101d08:	4907      	ldr	r1, [pc, #28]	; (8101d28 <__NVIC_ClearPendingIRQ+0x38>)
 8101d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d0e:	095b      	lsrs	r3, r3, #5
 8101d10:	2001      	movs	r0, #1
 8101d12:	fa00 f202 	lsl.w	r2, r0, r2
 8101d16:	3360      	adds	r3, #96	; 0x60
 8101d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101d1c:	bf00      	nop
 8101d1e:	370c      	adds	r7, #12
 8101d20:	46bd      	mov	sp, r7
 8101d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d26:	4770      	bx	lr
 8101d28:	e000e100 	.word	0xe000e100

08101d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101d2c:	b480      	push	{r7}
 8101d2e:	b083      	sub	sp, #12
 8101d30:	af00      	add	r7, sp, #0
 8101d32:	4603      	mov	r3, r0
 8101d34:	6039      	str	r1, [r7, #0]
 8101d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d3c:	2b00      	cmp	r3, #0
 8101d3e:	db0a      	blt.n	8101d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d40:	683b      	ldr	r3, [r7, #0]
 8101d42:	b2da      	uxtb	r2, r3
 8101d44:	490c      	ldr	r1, [pc, #48]	; (8101d78 <__NVIC_SetPriority+0x4c>)
 8101d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d4a:	0112      	lsls	r2, r2, #4
 8101d4c:	b2d2      	uxtb	r2, r2
 8101d4e:	440b      	add	r3, r1
 8101d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101d54:	e00a      	b.n	8101d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d56:	683b      	ldr	r3, [r7, #0]
 8101d58:	b2da      	uxtb	r2, r3
 8101d5a:	4908      	ldr	r1, [pc, #32]	; (8101d7c <__NVIC_SetPriority+0x50>)
 8101d5c:	88fb      	ldrh	r3, [r7, #6]
 8101d5e:	f003 030f 	and.w	r3, r3, #15
 8101d62:	3b04      	subs	r3, #4
 8101d64:	0112      	lsls	r2, r2, #4
 8101d66:	b2d2      	uxtb	r2, r2
 8101d68:	440b      	add	r3, r1
 8101d6a:	761a      	strb	r2, [r3, #24]
}
 8101d6c:	bf00      	nop
 8101d6e:	370c      	adds	r7, #12
 8101d70:	46bd      	mov	sp, r7
 8101d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d76:	4770      	bx	lr
 8101d78:	e000e100 	.word	0xe000e100
 8101d7c:	e000ed00 	.word	0xe000ed00

08101d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d80:	b480      	push	{r7}
 8101d82:	b089      	sub	sp, #36	; 0x24
 8101d84:	af00      	add	r7, sp, #0
 8101d86:	60f8      	str	r0, [r7, #12]
 8101d88:	60b9      	str	r1, [r7, #8]
 8101d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101d8c:	68fb      	ldr	r3, [r7, #12]
 8101d8e:	f003 0307 	and.w	r3, r3, #7
 8101d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d94:	69fb      	ldr	r3, [r7, #28]
 8101d96:	f1c3 0307 	rsb	r3, r3, #7
 8101d9a:	2b04      	cmp	r3, #4
 8101d9c:	bf28      	it	cs
 8101d9e:	2304      	movcs	r3, #4
 8101da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101da2:	69fb      	ldr	r3, [r7, #28]
 8101da4:	3304      	adds	r3, #4
 8101da6:	2b06      	cmp	r3, #6
 8101da8:	d902      	bls.n	8101db0 <NVIC_EncodePriority+0x30>
 8101daa:	69fb      	ldr	r3, [r7, #28]
 8101dac:	3b03      	subs	r3, #3
 8101dae:	e000      	b.n	8101db2 <NVIC_EncodePriority+0x32>
 8101db0:	2300      	movs	r3, #0
 8101db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101db4:	f04f 32ff 	mov.w	r2, #4294967295
 8101db8:	69bb      	ldr	r3, [r7, #24]
 8101dba:	fa02 f303 	lsl.w	r3, r2, r3
 8101dbe:	43da      	mvns	r2, r3
 8101dc0:	68bb      	ldr	r3, [r7, #8]
 8101dc2:	401a      	ands	r2, r3
 8101dc4:	697b      	ldr	r3, [r7, #20]
 8101dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8101dcc:	697b      	ldr	r3, [r7, #20]
 8101dce:	fa01 f303 	lsl.w	r3, r1, r3
 8101dd2:	43d9      	mvns	r1, r3
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101dd8:	4313      	orrs	r3, r2
         );
}
 8101dda:	4618      	mov	r0, r3
 8101ddc:	3724      	adds	r7, #36	; 0x24
 8101dde:	46bd      	mov	sp, r7
 8101de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de4:	4770      	bx	lr
	...

08101de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	b082      	sub	sp, #8
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	3b01      	subs	r3, #1
 8101df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101df8:	d301      	bcc.n	8101dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101dfa:	2301      	movs	r3, #1
 8101dfc:	e00f      	b.n	8101e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101dfe:	4a0a      	ldr	r2, [pc, #40]	; (8101e28 <SysTick_Config+0x40>)
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	3b01      	subs	r3, #1
 8101e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101e06:	210f      	movs	r1, #15
 8101e08:	f04f 30ff 	mov.w	r0, #4294967295
 8101e0c:	f7ff ff8e 	bl	8101d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101e10:	4b05      	ldr	r3, [pc, #20]	; (8101e28 <SysTick_Config+0x40>)
 8101e12:	2200      	movs	r2, #0
 8101e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101e16:	4b04      	ldr	r3, [pc, #16]	; (8101e28 <SysTick_Config+0x40>)
 8101e18:	2207      	movs	r2, #7
 8101e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101e1c:	2300      	movs	r3, #0
}
 8101e1e:	4618      	mov	r0, r3
 8101e20:	3708      	adds	r7, #8
 8101e22:	46bd      	mov	sp, r7
 8101e24:	bd80      	pop	{r7, pc}
 8101e26:	bf00      	nop
 8101e28:	e000e010 	.word	0xe000e010

08101e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e2c:	b580      	push	{r7, lr}
 8101e2e:	b082      	sub	sp, #8
 8101e30:	af00      	add	r7, sp, #0
 8101e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101e34:	6878      	ldr	r0, [r7, #4]
 8101e36:	f7ff ff0b 	bl	8101c50 <__NVIC_SetPriorityGrouping>
}
 8101e3a:	bf00      	nop
 8101e3c:	3708      	adds	r7, #8
 8101e3e:	46bd      	mov	sp, r7
 8101e40:	bd80      	pop	{r7, pc}

08101e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e42:	b580      	push	{r7, lr}
 8101e44:	b086      	sub	sp, #24
 8101e46:	af00      	add	r7, sp, #0
 8101e48:	4603      	mov	r3, r0
 8101e4a:	60b9      	str	r1, [r7, #8]
 8101e4c:	607a      	str	r2, [r7, #4]
 8101e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101e50:	f7ff ff22 	bl	8101c98 <__NVIC_GetPriorityGrouping>
 8101e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101e56:	687a      	ldr	r2, [r7, #4]
 8101e58:	68b9      	ldr	r1, [r7, #8]
 8101e5a:	6978      	ldr	r0, [r7, #20]
 8101e5c:	f7ff ff90 	bl	8101d80 <NVIC_EncodePriority>
 8101e60:	4602      	mov	r2, r0
 8101e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101e66:	4611      	mov	r1, r2
 8101e68:	4618      	mov	r0, r3
 8101e6a:	f7ff ff5f 	bl	8101d2c <__NVIC_SetPriority>
}
 8101e6e:	bf00      	nop
 8101e70:	3718      	adds	r7, #24
 8101e72:	46bd      	mov	sp, r7
 8101e74:	bd80      	pop	{r7, pc}

08101e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101e76:	b580      	push	{r7, lr}
 8101e78:	b082      	sub	sp, #8
 8101e7a:	af00      	add	r7, sp, #0
 8101e7c:	4603      	mov	r3, r0
 8101e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e84:	4618      	mov	r0, r3
 8101e86:	f7ff ff15 	bl	8101cb4 <__NVIC_EnableIRQ>
}
 8101e8a:	bf00      	nop
 8101e8c:	3708      	adds	r7, #8
 8101e8e:	46bd      	mov	sp, r7
 8101e90:	bd80      	pop	{r7, pc}

08101e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101e92:	b580      	push	{r7, lr}
 8101e94:	b082      	sub	sp, #8
 8101e96:	af00      	add	r7, sp, #0
 8101e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101e9a:	6878      	ldr	r0, [r7, #4]
 8101e9c:	f7ff ffa4 	bl	8101de8 <SysTick_Config>
 8101ea0:	4603      	mov	r3, r0
}
 8101ea2:	4618      	mov	r0, r3
 8101ea4:	3708      	adds	r7, #8
 8101ea6:	46bd      	mov	sp, r7
 8101ea8:	bd80      	pop	{r7, pc}

08101eaa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101eaa:	b580      	push	{r7, lr}
 8101eac:	b082      	sub	sp, #8
 8101eae:	af00      	add	r7, sp, #0
 8101eb0:	4603      	mov	r3, r0
 8101eb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8101eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101eb8:	4618      	mov	r0, r3
 8101eba:	f7ff ff19 	bl	8101cf0 <__NVIC_ClearPendingIRQ>
}
 8101ebe:	bf00      	nop
 8101ec0:	3708      	adds	r7, #8
 8101ec2:	46bd      	mov	sp, r7
 8101ec4:	bd80      	pop	{r7, pc}
	...

08101ec8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101ec8:	b480      	push	{r7}
 8101eca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101ecc:	4b07      	ldr	r3, [pc, #28]	; (8101eec <HAL_GetCurrentCPUID+0x24>)
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	091b      	lsrs	r3, r3, #4
 8101ed2:	f003 030f 	and.w	r3, r3, #15
 8101ed6:	2b07      	cmp	r3, #7
 8101ed8:	d101      	bne.n	8101ede <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101eda:	2303      	movs	r3, #3
 8101edc:	e000      	b.n	8101ee0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101ede:	2301      	movs	r3, #1
  }
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	46bd      	mov	sp, r7
 8101ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee8:	4770      	bx	lr
 8101eea:	bf00      	nop
 8101eec:	e000ed00 	.word	0xe000ed00

08101ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101ef0:	b480      	push	{r7}
 8101ef2:	b089      	sub	sp, #36	; 0x24
 8101ef4:	af00      	add	r7, sp, #0
 8101ef6:	6078      	str	r0, [r7, #4]
 8101ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101efa:	2300      	movs	r3, #0
 8101efc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101efe:	4b89      	ldr	r3, [pc, #548]	; (8102124 <HAL_GPIO_Init+0x234>)
 8101f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f02:	e194      	b.n	810222e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101f04:	683b      	ldr	r3, [r7, #0]
 8101f06:	681a      	ldr	r2, [r3, #0]
 8101f08:	2101      	movs	r1, #1
 8101f0a:	69fb      	ldr	r3, [r7, #28]
 8101f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8101f10:	4013      	ands	r3, r2
 8101f12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101f14:	693b      	ldr	r3, [r7, #16]
 8101f16:	2b00      	cmp	r3, #0
 8101f18:	f000 8186 	beq.w	8102228 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101f1c:	683b      	ldr	r3, [r7, #0]
 8101f1e:	685b      	ldr	r3, [r3, #4]
 8101f20:	2b01      	cmp	r3, #1
 8101f22:	d00b      	beq.n	8101f3c <HAL_GPIO_Init+0x4c>
 8101f24:	683b      	ldr	r3, [r7, #0]
 8101f26:	685b      	ldr	r3, [r3, #4]
 8101f28:	2b02      	cmp	r3, #2
 8101f2a:	d007      	beq.n	8101f3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101f2c:	683b      	ldr	r3, [r7, #0]
 8101f2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101f30:	2b11      	cmp	r3, #17
 8101f32:	d003      	beq.n	8101f3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101f34:	683b      	ldr	r3, [r7, #0]
 8101f36:	685b      	ldr	r3, [r3, #4]
 8101f38:	2b12      	cmp	r3, #18
 8101f3a:	d130      	bne.n	8101f9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	689b      	ldr	r3, [r3, #8]
 8101f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101f42:	69fb      	ldr	r3, [r7, #28]
 8101f44:	005b      	lsls	r3, r3, #1
 8101f46:	2203      	movs	r2, #3
 8101f48:	fa02 f303 	lsl.w	r3, r2, r3
 8101f4c:	43db      	mvns	r3, r3
 8101f4e:	69ba      	ldr	r2, [r7, #24]
 8101f50:	4013      	ands	r3, r2
 8101f52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101f54:	683b      	ldr	r3, [r7, #0]
 8101f56:	68da      	ldr	r2, [r3, #12]
 8101f58:	69fb      	ldr	r3, [r7, #28]
 8101f5a:	005b      	lsls	r3, r3, #1
 8101f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8101f60:	69ba      	ldr	r2, [r7, #24]
 8101f62:	4313      	orrs	r3, r2
 8101f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	69ba      	ldr	r2, [r7, #24]
 8101f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	685b      	ldr	r3, [r3, #4]
 8101f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101f72:	2201      	movs	r2, #1
 8101f74:	69fb      	ldr	r3, [r7, #28]
 8101f76:	fa02 f303 	lsl.w	r3, r2, r3
 8101f7a:	43db      	mvns	r3, r3
 8101f7c:	69ba      	ldr	r2, [r7, #24]
 8101f7e:	4013      	ands	r3, r2
 8101f80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101f82:	683b      	ldr	r3, [r7, #0]
 8101f84:	685b      	ldr	r3, [r3, #4]
 8101f86:	091b      	lsrs	r3, r3, #4
 8101f88:	f003 0201 	and.w	r2, r3, #1
 8101f8c:	69fb      	ldr	r3, [r7, #28]
 8101f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8101f92:	69ba      	ldr	r2, [r7, #24]
 8101f94:	4313      	orrs	r3, r2
 8101f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	69ba      	ldr	r2, [r7, #24]
 8101f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	68db      	ldr	r3, [r3, #12]
 8101fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101fa4:	69fb      	ldr	r3, [r7, #28]
 8101fa6:	005b      	lsls	r3, r3, #1
 8101fa8:	2203      	movs	r2, #3
 8101faa:	fa02 f303 	lsl.w	r3, r2, r3
 8101fae:	43db      	mvns	r3, r3
 8101fb0:	69ba      	ldr	r2, [r7, #24]
 8101fb2:	4013      	ands	r3, r2
 8101fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101fb6:	683b      	ldr	r3, [r7, #0]
 8101fb8:	689a      	ldr	r2, [r3, #8]
 8101fba:	69fb      	ldr	r3, [r7, #28]
 8101fbc:	005b      	lsls	r3, r3, #1
 8101fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8101fc2:	69ba      	ldr	r2, [r7, #24]
 8101fc4:	4313      	orrs	r3, r2
 8101fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	69ba      	ldr	r2, [r7, #24]
 8101fcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101fce:	683b      	ldr	r3, [r7, #0]
 8101fd0:	685b      	ldr	r3, [r3, #4]
 8101fd2:	2b02      	cmp	r3, #2
 8101fd4:	d003      	beq.n	8101fde <HAL_GPIO_Init+0xee>
 8101fd6:	683b      	ldr	r3, [r7, #0]
 8101fd8:	685b      	ldr	r3, [r3, #4]
 8101fda:	2b12      	cmp	r3, #18
 8101fdc:	d123      	bne.n	8102026 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101fde:	69fb      	ldr	r3, [r7, #28]
 8101fe0:	08da      	lsrs	r2, r3, #3
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	3208      	adds	r2, #8
 8101fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101fec:	69fb      	ldr	r3, [r7, #28]
 8101fee:	f003 0307 	and.w	r3, r3, #7
 8101ff2:	009b      	lsls	r3, r3, #2
 8101ff4:	220f      	movs	r2, #15
 8101ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8101ffa:	43db      	mvns	r3, r3
 8101ffc:	69ba      	ldr	r2, [r7, #24]
 8101ffe:	4013      	ands	r3, r2
 8102000:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102002:	683b      	ldr	r3, [r7, #0]
 8102004:	691a      	ldr	r2, [r3, #16]
 8102006:	69fb      	ldr	r3, [r7, #28]
 8102008:	f003 0307 	and.w	r3, r3, #7
 810200c:	009b      	lsls	r3, r3, #2
 810200e:	fa02 f303 	lsl.w	r3, r2, r3
 8102012:	69ba      	ldr	r2, [r7, #24]
 8102014:	4313      	orrs	r3, r2
 8102016:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102018:	69fb      	ldr	r3, [r7, #28]
 810201a:	08da      	lsrs	r2, r3, #3
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	3208      	adds	r2, #8
 8102020:	69b9      	ldr	r1, [r7, #24]
 8102022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810202c:	69fb      	ldr	r3, [r7, #28]
 810202e:	005b      	lsls	r3, r3, #1
 8102030:	2203      	movs	r2, #3
 8102032:	fa02 f303 	lsl.w	r3, r2, r3
 8102036:	43db      	mvns	r3, r3
 8102038:	69ba      	ldr	r2, [r7, #24]
 810203a:	4013      	ands	r3, r2
 810203c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810203e:	683b      	ldr	r3, [r7, #0]
 8102040:	685b      	ldr	r3, [r3, #4]
 8102042:	f003 0203 	and.w	r2, r3, #3
 8102046:	69fb      	ldr	r3, [r7, #28]
 8102048:	005b      	lsls	r3, r3, #1
 810204a:	fa02 f303 	lsl.w	r3, r2, r3
 810204e:	69ba      	ldr	r2, [r7, #24]
 8102050:	4313      	orrs	r3, r2
 8102052:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	69ba      	ldr	r2, [r7, #24]
 8102058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810205a:	683b      	ldr	r3, [r7, #0]
 810205c:	685b      	ldr	r3, [r3, #4]
 810205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102062:	2b00      	cmp	r3, #0
 8102064:	f000 80e0 	beq.w	8102228 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102068:	4b2f      	ldr	r3, [pc, #188]	; (8102128 <HAL_GPIO_Init+0x238>)
 810206a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810206e:	4a2e      	ldr	r2, [pc, #184]	; (8102128 <HAL_GPIO_Init+0x238>)
 8102070:	f043 0302 	orr.w	r3, r3, #2
 8102074:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102078:	4b2b      	ldr	r3, [pc, #172]	; (8102128 <HAL_GPIO_Init+0x238>)
 810207a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810207e:	f003 0302 	and.w	r3, r3, #2
 8102082:	60fb      	str	r3, [r7, #12]
 8102084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102086:	4a29      	ldr	r2, [pc, #164]	; (810212c <HAL_GPIO_Init+0x23c>)
 8102088:	69fb      	ldr	r3, [r7, #28]
 810208a:	089b      	lsrs	r3, r3, #2
 810208c:	3302      	adds	r3, #2
 810208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102094:	69fb      	ldr	r3, [r7, #28]
 8102096:	f003 0303 	and.w	r3, r3, #3
 810209a:	009b      	lsls	r3, r3, #2
 810209c:	220f      	movs	r2, #15
 810209e:	fa02 f303 	lsl.w	r3, r2, r3
 81020a2:	43db      	mvns	r3, r3
 81020a4:	69ba      	ldr	r2, [r7, #24]
 81020a6:	4013      	ands	r3, r2
 81020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	4a20      	ldr	r2, [pc, #128]	; (8102130 <HAL_GPIO_Init+0x240>)
 81020ae:	4293      	cmp	r3, r2
 81020b0:	d052      	beq.n	8102158 <HAL_GPIO_Init+0x268>
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	4a1f      	ldr	r2, [pc, #124]	; (8102134 <HAL_GPIO_Init+0x244>)
 81020b6:	4293      	cmp	r3, r2
 81020b8:	d031      	beq.n	810211e <HAL_GPIO_Init+0x22e>
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	4a1e      	ldr	r2, [pc, #120]	; (8102138 <HAL_GPIO_Init+0x248>)
 81020be:	4293      	cmp	r3, r2
 81020c0:	d02b      	beq.n	810211a <HAL_GPIO_Init+0x22a>
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	4a1d      	ldr	r2, [pc, #116]	; (810213c <HAL_GPIO_Init+0x24c>)
 81020c6:	4293      	cmp	r3, r2
 81020c8:	d025      	beq.n	8102116 <HAL_GPIO_Init+0x226>
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	4a1c      	ldr	r2, [pc, #112]	; (8102140 <HAL_GPIO_Init+0x250>)
 81020ce:	4293      	cmp	r3, r2
 81020d0:	d01f      	beq.n	8102112 <HAL_GPIO_Init+0x222>
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	4a1b      	ldr	r2, [pc, #108]	; (8102144 <HAL_GPIO_Init+0x254>)
 81020d6:	4293      	cmp	r3, r2
 81020d8:	d019      	beq.n	810210e <HAL_GPIO_Init+0x21e>
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	4a1a      	ldr	r2, [pc, #104]	; (8102148 <HAL_GPIO_Init+0x258>)
 81020de:	4293      	cmp	r3, r2
 81020e0:	d013      	beq.n	810210a <HAL_GPIO_Init+0x21a>
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	4a19      	ldr	r2, [pc, #100]	; (810214c <HAL_GPIO_Init+0x25c>)
 81020e6:	4293      	cmp	r3, r2
 81020e8:	d00d      	beq.n	8102106 <HAL_GPIO_Init+0x216>
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	4a18      	ldr	r2, [pc, #96]	; (8102150 <HAL_GPIO_Init+0x260>)
 81020ee:	4293      	cmp	r3, r2
 81020f0:	d007      	beq.n	8102102 <HAL_GPIO_Init+0x212>
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	4a17      	ldr	r2, [pc, #92]	; (8102154 <HAL_GPIO_Init+0x264>)
 81020f6:	4293      	cmp	r3, r2
 81020f8:	d101      	bne.n	81020fe <HAL_GPIO_Init+0x20e>
 81020fa:	2309      	movs	r3, #9
 81020fc:	e02d      	b.n	810215a <HAL_GPIO_Init+0x26a>
 81020fe:	230a      	movs	r3, #10
 8102100:	e02b      	b.n	810215a <HAL_GPIO_Init+0x26a>
 8102102:	2308      	movs	r3, #8
 8102104:	e029      	b.n	810215a <HAL_GPIO_Init+0x26a>
 8102106:	2307      	movs	r3, #7
 8102108:	e027      	b.n	810215a <HAL_GPIO_Init+0x26a>
 810210a:	2306      	movs	r3, #6
 810210c:	e025      	b.n	810215a <HAL_GPIO_Init+0x26a>
 810210e:	2305      	movs	r3, #5
 8102110:	e023      	b.n	810215a <HAL_GPIO_Init+0x26a>
 8102112:	2304      	movs	r3, #4
 8102114:	e021      	b.n	810215a <HAL_GPIO_Init+0x26a>
 8102116:	2303      	movs	r3, #3
 8102118:	e01f      	b.n	810215a <HAL_GPIO_Init+0x26a>
 810211a:	2302      	movs	r3, #2
 810211c:	e01d      	b.n	810215a <HAL_GPIO_Init+0x26a>
 810211e:	2301      	movs	r3, #1
 8102120:	e01b      	b.n	810215a <HAL_GPIO_Init+0x26a>
 8102122:	bf00      	nop
 8102124:	580000c0 	.word	0x580000c0
 8102128:	58024400 	.word	0x58024400
 810212c:	58000400 	.word	0x58000400
 8102130:	58020000 	.word	0x58020000
 8102134:	58020400 	.word	0x58020400
 8102138:	58020800 	.word	0x58020800
 810213c:	58020c00 	.word	0x58020c00
 8102140:	58021000 	.word	0x58021000
 8102144:	58021400 	.word	0x58021400
 8102148:	58021800 	.word	0x58021800
 810214c:	58021c00 	.word	0x58021c00
 8102150:	58022000 	.word	0x58022000
 8102154:	58022400 	.word	0x58022400
 8102158:	2300      	movs	r3, #0
 810215a:	69fa      	ldr	r2, [r7, #28]
 810215c:	f002 0203 	and.w	r2, r2, #3
 8102160:	0092      	lsls	r2, r2, #2
 8102162:	4093      	lsls	r3, r2
 8102164:	69ba      	ldr	r2, [r7, #24]
 8102166:	4313      	orrs	r3, r2
 8102168:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810216a:	4938      	ldr	r1, [pc, #224]	; (810224c <HAL_GPIO_Init+0x35c>)
 810216c:	69fb      	ldr	r3, [r7, #28]
 810216e:	089b      	lsrs	r3, r3, #2
 8102170:	3302      	adds	r3, #2
 8102172:	69ba      	ldr	r2, [r7, #24]
 8102174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102178:	697b      	ldr	r3, [r7, #20]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810217e:	693b      	ldr	r3, [r7, #16]
 8102180:	43db      	mvns	r3, r3
 8102182:	69ba      	ldr	r2, [r7, #24]
 8102184:	4013      	ands	r3, r2
 8102186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8102188:	683b      	ldr	r3, [r7, #0]
 810218a:	685b      	ldr	r3, [r3, #4]
 810218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102190:	2b00      	cmp	r3, #0
 8102192:	d003      	beq.n	810219c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8102194:	69ba      	ldr	r2, [r7, #24]
 8102196:	693b      	ldr	r3, [r7, #16]
 8102198:	4313      	orrs	r3, r2
 810219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810219c:	697b      	ldr	r3, [r7, #20]
 810219e:	69ba      	ldr	r2, [r7, #24]
 81021a0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81021a2:	697b      	ldr	r3, [r7, #20]
 81021a4:	685b      	ldr	r3, [r3, #4]
 81021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81021a8:	693b      	ldr	r3, [r7, #16]
 81021aa:	43db      	mvns	r3, r3
 81021ac:	69ba      	ldr	r2, [r7, #24]
 81021ae:	4013      	ands	r3, r2
 81021b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81021b2:	683b      	ldr	r3, [r7, #0]
 81021b4:	685b      	ldr	r3, [r3, #4]
 81021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81021ba:	2b00      	cmp	r3, #0
 81021bc:	d003      	beq.n	81021c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81021be:	69ba      	ldr	r2, [r7, #24]
 81021c0:	693b      	ldr	r3, [r7, #16]
 81021c2:	4313      	orrs	r3, r2
 81021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81021c6:	697b      	ldr	r3, [r7, #20]
 81021c8:	69ba      	ldr	r2, [r7, #24]
 81021ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81021d0:	681b      	ldr	r3, [r3, #0]
 81021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81021d4:	693b      	ldr	r3, [r7, #16]
 81021d6:	43db      	mvns	r3, r3
 81021d8:	69ba      	ldr	r2, [r7, #24]
 81021da:	4013      	ands	r3, r2
 81021dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81021de:	683b      	ldr	r3, [r7, #0]
 81021e0:	685b      	ldr	r3, [r3, #4]
 81021e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81021e6:	2b00      	cmp	r3, #0
 81021e8:	d003      	beq.n	81021f2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81021ea:	69ba      	ldr	r2, [r7, #24]
 81021ec:	693b      	ldr	r3, [r7, #16]
 81021ee:	4313      	orrs	r3, r2
 81021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81021f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81021f6:	69bb      	ldr	r3, [r7, #24]
 81021f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81021fe:	685b      	ldr	r3, [r3, #4]
 8102200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102202:	693b      	ldr	r3, [r7, #16]
 8102204:	43db      	mvns	r3, r3
 8102206:	69ba      	ldr	r2, [r7, #24]
 8102208:	4013      	ands	r3, r2
 810220a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810220c:	683b      	ldr	r3, [r7, #0]
 810220e:	685b      	ldr	r3, [r3, #4]
 8102210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102214:	2b00      	cmp	r3, #0
 8102216:	d003      	beq.n	8102220 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8102218:	69ba      	ldr	r2, [r7, #24]
 810221a:	693b      	ldr	r3, [r7, #16]
 810221c:	4313      	orrs	r3, r2
 810221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102224:	69bb      	ldr	r3, [r7, #24]
 8102226:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8102228:	69fb      	ldr	r3, [r7, #28]
 810222a:	3301      	adds	r3, #1
 810222c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810222e:	683b      	ldr	r3, [r7, #0]
 8102230:	681a      	ldr	r2, [r3, #0]
 8102232:	69fb      	ldr	r3, [r7, #28]
 8102234:	fa22 f303 	lsr.w	r3, r2, r3
 8102238:	2b00      	cmp	r3, #0
 810223a:	f47f ae63 	bne.w	8101f04 <HAL_GPIO_Init+0x14>
  }
}
 810223e:	bf00      	nop
 8102240:	bf00      	nop
 8102242:	3724      	adds	r7, #36	; 0x24
 8102244:	46bd      	mov	sp, r7
 8102246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810224a:	4770      	bx	lr
 810224c:	58000400 	.word	0x58000400

08102250 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8102250:	b480      	push	{r7}
 8102252:	b083      	sub	sp, #12
 8102254:	af00      	add	r7, sp, #0
 8102256:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8102258:	4a08      	ldr	r2, [pc, #32]	; (810227c <HAL_HSEM_FastTake+0x2c>)
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	3320      	adds	r3, #32
 810225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102262:	4a07      	ldr	r2, [pc, #28]	; (8102280 <HAL_HSEM_FastTake+0x30>)
 8102264:	4293      	cmp	r3, r2
 8102266:	d101      	bne.n	810226c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8102268:	2300      	movs	r3, #0
 810226a:	e000      	b.n	810226e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 810226c:	2301      	movs	r3, #1
}
 810226e:	4618      	mov	r0, r3
 8102270:	370c      	adds	r7, #12
 8102272:	46bd      	mov	sp, r7
 8102274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102278:	4770      	bx	lr
 810227a:	bf00      	nop
 810227c:	58026400 	.word	0x58026400
 8102280:	80000100 	.word	0x80000100

08102284 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8102284:	b480      	push	{r7}
 8102286:	b083      	sub	sp, #12
 8102288:	af00      	add	r7, sp, #0
 810228a:	6078      	str	r0, [r7, #4]
 810228c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810228e:	4906      	ldr	r1, [pc, #24]	; (81022a8 <HAL_HSEM_Release+0x24>)
 8102290:	683b      	ldr	r3, [r7, #0]
 8102292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810229c:	bf00      	nop
 810229e:	370c      	adds	r7, #12
 81022a0:	46bd      	mov	sp, r7
 81022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a6:	4770      	bx	lr
 81022a8:	58026400 	.word	0x58026400

081022ac <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81022ac:	b480      	push	{r7}
 81022ae:	b083      	sub	sp, #12
 81022b0:	af00      	add	r7, sp, #0
 81022b2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81022b4:	4b05      	ldr	r3, [pc, #20]	; (81022cc <HAL_HSEM_ActivateNotification+0x20>)
 81022b6:	681a      	ldr	r2, [r3, #0]
 81022b8:	4904      	ldr	r1, [pc, #16]	; (81022cc <HAL_HSEM_ActivateNotification+0x20>)
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	4313      	orrs	r3, r2
 81022be:	600b      	str	r3, [r1, #0]
#endif
}
 81022c0:	bf00      	nop
 81022c2:	370c      	adds	r7, #12
 81022c4:	46bd      	mov	sp, r7
 81022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ca:	4770      	bx	lr
 81022cc:	58026510 	.word	0x58026510

081022d0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81022d0:	b580      	push	{r7, lr}
 81022d2:	b082      	sub	sp, #8
 81022d4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81022d6:	4b0a      	ldr	r3, [pc, #40]	; (8102300 <HAL_HSEM_IRQHandler+0x30>)
 81022d8:	68db      	ldr	r3, [r3, #12]
 81022da:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81022dc:	4b08      	ldr	r3, [pc, #32]	; (8102300 <HAL_HSEM_IRQHandler+0x30>)
 81022de:	681a      	ldr	r2, [r3, #0]
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	43db      	mvns	r3, r3
 81022e4:	4906      	ldr	r1, [pc, #24]	; (8102300 <HAL_HSEM_IRQHandler+0x30>)
 81022e6:	4013      	ands	r3, r2
 81022e8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81022ea:	4a05      	ldr	r2, [pc, #20]	; (8102300 <HAL_HSEM_IRQHandler+0x30>)
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81022f0:	6878      	ldr	r0, [r7, #4]
 81022f2:	f005 ff1f 	bl	8108134 <HAL_HSEM_FreeCallback>
}
 81022f6:	bf00      	nop
 81022f8:	3708      	adds	r7, #8
 81022fa:	46bd      	mov	sp, r7
 81022fc:	bd80      	pop	{r7, pc}
 81022fe:	bf00      	nop
 8102300:	58026510 	.word	0x58026510

08102304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102304:	b580      	push	{r7, lr}
 8102306:	b082      	sub	sp, #8
 8102308:	af00      	add	r7, sp, #0
 810230a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	2b00      	cmp	r3, #0
 8102310:	d101      	bne.n	8102316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102312:	2301      	movs	r3, #1
 8102314:	e081      	b.n	810241a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810231c:	b2db      	uxtb	r3, r3
 810231e:	2b00      	cmp	r3, #0
 8102320:	d106      	bne.n	8102330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	2200      	movs	r2, #0
 8102326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810232a:	6878      	ldr	r0, [r7, #4]
 810232c:	f7fe fe50 	bl	8100fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	2224      	movs	r2, #36	; 0x24
 8102334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	681a      	ldr	r2, [r3, #0]
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	f022 0201 	bic.w	r2, r2, #1
 8102346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	685a      	ldr	r2, [r3, #4]
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102354:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	689a      	ldr	r2, [r3, #8]
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102364:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	68db      	ldr	r3, [r3, #12]
 810236a:	2b01      	cmp	r3, #1
 810236c:	d107      	bne.n	810237e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	689a      	ldr	r2, [r3, #8]
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810237a:	609a      	str	r2, [r3, #8]
 810237c:	e006      	b.n	810238c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	689a      	ldr	r2, [r3, #8]
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810238a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	68db      	ldr	r3, [r3, #12]
 8102390:	2b02      	cmp	r3, #2
 8102392:	d104      	bne.n	810239e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	681b      	ldr	r3, [r3, #0]
 8102398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810239c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	681b      	ldr	r3, [r3, #0]
 81023a2:	685b      	ldr	r3, [r3, #4]
 81023a4:	687a      	ldr	r2, [r7, #4]
 81023a6:	6812      	ldr	r2, [r2, #0]
 81023a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81023b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	68da      	ldr	r2, [r3, #12]
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	681b      	ldr	r3, [r3, #0]
 81023bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81023c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	691a      	ldr	r2, [r3, #16]
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	695b      	ldr	r3, [r3, #20]
 81023ca:	ea42 0103 	orr.w	r1, r2, r3
 81023ce:	687b      	ldr	r3, [r7, #4]
 81023d0:	699b      	ldr	r3, [r3, #24]
 81023d2:	021a      	lsls	r2, r3, #8
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	430a      	orrs	r2, r1
 81023da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	69d9      	ldr	r1, [r3, #28]
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	6a1a      	ldr	r2, [r3, #32]
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	430a      	orrs	r2, r1
 81023ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	681a      	ldr	r2, [r3, #0]
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	f042 0201 	orr.w	r2, r2, #1
 81023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	2200      	movs	r2, #0
 8102400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	2220      	movs	r2, #32
 8102406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	2200      	movs	r2, #0
 810240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	2200      	movs	r2, #0
 8102414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102418:	2300      	movs	r3, #0
}
 810241a:	4618      	mov	r0, r3
 810241c:	3708      	adds	r7, #8
 810241e:	46bd      	mov	sp, r7
 8102420:	bd80      	pop	{r7, pc}
	...

08102424 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102424:	b580      	push	{r7, lr}
 8102426:	b088      	sub	sp, #32
 8102428:	af02      	add	r7, sp, #8
 810242a:	60f8      	str	r0, [r7, #12]
 810242c:	4608      	mov	r0, r1
 810242e:	4611      	mov	r1, r2
 8102430:	461a      	mov	r2, r3
 8102432:	4603      	mov	r3, r0
 8102434:	817b      	strh	r3, [r7, #10]
 8102436:	460b      	mov	r3, r1
 8102438:	813b      	strh	r3, [r7, #8]
 810243a:	4613      	mov	r3, r2
 810243c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810243e:	68fb      	ldr	r3, [r7, #12]
 8102440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102444:	b2db      	uxtb	r3, r3
 8102446:	2b20      	cmp	r3, #32
 8102448:	f040 80f9 	bne.w	810263e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 810244c:	6a3b      	ldr	r3, [r7, #32]
 810244e:	2b00      	cmp	r3, #0
 8102450:	d002      	beq.n	8102458 <HAL_I2C_Mem_Write+0x34>
 8102452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102454:	2b00      	cmp	r3, #0
 8102456:	d105      	bne.n	8102464 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102458:	68fb      	ldr	r3, [r7, #12]
 810245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810245e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102460:	2301      	movs	r3, #1
 8102462:	e0ed      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102464:	68fb      	ldr	r3, [r7, #12]
 8102466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810246a:	2b01      	cmp	r3, #1
 810246c:	d101      	bne.n	8102472 <HAL_I2C_Mem_Write+0x4e>
 810246e:	2302      	movs	r3, #2
 8102470:	e0e6      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
 8102472:	68fb      	ldr	r3, [r7, #12]
 8102474:	2201      	movs	r2, #1
 8102476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810247a:	f7ff fbb9 	bl	8101bf0 <HAL_GetTick>
 810247e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102480:	697b      	ldr	r3, [r7, #20]
 8102482:	9300      	str	r3, [sp, #0]
 8102484:	2319      	movs	r3, #25
 8102486:	2201      	movs	r2, #1
 8102488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810248c:	68f8      	ldr	r0, [r7, #12]
 810248e:	f000 fadd 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 8102492:	4603      	mov	r3, r0
 8102494:	2b00      	cmp	r3, #0
 8102496:	d001      	beq.n	810249c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102498:	2301      	movs	r3, #1
 810249a:	e0d1      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810249c:	68fb      	ldr	r3, [r7, #12]
 810249e:	2221      	movs	r2, #33	; 0x21
 81024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81024a4:	68fb      	ldr	r3, [r7, #12]
 81024a6:	2240      	movs	r2, #64	; 0x40
 81024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81024ac:	68fb      	ldr	r3, [r7, #12]
 81024ae:	2200      	movs	r2, #0
 81024b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81024b2:	68fb      	ldr	r3, [r7, #12]
 81024b4:	6a3a      	ldr	r2, [r7, #32]
 81024b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81024b8:	68fb      	ldr	r3, [r7, #12]
 81024ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81024bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81024be:	68fb      	ldr	r3, [r7, #12]
 81024c0:	2200      	movs	r2, #0
 81024c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81024c4:	88f8      	ldrh	r0, [r7, #6]
 81024c6:	893a      	ldrh	r2, [r7, #8]
 81024c8:	8979      	ldrh	r1, [r7, #10]
 81024ca:	697b      	ldr	r3, [r7, #20]
 81024cc:	9301      	str	r3, [sp, #4]
 81024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024d0:	9300      	str	r3, [sp, #0]
 81024d2:	4603      	mov	r3, r0
 81024d4:	68f8      	ldr	r0, [r7, #12]
 81024d6:	f000 f9ed 	bl	81028b4 <I2C_RequestMemoryWrite>
 81024da:	4603      	mov	r3, r0
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d005      	beq.n	81024ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81024e0:	68fb      	ldr	r3, [r7, #12]
 81024e2:	2200      	movs	r2, #0
 81024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81024e8:	2301      	movs	r3, #1
 81024ea:	e0a9      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81024ec:	68fb      	ldr	r3, [r7, #12]
 81024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024f0:	b29b      	uxth	r3, r3
 81024f2:	2bff      	cmp	r3, #255	; 0xff
 81024f4:	d90e      	bls.n	8102514 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81024f6:	68fb      	ldr	r3, [r7, #12]
 81024f8:	22ff      	movs	r2, #255	; 0xff
 81024fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102500:	b2da      	uxtb	r2, r3
 8102502:	8979      	ldrh	r1, [r7, #10]
 8102504:	2300      	movs	r3, #0
 8102506:	9300      	str	r3, [sp, #0]
 8102508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810250c:	68f8      	ldr	r0, [r7, #12]
 810250e:	f000 fbbf 	bl	8102c90 <I2C_TransferConfig>
 8102512:	e00f      	b.n	8102534 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102514:	68fb      	ldr	r3, [r7, #12]
 8102516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102518:	b29a      	uxth	r2, r3
 810251a:	68fb      	ldr	r3, [r7, #12]
 810251c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810251e:	68fb      	ldr	r3, [r7, #12]
 8102520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102522:	b2da      	uxtb	r2, r3
 8102524:	8979      	ldrh	r1, [r7, #10]
 8102526:	2300      	movs	r3, #0
 8102528:	9300      	str	r3, [sp, #0]
 810252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810252e:	68f8      	ldr	r0, [r7, #12]
 8102530:	f000 fbae 	bl	8102c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102534:	697a      	ldr	r2, [r7, #20]
 8102536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102538:	68f8      	ldr	r0, [r7, #12]
 810253a:	f000 fac7 	bl	8102acc <I2C_WaitOnTXISFlagUntilTimeout>
 810253e:	4603      	mov	r3, r0
 8102540:	2b00      	cmp	r3, #0
 8102542:	d001      	beq.n	8102548 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102544:	2301      	movs	r3, #1
 8102546:	e07b      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810254c:	781a      	ldrb	r2, [r3, #0]
 810254e:	68fb      	ldr	r3, [r7, #12]
 8102550:	681b      	ldr	r3, [r3, #0]
 8102552:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102558:	1c5a      	adds	r2, r3, #1
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810255e:	68fb      	ldr	r3, [r7, #12]
 8102560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102562:	b29b      	uxth	r3, r3
 8102564:	3b01      	subs	r3, #1
 8102566:	b29a      	uxth	r2, r3
 8102568:	68fb      	ldr	r3, [r7, #12]
 810256a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810256c:	68fb      	ldr	r3, [r7, #12]
 810256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102570:	3b01      	subs	r3, #1
 8102572:	b29a      	uxth	r2, r3
 8102574:	68fb      	ldr	r3, [r7, #12]
 8102576:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102578:	68fb      	ldr	r3, [r7, #12]
 810257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810257c:	b29b      	uxth	r3, r3
 810257e:	2b00      	cmp	r3, #0
 8102580:	d034      	beq.n	81025ec <HAL_I2C_Mem_Write+0x1c8>
 8102582:	68fb      	ldr	r3, [r7, #12]
 8102584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102586:	2b00      	cmp	r3, #0
 8102588:	d130      	bne.n	81025ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810258a:	697b      	ldr	r3, [r7, #20]
 810258c:	9300      	str	r3, [sp, #0]
 810258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102590:	2200      	movs	r2, #0
 8102592:	2180      	movs	r1, #128	; 0x80
 8102594:	68f8      	ldr	r0, [r7, #12]
 8102596:	f000 fa59 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 810259a:	4603      	mov	r3, r0
 810259c:	2b00      	cmp	r3, #0
 810259e:	d001      	beq.n	81025a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81025a0:	2301      	movs	r3, #1
 81025a2:	e04d      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025a8:	b29b      	uxth	r3, r3
 81025aa:	2bff      	cmp	r3, #255	; 0xff
 81025ac:	d90e      	bls.n	81025cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81025ae:	68fb      	ldr	r3, [r7, #12]
 81025b0:	22ff      	movs	r2, #255	; 0xff
 81025b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81025b4:	68fb      	ldr	r3, [r7, #12]
 81025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025b8:	b2da      	uxtb	r2, r3
 81025ba:	8979      	ldrh	r1, [r7, #10]
 81025bc:	2300      	movs	r3, #0
 81025be:	9300      	str	r3, [sp, #0]
 81025c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81025c4:	68f8      	ldr	r0, [r7, #12]
 81025c6:	f000 fb63 	bl	8102c90 <I2C_TransferConfig>
 81025ca:	e00f      	b.n	81025ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81025cc:	68fb      	ldr	r3, [r7, #12]
 81025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025d0:	b29a      	uxth	r2, r3
 81025d2:	68fb      	ldr	r3, [r7, #12]
 81025d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81025d6:	68fb      	ldr	r3, [r7, #12]
 81025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025da:	b2da      	uxtb	r2, r3
 81025dc:	8979      	ldrh	r1, [r7, #10]
 81025de:	2300      	movs	r3, #0
 81025e0:	9300      	str	r3, [sp, #0]
 81025e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81025e6:	68f8      	ldr	r0, [r7, #12]
 81025e8:	f000 fb52 	bl	8102c90 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 81025ec:	68fb      	ldr	r3, [r7, #12]
 81025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025f0:	b29b      	uxth	r3, r3
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d19e      	bne.n	8102534 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81025f6:	697a      	ldr	r2, [r7, #20]
 81025f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81025fa:	68f8      	ldr	r0, [r7, #12]
 81025fc:	f000 faa6 	bl	8102b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102600:	4603      	mov	r3, r0
 8102602:	2b00      	cmp	r3, #0
 8102604:	d001      	beq.n	810260a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102606:	2301      	movs	r3, #1
 8102608:	e01a      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810260a:	68fb      	ldr	r3, [r7, #12]
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	2220      	movs	r2, #32
 8102610:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102612:	68fb      	ldr	r3, [r7, #12]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	6859      	ldr	r1, [r3, #4]
 8102618:	68fb      	ldr	r3, [r7, #12]
 810261a:	681a      	ldr	r2, [r3, #0]
 810261c:	4b0a      	ldr	r3, [pc, #40]	; (8102648 <HAL_I2C_Mem_Write+0x224>)
 810261e:	400b      	ands	r3, r1
 8102620:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102622:	68fb      	ldr	r3, [r7, #12]
 8102624:	2220      	movs	r2, #32
 8102626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	2200      	movs	r2, #0
 810262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102632:	68fb      	ldr	r3, [r7, #12]
 8102634:	2200      	movs	r2, #0
 8102636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810263a:	2300      	movs	r3, #0
 810263c:	e000      	b.n	8102640 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810263e:	2302      	movs	r3, #2
  }
}
 8102640:	4618      	mov	r0, r3
 8102642:	3718      	adds	r7, #24
 8102644:	46bd      	mov	sp, r7
 8102646:	bd80      	pop	{r7, pc}
 8102648:	fe00e800 	.word	0xfe00e800

0810264c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810264c:	b580      	push	{r7, lr}
 810264e:	b088      	sub	sp, #32
 8102650:	af02      	add	r7, sp, #8
 8102652:	60f8      	str	r0, [r7, #12]
 8102654:	4608      	mov	r0, r1
 8102656:	4611      	mov	r1, r2
 8102658:	461a      	mov	r2, r3
 810265a:	4603      	mov	r3, r0
 810265c:	817b      	strh	r3, [r7, #10]
 810265e:	460b      	mov	r3, r1
 8102660:	813b      	strh	r3, [r7, #8]
 8102662:	4613      	mov	r3, r2
 8102664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810266c:	b2db      	uxtb	r3, r3
 810266e:	2b20      	cmp	r3, #32
 8102670:	f040 80fd 	bne.w	810286e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102674:	6a3b      	ldr	r3, [r7, #32]
 8102676:	2b00      	cmp	r3, #0
 8102678:	d002      	beq.n	8102680 <HAL_I2C_Mem_Read+0x34>
 810267a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810267c:	2b00      	cmp	r3, #0
 810267e:	d105      	bne.n	810268c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102680:	68fb      	ldr	r3, [r7, #12]
 8102682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102686:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102688:	2301      	movs	r3, #1
 810268a:	e0f1      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810268c:	68fb      	ldr	r3, [r7, #12]
 810268e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102692:	2b01      	cmp	r3, #1
 8102694:	d101      	bne.n	810269a <HAL_I2C_Mem_Read+0x4e>
 8102696:	2302      	movs	r3, #2
 8102698:	e0ea      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
 810269a:	68fb      	ldr	r3, [r7, #12]
 810269c:	2201      	movs	r2, #1
 810269e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81026a2:	f7ff faa5 	bl	8101bf0 <HAL_GetTick>
 81026a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81026a8:	697b      	ldr	r3, [r7, #20]
 81026aa:	9300      	str	r3, [sp, #0]
 81026ac:	2319      	movs	r3, #25
 81026ae:	2201      	movs	r2, #1
 81026b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81026b4:	68f8      	ldr	r0, [r7, #12]
 81026b6:	f000 f9c9 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 81026ba:	4603      	mov	r3, r0
 81026bc:	2b00      	cmp	r3, #0
 81026be:	d001      	beq.n	81026c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81026c0:	2301      	movs	r3, #1
 81026c2:	e0d5      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81026c4:	68fb      	ldr	r3, [r7, #12]
 81026c6:	2222      	movs	r2, #34	; 0x22
 81026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81026cc:	68fb      	ldr	r3, [r7, #12]
 81026ce:	2240      	movs	r2, #64	; 0x40
 81026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	2200      	movs	r2, #0
 81026d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81026da:	68fb      	ldr	r3, [r7, #12]
 81026dc:	6a3a      	ldr	r2, [r7, #32]
 81026de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81026e0:	68fb      	ldr	r3, [r7, #12]
 81026e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81026e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81026e6:	68fb      	ldr	r3, [r7, #12]
 81026e8:	2200      	movs	r2, #0
 81026ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81026ec:	88f8      	ldrh	r0, [r7, #6]
 81026ee:	893a      	ldrh	r2, [r7, #8]
 81026f0:	8979      	ldrh	r1, [r7, #10]
 81026f2:	697b      	ldr	r3, [r7, #20]
 81026f4:	9301      	str	r3, [sp, #4]
 81026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026f8:	9300      	str	r3, [sp, #0]
 81026fa:	4603      	mov	r3, r0
 81026fc:	68f8      	ldr	r0, [r7, #12]
 81026fe:	f000 f92d 	bl	810295c <I2C_RequestMemoryRead>
 8102702:	4603      	mov	r3, r0
 8102704:	2b00      	cmp	r3, #0
 8102706:	d005      	beq.n	8102714 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	2200      	movs	r2, #0
 810270c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102710:	2301      	movs	r3, #1
 8102712:	e0ad      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102714:	68fb      	ldr	r3, [r7, #12]
 8102716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102718:	b29b      	uxth	r3, r3
 810271a:	2bff      	cmp	r3, #255	; 0xff
 810271c:	d90e      	bls.n	810273c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810271e:	68fb      	ldr	r3, [r7, #12]
 8102720:	22ff      	movs	r2, #255	; 0xff
 8102722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102728:	b2da      	uxtb	r2, r3
 810272a:	8979      	ldrh	r1, [r7, #10]
 810272c:	4b52      	ldr	r3, [pc, #328]	; (8102878 <HAL_I2C_Mem_Read+0x22c>)
 810272e:	9300      	str	r3, [sp, #0]
 8102730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102734:	68f8      	ldr	r0, [r7, #12]
 8102736:	f000 faab 	bl	8102c90 <I2C_TransferConfig>
 810273a:	e00f      	b.n	810275c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810273c:	68fb      	ldr	r3, [r7, #12]
 810273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102740:	b29a      	uxth	r2, r3
 8102742:	68fb      	ldr	r3, [r7, #12]
 8102744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8102746:	68fb      	ldr	r3, [r7, #12]
 8102748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810274a:	b2da      	uxtb	r2, r3
 810274c:	8979      	ldrh	r1, [r7, #10]
 810274e:	4b4a      	ldr	r3, [pc, #296]	; (8102878 <HAL_I2C_Mem_Read+0x22c>)
 8102750:	9300      	str	r3, [sp, #0]
 8102752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102756:	68f8      	ldr	r0, [r7, #12]
 8102758:	f000 fa9a 	bl	8102c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810275c:	697b      	ldr	r3, [r7, #20]
 810275e:	9300      	str	r3, [sp, #0]
 8102760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102762:	2200      	movs	r2, #0
 8102764:	2104      	movs	r1, #4
 8102766:	68f8      	ldr	r0, [r7, #12]
 8102768:	f000 f970 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 810276c:	4603      	mov	r3, r0
 810276e:	2b00      	cmp	r3, #0
 8102770:	d001      	beq.n	8102776 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102772:	2301      	movs	r3, #1
 8102774:	e07c      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102780:	b2d2      	uxtb	r2, r2
 8102782:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102784:	68fb      	ldr	r3, [r7, #12]
 8102786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102788:	1c5a      	adds	r2, r3, #1
 810278a:	68fb      	ldr	r3, [r7, #12]
 810278c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810278e:	68fb      	ldr	r3, [r7, #12]
 8102790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102792:	3b01      	subs	r3, #1
 8102794:	b29a      	uxth	r2, r3
 8102796:	68fb      	ldr	r3, [r7, #12]
 8102798:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810279a:	68fb      	ldr	r3, [r7, #12]
 810279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810279e:	b29b      	uxth	r3, r3
 81027a0:	3b01      	subs	r3, #1
 81027a2:	b29a      	uxth	r2, r3
 81027a4:	68fb      	ldr	r3, [r7, #12]
 81027a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027ac:	b29b      	uxth	r3, r3
 81027ae:	2b00      	cmp	r3, #0
 81027b0:	d034      	beq.n	810281c <HAL_I2C_Mem_Read+0x1d0>
 81027b2:	68fb      	ldr	r3, [r7, #12]
 81027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d130      	bne.n	810281c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81027ba:	697b      	ldr	r3, [r7, #20]
 81027bc:	9300      	str	r3, [sp, #0]
 81027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027c0:	2200      	movs	r2, #0
 81027c2:	2180      	movs	r1, #128	; 0x80
 81027c4:	68f8      	ldr	r0, [r7, #12]
 81027c6:	f000 f941 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 81027ca:	4603      	mov	r3, r0
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d001      	beq.n	81027d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81027d0:	2301      	movs	r3, #1
 81027d2:	e04d      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81027d4:	68fb      	ldr	r3, [r7, #12]
 81027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027d8:	b29b      	uxth	r3, r3
 81027da:	2bff      	cmp	r3, #255	; 0xff
 81027dc:	d90e      	bls.n	81027fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81027de:	68fb      	ldr	r3, [r7, #12]
 81027e0:	22ff      	movs	r2, #255	; 0xff
 81027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81027e4:	68fb      	ldr	r3, [r7, #12]
 81027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027e8:	b2da      	uxtb	r2, r3
 81027ea:	8979      	ldrh	r1, [r7, #10]
 81027ec:	2300      	movs	r3, #0
 81027ee:	9300      	str	r3, [sp, #0]
 81027f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81027f4:	68f8      	ldr	r0, [r7, #12]
 81027f6:	f000 fa4b 	bl	8102c90 <I2C_TransferConfig>
 81027fa:	e00f      	b.n	810281c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81027fc:	68fb      	ldr	r3, [r7, #12]
 81027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102800:	b29a      	uxth	r2, r3
 8102802:	68fb      	ldr	r3, [r7, #12]
 8102804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102806:	68fb      	ldr	r3, [r7, #12]
 8102808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810280a:	b2da      	uxtb	r2, r3
 810280c:	8979      	ldrh	r1, [r7, #10]
 810280e:	2300      	movs	r3, #0
 8102810:	9300      	str	r3, [sp, #0]
 8102812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102816:	68f8      	ldr	r0, [r7, #12]
 8102818:	f000 fa3a 	bl	8102c90 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 810281c:	68fb      	ldr	r3, [r7, #12]
 810281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102820:	b29b      	uxth	r3, r3
 8102822:	2b00      	cmp	r3, #0
 8102824:	d19a      	bne.n	810275c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102826:	697a      	ldr	r2, [r7, #20]
 8102828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810282a:	68f8      	ldr	r0, [r7, #12]
 810282c:	f000 f98e 	bl	8102b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102830:	4603      	mov	r3, r0
 8102832:	2b00      	cmp	r3, #0
 8102834:	d001      	beq.n	810283a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102836:	2301      	movs	r3, #1
 8102838:	e01a      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810283a:	68fb      	ldr	r3, [r7, #12]
 810283c:	681b      	ldr	r3, [r3, #0]
 810283e:	2220      	movs	r2, #32
 8102840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102842:	68fb      	ldr	r3, [r7, #12]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	6859      	ldr	r1, [r3, #4]
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	681a      	ldr	r2, [r3, #0]
 810284c:	4b0b      	ldr	r3, [pc, #44]	; (810287c <HAL_I2C_Mem_Read+0x230>)
 810284e:	400b      	ands	r3, r1
 8102850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	2220      	movs	r2, #32
 8102856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810285a:	68fb      	ldr	r3, [r7, #12]
 810285c:	2200      	movs	r2, #0
 810285e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102862:	68fb      	ldr	r3, [r7, #12]
 8102864:	2200      	movs	r2, #0
 8102866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810286a:	2300      	movs	r3, #0
 810286c:	e000      	b.n	8102870 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810286e:	2302      	movs	r3, #2
  }
}
 8102870:	4618      	mov	r0, r3
 8102872:	3718      	adds	r7, #24
 8102874:	46bd      	mov	sp, r7
 8102876:	bd80      	pop	{r7, pc}
 8102878:	80002400 	.word	0x80002400
 810287c:	fe00e800 	.word	0xfe00e800

08102880 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8102880:	b580      	push	{r7, lr}
 8102882:	b084      	sub	sp, #16
 8102884:	af00      	add	r7, sp, #0
 8102886:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	699b      	ldr	r3, [r3, #24]
 810288e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810289c:	2b00      	cmp	r3, #0
 810289e:	d005      	beq.n	81028ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81028a4:	68ba      	ldr	r2, [r7, #8]
 81028a6:	68f9      	ldr	r1, [r7, #12]
 81028a8:	6878      	ldr	r0, [r7, #4]
 81028aa:	4798      	blx	r3
  }
}
 81028ac:	bf00      	nop
 81028ae:	3710      	adds	r7, #16
 81028b0:	46bd      	mov	sp, r7
 81028b2:	bd80      	pop	{r7, pc}

081028b4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81028b4:	b580      	push	{r7, lr}
 81028b6:	b086      	sub	sp, #24
 81028b8:	af02      	add	r7, sp, #8
 81028ba:	60f8      	str	r0, [r7, #12]
 81028bc:	4608      	mov	r0, r1
 81028be:	4611      	mov	r1, r2
 81028c0:	461a      	mov	r2, r3
 81028c2:	4603      	mov	r3, r0
 81028c4:	817b      	strh	r3, [r7, #10]
 81028c6:	460b      	mov	r3, r1
 81028c8:	813b      	strh	r3, [r7, #8]
 81028ca:	4613      	mov	r3, r2
 81028cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81028ce:	88fb      	ldrh	r3, [r7, #6]
 81028d0:	b2da      	uxtb	r2, r3
 81028d2:	8979      	ldrh	r1, [r7, #10]
 81028d4:	4b20      	ldr	r3, [pc, #128]	; (8102958 <I2C_RequestMemoryWrite+0xa4>)
 81028d6:	9300      	str	r3, [sp, #0]
 81028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81028dc:	68f8      	ldr	r0, [r7, #12]
 81028de:	f000 f9d7 	bl	8102c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81028e2:	69fa      	ldr	r2, [r7, #28]
 81028e4:	69b9      	ldr	r1, [r7, #24]
 81028e6:	68f8      	ldr	r0, [r7, #12]
 81028e8:	f000 f8f0 	bl	8102acc <I2C_WaitOnTXISFlagUntilTimeout>
 81028ec:	4603      	mov	r3, r0
 81028ee:	2b00      	cmp	r3, #0
 81028f0:	d001      	beq.n	81028f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81028f2:	2301      	movs	r3, #1
 81028f4:	e02c      	b.n	8102950 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81028f6:	88fb      	ldrh	r3, [r7, #6]
 81028f8:	2b01      	cmp	r3, #1
 81028fa:	d105      	bne.n	8102908 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81028fc:	893b      	ldrh	r3, [r7, #8]
 81028fe:	b2da      	uxtb	r2, r3
 8102900:	68fb      	ldr	r3, [r7, #12]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	629a      	str	r2, [r3, #40]	; 0x28
 8102906:	e015      	b.n	8102934 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102908:	893b      	ldrh	r3, [r7, #8]
 810290a:	0a1b      	lsrs	r3, r3, #8
 810290c:	b29b      	uxth	r3, r3
 810290e:	b2da      	uxtb	r2, r3
 8102910:	68fb      	ldr	r3, [r7, #12]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102916:	69fa      	ldr	r2, [r7, #28]
 8102918:	69b9      	ldr	r1, [r7, #24]
 810291a:	68f8      	ldr	r0, [r7, #12]
 810291c:	f000 f8d6 	bl	8102acc <I2C_WaitOnTXISFlagUntilTimeout>
 8102920:	4603      	mov	r3, r0
 8102922:	2b00      	cmp	r3, #0
 8102924:	d001      	beq.n	810292a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102926:	2301      	movs	r3, #1
 8102928:	e012      	b.n	8102950 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810292a:	893b      	ldrh	r3, [r7, #8]
 810292c:	b2da      	uxtb	r2, r3
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102934:	69fb      	ldr	r3, [r7, #28]
 8102936:	9300      	str	r3, [sp, #0]
 8102938:	69bb      	ldr	r3, [r7, #24]
 810293a:	2200      	movs	r2, #0
 810293c:	2180      	movs	r1, #128	; 0x80
 810293e:	68f8      	ldr	r0, [r7, #12]
 8102940:	f000 f884 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 8102944:	4603      	mov	r3, r0
 8102946:	2b00      	cmp	r3, #0
 8102948:	d001      	beq.n	810294e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810294a:	2301      	movs	r3, #1
 810294c:	e000      	b.n	8102950 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810294e:	2300      	movs	r3, #0
}
 8102950:	4618      	mov	r0, r3
 8102952:	3710      	adds	r7, #16
 8102954:	46bd      	mov	sp, r7
 8102956:	bd80      	pop	{r7, pc}
 8102958:	80002000 	.word	0x80002000

0810295c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 810295c:	b580      	push	{r7, lr}
 810295e:	b086      	sub	sp, #24
 8102960:	af02      	add	r7, sp, #8
 8102962:	60f8      	str	r0, [r7, #12]
 8102964:	4608      	mov	r0, r1
 8102966:	4611      	mov	r1, r2
 8102968:	461a      	mov	r2, r3
 810296a:	4603      	mov	r3, r0
 810296c:	817b      	strh	r3, [r7, #10]
 810296e:	460b      	mov	r3, r1
 8102970:	813b      	strh	r3, [r7, #8]
 8102972:	4613      	mov	r3, r2
 8102974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102976:	88fb      	ldrh	r3, [r7, #6]
 8102978:	b2da      	uxtb	r2, r3
 810297a:	8979      	ldrh	r1, [r7, #10]
 810297c:	4b20      	ldr	r3, [pc, #128]	; (8102a00 <I2C_RequestMemoryRead+0xa4>)
 810297e:	9300      	str	r3, [sp, #0]
 8102980:	2300      	movs	r3, #0
 8102982:	68f8      	ldr	r0, [r7, #12]
 8102984:	f000 f984 	bl	8102c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102988:	69fa      	ldr	r2, [r7, #28]
 810298a:	69b9      	ldr	r1, [r7, #24]
 810298c:	68f8      	ldr	r0, [r7, #12]
 810298e:	f000 f89d 	bl	8102acc <I2C_WaitOnTXISFlagUntilTimeout>
 8102992:	4603      	mov	r3, r0
 8102994:	2b00      	cmp	r3, #0
 8102996:	d001      	beq.n	810299c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102998:	2301      	movs	r3, #1
 810299a:	e02c      	b.n	81029f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810299c:	88fb      	ldrh	r3, [r7, #6]
 810299e:	2b01      	cmp	r3, #1
 81029a0:	d105      	bne.n	81029ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029a2:	893b      	ldrh	r3, [r7, #8]
 81029a4:	b2da      	uxtb	r2, r3
 81029a6:	68fb      	ldr	r3, [r7, #12]
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	629a      	str	r2, [r3, #40]	; 0x28
 81029ac:	e015      	b.n	81029da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81029ae:	893b      	ldrh	r3, [r7, #8]
 81029b0:	0a1b      	lsrs	r3, r3, #8
 81029b2:	b29b      	uxth	r3, r3
 81029b4:	b2da      	uxtb	r2, r3
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81029bc:	69fa      	ldr	r2, [r7, #28]
 81029be:	69b9      	ldr	r1, [r7, #24]
 81029c0:	68f8      	ldr	r0, [r7, #12]
 81029c2:	f000 f883 	bl	8102acc <I2C_WaitOnTXISFlagUntilTimeout>
 81029c6:	4603      	mov	r3, r0
 81029c8:	2b00      	cmp	r3, #0
 81029ca:	d001      	beq.n	81029d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81029cc:	2301      	movs	r3, #1
 81029ce:	e012      	b.n	81029f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029d0:	893b      	ldrh	r3, [r7, #8]
 81029d2:	b2da      	uxtb	r2, r3
 81029d4:	68fb      	ldr	r3, [r7, #12]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81029da:	69fb      	ldr	r3, [r7, #28]
 81029dc:	9300      	str	r3, [sp, #0]
 81029de:	69bb      	ldr	r3, [r7, #24]
 81029e0:	2200      	movs	r2, #0
 81029e2:	2140      	movs	r1, #64	; 0x40
 81029e4:	68f8      	ldr	r0, [r7, #12]
 81029e6:	f000 f831 	bl	8102a4c <I2C_WaitOnFlagUntilTimeout>
 81029ea:	4603      	mov	r3, r0
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d001      	beq.n	81029f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81029f0:	2301      	movs	r3, #1
 81029f2:	e000      	b.n	81029f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81029f4:	2300      	movs	r3, #0
}
 81029f6:	4618      	mov	r0, r3
 81029f8:	3710      	adds	r7, #16
 81029fa:	46bd      	mov	sp, r7
 81029fc:	bd80      	pop	{r7, pc}
 81029fe:	bf00      	nop
 8102a00:	80002000 	.word	0x80002000

08102a04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102a04:	b480      	push	{r7}
 8102a06:	b083      	sub	sp, #12
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	699b      	ldr	r3, [r3, #24]
 8102a12:	f003 0302 	and.w	r3, r3, #2
 8102a16:	2b02      	cmp	r3, #2
 8102a18:	d103      	bne.n	8102a22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	2200      	movs	r2, #0
 8102a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	699b      	ldr	r3, [r3, #24]
 8102a28:	f003 0301 	and.w	r3, r3, #1
 8102a2c:	2b01      	cmp	r3, #1
 8102a2e:	d007      	beq.n	8102a40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	699a      	ldr	r2, [r3, #24]
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	f042 0201 	orr.w	r2, r2, #1
 8102a3e:	619a      	str	r2, [r3, #24]
  }
}
 8102a40:	bf00      	nop
 8102a42:	370c      	adds	r7, #12
 8102a44:	46bd      	mov	sp, r7
 8102a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a4a:	4770      	bx	lr

08102a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102a4c:	b580      	push	{r7, lr}
 8102a4e:	b084      	sub	sp, #16
 8102a50:	af00      	add	r7, sp, #0
 8102a52:	60f8      	str	r0, [r7, #12]
 8102a54:	60b9      	str	r1, [r7, #8]
 8102a56:	603b      	str	r3, [r7, #0]
 8102a58:	4613      	mov	r3, r2
 8102a5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102a5c:	e022      	b.n	8102aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102a5e:	683b      	ldr	r3, [r7, #0]
 8102a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a64:	d01e      	beq.n	8102aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102a66:	f7ff f8c3 	bl	8101bf0 <HAL_GetTick>
 8102a6a:	4602      	mov	r2, r0
 8102a6c:	69bb      	ldr	r3, [r7, #24]
 8102a6e:	1ad3      	subs	r3, r2, r3
 8102a70:	683a      	ldr	r2, [r7, #0]
 8102a72:	429a      	cmp	r2, r3
 8102a74:	d302      	bcc.n	8102a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8102a76:	683b      	ldr	r3, [r7, #0]
 8102a78:	2b00      	cmp	r3, #0
 8102a7a:	d113      	bne.n	8102aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102a7c:	68fb      	ldr	r3, [r7, #12]
 8102a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102a80:	f043 0220 	orr.w	r2, r3, #32
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102a88:	68fb      	ldr	r3, [r7, #12]
 8102a8a:	2220      	movs	r2, #32
 8102a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102a90:	68fb      	ldr	r3, [r7, #12]
 8102a92:	2200      	movs	r2, #0
 8102a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102a98:	68fb      	ldr	r3, [r7, #12]
 8102a9a:	2200      	movs	r2, #0
 8102a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102aa0:	2301      	movs	r3, #1
 8102aa2:	e00f      	b.n	8102ac4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102aa4:	68fb      	ldr	r3, [r7, #12]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	699a      	ldr	r2, [r3, #24]
 8102aaa:	68bb      	ldr	r3, [r7, #8]
 8102aac:	4013      	ands	r3, r2
 8102aae:	68ba      	ldr	r2, [r7, #8]
 8102ab0:	429a      	cmp	r2, r3
 8102ab2:	bf0c      	ite	eq
 8102ab4:	2301      	moveq	r3, #1
 8102ab6:	2300      	movne	r3, #0
 8102ab8:	b2db      	uxtb	r3, r3
 8102aba:	461a      	mov	r2, r3
 8102abc:	79fb      	ldrb	r3, [r7, #7]
 8102abe:	429a      	cmp	r2, r3
 8102ac0:	d0cd      	beq.n	8102a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102ac2:	2300      	movs	r3, #0
}
 8102ac4:	4618      	mov	r0, r3
 8102ac6:	3710      	adds	r7, #16
 8102ac8:	46bd      	mov	sp, r7
 8102aca:	bd80      	pop	{r7, pc}

08102acc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102acc:	b580      	push	{r7, lr}
 8102ace:	b084      	sub	sp, #16
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	60f8      	str	r0, [r7, #12]
 8102ad4:	60b9      	str	r1, [r7, #8]
 8102ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102ad8:	e02c      	b.n	8102b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102ada:	687a      	ldr	r2, [r7, #4]
 8102adc:	68b9      	ldr	r1, [r7, #8]
 8102ade:	68f8      	ldr	r0, [r7, #12]
 8102ae0:	f000 f870 	bl	8102bc4 <I2C_IsAcknowledgeFailed>
 8102ae4:	4603      	mov	r3, r0
 8102ae6:	2b00      	cmp	r3, #0
 8102ae8:	d001      	beq.n	8102aee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102aea:	2301      	movs	r3, #1
 8102aec:	e02a      	b.n	8102b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102aee:	68bb      	ldr	r3, [r7, #8]
 8102af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102af4:	d01e      	beq.n	8102b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102af6:	f7ff f87b 	bl	8101bf0 <HAL_GetTick>
 8102afa:	4602      	mov	r2, r0
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	1ad3      	subs	r3, r2, r3
 8102b00:	68ba      	ldr	r2, [r7, #8]
 8102b02:	429a      	cmp	r2, r3
 8102b04:	d302      	bcc.n	8102b0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102b06:	68bb      	ldr	r3, [r7, #8]
 8102b08:	2b00      	cmp	r3, #0
 8102b0a:	d113      	bne.n	8102b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b0c:	68fb      	ldr	r3, [r7, #12]
 8102b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b10:	f043 0220 	orr.w	r2, r3, #32
 8102b14:	68fb      	ldr	r3, [r7, #12]
 8102b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102b18:	68fb      	ldr	r3, [r7, #12]
 8102b1a:	2220      	movs	r2, #32
 8102b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	2200      	movs	r2, #0
 8102b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b28:	68fb      	ldr	r3, [r7, #12]
 8102b2a:	2200      	movs	r2, #0
 8102b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102b30:	2301      	movs	r3, #1
 8102b32:	e007      	b.n	8102b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102b34:	68fb      	ldr	r3, [r7, #12]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	699b      	ldr	r3, [r3, #24]
 8102b3a:	f003 0302 	and.w	r3, r3, #2
 8102b3e:	2b02      	cmp	r3, #2
 8102b40:	d1cb      	bne.n	8102ada <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102b42:	2300      	movs	r3, #0
}
 8102b44:	4618      	mov	r0, r3
 8102b46:	3710      	adds	r7, #16
 8102b48:	46bd      	mov	sp, r7
 8102b4a:	bd80      	pop	{r7, pc}

08102b4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102b4c:	b580      	push	{r7, lr}
 8102b4e:	b084      	sub	sp, #16
 8102b50:	af00      	add	r7, sp, #0
 8102b52:	60f8      	str	r0, [r7, #12]
 8102b54:	60b9      	str	r1, [r7, #8]
 8102b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102b58:	e028      	b.n	8102bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b5a:	687a      	ldr	r2, [r7, #4]
 8102b5c:	68b9      	ldr	r1, [r7, #8]
 8102b5e:	68f8      	ldr	r0, [r7, #12]
 8102b60:	f000 f830 	bl	8102bc4 <I2C_IsAcknowledgeFailed>
 8102b64:	4603      	mov	r3, r0
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d001      	beq.n	8102b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102b6a:	2301      	movs	r3, #1
 8102b6c:	e026      	b.n	8102bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b6e:	f7ff f83f 	bl	8101bf0 <HAL_GetTick>
 8102b72:	4602      	mov	r2, r0
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	1ad3      	subs	r3, r2, r3
 8102b78:	68ba      	ldr	r2, [r7, #8]
 8102b7a:	429a      	cmp	r2, r3
 8102b7c:	d302      	bcc.n	8102b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102b7e:	68bb      	ldr	r3, [r7, #8]
 8102b80:	2b00      	cmp	r3, #0
 8102b82:	d113      	bne.n	8102bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b84:	68fb      	ldr	r3, [r7, #12]
 8102b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b88:	f043 0220 	orr.w	r2, r3, #32
 8102b8c:	68fb      	ldr	r3, [r7, #12]
 8102b8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102b90:	68fb      	ldr	r3, [r7, #12]
 8102b92:	2220      	movs	r2, #32
 8102b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b98:	68fb      	ldr	r3, [r7, #12]
 8102b9a:	2200      	movs	r2, #0
 8102b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102ba0:	68fb      	ldr	r3, [r7, #12]
 8102ba2:	2200      	movs	r2, #0
 8102ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102ba8:	2301      	movs	r3, #1
 8102baa:	e007      	b.n	8102bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102bac:	68fb      	ldr	r3, [r7, #12]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	699b      	ldr	r3, [r3, #24]
 8102bb2:	f003 0320 	and.w	r3, r3, #32
 8102bb6:	2b20      	cmp	r3, #32
 8102bb8:	d1cf      	bne.n	8102b5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102bba:	2300      	movs	r3, #0
}
 8102bbc:	4618      	mov	r0, r3
 8102bbe:	3710      	adds	r7, #16
 8102bc0:	46bd      	mov	sp, r7
 8102bc2:	bd80      	pop	{r7, pc}

08102bc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102bc4:	b580      	push	{r7, lr}
 8102bc6:	b084      	sub	sp, #16
 8102bc8:	af00      	add	r7, sp, #0
 8102bca:	60f8      	str	r0, [r7, #12]
 8102bcc:	60b9      	str	r1, [r7, #8]
 8102bce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102bd0:	68fb      	ldr	r3, [r7, #12]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	699b      	ldr	r3, [r3, #24]
 8102bd6:	f003 0310 	and.w	r3, r3, #16
 8102bda:	2b10      	cmp	r3, #16
 8102bdc:	d151      	bne.n	8102c82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102bde:	e022      	b.n	8102c26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102be0:	68bb      	ldr	r3, [r7, #8]
 8102be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102be6:	d01e      	beq.n	8102c26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102be8:	f7ff f802 	bl	8101bf0 <HAL_GetTick>
 8102bec:	4602      	mov	r2, r0
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	1ad3      	subs	r3, r2, r3
 8102bf2:	68ba      	ldr	r2, [r7, #8]
 8102bf4:	429a      	cmp	r2, r3
 8102bf6:	d302      	bcc.n	8102bfe <I2C_IsAcknowledgeFailed+0x3a>
 8102bf8:	68bb      	ldr	r3, [r7, #8]
 8102bfa:	2b00      	cmp	r3, #0
 8102bfc:	d113      	bne.n	8102c26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102bfe:	68fb      	ldr	r3, [r7, #12]
 8102c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c02:	f043 0220 	orr.w	r2, r3, #32
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102c0a:	68fb      	ldr	r3, [r7, #12]
 8102c0c:	2220      	movs	r2, #32
 8102c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c12:	68fb      	ldr	r3, [r7, #12]
 8102c14:	2200      	movs	r2, #0
 8102c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	2200      	movs	r2, #0
 8102c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102c22:	2301      	movs	r3, #1
 8102c24:	e02e      	b.n	8102c84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c26:	68fb      	ldr	r3, [r7, #12]
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	699b      	ldr	r3, [r3, #24]
 8102c2c:	f003 0320 	and.w	r3, r3, #32
 8102c30:	2b20      	cmp	r3, #32
 8102c32:	d1d5      	bne.n	8102be0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	2210      	movs	r2, #16
 8102c3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	2220      	movs	r2, #32
 8102c42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102c44:	68f8      	ldr	r0, [r7, #12]
 8102c46:	f7ff fedd 	bl	8102a04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102c4a:	68fb      	ldr	r3, [r7, #12]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	6859      	ldr	r1, [r3, #4]
 8102c50:	68fb      	ldr	r3, [r7, #12]
 8102c52:	681a      	ldr	r2, [r3, #0]
 8102c54:	4b0d      	ldr	r3, [pc, #52]	; (8102c8c <I2C_IsAcknowledgeFailed+0xc8>)
 8102c56:	400b      	ands	r3, r1
 8102c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102c5a:	68fb      	ldr	r3, [r7, #12]
 8102c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c5e:	f043 0204 	orr.w	r2, r3, #4
 8102c62:	68fb      	ldr	r3, [r7, #12]
 8102c64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102c66:	68fb      	ldr	r3, [r7, #12]
 8102c68:	2220      	movs	r2, #32
 8102c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c6e:	68fb      	ldr	r3, [r7, #12]
 8102c70:	2200      	movs	r2, #0
 8102c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	2200      	movs	r2, #0
 8102c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102c7e:	2301      	movs	r3, #1
 8102c80:	e000      	b.n	8102c84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102c82:	2300      	movs	r3, #0
}
 8102c84:	4618      	mov	r0, r3
 8102c86:	3710      	adds	r7, #16
 8102c88:	46bd      	mov	sp, r7
 8102c8a:	bd80      	pop	{r7, pc}
 8102c8c:	fe00e800 	.word	0xfe00e800

08102c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102c90:	b480      	push	{r7}
 8102c92:	b085      	sub	sp, #20
 8102c94:	af00      	add	r7, sp, #0
 8102c96:	60f8      	str	r0, [r7, #12]
 8102c98:	607b      	str	r3, [r7, #4]
 8102c9a:	460b      	mov	r3, r1
 8102c9c:	817b      	strh	r3, [r7, #10]
 8102c9e:	4613      	mov	r3, r2
 8102ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8102ca2:	68fb      	ldr	r3, [r7, #12]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	685a      	ldr	r2, [r3, #4]
 8102ca8:	69bb      	ldr	r3, [r7, #24]
 8102caa:	0d5b      	lsrs	r3, r3, #21
 8102cac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102cb0:	4b0d      	ldr	r3, [pc, #52]	; (8102ce8 <I2C_TransferConfig+0x58>)
 8102cb2:	430b      	orrs	r3, r1
 8102cb4:	43db      	mvns	r3, r3
 8102cb6:	ea02 0103 	and.w	r1, r2, r3
 8102cba:	897b      	ldrh	r3, [r7, #10]
 8102cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8102cc0:	7a7b      	ldrb	r3, [r7, #9]
 8102cc2:	041b      	lsls	r3, r3, #16
 8102cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8102cc8:	431a      	orrs	r2, r3
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	431a      	orrs	r2, r3
 8102cce:	69bb      	ldr	r3, [r7, #24]
 8102cd0:	431a      	orrs	r2, r3
 8102cd2:	68fb      	ldr	r3, [r7, #12]
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	430a      	orrs	r2, r1
 8102cd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102cda:	bf00      	nop
 8102cdc:	3714      	adds	r7, #20
 8102cde:	46bd      	mov	sp, r7
 8102ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce4:	4770      	bx	lr
 8102ce6:	bf00      	nop
 8102ce8:	03ff63ff 	.word	0x03ff63ff

08102cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102cec:	b480      	push	{r7}
 8102cee:	b083      	sub	sp, #12
 8102cf0:	af00      	add	r7, sp, #0
 8102cf2:	6078      	str	r0, [r7, #4]
 8102cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102cfc:	b2db      	uxtb	r3, r3
 8102cfe:	2b20      	cmp	r3, #32
 8102d00:	d138      	bne.n	8102d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102d08:	2b01      	cmp	r3, #1
 8102d0a:	d101      	bne.n	8102d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102d0c:	2302      	movs	r3, #2
 8102d0e:	e032      	b.n	8102d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	2201      	movs	r2, #1
 8102d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	2224      	movs	r2, #36	; 0x24
 8102d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	681a      	ldr	r2, [r3, #0]
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	f022 0201 	bic.w	r2, r2, #1
 8102d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	681b      	ldr	r3, [r3, #0]
 8102d34:	681a      	ldr	r2, [r3, #0]
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	6819      	ldr	r1, [r3, #0]
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	683a      	ldr	r2, [r7, #0]
 8102d4c:	430a      	orrs	r2, r1
 8102d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	681a      	ldr	r2, [r3, #0]
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	f042 0201 	orr.w	r2, r2, #1
 8102d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	2220      	movs	r2, #32
 8102d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	2200      	movs	r2, #0
 8102d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102d70:	2300      	movs	r3, #0
 8102d72:	e000      	b.n	8102d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102d74:	2302      	movs	r3, #2
  }
}
 8102d76:	4618      	mov	r0, r3
 8102d78:	370c      	adds	r7, #12
 8102d7a:	46bd      	mov	sp, r7
 8102d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d80:	4770      	bx	lr

08102d82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102d82:	b480      	push	{r7}
 8102d84:	b085      	sub	sp, #20
 8102d86:	af00      	add	r7, sp, #0
 8102d88:	6078      	str	r0, [r7, #4]
 8102d8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102d92:	b2db      	uxtb	r3, r3
 8102d94:	2b20      	cmp	r3, #32
 8102d96:	d139      	bne.n	8102e0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102d9e:	2b01      	cmp	r3, #1
 8102da0:	d101      	bne.n	8102da6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102da2:	2302      	movs	r3, #2
 8102da4:	e033      	b.n	8102e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	2201      	movs	r2, #1
 8102daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	2224      	movs	r2, #36	; 0x24
 8102db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	681a      	ldr	r2, [r3, #0]
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	f022 0201 	bic.w	r2, r2, #1
 8102dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102dce:	68fb      	ldr	r3, [r7, #12]
 8102dd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102dd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102dd6:	683b      	ldr	r3, [r7, #0]
 8102dd8:	021b      	lsls	r3, r3, #8
 8102dda:	68fa      	ldr	r2, [r7, #12]
 8102ddc:	4313      	orrs	r3, r2
 8102dde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	68fa      	ldr	r2, [r7, #12]
 8102de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	681a      	ldr	r2, [r3, #0]
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	f042 0201 	orr.w	r2, r2, #1
 8102df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	2220      	movs	r2, #32
 8102dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	2200      	movs	r2, #0
 8102e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102e08:	2300      	movs	r3, #0
 8102e0a:	e000      	b.n	8102e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102e0c:	2302      	movs	r3, #2
  }
}
 8102e0e:	4618      	mov	r0, r3
 8102e10:	3714      	adds	r7, #20
 8102e12:	46bd      	mov	sp, r7
 8102e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e18:	4770      	bx	lr
	...

08102e1c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102e1c:	b580      	push	{r7, lr}
 8102e1e:	b084      	sub	sp, #16
 8102e20:	af00      	add	r7, sp, #0
 8102e22:	60f8      	str	r0, [r7, #12]
 8102e24:	460b      	mov	r3, r1
 8102e26:	607a      	str	r2, [r7, #4]
 8102e28:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102e2a:	4b37      	ldr	r3, [pc, #220]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	f023 0201 	bic.w	r2, r3, #1
 8102e32:	4935      	ldr	r1, [pc, #212]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	4313      	orrs	r3, r2
 8102e38:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	2b00      	cmp	r3, #0
 8102e3e:	d123      	bne.n	8102e88 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102e40:	f7ff f842 	bl	8101ec8 <HAL_GetCurrentCPUID>
 8102e44:	4603      	mov	r3, r0
 8102e46:	2b03      	cmp	r3, #3
 8102e48:	d158      	bne.n	8102efc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102e4a:	4b2f      	ldr	r3, [pc, #188]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e4c:	691b      	ldr	r3, [r3, #16]
 8102e4e:	4a2e      	ldr	r2, [pc, #184]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e50:	f023 0301 	bic.w	r3, r3, #1
 8102e54:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e56:	4b2d      	ldr	r3, [pc, #180]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e58:	691b      	ldr	r3, [r3, #16]
 8102e5a:	4a2c      	ldr	r2, [pc, #176]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e5c:	f043 0304 	orr.w	r3, r3, #4
 8102e60:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102e62:	f3bf 8f4f 	dsb	sy
}
 8102e66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102e68:	f3bf 8f6f 	isb	sy
}
 8102e6c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102e6e:	7afb      	ldrb	r3, [r7, #11]
 8102e70:	2b01      	cmp	r3, #1
 8102e72:	d101      	bne.n	8102e78 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102e74:	bf30      	wfi
 8102e76:	e000      	b.n	8102e7a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102e78:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e7a:	4b24      	ldr	r3, [pc, #144]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e7c:	691b      	ldr	r3, [r3, #16]
 8102e7e:	4a23      	ldr	r2, [pc, #140]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e80:	f023 0304 	bic.w	r3, r3, #4
 8102e84:	6113      	str	r3, [r2, #16]
 8102e86:	e03c      	b.n	8102f02 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	2b01      	cmp	r3, #1
 8102e8c:	d123      	bne.n	8102ed6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102e8e:	f7ff f81b 	bl	8101ec8 <HAL_GetCurrentCPUID>
 8102e92:	4603      	mov	r3, r0
 8102e94:	2b01      	cmp	r3, #1
 8102e96:	d133      	bne.n	8102f00 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102e98:	4b1b      	ldr	r3, [pc, #108]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e9a:	695b      	ldr	r3, [r3, #20]
 8102e9c:	4a1a      	ldr	r2, [pc, #104]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e9e:	f023 0302 	bic.w	r3, r3, #2
 8102ea2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ea4:	4b19      	ldr	r3, [pc, #100]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ea6:	691b      	ldr	r3, [r3, #16]
 8102ea8:	4a18      	ldr	r2, [pc, #96]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102eaa:	f043 0304 	orr.w	r3, r3, #4
 8102eae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102eb0:	f3bf 8f4f 	dsb	sy
}
 8102eb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102eb6:	f3bf 8f6f 	isb	sy
}
 8102eba:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102ebc:	7afb      	ldrb	r3, [r7, #11]
 8102ebe:	2b01      	cmp	r3, #1
 8102ec0:	d101      	bne.n	8102ec6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102ec2:	bf30      	wfi
 8102ec4:	e000      	b.n	8102ec8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102ec6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ec8:	4b10      	ldr	r3, [pc, #64]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102eca:	691b      	ldr	r3, [r3, #16]
 8102ecc:	4a0f      	ldr	r2, [pc, #60]	; (8102f0c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ece:	f023 0304 	bic.w	r3, r3, #4
 8102ed2:	6113      	str	r3, [r2, #16]
 8102ed4:	e015      	b.n	8102f02 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ed6:	f7fe fff7 	bl	8101ec8 <HAL_GetCurrentCPUID>
 8102eda:	4603      	mov	r3, r0
 8102edc:	2b03      	cmp	r3, #3
 8102ede:	d106      	bne.n	8102eee <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102ee0:	4b09      	ldr	r3, [pc, #36]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ee2:	691b      	ldr	r3, [r3, #16]
 8102ee4:	4a08      	ldr	r2, [pc, #32]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ee6:	f023 0304 	bic.w	r3, r3, #4
 8102eea:	6113      	str	r3, [r2, #16]
 8102eec:	e009      	b.n	8102f02 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102eee:	4b06      	ldr	r3, [pc, #24]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ef0:	695b      	ldr	r3, [r3, #20]
 8102ef2:	4a05      	ldr	r2, [pc, #20]	; (8102f08 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ef4:	f023 0304 	bic.w	r3, r3, #4
 8102ef8:	6153      	str	r3, [r2, #20]
 8102efa:	e002      	b.n	8102f02 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102efc:	bf00      	nop
 8102efe:	e000      	b.n	8102f02 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102f00:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102f02:	3710      	adds	r7, #16
 8102f04:	46bd      	mov	sp, r7
 8102f06:	bd80      	pop	{r7, pc}
 8102f08:	58024800 	.word	0x58024800
 8102f0c:	e000ed00 	.word	0xe000ed00

08102f10 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102f10:	b580      	push	{r7, lr}
 8102f12:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102f14:	f7fe ffd8 	bl	8101ec8 <HAL_GetCurrentCPUID>
 8102f18:	4603      	mov	r3, r0
 8102f1a:	2b03      	cmp	r3, #3
 8102f1c:	d101      	bne.n	8102f22 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102f1e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102f20:	e001      	b.n	8102f26 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102f22:	bf40      	sev
    __WFE ();
 8102f24:	bf20      	wfe
}
 8102f26:	bf00      	nop
 8102f28:	bd80      	pop	{r7, pc}
	...

08102f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102f2c:	b480      	push	{r7}
 8102f2e:	b089      	sub	sp, #36	; 0x24
 8102f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102f32:	4bb3      	ldr	r3, [pc, #716]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f34:	691b      	ldr	r3, [r3, #16]
 8102f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102f3a:	2b18      	cmp	r3, #24
 8102f3c:	f200 8155 	bhi.w	81031ea <HAL_RCC_GetSysClockFreq+0x2be>
 8102f40:	a201      	add	r2, pc, #4	; (adr r2, 8102f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f46:	bf00      	nop
 8102f48:	08102fad 	.word	0x08102fad
 8102f4c:	081031eb 	.word	0x081031eb
 8102f50:	081031eb 	.word	0x081031eb
 8102f54:	081031eb 	.word	0x081031eb
 8102f58:	081031eb 	.word	0x081031eb
 8102f5c:	081031eb 	.word	0x081031eb
 8102f60:	081031eb 	.word	0x081031eb
 8102f64:	081031eb 	.word	0x081031eb
 8102f68:	08102fd3 	.word	0x08102fd3
 8102f6c:	081031eb 	.word	0x081031eb
 8102f70:	081031eb 	.word	0x081031eb
 8102f74:	081031eb 	.word	0x081031eb
 8102f78:	081031eb 	.word	0x081031eb
 8102f7c:	081031eb 	.word	0x081031eb
 8102f80:	081031eb 	.word	0x081031eb
 8102f84:	081031eb 	.word	0x081031eb
 8102f88:	08102fd9 	.word	0x08102fd9
 8102f8c:	081031eb 	.word	0x081031eb
 8102f90:	081031eb 	.word	0x081031eb
 8102f94:	081031eb 	.word	0x081031eb
 8102f98:	081031eb 	.word	0x081031eb
 8102f9c:	081031eb 	.word	0x081031eb
 8102fa0:	081031eb 	.word	0x081031eb
 8102fa4:	081031eb 	.word	0x081031eb
 8102fa8:	08102fdf 	.word	0x08102fdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102fac:	4b94      	ldr	r3, [pc, #592]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	f003 0320 	and.w	r3, r3, #32
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d009      	beq.n	8102fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102fb8:	4b91      	ldr	r3, [pc, #580]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	08db      	lsrs	r3, r3, #3
 8102fbe:	f003 0303 	and.w	r3, r3, #3
 8102fc2:	4a90      	ldr	r2, [pc, #576]	; (8103204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8102fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102fca:	e111      	b.n	81031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102fcc:	4b8d      	ldr	r3, [pc, #564]	; (8103204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102fce:	61bb      	str	r3, [r7, #24]
    break;
 8102fd0:	e10e      	b.n	81031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102fd2:	4b8d      	ldr	r3, [pc, #564]	; (8103208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102fd4:	61bb      	str	r3, [r7, #24]
    break;
 8102fd6:	e10b      	b.n	81031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102fd8:	4b8c      	ldr	r3, [pc, #560]	; (810320c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102fda:	61bb      	str	r3, [r7, #24]
    break;
 8102fdc:	e108      	b.n	81031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102fde:	4b88      	ldr	r3, [pc, #544]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102fe2:	f003 0303 	and.w	r3, r3, #3
 8102fe6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102fe8:	4b85      	ldr	r3, [pc, #532]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102fec:	091b      	lsrs	r3, r3, #4
 8102fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102ff2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102ff4:	4b82      	ldr	r3, [pc, #520]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ff8:	f003 0301 	and.w	r3, r3, #1
 8102ffc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102ffe:	4b80      	ldr	r3, [pc, #512]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103002:	08db      	lsrs	r3, r3, #3
 8103004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103008:	68fa      	ldr	r2, [r7, #12]
 810300a:	fb02 f303 	mul.w	r3, r2, r3
 810300e:	ee07 3a90 	vmov	s15, r3
 8103012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103016:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810301a:	693b      	ldr	r3, [r7, #16]
 810301c:	2b00      	cmp	r3, #0
 810301e:	f000 80e1 	beq.w	81031e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103022:	697b      	ldr	r3, [r7, #20]
 8103024:	2b02      	cmp	r3, #2
 8103026:	f000 8083 	beq.w	8103130 <HAL_RCC_GetSysClockFreq+0x204>
 810302a:	697b      	ldr	r3, [r7, #20]
 810302c:	2b02      	cmp	r3, #2
 810302e:	f200 80a1 	bhi.w	8103174 <HAL_RCC_GetSysClockFreq+0x248>
 8103032:	697b      	ldr	r3, [r7, #20]
 8103034:	2b00      	cmp	r3, #0
 8103036:	d003      	beq.n	8103040 <HAL_RCC_GetSysClockFreq+0x114>
 8103038:	697b      	ldr	r3, [r7, #20]
 810303a:	2b01      	cmp	r3, #1
 810303c:	d056      	beq.n	81030ec <HAL_RCC_GetSysClockFreq+0x1c0>
 810303e:	e099      	b.n	8103174 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103040:	4b6f      	ldr	r3, [pc, #444]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	f003 0320 	and.w	r3, r3, #32
 8103048:	2b00      	cmp	r3, #0
 810304a:	d02d      	beq.n	81030a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810304c:	4b6c      	ldr	r3, [pc, #432]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	08db      	lsrs	r3, r3, #3
 8103052:	f003 0303 	and.w	r3, r3, #3
 8103056:	4a6b      	ldr	r2, [pc, #428]	; (8103204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103058:	fa22 f303 	lsr.w	r3, r2, r3
 810305c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	ee07 3a90 	vmov	s15, r3
 8103064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103068:	693b      	ldr	r3, [r7, #16]
 810306a:	ee07 3a90 	vmov	s15, r3
 810306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103076:	4b62      	ldr	r3, [pc, #392]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810307e:	ee07 3a90 	vmov	s15, r3
 8103082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103086:	ed97 6a02 	vldr	s12, [r7, #8]
 810308a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103210 <HAL_RCC_GetSysClockFreq+0x2e4>
 810308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81030a6:	e087      	b.n	81031b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81030a8:	693b      	ldr	r3, [r7, #16]
 81030aa:	ee07 3a90 	vmov	s15, r3
 81030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103214 <HAL_RCC_GetSysClockFreq+0x2e8>
 81030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030ba:	4b51      	ldr	r3, [pc, #324]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030c2:	ee07 3a90 	vmov	s15, r3
 81030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81030ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103210 <HAL_RCC_GetSysClockFreq+0x2e4>
 81030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030ea:	e065      	b.n	81031b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81030ec:	693b      	ldr	r3, [r7, #16]
 81030ee:	ee07 3a90 	vmov	s15, r3
 81030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103218 <HAL_RCC_GetSysClockFreq+0x2ec>
 81030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030fe:	4b40      	ldr	r3, [pc, #256]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103106:	ee07 3a90 	vmov	s15, r3
 810310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810312a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810312e:	e043      	b.n	81031b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103130:	693b      	ldr	r3, [r7, #16]
 8103132:	ee07 3a90 	vmov	s15, r3
 8103136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810313a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810321c <HAL_RCC_GetSysClockFreq+0x2f0>
 810313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103142:	4b2f      	ldr	r3, [pc, #188]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810314a:	ee07 3a90 	vmov	s15, r3
 810314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103152:	ed97 6a02 	vldr	s12, [r7, #8]
 8103156:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103210 <HAL_RCC_GetSysClockFreq+0x2e4>
 810315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810316e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103172:	e021      	b.n	81031b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103174:	693b      	ldr	r3, [r7, #16]
 8103176:	ee07 3a90 	vmov	s15, r3
 810317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810317e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103186:	4b1e      	ldr	r3, [pc, #120]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810318e:	ee07 3a90 	vmov	s15, r3
 8103192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103196:	ed97 6a02 	vldr	s12, [r7, #8]
 810319a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103210 <HAL_RCC_GetSysClockFreq+0x2e4>
 810319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81031b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81031b8:	4b11      	ldr	r3, [pc, #68]	; (8103200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031bc:	0a5b      	lsrs	r3, r3, #9
 81031be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81031c2:	3301      	adds	r3, #1
 81031c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81031c6:	683b      	ldr	r3, [r7, #0]
 81031c8:	ee07 3a90 	vmov	s15, r3
 81031cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81031d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81031d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031dc:	ee17 3a90 	vmov	r3, s15
 81031e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81031e2:	e005      	b.n	81031f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81031e4:	2300      	movs	r3, #0
 81031e6:	61bb      	str	r3, [r7, #24]
    break;
 81031e8:	e002      	b.n	81031f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81031ea:	4b07      	ldr	r3, [pc, #28]	; (8103208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81031ec:	61bb      	str	r3, [r7, #24]
    break;
 81031ee:	bf00      	nop
  }

  return sysclockfreq;
 81031f0:	69bb      	ldr	r3, [r7, #24]
}
 81031f2:	4618      	mov	r0, r3
 81031f4:	3724      	adds	r7, #36	; 0x24
 81031f6:	46bd      	mov	sp, r7
 81031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031fc:	4770      	bx	lr
 81031fe:	bf00      	nop
 8103200:	58024400 	.word	0x58024400
 8103204:	03d09000 	.word	0x03d09000
 8103208:	003d0900 	.word	0x003d0900
 810320c:	007a1200 	.word	0x007a1200
 8103210:	46000000 	.word	0x46000000
 8103214:	4c742400 	.word	0x4c742400
 8103218:	4a742400 	.word	0x4a742400
 810321c:	4af42400 	.word	0x4af42400

08103220 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103220:	b580      	push	{r7, lr}
 8103222:	b086      	sub	sp, #24
 8103224:	af00      	add	r7, sp, #0
 8103226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103228:	2300      	movs	r3, #0
 810322a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810322c:	2300      	movs	r3, #0
 810322e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103238:	2b00      	cmp	r3, #0
 810323a:	d03f      	beq.n	81032bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103244:	d02a      	beq.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810324a:	d824      	bhi.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810324c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103250:	d018      	beq.n	8103284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103256:	d81e      	bhi.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103258:	2b00      	cmp	r3, #0
 810325a:	d003      	beq.n	8103264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810325c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103260:	d007      	beq.n	8103272 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103262:	e018      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103264:	4bab      	ldr	r3, [pc, #684]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103268:	4aaa      	ldr	r2, [pc, #680]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810326e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103270:	e015      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	3304      	adds	r3, #4
 8103276:	2102      	movs	r1, #2
 8103278:	4618      	mov	r0, r3
 810327a:	f000 ff11 	bl	81040a0 <RCCEx_PLL2_Config>
 810327e:	4603      	mov	r3, r0
 8103280:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103282:	e00c      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	3324      	adds	r3, #36	; 0x24
 8103288:	2102      	movs	r1, #2
 810328a:	4618      	mov	r0, r3
 810328c:	f000 ffba 	bl	8104204 <RCCEx_PLL3_Config>
 8103290:	4603      	mov	r3, r0
 8103292:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103294:	e003      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103296:	2301      	movs	r3, #1
 8103298:	75fb      	strb	r3, [r7, #23]
      break;
 810329a:	e000      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810329c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810329e:	7dfb      	ldrb	r3, [r7, #23]
 81032a0:	2b00      	cmp	r3, #0
 81032a2:	d109      	bne.n	81032b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81032a4:	4b9b      	ldr	r3, [pc, #620]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81032b0:	4998      	ldr	r1, [pc, #608]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032b2:	4313      	orrs	r3, r2
 81032b4:	650b      	str	r3, [r1, #80]	; 0x50
 81032b6:	e001      	b.n	81032bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032b8:	7dfb      	ldrb	r3, [r7, #23]
 81032ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	d03d      	beq.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032cc:	2b04      	cmp	r3, #4
 81032ce:	d826      	bhi.n	810331e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81032d0:	a201      	add	r2, pc, #4	; (adr r2, 81032d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032d6:	bf00      	nop
 81032d8:	081032ed 	.word	0x081032ed
 81032dc:	081032fb 	.word	0x081032fb
 81032e0:	0810330d 	.word	0x0810330d
 81032e4:	08103325 	.word	0x08103325
 81032e8:	08103325 	.word	0x08103325
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032ec:	4b89      	ldr	r3, [pc, #548]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032f0:	4a88      	ldr	r2, [pc, #544]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81032f8:	e015      	b.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	3304      	adds	r3, #4
 81032fe:	2100      	movs	r1, #0
 8103300:	4618      	mov	r0, r3
 8103302:	f000 fecd 	bl	81040a0 <RCCEx_PLL2_Config>
 8103306:	4603      	mov	r3, r0
 8103308:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810330a:	e00c      	b.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	3324      	adds	r3, #36	; 0x24
 8103310:	2100      	movs	r1, #0
 8103312:	4618      	mov	r0, r3
 8103314:	f000 ff76 	bl	8104204 <RCCEx_PLL3_Config>
 8103318:	4603      	mov	r3, r0
 810331a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810331c:	e003      	b.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810331e:	2301      	movs	r3, #1
 8103320:	75fb      	strb	r3, [r7, #23]
      break;
 8103322:	e000      	b.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103326:	7dfb      	ldrb	r3, [r7, #23]
 8103328:	2b00      	cmp	r3, #0
 810332a:	d109      	bne.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810332c:	4b79      	ldr	r3, [pc, #484]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103330:	f023 0207 	bic.w	r2, r3, #7
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103338:	4976      	ldr	r1, [pc, #472]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810333a:	4313      	orrs	r3, r2
 810333c:	650b      	str	r3, [r1, #80]	; 0x50
 810333e:	e001      	b.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103340:	7dfb      	ldrb	r3, [r7, #23]
 8103342:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810334c:	2b00      	cmp	r3, #0
 810334e:	d042      	beq.n	81033d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103358:	d02b      	beq.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810335e:	d825      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103360:	2bc0      	cmp	r3, #192	; 0xc0
 8103362:	d028      	beq.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103364:	2bc0      	cmp	r3, #192	; 0xc0
 8103366:	d821      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103368:	2b80      	cmp	r3, #128	; 0x80
 810336a:	d016      	beq.n	810339a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 810336c:	2b80      	cmp	r3, #128	; 0x80
 810336e:	d81d      	bhi.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103370:	2b00      	cmp	r3, #0
 8103372:	d002      	beq.n	810337a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103374:	2b40      	cmp	r3, #64	; 0x40
 8103376:	d007      	beq.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103378:	e018      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810337a:	4b66      	ldr	r3, [pc, #408]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810337e:	4a65      	ldr	r2, [pc, #404]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103386:	e017      	b.n	81033b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	3304      	adds	r3, #4
 810338c:	2100      	movs	r1, #0
 810338e:	4618      	mov	r0, r3
 8103390:	f000 fe86 	bl	81040a0 <RCCEx_PLL2_Config>
 8103394:	4603      	mov	r3, r0
 8103396:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103398:	e00e      	b.n	81033b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	3324      	adds	r3, #36	; 0x24
 810339e:	2100      	movs	r1, #0
 81033a0:	4618      	mov	r0, r3
 81033a2:	f000 ff2f 	bl	8104204 <RCCEx_PLL3_Config>
 81033a6:	4603      	mov	r3, r0
 81033a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81033aa:	e005      	b.n	81033b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033ac:	2301      	movs	r3, #1
 81033ae:	75fb      	strb	r3, [r7, #23]
      break;
 81033b0:	e002      	b.n	81033b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81033b2:	bf00      	nop
 81033b4:	e000      	b.n	81033b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81033b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033b8:	7dfb      	ldrb	r3, [r7, #23]
 81033ba:	2b00      	cmp	r3, #0
 81033bc:	d109      	bne.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81033be:	4b55      	ldr	r3, [pc, #340]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81033ca:	4952      	ldr	r1, [pc, #328]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033cc:	4313      	orrs	r3, r2
 81033ce:	650b      	str	r3, [r1, #80]	; 0x50
 81033d0:	e001      	b.n	81033d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033d2:	7dfb      	ldrb	r3, [r7, #23]
 81033d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81033de:	2b00      	cmp	r3, #0
 81033e0:	d049      	beq.n	8103476 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81033e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81033ec:	d030      	beq.n	8103450 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81033ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81033f2:	d82a      	bhi.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81033f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81033f8:	d02c      	beq.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81033fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81033fe:	d824      	bhi.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103404:	d018      	beq.n	8103438 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810340a:	d81e      	bhi.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810340c:	2b00      	cmp	r3, #0
 810340e:	d003      	beq.n	8103418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103414:	d007      	beq.n	8103426 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103416:	e018      	b.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103418:	4b3e      	ldr	r3, [pc, #248]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810341c:	4a3d      	ldr	r2, [pc, #244]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810341e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103424:	e017      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	3304      	adds	r3, #4
 810342a:	2100      	movs	r1, #0
 810342c:	4618      	mov	r0, r3
 810342e:	f000 fe37 	bl	81040a0 <RCCEx_PLL2_Config>
 8103432:	4603      	mov	r3, r0
 8103434:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103436:	e00e      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	3324      	adds	r3, #36	; 0x24
 810343c:	2100      	movs	r1, #0
 810343e:	4618      	mov	r0, r3
 8103440:	f000 fee0 	bl	8104204 <RCCEx_PLL3_Config>
 8103444:	4603      	mov	r3, r0
 8103446:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103448:	e005      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810344a:	2301      	movs	r3, #1
 810344c:	75fb      	strb	r3, [r7, #23]
      break;
 810344e:	e002      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103450:	bf00      	nop
 8103452:	e000      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103456:	7dfb      	ldrb	r3, [r7, #23]
 8103458:	2b00      	cmp	r3, #0
 810345a:	d10a      	bne.n	8103472 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810345c:	4b2d      	ldr	r3, [pc, #180]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103460:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810346a:	492a      	ldr	r1, [pc, #168]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810346c:	4313      	orrs	r3, r2
 810346e:	658b      	str	r3, [r1, #88]	; 0x58
 8103470:	e001      	b.n	8103476 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103472:	7dfb      	ldrb	r3, [r7, #23]
 8103474:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810347e:	2b00      	cmp	r3, #0
 8103480:	d04c      	beq.n	810351c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810348c:	d030      	beq.n	81034f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810348e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103492:	d82a      	bhi.n	81034ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103494:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103498:	d02c      	beq.n	81034f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 810349a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810349e:	d824      	bhi.n	81034ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81034a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81034a4:	d018      	beq.n	81034d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81034a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81034aa:	d81e      	bhi.n	81034ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81034ac:	2b00      	cmp	r3, #0
 81034ae:	d003      	beq.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81034b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81034b4:	d007      	beq.n	81034c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81034b6:	e018      	b.n	81034ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034b8:	4b16      	ldr	r3, [pc, #88]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034bc:	4a15      	ldr	r2, [pc, #84]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81034c4:	e017      	b.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	3304      	adds	r3, #4
 81034ca:	2100      	movs	r1, #0
 81034cc:	4618      	mov	r0, r3
 81034ce:	f000 fde7 	bl	81040a0 <RCCEx_PLL2_Config>
 81034d2:	4603      	mov	r3, r0
 81034d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81034d6:	e00e      	b.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	3324      	adds	r3, #36	; 0x24
 81034dc:	2100      	movs	r1, #0
 81034de:	4618      	mov	r0, r3
 81034e0:	f000 fe90 	bl	8104204 <RCCEx_PLL3_Config>
 81034e4:	4603      	mov	r3, r0
 81034e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81034e8:	e005      	b.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81034ea:	2301      	movs	r3, #1
 81034ec:	75fb      	strb	r3, [r7, #23]
      break;
 81034ee:	e002      	b.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81034f0:	bf00      	nop
 81034f2:	e000      	b.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81034f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034f6:	7dfb      	ldrb	r3, [r7, #23]
 81034f8:	2b00      	cmp	r3, #0
 81034fa:	d10d      	bne.n	8103518 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81034fc:	4b05      	ldr	r3, [pc, #20]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103500:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810350a:	4902      	ldr	r1, [pc, #8]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810350c:	4313      	orrs	r3, r2
 810350e:	658b      	str	r3, [r1, #88]	; 0x58
 8103510:	e004      	b.n	810351c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8103512:	bf00      	nop
 8103514:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103518:	7dfb      	ldrb	r3, [r7, #23]
 810351a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103524:	2b00      	cmp	r3, #0
 8103526:	d032      	beq.n	810358e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810352c:	2b30      	cmp	r3, #48	; 0x30
 810352e:	d01c      	beq.n	810356a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103530:	2b30      	cmp	r3, #48	; 0x30
 8103532:	d817      	bhi.n	8103564 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103534:	2b20      	cmp	r3, #32
 8103536:	d00c      	beq.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103538:	2b20      	cmp	r3, #32
 810353a:	d813      	bhi.n	8103564 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810353c:	2b00      	cmp	r3, #0
 810353e:	d016      	beq.n	810356e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8103540:	2b10      	cmp	r3, #16
 8103542:	d10f      	bne.n	8103564 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103544:	4baf      	ldr	r3, [pc, #700]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103548:	4aae      	ldr	r2, [pc, #696]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810354a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810354e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103550:	e00e      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	3304      	adds	r3, #4
 8103556:	2102      	movs	r1, #2
 8103558:	4618      	mov	r0, r3
 810355a:	f000 fda1 	bl	81040a0 <RCCEx_PLL2_Config>
 810355e:	4603      	mov	r3, r0
 8103560:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103562:	e005      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103564:	2301      	movs	r3, #1
 8103566:	75fb      	strb	r3, [r7, #23]
      break;
 8103568:	e002      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810356a:	bf00      	nop
 810356c:	e000      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810356e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103570:	7dfb      	ldrb	r3, [r7, #23]
 8103572:	2b00      	cmp	r3, #0
 8103574:	d109      	bne.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103576:	4ba3      	ldr	r3, [pc, #652]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810357a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103582:	49a0      	ldr	r1, [pc, #640]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103584:	4313      	orrs	r3, r2
 8103586:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103588:	e001      	b.n	810358e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810358a:	7dfb      	ldrb	r3, [r7, #23]
 810358c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103596:	2b00      	cmp	r3, #0
 8103598:	d047      	beq.n	810362a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810359e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81035a2:	d030      	beq.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81035a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81035a8:	d82a      	bhi.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81035aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81035ae:	d02c      	beq.n	810360a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81035b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81035b4:	d824      	bhi.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81035ba:	d018      	beq.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81035c0:	d81e      	bhi.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d003      	beq.n	81035ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81035ca:	d007      	beq.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81035cc:	e018      	b.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035ce:	4b8d      	ldr	r3, [pc, #564]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035d2:	4a8c      	ldr	r2, [pc, #560]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81035da:	e017      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	3304      	adds	r3, #4
 81035e0:	2100      	movs	r1, #0
 81035e2:	4618      	mov	r0, r3
 81035e4:	f000 fd5c 	bl	81040a0 <RCCEx_PLL2_Config>
 81035e8:	4603      	mov	r3, r0
 81035ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81035ec:	e00e      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	3324      	adds	r3, #36	; 0x24
 81035f2:	2100      	movs	r1, #0
 81035f4:	4618      	mov	r0, r3
 81035f6:	f000 fe05 	bl	8104204 <RCCEx_PLL3_Config>
 81035fa:	4603      	mov	r3, r0
 81035fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81035fe:	e005      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103600:	2301      	movs	r3, #1
 8103602:	75fb      	strb	r3, [r7, #23]
      break;
 8103604:	e002      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103606:	bf00      	nop
 8103608:	e000      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810360a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810360c:	7dfb      	ldrb	r3, [r7, #23]
 810360e:	2b00      	cmp	r3, #0
 8103610:	d109      	bne.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103612:	4b7c      	ldr	r3, [pc, #496]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103616:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810361e:	4979      	ldr	r1, [pc, #484]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103620:	4313      	orrs	r3, r2
 8103622:	650b      	str	r3, [r1, #80]	; 0x50
 8103624:	e001      	b.n	810362a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103626:	7dfb      	ldrb	r3, [r7, #23]
 8103628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103632:	2b00      	cmp	r3, #0
 8103634:	d049      	beq.n	81036ca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810363a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810363e:	d02e      	beq.n	810369e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8103640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103644:	d828      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810364a:	d02a      	beq.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 810364c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103650:	d822      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103652:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103656:	d026      	beq.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103658:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810365c:	d81c      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810365e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103662:	d010      	beq.n	8103686 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103668:	d816      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810366a:	2b00      	cmp	r3, #0
 810366c:	d01d      	beq.n	81036aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810366e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103672:	d111      	bne.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	3304      	adds	r3, #4
 8103678:	2101      	movs	r1, #1
 810367a:	4618      	mov	r0, r3
 810367c:	f000 fd10 	bl	81040a0 <RCCEx_PLL2_Config>
 8103680:	4603      	mov	r3, r0
 8103682:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103684:	e012      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	3324      	adds	r3, #36	; 0x24
 810368a:	2101      	movs	r1, #1
 810368c:	4618      	mov	r0, r3
 810368e:	f000 fdb9 	bl	8104204 <RCCEx_PLL3_Config>
 8103692:	4603      	mov	r3, r0
 8103694:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103696:	e009      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103698:	2301      	movs	r3, #1
 810369a:	75fb      	strb	r3, [r7, #23]
      break;
 810369c:	e006      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810369e:	bf00      	nop
 81036a0:	e004      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81036a2:	bf00      	nop
 81036a4:	e002      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81036a6:	bf00      	nop
 81036a8:	e000      	b.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81036aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036ac:	7dfb      	ldrb	r3, [r7, #23]
 81036ae:	2b00      	cmp	r3, #0
 81036b0:	d109      	bne.n	81036c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81036b2:	4b54      	ldr	r3, [pc, #336]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81036be:	4951      	ldr	r1, [pc, #324]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036c0:	4313      	orrs	r3, r2
 81036c2:	650b      	str	r3, [r1, #80]	; 0x50
 81036c4:	e001      	b.n	81036ca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036c6:	7dfb      	ldrb	r3, [r7, #23]
 81036c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81036d2:	2b00      	cmp	r3, #0
 81036d4:	d04b      	beq.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81036dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81036e0:	d02e      	beq.n	8103740 <HAL_RCCEx_PeriphCLKConfig+0x520>
 81036e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81036e6:	d828      	bhi.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81036ec:	d02a      	beq.n	8103744 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81036f2:	d822      	bhi.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81036f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81036f8:	d026      	beq.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81036fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81036fe:	d81c      	bhi.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103704:	d010      	beq.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810370a:	d816      	bhi.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810370c:	2b00      	cmp	r3, #0
 810370e:	d01d      	beq.n	810374c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103714:	d111      	bne.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	3304      	adds	r3, #4
 810371a:	2101      	movs	r1, #1
 810371c:	4618      	mov	r0, r3
 810371e:	f000 fcbf 	bl	81040a0 <RCCEx_PLL2_Config>
 8103722:	4603      	mov	r3, r0
 8103724:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103726:	e012      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	3324      	adds	r3, #36	; 0x24
 810372c:	2101      	movs	r1, #1
 810372e:	4618      	mov	r0, r3
 8103730:	f000 fd68 	bl	8104204 <RCCEx_PLL3_Config>
 8103734:	4603      	mov	r3, r0
 8103736:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103738:	e009      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810373a:	2301      	movs	r3, #1
 810373c:	75fb      	strb	r3, [r7, #23]
      break;
 810373e:	e006      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103740:	bf00      	nop
 8103742:	e004      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103744:	bf00      	nop
 8103746:	e002      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103748:	bf00      	nop
 810374a:	e000      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810374e:	7dfb      	ldrb	r3, [r7, #23]
 8103750:	2b00      	cmp	r3, #0
 8103752:	d10a      	bne.n	810376a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103754:	4b2b      	ldr	r3, [pc, #172]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103758:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103762:	4928      	ldr	r1, [pc, #160]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103764:	4313      	orrs	r3, r2
 8103766:	658b      	str	r3, [r1, #88]	; 0x58
 8103768:	e001      	b.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810376a:	7dfb      	ldrb	r3, [r7, #23]
 810376c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	681b      	ldr	r3, [r3, #0]
 8103772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103776:	2b00      	cmp	r3, #0
 8103778:	d02f      	beq.n	81037da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810377e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103782:	d00e      	beq.n	81037a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103788:	d814      	bhi.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810378a:	2b00      	cmp	r3, #0
 810378c:	d015      	beq.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810378e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103792:	d10f      	bne.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103794:	4b1b      	ldr	r3, [pc, #108]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103798:	4a1a      	ldr	r2, [pc, #104]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810379a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810379e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81037a0:	e00c      	b.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	3304      	adds	r3, #4
 81037a6:	2101      	movs	r1, #1
 81037a8:	4618      	mov	r0, r3
 81037aa:	f000 fc79 	bl	81040a0 <RCCEx_PLL2_Config>
 81037ae:	4603      	mov	r3, r0
 81037b0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81037b2:	e003      	b.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037b4:	2301      	movs	r3, #1
 81037b6:	75fb      	strb	r3, [r7, #23]
      break;
 81037b8:	e000      	b.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81037ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037bc:	7dfb      	ldrb	r3, [r7, #23]
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d109      	bne.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81037c2:	4b10      	ldr	r3, [pc, #64]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81037ce:	490d      	ldr	r1, [pc, #52]	; (8103804 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037d0:	4313      	orrs	r3, r2
 81037d2:	650b      	str	r3, [r1, #80]	; 0x50
 81037d4:	e001      	b.n	81037da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037d6:	7dfb      	ldrb	r3, [r7, #23]
 81037d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81037e2:	2b00      	cmp	r3, #0
 81037e4:	d033      	beq.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81037ea:	2b03      	cmp	r3, #3
 81037ec:	d81c      	bhi.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81037ee:	a201      	add	r2, pc, #4	; (adr r2, 81037f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037f4:	0810382f 	.word	0x0810382f
 81037f8:	08103809 	.word	0x08103809
 81037fc:	08103817 	.word	0x08103817
 8103800:	0810382f 	.word	0x0810382f
 8103804:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103808:	4bb9      	ldr	r3, [pc, #740]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810380c:	4ab8      	ldr	r2, [pc, #736]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810380e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103814:	e00c      	b.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	3304      	adds	r3, #4
 810381a:	2102      	movs	r1, #2
 810381c:	4618      	mov	r0, r3
 810381e:	f000 fc3f 	bl	81040a0 <RCCEx_PLL2_Config>
 8103822:	4603      	mov	r3, r0
 8103824:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103826:	e003      	b.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103828:	2301      	movs	r3, #1
 810382a:	75fb      	strb	r3, [r7, #23]
      break;
 810382c:	e000      	b.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810382e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103830:	7dfb      	ldrb	r3, [r7, #23]
 8103832:	2b00      	cmp	r3, #0
 8103834:	d109      	bne.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103836:	4bae      	ldr	r3, [pc, #696]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810383a:	f023 0203 	bic.w	r2, r3, #3
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103842:	49ab      	ldr	r1, [pc, #684]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103844:	4313      	orrs	r3, r2
 8103846:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103848:	e001      	b.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810384a:	7dfb      	ldrb	r3, [r7, #23]
 810384c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103856:	2b00      	cmp	r3, #0
 8103858:	f000 8088 	beq.w	810396c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810385c:	4ba5      	ldr	r3, [pc, #660]	; (8103af4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	4aa4      	ldr	r2, [pc, #656]	; (8103af4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103868:	f7fe f9c2 	bl	8101bf0 <HAL_GetTick>
 810386c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810386e:	e009      	b.n	8103884 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103870:	f7fe f9be 	bl	8101bf0 <HAL_GetTick>
 8103874:	4602      	mov	r2, r0
 8103876:	693b      	ldr	r3, [r7, #16]
 8103878:	1ad3      	subs	r3, r2, r3
 810387a:	2b64      	cmp	r3, #100	; 0x64
 810387c:	d902      	bls.n	8103884 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810387e:	2303      	movs	r3, #3
 8103880:	75fb      	strb	r3, [r7, #23]
        break;
 8103882:	e005      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103884:	4b9b      	ldr	r3, [pc, #620]	; (8103af4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810388c:	2b00      	cmp	r3, #0
 810388e:	d0ef      	beq.n	8103870 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103890:	7dfb      	ldrb	r3, [r7, #23]
 8103892:	2b00      	cmp	r3, #0
 8103894:	d168      	bne.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103896:	4b96      	ldr	r3, [pc, #600]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103898:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81038a0:	4053      	eors	r3, r2
 81038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81038a6:	2b00      	cmp	r3, #0
 81038a8:	d013      	beq.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81038aa:	4b91      	ldr	r3, [pc, #580]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81038b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81038b4:	4b8e      	ldr	r3, [pc, #568]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81038b8:	4a8d      	ldr	r2, [pc, #564]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81038be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81038c0:	4b8b      	ldr	r3, [pc, #556]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81038c4:	4a8a      	ldr	r2, [pc, #552]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81038ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81038cc:	4a88      	ldr	r2, [pc, #544]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038ce:	68fb      	ldr	r3, [r7, #12]
 81038d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81038d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81038dc:	d115      	bne.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81038de:	f7fe f987 	bl	8101bf0 <HAL_GetTick>
 81038e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81038e4:	e00b      	b.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81038e6:	f7fe f983 	bl	8101bf0 <HAL_GetTick>
 81038ea:	4602      	mov	r2, r0
 81038ec:	693b      	ldr	r3, [r7, #16]
 81038ee:	1ad3      	subs	r3, r2, r3
 81038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 81038f4:	4293      	cmp	r3, r2
 81038f6:	d902      	bls.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81038f8:	2303      	movs	r3, #3
 81038fa:	75fb      	strb	r3, [r7, #23]
            break;
 81038fc:	e005      	b.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81038fe:	4b7c      	ldr	r3, [pc, #496]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103902:	f003 0302 	and.w	r3, r3, #2
 8103906:	2b00      	cmp	r3, #0
 8103908:	d0ed      	beq.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810390a:	7dfb      	ldrb	r3, [r7, #23]
 810390c:	2b00      	cmp	r3, #0
 810390e:	d128      	bne.n	8103962 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810391a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810391e:	d10f      	bne.n	8103940 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103920:	4b73      	ldr	r3, [pc, #460]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103922:	691b      	ldr	r3, [r3, #16]
 8103924:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810392e:	091b      	lsrs	r3, r3, #4
 8103930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103934:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103938:	496d      	ldr	r1, [pc, #436]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810393a:	4313      	orrs	r3, r2
 810393c:	610b      	str	r3, [r1, #16]
 810393e:	e005      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103940:	4b6b      	ldr	r3, [pc, #428]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103942:	691b      	ldr	r3, [r3, #16]
 8103944:	4a6a      	ldr	r2, [pc, #424]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810394a:	6113      	str	r3, [r2, #16]
 810394c:	4b68      	ldr	r3, [pc, #416]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810394e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810395a:	4965      	ldr	r1, [pc, #404]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810395c:	4313      	orrs	r3, r2
 810395e:	670b      	str	r3, [r1, #112]	; 0x70
 8103960:	e004      	b.n	810396c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103962:	7dfb      	ldrb	r3, [r7, #23]
 8103964:	75bb      	strb	r3, [r7, #22]
 8103966:	e001      	b.n	810396c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103968:	7dfb      	ldrb	r3, [r7, #23]
 810396a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	f003 0301 	and.w	r3, r3, #1
 8103974:	2b00      	cmp	r3, #0
 8103976:	d07e      	beq.n	8103a76 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810397c:	2b28      	cmp	r3, #40	; 0x28
 810397e:	d867      	bhi.n	8103a50 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103980:	a201      	add	r2, pc, #4	; (adr r2, 8103988 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103986:	bf00      	nop
 8103988:	08103a57 	.word	0x08103a57
 810398c:	08103a51 	.word	0x08103a51
 8103990:	08103a51 	.word	0x08103a51
 8103994:	08103a51 	.word	0x08103a51
 8103998:	08103a51 	.word	0x08103a51
 810399c:	08103a51 	.word	0x08103a51
 81039a0:	08103a51 	.word	0x08103a51
 81039a4:	08103a51 	.word	0x08103a51
 81039a8:	08103a2d 	.word	0x08103a2d
 81039ac:	08103a51 	.word	0x08103a51
 81039b0:	08103a51 	.word	0x08103a51
 81039b4:	08103a51 	.word	0x08103a51
 81039b8:	08103a51 	.word	0x08103a51
 81039bc:	08103a51 	.word	0x08103a51
 81039c0:	08103a51 	.word	0x08103a51
 81039c4:	08103a51 	.word	0x08103a51
 81039c8:	08103a3f 	.word	0x08103a3f
 81039cc:	08103a51 	.word	0x08103a51
 81039d0:	08103a51 	.word	0x08103a51
 81039d4:	08103a51 	.word	0x08103a51
 81039d8:	08103a51 	.word	0x08103a51
 81039dc:	08103a51 	.word	0x08103a51
 81039e0:	08103a51 	.word	0x08103a51
 81039e4:	08103a51 	.word	0x08103a51
 81039e8:	08103a57 	.word	0x08103a57
 81039ec:	08103a51 	.word	0x08103a51
 81039f0:	08103a51 	.word	0x08103a51
 81039f4:	08103a51 	.word	0x08103a51
 81039f8:	08103a51 	.word	0x08103a51
 81039fc:	08103a51 	.word	0x08103a51
 8103a00:	08103a51 	.word	0x08103a51
 8103a04:	08103a51 	.word	0x08103a51
 8103a08:	08103a57 	.word	0x08103a57
 8103a0c:	08103a51 	.word	0x08103a51
 8103a10:	08103a51 	.word	0x08103a51
 8103a14:	08103a51 	.word	0x08103a51
 8103a18:	08103a51 	.word	0x08103a51
 8103a1c:	08103a51 	.word	0x08103a51
 8103a20:	08103a51 	.word	0x08103a51
 8103a24:	08103a51 	.word	0x08103a51
 8103a28:	08103a57 	.word	0x08103a57
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	3304      	adds	r3, #4
 8103a30:	2101      	movs	r1, #1
 8103a32:	4618      	mov	r0, r3
 8103a34:	f000 fb34 	bl	81040a0 <RCCEx_PLL2_Config>
 8103a38:	4603      	mov	r3, r0
 8103a3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103a3c:	e00c      	b.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	3324      	adds	r3, #36	; 0x24
 8103a42:	2101      	movs	r1, #1
 8103a44:	4618      	mov	r0, r3
 8103a46:	f000 fbdd 	bl	8104204 <RCCEx_PLL3_Config>
 8103a4a:	4603      	mov	r3, r0
 8103a4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103a4e:	e003      	b.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a50:	2301      	movs	r3, #1
 8103a52:	75fb      	strb	r3, [r7, #23]
      break;
 8103a54:	e000      	b.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a58:	7dfb      	ldrb	r3, [r7, #23]
 8103a5a:	2b00      	cmp	r3, #0
 8103a5c:	d109      	bne.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103a5e:	4b24      	ldr	r3, [pc, #144]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103a6a:	4921      	ldr	r1, [pc, #132]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a6c:	4313      	orrs	r3, r2
 8103a6e:	654b      	str	r3, [r1, #84]	; 0x54
 8103a70:	e001      	b.n	8103a76 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a72:	7dfb      	ldrb	r3, [r7, #23]
 8103a74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	681b      	ldr	r3, [r3, #0]
 8103a7a:	f003 0302 	and.w	r3, r3, #2
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	d03c      	beq.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103a86:	2b05      	cmp	r3, #5
 8103a88:	d820      	bhi.n	8103acc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103a8a:	a201      	add	r2, pc, #4	; (adr r2, 8103a90 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a90:	08103ad3 	.word	0x08103ad3
 8103a94:	08103aa9 	.word	0x08103aa9
 8103a98:	08103abb 	.word	0x08103abb
 8103a9c:	08103ad3 	.word	0x08103ad3
 8103aa0:	08103ad3 	.word	0x08103ad3
 8103aa4:	08103ad3 	.word	0x08103ad3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	3304      	adds	r3, #4
 8103aac:	2101      	movs	r1, #1
 8103aae:	4618      	mov	r0, r3
 8103ab0:	f000 faf6 	bl	81040a0 <RCCEx_PLL2_Config>
 8103ab4:	4603      	mov	r3, r0
 8103ab6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103ab8:	e00c      	b.n	8103ad4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	3324      	adds	r3, #36	; 0x24
 8103abe:	2101      	movs	r1, #1
 8103ac0:	4618      	mov	r0, r3
 8103ac2:	f000 fb9f 	bl	8104204 <RCCEx_PLL3_Config>
 8103ac6:	4603      	mov	r3, r0
 8103ac8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103aca:	e003      	b.n	8103ad4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103acc:	2301      	movs	r3, #1
 8103ace:	75fb      	strb	r3, [r7, #23]
      break;
 8103ad0:	e000      	b.n	8103ad4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ad4:	7dfb      	ldrb	r3, [r7, #23]
 8103ad6:	2b00      	cmp	r3, #0
 8103ad8:	d10e      	bne.n	8103af8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103ada:	4b05      	ldr	r3, [pc, #20]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ade:	f023 0207 	bic.w	r2, r3, #7
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103ae6:	4902      	ldr	r1, [pc, #8]	; (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ae8:	4313      	orrs	r3, r2
 8103aea:	654b      	str	r3, [r1, #84]	; 0x54
 8103aec:	e006      	b.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103aee:	bf00      	nop
 8103af0:	58024400 	.word	0x58024400
 8103af4:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103af8:	7dfb      	ldrb	r3, [r7, #23]
 8103afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	f003 0304 	and.w	r3, r3, #4
 8103b04:	2b00      	cmp	r3, #0
 8103b06:	d039      	beq.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103b0e:	2b05      	cmp	r3, #5
 8103b10:	d820      	bhi.n	8103b54 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103b12:	a201      	add	r2, pc, #4	; (adr r2, 8103b18 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b18:	08103b5b 	.word	0x08103b5b
 8103b1c:	08103b31 	.word	0x08103b31
 8103b20:	08103b43 	.word	0x08103b43
 8103b24:	08103b5b 	.word	0x08103b5b
 8103b28:	08103b5b 	.word	0x08103b5b
 8103b2c:	08103b5b 	.word	0x08103b5b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	3304      	adds	r3, #4
 8103b34:	2101      	movs	r1, #1
 8103b36:	4618      	mov	r0, r3
 8103b38:	f000 fab2 	bl	81040a0 <RCCEx_PLL2_Config>
 8103b3c:	4603      	mov	r3, r0
 8103b3e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103b40:	e00c      	b.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	3324      	adds	r3, #36	; 0x24
 8103b46:	2101      	movs	r1, #1
 8103b48:	4618      	mov	r0, r3
 8103b4a:	f000 fb5b 	bl	8104204 <RCCEx_PLL3_Config>
 8103b4e:	4603      	mov	r3, r0
 8103b50:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103b52:	e003      	b.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b54:	2301      	movs	r3, #1
 8103b56:	75fb      	strb	r3, [r7, #23]
      break;
 8103b58:	e000      	b.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b5c:	7dfb      	ldrb	r3, [r7, #23]
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	d10a      	bne.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103b62:	4bb7      	ldr	r3, [pc, #732]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b66:	f023 0207 	bic.w	r2, r3, #7
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103b70:	49b3      	ldr	r1, [pc, #716]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b72:	4313      	orrs	r3, r2
 8103b74:	658b      	str	r3, [r1, #88]	; 0x58
 8103b76:	e001      	b.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b78:	7dfb      	ldrb	r3, [r7, #23]
 8103b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	f003 0320 	and.w	r3, r3, #32
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d04b      	beq.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103b92:	d02e      	beq.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103b98:	d828      	bhi.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103b9e:	d02a      	beq.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ba4:	d822      	bhi.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103ba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103baa:	d026      	beq.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103bb0:	d81c      	bhi.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103bb6:	d010      	beq.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103bbc:	d816      	bhi.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103bbe:	2b00      	cmp	r3, #0
 8103bc0:	d01d      	beq.n	8103bfe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103bc6:	d111      	bne.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	3304      	adds	r3, #4
 8103bcc:	2100      	movs	r1, #0
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f000 fa66 	bl	81040a0 <RCCEx_PLL2_Config>
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103bd8:	e012      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	3324      	adds	r3, #36	; 0x24
 8103bde:	2102      	movs	r1, #2
 8103be0:	4618      	mov	r0, r3
 8103be2:	f000 fb0f 	bl	8104204 <RCCEx_PLL3_Config>
 8103be6:	4603      	mov	r3, r0
 8103be8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103bea:	e009      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bec:	2301      	movs	r3, #1
 8103bee:	75fb      	strb	r3, [r7, #23]
      break;
 8103bf0:	e006      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103bf2:	bf00      	nop
 8103bf4:	e004      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103bf6:	bf00      	nop
 8103bf8:	e002      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103bfa:	bf00      	nop
 8103bfc:	e000      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c00:	7dfb      	ldrb	r3, [r7, #23]
 8103c02:	2b00      	cmp	r3, #0
 8103c04:	d10a      	bne.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103c06:	4b8e      	ldr	r3, [pc, #568]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103c14:	498a      	ldr	r1, [pc, #552]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c16:	4313      	orrs	r3, r2
 8103c18:	654b      	str	r3, [r1, #84]	; 0x54
 8103c1a:	e001      	b.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c1c:	7dfb      	ldrb	r3, [r7, #23]
 8103c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	681b      	ldr	r3, [r3, #0]
 8103c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103c28:	2b00      	cmp	r3, #0
 8103c2a:	d04b      	beq.n	8103cc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103c32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103c36:	d02e      	beq.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103c38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103c3c:	d828      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103c42:	d02a      	beq.n	8103c9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103c48:	d822      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103c4e:	d026      	beq.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103c54:	d81c      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103c5a:	d010      	beq.n	8103c7e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103c60:	d816      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103c62:	2b00      	cmp	r3, #0
 8103c64:	d01d      	beq.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103c6a:	d111      	bne.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	3304      	adds	r3, #4
 8103c70:	2100      	movs	r1, #0
 8103c72:	4618      	mov	r0, r3
 8103c74:	f000 fa14 	bl	81040a0 <RCCEx_PLL2_Config>
 8103c78:	4603      	mov	r3, r0
 8103c7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103c7c:	e012      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	3324      	adds	r3, #36	; 0x24
 8103c82:	2102      	movs	r1, #2
 8103c84:	4618      	mov	r0, r3
 8103c86:	f000 fabd 	bl	8104204 <RCCEx_PLL3_Config>
 8103c8a:	4603      	mov	r3, r0
 8103c8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103c8e:	e009      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c90:	2301      	movs	r3, #1
 8103c92:	75fb      	strb	r3, [r7, #23]
      break;
 8103c94:	e006      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c96:	bf00      	nop
 8103c98:	e004      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c9a:	bf00      	nop
 8103c9c:	e002      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c9e:	bf00      	nop
 8103ca0:	e000      	b.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ca4:	7dfb      	ldrb	r3, [r7, #23]
 8103ca6:	2b00      	cmp	r3, #0
 8103ca8:	d10a      	bne.n	8103cc0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103caa:	4b65      	ldr	r3, [pc, #404]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103cb8:	4961      	ldr	r1, [pc, #388]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103cba:	4313      	orrs	r3, r2
 8103cbc:	658b      	str	r3, [r1, #88]	; 0x58
 8103cbe:	e001      	b.n	8103cc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cc0:	7dfb      	ldrb	r3, [r7, #23]
 8103cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	d04b      	beq.n	8103d68 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103cd6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103cda:	d02e      	beq.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103cdc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103ce0:	d828      	bhi.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103ce6:	d02a      	beq.n	8103d3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103cec:	d822      	bhi.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103cee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103cf2:	d026      	beq.n	8103d42 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103cf4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103cf8:	d81c      	bhi.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103cfe:	d010      	beq.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d04:	d816      	bhi.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103d06:	2b00      	cmp	r3, #0
 8103d08:	d01d      	beq.n	8103d46 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d0e:	d111      	bne.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	3304      	adds	r3, #4
 8103d14:	2100      	movs	r1, #0
 8103d16:	4618      	mov	r0, r3
 8103d18:	f000 f9c2 	bl	81040a0 <RCCEx_PLL2_Config>
 8103d1c:	4603      	mov	r3, r0
 8103d1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103d20:	e012      	b.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	3324      	adds	r3, #36	; 0x24
 8103d26:	2102      	movs	r1, #2
 8103d28:	4618      	mov	r0, r3
 8103d2a:	f000 fa6b 	bl	8104204 <RCCEx_PLL3_Config>
 8103d2e:	4603      	mov	r3, r0
 8103d30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103d32:	e009      	b.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d34:	2301      	movs	r3, #1
 8103d36:	75fb      	strb	r3, [r7, #23]
      break;
 8103d38:	e006      	b.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103d3a:	bf00      	nop
 8103d3c:	e004      	b.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103d3e:	bf00      	nop
 8103d40:	e002      	b.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103d42:	bf00      	nop
 8103d44:	e000      	b.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d48:	7dfb      	ldrb	r3, [r7, #23]
 8103d4a:	2b00      	cmp	r3, #0
 8103d4c:	d10a      	bne.n	8103d64 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103d4e:	4b3c      	ldr	r3, [pc, #240]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103d5c:	4938      	ldr	r1, [pc, #224]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d5e:	4313      	orrs	r3, r2
 8103d60:	658b      	str	r3, [r1, #88]	; 0x58
 8103d62:	e001      	b.n	8103d68 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d64:	7dfb      	ldrb	r3, [r7, #23]
 8103d66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	f003 0308 	and.w	r3, r3, #8
 8103d70:	2b00      	cmp	r3, #0
 8103d72:	d01a      	beq.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103d7e:	d10a      	bne.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	3324      	adds	r3, #36	; 0x24
 8103d84:	2102      	movs	r1, #2
 8103d86:	4618      	mov	r0, r3
 8103d88:	f000 fa3c 	bl	8104204 <RCCEx_PLL3_Config>
 8103d8c:	4603      	mov	r3, r0
 8103d8e:	2b00      	cmp	r3, #0
 8103d90:	d001      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103d92:	2301      	movs	r3, #1
 8103d94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103d96:	4b2a      	ldr	r3, [pc, #168]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103da4:	4926      	ldr	r1, [pc, #152]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103da6:	4313      	orrs	r3, r2
 8103da8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	681b      	ldr	r3, [r3, #0]
 8103dae:	f003 0310 	and.w	r3, r3, #16
 8103db2:	2b00      	cmp	r3, #0
 8103db4:	d01a      	beq.n	8103dec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103dc0:	d10a      	bne.n	8103dd8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	3324      	adds	r3, #36	; 0x24
 8103dc6:	2102      	movs	r1, #2
 8103dc8:	4618      	mov	r0, r3
 8103dca:	f000 fa1b 	bl	8104204 <RCCEx_PLL3_Config>
 8103dce:	4603      	mov	r3, r0
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d001      	beq.n	8103dd8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103dd4:	2301      	movs	r3, #1
 8103dd6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103dd8:	4b19      	ldr	r3, [pc, #100]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103de6:	4916      	ldr	r1, [pc, #88]	; (8103e40 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103de8:	4313      	orrs	r3, r2
 8103dea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	d036      	beq.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e02:	d01f      	beq.n	8103e44 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e08:	d817      	bhi.n	8103e3a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d003      	beq.n	8103e16 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e12:	d009      	beq.n	8103e28 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103e14:	e011      	b.n	8103e3a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	3304      	adds	r3, #4
 8103e1a:	2100      	movs	r1, #0
 8103e1c:	4618      	mov	r0, r3
 8103e1e:	f000 f93f 	bl	81040a0 <RCCEx_PLL2_Config>
 8103e22:	4603      	mov	r3, r0
 8103e24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103e26:	e00e      	b.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	3324      	adds	r3, #36	; 0x24
 8103e2c:	2102      	movs	r1, #2
 8103e2e:	4618      	mov	r0, r3
 8103e30:	f000 f9e8 	bl	8104204 <RCCEx_PLL3_Config>
 8103e34:	4603      	mov	r3, r0
 8103e36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103e38:	e005      	b.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e3a:	2301      	movs	r3, #1
 8103e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8103e3e:	e002      	b.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103e40:	58024400 	.word	0x58024400
      break;
 8103e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e46:	7dfb      	ldrb	r3, [r7, #23]
 8103e48:	2b00      	cmp	r3, #0
 8103e4a:	d10a      	bne.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103e4c:	4b93      	ldr	r3, [pc, #588]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103e5a:	4990      	ldr	r1, [pc, #576]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e5c:	4313      	orrs	r3, r2
 8103e5e:	658b      	str	r3, [r1, #88]	; 0x58
 8103e60:	e001      	b.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e62:	7dfb      	ldrb	r3, [r7, #23]
 8103e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d033      	beq.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103e78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103e7c:	d01c      	beq.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103e7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103e82:	d816      	bhi.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103e88:	d003      	beq.n	8103e92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103e8e:	d007      	beq.n	8103ea0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103e90:	e00f      	b.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e92:	4b82      	ldr	r3, [pc, #520]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e96:	4a81      	ldr	r2, [pc, #516]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103e9e:	e00c      	b.n	8103eba <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	3324      	adds	r3, #36	; 0x24
 8103ea4:	2101      	movs	r1, #1
 8103ea6:	4618      	mov	r0, r3
 8103ea8:	f000 f9ac 	bl	8104204 <RCCEx_PLL3_Config>
 8103eac:	4603      	mov	r3, r0
 8103eae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103eb0:	e003      	b.n	8103eba <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8103eb6:	e000      	b.n	8103eba <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103eba:	7dfb      	ldrb	r3, [r7, #23]
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d10a      	bne.n	8103ed6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103ec0:	4b76      	ldr	r3, [pc, #472]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103ece:	4973      	ldr	r1, [pc, #460]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ed0:	4313      	orrs	r3, r2
 8103ed2:	654b      	str	r3, [r1, #84]	; 0x54
 8103ed4:	e001      	b.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ed6:	7dfb      	ldrb	r3, [r7, #23]
 8103ed8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103ee2:	2b00      	cmp	r3, #0
 8103ee4:	d029      	beq.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	d003      	beq.n	8103ef6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103ef2:	d007      	beq.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103ef4:	e00f      	b.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ef6:	4b69      	ldr	r3, [pc, #420]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103efa:	4a68      	ldr	r2, [pc, #416]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103f02:	e00b      	b.n	8103f1c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	3304      	adds	r3, #4
 8103f08:	2102      	movs	r1, #2
 8103f0a:	4618      	mov	r0, r3
 8103f0c:	f000 f8c8 	bl	81040a0 <RCCEx_PLL2_Config>
 8103f10:	4603      	mov	r3, r0
 8103f12:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103f14:	e002      	b.n	8103f1c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103f16:	2301      	movs	r3, #1
 8103f18:	75fb      	strb	r3, [r7, #23]
      break;
 8103f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f1c:	7dfb      	ldrb	r3, [r7, #23]
 8103f1e:	2b00      	cmp	r3, #0
 8103f20:	d109      	bne.n	8103f36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103f22:	4b5e      	ldr	r3, [pc, #376]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f2e:	495b      	ldr	r1, [pc, #364]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f30:	4313      	orrs	r3, r2
 8103f32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103f34:	e001      	b.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f36:	7dfb      	ldrb	r3, [r7, #23]
 8103f38:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	d00a      	beq.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	3324      	adds	r3, #36	; 0x24
 8103f4a:	2102      	movs	r1, #2
 8103f4c:	4618      	mov	r0, r3
 8103f4e:	f000 f959 	bl	8104204 <RCCEx_PLL3_Config>
 8103f52:	4603      	mov	r3, r0
 8103f54:	2b00      	cmp	r3, #0
 8103f56:	d001      	beq.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103f58:	2301      	movs	r3, #1
 8103f5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d030      	beq.n	8103fca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103f70:	d017      	beq.n	8103fa2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103f76:	d811      	bhi.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103f7c:	d013      	beq.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103f82:	d80b      	bhi.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103f84:	2b00      	cmp	r3, #0
 8103f86:	d010      	beq.n	8103faa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f8c:	d106      	bne.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f8e:	4b43      	ldr	r3, [pc, #268]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f92:	4a42      	ldr	r2, [pc, #264]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103f9a:	e007      	b.n	8103fac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f9c:	2301      	movs	r3, #1
 8103f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8103fa0:	e004      	b.n	8103fac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103fa2:	bf00      	nop
 8103fa4:	e002      	b.n	8103fac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103fa6:	bf00      	nop
 8103fa8:	e000      	b.n	8103fac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fac:	7dfb      	ldrb	r3, [r7, #23]
 8103fae:	2b00      	cmp	r3, #0
 8103fb0:	d109      	bne.n	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103fb2:	4b3a      	ldr	r3, [pc, #232]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103fbe:	4937      	ldr	r1, [pc, #220]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fc0:	4313      	orrs	r3, r2
 8103fc2:	654b      	str	r3, [r1, #84]	; 0x54
 8103fc4:	e001      	b.n	8103fca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fc6:	7dfb      	ldrb	r3, [r7, #23]
 8103fc8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103fd2:	2b00      	cmp	r3, #0
 8103fd4:	d008      	beq.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103fd6:	4b31      	ldr	r3, [pc, #196]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fe2:	492e      	ldr	r1, [pc, #184]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fe4:	4313      	orrs	r3, r2
 8103fe6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103ff0:	2b00      	cmp	r3, #0
 8103ff2:	d009      	beq.n	8104008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103ff4:	4b29      	ldr	r3, [pc, #164]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ff6:	691b      	ldr	r3, [r3, #16]
 8103ff8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104002:	4926      	ldr	r1, [pc, #152]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104004:	4313      	orrs	r3, r2
 8104006:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104010:	2b00      	cmp	r3, #0
 8104012:	d008      	beq.n	8104026 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104014:	4b21      	ldr	r3, [pc, #132]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104018:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104020:	491e      	ldr	r1, [pc, #120]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104022:	4313      	orrs	r3, r2
 8104024:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810402e:	2b00      	cmp	r3, #0
 8104030:	d00d      	beq.n	810404e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104032:	4b1a      	ldr	r3, [pc, #104]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104034:	691b      	ldr	r3, [r3, #16]
 8104036:	4a19      	ldr	r2, [pc, #100]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810403c:	6113      	str	r3, [r2, #16]
 810403e:	4b17      	ldr	r3, [pc, #92]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104040:	691a      	ldr	r2, [r3, #16]
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104048:	4914      	ldr	r1, [pc, #80]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810404a:	4313      	orrs	r3, r2
 810404c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	2b00      	cmp	r3, #0
 8104054:	da08      	bge.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104056:	4b11      	ldr	r3, [pc, #68]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810405a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104062:	490e      	ldr	r1, [pc, #56]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104064:	4313      	orrs	r3, r2
 8104066:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	681b      	ldr	r3, [r3, #0]
 810406c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104070:	2b00      	cmp	r3, #0
 8104072:	d009      	beq.n	8104088 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104074:	4b09      	ldr	r3, [pc, #36]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104078:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104082:	4906      	ldr	r1, [pc, #24]	; (810409c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104084:	4313      	orrs	r3, r2
 8104086:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104088:	7dbb      	ldrb	r3, [r7, #22]
 810408a:	2b00      	cmp	r3, #0
 810408c:	d101      	bne.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810408e:	2300      	movs	r3, #0
 8104090:	e000      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8104092:	2301      	movs	r3, #1
}
 8104094:	4618      	mov	r0, r3
 8104096:	3718      	adds	r7, #24
 8104098:	46bd      	mov	sp, r7
 810409a:	bd80      	pop	{r7, pc}
 810409c:	58024400 	.word	0x58024400

081040a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81040a0:	b580      	push	{r7, lr}
 81040a2:	b084      	sub	sp, #16
 81040a4:	af00      	add	r7, sp, #0
 81040a6:	6078      	str	r0, [r7, #4]
 81040a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81040aa:	2300      	movs	r3, #0
 81040ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81040ae:	4b54      	ldr	r3, [pc, #336]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040b2:	f003 0303 	and.w	r3, r3, #3
 81040b6:	2b03      	cmp	r3, #3
 81040b8:	d101      	bne.n	81040be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81040ba:	2301      	movs	r3, #1
 81040bc:	e09b      	b.n	81041f6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81040be:	4b50      	ldr	r3, [pc, #320]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	4a4f      	ldr	r2, [pc, #316]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81040c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81040c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81040ca:	f7fd fd91 	bl	8101bf0 <HAL_GetTick>
 81040ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81040d0:	e008      	b.n	81040e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81040d2:	f7fd fd8d 	bl	8101bf0 <HAL_GetTick>
 81040d6:	4602      	mov	r2, r0
 81040d8:	68bb      	ldr	r3, [r7, #8]
 81040da:	1ad3      	subs	r3, r2, r3
 81040dc:	2b02      	cmp	r3, #2
 81040de:	d901      	bls.n	81040e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81040e0:	2303      	movs	r3, #3
 81040e2:	e088      	b.n	81041f6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81040e4:	4b46      	ldr	r3, [pc, #280]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81040e6:	681b      	ldr	r3, [r3, #0]
 81040e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81040ec:	2b00      	cmp	r3, #0
 81040ee:	d1f0      	bne.n	81040d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81040f0:	4b43      	ldr	r3, [pc, #268]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	031b      	lsls	r3, r3, #12
 81040fe:	4940      	ldr	r1, [pc, #256]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104100:	4313      	orrs	r3, r2
 8104102:	628b      	str	r3, [r1, #40]	; 0x28
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	685b      	ldr	r3, [r3, #4]
 8104108:	3b01      	subs	r3, #1
 810410a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	689b      	ldr	r3, [r3, #8]
 8104112:	3b01      	subs	r3, #1
 8104114:	025b      	lsls	r3, r3, #9
 8104116:	b29b      	uxth	r3, r3
 8104118:	431a      	orrs	r2, r3
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	68db      	ldr	r3, [r3, #12]
 810411e:	3b01      	subs	r3, #1
 8104120:	041b      	lsls	r3, r3, #16
 8104122:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104126:	431a      	orrs	r2, r3
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	691b      	ldr	r3, [r3, #16]
 810412c:	3b01      	subs	r3, #1
 810412e:	061b      	lsls	r3, r3, #24
 8104130:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104134:	4932      	ldr	r1, [pc, #200]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104136:	4313      	orrs	r3, r2
 8104138:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810413a:	4b31      	ldr	r3, [pc, #196]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 810413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810413e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	695b      	ldr	r3, [r3, #20]
 8104146:	492e      	ldr	r1, [pc, #184]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104148:	4313      	orrs	r3, r2
 810414a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810414c:	4b2c      	ldr	r3, [pc, #176]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 810414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104150:	f023 0220 	bic.w	r2, r3, #32
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	699b      	ldr	r3, [r3, #24]
 8104158:	4929      	ldr	r1, [pc, #164]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 810415a:	4313      	orrs	r3, r2
 810415c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810415e:	4b28      	ldr	r3, [pc, #160]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104162:	4a27      	ldr	r2, [pc, #156]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104164:	f023 0310 	bic.w	r3, r3, #16
 8104168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810416a:	4b25      	ldr	r3, [pc, #148]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 810416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810416e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104172:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104176:	687a      	ldr	r2, [r7, #4]
 8104178:	69d2      	ldr	r2, [r2, #28]
 810417a:	00d2      	lsls	r2, r2, #3
 810417c:	4920      	ldr	r1, [pc, #128]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 810417e:	4313      	orrs	r3, r2
 8104180:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104182:	4b1f      	ldr	r3, [pc, #124]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104186:	4a1e      	ldr	r2, [pc, #120]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104188:	f043 0310 	orr.w	r3, r3, #16
 810418c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810418e:	683b      	ldr	r3, [r7, #0]
 8104190:	2b00      	cmp	r3, #0
 8104192:	d106      	bne.n	81041a2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104194:	4b1a      	ldr	r3, [pc, #104]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 8104196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104198:	4a19      	ldr	r2, [pc, #100]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 810419a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810419e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81041a0:	e00f      	b.n	81041c2 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81041a2:	683b      	ldr	r3, [r7, #0]
 81041a4:	2b01      	cmp	r3, #1
 81041a6:	d106      	bne.n	81041b6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81041a8:	4b15      	ldr	r3, [pc, #84]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041ac:	4a14      	ldr	r2, [pc, #80]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81041b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81041b4:	e005      	b.n	81041c2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81041b6:	4b12      	ldr	r3, [pc, #72]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041ba:	4a11      	ldr	r2, [pc, #68]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81041c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81041c2:	4b0f      	ldr	r3, [pc, #60]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	4a0e      	ldr	r2, [pc, #56]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81041cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81041ce:	f7fd fd0f 	bl	8101bf0 <HAL_GetTick>
 81041d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81041d4:	e008      	b.n	81041e8 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81041d6:	f7fd fd0b 	bl	8101bf0 <HAL_GetTick>
 81041da:	4602      	mov	r2, r0
 81041dc:	68bb      	ldr	r3, [r7, #8]
 81041de:	1ad3      	subs	r3, r2, r3
 81041e0:	2b02      	cmp	r3, #2
 81041e2:	d901      	bls.n	81041e8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81041e4:	2303      	movs	r3, #3
 81041e6:	e006      	b.n	81041f6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81041e8:	4b05      	ldr	r3, [pc, #20]	; (8104200 <RCCEx_PLL2_Config+0x160>)
 81041ea:	681b      	ldr	r3, [r3, #0]
 81041ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d0f0      	beq.n	81041d6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81041f6:	4618      	mov	r0, r3
 81041f8:	3710      	adds	r7, #16
 81041fa:	46bd      	mov	sp, r7
 81041fc:	bd80      	pop	{r7, pc}
 81041fe:	bf00      	nop
 8104200:	58024400 	.word	0x58024400

08104204 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104204:	b580      	push	{r7, lr}
 8104206:	b084      	sub	sp, #16
 8104208:	af00      	add	r7, sp, #0
 810420a:	6078      	str	r0, [r7, #4]
 810420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810420e:	2300      	movs	r3, #0
 8104210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104212:	4b54      	ldr	r3, [pc, #336]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104216:	f003 0303 	and.w	r3, r3, #3
 810421a:	2b03      	cmp	r3, #3
 810421c:	d101      	bne.n	8104222 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810421e:	2301      	movs	r3, #1
 8104220:	e09b      	b.n	810435a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104222:	4b50      	ldr	r3, [pc, #320]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4a4f      	ldr	r2, [pc, #316]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810422c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810422e:	f7fd fcdf 	bl	8101bf0 <HAL_GetTick>
 8104232:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104234:	e008      	b.n	8104248 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104236:	f7fd fcdb 	bl	8101bf0 <HAL_GetTick>
 810423a:	4602      	mov	r2, r0
 810423c:	68bb      	ldr	r3, [r7, #8]
 810423e:	1ad3      	subs	r3, r2, r3
 8104240:	2b02      	cmp	r3, #2
 8104242:	d901      	bls.n	8104248 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104244:	2303      	movs	r3, #3
 8104246:	e088      	b.n	810435a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104248:	4b46      	ldr	r3, [pc, #280]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104250:	2b00      	cmp	r3, #0
 8104252:	d1f0      	bne.n	8104236 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104254:	4b43      	ldr	r3, [pc, #268]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104258:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	051b      	lsls	r3, r3, #20
 8104262:	4940      	ldr	r1, [pc, #256]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104264:	4313      	orrs	r3, r2
 8104266:	628b      	str	r3, [r1, #40]	; 0x28
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	685b      	ldr	r3, [r3, #4]
 810426c:	3b01      	subs	r3, #1
 810426e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	689b      	ldr	r3, [r3, #8]
 8104276:	3b01      	subs	r3, #1
 8104278:	025b      	lsls	r3, r3, #9
 810427a:	b29b      	uxth	r3, r3
 810427c:	431a      	orrs	r2, r3
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	68db      	ldr	r3, [r3, #12]
 8104282:	3b01      	subs	r3, #1
 8104284:	041b      	lsls	r3, r3, #16
 8104286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810428a:	431a      	orrs	r2, r3
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	691b      	ldr	r3, [r3, #16]
 8104290:	3b01      	subs	r3, #1
 8104292:	061b      	lsls	r3, r3, #24
 8104294:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104298:	4932      	ldr	r1, [pc, #200]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 810429a:	4313      	orrs	r3, r2
 810429c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810429e:	4b31      	ldr	r3, [pc, #196]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	695b      	ldr	r3, [r3, #20]
 81042aa:	492e      	ldr	r1, [pc, #184]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042ac:	4313      	orrs	r3, r2
 81042ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81042b0:	4b2c      	ldr	r3, [pc, #176]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	699b      	ldr	r3, [r3, #24]
 81042bc:	4929      	ldr	r1, [pc, #164]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042be:	4313      	orrs	r3, r2
 81042c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81042c2:	4b28      	ldr	r3, [pc, #160]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042c6:	4a27      	ldr	r2, [pc, #156]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81042cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81042ce:	4b25      	ldr	r3, [pc, #148]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81042d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81042da:	687a      	ldr	r2, [r7, #4]
 81042dc:	69d2      	ldr	r2, [r2, #28]
 81042de:	00d2      	lsls	r2, r2, #3
 81042e0:	4920      	ldr	r1, [pc, #128]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042e2:	4313      	orrs	r3, r2
 81042e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81042e6:	4b1f      	ldr	r3, [pc, #124]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042ea:	4a1e      	ldr	r2, [pc, #120]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81042f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81042f2:	683b      	ldr	r3, [r7, #0]
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	d106      	bne.n	8104306 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81042f8:	4b1a      	ldr	r3, [pc, #104]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042fc:	4a19      	ldr	r2, [pc, #100]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 81042fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104302:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104304:	e00f      	b.n	8104326 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104306:	683b      	ldr	r3, [r7, #0]
 8104308:	2b01      	cmp	r3, #1
 810430a:	d106      	bne.n	810431a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810430c:	4b15      	ldr	r3, [pc, #84]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 810430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104310:	4a14      	ldr	r2, [pc, #80]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104316:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104318:	e005      	b.n	8104326 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810431a:	4b12      	ldr	r3, [pc, #72]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 810431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810431e:	4a11      	ldr	r2, [pc, #68]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104324:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104326:	4b0f      	ldr	r3, [pc, #60]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 8104328:	681b      	ldr	r3, [r3, #0]
 810432a:	4a0e      	ldr	r2, [pc, #56]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 810432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104332:	f7fd fc5d 	bl	8101bf0 <HAL_GetTick>
 8104336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104338:	e008      	b.n	810434c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810433a:	f7fd fc59 	bl	8101bf0 <HAL_GetTick>
 810433e:	4602      	mov	r2, r0
 8104340:	68bb      	ldr	r3, [r7, #8]
 8104342:	1ad3      	subs	r3, r2, r3
 8104344:	2b02      	cmp	r3, #2
 8104346:	d901      	bls.n	810434c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104348:	2303      	movs	r3, #3
 810434a:	e006      	b.n	810435a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810434c:	4b05      	ldr	r3, [pc, #20]	; (8104364 <RCCEx_PLL3_Config+0x160>)
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104354:	2b00      	cmp	r3, #0
 8104356:	d0f0      	beq.n	810433a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104358:	7bfb      	ldrb	r3, [r7, #15]
}
 810435a:	4618      	mov	r0, r3
 810435c:	3710      	adds	r7, #16
 810435e:	46bd      	mov	sp, r7
 8104360:	bd80      	pop	{r7, pc}
 8104362:	bf00      	nop
 8104364:	58024400 	.word	0x58024400

08104368 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104368:	b580      	push	{r7, lr}
 810436a:	b084      	sub	sp, #16
 810436c:	af00      	add	r7, sp, #0
 810436e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8104370:	2300      	movs	r3, #0
 8104372:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	2b00      	cmp	r3, #0
 8104378:	d101      	bne.n	810437e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810437a:	2301      	movs	r3, #1
 810437c:	e0eb      	b.n	8104556 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	2200      	movs	r2, #0
 8104382:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a75      	ldr	r2, [pc, #468]	; (8104560 <HAL_SPI_Init+0x1f8>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d00f      	beq.n	81043ae <HAL_SPI_Init+0x46>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a74      	ldr	r2, [pc, #464]	; (8104564 <HAL_SPI_Init+0x1fc>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d00a      	beq.n	81043ae <HAL_SPI_Init+0x46>
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4a72      	ldr	r2, [pc, #456]	; (8104568 <HAL_SPI_Init+0x200>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d005      	beq.n	81043ae <HAL_SPI_Init+0x46>
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	68db      	ldr	r3, [r3, #12]
 81043a6:	2b0f      	cmp	r3, #15
 81043a8:	d901      	bls.n	81043ae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 81043aa:	2301      	movs	r3, #1
 81043ac:	e0d3      	b.n	8104556 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81043ae:	6878      	ldr	r0, [r7, #4]
 81043b0:	f000 f8dc 	bl	810456c <SPI_GetPacketSize>
 81043b4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a69      	ldr	r2, [pc, #420]	; (8104560 <HAL_SPI_Init+0x1f8>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d00c      	beq.n	81043da <HAL_SPI_Init+0x72>
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a67      	ldr	r2, [pc, #412]	; (8104564 <HAL_SPI_Init+0x1fc>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d007      	beq.n	81043da <HAL_SPI_Init+0x72>
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a66      	ldr	r2, [pc, #408]	; (8104568 <HAL_SPI_Init+0x200>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d002      	beq.n	81043da <HAL_SPI_Init+0x72>
 81043d4:	68bb      	ldr	r3, [r7, #8]
 81043d6:	2b08      	cmp	r3, #8
 81043d8:	d811      	bhi.n	81043fe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81043de:	4a60      	ldr	r2, [pc, #384]	; (8104560 <HAL_SPI_Init+0x1f8>)
 81043e0:	4293      	cmp	r3, r2
 81043e2:	d009      	beq.n	81043f8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	4a5e      	ldr	r2, [pc, #376]	; (8104564 <HAL_SPI_Init+0x1fc>)
 81043ea:	4293      	cmp	r3, r2
 81043ec:	d004      	beq.n	81043f8 <HAL_SPI_Init+0x90>
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	4a5d      	ldr	r2, [pc, #372]	; (8104568 <HAL_SPI_Init+0x200>)
 81043f4:	4293      	cmp	r3, r2
 81043f6:	d104      	bne.n	8104402 <HAL_SPI_Init+0x9a>
 81043f8:	68bb      	ldr	r3, [r7, #8]
 81043fa:	2b10      	cmp	r3, #16
 81043fc:	d901      	bls.n	8104402 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 81043fe:	2301      	movs	r3, #1
 8104400:	e0a9      	b.n	8104556 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104408:	b2db      	uxtb	r3, r3
 810440a:	2b00      	cmp	r3, #0
 810440c:	d106      	bne.n	810441c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	2200      	movs	r2, #0
 8104412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104416:	6878      	ldr	r0, [r7, #4]
 8104418:	f7fd f950 	bl	81016bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	2202      	movs	r2, #2
 8104420:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	681a      	ldr	r2, [r3, #0]
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	f022 0201 	bic.w	r2, r2, #1
 8104432:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	699b      	ldr	r3, [r3, #24]
 8104438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810443c:	d119      	bne.n	8104472 <HAL_SPI_Init+0x10a>
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	685b      	ldr	r3, [r3, #4]
 8104442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104446:	d103      	bne.n	8104450 <HAL_SPI_Init+0xe8>
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810444c:	2b00      	cmp	r3, #0
 810444e:	d008      	beq.n	8104462 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104454:	2b00      	cmp	r3, #0
 8104456:	d10c      	bne.n	8104472 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810445c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104460:	d107      	bne.n	8104472 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	681a      	ldr	r2, [r3, #0]
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104470:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	69da      	ldr	r2, [r3, #28]
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810447a:	431a      	orrs	r2, r3
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	431a      	orrs	r2, r3
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104484:	ea42 0103 	orr.w	r1, r2, r3
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	68da      	ldr	r2, [r3, #12]
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	430a      	orrs	r2, r1
 8104492:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810449c:	431a      	orrs	r2, r3
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81044a2:	431a      	orrs	r2, r3
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	699b      	ldr	r3, [r3, #24]
 81044a8:	431a      	orrs	r2, r3
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	691b      	ldr	r3, [r3, #16]
 81044ae:	431a      	orrs	r2, r3
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	695b      	ldr	r3, [r3, #20]
 81044b4:	431a      	orrs	r2, r3
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	6a1b      	ldr	r3, [r3, #32]
 81044ba:	431a      	orrs	r2, r3
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	685b      	ldr	r3, [r3, #4]
 81044c0:	431a      	orrs	r2, r3
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81044c6:	431a      	orrs	r2, r3
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	689b      	ldr	r3, [r3, #8]
 81044cc:	431a      	orrs	r2, r3
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81044d2:	ea42 0103 	orr.w	r1, r2, r3
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	430a      	orrs	r2, r1
 81044e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	685b      	ldr	r3, [r3, #4]
 81044e6:	2b00      	cmp	r3, #0
 81044e8:	d113      	bne.n	8104512 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	681b      	ldr	r3, [r3, #0]
 81044ee:	689b      	ldr	r3, [r3, #8]
 81044f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81044fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	689b      	ldr	r3, [r3, #8]
 8104504:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8104510:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	f022 0201 	bic.w	r2, r2, #1
 8104520:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	685b      	ldr	r3, [r3, #4]
 8104526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810452a:	2b00      	cmp	r3, #0
 810452c:	d00a      	beq.n	8104544 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	68db      	ldr	r3, [r3, #12]
 8104534:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	430a      	orrs	r2, r1
 8104542:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	2200      	movs	r2, #0
 8104548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	2201      	movs	r2, #1
 8104550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104554:	2300      	movs	r3, #0
}
 8104556:	4618      	mov	r0, r3
 8104558:	3710      	adds	r7, #16
 810455a:	46bd      	mov	sp, r7
 810455c:	bd80      	pop	{r7, pc}
 810455e:	bf00      	nop
 8104560:	40013000 	.word	0x40013000
 8104564:	40003800 	.word	0x40003800
 8104568:	40003c00 	.word	0x40003c00

0810456c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810456c:	b480      	push	{r7}
 810456e:	b085      	sub	sp, #20
 8104570:	af00      	add	r7, sp, #0
 8104572:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104578:	095b      	lsrs	r3, r3, #5
 810457a:	3301      	adds	r3, #1
 810457c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	68db      	ldr	r3, [r3, #12]
 8104582:	3301      	adds	r3, #1
 8104584:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104586:	68bb      	ldr	r3, [r7, #8]
 8104588:	3307      	adds	r3, #7
 810458a:	08db      	lsrs	r3, r3, #3
 810458c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810458e:	68bb      	ldr	r3, [r7, #8]
 8104590:	68fa      	ldr	r2, [r7, #12]
 8104592:	fb02 f303 	mul.w	r3, r2, r3
}
 8104596:	4618      	mov	r0, r3
 8104598:	3714      	adds	r7, #20
 810459a:	46bd      	mov	sp, r7
 810459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045a0:	4770      	bx	lr

081045a2 <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 81045a2:	b084      	sub	sp, #16
 81045a4:	b580      	push	{r7, lr}
 81045a6:	b086      	sub	sp, #24
 81045a8:	af04      	add	r7, sp, #16
 81045aa:	f107 0c10 	add.w	ip, r7, #16
 81045ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 81045b2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81045b6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, HAL_MAX_DELAY);
 81045b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 81045bc:	b299      	uxth	r1, r3
 81045be:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81045c2:	b29a      	uxth	r2, r3
 81045c4:	f04f 33ff 	mov.w	r3, #4294967295
 81045c8:	9302      	str	r3, [sp, #8]
 81045ca:	2301      	movs	r3, #1
 81045cc:	9301      	str	r3, [sp, #4]
 81045ce:	1d3b      	adds	r3, r7, #4
 81045d0:	9300      	str	r3, [sp, #0]
 81045d2:	2301      	movs	r3, #1
 81045d4:	f107 0010 	add.w	r0, r7, #16
 81045d8:	f7fd ff24 	bl	8102424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 81045dc:	200a      	movs	r0, #10
 81045de:	f7fd fb13 	bl	8101c08 <HAL_Delay>
}
 81045e2:	bf00      	nop
 81045e4:	3708      	adds	r7, #8
 81045e6:	46bd      	mov	sp, r7
 81045e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81045ec:	b004      	add	sp, #16
 81045ee:	4770      	bx	lr

081045f0 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 81045f0:	b084      	sub	sp, #16
 81045f2:	b580      	push	{r7, lr}
 81045f4:	b084      	sub	sp, #16
 81045f6:	af04      	add	r7, sp, #16
 81045f8:	f107 0c08 	add.w	ip, r7, #8
 81045fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, HAL_MAX_DELAY-1);
 8104600:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8104604:	b299      	uxth	r1, r3
 8104606:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 810460a:	b29a      	uxth	r2, r3
 810460c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8104610:	b29b      	uxth	r3, r3
 8104612:	f06f 0001 	mvn.w	r0, #1
 8104616:	9002      	str	r0, [sp, #8]
 8104618:	9301      	str	r3, [sp, #4]
 810461a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810461c:	9300      	str	r3, [sp, #0]
 810461e:	2301      	movs	r3, #1
 8104620:	f107 0008 	add.w	r0, r7, #8
 8104624:	f7fe f812 	bl	810264c <HAL_I2C_Mem_Read>
}
 8104628:	bf00      	nop
 810462a:	46bd      	mov	sp, r7
 810462c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8104630:	b004      	add	sp, #16
 8104632:	4770      	bx	lr

08104634 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 8104634:	b084      	sub	sp, #16
 8104636:	b5b0      	push	{r4, r5, r7, lr}
 8104638:	b092      	sub	sp, #72	; 0x48
 810463a:	af12      	add	r7, sp, #72	; 0x48
 810463c:	f107 0410 	add.w	r4, r7, #16
 8104640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8104644:	2325      	movs	r3, #37	; 0x25
 8104646:	220c      	movs	r2, #12
 8104648:	9211      	str	r2, [sp, #68]	; 0x44
 810464a:	9310      	str	r3, [sp, #64]	; 0x40
 810464c:	466d      	mov	r5, sp
 810464e:	f107 0420 	add.w	r4, r7, #32
 8104652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810465a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810465c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810465e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104662:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104666:	f107 0310 	add.w	r3, r7, #16
 810466a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810466c:	f7ff ff99 	bl	81045a2 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104670:	2226      	movs	r2, #38	; 0x26
 8104672:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8104676:	9311      	str	r3, [sp, #68]	; 0x44
 8104678:	9210      	str	r2, [sp, #64]	; 0x40
 810467a:	466d      	mov	r5, sp
 810467c:	f107 0420 	add.w	r4, r7, #32
 8104680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810468a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810468c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104690:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104694:	f107 0310 	add.w	r3, r7, #16
 8104698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810469a:	f7ff ff82 	bl	81045a2 <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 810469e:	2263      	movs	r2, #99	; 0x63
 81046a0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81046a4:	9311      	str	r3, [sp, #68]	; 0x44
 81046a6:	9210      	str	r2, [sp, #64]	; 0x40
 81046a8:	466d      	mov	r5, sp
 81046aa:	f107 0420 	add.w	r4, r7, #32
 81046ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046c2:	f107 0310 	add.w	r3, r7, #16
 81046c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046c8:	f7ff ff6b 	bl	81045a2 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 81046cc:	2227      	movs	r2, #39	; 0x27
 81046ce:	2380      	movs	r3, #128	; 0x80
 81046d0:	f043 0301 	orr.w	r3, r3, #1
 81046d4:	b2db      	uxtb	r3, r3
 81046d6:	9311      	str	r3, [sp, #68]	; 0x44
 81046d8:	9210      	str	r2, [sp, #64]	; 0x40
 81046da:	466d      	mov	r5, sp
 81046dc:	f107 0420 	add.w	r4, r7, #32
 81046e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046f4:	f107 0310 	add.w	r3, r7, #16
 81046f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046fa:	f7ff ff52 	bl	81045a2 <writeRegister>
}
 81046fe:	bf00      	nop
 8104700:	46bd      	mov	sp, r7
 8104702:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104706:	b004      	add	sp, #16
 8104708:	4770      	bx	lr

0810470a <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 810470a:	b084      	sub	sp, #16
 810470c:	b5b0      	push	{r4, r5, r7, lr}
 810470e:	b094      	sub	sp, #80	; 0x50
 8104710:	af14      	add	r7, sp, #80	; 0x50
 8104712:	f107 0410 	add.w	r4, r7, #16
 8104716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 810471a:	2225      	movs	r2, #37	; 0x25
 810471c:	210c      	movs	r1, #12
 810471e:	2380      	movs	r3, #128	; 0x80
 8104720:	430b      	orrs	r3, r1
 8104722:	b2db      	uxtb	r3, r3
 8104724:	9311      	str	r3, [sp, #68]	; 0x44
 8104726:	9210      	str	r2, [sp, #64]	; 0x40
 8104728:	466d      	mov	r5, sp
 810472a:	f107 0420 	add.w	r4, r7, #32
 810472e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810473a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810473e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104742:	f107 0310 	add.w	r3, r7, #16
 8104746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104748:	f7ff ff2b 	bl	81045a2 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 810474c:	2226      	movs	r2, #38	; 0x26
 810474e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8104752:	9311      	str	r3, [sp, #68]	; 0x44
 8104754:	9210      	str	r2, [sp, #64]	; 0x40
 8104756:	466d      	mov	r5, sp
 8104758:	f107 0420 	add.w	r4, r7, #32
 810475c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810475e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104768:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810476c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104770:	f107 0310 	add.w	r3, r7, #16
 8104774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104776:	f7ff ff14 	bl	81045a2 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 810477a:	2227      	movs	r2, #39	; 0x27
 810477c:	2180      	movs	r1, #128	; 0x80
 810477e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8104782:	430b      	orrs	r3, r1
 8104784:	b2db      	uxtb	r3, r3
 8104786:	9311      	str	r3, [sp, #68]	; 0x44
 8104788:	9210      	str	r2, [sp, #64]	; 0x40
 810478a:	466d      	mov	r5, sp
 810478c:	f107 0420 	add.w	r4, r7, #32
 8104790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810479a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810479c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047a4:	f107 0310 	add.w	r3, r7, #16
 81047a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047aa:	f7ff fefa 	bl	81045a2 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 81047ae:	2001      	movs	r0, #1
 81047b0:	f7fd fa2a 	bl	8101c08 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 81047b4:	2249      	movs	r2, #73	; 0x49
 81047b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81047b8:	9312      	str	r3, [sp, #72]	; 0x48
 81047ba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81047be:	9311      	str	r3, [sp, #68]	; 0x44
 81047c0:	9210      	str	r2, [sp, #64]	; 0x40
 81047c2:	466d      	mov	r5, sp
 81047c4:	f107 0420 	add.w	r4, r7, #32
 81047c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047dc:	f107 0310 	add.w	r3, r7, #16
 81047e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047e2:	f7ff ff05 	bl	81045f0 <readRegisters>
}
 81047e6:	bf00      	nop
 81047e8:	46bd      	mov	sp, r7
 81047ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81047ee:	b004      	add	sp, #16
 81047f0:	4770      	bx	lr
	...

081047f4 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 81047f4:	b084      	sub	sp, #16
 81047f6:	b5b0      	push	{r4, r5, r7, lr}
 81047f8:	b094      	sub	sp, #80	; 0x50
 81047fa:	af14      	add	r7, sp, #80	; 0x50
 81047fc:	f107 0410 	add.w	r4, r7, #16
 8104800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 8104804:	2375      	movs	r3, #117	; 0x75
 8104806:	4a0f      	ldr	r2, [pc, #60]	; (8104844 <whoAmI+0x50>)
 8104808:	9212      	str	r2, [sp, #72]	; 0x48
 810480a:	2201      	movs	r2, #1
 810480c:	9211      	str	r2, [sp, #68]	; 0x44
 810480e:	9310      	str	r3, [sp, #64]	; 0x40
 8104810:	466d      	mov	r5, sp
 8104812:	f107 0420 	add.w	r4, r7, #32
 8104816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810481a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810481c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810481e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104822:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104826:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810482a:	f107 0310 	add.w	r3, r7, #16
 810482e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104830:	f7ff fede 	bl	81045f0 <readRegisters>

	// return the register value
	return _buffer[0];
 8104834:	4b03      	ldr	r3, [pc, #12]	; (8104844 <whoAmI+0x50>)
 8104836:	781b      	ldrb	r3, [r3, #0]
}
 8104838:	4618      	mov	r0, r3
 810483a:	46bd      	mov	sp, r7
 810483c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104840:	b004      	add	sp, #16
 8104842:	4770      	bx	lr
 8104844:	100002b8 	.word	0x100002b8

08104848 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 8104848:	b084      	sub	sp, #16
 810484a:	b5b0      	push	{r4, r5, r7, lr}
 810484c:	b094      	sub	sp, #80	; 0x50
 810484e:	af14      	add	r7, sp, #80	; 0x50
 8104850:	f107 0410 	add.w	r4, r7, #16
 8104854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 8104858:	2300      	movs	r3, #0
 810485a:	4a0f      	ldr	r2, [pc, #60]	; (8104898 <whoAmIAK8963+0x50>)
 810485c:	9212      	str	r2, [sp, #72]	; 0x48
 810485e:	2201      	movs	r2, #1
 8104860:	9211      	str	r2, [sp, #68]	; 0x44
 8104862:	9310      	str	r3, [sp, #64]	; 0x40
 8104864:	466d      	mov	r5, sp
 8104866:	f107 0420 	add.w	r4, r7, #32
 810486a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810486c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810486e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104876:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810487a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810487e:	f107 0310 	add.w	r3, r7, #16
 8104882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104884:	f7ff ff41 	bl	810470a <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8104888:	4b03      	ldr	r3, [pc, #12]	; (8104898 <whoAmIAK8963+0x50>)
 810488a:	781b      	ldrb	r3, [r3, #0]
}
 810488c:	4618      	mov	r0, r3
 810488e:	46bd      	mov	sp, r7
 8104890:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104894:	b004      	add	sp, #16
 8104896:	4770      	bx	lr
 8104898:	100002b8 	.word	0x100002b8

0810489c <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 810489c:	b084      	sub	sp, #16
 810489e:	b5b0      	push	{r4, r5, r7, lr}
 81048a0:	b096      	sub	sp, #88	; 0x58
 81048a2:	af14      	add	r7, sp, #80	; 0x50
 81048a4:	f107 0418 	add.w	r4, r7, #24
 81048a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 81048ac:	236b      	movs	r3, #107	; 0x6b
 81048ae:	2201      	movs	r2, #1
 81048b0:	9211      	str	r2, [sp, #68]	; 0x44
 81048b2:	9310      	str	r3, [sp, #64]	; 0x40
 81048b4:	466d      	mov	r5, sp
 81048b6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048ce:	f107 0318 	add.w	r3, r7, #24
 81048d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048d4:	f7ff fe65 	bl	81045a2 <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 81048d8:	236a      	movs	r3, #106	; 0x6a
 81048da:	2220      	movs	r2, #32
 81048dc:	9211      	str	r2, [sp, #68]	; 0x44
 81048de:	9310      	str	r3, [sp, #64]	; 0x40
 81048e0:	466d      	mov	r5, sp
 81048e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048fa:	f107 0318 	add.w	r3, r7, #24
 81048fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104900:	f7ff fe4f 	bl	81045a2 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 8104904:	2324      	movs	r3, #36	; 0x24
 8104906:	220d      	movs	r2, #13
 8104908:	9211      	str	r2, [sp, #68]	; 0x44
 810490a:	9310      	str	r3, [sp, #64]	; 0x40
 810490c:	466d      	mov	r5, sp
 810490e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810491a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810491c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810491e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104922:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104926:	f107 0318 	add.w	r3, r7, #24
 810492a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810492c:	f7ff fe39 	bl	81045a2 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104930:	230a      	movs	r3, #10
 8104932:	2200      	movs	r2, #0
 8104934:	9211      	str	r2, [sp, #68]	; 0x44
 8104936:	9310      	str	r3, [sp, #64]	; 0x40
 8104938:	466d      	mov	r5, sp
 810493a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810494a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810494e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104952:	f107 0318 	add.w	r3, r7, #24
 8104956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104958:	f7ff fe6c 	bl	8104634 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 810495c:	236b      	movs	r3, #107	; 0x6b
 810495e:	2280      	movs	r2, #128	; 0x80
 8104960:	9211      	str	r2, [sp, #68]	; 0x44
 8104962:	9310      	str	r3, [sp, #64]	; 0x40
 8104964:	466d      	mov	r5, sp
 8104966:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810496a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810496c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810496e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104976:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810497a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810497e:	f107 0318 	add.w	r3, r7, #24
 8104982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104984:	f7ff fe0d 	bl	81045a2 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8104988:	200a      	movs	r0, #10
 810498a:	f7fd f93d 	bl	8101c08 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 810498e:	230b      	movs	r3, #11
 8104990:	2201      	movs	r2, #1
 8104992:	9211      	str	r2, [sp, #68]	; 0x44
 8104994:	9310      	str	r3, [sp, #64]	; 0x40
 8104996:	466d      	mov	r5, sp
 8104998:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810499c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810499e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049b0:	f107 0318 	add.w	r3, r7, #24
 81049b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049b6:	f7ff fe3d 	bl	8104634 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81049ba:	236b      	movs	r3, #107	; 0x6b
 81049bc:	2201      	movs	r2, #1
 81049be:	9211      	str	r2, [sp, #68]	; 0x44
 81049c0:	9310      	str	r3, [sp, #64]	; 0x40
 81049c2:	466d      	mov	r5, sp
 81049c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049dc:	f107 0318 	add.w	r3, r7, #24
 81049e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049e2:	f7ff fdde 	bl	81045a2 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 81049e6:	466d      	mov	r5, sp
 81049e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a00:	f107 0318 	add.w	r3, r7, #24
 8104a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a06:	f7ff fef5 	bl	81047f4 <whoAmI>
 8104a0a:	4603      	mov	r3, r0
 8104a0c:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8104a0e:	79fb      	ldrb	r3, [r7, #7]
 8104a10:	2b71      	cmp	r3, #113	; 0x71
 8104a12:	d004      	beq.n	8104a1e <MPU9250_Init+0x182>
 8104a14:	79fb      	ldrb	r3, [r7, #7]
 8104a16:	2b73      	cmp	r3, #115	; 0x73
 8104a18:	d001      	beq.n	8104a1e <MPU9250_Init+0x182>
	{
		return 1;
 8104a1a:	2301      	movs	r3, #1
 8104a1c:	e171      	b.n	8104d02 <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 8104a1e:	236c      	movs	r3, #108	; 0x6c
 8104a20:	2200      	movs	r2, #0
 8104a22:	9211      	str	r2, [sp, #68]	; 0x44
 8104a24:	9310      	str	r3, [sp, #64]	; 0x40
 8104a26:	466d      	mov	r5, sp
 8104a28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a40:	f107 0318 	add.w	r3, r7, #24
 8104a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a46:	f7ff fdac 	bl	81045a2 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8104a4a:	231c      	movs	r3, #28
 8104a4c:	2200      	movs	r2, #0
 8104a4e:	9211      	str	r2, [sp, #68]	; 0x44
 8104a50:	9310      	str	r3, [sp, #64]	; 0x40
 8104a52:	466d      	mov	r5, sp
 8104a54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a6c:	f107 0318 	add.w	r3, r7, #24
 8104a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a72:	f7ff fd96 	bl	81045a2 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8104a76:	231b      	movs	r3, #27
 8104a78:	2200      	movs	r2, #0
 8104a7a:	9211      	str	r2, [sp, #68]	; 0x44
 8104a7c:	9310      	str	r3, [sp, #64]	; 0x40
 8104a7e:	466d      	mov	r5, sp
 8104a80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a98:	f107 0318 	add.w	r3, r7, #24
 8104a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a9e:	f7ff fd80 	bl	81045a2 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 8104aa2:	231d      	movs	r3, #29
 8104aa4:	2201      	movs	r2, #1
 8104aa6:	9211      	str	r2, [sp, #68]	; 0x44
 8104aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8104aaa:	466d      	mov	r5, sp
 8104aac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104abc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104ac0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104ac4:	f107 0318 	add.w	r3, r7, #24
 8104ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104aca:	f7ff fd6a 	bl	81045a2 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 8104ace:	231a      	movs	r3, #26
 8104ad0:	2201      	movs	r2, #1
 8104ad2:	9211      	str	r2, [sp, #68]	; 0x44
 8104ad4:	9310      	str	r3, [sp, #64]	; 0x40
 8104ad6:	466d      	mov	r5, sp
 8104ad8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ae8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104aec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104af0:	f107 0318 	add.w	r3, r7, #24
 8104af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104af6:	f7ff fd54 	bl	81045a2 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 8104afa:	2319      	movs	r3, #25
 8104afc:	2200      	movs	r2, #0
 8104afe:	9211      	str	r2, [sp, #68]	; 0x44
 8104b00:	9310      	str	r3, [sp, #64]	; 0x40
 8104b02:	466d      	mov	r5, sp
 8104b04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104b18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104b1c:	f107 0318 	add.w	r3, r7, #24
 8104b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104b22:	f7ff fd3e 	bl	81045a2 <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 8104b26:	236a      	movs	r3, #106	; 0x6a
 8104b28:	2220      	movs	r2, #32
 8104b2a:	9211      	str	r2, [sp, #68]	; 0x44
 8104b2c:	9310      	str	r3, [sp, #64]	; 0x40
 8104b2e:	466d      	mov	r5, sp
 8104b30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104b44:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104b48:	f107 0318 	add.w	r3, r7, #24
 8104b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104b4e:	f7ff fd28 	bl	81045a2 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 8104b52:	2324      	movs	r3, #36	; 0x24
 8104b54:	220d      	movs	r2, #13
 8104b56:	9211      	str	r2, [sp, #68]	; 0x44
 8104b58:	9310      	str	r3, [sp, #64]	; 0x40
 8104b5a:	466d      	mov	r5, sp
 8104b5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104b70:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104b74:	f107 0318 	add.w	r3, r7, #24
 8104b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104b7a:	f7ff fd12 	bl	81045a2 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 8104b7e:	466d      	mov	r5, sp
 8104b80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104b90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104b94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104b98:	f107 0318 	add.w	r3, r7, #24
 8104b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104b9e:	f7ff fe53 	bl	8104848 <whoAmIAK8963>
 8104ba2:	4603      	mov	r3, r0
 8104ba4:	2b48      	cmp	r3, #72	; 0x48
 8104ba6:	d001      	beq.n	8104bac <MPU9250_Init+0x310>
	{
		return 1;
 8104ba8:	2301      	movs	r3, #1
 8104baa:	e0aa      	b.n	8104d02 <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104bac:	230a      	movs	r3, #10
 8104bae:	2200      	movs	r2, #0
 8104bb0:	9211      	str	r2, [sp, #68]	; 0x44
 8104bb2:	9310      	str	r3, [sp, #64]	; 0x40
 8104bb4:	466d      	mov	r5, sp
 8104bb6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104bc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104bca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104bce:	f107 0318 	add.w	r3, r7, #24
 8104bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104bd4:	f7ff fd2e 	bl	8104634 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8104bd8:	2064      	movs	r0, #100	; 0x64
 8104bda:	f7fd f815 	bl	8101c08 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 8104bde:	230a      	movs	r3, #10
 8104be0:	220f      	movs	r2, #15
 8104be2:	9211      	str	r2, [sp, #68]	; 0x44
 8104be4:	9310      	str	r3, [sp, #64]	; 0x40
 8104be6:	466d      	mov	r5, sp
 8104be8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104bf8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104bfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104c00:	f107 0318 	add.w	r3, r7, #24
 8104c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104c06:	f7ff fd15 	bl	8104634 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104c0a:	2064      	movs	r0, #100	; 0x64
 8104c0c:	f7fc fffc 	bl	8101c08 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 8104c10:	2310      	movs	r3, #16
 8104c12:	4a3f      	ldr	r2, [pc, #252]	; (8104d10 <MPU9250_Init+0x474>)
 8104c14:	9212      	str	r2, [sp, #72]	; 0x48
 8104c16:	2203      	movs	r2, #3
 8104c18:	9211      	str	r2, [sp, #68]	; 0x44
 8104c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8104c1c:	466d      	mov	r5, sp
 8104c1e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104c32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104c36:	f107 0318 	add.w	r3, r7, #24
 8104c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104c3c:	f7ff fd65 	bl	810470a <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8104c40:	230a      	movs	r3, #10
 8104c42:	2200      	movs	r2, #0
 8104c44:	9211      	str	r2, [sp, #68]	; 0x44
 8104c46:	9310      	str	r3, [sp, #64]	; 0x40
 8104c48:	466d      	mov	r5, sp
 8104c4a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104c5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104c62:	f107 0318 	add.w	r3, r7, #24
 8104c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104c68:	f7ff fce4 	bl	8104634 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104c6c:	2064      	movs	r0, #100	; 0x64
 8104c6e:	f7fc ffcb 	bl	8101c08 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 8104c72:	230a      	movs	r3, #10
 8104c74:	2216      	movs	r2, #22
 8104c76:	9211      	str	r2, [sp, #68]	; 0x44
 8104c78:	9310      	str	r3, [sp, #64]	; 0x40
 8104c7a:	466d      	mov	r5, sp
 8104c7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104c90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104c94:	f107 0318 	add.w	r3, r7, #24
 8104c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104c9a:	f7ff fccb 	bl	8104634 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104c9e:	2064      	movs	r0, #100	; 0x64
 8104ca0:	f7fc ffb2 	bl	8101c08 <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 8104ca4:	236b      	movs	r3, #107	; 0x6b
 8104ca6:	2201      	movs	r2, #1
 8104ca8:	9211      	str	r2, [sp, #68]	; 0x44
 8104caa:	9310      	str	r3, [sp, #64]	; 0x40
 8104cac:	466d      	mov	r5, sp
 8104cae:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104cbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104cc2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104cc6:	f107 0318 	add.w	r3, r7, #24
 8104cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104ccc:	f7ff fc69 	bl	81045a2 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 8104cd0:	2303      	movs	r3, #3
 8104cd2:	4a10      	ldr	r2, [pc, #64]	; (8104d14 <MPU9250_Init+0x478>)
 8104cd4:	9212      	str	r2, [sp, #72]	; 0x48
 8104cd6:	2207      	movs	r2, #7
 8104cd8:	9211      	str	r2, [sp, #68]	; 0x44
 8104cda:	9310      	str	r3, [sp, #64]	; 0x40
 8104cdc:	466d      	mov	r5, sp
 8104cde:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104cee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104cf2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104cf6:	f107 0318 	add.w	r3, r7, #24
 8104cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104cfc:	f7ff fd05 	bl	810470a <readAK8963Registers>

	// successful init, return 0
	return 0;
 8104d00:	2300      	movs	r3, #0
}
 8104d02:	4618      	mov	r0, r3
 8104d04:	3708      	adds	r7, #8
 8104d06:	46bd      	mov	sp, r7
 8104d08:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104d0c:	b004      	add	sp, #16
 8104d0e:	4770      	bx	lr
 8104d10:	100002d0 	.word	0x100002d0
 8104d14:	100002b8 	.word	0x100002b8

08104d18 <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8104d18:	b084      	sub	sp, #16
 8104d1a:	b5b0      	push	{r4, r5, r7, lr}
 8104d1c:	b096      	sub	sp, #88	; 0x58
 8104d1e:	af14      	add	r7, sp, #80	; 0x50
 8104d20:	f107 0418 	add.w	r4, r7, #24
 8104d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 8104d28:	233b      	movs	r3, #59	; 0x3b
 8104d2a:	4a6d      	ldr	r2, [pc, #436]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d2c:	9212      	str	r2, [sp, #72]	; 0x48
 8104d2e:	2215      	movs	r2, #21
 8104d30:	9211      	str	r2, [sp, #68]	; 0x44
 8104d32:	9310      	str	r3, [sp, #64]	; 0x40
 8104d34:	466d      	mov	r5, sp
 8104d36:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104d46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104d4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104d4e:	f107 0318 	add.w	r3, r7, #24
 8104d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104d54:	f7ff fc4c 	bl	81045f0 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8104d58:	4b61      	ldr	r3, [pc, #388]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d5a:	781b      	ldrb	r3, [r3, #0]
 8104d5c:	021b      	lsls	r3, r3, #8
 8104d5e:	b21a      	sxth	r2, r3
 8104d60:	4b5f      	ldr	r3, [pc, #380]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d62:	785b      	ldrb	r3, [r3, #1]
 8104d64:	b21b      	sxth	r3, r3
 8104d66:	4313      	orrs	r3, r2
 8104d68:	b21a      	sxth	r2, r3
 8104d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104d6c:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8104d6e:	4b5c      	ldr	r3, [pc, #368]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d70:	789b      	ldrb	r3, [r3, #2]
 8104d72:	021b      	lsls	r3, r3, #8
 8104d74:	b219      	sxth	r1, r3
 8104d76:	4b5a      	ldr	r3, [pc, #360]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d78:	78db      	ldrb	r3, [r3, #3]
 8104d7a:	b21a      	sxth	r2, r3
 8104d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104d7e:	3302      	adds	r3, #2
 8104d80:	430a      	orrs	r2, r1
 8104d82:	b212      	sxth	r2, r2
 8104d84:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8104d86:	4b56      	ldr	r3, [pc, #344]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d88:	791b      	ldrb	r3, [r3, #4]
 8104d8a:	021b      	lsls	r3, r3, #8
 8104d8c:	b219      	sxth	r1, r3
 8104d8e:	4b54      	ldr	r3, [pc, #336]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104d90:	795b      	ldrb	r3, [r3, #5]
 8104d92:	b21a      	sxth	r2, r3
 8104d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104d96:	3304      	adds	r3, #4
 8104d98:	430a      	orrs	r2, r1
 8104d9a:	b212      	sxth	r2, r2
 8104d9c:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8104d9e:	4b50      	ldr	r3, [pc, #320]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104da0:	7a1b      	ldrb	r3, [r3, #8]
 8104da2:	021b      	lsls	r3, r3, #8
 8104da4:	b21a      	sxth	r2, r3
 8104da6:	4b4e      	ldr	r3, [pc, #312]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104da8:	7a5b      	ldrb	r3, [r3, #9]
 8104daa:	b21b      	sxth	r3, r3
 8104dac:	4313      	orrs	r3, r2
 8104dae:	b21a      	sxth	r2, r3
 8104db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104db2:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8104db4:	4b4a      	ldr	r3, [pc, #296]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104db6:	7a9b      	ldrb	r3, [r3, #10]
 8104db8:	021b      	lsls	r3, r3, #8
 8104dba:	b219      	sxth	r1, r3
 8104dbc:	4b48      	ldr	r3, [pc, #288]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104dbe:	7adb      	ldrb	r3, [r3, #11]
 8104dc0:	b21a      	sxth	r2, r3
 8104dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104dc4:	3302      	adds	r3, #2
 8104dc6:	430a      	orrs	r2, r1
 8104dc8:	b212      	sxth	r2, r2
 8104dca:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8104dcc:	4b44      	ldr	r3, [pc, #272]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104dce:	7b1b      	ldrb	r3, [r3, #12]
 8104dd0:	021b      	lsls	r3, r3, #8
 8104dd2:	b219      	sxth	r1, r3
 8104dd4:	4b42      	ldr	r3, [pc, #264]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104dd6:	7b5b      	ldrb	r3, [r3, #13]
 8104dd8:	b21a      	sxth	r2, r3
 8104dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104ddc:	3304      	adds	r3, #4
 8104dde:	430a      	orrs	r2, r1
 8104de0:	b212      	sxth	r2, r2
 8104de2:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8104de4:	4b3e      	ldr	r3, [pc, #248]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104de6:	7bdb      	ldrb	r3, [r3, #15]
 8104de8:	021b      	lsls	r3, r3, #8
 8104dea:	b21a      	sxth	r2, r3
 8104dec:	4b3c      	ldr	r3, [pc, #240]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104dee:	7b9b      	ldrb	r3, [r3, #14]
 8104df0:	b21b      	sxth	r3, r3
 8104df2:	4313      	orrs	r3, r2
 8104df4:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8104df6:	4b3a      	ldr	r3, [pc, #232]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104df8:	7c5b      	ldrb	r3, [r3, #17]
 8104dfa:	021b      	lsls	r3, r3, #8
 8104dfc:	b21a      	sxth	r2, r3
 8104dfe:	4b38      	ldr	r3, [pc, #224]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104e00:	7c1b      	ldrb	r3, [r3, #16]
 8104e02:	b21b      	sxth	r3, r3
 8104e04:	4313      	orrs	r3, r2
 8104e06:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8104e08:	4b35      	ldr	r3, [pc, #212]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104e0a:	7cdb      	ldrb	r3, [r3, #19]
 8104e0c:	021b      	lsls	r3, r3, #8
 8104e0e:	b21a      	sxth	r2, r3
 8104e10:	4b33      	ldr	r3, [pc, #204]	; (8104ee0 <MPU9250_GetData+0x1c8>)
 8104e12:	7c9b      	ldrb	r3, [r3, #18]
 8104e14:	b21b      	sxth	r3, r3
 8104e16:	4313      	orrs	r3, r2
 8104e18:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8104e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104e1e:	ee07 3a90 	vmov	s15, r3
 8104e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104e26:	4b2f      	ldr	r3, [pc, #188]	; (8104ee4 <MPU9250_GetData+0x1cc>)
 8104e28:	781b      	ldrb	r3, [r3, #0]
 8104e2a:	3b80      	subs	r3, #128	; 0x80
 8104e2c:	ee07 3a90 	vmov	s15, r3
 8104e30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104e34:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8104ee8 <MPU9250_GetData+0x1d0>
 8104e38:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104e4c:	ee17 3a90 	vmov	r3, s15
 8104e50:	b21a      	sxth	r2, r3
 8104e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104e54:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8104e56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8104e5a:	ee07 3a90 	vmov	s15, r3
 8104e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104e62:	4b20      	ldr	r3, [pc, #128]	; (8104ee4 <MPU9250_GetData+0x1cc>)
 8104e64:	785b      	ldrb	r3, [r3, #1]
 8104e66:	3b80      	subs	r3, #128	; 0x80
 8104e68:	ee07 3a90 	vmov	s15, r3
 8104e6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104e70:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8104ee8 <MPU9250_GetData+0x1d0>
 8104e74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104e86:	3302      	adds	r3, #2
 8104e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104e8c:	ee17 2a90 	vmov	r2, s15
 8104e90:	b212      	sxth	r2, r2
 8104e92:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8104e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8104e98:	ee07 3a90 	vmov	s15, r3
 8104e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104ea0:	4b10      	ldr	r3, [pc, #64]	; (8104ee4 <MPU9250_GetData+0x1cc>)
 8104ea2:	789b      	ldrb	r3, [r3, #2]
 8104ea4:	3b80      	subs	r3, #128	; 0x80
 8104ea6:	ee07 3a90 	vmov	s15, r3
 8104eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104eae:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8104ee8 <MPU9250_GetData+0x1d0>
 8104eb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104ec4:	3304      	adds	r3, #4
 8104ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104eca:	ee17 2a90 	vmov	r2, s15
 8104ece:	b212      	sxth	r2, r2
 8104ed0:	801a      	strh	r2, [r3, #0]
}
 8104ed2:	bf00      	nop
 8104ed4:	3708      	adds	r7, #8
 8104ed6:	46bd      	mov	sp, r7
 8104ed8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104edc:	b004      	add	sp, #16
 8104ede:	4770      	bx	lr
 8104ee0:	100002b8 	.word	0x100002b8
 8104ee4:	100002d0 	.word	0x100002d0
 8104ee8:	43800000 	.word	0x43800000

08104eec <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8104eec:	b480      	push	{r7}
 8104eee:	b083      	sub	sp, #12
 8104ef0:	af00      	add	r7, sp, #0
 8104ef2:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	687a      	ldr	r2, [r7, #4]
 8104ef8:	605a      	str	r2, [r3, #4]
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	685a      	ldr	r2, [r3, #4]
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	601a      	str	r2, [r3, #0]
}
 8104f02:	bf00      	nop
 8104f04:	370c      	adds	r7, #12
 8104f06:	46bd      	mov	sp, r7
 8104f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f0c:	4770      	bx	lr

08104f0e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8104f0e:	b480      	push	{r7}
 8104f10:	b083      	sub	sp, #12
 8104f12:	af00      	add	r7, sp, #0
 8104f14:	6078      	str	r0, [r7, #4]
 8104f16:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	685a      	ldr	r2, [r3, #4]
 8104f1c:	683b      	ldr	r3, [r7, #0]
 8104f1e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8104f20:	683b      	ldr	r3, [r7, #0]
 8104f22:	687a      	ldr	r2, [r7, #4]
 8104f24:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8104f26:	683b      	ldr	r3, [r7, #0]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	683a      	ldr	r2, [r7, #0]
 8104f2c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8104f2e:	683b      	ldr	r3, [r7, #0]
 8104f30:	685b      	ldr	r3, [r3, #4]
 8104f32:	683a      	ldr	r2, [r7, #0]
 8104f34:	601a      	str	r2, [r3, #0]
}
 8104f36:	bf00      	nop
 8104f38:	370c      	adds	r7, #12
 8104f3a:	46bd      	mov	sp, r7
 8104f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f40:	4770      	bx	lr

08104f42 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8104f42:	b580      	push	{r7, lr}
 8104f44:	b082      	sub	sp, #8
 8104f46:	af00      	add	r7, sp, #0
 8104f48:	6078      	str	r0, [r7, #4]
 8104f4a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8104f4c:	6839      	ldr	r1, [r7, #0]
 8104f4e:	6878      	ldr	r0, [r7, #4]
 8104f50:	f7ff ffdd 	bl	8104f0e <metal_list_add_before>
}
 8104f54:	bf00      	nop
 8104f56:	3708      	adds	r7, #8
 8104f58:	46bd      	mov	sp, r7
 8104f5a:	bd80      	pop	{r7, pc}

08104f5c <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8104f5c:	b580      	push	{r7, lr}
 8104f5e:	b082      	sub	sp, #8
 8104f60:	af00      	add	r7, sp, #0
 8104f62:	6078      	str	r0, [r7, #4]
 8104f64:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8104f66:	6839      	ldr	r1, [r7, #0]
 8104f68:	6878      	ldr	r0, [r7, #4]
 8104f6a:	f001 fdb9 	bl	8106ae0 <metal_machine_cache_flush>
}
 8104f6e:	bf00      	nop
 8104f70:	3708      	adds	r7, #8
 8104f72:	46bd      	mov	sp, r7
 8104f74:	bd80      	pop	{r7, pc}

08104f76 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8104f76:	b580      	push	{r7, lr}
 8104f78:	b082      	sub	sp, #8
 8104f7a:	af00      	add	r7, sp, #0
 8104f7c:	6078      	str	r0, [r7, #4]
 8104f7e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8104f80:	6839      	ldr	r1, [r7, #0]
 8104f82:	6878      	ldr	r0, [r7, #4]
 8104f84:	f001 fdb7 	bl	8106af6 <metal_machine_cache_invalidate>
}
 8104f88:	bf00      	nop
 8104f8a:	3708      	adds	r7, #8
 8104f8c:	46bd      	mov	sp, r7
 8104f8e:	bd80      	pop	{r7, pc}

08104f90 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8104f90:	b580      	push	{r7, lr}
 8104f92:	b082      	sub	sp, #8
 8104f94:	af00      	add	r7, sp, #0
 8104f96:	6078      	str	r0, [r7, #4]
 8104f98:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8104f9a:	6839      	ldr	r1, [r7, #0]
 8104f9c:	6878      	ldr	r0, [r7, #4]
 8104f9e:	f7ff ffdd 	bl	8104f5c <__metal_cache_flush>
}
 8104fa2:	bf00      	nop
 8104fa4:	3708      	adds	r7, #8
 8104fa6:	46bd      	mov	sp, r7
 8104fa8:	bd80      	pop	{r7, pc}

08104faa <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8104faa:	b580      	push	{r7, lr}
 8104fac:	b082      	sub	sp, #8
 8104fae:	af00      	add	r7, sp, #0
 8104fb0:	6078      	str	r0, [r7, #4]
 8104fb2:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8104fb4:	6839      	ldr	r1, [r7, #0]
 8104fb6:	6878      	ldr	r0, [r7, #4]
 8104fb8:	f7ff ffdd 	bl	8104f76 <__metal_cache_invalidate>
}
 8104fbc:	bf00      	nop
 8104fbe:	3708      	adds	r7, #8
 8104fc0:	46bd      	mov	sp, r7
 8104fc2:	bd80      	pop	{r7, pc}

08104fc4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8104fc4:	b580      	push	{r7, lr}
 8104fc6:	b082      	sub	sp, #8
 8104fc8:	af00      	add	r7, sp, #0
 8104fca:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	2b00      	cmp	r3, #0
 8104fd0:	d008      	beq.n	8104fe4 <metal_bus_register+0x20>
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	2b00      	cmp	r3, #0
 8104fd8:	d004      	beq.n	8104fe4 <metal_bus_register+0x20>
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	781b      	ldrb	r3, [r3, #0]
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	d102      	bne.n	8104fea <metal_bus_register+0x26>
		return -EINVAL;
 8104fe4:	f06f 0315 	mvn.w	r3, #21
 8104fe8:	e026      	b.n	8105038 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	681b      	ldr	r3, [r3, #0]
 8104fee:	2100      	movs	r1, #0
 8104ff0:	4618      	mov	r0, r3
 8104ff2:	f000 f82b 	bl	810504c <metal_bus_find>
 8104ff6:	4603      	mov	r3, r0
 8104ff8:	2b00      	cmp	r3, #0
 8104ffa:	d102      	bne.n	8105002 <metal_bus_register+0x3e>
		return -EEXIST;
 8104ffc:	f06f 0310 	mvn.w	r3, #16
 8105000:	e01a      	b.n	8105038 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	331c      	adds	r3, #28
 8105006:	4618      	mov	r0, r3
 8105008:	f7ff ff70 	bl	8104eec <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	3324      	adds	r3, #36	; 0x24
 8105010:	4619      	mov	r1, r3
 8105012:	480b      	ldr	r0, [pc, #44]	; (8105040 <metal_bus_register+0x7c>)
 8105014:	f7ff ff95 	bl	8104f42 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8105018:	4b0a      	ldr	r3, [pc, #40]	; (8105044 <metal_bus_register+0x80>)
 810501a:	781b      	ldrb	r3, [r3, #0]
 810501c:	2b06      	cmp	r3, #6
 810501e:	d90a      	bls.n	8105036 <metal_bus_register+0x72>
 8105020:	4b08      	ldr	r3, [pc, #32]	; (8105044 <metal_bus_register+0x80>)
 8105022:	685b      	ldr	r3, [r3, #4]
 8105024:	2b00      	cmp	r3, #0
 8105026:	d006      	beq.n	8105036 <metal_bus_register+0x72>
 8105028:	4b06      	ldr	r3, [pc, #24]	; (8105044 <metal_bus_register+0x80>)
 810502a:	685b      	ldr	r3, [r3, #4]
 810502c:	687a      	ldr	r2, [r7, #4]
 810502e:	6812      	ldr	r2, [r2, #0]
 8105030:	4905      	ldr	r1, [pc, #20]	; (8105048 <metal_bus_register+0x84>)
 8105032:	2007      	movs	r0, #7
 8105034:	4798      	blx	r3
	return 0;
 8105036:	2300      	movs	r3, #0
}
 8105038:	4618      	mov	r0, r3
 810503a:	3708      	adds	r7, #8
 810503c:	46bd      	mov	sp, r7
 810503e:	bd80      	pop	{r7, pc}
 8105040:	1000050c 	.word	0x1000050c
 8105044:	10000504 	.word	0x10000504
 8105048:	0810d990 	.word	0x0810d990

0810504c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 810504c:	b580      	push	{r7, lr}
 810504e:	b084      	sub	sp, #16
 8105050:	af00      	add	r7, sp, #0
 8105052:	6078      	str	r0, [r7, #4]
 8105054:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8105056:	4b13      	ldr	r3, [pc, #76]	; (81050a4 <metal_bus_find+0x58>)
 8105058:	689b      	ldr	r3, [r3, #8]
 810505a:	60fb      	str	r3, [r7, #12]
 810505c:	e017      	b.n	810508e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 810505e:	68fb      	ldr	r3, [r7, #12]
 8105060:	3b24      	subs	r3, #36	; 0x24
 8105062:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8105064:	68bb      	ldr	r3, [r7, #8]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	6879      	ldr	r1, [r7, #4]
 810506a:	4618      	mov	r0, r3
 810506c:	f7fb f938 	bl	81002e0 <strcmp>
 8105070:	4603      	mov	r3, r0
 8105072:	2b00      	cmp	r3, #0
 8105074:	d003      	beq.n	810507e <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8105076:	68fb      	ldr	r3, [r7, #12]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	60fb      	str	r3, [r7, #12]
 810507c:	e007      	b.n	810508e <metal_bus_find+0x42>
			continue;
		if (result)
 810507e:	683b      	ldr	r3, [r7, #0]
 8105080:	2b00      	cmp	r3, #0
 8105082:	d002      	beq.n	810508a <metal_bus_find+0x3e>
			*result = bus;
 8105084:	683b      	ldr	r3, [r7, #0]
 8105086:	68ba      	ldr	r2, [r7, #8]
 8105088:	601a      	str	r2, [r3, #0]
		return 0;
 810508a:	2300      	movs	r3, #0
 810508c:	e005      	b.n	810509a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 810508e:	68fb      	ldr	r3, [r7, #12]
 8105090:	4a05      	ldr	r2, [pc, #20]	; (81050a8 <metal_bus_find+0x5c>)
 8105092:	4293      	cmp	r3, r2
 8105094:	d1e3      	bne.n	810505e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8105096:	f06f 0301 	mvn.w	r3, #1
}
 810509a:	4618      	mov	r0, r3
 810509c:	3710      	adds	r7, #16
 810509e:	46bd      	mov	sp, r7
 81050a0:	bd80      	pop	{r7, pc}
 81050a2:	bf00      	nop
 81050a4:	10000504 	.word	0x10000504
 81050a8:	1000050c 	.word	0x1000050c

081050ac <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 81050ac:	b580      	push	{r7, lr}
 81050ae:	b086      	sub	sp, #24
 81050b0:	af00      	add	r7, sp, #0
 81050b2:	60f8      	str	r0, [r7, #12]
 81050b4:	60b9      	str	r1, [r7, #8]
 81050b6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 81050b8:	68fb      	ldr	r3, [r7, #12]
 81050ba:	2b00      	cmp	r3, #0
 81050bc:	d00d      	beq.n	81050da <metal_device_open+0x2e>
 81050be:	68fb      	ldr	r3, [r7, #12]
 81050c0:	781b      	ldrb	r3, [r3, #0]
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d009      	beq.n	81050da <metal_device_open+0x2e>
 81050c6:	68bb      	ldr	r3, [r7, #8]
 81050c8:	2b00      	cmp	r3, #0
 81050ca:	d006      	beq.n	81050da <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 81050cc:	68bb      	ldr	r3, [r7, #8]
 81050ce:	781b      	ldrb	r3, [r3, #0]
 81050d0:	2b00      	cmp	r3, #0
 81050d2:	d002      	beq.n	81050da <metal_device_open+0x2e>
 81050d4:	687b      	ldr	r3, [r7, #4]
 81050d6:	2b00      	cmp	r3, #0
 81050d8:	d102      	bne.n	81050e0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 81050da:	f06f 0315 	mvn.w	r3, #21
 81050de:	e01f      	b.n	8105120 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 81050e0:	f107 0310 	add.w	r3, r7, #16
 81050e4:	4619      	mov	r1, r3
 81050e6:	68f8      	ldr	r0, [r7, #12]
 81050e8:	f7ff ffb0 	bl	810504c <metal_bus_find>
 81050ec:	6178      	str	r0, [r7, #20]
	if (error)
 81050ee:	697b      	ldr	r3, [r7, #20]
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d001      	beq.n	81050f8 <metal_device_open+0x4c>
		return error;
 81050f4:	697b      	ldr	r3, [r7, #20]
 81050f6:	e013      	b.n	8105120 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 81050f8:	693b      	ldr	r3, [r7, #16]
 81050fa:	689b      	ldr	r3, [r3, #8]
 81050fc:	2b00      	cmp	r3, #0
 81050fe:	d102      	bne.n	8105106 <metal_device_open+0x5a>
		return -ENODEV;
 8105100:	f06f 0312 	mvn.w	r3, #18
 8105104:	e00c      	b.n	8105120 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8105106:	693b      	ldr	r3, [r7, #16]
 8105108:	689b      	ldr	r3, [r3, #8]
 810510a:	6938      	ldr	r0, [r7, #16]
 810510c:	687a      	ldr	r2, [r7, #4]
 810510e:	68b9      	ldr	r1, [r7, #8]
 8105110:	4798      	blx	r3
 8105112:	6178      	str	r0, [r7, #20]
	if (error)
 8105114:	697b      	ldr	r3, [r7, #20]
 8105116:	2b00      	cmp	r3, #0
 8105118:	d001      	beq.n	810511e <metal_device_open+0x72>
		return error;
 810511a:	697b      	ldr	r3, [r7, #20]
 810511c:	e000      	b.n	8105120 <metal_device_open+0x74>

	return 0;
 810511e:	2300      	movs	r3, #0
}
 8105120:	4618      	mov	r0, r3
 8105122:	3718      	adds	r7, #24
 8105124:	46bd      	mov	sp, r7
 8105126:	bd80      	pop	{r7, pc}

08105128 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8105128:	b580      	push	{r7, lr}
 810512a:	b082      	sub	sp, #8
 810512c:	af00      	add	r7, sp, #0
 810512e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8105130:	687b      	ldr	r3, [r7, #4]
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	2b00      	cmp	r3, #0
 8105136:	d008      	beq.n	810514a <metal_register_generic_device+0x22>
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	681b      	ldr	r3, [r3, #0]
 810513c:	781b      	ldrb	r3, [r3, #0]
 810513e:	2b00      	cmp	r3, #0
 8105140:	d003      	beq.n	810514a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8105146:	2b02      	cmp	r3, #2
 8105148:	d902      	bls.n	8105150 <metal_register_generic_device+0x28>
		return -EINVAL;
 810514a:	f06f 0315 	mvn.w	r3, #21
 810514e:	e009      	b.n	8105164 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	4a06      	ldr	r2, [pc, #24]	; (810516c <metal_register_generic_device+0x44>)
 8105154:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	336c      	adds	r3, #108	; 0x6c
 810515a:	4619      	mov	r1, r3
 810515c:	4804      	ldr	r0, [pc, #16]	; (8105170 <metal_register_generic_device+0x48>)
 810515e:	f7ff fef0 	bl	8104f42 <metal_list_add_tail>
			    &device->node);
	return 0;
 8105162:	2300      	movs	r3, #0
}
 8105164:	4618      	mov	r0, r3
 8105166:	3708      	adds	r7, #8
 8105168:	46bd      	mov	sp, r7
 810516a:	bd80      	pop	{r7, pc}
 810516c:	10000010 	.word	0x10000010
 8105170:	1000051c 	.word	0x1000051c

08105174 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8105174:	b580      	push	{r7, lr}
 8105176:	b086      	sub	sp, #24
 8105178:	af00      	add	r7, sp, #0
 810517a:	60f8      	str	r0, [r7, #12]
 810517c:	60b9      	str	r1, [r7, #8]
 810517e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8105180:	4b12      	ldr	r3, [pc, #72]	; (81051cc <metal_generic_dev_open+0x58>)
 8105182:	699b      	ldr	r3, [r3, #24]
 8105184:	617b      	str	r3, [r7, #20]
 8105186:	e017      	b.n	81051b8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8105188:	697b      	ldr	r3, [r7, #20]
 810518a:	3b6c      	subs	r3, #108	; 0x6c
 810518c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 810518e:	693b      	ldr	r3, [r7, #16]
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	68b9      	ldr	r1, [r7, #8]
 8105194:	4618      	mov	r0, r3
 8105196:	f7fb f8a3 	bl	81002e0 <strcmp>
 810519a:	4603      	mov	r3, r0
 810519c:	2b00      	cmp	r3, #0
 810519e:	d003      	beq.n	81051a8 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 81051a0:	697b      	ldr	r3, [r7, #20]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	617b      	str	r3, [r7, #20]
 81051a6:	e007      	b.n	81051b8 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	693a      	ldr	r2, [r7, #16]
 81051ac:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 81051ae:	6938      	ldr	r0, [r7, #16]
 81051b0:	f000 f88c 	bl	81052cc <metal_generic_dev_sys_open>
 81051b4:	4603      	mov	r3, r0
 81051b6:	e005      	b.n	81051c4 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 81051b8:	697b      	ldr	r3, [r7, #20]
 81051ba:	4a05      	ldr	r2, [pc, #20]	; (81051d0 <metal_generic_dev_open+0x5c>)
 81051bc:	4293      	cmp	r3, r2
 81051be:	d1e3      	bne.n	8105188 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 81051c0:	f06f 0312 	mvn.w	r3, #18
}
 81051c4:	4618      	mov	r0, r3
 81051c6:	3718      	adds	r7, #24
 81051c8:	46bd      	mov	sp, r7
 81051ca:	bd80      	pop	{r7, pc}
 81051cc:	10000504 	.word	0x10000504
 81051d0:	1000051c 	.word	0x1000051c

081051d4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 81051d4:	b580      	push	{r7, lr}
 81051d6:	b086      	sub	sp, #24
 81051d8:	af00      	add	r7, sp, #0
 81051da:	60f8      	str	r0, [r7, #12]
 81051dc:	60b9      	str	r1, [r7, #8]
 81051de:	607a      	str	r2, [r7, #4]
 81051e0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 81051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81051e4:	683b      	ldr	r3, [r7, #0]
 81051e6:	429a      	cmp	r2, r3
 81051e8:	d009      	beq.n	81051fe <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 81051ea:	6a3a      	ldr	r2, [r7, #32]
 81051ec:	4613      	mov	r3, r2
 81051ee:	005b      	lsls	r3, r3, #1
 81051f0:	4413      	add	r3, r2
 81051f2:	009b      	lsls	r3, r3, #2
 81051f4:	461a      	mov	r2, r3
 81051f6:	6839      	ldr	r1, [r7, #0]
 81051f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81051fa:	f003 f9fb 	bl	81085f4 <memcpy>
	for (i = 0; i < nents_in; i++) {
 81051fe:	2300      	movs	r3, #0
 8105200:	617b      	str	r3, [r7, #20]
 8105202:	e02f      	b.n	8105264 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	2b02      	cmp	r3, #2
 8105208:	d114      	bne.n	8105234 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 810520a:	697a      	ldr	r2, [r7, #20]
 810520c:	4613      	mov	r3, r2
 810520e:	005b      	lsls	r3, r3, #1
 8105210:	4413      	add	r3, r2
 8105212:	009b      	lsls	r3, r3, #2
 8105214:	461a      	mov	r2, r3
 8105216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105218:	4413      	add	r3, r2
 810521a:	6818      	ldr	r0, [r3, #0]
 810521c:	697a      	ldr	r2, [r7, #20]
 810521e:	4613      	mov	r3, r2
 8105220:	005b      	lsls	r3, r3, #1
 8105222:	4413      	add	r3, r2
 8105224:	009b      	lsls	r3, r3, #2
 8105226:	461a      	mov	r2, r3
 8105228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810522a:	4413      	add	r3, r2
 810522c:	689b      	ldr	r3, [r3, #8]
 810522e:	4619      	mov	r1, r3
 8105230:	f7ff feae 	bl	8104f90 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8105234:	697a      	ldr	r2, [r7, #20]
 8105236:	4613      	mov	r3, r2
 8105238:	005b      	lsls	r3, r3, #1
 810523a:	4413      	add	r3, r2
 810523c:	009b      	lsls	r3, r3, #2
 810523e:	461a      	mov	r2, r3
 8105240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105242:	4413      	add	r3, r2
 8105244:	6818      	ldr	r0, [r3, #0]
 8105246:	697a      	ldr	r2, [r7, #20]
 8105248:	4613      	mov	r3, r2
 810524a:	005b      	lsls	r3, r3, #1
 810524c:	4413      	add	r3, r2
 810524e:	009b      	lsls	r3, r3, #2
 8105250:	461a      	mov	r2, r3
 8105252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105254:	4413      	add	r3, r2
 8105256:	689b      	ldr	r3, [r3, #8]
 8105258:	4619      	mov	r1, r3
 810525a:	f7ff fea6 	bl	8104faa <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 810525e:	697b      	ldr	r3, [r7, #20]
 8105260:	3301      	adds	r3, #1
 8105262:	617b      	str	r3, [r7, #20]
 8105264:	697a      	ldr	r2, [r7, #20]
 8105266:	6a3b      	ldr	r3, [r7, #32]
 8105268:	429a      	cmp	r2, r3
 810526a:	dbcb      	blt.n	8105204 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 810526c:	6a3b      	ldr	r3, [r7, #32]
}
 810526e:	4618      	mov	r0, r3
 8105270:	3718      	adds	r7, #24
 8105272:	46bd      	mov	sp, r7
 8105274:	bd80      	pop	{r7, pc}

08105276 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8105276:	b580      	push	{r7, lr}
 8105278:	b086      	sub	sp, #24
 810527a:	af00      	add	r7, sp, #0
 810527c:	60f8      	str	r0, [r7, #12]
 810527e:	60b9      	str	r1, [r7, #8]
 8105280:	607a      	str	r2, [r7, #4]
 8105282:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8105284:	2300      	movs	r3, #0
 8105286:	617b      	str	r3, [r7, #20]
 8105288:	e017      	b.n	81052ba <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 810528a:	697a      	ldr	r2, [r7, #20]
 810528c:	4613      	mov	r3, r2
 810528e:	005b      	lsls	r3, r3, #1
 8105290:	4413      	add	r3, r2
 8105292:	009b      	lsls	r3, r3, #2
 8105294:	461a      	mov	r2, r3
 8105296:	683b      	ldr	r3, [r7, #0]
 8105298:	4413      	add	r3, r2
 810529a:	6818      	ldr	r0, [r3, #0]
 810529c:	697a      	ldr	r2, [r7, #20]
 810529e:	4613      	mov	r3, r2
 81052a0:	005b      	lsls	r3, r3, #1
 81052a2:	4413      	add	r3, r2
 81052a4:	009b      	lsls	r3, r3, #2
 81052a6:	461a      	mov	r2, r3
 81052a8:	683b      	ldr	r3, [r7, #0]
 81052aa:	4413      	add	r3, r2
 81052ac:	689b      	ldr	r3, [r3, #8]
 81052ae:	4619      	mov	r1, r3
 81052b0:	f7ff fe7b 	bl	8104faa <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 81052b4:	697b      	ldr	r3, [r7, #20]
 81052b6:	3301      	adds	r3, #1
 81052b8:	617b      	str	r3, [r7, #20]
 81052ba:	697a      	ldr	r2, [r7, #20]
 81052bc:	6a3b      	ldr	r3, [r7, #32]
 81052be:	429a      	cmp	r2, r3
 81052c0:	dbe3      	blt.n	810528a <metal_generic_dev_dma_unmap+0x14>
	}
}
 81052c2:	bf00      	nop
 81052c4:	bf00      	nop
 81052c6:	3718      	adds	r7, #24
 81052c8:	46bd      	mov	sp, r7
 81052ca:	bd80      	pop	{r7, pc}

081052cc <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 81052cc:	b580      	push	{r7, lr}
 81052ce:	b084      	sub	sp, #16
 81052d0:	af00      	add	r7, sp, #0
 81052d2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 81052d4:	2300      	movs	r3, #0
 81052d6:	60fb      	str	r3, [r7, #12]
 81052d8:	e013      	b.n	8105302 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 81052da:	68fa      	ldr	r2, [r7, #12]
 81052dc:	4613      	mov	r3, r2
 81052de:	005b      	lsls	r3, r3, #1
 81052e0:	4413      	add	r3, r2
 81052e2:	011b      	lsls	r3, r3, #4
 81052e4:	3308      	adds	r3, #8
 81052e6:	687a      	ldr	r2, [r7, #4]
 81052e8:	4413      	add	r3, r2
 81052ea:	3304      	adds	r3, #4
 81052ec:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 81052ee:	68bb      	ldr	r3, [r7, #8]
 81052f0:	689b      	ldr	r3, [r3, #8]
 81052f2:	2b00      	cmp	r3, #0
 81052f4:	d00b      	beq.n	810530e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 81052f6:	68b8      	ldr	r0, [r7, #8]
 81052f8:	f000 f81e 	bl	8105338 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 81052fc:	68fb      	ldr	r3, [r7, #12]
 81052fe:	3301      	adds	r3, #1
 8105300:	60fb      	str	r3, [r7, #12]
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	689b      	ldr	r3, [r3, #8]
 8105306:	68fa      	ldr	r2, [r7, #12]
 8105308:	429a      	cmp	r2, r3
 810530a:	d3e6      	bcc.n	81052da <metal_generic_dev_sys_open+0xe>
 810530c:	e000      	b.n	8105310 <metal_generic_dev_sys_open+0x44>
			break;
 810530e:	bf00      	nop
	}

	return 0;
 8105310:	2300      	movs	r3, #0
}
 8105312:	4618      	mov	r0, r3
 8105314:	3710      	adds	r7, #16
 8105316:	46bd      	mov	sp, r7
 8105318:	bd80      	pop	{r7, pc}
	...

0810531c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 810531c:	b580      	push	{r7, lr}
 810531e:	b082      	sub	sp, #8
 8105320:	af00      	add	r7, sp, #0
 8105322:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8105324:	4803      	ldr	r0, [pc, #12]	; (8105334 <metal_sys_init+0x18>)
 8105326:	f7ff fe4d 	bl	8104fc4 <metal_bus_register>
	return 0;
 810532a:	2300      	movs	r3, #0
}
 810532c:	4618      	mov	r0, r3
 810532e:	3708      	adds	r7, #8
 8105330:	46bd      	mov	sp, r7
 8105332:	bd80      	pop	{r7, pc}
 8105334:	10000010 	.word	0x10000010

08105338 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8105338:	b580      	push	{r7, lr}
 810533a:	b086      	sub	sp, #24
 810533c:	af00      	add	r7, sp, #0
 810533e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8105340:	687b      	ldr	r3, [r7, #4]
 8105342:	681b      	ldr	r3, [r3, #0]
 8105344:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	689b      	ldr	r3, [r3, #8]
 810534a:	613b      	str	r3, [r7, #16]
	if (psize) {
 810534c:	693b      	ldr	r3, [r7, #16]
 810534e:	2b00      	cmp	r3, #0
 8105350:	d02c      	beq.n	81053ac <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	68db      	ldr	r3, [r3, #12]
 8105356:	693a      	ldr	r2, [r7, #16]
 8105358:	fa22 f303 	lsr.w	r3, r2, r3
 810535c:	2b00      	cmp	r3, #0
 810535e:	d005      	beq.n	810536c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	68db      	ldr	r3, [r3, #12]
 8105364:	2201      	movs	r2, #1
 8105366:	fa02 f303 	lsl.w	r3, r2, r3
 810536a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810536c:	2300      	movs	r3, #0
 810536e:	617b      	str	r3, [r7, #20]
 8105370:	e013      	b.n	810539a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	685a      	ldr	r2, [r3, #4]
 8105376:	697b      	ldr	r3, [r7, #20]
 8105378:	009b      	lsls	r3, r3, #2
 810537a:	4413      	add	r3, r2
 810537c:	6819      	ldr	r1, [r3, #0]
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	695b      	ldr	r3, [r3, #20]
 8105382:	693a      	ldr	r2, [r7, #16]
 8105384:	68f8      	ldr	r0, [r7, #12]
 8105386:	f001 fbc1 	bl	8106b0c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810538a:	693b      	ldr	r3, [r7, #16]
 810538c:	009b      	lsls	r3, r3, #2
 810538e:	68fa      	ldr	r2, [r7, #12]
 8105390:	4413      	add	r3, r2
 8105392:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8105394:	697b      	ldr	r3, [r7, #20]
 8105396:	3301      	adds	r3, #1
 8105398:	617b      	str	r3, [r7, #20]
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	689a      	ldr	r2, [r3, #8]
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	68db      	ldr	r3, [r3, #12]
 81053a2:	fa22 f303 	lsr.w	r3, r2, r3
 81053a6:	697a      	ldr	r2, [r7, #20]
 81053a8:	429a      	cmp	r2, r3
 81053aa:	d9e2      	bls.n	8105372 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 81053ac:	bf00      	nop
 81053ae:	3718      	adds	r7, #24
 81053b0:	46bd      	mov	sp, r7
 81053b2:	bd80      	pop	{r7, pc}

081053b4 <metal_list_init>:
{
 81053b4:	b480      	push	{r7}
 81053b6:	b083      	sub	sp, #12
 81053b8:	af00      	add	r7, sp, #0
 81053ba:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	687a      	ldr	r2, [r7, #4]
 81053c0:	605a      	str	r2, [r3, #4]
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	685a      	ldr	r2, [r3, #4]
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	601a      	str	r2, [r3, #0]
}
 81053ca:	bf00      	nop
 81053cc:	370c      	adds	r7, #12
 81053ce:	46bd      	mov	sp, r7
 81053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053d4:	4770      	bx	lr
	...

081053d8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 81053d8:	b580      	push	{r7, lr}
 81053da:	b084      	sub	sp, #16
 81053dc:	af00      	add	r7, sp, #0
 81053de:	6078      	str	r0, [r7, #4]
	int error = 0;
 81053e0:	2300      	movs	r3, #0
 81053e2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 81053e4:	2220      	movs	r2, #32
 81053e6:	2100      	movs	r1, #0
 81053e8:	4810      	ldr	r0, [pc, #64]	; (810542c <metal_init+0x54>)
 81053ea:	f003 f911 	bl	8108610 <memset>

	_metal.common.log_handler   = params->log_handler;
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	4a0e      	ldr	r2, [pc, #56]	; (810542c <metal_init+0x54>)
 81053f4:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	791a      	ldrb	r2, [r3, #4]
 81053fa:	4b0c      	ldr	r3, [pc, #48]	; (810542c <metal_init+0x54>)
 81053fc:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 81053fe:	480c      	ldr	r0, [pc, #48]	; (8105430 <metal_init+0x58>)
 8105400:	f7ff ffd8 	bl	81053b4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8105404:	480b      	ldr	r0, [pc, #44]	; (8105434 <metal_init+0x5c>)
 8105406:	f7ff ffd5 	bl	81053b4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 810540a:	480b      	ldr	r0, [pc, #44]	; (8105438 <metal_init+0x60>)
 810540c:	f7ff ffd2 	bl	81053b4 <metal_list_init>

	error = metal_sys_init(params);
 8105410:	6878      	ldr	r0, [r7, #4]
 8105412:	f7ff ff83 	bl	810531c <metal_sys_init>
 8105416:	60f8      	str	r0, [r7, #12]
	if (error)
 8105418:	68fb      	ldr	r3, [r7, #12]
 810541a:	2b00      	cmp	r3, #0
 810541c:	d001      	beq.n	8105422 <metal_init+0x4a>
		return error;
 810541e:	68fb      	ldr	r3, [r7, #12]
 8105420:	e000      	b.n	8105424 <metal_init+0x4c>

	return error;
 8105422:	68fb      	ldr	r3, [r7, #12]
}
 8105424:	4618      	mov	r0, r3
 8105426:	3710      	adds	r7, #16
 8105428:	46bd      	mov	sp, r7
 810542a:	bd80      	pop	{r7, pc}
 810542c:	10000504 	.word	0x10000504
 8105430:	1000050c 	.word	0x1000050c
 8105434:	10000514 	.word	0x10000514
 8105438:	1000051c 	.word	0x1000051c

0810543c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 810543c:	b480      	push	{r7}
 810543e:	b083      	sub	sp, #12
 8105440:	af00      	add	r7, sp, #0
 8105442:	6078      	str	r0, [r7, #4]
 8105444:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 810544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810544e:	d009      	beq.n	8105464 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	689b      	ldr	r3, [r3, #8]
 8105454:	683a      	ldr	r2, [r7, #0]
 8105456:	429a      	cmp	r2, r3
 8105458:	d804      	bhi.n	8105464 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810545e:	683b      	ldr	r3, [r7, #0]
 8105460:	4413      	add	r3, r2
 8105462:	e000      	b.n	8105466 <metal_io_virt+0x2a>
 8105464:	2300      	movs	r3, #0
}
 8105466:	4618      	mov	r0, r3
 8105468:	370c      	adds	r7, #12
 810546a:	46bd      	mov	sp, r7
 810546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105470:	4770      	bx	lr

08105472 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8105472:	b5b0      	push	{r4, r5, r7, lr}
 8105474:	b08a      	sub	sp, #40	; 0x28
 8105476:	af00      	add	r7, sp, #0
 8105478:	60f8      	str	r0, [r7, #12]
 810547a:	60b9      	str	r1, [r7, #8]
 810547c:	607a      	str	r2, [r7, #4]
 810547e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8105480:	f107 0310 	add.w	r3, r7, #16
 8105484:	2200      	movs	r2, #0
 8105486:	601a      	str	r2, [r3, #0]
 8105488:	605a      	str	r2, [r3, #4]
 810548a:	609a      	str	r2, [r3, #8]
 810548c:	60da      	str	r2, [r3, #12]
 810548e:	611a      	str	r2, [r3, #16]
 8105490:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8105492:	68fb      	ldr	r3, [r7, #12]
 8105494:	68ba      	ldr	r2, [r7, #8]
 8105496:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8105498:	68fb      	ldr	r3, [r7, #12]
 810549a:	687a      	ldr	r2, [r7, #4]
 810549c:	605a      	str	r2, [r3, #4]
	io->size = size;
 810549e:	68fb      	ldr	r3, [r7, #12]
 81054a0:	683a      	ldr	r2, [r7, #0]
 81054a2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 81054a4:	68fb      	ldr	r3, [r7, #12]
 81054a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81054a8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 81054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054ac:	2b1f      	cmp	r3, #31
 81054ae:	d904      	bls.n	81054ba <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 81054b0:	68fb      	ldr	r3, [r7, #12]
 81054b2:	f04f 32ff 	mov.w	r2, #4294967295
 81054b6:	611a      	str	r2, [r3, #16]
 81054b8:	e006      	b.n	81054c8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 81054ba:	2201      	movs	r2, #1
 81054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054be:	fa02 f303 	lsl.w	r3, r2, r3
 81054c2:	1e5a      	subs	r2, r3, #1
 81054c4:	68fb      	ldr	r3, [r7, #12]
 81054c6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 81054c8:	68fb      	ldr	r3, [r7, #12]
 81054ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81054cc:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 81054ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d00b      	beq.n	81054ec <metal_io_init+0x7a>
 81054d4:	68fb      	ldr	r3, [r7, #12]
 81054d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81054d8:	f103 0418 	add.w	r4, r3, #24
 81054dc:	4615      	mov	r5, r2
 81054de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81054e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81054e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 81054e6:	e884 0003 	stmia.w	r4, {r0, r1}
 81054ea:	e00a      	b.n	8105502 <metal_io_init+0x90>
 81054ec:	68fb      	ldr	r3, [r7, #12]
 81054ee:	f103 0418 	add.w	r4, r3, #24
 81054f2:	f107 0510 	add.w	r5, r7, #16
 81054f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81054f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81054fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 81054fe:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8105502:	68f8      	ldr	r0, [r7, #12]
 8105504:	f7ff ff18 	bl	8105338 <metal_sys_io_mem_map>
}
 8105508:	bf00      	nop
 810550a:	3728      	adds	r7, #40	; 0x28
 810550c:	46bd      	mov	sp, r7
 810550e:	bdb0      	pop	{r4, r5, r7, pc}

08105510 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8105510:	b590      	push	{r4, r7, lr}
 8105512:	b08b      	sub	sp, #44	; 0x2c
 8105514:	af02      	add	r7, sp, #8
 8105516:	60f8      	str	r0, [r7, #12]
 8105518:	60b9      	str	r1, [r7, #8]
 810551a:	607a      	str	r2, [r7, #4]
 810551c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810551e:	68b9      	ldr	r1, [r7, #8]
 8105520:	68f8      	ldr	r0, [r7, #12]
 8105522:	f7ff ff8b 	bl	810543c <metal_io_virt>
 8105526:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810552c:	68fb      	ldr	r3, [r7, #12]
 810552e:	689b      	ldr	r3, [r3, #8]
 8105530:	68ba      	ldr	r2, [r7, #8]
 8105532:	429a      	cmp	r2, r3
 8105534:	d902      	bls.n	810553c <metal_io_block_read+0x2c>
		return -ERANGE;
 8105536:	f06f 0321 	mvn.w	r3, #33	; 0x21
 810553a:	e05c      	b.n	81055f6 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 810553c:	683a      	ldr	r2, [r7, #0]
 810553e:	68bb      	ldr	r3, [r7, #8]
 8105540:	441a      	add	r2, r3
 8105542:	68fb      	ldr	r3, [r7, #12]
 8105544:	689b      	ldr	r3, [r3, #8]
 8105546:	429a      	cmp	r2, r3
 8105548:	d904      	bls.n	8105554 <metal_io_block_read+0x44>
		len = io->size - offset;
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	689a      	ldr	r2, [r3, #8]
 810554e:	68bb      	ldr	r3, [r7, #8]
 8105550:	1ad3      	subs	r3, r2, r3
 8105552:	603b      	str	r3, [r7, #0]
	retlen = len;
 8105554:	683b      	ldr	r3, [r7, #0]
 8105556:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8105558:	68fb      	ldr	r3, [r7, #12]
 810555a:	6a1b      	ldr	r3, [r3, #32]
 810555c:	2b00      	cmp	r3, #0
 810555e:	d00a      	beq.n	8105576 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	6a1c      	ldr	r4, [r3, #32]
 8105564:	683b      	ldr	r3, [r7, #0]
 8105566:	9300      	str	r3, [sp, #0]
 8105568:	2305      	movs	r3, #5
 810556a:	687a      	ldr	r2, [r7, #4]
 810556c:	68b9      	ldr	r1, [r7, #8]
 810556e:	68f8      	ldr	r0, [r7, #12]
 8105570:	47a0      	blx	r4
 8105572:	6178      	str	r0, [r7, #20]
 8105574:	e03e      	b.n	81055f4 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8105576:	f3bf 8f5b 	dmb	ish
		while ( len && (
 810557a:	e00c      	b.n	8105596 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810557c:	69fb      	ldr	r3, [r7, #28]
 810557e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8105580:	69bb      	ldr	r3, [r7, #24]
 8105582:	701a      	strb	r2, [r3, #0]
			dest++;
 8105584:	69bb      	ldr	r3, [r7, #24]
 8105586:	3301      	adds	r3, #1
 8105588:	61bb      	str	r3, [r7, #24]
			ptr++;
 810558a:	69fb      	ldr	r3, [r7, #28]
 810558c:	3301      	adds	r3, #1
 810558e:	61fb      	str	r3, [r7, #28]
			len--;
 8105590:	683b      	ldr	r3, [r7, #0]
 8105592:	3b01      	subs	r3, #1
 8105594:	603b      	str	r3, [r7, #0]
		while ( len && (
 8105596:	683b      	ldr	r3, [r7, #0]
 8105598:	2b00      	cmp	r3, #0
 810559a:	d017      	beq.n	81055cc <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 810559c:	69bb      	ldr	r3, [r7, #24]
 810559e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81055a2:	2b00      	cmp	r3, #0
 81055a4:	d1ea      	bne.n	810557c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 81055a6:	69fb      	ldr	r3, [r7, #28]
 81055a8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d1e5      	bne.n	810557c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81055b0:	e00c      	b.n	81055cc <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 81055b2:	69fb      	ldr	r3, [r7, #28]
 81055b4:	681a      	ldr	r2, [r3, #0]
 81055b6:	69bb      	ldr	r3, [r7, #24]
 81055b8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81055ba:	69bb      	ldr	r3, [r7, #24]
 81055bc:	3304      	adds	r3, #4
 81055be:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 81055c0:	69fb      	ldr	r3, [r7, #28]
 81055c2:	3304      	adds	r3, #4
 81055c4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 81055c6:	683b      	ldr	r3, [r7, #0]
 81055c8:	3b04      	subs	r3, #4
 81055ca:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81055cc:	683b      	ldr	r3, [r7, #0]
 81055ce:	2b03      	cmp	r3, #3
 81055d0:	dcef      	bgt.n	81055b2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 81055d2:	e00c      	b.n	81055ee <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81055d4:	69fb      	ldr	r3, [r7, #28]
 81055d6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 81055d8:	69bb      	ldr	r3, [r7, #24]
 81055da:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 81055dc:	69bb      	ldr	r3, [r7, #24]
 81055de:	3301      	adds	r3, #1
 81055e0:	61bb      	str	r3, [r7, #24]
 81055e2:	69fb      	ldr	r3, [r7, #28]
 81055e4:	3301      	adds	r3, #1
 81055e6:	61fb      	str	r3, [r7, #28]
 81055e8:	683b      	ldr	r3, [r7, #0]
 81055ea:	3b01      	subs	r3, #1
 81055ec:	603b      	str	r3, [r7, #0]
 81055ee:	683b      	ldr	r3, [r7, #0]
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d1ef      	bne.n	81055d4 <metal_io_block_read+0xc4>
	}
	return retlen;
 81055f4:	697b      	ldr	r3, [r7, #20]
}
 81055f6:	4618      	mov	r0, r3
 81055f8:	3724      	adds	r7, #36	; 0x24
 81055fa:	46bd      	mov	sp, r7
 81055fc:	bd90      	pop	{r4, r7, pc}

081055fe <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 81055fe:	b590      	push	{r4, r7, lr}
 8105600:	b08b      	sub	sp, #44	; 0x2c
 8105602:	af02      	add	r7, sp, #8
 8105604:	60f8      	str	r0, [r7, #12]
 8105606:	60b9      	str	r1, [r7, #8]
 8105608:	607a      	str	r2, [r7, #4]
 810560a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810560c:	68b9      	ldr	r1, [r7, #8]
 810560e:	68f8      	ldr	r0, [r7, #12]
 8105610:	f7ff ff14 	bl	810543c <metal_io_virt>
 8105614:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810561a:	68fb      	ldr	r3, [r7, #12]
 810561c:	689b      	ldr	r3, [r3, #8]
 810561e:	68ba      	ldr	r2, [r7, #8]
 8105620:	429a      	cmp	r2, r3
 8105622:	d902      	bls.n	810562a <metal_io_block_write+0x2c>
		return -ERANGE;
 8105624:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8105628:	e05b      	b.n	81056e2 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 810562a:	683a      	ldr	r2, [r7, #0]
 810562c:	68bb      	ldr	r3, [r7, #8]
 810562e:	441a      	add	r2, r3
 8105630:	68fb      	ldr	r3, [r7, #12]
 8105632:	689b      	ldr	r3, [r3, #8]
 8105634:	429a      	cmp	r2, r3
 8105636:	d904      	bls.n	8105642 <metal_io_block_write+0x44>
		len = io->size - offset;
 8105638:	68fb      	ldr	r3, [r7, #12]
 810563a:	689a      	ldr	r2, [r3, #8]
 810563c:	68bb      	ldr	r3, [r7, #8]
 810563e:	1ad3      	subs	r3, r2, r3
 8105640:	603b      	str	r3, [r7, #0]
	retlen = len;
 8105642:	683b      	ldr	r3, [r7, #0]
 8105644:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8105646:	68fb      	ldr	r3, [r7, #12]
 8105648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810564a:	2b00      	cmp	r3, #0
 810564c:	d017      	beq.n	810567e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 810564e:	68fb      	ldr	r3, [r7, #12]
 8105650:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8105652:	683b      	ldr	r3, [r7, #0]
 8105654:	9300      	str	r3, [sp, #0]
 8105656:	2305      	movs	r3, #5
 8105658:	687a      	ldr	r2, [r7, #4]
 810565a:	68b9      	ldr	r1, [r7, #8]
 810565c:	68f8      	ldr	r0, [r7, #12]
 810565e:	47a0      	blx	r4
 8105660:	6178      	str	r0, [r7, #20]
 8105662:	e03d      	b.n	81056e0 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8105664:	69bb      	ldr	r3, [r7, #24]
 8105666:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8105668:	69fb      	ldr	r3, [r7, #28]
 810566a:	701a      	strb	r2, [r3, #0]
			ptr++;
 810566c:	69fb      	ldr	r3, [r7, #28]
 810566e:	3301      	adds	r3, #1
 8105670:	61fb      	str	r3, [r7, #28]
			source++;
 8105672:	69bb      	ldr	r3, [r7, #24]
 8105674:	3301      	adds	r3, #1
 8105676:	61bb      	str	r3, [r7, #24]
			len--;
 8105678:	683b      	ldr	r3, [r7, #0]
 810567a:	3b01      	subs	r3, #1
 810567c:	603b      	str	r3, [r7, #0]
		while ( len && (
 810567e:	683b      	ldr	r3, [r7, #0]
 8105680:	2b00      	cmp	r3, #0
 8105682:	d017      	beq.n	81056b4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8105684:	69fb      	ldr	r3, [r7, #28]
 8105686:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810568a:	2b00      	cmp	r3, #0
 810568c:	d1ea      	bne.n	8105664 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810568e:	69bb      	ldr	r3, [r7, #24]
 8105690:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8105694:	2b00      	cmp	r3, #0
 8105696:	d1e5      	bne.n	8105664 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105698:	e00c      	b.n	81056b4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810569a:	69bb      	ldr	r3, [r7, #24]
 810569c:	681a      	ldr	r2, [r3, #0]
 810569e:	69fb      	ldr	r3, [r7, #28]
 81056a0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81056a2:	69fb      	ldr	r3, [r7, #28]
 81056a4:	3304      	adds	r3, #4
 81056a6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 81056a8:	69bb      	ldr	r3, [r7, #24]
 81056aa:	3304      	adds	r3, #4
 81056ac:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 81056ae:	683b      	ldr	r3, [r7, #0]
 81056b0:	3b04      	subs	r3, #4
 81056b2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81056b4:	683b      	ldr	r3, [r7, #0]
 81056b6:	2b03      	cmp	r3, #3
 81056b8:	dcef      	bgt.n	810569a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 81056ba:	e00c      	b.n	81056d6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81056bc:	69bb      	ldr	r3, [r7, #24]
 81056be:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81056c0:	69fb      	ldr	r3, [r7, #28]
 81056c2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 81056c4:	69fb      	ldr	r3, [r7, #28]
 81056c6:	3301      	adds	r3, #1
 81056c8:	61fb      	str	r3, [r7, #28]
 81056ca:	69bb      	ldr	r3, [r7, #24]
 81056cc:	3301      	adds	r3, #1
 81056ce:	61bb      	str	r3, [r7, #24]
 81056d0:	683b      	ldr	r3, [r7, #0]
 81056d2:	3b01      	subs	r3, #1
 81056d4:	603b      	str	r3, [r7, #0]
 81056d6:	683b      	ldr	r3, [r7, #0]
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d1ef      	bne.n	81056bc <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 81056dc:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 81056e0:	697b      	ldr	r3, [r7, #20]
}
 81056e2:	4618      	mov	r0, r3
 81056e4:	3724      	adds	r7, #36	; 0x24
 81056e6:	46bd      	mov	sp, r7
 81056e8:	bd90      	pop	{r4, r7, pc}

081056ea <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 81056ea:	b40e      	push	{r1, r2, r3}
 81056ec:	b480      	push	{r7}
 81056ee:	b082      	sub	sp, #8
 81056f0:	af00      	add	r7, sp, #0
 81056f2:	4603      	mov	r3, r0
 81056f4:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 81056f6:	bf00      	nop
 81056f8:	3708      	adds	r7, #8
 81056fa:	46bd      	mov	sp, r7
 81056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105700:	b003      	add	sp, #12
 8105702:	4770      	bx	lr

08105704 <metal_io_virt>:
{
 8105704:	b480      	push	{r7}
 8105706:	b083      	sub	sp, #12
 8105708:	af00      	add	r7, sp, #0
 810570a:	6078      	str	r0, [r7, #4]
 810570c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8105712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105716:	d009      	beq.n	810572c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	689b      	ldr	r3, [r3, #8]
 810571c:	683a      	ldr	r2, [r7, #0]
 810571e:	429a      	cmp	r2, r3
 8105720:	d804      	bhi.n	810572c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8105726:	683b      	ldr	r3, [r7, #0]
 8105728:	4413      	add	r3, r2
 810572a:	e000      	b.n	810572e <metal_io_virt+0x2a>
 810572c:	2300      	movs	r3, #0
}
 810572e:	4618      	mov	r0, r3
 8105730:	370c      	adds	r7, #12
 8105732:	46bd      	mov	sp, r7
 8105734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105738:	4770      	bx	lr

0810573a <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 810573a:	b480      	push	{r7}
 810573c:	b085      	sub	sp, #20
 810573e:	af00      	add	r7, sp, #0
 8105740:	6078      	str	r0, [r7, #4]
 8105742:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	681b      	ldr	r3, [r3, #0]
 8105748:	683a      	ldr	r2, [r7, #0]
 810574a:	1ad3      	subs	r3, r2, r3
 810574c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	689b      	ldr	r3, [r3, #8]
 8105752:	68fa      	ldr	r2, [r7, #12]
 8105754:	429a      	cmp	r2, r3
 8105756:	d201      	bcs.n	810575c <metal_io_virt_to_offset+0x22>
 8105758:	68fb      	ldr	r3, [r7, #12]
 810575a:	e001      	b.n	8105760 <metal_io_virt_to_offset+0x26>
 810575c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105760:	4618      	mov	r0, r3
 8105762:	3714      	adds	r7, #20
 8105764:	46bd      	mov	sp, r7
 8105766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810576a:	4770      	bx	lr

0810576c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 810576c:	b590      	push	{r4, r7, lr}
 810576e:	b08d      	sub	sp, #52	; 0x34
 8105770:	af00      	add	r7, sp, #0
 8105772:	60f8      	str	r0, [r7, #12]
 8105774:	60b9      	str	r1, [r7, #8]
 8105776:	603b      	str	r3, [r7, #0]
 8105778:	4613      	mov	r3, r2
 810577a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 810577c:	68b9      	ldr	r1, [r7, #8]
 810577e:	68f8      	ldr	r0, [r7, #12]
 8105780:	f7ff ffc0 	bl	8105704 <metal_io_virt>
 8105784:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	699b      	ldr	r3, [r3, #24]
 810578a:	2b00      	cmp	r3, #0
 810578c:	d009      	beq.n	81057a2 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 810578e:	68fb      	ldr	r3, [r7, #12]
 8105790:	699c      	ldr	r4, [r3, #24]
 8105792:	79fa      	ldrb	r2, [r7, #7]
 8105794:	683b      	ldr	r3, [r7, #0]
 8105796:	68b9      	ldr	r1, [r7, #8]
 8105798:	68f8      	ldr	r0, [r7, #12]
 810579a:	47a0      	blx	r4
 810579c:	4602      	mov	r2, r0
 810579e:	460b      	mov	r3, r1
 81057a0:	e057      	b.n	8105852 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 81057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81057a4:	2b00      	cmp	r3, #0
 81057a6:	d011      	beq.n	81057cc <metal_io_read+0x60>
 81057a8:	683b      	ldr	r3, [r7, #0]
 81057aa:	2b01      	cmp	r3, #1
 81057ac:	d10e      	bne.n	81057cc <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 81057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81057b0:	62bb      	str	r3, [r7, #40]	; 0x28
 81057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057b4:	f3bf 8f5b 	dmb	ish
 81057b8:	781b      	ldrb	r3, [r3, #0]
 81057ba:	f3bf 8f5b 	dmb	ish
 81057be:	b2db      	uxtb	r3, r3
 81057c0:	76fb      	strb	r3, [r7, #27]
 81057c2:	7efb      	ldrb	r3, [r7, #27]
 81057c4:	b2da      	uxtb	r2, r3
 81057c6:	f04f 0300 	mov.w	r3, #0
 81057ca:	e042      	b.n	8105852 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 81057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81057ce:	2b00      	cmp	r3, #0
 81057d0:	d011      	beq.n	81057f6 <metal_io_read+0x8a>
 81057d2:	683b      	ldr	r3, [r7, #0]
 81057d4:	2b02      	cmp	r3, #2
 81057d6:	d10e      	bne.n	81057f6 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 81057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81057da:	627b      	str	r3, [r7, #36]	; 0x24
 81057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057de:	f3bf 8f5b 	dmb	ish
 81057e2:	881b      	ldrh	r3, [r3, #0]
 81057e4:	f3bf 8f5b 	dmb	ish
 81057e8:	b29b      	uxth	r3, r3
 81057ea:	833b      	strh	r3, [r7, #24]
 81057ec:	8b3b      	ldrh	r3, [r7, #24]
 81057ee:	b29a      	uxth	r2, r3
 81057f0:	f04f 0300 	mov.w	r3, #0
 81057f4:	e02d      	b.n	8105852 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 81057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81057f8:	2b00      	cmp	r3, #0
 81057fa:	d010      	beq.n	810581e <metal_io_read+0xb2>
 81057fc:	683b      	ldr	r3, [r7, #0]
 81057fe:	2b04      	cmp	r3, #4
 8105800:	d10d      	bne.n	810581e <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8105802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105804:	623b      	str	r3, [r7, #32]
 8105806:	6a3b      	ldr	r3, [r7, #32]
 8105808:	f3bf 8f5b 	dmb	ish
 810580c:	681b      	ldr	r3, [r3, #0]
 810580e:	f3bf 8f5b 	dmb	ish
 8105812:	617b      	str	r3, [r7, #20]
 8105814:	697b      	ldr	r3, [r7, #20]
 8105816:	461a      	mov	r2, r3
 8105818:	f04f 0300 	mov.w	r3, #0
 810581c:	e019      	b.n	8105852 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 810581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105820:	2b00      	cmp	r3, #0
 8105822:	d010      	beq.n	8105846 <metal_io_read+0xda>
 8105824:	683b      	ldr	r3, [r7, #0]
 8105826:	2b04      	cmp	r3, #4
 8105828:	d10d      	bne.n	8105846 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 810582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810582c:	61fb      	str	r3, [r7, #28]
 810582e:	69fb      	ldr	r3, [r7, #28]
 8105830:	f3bf 8f5b 	dmb	ish
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	f3bf 8f5b 	dmb	ish
 810583a:	613b      	str	r3, [r7, #16]
 810583c:	693b      	ldr	r3, [r7, #16]
 810583e:	461a      	mov	r2, r3
 8105840:	f04f 0300 	mov.w	r3, #0
 8105844:	e005      	b.n	8105852 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8105846:	4b05      	ldr	r3, [pc, #20]	; (810585c <metal_io_read+0xf0>)
 8105848:	4a05      	ldr	r2, [pc, #20]	; (8105860 <metal_io_read+0xf4>)
 810584a:	21f0      	movs	r1, #240	; 0xf0
 810584c:	4805      	ldr	r0, [pc, #20]	; (8105864 <metal_io_read+0xf8>)
 810584e:	f002 fe67 	bl	8108520 <__assert_func>
	return 0; /* quiet compiler */
}
 8105852:	4610      	mov	r0, r2
 8105854:	4619      	mov	r1, r3
 8105856:	3734      	adds	r7, #52	; 0x34
 8105858:	46bd      	mov	sp, r7
 810585a:	bd90      	pop	{r4, r7, pc}
 810585c:	0810da4c 	.word	0x0810da4c
 8105860:	0810dbc0 	.word	0x0810dbc0
 8105864:	0810da50 	.word	0x0810da50

08105868 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8105868:	b580      	push	{r7, lr}
 810586a:	b082      	sub	sp, #8
 810586c:	af00      	add	r7, sp, #0
 810586e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8105870:	6878      	ldr	r0, [r7, #4]
 8105872:	f002 feaf 	bl	81085d4 <malloc>
 8105876:	4603      	mov	r3, r0
}
 8105878:	4618      	mov	r0, r3
 810587a:	3708      	adds	r7, #8
 810587c:	46bd      	mov	sp, r7
 810587e:	bd80      	pop	{r7, pc}

08105880 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8105880:	b580      	push	{r7, lr}
 8105882:	b082      	sub	sp, #8
 8105884:	af00      	add	r7, sp, #0
 8105886:	6078      	str	r0, [r7, #4]
	free(ptr);
 8105888:	6878      	ldr	r0, [r7, #4]
 810588a:	f002 feab 	bl	81085e4 <free>
}
 810588e:	bf00      	nop
 8105890:	3708      	adds	r7, #8
 8105892:	46bd      	mov	sp, r7
 8105894:	bd80      	pop	{r7, pc}

08105896 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8105896:	b580      	push	{r7, lr}
 8105898:	b084      	sub	sp, #16
 810589a:	af00      	add	r7, sp, #0
 810589c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	3307      	adds	r3, #7
 81058a2:	00db      	lsls	r3, r3, #3
 81058a4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 81058a6:	68f8      	ldr	r0, [r7, #12]
 81058a8:	f7ff ffde 	bl	8105868 <metal_allocate_memory>
 81058ac:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 81058ae:	68bb      	ldr	r3, [r7, #8]
 81058b0:	2b00      	cmp	r3, #0
 81058b2:	d004      	beq.n	81058be <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 81058b4:	68fa      	ldr	r2, [r7, #12]
 81058b6:	2100      	movs	r1, #0
 81058b8:	68b8      	ldr	r0, [r7, #8]
 81058ba:	f002 fea9 	bl	8108610 <memset>
	}

	return vqs;
 81058be:	68bb      	ldr	r3, [r7, #8]
}
 81058c0:	4618      	mov	r0, r3
 81058c2:	3710      	adds	r7, #16
 81058c4:	46bd      	mov	sp, r7
 81058c6:	bd80      	pop	{r7, pc}

081058c8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 81058c8:	b580      	push	{r7, lr}
 81058ca:	b086      	sub	sp, #24
 81058cc:	af00      	add	r7, sp, #0
 81058ce:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	891b      	ldrh	r3, [r3, #8]
 81058d4:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81058dc:	693b      	ldr	r3, [r7, #16]
 81058de:	3b18      	subs	r3, #24
 81058e0:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 81058e2:	693b      	ldr	r3, [r7, #16]
 81058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81058e6:	697a      	ldr	r2, [r7, #20]
 81058e8:	429a      	cmp	r2, r3
 81058ea:	d905      	bls.n	81058f8 <rproc_virtio_virtqueue_notify+0x30>
 81058ec:	4b0d      	ldr	r3, [pc, #52]	; (8105924 <rproc_virtio_virtqueue_notify+0x5c>)
 81058ee:	4a0e      	ldr	r2, [pc, #56]	; (8105928 <rproc_virtio_virtqueue_notify+0x60>)
 81058f0:	2133      	movs	r1, #51	; 0x33
 81058f2:	480e      	ldr	r0, [pc, #56]	; (810592c <rproc_virtio_virtqueue_notify+0x64>)
 81058f4:	f002 fe14 	bl	8108520 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 81058f8:	693b      	ldr	r3, [r7, #16]
 81058fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81058fc:	697a      	ldr	r2, [r7, #20]
 81058fe:	4613      	mov	r3, r2
 8105900:	005b      	lsls	r3, r3, #1
 8105902:	4413      	add	r3, r2
 8105904:	00db      	lsls	r3, r3, #3
 8105906:	440b      	add	r3, r1
 8105908:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 810590a:	68fb      	ldr	r3, [r7, #12]
 810590c:	691b      	ldr	r3, [r3, #16]
 810590e:	68fa      	ldr	r2, [r7, #12]
 8105910:	6810      	ldr	r0, [r2, #0]
 8105912:	68ba      	ldr	r2, [r7, #8]
 8105914:	6912      	ldr	r2, [r2, #16]
 8105916:	4611      	mov	r1, r2
 8105918:	4798      	blx	r3
}
 810591a:	bf00      	nop
 810591c:	3718      	adds	r7, #24
 810591e:	46bd      	mov	sp, r7
 8105920:	bd80      	pop	{r7, pc}
 8105922:	bf00      	nop
 8105924:	0810da98 	.word	0x0810da98
 8105928:	0810dba0 	.word	0x0810dba0
 810592c:	0810dab4 	.word	0x0810dab4

08105930 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8105930:	b580      	push	{r7, lr}
 8105932:	b086      	sub	sp, #24
 8105934:	af00      	add	r7, sp, #0
 8105936:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	3b18      	subs	r3, #24
 810593c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810593e:	697b      	ldr	r3, [r7, #20]
 8105940:	689b      	ldr	r3, [r3, #8]
 8105942:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105944:	697b      	ldr	r3, [r7, #20]
 8105946:	68db      	ldr	r3, [r3, #12]
 8105948:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 810594a:	693b      	ldr	r3, [r7, #16]
 810594c:	3318      	adds	r3, #24
 810594e:	4619      	mov	r1, r3
 8105950:	68f8      	ldr	r0, [r7, #12]
 8105952:	f7ff fef2 	bl	810573a <metal_io_virt_to_offset>
 8105956:	4601      	mov	r1, r0
 8105958:	2301      	movs	r3, #1
 810595a:	2205      	movs	r2, #5
 810595c:	68f8      	ldr	r0, [r7, #12]
 810595e:	f7ff ff05 	bl	810576c <metal_io_read>
 8105962:	4602      	mov	r2, r0
 8105964:	460b      	mov	r3, r1
 8105966:	4613      	mov	r3, r2
 8105968:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 810596a:	7afb      	ldrb	r3, [r7, #11]
}
 810596c:	4618      	mov	r0, r3
 810596e:	3718      	adds	r7, #24
 8105970:	46bd      	mov	sp, r7
 8105972:	bd80      	pop	{r7, pc}

08105974 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8105974:	b580      	push	{r7, lr}
 8105976:	b086      	sub	sp, #24
 8105978:	af00      	add	r7, sp, #0
 810597a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	3b18      	subs	r3, #24
 8105980:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8105982:	697b      	ldr	r3, [r7, #20]
 8105984:	689b      	ldr	r3, [r3, #8]
 8105986:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105988:	697b      	ldr	r3, [r7, #20]
 810598a:	68db      	ldr	r3, [r3, #12]
 810598c:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 810598e:	693b      	ldr	r3, [r7, #16]
 8105990:	330c      	adds	r3, #12
 8105992:	4619      	mov	r1, r3
 8105994:	68f8      	ldr	r0, [r7, #12]
 8105996:	f7ff fed0 	bl	810573a <metal_io_virt_to_offset>
 810599a:	4601      	mov	r1, r0
 810599c:	2304      	movs	r3, #4
 810599e:	2205      	movs	r2, #5
 81059a0:	68f8      	ldr	r0, [r7, #12]
 81059a2:	f7ff fee3 	bl	810576c <metal_io_read>
 81059a6:	4602      	mov	r2, r0
 81059a8:	460b      	mov	r3, r1
 81059aa:	4613      	mov	r3, r2
 81059ac:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 81059ae:	68bb      	ldr	r3, [r7, #8]
}
 81059b0:	4618      	mov	r0, r3
 81059b2:	3718      	adds	r7, #24
 81059b4:	46bd      	mov	sp, r7
 81059b6:	bd80      	pop	{r7, pc}

081059b8 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 81059b8:	b480      	push	{r7}
 81059ba:	b083      	sub	sp, #12
 81059bc:	af00      	add	r7, sp, #0
 81059be:	6078      	str	r0, [r7, #4]
 81059c0:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 81059c2:	2300      	movs	r3, #0
}
 81059c4:	4618      	mov	r0, r3
 81059c6:	370c      	adds	r7, #12
 81059c8:	46bd      	mov	sp, r7
 81059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ce:	4770      	bx	lr

081059d0 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81059d0:	b480      	push	{r7}
 81059d2:	b085      	sub	sp, #20
 81059d4:	af00      	add	r7, sp, #0
 81059d6:	60f8      	str	r0, [r7, #12]
 81059d8:	60b9      	str	r1, [r7, #8]
 81059da:	607a      	str	r2, [r7, #4]
 81059dc:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 81059de:	bf00      	nop
 81059e0:	3714      	adds	r7, #20
 81059e2:	46bd      	mov	sp, r7
 81059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059e8:	4770      	bx	lr
	...

081059ec <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 81059ec:	b580      	push	{r7, lr}
 81059ee:	b08e      	sub	sp, #56	; 0x38
 81059f0:	af00      	add	r7, sp, #0
 81059f2:	60f8      	str	r0, [r7, #12]
 81059f4:	60b9      	str	r1, [r7, #8]
 81059f6:	607a      	str	r2, [r7, #4]
 81059f8:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 81059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105a00:	7e5b      	ldrb	r3, [r3, #25]
 8105a02:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8105a04:	2050      	movs	r0, #80	; 0x50
 8105a06:	f7ff ff2f 	bl	8105868 <metal_allocate_memory>
 8105a0a:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8105a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d101      	bne.n	8105a16 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8105a12:	2300      	movs	r3, #0
 8105a14:	e092      	b.n	8105b3c <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8105a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105a18:	4613      	mov	r3, r2
 8105a1a:	005b      	lsls	r3, r3, #1
 8105a1c:	4413      	add	r3, r2
 8105a1e:	00db      	lsls	r3, r3, #3
 8105a20:	4618      	mov	r0, r3
 8105a22:	f7ff ff21 	bl	8105868 <metal_allocate_memory>
 8105a26:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8105a28:	6a3b      	ldr	r3, [r7, #32]
 8105a2a:	2b00      	cmp	r3, #0
 8105a2c:	f000 8081 	beq.w	8105b32 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8105a30:	2250      	movs	r2, #80	; 0x50
 8105a32:	2100      	movs	r1, #0
 8105a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105a36:	f002 fdeb 	bl	8108610 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8105a3a:	2218      	movs	r2, #24
 8105a3c:	2100      	movs	r1, #0
 8105a3e:	6a38      	ldr	r0, [r7, #32]
 8105a40:	f002 fde6 	bl	8108610 <memset>
	vdev = &rpvdev->vdev;
 8105a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105a46:	3318      	adds	r3, #24
 8105a48:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8105a4a:	2300      	movs	r3, #0
 8105a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8105a4e:	e025      	b.n	8105a9c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8105a50:	2300      	movs	r3, #0
 8105a52:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8105a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105a56:	4613      	mov	r3, r2
 8105a58:	009b      	lsls	r3, r3, #2
 8105a5a:	4413      	add	r3, r2
 8105a5c:	009b      	lsls	r3, r3, #2
 8105a5e:	3318      	adds	r3, #24
 8105a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105a62:	4413      	add	r3, r2
 8105a64:	3304      	adds	r3, #4
 8105a66:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8105a68:	68fb      	ldr	r3, [r7, #12]
 8105a6a:	2b00      	cmp	r3, #0
 8105a6c:	d102      	bne.n	8105a74 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8105a6e:	69bb      	ldr	r3, [r7, #24]
 8105a70:	689b      	ldr	r3, [r3, #8]
 8105a72:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8105a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8105a76:	f7ff ff0e 	bl	8105896 <virtqueue_allocate>
 8105a7a:	6178      	str	r0, [r7, #20]
		if (!vq)
 8105a7c:	697b      	ldr	r3, [r7, #20]
 8105a7e:	2b00      	cmp	r3, #0
 8105a80:	d031      	beq.n	8105ae6 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8105a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105a84:	4613      	mov	r3, r2
 8105a86:	005b      	lsls	r3, r3, #1
 8105a88:	4413      	add	r3, r2
 8105a8a:	00db      	lsls	r3, r3, #3
 8105a8c:	461a      	mov	r2, r3
 8105a8e:	6a3b      	ldr	r3, [r7, #32]
 8105a90:	4413      	add	r3, r2
 8105a92:	697a      	ldr	r2, [r7, #20]
 8105a94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8105a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105a98:	3301      	adds	r3, #1
 8105a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8105a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105aa0:	429a      	cmp	r2, r3
 8105aa2:	d3d5      	bcc.n	8105a50 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8105aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105aa8:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8105aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105aae:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8105ab0:	69fb      	ldr	r3, [r7, #28]
 8105ab2:	6a3a      	ldr	r2, [r7, #32]
 8105ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8105ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105aba:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8105abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105abe:	683a      	ldr	r2, [r7, #0]
 8105ac0:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8105ac2:	69fb      	ldr	r3, [r7, #28]
 8105ac4:	68ba      	ldr	r2, [r7, #8]
 8105ac6:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8105ac8:	69fb      	ldr	r3, [r7, #28]
 8105aca:	68fa      	ldr	r2, [r7, #12]
 8105acc:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8105ace:	69fb      	ldr	r3, [r7, #28]
 8105ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105ad2:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8105ad4:	69fb      	ldr	r3, [r7, #28]
 8105ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105ad8:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8105ada:	69fb      	ldr	r3, [r7, #28]
 8105adc:	4a19      	ldr	r2, [pc, #100]	; (8105b44 <rproc_virtio_create_vdev+0x158>)
 8105ade:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8105ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ae2:	3318      	adds	r3, #24
 8105ae4:	e02a      	b.n	8105b3c <rproc_virtio_create_vdev+0x150>
			goto err1;
 8105ae6:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8105ae8:	2300      	movs	r3, #0
 8105aea:	637b      	str	r3, [r7, #52]	; 0x34
 8105aec:	e019      	b.n	8105b22 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8105aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105af0:	4613      	mov	r3, r2
 8105af2:	005b      	lsls	r3, r3, #1
 8105af4:	4413      	add	r3, r2
 8105af6:	00db      	lsls	r3, r3, #3
 8105af8:	461a      	mov	r2, r3
 8105afa:	6a3b      	ldr	r3, [r7, #32]
 8105afc:	4413      	add	r3, r2
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	2b00      	cmp	r3, #0
 8105b02:	d00b      	beq.n	8105b1c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8105b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105b06:	4613      	mov	r3, r2
 8105b08:	005b      	lsls	r3, r3, #1
 8105b0a:	4413      	add	r3, r2
 8105b0c:	00db      	lsls	r3, r3, #3
 8105b0e:	461a      	mov	r2, r3
 8105b10:	6a3b      	ldr	r3, [r7, #32]
 8105b12:	4413      	add	r3, r2
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	4618      	mov	r0, r3
 8105b18:	f7ff feb2 	bl	8105880 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8105b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b1e:	3301      	adds	r3, #1
 8105b20:	637b      	str	r3, [r7, #52]	; 0x34
 8105b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b26:	429a      	cmp	r2, r3
 8105b28:	d3e1      	bcc.n	8105aee <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8105b2a:	6a38      	ldr	r0, [r7, #32]
 8105b2c:	f7ff fea8 	bl	8105880 <metal_free_memory>
 8105b30:	e000      	b.n	8105b34 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8105b32:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8105b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105b36:	f7ff fea3 	bl	8105880 <metal_free_memory>
	return NULL;
 8105b3a:	2300      	movs	r3, #0
}
 8105b3c:	4618      	mov	r0, r3
 8105b3e:	3738      	adds	r7, #56	; 0x38
 8105b40:	46bd      	mov	sp, r7
 8105b42:	bd80      	pop	{r7, pc}
 8105b44:	0810db7c 	.word	0x0810db7c

08105b48 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8105b48:	b480      	push	{r7}
 8105b4a:	b087      	sub	sp, #28
 8105b4c:	af00      	add	r7, sp, #0
 8105b4e:	60f8      	str	r0, [r7, #12]
 8105b50:	60b9      	str	r1, [r7, #8]
 8105b52:	607a      	str	r2, [r7, #4]
 8105b54:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8105b56:	68fb      	ldr	r3, [r7, #12]
 8105b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b5a:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8105b5c:	68ba      	ldr	r2, [r7, #8]
 8105b5e:	697b      	ldr	r3, [r7, #20]
 8105b60:	429a      	cmp	r2, r3
 8105b62:	d302      	bcc.n	8105b6a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8105b64:	f06f 0301 	mvn.w	r3, #1
 8105b68:	e019      	b.n	8105b9e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8105b6a:	68fb      	ldr	r3, [r7, #12]
 8105b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105b6e:	68ba      	ldr	r2, [r7, #8]
 8105b70:	4613      	mov	r3, r2
 8105b72:	005b      	lsls	r3, r3, #1
 8105b74:	4413      	add	r3, r2
 8105b76:	00db      	lsls	r3, r3, #3
 8105b78:	440b      	add	r3, r1
 8105b7a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8105b7c:	693b      	ldr	r3, [r7, #16]
 8105b7e:	6a3a      	ldr	r2, [r7, #32]
 8105b80:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8105b82:	693b      	ldr	r3, [r7, #16]
 8105b84:	687a      	ldr	r2, [r7, #4]
 8105b86:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8105b88:	693b      	ldr	r3, [r7, #16]
 8105b8a:	683a      	ldr	r2, [r7, #0]
 8105b8c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8105b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b90:	b29a      	uxth	r2, r3
 8105b92:	693b      	ldr	r3, [r7, #16]
 8105b94:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8105b96:	693b      	ldr	r3, [r7, #16]
 8105b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105b9a:	609a      	str	r2, [r3, #8]

	return 0;
 8105b9c:	2300      	movs	r3, #0
}
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	371c      	adds	r7, #28
 8105ba2:	46bd      	mov	sp, r7
 8105ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ba8:	4770      	bx	lr

08105baa <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8105baa:	b580      	push	{r7, lr}
 8105bac:	b086      	sub	sp, #24
 8105bae:	af00      	add	r7, sp, #0
 8105bb0:	6078      	str	r0, [r7, #4]
 8105bb2:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	2b00      	cmp	r3, #0
 8105bb8:	d102      	bne.n	8105bc0 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8105bba:	f06f 0315 	mvn.w	r3, #21
 8105bbe:	e02c      	b.n	8105c1a <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	683a      	ldr	r2, [r7, #0]
 8105bc6:	429a      	cmp	r2, r3
 8105bc8:	d101      	bne.n	8105bce <rproc_virtio_notified+0x24>
		return 0;
 8105bca:	2300      	movs	r3, #0
 8105bcc:	e025      	b.n	8105c1a <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bd2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8105bd4:	2300      	movs	r3, #0
 8105bd6:	617b      	str	r3, [r7, #20]
 8105bd8:	e01a      	b.n	8105c10 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105bde:	697a      	ldr	r2, [r7, #20]
 8105be0:	4613      	mov	r3, r2
 8105be2:	005b      	lsls	r3, r3, #1
 8105be4:	4413      	add	r3, r2
 8105be6:	00db      	lsls	r3, r3, #3
 8105be8:	440b      	add	r3, r1
 8105bea:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8105bec:	68fb      	ldr	r3, [r7, #12]
 8105bee:	691b      	ldr	r3, [r3, #16]
 8105bf0:	683a      	ldr	r2, [r7, #0]
 8105bf2:	429a      	cmp	r2, r3
 8105bf4:	d003      	beq.n	8105bfe <rproc_virtio_notified+0x54>
 8105bf6:	683b      	ldr	r3, [r7, #0]
 8105bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105bfc:	d105      	bne.n	8105c0a <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8105bfe:	68fb      	ldr	r3, [r7, #12]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8105c04:	68b8      	ldr	r0, [r7, #8]
 8105c06:	f001 fa19 	bl	810703c <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8105c0a:	697b      	ldr	r3, [r7, #20]
 8105c0c:	3301      	adds	r3, #1
 8105c0e:	617b      	str	r3, [r7, #20]
 8105c10:	697a      	ldr	r2, [r7, #20]
 8105c12:	693b      	ldr	r3, [r7, #16]
 8105c14:	429a      	cmp	r2, r3
 8105c16:	d3e0      	bcc.n	8105bda <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8105c18:	2300      	movs	r3, #0
}
 8105c1a:	4618      	mov	r0, r3
 8105c1c:	3718      	adds	r7, #24
 8105c1e:	46bd      	mov	sp, r7
 8105c20:	bd80      	pop	{r7, pc}

08105c22 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8105c22:	b580      	push	{r7, lr}
 8105c24:	b084      	sub	sp, #16
 8105c26:	af00      	add	r7, sp, #0
 8105c28:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	699b      	ldr	r3, [r3, #24]
 8105c2e:	2b00      	cmp	r3, #0
 8105c30:	d00a      	beq.n	8105c48 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8105c32:	6878      	ldr	r0, [r7, #4]
 8105c34:	f7ff fe7c 	bl	8105930 <rproc_virtio_get_status>
 8105c38:	4603      	mov	r3, r0
 8105c3a:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8105c3c:	7bfb      	ldrb	r3, [r7, #15]
 8105c3e:	f003 0304 	and.w	r3, r3, #4
 8105c42:	2b00      	cmp	r3, #0
 8105c44:	d102      	bne.n	8105c4c <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8105c46:	e7f4      	b.n	8105c32 <rproc_virtio_wait_remote_ready+0x10>
		return;
 8105c48:	bf00      	nop
 8105c4a:	e000      	b.n	8105c4e <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8105c4c:	bf00      	nop
	}
}
 8105c4e:	3710      	adds	r7, #16
 8105c50:	46bd      	mov	sp, r7
 8105c52:	bd80      	pop	{r7, pc}

08105c54 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105c54:	b480      	push	{r7}
 8105c56:	b083      	sub	sp, #12
 8105c58:	af00      	add	r7, sp, #0
 8105c5a:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105c5c:	bf00      	nop
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	2201      	movs	r2, #1
 8105c62:	4611      	mov	r1, r2
 8105c64:	f3bf 8f5b 	dmb	ish
 8105c68:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105c6c:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105c70:	2800      	cmp	r0, #0
 8105c72:	d1f9      	bne.n	8105c68 <__metal_mutex_acquire+0x14>
 8105c74:	f3bf 8f5b 	dmb	ish
 8105c78:	b2d3      	uxtb	r3, r2
 8105c7a:	2b00      	cmp	r3, #0
 8105c7c:	d1ef      	bne.n	8105c5e <__metal_mutex_acquire+0xa>
		;
	}
}
 8105c7e:	bf00      	nop
 8105c80:	bf00      	nop
 8105c82:	370c      	adds	r7, #12
 8105c84:	46bd      	mov	sp, r7
 8105c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c8a:	4770      	bx	lr

08105c8c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8105c8c:	b480      	push	{r7}
 8105c8e:	b083      	sub	sp, #12
 8105c90:	af00      	add	r7, sp, #0
 8105c92:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8105c94:	687b      	ldr	r3, [r7, #4]
 8105c96:	f3bf 8f5b 	dmb	ish
 8105c9a:	2200      	movs	r2, #0
 8105c9c:	701a      	strb	r2, [r3, #0]
 8105c9e:	f3bf 8f5b 	dmb	ish
}
 8105ca2:	bf00      	nop
 8105ca4:	370c      	adds	r7, #12
 8105ca6:	46bd      	mov	sp, r7
 8105ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cac:	4770      	bx	lr

08105cae <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105cae:	b580      	push	{r7, lr}
 8105cb0:	b082      	sub	sp, #8
 8105cb2:	af00      	add	r7, sp, #0
 8105cb4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f7ff ffcc 	bl	8105c54 <__metal_mutex_acquire>
}
 8105cbc:	bf00      	nop
 8105cbe:	3708      	adds	r7, #8
 8105cc0:	46bd      	mov	sp, r7
 8105cc2:	bd80      	pop	{r7, pc}

08105cc4 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8105cc4:	b580      	push	{r7, lr}
 8105cc6:	b082      	sub	sp, #8
 8105cc8:	af00      	add	r7, sp, #0
 8105cca:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8105ccc:	6878      	ldr	r0, [r7, #4]
 8105cce:	f7ff ffdd 	bl	8105c8c <__metal_mutex_release>
}
 8105cd2:	bf00      	nop
 8105cd4:	3708      	adds	r7, #8
 8105cd6:	46bd      	mov	sp, r7
 8105cd8:	bd80      	pop	{r7, pc}

08105cda <metal_list_add_before>:
{
 8105cda:	b480      	push	{r7}
 8105cdc:	b083      	sub	sp, #12
 8105cde:	af00      	add	r7, sp, #0
 8105ce0:	6078      	str	r0, [r7, #4]
 8105ce2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	685a      	ldr	r2, [r3, #4]
 8105ce8:	683b      	ldr	r3, [r7, #0]
 8105cea:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105cec:	683b      	ldr	r3, [r7, #0]
 8105cee:	687a      	ldr	r2, [r7, #4]
 8105cf0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8105cf2:	683b      	ldr	r3, [r7, #0]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	683a      	ldr	r2, [r7, #0]
 8105cf8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8105cfa:	683b      	ldr	r3, [r7, #0]
 8105cfc:	685b      	ldr	r3, [r3, #4]
 8105cfe:	683a      	ldr	r2, [r7, #0]
 8105d00:	601a      	str	r2, [r3, #0]
}
 8105d02:	bf00      	nop
 8105d04:	370c      	adds	r7, #12
 8105d06:	46bd      	mov	sp, r7
 8105d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d0c:	4770      	bx	lr

08105d0e <metal_list_add_tail>:
{
 8105d0e:	b580      	push	{r7, lr}
 8105d10:	b082      	sub	sp, #8
 8105d12:	af00      	add	r7, sp, #0
 8105d14:	6078      	str	r0, [r7, #4]
 8105d16:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8105d18:	6839      	ldr	r1, [r7, #0]
 8105d1a:	6878      	ldr	r0, [r7, #4]
 8105d1c:	f7ff ffdd 	bl	8105cda <metal_list_add_before>
}
 8105d20:	bf00      	nop
 8105d22:	3708      	adds	r7, #8
 8105d24:	46bd      	mov	sp, r7
 8105d26:	bd80      	pop	{r7, pc}

08105d28 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8105d28:	b480      	push	{r7}
 8105d2a:	b083      	sub	sp, #12
 8105d2c:	af00      	add	r7, sp, #0
 8105d2e:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	687a      	ldr	r2, [r7, #4]
 8105d36:	6852      	ldr	r2, [r2, #4]
 8105d38:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	685b      	ldr	r3, [r3, #4]
 8105d3e:	687a      	ldr	r2, [r7, #4]
 8105d40:	6812      	ldr	r2, [r2, #0]
 8105d42:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	687a      	ldr	r2, [r7, #4]
 8105d48:	605a      	str	r2, [r3, #4]
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	685a      	ldr	r2, [r3, #4]
 8105d4e:	687b      	ldr	r3, [r7, #4]
 8105d50:	601a      	str	r2, [r3, #0]
}
 8105d52:	bf00      	nop
 8105d54:	370c      	adds	r7, #12
 8105d56:	46bd      	mov	sp, r7
 8105d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d5c:	4770      	bx	lr

08105d5e <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8105d5e:	b480      	push	{r7}
 8105d60:	b083      	sub	sp, #12
 8105d62:	af00      	add	r7, sp, #0
 8105d64:	6078      	str	r0, [r7, #4]
 8105d66:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105d68:	683b      	ldr	r3, [r7, #0]
 8105d6a:	095b      	lsrs	r3, r3, #5
 8105d6c:	009a      	lsls	r2, r3, #2
 8105d6e:	6879      	ldr	r1, [r7, #4]
 8105d70:	440a      	add	r2, r1
 8105d72:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105d74:	683a      	ldr	r2, [r7, #0]
 8105d76:	f002 021f 	and.w	r2, r2, #31
 8105d7a:	2001      	movs	r0, #1
 8105d7c:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105d80:	009b      	lsls	r3, r3, #2
 8105d82:	6878      	ldr	r0, [r7, #4]
 8105d84:	4403      	add	r3, r0
 8105d86:	430a      	orrs	r2, r1
 8105d88:	601a      	str	r2, [r3, #0]
}
 8105d8a:	bf00      	nop
 8105d8c:	370c      	adds	r7, #12
 8105d8e:	46bd      	mov	sp, r7
 8105d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d94:	4770      	bx	lr

08105d96 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8105d96:	b480      	push	{r7}
 8105d98:	b083      	sub	sp, #12
 8105d9a:	af00      	add	r7, sp, #0
 8105d9c:	6078      	str	r0, [r7, #4]
 8105d9e:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105da0:	683b      	ldr	r3, [r7, #0]
 8105da2:	095b      	lsrs	r3, r3, #5
 8105da4:	009b      	lsls	r3, r3, #2
 8105da6:	687a      	ldr	r2, [r7, #4]
 8105da8:	4413      	add	r3, r2
 8105daa:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105dac:	683b      	ldr	r3, [r7, #0]
 8105dae:	f003 031f 	and.w	r3, r3, #31
 8105db2:	2101      	movs	r1, #1
 8105db4:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105db8:	4013      	ands	r3, r2
}
 8105dba:	4618      	mov	r0, r3
 8105dbc:	370c      	adds	r7, #12
 8105dbe:	46bd      	mov	sp, r7
 8105dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc4:	4770      	bx	lr

08105dc6 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8105dc6:	b480      	push	{r7}
 8105dc8:	b083      	sub	sp, #12
 8105dca:	af00      	add	r7, sp, #0
 8105dcc:	6078      	str	r0, [r7, #4]
 8105dce:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105dd0:	683b      	ldr	r3, [r7, #0]
 8105dd2:	095b      	lsrs	r3, r3, #5
 8105dd4:	009a      	lsls	r2, r3, #2
 8105dd6:	6879      	ldr	r1, [r7, #4]
 8105dd8:	440a      	add	r2, r1
 8105dda:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105ddc:	683a      	ldr	r2, [r7, #0]
 8105dde:	f002 021f 	and.w	r2, r2, #31
 8105de2:	2001      	movs	r0, #1
 8105de4:	fa00 f202 	lsl.w	r2, r0, r2
 8105de8:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105dea:	009b      	lsls	r3, r3, #2
 8105dec:	6878      	ldr	r0, [r7, #4]
 8105dee:	4403      	add	r3, r0
 8105df0:	400a      	ands	r2, r1
 8105df2:	601a      	str	r2, [r3, #0]
}
 8105df4:	bf00      	nop
 8105df6:	370c      	adds	r7, #12
 8105df8:	46bd      	mov	sp, r7
 8105dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dfe:	4770      	bx	lr

08105e00 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8105e00:	b580      	push	{r7, lr}
 8105e02:	b082      	sub	sp, #8
 8105e04:	af00      	add	r7, sp, #0
 8105e06:	6078      	str	r0, [r7, #4]
 8105e08:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8105e0a:	6839      	ldr	r1, [r7, #0]
 8105e0c:	6878      	ldr	r0, [r7, #4]
 8105e0e:	f7ff ffc2 	bl	8105d96 <metal_bitmap_is_bit_set>
 8105e12:	4603      	mov	r3, r0
 8105e14:	2b00      	cmp	r3, #0
 8105e16:	bf0c      	ite	eq
 8105e18:	2301      	moveq	r3, #1
 8105e1a:	2300      	movne	r3, #0
 8105e1c:	b2db      	uxtb	r3, r3
}
 8105e1e:	4618      	mov	r0, r3
 8105e20:	3708      	adds	r7, #8
 8105e22:	46bd      	mov	sp, r7
 8105e24:	bd80      	pop	{r7, pc}

08105e26 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8105e26:	b580      	push	{r7, lr}
 8105e28:	b086      	sub	sp, #24
 8105e2a:	af00      	add	r7, sp, #0
 8105e2c:	60f8      	str	r0, [r7, #12]
 8105e2e:	60b9      	str	r1, [r7, #8]
 8105e30:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8105e32:	68bb      	ldr	r3, [r7, #8]
 8105e34:	617b      	str	r3, [r7, #20]
 8105e36:	e002      	b.n	8105e3e <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8105e38:	697b      	ldr	r3, [r7, #20]
 8105e3a:	3301      	adds	r3, #1
 8105e3c:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8105e3e:	697a      	ldr	r2, [r7, #20]
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	429a      	cmp	r2, r3
 8105e44:	d207      	bcs.n	8105e56 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8105e46:	697b      	ldr	r3, [r7, #20]
 8105e48:	4619      	mov	r1, r3
 8105e4a:	68f8      	ldr	r0, [r7, #12]
 8105e4c:	f7ff ffd8 	bl	8105e00 <metal_bitmap_is_bit_clear>
 8105e50:	4603      	mov	r3, r0
 8105e52:	2b00      	cmp	r3, #0
 8105e54:	d0f0      	beq.n	8105e38 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8105e56:	697b      	ldr	r3, [r7, #20]
}
 8105e58:	4618      	mov	r0, r3
 8105e5a:	3718      	adds	r7, #24
 8105e5c:	46bd      	mov	sp, r7
 8105e5e:	bd80      	pop	{r7, pc}

08105e60 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8105e60:	b580      	push	{r7, lr}
 8105e62:	b084      	sub	sp, #16
 8105e64:	af00      	add	r7, sp, #0
 8105e66:	60f8      	str	r0, [r7, #12]
 8105e68:	60b9      	str	r1, [r7, #8]
 8105e6a:	607a      	str	r2, [r7, #4]
 8105e6c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105e6e:	68fb      	ldr	r3, [r7, #12]
 8105e70:	2220      	movs	r2, #32
 8105e72:	68b9      	ldr	r1, [r7, #8]
 8105e74:	4618      	mov	r0, r3
 8105e76:	f003 fc99 	bl	81097ac <strncpy>
	ept->addr = src;
 8105e7a:	68fb      	ldr	r3, [r7, #12]
 8105e7c:	687a      	ldr	r2, [r7, #4]
 8105e7e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	683a      	ldr	r2, [r7, #0]
 8105e84:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8105e86:	68fb      	ldr	r3, [r7, #12]
 8105e88:	69ba      	ldr	r2, [r7, #24]
 8105e8a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105e8c:	68fb      	ldr	r3, [r7, #12]
 8105e8e:	69fa      	ldr	r2, [r7, #28]
 8105e90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8105e92:	bf00      	nop
 8105e94:	3710      	adds	r7, #16
 8105e96:	46bd      	mov	sp, r7
 8105e98:	bd80      	pop	{r7, pc}

08105e9a <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8105e9a:	b580      	push	{r7, lr}
 8105e9c:	b084      	sub	sp, #16
 8105e9e:	af00      	add	r7, sp, #0
 8105ea0:	6078      	str	r0, [r7, #4]
 8105ea2:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8105ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8105ea8:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8105eaa:	683b      	ldr	r3, [r7, #0]
 8105eac:	461a      	mov	r2, r3
 8105eae:	2100      	movs	r1, #0
 8105eb0:	6878      	ldr	r0, [r7, #4]
 8105eb2:	f7ff ffb8 	bl	8105e26 <metal_bitmap_next_clear_bit>
 8105eb6:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8105eb8:	683b      	ldr	r3, [r7, #0]
 8105eba:	68ba      	ldr	r2, [r7, #8]
 8105ebc:	429a      	cmp	r2, r3
 8105ebe:	d206      	bcs.n	8105ece <rpmsg_get_address+0x34>
		addr = nextbit;
 8105ec0:	68bb      	ldr	r3, [r7, #8]
 8105ec2:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8105ec4:	68bb      	ldr	r3, [r7, #8]
 8105ec6:	4619      	mov	r1, r3
 8105ec8:	6878      	ldr	r0, [r7, #4]
 8105eca:	f7ff ff48 	bl	8105d5e <metal_bitmap_set_bit>
	}

	return addr;
 8105ece:	68fb      	ldr	r3, [r7, #12]
}
 8105ed0:	4618      	mov	r0, r3
 8105ed2:	3710      	adds	r7, #16
 8105ed4:	46bd      	mov	sp, r7
 8105ed6:	bd80      	pop	{r7, pc}

08105ed8 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8105ed8:	b580      	push	{r7, lr}
 8105eda:	b084      	sub	sp, #16
 8105edc:	af00      	add	r7, sp, #0
 8105ede:	60f8      	str	r0, [r7, #12]
 8105ee0:	60b9      	str	r1, [r7, #8]
 8105ee2:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105ee4:	687a      	ldr	r2, [r7, #4]
 8105ee6:	68bb      	ldr	r3, [r7, #8]
 8105ee8:	429a      	cmp	r2, r3
 8105eea:	da03      	bge.n	8105ef4 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8105eec:	6879      	ldr	r1, [r7, #4]
 8105eee:	68f8      	ldr	r0, [r7, #12]
 8105ef0:	f7ff ff69 	bl	8105dc6 <metal_bitmap_clear_bit>
}
 8105ef4:	bf00      	nop
 8105ef6:	3710      	adds	r7, #16
 8105ef8:	46bd      	mov	sp, r7
 8105efa:	bd80      	pop	{r7, pc}

08105efc <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8105efc:	b580      	push	{r7, lr}
 8105efe:	b084      	sub	sp, #16
 8105f00:	af00      	add	r7, sp, #0
 8105f02:	60f8      	str	r0, [r7, #12]
 8105f04:	60b9      	str	r1, [r7, #8]
 8105f06:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105f08:	687a      	ldr	r2, [r7, #4]
 8105f0a:	68bb      	ldr	r3, [r7, #8]
 8105f0c:	429a      	cmp	r2, r3
 8105f0e:	da05      	bge.n	8105f1c <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8105f10:	6879      	ldr	r1, [r7, #4]
 8105f12:	68f8      	ldr	r0, [r7, #12]
 8105f14:	f7ff ff3f 	bl	8105d96 <metal_bitmap_is_bit_set>
 8105f18:	4603      	mov	r3, r0
 8105f1a:	e000      	b.n	8105f1e <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8105f1c:	4b02      	ldr	r3, [pc, #8]	; (8105f28 <rpmsg_is_address_set+0x2c>)
}
 8105f1e:	4618      	mov	r0, r3
 8105f20:	3710      	adds	r7, #16
 8105f22:	46bd      	mov	sp, r7
 8105f24:	bd80      	pop	{r7, pc}
 8105f26:	bf00      	nop
 8105f28:	fffff82d 	.word	0xfffff82d

08105f2c <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8105f2c:	b580      	push	{r7, lr}
 8105f2e:	b084      	sub	sp, #16
 8105f30:	af00      	add	r7, sp, #0
 8105f32:	60f8      	str	r0, [r7, #12]
 8105f34:	60b9      	str	r1, [r7, #8]
 8105f36:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8105f38:	687a      	ldr	r2, [r7, #4]
 8105f3a:	68bb      	ldr	r3, [r7, #8]
 8105f3c:	429a      	cmp	r2, r3
 8105f3e:	da05      	bge.n	8105f4c <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8105f40:	6879      	ldr	r1, [r7, #4]
 8105f42:	68f8      	ldr	r0, [r7, #12]
 8105f44:	f7ff ff0b 	bl	8105d5e <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8105f48:	2300      	movs	r3, #0
 8105f4a:	e000      	b.n	8105f4e <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8105f4c:	4b02      	ldr	r3, [pc, #8]	; (8105f58 <rpmsg_set_address+0x2c>)
	}
}
 8105f4e:	4618      	mov	r0, r3
 8105f50:	3710      	adds	r7, #16
 8105f52:	46bd      	mov	sp, r7
 8105f54:	bd80      	pop	{r7, pc}
 8105f56:	bf00      	nop
 8105f58:	fffff82d 	.word	0xfffff82d

08105f5c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8105f5c:	b590      	push	{r4, r7, lr}
 8105f5e:	b089      	sub	sp, #36	; 0x24
 8105f60:	af02      	add	r7, sp, #8
 8105f62:	60f8      	str	r0, [r7, #12]
 8105f64:	60b9      	str	r1, [r7, #8]
 8105f66:	607a      	str	r2, [r7, #4]
 8105f68:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d00a      	beq.n	8105f86 <rpmsg_send_offchannel_raw+0x2a>
 8105f70:	68fb      	ldr	r3, [r7, #12]
 8105f72:	6a1b      	ldr	r3, [r3, #32]
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d006      	beq.n	8105f86 <rpmsg_send_offchannel_raw+0x2a>
 8105f78:	683b      	ldr	r3, [r7, #0]
 8105f7a:	2b00      	cmp	r3, #0
 8105f7c:	d003      	beq.n	8105f86 <rpmsg_send_offchannel_raw+0x2a>
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105f84:	d101      	bne.n	8105f8a <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8105f86:	4b0d      	ldr	r3, [pc, #52]	; (8105fbc <rpmsg_send_offchannel_raw+0x60>)
 8105f88:	e014      	b.n	8105fb4 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8105f8a:	68fb      	ldr	r3, [r7, #12]
 8105f8c:	6a1b      	ldr	r3, [r3, #32]
 8105f8e:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8105f90:	697b      	ldr	r3, [r7, #20]
 8105f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f94:	2b00      	cmp	r3, #0
 8105f96:	d00c      	beq.n	8105fb2 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8105f98:	697b      	ldr	r3, [r7, #20]
 8105f9a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8105f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f9e:	9301      	str	r3, [sp, #4]
 8105fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105fa2:	9300      	str	r3, [sp, #0]
 8105fa4:	683b      	ldr	r3, [r7, #0]
 8105fa6:	687a      	ldr	r2, [r7, #4]
 8105fa8:	68b9      	ldr	r1, [r7, #8]
 8105faa:	6978      	ldr	r0, [r7, #20]
 8105fac:	47a0      	blx	r4
 8105fae:	4603      	mov	r3, r0
 8105fb0:	e000      	b.n	8105fb4 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8105fb2:	4b02      	ldr	r3, [pc, #8]	; (8105fbc <rpmsg_send_offchannel_raw+0x60>)
}
 8105fb4:	4618      	mov	r0, r3
 8105fb6:	371c      	adds	r7, #28
 8105fb8:	46bd      	mov	sp, r7
 8105fba:	bd90      	pop	{r4, r7, pc}
 8105fbc:	fffff82d 	.word	0xfffff82d

08105fc0 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8105fc0:	b580      	push	{r7, lr}
 8105fc2:	b090      	sub	sp, #64	; 0x40
 8105fc4:	af02      	add	r7, sp, #8
 8105fc6:	6078      	str	r0, [r7, #4]
 8105fc8:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8105fca:	683b      	ldr	r3, [r7, #0]
 8105fcc:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8105fd4:	6879      	ldr	r1, [r7, #4]
 8105fd6:	f107 030c 	add.w	r3, r7, #12
 8105fda:	2220      	movs	r2, #32
 8105fdc:	4618      	mov	r0, r3
 8105fde:	f003 fbe5 	bl	81097ac <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8105fe6:	f107 030c 	add.w	r3, r7, #12
 8105fea:	2201      	movs	r2, #1
 8105fec:	9201      	str	r2, [sp, #4]
 8105fee:	2228      	movs	r2, #40	; 0x28
 8105ff0:	9200      	str	r2, [sp, #0]
 8105ff2:	2235      	movs	r2, #53	; 0x35
 8105ff4:	6878      	ldr	r0, [r7, #4]
 8105ff6:	f7ff ffb1 	bl	8105f5c <rpmsg_send_offchannel_raw>
 8105ffa:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8105ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ffe:	2b00      	cmp	r3, #0
 8106000:	da01      	bge.n	8106006 <rpmsg_send_ns_message+0x46>
		return ret;
 8106002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106004:	e000      	b.n	8106008 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8106006:	2300      	movs	r3, #0
}
 8106008:	4618      	mov	r0, r3
 810600a:	3738      	adds	r7, #56	; 0x38
 810600c:	46bd      	mov	sp, r7
 810600e:	bd80      	pop	{r7, pc}

08106010 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8106010:	b580      	push	{r7, lr}
 8106012:	b088      	sub	sp, #32
 8106014:	af00      	add	r7, sp, #0
 8106016:	60f8      	str	r0, [r7, #12]
 8106018:	60b9      	str	r1, [r7, #8]
 810601a:	607a      	str	r2, [r7, #4]
 810601c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 810601e:	68fb      	ldr	r3, [r7, #12]
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	61fb      	str	r3, [r7, #28]
 8106024:	e04b      	b.n	81060be <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8106026:	2300      	movs	r3, #0
 8106028:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 810602a:	69fb      	ldr	r3, [r7, #28]
 810602c:	3b34      	subs	r3, #52	; 0x34
 810602e:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106036:	d006      	beq.n	8106046 <rpmsg_get_endpoint+0x36>
 8106038:	697b      	ldr	r3, [r7, #20]
 810603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810603c:	687a      	ldr	r2, [r7, #4]
 810603e:	429a      	cmp	r2, r3
 8106040:	d101      	bne.n	8106046 <rpmsg_get_endpoint+0x36>
			return ept;
 8106042:	697b      	ldr	r3, [r7, #20]
 8106044:	e040      	b.n	81060c8 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8106046:	697b      	ldr	r3, [r7, #20]
 8106048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810604a:	687a      	ldr	r2, [r7, #4]
 810604c:	429a      	cmp	r2, r3
 810604e:	d106      	bne.n	810605e <rpmsg_get_endpoint+0x4e>
 8106050:	697b      	ldr	r3, [r7, #20]
 8106052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106054:	683a      	ldr	r2, [r7, #0]
 8106056:	429a      	cmp	r2, r3
 8106058:	d101      	bne.n	810605e <rpmsg_get_endpoint+0x4e>
			return ept;
 810605a:	697b      	ldr	r3, [r7, #20]
 810605c:	e034      	b.n	81060c8 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 810605e:	68bb      	ldr	r3, [r7, #8]
 8106060:	2b00      	cmp	r3, #0
 8106062:	d00c      	beq.n	810607e <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8106064:	697b      	ldr	r3, [r7, #20]
 8106066:	2220      	movs	r2, #32
 8106068:	68b9      	ldr	r1, [r7, #8]
 810606a:	4618      	mov	r0, r3
 810606c:	f003 fb8c 	bl	8109788 <strncmp>
 8106070:	4603      	mov	r3, r0
 8106072:	2b00      	cmp	r3, #0
 8106074:	bf0c      	ite	eq
 8106076:	2301      	moveq	r3, #1
 8106078:	2300      	movne	r3, #0
 810607a:	b2db      	uxtb	r3, r3
 810607c:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 810607e:	68bb      	ldr	r3, [r7, #8]
 8106080:	2b00      	cmp	r3, #0
 8106082:	d018      	beq.n	81060b6 <rpmsg_get_endpoint+0xa6>
 8106084:	69bb      	ldr	r3, [r7, #24]
 8106086:	2b00      	cmp	r3, #0
 8106088:	d015      	beq.n	81060b6 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 810608a:	683b      	ldr	r3, [r7, #0]
 810608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106090:	d006      	beq.n	81060a0 <rpmsg_get_endpoint+0x90>
 8106092:	697b      	ldr	r3, [r7, #20]
 8106094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106096:	683a      	ldr	r2, [r7, #0]
 8106098:	429a      	cmp	r2, r3
 810609a:	d101      	bne.n	81060a0 <rpmsg_get_endpoint+0x90>
			return ept;
 810609c:	697b      	ldr	r3, [r7, #20]
 810609e:	e013      	b.n	81060c8 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81060a6:	d107      	bne.n	81060b8 <rpmsg_get_endpoint+0xa8>
 81060a8:	697b      	ldr	r3, [r7, #20]
 81060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81060b0:	d102      	bne.n	81060b8 <rpmsg_get_endpoint+0xa8>
			return ept;
 81060b2:	697b      	ldr	r3, [r7, #20]
 81060b4:	e008      	b.n	81060c8 <rpmsg_get_endpoint+0xb8>
			continue;
 81060b6:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 81060b8:	69fb      	ldr	r3, [r7, #28]
 81060ba:	681b      	ldr	r3, [r3, #0]
 81060bc:	61fb      	str	r3, [r7, #28]
 81060be:	68fb      	ldr	r3, [r7, #12]
 81060c0:	69fa      	ldr	r2, [r7, #28]
 81060c2:	429a      	cmp	r2, r3
 81060c4:	d1af      	bne.n	8106026 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 81060c6:	2300      	movs	r3, #0
}
 81060c8:	4618      	mov	r0, r3
 81060ca:	3720      	adds	r7, #32
 81060cc:	46bd      	mov	sp, r7
 81060ce:	bd80      	pop	{r7, pc}

081060d0 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 81060d0:	b580      	push	{r7, lr}
 81060d2:	b084      	sub	sp, #16
 81060d4:	af00      	add	r7, sp, #0
 81060d6:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	2b00      	cmp	r3, #0
 81060dc:	d016      	beq.n	810610c <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	6a1b      	ldr	r3, [r3, #32]
 81060e2:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81060ec:	d008      	beq.n	8106100 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 81060ee:	68fb      	ldr	r3, [r7, #12]
 81060f0:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 81060f8:	461a      	mov	r2, r3
 81060fa:	2180      	movs	r1, #128	; 0x80
 81060fc:	f7ff feec 	bl	8105ed8 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	3334      	adds	r3, #52	; 0x34
 8106104:	4618      	mov	r0, r3
 8106106:	f7ff fe0f 	bl	8105d28 <metal_list_del>
 810610a:	e000      	b.n	810610e <rpmsg_unregister_endpoint+0x3e>
		return;
 810610c:	bf00      	nop
}
 810610e:	3710      	adds	r7, #16
 8106110:	46bd      	mov	sp, r7
 8106112:	bd80      	pop	{r7, pc}

08106114 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8106114:	b580      	push	{r7, lr}
 8106116:	b082      	sub	sp, #8
 8106118:	af00      	add	r7, sp, #0
 810611a:	6078      	str	r0, [r7, #4]
 810611c:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 810611e:	683b      	ldr	r3, [r7, #0]
 8106120:	687a      	ldr	r2, [r7, #4]
 8106122:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8106124:	687a      	ldr	r2, [r7, #4]
 8106126:	683b      	ldr	r3, [r7, #0]
 8106128:	3334      	adds	r3, #52	; 0x34
 810612a:	4619      	mov	r1, r3
 810612c:	4610      	mov	r0, r2
 810612e:	f7ff fdee 	bl	8105d0e <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8106132:	2300      	movs	r3, #0
}
 8106134:	4618      	mov	r0, r3
 8106136:	3708      	adds	r7, #8
 8106138:	46bd      	mov	sp, r7
 810613a:	bd80      	pop	{r7, pc}

0810613c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 810613c:	b580      	push	{r7, lr}
 810613e:	b088      	sub	sp, #32
 8106140:	af02      	add	r7, sp, #8
 8106142:	60f8      	str	r0, [r7, #12]
 8106144:	60b9      	str	r1, [r7, #8]
 8106146:	607a      	str	r2, [r7, #4]
 8106148:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 810614a:	683b      	ldr	r3, [r7, #0]
 810614c:	613b      	str	r3, [r7, #16]

	if (!ept)
 810614e:	68fb      	ldr	r3, [r7, #12]
 8106150:	2b00      	cmp	r3, #0
 8106152:	d101      	bne.n	8106158 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8106154:	4b37      	ldr	r3, [pc, #220]	; (8106234 <rpmsg_create_ept+0xf8>)
 8106156:	e068      	b.n	810622a <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8106158:	68bb      	ldr	r3, [r7, #8]
 810615a:	3358      	adds	r3, #88	; 0x58
 810615c:	4618      	mov	r0, r3
 810615e:	f7ff fda6 	bl	8105cae <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8106162:	683b      	ldr	r3, [r7, #0]
 8106164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106168:	d018      	beq.n	810619c <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 810616a:	68bb      	ldr	r3, [r7, #8]
 810616c:	3348      	adds	r3, #72	; 0x48
 810616e:	683a      	ldr	r2, [r7, #0]
 8106170:	2180      	movs	r1, #128	; 0x80
 8106172:	4618      	mov	r0, r3
 8106174:	f7ff fec2 	bl	8105efc <rpmsg_is_address_set>
 8106178:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 810617a:	697b      	ldr	r3, [r7, #20]
 810617c:	2b00      	cmp	r3, #0
 810617e:	d107      	bne.n	8106190 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8106180:	68bb      	ldr	r3, [r7, #8]
 8106182:	3348      	adds	r3, #72	; 0x48
 8106184:	683a      	ldr	r2, [r7, #0]
 8106186:	2180      	movs	r1, #128	; 0x80
 8106188:	4618      	mov	r0, r3
 810618a:	f7ff fecf 	bl	8105f2c <rpmsg_set_address>
 810618e:	e00c      	b.n	81061aa <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8106190:	697b      	ldr	r3, [r7, #20]
 8106192:	2b00      	cmp	r3, #0
 8106194:	dd40      	ble.n	8106218 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8106196:	2300      	movs	r3, #0
 8106198:	617b      	str	r3, [r7, #20]
			goto ret_status;
 810619a:	e040      	b.n	810621e <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 810619c:	68bb      	ldr	r3, [r7, #8]
 810619e:	3348      	adds	r3, #72	; 0x48
 81061a0:	2180      	movs	r1, #128	; 0x80
 81061a2:	4618      	mov	r0, r3
 81061a4:	f7ff fe79 	bl	8105e9a <rpmsg_get_address>
 81061a8:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 81061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81061ac:	9301      	str	r3, [sp, #4]
 81061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061b0:	9300      	str	r3, [sp, #0]
 81061b2:	6a3b      	ldr	r3, [r7, #32]
 81061b4:	693a      	ldr	r2, [r7, #16]
 81061b6:	6879      	ldr	r1, [r7, #4]
 81061b8:	68f8      	ldr	r0, [r7, #12]
 81061ba:	f7ff fe51 	bl	8105e60 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 81061be:	68f9      	ldr	r1, [r7, #12]
 81061c0:	68b8      	ldr	r0, [r7, #8]
 81061c2:	f7ff ffa7 	bl	8106114 <rpmsg_register_endpoint>
 81061c6:	6178      	str	r0, [r7, #20]
	if (status < 0)
 81061c8:	697b      	ldr	r3, [r7, #20]
 81061ca:	2b00      	cmp	r3, #0
 81061cc:	da06      	bge.n	81061dc <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 81061ce:	68bb      	ldr	r3, [r7, #8]
 81061d0:	3348      	adds	r3, #72	; 0x48
 81061d2:	693a      	ldr	r2, [r7, #16]
 81061d4:	2180      	movs	r1, #128	; 0x80
 81061d6:	4618      	mov	r0, r3
 81061d8:	f7ff fe7e 	bl	8105ed8 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 81061dc:	697b      	ldr	r3, [r7, #20]
 81061de:	2b00      	cmp	r3, #0
 81061e0:	d11c      	bne.n	810621c <rpmsg_create_ept+0xe0>
 81061e2:	68fb      	ldr	r3, [r7, #12]
 81061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81061ea:	d117      	bne.n	810621c <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 81061ec:	68bb      	ldr	r3, [r7, #8]
 81061ee:	3358      	adds	r3, #88	; 0x58
 81061f0:	4618      	mov	r0, r3
 81061f2:	f7ff fd67 	bl	8105cc4 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 81061f6:	2100      	movs	r1, #0
 81061f8:	68f8      	ldr	r0, [r7, #12]
 81061fa:	f7ff fee1 	bl	8105fc0 <rpmsg_send_ns_message>
 81061fe:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8106200:	68bb      	ldr	r3, [r7, #8]
 8106202:	3358      	adds	r3, #88	; 0x58
 8106204:	4618      	mov	r0, r3
 8106206:	f7ff fd52 	bl	8105cae <metal_mutex_acquire>
		if (status)
 810620a:	697b      	ldr	r3, [r7, #20]
 810620c:	2b00      	cmp	r3, #0
 810620e:	d005      	beq.n	810621c <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8106210:	68f8      	ldr	r0, [r7, #12]
 8106212:	f7ff ff5d 	bl	81060d0 <rpmsg_unregister_endpoint>
 8106216:	e002      	b.n	810621e <rpmsg_create_ept+0xe2>
			goto ret_status;
 8106218:	bf00      	nop
 810621a:	e000      	b.n	810621e <rpmsg_create_ept+0xe2>
	}

ret_status:
 810621c:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 810621e:	68bb      	ldr	r3, [r7, #8]
 8106220:	3358      	adds	r3, #88	; 0x58
 8106222:	4618      	mov	r0, r3
 8106224:	f7ff fd4e 	bl	8105cc4 <metal_mutex_release>
	return status;
 8106228:	697b      	ldr	r3, [r7, #20]
}
 810622a:	4618      	mov	r0, r3
 810622c:	3718      	adds	r7, #24
 810622e:	46bd      	mov	sp, r7
 8106230:	bd80      	pop	{r7, pc}
 8106232:	bf00      	nop
 8106234:	fffff82d 	.word	0xfffff82d

08106238 <__metal_cache_invalidate>:
{
 8106238:	b580      	push	{r7, lr}
 810623a:	b082      	sub	sp, #8
 810623c:	af00      	add	r7, sp, #0
 810623e:	6078      	str	r0, [r7, #4]
 8106240:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8106242:	6839      	ldr	r1, [r7, #0]
 8106244:	6878      	ldr	r0, [r7, #4]
 8106246:	f000 fc56 	bl	8106af6 <metal_machine_cache_invalidate>
}
 810624a:	bf00      	nop
 810624c:	3708      	adds	r7, #8
 810624e:	46bd      	mov	sp, r7
 8106250:	bd80      	pop	{r7, pc}

08106252 <metal_cache_invalidate>:
{
 8106252:	b580      	push	{r7, lr}
 8106254:	b082      	sub	sp, #8
 8106256:	af00      	add	r7, sp, #0
 8106258:	6078      	str	r0, [r7, #4]
 810625a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 810625c:	6839      	ldr	r1, [r7, #0]
 810625e:	6878      	ldr	r0, [r7, #4]
 8106260:	f7ff ffea 	bl	8106238 <__metal_cache_invalidate>
}
 8106264:	bf00      	nop
 8106266:	3708      	adds	r7, #8
 8106268:	46bd      	mov	sp, r7
 810626a:	bd80      	pop	{r7, pc}

0810626c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 810626c:	b480      	push	{r7}
 810626e:	b083      	sub	sp, #12
 8106270:	af00      	add	r7, sp, #0
 8106272:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8106274:	2300      	movs	r3, #0
}
 8106276:	4618      	mov	r0, r3
 8106278:	370c      	adds	r7, #12
 810627a:	46bd      	mov	sp, r7
 810627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106280:	4770      	bx	lr

08106282 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8106282:	b580      	push	{r7, lr}
 8106284:	b082      	sub	sp, #8
 8106286:	af00      	add	r7, sp, #0
 8106288:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 810628a:	6878      	ldr	r0, [r7, #4]
 810628c:	f7ff ffee 	bl	810626c <__metal_sleep_usec>
 8106290:	4603      	mov	r3, r0
}
 8106292:	4618      	mov	r0, r3
 8106294:	3708      	adds	r7, #8
 8106296:	46bd      	mov	sp, r7
 8106298:	bd80      	pop	{r7, pc}

0810629a <metal_list_init>:
{
 810629a:	b480      	push	{r7}
 810629c:	b083      	sub	sp, #12
 810629e:	af00      	add	r7, sp, #0
 81062a0:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	687a      	ldr	r2, [r7, #4]
 81062a6:	605a      	str	r2, [r3, #4]
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	685a      	ldr	r2, [r3, #4]
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	601a      	str	r2, [r3, #0]
}
 81062b0:	bf00      	nop
 81062b2:	370c      	adds	r7, #12
 81062b4:	46bd      	mov	sp, r7
 81062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ba:	4770      	bx	lr

081062bc <metal_io_virt_to_offset>:
{
 81062bc:	b480      	push	{r7}
 81062be:	b085      	sub	sp, #20
 81062c0:	af00      	add	r7, sp, #0
 81062c2:	6078      	str	r0, [r7, #4]
 81062c4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	681b      	ldr	r3, [r3, #0]
 81062ca:	683a      	ldr	r2, [r7, #0]
 81062cc:	1ad3      	subs	r3, r2, r3
 81062ce:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	689b      	ldr	r3, [r3, #8]
 81062d4:	68fa      	ldr	r2, [r7, #12]
 81062d6:	429a      	cmp	r2, r3
 81062d8:	d201      	bcs.n	81062de <metal_io_virt_to_offset+0x22>
 81062da:	68fb      	ldr	r3, [r7, #12]
 81062dc:	e001      	b.n	81062e2 <metal_io_virt_to_offset+0x26>
 81062de:	f04f 33ff 	mov.w	r3, #4294967295
}
 81062e2:	4618      	mov	r0, r3
 81062e4:	3714      	adds	r7, #20
 81062e6:	46bd      	mov	sp, r7
 81062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062ec:	4770      	bx	lr

081062ee <__metal_mutex_init>:
{
 81062ee:	b480      	push	{r7}
 81062f0:	b085      	sub	sp, #20
 81062f2:	af00      	add	r7, sp, #0
 81062f4:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	60fb      	str	r3, [r7, #12]
 81062fa:	2300      	movs	r3, #0
 81062fc:	60bb      	str	r3, [r7, #8]
 81062fe:	68bb      	ldr	r3, [r7, #8]
 8106300:	461a      	mov	r2, r3
 8106302:	68fb      	ldr	r3, [r7, #12]
 8106304:	f3bf 8f5b 	dmb	ish
 8106308:	601a      	str	r2, [r3, #0]
 810630a:	f3bf 8f5b 	dmb	ish
}
 810630e:	bf00      	nop
 8106310:	3714      	adds	r7, #20
 8106312:	46bd      	mov	sp, r7
 8106314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106318:	4770      	bx	lr

0810631a <__metal_mutex_acquire>:
{
 810631a:	b480      	push	{r7}
 810631c:	b083      	sub	sp, #12
 810631e:	af00      	add	r7, sp, #0
 8106320:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8106322:	bf00      	nop
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	2201      	movs	r2, #1
 8106328:	4611      	mov	r1, r2
 810632a:	f3bf 8f5b 	dmb	ish
 810632e:	e8d3 2f4f 	ldrexb	r2, [r3]
 8106332:	e8c3 1f40 	strexb	r0, r1, [r3]
 8106336:	2800      	cmp	r0, #0
 8106338:	d1f9      	bne.n	810632e <__metal_mutex_acquire+0x14>
 810633a:	f3bf 8f5b 	dmb	ish
 810633e:	b2d3      	uxtb	r3, r2
 8106340:	2b00      	cmp	r3, #0
 8106342:	d1ef      	bne.n	8106324 <__metal_mutex_acquire+0xa>
}
 8106344:	bf00      	nop
 8106346:	bf00      	nop
 8106348:	370c      	adds	r7, #12
 810634a:	46bd      	mov	sp, r7
 810634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106350:	4770      	bx	lr

08106352 <__metal_mutex_release>:
{
 8106352:	b480      	push	{r7}
 8106354:	b083      	sub	sp, #12
 8106356:	af00      	add	r7, sp, #0
 8106358:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	f3bf 8f5b 	dmb	ish
 8106360:	2200      	movs	r2, #0
 8106362:	701a      	strb	r2, [r3, #0]
 8106364:	f3bf 8f5b 	dmb	ish
}
 8106368:	bf00      	nop
 810636a:	370c      	adds	r7, #12
 810636c:	46bd      	mov	sp, r7
 810636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106372:	4770      	bx	lr

08106374 <metal_mutex_init>:
{
 8106374:	b580      	push	{r7, lr}
 8106376:	b082      	sub	sp, #8
 8106378:	af00      	add	r7, sp, #0
 810637a:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 810637c:	6878      	ldr	r0, [r7, #4]
 810637e:	f7ff ffb6 	bl	81062ee <__metal_mutex_init>
}
 8106382:	bf00      	nop
 8106384:	3708      	adds	r7, #8
 8106386:	46bd      	mov	sp, r7
 8106388:	bd80      	pop	{r7, pc}

0810638a <metal_mutex_acquire>:
{
 810638a:	b580      	push	{r7, lr}
 810638c:	b082      	sub	sp, #8
 810638e:	af00      	add	r7, sp, #0
 8106390:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8106392:	6878      	ldr	r0, [r7, #4]
 8106394:	f7ff ffc1 	bl	810631a <__metal_mutex_acquire>
}
 8106398:	bf00      	nop
 810639a:	3708      	adds	r7, #8
 810639c:	46bd      	mov	sp, r7
 810639e:	bd80      	pop	{r7, pc}

081063a0 <metal_mutex_release>:
{
 81063a0:	b580      	push	{r7, lr}
 81063a2:	b082      	sub	sp, #8
 81063a4:	af00      	add	r7, sp, #0
 81063a6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81063a8:	6878      	ldr	r0, [r7, #4]
 81063aa:	f7ff ffd2 	bl	8106352 <__metal_mutex_release>
}
 81063ae:	bf00      	nop
 81063b0:	3708      	adds	r7, #8
 81063b2:	46bd      	mov	sp, r7
 81063b4:	bd80      	pop	{r7, pc}

081063b6 <rpmsg_init_ept>:
{
 81063b6:	b580      	push	{r7, lr}
 81063b8:	b084      	sub	sp, #16
 81063ba:	af00      	add	r7, sp, #0
 81063bc:	60f8      	str	r0, [r7, #12]
 81063be:	60b9      	str	r1, [r7, #8]
 81063c0:	607a      	str	r2, [r7, #4]
 81063c2:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81063c4:	68fb      	ldr	r3, [r7, #12]
 81063c6:	2220      	movs	r2, #32
 81063c8:	68b9      	ldr	r1, [r7, #8]
 81063ca:	4618      	mov	r0, r3
 81063cc:	f003 f9ee 	bl	81097ac <strncpy>
	ept->addr = src;
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	687a      	ldr	r2, [r7, #4]
 81063d4:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 81063d6:	68fb      	ldr	r3, [r7, #12]
 81063d8:	683a      	ldr	r2, [r7, #0]
 81063da:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 81063dc:	68fb      	ldr	r3, [r7, #12]
 81063de:	69ba      	ldr	r2, [r7, #24]
 81063e0:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81063e2:	68fb      	ldr	r3, [r7, #12]
 81063e4:	69fa      	ldr	r2, [r7, #28]
 81063e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 81063e8:	bf00      	nop
 81063ea:	3710      	adds	r7, #16
 81063ec:	46bd      	mov	sp, r7
 81063ee:	bd80      	pop	{r7, pc}

081063f0 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 81063f0:	b480      	push	{r7}
 81063f2:	b083      	sub	sp, #12
 81063f4:	af00      	add	r7, sp, #0
 81063f6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81063fc:	699b      	ldr	r3, [r3, #24]
}
 81063fe:	4618      	mov	r0, r3
 8106400:	370c      	adds	r7, #12
 8106402:	46bd      	mov	sp, r7
 8106404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106408:	4770      	bx	lr

0810640a <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 810640a:	b580      	push	{r7, lr}
 810640c:	b082      	sub	sp, #8
 810640e:	af00      	add	r7, sp, #0
 8106410:	6078      	str	r0, [r7, #4]
 8106412:	460b      	mov	r3, r1
 8106414:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810641a:	6a1b      	ldr	r3, [r3, #32]
 810641c:	685b      	ldr	r3, [r3, #4]
 810641e:	687a      	ldr	r2, [r7, #4]
 8106420:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106422:	78f9      	ldrb	r1, [r7, #3]
 8106424:	4610      	mov	r0, r2
 8106426:	4798      	blx	r3
}
 8106428:	bf00      	nop
 810642a:	3708      	adds	r7, #8
 810642c:	46bd      	mov	sp, r7
 810642e:	bd80      	pop	{r7, pc}

08106430 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8106430:	b580      	push	{r7, lr}
 8106432:	b082      	sub	sp, #8
 8106434:	af00      	add	r7, sp, #0
 8106436:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810643c:	6a1b      	ldr	r3, [r3, #32]
 810643e:	681b      	ldr	r3, [r3, #0]
 8106440:	687a      	ldr	r2, [r7, #4]
 8106442:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106444:	4610      	mov	r0, r2
 8106446:	4798      	blx	r3
 8106448:	4603      	mov	r3, r0
}
 810644a:	4618      	mov	r0, r3
 810644c:	3708      	adds	r7, #8
 810644e:	46bd      	mov	sp, r7
 8106450:	bd80      	pop	{r7, pc}

08106452 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8106452:	b580      	push	{r7, lr}
 8106454:	b082      	sub	sp, #8
 8106456:	af00      	add	r7, sp, #0
 8106458:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810645e:	6a1b      	ldr	r3, [r3, #32]
 8106460:	689b      	ldr	r3, [r3, #8]
 8106462:	687a      	ldr	r2, [r7, #4]
 8106464:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106466:	4610      	mov	r0, r2
 8106468:	4798      	blx	r3
 810646a:	4603      	mov	r3, r0
}
 810646c:	4618      	mov	r0, r3
 810646e:	3708      	adds	r7, #8
 8106470:	46bd      	mov	sp, r7
 8106472:	bd80      	pop	{r7, pc}

08106474 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8106474:	b580      	push	{r7, lr}
 8106476:	b086      	sub	sp, #24
 8106478:	af02      	add	r7, sp, #8
 810647a:	60f8      	str	r0, [r7, #12]
 810647c:	60b9      	str	r1, [r7, #8]
 810647e:	607a      	str	r2, [r7, #4]
 8106480:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8106482:	68fb      	ldr	r3, [r7, #12]
 8106484:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8106486:	68b9      	ldr	r1, [r7, #8]
 8106488:	69bb      	ldr	r3, [r7, #24]
 810648a:	9300      	str	r3, [sp, #0]
 810648c:	683b      	ldr	r3, [r7, #0]
 810648e:	687a      	ldr	r2, [r7, #4]
 8106490:	f000 fb4a 	bl	8106b28 <virtio_create_virtqueues>
 8106494:	4603      	mov	r3, r0
					callbacks);
}
 8106496:	4618      	mov	r0, r3
 8106498:	3710      	adds	r7, #16
 810649a:	46bd      	mov	sp, r7
 810649c:	bd80      	pop	{r7, pc}

0810649e <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 810649e:	b580      	push	{r7, lr}
 81064a0:	b082      	sub	sp, #8
 81064a2:	af00      	add	r7, sp, #0
 81064a4:	6078      	str	r0, [r7, #4]
 81064a6:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 81064a8:	f04f 33ff 	mov.w	r3, #4294967295
 81064ac:	683a      	ldr	r2, [r7, #0]
 81064ae:	2100      	movs	r1, #0
 81064b0:	6878      	ldr	r0, [r7, #4]
 81064b2:	f7ff fdad 	bl	8106010 <rpmsg_get_endpoint>
 81064b6:	4603      	mov	r3, r0
}
 81064b8:	4618      	mov	r0, r3
 81064ba:	3708      	adds	r7, #8
 81064bc:	46bd      	mov	sp, r7
 81064be:	bd80      	pop	{r7, pc}

081064c0 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81064c0:	b480      	push	{r7}
 81064c2:	b085      	sub	sp, #20
 81064c4:	af00      	add	r7, sp, #0
 81064c6:	60f8      	str	r0, [r7, #12]
 81064c8:	60b9      	str	r1, [r7, #8]
 81064ca:	607a      	str	r2, [r7, #4]
	if (!shpool)
 81064cc:	68fb      	ldr	r3, [r7, #12]
 81064ce:	2b00      	cmp	r3, #0
 81064d0:	d01d      	beq.n	810650e <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 81064d2:	68fb      	ldr	r3, [r7, #12]
 81064d4:	68ba      	ldr	r2, [r7, #8]
 81064d6:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	f003 0303 	and.w	r3, r3, #3
 81064de:	2b00      	cmp	r3, #0
 81064e0:	d004      	beq.n	81064ec <rpmsg_virtio_init_shm_pool+0x2c>
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	f023 0303 	bic.w	r3, r3, #3
 81064e8:	3304      	adds	r3, #4
 81064ea:	e000      	b.n	81064ee <rpmsg_virtio_init_shm_pool+0x2e>
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	68fa      	ldr	r2, [r7, #12]
 81064f0:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	f003 0303 	and.w	r3, r3, #3
 81064f8:	2b00      	cmp	r3, #0
 81064fa:	d004      	beq.n	8106506 <rpmsg_virtio_init_shm_pool+0x46>
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	f023 0303 	bic.w	r3, r3, #3
 8106502:	3304      	adds	r3, #4
 8106504:	e000      	b.n	8106508 <rpmsg_virtio_init_shm_pool+0x48>
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	68fa      	ldr	r2, [r7, #12]
 810650a:	6053      	str	r3, [r2, #4]
 810650c:	e000      	b.n	8106510 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 810650e:	bf00      	nop
}
 8106510:	3714      	adds	r7, #20
 8106512:	46bd      	mov	sp, r7
 8106514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106518:	4770      	bx	lr

0810651a <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810651a:	b580      	push	{r7, lr}
 810651c:	b086      	sub	sp, #24
 810651e:	af00      	add	r7, sp, #0
 8106520:	60f8      	str	r0, [r7, #12]
 8106522:	60b9      	str	r1, [r7, #8]
 8106524:	607a      	str	r2, [r7, #4]
 8106526:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106528:	68f8      	ldr	r0, [r7, #12]
 810652a:	f7ff ff61 	bl	81063f0 <rpmsg_virtio_get_role>
 810652e:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106530:	697b      	ldr	r3, [r7, #20]
 8106532:	2b01      	cmp	r3, #1
 8106534:	d106      	bne.n	8106544 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8106536:	68fb      	ldr	r3, [r7, #12]
 8106538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810653a:	8879      	ldrh	r1, [r7, #2]
 810653c:	687a      	ldr	r2, [r7, #4]
 810653e:	4618      	mov	r0, r3
 8106540:	f000 fc9c 	bl	8106e7c <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8106544:	bf00      	nop
 8106546:	3718      	adds	r7, #24
 8106548:	46bd      	mov	sp, r7
 810654a:	bd80      	pop	{r7, pc}

0810654c <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810654c:	b580      	push	{r7, lr}
 810654e:	b086      	sub	sp, #24
 8106550:	af00      	add	r7, sp, #0
 8106552:	60f8      	str	r0, [r7, #12]
 8106554:	60b9      	str	r1, [r7, #8]
 8106556:	607a      	str	r2, [r7, #4]
 8106558:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810655a:	68f8      	ldr	r0, [r7, #12]
 810655c:	f7ff ff48 	bl	81063f0 <rpmsg_virtio_get_role>
 8106560:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106562:	697b      	ldr	r3, [r7, #20]
 8106564:	2b01      	cmp	r3, #1
 8106566:	d108      	bne.n	810657a <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8106568:	68fb      	ldr	r3, [r7, #12]
 810656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810656c:	8879      	ldrh	r1, [r7, #2]
 810656e:	687a      	ldr	r2, [r7, #4]
 8106570:	4618      	mov	r0, r3
 8106572:	f000 fc83 	bl	8106e7c <virtqueue_add_consumed_buffer>
 8106576:	4603      	mov	r3, r0
 8106578:	e000      	b.n	810657c <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 810657a:	2300      	movs	r3, #0
}
 810657c:	4618      	mov	r0, r3
 810657e:	3718      	adds	r7, #24
 8106580:	46bd      	mov	sp, r7
 8106582:	bd80      	pop	{r7, pc}

08106584 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8106584:	b580      	push	{r7, lr}
 8106586:	b086      	sub	sp, #24
 8106588:	af00      	add	r7, sp, #0
 810658a:	60f8      	str	r0, [r7, #12]
 810658c:	60b9      	str	r1, [r7, #8]
 810658e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106590:	68f8      	ldr	r0, [r7, #12]
 8106592:	f7ff ff2d 	bl	81063f0 <rpmsg_virtio_get_role>
 8106596:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8106598:	2300      	movs	r3, #0
 810659a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810659c:	693b      	ldr	r3, [r7, #16]
 810659e:	2b01      	cmp	r3, #1
 81065a0:	d107      	bne.n	81065b2 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 81065a2:	68fb      	ldr	r3, [r7, #12]
 81065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81065a6:	68ba      	ldr	r2, [r7, #8]
 81065a8:	6879      	ldr	r1, [r7, #4]
 81065aa:	4618      	mov	r0, r3
 81065ac:	f000 fc20 	bl	8106df0 <virtqueue_get_available_buffer>
 81065b0:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 81065b2:	697b      	ldr	r3, [r7, #20]
}
 81065b4:	4618      	mov	r0, r3
 81065b6:	3718      	adds	r7, #24
 81065b8:	46bd      	mov	sp, r7
 81065ba:	bd80      	pop	{r7, pc}

081065bc <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81065bc:	b580      	push	{r7, lr}
 81065be:	b086      	sub	sp, #24
 81065c0:	af00      	add	r7, sp, #0
 81065c2:	60f8      	str	r0, [r7, #12]
 81065c4:	60b9      	str	r1, [r7, #8]
 81065c6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81065c8:	68f8      	ldr	r0, [r7, #12]
 81065ca:	f7ff ff11 	bl	81063f0 <rpmsg_virtio_get_role>
 81065ce:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81065d0:	2300      	movs	r3, #0
 81065d2:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81065d4:	693b      	ldr	r3, [r7, #16]
 81065d6:	2b01      	cmp	r3, #1
 81065d8:	d107      	bne.n	81065ea <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81065de:	68ba      	ldr	r2, [r7, #8]
 81065e0:	6879      	ldr	r1, [r7, #4]
 81065e2:	4618      	mov	r0, r3
 81065e4:	f000 fc04 	bl	8106df0 <virtqueue_get_available_buffer>
 81065e8:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 81065ea:	697b      	ldr	r3, [r7, #20]
 81065ec:	2b00      	cmp	r3, #0
 81065ee:	d005      	beq.n	81065fc <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 81065f0:	68bb      	ldr	r3, [r7, #8]
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	4619      	mov	r1, r3
 81065f6:	6978      	ldr	r0, [r7, #20]
 81065f8:	f7ff fe2b 	bl	8106252 <metal_cache_invalidate>
	}

	return data;
 81065fc:	697b      	ldr	r3, [r7, #20]
}
 81065fe:	4618      	mov	r0, r3
 8106600:	3718      	adds	r7, #24
 8106602:	46bd      	mov	sp, r7
 8106604:	bd80      	pop	{r7, pc}

08106606 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8106606:	b580      	push	{r7, lr}
 8106608:	b084      	sub	sp, #16
 810660a:	af00      	add	r7, sp, #0
 810660c:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 810660e:	6878      	ldr	r0, [r7, #4]
 8106610:	f7ff ff0e 	bl	8106430 <rpmsg_virtio_get_status>
 8106614:	4603      	mov	r3, r0
 8106616:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8106618:	7bfb      	ldrb	r3, [r7, #15]
 810661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810661e:	2b00      	cmp	r3, #0
 8106620:	d004      	beq.n	810662c <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8106622:	2100      	movs	r1, #0
 8106624:	6878      	ldr	r0, [r7, #4]
 8106626:	f7ff fef0 	bl	810640a <rpmsg_virtio_set_status>
 810662a:	e7f0      	b.n	810660e <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 810662c:	7bfb      	ldrb	r3, [r7, #15]
 810662e:	f003 0304 	and.w	r3, r3, #4
 8106632:	2b00      	cmp	r3, #0
 8106634:	d0eb      	beq.n	810660e <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8106636:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8106638:	4618      	mov	r0, r3
 810663a:	3710      	adds	r7, #16
 810663c:	46bd      	mov	sp, r7
 810663e:	bd80      	pop	{r7, pc}

08106640 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8106640:	b580      	push	{r7, lr}
 8106642:	b084      	sub	sp, #16
 8106644:	af00      	add	r7, sp, #0
 8106646:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106648:	6878      	ldr	r0, [r7, #4]
 810664a:	f7ff fed1 	bl	81063f0 <rpmsg_virtio_get_role>
 810664e:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8106650:	2300      	movs	r3, #0
 8106652:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106654:	68bb      	ldr	r3, [r7, #8]
 8106656:	2b01      	cmp	r3, #1
 8106658:	d107      	bne.n	810666a <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810665e:	4618      	mov	r0, r3
 8106660:	f000 fc86 	bl	8106f70 <virtqueue_get_desc_size>
 8106664:	4603      	mov	r3, r0
 8106666:	3b10      	subs	r3, #16
		length =
 8106668:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 810666a:	68fb      	ldr	r3, [r7, #12]
}
 810666c:	4618      	mov	r0, r3
 810666e:	3710      	adds	r7, #16
 8106670:	46bd      	mov	sp, r7
 8106672:	bd80      	pop	{r7, pc}

08106674 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8106674:	b580      	push	{r7, lr}
 8106676:	b090      	sub	sp, #64	; 0x40
 8106678:	af00      	add	r7, sp, #0
 810667a:	60f8      	str	r0, [r7, #12]
 810667c:	60b9      	str	r1, [r7, #8]
 810667e:	607a      	str	r2, [r7, #4]
 8106680:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8106682:	2300      	movs	r3, #0
 8106684:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8106686:	2300      	movs	r3, #0
 8106688:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 810668a:	68fb      	ldr	r3, [r7, #12]
 810668c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 810668e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106690:	f7ff fece 	bl	8106430 <rpmsg_virtio_get_status>
 8106694:	4603      	mov	r3, r0
 8106696:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8106698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810669a:	f003 0304 	and.w	r3, r3, #4
 810669e:	2b00      	cmp	r3, #0
 81066a0:	d101      	bne.n	81066a6 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 81066a2:	4b45      	ldr	r3, [pc, #276]	; (81067b8 <rpmsg_virtio_send_offchannel_raw+0x144>)
 81066a4:	e083      	b.n	81067ae <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 81066a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d003      	beq.n	81066b4 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 81066ac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 81066b0:	63bb      	str	r3, [r7, #56]	; 0x38
 81066b2:	e001      	b.n	81066b8 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 81066b4:	2300      	movs	r3, #0
 81066b6:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81066b8:	68fb      	ldr	r3, [r7, #12]
 81066ba:	3358      	adds	r3, #88	; 0x58
 81066bc:	4618      	mov	r0, r3
 81066be:	f7ff fe64 	bl	810638a <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 81066c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81066c4:	f7ff ffbc 	bl	8106640 <_rpmsg_virtio_get_buffer_size>
 81066c8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 81066ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81066ce:	429a      	cmp	r2, r3
 81066d0:	dc08      	bgt.n	81066e4 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81066d2:	f107 0216 	add.w	r2, r7, #22
 81066d6:	f107 0310 	add.w	r3, r7, #16
 81066da:	4619      	mov	r1, r3
 81066dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81066de:	f7ff ff51 	bl	8106584 <rpmsg_virtio_get_tx_buffer>
 81066e2:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 81066e4:	68fb      	ldr	r3, [r7, #12]
 81066e6:	3358      	adds	r3, #88	; 0x58
 81066e8:	4618      	mov	r0, r3
 81066ea:	f7ff fe59 	bl	81063a0 <metal_mutex_release>
		if (buffer || !tick_count)
 81066ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81066f0:	2b00      	cmp	r3, #0
 81066f2:	d10e      	bne.n	8106712 <rpmsg_virtio_send_offchannel_raw+0x9e>
 81066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066f6:	2b00      	cmp	r3, #0
 81066f8:	d00b      	beq.n	8106712 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 81066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81066fc:	2b00      	cmp	r3, #0
 81066fe:	d001      	beq.n	8106704 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8106700:	4b2e      	ldr	r3, [pc, #184]	; (81067bc <rpmsg_virtio_send_offchannel_raw+0x148>)
 8106702:	e054      	b.n	81067ae <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8106704:	200a      	movs	r0, #10
 8106706:	f7ff fdbc 	bl	8106282 <metal_sleep_usec>
		tick_count--;
 810670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810670c:	3b01      	subs	r3, #1
 810670e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8106710:	e7d2      	b.n	81066b8 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8106712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106714:	2b00      	cmp	r3, #0
 8106716:	d101      	bne.n	810671c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8106718:	4b29      	ldr	r3, [pc, #164]	; (81067c0 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 810671a:	e048      	b.n	81067ae <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8106720:	68bb      	ldr	r3, [r7, #8]
 8106722:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8106724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106726:	b29b      	uxth	r3, r3
 8106728:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 810672a:	2300      	movs	r3, #0
 810672c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 810672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106732:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8106734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106738:	f7ff fdc0 	bl	81062bc <metal_io_virt_to_offset>
 810673c:	4601      	mov	r1, r0
 810673e:	f107 0218 	add.w	r2, r7, #24
 8106742:	2310      	movs	r3, #16
 8106744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106746:	f7fe ff5a 	bl	81055fe <metal_io_block_write>
 810674a:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 810674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810674e:	2b10      	cmp	r3, #16
 8106750:	d000      	beq.n	8106754 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8106752:	e7fe      	b.n	8106752 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8106754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106756:	3310      	adds	r3, #16
 8106758:	4619      	mov	r1, r3
 810675a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810675c:	f7ff fdae 	bl	81062bc <metal_io_virt_to_offset>
 8106760:	4601      	mov	r1, r0
 8106762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106764:	683a      	ldr	r2, [r7, #0]
 8106766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106768:	f7fe ff49 	bl	81055fe <metal_io_block_write>
 810676c:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 810676e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106772:	429a      	cmp	r2, r3
 8106774:	d000      	beq.n	8106778 <rpmsg_virtio_send_offchannel_raw+0x104>
 8106776:	e7fe      	b.n	8106776 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8106778:	68fb      	ldr	r3, [r7, #12]
 810677a:	3358      	adds	r3, #88	; 0x58
 810677c:	4618      	mov	r0, r3
 810677e:	f7ff fe04 	bl	810638a <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8106782:	693a      	ldr	r2, [r7, #16]
 8106784:	8afb      	ldrh	r3, [r7, #22]
 8106786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810678a:	f7ff fedf 	bl	810654c <rpmsg_virtio_enqueue_buffer>
 810678e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8106790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106792:	2b00      	cmp	r3, #0
 8106794:	d000      	beq.n	8106798 <rpmsg_virtio_send_offchannel_raw+0x124>
 8106796:	e7fe      	b.n	8106796 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8106798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810679c:	4618      	mov	r0, r3
 810679e:	f000 fbd1 	bl	8106f44 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 81067a2:	68fb      	ldr	r3, [r7, #12]
 81067a4:	3358      	adds	r3, #88	; 0x58
 81067a6:	4618      	mov	r0, r3
 81067a8:	f7ff fdfa 	bl	81063a0 <metal_mutex_release>

	return size;
 81067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 81067ae:	4618      	mov	r0, r3
 81067b0:	3740      	adds	r7, #64	; 0x40
 81067b2:	46bd      	mov	sp, r7
 81067b4:	bd80      	pop	{r7, pc}
 81067b6:	bf00      	nop
 81067b8:	fffff82c 	.word	0xfffff82c
 81067bc:	fffff82b 	.word	0xfffff82b
 81067c0:	fffff82e 	.word	0xfffff82e

081067c4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 81067c4:	b480      	push	{r7}
 81067c6:	b083      	sub	sp, #12
 81067c8:	af00      	add	r7, sp, #0
 81067ca:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81067cc:	bf00      	nop
 81067ce:	370c      	adds	r7, #12
 81067d0:	46bd      	mov	sp, r7
 81067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067d6:	4770      	bx	lr

081067d8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 81067d8:	b590      	push	{r4, r7, lr}
 81067da:	b08d      	sub	sp, #52	; 0x34
 81067dc:	af02      	add	r7, sp, #8
 81067de:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 81067e0:	687b      	ldr	r3, [r7, #4]
 81067e2:	681b      	ldr	r3, [r3, #0]
 81067e4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 81067e6:	6a3b      	ldr	r3, [r7, #32]
 81067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81067ea:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 81067ec:	69fb      	ldr	r3, [r7, #28]
 81067ee:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 81067f0:	69bb      	ldr	r3, [r7, #24]
 81067f2:	3358      	adds	r3, #88	; 0x58
 81067f4:	4618      	mov	r0, r3
 81067f6:	f7ff fdc8 	bl	810638a <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 81067fa:	f107 020a 	add.w	r2, r7, #10
 81067fe:	f107 030c 	add.w	r3, r7, #12
 8106802:	4619      	mov	r1, r3
 8106804:	69f8      	ldr	r0, [r7, #28]
 8106806:	f7ff fed9 	bl	81065bc <rpmsg_virtio_get_rx_buffer>
 810680a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 810680c:	69bb      	ldr	r3, [r7, #24]
 810680e:	3358      	adds	r3, #88	; 0x58
 8106810:	4618      	mov	r0, r3
 8106812:	f7ff fdc5 	bl	81063a0 <metal_mutex_release>

	while (rp_hdr) {
 8106816:	e04c      	b.n	81068b2 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8106818:	69bb      	ldr	r3, [r7, #24]
 810681a:	3358      	adds	r3, #88	; 0x58
 810681c:	4618      	mov	r0, r3
 810681e:	f7ff fdb4 	bl	810638a <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8106822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106824:	685b      	ldr	r3, [r3, #4]
 8106826:	4619      	mov	r1, r3
 8106828:	69b8      	ldr	r0, [r7, #24]
 810682a:	f7ff fe38 	bl	810649e <rpmsg_get_ept_from_addr>
 810682e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8106830:	69bb      	ldr	r3, [r7, #24]
 8106832:	3358      	adds	r3, #88	; 0x58
 8106834:	4618      	mov	r0, r3
 8106836:	f7ff fdb3 	bl	81063a0 <metal_mutex_release>

		if (!ept)
 810683a:	697b      	ldr	r3, [r7, #20]
 810683c:	2b00      	cmp	r3, #0
 810683e:	d03c      	beq.n	81068ba <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8106840:	697b      	ldr	r3, [r7, #20]
 8106842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106848:	d103      	bne.n	8106852 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 810684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810684c:	681a      	ldr	r2, [r3, #0]
 810684e:	697b      	ldr	r3, [r7, #20]
 8106850:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8106852:	697b      	ldr	r3, [r7, #20]
 8106854:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8106856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106858:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 810685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810685e:	899b      	ldrh	r3, [r3, #12]
 8106860:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8106862:	4618      	mov	r0, r3
 8106864:	697b      	ldr	r3, [r7, #20]
 8106866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106868:	697b      	ldr	r3, [r7, #20]
 810686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810686c:	9300      	str	r3, [sp, #0]
 810686e:	4613      	mov	r3, r2
 8106870:	4602      	mov	r2, r0
 8106872:	6978      	ldr	r0, [r7, #20]
 8106874:	47a0      	blx	r4
 8106876:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8106878:	693b      	ldr	r3, [r7, #16]
 810687a:	2b00      	cmp	r3, #0
 810687c:	d000      	beq.n	8106880 <rpmsg_virtio_rx_callback+0xa8>
 810687e:	e7fe      	b.n	810687e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8106880:	69bb      	ldr	r3, [r7, #24]
 8106882:	3358      	adds	r3, #88	; 0x58
 8106884:	4618      	mov	r0, r3
 8106886:	f7ff fd80 	bl	810638a <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 810688a:	68fa      	ldr	r2, [r7, #12]
 810688c:	897b      	ldrh	r3, [r7, #10]
 810688e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8106890:	69f8      	ldr	r0, [r7, #28]
 8106892:	f7ff fe42 	bl	810651a <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8106896:	f107 020a 	add.w	r2, r7, #10
 810689a:	f107 030c 	add.w	r3, r7, #12
 810689e:	4619      	mov	r1, r3
 81068a0:	69f8      	ldr	r0, [r7, #28]
 81068a2:	f7ff fe8b 	bl	81065bc <rpmsg_virtio_get_rx_buffer>
 81068a6:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 81068a8:	69bb      	ldr	r3, [r7, #24]
 81068aa:	3358      	adds	r3, #88	; 0x58
 81068ac:	4618      	mov	r0, r3
 81068ae:	f7ff fd77 	bl	81063a0 <metal_mutex_release>
	while (rp_hdr) {
 81068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068b4:	2b00      	cmp	r3, #0
 81068b6:	d1af      	bne.n	8106818 <rpmsg_virtio_rx_callback+0x40>
 81068b8:	e000      	b.n	81068bc <rpmsg_virtio_rx_callback+0xe4>
			return;
 81068ba:	bf00      	nop
	}
}
 81068bc:	372c      	adds	r7, #44	; 0x2c
 81068be:	46bd      	mov	sp, r7
 81068c0:	bd90      	pop	{r4, r7, pc}

081068c2 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 81068c2:	b580      	push	{r7, lr}
 81068c4:	b092      	sub	sp, #72	; 0x48
 81068c6:	af00      	add	r7, sp, #0
 81068c8:	60f8      	str	r0, [r7, #12]
 81068ca:	60b9      	str	r1, [r7, #8]
 81068cc:	607a      	str	r2, [r7, #4]
 81068ce:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81068d0:	68fb      	ldr	r3, [r7, #12]
 81068d2:	6a1b      	ldr	r3, [r3, #32]
 81068d4:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 81068d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81068d8:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 81068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81068de:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 81068e0:	68bb      	ldr	r3, [r7, #8]
 81068e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	2b28      	cmp	r3, #40	; 0x28
 81068e8:	d001      	beq.n	81068ee <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 81068ea:	2300      	movs	r3, #0
 81068ec:	e057      	b.n	810699e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 81068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 81068f0:	4619      	mov	r1, r3
 81068f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 81068f4:	f7ff fce2 	bl	81062bc <metal_io_virt_to_offset>
 81068f8:	4601      	mov	r1, r0
 81068fa:	f107 0210 	add.w	r2, r7, #16
 81068fe:	2320      	movs	r3, #32
 8106900:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8106902:	f7fe fe05 	bl	8105510 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8106906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106908:	6a1b      	ldr	r3, [r3, #32]
 810690a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 810690c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810690e:	3358      	adds	r3, #88	; 0x58
 8106910:	4618      	mov	r0, r3
 8106912:	f7ff fd3a 	bl	810638a <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8106916:	f107 0110 	add.w	r1, r7, #16
 810691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810691c:	f04f 32ff 	mov.w	r2, #4294967295
 8106920:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8106922:	f7ff fb75 	bl	8106010 <rpmsg_get_endpoint>
 8106926:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8106928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810692c:	f003 0301 	and.w	r3, r3, #1
 8106930:	2b00      	cmp	r3, #0
 8106932:	d017      	beq.n	8106964 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8106934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106936:	2b00      	cmp	r3, #0
 8106938:	d003      	beq.n	8106942 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 810693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810693c:	f04f 32ff 	mov.w	r2, #4294967295
 8106940:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8106942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106944:	3358      	adds	r3, #88	; 0x58
 8106946:	4618      	mov	r0, r3
 8106948:	f7ff fd2a 	bl	81063a0 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 810694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810694e:	2b00      	cmp	r3, #0
 8106950:	d024      	beq.n	810699c <rpmsg_virtio_ns_callback+0xda>
 8106952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106956:	2b00      	cmp	r3, #0
 8106958:	d020      	beq.n	810699c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 810695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810695e:	68f8      	ldr	r0, [r7, #12]
 8106960:	4798      	blx	r3
 8106962:	e01b      	b.n	810699c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8106964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106966:	2b00      	cmp	r3, #0
 8106968:	d110      	bne.n	810698c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 810696a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810696c:	3358      	adds	r3, #88	; 0x58
 810696e:	4618      	mov	r0, r3
 8106970:	f7ff fd16 	bl	81063a0 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8106974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106978:	2b00      	cmp	r3, #0
 810697a:	d00f      	beq.n	810699c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 810697c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106980:	f107 0110 	add.w	r1, r7, #16
 8106984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106986:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8106988:	4798      	blx	r3
 810698a:	e007      	b.n	810699c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 810698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810698e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106990:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8106992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106994:	3358      	adds	r3, #88	; 0x58
 8106996:	4618      	mov	r0, r3
 8106998:	f7ff fd02 	bl	81063a0 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 810699c:	2300      	movs	r3, #0
}
 810699e:	4618      	mov	r0, r3
 81069a0:	3748      	adds	r7, #72	; 0x48
 81069a2:	46bd      	mov	sp, r7
 81069a4:	bd80      	pop	{r7, pc}
	...

081069a8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 81069a8:	b580      	push	{r7, lr}
 81069aa:	b090      	sub	sp, #64	; 0x40
 81069ac:	af02      	add	r7, sp, #8
 81069ae:	60f8      	str	r0, [r7, #12]
 81069b0:	60b9      	str	r1, [r7, #8]
 81069b2:	607a      	str	r2, [r7, #4]
 81069b4:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81069b6:	68fb      	ldr	r3, [r7, #12]
 81069b8:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 81069ba:	2264      	movs	r2, #100	; 0x64
 81069bc:	2100      	movs	r1, #0
 81069be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81069c0:	f001 fe26 	bl	8108610 <memset>
	metal_mutex_init(&rdev->lock);
 81069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069c6:	3358      	adds	r3, #88	; 0x58
 81069c8:	4618      	mov	r0, r3
 81069ca:	f7ff fcd3 	bl	8106374 <metal_mutex_init>
	rvdev->vdev = vdev;
 81069ce:	68fb      	ldr	r3, [r7, #12]
 81069d0:	68ba      	ldr	r2, [r7, #8]
 81069d2:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 81069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069d6:	687a      	ldr	r2, [r7, #4]
 81069d8:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 81069da:	68bb      	ldr	r3, [r7, #8]
 81069dc:	68fa      	ldr	r2, [r7, #12]
 81069de:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 81069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069e2:	4a38      	ldr	r2, [pc, #224]	; (8106ac4 <rpmsg_init_vdev+0x11c>)
 81069e4:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 81069e6:	68f8      	ldr	r0, [r7, #12]
 81069e8:	f7ff fd02 	bl	81063f0 <rpmsg_virtio_get_role>
 81069ec:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 81069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81069f0:	2b01      	cmp	r3, #1
 81069f2:	d112      	bne.n	8106a1a <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 81069f4:	4b34      	ldr	r3, [pc, #208]	; (8106ac8 <rpmsg_init_vdev+0x120>)
 81069f6:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 81069f8:	4b34      	ldr	r3, [pc, #208]	; (8106acc <rpmsg_init_vdev+0x124>)
 81069fa:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 81069fc:	4b34      	ldr	r3, [pc, #208]	; (8106ad0 <rpmsg_init_vdev+0x128>)
 81069fe:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8106a00:	4b34      	ldr	r3, [pc, #208]	; (8106ad4 <rpmsg_init_vdev+0x12c>)
 8106a02:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8106a04:	68bb      	ldr	r3, [r7, #8]
 8106a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a08:	3318      	adds	r3, #24
 8106a0a:	681a      	ldr	r2, [r3, #0]
 8106a0c:	68fb      	ldr	r3, [r7, #12]
 8106a0e:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8106a10:	68bb      	ldr	r3, [r7, #8]
 8106a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a14:	681a      	ldr	r2, [r3, #0]
 8106a16:	68fb      	ldr	r3, [r7, #12]
 8106a18:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8106a1a:	68fb      	ldr	r3, [r7, #12]
 8106a1c:	683a      	ldr	r2, [r7, #0]
 8106a1e:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a22:	2b01      	cmp	r3, #1
 8106a24:	d102      	bne.n	8106a2c <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8106a26:	68f8      	ldr	r0, [r7, #12]
 8106a28:	f7ff fded 	bl	8106606 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8106a2c:	f107 0218 	add.w	r2, r7, #24
 8106a30:	f107 0310 	add.w	r3, r7, #16
 8106a34:	9300      	str	r3, [sp, #0]
 8106a36:	4613      	mov	r3, r2
 8106a38:	2202      	movs	r2, #2
 8106a3a:	2100      	movs	r1, #0
 8106a3c:	68f8      	ldr	r0, [r7, #12]
 8106a3e:	f7ff fd19 	bl	8106474 <rpmsg_virtio_create_virtqueues>
 8106a42:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8106a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a46:	2b00      	cmp	r3, #0
 8106a48:	d001      	beq.n	8106a4e <rpmsg_init_vdev+0xa6>
		return status;
 8106a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a4c:	e035      	b.n	8106aba <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106a4e:	2300      	movs	r3, #0
 8106a50:	637b      	str	r3, [r7, #52]	; 0x34
 8106a52:	e00f      	b.n	8106a74 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8106a54:	68bb      	ldr	r3, [r7, #8]
 8106a56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106a5a:	4613      	mov	r3, r2
 8106a5c:	005b      	lsls	r3, r3, #1
 8106a5e:	4413      	add	r3, r2
 8106a60:	00db      	lsls	r3, r3, #3
 8106a62:	440b      	add	r3, r1
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8106a68:	6a3b      	ldr	r3, [r7, #32]
 8106a6a:	683a      	ldr	r2, [r7, #0]
 8106a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a70:	3301      	adds	r3, #1
 8106a72:	637b      	str	r3, [r7, #52]	; 0x34
 8106a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a76:	2b01      	cmp	r3, #1
 8106a78:	d9ec      	bls.n	8106a54 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8106a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a7c:	4618      	mov	r0, r3
 8106a7e:	f7ff fc0c 	bl	810629a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8106a82:	68f8      	ldr	r0, [r7, #12]
 8106a84:	f7ff fce5 	bl	8106452 <rpmsg_virtio_get_features>
 8106a88:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8106a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a8c:	f003 0301 	and.w	r3, r3, #1
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	d011      	beq.n	8106ab8 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8106a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a96:	f103 0008 	add.w	r0, r3, #8
 8106a9a:	2300      	movs	r3, #0
 8106a9c:	9301      	str	r3, [sp, #4]
 8106a9e:	4b0e      	ldr	r3, [pc, #56]	; (8106ad8 <rpmsg_init_vdev+0x130>)
 8106aa0:	9300      	str	r3, [sp, #0]
 8106aa2:	2335      	movs	r3, #53	; 0x35
 8106aa4:	2235      	movs	r2, #53	; 0x35
 8106aa6:	490d      	ldr	r1, [pc, #52]	; (8106adc <rpmsg_init_vdev+0x134>)
 8106aa8:	f7ff fc85 	bl	81063b6 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8106aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106aae:	3308      	adds	r3, #8
 8106ab0:	4619      	mov	r1, r3
 8106ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106ab4:	f7ff fb2e 	bl	8106114 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8106ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8106aba:	4618      	mov	r0, r3
 8106abc:	3738      	adds	r7, #56	; 0x38
 8106abe:	46bd      	mov	sp, r7
 8106ac0:	bd80      	pop	{r7, pc}
 8106ac2:	bf00      	nop
 8106ac4:	08106675 	.word	0x08106675
 8106ac8:	0810db38 	.word	0x0810db38
 8106acc:	0810db40 	.word	0x0810db40
 8106ad0:	081067c5 	.word	0x081067c5
 8106ad4:	081067d9 	.word	0x081067d9
 8106ad8:	081068c3 	.word	0x081068c3
 8106adc:	0810db48 	.word	0x0810db48

08106ae0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8106ae0:	b480      	push	{r7}
 8106ae2:	b083      	sub	sp, #12
 8106ae4:	af00      	add	r7, sp, #0
 8106ae6:	6078      	str	r0, [r7, #4]
 8106ae8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106aea:	bf00      	nop
 8106aec:	370c      	adds	r7, #12
 8106aee:	46bd      	mov	sp, r7
 8106af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106af4:	4770      	bx	lr

08106af6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8106af6:	b480      	push	{r7}
 8106af8:	b083      	sub	sp, #12
 8106afa:	af00      	add	r7, sp, #0
 8106afc:	6078      	str	r0, [r7, #4]
 8106afe:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106b00:	bf00      	nop
 8106b02:	370c      	adds	r7, #12
 8106b04:	46bd      	mov	sp, r7
 8106b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b0a:	4770      	bx	lr

08106b0c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8106b0c:	b480      	push	{r7}
 8106b0e:	b085      	sub	sp, #20
 8106b10:	af00      	add	r7, sp, #0
 8106b12:	60f8      	str	r0, [r7, #12]
 8106b14:	60b9      	str	r1, [r7, #8]
 8106b16:	607a      	str	r2, [r7, #4]
 8106b18:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8106b1a:	68fb      	ldr	r3, [r7, #12]
}
 8106b1c:	4618      	mov	r0, r3
 8106b1e:	3714      	adds	r7, #20
 8106b20:	46bd      	mov	sp, r7
 8106b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b26:	4770      	bx	lr

08106b28 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8106b28:	b590      	push	{r4, r7, lr}
 8106b2a:	b08f      	sub	sp, #60	; 0x3c
 8106b2c:	af04      	add	r7, sp, #16
 8106b2e:	60f8      	str	r0, [r7, #12]
 8106b30:	60b9      	str	r1, [r7, #8]
 8106b32:	607a      	str	r2, [r7, #4]
 8106b34:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8106b36:	68fb      	ldr	r3, [r7, #12]
 8106b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b3a:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8106b3c:	687a      	ldr	r2, [r7, #4]
 8106b3e:	6a3b      	ldr	r3, [r7, #32]
 8106b40:	429a      	cmp	r2, r3
 8106b42:	d902      	bls.n	8106b4a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8106b44:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8106b48:	e036      	b.n	8106bb8 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8106b4a:	2300      	movs	r3, #0
 8106b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8106b4e:	e02e      	b.n	8106bae <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8106b50:	68fb      	ldr	r3, [r7, #12]
 8106b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106b56:	4613      	mov	r3, r2
 8106b58:	005b      	lsls	r3, r3, #1
 8106b5a:	4413      	add	r3, r2
 8106b5c:	00db      	lsls	r3, r3, #3
 8106b5e:	440b      	add	r3, r1
 8106b60:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 8106b62:	69fb      	ldr	r3, [r7, #28]
 8106b64:	3304      	adds	r3, #4
 8106b66:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b6a:	b298      	uxth	r0, r3
 8106b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b6e:	009b      	lsls	r3, r3, #2
 8106b70:	683a      	ldr	r2, [r7, #0]
 8106b72:	4413      	add	r3, r2
 8106b74:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8106b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b78:	009b      	lsls	r3, r3, #2
 8106b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106b7c:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106b7e:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8106b80:	68fa      	ldr	r2, [r7, #12]
 8106b82:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106b84:	6a12      	ldr	r2, [r2, #32]
 8106b86:	69f9      	ldr	r1, [r7, #28]
 8106b88:	6809      	ldr	r1, [r1, #0]
 8106b8a:	9102      	str	r1, [sp, #8]
 8106b8c:	9201      	str	r2, [sp, #4]
 8106b8e:	9300      	str	r3, [sp, #0]
 8106b90:	69bb      	ldr	r3, [r7, #24]
 8106b92:	4622      	mov	r2, r4
 8106b94:	4601      	mov	r1, r0
 8106b96:	68f8      	ldr	r0, [r7, #12]
 8106b98:	f000 f8f6 	bl	8106d88 <virtqueue_create>
 8106b9c:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8106b9e:	697b      	ldr	r3, [r7, #20]
 8106ba0:	2b00      	cmp	r3, #0
 8106ba2:	d001      	beq.n	8106ba8 <virtio_create_virtqueues+0x80>
			return ret;
 8106ba4:	697b      	ldr	r3, [r7, #20]
 8106ba6:	e007      	b.n	8106bb8 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8106ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106baa:	3301      	adds	r3, #1
 8106bac:	627b      	str	r3, [r7, #36]	; 0x24
 8106bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	429a      	cmp	r2, r3
 8106bb4:	d3cc      	bcc.n	8106b50 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8106bb6:	2300      	movs	r3, #0
}
 8106bb8:	4618      	mov	r0, r3
 8106bba:	372c      	adds	r7, #44	; 0x2c
 8106bbc:	46bd      	mov	sp, r7
 8106bbe:	bd90      	pop	{r4, r7, pc}

08106bc0 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8106bc0:	b480      	push	{r7}
 8106bc2:	b085      	sub	sp, #20
 8106bc4:	af00      	add	r7, sp, #0
 8106bc6:	60f8      	str	r0, [r7, #12]
 8106bc8:	60b9      	str	r1, [r7, #8]
 8106bca:	607a      	str	r2, [r7, #4]
 8106bcc:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8106bce:	68fb      	ldr	r3, [r7, #12]
 8106bd0:	68ba      	ldr	r2, [r7, #8]
 8106bd2:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8106bd4:	68fb      	ldr	r3, [r7, #12]
 8106bd6:	687a      	ldr	r2, [r7, #4]
 8106bd8:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8106bda:	68bb      	ldr	r3, [r7, #8]
 8106bdc:	011b      	lsls	r3, r3, #4
 8106bde:	687a      	ldr	r2, [r7, #4]
 8106be0:	441a      	add	r2, r3
 8106be2:	68fb      	ldr	r3, [r7, #12]
 8106be4:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8106be6:	68fb      	ldr	r3, [r7, #12]
 8106be8:	689a      	ldr	r2, [r3, #8]
 8106bea:	68bb      	ldr	r3, [r7, #8]
 8106bec:	005b      	lsls	r3, r3, #1
 8106bee:	4413      	add	r3, r2
 8106bf0:	3304      	adds	r3, #4
 8106bf2:	461a      	mov	r2, r3
 8106bf4:	683b      	ldr	r3, [r7, #0]
 8106bf6:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8106bf8:	1c5a      	adds	r2, r3, #1
 8106bfa:	683b      	ldr	r3, [r7, #0]
 8106bfc:	425b      	negs	r3, r3
 8106bfe:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8106c00:	461a      	mov	r2, r3
 8106c02:	68fb      	ldr	r3, [r7, #12]
 8106c04:	60da      	str	r2, [r3, #12]
}
 8106c06:	bf00      	nop
 8106c08:	3714      	adds	r7, #20
 8106c0a:	46bd      	mov	sp, r7
 8106c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c10:	4770      	bx	lr

08106c12 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8106c12:	b480      	push	{r7}
 8106c14:	b083      	sub	sp, #12
 8106c16:	af00      	add	r7, sp, #0
 8106c18:	4603      	mov	r3, r0
 8106c1a:	80fb      	strh	r3, [r7, #6]
 8106c1c:	460b      	mov	r3, r1
 8106c1e:	80bb      	strh	r3, [r7, #4]
 8106c20:	4613      	mov	r3, r2
 8106c22:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8106c24:	88ba      	ldrh	r2, [r7, #4]
 8106c26:	88fb      	ldrh	r3, [r7, #6]
 8106c28:	1ad3      	subs	r3, r2, r3
 8106c2a:	b29b      	uxth	r3, r3
 8106c2c:	3b01      	subs	r3, #1
 8106c2e:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8106c30:	88b9      	ldrh	r1, [r7, #4]
 8106c32:	887b      	ldrh	r3, [r7, #2]
 8106c34:	1acb      	subs	r3, r1, r3
 8106c36:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8106c38:	429a      	cmp	r2, r3
 8106c3a:	bf34      	ite	cc
 8106c3c:	2301      	movcc	r3, #1
 8106c3e:	2300      	movcs	r3, #0
 8106c40:	b2db      	uxtb	r3, r3
}
 8106c42:	4618      	mov	r0, r3
 8106c44:	370c      	adds	r7, #12
 8106c46:	46bd      	mov	sp, r7
 8106c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c4c:	4770      	bx	lr

08106c4e <metal_io_virt>:
{
 8106c4e:	b480      	push	{r7}
 8106c50:	b083      	sub	sp, #12
 8106c52:	af00      	add	r7, sp, #0
 8106c54:	6078      	str	r0, [r7, #4]
 8106c56:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106c60:	d009      	beq.n	8106c76 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	689b      	ldr	r3, [r3, #8]
 8106c66:	683a      	ldr	r2, [r7, #0]
 8106c68:	429a      	cmp	r2, r3
 8106c6a:	d804      	bhi.n	8106c76 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106c70:	683b      	ldr	r3, [r7, #0]
 8106c72:	4413      	add	r3, r2
 8106c74:	e000      	b.n	8106c78 <metal_io_virt+0x2a>
 8106c76:	2300      	movs	r3, #0
}
 8106c78:	4618      	mov	r0, r3
 8106c7a:	370c      	adds	r7, #12
 8106c7c:	46bd      	mov	sp, r7
 8106c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c82:	4770      	bx	lr

08106c84 <metal_io_phys>:
{
 8106c84:	b480      	push	{r7}
 8106c86:	b085      	sub	sp, #20
 8106c88:	af00      	add	r7, sp, #0
 8106c8a:	6078      	str	r0, [r7, #4]
 8106c8c:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8106c92:	2b1f      	cmp	r3, #31
 8106c94:	d805      	bhi.n	8106ca2 <metal_io_phys+0x1e>
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	68db      	ldr	r3, [r3, #12]
 8106c9a:	683a      	ldr	r2, [r7, #0]
 8106c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8106ca0:	e000      	b.n	8106ca4 <metal_io_phys+0x20>
 8106ca2:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8106ca4:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8106caa:	2b00      	cmp	r3, #0
 8106cac:	d010      	beq.n	8106cd0 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	689b      	ldr	r3, [r3, #8]
 8106cb2:	683a      	ldr	r2, [r7, #0]
 8106cb4:	429a      	cmp	r2, r3
 8106cb6:	d80b      	bhi.n	8106cd0 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	685a      	ldr	r2, [r3, #4]
 8106cbc:	68fb      	ldr	r3, [r7, #12]
 8106cbe:	009b      	lsls	r3, r3, #2
 8106cc0:	4413      	add	r3, r2
 8106cc2:	681a      	ldr	r2, [r3, #0]
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	6919      	ldr	r1, [r3, #16]
 8106cc8:	683b      	ldr	r3, [r7, #0]
 8106cca:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8106ccc:	4413      	add	r3, r2
 8106cce:	e001      	b.n	8106cd4 <metal_io_phys+0x50>
 8106cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106cd4:	4618      	mov	r0, r3
 8106cd6:	3714      	adds	r7, #20
 8106cd8:	46bd      	mov	sp, r7
 8106cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cde:	4770      	bx	lr

08106ce0 <metal_io_phys_to_offset>:
{
 8106ce0:	b580      	push	{r7, lr}
 8106ce2:	b084      	sub	sp, #16
 8106ce4:	af00      	add	r7, sp, #0
 8106ce6:	6078      	str	r0, [r7, #4]
 8106ce8:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8106cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106cf2:	d105      	bne.n	8106d00 <metal_io_phys_to_offset+0x20>
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	685b      	ldr	r3, [r3, #4]
 8106cf8:	681b      	ldr	r3, [r3, #0]
 8106cfa:	683a      	ldr	r2, [r7, #0]
 8106cfc:	1ad3      	subs	r3, r2, r3
 8106cfe:	e003      	b.n	8106d08 <metal_io_phys_to_offset+0x28>
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	691a      	ldr	r2, [r3, #16]
 8106d04:	683b      	ldr	r3, [r7, #0]
 8106d06:	4013      	ands	r3, r2
	unsigned long offset =
 8106d08:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8106d0a:	68f9      	ldr	r1, [r7, #12]
 8106d0c:	6878      	ldr	r0, [r7, #4]
 8106d0e:	f7ff ffb9 	bl	8106c84 <metal_io_phys>
 8106d12:	4602      	mov	r2, r0
 8106d14:	683b      	ldr	r3, [r7, #0]
 8106d16:	4293      	cmp	r3, r2
 8106d18:	d101      	bne.n	8106d1e <metal_io_phys_to_offset+0x3e>
			return offset;
 8106d1a:	68fb      	ldr	r3, [r7, #12]
 8106d1c:	e00c      	b.n	8106d38 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	691a      	ldr	r2, [r3, #16]
 8106d22:	68fb      	ldr	r3, [r7, #12]
 8106d24:	4413      	add	r3, r2
 8106d26:	3301      	adds	r3, #1
 8106d28:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	689b      	ldr	r3, [r3, #8]
 8106d2e:	68fa      	ldr	r2, [r7, #12]
 8106d30:	429a      	cmp	r2, r3
 8106d32:	d3ea      	bcc.n	8106d0a <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8106d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106d38:	4618      	mov	r0, r3
 8106d3a:	3710      	adds	r7, #16
 8106d3c:	46bd      	mov	sp, r7
 8106d3e:	bd80      	pop	{r7, pc}

08106d40 <metal_io_phys_to_virt>:
{
 8106d40:	b580      	push	{r7, lr}
 8106d42:	b082      	sub	sp, #8
 8106d44:	af00      	add	r7, sp, #0
 8106d46:	6078      	str	r0, [r7, #4]
 8106d48:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8106d4a:	6839      	ldr	r1, [r7, #0]
 8106d4c:	6878      	ldr	r0, [r7, #4]
 8106d4e:	f7ff ffc7 	bl	8106ce0 <metal_io_phys_to_offset>
 8106d52:	4603      	mov	r3, r0
 8106d54:	4619      	mov	r1, r3
 8106d56:	6878      	ldr	r0, [r7, #4]
 8106d58:	f7ff ff79 	bl	8106c4e <metal_io_virt>
 8106d5c:	4603      	mov	r3, r0
}
 8106d5e:	4618      	mov	r0, r3
 8106d60:	3708      	adds	r7, #8
 8106d62:	46bd      	mov	sp, r7
 8106d64:	bd80      	pop	{r7, pc}

08106d66 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8106d66:	b580      	push	{r7, lr}
 8106d68:	b084      	sub	sp, #16
 8106d6a:	af00      	add	r7, sp, #0
 8106d6c:	6078      	str	r0, [r7, #4]
 8106d6e:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d74:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8106d76:	6839      	ldr	r1, [r7, #0]
 8106d78:	68f8      	ldr	r0, [r7, #12]
 8106d7a:	f7ff ffe1 	bl	8106d40 <metal_io_phys_to_virt>
 8106d7e:	4603      	mov	r3, r0
}
 8106d80:	4618      	mov	r0, r3
 8106d82:	3710      	adds	r7, #16
 8106d84:	46bd      	mov	sp, r7
 8106d86:	bd80      	pop	{r7, pc}

08106d88 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8106d88:	b580      	push	{r7, lr}
 8106d8a:	b086      	sub	sp, #24
 8106d8c:	af00      	add	r7, sp, #0
 8106d8e:	60f8      	str	r0, [r7, #12]
 8106d90:	607a      	str	r2, [r7, #4]
 8106d92:	603b      	str	r3, [r7, #0]
 8106d94:	460b      	mov	r3, r1
 8106d96:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8106d98:	2300      	movs	r3, #0
 8106d9a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8106d9c:	697b      	ldr	r3, [r7, #20]
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	d121      	bne.n	8106de6 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8106da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106da4:	68fa      	ldr	r2, [r7, #12]
 8106da6:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8106da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106daa:	687a      	ldr	r2, [r7, #4]
 8106dac:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8106dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106db0:	897a      	ldrh	r2, [r7, #10]
 8106db2:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8106db4:	683b      	ldr	r3, [r7, #0]
 8106db6:	891a      	ldrh	r2, [r3, #8]
 8106db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dba:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8106dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dbe:	895a      	ldrh	r2, [r3, #10]
 8106dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dc2:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8106dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dc6:	6a3a      	ldr	r2, [r7, #32]
 8106dc8:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8106dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106dce:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8106dd0:	683b      	ldr	r3, [r7, #0]
 8106dd2:	6819      	ldr	r1, [r3, #0]
 8106dd4:	683b      	ldr	r3, [r7, #0]
 8106dd6:	685b      	ldr	r3, [r3, #4]
 8106dd8:	461a      	mov	r2, r3
 8106dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106ddc:	f000 f8fb 	bl	8106fd6 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8106de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106de2:	f000 f885 	bl	8106ef0 <virtqueue_disable_cb>
	}

	return (status);
 8106de6:	697b      	ldr	r3, [r7, #20]
}
 8106de8:	4618      	mov	r0, r3
 8106dea:	3718      	adds	r7, #24
 8106dec:	46bd      	mov	sp, r7
 8106dee:	bd80      	pop	{r7, pc}

08106df0 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8106df0:	b580      	push	{r7, lr}
 8106df2:	b086      	sub	sp, #24
 8106df4:	af00      	add	r7, sp, #0
 8106df6:	60f8      	str	r0, [r7, #12]
 8106df8:	60b9      	str	r1, [r7, #8]
 8106dfa:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8106dfc:	2300      	movs	r3, #0
 8106dfe:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8106e00:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106e04:	68fb      	ldr	r3, [r7, #12]
 8106e06:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106e08:	68fb      	ldr	r3, [r7, #12]
 8106e0a:	6a1b      	ldr	r3, [r3, #32]
 8106e0c:	885b      	ldrh	r3, [r3, #2]
 8106e0e:	429a      	cmp	r2, r3
 8106e10:	d101      	bne.n	8106e16 <virtqueue_get_available_buffer+0x26>
		return NULL;
 8106e12:	2300      	movs	r3, #0
 8106e14:	e02e      	b.n	8106e74 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8106e16:	68fb      	ldr	r3, [r7, #12]
 8106e18:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106e1a:	1c5a      	adds	r2, r3, #1
 8106e1c:	b291      	uxth	r1, r2
 8106e1e:	68fa      	ldr	r2, [r7, #12]
 8106e20:	8691      	strh	r1, [r2, #52]	; 0x34
 8106e22:	b21a      	sxth	r2, r3
 8106e24:	68fb      	ldr	r3, [r7, #12]
 8106e26:	895b      	ldrh	r3, [r3, #10]
 8106e28:	3b01      	subs	r3, #1
 8106e2a:	b29b      	uxth	r3, r3
 8106e2c:	b21b      	sxth	r3, r3
 8106e2e:	4013      	ands	r3, r2
 8106e30:	b21b      	sxth	r3, r3
 8106e32:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106e34:	68fb      	ldr	r3, [r7, #12]
 8106e36:	6a1a      	ldr	r2, [r3, #32]
 8106e38:	8afb      	ldrh	r3, [r7, #22]
 8106e3a:	005b      	lsls	r3, r3, #1
 8106e3c:	4413      	add	r3, r2
 8106e3e:	889a      	ldrh	r2, [r3, #4]
 8106e40:	68bb      	ldr	r3, [r7, #8]
 8106e42:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8106e44:	68fb      	ldr	r3, [r7, #12]
 8106e46:	69da      	ldr	r2, [r3, #28]
 8106e48:	68bb      	ldr	r3, [r7, #8]
 8106e4a:	881b      	ldrh	r3, [r3, #0]
 8106e4c:	011b      	lsls	r3, r3, #4
 8106e4e:	4413      	add	r3, r2
 8106e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e54:	4613      	mov	r3, r2
 8106e56:	4619      	mov	r1, r3
 8106e58:	68f8      	ldr	r0, [r7, #12]
 8106e5a:	f7ff ff84 	bl	8106d66 <virtqueue_phys_to_virt>
 8106e5e:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8106e60:	68fb      	ldr	r3, [r7, #12]
 8106e62:	69da      	ldr	r2, [r3, #28]
 8106e64:	68bb      	ldr	r3, [r7, #8]
 8106e66:	881b      	ldrh	r3, [r3, #0]
 8106e68:	011b      	lsls	r3, r3, #4
 8106e6a:	4413      	add	r3, r2
 8106e6c:	689a      	ldr	r2, [r3, #8]
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8106e72:	693b      	ldr	r3, [r7, #16]
}
 8106e74:	4618      	mov	r0, r3
 8106e76:	3718      	adds	r7, #24
 8106e78:	46bd      	mov	sp, r7
 8106e7a:	bd80      	pop	{r7, pc}

08106e7c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8106e7c:	b480      	push	{r7}
 8106e7e:	b087      	sub	sp, #28
 8106e80:	af00      	add	r7, sp, #0
 8106e82:	60f8      	str	r0, [r7, #12]
 8106e84:	460b      	mov	r3, r1
 8106e86:	607a      	str	r2, [r7, #4]
 8106e88:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8106e8a:	2300      	movs	r3, #0
 8106e8c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8106e8e:	68fb      	ldr	r3, [r7, #12]
 8106e90:	895b      	ldrh	r3, [r3, #10]
 8106e92:	897a      	ldrh	r2, [r7, #10]
 8106e94:	429a      	cmp	r2, r3
 8106e96:	d901      	bls.n	8106e9c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8106e98:	4b14      	ldr	r3, [pc, #80]	; (8106eec <virtqueue_add_consumed_buffer+0x70>)
 8106e9a:	e021      	b.n	8106ee0 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8106e9c:	68fb      	ldr	r3, [r7, #12]
 8106e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106ea0:	885b      	ldrh	r3, [r3, #2]
 8106ea2:	b21a      	sxth	r2, r3
 8106ea4:	68fb      	ldr	r3, [r7, #12]
 8106ea6:	895b      	ldrh	r3, [r3, #10]
 8106ea8:	3b01      	subs	r3, #1
 8106eaa:	b29b      	uxth	r3, r3
 8106eac:	b21b      	sxth	r3, r3
 8106eae:	4013      	ands	r3, r2
 8106eb0:	b21b      	sxth	r3, r3
 8106eb2:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8106eb4:	68fb      	ldr	r3, [r7, #12]
 8106eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106eb8:	8a7b      	ldrh	r3, [r7, #18]
 8106eba:	00db      	lsls	r3, r3, #3
 8106ebc:	4413      	add	r3, r2
 8106ebe:	3304      	adds	r3, #4
 8106ec0:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8106ec2:	897a      	ldrh	r2, [r7, #10]
 8106ec4:	697b      	ldr	r3, [r7, #20]
 8106ec6:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8106ec8:	697b      	ldr	r3, [r7, #20]
 8106eca:	687a      	ldr	r2, [r7, #4]
 8106ecc:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8106ece:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8106ed2:	68fb      	ldr	r3, [r7, #12]
 8106ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106ed6:	885a      	ldrh	r2, [r3, #2]
 8106ed8:	3201      	adds	r2, #1
 8106eda:	b292      	uxth	r2, r2
 8106edc:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8106ede:	2300      	movs	r3, #0
}
 8106ee0:	4618      	mov	r0, r3
 8106ee2:	371c      	adds	r7, #28
 8106ee4:	46bd      	mov	sp, r7
 8106ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eea:	4770      	bx	lr
 8106eec:	fffff441 	.word	0xfffff441

08106ef0 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8106ef0:	b480      	push	{r7}
 8106ef2:	b083      	sub	sp, #12
 8106ef4:	af00      	add	r7, sp, #0
 8106ef6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	68db      	ldr	r3, [r3, #12]
 8106efc:	f003 0302 	and.w	r3, r3, #2
 8106f00:	2b00      	cmp	r3, #0
 8106f02:	d010      	beq.n	8106f26 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	895b      	ldrh	r3, [r3, #10]
 8106f0c:	1ad3      	subs	r3, r2, r3
 8106f0e:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	6a1a      	ldr	r2, [r3, #32]
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106f18:	3901      	subs	r1, #1
 8106f1a:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8106f1c:	005b      	lsls	r3, r3, #1
 8106f1e:	4413      	add	r3, r2
 8106f20:	460a      	mov	r2, r1
 8106f22:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8106f24:	e008      	b.n	8106f38 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	6a1b      	ldr	r3, [r3, #32]
 8106f2a:	881a      	ldrh	r2, [r3, #0]
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	6a1b      	ldr	r3, [r3, #32]
 8106f30:	f042 0201 	orr.w	r2, r2, #1
 8106f34:	b292      	uxth	r2, r2
 8106f36:	801a      	strh	r2, [r3, #0]
}
 8106f38:	bf00      	nop
 8106f3a:	370c      	adds	r7, #12
 8106f3c:	46bd      	mov	sp, r7
 8106f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f42:	4770      	bx	lr

08106f44 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8106f44:	b580      	push	{r7, lr}
 8106f46:	b082      	sub	sp, #8
 8106f48:	af00      	add	r7, sp, #0
 8106f4a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8106f4c:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8106f50:	6878      	ldr	r0, [r7, #4]
 8106f52:	f000 f885 	bl	8107060 <vq_ring_must_notify_host>
 8106f56:	4603      	mov	r3, r0
 8106f58:	2b00      	cmp	r3, #0
 8106f5a:	d002      	beq.n	8106f62 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8106f5c:	6878      	ldr	r0, [r7, #4]
 8106f5e:	f000 f8b5 	bl	81070cc <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	2200      	movs	r2, #0
 8106f66:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8106f68:	bf00      	nop
 8106f6a:	3708      	adds	r7, #8
 8106f6c:	46bd      	mov	sp, r7
 8106f6e:	bd80      	pop	{r7, pc}

08106f70 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8106f70:	b480      	push	{r7}
 8106f72:	b085      	sub	sp, #20
 8106f74:	af00      	add	r7, sp, #0
 8106f76:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8106f78:	2300      	movs	r3, #0
 8106f7a:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8106f7c:	2300      	movs	r3, #0
 8106f7e:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8106f80:	2300      	movs	r3, #0
 8106f82:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	6a1b      	ldr	r3, [r3, #32]
 8106f8c:	885b      	ldrh	r3, [r3, #2]
 8106f8e:	429a      	cmp	r2, r3
 8106f90:	d101      	bne.n	8106f96 <virtqueue_get_desc_size+0x26>
		return 0;
 8106f92:	2300      	movs	r3, #0
 8106f94:	e019      	b.n	8106fca <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106f9a:	b21a      	sxth	r2, r3
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	895b      	ldrh	r3, [r3, #10]
 8106fa0:	3b01      	subs	r3, #1
 8106fa2:	b29b      	uxth	r3, r3
 8106fa4:	b21b      	sxth	r3, r3
 8106fa6:	4013      	ands	r3, r2
 8106fa8:	b21b      	sxth	r3, r3
 8106faa:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	6a1a      	ldr	r2, [r3, #32]
 8106fb0:	89fb      	ldrh	r3, [r7, #14]
 8106fb2:	005b      	lsls	r3, r3, #1
 8106fb4:	4413      	add	r3, r2
 8106fb6:	889b      	ldrh	r3, [r3, #4]
 8106fb8:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	69da      	ldr	r2, [r3, #28]
 8106fbe:	89bb      	ldrh	r3, [r7, #12]
 8106fc0:	011b      	lsls	r3, r3, #4
 8106fc2:	4413      	add	r3, r2
 8106fc4:	689b      	ldr	r3, [r3, #8]
 8106fc6:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8106fc8:	68bb      	ldr	r3, [r7, #8]
}
 8106fca:	4618      	mov	r0, r3
 8106fcc:	3714      	adds	r7, #20
 8106fce:	46bd      	mov	sp, r7
 8106fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fd4:	4770      	bx	lr

08106fd6 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8106fd6:	b580      	push	{r7, lr}
 8106fd8:	b088      	sub	sp, #32
 8106fda:	af00      	add	r7, sp, #0
 8106fdc:	60f8      	str	r0, [r7, #12]
 8106fde:	60b9      	str	r1, [r7, #8]
 8106fe0:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8106fe2:	68fb      	ldr	r3, [r7, #12]
 8106fe4:	895b      	ldrh	r3, [r3, #10]
 8106fe6:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8106fe8:	68fb      	ldr	r3, [r7, #12]
 8106fea:	3318      	adds	r3, #24
 8106fec:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8106fee:	69b9      	ldr	r1, [r7, #24]
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	68ba      	ldr	r2, [r7, #8]
 8106ff4:	6978      	ldr	r0, [r7, #20]
 8106ff6:	f7ff fde3 	bl	8106bc0 <vring_init>

	for (i = 0; i < size - 1; i++)
 8106ffa:	2300      	movs	r3, #0
 8106ffc:	61fb      	str	r3, [r7, #28]
 8106ffe:	e00c      	b.n	810701a <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8107000:	69fb      	ldr	r3, [r7, #28]
 8107002:	b29a      	uxth	r2, r3
 8107004:	697b      	ldr	r3, [r7, #20]
 8107006:	6859      	ldr	r1, [r3, #4]
 8107008:	69fb      	ldr	r3, [r7, #28]
 810700a:	011b      	lsls	r3, r3, #4
 810700c:	440b      	add	r3, r1
 810700e:	3201      	adds	r2, #1
 8107010:	b292      	uxth	r2, r2
 8107012:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8107014:	69fb      	ldr	r3, [r7, #28]
 8107016:	3301      	adds	r3, #1
 8107018:	61fb      	str	r3, [r7, #28]
 810701a:	69bb      	ldr	r3, [r7, #24]
 810701c:	3b01      	subs	r3, #1
 810701e:	69fa      	ldr	r2, [r7, #28]
 8107020:	429a      	cmp	r2, r3
 8107022:	dbed      	blt.n	8107000 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8107024:	697b      	ldr	r3, [r7, #20]
 8107026:	685a      	ldr	r2, [r3, #4]
 8107028:	69fb      	ldr	r3, [r7, #28]
 810702a:	011b      	lsls	r3, r3, #4
 810702c:	4413      	add	r3, r2
 810702e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8107032:	81da      	strh	r2, [r3, #14]
}
 8107034:	bf00      	nop
 8107036:	3720      	adds	r7, #32
 8107038:	46bd      	mov	sp, r7
 810703a:	bd80      	pop	{r7, pc}

0810703c <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 810703c:	b580      	push	{r7, lr}
 810703e:	b082      	sub	sp, #8
 8107040:	af00      	add	r7, sp, #0
 8107042:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8107044:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	691b      	ldr	r3, [r3, #16]
 810704c:	2b00      	cmp	r3, #0
 810704e:	d003      	beq.n	8107058 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	691b      	ldr	r3, [r3, #16]
 8107054:	6878      	ldr	r0, [r7, #4]
 8107056:	4798      	blx	r3
}
 8107058:	bf00      	nop
 810705a:	3708      	adds	r7, #8
 810705c:	46bd      	mov	sp, r7
 810705e:	bd80      	pop	{r7, pc}

08107060 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8107060:	b580      	push	{r7, lr}
 8107062:	b084      	sub	sp, #16
 8107064:	af00      	add	r7, sp, #0
 8107066:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	68db      	ldr	r3, [r3, #12]
 810706c:	f003 0302 	and.w	r3, r3, #2
 8107070:	2b00      	cmp	r3, #0
 8107072:	d01d      	beq.n	81070b0 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	6a1b      	ldr	r3, [r3, #32]
 8107078:	885b      	ldrh	r3, [r3, #2]
 810707a:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107080:	89fa      	ldrh	r2, [r7, #14]
 8107082:	1ad3      	subs	r3, r2, r3
 8107084:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	699b      	ldr	r3, [r3, #24]
 810708e:	00db      	lsls	r3, r3, #3
 8107090:	4413      	add	r3, r2
 8107092:	685b      	ldr	r3, [r3, #4]
 8107094:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8107096:	89ba      	ldrh	r2, [r7, #12]
 8107098:	89f9      	ldrh	r1, [r7, #14]
 810709a:	897b      	ldrh	r3, [r7, #10]
 810709c:	4618      	mov	r0, r3
 810709e:	f7ff fdb8 	bl	8106c12 <vring_need_event>
 81070a2:	4603      	mov	r3, r0
 81070a4:	2b00      	cmp	r3, #0
 81070a6:	bf14      	ite	ne
 81070a8:	2301      	movne	r3, #1
 81070aa:	2300      	moveq	r3, #0
 81070ac:	b2db      	uxtb	r3, r3
 81070ae:	e009      	b.n	81070c4 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81070b4:	881b      	ldrh	r3, [r3, #0]
 81070b6:	f003 0301 	and.w	r3, r3, #1
 81070ba:	2b00      	cmp	r3, #0
 81070bc:	bf0c      	ite	eq
 81070be:	2301      	moveq	r3, #1
 81070c0:	2300      	movne	r3, #0
 81070c2:	b2db      	uxtb	r3, r3
}
 81070c4:	4618      	mov	r0, r3
 81070c6:	3710      	adds	r7, #16
 81070c8:	46bd      	mov	sp, r7
 81070ca:	bd80      	pop	{r7, pc}

081070cc <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 81070cc:	b580      	push	{r7, lr}
 81070ce:	b082      	sub	sp, #8
 81070d0:	af00      	add	r7, sp, #0
 81070d2:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	695b      	ldr	r3, [r3, #20]
 81070d8:	2b00      	cmp	r3, #0
 81070da:	d003      	beq.n	81070e4 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	695b      	ldr	r3, [r3, #20]
 81070e0:	6878      	ldr	r0, [r7, #4]
 81070e2:	4798      	blx	r3
}
 81070e4:	bf00      	nop
 81070e6:	3708      	adds	r7, #8
 81070e8:	46bd      	mov	sp, r7
 81070ea:	bd80      	pop	{r7, pc}

081070ec <OneOverSqrt>:

#include "main.h"


float OneOverSqrt(float x)
{
 81070ec:	b580      	push	{r7, lr}
 81070ee:	b082      	sub	sp, #8
 81070f0:	af00      	add	r7, sp, #0
 81070f2:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (float)sqrt(x);
 81070f6:	6878      	ldr	r0, [r7, #4]
 81070f8:	f7f9 fabe 	bl	8100678 <__aeabi_f2d>
 81070fc:	4602      	mov	r2, r0
 81070fe:	460b      	mov	r3, r1
 8107100:	ec43 2b10 	vmov	d0, r2, r3
 8107104:	f005 feb8 	bl	810ce78 <sqrt>
 8107108:	ec53 2b10 	vmov	r2, r3, d0
 810710c:	4610      	mov	r0, r2
 810710e:	4619      	mov	r1, r3
 8107110:	f7f9 fe02 	bl	8100d18 <__aeabi_d2f>
 8107114:	ee06 0a90 	vmov	s13, r0
 8107118:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810711c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8107120:	eef0 7a47 	vmov.f32	s15, s14
}
 8107124:	eeb0 0a67 	vmov.f32	s0, s15
 8107128:	3708      	adds	r7, #8
 810712a:	46bd      	mov	sp, r7
 810712c:	bd80      	pop	{r7, pc}
	...

08107130 <CalculateAngles>:

void CalculateAngles(tAHRSDATA *inputAHRS)
{
 8107130:	b5b0      	push	{r4, r5, r7, lr}
 8107132:	b08c      	sub	sp, #48	; 0x30
 8107134:	af00      	add	r7, sp, #0
 8107136:	6078      	str	r0, [r7, #4]
	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 8107138:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 810713c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810713e:	f04f 0300 	mov.w	r3, #0
 8107142:	62bb      	str	r3, [r7, #40]	; 0x28
 8107144:	f04f 0300 	mov.w	r3, #0
 8107148:	627b      	str	r3, [r7, #36]	; 0x24
 810714a:	f04f 0300 	mov.w	r3, #0
 810714e:	623b      	str	r3, [r7, #32]
    double AHRSIMU_RAD2DEG = 180 / PI;
 8107150:	a38e      	add	r3, pc, #568	; (adr r3, 810738c <CalculateAngles+0x25c>)
 8107152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107156:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float Roll;        /*!< Roll angle value. This parameter is in units of degrees */
    float Pitch;       /*!< Pitch angle value. This parameter is in units of degrees */
    float Yaw;         /*!< Yaw angle value. This parameter is in units of degrees */
    float Inclination = 3.5; /*!< Inclination in units of degrees */
 810715a:	4b89      	ldr	r3, [pc, #548]	; (8107380 <CalculateAngles+0x250>)
 810715c:	617b      	str	r3, [r7, #20]

    q0 = inputAHRS->q0;
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	695b      	ldr	r3, [r3, #20]
 8107162:	62fb      	str	r3, [r7, #44]	; 0x2c
    q1 = inputAHRS->q1;
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	699b      	ldr	r3, [r3, #24]
 8107168:	62bb      	str	r3, [r7, #40]	; 0x28
    q2 = inputAHRS->q2;
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	69db      	ldr	r3, [r3, #28]
 810716e:	627b      	str	r3, [r7, #36]	; 0x24
    q3 = inputAHRS->q3;
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	6a1b      	ldr	r3, [r3, #32]
 8107174:	623b      	str	r3, [r7, #32]

    Roll = atan2(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2);
 8107176:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 810717a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 810717e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107182:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8107186:	edd7 7a08 	vldr	s15, [r7, #32]
 810718a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810718e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107192:	ee17 0a90 	vmov	r0, s15
 8107196:	f7f9 fa6f 	bl	8100678 <__aeabi_f2d>
 810719a:	4604      	mov	r4, r0
 810719c:	460d      	mov	r5, r1
 810719e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 81071a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81071a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81071aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 81071ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 81071b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81071b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81071ba:	ee17 0a90 	vmov	r0, s15
 81071be:	f7f9 fa5b 	bl	8100678 <__aeabi_f2d>
 81071c2:	4602      	mov	r2, r0
 81071c4:	460b      	mov	r3, r1
 81071c6:	ec43 2b11 	vmov	d1, r2, r3
 81071ca:	ec45 4b10 	vmov	d0, r4, r5
 81071ce:	f005 fe51 	bl	810ce74 <atan2>
 81071d2:	ec53 2b10 	vmov	r2, r3, d0
 81071d6:	4610      	mov	r0, r2
 81071d8:	4619      	mov	r1, r3
 81071da:	f7f9 fd9d 	bl	8100d18 <__aeabi_d2f>
 81071de:	4603      	mov	r3, r0
 81071e0:	613b      	str	r3, [r7, #16]
    Pitch = asin(-2.0f * (q1 * q3 - q0 * q2));
 81071e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 81071e6:	edd7 7a08 	vldr	s15, [r7, #32]
 81071ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 81071ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 81071f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 81071f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81071fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 81071fe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8107202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8107206:	ee17 0a90 	vmov	r0, s15
 810720a:	f7f9 fa35 	bl	8100678 <__aeabi_f2d>
 810720e:	4602      	mov	r2, r0
 8107210:	460b      	mov	r3, r1
 8107212:	ec43 2b10 	vmov	d0, r2, r3
 8107216:	f005 fdf3 	bl	810ce00 <asin>
 810721a:	ec53 2b10 	vmov	r2, r3, d0
 810721e:	4610      	mov	r0, r2
 8107220:	4619      	mov	r1, r3
 8107222:	f7f9 fd79 	bl	8100d18 <__aeabi_d2f>
 8107226:	4603      	mov	r3, r0
 8107228:	60fb      	str	r3, [r7, #12]
    Yaw = atan2(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3);
 810722a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 810722e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8107232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 810723a:	edd7 7a08 	vldr	s15, [r7, #32]
 810723e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107246:	ee17 0a90 	vmov	r0, s15
 810724a:	f7f9 fa15 	bl	8100678 <__aeabi_f2d>
 810724e:	4604      	mov	r4, r0
 8107250:	460d      	mov	r5, r1
 8107252:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8107256:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810725a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810725e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107262:	edd7 7a08 	vldr	s15, [r7, #32]
 8107266:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810726a:	ee77 7a67 	vsub.f32	s15, s14, s15
 810726e:	ee17 0a90 	vmov	r0, s15
 8107272:	f7f9 fa01 	bl	8100678 <__aeabi_f2d>
 8107276:	4602      	mov	r2, r0
 8107278:	460b      	mov	r3, r1
 810727a:	ec43 2b11 	vmov	d1, r2, r3
 810727e:	ec45 4b10 	vmov	d0, r4, r5
 8107282:	f005 fdf7 	bl	810ce74 <atan2>
 8107286:	ec53 2b10 	vmov	r2, r3, d0
 810728a:	4610      	mov	r0, r2
 810728c:	4619      	mov	r1, r3
 810728e:	f7f9 fd43 	bl	8100d18 <__aeabi_d2f>
 8107292:	4603      	mov	r3, r0
 8107294:	60bb      	str	r3, [r7, #8]

    /* Calculate degrees and remove inclination */
    Roll *= AHRSIMU_RAD2DEG;
 8107296:	6938      	ldr	r0, [r7, #16]
 8107298:	f7f9 f9ee 	bl	8100678 <__aeabi_f2d>
 810729c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81072a0:	f7f9 fa42 	bl	8100728 <__aeabi_dmul>
 81072a4:	4602      	mov	r2, r0
 81072a6:	460b      	mov	r3, r1
 81072a8:	4610      	mov	r0, r2
 81072aa:	4619      	mov	r1, r3
 81072ac:	f7f9 fd34 	bl	8100d18 <__aeabi_d2f>
 81072b0:	4603      	mov	r3, r0
 81072b2:	613b      	str	r3, [r7, #16]
    Pitch *= AHRSIMU_RAD2DEG;
 81072b4:	68f8      	ldr	r0, [r7, #12]
 81072b6:	f7f9 f9df 	bl	8100678 <__aeabi_f2d>
 81072ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81072be:	f7f9 fa33 	bl	8100728 <__aeabi_dmul>
 81072c2:	4602      	mov	r2, r0
 81072c4:	460b      	mov	r3, r1
 81072c6:	4610      	mov	r0, r2
 81072c8:	4619      	mov	r1, r3
 81072ca:	f7f9 fd25 	bl	8100d18 <__aeabi_d2f>
 81072ce:	4603      	mov	r3, r0
 81072d0:	60fb      	str	r3, [r7, #12]
    Yaw = Yaw * AHRSIMU_RAD2DEG - Inclination;
 81072d2:	68b8      	ldr	r0, [r7, #8]
 81072d4:	f7f9 f9d0 	bl	8100678 <__aeabi_f2d>
 81072d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81072dc:	f7f9 fa24 	bl	8100728 <__aeabi_dmul>
 81072e0:	4602      	mov	r2, r0
 81072e2:	460b      	mov	r3, r1
 81072e4:	4614      	mov	r4, r2
 81072e6:	461d      	mov	r5, r3
 81072e8:	6978      	ldr	r0, [r7, #20]
 81072ea:	f7f9 f9c5 	bl	8100678 <__aeabi_f2d>
 81072ee:	4602      	mov	r2, r0
 81072f0:	460b      	mov	r3, r1
 81072f2:	4620      	mov	r0, r4
 81072f4:	4629      	mov	r1, r5
 81072f6:	f7f9 f85f 	bl	81003b8 <__aeabi_dsub>
 81072fa:	4602      	mov	r2, r0
 81072fc:	460b      	mov	r3, r1
 81072fe:	4610      	mov	r0, r2
 8107300:	4619      	mov	r1, r3
 8107302:	f7f9 fd09 	bl	8100d18 <__aeabi_d2f>
 8107306:	4603      	mov	r3, r0
 8107308:	60bb      	str	r3, [r7, #8]

    inputAHRS->Roll = Roll;
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	693a      	ldr	r2, [r7, #16]
 810730e:	601a      	str	r2, [r3, #0]
    inputAHRS->Pitch = Pitch;
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	68fa      	ldr	r2, [r7, #12]
 8107314:	605a      	str	r2, [r3, #4]
    inputAHRS->Yaw = Yaw;
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	68ba      	ldr	r2, [r7, #8]
 810731a:	609a      	str	r2, [r3, #8]

    /* Check values because of inclination */
    if (Yaw < -180)
 810731c:	edd7 7a02 	vldr	s15, [r7, #8]
 8107320:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8107384 <CalculateAngles+0x254>
 8107324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8107328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810732c:	d50c      	bpl.n	8107348 <CalculateAngles+0x218>
    {
        Yaw = 180.0f - (-180.0f - Yaw);
 810732e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8107384 <CalculateAngles+0x254>
 8107332:	edd7 7a02 	vldr	s15, [r7, #8]
 8107336:	ee77 7a67 	vsub.f32	s15, s14, s15
 810733a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8107388 <CalculateAngles+0x258>
 810733e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107342:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    else if (Yaw > 180)
    {
        Yaw = -180.0f - (180.0f - Yaw);
    }
}
 8107346:	e015      	b.n	8107374 <CalculateAngles+0x244>
    else if (Yaw > 180)
 8107348:	edd7 7a02 	vldr	s15, [r7, #8]
 810734c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8107388 <CalculateAngles+0x258>
 8107350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8107354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107358:	dc00      	bgt.n	810735c <CalculateAngles+0x22c>
}
 810735a:	e00b      	b.n	8107374 <CalculateAngles+0x244>
        Yaw = -180.0f - (180.0f - Yaw);
 810735c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8107388 <CalculateAngles+0x258>
 8107360:	edd7 7a02 	vldr	s15, [r7, #8]
 8107364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107368:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8107384 <CalculateAngles+0x254>
 810736c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107370:	edc7 7a02 	vstr	s15, [r7, #8]
}
 8107374:	bf00      	nop
 8107376:	3730      	adds	r7, #48	; 0x30
 8107378:	46bd      	mov	sp, r7
 810737a:	bdb0      	pop	{r4, r5, r7, pc}
 810737c:	f3af 8000 	nop.w
 8107380:	40600000 	.word	0x40600000
 8107384:	c3340000 	.word	0xc3340000
 8107388:	43340000 	.word	0x43340000
 810738c:	1a63c1f8 	.word	0x1a63c1f8
 8107390:	404ca5dc 	.word	0x404ca5dc

08107394 <UpdateAHRS>:

void UpdateAHRS(tAHRSDATA *inputAHRS, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8107394:	b580      	push	{r7, lr}
 8107396:	b0b4      	sub	sp, #208	; 0xd0
 8107398:	af00      	add	r7, sp, #0
 810739a:	6278      	str	r0, [r7, #36]	; 0x24
 810739c:	ed87 0a08 	vstr	s0, [r7, #32]
 81073a0:	edc7 0a07 	vstr	s1, [r7, #28]
 81073a4:	ed87 1a06 	vstr	s2, [r7, #24]
 81073a8:	edc7 1a05 	vstr	s3, [r7, #20]
 81073ac:	ed87 2a04 	vstr	s4, [r7, #16]
 81073b0:	edc7 2a03 	vstr	s5, [r7, #12]
 81073b4:	ed87 3a02 	vstr	s6, [r7, #8]
 81073b8:	edc7 3a01 	vstr	s7, [r7, #4]
 81073bc:	ed87 4a00 	vstr	s8, [r7]
	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;					// quaternion of sensor frame relative to auxiliary frame
 81073c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 81073c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81073c8:	f04f 0300 	mov.w	r3, #0
 81073cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81073d0:	f04f 0300 	mov.w	r3, #0
 81073d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81073d8:	f04f 0300 	mov.w	r3, #0
 81073dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float sampleRate = 1/20.0;
 81073e0:	4b5c      	ldr	r3, [pc, #368]	; (8107554 <UpdateAHRS+0x1c0>)
 81073e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float recipNorm;
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float hx, hy;
    float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
    float beta = 0.3;
 81073e6:	4b5c      	ldr	r3, [pc, #368]	; (8107558 <UpdateAHRS+0x1c4>)
 81073e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    q0 = inputAHRS->q0;
 81073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81073ee:	695b      	ldr	r3, [r3, #20]
 81073f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    q1 = inputAHRS->q1;
 81073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81073f6:	699b      	ldr	r3, [r3, #24]
 81073f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    q2 = inputAHRS->q2;
 81073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81073fe:	69db      	ldr	r3, [r3, #28]
 8107400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    q3 = inputAHRS->q3;
 8107404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107406:	6a1b      	ldr	r3, [r3, #32]
 8107408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    sampleRate = inputAHRS->sampleRate;
 810740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation) */
    if (( mx != 0.0f) || (my != 0.0f) || (mz != 0.0f))
 8107414:	edd7 7a02 	vldr	s15, [r7, #8]
 8107418:	eef5 7a40 	vcmp.f32	s15, #0.0
 810741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107420:	d10e      	bne.n	8107440 <UpdateAHRS+0xac>
 8107422:	edd7 7a01 	vldr	s15, [r7, #4]
 8107426:	eef5 7a40 	vcmp.f32	s15, #0.0
 810742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810742e:	d107      	bne.n	8107440 <UpdateAHRS+0xac>
 8107430:	edd7 7a00 	vldr	s15, [r7]
 8107434:	eef5 7a40 	vcmp.f32	s15, #0.0
 8107438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810743c:	f000 864c 	beq.w	81080d8 <UpdateAHRS+0xd44>
    {
        /* Rate of change of quaternion from gyroscope */
        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8107440:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107444:	eeb1 7a67 	vneg.f32	s14, s15
 8107448:	edd7 7a08 	vldr	s15, [r7, #32]
 810744c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107450:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8107454:	edd7 7a07 	vldr	s15, [r7, #28]
 8107458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810745c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107460:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8107464:	edd7 7a06 	vldr	s15, [r7, #24]
 8107468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810746c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107470:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8107474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8107478:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 810747c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8107480:	edd7 7a08 	vldr	s15, [r7, #32]
 8107484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107488:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 810748c:	edd7 7a06 	vldr	s15, [r7, #24]
 8107490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107498:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 810749c:	edd7 7a07 	vldr	s15, [r7, #28]
 81074a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81074a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 81074a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81074ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 81074b0:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 81074b4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81074b8:	edd7 7a07 	vldr	s15, [r7, #28]
 81074bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 81074c0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 81074c4:	edd7 7a06 	vldr	s15, [r7, #24]
 81074c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81074cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 81074d0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 81074d4:	edd7 7a08 	vldr	s15, [r7, #32]
 81074d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81074dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 81074e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81074e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81074e8:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 81074ec:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81074f0:	edd7 7a06 	vldr	s15, [r7, #24]
 81074f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 81074f8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 81074fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8107500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107508:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 810750c:	edd7 7a08 	vldr	s15, [r7, #32]
 8107510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107518:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810751c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8107520:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

        /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
        if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8107524:	edd7 7a05 	vldr	s15, [r7, #20]
 8107528:	eef5 7a40 	vcmp.f32	s15, #0.0
 810752c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107530:	d114      	bne.n	810755c <UpdateAHRS+0x1c8>
 8107532:	edd7 7a04 	vldr	s15, [r7, #16]
 8107536:	eef5 7a40 	vcmp.f32	s15, #0.0
 810753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810753e:	d10d      	bne.n	810755c <UpdateAHRS+0x1c8>
 8107540:	edd7 7a03 	vldr	s15, [r7, #12]
 8107544:	eef5 7a40 	vcmp.f32	s15, #0.0
 8107548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810754c:	f000 8548 	beq.w	8107fe0 <UpdateAHRS+0xc4c>
 8107550:	e004      	b.n	810755c <UpdateAHRS+0x1c8>
 8107552:	bf00      	nop
 8107554:	3d4ccccd 	.word	0x3d4ccccd
 8107558:	3e99999a 	.word	0x3e99999a
        {

            /* Normalise accelerometer measurement */
            recipNorm = OneOverSqrt(ax * ax + ay * ay + az * az);
 810755c:	edd7 7a05 	vldr	s15, [r7, #20]
 8107560:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8107564:	edd7 7a04 	vldr	s15, [r7, #16]
 8107568:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810756c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107570:	edd7 7a03 	vldr	s15, [r7, #12]
 8107574:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107578:	ee77 7a27 	vadd.f32	s15, s14, s15
 810757c:	eeb0 0a67 	vmov.f32	s0, s15
 8107580:	f7ff fdb4 	bl	81070ec <OneOverSqrt>
 8107584:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            ax *= recipNorm;
 8107588:	ed97 7a05 	vldr	s14, [r7, #20]
 810758c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8107590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107594:	edc7 7a05 	vstr	s15, [r7, #20]
            ay *= recipNorm;
 8107598:	ed97 7a04 	vldr	s14, [r7, #16]
 810759c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81075a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075a4:	edc7 7a04 	vstr	s15, [r7, #16]
            az *= recipNorm;
 81075a8:	ed97 7a03 	vldr	s14, [r7, #12]
 81075ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81075b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075b4:	edc7 7a03 	vstr	s15, [r7, #12]

            /* Normalise magnetometer measurement */
            recipNorm = OneOverSqrt(mx * mx + my * my + mz * mz);
 81075b8:	edd7 7a02 	vldr	s15, [r7, #8]
 81075bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81075c0:	edd7 7a01 	vldr	s15, [r7, #4]
 81075c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81075c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 81075cc:	edd7 7a00 	vldr	s15, [r7]
 81075d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81075d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81075d8:	eeb0 0a67 	vmov.f32	s0, s15
 81075dc:	f7ff fd86 	bl	81070ec <OneOverSqrt>
 81075e0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            mx *= recipNorm;
 81075e4:	ed97 7a02 	vldr	s14, [r7, #8]
 81075e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81075ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075f0:	edc7 7a02 	vstr	s15, [r7, #8]
            my *= recipNorm;
 81075f4:	ed97 7a01 	vldr	s14, [r7, #4]
 81075f8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81075fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107600:	edc7 7a01 	vstr	s15, [r7, #4]
            mz *= recipNorm;
 8107604:	ed97 7a00 	vldr	s14, [r7]
 8107608:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 810760c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107610:	edc7 7a00 	vstr	s15, [r7]

            /* Auxiliary variables to avoid repeated arithmetic */
            _2q0mx = 2.0f * q0 * mx;
 8107614:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107618:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810761c:	ed97 7a02 	vldr	s14, [r7, #8]
 8107620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107624:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            _2q0my = 2.0f * q0 * my;
 8107628:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 810762c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107630:	ed97 7a01 	vldr	s14, [r7, #4]
 8107634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107638:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            _2q0mz = 2.0f * q0 * mz;
 810763c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107640:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107644:	ed97 7a00 	vldr	s14, [r7]
 8107648:	ee67 7a27 	vmul.f32	s15, s14, s15
 810764c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            _2q1mx = 2.0f * q1 * mx;
 8107650:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107654:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107658:	ed97 7a02 	vldr	s14, [r7, #8]
 810765c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107660:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            _2q0 = 2.0f * q0;
 8107664:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107668:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810766c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            _2q1 = 2.0f * q1;
 8107670:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107674:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107678:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            _2q2 = 2.0f * q2;
 810767c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107680:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107684:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            _2q3 = 2.0f * q3;
 8107688:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 810768c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107690:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            _2q0q2 = 2.0f * q0 * q2;
 8107694:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107698:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810769c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 81076a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076a4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            _2q2q3 = 2.0f * q2 * q3;
 81076a8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81076ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81076b0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 81076b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076b8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            q0q0 = q0 * q0;
 81076bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81076c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81076c4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            q0q1 = q0 * q1;
 81076c8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81076cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81076d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076d4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            q0q2 = q0 * q2;
 81076d8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81076dc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81076e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076e4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            q0q3 = q0 * q3;
 81076e8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81076ec:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81076f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076f4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            q1q1 = q1 * q1;
 81076f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81076fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107700:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            q1q2 = q1 * q2;
 8107704:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8107708:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 810770c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107710:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            q1q3 = q1 * q3;
 8107714:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8107718:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 810771c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107720:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
            q2q2 = q2 * q2;
 8107724:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107728:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810772c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            q2q3 = q2 * q3;
 8107730:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8107734:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107738:	ee67 7a27 	vmul.f32	s15, s14, s15
 810773c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            q3q3 = q3 * q3;
 8107740:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107744:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107748:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

            /* Reference direction of Earth's magnetic field */
            hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 810774c:	ed97 7a02 	vldr	s14, [r7, #8]
 8107750:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8107754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107758:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 810775c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107768:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 810776c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107778:	edd7 6a02 	vldr	s13, [r7, #8]
 810777c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107788:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 810778c:	edd7 7a01 	vldr	s15, [r7, #4]
 8107790:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107794:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810779c:	ee37 7a27 	vadd.f32	s14, s14, s15
 81077a0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 81077a4:	edd7 7a00 	vldr	s15, [r7]
 81077a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81077ac:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81077b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81077b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 81077b8:	edd7 6a02 	vldr	s13, [r7, #8]
 81077bc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81077c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81077c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81077c8:	edd7 6a02 	vldr	s13, [r7, #8]
 81077cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 81077d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81077d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 81077d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 81077dc:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 81077e0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81077e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 81077e8:	edd7 6a01 	vldr	s13, [r7, #4]
 81077ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 81077f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81077f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 81077f8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 81077fc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107808:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 810780c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107818:	edd7 6a01 	vldr	s13, [r7, #4]
 810781c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107828:	edd7 6a01 	vldr	s13, [r7, #4]
 810782c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107838:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 810783c:	edd7 7a00 	vldr	s15, [r7]
 8107840:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107844:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810784c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107850:	edd7 6a01 	vldr	s13, [r7, #4]
 8107854:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8107858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810785c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107860:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            _2bx = sqrt(hx * hx + hy * hy);
 8107864:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8107868:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810786c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8107870:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107878:	ee17 0a90 	vmov	r0, s15
 810787c:	f7f8 fefc 	bl	8100678 <__aeabi_f2d>
 8107880:	4602      	mov	r2, r0
 8107882:	460b      	mov	r3, r1
 8107884:	ec43 2b10 	vmov	d0, r2, r3
 8107888:	f005 faf6 	bl	810ce78 <sqrt>
 810788c:	ec53 2b10 	vmov	r2, r3, d0
 8107890:	4610      	mov	r0, r2
 8107892:	4619      	mov	r1, r3
 8107894:	f7f9 fa40 	bl	8100d18 <__aeabi_d2f>
 8107898:	4603      	mov	r3, r0
 810789a:	64bb      	str	r3, [r7, #72]	; 0x48
            _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 810789c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 81078a0:	eeb1 7a67 	vneg.f32	s14, s15
 81078a4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81078a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 81078ac:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 81078b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81078b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81078b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 81078bc:	edd7 6a00 	vldr	s13, [r7]
 81078c0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 81078c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81078c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 81078cc:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 81078d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81078d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81078d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 81078dc:	edd7 6a00 	vldr	s13, [r7]
 81078e0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 81078e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81078e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 81078ec:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 81078f0:	edd7 7a01 	vldr	s15, [r7, #4]
 81078f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81078f8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81078fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107904:	edd7 6a00 	vldr	s13, [r7]
 8107908:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 810790c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107914:	edd7 6a00 	vldr	s13, [r7]
 8107918:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 810791c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107924:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            _4bx = 2.0f * _2bx;
 8107928:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 810792c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107930:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            _4bz = 2.0f * _2bz;
 8107934:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107938:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810793c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            /* Gradient decent algorithm corrective step */
            s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8107940:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8107944:	eeb1 7a67 	vneg.f32	s14, s15
 8107948:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 810794c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8107950:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8107954:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107958:	edd7 7a05 	vldr	s15, [r7, #20]
 810795c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8107960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107964:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8107968:	ee77 6aa7 	vadd.f32	s13, s15, s15
 810796c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8107970:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107974:	edd7 7a04 	vldr	s15, [r7, #16]
 8107978:	ee76 6ae7 	vsub.f32	s13, s13, s15
 810797c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8107980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107988:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 810798c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107990:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107994:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8107998:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 810799c:	ee36 6a67 	vsub.f32	s12, s12, s15
 81079a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 81079a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 81079a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81079ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 81079b0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 81079b4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 81079b8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 81079bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81079c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 81079c4:	ee36 6a27 	vadd.f32	s12, s12, s15
 81079c8:	edd7 7a02 	vldr	s15, [r7, #8]
 81079cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 81079d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81079d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81079d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81079dc:	eef1 6a67 	vneg.f32	s13, s15
 81079e0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81079e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81079e8:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 81079ec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81079f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 81079f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 81079f8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 81079fc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8107a00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107a04:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107a08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107a0c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8107a10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8107a14:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8107a18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107a1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107a20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107a24:	edd7 7a01 	vldr	s15, [r7, #4]
 8107a28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107a34:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8107a38:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107a40:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8107a44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107a48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107a4c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107a50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107a54:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8107a58:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107a5c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107a60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107a64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107a68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107a6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107a70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107a74:	edd7 7a00 	vldr	s15, [r7]
 8107a78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107a84:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8107a88:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107a8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8107a90:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8107a94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8107a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107aa0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8107aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107aa8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8107aac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8107ab0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8107ab4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107ab8:	edd7 7a04 	vldr	s15, [r7, #16]
 8107abc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107ac0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8107ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107acc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107ad0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8107ad4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8107ad8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107adc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107ae0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8107ae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107ae8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107aec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107af0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8107af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107b04:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8107b08:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107b0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107b10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8107b14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107b18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107b1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8107b20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107b24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107b28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107b2c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8107b30:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8107b34:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107b38:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107b3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107b40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107b44:	edd7 7a02 	vldr	s15, [r7, #8]
 8107b48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107b54:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8107b58:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107b60:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8107b64:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107b68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107b6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107b70:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8107b74:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8107b78:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107b7c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107b80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107b84:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8107b88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8107b8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8107b90:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107b94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107b98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107b9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8107ba0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107bac:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8107bb0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107bb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107bb8:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8107bbc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107bc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107bc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107bc8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8107bcc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107bd0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107bd4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107bd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107bdc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8107be0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107be4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107be8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107bec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107bf0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107bf4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107bf8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107bfc:	edd7 7a00 	vldr	s15, [r7]
 8107c00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107c0c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8107c10:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8107c14:	eeb1 7a67 	vneg.f32	s14, s15
 8107c18:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107c1c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8107c20:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8107c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107c28:	edd7 7a05 	vldr	s15, [r7, #20]
 8107c2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8107c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107c34:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8107c38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8107c3c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8107c40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107c44:	edd7 7a04 	vldr	s15, [r7, #16]
 8107c48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107c4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8107c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107c58:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107c5c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8107c60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8107c64:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107c68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107c6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8107c70:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107c74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107c78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107c7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8107c84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107c90:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8107c94:	eef1 6a67 	vneg.f32	s13, s15
 8107c98:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107c9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107ca0:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8107ca4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107ca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107cac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107cb0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8107cb4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107cb8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107cbc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8107cc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107cc4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107cc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107ccc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8107cd0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8107cd4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107cd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107cdc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107ce0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8107ce8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107cf4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8107cf8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107d00:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8107d04:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107d08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107d0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107d10:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8107d14:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8107d18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107d1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107d20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107d24:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8107d28:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8107d2c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8107d30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107d34:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107d38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8107d40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107d4c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8107d50:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107d54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107d58:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8107d5c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107d60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107d64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107d68:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8107d6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107d70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107d74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107d78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107d7c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8107d80:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107d84:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107d88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107d8c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107d90:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107d94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107d98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107d9c:	edd7 7a00 	vldr	s15, [r7]
 8107da0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107dac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8107db0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107db4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8107db8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8107dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8107dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107dc8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8107dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107dd0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8107dd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8107dd8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8107ddc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8107de4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8107de8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8107dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107df4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8107df8:	eef1 6a67 	vneg.f32	s13, s15
 8107dfc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8107e00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107e04:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8107e08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107e0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107e10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107e14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8107e18:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107e1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107e20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8107e24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107e28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107e2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107e30:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8107e34:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8107e38:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107e3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107e40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107e44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8107e4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107e58:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107e5c:	eef1 6a67 	vneg.f32	s13, s15
 8107e60:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8107e64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107e68:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8107e6c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8107e70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8107e74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8107e78:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8107e7c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8107e80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8107e84:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107e88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107e8c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8107e90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8107e94:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8107e98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107e9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107ea0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8107ea8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107eb4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8107eb8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8107ebc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8107ec0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8107ec4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8107ec8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107ecc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8107ed0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8107ed4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8107ed8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8107edc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107ee0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8107ee4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107ee8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8107eec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8107ef0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8107ef4:	edd7 7a00 	vldr	s15, [r7]
 8107ef8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8107efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* normalise step magnitude */
            recipNorm = OneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8107f08:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8107f0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8107f10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8107f14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107f1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8107f20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8107f28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8107f2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107f34:	eeb0 0a67 	vmov.f32	s0, s15
 8107f38:	f7ff f8d8 	bl	81070ec <OneOverSqrt>
 8107f3c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            s0 *= recipNorm;
 8107f40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8107f44:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8107f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f4c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            s1 *= recipNorm;
 8107f50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8107f54:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8107f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            s2 *= recipNorm;
 8107f60:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8107f64:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8107f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            s3 *= recipNorm;
 8107f70:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8107f74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8107f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* Apply feedback step */
            qDot1 -= beta * s0;
 8107f80:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8107f84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8107f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f8c:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8107f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107f94:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
            qDot2 -= beta * s1;
 8107f98:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8107f9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8107fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fa4:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8107fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107fac:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
            qDot3 -= beta * s2;
 8107fb0:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8107fb4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8107fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fbc:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8107fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107fc4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
            qDot4 -= beta * s3;
 8107fc8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8107fcc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8107fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fd4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8107fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107fdc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
        }

        /* Integrate rate of change of quaternion to yield quaternion */
        q0 += qDot1 * sampleRate;
 8107fe0:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8107fe4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8107fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fec:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8107ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107ff4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
        q1 += qDot2 * sampleRate;
 8107ff8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8107ffc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108004:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108008:	ee77 7a27 	vadd.f32	s15, s14, s15
 810800c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
        q2 += qDot3 * sampleRate;
 8108010:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8108014:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108018:	ee67 7a27 	vmul.f32	s15, s14, s15
 810801c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8108020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108024:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        q3 += qDot4 * sampleRate;
 8108028:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 810802c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108034:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8108038:	ee77 7a27 	vadd.f32	s15, s14, s15
 810803c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

        /* Normalise quaternion */
        recipNorm = OneOverSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8108040:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108044:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8108048:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 810804c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108054:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108058:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810805c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108060:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108064:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108068:	ee77 7a27 	vadd.f32	s15, s14, s15
 810806c:	eeb0 0a67 	vmov.f32	s0, s15
 8108070:	f7ff f83c 	bl	81070ec <OneOverSqrt>
 8108074:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
        q0 *= recipNorm;
 8108078:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 810807c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108084:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
        q1 *= recipNorm;
 8108088:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 810808c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108094:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
        q2 *= recipNorm;
 8108098:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 810809c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81080a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080a4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        q3 *= recipNorm;
 81080a8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 81080ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81080b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080b4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

        inputAHRS->q0 = q0;
 81080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81080ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 81080be:	615a      	str	r2, [r3, #20]
        inputAHRS->q1 = q1;
 81080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81080c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 81080c6:	619a      	str	r2, [r3, #24]
        inputAHRS->q2 = q2;
 81080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81080ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 81080ce:	61da      	str	r2, [r3, #28]
        inputAHRS->q3 = q3;
 81080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81080d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 81080d6:	621a      	str	r2, [r3, #32]
        /* Update IMU algorithm */
        // UpdateIMU();
    }

    /* Calculate new angles */
    CalculateAngles(inputAHRS);
 81080d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81080da:	f7ff f829 	bl	8107130 <CalculateAngles>
}
 81080de:	bf00      	nop
 81080e0:	37d0      	adds	r7, #208	; 0xd0
 81080e2:	46bd      	mov	sp, r7
 81080e4:	bd80      	pop	{r7, pc}
 81080e6:	bf00      	nop

081080e8 <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 81080e8:	b084      	sub	sp, #16
 81080ea:	b5b0      	push	{r4, r5, r7, lr}
 81080ec:	b092      	sub	sp, #72	; 0x48
 81080ee:	af10      	add	r7, sp, #64	; 0x40
 81080f0:	f107 0418 	add.w	r4, r7, #24
 81080f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 81080f8:	2300      	movs	r3, #0
 81080fa:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 81080fc:	466d      	mov	r5, sp
 81080fe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8108102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810810a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810810c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810810e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8108112:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8108116:	f107 0318 	add.w	r3, r7, #24
 810811a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810811c:	f7fc fbbe 	bl	810489c <MPU9250_Init>
 8108120:	4603      	mov	r3, r0
 8108122:	71fb      	strb	r3, [r7, #7]
	return ret;
 8108124:	79fb      	ldrb	r3, [r7, #7]
}
 8108126:	4618      	mov	r0, r3
 8108128:	3708      	adds	r7, #8
 810812a:	46bd      	mov	sp, r7
 810812c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8108130:	b004      	add	sp, #16
 8108132:	4770      	bx	lr

08108134 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8108134:	b580      	push	{r7, lr}
 8108136:	b082      	sub	sp, #8
 8108138:	af00      	add	r7, sp, #0
 810813a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 810813c:	4b04      	ldr	r3, [pc, #16]	; (8108150 <HAL_HSEM_FreeCallback+0x1c>)
 810813e:	2201      	movs	r2, #1
 8108140:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8108142:	2001      	movs	r0, #1
 8108144:	f7fa f8b2 	bl	81022ac <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8108148:	bf00      	nop
 810814a:	3708      	adds	r7, #8
 810814c:	46bd      	mov	sp, r7
 810814e:	bd80      	pop	{r7, pc}
 8108150:	100002d4 	.word	0x100002d4

08108154 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8108154:	b580      	push	{r7, lr}
 8108156:	b082      	sub	sp, #8
 8108158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 810815a:	4b0f      	ldr	r3, [pc, #60]	; (8108198 <MAILBOX_Init+0x44>)
 810815c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108160:	4a0d      	ldr	r2, [pc, #52]	; (8108198 <MAILBOX_Init+0x44>)
 8108162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8108166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810816a:	4b0b      	ldr	r3, [pc, #44]	; (8108198 <MAILBOX_Init+0x44>)
 810816c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108174:	607b      	str	r3, [r7, #4]
 8108176:	687b      	ldr	r3, [r7, #4]
    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  /* Enable CM4 receive irq */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 1);
 8108178:	2201      	movs	r2, #1
 810817a:	2100      	movs	r1, #0
 810817c:	207e      	movs	r0, #126	; 0x7e
 810817e:	f7f9 fe60 	bl	8101e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8108182:	207e      	movs	r0, #126	; 0x7e
 8108184:	f7f9 fe77 	bl	8101e76 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8108188:	2001      	movs	r0, #1
 810818a:	f7fa f88f 	bl	81022ac <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 810818e:	2300      	movs	r3, #0
}
 8108190:	4618      	mov	r0, r3
 8108192:	3708      	adds	r7, #8
 8108194:	46bd      	mov	sp, r7
 8108196:	bd80      	pop	{r7, pc}
 8108198:	58024400 	.word	0x58024400

0810819c <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 810819c:	b580      	push	{r7, lr}
 810819e:	b082      	sub	sp, #8
 81081a0:	af00      	add	r7, sp, #0
 81081a2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 81081a4:	4b09      	ldr	r3, [pc, #36]	; (81081cc <MAILBOX_Poll+0x30>)
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	2b01      	cmp	r3, #1
 81081aa:	d108      	bne.n	81081be <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 81081ac:	2101      	movs	r1, #1
 81081ae:	6878      	ldr	r0, [r7, #4]
 81081b0:	f7fd fcfb 	bl	8105baa <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 81081b4:	4b05      	ldr	r3, [pc, #20]	; (81081cc <MAILBOX_Poll+0x30>)
 81081b6:	2200      	movs	r2, #0
 81081b8:	601a      	str	r2, [r3, #0]
    return 0;
 81081ba:	2300      	movs	r3, #0
 81081bc:	e001      	b.n	81081c2 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 81081be:	f06f 030a 	mvn.w	r3, #10
}
 81081c2:	4618      	mov	r0, r3
 81081c4:	3708      	adds	r7, #8
 81081c6:	46bd      	mov	sp, r7
 81081c8:	bd80      	pop	{r7, pc}
 81081ca:	bf00      	nop
 81081cc:	100002d4 	.word	0x100002d4

081081d0 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 81081d0:	b580      	push	{r7, lr}
 81081d2:	b082      	sub	sp, #8
 81081d4:	af00      	add	r7, sp, #0
 81081d6:	6078      	str	r0, [r7, #4]
 81081d8:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 81081da:	2001      	movs	r0, #1
 81081dc:	f7fa f838 	bl	8102250 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 81081e0:	2100      	movs	r1, #0
 81081e2:	2001      	movs	r0, #1
 81081e4:	f7fa f84e 	bl	8102284 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 81081e8:	2300      	movs	r3, #0
}
 81081ea:	4618      	mov	r0, r3
 81081ec:	3708      	adds	r7, #8
 81081ee:	46bd      	mov	sp, r7
 81081f0:	bd80      	pop	{r7, pc}

081081f2 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 81081f2:	b480      	push	{r7}
 81081f4:	b083      	sub	sp, #12
 81081f6:	af00      	add	r7, sp, #0
 81081f8:	6078      	str	r0, [r7, #4]
 81081fa:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8108200:	683a      	ldr	r2, [r7, #0]
 8108202:	429a      	cmp	r2, r3
 8108204:	d209      	bcs.n	810821a <metal_device_io_region+0x28>
 8108206:	683a      	ldr	r2, [r7, #0]
 8108208:	4613      	mov	r3, r2
 810820a:	005b      	lsls	r3, r3, #1
 810820c:	4413      	add	r3, r2
 810820e:	011b      	lsls	r3, r3, #4
 8108210:	3308      	adds	r3, #8
 8108212:	687a      	ldr	r2, [r7, #4]
 8108214:	4413      	add	r3, r2
 8108216:	3304      	adds	r3, #4
 8108218:	e000      	b.n	810821c <metal_device_io_region+0x2a>
 810821a:	2300      	movs	r3, #0
}
 810821c:	4618      	mov	r0, r3
 810821e:	370c      	adds	r7, #12
 8108220:	46bd      	mov	sp, r7
 8108222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108226:	4770      	bx	lr

08108228 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8108228:	b590      	push	{r4, r7, lr}
 810822a:	b08d      	sub	sp, #52	; 0x34
 810822c:	af04      	add	r7, sp, #16
 810822e:	6078      	str	r0, [r7, #4]
  int status = 0;
 8108230:	2300      	movs	r3, #0
 8108232:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8108234:	2300      	movs	r3, #0
 8108236:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8108238:	4a41      	ldr	r2, [pc, #260]	; (8108340 <OPENAMP_shmem_init+0x118>)
 810823a:	f107 0310 	add.w	r3, r7, #16
 810823e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108242:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8108246:	2300      	movs	r3, #0
 8108248:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 810824a:	2300      	movs	r3, #0
 810824c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 810824e:	f107 0310 	add.w	r3, r7, #16
 8108252:	4618      	mov	r0, r3
 8108254:	f7fd f8c0 	bl	81053d8 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8108258:	483a      	ldr	r0, [pc, #232]	; (8108344 <OPENAMP_shmem_init+0x11c>)
 810825a:	f7fc ff65 	bl	8105128 <metal_register_generic_device>
 810825e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8108260:	69fb      	ldr	r3, [r7, #28]
 8108262:	2b00      	cmp	r3, #0
 8108264:	d001      	beq.n	810826a <OPENAMP_shmem_init+0x42>
    return status;
 8108266:	69fb      	ldr	r3, [r7, #28]
 8108268:	e066      	b.n	8108338 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 810826a:	f107 0318 	add.w	r3, r7, #24
 810826e:	461a      	mov	r2, r3
 8108270:	4935      	ldr	r1, [pc, #212]	; (8108348 <OPENAMP_shmem_init+0x120>)
 8108272:	4836      	ldr	r0, [pc, #216]	; (810834c <OPENAMP_shmem_init+0x124>)
 8108274:	f7fc ff1a 	bl	81050ac <metal_device_open>
 8108278:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810827a:	69fb      	ldr	r3, [r7, #28]
 810827c:	2b00      	cmp	r3, #0
 810827e:	d001      	beq.n	8108284 <OPENAMP_shmem_init+0x5c>
    return status;
 8108280:	69fb      	ldr	r3, [r7, #28]
 8108282:	e059      	b.n	8108338 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8108284:	4a32      	ldr	r2, [pc, #200]	; (8108350 <OPENAMP_shmem_init+0x128>)
 8108286:	4b33      	ldr	r3, [pc, #204]	; (8108354 <OPENAMP_shmem_init+0x12c>)
 8108288:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810828a:	69bb      	ldr	r3, [r7, #24]
 810828c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8108290:	4a31      	ldr	r2, [pc, #196]	; (8108358 <OPENAMP_shmem_init+0x130>)
 8108292:	4b2f      	ldr	r3, [pc, #188]	; (8108350 <OPENAMP_shmem_init+0x128>)
 8108294:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8108296:	461a      	mov	r2, r3
 8108298:	2300      	movs	r3, #0
 810829a:	9302      	str	r3, [sp, #8]
 810829c:	2300      	movs	r3, #0
 810829e:	9301      	str	r3, [sp, #4]
 81082a0:	f04f 33ff 	mov.w	r3, #4294967295
 81082a4:	9300      	str	r3, [sp, #0]
 81082a6:	4613      	mov	r3, r2
 81082a8:	4a2a      	ldr	r2, [pc, #168]	; (8108354 <OPENAMP_shmem_init+0x12c>)
 81082aa:	4929      	ldr	r1, [pc, #164]	; (8108350 <OPENAMP_shmem_init+0x128>)
 81082ac:	f7fd f8e1 	bl	8105472 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 81082b0:	69bb      	ldr	r3, [r7, #24]
 81082b2:	2100      	movs	r1, #0
 81082b4:	4618      	mov	r0, r3
 81082b6:	f7ff ff9c 	bl	81081f2 <metal_device_io_region>
 81082ba:	4603      	mov	r3, r0
 81082bc:	4a27      	ldr	r2, [pc, #156]	; (810835c <OPENAMP_shmem_init+0x134>)
 81082be:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 81082c0:	4b26      	ldr	r3, [pc, #152]	; (810835c <OPENAMP_shmem_init+0x134>)
 81082c2:	681b      	ldr	r3, [r3, #0]
 81082c4:	2b00      	cmp	r3, #0
 81082c6:	d102      	bne.n	81082ce <OPENAMP_shmem_init+0xa6>
    return -1;
 81082c8:	f04f 33ff 	mov.w	r3, #4294967295
 81082cc:	e034      	b.n	8108338 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 81082ce:	f107 0208 	add.w	r2, r7, #8
 81082d2:	f107 030c 	add.w	r3, r7, #12
 81082d6:	4619      	mov	r1, r3
 81082d8:	6878      	ldr	r0, [r7, #4]
 81082da:	f000 f905 	bl	81084e8 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 81082de:	68fb      	ldr	r3, [r7, #12]
 81082e0:	4a1f      	ldr	r2, [pc, #124]	; (8108360 <OPENAMP_shmem_init+0x138>)
 81082e2:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 81082e4:	4b1e      	ldr	r3, [pc, #120]	; (8108360 <OPENAMP_shmem_init+0x138>)
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	2b00      	cmp	r3, #0
 81082ea:	d102      	bne.n	81082f2 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 81082ec:	f04f 33ff 	mov.w	r3, #4294967295
 81082f0:	e022      	b.n	8108338 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 81082f2:	69bb      	ldr	r3, [r7, #24]
 81082f4:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 81082f8:	4b19      	ldr	r3, [pc, #100]	; (8108360 <OPENAMP_shmem_init+0x138>)
 81082fa:	6819      	ldr	r1, [r3, #0]
 81082fc:	4b18      	ldr	r3, [pc, #96]	; (8108360 <OPENAMP_shmem_init+0x138>)
 81082fe:	681a      	ldr	r2, [r3, #0]
 8108300:	68bb      	ldr	r3, [r7, #8]
 8108302:	461c      	mov	r4, r3
 8108304:	2300      	movs	r3, #0
 8108306:	9302      	str	r3, [sp, #8]
 8108308:	2300      	movs	r3, #0
 810830a:	9301      	str	r3, [sp, #4]
 810830c:	f04f 33ff 	mov.w	r3, #4294967295
 8108310:	9300      	str	r3, [sp, #0]
 8108312:	4623      	mov	r3, r4
 8108314:	f7fd f8ad 	bl	8105472 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8108318:	69bb      	ldr	r3, [r7, #24]
 810831a:	2101      	movs	r1, #1
 810831c:	4618      	mov	r0, r3
 810831e:	f7ff ff68 	bl	81081f2 <metal_device_io_region>
 8108322:	4603      	mov	r3, r0
 8108324:	4a0f      	ldr	r2, [pc, #60]	; (8108364 <OPENAMP_shmem_init+0x13c>)
 8108326:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8108328:	4b0e      	ldr	r3, [pc, #56]	; (8108364 <OPENAMP_shmem_init+0x13c>)
 810832a:	681b      	ldr	r3, [r3, #0]
 810832c:	2b00      	cmp	r3, #0
 810832e:	d102      	bne.n	8108336 <OPENAMP_shmem_init+0x10e>
    return -1;
 8108330:	f04f 33ff 	mov.w	r3, #4294967295
 8108334:	e000      	b.n	8108338 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8108336:	2300      	movs	r3, #0
}
 8108338:	4618      	mov	r0, r3
 810833a:	3724      	adds	r7, #36	; 0x24
 810833c:	46bd      	mov	sp, r7
 810833e:	bd90      	pop	{r4, r7, pc}
 8108340:	0810db60 	.word	0x0810db60
 8108344:	1000003c 	.word	0x1000003c
 8108348:	0810db4c 	.word	0x0810db4c
 810834c:	0810db58 	.word	0x0810db58
 8108350:	38000400 	.word	0x38000400
 8108354:	10000368 	.word	0x10000368
 8108358:	38010000 	.word	0x38010000
 810835c:	100002d8 	.word	0x100002d8
 8108360:	100002e0 	.word	0x100002e0
 8108364:	100002dc 	.word	0x100002dc

08108368 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8108368:	b590      	push	{r4, r7, lr}
 810836a:	b08b      	sub	sp, #44	; 0x2c
 810836c:	af04      	add	r7, sp, #16
 810836e:	6078      	str	r0, [r7, #4]
 8108370:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8108372:	2300      	movs	r3, #0
 8108374:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8108376:	2300      	movs	r3, #0
 8108378:	613b      	str	r3, [r7, #16]
  int status = 0;
 810837a:	2300      	movs	r3, #0
 810837c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810837e:	f7ff fee9 	bl	8108154 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8108382:	6878      	ldr	r0, [r7, #4]
 8108384:	f7ff ff50 	bl	8108228 <OPENAMP_shmem_init>
 8108388:	60f8      	str	r0, [r7, #12]
  if(status)
 810838a:	68fb      	ldr	r3, [r7, #12]
 810838c:	2b00      	cmp	r3, #0
 810838e:	d001      	beq.n	8108394 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8108390:	68fb      	ldr	r3, [r7, #12]
 8108392:	e06a      	b.n	810846a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8108394:	6878      	ldr	r0, [r7, #4]
 8108396:	4b37      	ldr	r3, [pc, #220]	; (8108474 <MX_OPENAMP_Init+0x10c>)
 8108398:	681b      	ldr	r3, [r3, #0]
 810839a:	f103 0218 	add.w	r2, r3, #24
 810839e:	4b36      	ldr	r3, [pc, #216]	; (8108478 <MX_OPENAMP_Init+0x110>)
 81083a0:	681b      	ldr	r3, [r3, #0]
 81083a2:	2100      	movs	r1, #0
 81083a4:	9102      	str	r1, [sp, #8]
 81083a6:	4935      	ldr	r1, [pc, #212]	; (810847c <MX_OPENAMP_Init+0x114>)
 81083a8:	9101      	str	r1, [sp, #4]
 81083aa:	2100      	movs	r1, #0
 81083ac:	9100      	str	r1, [sp, #0]
 81083ae:	21ff      	movs	r1, #255	; 0xff
 81083b0:	f7fd fb1c 	bl	81059ec <rproc_virtio_create_vdev>
 81083b4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 81083b6:	693b      	ldr	r3, [r7, #16]
 81083b8:	2b00      	cmp	r3, #0
 81083ba:	d102      	bne.n	81083c2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 81083bc:	f04f 33ff 	mov.w	r3, #4294967295
 81083c0:	e053      	b.n	810846a <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 81083c2:	6938      	ldr	r0, [r7, #16]
 81083c4:	f7fd fc2d 	bl	8105c22 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 81083c8:	4b2a      	ldr	r3, [pc, #168]	; (8108474 <MX_OPENAMP_Init+0x10c>)
 81083ca:	681b      	ldr	r3, [r3, #0]
 81083cc:	3334      	adds	r3, #52	; 0x34
 81083ce:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81083d0:	697b      	ldr	r3, [r7, #20]
 81083d2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 81083d4:	697b      	ldr	r3, [r7, #20]
 81083d6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81083d8:	461c      	mov	r4, r3
 81083da:	4b29      	ldr	r3, [pc, #164]	; (8108480 <MX_OPENAMP_Init+0x118>)
 81083dc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 81083de:	697a      	ldr	r2, [r7, #20]
 81083e0:	6892      	ldr	r2, [r2, #8]
 81083e2:	6979      	ldr	r1, [r7, #20]
 81083e4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81083e6:	9102      	str	r1, [sp, #8]
 81083e8:	9201      	str	r2, [sp, #4]
 81083ea:	9300      	str	r3, [sp, #0]
 81083ec:	4623      	mov	r3, r4
 81083ee:	4602      	mov	r2, r0
 81083f0:	2100      	movs	r1, #0
 81083f2:	6938      	ldr	r0, [r7, #16]
 81083f4:	f7fd fba8 	bl	8105b48 <rproc_virtio_init_vring>
 81083f8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81083fa:	68fb      	ldr	r3, [r7, #12]
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	d001      	beq.n	8108404 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8108400:	68fb      	ldr	r3, [r7, #12]
 8108402:	e032      	b.n	810846a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8108404:	4b1b      	ldr	r3, [pc, #108]	; (8108474 <MX_OPENAMP_Init+0x10c>)
 8108406:	681b      	ldr	r3, [r3, #0]
 8108408:	3348      	adds	r3, #72	; 0x48
 810840a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810840c:	697b      	ldr	r3, [r7, #20]
 810840e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8108410:	697b      	ldr	r3, [r7, #20]
 8108412:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8108414:	461c      	mov	r4, r3
 8108416:	4b1a      	ldr	r3, [pc, #104]	; (8108480 <MX_OPENAMP_Init+0x118>)
 8108418:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810841a:	697a      	ldr	r2, [r7, #20]
 810841c:	6892      	ldr	r2, [r2, #8]
 810841e:	6979      	ldr	r1, [r7, #20]
 8108420:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8108422:	9102      	str	r1, [sp, #8]
 8108424:	9201      	str	r2, [sp, #4]
 8108426:	9300      	str	r3, [sp, #0]
 8108428:	4623      	mov	r3, r4
 810842a:	4602      	mov	r2, r0
 810842c:	2101      	movs	r1, #1
 810842e:	6938      	ldr	r0, [r7, #16]
 8108430:	f7fd fb8a 	bl	8105b48 <rproc_virtio_init_vring>
 8108434:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8108436:	68fb      	ldr	r3, [r7, #12]
 8108438:	2b00      	cmp	r3, #0
 810843a:	d001      	beq.n	8108440 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 810843c:	68fb      	ldr	r3, [r7, #12]
 810843e:	e014      	b.n	810846a <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8108440:	4b10      	ldr	r3, [pc, #64]	; (8108484 <MX_OPENAMP_Init+0x11c>)
 8108442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108446:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8108448:	4a0f      	ldr	r2, [pc, #60]	; (8108488 <MX_OPENAMP_Init+0x120>)
 810844a:	4b0e      	ldr	r3, [pc, #56]	; (8108484 <MX_OPENAMP_Init+0x11c>)
 810844c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810844e:	461a      	mov	r2, r3
 8108450:	480e      	ldr	r0, [pc, #56]	; (810848c <MX_OPENAMP_Init+0x124>)
 8108452:	f7fe f835 	bl	81064c0 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8108456:	4b0a      	ldr	r3, [pc, #40]	; (8108480 <MX_OPENAMP_Init+0x118>)
 8108458:	681b      	ldr	r3, [r3, #0]
 810845a:	4a0c      	ldr	r2, [pc, #48]	; (810848c <MX_OPENAMP_Init+0x124>)
 810845c:	9200      	str	r2, [sp, #0]
 810845e:	683a      	ldr	r2, [r7, #0]
 8108460:	6939      	ldr	r1, [r7, #16]
 8108462:	480b      	ldr	r0, [pc, #44]	; (8108490 <MX_OPENAMP_Init+0x128>)
 8108464:	f7fe faa0 	bl	81069a8 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8108468:	2300      	movs	r3, #0
}
 810846a:	4618      	mov	r0, r3
 810846c:	371c      	adds	r7, #28
 810846e:	46bd      	mov	sp, r7
 8108470:	bd90      	pop	{r4, r7, pc}
 8108472:	bf00      	nop
 8108474:	100002e0 	.word	0x100002e0
 8108478:	100002dc 	.word	0x100002dc
 810847c:	081081d1 	.word	0x081081d1
 8108480:	100002d8 	.word	0x100002d8
 8108484:	38000400 	.word	0x38000400
 8108488:	38010000 	.word	0x38010000
 810848c:	100002e4 	.word	0x100002e4
 8108490:	100002f0 	.word	0x100002f0

08108494 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8108494:	b580      	push	{r7, lr}
 8108496:	b08a      	sub	sp, #40	; 0x28
 8108498:	af04      	add	r7, sp, #16
 810849a:	60f8      	str	r0, [r7, #12]
 810849c:	60b9      	str	r1, [r7, #8]
 810849e:	607a      	str	r2, [r7, #4]
 81084a0:	603b      	str	r3, [r7, #0]
  int ret = 0;
 81084a2:	2300      	movs	r3, #0
 81084a4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 81084a6:	6a3b      	ldr	r3, [r7, #32]
 81084a8:	9302      	str	r3, [sp, #8]
 81084aa:	683b      	ldr	r3, [r7, #0]
 81084ac:	9301      	str	r3, [sp, #4]
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	9300      	str	r3, [sp, #0]
 81084b2:	f04f 33ff 	mov.w	r3, #4294967295
 81084b6:	68ba      	ldr	r2, [r7, #8]
 81084b8:	4904      	ldr	r1, [pc, #16]	; (81084cc <OPENAMP_create_endpoint+0x38>)
 81084ba:	68f8      	ldr	r0, [r7, #12]
 81084bc:	f7fd fe3e 	bl	810613c <rpmsg_create_ept>
 81084c0:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 81084c2:	697b      	ldr	r3, [r7, #20]
}
 81084c4:	4618      	mov	r0, r3
 81084c6:	3718      	adds	r7, #24
 81084c8:	46bd      	mov	sp, r7
 81084ca:	bd80      	pop	{r7, pc}
 81084cc:	100002f0 	.word	0x100002f0

081084d0 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 81084d0:	b580      	push	{r7, lr}
 81084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 81084d4:	4b03      	ldr	r3, [pc, #12]	; (81084e4 <OPENAMP_check_for_message+0x14>)
 81084d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81084d8:	4618      	mov	r0, r3
 81084da:	f7ff fe5f 	bl	810819c <MAILBOX_Poll>
}
 81084de:	bf00      	nop
 81084e0:	bd80      	pop	{r7, pc}
 81084e2:	bf00      	nop
 81084e4:	100002f0 	.word	0x100002f0

081084e8 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 81084e8:	b480      	push	{r7}
 81084ea:	b085      	sub	sp, #20
 81084ec:	af00      	add	r7, sp, #0
 81084ee:	60f8      	str	r0, [r7, #12]
 81084f0:	60b9      	str	r1, [r7, #8]
 81084f2:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 81084f4:	bf00      	nop
 81084f6:	4b08      	ldr	r3, [pc, #32]	; (8108518 <resource_table_init+0x30>)
 81084f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81084fa:	4a08      	ldr	r2, [pc, #32]	; (810851c <resource_table_init+0x34>)
 81084fc:	4293      	cmp	r3, r2
 81084fe:	d1fa      	bne.n	81084f6 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	228c      	movs	r2, #140	; 0x8c
 8108504:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8108506:	68bb      	ldr	r3, [r7, #8]
 8108508:	4a03      	ldr	r2, [pc, #12]	; (8108518 <resource_table_init+0x30>)
 810850a:	601a      	str	r2, [r3, #0]
}
 810850c:	bf00      	nop
 810850e:	3714      	adds	r7, #20
 8108510:	46bd      	mov	sp, r7
 8108512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108516:	4770      	bx	lr
 8108518:	38000000 	.word	0x38000000
 810851c:	38000400 	.word	0x38000400

08108520 <__assert_func>:
 8108520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8108522:	4614      	mov	r4, r2
 8108524:	461a      	mov	r2, r3
 8108526:	4b09      	ldr	r3, [pc, #36]	; (810854c <__assert_func+0x2c>)
 8108528:	681b      	ldr	r3, [r3, #0]
 810852a:	4605      	mov	r5, r0
 810852c:	68d8      	ldr	r0, [r3, #12]
 810852e:	b14c      	cbz	r4, 8108544 <__assert_func+0x24>
 8108530:	4b07      	ldr	r3, [pc, #28]	; (8108550 <__assert_func+0x30>)
 8108532:	9100      	str	r1, [sp, #0]
 8108534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8108538:	4906      	ldr	r1, [pc, #24]	; (8108554 <__assert_func+0x34>)
 810853a:	462b      	mov	r3, r5
 810853c:	f000 f814 	bl	8108568 <fiprintf>
 8108540:	f002 f8bc 	bl	810a6bc <abort>
 8108544:	4b04      	ldr	r3, [pc, #16]	; (8108558 <__assert_func+0x38>)
 8108546:	461c      	mov	r4, r3
 8108548:	e7f3      	b.n	8108532 <__assert_func+0x12>
 810854a:	bf00      	nop
 810854c:	100000b8 	.word	0x100000b8
 8108550:	0810dbce 	.word	0x0810dbce
 8108554:	0810dbdb 	.word	0x0810dbdb
 8108558:	0810dc09 	.word	0x0810dc09

0810855c <__errno>:
 810855c:	4b01      	ldr	r3, [pc, #4]	; (8108564 <__errno+0x8>)
 810855e:	6818      	ldr	r0, [r3, #0]
 8108560:	4770      	bx	lr
 8108562:	bf00      	nop
 8108564:	100000b8 	.word	0x100000b8

08108568 <fiprintf>:
 8108568:	b40e      	push	{r1, r2, r3}
 810856a:	b503      	push	{r0, r1, lr}
 810856c:	4601      	mov	r1, r0
 810856e:	ab03      	add	r3, sp, #12
 8108570:	4805      	ldr	r0, [pc, #20]	; (8108588 <fiprintf+0x20>)
 8108572:	f853 2b04 	ldr.w	r2, [r3], #4
 8108576:	6800      	ldr	r0, [r0, #0]
 8108578:	9301      	str	r3, [sp, #4]
 810857a:	f000 f925 	bl	81087c8 <_vfiprintf_r>
 810857e:	b002      	add	sp, #8
 8108580:	f85d eb04 	ldr.w	lr, [sp], #4
 8108584:	b003      	add	sp, #12
 8108586:	4770      	bx	lr
 8108588:	100000b8 	.word	0x100000b8

0810858c <__libc_init_array>:
 810858c:	b570      	push	{r4, r5, r6, lr}
 810858e:	4d0d      	ldr	r5, [pc, #52]	; (81085c4 <__libc_init_array+0x38>)
 8108590:	4c0d      	ldr	r4, [pc, #52]	; (81085c8 <__libc_init_array+0x3c>)
 8108592:	1b64      	subs	r4, r4, r5
 8108594:	10a4      	asrs	r4, r4, #2
 8108596:	2600      	movs	r6, #0
 8108598:	42a6      	cmp	r6, r4
 810859a:	d109      	bne.n	81085b0 <__libc_init_array+0x24>
 810859c:	4d0b      	ldr	r5, [pc, #44]	; (81085cc <__libc_init_array+0x40>)
 810859e:	4c0c      	ldr	r4, [pc, #48]	; (81085d0 <__libc_init_array+0x44>)
 81085a0:	f005 f9dc 	bl	810d95c <_init>
 81085a4:	1b64      	subs	r4, r4, r5
 81085a6:	10a4      	asrs	r4, r4, #2
 81085a8:	2600      	movs	r6, #0
 81085aa:	42a6      	cmp	r6, r4
 81085ac:	d105      	bne.n	81085ba <__libc_init_array+0x2e>
 81085ae:	bd70      	pop	{r4, r5, r6, pc}
 81085b0:	f855 3b04 	ldr.w	r3, [r5], #4
 81085b4:	4798      	blx	r3
 81085b6:	3601      	adds	r6, #1
 81085b8:	e7ee      	b.n	8108598 <__libc_init_array+0xc>
 81085ba:	f855 3b04 	ldr.w	r3, [r5], #4
 81085be:	4798      	blx	r3
 81085c0:	3601      	adds	r6, #1
 81085c2:	e7f2      	b.n	81085aa <__libc_init_array+0x1e>
 81085c4:	0810e0f8 	.word	0x0810e0f8
 81085c8:	0810e0f8 	.word	0x0810e0f8
 81085cc:	0810e0f8 	.word	0x0810e0f8
 81085d0:	0810e0fc 	.word	0x0810e0fc

081085d4 <malloc>:
 81085d4:	4b02      	ldr	r3, [pc, #8]	; (81085e0 <malloc+0xc>)
 81085d6:	4601      	mov	r1, r0
 81085d8:	6818      	ldr	r0, [r3, #0]
 81085da:	f000 b871 	b.w	81086c0 <_malloc_r>
 81085de:	bf00      	nop
 81085e0:	100000b8 	.word	0x100000b8

081085e4 <free>:
 81085e4:	4b02      	ldr	r3, [pc, #8]	; (81085f0 <free+0xc>)
 81085e6:	4601      	mov	r1, r0
 81085e8:	6818      	ldr	r0, [r3, #0]
 81085ea:	f000 b819 	b.w	8108620 <_free_r>
 81085ee:	bf00      	nop
 81085f0:	100000b8 	.word	0x100000b8

081085f4 <memcpy>:
 81085f4:	440a      	add	r2, r1
 81085f6:	4291      	cmp	r1, r2
 81085f8:	f100 33ff 	add.w	r3, r0, #4294967295
 81085fc:	d100      	bne.n	8108600 <memcpy+0xc>
 81085fe:	4770      	bx	lr
 8108600:	b510      	push	{r4, lr}
 8108602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108606:	f803 4f01 	strb.w	r4, [r3, #1]!
 810860a:	4291      	cmp	r1, r2
 810860c:	d1f9      	bne.n	8108602 <memcpy+0xe>
 810860e:	bd10      	pop	{r4, pc}

08108610 <memset>:
 8108610:	4402      	add	r2, r0
 8108612:	4603      	mov	r3, r0
 8108614:	4293      	cmp	r3, r2
 8108616:	d100      	bne.n	810861a <memset+0xa>
 8108618:	4770      	bx	lr
 810861a:	f803 1b01 	strb.w	r1, [r3], #1
 810861e:	e7f9      	b.n	8108614 <memset+0x4>

08108620 <_free_r>:
 8108620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8108622:	2900      	cmp	r1, #0
 8108624:	d048      	beq.n	81086b8 <_free_r+0x98>
 8108626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810862a:	9001      	str	r0, [sp, #4]
 810862c:	2b00      	cmp	r3, #0
 810862e:	f1a1 0404 	sub.w	r4, r1, #4
 8108632:	bfb8      	it	lt
 8108634:	18e4      	addlt	r4, r4, r3
 8108636:	f003 fc7d 	bl	810bf34 <__malloc_lock>
 810863a:	4a20      	ldr	r2, [pc, #128]	; (81086bc <_free_r+0x9c>)
 810863c:	9801      	ldr	r0, [sp, #4]
 810863e:	6813      	ldr	r3, [r2, #0]
 8108640:	4615      	mov	r5, r2
 8108642:	b933      	cbnz	r3, 8108652 <_free_r+0x32>
 8108644:	6063      	str	r3, [r4, #4]
 8108646:	6014      	str	r4, [r2, #0]
 8108648:	b003      	add	sp, #12
 810864a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810864e:	f003 bc77 	b.w	810bf40 <__malloc_unlock>
 8108652:	42a3      	cmp	r3, r4
 8108654:	d90b      	bls.n	810866e <_free_r+0x4e>
 8108656:	6821      	ldr	r1, [r4, #0]
 8108658:	1862      	adds	r2, r4, r1
 810865a:	4293      	cmp	r3, r2
 810865c:	bf04      	itt	eq
 810865e:	681a      	ldreq	r2, [r3, #0]
 8108660:	685b      	ldreq	r3, [r3, #4]
 8108662:	6063      	str	r3, [r4, #4]
 8108664:	bf04      	itt	eq
 8108666:	1852      	addeq	r2, r2, r1
 8108668:	6022      	streq	r2, [r4, #0]
 810866a:	602c      	str	r4, [r5, #0]
 810866c:	e7ec      	b.n	8108648 <_free_r+0x28>
 810866e:	461a      	mov	r2, r3
 8108670:	685b      	ldr	r3, [r3, #4]
 8108672:	b10b      	cbz	r3, 8108678 <_free_r+0x58>
 8108674:	42a3      	cmp	r3, r4
 8108676:	d9fa      	bls.n	810866e <_free_r+0x4e>
 8108678:	6811      	ldr	r1, [r2, #0]
 810867a:	1855      	adds	r5, r2, r1
 810867c:	42a5      	cmp	r5, r4
 810867e:	d10b      	bne.n	8108698 <_free_r+0x78>
 8108680:	6824      	ldr	r4, [r4, #0]
 8108682:	4421      	add	r1, r4
 8108684:	1854      	adds	r4, r2, r1
 8108686:	42a3      	cmp	r3, r4
 8108688:	6011      	str	r1, [r2, #0]
 810868a:	d1dd      	bne.n	8108648 <_free_r+0x28>
 810868c:	681c      	ldr	r4, [r3, #0]
 810868e:	685b      	ldr	r3, [r3, #4]
 8108690:	6053      	str	r3, [r2, #4]
 8108692:	4421      	add	r1, r4
 8108694:	6011      	str	r1, [r2, #0]
 8108696:	e7d7      	b.n	8108648 <_free_r+0x28>
 8108698:	d902      	bls.n	81086a0 <_free_r+0x80>
 810869a:	230c      	movs	r3, #12
 810869c:	6003      	str	r3, [r0, #0]
 810869e:	e7d3      	b.n	8108648 <_free_r+0x28>
 81086a0:	6825      	ldr	r5, [r4, #0]
 81086a2:	1961      	adds	r1, r4, r5
 81086a4:	428b      	cmp	r3, r1
 81086a6:	bf04      	itt	eq
 81086a8:	6819      	ldreq	r1, [r3, #0]
 81086aa:	685b      	ldreq	r3, [r3, #4]
 81086ac:	6063      	str	r3, [r4, #4]
 81086ae:	bf04      	itt	eq
 81086b0:	1949      	addeq	r1, r1, r5
 81086b2:	6021      	streq	r1, [r4, #0]
 81086b4:	6054      	str	r4, [r2, #4]
 81086b6:	e7c7      	b.n	8108648 <_free_r+0x28>
 81086b8:	b003      	add	sp, #12
 81086ba:	bd30      	pop	{r4, r5, pc}
 81086bc:	1000036c 	.word	0x1000036c

081086c0 <_malloc_r>:
 81086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81086c2:	1ccd      	adds	r5, r1, #3
 81086c4:	f025 0503 	bic.w	r5, r5, #3
 81086c8:	3508      	adds	r5, #8
 81086ca:	2d0c      	cmp	r5, #12
 81086cc:	bf38      	it	cc
 81086ce:	250c      	movcc	r5, #12
 81086d0:	2d00      	cmp	r5, #0
 81086d2:	4606      	mov	r6, r0
 81086d4:	db01      	blt.n	81086da <_malloc_r+0x1a>
 81086d6:	42a9      	cmp	r1, r5
 81086d8:	d903      	bls.n	81086e2 <_malloc_r+0x22>
 81086da:	230c      	movs	r3, #12
 81086dc:	6033      	str	r3, [r6, #0]
 81086de:	2000      	movs	r0, #0
 81086e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81086e2:	f003 fc27 	bl	810bf34 <__malloc_lock>
 81086e6:	4921      	ldr	r1, [pc, #132]	; (810876c <_malloc_r+0xac>)
 81086e8:	680a      	ldr	r2, [r1, #0]
 81086ea:	4614      	mov	r4, r2
 81086ec:	b99c      	cbnz	r4, 8108716 <_malloc_r+0x56>
 81086ee:	4f20      	ldr	r7, [pc, #128]	; (8108770 <_malloc_r+0xb0>)
 81086f0:	683b      	ldr	r3, [r7, #0]
 81086f2:	b923      	cbnz	r3, 81086fe <_malloc_r+0x3e>
 81086f4:	4621      	mov	r1, r4
 81086f6:	4630      	mov	r0, r6
 81086f8:	f001 f810 	bl	810971c <_sbrk_r>
 81086fc:	6038      	str	r0, [r7, #0]
 81086fe:	4629      	mov	r1, r5
 8108700:	4630      	mov	r0, r6
 8108702:	f001 f80b 	bl	810971c <_sbrk_r>
 8108706:	1c43      	adds	r3, r0, #1
 8108708:	d123      	bne.n	8108752 <_malloc_r+0x92>
 810870a:	230c      	movs	r3, #12
 810870c:	6033      	str	r3, [r6, #0]
 810870e:	4630      	mov	r0, r6
 8108710:	f003 fc16 	bl	810bf40 <__malloc_unlock>
 8108714:	e7e3      	b.n	81086de <_malloc_r+0x1e>
 8108716:	6823      	ldr	r3, [r4, #0]
 8108718:	1b5b      	subs	r3, r3, r5
 810871a:	d417      	bmi.n	810874c <_malloc_r+0x8c>
 810871c:	2b0b      	cmp	r3, #11
 810871e:	d903      	bls.n	8108728 <_malloc_r+0x68>
 8108720:	6023      	str	r3, [r4, #0]
 8108722:	441c      	add	r4, r3
 8108724:	6025      	str	r5, [r4, #0]
 8108726:	e004      	b.n	8108732 <_malloc_r+0x72>
 8108728:	6863      	ldr	r3, [r4, #4]
 810872a:	42a2      	cmp	r2, r4
 810872c:	bf0c      	ite	eq
 810872e:	600b      	streq	r3, [r1, #0]
 8108730:	6053      	strne	r3, [r2, #4]
 8108732:	4630      	mov	r0, r6
 8108734:	f003 fc04 	bl	810bf40 <__malloc_unlock>
 8108738:	f104 000b 	add.w	r0, r4, #11
 810873c:	1d23      	adds	r3, r4, #4
 810873e:	f020 0007 	bic.w	r0, r0, #7
 8108742:	1ac2      	subs	r2, r0, r3
 8108744:	d0cc      	beq.n	81086e0 <_malloc_r+0x20>
 8108746:	1a1b      	subs	r3, r3, r0
 8108748:	50a3      	str	r3, [r4, r2]
 810874a:	e7c9      	b.n	81086e0 <_malloc_r+0x20>
 810874c:	4622      	mov	r2, r4
 810874e:	6864      	ldr	r4, [r4, #4]
 8108750:	e7cc      	b.n	81086ec <_malloc_r+0x2c>
 8108752:	1cc4      	adds	r4, r0, #3
 8108754:	f024 0403 	bic.w	r4, r4, #3
 8108758:	42a0      	cmp	r0, r4
 810875a:	d0e3      	beq.n	8108724 <_malloc_r+0x64>
 810875c:	1a21      	subs	r1, r4, r0
 810875e:	4630      	mov	r0, r6
 8108760:	f000 ffdc 	bl	810971c <_sbrk_r>
 8108764:	3001      	adds	r0, #1
 8108766:	d1dd      	bne.n	8108724 <_malloc_r+0x64>
 8108768:	e7cf      	b.n	810870a <_malloc_r+0x4a>
 810876a:	bf00      	nop
 810876c:	1000036c 	.word	0x1000036c
 8108770:	10000370 	.word	0x10000370

08108774 <__sfputc_r>:
 8108774:	6893      	ldr	r3, [r2, #8]
 8108776:	3b01      	subs	r3, #1
 8108778:	2b00      	cmp	r3, #0
 810877a:	b410      	push	{r4}
 810877c:	6093      	str	r3, [r2, #8]
 810877e:	da08      	bge.n	8108792 <__sfputc_r+0x1e>
 8108780:	6994      	ldr	r4, [r2, #24]
 8108782:	42a3      	cmp	r3, r4
 8108784:	db01      	blt.n	810878a <__sfputc_r+0x16>
 8108786:	290a      	cmp	r1, #10
 8108788:	d103      	bne.n	8108792 <__sfputc_r+0x1e>
 810878a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810878e:	f001 bed5 	b.w	810a53c <__swbuf_r>
 8108792:	6813      	ldr	r3, [r2, #0]
 8108794:	1c58      	adds	r0, r3, #1
 8108796:	6010      	str	r0, [r2, #0]
 8108798:	7019      	strb	r1, [r3, #0]
 810879a:	4608      	mov	r0, r1
 810879c:	f85d 4b04 	ldr.w	r4, [sp], #4
 81087a0:	4770      	bx	lr

081087a2 <__sfputs_r>:
 81087a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81087a4:	4606      	mov	r6, r0
 81087a6:	460f      	mov	r7, r1
 81087a8:	4614      	mov	r4, r2
 81087aa:	18d5      	adds	r5, r2, r3
 81087ac:	42ac      	cmp	r4, r5
 81087ae:	d101      	bne.n	81087b4 <__sfputs_r+0x12>
 81087b0:	2000      	movs	r0, #0
 81087b2:	e007      	b.n	81087c4 <__sfputs_r+0x22>
 81087b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81087b8:	463a      	mov	r2, r7
 81087ba:	4630      	mov	r0, r6
 81087bc:	f7ff ffda 	bl	8108774 <__sfputc_r>
 81087c0:	1c43      	adds	r3, r0, #1
 81087c2:	d1f3      	bne.n	81087ac <__sfputs_r+0xa>
 81087c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081087c8 <_vfiprintf_r>:
 81087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81087cc:	460d      	mov	r5, r1
 81087ce:	b09d      	sub	sp, #116	; 0x74
 81087d0:	4614      	mov	r4, r2
 81087d2:	4698      	mov	r8, r3
 81087d4:	4606      	mov	r6, r0
 81087d6:	b118      	cbz	r0, 81087e0 <_vfiprintf_r+0x18>
 81087d8:	6983      	ldr	r3, [r0, #24]
 81087da:	b90b      	cbnz	r3, 81087e0 <_vfiprintf_r+0x18>
 81087dc:	f002 ff06 	bl	810b5ec <__sinit>
 81087e0:	4b89      	ldr	r3, [pc, #548]	; (8108a08 <_vfiprintf_r+0x240>)
 81087e2:	429d      	cmp	r5, r3
 81087e4:	d11b      	bne.n	810881e <_vfiprintf_r+0x56>
 81087e6:	6875      	ldr	r5, [r6, #4]
 81087e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81087ea:	07d9      	lsls	r1, r3, #31
 81087ec:	d405      	bmi.n	81087fa <_vfiprintf_r+0x32>
 81087ee:	89ab      	ldrh	r3, [r5, #12]
 81087f0:	059a      	lsls	r2, r3, #22
 81087f2:	d402      	bmi.n	81087fa <_vfiprintf_r+0x32>
 81087f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81087f6:	f003 fb0a 	bl	810be0e <__retarget_lock_acquire_recursive>
 81087fa:	89ab      	ldrh	r3, [r5, #12]
 81087fc:	071b      	lsls	r3, r3, #28
 81087fe:	d501      	bpl.n	8108804 <_vfiprintf_r+0x3c>
 8108800:	692b      	ldr	r3, [r5, #16]
 8108802:	b9eb      	cbnz	r3, 8108840 <_vfiprintf_r+0x78>
 8108804:	4629      	mov	r1, r5
 8108806:	4630      	mov	r0, r6
 8108808:	f001 feea 	bl	810a5e0 <__swsetup_r>
 810880c:	b1c0      	cbz	r0, 8108840 <_vfiprintf_r+0x78>
 810880e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8108810:	07dc      	lsls	r4, r3, #31
 8108812:	d50e      	bpl.n	8108832 <_vfiprintf_r+0x6a>
 8108814:	f04f 30ff 	mov.w	r0, #4294967295
 8108818:	b01d      	add	sp, #116	; 0x74
 810881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810881e:	4b7b      	ldr	r3, [pc, #492]	; (8108a0c <_vfiprintf_r+0x244>)
 8108820:	429d      	cmp	r5, r3
 8108822:	d101      	bne.n	8108828 <_vfiprintf_r+0x60>
 8108824:	68b5      	ldr	r5, [r6, #8]
 8108826:	e7df      	b.n	81087e8 <_vfiprintf_r+0x20>
 8108828:	4b79      	ldr	r3, [pc, #484]	; (8108a10 <_vfiprintf_r+0x248>)
 810882a:	429d      	cmp	r5, r3
 810882c:	bf08      	it	eq
 810882e:	68f5      	ldreq	r5, [r6, #12]
 8108830:	e7da      	b.n	81087e8 <_vfiprintf_r+0x20>
 8108832:	89ab      	ldrh	r3, [r5, #12]
 8108834:	0598      	lsls	r0, r3, #22
 8108836:	d4ed      	bmi.n	8108814 <_vfiprintf_r+0x4c>
 8108838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810883a:	f003 fae9 	bl	810be10 <__retarget_lock_release_recursive>
 810883e:	e7e9      	b.n	8108814 <_vfiprintf_r+0x4c>
 8108840:	2300      	movs	r3, #0
 8108842:	9309      	str	r3, [sp, #36]	; 0x24
 8108844:	2320      	movs	r3, #32
 8108846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810884a:	f8cd 800c 	str.w	r8, [sp, #12]
 810884e:	2330      	movs	r3, #48	; 0x30
 8108850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8108a14 <_vfiprintf_r+0x24c>
 8108854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8108858:	f04f 0901 	mov.w	r9, #1
 810885c:	4623      	mov	r3, r4
 810885e:	469a      	mov	sl, r3
 8108860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108864:	b10a      	cbz	r2, 810886a <_vfiprintf_r+0xa2>
 8108866:	2a25      	cmp	r2, #37	; 0x25
 8108868:	d1f9      	bne.n	810885e <_vfiprintf_r+0x96>
 810886a:	ebba 0b04 	subs.w	fp, sl, r4
 810886e:	d00b      	beq.n	8108888 <_vfiprintf_r+0xc0>
 8108870:	465b      	mov	r3, fp
 8108872:	4622      	mov	r2, r4
 8108874:	4629      	mov	r1, r5
 8108876:	4630      	mov	r0, r6
 8108878:	f7ff ff93 	bl	81087a2 <__sfputs_r>
 810887c:	3001      	adds	r0, #1
 810887e:	f000 80aa 	beq.w	81089d6 <_vfiprintf_r+0x20e>
 8108882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108884:	445a      	add	r2, fp
 8108886:	9209      	str	r2, [sp, #36]	; 0x24
 8108888:	f89a 3000 	ldrb.w	r3, [sl]
 810888c:	2b00      	cmp	r3, #0
 810888e:	f000 80a2 	beq.w	81089d6 <_vfiprintf_r+0x20e>
 8108892:	2300      	movs	r3, #0
 8108894:	f04f 32ff 	mov.w	r2, #4294967295
 8108898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810889c:	f10a 0a01 	add.w	sl, sl, #1
 81088a0:	9304      	str	r3, [sp, #16]
 81088a2:	9307      	str	r3, [sp, #28]
 81088a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81088a8:	931a      	str	r3, [sp, #104]	; 0x68
 81088aa:	4654      	mov	r4, sl
 81088ac:	2205      	movs	r2, #5
 81088ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 81088b2:	4858      	ldr	r0, [pc, #352]	; (8108a14 <_vfiprintf_r+0x24c>)
 81088b4:	f7f7 fd2c 	bl	8100310 <memchr>
 81088b8:	9a04      	ldr	r2, [sp, #16]
 81088ba:	b9d8      	cbnz	r0, 81088f4 <_vfiprintf_r+0x12c>
 81088bc:	06d1      	lsls	r1, r2, #27
 81088be:	bf44      	itt	mi
 81088c0:	2320      	movmi	r3, #32
 81088c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81088c6:	0713      	lsls	r3, r2, #28
 81088c8:	bf44      	itt	mi
 81088ca:	232b      	movmi	r3, #43	; 0x2b
 81088cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81088d0:	f89a 3000 	ldrb.w	r3, [sl]
 81088d4:	2b2a      	cmp	r3, #42	; 0x2a
 81088d6:	d015      	beq.n	8108904 <_vfiprintf_r+0x13c>
 81088d8:	9a07      	ldr	r2, [sp, #28]
 81088da:	4654      	mov	r4, sl
 81088dc:	2000      	movs	r0, #0
 81088de:	f04f 0c0a 	mov.w	ip, #10
 81088e2:	4621      	mov	r1, r4
 81088e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81088e8:	3b30      	subs	r3, #48	; 0x30
 81088ea:	2b09      	cmp	r3, #9
 81088ec:	d94e      	bls.n	810898c <_vfiprintf_r+0x1c4>
 81088ee:	b1b0      	cbz	r0, 810891e <_vfiprintf_r+0x156>
 81088f0:	9207      	str	r2, [sp, #28]
 81088f2:	e014      	b.n	810891e <_vfiprintf_r+0x156>
 81088f4:	eba0 0308 	sub.w	r3, r0, r8
 81088f8:	fa09 f303 	lsl.w	r3, r9, r3
 81088fc:	4313      	orrs	r3, r2
 81088fe:	9304      	str	r3, [sp, #16]
 8108900:	46a2      	mov	sl, r4
 8108902:	e7d2      	b.n	81088aa <_vfiprintf_r+0xe2>
 8108904:	9b03      	ldr	r3, [sp, #12]
 8108906:	1d19      	adds	r1, r3, #4
 8108908:	681b      	ldr	r3, [r3, #0]
 810890a:	9103      	str	r1, [sp, #12]
 810890c:	2b00      	cmp	r3, #0
 810890e:	bfbb      	ittet	lt
 8108910:	425b      	neglt	r3, r3
 8108912:	f042 0202 	orrlt.w	r2, r2, #2
 8108916:	9307      	strge	r3, [sp, #28]
 8108918:	9307      	strlt	r3, [sp, #28]
 810891a:	bfb8      	it	lt
 810891c:	9204      	strlt	r2, [sp, #16]
 810891e:	7823      	ldrb	r3, [r4, #0]
 8108920:	2b2e      	cmp	r3, #46	; 0x2e
 8108922:	d10c      	bne.n	810893e <_vfiprintf_r+0x176>
 8108924:	7863      	ldrb	r3, [r4, #1]
 8108926:	2b2a      	cmp	r3, #42	; 0x2a
 8108928:	d135      	bne.n	8108996 <_vfiprintf_r+0x1ce>
 810892a:	9b03      	ldr	r3, [sp, #12]
 810892c:	1d1a      	adds	r2, r3, #4
 810892e:	681b      	ldr	r3, [r3, #0]
 8108930:	9203      	str	r2, [sp, #12]
 8108932:	2b00      	cmp	r3, #0
 8108934:	bfb8      	it	lt
 8108936:	f04f 33ff 	movlt.w	r3, #4294967295
 810893a:	3402      	adds	r4, #2
 810893c:	9305      	str	r3, [sp, #20]
 810893e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8108a24 <_vfiprintf_r+0x25c>
 8108942:	7821      	ldrb	r1, [r4, #0]
 8108944:	2203      	movs	r2, #3
 8108946:	4650      	mov	r0, sl
 8108948:	f7f7 fce2 	bl	8100310 <memchr>
 810894c:	b140      	cbz	r0, 8108960 <_vfiprintf_r+0x198>
 810894e:	2340      	movs	r3, #64	; 0x40
 8108950:	eba0 000a 	sub.w	r0, r0, sl
 8108954:	fa03 f000 	lsl.w	r0, r3, r0
 8108958:	9b04      	ldr	r3, [sp, #16]
 810895a:	4303      	orrs	r3, r0
 810895c:	3401      	adds	r4, #1
 810895e:	9304      	str	r3, [sp, #16]
 8108960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108964:	482c      	ldr	r0, [pc, #176]	; (8108a18 <_vfiprintf_r+0x250>)
 8108966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810896a:	2206      	movs	r2, #6
 810896c:	f7f7 fcd0 	bl	8100310 <memchr>
 8108970:	2800      	cmp	r0, #0
 8108972:	d03f      	beq.n	81089f4 <_vfiprintf_r+0x22c>
 8108974:	4b29      	ldr	r3, [pc, #164]	; (8108a1c <_vfiprintf_r+0x254>)
 8108976:	bb1b      	cbnz	r3, 81089c0 <_vfiprintf_r+0x1f8>
 8108978:	9b03      	ldr	r3, [sp, #12]
 810897a:	3307      	adds	r3, #7
 810897c:	f023 0307 	bic.w	r3, r3, #7
 8108980:	3308      	adds	r3, #8
 8108982:	9303      	str	r3, [sp, #12]
 8108984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108986:	443b      	add	r3, r7
 8108988:	9309      	str	r3, [sp, #36]	; 0x24
 810898a:	e767      	b.n	810885c <_vfiprintf_r+0x94>
 810898c:	fb0c 3202 	mla	r2, ip, r2, r3
 8108990:	460c      	mov	r4, r1
 8108992:	2001      	movs	r0, #1
 8108994:	e7a5      	b.n	81088e2 <_vfiprintf_r+0x11a>
 8108996:	2300      	movs	r3, #0
 8108998:	3401      	adds	r4, #1
 810899a:	9305      	str	r3, [sp, #20]
 810899c:	4619      	mov	r1, r3
 810899e:	f04f 0c0a 	mov.w	ip, #10
 81089a2:	4620      	mov	r0, r4
 81089a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81089a8:	3a30      	subs	r2, #48	; 0x30
 81089aa:	2a09      	cmp	r2, #9
 81089ac:	d903      	bls.n	81089b6 <_vfiprintf_r+0x1ee>
 81089ae:	2b00      	cmp	r3, #0
 81089b0:	d0c5      	beq.n	810893e <_vfiprintf_r+0x176>
 81089b2:	9105      	str	r1, [sp, #20]
 81089b4:	e7c3      	b.n	810893e <_vfiprintf_r+0x176>
 81089b6:	fb0c 2101 	mla	r1, ip, r1, r2
 81089ba:	4604      	mov	r4, r0
 81089bc:	2301      	movs	r3, #1
 81089be:	e7f0      	b.n	81089a2 <_vfiprintf_r+0x1da>
 81089c0:	ab03      	add	r3, sp, #12
 81089c2:	9300      	str	r3, [sp, #0]
 81089c4:	462a      	mov	r2, r5
 81089c6:	4b16      	ldr	r3, [pc, #88]	; (8108a20 <_vfiprintf_r+0x258>)
 81089c8:	a904      	add	r1, sp, #16
 81089ca:	4630      	mov	r0, r6
 81089cc:	f000 f8cc 	bl	8108b68 <_printf_float>
 81089d0:	4607      	mov	r7, r0
 81089d2:	1c78      	adds	r0, r7, #1
 81089d4:	d1d6      	bne.n	8108984 <_vfiprintf_r+0x1bc>
 81089d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81089d8:	07d9      	lsls	r1, r3, #31
 81089da:	d405      	bmi.n	81089e8 <_vfiprintf_r+0x220>
 81089dc:	89ab      	ldrh	r3, [r5, #12]
 81089de:	059a      	lsls	r2, r3, #22
 81089e0:	d402      	bmi.n	81089e8 <_vfiprintf_r+0x220>
 81089e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81089e4:	f003 fa14 	bl	810be10 <__retarget_lock_release_recursive>
 81089e8:	89ab      	ldrh	r3, [r5, #12]
 81089ea:	065b      	lsls	r3, r3, #25
 81089ec:	f53f af12 	bmi.w	8108814 <_vfiprintf_r+0x4c>
 81089f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 81089f2:	e711      	b.n	8108818 <_vfiprintf_r+0x50>
 81089f4:	ab03      	add	r3, sp, #12
 81089f6:	9300      	str	r3, [sp, #0]
 81089f8:	462a      	mov	r2, r5
 81089fa:	4b09      	ldr	r3, [pc, #36]	; (8108a20 <_vfiprintf_r+0x258>)
 81089fc:	a904      	add	r1, sp, #16
 81089fe:	4630      	mov	r0, r6
 8108a00:	f000 fb56 	bl	81090b0 <_printf_i>
 8108a04:	e7e4      	b.n	81089d0 <_vfiprintf_r+0x208>
 8108a06:	bf00      	nop
 8108a08:	0810de68 	.word	0x0810de68
 8108a0c:	0810de88 	.word	0x0810de88
 8108a10:	0810de48 	.word	0x0810de48
 8108a14:	0810dc10 	.word	0x0810dc10
 8108a18:	0810dc1a 	.word	0x0810dc1a
 8108a1c:	08108b69 	.word	0x08108b69
 8108a20:	081087a3 	.word	0x081087a3
 8108a24:	0810dc16 	.word	0x0810dc16

08108a28 <__cvt>:
 8108a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108a2c:	ec55 4b10 	vmov	r4, r5, d0
 8108a30:	2d00      	cmp	r5, #0
 8108a32:	460e      	mov	r6, r1
 8108a34:	4619      	mov	r1, r3
 8108a36:	462b      	mov	r3, r5
 8108a38:	bfbb      	ittet	lt
 8108a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108a3e:	461d      	movlt	r5, r3
 8108a40:	2300      	movge	r3, #0
 8108a42:	232d      	movlt	r3, #45	; 0x2d
 8108a44:	700b      	strb	r3, [r1, #0]
 8108a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108a48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108a4c:	4691      	mov	r9, r2
 8108a4e:	f023 0820 	bic.w	r8, r3, #32
 8108a52:	bfbc      	itt	lt
 8108a54:	4622      	movlt	r2, r4
 8108a56:	4614      	movlt	r4, r2
 8108a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108a5c:	d005      	beq.n	8108a6a <__cvt+0x42>
 8108a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108a62:	d100      	bne.n	8108a66 <__cvt+0x3e>
 8108a64:	3601      	adds	r6, #1
 8108a66:	2102      	movs	r1, #2
 8108a68:	e000      	b.n	8108a6c <__cvt+0x44>
 8108a6a:	2103      	movs	r1, #3
 8108a6c:	ab03      	add	r3, sp, #12
 8108a6e:	9301      	str	r3, [sp, #4]
 8108a70:	ab02      	add	r3, sp, #8
 8108a72:	9300      	str	r3, [sp, #0]
 8108a74:	ec45 4b10 	vmov	d0, r4, r5
 8108a78:	4653      	mov	r3, sl
 8108a7a:	4632      	mov	r2, r6
 8108a7c:	f001 feb0 	bl	810a7e0 <_dtoa_r>
 8108a80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8108a84:	4607      	mov	r7, r0
 8108a86:	d102      	bne.n	8108a8e <__cvt+0x66>
 8108a88:	f019 0f01 	tst.w	r9, #1
 8108a8c:	d022      	beq.n	8108ad4 <__cvt+0xac>
 8108a8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108a92:	eb07 0906 	add.w	r9, r7, r6
 8108a96:	d110      	bne.n	8108aba <__cvt+0x92>
 8108a98:	783b      	ldrb	r3, [r7, #0]
 8108a9a:	2b30      	cmp	r3, #48	; 0x30
 8108a9c:	d10a      	bne.n	8108ab4 <__cvt+0x8c>
 8108a9e:	2200      	movs	r2, #0
 8108aa0:	2300      	movs	r3, #0
 8108aa2:	4620      	mov	r0, r4
 8108aa4:	4629      	mov	r1, r5
 8108aa6:	f7f8 f8a7 	bl	8100bf8 <__aeabi_dcmpeq>
 8108aaa:	b918      	cbnz	r0, 8108ab4 <__cvt+0x8c>
 8108aac:	f1c6 0601 	rsb	r6, r6, #1
 8108ab0:	f8ca 6000 	str.w	r6, [sl]
 8108ab4:	f8da 3000 	ldr.w	r3, [sl]
 8108ab8:	4499      	add	r9, r3
 8108aba:	2200      	movs	r2, #0
 8108abc:	2300      	movs	r3, #0
 8108abe:	4620      	mov	r0, r4
 8108ac0:	4629      	mov	r1, r5
 8108ac2:	f7f8 f899 	bl	8100bf8 <__aeabi_dcmpeq>
 8108ac6:	b108      	cbz	r0, 8108acc <__cvt+0xa4>
 8108ac8:	f8cd 900c 	str.w	r9, [sp, #12]
 8108acc:	2230      	movs	r2, #48	; 0x30
 8108ace:	9b03      	ldr	r3, [sp, #12]
 8108ad0:	454b      	cmp	r3, r9
 8108ad2:	d307      	bcc.n	8108ae4 <__cvt+0xbc>
 8108ad4:	9b03      	ldr	r3, [sp, #12]
 8108ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8108ad8:	1bdb      	subs	r3, r3, r7
 8108ada:	4638      	mov	r0, r7
 8108adc:	6013      	str	r3, [r2, #0]
 8108ade:	b004      	add	sp, #16
 8108ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108ae4:	1c59      	adds	r1, r3, #1
 8108ae6:	9103      	str	r1, [sp, #12]
 8108ae8:	701a      	strb	r2, [r3, #0]
 8108aea:	e7f0      	b.n	8108ace <__cvt+0xa6>

08108aec <__exponent>:
 8108aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108aee:	4603      	mov	r3, r0
 8108af0:	2900      	cmp	r1, #0
 8108af2:	bfb8      	it	lt
 8108af4:	4249      	neglt	r1, r1
 8108af6:	f803 2b02 	strb.w	r2, [r3], #2
 8108afa:	bfb4      	ite	lt
 8108afc:	222d      	movlt	r2, #45	; 0x2d
 8108afe:	222b      	movge	r2, #43	; 0x2b
 8108b00:	2909      	cmp	r1, #9
 8108b02:	7042      	strb	r2, [r0, #1]
 8108b04:	dd2a      	ble.n	8108b5c <__exponent+0x70>
 8108b06:	f10d 0407 	add.w	r4, sp, #7
 8108b0a:	46a4      	mov	ip, r4
 8108b0c:	270a      	movs	r7, #10
 8108b0e:	46a6      	mov	lr, r4
 8108b10:	460a      	mov	r2, r1
 8108b12:	fb91 f6f7 	sdiv	r6, r1, r7
 8108b16:	fb07 1516 	mls	r5, r7, r6, r1
 8108b1a:	3530      	adds	r5, #48	; 0x30
 8108b1c:	2a63      	cmp	r2, #99	; 0x63
 8108b1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8108b22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8108b26:	4631      	mov	r1, r6
 8108b28:	dcf1      	bgt.n	8108b0e <__exponent+0x22>
 8108b2a:	3130      	adds	r1, #48	; 0x30
 8108b2c:	f1ae 0502 	sub.w	r5, lr, #2
 8108b30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8108b34:	1c44      	adds	r4, r0, #1
 8108b36:	4629      	mov	r1, r5
 8108b38:	4561      	cmp	r1, ip
 8108b3a:	d30a      	bcc.n	8108b52 <__exponent+0x66>
 8108b3c:	f10d 0209 	add.w	r2, sp, #9
 8108b40:	eba2 020e 	sub.w	r2, r2, lr
 8108b44:	4565      	cmp	r5, ip
 8108b46:	bf88      	it	hi
 8108b48:	2200      	movhi	r2, #0
 8108b4a:	4413      	add	r3, r2
 8108b4c:	1a18      	subs	r0, r3, r0
 8108b4e:	b003      	add	sp, #12
 8108b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8108b56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8108b5a:	e7ed      	b.n	8108b38 <__exponent+0x4c>
 8108b5c:	2330      	movs	r3, #48	; 0x30
 8108b5e:	3130      	adds	r1, #48	; 0x30
 8108b60:	7083      	strb	r3, [r0, #2]
 8108b62:	70c1      	strb	r1, [r0, #3]
 8108b64:	1d03      	adds	r3, r0, #4
 8108b66:	e7f1      	b.n	8108b4c <__exponent+0x60>

08108b68 <_printf_float>:
 8108b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108b6c:	ed2d 8b02 	vpush	{d8}
 8108b70:	b08d      	sub	sp, #52	; 0x34
 8108b72:	460c      	mov	r4, r1
 8108b74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8108b78:	4616      	mov	r6, r2
 8108b7a:	461f      	mov	r7, r3
 8108b7c:	4605      	mov	r5, r0
 8108b7e:	f003 f941 	bl	810be04 <_localeconv_r>
 8108b82:	f8d0 a000 	ldr.w	sl, [r0]
 8108b86:	4650      	mov	r0, sl
 8108b88:	f7f7 fbb4 	bl	81002f4 <strlen>
 8108b8c:	2300      	movs	r3, #0
 8108b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8108b90:	6823      	ldr	r3, [r4, #0]
 8108b92:	9305      	str	r3, [sp, #20]
 8108b94:	f8d8 3000 	ldr.w	r3, [r8]
 8108b98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8108b9c:	3307      	adds	r3, #7
 8108b9e:	f023 0307 	bic.w	r3, r3, #7
 8108ba2:	f103 0208 	add.w	r2, r3, #8
 8108ba6:	f8c8 2000 	str.w	r2, [r8]
 8108baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108bae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8108bb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8108bb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8108bba:	9307      	str	r3, [sp, #28]
 8108bbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8108bc0:	ee08 0a10 	vmov	s16, r0
 8108bc4:	4b9f      	ldr	r3, [pc, #636]	; (8108e44 <_printf_float+0x2dc>)
 8108bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8108bca:	f04f 32ff 	mov.w	r2, #4294967295
 8108bce:	f7f8 f845 	bl	8100c5c <__aeabi_dcmpun>
 8108bd2:	bb88      	cbnz	r0, 8108c38 <_printf_float+0xd0>
 8108bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8108bd8:	4b9a      	ldr	r3, [pc, #616]	; (8108e44 <_printf_float+0x2dc>)
 8108bda:	f04f 32ff 	mov.w	r2, #4294967295
 8108bde:	f7f8 f81f 	bl	8100c20 <__aeabi_dcmple>
 8108be2:	bb48      	cbnz	r0, 8108c38 <_printf_float+0xd0>
 8108be4:	2200      	movs	r2, #0
 8108be6:	2300      	movs	r3, #0
 8108be8:	4640      	mov	r0, r8
 8108bea:	4649      	mov	r1, r9
 8108bec:	f7f8 f80e 	bl	8100c0c <__aeabi_dcmplt>
 8108bf0:	b110      	cbz	r0, 8108bf8 <_printf_float+0x90>
 8108bf2:	232d      	movs	r3, #45	; 0x2d
 8108bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108bf8:	4b93      	ldr	r3, [pc, #588]	; (8108e48 <_printf_float+0x2e0>)
 8108bfa:	4894      	ldr	r0, [pc, #592]	; (8108e4c <_printf_float+0x2e4>)
 8108bfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8108c00:	bf94      	ite	ls
 8108c02:	4698      	movls	r8, r3
 8108c04:	4680      	movhi	r8, r0
 8108c06:	2303      	movs	r3, #3
 8108c08:	6123      	str	r3, [r4, #16]
 8108c0a:	9b05      	ldr	r3, [sp, #20]
 8108c0c:	f023 0204 	bic.w	r2, r3, #4
 8108c10:	6022      	str	r2, [r4, #0]
 8108c12:	f04f 0900 	mov.w	r9, #0
 8108c16:	9700      	str	r7, [sp, #0]
 8108c18:	4633      	mov	r3, r6
 8108c1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8108c1c:	4621      	mov	r1, r4
 8108c1e:	4628      	mov	r0, r5
 8108c20:	f000 f9d8 	bl	8108fd4 <_printf_common>
 8108c24:	3001      	adds	r0, #1
 8108c26:	f040 8090 	bne.w	8108d4a <_printf_float+0x1e2>
 8108c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8108c2e:	b00d      	add	sp, #52	; 0x34
 8108c30:	ecbd 8b02 	vpop	{d8}
 8108c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108c38:	4642      	mov	r2, r8
 8108c3a:	464b      	mov	r3, r9
 8108c3c:	4640      	mov	r0, r8
 8108c3e:	4649      	mov	r1, r9
 8108c40:	f7f8 f80c 	bl	8100c5c <__aeabi_dcmpun>
 8108c44:	b140      	cbz	r0, 8108c58 <_printf_float+0xf0>
 8108c46:	464b      	mov	r3, r9
 8108c48:	2b00      	cmp	r3, #0
 8108c4a:	bfbc      	itt	lt
 8108c4c:	232d      	movlt	r3, #45	; 0x2d
 8108c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8108c52:	487f      	ldr	r0, [pc, #508]	; (8108e50 <_printf_float+0x2e8>)
 8108c54:	4b7f      	ldr	r3, [pc, #508]	; (8108e54 <_printf_float+0x2ec>)
 8108c56:	e7d1      	b.n	8108bfc <_printf_float+0x94>
 8108c58:	6863      	ldr	r3, [r4, #4]
 8108c5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8108c5e:	9206      	str	r2, [sp, #24]
 8108c60:	1c5a      	adds	r2, r3, #1
 8108c62:	d13f      	bne.n	8108ce4 <_printf_float+0x17c>
 8108c64:	2306      	movs	r3, #6
 8108c66:	6063      	str	r3, [r4, #4]
 8108c68:	9b05      	ldr	r3, [sp, #20]
 8108c6a:	6861      	ldr	r1, [r4, #4]
 8108c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8108c70:	2300      	movs	r3, #0
 8108c72:	9303      	str	r3, [sp, #12]
 8108c74:	ab0a      	add	r3, sp, #40	; 0x28
 8108c76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8108c7a:	ab09      	add	r3, sp, #36	; 0x24
 8108c7c:	ec49 8b10 	vmov	d0, r8, r9
 8108c80:	9300      	str	r3, [sp, #0]
 8108c82:	6022      	str	r2, [r4, #0]
 8108c84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8108c88:	4628      	mov	r0, r5
 8108c8a:	f7ff fecd 	bl	8108a28 <__cvt>
 8108c8e:	9b06      	ldr	r3, [sp, #24]
 8108c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108c92:	2b47      	cmp	r3, #71	; 0x47
 8108c94:	4680      	mov	r8, r0
 8108c96:	d108      	bne.n	8108caa <_printf_float+0x142>
 8108c98:	1cc8      	adds	r0, r1, #3
 8108c9a:	db02      	blt.n	8108ca2 <_printf_float+0x13a>
 8108c9c:	6863      	ldr	r3, [r4, #4]
 8108c9e:	4299      	cmp	r1, r3
 8108ca0:	dd41      	ble.n	8108d26 <_printf_float+0x1be>
 8108ca2:	f1ab 0b02 	sub.w	fp, fp, #2
 8108ca6:	fa5f fb8b 	uxtb.w	fp, fp
 8108caa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8108cae:	d820      	bhi.n	8108cf2 <_printf_float+0x18a>
 8108cb0:	3901      	subs	r1, #1
 8108cb2:	465a      	mov	r2, fp
 8108cb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8108cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8108cba:	f7ff ff17 	bl	8108aec <__exponent>
 8108cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108cc0:	1813      	adds	r3, r2, r0
 8108cc2:	2a01      	cmp	r2, #1
 8108cc4:	4681      	mov	r9, r0
 8108cc6:	6123      	str	r3, [r4, #16]
 8108cc8:	dc02      	bgt.n	8108cd0 <_printf_float+0x168>
 8108cca:	6822      	ldr	r2, [r4, #0]
 8108ccc:	07d2      	lsls	r2, r2, #31
 8108cce:	d501      	bpl.n	8108cd4 <_printf_float+0x16c>
 8108cd0:	3301      	adds	r3, #1
 8108cd2:	6123      	str	r3, [r4, #16]
 8108cd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8108cd8:	2b00      	cmp	r3, #0
 8108cda:	d09c      	beq.n	8108c16 <_printf_float+0xae>
 8108cdc:	232d      	movs	r3, #45	; 0x2d
 8108cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108ce2:	e798      	b.n	8108c16 <_printf_float+0xae>
 8108ce4:	9a06      	ldr	r2, [sp, #24]
 8108ce6:	2a47      	cmp	r2, #71	; 0x47
 8108ce8:	d1be      	bne.n	8108c68 <_printf_float+0x100>
 8108cea:	2b00      	cmp	r3, #0
 8108cec:	d1bc      	bne.n	8108c68 <_printf_float+0x100>
 8108cee:	2301      	movs	r3, #1
 8108cf0:	e7b9      	b.n	8108c66 <_printf_float+0xfe>
 8108cf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8108cf6:	d118      	bne.n	8108d2a <_printf_float+0x1c2>
 8108cf8:	2900      	cmp	r1, #0
 8108cfa:	6863      	ldr	r3, [r4, #4]
 8108cfc:	dd0b      	ble.n	8108d16 <_printf_float+0x1ae>
 8108cfe:	6121      	str	r1, [r4, #16]
 8108d00:	b913      	cbnz	r3, 8108d08 <_printf_float+0x1a0>
 8108d02:	6822      	ldr	r2, [r4, #0]
 8108d04:	07d0      	lsls	r0, r2, #31
 8108d06:	d502      	bpl.n	8108d0e <_printf_float+0x1a6>
 8108d08:	3301      	adds	r3, #1
 8108d0a:	440b      	add	r3, r1
 8108d0c:	6123      	str	r3, [r4, #16]
 8108d0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8108d10:	f04f 0900 	mov.w	r9, #0
 8108d14:	e7de      	b.n	8108cd4 <_printf_float+0x16c>
 8108d16:	b913      	cbnz	r3, 8108d1e <_printf_float+0x1b6>
 8108d18:	6822      	ldr	r2, [r4, #0]
 8108d1a:	07d2      	lsls	r2, r2, #31
 8108d1c:	d501      	bpl.n	8108d22 <_printf_float+0x1ba>
 8108d1e:	3302      	adds	r3, #2
 8108d20:	e7f4      	b.n	8108d0c <_printf_float+0x1a4>
 8108d22:	2301      	movs	r3, #1
 8108d24:	e7f2      	b.n	8108d0c <_printf_float+0x1a4>
 8108d26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8108d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108d2c:	4299      	cmp	r1, r3
 8108d2e:	db05      	blt.n	8108d3c <_printf_float+0x1d4>
 8108d30:	6823      	ldr	r3, [r4, #0]
 8108d32:	6121      	str	r1, [r4, #16]
 8108d34:	07d8      	lsls	r0, r3, #31
 8108d36:	d5ea      	bpl.n	8108d0e <_printf_float+0x1a6>
 8108d38:	1c4b      	adds	r3, r1, #1
 8108d3a:	e7e7      	b.n	8108d0c <_printf_float+0x1a4>
 8108d3c:	2900      	cmp	r1, #0
 8108d3e:	bfd4      	ite	le
 8108d40:	f1c1 0202 	rsble	r2, r1, #2
 8108d44:	2201      	movgt	r2, #1
 8108d46:	4413      	add	r3, r2
 8108d48:	e7e0      	b.n	8108d0c <_printf_float+0x1a4>
 8108d4a:	6823      	ldr	r3, [r4, #0]
 8108d4c:	055a      	lsls	r2, r3, #21
 8108d4e:	d407      	bmi.n	8108d60 <_printf_float+0x1f8>
 8108d50:	6923      	ldr	r3, [r4, #16]
 8108d52:	4642      	mov	r2, r8
 8108d54:	4631      	mov	r1, r6
 8108d56:	4628      	mov	r0, r5
 8108d58:	47b8      	blx	r7
 8108d5a:	3001      	adds	r0, #1
 8108d5c:	d12c      	bne.n	8108db8 <_printf_float+0x250>
 8108d5e:	e764      	b.n	8108c2a <_printf_float+0xc2>
 8108d60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8108d64:	f240 80e0 	bls.w	8108f28 <_printf_float+0x3c0>
 8108d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108d6c:	2200      	movs	r2, #0
 8108d6e:	2300      	movs	r3, #0
 8108d70:	f7f7 ff42 	bl	8100bf8 <__aeabi_dcmpeq>
 8108d74:	2800      	cmp	r0, #0
 8108d76:	d034      	beq.n	8108de2 <_printf_float+0x27a>
 8108d78:	4a37      	ldr	r2, [pc, #220]	; (8108e58 <_printf_float+0x2f0>)
 8108d7a:	2301      	movs	r3, #1
 8108d7c:	4631      	mov	r1, r6
 8108d7e:	4628      	mov	r0, r5
 8108d80:	47b8      	blx	r7
 8108d82:	3001      	adds	r0, #1
 8108d84:	f43f af51 	beq.w	8108c2a <_printf_float+0xc2>
 8108d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108d8c:	429a      	cmp	r2, r3
 8108d8e:	db02      	blt.n	8108d96 <_printf_float+0x22e>
 8108d90:	6823      	ldr	r3, [r4, #0]
 8108d92:	07d8      	lsls	r0, r3, #31
 8108d94:	d510      	bpl.n	8108db8 <_printf_float+0x250>
 8108d96:	ee18 3a10 	vmov	r3, s16
 8108d9a:	4652      	mov	r2, sl
 8108d9c:	4631      	mov	r1, r6
 8108d9e:	4628      	mov	r0, r5
 8108da0:	47b8      	blx	r7
 8108da2:	3001      	adds	r0, #1
 8108da4:	f43f af41 	beq.w	8108c2a <_printf_float+0xc2>
 8108da8:	f04f 0800 	mov.w	r8, #0
 8108dac:	f104 091a 	add.w	r9, r4, #26
 8108db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108db2:	3b01      	subs	r3, #1
 8108db4:	4543      	cmp	r3, r8
 8108db6:	dc09      	bgt.n	8108dcc <_printf_float+0x264>
 8108db8:	6823      	ldr	r3, [r4, #0]
 8108dba:	079b      	lsls	r3, r3, #30
 8108dbc:	f100 8105 	bmi.w	8108fca <_printf_float+0x462>
 8108dc0:	68e0      	ldr	r0, [r4, #12]
 8108dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108dc4:	4298      	cmp	r0, r3
 8108dc6:	bfb8      	it	lt
 8108dc8:	4618      	movlt	r0, r3
 8108dca:	e730      	b.n	8108c2e <_printf_float+0xc6>
 8108dcc:	2301      	movs	r3, #1
 8108dce:	464a      	mov	r2, r9
 8108dd0:	4631      	mov	r1, r6
 8108dd2:	4628      	mov	r0, r5
 8108dd4:	47b8      	blx	r7
 8108dd6:	3001      	adds	r0, #1
 8108dd8:	f43f af27 	beq.w	8108c2a <_printf_float+0xc2>
 8108ddc:	f108 0801 	add.w	r8, r8, #1
 8108de0:	e7e6      	b.n	8108db0 <_printf_float+0x248>
 8108de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108de4:	2b00      	cmp	r3, #0
 8108de6:	dc39      	bgt.n	8108e5c <_printf_float+0x2f4>
 8108de8:	4a1b      	ldr	r2, [pc, #108]	; (8108e58 <_printf_float+0x2f0>)
 8108dea:	2301      	movs	r3, #1
 8108dec:	4631      	mov	r1, r6
 8108dee:	4628      	mov	r0, r5
 8108df0:	47b8      	blx	r7
 8108df2:	3001      	adds	r0, #1
 8108df4:	f43f af19 	beq.w	8108c2a <_printf_float+0xc2>
 8108df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108dfc:	4313      	orrs	r3, r2
 8108dfe:	d102      	bne.n	8108e06 <_printf_float+0x29e>
 8108e00:	6823      	ldr	r3, [r4, #0]
 8108e02:	07d9      	lsls	r1, r3, #31
 8108e04:	d5d8      	bpl.n	8108db8 <_printf_float+0x250>
 8108e06:	ee18 3a10 	vmov	r3, s16
 8108e0a:	4652      	mov	r2, sl
 8108e0c:	4631      	mov	r1, r6
 8108e0e:	4628      	mov	r0, r5
 8108e10:	47b8      	blx	r7
 8108e12:	3001      	adds	r0, #1
 8108e14:	f43f af09 	beq.w	8108c2a <_printf_float+0xc2>
 8108e18:	f04f 0900 	mov.w	r9, #0
 8108e1c:	f104 0a1a 	add.w	sl, r4, #26
 8108e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108e22:	425b      	negs	r3, r3
 8108e24:	454b      	cmp	r3, r9
 8108e26:	dc01      	bgt.n	8108e2c <_printf_float+0x2c4>
 8108e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108e2a:	e792      	b.n	8108d52 <_printf_float+0x1ea>
 8108e2c:	2301      	movs	r3, #1
 8108e2e:	4652      	mov	r2, sl
 8108e30:	4631      	mov	r1, r6
 8108e32:	4628      	mov	r0, r5
 8108e34:	47b8      	blx	r7
 8108e36:	3001      	adds	r0, #1
 8108e38:	f43f aef7 	beq.w	8108c2a <_printf_float+0xc2>
 8108e3c:	f109 0901 	add.w	r9, r9, #1
 8108e40:	e7ee      	b.n	8108e20 <_printf_float+0x2b8>
 8108e42:	bf00      	nop
 8108e44:	7fefffff 	.word	0x7fefffff
 8108e48:	0810dc21 	.word	0x0810dc21
 8108e4c:	0810dc25 	.word	0x0810dc25
 8108e50:	0810dc2d 	.word	0x0810dc2d
 8108e54:	0810dc29 	.word	0x0810dc29
 8108e58:	0810dc31 	.word	0x0810dc31
 8108e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108e60:	429a      	cmp	r2, r3
 8108e62:	bfa8      	it	ge
 8108e64:	461a      	movge	r2, r3
 8108e66:	2a00      	cmp	r2, #0
 8108e68:	4691      	mov	r9, r2
 8108e6a:	dc37      	bgt.n	8108edc <_printf_float+0x374>
 8108e6c:	f04f 0b00 	mov.w	fp, #0
 8108e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108e74:	f104 021a 	add.w	r2, r4, #26
 8108e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108e7a:	9305      	str	r3, [sp, #20]
 8108e7c:	eba3 0309 	sub.w	r3, r3, r9
 8108e80:	455b      	cmp	r3, fp
 8108e82:	dc33      	bgt.n	8108eec <_printf_float+0x384>
 8108e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108e88:	429a      	cmp	r2, r3
 8108e8a:	db3b      	blt.n	8108f04 <_printf_float+0x39c>
 8108e8c:	6823      	ldr	r3, [r4, #0]
 8108e8e:	07da      	lsls	r2, r3, #31
 8108e90:	d438      	bmi.n	8108f04 <_printf_float+0x39c>
 8108e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108e94:	9b05      	ldr	r3, [sp, #20]
 8108e96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108e98:	1ad3      	subs	r3, r2, r3
 8108e9a:	eba2 0901 	sub.w	r9, r2, r1
 8108e9e:	4599      	cmp	r9, r3
 8108ea0:	bfa8      	it	ge
 8108ea2:	4699      	movge	r9, r3
 8108ea4:	f1b9 0f00 	cmp.w	r9, #0
 8108ea8:	dc35      	bgt.n	8108f16 <_printf_float+0x3ae>
 8108eaa:	f04f 0800 	mov.w	r8, #0
 8108eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108eb2:	f104 0a1a 	add.w	sl, r4, #26
 8108eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108eba:	1a9b      	subs	r3, r3, r2
 8108ebc:	eba3 0309 	sub.w	r3, r3, r9
 8108ec0:	4543      	cmp	r3, r8
 8108ec2:	f77f af79 	ble.w	8108db8 <_printf_float+0x250>
 8108ec6:	2301      	movs	r3, #1
 8108ec8:	4652      	mov	r2, sl
 8108eca:	4631      	mov	r1, r6
 8108ecc:	4628      	mov	r0, r5
 8108ece:	47b8      	blx	r7
 8108ed0:	3001      	adds	r0, #1
 8108ed2:	f43f aeaa 	beq.w	8108c2a <_printf_float+0xc2>
 8108ed6:	f108 0801 	add.w	r8, r8, #1
 8108eda:	e7ec      	b.n	8108eb6 <_printf_float+0x34e>
 8108edc:	4613      	mov	r3, r2
 8108ede:	4631      	mov	r1, r6
 8108ee0:	4642      	mov	r2, r8
 8108ee2:	4628      	mov	r0, r5
 8108ee4:	47b8      	blx	r7
 8108ee6:	3001      	adds	r0, #1
 8108ee8:	d1c0      	bne.n	8108e6c <_printf_float+0x304>
 8108eea:	e69e      	b.n	8108c2a <_printf_float+0xc2>
 8108eec:	2301      	movs	r3, #1
 8108eee:	4631      	mov	r1, r6
 8108ef0:	4628      	mov	r0, r5
 8108ef2:	9205      	str	r2, [sp, #20]
 8108ef4:	47b8      	blx	r7
 8108ef6:	3001      	adds	r0, #1
 8108ef8:	f43f ae97 	beq.w	8108c2a <_printf_float+0xc2>
 8108efc:	9a05      	ldr	r2, [sp, #20]
 8108efe:	f10b 0b01 	add.w	fp, fp, #1
 8108f02:	e7b9      	b.n	8108e78 <_printf_float+0x310>
 8108f04:	ee18 3a10 	vmov	r3, s16
 8108f08:	4652      	mov	r2, sl
 8108f0a:	4631      	mov	r1, r6
 8108f0c:	4628      	mov	r0, r5
 8108f0e:	47b8      	blx	r7
 8108f10:	3001      	adds	r0, #1
 8108f12:	d1be      	bne.n	8108e92 <_printf_float+0x32a>
 8108f14:	e689      	b.n	8108c2a <_printf_float+0xc2>
 8108f16:	9a05      	ldr	r2, [sp, #20]
 8108f18:	464b      	mov	r3, r9
 8108f1a:	4442      	add	r2, r8
 8108f1c:	4631      	mov	r1, r6
 8108f1e:	4628      	mov	r0, r5
 8108f20:	47b8      	blx	r7
 8108f22:	3001      	adds	r0, #1
 8108f24:	d1c1      	bne.n	8108eaa <_printf_float+0x342>
 8108f26:	e680      	b.n	8108c2a <_printf_float+0xc2>
 8108f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108f2a:	2a01      	cmp	r2, #1
 8108f2c:	dc01      	bgt.n	8108f32 <_printf_float+0x3ca>
 8108f2e:	07db      	lsls	r3, r3, #31
 8108f30:	d538      	bpl.n	8108fa4 <_printf_float+0x43c>
 8108f32:	2301      	movs	r3, #1
 8108f34:	4642      	mov	r2, r8
 8108f36:	4631      	mov	r1, r6
 8108f38:	4628      	mov	r0, r5
 8108f3a:	47b8      	blx	r7
 8108f3c:	3001      	adds	r0, #1
 8108f3e:	f43f ae74 	beq.w	8108c2a <_printf_float+0xc2>
 8108f42:	ee18 3a10 	vmov	r3, s16
 8108f46:	4652      	mov	r2, sl
 8108f48:	4631      	mov	r1, r6
 8108f4a:	4628      	mov	r0, r5
 8108f4c:	47b8      	blx	r7
 8108f4e:	3001      	adds	r0, #1
 8108f50:	f43f ae6b 	beq.w	8108c2a <_printf_float+0xc2>
 8108f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108f58:	2200      	movs	r2, #0
 8108f5a:	2300      	movs	r3, #0
 8108f5c:	f7f7 fe4c 	bl	8100bf8 <__aeabi_dcmpeq>
 8108f60:	b9d8      	cbnz	r0, 8108f9a <_printf_float+0x432>
 8108f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f64:	f108 0201 	add.w	r2, r8, #1
 8108f68:	3b01      	subs	r3, #1
 8108f6a:	4631      	mov	r1, r6
 8108f6c:	4628      	mov	r0, r5
 8108f6e:	47b8      	blx	r7
 8108f70:	3001      	adds	r0, #1
 8108f72:	d10e      	bne.n	8108f92 <_printf_float+0x42a>
 8108f74:	e659      	b.n	8108c2a <_printf_float+0xc2>
 8108f76:	2301      	movs	r3, #1
 8108f78:	4652      	mov	r2, sl
 8108f7a:	4631      	mov	r1, r6
 8108f7c:	4628      	mov	r0, r5
 8108f7e:	47b8      	blx	r7
 8108f80:	3001      	adds	r0, #1
 8108f82:	f43f ae52 	beq.w	8108c2a <_printf_float+0xc2>
 8108f86:	f108 0801 	add.w	r8, r8, #1
 8108f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f8c:	3b01      	subs	r3, #1
 8108f8e:	4543      	cmp	r3, r8
 8108f90:	dcf1      	bgt.n	8108f76 <_printf_float+0x40e>
 8108f92:	464b      	mov	r3, r9
 8108f94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8108f98:	e6dc      	b.n	8108d54 <_printf_float+0x1ec>
 8108f9a:	f04f 0800 	mov.w	r8, #0
 8108f9e:	f104 0a1a 	add.w	sl, r4, #26
 8108fa2:	e7f2      	b.n	8108f8a <_printf_float+0x422>
 8108fa4:	2301      	movs	r3, #1
 8108fa6:	4642      	mov	r2, r8
 8108fa8:	e7df      	b.n	8108f6a <_printf_float+0x402>
 8108faa:	2301      	movs	r3, #1
 8108fac:	464a      	mov	r2, r9
 8108fae:	4631      	mov	r1, r6
 8108fb0:	4628      	mov	r0, r5
 8108fb2:	47b8      	blx	r7
 8108fb4:	3001      	adds	r0, #1
 8108fb6:	f43f ae38 	beq.w	8108c2a <_printf_float+0xc2>
 8108fba:	f108 0801 	add.w	r8, r8, #1
 8108fbe:	68e3      	ldr	r3, [r4, #12]
 8108fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8108fc2:	1a5b      	subs	r3, r3, r1
 8108fc4:	4543      	cmp	r3, r8
 8108fc6:	dcf0      	bgt.n	8108faa <_printf_float+0x442>
 8108fc8:	e6fa      	b.n	8108dc0 <_printf_float+0x258>
 8108fca:	f04f 0800 	mov.w	r8, #0
 8108fce:	f104 0919 	add.w	r9, r4, #25
 8108fd2:	e7f4      	b.n	8108fbe <_printf_float+0x456>

08108fd4 <_printf_common>:
 8108fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108fd8:	4616      	mov	r6, r2
 8108fda:	4699      	mov	r9, r3
 8108fdc:	688a      	ldr	r2, [r1, #8]
 8108fde:	690b      	ldr	r3, [r1, #16]
 8108fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108fe4:	4293      	cmp	r3, r2
 8108fe6:	bfb8      	it	lt
 8108fe8:	4613      	movlt	r3, r2
 8108fea:	6033      	str	r3, [r6, #0]
 8108fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108ff0:	4607      	mov	r7, r0
 8108ff2:	460c      	mov	r4, r1
 8108ff4:	b10a      	cbz	r2, 8108ffa <_printf_common+0x26>
 8108ff6:	3301      	adds	r3, #1
 8108ff8:	6033      	str	r3, [r6, #0]
 8108ffa:	6823      	ldr	r3, [r4, #0]
 8108ffc:	0699      	lsls	r1, r3, #26
 8108ffe:	bf42      	ittt	mi
 8109000:	6833      	ldrmi	r3, [r6, #0]
 8109002:	3302      	addmi	r3, #2
 8109004:	6033      	strmi	r3, [r6, #0]
 8109006:	6825      	ldr	r5, [r4, #0]
 8109008:	f015 0506 	ands.w	r5, r5, #6
 810900c:	d106      	bne.n	810901c <_printf_common+0x48>
 810900e:	f104 0a19 	add.w	sl, r4, #25
 8109012:	68e3      	ldr	r3, [r4, #12]
 8109014:	6832      	ldr	r2, [r6, #0]
 8109016:	1a9b      	subs	r3, r3, r2
 8109018:	42ab      	cmp	r3, r5
 810901a:	dc26      	bgt.n	810906a <_printf_common+0x96>
 810901c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109020:	1e13      	subs	r3, r2, #0
 8109022:	6822      	ldr	r2, [r4, #0]
 8109024:	bf18      	it	ne
 8109026:	2301      	movne	r3, #1
 8109028:	0692      	lsls	r2, r2, #26
 810902a:	d42b      	bmi.n	8109084 <_printf_common+0xb0>
 810902c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109030:	4649      	mov	r1, r9
 8109032:	4638      	mov	r0, r7
 8109034:	47c0      	blx	r8
 8109036:	3001      	adds	r0, #1
 8109038:	d01e      	beq.n	8109078 <_printf_common+0xa4>
 810903a:	6823      	ldr	r3, [r4, #0]
 810903c:	68e5      	ldr	r5, [r4, #12]
 810903e:	6832      	ldr	r2, [r6, #0]
 8109040:	f003 0306 	and.w	r3, r3, #6
 8109044:	2b04      	cmp	r3, #4
 8109046:	bf08      	it	eq
 8109048:	1aad      	subeq	r5, r5, r2
 810904a:	68a3      	ldr	r3, [r4, #8]
 810904c:	6922      	ldr	r2, [r4, #16]
 810904e:	bf0c      	ite	eq
 8109050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109054:	2500      	movne	r5, #0
 8109056:	4293      	cmp	r3, r2
 8109058:	bfc4      	itt	gt
 810905a:	1a9b      	subgt	r3, r3, r2
 810905c:	18ed      	addgt	r5, r5, r3
 810905e:	2600      	movs	r6, #0
 8109060:	341a      	adds	r4, #26
 8109062:	42b5      	cmp	r5, r6
 8109064:	d11a      	bne.n	810909c <_printf_common+0xc8>
 8109066:	2000      	movs	r0, #0
 8109068:	e008      	b.n	810907c <_printf_common+0xa8>
 810906a:	2301      	movs	r3, #1
 810906c:	4652      	mov	r2, sl
 810906e:	4649      	mov	r1, r9
 8109070:	4638      	mov	r0, r7
 8109072:	47c0      	blx	r8
 8109074:	3001      	adds	r0, #1
 8109076:	d103      	bne.n	8109080 <_printf_common+0xac>
 8109078:	f04f 30ff 	mov.w	r0, #4294967295
 810907c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109080:	3501      	adds	r5, #1
 8109082:	e7c6      	b.n	8109012 <_printf_common+0x3e>
 8109084:	18e1      	adds	r1, r4, r3
 8109086:	1c5a      	adds	r2, r3, #1
 8109088:	2030      	movs	r0, #48	; 0x30
 810908a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810908e:	4422      	add	r2, r4
 8109090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109098:	3302      	adds	r3, #2
 810909a:	e7c7      	b.n	810902c <_printf_common+0x58>
 810909c:	2301      	movs	r3, #1
 810909e:	4622      	mov	r2, r4
 81090a0:	4649      	mov	r1, r9
 81090a2:	4638      	mov	r0, r7
 81090a4:	47c0      	blx	r8
 81090a6:	3001      	adds	r0, #1
 81090a8:	d0e6      	beq.n	8109078 <_printf_common+0xa4>
 81090aa:	3601      	adds	r6, #1
 81090ac:	e7d9      	b.n	8109062 <_printf_common+0x8e>
	...

081090b0 <_printf_i>:
 81090b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81090b4:	460c      	mov	r4, r1
 81090b6:	4691      	mov	r9, r2
 81090b8:	7e27      	ldrb	r7, [r4, #24]
 81090ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 81090bc:	2f78      	cmp	r7, #120	; 0x78
 81090be:	4680      	mov	r8, r0
 81090c0:	469a      	mov	sl, r3
 81090c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81090c6:	d807      	bhi.n	81090d8 <_printf_i+0x28>
 81090c8:	2f62      	cmp	r7, #98	; 0x62
 81090ca:	d80a      	bhi.n	81090e2 <_printf_i+0x32>
 81090cc:	2f00      	cmp	r7, #0
 81090ce:	f000 80d8 	beq.w	8109282 <_printf_i+0x1d2>
 81090d2:	2f58      	cmp	r7, #88	; 0x58
 81090d4:	f000 80a3 	beq.w	810921e <_printf_i+0x16e>
 81090d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81090dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81090e0:	e03a      	b.n	8109158 <_printf_i+0xa8>
 81090e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81090e6:	2b15      	cmp	r3, #21
 81090e8:	d8f6      	bhi.n	81090d8 <_printf_i+0x28>
 81090ea:	a001      	add	r0, pc, #4	; (adr r0, 81090f0 <_printf_i+0x40>)
 81090ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81090f0:	08109149 	.word	0x08109149
 81090f4:	0810915d 	.word	0x0810915d
 81090f8:	081090d9 	.word	0x081090d9
 81090fc:	081090d9 	.word	0x081090d9
 8109100:	081090d9 	.word	0x081090d9
 8109104:	081090d9 	.word	0x081090d9
 8109108:	0810915d 	.word	0x0810915d
 810910c:	081090d9 	.word	0x081090d9
 8109110:	081090d9 	.word	0x081090d9
 8109114:	081090d9 	.word	0x081090d9
 8109118:	081090d9 	.word	0x081090d9
 810911c:	08109269 	.word	0x08109269
 8109120:	0810918d 	.word	0x0810918d
 8109124:	0810924b 	.word	0x0810924b
 8109128:	081090d9 	.word	0x081090d9
 810912c:	081090d9 	.word	0x081090d9
 8109130:	0810928b 	.word	0x0810928b
 8109134:	081090d9 	.word	0x081090d9
 8109138:	0810918d 	.word	0x0810918d
 810913c:	081090d9 	.word	0x081090d9
 8109140:	081090d9 	.word	0x081090d9
 8109144:	08109253 	.word	0x08109253
 8109148:	680b      	ldr	r3, [r1, #0]
 810914a:	1d1a      	adds	r2, r3, #4
 810914c:	681b      	ldr	r3, [r3, #0]
 810914e:	600a      	str	r2, [r1, #0]
 8109150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8109154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109158:	2301      	movs	r3, #1
 810915a:	e0a3      	b.n	81092a4 <_printf_i+0x1f4>
 810915c:	6825      	ldr	r5, [r4, #0]
 810915e:	6808      	ldr	r0, [r1, #0]
 8109160:	062e      	lsls	r6, r5, #24
 8109162:	f100 0304 	add.w	r3, r0, #4
 8109166:	d50a      	bpl.n	810917e <_printf_i+0xce>
 8109168:	6805      	ldr	r5, [r0, #0]
 810916a:	600b      	str	r3, [r1, #0]
 810916c:	2d00      	cmp	r5, #0
 810916e:	da03      	bge.n	8109178 <_printf_i+0xc8>
 8109170:	232d      	movs	r3, #45	; 0x2d
 8109172:	426d      	negs	r5, r5
 8109174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109178:	485e      	ldr	r0, [pc, #376]	; (81092f4 <_printf_i+0x244>)
 810917a:	230a      	movs	r3, #10
 810917c:	e019      	b.n	81091b2 <_printf_i+0x102>
 810917e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8109182:	6805      	ldr	r5, [r0, #0]
 8109184:	600b      	str	r3, [r1, #0]
 8109186:	bf18      	it	ne
 8109188:	b22d      	sxthne	r5, r5
 810918a:	e7ef      	b.n	810916c <_printf_i+0xbc>
 810918c:	680b      	ldr	r3, [r1, #0]
 810918e:	6825      	ldr	r5, [r4, #0]
 8109190:	1d18      	adds	r0, r3, #4
 8109192:	6008      	str	r0, [r1, #0]
 8109194:	0628      	lsls	r0, r5, #24
 8109196:	d501      	bpl.n	810919c <_printf_i+0xec>
 8109198:	681d      	ldr	r5, [r3, #0]
 810919a:	e002      	b.n	81091a2 <_printf_i+0xf2>
 810919c:	0669      	lsls	r1, r5, #25
 810919e:	d5fb      	bpl.n	8109198 <_printf_i+0xe8>
 81091a0:	881d      	ldrh	r5, [r3, #0]
 81091a2:	4854      	ldr	r0, [pc, #336]	; (81092f4 <_printf_i+0x244>)
 81091a4:	2f6f      	cmp	r7, #111	; 0x6f
 81091a6:	bf0c      	ite	eq
 81091a8:	2308      	moveq	r3, #8
 81091aa:	230a      	movne	r3, #10
 81091ac:	2100      	movs	r1, #0
 81091ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81091b2:	6866      	ldr	r6, [r4, #4]
 81091b4:	60a6      	str	r6, [r4, #8]
 81091b6:	2e00      	cmp	r6, #0
 81091b8:	bfa2      	ittt	ge
 81091ba:	6821      	ldrge	r1, [r4, #0]
 81091bc:	f021 0104 	bicge.w	r1, r1, #4
 81091c0:	6021      	strge	r1, [r4, #0]
 81091c2:	b90d      	cbnz	r5, 81091c8 <_printf_i+0x118>
 81091c4:	2e00      	cmp	r6, #0
 81091c6:	d04d      	beq.n	8109264 <_printf_i+0x1b4>
 81091c8:	4616      	mov	r6, r2
 81091ca:	fbb5 f1f3 	udiv	r1, r5, r3
 81091ce:	fb03 5711 	mls	r7, r3, r1, r5
 81091d2:	5dc7      	ldrb	r7, [r0, r7]
 81091d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81091d8:	462f      	mov	r7, r5
 81091da:	42bb      	cmp	r3, r7
 81091dc:	460d      	mov	r5, r1
 81091de:	d9f4      	bls.n	81091ca <_printf_i+0x11a>
 81091e0:	2b08      	cmp	r3, #8
 81091e2:	d10b      	bne.n	81091fc <_printf_i+0x14c>
 81091e4:	6823      	ldr	r3, [r4, #0]
 81091e6:	07df      	lsls	r7, r3, #31
 81091e8:	d508      	bpl.n	81091fc <_printf_i+0x14c>
 81091ea:	6923      	ldr	r3, [r4, #16]
 81091ec:	6861      	ldr	r1, [r4, #4]
 81091ee:	4299      	cmp	r1, r3
 81091f0:	bfde      	ittt	le
 81091f2:	2330      	movle	r3, #48	; 0x30
 81091f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 81091f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 81091fc:	1b92      	subs	r2, r2, r6
 81091fe:	6122      	str	r2, [r4, #16]
 8109200:	f8cd a000 	str.w	sl, [sp]
 8109204:	464b      	mov	r3, r9
 8109206:	aa03      	add	r2, sp, #12
 8109208:	4621      	mov	r1, r4
 810920a:	4640      	mov	r0, r8
 810920c:	f7ff fee2 	bl	8108fd4 <_printf_common>
 8109210:	3001      	adds	r0, #1
 8109212:	d14c      	bne.n	81092ae <_printf_i+0x1fe>
 8109214:	f04f 30ff 	mov.w	r0, #4294967295
 8109218:	b004      	add	sp, #16
 810921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810921e:	4835      	ldr	r0, [pc, #212]	; (81092f4 <_printf_i+0x244>)
 8109220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8109224:	6823      	ldr	r3, [r4, #0]
 8109226:	680e      	ldr	r6, [r1, #0]
 8109228:	061f      	lsls	r7, r3, #24
 810922a:	f856 5b04 	ldr.w	r5, [r6], #4
 810922e:	600e      	str	r6, [r1, #0]
 8109230:	d514      	bpl.n	810925c <_printf_i+0x1ac>
 8109232:	07d9      	lsls	r1, r3, #31
 8109234:	bf44      	itt	mi
 8109236:	f043 0320 	orrmi.w	r3, r3, #32
 810923a:	6023      	strmi	r3, [r4, #0]
 810923c:	b91d      	cbnz	r5, 8109246 <_printf_i+0x196>
 810923e:	6823      	ldr	r3, [r4, #0]
 8109240:	f023 0320 	bic.w	r3, r3, #32
 8109244:	6023      	str	r3, [r4, #0]
 8109246:	2310      	movs	r3, #16
 8109248:	e7b0      	b.n	81091ac <_printf_i+0xfc>
 810924a:	6823      	ldr	r3, [r4, #0]
 810924c:	f043 0320 	orr.w	r3, r3, #32
 8109250:	6023      	str	r3, [r4, #0]
 8109252:	2378      	movs	r3, #120	; 0x78
 8109254:	4828      	ldr	r0, [pc, #160]	; (81092f8 <_printf_i+0x248>)
 8109256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810925a:	e7e3      	b.n	8109224 <_printf_i+0x174>
 810925c:	065e      	lsls	r6, r3, #25
 810925e:	bf48      	it	mi
 8109260:	b2ad      	uxthmi	r5, r5
 8109262:	e7e6      	b.n	8109232 <_printf_i+0x182>
 8109264:	4616      	mov	r6, r2
 8109266:	e7bb      	b.n	81091e0 <_printf_i+0x130>
 8109268:	680b      	ldr	r3, [r1, #0]
 810926a:	6826      	ldr	r6, [r4, #0]
 810926c:	6960      	ldr	r0, [r4, #20]
 810926e:	1d1d      	adds	r5, r3, #4
 8109270:	600d      	str	r5, [r1, #0]
 8109272:	0635      	lsls	r5, r6, #24
 8109274:	681b      	ldr	r3, [r3, #0]
 8109276:	d501      	bpl.n	810927c <_printf_i+0x1cc>
 8109278:	6018      	str	r0, [r3, #0]
 810927a:	e002      	b.n	8109282 <_printf_i+0x1d2>
 810927c:	0671      	lsls	r1, r6, #25
 810927e:	d5fb      	bpl.n	8109278 <_printf_i+0x1c8>
 8109280:	8018      	strh	r0, [r3, #0]
 8109282:	2300      	movs	r3, #0
 8109284:	6123      	str	r3, [r4, #16]
 8109286:	4616      	mov	r6, r2
 8109288:	e7ba      	b.n	8109200 <_printf_i+0x150>
 810928a:	680b      	ldr	r3, [r1, #0]
 810928c:	1d1a      	adds	r2, r3, #4
 810928e:	600a      	str	r2, [r1, #0]
 8109290:	681e      	ldr	r6, [r3, #0]
 8109292:	6862      	ldr	r2, [r4, #4]
 8109294:	2100      	movs	r1, #0
 8109296:	4630      	mov	r0, r6
 8109298:	f7f7 f83a 	bl	8100310 <memchr>
 810929c:	b108      	cbz	r0, 81092a2 <_printf_i+0x1f2>
 810929e:	1b80      	subs	r0, r0, r6
 81092a0:	6060      	str	r0, [r4, #4]
 81092a2:	6863      	ldr	r3, [r4, #4]
 81092a4:	6123      	str	r3, [r4, #16]
 81092a6:	2300      	movs	r3, #0
 81092a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81092ac:	e7a8      	b.n	8109200 <_printf_i+0x150>
 81092ae:	6923      	ldr	r3, [r4, #16]
 81092b0:	4632      	mov	r2, r6
 81092b2:	4649      	mov	r1, r9
 81092b4:	4640      	mov	r0, r8
 81092b6:	47d0      	blx	sl
 81092b8:	3001      	adds	r0, #1
 81092ba:	d0ab      	beq.n	8109214 <_printf_i+0x164>
 81092bc:	6823      	ldr	r3, [r4, #0]
 81092be:	079b      	lsls	r3, r3, #30
 81092c0:	d413      	bmi.n	81092ea <_printf_i+0x23a>
 81092c2:	68e0      	ldr	r0, [r4, #12]
 81092c4:	9b03      	ldr	r3, [sp, #12]
 81092c6:	4298      	cmp	r0, r3
 81092c8:	bfb8      	it	lt
 81092ca:	4618      	movlt	r0, r3
 81092cc:	e7a4      	b.n	8109218 <_printf_i+0x168>
 81092ce:	2301      	movs	r3, #1
 81092d0:	4632      	mov	r2, r6
 81092d2:	4649      	mov	r1, r9
 81092d4:	4640      	mov	r0, r8
 81092d6:	47d0      	blx	sl
 81092d8:	3001      	adds	r0, #1
 81092da:	d09b      	beq.n	8109214 <_printf_i+0x164>
 81092dc:	3501      	adds	r5, #1
 81092de:	68e3      	ldr	r3, [r4, #12]
 81092e0:	9903      	ldr	r1, [sp, #12]
 81092e2:	1a5b      	subs	r3, r3, r1
 81092e4:	42ab      	cmp	r3, r5
 81092e6:	dcf2      	bgt.n	81092ce <_printf_i+0x21e>
 81092e8:	e7eb      	b.n	81092c2 <_printf_i+0x212>
 81092ea:	2500      	movs	r5, #0
 81092ec:	f104 0619 	add.w	r6, r4, #25
 81092f0:	e7f5      	b.n	81092de <_printf_i+0x22e>
 81092f2:	bf00      	nop
 81092f4:	0810dc33 	.word	0x0810dc33
 81092f8:	0810dc44 	.word	0x0810dc44

081092fc <_scanf_float>:
 81092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109300:	b087      	sub	sp, #28
 8109302:	4617      	mov	r7, r2
 8109304:	9303      	str	r3, [sp, #12]
 8109306:	688b      	ldr	r3, [r1, #8]
 8109308:	1e5a      	subs	r2, r3, #1
 810930a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810930e:	bf83      	ittte	hi
 8109310:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109314:	195b      	addhi	r3, r3, r5
 8109316:	9302      	strhi	r3, [sp, #8]
 8109318:	2300      	movls	r3, #0
 810931a:	bf86      	itte	hi
 810931c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8109320:	608b      	strhi	r3, [r1, #8]
 8109322:	9302      	strls	r3, [sp, #8]
 8109324:	680b      	ldr	r3, [r1, #0]
 8109326:	468b      	mov	fp, r1
 8109328:	2500      	movs	r5, #0
 810932a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810932e:	f84b 3b1c 	str.w	r3, [fp], #28
 8109332:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109336:	4680      	mov	r8, r0
 8109338:	460c      	mov	r4, r1
 810933a:	465e      	mov	r6, fp
 810933c:	46aa      	mov	sl, r5
 810933e:	46a9      	mov	r9, r5
 8109340:	9501      	str	r5, [sp, #4]
 8109342:	68a2      	ldr	r2, [r4, #8]
 8109344:	b152      	cbz	r2, 810935c <_scanf_float+0x60>
 8109346:	683b      	ldr	r3, [r7, #0]
 8109348:	781b      	ldrb	r3, [r3, #0]
 810934a:	2b4e      	cmp	r3, #78	; 0x4e
 810934c:	d864      	bhi.n	8109418 <_scanf_float+0x11c>
 810934e:	2b40      	cmp	r3, #64	; 0x40
 8109350:	d83c      	bhi.n	81093cc <_scanf_float+0xd0>
 8109352:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8109356:	b2c8      	uxtb	r0, r1
 8109358:	280e      	cmp	r0, #14
 810935a:	d93a      	bls.n	81093d2 <_scanf_float+0xd6>
 810935c:	f1b9 0f00 	cmp.w	r9, #0
 8109360:	d003      	beq.n	810936a <_scanf_float+0x6e>
 8109362:	6823      	ldr	r3, [r4, #0]
 8109364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109368:	6023      	str	r3, [r4, #0]
 810936a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810936e:	f1ba 0f01 	cmp.w	sl, #1
 8109372:	f200 8113 	bhi.w	810959c <_scanf_float+0x2a0>
 8109376:	455e      	cmp	r6, fp
 8109378:	f200 8105 	bhi.w	8109586 <_scanf_float+0x28a>
 810937c:	2501      	movs	r5, #1
 810937e:	4628      	mov	r0, r5
 8109380:	b007      	add	sp, #28
 8109382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109386:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810938a:	2a0d      	cmp	r2, #13
 810938c:	d8e6      	bhi.n	810935c <_scanf_float+0x60>
 810938e:	a101      	add	r1, pc, #4	; (adr r1, 8109394 <_scanf_float+0x98>)
 8109390:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8109394:	081094d3 	.word	0x081094d3
 8109398:	0810935d 	.word	0x0810935d
 810939c:	0810935d 	.word	0x0810935d
 81093a0:	0810935d 	.word	0x0810935d
 81093a4:	08109533 	.word	0x08109533
 81093a8:	0810950b 	.word	0x0810950b
 81093ac:	0810935d 	.word	0x0810935d
 81093b0:	0810935d 	.word	0x0810935d
 81093b4:	081094e1 	.word	0x081094e1
 81093b8:	0810935d 	.word	0x0810935d
 81093bc:	0810935d 	.word	0x0810935d
 81093c0:	0810935d 	.word	0x0810935d
 81093c4:	0810935d 	.word	0x0810935d
 81093c8:	08109499 	.word	0x08109499
 81093cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 81093d0:	e7db      	b.n	810938a <_scanf_float+0x8e>
 81093d2:	290e      	cmp	r1, #14
 81093d4:	d8c2      	bhi.n	810935c <_scanf_float+0x60>
 81093d6:	a001      	add	r0, pc, #4	; (adr r0, 81093dc <_scanf_float+0xe0>)
 81093d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 81093dc:	0810948b 	.word	0x0810948b
 81093e0:	0810935d 	.word	0x0810935d
 81093e4:	0810948b 	.word	0x0810948b
 81093e8:	0810951f 	.word	0x0810951f
 81093ec:	0810935d 	.word	0x0810935d
 81093f0:	08109439 	.word	0x08109439
 81093f4:	08109475 	.word	0x08109475
 81093f8:	08109475 	.word	0x08109475
 81093fc:	08109475 	.word	0x08109475
 8109400:	08109475 	.word	0x08109475
 8109404:	08109475 	.word	0x08109475
 8109408:	08109475 	.word	0x08109475
 810940c:	08109475 	.word	0x08109475
 8109410:	08109475 	.word	0x08109475
 8109414:	08109475 	.word	0x08109475
 8109418:	2b6e      	cmp	r3, #110	; 0x6e
 810941a:	d809      	bhi.n	8109430 <_scanf_float+0x134>
 810941c:	2b60      	cmp	r3, #96	; 0x60
 810941e:	d8b2      	bhi.n	8109386 <_scanf_float+0x8a>
 8109420:	2b54      	cmp	r3, #84	; 0x54
 8109422:	d077      	beq.n	8109514 <_scanf_float+0x218>
 8109424:	2b59      	cmp	r3, #89	; 0x59
 8109426:	d199      	bne.n	810935c <_scanf_float+0x60>
 8109428:	2d07      	cmp	r5, #7
 810942a:	d197      	bne.n	810935c <_scanf_float+0x60>
 810942c:	2508      	movs	r5, #8
 810942e:	e029      	b.n	8109484 <_scanf_float+0x188>
 8109430:	2b74      	cmp	r3, #116	; 0x74
 8109432:	d06f      	beq.n	8109514 <_scanf_float+0x218>
 8109434:	2b79      	cmp	r3, #121	; 0x79
 8109436:	e7f6      	b.n	8109426 <_scanf_float+0x12a>
 8109438:	6821      	ldr	r1, [r4, #0]
 810943a:	05c8      	lsls	r0, r1, #23
 810943c:	d51a      	bpl.n	8109474 <_scanf_float+0x178>
 810943e:	9b02      	ldr	r3, [sp, #8]
 8109440:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8109444:	6021      	str	r1, [r4, #0]
 8109446:	f109 0901 	add.w	r9, r9, #1
 810944a:	b11b      	cbz	r3, 8109454 <_scanf_float+0x158>
 810944c:	3b01      	subs	r3, #1
 810944e:	3201      	adds	r2, #1
 8109450:	9302      	str	r3, [sp, #8]
 8109452:	60a2      	str	r2, [r4, #8]
 8109454:	68a3      	ldr	r3, [r4, #8]
 8109456:	3b01      	subs	r3, #1
 8109458:	60a3      	str	r3, [r4, #8]
 810945a:	6923      	ldr	r3, [r4, #16]
 810945c:	3301      	adds	r3, #1
 810945e:	6123      	str	r3, [r4, #16]
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	3b01      	subs	r3, #1
 8109464:	2b00      	cmp	r3, #0
 8109466:	607b      	str	r3, [r7, #4]
 8109468:	f340 8084 	ble.w	8109574 <_scanf_float+0x278>
 810946c:	683b      	ldr	r3, [r7, #0]
 810946e:	3301      	adds	r3, #1
 8109470:	603b      	str	r3, [r7, #0]
 8109472:	e766      	b.n	8109342 <_scanf_float+0x46>
 8109474:	eb1a 0f05 	cmn.w	sl, r5
 8109478:	f47f af70 	bne.w	810935c <_scanf_float+0x60>
 810947c:	6822      	ldr	r2, [r4, #0]
 810947e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109482:	6022      	str	r2, [r4, #0]
 8109484:	f806 3b01 	strb.w	r3, [r6], #1
 8109488:	e7e4      	b.n	8109454 <_scanf_float+0x158>
 810948a:	6822      	ldr	r2, [r4, #0]
 810948c:	0610      	lsls	r0, r2, #24
 810948e:	f57f af65 	bpl.w	810935c <_scanf_float+0x60>
 8109492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109496:	e7f4      	b.n	8109482 <_scanf_float+0x186>
 8109498:	f1ba 0f00 	cmp.w	sl, #0
 810949c:	d10e      	bne.n	81094bc <_scanf_float+0x1c0>
 810949e:	f1b9 0f00 	cmp.w	r9, #0
 81094a2:	d10e      	bne.n	81094c2 <_scanf_float+0x1c6>
 81094a4:	6822      	ldr	r2, [r4, #0]
 81094a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81094aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81094ae:	d108      	bne.n	81094c2 <_scanf_float+0x1c6>
 81094b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81094b4:	6022      	str	r2, [r4, #0]
 81094b6:	f04f 0a01 	mov.w	sl, #1
 81094ba:	e7e3      	b.n	8109484 <_scanf_float+0x188>
 81094bc:	f1ba 0f02 	cmp.w	sl, #2
 81094c0:	d055      	beq.n	810956e <_scanf_float+0x272>
 81094c2:	2d01      	cmp	r5, #1
 81094c4:	d002      	beq.n	81094cc <_scanf_float+0x1d0>
 81094c6:	2d04      	cmp	r5, #4
 81094c8:	f47f af48 	bne.w	810935c <_scanf_float+0x60>
 81094cc:	3501      	adds	r5, #1
 81094ce:	b2ed      	uxtb	r5, r5
 81094d0:	e7d8      	b.n	8109484 <_scanf_float+0x188>
 81094d2:	f1ba 0f01 	cmp.w	sl, #1
 81094d6:	f47f af41 	bne.w	810935c <_scanf_float+0x60>
 81094da:	f04f 0a02 	mov.w	sl, #2
 81094de:	e7d1      	b.n	8109484 <_scanf_float+0x188>
 81094e0:	b97d      	cbnz	r5, 8109502 <_scanf_float+0x206>
 81094e2:	f1b9 0f00 	cmp.w	r9, #0
 81094e6:	f47f af3c 	bne.w	8109362 <_scanf_float+0x66>
 81094ea:	6822      	ldr	r2, [r4, #0]
 81094ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81094f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81094f4:	f47f af39 	bne.w	810936a <_scanf_float+0x6e>
 81094f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81094fc:	6022      	str	r2, [r4, #0]
 81094fe:	2501      	movs	r5, #1
 8109500:	e7c0      	b.n	8109484 <_scanf_float+0x188>
 8109502:	2d03      	cmp	r5, #3
 8109504:	d0e2      	beq.n	81094cc <_scanf_float+0x1d0>
 8109506:	2d05      	cmp	r5, #5
 8109508:	e7de      	b.n	81094c8 <_scanf_float+0x1cc>
 810950a:	2d02      	cmp	r5, #2
 810950c:	f47f af26 	bne.w	810935c <_scanf_float+0x60>
 8109510:	2503      	movs	r5, #3
 8109512:	e7b7      	b.n	8109484 <_scanf_float+0x188>
 8109514:	2d06      	cmp	r5, #6
 8109516:	f47f af21 	bne.w	810935c <_scanf_float+0x60>
 810951a:	2507      	movs	r5, #7
 810951c:	e7b2      	b.n	8109484 <_scanf_float+0x188>
 810951e:	6822      	ldr	r2, [r4, #0]
 8109520:	0591      	lsls	r1, r2, #22
 8109522:	f57f af1b 	bpl.w	810935c <_scanf_float+0x60>
 8109526:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810952a:	6022      	str	r2, [r4, #0]
 810952c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109530:	e7a8      	b.n	8109484 <_scanf_float+0x188>
 8109532:	6822      	ldr	r2, [r4, #0]
 8109534:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810953c:	d006      	beq.n	810954c <_scanf_float+0x250>
 810953e:	0550      	lsls	r0, r2, #21
 8109540:	f57f af0c 	bpl.w	810935c <_scanf_float+0x60>
 8109544:	f1b9 0f00 	cmp.w	r9, #0
 8109548:	f43f af0f 	beq.w	810936a <_scanf_float+0x6e>
 810954c:	0591      	lsls	r1, r2, #22
 810954e:	bf58      	it	pl
 8109550:	9901      	ldrpl	r1, [sp, #4]
 8109552:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109556:	bf58      	it	pl
 8109558:	eba9 0101 	subpl.w	r1, r9, r1
 810955c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109560:	bf58      	it	pl
 8109562:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109566:	6022      	str	r2, [r4, #0]
 8109568:	f04f 0900 	mov.w	r9, #0
 810956c:	e78a      	b.n	8109484 <_scanf_float+0x188>
 810956e:	f04f 0a03 	mov.w	sl, #3
 8109572:	e787      	b.n	8109484 <_scanf_float+0x188>
 8109574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109578:	4639      	mov	r1, r7
 810957a:	4640      	mov	r0, r8
 810957c:	4798      	blx	r3
 810957e:	2800      	cmp	r0, #0
 8109580:	f43f aedf 	beq.w	8109342 <_scanf_float+0x46>
 8109584:	e6ea      	b.n	810935c <_scanf_float+0x60>
 8109586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810958a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810958e:	463a      	mov	r2, r7
 8109590:	4640      	mov	r0, r8
 8109592:	4798      	blx	r3
 8109594:	6923      	ldr	r3, [r4, #16]
 8109596:	3b01      	subs	r3, #1
 8109598:	6123      	str	r3, [r4, #16]
 810959a:	e6ec      	b.n	8109376 <_scanf_float+0x7a>
 810959c:	1e6b      	subs	r3, r5, #1
 810959e:	2b06      	cmp	r3, #6
 81095a0:	d825      	bhi.n	81095ee <_scanf_float+0x2f2>
 81095a2:	2d02      	cmp	r5, #2
 81095a4:	d836      	bhi.n	8109614 <_scanf_float+0x318>
 81095a6:	455e      	cmp	r6, fp
 81095a8:	f67f aee8 	bls.w	810937c <_scanf_float+0x80>
 81095ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81095b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81095b4:	463a      	mov	r2, r7
 81095b6:	4640      	mov	r0, r8
 81095b8:	4798      	blx	r3
 81095ba:	6923      	ldr	r3, [r4, #16]
 81095bc:	3b01      	subs	r3, #1
 81095be:	6123      	str	r3, [r4, #16]
 81095c0:	e7f1      	b.n	81095a6 <_scanf_float+0x2aa>
 81095c2:	9802      	ldr	r0, [sp, #8]
 81095c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81095c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81095cc:	9002      	str	r0, [sp, #8]
 81095ce:	463a      	mov	r2, r7
 81095d0:	4640      	mov	r0, r8
 81095d2:	4798      	blx	r3
 81095d4:	6923      	ldr	r3, [r4, #16]
 81095d6:	3b01      	subs	r3, #1
 81095d8:	6123      	str	r3, [r4, #16]
 81095da:	f10a 3aff 	add.w	sl, sl, #4294967295
 81095de:	fa5f fa8a 	uxtb.w	sl, sl
 81095e2:	f1ba 0f02 	cmp.w	sl, #2
 81095e6:	d1ec      	bne.n	81095c2 <_scanf_float+0x2c6>
 81095e8:	3d03      	subs	r5, #3
 81095ea:	b2ed      	uxtb	r5, r5
 81095ec:	1b76      	subs	r6, r6, r5
 81095ee:	6823      	ldr	r3, [r4, #0]
 81095f0:	05da      	lsls	r2, r3, #23
 81095f2:	d52f      	bpl.n	8109654 <_scanf_float+0x358>
 81095f4:	055b      	lsls	r3, r3, #21
 81095f6:	d510      	bpl.n	810961a <_scanf_float+0x31e>
 81095f8:	455e      	cmp	r6, fp
 81095fa:	f67f aebf 	bls.w	810937c <_scanf_float+0x80>
 81095fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109602:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109606:	463a      	mov	r2, r7
 8109608:	4640      	mov	r0, r8
 810960a:	4798      	blx	r3
 810960c:	6923      	ldr	r3, [r4, #16]
 810960e:	3b01      	subs	r3, #1
 8109610:	6123      	str	r3, [r4, #16]
 8109612:	e7f1      	b.n	81095f8 <_scanf_float+0x2fc>
 8109614:	46aa      	mov	sl, r5
 8109616:	9602      	str	r6, [sp, #8]
 8109618:	e7df      	b.n	81095da <_scanf_float+0x2de>
 810961a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810961e:	6923      	ldr	r3, [r4, #16]
 8109620:	2965      	cmp	r1, #101	; 0x65
 8109622:	f103 33ff 	add.w	r3, r3, #4294967295
 8109626:	f106 35ff 	add.w	r5, r6, #4294967295
 810962a:	6123      	str	r3, [r4, #16]
 810962c:	d00c      	beq.n	8109648 <_scanf_float+0x34c>
 810962e:	2945      	cmp	r1, #69	; 0x45
 8109630:	d00a      	beq.n	8109648 <_scanf_float+0x34c>
 8109632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109636:	463a      	mov	r2, r7
 8109638:	4640      	mov	r0, r8
 810963a:	4798      	blx	r3
 810963c:	6923      	ldr	r3, [r4, #16]
 810963e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109642:	3b01      	subs	r3, #1
 8109644:	1eb5      	subs	r5, r6, #2
 8109646:	6123      	str	r3, [r4, #16]
 8109648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810964c:	463a      	mov	r2, r7
 810964e:	4640      	mov	r0, r8
 8109650:	4798      	blx	r3
 8109652:	462e      	mov	r6, r5
 8109654:	6825      	ldr	r5, [r4, #0]
 8109656:	f015 0510 	ands.w	r5, r5, #16
 810965a:	d158      	bne.n	810970e <_scanf_float+0x412>
 810965c:	7035      	strb	r5, [r6, #0]
 810965e:	6823      	ldr	r3, [r4, #0]
 8109660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109668:	d11c      	bne.n	81096a4 <_scanf_float+0x3a8>
 810966a:	9b01      	ldr	r3, [sp, #4]
 810966c:	454b      	cmp	r3, r9
 810966e:	eba3 0209 	sub.w	r2, r3, r9
 8109672:	d124      	bne.n	81096be <_scanf_float+0x3c2>
 8109674:	2200      	movs	r2, #0
 8109676:	4659      	mov	r1, fp
 8109678:	4640      	mov	r0, r8
 810967a:	f000 fed3 	bl	810a424 <_strtod_r>
 810967e:	9b03      	ldr	r3, [sp, #12]
 8109680:	6821      	ldr	r1, [r4, #0]
 8109682:	681b      	ldr	r3, [r3, #0]
 8109684:	f011 0f02 	tst.w	r1, #2
 8109688:	ec57 6b10 	vmov	r6, r7, d0
 810968c:	f103 0204 	add.w	r2, r3, #4
 8109690:	d020      	beq.n	81096d4 <_scanf_float+0x3d8>
 8109692:	9903      	ldr	r1, [sp, #12]
 8109694:	600a      	str	r2, [r1, #0]
 8109696:	681b      	ldr	r3, [r3, #0]
 8109698:	e9c3 6700 	strd	r6, r7, [r3]
 810969c:	68e3      	ldr	r3, [r4, #12]
 810969e:	3301      	adds	r3, #1
 81096a0:	60e3      	str	r3, [r4, #12]
 81096a2:	e66c      	b.n	810937e <_scanf_float+0x82>
 81096a4:	9b04      	ldr	r3, [sp, #16]
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	d0e4      	beq.n	8109674 <_scanf_float+0x378>
 81096aa:	9905      	ldr	r1, [sp, #20]
 81096ac:	230a      	movs	r3, #10
 81096ae:	462a      	mov	r2, r5
 81096b0:	3101      	adds	r1, #1
 81096b2:	4640      	mov	r0, r8
 81096b4:	f000 ff40 	bl	810a538 <_strtol_r>
 81096b8:	9b04      	ldr	r3, [sp, #16]
 81096ba:	9e05      	ldr	r6, [sp, #20]
 81096bc:	1ac2      	subs	r2, r0, r3
 81096be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81096c2:	429e      	cmp	r6, r3
 81096c4:	bf28      	it	cs
 81096c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81096ca:	4912      	ldr	r1, [pc, #72]	; (8109714 <_scanf_float+0x418>)
 81096cc:	4630      	mov	r0, r6
 81096ce:	f000 f83b 	bl	8109748 <siprintf>
 81096d2:	e7cf      	b.n	8109674 <_scanf_float+0x378>
 81096d4:	f011 0f04 	tst.w	r1, #4
 81096d8:	9903      	ldr	r1, [sp, #12]
 81096da:	600a      	str	r2, [r1, #0]
 81096dc:	d1db      	bne.n	8109696 <_scanf_float+0x39a>
 81096de:	f8d3 8000 	ldr.w	r8, [r3]
 81096e2:	ee10 2a10 	vmov	r2, s0
 81096e6:	ee10 0a10 	vmov	r0, s0
 81096ea:	463b      	mov	r3, r7
 81096ec:	4639      	mov	r1, r7
 81096ee:	f7f7 fab5 	bl	8100c5c <__aeabi_dcmpun>
 81096f2:	b128      	cbz	r0, 8109700 <_scanf_float+0x404>
 81096f4:	4808      	ldr	r0, [pc, #32]	; (8109718 <_scanf_float+0x41c>)
 81096f6:	f000 f821 	bl	810973c <nanf>
 81096fa:	ed88 0a00 	vstr	s0, [r8]
 81096fe:	e7cd      	b.n	810969c <_scanf_float+0x3a0>
 8109700:	4630      	mov	r0, r6
 8109702:	4639      	mov	r1, r7
 8109704:	f7f7 fb08 	bl	8100d18 <__aeabi_d2f>
 8109708:	f8c8 0000 	str.w	r0, [r8]
 810970c:	e7c6      	b.n	810969c <_scanf_float+0x3a0>
 810970e:	2500      	movs	r5, #0
 8109710:	e635      	b.n	810937e <_scanf_float+0x82>
 8109712:	bf00      	nop
 8109714:	0810dc55 	.word	0x0810dc55
 8109718:	0810dc09 	.word	0x0810dc09

0810971c <_sbrk_r>:
 810971c:	b538      	push	{r3, r4, r5, lr}
 810971e:	4d06      	ldr	r5, [pc, #24]	; (8109738 <_sbrk_r+0x1c>)
 8109720:	2300      	movs	r3, #0
 8109722:	4604      	mov	r4, r0
 8109724:	4608      	mov	r0, r1
 8109726:	602b      	str	r3, [r5, #0]
 8109728:	f7f8 f95a 	bl	81019e0 <_sbrk>
 810972c:	1c43      	adds	r3, r0, #1
 810972e:	d102      	bne.n	8109736 <_sbrk_r+0x1a>
 8109730:	682b      	ldr	r3, [r5, #0]
 8109732:	b103      	cbz	r3, 8109736 <_sbrk_r+0x1a>
 8109734:	6023      	str	r3, [r4, #0]
 8109736:	bd38      	pop	{r3, r4, r5, pc}
 8109738:	10000530 	.word	0x10000530

0810973c <nanf>:
 810973c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109744 <nanf+0x8>
 8109740:	4770      	bx	lr
 8109742:	bf00      	nop
 8109744:	7fc00000 	.word	0x7fc00000

08109748 <siprintf>:
 8109748:	b40e      	push	{r1, r2, r3}
 810974a:	b500      	push	{lr}
 810974c:	b09c      	sub	sp, #112	; 0x70
 810974e:	ab1d      	add	r3, sp, #116	; 0x74
 8109750:	9002      	str	r0, [sp, #8]
 8109752:	9006      	str	r0, [sp, #24]
 8109754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109758:	4809      	ldr	r0, [pc, #36]	; (8109780 <siprintf+0x38>)
 810975a:	9107      	str	r1, [sp, #28]
 810975c:	9104      	str	r1, [sp, #16]
 810975e:	4909      	ldr	r1, [pc, #36]	; (8109784 <siprintf+0x3c>)
 8109760:	f853 2b04 	ldr.w	r2, [r3], #4
 8109764:	9105      	str	r1, [sp, #20]
 8109766:	6800      	ldr	r0, [r0, #0]
 8109768:	9301      	str	r3, [sp, #4]
 810976a:	a902      	add	r1, sp, #8
 810976c:	f003 f93a 	bl	810c9e4 <_svfiprintf_r>
 8109770:	9b02      	ldr	r3, [sp, #8]
 8109772:	2200      	movs	r2, #0
 8109774:	701a      	strb	r2, [r3, #0]
 8109776:	b01c      	add	sp, #112	; 0x70
 8109778:	f85d eb04 	ldr.w	lr, [sp], #4
 810977c:	b003      	add	sp, #12
 810977e:	4770      	bx	lr
 8109780:	100000b8 	.word	0x100000b8
 8109784:	ffff0208 	.word	0xffff0208

08109788 <strncmp>:
 8109788:	b510      	push	{r4, lr}
 810978a:	b16a      	cbz	r2, 81097a8 <strncmp+0x20>
 810978c:	3901      	subs	r1, #1
 810978e:	1884      	adds	r4, r0, r2
 8109790:	f810 3b01 	ldrb.w	r3, [r0], #1
 8109794:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8109798:	4293      	cmp	r3, r2
 810979a:	d103      	bne.n	81097a4 <strncmp+0x1c>
 810979c:	42a0      	cmp	r0, r4
 810979e:	d001      	beq.n	81097a4 <strncmp+0x1c>
 81097a0:	2b00      	cmp	r3, #0
 81097a2:	d1f5      	bne.n	8109790 <strncmp+0x8>
 81097a4:	1a98      	subs	r0, r3, r2
 81097a6:	bd10      	pop	{r4, pc}
 81097a8:	4610      	mov	r0, r2
 81097aa:	e7fc      	b.n	81097a6 <strncmp+0x1e>

081097ac <strncpy>:
 81097ac:	b510      	push	{r4, lr}
 81097ae:	3901      	subs	r1, #1
 81097b0:	4603      	mov	r3, r0
 81097b2:	b132      	cbz	r2, 81097c2 <strncpy+0x16>
 81097b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81097b8:	f803 4b01 	strb.w	r4, [r3], #1
 81097bc:	3a01      	subs	r2, #1
 81097be:	2c00      	cmp	r4, #0
 81097c0:	d1f7      	bne.n	81097b2 <strncpy+0x6>
 81097c2:	441a      	add	r2, r3
 81097c4:	2100      	movs	r1, #0
 81097c6:	4293      	cmp	r3, r2
 81097c8:	d100      	bne.n	81097cc <strncpy+0x20>
 81097ca:	bd10      	pop	{r4, pc}
 81097cc:	f803 1b01 	strb.w	r1, [r3], #1
 81097d0:	e7f9      	b.n	81097c6 <strncpy+0x1a>

081097d2 <sulp>:
 81097d2:	b570      	push	{r4, r5, r6, lr}
 81097d4:	4604      	mov	r4, r0
 81097d6:	460d      	mov	r5, r1
 81097d8:	ec45 4b10 	vmov	d0, r4, r5
 81097dc:	4616      	mov	r6, r2
 81097de:	f002 ff21 	bl	810c624 <__ulp>
 81097e2:	ec51 0b10 	vmov	r0, r1, d0
 81097e6:	b17e      	cbz	r6, 8109808 <sulp+0x36>
 81097e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 81097ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81097f0:	2b00      	cmp	r3, #0
 81097f2:	dd09      	ble.n	8109808 <sulp+0x36>
 81097f4:	051b      	lsls	r3, r3, #20
 81097f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 81097fa:	2400      	movs	r4, #0
 81097fc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109800:	4622      	mov	r2, r4
 8109802:	462b      	mov	r3, r5
 8109804:	f7f6 ff90 	bl	8100728 <__aeabi_dmul>
 8109808:	bd70      	pop	{r4, r5, r6, pc}
 810980a:	0000      	movs	r0, r0
 810980c:	0000      	movs	r0, r0
	...

08109810 <_strtod_l>:
 8109810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109814:	b0a3      	sub	sp, #140	; 0x8c
 8109816:	461f      	mov	r7, r3
 8109818:	2300      	movs	r3, #0
 810981a:	931e      	str	r3, [sp, #120]	; 0x78
 810981c:	4ba4      	ldr	r3, [pc, #656]	; (8109ab0 <_strtod_l+0x2a0>)
 810981e:	9219      	str	r2, [sp, #100]	; 0x64
 8109820:	681b      	ldr	r3, [r3, #0]
 8109822:	9307      	str	r3, [sp, #28]
 8109824:	4604      	mov	r4, r0
 8109826:	4618      	mov	r0, r3
 8109828:	4688      	mov	r8, r1
 810982a:	f7f6 fd63 	bl	81002f4 <strlen>
 810982e:	f04f 0a00 	mov.w	sl, #0
 8109832:	4605      	mov	r5, r0
 8109834:	f04f 0b00 	mov.w	fp, #0
 8109838:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810983c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810983e:	781a      	ldrb	r2, [r3, #0]
 8109840:	2a2b      	cmp	r2, #43	; 0x2b
 8109842:	d04c      	beq.n	81098de <_strtod_l+0xce>
 8109844:	d839      	bhi.n	81098ba <_strtod_l+0xaa>
 8109846:	2a0d      	cmp	r2, #13
 8109848:	d832      	bhi.n	81098b0 <_strtod_l+0xa0>
 810984a:	2a08      	cmp	r2, #8
 810984c:	d832      	bhi.n	81098b4 <_strtod_l+0xa4>
 810984e:	2a00      	cmp	r2, #0
 8109850:	d03c      	beq.n	81098cc <_strtod_l+0xbc>
 8109852:	2300      	movs	r3, #0
 8109854:	930e      	str	r3, [sp, #56]	; 0x38
 8109856:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8109858:	7833      	ldrb	r3, [r6, #0]
 810985a:	2b30      	cmp	r3, #48	; 0x30
 810985c:	f040 80b4 	bne.w	81099c8 <_strtod_l+0x1b8>
 8109860:	7873      	ldrb	r3, [r6, #1]
 8109862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109866:	2b58      	cmp	r3, #88	; 0x58
 8109868:	d16c      	bne.n	8109944 <_strtod_l+0x134>
 810986a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810986c:	9301      	str	r3, [sp, #4]
 810986e:	ab1e      	add	r3, sp, #120	; 0x78
 8109870:	9702      	str	r7, [sp, #8]
 8109872:	9300      	str	r3, [sp, #0]
 8109874:	4a8f      	ldr	r2, [pc, #572]	; (8109ab4 <_strtod_l+0x2a4>)
 8109876:	ab1f      	add	r3, sp, #124	; 0x7c
 8109878:	a91d      	add	r1, sp, #116	; 0x74
 810987a:	4620      	mov	r0, r4
 810987c:	f001 ffba 	bl	810b7f4 <__gethex>
 8109880:	f010 0707 	ands.w	r7, r0, #7
 8109884:	4605      	mov	r5, r0
 8109886:	d005      	beq.n	8109894 <_strtod_l+0x84>
 8109888:	2f06      	cmp	r7, #6
 810988a:	d12a      	bne.n	81098e2 <_strtod_l+0xd2>
 810988c:	3601      	adds	r6, #1
 810988e:	2300      	movs	r3, #0
 8109890:	961d      	str	r6, [sp, #116]	; 0x74
 8109892:	930e      	str	r3, [sp, #56]	; 0x38
 8109894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8109896:	2b00      	cmp	r3, #0
 8109898:	f040 8596 	bne.w	810a3c8 <_strtod_l+0xbb8>
 810989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810989e:	b1db      	cbz	r3, 81098d8 <_strtod_l+0xc8>
 81098a0:	4652      	mov	r2, sl
 81098a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 81098a6:	ec43 2b10 	vmov	d0, r2, r3
 81098aa:	b023      	add	sp, #140	; 0x8c
 81098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81098b0:	2a20      	cmp	r2, #32
 81098b2:	d1ce      	bne.n	8109852 <_strtod_l+0x42>
 81098b4:	3301      	adds	r3, #1
 81098b6:	931d      	str	r3, [sp, #116]	; 0x74
 81098b8:	e7c0      	b.n	810983c <_strtod_l+0x2c>
 81098ba:	2a2d      	cmp	r2, #45	; 0x2d
 81098bc:	d1c9      	bne.n	8109852 <_strtod_l+0x42>
 81098be:	2201      	movs	r2, #1
 81098c0:	920e      	str	r2, [sp, #56]	; 0x38
 81098c2:	1c5a      	adds	r2, r3, #1
 81098c4:	921d      	str	r2, [sp, #116]	; 0x74
 81098c6:	785b      	ldrb	r3, [r3, #1]
 81098c8:	2b00      	cmp	r3, #0
 81098ca:	d1c4      	bne.n	8109856 <_strtod_l+0x46>
 81098cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81098ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81098d2:	2b00      	cmp	r3, #0
 81098d4:	f040 8576 	bne.w	810a3c4 <_strtod_l+0xbb4>
 81098d8:	4652      	mov	r2, sl
 81098da:	465b      	mov	r3, fp
 81098dc:	e7e3      	b.n	81098a6 <_strtod_l+0x96>
 81098de:	2200      	movs	r2, #0
 81098e0:	e7ee      	b.n	81098c0 <_strtod_l+0xb0>
 81098e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 81098e4:	b13a      	cbz	r2, 81098f6 <_strtod_l+0xe6>
 81098e6:	2135      	movs	r1, #53	; 0x35
 81098e8:	a820      	add	r0, sp, #128	; 0x80
 81098ea:	f002 ffa6 	bl	810c83a <__copybits>
 81098ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 81098f0:	4620      	mov	r0, r4
 81098f2:	f002 fb6b 	bl	810bfcc <_Bfree>
 81098f6:	3f01      	subs	r7, #1
 81098f8:	2f05      	cmp	r7, #5
 81098fa:	d807      	bhi.n	810990c <_strtod_l+0xfc>
 81098fc:	e8df f007 	tbb	[pc, r7]
 8109900:	1d180b0e 	.word	0x1d180b0e
 8109904:	030e      	.short	0x030e
 8109906:	f04f 0b00 	mov.w	fp, #0
 810990a:	46da      	mov	sl, fp
 810990c:	0728      	lsls	r0, r5, #28
 810990e:	d5c1      	bpl.n	8109894 <_strtod_l+0x84>
 8109910:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8109914:	e7be      	b.n	8109894 <_strtod_l+0x84>
 8109916:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 810991a:	e7f7      	b.n	810990c <_strtod_l+0xfc>
 810991c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8109920:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8109922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8109926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810992a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810992e:	e7ed      	b.n	810990c <_strtod_l+0xfc>
 8109930:	f8df b184 	ldr.w	fp, [pc, #388]	; 8109ab8 <_strtod_l+0x2a8>
 8109934:	f04f 0a00 	mov.w	sl, #0
 8109938:	e7e8      	b.n	810990c <_strtod_l+0xfc>
 810993a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810993e:	f04f 3aff 	mov.w	sl, #4294967295
 8109942:	e7e3      	b.n	810990c <_strtod_l+0xfc>
 8109944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109946:	1c5a      	adds	r2, r3, #1
 8109948:	921d      	str	r2, [sp, #116]	; 0x74
 810994a:	785b      	ldrb	r3, [r3, #1]
 810994c:	2b30      	cmp	r3, #48	; 0x30
 810994e:	d0f9      	beq.n	8109944 <_strtod_l+0x134>
 8109950:	2b00      	cmp	r3, #0
 8109952:	d09f      	beq.n	8109894 <_strtod_l+0x84>
 8109954:	2301      	movs	r3, #1
 8109956:	f04f 0900 	mov.w	r9, #0
 810995a:	9304      	str	r3, [sp, #16]
 810995c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810995e:	930a      	str	r3, [sp, #40]	; 0x28
 8109960:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8109964:	464f      	mov	r7, r9
 8109966:	220a      	movs	r2, #10
 8109968:	981d      	ldr	r0, [sp, #116]	; 0x74
 810996a:	7806      	ldrb	r6, [r0, #0]
 810996c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8109970:	b2d9      	uxtb	r1, r3
 8109972:	2909      	cmp	r1, #9
 8109974:	d92a      	bls.n	81099cc <_strtod_l+0x1bc>
 8109976:	9907      	ldr	r1, [sp, #28]
 8109978:	462a      	mov	r2, r5
 810997a:	f7ff ff05 	bl	8109788 <strncmp>
 810997e:	b398      	cbz	r0, 81099e8 <_strtod_l+0x1d8>
 8109980:	2000      	movs	r0, #0
 8109982:	4633      	mov	r3, r6
 8109984:	463d      	mov	r5, r7
 8109986:	9007      	str	r0, [sp, #28]
 8109988:	4602      	mov	r2, r0
 810998a:	2b65      	cmp	r3, #101	; 0x65
 810998c:	d001      	beq.n	8109992 <_strtod_l+0x182>
 810998e:	2b45      	cmp	r3, #69	; 0x45
 8109990:	d118      	bne.n	81099c4 <_strtod_l+0x1b4>
 8109992:	b91d      	cbnz	r5, 810999c <_strtod_l+0x18c>
 8109994:	9b04      	ldr	r3, [sp, #16]
 8109996:	4303      	orrs	r3, r0
 8109998:	d098      	beq.n	81098cc <_strtod_l+0xbc>
 810999a:	2500      	movs	r5, #0
 810999c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 81099a0:	f108 0301 	add.w	r3, r8, #1
 81099a4:	931d      	str	r3, [sp, #116]	; 0x74
 81099a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 81099aa:	2b2b      	cmp	r3, #43	; 0x2b
 81099ac:	d075      	beq.n	8109a9a <_strtod_l+0x28a>
 81099ae:	2b2d      	cmp	r3, #45	; 0x2d
 81099b0:	d07b      	beq.n	8109aaa <_strtod_l+0x29a>
 81099b2:	f04f 0c00 	mov.w	ip, #0
 81099b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 81099ba:	2909      	cmp	r1, #9
 81099bc:	f240 8082 	bls.w	8109ac4 <_strtod_l+0x2b4>
 81099c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81099c4:	2600      	movs	r6, #0
 81099c6:	e09d      	b.n	8109b04 <_strtod_l+0x2f4>
 81099c8:	2300      	movs	r3, #0
 81099ca:	e7c4      	b.n	8109956 <_strtod_l+0x146>
 81099cc:	2f08      	cmp	r7, #8
 81099ce:	bfd8      	it	le
 81099d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 81099d2:	f100 0001 	add.w	r0, r0, #1
 81099d6:	bfda      	itte	le
 81099d8:	fb02 3301 	mlale	r3, r2, r1, r3
 81099dc:	9309      	strle	r3, [sp, #36]	; 0x24
 81099de:	fb02 3909 	mlagt	r9, r2, r9, r3
 81099e2:	3701      	adds	r7, #1
 81099e4:	901d      	str	r0, [sp, #116]	; 0x74
 81099e6:	e7bf      	b.n	8109968 <_strtod_l+0x158>
 81099e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81099ea:	195a      	adds	r2, r3, r5
 81099ec:	921d      	str	r2, [sp, #116]	; 0x74
 81099ee:	5d5b      	ldrb	r3, [r3, r5]
 81099f0:	2f00      	cmp	r7, #0
 81099f2:	d037      	beq.n	8109a64 <_strtod_l+0x254>
 81099f4:	9007      	str	r0, [sp, #28]
 81099f6:	463d      	mov	r5, r7
 81099f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 81099fc:	2a09      	cmp	r2, #9
 81099fe:	d912      	bls.n	8109a26 <_strtod_l+0x216>
 8109a00:	2201      	movs	r2, #1
 8109a02:	e7c2      	b.n	810998a <_strtod_l+0x17a>
 8109a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109a06:	1c5a      	adds	r2, r3, #1
 8109a08:	921d      	str	r2, [sp, #116]	; 0x74
 8109a0a:	785b      	ldrb	r3, [r3, #1]
 8109a0c:	3001      	adds	r0, #1
 8109a0e:	2b30      	cmp	r3, #48	; 0x30
 8109a10:	d0f8      	beq.n	8109a04 <_strtod_l+0x1f4>
 8109a12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8109a16:	2a08      	cmp	r2, #8
 8109a18:	f200 84db 	bhi.w	810a3d2 <_strtod_l+0xbc2>
 8109a1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8109a1e:	9007      	str	r0, [sp, #28]
 8109a20:	2000      	movs	r0, #0
 8109a22:	920a      	str	r2, [sp, #40]	; 0x28
 8109a24:	4605      	mov	r5, r0
 8109a26:	3b30      	subs	r3, #48	; 0x30
 8109a28:	f100 0201 	add.w	r2, r0, #1
 8109a2c:	d014      	beq.n	8109a58 <_strtod_l+0x248>
 8109a2e:	9907      	ldr	r1, [sp, #28]
 8109a30:	4411      	add	r1, r2
 8109a32:	9107      	str	r1, [sp, #28]
 8109a34:	462a      	mov	r2, r5
 8109a36:	eb00 0e05 	add.w	lr, r0, r5
 8109a3a:	210a      	movs	r1, #10
 8109a3c:	4572      	cmp	r2, lr
 8109a3e:	d113      	bne.n	8109a68 <_strtod_l+0x258>
 8109a40:	182a      	adds	r2, r5, r0
 8109a42:	2a08      	cmp	r2, #8
 8109a44:	f105 0501 	add.w	r5, r5, #1
 8109a48:	4405      	add	r5, r0
 8109a4a:	dc1c      	bgt.n	8109a86 <_strtod_l+0x276>
 8109a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109a4e:	220a      	movs	r2, #10
 8109a50:	fb02 3301 	mla	r3, r2, r1, r3
 8109a54:	9309      	str	r3, [sp, #36]	; 0x24
 8109a56:	2200      	movs	r2, #0
 8109a58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109a5a:	1c59      	adds	r1, r3, #1
 8109a5c:	911d      	str	r1, [sp, #116]	; 0x74
 8109a5e:	785b      	ldrb	r3, [r3, #1]
 8109a60:	4610      	mov	r0, r2
 8109a62:	e7c9      	b.n	81099f8 <_strtod_l+0x1e8>
 8109a64:	4638      	mov	r0, r7
 8109a66:	e7d2      	b.n	8109a0e <_strtod_l+0x1fe>
 8109a68:	2a08      	cmp	r2, #8
 8109a6a:	dc04      	bgt.n	8109a76 <_strtod_l+0x266>
 8109a6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8109a6e:	434e      	muls	r6, r1
 8109a70:	9609      	str	r6, [sp, #36]	; 0x24
 8109a72:	3201      	adds	r2, #1
 8109a74:	e7e2      	b.n	8109a3c <_strtod_l+0x22c>
 8109a76:	f102 0c01 	add.w	ip, r2, #1
 8109a7a:	f1bc 0f10 	cmp.w	ip, #16
 8109a7e:	bfd8      	it	le
 8109a80:	fb01 f909 	mulle.w	r9, r1, r9
 8109a84:	e7f5      	b.n	8109a72 <_strtod_l+0x262>
 8109a86:	2d10      	cmp	r5, #16
 8109a88:	bfdc      	itt	le
 8109a8a:	220a      	movle	r2, #10
 8109a8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8109a90:	e7e1      	b.n	8109a56 <_strtod_l+0x246>
 8109a92:	2300      	movs	r3, #0
 8109a94:	9307      	str	r3, [sp, #28]
 8109a96:	2201      	movs	r2, #1
 8109a98:	e77c      	b.n	8109994 <_strtod_l+0x184>
 8109a9a:	f04f 0c00 	mov.w	ip, #0
 8109a9e:	f108 0302 	add.w	r3, r8, #2
 8109aa2:	931d      	str	r3, [sp, #116]	; 0x74
 8109aa4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8109aa8:	e785      	b.n	81099b6 <_strtod_l+0x1a6>
 8109aaa:	f04f 0c01 	mov.w	ip, #1
 8109aae:	e7f6      	b.n	8109a9e <_strtod_l+0x28e>
 8109ab0:	0810df14 	.word	0x0810df14
 8109ab4:	0810dc5c 	.word	0x0810dc5c
 8109ab8:	7ff00000 	.word	0x7ff00000
 8109abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109abe:	1c59      	adds	r1, r3, #1
 8109ac0:	911d      	str	r1, [sp, #116]	; 0x74
 8109ac2:	785b      	ldrb	r3, [r3, #1]
 8109ac4:	2b30      	cmp	r3, #48	; 0x30
 8109ac6:	d0f9      	beq.n	8109abc <_strtod_l+0x2ac>
 8109ac8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8109acc:	2908      	cmp	r1, #8
 8109ace:	f63f af79 	bhi.w	81099c4 <_strtod_l+0x1b4>
 8109ad2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8109ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109ad8:	9308      	str	r3, [sp, #32]
 8109ada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109adc:	1c59      	adds	r1, r3, #1
 8109ade:	911d      	str	r1, [sp, #116]	; 0x74
 8109ae0:	785b      	ldrb	r3, [r3, #1]
 8109ae2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8109ae6:	2e09      	cmp	r6, #9
 8109ae8:	d937      	bls.n	8109b5a <_strtod_l+0x34a>
 8109aea:	9e08      	ldr	r6, [sp, #32]
 8109aec:	1b89      	subs	r1, r1, r6
 8109aee:	2908      	cmp	r1, #8
 8109af0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8109af4:	dc02      	bgt.n	8109afc <_strtod_l+0x2ec>
 8109af6:	4576      	cmp	r6, lr
 8109af8:	bfa8      	it	ge
 8109afa:	4676      	movge	r6, lr
 8109afc:	f1bc 0f00 	cmp.w	ip, #0
 8109b00:	d000      	beq.n	8109b04 <_strtod_l+0x2f4>
 8109b02:	4276      	negs	r6, r6
 8109b04:	2d00      	cmp	r5, #0
 8109b06:	d14f      	bne.n	8109ba8 <_strtod_l+0x398>
 8109b08:	9904      	ldr	r1, [sp, #16]
 8109b0a:	4301      	orrs	r1, r0
 8109b0c:	f47f aec2 	bne.w	8109894 <_strtod_l+0x84>
 8109b10:	2a00      	cmp	r2, #0
 8109b12:	f47f aedb 	bne.w	81098cc <_strtod_l+0xbc>
 8109b16:	2b69      	cmp	r3, #105	; 0x69
 8109b18:	d027      	beq.n	8109b6a <_strtod_l+0x35a>
 8109b1a:	dc24      	bgt.n	8109b66 <_strtod_l+0x356>
 8109b1c:	2b49      	cmp	r3, #73	; 0x49
 8109b1e:	d024      	beq.n	8109b6a <_strtod_l+0x35a>
 8109b20:	2b4e      	cmp	r3, #78	; 0x4e
 8109b22:	f47f aed3 	bne.w	81098cc <_strtod_l+0xbc>
 8109b26:	499e      	ldr	r1, [pc, #632]	; (8109da0 <_strtod_l+0x590>)
 8109b28:	a81d      	add	r0, sp, #116	; 0x74
 8109b2a:	f002 f8bb 	bl	810bca4 <__match>
 8109b2e:	2800      	cmp	r0, #0
 8109b30:	f43f aecc 	beq.w	81098cc <_strtod_l+0xbc>
 8109b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109b36:	781b      	ldrb	r3, [r3, #0]
 8109b38:	2b28      	cmp	r3, #40	; 0x28
 8109b3a:	d12d      	bne.n	8109b98 <_strtod_l+0x388>
 8109b3c:	4999      	ldr	r1, [pc, #612]	; (8109da4 <_strtod_l+0x594>)
 8109b3e:	aa20      	add	r2, sp, #128	; 0x80
 8109b40:	a81d      	add	r0, sp, #116	; 0x74
 8109b42:	f002 f8c3 	bl	810bccc <__hexnan>
 8109b46:	2805      	cmp	r0, #5
 8109b48:	d126      	bne.n	8109b98 <_strtod_l+0x388>
 8109b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109b4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8109b50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8109b54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8109b58:	e69c      	b.n	8109894 <_strtod_l+0x84>
 8109b5a:	210a      	movs	r1, #10
 8109b5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8109b60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8109b64:	e7b9      	b.n	8109ada <_strtod_l+0x2ca>
 8109b66:	2b6e      	cmp	r3, #110	; 0x6e
 8109b68:	e7db      	b.n	8109b22 <_strtod_l+0x312>
 8109b6a:	498f      	ldr	r1, [pc, #572]	; (8109da8 <_strtod_l+0x598>)
 8109b6c:	a81d      	add	r0, sp, #116	; 0x74
 8109b6e:	f002 f899 	bl	810bca4 <__match>
 8109b72:	2800      	cmp	r0, #0
 8109b74:	f43f aeaa 	beq.w	81098cc <_strtod_l+0xbc>
 8109b78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109b7a:	498c      	ldr	r1, [pc, #560]	; (8109dac <_strtod_l+0x59c>)
 8109b7c:	3b01      	subs	r3, #1
 8109b7e:	a81d      	add	r0, sp, #116	; 0x74
 8109b80:	931d      	str	r3, [sp, #116]	; 0x74
 8109b82:	f002 f88f 	bl	810bca4 <__match>
 8109b86:	b910      	cbnz	r0, 8109b8e <_strtod_l+0x37e>
 8109b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109b8a:	3301      	adds	r3, #1
 8109b8c:	931d      	str	r3, [sp, #116]	; 0x74
 8109b8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8109dbc <_strtod_l+0x5ac>
 8109b92:	f04f 0a00 	mov.w	sl, #0
 8109b96:	e67d      	b.n	8109894 <_strtod_l+0x84>
 8109b98:	4885      	ldr	r0, [pc, #532]	; (8109db0 <_strtod_l+0x5a0>)
 8109b9a:	f003 f825 	bl	810cbe8 <nan>
 8109b9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8109ba2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8109ba6:	e675      	b.n	8109894 <_strtod_l+0x84>
 8109ba8:	9b07      	ldr	r3, [sp, #28]
 8109baa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109bac:	1af3      	subs	r3, r6, r3
 8109bae:	2f00      	cmp	r7, #0
 8109bb0:	bf08      	it	eq
 8109bb2:	462f      	moveq	r7, r5
 8109bb4:	2d10      	cmp	r5, #16
 8109bb6:	9308      	str	r3, [sp, #32]
 8109bb8:	46a8      	mov	r8, r5
 8109bba:	bfa8      	it	ge
 8109bbc:	f04f 0810 	movge.w	r8, #16
 8109bc0:	f7f6 fd38 	bl	8100634 <__aeabi_ui2d>
 8109bc4:	2d09      	cmp	r5, #9
 8109bc6:	4682      	mov	sl, r0
 8109bc8:	468b      	mov	fp, r1
 8109bca:	dd13      	ble.n	8109bf4 <_strtod_l+0x3e4>
 8109bcc:	4b79      	ldr	r3, [pc, #484]	; (8109db4 <_strtod_l+0x5a4>)
 8109bce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8109bd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8109bd6:	f7f6 fda7 	bl	8100728 <__aeabi_dmul>
 8109bda:	4682      	mov	sl, r0
 8109bdc:	4648      	mov	r0, r9
 8109bde:	468b      	mov	fp, r1
 8109be0:	f7f6 fd28 	bl	8100634 <__aeabi_ui2d>
 8109be4:	4602      	mov	r2, r0
 8109be6:	460b      	mov	r3, r1
 8109be8:	4650      	mov	r0, sl
 8109bea:	4659      	mov	r1, fp
 8109bec:	f7f6 fbe6 	bl	81003bc <__adddf3>
 8109bf0:	4682      	mov	sl, r0
 8109bf2:	468b      	mov	fp, r1
 8109bf4:	2d0f      	cmp	r5, #15
 8109bf6:	dc38      	bgt.n	8109c6a <_strtod_l+0x45a>
 8109bf8:	9b08      	ldr	r3, [sp, #32]
 8109bfa:	2b00      	cmp	r3, #0
 8109bfc:	f43f ae4a 	beq.w	8109894 <_strtod_l+0x84>
 8109c00:	dd24      	ble.n	8109c4c <_strtod_l+0x43c>
 8109c02:	2b16      	cmp	r3, #22
 8109c04:	dc0b      	bgt.n	8109c1e <_strtod_l+0x40e>
 8109c06:	4d6b      	ldr	r5, [pc, #428]	; (8109db4 <_strtod_l+0x5a4>)
 8109c08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8109c0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8109c10:	4652      	mov	r2, sl
 8109c12:	465b      	mov	r3, fp
 8109c14:	f7f6 fd88 	bl	8100728 <__aeabi_dmul>
 8109c18:	4682      	mov	sl, r0
 8109c1a:	468b      	mov	fp, r1
 8109c1c:	e63a      	b.n	8109894 <_strtod_l+0x84>
 8109c1e:	9a08      	ldr	r2, [sp, #32]
 8109c20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8109c24:	4293      	cmp	r3, r2
 8109c26:	db20      	blt.n	8109c6a <_strtod_l+0x45a>
 8109c28:	4c62      	ldr	r4, [pc, #392]	; (8109db4 <_strtod_l+0x5a4>)
 8109c2a:	f1c5 050f 	rsb	r5, r5, #15
 8109c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8109c32:	4652      	mov	r2, sl
 8109c34:	465b      	mov	r3, fp
 8109c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109c3a:	f7f6 fd75 	bl	8100728 <__aeabi_dmul>
 8109c3e:	9b08      	ldr	r3, [sp, #32]
 8109c40:	1b5d      	subs	r5, r3, r5
 8109c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8109c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8109c4a:	e7e3      	b.n	8109c14 <_strtod_l+0x404>
 8109c4c:	9b08      	ldr	r3, [sp, #32]
 8109c4e:	3316      	adds	r3, #22
 8109c50:	db0b      	blt.n	8109c6a <_strtod_l+0x45a>
 8109c52:	9b07      	ldr	r3, [sp, #28]
 8109c54:	4a57      	ldr	r2, [pc, #348]	; (8109db4 <_strtod_l+0x5a4>)
 8109c56:	1b9e      	subs	r6, r3, r6
 8109c58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8109c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109c60:	4650      	mov	r0, sl
 8109c62:	4659      	mov	r1, fp
 8109c64:	f7f6 fe8a 	bl	810097c <__aeabi_ddiv>
 8109c68:	e7d6      	b.n	8109c18 <_strtod_l+0x408>
 8109c6a:	9b08      	ldr	r3, [sp, #32]
 8109c6c:	eba5 0808 	sub.w	r8, r5, r8
 8109c70:	4498      	add	r8, r3
 8109c72:	f1b8 0f00 	cmp.w	r8, #0
 8109c76:	dd71      	ble.n	8109d5c <_strtod_l+0x54c>
 8109c78:	f018 030f 	ands.w	r3, r8, #15
 8109c7c:	d00a      	beq.n	8109c94 <_strtod_l+0x484>
 8109c7e:	494d      	ldr	r1, [pc, #308]	; (8109db4 <_strtod_l+0x5a4>)
 8109c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109c84:	4652      	mov	r2, sl
 8109c86:	465b      	mov	r3, fp
 8109c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109c8c:	f7f6 fd4c 	bl	8100728 <__aeabi_dmul>
 8109c90:	4682      	mov	sl, r0
 8109c92:	468b      	mov	fp, r1
 8109c94:	f038 080f 	bics.w	r8, r8, #15
 8109c98:	d04d      	beq.n	8109d36 <_strtod_l+0x526>
 8109c9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8109c9e:	dd22      	ble.n	8109ce6 <_strtod_l+0x4d6>
 8109ca0:	2500      	movs	r5, #0
 8109ca2:	462e      	mov	r6, r5
 8109ca4:	9509      	str	r5, [sp, #36]	; 0x24
 8109ca6:	9507      	str	r5, [sp, #28]
 8109ca8:	2322      	movs	r3, #34	; 0x22
 8109caa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8109dbc <_strtod_l+0x5ac>
 8109cae:	6023      	str	r3, [r4, #0]
 8109cb0:	f04f 0a00 	mov.w	sl, #0
 8109cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109cb6:	2b00      	cmp	r3, #0
 8109cb8:	f43f adec 	beq.w	8109894 <_strtod_l+0x84>
 8109cbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8109cbe:	4620      	mov	r0, r4
 8109cc0:	f002 f984 	bl	810bfcc <_Bfree>
 8109cc4:	9907      	ldr	r1, [sp, #28]
 8109cc6:	4620      	mov	r0, r4
 8109cc8:	f002 f980 	bl	810bfcc <_Bfree>
 8109ccc:	4631      	mov	r1, r6
 8109cce:	4620      	mov	r0, r4
 8109cd0:	f002 f97c 	bl	810bfcc <_Bfree>
 8109cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109cd6:	4620      	mov	r0, r4
 8109cd8:	f002 f978 	bl	810bfcc <_Bfree>
 8109cdc:	4629      	mov	r1, r5
 8109cde:	4620      	mov	r0, r4
 8109ce0:	f002 f974 	bl	810bfcc <_Bfree>
 8109ce4:	e5d6      	b.n	8109894 <_strtod_l+0x84>
 8109ce6:	2300      	movs	r3, #0
 8109ce8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8109cec:	4650      	mov	r0, sl
 8109cee:	4659      	mov	r1, fp
 8109cf0:	4699      	mov	r9, r3
 8109cf2:	f1b8 0f01 	cmp.w	r8, #1
 8109cf6:	dc21      	bgt.n	8109d3c <_strtod_l+0x52c>
 8109cf8:	b10b      	cbz	r3, 8109cfe <_strtod_l+0x4ee>
 8109cfa:	4682      	mov	sl, r0
 8109cfc:	468b      	mov	fp, r1
 8109cfe:	4b2e      	ldr	r3, [pc, #184]	; (8109db8 <_strtod_l+0x5a8>)
 8109d00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8109d04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8109d08:	4652      	mov	r2, sl
 8109d0a:	465b      	mov	r3, fp
 8109d0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8109d10:	f7f6 fd0a 	bl	8100728 <__aeabi_dmul>
 8109d14:	4b29      	ldr	r3, [pc, #164]	; (8109dbc <_strtod_l+0x5ac>)
 8109d16:	460a      	mov	r2, r1
 8109d18:	400b      	ands	r3, r1
 8109d1a:	4929      	ldr	r1, [pc, #164]	; (8109dc0 <_strtod_l+0x5b0>)
 8109d1c:	428b      	cmp	r3, r1
 8109d1e:	4682      	mov	sl, r0
 8109d20:	d8be      	bhi.n	8109ca0 <_strtod_l+0x490>
 8109d22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8109d26:	428b      	cmp	r3, r1
 8109d28:	bf86      	itte	hi
 8109d2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8109dc4 <_strtod_l+0x5b4>
 8109d2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8109d32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8109d36:	2300      	movs	r3, #0
 8109d38:	9304      	str	r3, [sp, #16]
 8109d3a:	e081      	b.n	8109e40 <_strtod_l+0x630>
 8109d3c:	f018 0f01 	tst.w	r8, #1
 8109d40:	d007      	beq.n	8109d52 <_strtod_l+0x542>
 8109d42:	4b1d      	ldr	r3, [pc, #116]	; (8109db8 <_strtod_l+0x5a8>)
 8109d44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8109d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d4c:	f7f6 fcec 	bl	8100728 <__aeabi_dmul>
 8109d50:	2301      	movs	r3, #1
 8109d52:	f109 0901 	add.w	r9, r9, #1
 8109d56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8109d5a:	e7ca      	b.n	8109cf2 <_strtod_l+0x4e2>
 8109d5c:	d0eb      	beq.n	8109d36 <_strtod_l+0x526>
 8109d5e:	f1c8 0800 	rsb	r8, r8, #0
 8109d62:	f018 020f 	ands.w	r2, r8, #15
 8109d66:	d00a      	beq.n	8109d7e <_strtod_l+0x56e>
 8109d68:	4b12      	ldr	r3, [pc, #72]	; (8109db4 <_strtod_l+0x5a4>)
 8109d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109d6e:	4650      	mov	r0, sl
 8109d70:	4659      	mov	r1, fp
 8109d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d76:	f7f6 fe01 	bl	810097c <__aeabi_ddiv>
 8109d7a:	4682      	mov	sl, r0
 8109d7c:	468b      	mov	fp, r1
 8109d7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8109d82:	d0d8      	beq.n	8109d36 <_strtod_l+0x526>
 8109d84:	f1b8 0f1f 	cmp.w	r8, #31
 8109d88:	dd1e      	ble.n	8109dc8 <_strtod_l+0x5b8>
 8109d8a:	2500      	movs	r5, #0
 8109d8c:	462e      	mov	r6, r5
 8109d8e:	9509      	str	r5, [sp, #36]	; 0x24
 8109d90:	9507      	str	r5, [sp, #28]
 8109d92:	2322      	movs	r3, #34	; 0x22
 8109d94:	f04f 0a00 	mov.w	sl, #0
 8109d98:	f04f 0b00 	mov.w	fp, #0
 8109d9c:	6023      	str	r3, [r4, #0]
 8109d9e:	e789      	b.n	8109cb4 <_strtod_l+0x4a4>
 8109da0:	0810dc2e 	.word	0x0810dc2e
 8109da4:	0810dc70 	.word	0x0810dc70
 8109da8:	0810dc26 	.word	0x0810dc26
 8109dac:	0810ddb4 	.word	0x0810ddb4
 8109db0:	0810dc09 	.word	0x0810dc09
 8109db4:	0810dfb0 	.word	0x0810dfb0
 8109db8:	0810df88 	.word	0x0810df88
 8109dbc:	7ff00000 	.word	0x7ff00000
 8109dc0:	7ca00000 	.word	0x7ca00000
 8109dc4:	7fefffff 	.word	0x7fefffff
 8109dc8:	f018 0310 	ands.w	r3, r8, #16
 8109dcc:	bf18      	it	ne
 8109dce:	236a      	movne	r3, #106	; 0x6a
 8109dd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 810a188 <_strtod_l+0x978>
 8109dd4:	9304      	str	r3, [sp, #16]
 8109dd6:	4650      	mov	r0, sl
 8109dd8:	4659      	mov	r1, fp
 8109dda:	2300      	movs	r3, #0
 8109ddc:	f018 0f01 	tst.w	r8, #1
 8109de0:	d004      	beq.n	8109dec <_strtod_l+0x5dc>
 8109de2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8109de6:	f7f6 fc9f 	bl	8100728 <__aeabi_dmul>
 8109dea:	2301      	movs	r3, #1
 8109dec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8109df0:	f109 0908 	add.w	r9, r9, #8
 8109df4:	d1f2      	bne.n	8109ddc <_strtod_l+0x5cc>
 8109df6:	b10b      	cbz	r3, 8109dfc <_strtod_l+0x5ec>
 8109df8:	4682      	mov	sl, r0
 8109dfa:	468b      	mov	fp, r1
 8109dfc:	9b04      	ldr	r3, [sp, #16]
 8109dfe:	b1bb      	cbz	r3, 8109e30 <_strtod_l+0x620>
 8109e00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8109e04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109e08:	2b00      	cmp	r3, #0
 8109e0a:	4659      	mov	r1, fp
 8109e0c:	dd10      	ble.n	8109e30 <_strtod_l+0x620>
 8109e0e:	2b1f      	cmp	r3, #31
 8109e10:	f340 8128 	ble.w	810a064 <_strtod_l+0x854>
 8109e14:	2b34      	cmp	r3, #52	; 0x34
 8109e16:	bfde      	ittt	le
 8109e18:	3b20      	suble	r3, #32
 8109e1a:	f04f 32ff 	movle.w	r2, #4294967295
 8109e1e:	fa02 f303 	lslle.w	r3, r2, r3
 8109e22:	f04f 0a00 	mov.w	sl, #0
 8109e26:	bfcc      	ite	gt
 8109e28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8109e2c:	ea03 0b01 	andle.w	fp, r3, r1
 8109e30:	2200      	movs	r2, #0
 8109e32:	2300      	movs	r3, #0
 8109e34:	4650      	mov	r0, sl
 8109e36:	4659      	mov	r1, fp
 8109e38:	f7f6 fede 	bl	8100bf8 <__aeabi_dcmpeq>
 8109e3c:	2800      	cmp	r0, #0
 8109e3e:	d1a4      	bne.n	8109d8a <_strtod_l+0x57a>
 8109e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e42:	9300      	str	r3, [sp, #0]
 8109e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8109e46:	462b      	mov	r3, r5
 8109e48:	463a      	mov	r2, r7
 8109e4a:	4620      	mov	r0, r4
 8109e4c:	f002 f92a 	bl	810c0a4 <__s2b>
 8109e50:	9009      	str	r0, [sp, #36]	; 0x24
 8109e52:	2800      	cmp	r0, #0
 8109e54:	f43f af24 	beq.w	8109ca0 <_strtod_l+0x490>
 8109e58:	9b07      	ldr	r3, [sp, #28]
 8109e5a:	1b9e      	subs	r6, r3, r6
 8109e5c:	9b08      	ldr	r3, [sp, #32]
 8109e5e:	2b00      	cmp	r3, #0
 8109e60:	bfb4      	ite	lt
 8109e62:	4633      	movlt	r3, r6
 8109e64:	2300      	movge	r3, #0
 8109e66:	9310      	str	r3, [sp, #64]	; 0x40
 8109e68:	9b08      	ldr	r3, [sp, #32]
 8109e6a:	2500      	movs	r5, #0
 8109e6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8109e70:	9318      	str	r3, [sp, #96]	; 0x60
 8109e72:	462e      	mov	r6, r5
 8109e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e76:	4620      	mov	r0, r4
 8109e78:	6859      	ldr	r1, [r3, #4]
 8109e7a:	f002 f867 	bl	810bf4c <_Balloc>
 8109e7e:	9007      	str	r0, [sp, #28]
 8109e80:	2800      	cmp	r0, #0
 8109e82:	f43f af11 	beq.w	8109ca8 <_strtod_l+0x498>
 8109e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e88:	691a      	ldr	r2, [r3, #16]
 8109e8a:	3202      	adds	r2, #2
 8109e8c:	f103 010c 	add.w	r1, r3, #12
 8109e90:	0092      	lsls	r2, r2, #2
 8109e92:	300c      	adds	r0, #12
 8109e94:	f7fe fbae 	bl	81085f4 <memcpy>
 8109e98:	ec4b ab10 	vmov	d0, sl, fp
 8109e9c:	aa20      	add	r2, sp, #128	; 0x80
 8109e9e:	a91f      	add	r1, sp, #124	; 0x7c
 8109ea0:	4620      	mov	r0, r4
 8109ea2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8109ea6:	f002 fc39 	bl	810c71c <__d2b>
 8109eaa:	901e      	str	r0, [sp, #120]	; 0x78
 8109eac:	2800      	cmp	r0, #0
 8109eae:	f43f aefb 	beq.w	8109ca8 <_strtod_l+0x498>
 8109eb2:	2101      	movs	r1, #1
 8109eb4:	4620      	mov	r0, r4
 8109eb6:	f002 f98f 	bl	810c1d8 <__i2b>
 8109eba:	4606      	mov	r6, r0
 8109ebc:	2800      	cmp	r0, #0
 8109ebe:	f43f aef3 	beq.w	8109ca8 <_strtod_l+0x498>
 8109ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8109ec4:	9904      	ldr	r1, [sp, #16]
 8109ec6:	2b00      	cmp	r3, #0
 8109ec8:	bfab      	itete	ge
 8109eca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8109ecc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8109ece:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8109ed0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8109ed4:	bfac      	ite	ge
 8109ed6:	eb03 0902 	addge.w	r9, r3, r2
 8109eda:	1ad7      	sublt	r7, r2, r3
 8109edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8109ede:	eba3 0801 	sub.w	r8, r3, r1
 8109ee2:	4490      	add	r8, r2
 8109ee4:	4ba3      	ldr	r3, [pc, #652]	; (810a174 <_strtod_l+0x964>)
 8109ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8109eea:	4598      	cmp	r8, r3
 8109eec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109ef0:	f280 80cc 	bge.w	810a08c <_strtod_l+0x87c>
 8109ef4:	eba3 0308 	sub.w	r3, r3, r8
 8109ef8:	2b1f      	cmp	r3, #31
 8109efa:	eba2 0203 	sub.w	r2, r2, r3
 8109efe:	f04f 0101 	mov.w	r1, #1
 8109f02:	f300 80b6 	bgt.w	810a072 <_strtod_l+0x862>
 8109f06:	fa01 f303 	lsl.w	r3, r1, r3
 8109f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8109f0c:	2300      	movs	r3, #0
 8109f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8109f10:	eb09 0802 	add.w	r8, r9, r2
 8109f14:	9b04      	ldr	r3, [sp, #16]
 8109f16:	45c1      	cmp	r9, r8
 8109f18:	4417      	add	r7, r2
 8109f1a:	441f      	add	r7, r3
 8109f1c:	464b      	mov	r3, r9
 8109f1e:	bfa8      	it	ge
 8109f20:	4643      	movge	r3, r8
 8109f22:	42bb      	cmp	r3, r7
 8109f24:	bfa8      	it	ge
 8109f26:	463b      	movge	r3, r7
 8109f28:	2b00      	cmp	r3, #0
 8109f2a:	bfc2      	ittt	gt
 8109f2c:	eba8 0803 	subgt.w	r8, r8, r3
 8109f30:	1aff      	subgt	r7, r7, r3
 8109f32:	eba9 0903 	subgt.w	r9, r9, r3
 8109f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8109f38:	2b00      	cmp	r3, #0
 8109f3a:	dd17      	ble.n	8109f6c <_strtod_l+0x75c>
 8109f3c:	4631      	mov	r1, r6
 8109f3e:	461a      	mov	r2, r3
 8109f40:	4620      	mov	r0, r4
 8109f42:	f002 fa05 	bl	810c350 <__pow5mult>
 8109f46:	4606      	mov	r6, r0
 8109f48:	2800      	cmp	r0, #0
 8109f4a:	f43f aead 	beq.w	8109ca8 <_strtod_l+0x498>
 8109f4e:	4601      	mov	r1, r0
 8109f50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8109f52:	4620      	mov	r0, r4
 8109f54:	f002 f956 	bl	810c204 <__multiply>
 8109f58:	900f      	str	r0, [sp, #60]	; 0x3c
 8109f5a:	2800      	cmp	r0, #0
 8109f5c:	f43f aea4 	beq.w	8109ca8 <_strtod_l+0x498>
 8109f60:	991e      	ldr	r1, [sp, #120]	; 0x78
 8109f62:	4620      	mov	r0, r4
 8109f64:	f002 f832 	bl	810bfcc <_Bfree>
 8109f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109f6a:	931e      	str	r3, [sp, #120]	; 0x78
 8109f6c:	f1b8 0f00 	cmp.w	r8, #0
 8109f70:	f300 8091 	bgt.w	810a096 <_strtod_l+0x886>
 8109f74:	9b08      	ldr	r3, [sp, #32]
 8109f76:	2b00      	cmp	r3, #0
 8109f78:	dd08      	ble.n	8109f8c <_strtod_l+0x77c>
 8109f7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109f7c:	9907      	ldr	r1, [sp, #28]
 8109f7e:	4620      	mov	r0, r4
 8109f80:	f002 f9e6 	bl	810c350 <__pow5mult>
 8109f84:	9007      	str	r0, [sp, #28]
 8109f86:	2800      	cmp	r0, #0
 8109f88:	f43f ae8e 	beq.w	8109ca8 <_strtod_l+0x498>
 8109f8c:	2f00      	cmp	r7, #0
 8109f8e:	dd08      	ble.n	8109fa2 <_strtod_l+0x792>
 8109f90:	9907      	ldr	r1, [sp, #28]
 8109f92:	463a      	mov	r2, r7
 8109f94:	4620      	mov	r0, r4
 8109f96:	f002 fa35 	bl	810c404 <__lshift>
 8109f9a:	9007      	str	r0, [sp, #28]
 8109f9c:	2800      	cmp	r0, #0
 8109f9e:	f43f ae83 	beq.w	8109ca8 <_strtod_l+0x498>
 8109fa2:	f1b9 0f00 	cmp.w	r9, #0
 8109fa6:	dd08      	ble.n	8109fba <_strtod_l+0x7aa>
 8109fa8:	4631      	mov	r1, r6
 8109faa:	464a      	mov	r2, r9
 8109fac:	4620      	mov	r0, r4
 8109fae:	f002 fa29 	bl	810c404 <__lshift>
 8109fb2:	4606      	mov	r6, r0
 8109fb4:	2800      	cmp	r0, #0
 8109fb6:	f43f ae77 	beq.w	8109ca8 <_strtod_l+0x498>
 8109fba:	9a07      	ldr	r2, [sp, #28]
 8109fbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8109fbe:	4620      	mov	r0, r4
 8109fc0:	f002 faa8 	bl	810c514 <__mdiff>
 8109fc4:	4605      	mov	r5, r0
 8109fc6:	2800      	cmp	r0, #0
 8109fc8:	f43f ae6e 	beq.w	8109ca8 <_strtod_l+0x498>
 8109fcc:	68c3      	ldr	r3, [r0, #12]
 8109fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8109fd0:	2300      	movs	r3, #0
 8109fd2:	60c3      	str	r3, [r0, #12]
 8109fd4:	4631      	mov	r1, r6
 8109fd6:	f002 fa81 	bl	810c4dc <__mcmp>
 8109fda:	2800      	cmp	r0, #0
 8109fdc:	da65      	bge.n	810a0aa <_strtod_l+0x89a>
 8109fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8109fe4:	f040 8087 	bne.w	810a0f6 <_strtod_l+0x8e6>
 8109fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109fec:	2b00      	cmp	r3, #0
 8109fee:	f040 8082 	bne.w	810a0f6 <_strtod_l+0x8e6>
 8109ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109ff6:	0d1b      	lsrs	r3, r3, #20
 8109ff8:	051b      	lsls	r3, r3, #20
 8109ffa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8109ffe:	d97a      	bls.n	810a0f6 <_strtod_l+0x8e6>
 810a000:	696b      	ldr	r3, [r5, #20]
 810a002:	b913      	cbnz	r3, 810a00a <_strtod_l+0x7fa>
 810a004:	692b      	ldr	r3, [r5, #16]
 810a006:	2b01      	cmp	r3, #1
 810a008:	dd75      	ble.n	810a0f6 <_strtod_l+0x8e6>
 810a00a:	4629      	mov	r1, r5
 810a00c:	2201      	movs	r2, #1
 810a00e:	4620      	mov	r0, r4
 810a010:	f002 f9f8 	bl	810c404 <__lshift>
 810a014:	4631      	mov	r1, r6
 810a016:	4605      	mov	r5, r0
 810a018:	f002 fa60 	bl	810c4dc <__mcmp>
 810a01c:	2800      	cmp	r0, #0
 810a01e:	dd6a      	ble.n	810a0f6 <_strtod_l+0x8e6>
 810a020:	9904      	ldr	r1, [sp, #16]
 810a022:	4a55      	ldr	r2, [pc, #340]	; (810a178 <_strtod_l+0x968>)
 810a024:	465b      	mov	r3, fp
 810a026:	2900      	cmp	r1, #0
 810a028:	f000 8085 	beq.w	810a136 <_strtod_l+0x926>
 810a02c:	ea02 010b 	and.w	r1, r2, fp
 810a030:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a034:	dc7f      	bgt.n	810a136 <_strtod_l+0x926>
 810a036:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a03a:	f77f aeaa 	ble.w	8109d92 <_strtod_l+0x582>
 810a03e:	4a4f      	ldr	r2, [pc, #316]	; (810a17c <_strtod_l+0x96c>)
 810a040:	2300      	movs	r3, #0
 810a042:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 810a046:	4650      	mov	r0, sl
 810a048:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 810a04c:	4659      	mov	r1, fp
 810a04e:	f7f6 fb6b 	bl	8100728 <__aeabi_dmul>
 810a052:	460b      	mov	r3, r1
 810a054:	4303      	orrs	r3, r0
 810a056:	bf08      	it	eq
 810a058:	2322      	moveq	r3, #34	; 0x22
 810a05a:	4682      	mov	sl, r0
 810a05c:	468b      	mov	fp, r1
 810a05e:	bf08      	it	eq
 810a060:	6023      	streq	r3, [r4, #0]
 810a062:	e62b      	b.n	8109cbc <_strtod_l+0x4ac>
 810a064:	f04f 32ff 	mov.w	r2, #4294967295
 810a068:	fa02 f303 	lsl.w	r3, r2, r3
 810a06c:	ea03 0a0a 	and.w	sl, r3, sl
 810a070:	e6de      	b.n	8109e30 <_strtod_l+0x620>
 810a072:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810a076:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810a07a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810a07e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810a082:	fa01 f308 	lsl.w	r3, r1, r8
 810a086:	930c      	str	r3, [sp, #48]	; 0x30
 810a088:	9111      	str	r1, [sp, #68]	; 0x44
 810a08a:	e741      	b.n	8109f10 <_strtod_l+0x700>
 810a08c:	2300      	movs	r3, #0
 810a08e:	930c      	str	r3, [sp, #48]	; 0x30
 810a090:	2301      	movs	r3, #1
 810a092:	9311      	str	r3, [sp, #68]	; 0x44
 810a094:	e73c      	b.n	8109f10 <_strtod_l+0x700>
 810a096:	991e      	ldr	r1, [sp, #120]	; 0x78
 810a098:	4642      	mov	r2, r8
 810a09a:	4620      	mov	r0, r4
 810a09c:	f002 f9b2 	bl	810c404 <__lshift>
 810a0a0:	901e      	str	r0, [sp, #120]	; 0x78
 810a0a2:	2800      	cmp	r0, #0
 810a0a4:	f47f af66 	bne.w	8109f74 <_strtod_l+0x764>
 810a0a8:	e5fe      	b.n	8109ca8 <_strtod_l+0x498>
 810a0aa:	465f      	mov	r7, fp
 810a0ac:	d16e      	bne.n	810a18c <_strtod_l+0x97c>
 810a0ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810a0b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a0b4:	b342      	cbz	r2, 810a108 <_strtod_l+0x8f8>
 810a0b6:	4a32      	ldr	r2, [pc, #200]	; (810a180 <_strtod_l+0x970>)
 810a0b8:	4293      	cmp	r3, r2
 810a0ba:	d128      	bne.n	810a10e <_strtod_l+0x8fe>
 810a0bc:	9b04      	ldr	r3, [sp, #16]
 810a0be:	4650      	mov	r0, sl
 810a0c0:	b1eb      	cbz	r3, 810a0fe <_strtod_l+0x8ee>
 810a0c2:	4a2d      	ldr	r2, [pc, #180]	; (810a178 <_strtod_l+0x968>)
 810a0c4:	403a      	ands	r2, r7
 810a0c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 810a0ca:	f04f 31ff 	mov.w	r1, #4294967295
 810a0ce:	d819      	bhi.n	810a104 <_strtod_l+0x8f4>
 810a0d0:	0d12      	lsrs	r2, r2, #20
 810a0d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a0d6:	fa01 f303 	lsl.w	r3, r1, r3
 810a0da:	4298      	cmp	r0, r3
 810a0dc:	d117      	bne.n	810a10e <_strtod_l+0x8fe>
 810a0de:	4b29      	ldr	r3, [pc, #164]	; (810a184 <_strtod_l+0x974>)
 810a0e0:	429f      	cmp	r7, r3
 810a0e2:	d102      	bne.n	810a0ea <_strtod_l+0x8da>
 810a0e4:	3001      	adds	r0, #1
 810a0e6:	f43f addf 	beq.w	8109ca8 <_strtod_l+0x498>
 810a0ea:	4b23      	ldr	r3, [pc, #140]	; (810a178 <_strtod_l+0x968>)
 810a0ec:	403b      	ands	r3, r7
 810a0ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810a0f2:	f04f 0a00 	mov.w	sl, #0
 810a0f6:	9b04      	ldr	r3, [sp, #16]
 810a0f8:	2b00      	cmp	r3, #0
 810a0fa:	d1a0      	bne.n	810a03e <_strtod_l+0x82e>
 810a0fc:	e5de      	b.n	8109cbc <_strtod_l+0x4ac>
 810a0fe:	f04f 33ff 	mov.w	r3, #4294967295
 810a102:	e7ea      	b.n	810a0da <_strtod_l+0x8ca>
 810a104:	460b      	mov	r3, r1
 810a106:	e7e8      	b.n	810a0da <_strtod_l+0x8ca>
 810a108:	ea53 030a 	orrs.w	r3, r3, sl
 810a10c:	d088      	beq.n	810a020 <_strtod_l+0x810>
 810a10e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a110:	b1db      	cbz	r3, 810a14a <_strtod_l+0x93a>
 810a112:	423b      	tst	r3, r7
 810a114:	d0ef      	beq.n	810a0f6 <_strtod_l+0x8e6>
 810a116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810a118:	9a04      	ldr	r2, [sp, #16]
 810a11a:	4650      	mov	r0, sl
 810a11c:	4659      	mov	r1, fp
 810a11e:	b1c3      	cbz	r3, 810a152 <_strtod_l+0x942>
 810a120:	f7ff fb57 	bl	81097d2 <sulp>
 810a124:	4602      	mov	r2, r0
 810a126:	460b      	mov	r3, r1
 810a128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810a12c:	f7f6 f946 	bl	81003bc <__adddf3>
 810a130:	4682      	mov	sl, r0
 810a132:	468b      	mov	fp, r1
 810a134:	e7df      	b.n	810a0f6 <_strtod_l+0x8e6>
 810a136:	4013      	ands	r3, r2
 810a138:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a13c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810a140:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810a144:	f04f 3aff 	mov.w	sl, #4294967295
 810a148:	e7d5      	b.n	810a0f6 <_strtod_l+0x8e6>
 810a14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a14c:	ea13 0f0a 	tst.w	r3, sl
 810a150:	e7e0      	b.n	810a114 <_strtod_l+0x904>
 810a152:	f7ff fb3e 	bl	81097d2 <sulp>
 810a156:	4602      	mov	r2, r0
 810a158:	460b      	mov	r3, r1
 810a15a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810a15e:	f7f6 f92b 	bl	81003b8 <__aeabi_dsub>
 810a162:	2200      	movs	r2, #0
 810a164:	2300      	movs	r3, #0
 810a166:	4682      	mov	sl, r0
 810a168:	468b      	mov	fp, r1
 810a16a:	f7f6 fd45 	bl	8100bf8 <__aeabi_dcmpeq>
 810a16e:	2800      	cmp	r0, #0
 810a170:	d0c1      	beq.n	810a0f6 <_strtod_l+0x8e6>
 810a172:	e60e      	b.n	8109d92 <_strtod_l+0x582>
 810a174:	fffffc02 	.word	0xfffffc02
 810a178:	7ff00000 	.word	0x7ff00000
 810a17c:	39500000 	.word	0x39500000
 810a180:	000fffff 	.word	0x000fffff
 810a184:	7fefffff 	.word	0x7fefffff
 810a188:	0810dc88 	.word	0x0810dc88
 810a18c:	4631      	mov	r1, r6
 810a18e:	4628      	mov	r0, r5
 810a190:	f002 fb20 	bl	810c7d4 <__ratio>
 810a194:	ec59 8b10 	vmov	r8, r9, d0
 810a198:	ee10 0a10 	vmov	r0, s0
 810a19c:	2200      	movs	r2, #0
 810a19e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a1a2:	4649      	mov	r1, r9
 810a1a4:	f7f6 fd3c 	bl	8100c20 <__aeabi_dcmple>
 810a1a8:	2800      	cmp	r0, #0
 810a1aa:	d07c      	beq.n	810a2a6 <_strtod_l+0xa96>
 810a1ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810a1ae:	2b00      	cmp	r3, #0
 810a1b0:	d04c      	beq.n	810a24c <_strtod_l+0xa3c>
 810a1b2:	4b95      	ldr	r3, [pc, #596]	; (810a408 <_strtod_l+0xbf8>)
 810a1b4:	2200      	movs	r2, #0
 810a1b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810a1ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810a408 <_strtod_l+0xbf8>
 810a1be:	f04f 0800 	mov.w	r8, #0
 810a1c2:	4b92      	ldr	r3, [pc, #584]	; (810a40c <_strtod_l+0xbfc>)
 810a1c4:	403b      	ands	r3, r7
 810a1c6:	9311      	str	r3, [sp, #68]	; 0x44
 810a1c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810a1ca:	4b91      	ldr	r3, [pc, #580]	; (810a410 <_strtod_l+0xc00>)
 810a1cc:	429a      	cmp	r2, r3
 810a1ce:	f040 80b2 	bne.w	810a336 <_strtod_l+0xb26>
 810a1d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810a1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810a1da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810a1de:	ec4b ab10 	vmov	d0, sl, fp
 810a1e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 810a1e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810a1ea:	f002 fa1b 	bl	810c624 <__ulp>
 810a1ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810a1f2:	ec53 2b10 	vmov	r2, r3, d0
 810a1f6:	f7f6 fa97 	bl	8100728 <__aeabi_dmul>
 810a1fa:	4652      	mov	r2, sl
 810a1fc:	465b      	mov	r3, fp
 810a1fe:	f7f6 f8dd 	bl	81003bc <__adddf3>
 810a202:	460b      	mov	r3, r1
 810a204:	4981      	ldr	r1, [pc, #516]	; (810a40c <_strtod_l+0xbfc>)
 810a206:	4a83      	ldr	r2, [pc, #524]	; (810a414 <_strtod_l+0xc04>)
 810a208:	4019      	ands	r1, r3
 810a20a:	4291      	cmp	r1, r2
 810a20c:	4682      	mov	sl, r0
 810a20e:	d95e      	bls.n	810a2ce <_strtod_l+0xabe>
 810a210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a212:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810a216:	4293      	cmp	r3, r2
 810a218:	d103      	bne.n	810a222 <_strtod_l+0xa12>
 810a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a21c:	3301      	adds	r3, #1
 810a21e:	f43f ad43 	beq.w	8109ca8 <_strtod_l+0x498>
 810a222:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 810a420 <_strtod_l+0xc10>
 810a226:	f04f 3aff 	mov.w	sl, #4294967295
 810a22a:	991e      	ldr	r1, [sp, #120]	; 0x78
 810a22c:	4620      	mov	r0, r4
 810a22e:	f001 fecd 	bl	810bfcc <_Bfree>
 810a232:	9907      	ldr	r1, [sp, #28]
 810a234:	4620      	mov	r0, r4
 810a236:	f001 fec9 	bl	810bfcc <_Bfree>
 810a23a:	4631      	mov	r1, r6
 810a23c:	4620      	mov	r0, r4
 810a23e:	f001 fec5 	bl	810bfcc <_Bfree>
 810a242:	4629      	mov	r1, r5
 810a244:	4620      	mov	r0, r4
 810a246:	f001 fec1 	bl	810bfcc <_Bfree>
 810a24a:	e613      	b.n	8109e74 <_strtod_l+0x664>
 810a24c:	f1ba 0f00 	cmp.w	sl, #0
 810a250:	d11b      	bne.n	810a28a <_strtod_l+0xa7a>
 810a252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a256:	b9f3      	cbnz	r3, 810a296 <_strtod_l+0xa86>
 810a258:	4b6b      	ldr	r3, [pc, #428]	; (810a408 <_strtod_l+0xbf8>)
 810a25a:	2200      	movs	r2, #0
 810a25c:	4640      	mov	r0, r8
 810a25e:	4649      	mov	r1, r9
 810a260:	f7f6 fcd4 	bl	8100c0c <__aeabi_dcmplt>
 810a264:	b9d0      	cbnz	r0, 810a29c <_strtod_l+0xa8c>
 810a266:	4640      	mov	r0, r8
 810a268:	4649      	mov	r1, r9
 810a26a:	4b6b      	ldr	r3, [pc, #428]	; (810a418 <_strtod_l+0xc08>)
 810a26c:	2200      	movs	r2, #0
 810a26e:	f7f6 fa5b 	bl	8100728 <__aeabi_dmul>
 810a272:	4680      	mov	r8, r0
 810a274:	4689      	mov	r9, r1
 810a276:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810a27a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 810a27e:	931b      	str	r3, [sp, #108]	; 0x6c
 810a280:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 810a284:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810a288:	e79b      	b.n	810a1c2 <_strtod_l+0x9b2>
 810a28a:	f1ba 0f01 	cmp.w	sl, #1
 810a28e:	d102      	bne.n	810a296 <_strtod_l+0xa86>
 810a290:	2f00      	cmp	r7, #0
 810a292:	f43f ad7e 	beq.w	8109d92 <_strtod_l+0x582>
 810a296:	4b61      	ldr	r3, [pc, #388]	; (810a41c <_strtod_l+0xc0c>)
 810a298:	2200      	movs	r2, #0
 810a29a:	e78c      	b.n	810a1b6 <_strtod_l+0x9a6>
 810a29c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810a418 <_strtod_l+0xc08>
 810a2a0:	f04f 0800 	mov.w	r8, #0
 810a2a4:	e7e7      	b.n	810a276 <_strtod_l+0xa66>
 810a2a6:	4b5c      	ldr	r3, [pc, #368]	; (810a418 <_strtod_l+0xc08>)
 810a2a8:	4640      	mov	r0, r8
 810a2aa:	4649      	mov	r1, r9
 810a2ac:	2200      	movs	r2, #0
 810a2ae:	f7f6 fa3b 	bl	8100728 <__aeabi_dmul>
 810a2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810a2b4:	4680      	mov	r8, r0
 810a2b6:	4689      	mov	r9, r1
 810a2b8:	b933      	cbnz	r3, 810a2c8 <_strtod_l+0xab8>
 810a2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a2be:	9012      	str	r0, [sp, #72]	; 0x48
 810a2c0:	9313      	str	r3, [sp, #76]	; 0x4c
 810a2c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 810a2c6:	e7dd      	b.n	810a284 <_strtod_l+0xa74>
 810a2c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 810a2cc:	e7f9      	b.n	810a2c2 <_strtod_l+0xab2>
 810a2ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810a2d2:	9b04      	ldr	r3, [sp, #16]
 810a2d4:	2b00      	cmp	r3, #0
 810a2d6:	d1a8      	bne.n	810a22a <_strtod_l+0xa1a>
 810a2d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a2dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810a2de:	0d1b      	lsrs	r3, r3, #20
 810a2e0:	051b      	lsls	r3, r3, #20
 810a2e2:	429a      	cmp	r2, r3
 810a2e4:	d1a1      	bne.n	810a22a <_strtod_l+0xa1a>
 810a2e6:	4640      	mov	r0, r8
 810a2e8:	4649      	mov	r1, r9
 810a2ea:	f7f6 fd65 	bl	8100db8 <__aeabi_d2lz>
 810a2ee:	f7f6 f9ed 	bl	81006cc <__aeabi_l2d>
 810a2f2:	4602      	mov	r2, r0
 810a2f4:	460b      	mov	r3, r1
 810a2f6:	4640      	mov	r0, r8
 810a2f8:	4649      	mov	r1, r9
 810a2fa:	f7f6 f85d 	bl	81003b8 <__aeabi_dsub>
 810a2fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810a300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a304:	ea43 030a 	orr.w	r3, r3, sl
 810a308:	4313      	orrs	r3, r2
 810a30a:	4680      	mov	r8, r0
 810a30c:	4689      	mov	r9, r1
 810a30e:	d053      	beq.n	810a3b8 <_strtod_l+0xba8>
 810a310:	a335      	add	r3, pc, #212	; (adr r3, 810a3e8 <_strtod_l+0xbd8>)
 810a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a316:	f7f6 fc79 	bl	8100c0c <__aeabi_dcmplt>
 810a31a:	2800      	cmp	r0, #0
 810a31c:	f47f acce 	bne.w	8109cbc <_strtod_l+0x4ac>
 810a320:	a333      	add	r3, pc, #204	; (adr r3, 810a3f0 <_strtod_l+0xbe0>)
 810a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a326:	4640      	mov	r0, r8
 810a328:	4649      	mov	r1, r9
 810a32a:	f7f6 fc8d 	bl	8100c48 <__aeabi_dcmpgt>
 810a32e:	2800      	cmp	r0, #0
 810a330:	f43f af7b 	beq.w	810a22a <_strtod_l+0xa1a>
 810a334:	e4c2      	b.n	8109cbc <_strtod_l+0x4ac>
 810a336:	9b04      	ldr	r3, [sp, #16]
 810a338:	b333      	cbz	r3, 810a388 <_strtod_l+0xb78>
 810a33a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a33c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a340:	d822      	bhi.n	810a388 <_strtod_l+0xb78>
 810a342:	a32d      	add	r3, pc, #180	; (adr r3, 810a3f8 <_strtod_l+0xbe8>)
 810a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a348:	4640      	mov	r0, r8
 810a34a:	4649      	mov	r1, r9
 810a34c:	f7f6 fc68 	bl	8100c20 <__aeabi_dcmple>
 810a350:	b1a0      	cbz	r0, 810a37c <_strtod_l+0xb6c>
 810a352:	4649      	mov	r1, r9
 810a354:	4640      	mov	r0, r8
 810a356:	f7f6 fcbf 	bl	8100cd8 <__aeabi_d2uiz>
 810a35a:	2801      	cmp	r0, #1
 810a35c:	bf38      	it	cc
 810a35e:	2001      	movcc	r0, #1
 810a360:	f7f6 f968 	bl	8100634 <__aeabi_ui2d>
 810a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810a366:	4680      	mov	r8, r0
 810a368:	4689      	mov	r9, r1
 810a36a:	bb13      	cbnz	r3, 810a3b2 <_strtod_l+0xba2>
 810a36c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a370:	9014      	str	r0, [sp, #80]	; 0x50
 810a372:	9315      	str	r3, [sp, #84]	; 0x54
 810a374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810a378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810a37c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a37e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810a380:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810a384:	1a9b      	subs	r3, r3, r2
 810a386:	930d      	str	r3, [sp, #52]	; 0x34
 810a388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810a38c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810a390:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810a394:	f002 f946 	bl	810c624 <__ulp>
 810a398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810a39c:	ec53 2b10 	vmov	r2, r3, d0
 810a3a0:	f7f6 f9c2 	bl	8100728 <__aeabi_dmul>
 810a3a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810a3a8:	f7f6 f808 	bl	81003bc <__adddf3>
 810a3ac:	4682      	mov	sl, r0
 810a3ae:	468b      	mov	fp, r1
 810a3b0:	e78f      	b.n	810a2d2 <_strtod_l+0xac2>
 810a3b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 810a3b6:	e7dd      	b.n	810a374 <_strtod_l+0xb64>
 810a3b8:	a311      	add	r3, pc, #68	; (adr r3, 810a400 <_strtod_l+0xbf0>)
 810a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3be:	f7f6 fc25 	bl	8100c0c <__aeabi_dcmplt>
 810a3c2:	e7b4      	b.n	810a32e <_strtod_l+0xb1e>
 810a3c4:	2300      	movs	r3, #0
 810a3c6:	930e      	str	r3, [sp, #56]	; 0x38
 810a3c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810a3ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810a3cc:	6013      	str	r3, [r2, #0]
 810a3ce:	f7ff ba65 	b.w	810989c <_strtod_l+0x8c>
 810a3d2:	2b65      	cmp	r3, #101	; 0x65
 810a3d4:	f43f ab5d 	beq.w	8109a92 <_strtod_l+0x282>
 810a3d8:	2b45      	cmp	r3, #69	; 0x45
 810a3da:	f43f ab5a 	beq.w	8109a92 <_strtod_l+0x282>
 810a3de:	2201      	movs	r2, #1
 810a3e0:	f7ff bb92 	b.w	8109b08 <_strtod_l+0x2f8>
 810a3e4:	f3af 8000 	nop.w
 810a3e8:	94a03595 	.word	0x94a03595
 810a3ec:	3fdfffff 	.word	0x3fdfffff
 810a3f0:	35afe535 	.word	0x35afe535
 810a3f4:	3fe00000 	.word	0x3fe00000
 810a3f8:	ffc00000 	.word	0xffc00000
 810a3fc:	41dfffff 	.word	0x41dfffff
 810a400:	94a03595 	.word	0x94a03595
 810a404:	3fcfffff 	.word	0x3fcfffff
 810a408:	3ff00000 	.word	0x3ff00000
 810a40c:	7ff00000 	.word	0x7ff00000
 810a410:	7fe00000 	.word	0x7fe00000
 810a414:	7c9fffff 	.word	0x7c9fffff
 810a418:	3fe00000 	.word	0x3fe00000
 810a41c:	bff00000 	.word	0xbff00000
 810a420:	7fefffff 	.word	0x7fefffff

0810a424 <_strtod_r>:
 810a424:	4b01      	ldr	r3, [pc, #4]	; (810a42c <_strtod_r+0x8>)
 810a426:	f7ff b9f3 	b.w	8109810 <_strtod_l>
 810a42a:	bf00      	nop
 810a42c:	10000120 	.word	0x10000120

0810a430 <_strtol_l.isra.0>:
 810a430:	2b01      	cmp	r3, #1
 810a432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a436:	d001      	beq.n	810a43c <_strtol_l.isra.0+0xc>
 810a438:	2b24      	cmp	r3, #36	; 0x24
 810a43a:	d906      	bls.n	810a44a <_strtol_l.isra.0+0x1a>
 810a43c:	f7fe f88e 	bl	810855c <__errno>
 810a440:	2316      	movs	r3, #22
 810a442:	6003      	str	r3, [r0, #0]
 810a444:	2000      	movs	r0, #0
 810a446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a44a:	4f3a      	ldr	r7, [pc, #232]	; (810a534 <_strtol_l.isra.0+0x104>)
 810a44c:	468e      	mov	lr, r1
 810a44e:	4676      	mov	r6, lr
 810a450:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810a454:	5de5      	ldrb	r5, [r4, r7]
 810a456:	f015 0508 	ands.w	r5, r5, #8
 810a45a:	d1f8      	bne.n	810a44e <_strtol_l.isra.0+0x1e>
 810a45c:	2c2d      	cmp	r4, #45	; 0x2d
 810a45e:	d134      	bne.n	810a4ca <_strtol_l.isra.0+0x9a>
 810a460:	f89e 4000 	ldrb.w	r4, [lr]
 810a464:	f04f 0801 	mov.w	r8, #1
 810a468:	f106 0e02 	add.w	lr, r6, #2
 810a46c:	2b00      	cmp	r3, #0
 810a46e:	d05c      	beq.n	810a52a <_strtol_l.isra.0+0xfa>
 810a470:	2b10      	cmp	r3, #16
 810a472:	d10c      	bne.n	810a48e <_strtol_l.isra.0+0x5e>
 810a474:	2c30      	cmp	r4, #48	; 0x30
 810a476:	d10a      	bne.n	810a48e <_strtol_l.isra.0+0x5e>
 810a478:	f89e 4000 	ldrb.w	r4, [lr]
 810a47c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810a480:	2c58      	cmp	r4, #88	; 0x58
 810a482:	d14d      	bne.n	810a520 <_strtol_l.isra.0+0xf0>
 810a484:	f89e 4001 	ldrb.w	r4, [lr, #1]
 810a488:	2310      	movs	r3, #16
 810a48a:	f10e 0e02 	add.w	lr, lr, #2
 810a48e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 810a492:	f10c 3cff 	add.w	ip, ip, #4294967295
 810a496:	2600      	movs	r6, #0
 810a498:	fbbc f9f3 	udiv	r9, ip, r3
 810a49c:	4635      	mov	r5, r6
 810a49e:	fb03 ca19 	mls	sl, r3, r9, ip
 810a4a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 810a4a6:	2f09      	cmp	r7, #9
 810a4a8:	d818      	bhi.n	810a4dc <_strtol_l.isra.0+0xac>
 810a4aa:	463c      	mov	r4, r7
 810a4ac:	42a3      	cmp	r3, r4
 810a4ae:	dd24      	ble.n	810a4fa <_strtol_l.isra.0+0xca>
 810a4b0:	2e00      	cmp	r6, #0
 810a4b2:	db1f      	blt.n	810a4f4 <_strtol_l.isra.0+0xc4>
 810a4b4:	45a9      	cmp	r9, r5
 810a4b6:	d31d      	bcc.n	810a4f4 <_strtol_l.isra.0+0xc4>
 810a4b8:	d101      	bne.n	810a4be <_strtol_l.isra.0+0x8e>
 810a4ba:	45a2      	cmp	sl, r4
 810a4bc:	db1a      	blt.n	810a4f4 <_strtol_l.isra.0+0xc4>
 810a4be:	fb05 4503 	mla	r5, r5, r3, r4
 810a4c2:	2601      	movs	r6, #1
 810a4c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810a4c8:	e7eb      	b.n	810a4a2 <_strtol_l.isra.0+0x72>
 810a4ca:	2c2b      	cmp	r4, #43	; 0x2b
 810a4cc:	bf08      	it	eq
 810a4ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 810a4d2:	46a8      	mov	r8, r5
 810a4d4:	bf08      	it	eq
 810a4d6:	f106 0e02 	addeq.w	lr, r6, #2
 810a4da:	e7c7      	b.n	810a46c <_strtol_l.isra.0+0x3c>
 810a4dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 810a4e0:	2f19      	cmp	r7, #25
 810a4e2:	d801      	bhi.n	810a4e8 <_strtol_l.isra.0+0xb8>
 810a4e4:	3c37      	subs	r4, #55	; 0x37
 810a4e6:	e7e1      	b.n	810a4ac <_strtol_l.isra.0+0x7c>
 810a4e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 810a4ec:	2f19      	cmp	r7, #25
 810a4ee:	d804      	bhi.n	810a4fa <_strtol_l.isra.0+0xca>
 810a4f0:	3c57      	subs	r4, #87	; 0x57
 810a4f2:	e7db      	b.n	810a4ac <_strtol_l.isra.0+0x7c>
 810a4f4:	f04f 36ff 	mov.w	r6, #4294967295
 810a4f8:	e7e4      	b.n	810a4c4 <_strtol_l.isra.0+0x94>
 810a4fa:	2e00      	cmp	r6, #0
 810a4fc:	da05      	bge.n	810a50a <_strtol_l.isra.0+0xda>
 810a4fe:	2322      	movs	r3, #34	; 0x22
 810a500:	6003      	str	r3, [r0, #0]
 810a502:	4665      	mov	r5, ip
 810a504:	b942      	cbnz	r2, 810a518 <_strtol_l.isra.0+0xe8>
 810a506:	4628      	mov	r0, r5
 810a508:	e79d      	b.n	810a446 <_strtol_l.isra.0+0x16>
 810a50a:	f1b8 0f00 	cmp.w	r8, #0
 810a50e:	d000      	beq.n	810a512 <_strtol_l.isra.0+0xe2>
 810a510:	426d      	negs	r5, r5
 810a512:	2a00      	cmp	r2, #0
 810a514:	d0f7      	beq.n	810a506 <_strtol_l.isra.0+0xd6>
 810a516:	b10e      	cbz	r6, 810a51c <_strtol_l.isra.0+0xec>
 810a518:	f10e 31ff 	add.w	r1, lr, #4294967295
 810a51c:	6011      	str	r1, [r2, #0]
 810a51e:	e7f2      	b.n	810a506 <_strtol_l.isra.0+0xd6>
 810a520:	2430      	movs	r4, #48	; 0x30
 810a522:	2b00      	cmp	r3, #0
 810a524:	d1b3      	bne.n	810a48e <_strtol_l.isra.0+0x5e>
 810a526:	2308      	movs	r3, #8
 810a528:	e7b1      	b.n	810a48e <_strtol_l.isra.0+0x5e>
 810a52a:	2c30      	cmp	r4, #48	; 0x30
 810a52c:	d0a4      	beq.n	810a478 <_strtol_l.isra.0+0x48>
 810a52e:	230a      	movs	r3, #10
 810a530:	e7ad      	b.n	810a48e <_strtol_l.isra.0+0x5e>
 810a532:	bf00      	nop
 810a534:	0810dcb1 	.word	0x0810dcb1

0810a538 <_strtol_r>:
 810a538:	f7ff bf7a 	b.w	810a430 <_strtol_l.isra.0>

0810a53c <__swbuf_r>:
 810a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a53e:	460e      	mov	r6, r1
 810a540:	4614      	mov	r4, r2
 810a542:	4605      	mov	r5, r0
 810a544:	b118      	cbz	r0, 810a54e <__swbuf_r+0x12>
 810a546:	6983      	ldr	r3, [r0, #24]
 810a548:	b90b      	cbnz	r3, 810a54e <__swbuf_r+0x12>
 810a54a:	f001 f84f 	bl	810b5ec <__sinit>
 810a54e:	4b21      	ldr	r3, [pc, #132]	; (810a5d4 <__swbuf_r+0x98>)
 810a550:	429c      	cmp	r4, r3
 810a552:	d12b      	bne.n	810a5ac <__swbuf_r+0x70>
 810a554:	686c      	ldr	r4, [r5, #4]
 810a556:	69a3      	ldr	r3, [r4, #24]
 810a558:	60a3      	str	r3, [r4, #8]
 810a55a:	89a3      	ldrh	r3, [r4, #12]
 810a55c:	071a      	lsls	r2, r3, #28
 810a55e:	d52f      	bpl.n	810a5c0 <__swbuf_r+0x84>
 810a560:	6923      	ldr	r3, [r4, #16]
 810a562:	b36b      	cbz	r3, 810a5c0 <__swbuf_r+0x84>
 810a564:	6923      	ldr	r3, [r4, #16]
 810a566:	6820      	ldr	r0, [r4, #0]
 810a568:	1ac0      	subs	r0, r0, r3
 810a56a:	6963      	ldr	r3, [r4, #20]
 810a56c:	b2f6      	uxtb	r6, r6
 810a56e:	4283      	cmp	r3, r0
 810a570:	4637      	mov	r7, r6
 810a572:	dc04      	bgt.n	810a57e <__swbuf_r+0x42>
 810a574:	4621      	mov	r1, r4
 810a576:	4628      	mov	r0, r5
 810a578:	f000 ffa4 	bl	810b4c4 <_fflush_r>
 810a57c:	bb30      	cbnz	r0, 810a5cc <__swbuf_r+0x90>
 810a57e:	68a3      	ldr	r3, [r4, #8]
 810a580:	3b01      	subs	r3, #1
 810a582:	60a3      	str	r3, [r4, #8]
 810a584:	6823      	ldr	r3, [r4, #0]
 810a586:	1c5a      	adds	r2, r3, #1
 810a588:	6022      	str	r2, [r4, #0]
 810a58a:	701e      	strb	r6, [r3, #0]
 810a58c:	6963      	ldr	r3, [r4, #20]
 810a58e:	3001      	adds	r0, #1
 810a590:	4283      	cmp	r3, r0
 810a592:	d004      	beq.n	810a59e <__swbuf_r+0x62>
 810a594:	89a3      	ldrh	r3, [r4, #12]
 810a596:	07db      	lsls	r3, r3, #31
 810a598:	d506      	bpl.n	810a5a8 <__swbuf_r+0x6c>
 810a59a:	2e0a      	cmp	r6, #10
 810a59c:	d104      	bne.n	810a5a8 <__swbuf_r+0x6c>
 810a59e:	4621      	mov	r1, r4
 810a5a0:	4628      	mov	r0, r5
 810a5a2:	f000 ff8f 	bl	810b4c4 <_fflush_r>
 810a5a6:	b988      	cbnz	r0, 810a5cc <__swbuf_r+0x90>
 810a5a8:	4638      	mov	r0, r7
 810a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a5ac:	4b0a      	ldr	r3, [pc, #40]	; (810a5d8 <__swbuf_r+0x9c>)
 810a5ae:	429c      	cmp	r4, r3
 810a5b0:	d101      	bne.n	810a5b6 <__swbuf_r+0x7a>
 810a5b2:	68ac      	ldr	r4, [r5, #8]
 810a5b4:	e7cf      	b.n	810a556 <__swbuf_r+0x1a>
 810a5b6:	4b09      	ldr	r3, [pc, #36]	; (810a5dc <__swbuf_r+0xa0>)
 810a5b8:	429c      	cmp	r4, r3
 810a5ba:	bf08      	it	eq
 810a5bc:	68ec      	ldreq	r4, [r5, #12]
 810a5be:	e7ca      	b.n	810a556 <__swbuf_r+0x1a>
 810a5c0:	4621      	mov	r1, r4
 810a5c2:	4628      	mov	r0, r5
 810a5c4:	f000 f80c 	bl	810a5e0 <__swsetup_r>
 810a5c8:	2800      	cmp	r0, #0
 810a5ca:	d0cb      	beq.n	810a564 <__swbuf_r+0x28>
 810a5cc:	f04f 37ff 	mov.w	r7, #4294967295
 810a5d0:	e7ea      	b.n	810a5a8 <__swbuf_r+0x6c>
 810a5d2:	bf00      	nop
 810a5d4:	0810de68 	.word	0x0810de68
 810a5d8:	0810de88 	.word	0x0810de88
 810a5dc:	0810de48 	.word	0x0810de48

0810a5e0 <__swsetup_r>:
 810a5e0:	4b32      	ldr	r3, [pc, #200]	; (810a6ac <__swsetup_r+0xcc>)
 810a5e2:	b570      	push	{r4, r5, r6, lr}
 810a5e4:	681d      	ldr	r5, [r3, #0]
 810a5e6:	4606      	mov	r6, r0
 810a5e8:	460c      	mov	r4, r1
 810a5ea:	b125      	cbz	r5, 810a5f6 <__swsetup_r+0x16>
 810a5ec:	69ab      	ldr	r3, [r5, #24]
 810a5ee:	b913      	cbnz	r3, 810a5f6 <__swsetup_r+0x16>
 810a5f0:	4628      	mov	r0, r5
 810a5f2:	f000 fffb 	bl	810b5ec <__sinit>
 810a5f6:	4b2e      	ldr	r3, [pc, #184]	; (810a6b0 <__swsetup_r+0xd0>)
 810a5f8:	429c      	cmp	r4, r3
 810a5fa:	d10f      	bne.n	810a61c <__swsetup_r+0x3c>
 810a5fc:	686c      	ldr	r4, [r5, #4]
 810a5fe:	89a3      	ldrh	r3, [r4, #12]
 810a600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a604:	0719      	lsls	r1, r3, #28
 810a606:	d42c      	bmi.n	810a662 <__swsetup_r+0x82>
 810a608:	06dd      	lsls	r5, r3, #27
 810a60a:	d411      	bmi.n	810a630 <__swsetup_r+0x50>
 810a60c:	2309      	movs	r3, #9
 810a60e:	6033      	str	r3, [r6, #0]
 810a610:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810a614:	81a3      	strh	r3, [r4, #12]
 810a616:	f04f 30ff 	mov.w	r0, #4294967295
 810a61a:	e03e      	b.n	810a69a <__swsetup_r+0xba>
 810a61c:	4b25      	ldr	r3, [pc, #148]	; (810a6b4 <__swsetup_r+0xd4>)
 810a61e:	429c      	cmp	r4, r3
 810a620:	d101      	bne.n	810a626 <__swsetup_r+0x46>
 810a622:	68ac      	ldr	r4, [r5, #8]
 810a624:	e7eb      	b.n	810a5fe <__swsetup_r+0x1e>
 810a626:	4b24      	ldr	r3, [pc, #144]	; (810a6b8 <__swsetup_r+0xd8>)
 810a628:	429c      	cmp	r4, r3
 810a62a:	bf08      	it	eq
 810a62c:	68ec      	ldreq	r4, [r5, #12]
 810a62e:	e7e6      	b.n	810a5fe <__swsetup_r+0x1e>
 810a630:	0758      	lsls	r0, r3, #29
 810a632:	d512      	bpl.n	810a65a <__swsetup_r+0x7a>
 810a634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a636:	b141      	cbz	r1, 810a64a <__swsetup_r+0x6a>
 810a638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a63c:	4299      	cmp	r1, r3
 810a63e:	d002      	beq.n	810a646 <__swsetup_r+0x66>
 810a640:	4630      	mov	r0, r6
 810a642:	f7fd ffed 	bl	8108620 <_free_r>
 810a646:	2300      	movs	r3, #0
 810a648:	6363      	str	r3, [r4, #52]	; 0x34
 810a64a:	89a3      	ldrh	r3, [r4, #12]
 810a64c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810a650:	81a3      	strh	r3, [r4, #12]
 810a652:	2300      	movs	r3, #0
 810a654:	6063      	str	r3, [r4, #4]
 810a656:	6923      	ldr	r3, [r4, #16]
 810a658:	6023      	str	r3, [r4, #0]
 810a65a:	89a3      	ldrh	r3, [r4, #12]
 810a65c:	f043 0308 	orr.w	r3, r3, #8
 810a660:	81a3      	strh	r3, [r4, #12]
 810a662:	6923      	ldr	r3, [r4, #16]
 810a664:	b94b      	cbnz	r3, 810a67a <__swsetup_r+0x9a>
 810a666:	89a3      	ldrh	r3, [r4, #12]
 810a668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810a66c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a670:	d003      	beq.n	810a67a <__swsetup_r+0x9a>
 810a672:	4621      	mov	r1, r4
 810a674:	4630      	mov	r0, r6
 810a676:	f001 fbf1 	bl	810be5c <__smakebuf_r>
 810a67a:	89a0      	ldrh	r0, [r4, #12]
 810a67c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a680:	f010 0301 	ands.w	r3, r0, #1
 810a684:	d00a      	beq.n	810a69c <__swsetup_r+0xbc>
 810a686:	2300      	movs	r3, #0
 810a688:	60a3      	str	r3, [r4, #8]
 810a68a:	6963      	ldr	r3, [r4, #20]
 810a68c:	425b      	negs	r3, r3
 810a68e:	61a3      	str	r3, [r4, #24]
 810a690:	6923      	ldr	r3, [r4, #16]
 810a692:	b943      	cbnz	r3, 810a6a6 <__swsetup_r+0xc6>
 810a694:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810a698:	d1ba      	bne.n	810a610 <__swsetup_r+0x30>
 810a69a:	bd70      	pop	{r4, r5, r6, pc}
 810a69c:	0781      	lsls	r1, r0, #30
 810a69e:	bf58      	it	pl
 810a6a0:	6963      	ldrpl	r3, [r4, #20]
 810a6a2:	60a3      	str	r3, [r4, #8]
 810a6a4:	e7f4      	b.n	810a690 <__swsetup_r+0xb0>
 810a6a6:	2000      	movs	r0, #0
 810a6a8:	e7f7      	b.n	810a69a <__swsetup_r+0xba>
 810a6aa:	bf00      	nop
 810a6ac:	100000b8 	.word	0x100000b8
 810a6b0:	0810de68 	.word	0x0810de68
 810a6b4:	0810de88 	.word	0x0810de88
 810a6b8:	0810de48 	.word	0x0810de48

0810a6bc <abort>:
 810a6bc:	b508      	push	{r3, lr}
 810a6be:	2006      	movs	r0, #6
 810a6c0:	f002 fac2 	bl	810cc48 <raise>
 810a6c4:	2001      	movs	r0, #1
 810a6c6:	f7f7 f913 	bl	81018f0 <_exit>

0810a6ca <quorem>:
 810a6ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a6ce:	6903      	ldr	r3, [r0, #16]
 810a6d0:	690c      	ldr	r4, [r1, #16]
 810a6d2:	42a3      	cmp	r3, r4
 810a6d4:	4607      	mov	r7, r0
 810a6d6:	f2c0 8081 	blt.w	810a7dc <quorem+0x112>
 810a6da:	3c01      	subs	r4, #1
 810a6dc:	f101 0814 	add.w	r8, r1, #20
 810a6e0:	f100 0514 	add.w	r5, r0, #20
 810a6e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a6e8:	9301      	str	r3, [sp, #4]
 810a6ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810a6ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a6f2:	3301      	adds	r3, #1
 810a6f4:	429a      	cmp	r2, r3
 810a6f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810a6fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810a6fe:	fbb2 f6f3 	udiv	r6, r2, r3
 810a702:	d331      	bcc.n	810a768 <quorem+0x9e>
 810a704:	f04f 0e00 	mov.w	lr, #0
 810a708:	4640      	mov	r0, r8
 810a70a:	46ac      	mov	ip, r5
 810a70c:	46f2      	mov	sl, lr
 810a70e:	f850 2b04 	ldr.w	r2, [r0], #4
 810a712:	b293      	uxth	r3, r2
 810a714:	fb06 e303 	mla	r3, r6, r3, lr
 810a718:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810a71c:	b29b      	uxth	r3, r3
 810a71e:	ebaa 0303 	sub.w	r3, sl, r3
 810a722:	0c12      	lsrs	r2, r2, #16
 810a724:	f8dc a000 	ldr.w	sl, [ip]
 810a728:	fb06 e202 	mla	r2, r6, r2, lr
 810a72c:	fa13 f38a 	uxtah	r3, r3, sl
 810a730:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810a734:	fa1f fa82 	uxth.w	sl, r2
 810a738:	f8dc 2000 	ldr.w	r2, [ip]
 810a73c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 810a740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a744:	b29b      	uxth	r3, r3
 810a746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a74a:	4581      	cmp	r9, r0
 810a74c:	f84c 3b04 	str.w	r3, [ip], #4
 810a750:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810a754:	d2db      	bcs.n	810a70e <quorem+0x44>
 810a756:	f855 300b 	ldr.w	r3, [r5, fp]
 810a75a:	b92b      	cbnz	r3, 810a768 <quorem+0x9e>
 810a75c:	9b01      	ldr	r3, [sp, #4]
 810a75e:	3b04      	subs	r3, #4
 810a760:	429d      	cmp	r5, r3
 810a762:	461a      	mov	r2, r3
 810a764:	d32e      	bcc.n	810a7c4 <quorem+0xfa>
 810a766:	613c      	str	r4, [r7, #16]
 810a768:	4638      	mov	r0, r7
 810a76a:	f001 feb7 	bl	810c4dc <__mcmp>
 810a76e:	2800      	cmp	r0, #0
 810a770:	db24      	blt.n	810a7bc <quorem+0xf2>
 810a772:	3601      	adds	r6, #1
 810a774:	4628      	mov	r0, r5
 810a776:	f04f 0c00 	mov.w	ip, #0
 810a77a:	f858 2b04 	ldr.w	r2, [r8], #4
 810a77e:	f8d0 e000 	ldr.w	lr, [r0]
 810a782:	b293      	uxth	r3, r2
 810a784:	ebac 0303 	sub.w	r3, ip, r3
 810a788:	0c12      	lsrs	r2, r2, #16
 810a78a:	fa13 f38e 	uxtah	r3, r3, lr
 810a78e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810a792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a796:	b29b      	uxth	r3, r3
 810a798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a79c:	45c1      	cmp	r9, r8
 810a79e:	f840 3b04 	str.w	r3, [r0], #4
 810a7a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810a7a6:	d2e8      	bcs.n	810a77a <quorem+0xb0>
 810a7a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a7ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a7b0:	b922      	cbnz	r2, 810a7bc <quorem+0xf2>
 810a7b2:	3b04      	subs	r3, #4
 810a7b4:	429d      	cmp	r5, r3
 810a7b6:	461a      	mov	r2, r3
 810a7b8:	d30a      	bcc.n	810a7d0 <quorem+0x106>
 810a7ba:	613c      	str	r4, [r7, #16]
 810a7bc:	4630      	mov	r0, r6
 810a7be:	b003      	add	sp, #12
 810a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a7c4:	6812      	ldr	r2, [r2, #0]
 810a7c6:	3b04      	subs	r3, #4
 810a7c8:	2a00      	cmp	r2, #0
 810a7ca:	d1cc      	bne.n	810a766 <quorem+0x9c>
 810a7cc:	3c01      	subs	r4, #1
 810a7ce:	e7c7      	b.n	810a760 <quorem+0x96>
 810a7d0:	6812      	ldr	r2, [r2, #0]
 810a7d2:	3b04      	subs	r3, #4
 810a7d4:	2a00      	cmp	r2, #0
 810a7d6:	d1f0      	bne.n	810a7ba <quorem+0xf0>
 810a7d8:	3c01      	subs	r4, #1
 810a7da:	e7eb      	b.n	810a7b4 <quorem+0xea>
 810a7dc:	2000      	movs	r0, #0
 810a7de:	e7ee      	b.n	810a7be <quorem+0xf4>

0810a7e0 <_dtoa_r>:
 810a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a7e4:	ed2d 8b02 	vpush	{d8}
 810a7e8:	ec57 6b10 	vmov	r6, r7, d0
 810a7ec:	b095      	sub	sp, #84	; 0x54
 810a7ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a7f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810a7f4:	9105      	str	r1, [sp, #20]
 810a7f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 810a7fa:	4604      	mov	r4, r0
 810a7fc:	9209      	str	r2, [sp, #36]	; 0x24
 810a7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 810a800:	b975      	cbnz	r5, 810a820 <_dtoa_r+0x40>
 810a802:	2010      	movs	r0, #16
 810a804:	f7fd fee6 	bl	81085d4 <malloc>
 810a808:	4602      	mov	r2, r0
 810a80a:	6260      	str	r0, [r4, #36]	; 0x24
 810a80c:	b920      	cbnz	r0, 810a818 <_dtoa_r+0x38>
 810a80e:	4bb2      	ldr	r3, [pc, #712]	; (810aad8 <_dtoa_r+0x2f8>)
 810a810:	21ea      	movs	r1, #234	; 0xea
 810a812:	48b2      	ldr	r0, [pc, #712]	; (810aadc <_dtoa_r+0x2fc>)
 810a814:	f7fd fe84 	bl	8108520 <__assert_func>
 810a818:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810a81c:	6005      	str	r5, [r0, #0]
 810a81e:	60c5      	str	r5, [r0, #12]
 810a820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a822:	6819      	ldr	r1, [r3, #0]
 810a824:	b151      	cbz	r1, 810a83c <_dtoa_r+0x5c>
 810a826:	685a      	ldr	r2, [r3, #4]
 810a828:	604a      	str	r2, [r1, #4]
 810a82a:	2301      	movs	r3, #1
 810a82c:	4093      	lsls	r3, r2
 810a82e:	608b      	str	r3, [r1, #8]
 810a830:	4620      	mov	r0, r4
 810a832:	f001 fbcb 	bl	810bfcc <_Bfree>
 810a836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a838:	2200      	movs	r2, #0
 810a83a:	601a      	str	r2, [r3, #0]
 810a83c:	1e3b      	subs	r3, r7, #0
 810a83e:	bfb9      	ittee	lt
 810a840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810a844:	9303      	strlt	r3, [sp, #12]
 810a846:	2300      	movge	r3, #0
 810a848:	f8c8 3000 	strge.w	r3, [r8]
 810a84c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810a850:	4ba3      	ldr	r3, [pc, #652]	; (810aae0 <_dtoa_r+0x300>)
 810a852:	bfbc      	itt	lt
 810a854:	2201      	movlt	r2, #1
 810a856:	f8c8 2000 	strlt.w	r2, [r8]
 810a85a:	ea33 0309 	bics.w	r3, r3, r9
 810a85e:	d11b      	bne.n	810a898 <_dtoa_r+0xb8>
 810a860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810a862:	f242 730f 	movw	r3, #9999	; 0x270f
 810a866:	6013      	str	r3, [r2, #0]
 810a868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a86c:	4333      	orrs	r3, r6
 810a86e:	f000 857a 	beq.w	810b366 <_dtoa_r+0xb86>
 810a872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a874:	b963      	cbnz	r3, 810a890 <_dtoa_r+0xb0>
 810a876:	4b9b      	ldr	r3, [pc, #620]	; (810aae4 <_dtoa_r+0x304>)
 810a878:	e024      	b.n	810a8c4 <_dtoa_r+0xe4>
 810a87a:	4b9b      	ldr	r3, [pc, #620]	; (810aae8 <_dtoa_r+0x308>)
 810a87c:	9300      	str	r3, [sp, #0]
 810a87e:	3308      	adds	r3, #8
 810a880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a882:	6013      	str	r3, [r2, #0]
 810a884:	9800      	ldr	r0, [sp, #0]
 810a886:	b015      	add	sp, #84	; 0x54
 810a888:	ecbd 8b02 	vpop	{d8}
 810a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a890:	4b94      	ldr	r3, [pc, #592]	; (810aae4 <_dtoa_r+0x304>)
 810a892:	9300      	str	r3, [sp, #0]
 810a894:	3303      	adds	r3, #3
 810a896:	e7f3      	b.n	810a880 <_dtoa_r+0xa0>
 810a898:	ed9d 7b02 	vldr	d7, [sp, #8]
 810a89c:	2200      	movs	r2, #0
 810a89e:	ec51 0b17 	vmov	r0, r1, d7
 810a8a2:	2300      	movs	r3, #0
 810a8a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 810a8a8:	f7f6 f9a6 	bl	8100bf8 <__aeabi_dcmpeq>
 810a8ac:	4680      	mov	r8, r0
 810a8ae:	b158      	cbz	r0, 810a8c8 <_dtoa_r+0xe8>
 810a8b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810a8b2:	2301      	movs	r3, #1
 810a8b4:	6013      	str	r3, [r2, #0]
 810a8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a8b8:	2b00      	cmp	r3, #0
 810a8ba:	f000 8551 	beq.w	810b360 <_dtoa_r+0xb80>
 810a8be:	488b      	ldr	r0, [pc, #556]	; (810aaec <_dtoa_r+0x30c>)
 810a8c0:	6018      	str	r0, [r3, #0]
 810a8c2:	1e43      	subs	r3, r0, #1
 810a8c4:	9300      	str	r3, [sp, #0]
 810a8c6:	e7dd      	b.n	810a884 <_dtoa_r+0xa4>
 810a8c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810a8cc:	aa12      	add	r2, sp, #72	; 0x48
 810a8ce:	a913      	add	r1, sp, #76	; 0x4c
 810a8d0:	4620      	mov	r0, r4
 810a8d2:	f001 ff23 	bl	810c71c <__d2b>
 810a8d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810a8da:	4683      	mov	fp, r0
 810a8dc:	2d00      	cmp	r5, #0
 810a8de:	d07c      	beq.n	810a9da <_dtoa_r+0x1fa>
 810a8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a8e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 810a8e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a8ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 810a8ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810a8f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810a8f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810a8fa:	4b7d      	ldr	r3, [pc, #500]	; (810aaf0 <_dtoa_r+0x310>)
 810a8fc:	2200      	movs	r2, #0
 810a8fe:	4630      	mov	r0, r6
 810a900:	4639      	mov	r1, r7
 810a902:	f7f5 fd59 	bl	81003b8 <__aeabi_dsub>
 810a906:	a36e      	add	r3, pc, #440	; (adr r3, 810aac0 <_dtoa_r+0x2e0>)
 810a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a90c:	f7f5 ff0c 	bl	8100728 <__aeabi_dmul>
 810a910:	a36d      	add	r3, pc, #436	; (adr r3, 810aac8 <_dtoa_r+0x2e8>)
 810a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a916:	f7f5 fd51 	bl	81003bc <__adddf3>
 810a91a:	4606      	mov	r6, r0
 810a91c:	4628      	mov	r0, r5
 810a91e:	460f      	mov	r7, r1
 810a920:	f7f5 fe98 	bl	8100654 <__aeabi_i2d>
 810a924:	a36a      	add	r3, pc, #424	; (adr r3, 810aad0 <_dtoa_r+0x2f0>)
 810a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a92a:	f7f5 fefd 	bl	8100728 <__aeabi_dmul>
 810a92e:	4602      	mov	r2, r0
 810a930:	460b      	mov	r3, r1
 810a932:	4630      	mov	r0, r6
 810a934:	4639      	mov	r1, r7
 810a936:	f7f5 fd41 	bl	81003bc <__adddf3>
 810a93a:	4606      	mov	r6, r0
 810a93c:	460f      	mov	r7, r1
 810a93e:	f7f6 f9a3 	bl	8100c88 <__aeabi_d2iz>
 810a942:	2200      	movs	r2, #0
 810a944:	4682      	mov	sl, r0
 810a946:	2300      	movs	r3, #0
 810a948:	4630      	mov	r0, r6
 810a94a:	4639      	mov	r1, r7
 810a94c:	f7f6 f95e 	bl	8100c0c <__aeabi_dcmplt>
 810a950:	b148      	cbz	r0, 810a966 <_dtoa_r+0x186>
 810a952:	4650      	mov	r0, sl
 810a954:	f7f5 fe7e 	bl	8100654 <__aeabi_i2d>
 810a958:	4632      	mov	r2, r6
 810a95a:	463b      	mov	r3, r7
 810a95c:	f7f6 f94c 	bl	8100bf8 <__aeabi_dcmpeq>
 810a960:	b908      	cbnz	r0, 810a966 <_dtoa_r+0x186>
 810a962:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a966:	f1ba 0f16 	cmp.w	sl, #22
 810a96a:	d854      	bhi.n	810aa16 <_dtoa_r+0x236>
 810a96c:	4b61      	ldr	r3, [pc, #388]	; (810aaf4 <_dtoa_r+0x314>)
 810a96e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810a97a:	f7f6 f947 	bl	8100c0c <__aeabi_dcmplt>
 810a97e:	2800      	cmp	r0, #0
 810a980:	d04b      	beq.n	810aa1a <_dtoa_r+0x23a>
 810a982:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a986:	2300      	movs	r3, #0
 810a988:	930e      	str	r3, [sp, #56]	; 0x38
 810a98a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810a98c:	1b5d      	subs	r5, r3, r5
 810a98e:	1e6b      	subs	r3, r5, #1
 810a990:	9304      	str	r3, [sp, #16]
 810a992:	bf43      	ittte	mi
 810a994:	2300      	movmi	r3, #0
 810a996:	f1c5 0801 	rsbmi	r8, r5, #1
 810a99a:	9304      	strmi	r3, [sp, #16]
 810a99c:	f04f 0800 	movpl.w	r8, #0
 810a9a0:	f1ba 0f00 	cmp.w	sl, #0
 810a9a4:	db3b      	blt.n	810aa1e <_dtoa_r+0x23e>
 810a9a6:	9b04      	ldr	r3, [sp, #16]
 810a9a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 810a9ac:	4453      	add	r3, sl
 810a9ae:	9304      	str	r3, [sp, #16]
 810a9b0:	2300      	movs	r3, #0
 810a9b2:	9306      	str	r3, [sp, #24]
 810a9b4:	9b05      	ldr	r3, [sp, #20]
 810a9b6:	2b09      	cmp	r3, #9
 810a9b8:	d869      	bhi.n	810aa8e <_dtoa_r+0x2ae>
 810a9ba:	2b05      	cmp	r3, #5
 810a9bc:	bfc4      	itt	gt
 810a9be:	3b04      	subgt	r3, #4
 810a9c0:	9305      	strgt	r3, [sp, #20]
 810a9c2:	9b05      	ldr	r3, [sp, #20]
 810a9c4:	f1a3 0302 	sub.w	r3, r3, #2
 810a9c8:	bfcc      	ite	gt
 810a9ca:	2500      	movgt	r5, #0
 810a9cc:	2501      	movle	r5, #1
 810a9ce:	2b03      	cmp	r3, #3
 810a9d0:	d869      	bhi.n	810aaa6 <_dtoa_r+0x2c6>
 810a9d2:	e8df f003 	tbb	[pc, r3]
 810a9d6:	4e2c      	.short	0x4e2c
 810a9d8:	5a4c      	.short	0x5a4c
 810a9da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 810a9de:	441d      	add	r5, r3
 810a9e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810a9e4:	2b20      	cmp	r3, #32
 810a9e6:	bfc1      	itttt	gt
 810a9e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810a9ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810a9f0:	fa09 f303 	lslgt.w	r3, r9, r3
 810a9f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 810a9f8:	bfda      	itte	le
 810a9fa:	f1c3 0320 	rsble	r3, r3, #32
 810a9fe:	fa06 f003 	lslle.w	r0, r6, r3
 810aa02:	4318      	orrgt	r0, r3
 810aa04:	f7f5 fe16 	bl	8100634 <__aeabi_ui2d>
 810aa08:	2301      	movs	r3, #1
 810aa0a:	4606      	mov	r6, r0
 810aa0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810aa10:	3d01      	subs	r5, #1
 810aa12:	9310      	str	r3, [sp, #64]	; 0x40
 810aa14:	e771      	b.n	810a8fa <_dtoa_r+0x11a>
 810aa16:	2301      	movs	r3, #1
 810aa18:	e7b6      	b.n	810a988 <_dtoa_r+0x1a8>
 810aa1a:	900e      	str	r0, [sp, #56]	; 0x38
 810aa1c:	e7b5      	b.n	810a98a <_dtoa_r+0x1aa>
 810aa1e:	f1ca 0300 	rsb	r3, sl, #0
 810aa22:	9306      	str	r3, [sp, #24]
 810aa24:	2300      	movs	r3, #0
 810aa26:	eba8 080a 	sub.w	r8, r8, sl
 810aa2a:	930d      	str	r3, [sp, #52]	; 0x34
 810aa2c:	e7c2      	b.n	810a9b4 <_dtoa_r+0x1d4>
 810aa2e:	2300      	movs	r3, #0
 810aa30:	9308      	str	r3, [sp, #32]
 810aa32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aa34:	2b00      	cmp	r3, #0
 810aa36:	dc39      	bgt.n	810aaac <_dtoa_r+0x2cc>
 810aa38:	f04f 0901 	mov.w	r9, #1
 810aa3c:	f8cd 9004 	str.w	r9, [sp, #4]
 810aa40:	464b      	mov	r3, r9
 810aa42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810aa46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810aa48:	2200      	movs	r2, #0
 810aa4a:	6042      	str	r2, [r0, #4]
 810aa4c:	2204      	movs	r2, #4
 810aa4e:	f102 0614 	add.w	r6, r2, #20
 810aa52:	429e      	cmp	r6, r3
 810aa54:	6841      	ldr	r1, [r0, #4]
 810aa56:	d92f      	bls.n	810aab8 <_dtoa_r+0x2d8>
 810aa58:	4620      	mov	r0, r4
 810aa5a:	f001 fa77 	bl	810bf4c <_Balloc>
 810aa5e:	9000      	str	r0, [sp, #0]
 810aa60:	2800      	cmp	r0, #0
 810aa62:	d14b      	bne.n	810aafc <_dtoa_r+0x31c>
 810aa64:	4b24      	ldr	r3, [pc, #144]	; (810aaf8 <_dtoa_r+0x318>)
 810aa66:	4602      	mov	r2, r0
 810aa68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810aa6c:	e6d1      	b.n	810a812 <_dtoa_r+0x32>
 810aa6e:	2301      	movs	r3, #1
 810aa70:	e7de      	b.n	810aa30 <_dtoa_r+0x250>
 810aa72:	2300      	movs	r3, #0
 810aa74:	9308      	str	r3, [sp, #32]
 810aa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aa78:	eb0a 0903 	add.w	r9, sl, r3
 810aa7c:	f109 0301 	add.w	r3, r9, #1
 810aa80:	2b01      	cmp	r3, #1
 810aa82:	9301      	str	r3, [sp, #4]
 810aa84:	bfb8      	it	lt
 810aa86:	2301      	movlt	r3, #1
 810aa88:	e7dd      	b.n	810aa46 <_dtoa_r+0x266>
 810aa8a:	2301      	movs	r3, #1
 810aa8c:	e7f2      	b.n	810aa74 <_dtoa_r+0x294>
 810aa8e:	2501      	movs	r5, #1
 810aa90:	2300      	movs	r3, #0
 810aa92:	9305      	str	r3, [sp, #20]
 810aa94:	9508      	str	r5, [sp, #32]
 810aa96:	f04f 39ff 	mov.w	r9, #4294967295
 810aa9a:	2200      	movs	r2, #0
 810aa9c:	f8cd 9004 	str.w	r9, [sp, #4]
 810aaa0:	2312      	movs	r3, #18
 810aaa2:	9209      	str	r2, [sp, #36]	; 0x24
 810aaa4:	e7cf      	b.n	810aa46 <_dtoa_r+0x266>
 810aaa6:	2301      	movs	r3, #1
 810aaa8:	9308      	str	r3, [sp, #32]
 810aaaa:	e7f4      	b.n	810aa96 <_dtoa_r+0x2b6>
 810aaac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 810aab0:	f8cd 9004 	str.w	r9, [sp, #4]
 810aab4:	464b      	mov	r3, r9
 810aab6:	e7c6      	b.n	810aa46 <_dtoa_r+0x266>
 810aab8:	3101      	adds	r1, #1
 810aaba:	6041      	str	r1, [r0, #4]
 810aabc:	0052      	lsls	r2, r2, #1
 810aabe:	e7c6      	b.n	810aa4e <_dtoa_r+0x26e>
 810aac0:	636f4361 	.word	0x636f4361
 810aac4:	3fd287a7 	.word	0x3fd287a7
 810aac8:	8b60c8b3 	.word	0x8b60c8b3
 810aacc:	3fc68a28 	.word	0x3fc68a28
 810aad0:	509f79fb 	.word	0x509f79fb
 810aad4:	3fd34413 	.word	0x3fd34413
 810aad8:	0810ddbe 	.word	0x0810ddbe
 810aadc:	0810ddd5 	.word	0x0810ddd5
 810aae0:	7ff00000 	.word	0x7ff00000
 810aae4:	0810ddba 	.word	0x0810ddba
 810aae8:	0810ddb1 	.word	0x0810ddb1
 810aaec:	0810dc32 	.word	0x0810dc32
 810aaf0:	3ff80000 	.word	0x3ff80000
 810aaf4:	0810dfb0 	.word	0x0810dfb0
 810aaf8:	0810de34 	.word	0x0810de34
 810aafc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aafe:	9a00      	ldr	r2, [sp, #0]
 810ab00:	601a      	str	r2, [r3, #0]
 810ab02:	9b01      	ldr	r3, [sp, #4]
 810ab04:	2b0e      	cmp	r3, #14
 810ab06:	f200 80ad 	bhi.w	810ac64 <_dtoa_r+0x484>
 810ab0a:	2d00      	cmp	r5, #0
 810ab0c:	f000 80aa 	beq.w	810ac64 <_dtoa_r+0x484>
 810ab10:	f1ba 0f00 	cmp.w	sl, #0
 810ab14:	dd36      	ble.n	810ab84 <_dtoa_r+0x3a4>
 810ab16:	4ac3      	ldr	r2, [pc, #780]	; (810ae24 <_dtoa_r+0x644>)
 810ab18:	f00a 030f 	and.w	r3, sl, #15
 810ab1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810ab20:	ed93 7b00 	vldr	d7, [r3]
 810ab24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 810ab28:	ea4f 172a 	mov.w	r7, sl, asr #4
 810ab2c:	eeb0 8a47 	vmov.f32	s16, s14
 810ab30:	eef0 8a67 	vmov.f32	s17, s15
 810ab34:	d016      	beq.n	810ab64 <_dtoa_r+0x384>
 810ab36:	4bbc      	ldr	r3, [pc, #752]	; (810ae28 <_dtoa_r+0x648>)
 810ab38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810ab3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810ab40:	f7f5 ff1c 	bl	810097c <__aeabi_ddiv>
 810ab44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ab48:	f007 070f 	and.w	r7, r7, #15
 810ab4c:	2503      	movs	r5, #3
 810ab4e:	4eb6      	ldr	r6, [pc, #728]	; (810ae28 <_dtoa_r+0x648>)
 810ab50:	b957      	cbnz	r7, 810ab68 <_dtoa_r+0x388>
 810ab52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810ab56:	ec53 2b18 	vmov	r2, r3, d8
 810ab5a:	f7f5 ff0f 	bl	810097c <__aeabi_ddiv>
 810ab5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ab62:	e029      	b.n	810abb8 <_dtoa_r+0x3d8>
 810ab64:	2502      	movs	r5, #2
 810ab66:	e7f2      	b.n	810ab4e <_dtoa_r+0x36e>
 810ab68:	07f9      	lsls	r1, r7, #31
 810ab6a:	d508      	bpl.n	810ab7e <_dtoa_r+0x39e>
 810ab6c:	ec51 0b18 	vmov	r0, r1, d8
 810ab70:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ab74:	f7f5 fdd8 	bl	8100728 <__aeabi_dmul>
 810ab78:	ec41 0b18 	vmov	d8, r0, r1
 810ab7c:	3501      	adds	r5, #1
 810ab7e:	107f      	asrs	r7, r7, #1
 810ab80:	3608      	adds	r6, #8
 810ab82:	e7e5      	b.n	810ab50 <_dtoa_r+0x370>
 810ab84:	f000 80a6 	beq.w	810acd4 <_dtoa_r+0x4f4>
 810ab88:	f1ca 0600 	rsb	r6, sl, #0
 810ab8c:	4ba5      	ldr	r3, [pc, #660]	; (810ae24 <_dtoa_r+0x644>)
 810ab8e:	4fa6      	ldr	r7, [pc, #664]	; (810ae28 <_dtoa_r+0x648>)
 810ab90:	f006 020f 	and.w	r2, r6, #15
 810ab94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810aba0:	f7f5 fdc2 	bl	8100728 <__aeabi_dmul>
 810aba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810aba8:	1136      	asrs	r6, r6, #4
 810abaa:	2300      	movs	r3, #0
 810abac:	2502      	movs	r5, #2
 810abae:	2e00      	cmp	r6, #0
 810abb0:	f040 8085 	bne.w	810acbe <_dtoa_r+0x4de>
 810abb4:	2b00      	cmp	r3, #0
 810abb6:	d1d2      	bne.n	810ab5e <_dtoa_r+0x37e>
 810abb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810abba:	2b00      	cmp	r3, #0
 810abbc:	f000 808c 	beq.w	810acd8 <_dtoa_r+0x4f8>
 810abc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810abc4:	4b99      	ldr	r3, [pc, #612]	; (810ae2c <_dtoa_r+0x64c>)
 810abc6:	2200      	movs	r2, #0
 810abc8:	4630      	mov	r0, r6
 810abca:	4639      	mov	r1, r7
 810abcc:	f7f6 f81e 	bl	8100c0c <__aeabi_dcmplt>
 810abd0:	2800      	cmp	r0, #0
 810abd2:	f000 8081 	beq.w	810acd8 <_dtoa_r+0x4f8>
 810abd6:	9b01      	ldr	r3, [sp, #4]
 810abd8:	2b00      	cmp	r3, #0
 810abda:	d07d      	beq.n	810acd8 <_dtoa_r+0x4f8>
 810abdc:	f1b9 0f00 	cmp.w	r9, #0
 810abe0:	dd3c      	ble.n	810ac5c <_dtoa_r+0x47c>
 810abe2:	f10a 33ff 	add.w	r3, sl, #4294967295
 810abe6:	9307      	str	r3, [sp, #28]
 810abe8:	2200      	movs	r2, #0
 810abea:	4b91      	ldr	r3, [pc, #580]	; (810ae30 <_dtoa_r+0x650>)
 810abec:	4630      	mov	r0, r6
 810abee:	4639      	mov	r1, r7
 810abf0:	f7f5 fd9a 	bl	8100728 <__aeabi_dmul>
 810abf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810abf8:	3501      	adds	r5, #1
 810abfa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 810abfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810ac02:	4628      	mov	r0, r5
 810ac04:	f7f5 fd26 	bl	8100654 <__aeabi_i2d>
 810ac08:	4632      	mov	r2, r6
 810ac0a:	463b      	mov	r3, r7
 810ac0c:	f7f5 fd8c 	bl	8100728 <__aeabi_dmul>
 810ac10:	4b88      	ldr	r3, [pc, #544]	; (810ae34 <_dtoa_r+0x654>)
 810ac12:	2200      	movs	r2, #0
 810ac14:	f7f5 fbd2 	bl	81003bc <__adddf3>
 810ac18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810ac1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ac20:	9303      	str	r3, [sp, #12]
 810ac22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810ac24:	2b00      	cmp	r3, #0
 810ac26:	d15c      	bne.n	810ace2 <_dtoa_r+0x502>
 810ac28:	4b83      	ldr	r3, [pc, #524]	; (810ae38 <_dtoa_r+0x658>)
 810ac2a:	2200      	movs	r2, #0
 810ac2c:	4630      	mov	r0, r6
 810ac2e:	4639      	mov	r1, r7
 810ac30:	f7f5 fbc2 	bl	81003b8 <__aeabi_dsub>
 810ac34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810ac38:	4606      	mov	r6, r0
 810ac3a:	460f      	mov	r7, r1
 810ac3c:	f7f6 f804 	bl	8100c48 <__aeabi_dcmpgt>
 810ac40:	2800      	cmp	r0, #0
 810ac42:	f040 8296 	bne.w	810b172 <_dtoa_r+0x992>
 810ac46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810ac4a:	4630      	mov	r0, r6
 810ac4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ac50:	4639      	mov	r1, r7
 810ac52:	f7f5 ffdb 	bl	8100c0c <__aeabi_dcmplt>
 810ac56:	2800      	cmp	r0, #0
 810ac58:	f040 8288 	bne.w	810b16c <_dtoa_r+0x98c>
 810ac5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810ac60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810ac64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810ac66:	2b00      	cmp	r3, #0
 810ac68:	f2c0 8158 	blt.w	810af1c <_dtoa_r+0x73c>
 810ac6c:	f1ba 0f0e 	cmp.w	sl, #14
 810ac70:	f300 8154 	bgt.w	810af1c <_dtoa_r+0x73c>
 810ac74:	4b6b      	ldr	r3, [pc, #428]	; (810ae24 <_dtoa_r+0x644>)
 810ac76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810ac7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 810ac7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ac80:	2b00      	cmp	r3, #0
 810ac82:	f280 80e3 	bge.w	810ae4c <_dtoa_r+0x66c>
 810ac86:	9b01      	ldr	r3, [sp, #4]
 810ac88:	2b00      	cmp	r3, #0
 810ac8a:	f300 80df 	bgt.w	810ae4c <_dtoa_r+0x66c>
 810ac8e:	f040 826d 	bne.w	810b16c <_dtoa_r+0x98c>
 810ac92:	4b69      	ldr	r3, [pc, #420]	; (810ae38 <_dtoa_r+0x658>)
 810ac94:	2200      	movs	r2, #0
 810ac96:	4640      	mov	r0, r8
 810ac98:	4649      	mov	r1, r9
 810ac9a:	f7f5 fd45 	bl	8100728 <__aeabi_dmul>
 810ac9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810aca2:	f7f5 ffc7 	bl	8100c34 <__aeabi_dcmpge>
 810aca6:	9e01      	ldr	r6, [sp, #4]
 810aca8:	4637      	mov	r7, r6
 810acaa:	2800      	cmp	r0, #0
 810acac:	f040 8243 	bne.w	810b136 <_dtoa_r+0x956>
 810acb0:	9d00      	ldr	r5, [sp, #0]
 810acb2:	2331      	movs	r3, #49	; 0x31
 810acb4:	f805 3b01 	strb.w	r3, [r5], #1
 810acb8:	f10a 0a01 	add.w	sl, sl, #1
 810acbc:	e23f      	b.n	810b13e <_dtoa_r+0x95e>
 810acbe:	07f2      	lsls	r2, r6, #31
 810acc0:	d505      	bpl.n	810acce <_dtoa_r+0x4ee>
 810acc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 810acc6:	f7f5 fd2f 	bl	8100728 <__aeabi_dmul>
 810acca:	3501      	adds	r5, #1
 810accc:	2301      	movs	r3, #1
 810acce:	1076      	asrs	r6, r6, #1
 810acd0:	3708      	adds	r7, #8
 810acd2:	e76c      	b.n	810abae <_dtoa_r+0x3ce>
 810acd4:	2502      	movs	r5, #2
 810acd6:	e76f      	b.n	810abb8 <_dtoa_r+0x3d8>
 810acd8:	9b01      	ldr	r3, [sp, #4]
 810acda:	f8cd a01c 	str.w	sl, [sp, #28]
 810acde:	930c      	str	r3, [sp, #48]	; 0x30
 810ace0:	e78d      	b.n	810abfe <_dtoa_r+0x41e>
 810ace2:	9900      	ldr	r1, [sp, #0]
 810ace4:	980c      	ldr	r0, [sp, #48]	; 0x30
 810ace6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810ace8:	4b4e      	ldr	r3, [pc, #312]	; (810ae24 <_dtoa_r+0x644>)
 810acea:	ed9d 7b02 	vldr	d7, [sp, #8]
 810acee:	4401      	add	r1, r0
 810acf0:	9102      	str	r1, [sp, #8]
 810acf2:	9908      	ldr	r1, [sp, #32]
 810acf4:	eeb0 8a47 	vmov.f32	s16, s14
 810acf8:	eef0 8a67 	vmov.f32	s17, s15
 810acfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ad00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810ad04:	2900      	cmp	r1, #0
 810ad06:	d045      	beq.n	810ad94 <_dtoa_r+0x5b4>
 810ad08:	494c      	ldr	r1, [pc, #304]	; (810ae3c <_dtoa_r+0x65c>)
 810ad0a:	2000      	movs	r0, #0
 810ad0c:	f7f5 fe36 	bl	810097c <__aeabi_ddiv>
 810ad10:	ec53 2b18 	vmov	r2, r3, d8
 810ad14:	f7f5 fb50 	bl	81003b8 <__aeabi_dsub>
 810ad18:	9d00      	ldr	r5, [sp, #0]
 810ad1a:	ec41 0b18 	vmov	d8, r0, r1
 810ad1e:	4639      	mov	r1, r7
 810ad20:	4630      	mov	r0, r6
 810ad22:	f7f5 ffb1 	bl	8100c88 <__aeabi_d2iz>
 810ad26:	900c      	str	r0, [sp, #48]	; 0x30
 810ad28:	f7f5 fc94 	bl	8100654 <__aeabi_i2d>
 810ad2c:	4602      	mov	r2, r0
 810ad2e:	460b      	mov	r3, r1
 810ad30:	4630      	mov	r0, r6
 810ad32:	4639      	mov	r1, r7
 810ad34:	f7f5 fb40 	bl	81003b8 <__aeabi_dsub>
 810ad38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810ad3a:	3330      	adds	r3, #48	; 0x30
 810ad3c:	f805 3b01 	strb.w	r3, [r5], #1
 810ad40:	ec53 2b18 	vmov	r2, r3, d8
 810ad44:	4606      	mov	r6, r0
 810ad46:	460f      	mov	r7, r1
 810ad48:	f7f5 ff60 	bl	8100c0c <__aeabi_dcmplt>
 810ad4c:	2800      	cmp	r0, #0
 810ad4e:	d165      	bne.n	810ae1c <_dtoa_r+0x63c>
 810ad50:	4632      	mov	r2, r6
 810ad52:	463b      	mov	r3, r7
 810ad54:	4935      	ldr	r1, [pc, #212]	; (810ae2c <_dtoa_r+0x64c>)
 810ad56:	2000      	movs	r0, #0
 810ad58:	f7f5 fb2e 	bl	81003b8 <__aeabi_dsub>
 810ad5c:	ec53 2b18 	vmov	r2, r3, d8
 810ad60:	f7f5 ff54 	bl	8100c0c <__aeabi_dcmplt>
 810ad64:	2800      	cmp	r0, #0
 810ad66:	f040 80b9 	bne.w	810aedc <_dtoa_r+0x6fc>
 810ad6a:	9b02      	ldr	r3, [sp, #8]
 810ad6c:	429d      	cmp	r5, r3
 810ad6e:	f43f af75 	beq.w	810ac5c <_dtoa_r+0x47c>
 810ad72:	4b2f      	ldr	r3, [pc, #188]	; (810ae30 <_dtoa_r+0x650>)
 810ad74:	ec51 0b18 	vmov	r0, r1, d8
 810ad78:	2200      	movs	r2, #0
 810ad7a:	f7f5 fcd5 	bl	8100728 <__aeabi_dmul>
 810ad7e:	4b2c      	ldr	r3, [pc, #176]	; (810ae30 <_dtoa_r+0x650>)
 810ad80:	ec41 0b18 	vmov	d8, r0, r1
 810ad84:	2200      	movs	r2, #0
 810ad86:	4630      	mov	r0, r6
 810ad88:	4639      	mov	r1, r7
 810ad8a:	f7f5 fccd 	bl	8100728 <__aeabi_dmul>
 810ad8e:	4606      	mov	r6, r0
 810ad90:	460f      	mov	r7, r1
 810ad92:	e7c4      	b.n	810ad1e <_dtoa_r+0x53e>
 810ad94:	ec51 0b17 	vmov	r0, r1, d7
 810ad98:	f7f5 fcc6 	bl	8100728 <__aeabi_dmul>
 810ad9c:	9b02      	ldr	r3, [sp, #8]
 810ad9e:	9d00      	ldr	r5, [sp, #0]
 810ada0:	930c      	str	r3, [sp, #48]	; 0x30
 810ada2:	ec41 0b18 	vmov	d8, r0, r1
 810ada6:	4639      	mov	r1, r7
 810ada8:	4630      	mov	r0, r6
 810adaa:	f7f5 ff6d 	bl	8100c88 <__aeabi_d2iz>
 810adae:	9011      	str	r0, [sp, #68]	; 0x44
 810adb0:	f7f5 fc50 	bl	8100654 <__aeabi_i2d>
 810adb4:	4602      	mov	r2, r0
 810adb6:	460b      	mov	r3, r1
 810adb8:	4630      	mov	r0, r6
 810adba:	4639      	mov	r1, r7
 810adbc:	f7f5 fafc 	bl	81003b8 <__aeabi_dsub>
 810adc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810adc2:	3330      	adds	r3, #48	; 0x30
 810adc4:	f805 3b01 	strb.w	r3, [r5], #1
 810adc8:	9b02      	ldr	r3, [sp, #8]
 810adca:	429d      	cmp	r5, r3
 810adcc:	4606      	mov	r6, r0
 810adce:	460f      	mov	r7, r1
 810add0:	f04f 0200 	mov.w	r2, #0
 810add4:	d134      	bne.n	810ae40 <_dtoa_r+0x660>
 810add6:	4b19      	ldr	r3, [pc, #100]	; (810ae3c <_dtoa_r+0x65c>)
 810add8:	ec51 0b18 	vmov	r0, r1, d8
 810addc:	f7f5 faee 	bl	81003bc <__adddf3>
 810ade0:	4602      	mov	r2, r0
 810ade2:	460b      	mov	r3, r1
 810ade4:	4630      	mov	r0, r6
 810ade6:	4639      	mov	r1, r7
 810ade8:	f7f5 ff2e 	bl	8100c48 <__aeabi_dcmpgt>
 810adec:	2800      	cmp	r0, #0
 810adee:	d175      	bne.n	810aedc <_dtoa_r+0x6fc>
 810adf0:	ec53 2b18 	vmov	r2, r3, d8
 810adf4:	4911      	ldr	r1, [pc, #68]	; (810ae3c <_dtoa_r+0x65c>)
 810adf6:	2000      	movs	r0, #0
 810adf8:	f7f5 fade 	bl	81003b8 <__aeabi_dsub>
 810adfc:	4602      	mov	r2, r0
 810adfe:	460b      	mov	r3, r1
 810ae00:	4630      	mov	r0, r6
 810ae02:	4639      	mov	r1, r7
 810ae04:	f7f5 ff02 	bl	8100c0c <__aeabi_dcmplt>
 810ae08:	2800      	cmp	r0, #0
 810ae0a:	f43f af27 	beq.w	810ac5c <_dtoa_r+0x47c>
 810ae0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810ae10:	1e6b      	subs	r3, r5, #1
 810ae12:	930c      	str	r3, [sp, #48]	; 0x30
 810ae14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810ae18:	2b30      	cmp	r3, #48	; 0x30
 810ae1a:	d0f8      	beq.n	810ae0e <_dtoa_r+0x62e>
 810ae1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810ae20:	e04a      	b.n	810aeb8 <_dtoa_r+0x6d8>
 810ae22:	bf00      	nop
 810ae24:	0810dfb0 	.word	0x0810dfb0
 810ae28:	0810df88 	.word	0x0810df88
 810ae2c:	3ff00000 	.word	0x3ff00000
 810ae30:	40240000 	.word	0x40240000
 810ae34:	401c0000 	.word	0x401c0000
 810ae38:	40140000 	.word	0x40140000
 810ae3c:	3fe00000 	.word	0x3fe00000
 810ae40:	4baf      	ldr	r3, [pc, #700]	; (810b100 <_dtoa_r+0x920>)
 810ae42:	f7f5 fc71 	bl	8100728 <__aeabi_dmul>
 810ae46:	4606      	mov	r6, r0
 810ae48:	460f      	mov	r7, r1
 810ae4a:	e7ac      	b.n	810ada6 <_dtoa_r+0x5c6>
 810ae4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810ae50:	9d00      	ldr	r5, [sp, #0]
 810ae52:	4642      	mov	r2, r8
 810ae54:	464b      	mov	r3, r9
 810ae56:	4630      	mov	r0, r6
 810ae58:	4639      	mov	r1, r7
 810ae5a:	f7f5 fd8f 	bl	810097c <__aeabi_ddiv>
 810ae5e:	f7f5 ff13 	bl	8100c88 <__aeabi_d2iz>
 810ae62:	9002      	str	r0, [sp, #8]
 810ae64:	f7f5 fbf6 	bl	8100654 <__aeabi_i2d>
 810ae68:	4642      	mov	r2, r8
 810ae6a:	464b      	mov	r3, r9
 810ae6c:	f7f5 fc5c 	bl	8100728 <__aeabi_dmul>
 810ae70:	4602      	mov	r2, r0
 810ae72:	460b      	mov	r3, r1
 810ae74:	4630      	mov	r0, r6
 810ae76:	4639      	mov	r1, r7
 810ae78:	f7f5 fa9e 	bl	81003b8 <__aeabi_dsub>
 810ae7c:	9e02      	ldr	r6, [sp, #8]
 810ae7e:	9f01      	ldr	r7, [sp, #4]
 810ae80:	3630      	adds	r6, #48	; 0x30
 810ae82:	f805 6b01 	strb.w	r6, [r5], #1
 810ae86:	9e00      	ldr	r6, [sp, #0]
 810ae88:	1bae      	subs	r6, r5, r6
 810ae8a:	42b7      	cmp	r7, r6
 810ae8c:	4602      	mov	r2, r0
 810ae8e:	460b      	mov	r3, r1
 810ae90:	d137      	bne.n	810af02 <_dtoa_r+0x722>
 810ae92:	f7f5 fa93 	bl	81003bc <__adddf3>
 810ae96:	4642      	mov	r2, r8
 810ae98:	464b      	mov	r3, r9
 810ae9a:	4606      	mov	r6, r0
 810ae9c:	460f      	mov	r7, r1
 810ae9e:	f7f5 fed3 	bl	8100c48 <__aeabi_dcmpgt>
 810aea2:	b9c8      	cbnz	r0, 810aed8 <_dtoa_r+0x6f8>
 810aea4:	4642      	mov	r2, r8
 810aea6:	464b      	mov	r3, r9
 810aea8:	4630      	mov	r0, r6
 810aeaa:	4639      	mov	r1, r7
 810aeac:	f7f5 fea4 	bl	8100bf8 <__aeabi_dcmpeq>
 810aeb0:	b110      	cbz	r0, 810aeb8 <_dtoa_r+0x6d8>
 810aeb2:	9b02      	ldr	r3, [sp, #8]
 810aeb4:	07d9      	lsls	r1, r3, #31
 810aeb6:	d40f      	bmi.n	810aed8 <_dtoa_r+0x6f8>
 810aeb8:	4620      	mov	r0, r4
 810aeba:	4659      	mov	r1, fp
 810aebc:	f001 f886 	bl	810bfcc <_Bfree>
 810aec0:	2300      	movs	r3, #0
 810aec2:	702b      	strb	r3, [r5, #0]
 810aec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aec6:	f10a 0001 	add.w	r0, sl, #1
 810aeca:	6018      	str	r0, [r3, #0]
 810aecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aece:	2b00      	cmp	r3, #0
 810aed0:	f43f acd8 	beq.w	810a884 <_dtoa_r+0xa4>
 810aed4:	601d      	str	r5, [r3, #0]
 810aed6:	e4d5      	b.n	810a884 <_dtoa_r+0xa4>
 810aed8:	f8cd a01c 	str.w	sl, [sp, #28]
 810aedc:	462b      	mov	r3, r5
 810aede:	461d      	mov	r5, r3
 810aee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810aee4:	2a39      	cmp	r2, #57	; 0x39
 810aee6:	d108      	bne.n	810aefa <_dtoa_r+0x71a>
 810aee8:	9a00      	ldr	r2, [sp, #0]
 810aeea:	429a      	cmp	r2, r3
 810aeec:	d1f7      	bne.n	810aede <_dtoa_r+0x6fe>
 810aeee:	9a07      	ldr	r2, [sp, #28]
 810aef0:	9900      	ldr	r1, [sp, #0]
 810aef2:	3201      	adds	r2, #1
 810aef4:	9207      	str	r2, [sp, #28]
 810aef6:	2230      	movs	r2, #48	; 0x30
 810aef8:	700a      	strb	r2, [r1, #0]
 810aefa:	781a      	ldrb	r2, [r3, #0]
 810aefc:	3201      	adds	r2, #1
 810aefe:	701a      	strb	r2, [r3, #0]
 810af00:	e78c      	b.n	810ae1c <_dtoa_r+0x63c>
 810af02:	4b7f      	ldr	r3, [pc, #508]	; (810b100 <_dtoa_r+0x920>)
 810af04:	2200      	movs	r2, #0
 810af06:	f7f5 fc0f 	bl	8100728 <__aeabi_dmul>
 810af0a:	2200      	movs	r2, #0
 810af0c:	2300      	movs	r3, #0
 810af0e:	4606      	mov	r6, r0
 810af10:	460f      	mov	r7, r1
 810af12:	f7f5 fe71 	bl	8100bf8 <__aeabi_dcmpeq>
 810af16:	2800      	cmp	r0, #0
 810af18:	d09b      	beq.n	810ae52 <_dtoa_r+0x672>
 810af1a:	e7cd      	b.n	810aeb8 <_dtoa_r+0x6d8>
 810af1c:	9a08      	ldr	r2, [sp, #32]
 810af1e:	2a00      	cmp	r2, #0
 810af20:	f000 80c4 	beq.w	810b0ac <_dtoa_r+0x8cc>
 810af24:	9a05      	ldr	r2, [sp, #20]
 810af26:	2a01      	cmp	r2, #1
 810af28:	f300 80a8 	bgt.w	810b07c <_dtoa_r+0x89c>
 810af2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 810af2e:	2a00      	cmp	r2, #0
 810af30:	f000 80a0 	beq.w	810b074 <_dtoa_r+0x894>
 810af34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810af38:	9e06      	ldr	r6, [sp, #24]
 810af3a:	4645      	mov	r5, r8
 810af3c:	9a04      	ldr	r2, [sp, #16]
 810af3e:	2101      	movs	r1, #1
 810af40:	441a      	add	r2, r3
 810af42:	4620      	mov	r0, r4
 810af44:	4498      	add	r8, r3
 810af46:	9204      	str	r2, [sp, #16]
 810af48:	f001 f946 	bl	810c1d8 <__i2b>
 810af4c:	4607      	mov	r7, r0
 810af4e:	2d00      	cmp	r5, #0
 810af50:	dd0b      	ble.n	810af6a <_dtoa_r+0x78a>
 810af52:	9b04      	ldr	r3, [sp, #16]
 810af54:	2b00      	cmp	r3, #0
 810af56:	dd08      	ble.n	810af6a <_dtoa_r+0x78a>
 810af58:	42ab      	cmp	r3, r5
 810af5a:	9a04      	ldr	r2, [sp, #16]
 810af5c:	bfa8      	it	ge
 810af5e:	462b      	movge	r3, r5
 810af60:	eba8 0803 	sub.w	r8, r8, r3
 810af64:	1aed      	subs	r5, r5, r3
 810af66:	1ad3      	subs	r3, r2, r3
 810af68:	9304      	str	r3, [sp, #16]
 810af6a:	9b06      	ldr	r3, [sp, #24]
 810af6c:	b1fb      	cbz	r3, 810afae <_dtoa_r+0x7ce>
 810af6e:	9b08      	ldr	r3, [sp, #32]
 810af70:	2b00      	cmp	r3, #0
 810af72:	f000 809f 	beq.w	810b0b4 <_dtoa_r+0x8d4>
 810af76:	2e00      	cmp	r6, #0
 810af78:	dd11      	ble.n	810af9e <_dtoa_r+0x7be>
 810af7a:	4639      	mov	r1, r7
 810af7c:	4632      	mov	r2, r6
 810af7e:	4620      	mov	r0, r4
 810af80:	f001 f9e6 	bl	810c350 <__pow5mult>
 810af84:	465a      	mov	r2, fp
 810af86:	4601      	mov	r1, r0
 810af88:	4607      	mov	r7, r0
 810af8a:	4620      	mov	r0, r4
 810af8c:	f001 f93a 	bl	810c204 <__multiply>
 810af90:	4659      	mov	r1, fp
 810af92:	9007      	str	r0, [sp, #28]
 810af94:	4620      	mov	r0, r4
 810af96:	f001 f819 	bl	810bfcc <_Bfree>
 810af9a:	9b07      	ldr	r3, [sp, #28]
 810af9c:	469b      	mov	fp, r3
 810af9e:	9b06      	ldr	r3, [sp, #24]
 810afa0:	1b9a      	subs	r2, r3, r6
 810afa2:	d004      	beq.n	810afae <_dtoa_r+0x7ce>
 810afa4:	4659      	mov	r1, fp
 810afa6:	4620      	mov	r0, r4
 810afa8:	f001 f9d2 	bl	810c350 <__pow5mult>
 810afac:	4683      	mov	fp, r0
 810afae:	2101      	movs	r1, #1
 810afb0:	4620      	mov	r0, r4
 810afb2:	f001 f911 	bl	810c1d8 <__i2b>
 810afb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810afb8:	2b00      	cmp	r3, #0
 810afba:	4606      	mov	r6, r0
 810afbc:	dd7c      	ble.n	810b0b8 <_dtoa_r+0x8d8>
 810afbe:	461a      	mov	r2, r3
 810afc0:	4601      	mov	r1, r0
 810afc2:	4620      	mov	r0, r4
 810afc4:	f001 f9c4 	bl	810c350 <__pow5mult>
 810afc8:	9b05      	ldr	r3, [sp, #20]
 810afca:	2b01      	cmp	r3, #1
 810afcc:	4606      	mov	r6, r0
 810afce:	dd76      	ble.n	810b0be <_dtoa_r+0x8de>
 810afd0:	2300      	movs	r3, #0
 810afd2:	9306      	str	r3, [sp, #24]
 810afd4:	6933      	ldr	r3, [r6, #16]
 810afd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810afda:	6918      	ldr	r0, [r3, #16]
 810afdc:	f001 f8ac 	bl	810c138 <__hi0bits>
 810afe0:	f1c0 0020 	rsb	r0, r0, #32
 810afe4:	9b04      	ldr	r3, [sp, #16]
 810afe6:	4418      	add	r0, r3
 810afe8:	f010 001f 	ands.w	r0, r0, #31
 810afec:	f000 8086 	beq.w	810b0fc <_dtoa_r+0x91c>
 810aff0:	f1c0 0320 	rsb	r3, r0, #32
 810aff4:	2b04      	cmp	r3, #4
 810aff6:	dd7f      	ble.n	810b0f8 <_dtoa_r+0x918>
 810aff8:	f1c0 001c 	rsb	r0, r0, #28
 810affc:	9b04      	ldr	r3, [sp, #16]
 810affe:	4403      	add	r3, r0
 810b000:	4480      	add	r8, r0
 810b002:	4405      	add	r5, r0
 810b004:	9304      	str	r3, [sp, #16]
 810b006:	f1b8 0f00 	cmp.w	r8, #0
 810b00a:	dd05      	ble.n	810b018 <_dtoa_r+0x838>
 810b00c:	4659      	mov	r1, fp
 810b00e:	4642      	mov	r2, r8
 810b010:	4620      	mov	r0, r4
 810b012:	f001 f9f7 	bl	810c404 <__lshift>
 810b016:	4683      	mov	fp, r0
 810b018:	9b04      	ldr	r3, [sp, #16]
 810b01a:	2b00      	cmp	r3, #0
 810b01c:	dd05      	ble.n	810b02a <_dtoa_r+0x84a>
 810b01e:	4631      	mov	r1, r6
 810b020:	461a      	mov	r2, r3
 810b022:	4620      	mov	r0, r4
 810b024:	f001 f9ee 	bl	810c404 <__lshift>
 810b028:	4606      	mov	r6, r0
 810b02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b02c:	2b00      	cmp	r3, #0
 810b02e:	d069      	beq.n	810b104 <_dtoa_r+0x924>
 810b030:	4631      	mov	r1, r6
 810b032:	4658      	mov	r0, fp
 810b034:	f001 fa52 	bl	810c4dc <__mcmp>
 810b038:	2800      	cmp	r0, #0
 810b03a:	da63      	bge.n	810b104 <_dtoa_r+0x924>
 810b03c:	2300      	movs	r3, #0
 810b03e:	4659      	mov	r1, fp
 810b040:	220a      	movs	r2, #10
 810b042:	4620      	mov	r0, r4
 810b044:	f000 ffe4 	bl	810c010 <__multadd>
 810b048:	9b08      	ldr	r3, [sp, #32]
 810b04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b04e:	4683      	mov	fp, r0
 810b050:	2b00      	cmp	r3, #0
 810b052:	f000 818f 	beq.w	810b374 <_dtoa_r+0xb94>
 810b056:	4639      	mov	r1, r7
 810b058:	2300      	movs	r3, #0
 810b05a:	220a      	movs	r2, #10
 810b05c:	4620      	mov	r0, r4
 810b05e:	f000 ffd7 	bl	810c010 <__multadd>
 810b062:	f1b9 0f00 	cmp.w	r9, #0
 810b066:	4607      	mov	r7, r0
 810b068:	f300 808e 	bgt.w	810b188 <_dtoa_r+0x9a8>
 810b06c:	9b05      	ldr	r3, [sp, #20]
 810b06e:	2b02      	cmp	r3, #2
 810b070:	dc50      	bgt.n	810b114 <_dtoa_r+0x934>
 810b072:	e089      	b.n	810b188 <_dtoa_r+0x9a8>
 810b074:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810b076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b07a:	e75d      	b.n	810af38 <_dtoa_r+0x758>
 810b07c:	9b01      	ldr	r3, [sp, #4]
 810b07e:	1e5e      	subs	r6, r3, #1
 810b080:	9b06      	ldr	r3, [sp, #24]
 810b082:	42b3      	cmp	r3, r6
 810b084:	bfbf      	itttt	lt
 810b086:	9b06      	ldrlt	r3, [sp, #24]
 810b088:	9606      	strlt	r6, [sp, #24]
 810b08a:	1af2      	sublt	r2, r6, r3
 810b08c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 810b08e:	bfb6      	itet	lt
 810b090:	189b      	addlt	r3, r3, r2
 810b092:	1b9e      	subge	r6, r3, r6
 810b094:	930d      	strlt	r3, [sp, #52]	; 0x34
 810b096:	9b01      	ldr	r3, [sp, #4]
 810b098:	bfb8      	it	lt
 810b09a:	2600      	movlt	r6, #0
 810b09c:	2b00      	cmp	r3, #0
 810b09e:	bfb5      	itete	lt
 810b0a0:	eba8 0503 	sublt.w	r5, r8, r3
 810b0a4:	9b01      	ldrge	r3, [sp, #4]
 810b0a6:	2300      	movlt	r3, #0
 810b0a8:	4645      	movge	r5, r8
 810b0aa:	e747      	b.n	810af3c <_dtoa_r+0x75c>
 810b0ac:	9e06      	ldr	r6, [sp, #24]
 810b0ae:	9f08      	ldr	r7, [sp, #32]
 810b0b0:	4645      	mov	r5, r8
 810b0b2:	e74c      	b.n	810af4e <_dtoa_r+0x76e>
 810b0b4:	9a06      	ldr	r2, [sp, #24]
 810b0b6:	e775      	b.n	810afa4 <_dtoa_r+0x7c4>
 810b0b8:	9b05      	ldr	r3, [sp, #20]
 810b0ba:	2b01      	cmp	r3, #1
 810b0bc:	dc18      	bgt.n	810b0f0 <_dtoa_r+0x910>
 810b0be:	9b02      	ldr	r3, [sp, #8]
 810b0c0:	b9b3      	cbnz	r3, 810b0f0 <_dtoa_r+0x910>
 810b0c2:	9b03      	ldr	r3, [sp, #12]
 810b0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b0c8:	b9a3      	cbnz	r3, 810b0f4 <_dtoa_r+0x914>
 810b0ca:	9b03      	ldr	r3, [sp, #12]
 810b0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b0d0:	0d1b      	lsrs	r3, r3, #20
 810b0d2:	051b      	lsls	r3, r3, #20
 810b0d4:	b12b      	cbz	r3, 810b0e2 <_dtoa_r+0x902>
 810b0d6:	9b04      	ldr	r3, [sp, #16]
 810b0d8:	3301      	adds	r3, #1
 810b0da:	9304      	str	r3, [sp, #16]
 810b0dc:	f108 0801 	add.w	r8, r8, #1
 810b0e0:	2301      	movs	r3, #1
 810b0e2:	9306      	str	r3, [sp, #24]
 810b0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	f47f af74 	bne.w	810afd4 <_dtoa_r+0x7f4>
 810b0ec:	2001      	movs	r0, #1
 810b0ee:	e779      	b.n	810afe4 <_dtoa_r+0x804>
 810b0f0:	2300      	movs	r3, #0
 810b0f2:	e7f6      	b.n	810b0e2 <_dtoa_r+0x902>
 810b0f4:	9b02      	ldr	r3, [sp, #8]
 810b0f6:	e7f4      	b.n	810b0e2 <_dtoa_r+0x902>
 810b0f8:	d085      	beq.n	810b006 <_dtoa_r+0x826>
 810b0fa:	4618      	mov	r0, r3
 810b0fc:	301c      	adds	r0, #28
 810b0fe:	e77d      	b.n	810affc <_dtoa_r+0x81c>
 810b100:	40240000 	.word	0x40240000
 810b104:	9b01      	ldr	r3, [sp, #4]
 810b106:	2b00      	cmp	r3, #0
 810b108:	dc38      	bgt.n	810b17c <_dtoa_r+0x99c>
 810b10a:	9b05      	ldr	r3, [sp, #20]
 810b10c:	2b02      	cmp	r3, #2
 810b10e:	dd35      	ble.n	810b17c <_dtoa_r+0x99c>
 810b110:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810b114:	f1b9 0f00 	cmp.w	r9, #0
 810b118:	d10d      	bne.n	810b136 <_dtoa_r+0x956>
 810b11a:	4631      	mov	r1, r6
 810b11c:	464b      	mov	r3, r9
 810b11e:	2205      	movs	r2, #5
 810b120:	4620      	mov	r0, r4
 810b122:	f000 ff75 	bl	810c010 <__multadd>
 810b126:	4601      	mov	r1, r0
 810b128:	4606      	mov	r6, r0
 810b12a:	4658      	mov	r0, fp
 810b12c:	f001 f9d6 	bl	810c4dc <__mcmp>
 810b130:	2800      	cmp	r0, #0
 810b132:	f73f adbd 	bgt.w	810acb0 <_dtoa_r+0x4d0>
 810b136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b138:	9d00      	ldr	r5, [sp, #0]
 810b13a:	ea6f 0a03 	mvn.w	sl, r3
 810b13e:	f04f 0800 	mov.w	r8, #0
 810b142:	4631      	mov	r1, r6
 810b144:	4620      	mov	r0, r4
 810b146:	f000 ff41 	bl	810bfcc <_Bfree>
 810b14a:	2f00      	cmp	r7, #0
 810b14c:	f43f aeb4 	beq.w	810aeb8 <_dtoa_r+0x6d8>
 810b150:	f1b8 0f00 	cmp.w	r8, #0
 810b154:	d005      	beq.n	810b162 <_dtoa_r+0x982>
 810b156:	45b8      	cmp	r8, r7
 810b158:	d003      	beq.n	810b162 <_dtoa_r+0x982>
 810b15a:	4641      	mov	r1, r8
 810b15c:	4620      	mov	r0, r4
 810b15e:	f000 ff35 	bl	810bfcc <_Bfree>
 810b162:	4639      	mov	r1, r7
 810b164:	4620      	mov	r0, r4
 810b166:	f000 ff31 	bl	810bfcc <_Bfree>
 810b16a:	e6a5      	b.n	810aeb8 <_dtoa_r+0x6d8>
 810b16c:	2600      	movs	r6, #0
 810b16e:	4637      	mov	r7, r6
 810b170:	e7e1      	b.n	810b136 <_dtoa_r+0x956>
 810b172:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 810b174:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810b178:	4637      	mov	r7, r6
 810b17a:	e599      	b.n	810acb0 <_dtoa_r+0x4d0>
 810b17c:	9b08      	ldr	r3, [sp, #32]
 810b17e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810b182:	2b00      	cmp	r3, #0
 810b184:	f000 80fd 	beq.w	810b382 <_dtoa_r+0xba2>
 810b188:	2d00      	cmp	r5, #0
 810b18a:	dd05      	ble.n	810b198 <_dtoa_r+0x9b8>
 810b18c:	4639      	mov	r1, r7
 810b18e:	462a      	mov	r2, r5
 810b190:	4620      	mov	r0, r4
 810b192:	f001 f937 	bl	810c404 <__lshift>
 810b196:	4607      	mov	r7, r0
 810b198:	9b06      	ldr	r3, [sp, #24]
 810b19a:	2b00      	cmp	r3, #0
 810b19c:	d05c      	beq.n	810b258 <_dtoa_r+0xa78>
 810b19e:	6879      	ldr	r1, [r7, #4]
 810b1a0:	4620      	mov	r0, r4
 810b1a2:	f000 fed3 	bl	810bf4c <_Balloc>
 810b1a6:	4605      	mov	r5, r0
 810b1a8:	b928      	cbnz	r0, 810b1b6 <_dtoa_r+0x9d6>
 810b1aa:	4b80      	ldr	r3, [pc, #512]	; (810b3ac <_dtoa_r+0xbcc>)
 810b1ac:	4602      	mov	r2, r0
 810b1ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 810b1b2:	f7ff bb2e 	b.w	810a812 <_dtoa_r+0x32>
 810b1b6:	693a      	ldr	r2, [r7, #16]
 810b1b8:	3202      	adds	r2, #2
 810b1ba:	0092      	lsls	r2, r2, #2
 810b1bc:	f107 010c 	add.w	r1, r7, #12
 810b1c0:	300c      	adds	r0, #12
 810b1c2:	f7fd fa17 	bl	81085f4 <memcpy>
 810b1c6:	2201      	movs	r2, #1
 810b1c8:	4629      	mov	r1, r5
 810b1ca:	4620      	mov	r0, r4
 810b1cc:	f001 f91a 	bl	810c404 <__lshift>
 810b1d0:	9b00      	ldr	r3, [sp, #0]
 810b1d2:	3301      	adds	r3, #1
 810b1d4:	9301      	str	r3, [sp, #4]
 810b1d6:	9b00      	ldr	r3, [sp, #0]
 810b1d8:	444b      	add	r3, r9
 810b1da:	9307      	str	r3, [sp, #28]
 810b1dc:	9b02      	ldr	r3, [sp, #8]
 810b1de:	f003 0301 	and.w	r3, r3, #1
 810b1e2:	46b8      	mov	r8, r7
 810b1e4:	9306      	str	r3, [sp, #24]
 810b1e6:	4607      	mov	r7, r0
 810b1e8:	9b01      	ldr	r3, [sp, #4]
 810b1ea:	4631      	mov	r1, r6
 810b1ec:	3b01      	subs	r3, #1
 810b1ee:	4658      	mov	r0, fp
 810b1f0:	9302      	str	r3, [sp, #8]
 810b1f2:	f7ff fa6a 	bl	810a6ca <quorem>
 810b1f6:	4603      	mov	r3, r0
 810b1f8:	3330      	adds	r3, #48	; 0x30
 810b1fa:	9004      	str	r0, [sp, #16]
 810b1fc:	4641      	mov	r1, r8
 810b1fe:	4658      	mov	r0, fp
 810b200:	9308      	str	r3, [sp, #32]
 810b202:	f001 f96b 	bl	810c4dc <__mcmp>
 810b206:	463a      	mov	r2, r7
 810b208:	4681      	mov	r9, r0
 810b20a:	4631      	mov	r1, r6
 810b20c:	4620      	mov	r0, r4
 810b20e:	f001 f981 	bl	810c514 <__mdiff>
 810b212:	68c2      	ldr	r2, [r0, #12]
 810b214:	9b08      	ldr	r3, [sp, #32]
 810b216:	4605      	mov	r5, r0
 810b218:	bb02      	cbnz	r2, 810b25c <_dtoa_r+0xa7c>
 810b21a:	4601      	mov	r1, r0
 810b21c:	4658      	mov	r0, fp
 810b21e:	f001 f95d 	bl	810c4dc <__mcmp>
 810b222:	9b08      	ldr	r3, [sp, #32]
 810b224:	4602      	mov	r2, r0
 810b226:	4629      	mov	r1, r5
 810b228:	4620      	mov	r0, r4
 810b22a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 810b22e:	f000 fecd 	bl	810bfcc <_Bfree>
 810b232:	9b05      	ldr	r3, [sp, #20]
 810b234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b236:	9d01      	ldr	r5, [sp, #4]
 810b238:	ea43 0102 	orr.w	r1, r3, r2
 810b23c:	9b06      	ldr	r3, [sp, #24]
 810b23e:	430b      	orrs	r3, r1
 810b240:	9b08      	ldr	r3, [sp, #32]
 810b242:	d10d      	bne.n	810b260 <_dtoa_r+0xa80>
 810b244:	2b39      	cmp	r3, #57	; 0x39
 810b246:	d029      	beq.n	810b29c <_dtoa_r+0xabc>
 810b248:	f1b9 0f00 	cmp.w	r9, #0
 810b24c:	dd01      	ble.n	810b252 <_dtoa_r+0xa72>
 810b24e:	9b04      	ldr	r3, [sp, #16]
 810b250:	3331      	adds	r3, #49	; 0x31
 810b252:	9a02      	ldr	r2, [sp, #8]
 810b254:	7013      	strb	r3, [r2, #0]
 810b256:	e774      	b.n	810b142 <_dtoa_r+0x962>
 810b258:	4638      	mov	r0, r7
 810b25a:	e7b9      	b.n	810b1d0 <_dtoa_r+0x9f0>
 810b25c:	2201      	movs	r2, #1
 810b25e:	e7e2      	b.n	810b226 <_dtoa_r+0xa46>
 810b260:	f1b9 0f00 	cmp.w	r9, #0
 810b264:	db06      	blt.n	810b274 <_dtoa_r+0xa94>
 810b266:	9905      	ldr	r1, [sp, #20]
 810b268:	ea41 0909 	orr.w	r9, r1, r9
 810b26c:	9906      	ldr	r1, [sp, #24]
 810b26e:	ea59 0101 	orrs.w	r1, r9, r1
 810b272:	d120      	bne.n	810b2b6 <_dtoa_r+0xad6>
 810b274:	2a00      	cmp	r2, #0
 810b276:	ddec      	ble.n	810b252 <_dtoa_r+0xa72>
 810b278:	4659      	mov	r1, fp
 810b27a:	2201      	movs	r2, #1
 810b27c:	4620      	mov	r0, r4
 810b27e:	9301      	str	r3, [sp, #4]
 810b280:	f001 f8c0 	bl	810c404 <__lshift>
 810b284:	4631      	mov	r1, r6
 810b286:	4683      	mov	fp, r0
 810b288:	f001 f928 	bl	810c4dc <__mcmp>
 810b28c:	2800      	cmp	r0, #0
 810b28e:	9b01      	ldr	r3, [sp, #4]
 810b290:	dc02      	bgt.n	810b298 <_dtoa_r+0xab8>
 810b292:	d1de      	bne.n	810b252 <_dtoa_r+0xa72>
 810b294:	07da      	lsls	r2, r3, #31
 810b296:	d5dc      	bpl.n	810b252 <_dtoa_r+0xa72>
 810b298:	2b39      	cmp	r3, #57	; 0x39
 810b29a:	d1d8      	bne.n	810b24e <_dtoa_r+0xa6e>
 810b29c:	9a02      	ldr	r2, [sp, #8]
 810b29e:	2339      	movs	r3, #57	; 0x39
 810b2a0:	7013      	strb	r3, [r2, #0]
 810b2a2:	462b      	mov	r3, r5
 810b2a4:	461d      	mov	r5, r3
 810b2a6:	3b01      	subs	r3, #1
 810b2a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b2ac:	2a39      	cmp	r2, #57	; 0x39
 810b2ae:	d050      	beq.n	810b352 <_dtoa_r+0xb72>
 810b2b0:	3201      	adds	r2, #1
 810b2b2:	701a      	strb	r2, [r3, #0]
 810b2b4:	e745      	b.n	810b142 <_dtoa_r+0x962>
 810b2b6:	2a00      	cmp	r2, #0
 810b2b8:	dd03      	ble.n	810b2c2 <_dtoa_r+0xae2>
 810b2ba:	2b39      	cmp	r3, #57	; 0x39
 810b2bc:	d0ee      	beq.n	810b29c <_dtoa_r+0xabc>
 810b2be:	3301      	adds	r3, #1
 810b2c0:	e7c7      	b.n	810b252 <_dtoa_r+0xa72>
 810b2c2:	9a01      	ldr	r2, [sp, #4]
 810b2c4:	9907      	ldr	r1, [sp, #28]
 810b2c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 810b2ca:	428a      	cmp	r2, r1
 810b2cc:	d02a      	beq.n	810b324 <_dtoa_r+0xb44>
 810b2ce:	4659      	mov	r1, fp
 810b2d0:	2300      	movs	r3, #0
 810b2d2:	220a      	movs	r2, #10
 810b2d4:	4620      	mov	r0, r4
 810b2d6:	f000 fe9b 	bl	810c010 <__multadd>
 810b2da:	45b8      	cmp	r8, r7
 810b2dc:	4683      	mov	fp, r0
 810b2de:	f04f 0300 	mov.w	r3, #0
 810b2e2:	f04f 020a 	mov.w	r2, #10
 810b2e6:	4641      	mov	r1, r8
 810b2e8:	4620      	mov	r0, r4
 810b2ea:	d107      	bne.n	810b2fc <_dtoa_r+0xb1c>
 810b2ec:	f000 fe90 	bl	810c010 <__multadd>
 810b2f0:	4680      	mov	r8, r0
 810b2f2:	4607      	mov	r7, r0
 810b2f4:	9b01      	ldr	r3, [sp, #4]
 810b2f6:	3301      	adds	r3, #1
 810b2f8:	9301      	str	r3, [sp, #4]
 810b2fa:	e775      	b.n	810b1e8 <_dtoa_r+0xa08>
 810b2fc:	f000 fe88 	bl	810c010 <__multadd>
 810b300:	4639      	mov	r1, r7
 810b302:	4680      	mov	r8, r0
 810b304:	2300      	movs	r3, #0
 810b306:	220a      	movs	r2, #10
 810b308:	4620      	mov	r0, r4
 810b30a:	f000 fe81 	bl	810c010 <__multadd>
 810b30e:	4607      	mov	r7, r0
 810b310:	e7f0      	b.n	810b2f4 <_dtoa_r+0xb14>
 810b312:	f1b9 0f00 	cmp.w	r9, #0
 810b316:	9a00      	ldr	r2, [sp, #0]
 810b318:	bfcc      	ite	gt
 810b31a:	464d      	movgt	r5, r9
 810b31c:	2501      	movle	r5, #1
 810b31e:	4415      	add	r5, r2
 810b320:	f04f 0800 	mov.w	r8, #0
 810b324:	4659      	mov	r1, fp
 810b326:	2201      	movs	r2, #1
 810b328:	4620      	mov	r0, r4
 810b32a:	9301      	str	r3, [sp, #4]
 810b32c:	f001 f86a 	bl	810c404 <__lshift>
 810b330:	4631      	mov	r1, r6
 810b332:	4683      	mov	fp, r0
 810b334:	f001 f8d2 	bl	810c4dc <__mcmp>
 810b338:	2800      	cmp	r0, #0
 810b33a:	dcb2      	bgt.n	810b2a2 <_dtoa_r+0xac2>
 810b33c:	d102      	bne.n	810b344 <_dtoa_r+0xb64>
 810b33e:	9b01      	ldr	r3, [sp, #4]
 810b340:	07db      	lsls	r3, r3, #31
 810b342:	d4ae      	bmi.n	810b2a2 <_dtoa_r+0xac2>
 810b344:	462b      	mov	r3, r5
 810b346:	461d      	mov	r5, r3
 810b348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b34c:	2a30      	cmp	r2, #48	; 0x30
 810b34e:	d0fa      	beq.n	810b346 <_dtoa_r+0xb66>
 810b350:	e6f7      	b.n	810b142 <_dtoa_r+0x962>
 810b352:	9a00      	ldr	r2, [sp, #0]
 810b354:	429a      	cmp	r2, r3
 810b356:	d1a5      	bne.n	810b2a4 <_dtoa_r+0xac4>
 810b358:	f10a 0a01 	add.w	sl, sl, #1
 810b35c:	2331      	movs	r3, #49	; 0x31
 810b35e:	e779      	b.n	810b254 <_dtoa_r+0xa74>
 810b360:	4b13      	ldr	r3, [pc, #76]	; (810b3b0 <_dtoa_r+0xbd0>)
 810b362:	f7ff baaf 	b.w	810a8c4 <_dtoa_r+0xe4>
 810b366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b368:	2b00      	cmp	r3, #0
 810b36a:	f47f aa86 	bne.w	810a87a <_dtoa_r+0x9a>
 810b36e:	4b11      	ldr	r3, [pc, #68]	; (810b3b4 <_dtoa_r+0xbd4>)
 810b370:	f7ff baa8 	b.w	810a8c4 <_dtoa_r+0xe4>
 810b374:	f1b9 0f00 	cmp.w	r9, #0
 810b378:	dc03      	bgt.n	810b382 <_dtoa_r+0xba2>
 810b37a:	9b05      	ldr	r3, [sp, #20]
 810b37c:	2b02      	cmp	r3, #2
 810b37e:	f73f aec9 	bgt.w	810b114 <_dtoa_r+0x934>
 810b382:	9d00      	ldr	r5, [sp, #0]
 810b384:	4631      	mov	r1, r6
 810b386:	4658      	mov	r0, fp
 810b388:	f7ff f99f 	bl	810a6ca <quorem>
 810b38c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810b390:	f805 3b01 	strb.w	r3, [r5], #1
 810b394:	9a00      	ldr	r2, [sp, #0]
 810b396:	1aaa      	subs	r2, r5, r2
 810b398:	4591      	cmp	r9, r2
 810b39a:	ddba      	ble.n	810b312 <_dtoa_r+0xb32>
 810b39c:	4659      	mov	r1, fp
 810b39e:	2300      	movs	r3, #0
 810b3a0:	220a      	movs	r2, #10
 810b3a2:	4620      	mov	r0, r4
 810b3a4:	f000 fe34 	bl	810c010 <__multadd>
 810b3a8:	4683      	mov	fp, r0
 810b3aa:	e7eb      	b.n	810b384 <_dtoa_r+0xba4>
 810b3ac:	0810de34 	.word	0x0810de34
 810b3b0:	0810dc31 	.word	0x0810dc31
 810b3b4:	0810ddb1 	.word	0x0810ddb1

0810b3b8 <__sflush_r>:
 810b3b8:	898a      	ldrh	r2, [r1, #12]
 810b3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b3be:	4605      	mov	r5, r0
 810b3c0:	0710      	lsls	r0, r2, #28
 810b3c2:	460c      	mov	r4, r1
 810b3c4:	d458      	bmi.n	810b478 <__sflush_r+0xc0>
 810b3c6:	684b      	ldr	r3, [r1, #4]
 810b3c8:	2b00      	cmp	r3, #0
 810b3ca:	dc05      	bgt.n	810b3d8 <__sflush_r+0x20>
 810b3cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810b3ce:	2b00      	cmp	r3, #0
 810b3d0:	dc02      	bgt.n	810b3d8 <__sflush_r+0x20>
 810b3d2:	2000      	movs	r0, #0
 810b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b3d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810b3da:	2e00      	cmp	r6, #0
 810b3dc:	d0f9      	beq.n	810b3d2 <__sflush_r+0x1a>
 810b3de:	2300      	movs	r3, #0
 810b3e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810b3e4:	682f      	ldr	r7, [r5, #0]
 810b3e6:	602b      	str	r3, [r5, #0]
 810b3e8:	d032      	beq.n	810b450 <__sflush_r+0x98>
 810b3ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810b3ec:	89a3      	ldrh	r3, [r4, #12]
 810b3ee:	075a      	lsls	r2, r3, #29
 810b3f0:	d505      	bpl.n	810b3fe <__sflush_r+0x46>
 810b3f2:	6863      	ldr	r3, [r4, #4]
 810b3f4:	1ac0      	subs	r0, r0, r3
 810b3f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810b3f8:	b10b      	cbz	r3, 810b3fe <__sflush_r+0x46>
 810b3fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810b3fc:	1ac0      	subs	r0, r0, r3
 810b3fe:	2300      	movs	r3, #0
 810b400:	4602      	mov	r2, r0
 810b402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810b404:	6a21      	ldr	r1, [r4, #32]
 810b406:	4628      	mov	r0, r5
 810b408:	47b0      	blx	r6
 810b40a:	1c43      	adds	r3, r0, #1
 810b40c:	89a3      	ldrh	r3, [r4, #12]
 810b40e:	d106      	bne.n	810b41e <__sflush_r+0x66>
 810b410:	6829      	ldr	r1, [r5, #0]
 810b412:	291d      	cmp	r1, #29
 810b414:	d82c      	bhi.n	810b470 <__sflush_r+0xb8>
 810b416:	4a2a      	ldr	r2, [pc, #168]	; (810b4c0 <__sflush_r+0x108>)
 810b418:	40ca      	lsrs	r2, r1
 810b41a:	07d6      	lsls	r6, r2, #31
 810b41c:	d528      	bpl.n	810b470 <__sflush_r+0xb8>
 810b41e:	2200      	movs	r2, #0
 810b420:	6062      	str	r2, [r4, #4]
 810b422:	04d9      	lsls	r1, r3, #19
 810b424:	6922      	ldr	r2, [r4, #16]
 810b426:	6022      	str	r2, [r4, #0]
 810b428:	d504      	bpl.n	810b434 <__sflush_r+0x7c>
 810b42a:	1c42      	adds	r2, r0, #1
 810b42c:	d101      	bne.n	810b432 <__sflush_r+0x7a>
 810b42e:	682b      	ldr	r3, [r5, #0]
 810b430:	b903      	cbnz	r3, 810b434 <__sflush_r+0x7c>
 810b432:	6560      	str	r0, [r4, #84]	; 0x54
 810b434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b436:	602f      	str	r7, [r5, #0]
 810b438:	2900      	cmp	r1, #0
 810b43a:	d0ca      	beq.n	810b3d2 <__sflush_r+0x1a>
 810b43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b440:	4299      	cmp	r1, r3
 810b442:	d002      	beq.n	810b44a <__sflush_r+0x92>
 810b444:	4628      	mov	r0, r5
 810b446:	f7fd f8eb 	bl	8108620 <_free_r>
 810b44a:	2000      	movs	r0, #0
 810b44c:	6360      	str	r0, [r4, #52]	; 0x34
 810b44e:	e7c1      	b.n	810b3d4 <__sflush_r+0x1c>
 810b450:	6a21      	ldr	r1, [r4, #32]
 810b452:	2301      	movs	r3, #1
 810b454:	4628      	mov	r0, r5
 810b456:	47b0      	blx	r6
 810b458:	1c41      	adds	r1, r0, #1
 810b45a:	d1c7      	bne.n	810b3ec <__sflush_r+0x34>
 810b45c:	682b      	ldr	r3, [r5, #0]
 810b45e:	2b00      	cmp	r3, #0
 810b460:	d0c4      	beq.n	810b3ec <__sflush_r+0x34>
 810b462:	2b1d      	cmp	r3, #29
 810b464:	d001      	beq.n	810b46a <__sflush_r+0xb2>
 810b466:	2b16      	cmp	r3, #22
 810b468:	d101      	bne.n	810b46e <__sflush_r+0xb6>
 810b46a:	602f      	str	r7, [r5, #0]
 810b46c:	e7b1      	b.n	810b3d2 <__sflush_r+0x1a>
 810b46e:	89a3      	ldrh	r3, [r4, #12]
 810b470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b474:	81a3      	strh	r3, [r4, #12]
 810b476:	e7ad      	b.n	810b3d4 <__sflush_r+0x1c>
 810b478:	690f      	ldr	r7, [r1, #16]
 810b47a:	2f00      	cmp	r7, #0
 810b47c:	d0a9      	beq.n	810b3d2 <__sflush_r+0x1a>
 810b47e:	0793      	lsls	r3, r2, #30
 810b480:	680e      	ldr	r6, [r1, #0]
 810b482:	bf08      	it	eq
 810b484:	694b      	ldreq	r3, [r1, #20]
 810b486:	600f      	str	r7, [r1, #0]
 810b488:	bf18      	it	ne
 810b48a:	2300      	movne	r3, #0
 810b48c:	eba6 0807 	sub.w	r8, r6, r7
 810b490:	608b      	str	r3, [r1, #8]
 810b492:	f1b8 0f00 	cmp.w	r8, #0
 810b496:	dd9c      	ble.n	810b3d2 <__sflush_r+0x1a>
 810b498:	6a21      	ldr	r1, [r4, #32]
 810b49a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810b49c:	4643      	mov	r3, r8
 810b49e:	463a      	mov	r2, r7
 810b4a0:	4628      	mov	r0, r5
 810b4a2:	47b0      	blx	r6
 810b4a4:	2800      	cmp	r0, #0
 810b4a6:	dc06      	bgt.n	810b4b6 <__sflush_r+0xfe>
 810b4a8:	89a3      	ldrh	r3, [r4, #12]
 810b4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b4ae:	81a3      	strh	r3, [r4, #12]
 810b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 810b4b4:	e78e      	b.n	810b3d4 <__sflush_r+0x1c>
 810b4b6:	4407      	add	r7, r0
 810b4b8:	eba8 0800 	sub.w	r8, r8, r0
 810b4bc:	e7e9      	b.n	810b492 <__sflush_r+0xda>
 810b4be:	bf00      	nop
 810b4c0:	20400001 	.word	0x20400001

0810b4c4 <_fflush_r>:
 810b4c4:	b538      	push	{r3, r4, r5, lr}
 810b4c6:	690b      	ldr	r3, [r1, #16]
 810b4c8:	4605      	mov	r5, r0
 810b4ca:	460c      	mov	r4, r1
 810b4cc:	b913      	cbnz	r3, 810b4d4 <_fflush_r+0x10>
 810b4ce:	2500      	movs	r5, #0
 810b4d0:	4628      	mov	r0, r5
 810b4d2:	bd38      	pop	{r3, r4, r5, pc}
 810b4d4:	b118      	cbz	r0, 810b4de <_fflush_r+0x1a>
 810b4d6:	6983      	ldr	r3, [r0, #24]
 810b4d8:	b90b      	cbnz	r3, 810b4de <_fflush_r+0x1a>
 810b4da:	f000 f887 	bl	810b5ec <__sinit>
 810b4de:	4b14      	ldr	r3, [pc, #80]	; (810b530 <_fflush_r+0x6c>)
 810b4e0:	429c      	cmp	r4, r3
 810b4e2:	d11b      	bne.n	810b51c <_fflush_r+0x58>
 810b4e4:	686c      	ldr	r4, [r5, #4]
 810b4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b4ea:	2b00      	cmp	r3, #0
 810b4ec:	d0ef      	beq.n	810b4ce <_fflush_r+0xa>
 810b4ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810b4f0:	07d0      	lsls	r0, r2, #31
 810b4f2:	d404      	bmi.n	810b4fe <_fflush_r+0x3a>
 810b4f4:	0599      	lsls	r1, r3, #22
 810b4f6:	d402      	bmi.n	810b4fe <_fflush_r+0x3a>
 810b4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b4fa:	f000 fc88 	bl	810be0e <__retarget_lock_acquire_recursive>
 810b4fe:	4628      	mov	r0, r5
 810b500:	4621      	mov	r1, r4
 810b502:	f7ff ff59 	bl	810b3b8 <__sflush_r>
 810b506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b508:	07da      	lsls	r2, r3, #31
 810b50a:	4605      	mov	r5, r0
 810b50c:	d4e0      	bmi.n	810b4d0 <_fflush_r+0xc>
 810b50e:	89a3      	ldrh	r3, [r4, #12]
 810b510:	059b      	lsls	r3, r3, #22
 810b512:	d4dd      	bmi.n	810b4d0 <_fflush_r+0xc>
 810b514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b516:	f000 fc7b 	bl	810be10 <__retarget_lock_release_recursive>
 810b51a:	e7d9      	b.n	810b4d0 <_fflush_r+0xc>
 810b51c:	4b05      	ldr	r3, [pc, #20]	; (810b534 <_fflush_r+0x70>)
 810b51e:	429c      	cmp	r4, r3
 810b520:	d101      	bne.n	810b526 <_fflush_r+0x62>
 810b522:	68ac      	ldr	r4, [r5, #8]
 810b524:	e7df      	b.n	810b4e6 <_fflush_r+0x22>
 810b526:	4b04      	ldr	r3, [pc, #16]	; (810b538 <_fflush_r+0x74>)
 810b528:	429c      	cmp	r4, r3
 810b52a:	bf08      	it	eq
 810b52c:	68ec      	ldreq	r4, [r5, #12]
 810b52e:	e7da      	b.n	810b4e6 <_fflush_r+0x22>
 810b530:	0810de68 	.word	0x0810de68
 810b534:	0810de88 	.word	0x0810de88
 810b538:	0810de48 	.word	0x0810de48

0810b53c <std>:
 810b53c:	2300      	movs	r3, #0
 810b53e:	b510      	push	{r4, lr}
 810b540:	4604      	mov	r4, r0
 810b542:	e9c0 3300 	strd	r3, r3, [r0]
 810b546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b54a:	6083      	str	r3, [r0, #8]
 810b54c:	8181      	strh	r1, [r0, #12]
 810b54e:	6643      	str	r3, [r0, #100]	; 0x64
 810b550:	81c2      	strh	r2, [r0, #14]
 810b552:	6183      	str	r3, [r0, #24]
 810b554:	4619      	mov	r1, r3
 810b556:	2208      	movs	r2, #8
 810b558:	305c      	adds	r0, #92	; 0x5c
 810b55a:	f7fd f859 	bl	8108610 <memset>
 810b55e:	4b05      	ldr	r3, [pc, #20]	; (810b574 <std+0x38>)
 810b560:	6263      	str	r3, [r4, #36]	; 0x24
 810b562:	4b05      	ldr	r3, [pc, #20]	; (810b578 <std+0x3c>)
 810b564:	62a3      	str	r3, [r4, #40]	; 0x28
 810b566:	4b05      	ldr	r3, [pc, #20]	; (810b57c <std+0x40>)
 810b568:	62e3      	str	r3, [r4, #44]	; 0x2c
 810b56a:	4b05      	ldr	r3, [pc, #20]	; (810b580 <std+0x44>)
 810b56c:	6224      	str	r4, [r4, #32]
 810b56e:	6323      	str	r3, [r4, #48]	; 0x30
 810b570:	bd10      	pop	{r4, pc}
 810b572:	bf00      	nop
 810b574:	0810cc81 	.word	0x0810cc81
 810b578:	0810cca3 	.word	0x0810cca3
 810b57c:	0810ccdb 	.word	0x0810ccdb
 810b580:	0810ccff 	.word	0x0810ccff

0810b584 <_cleanup_r>:
 810b584:	4901      	ldr	r1, [pc, #4]	; (810b58c <_cleanup_r+0x8>)
 810b586:	f000 b8af 	b.w	810b6e8 <_fwalk_reent>
 810b58a:	bf00      	nop
 810b58c:	0810b4c5 	.word	0x0810b4c5

0810b590 <__sfmoreglue>:
 810b590:	b570      	push	{r4, r5, r6, lr}
 810b592:	1e4a      	subs	r2, r1, #1
 810b594:	2568      	movs	r5, #104	; 0x68
 810b596:	4355      	muls	r5, r2
 810b598:	460e      	mov	r6, r1
 810b59a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810b59e:	f7fd f88f 	bl	81086c0 <_malloc_r>
 810b5a2:	4604      	mov	r4, r0
 810b5a4:	b140      	cbz	r0, 810b5b8 <__sfmoreglue+0x28>
 810b5a6:	2100      	movs	r1, #0
 810b5a8:	e9c0 1600 	strd	r1, r6, [r0]
 810b5ac:	300c      	adds	r0, #12
 810b5ae:	60a0      	str	r0, [r4, #8]
 810b5b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810b5b4:	f7fd f82c 	bl	8108610 <memset>
 810b5b8:	4620      	mov	r0, r4
 810b5ba:	bd70      	pop	{r4, r5, r6, pc}

0810b5bc <__sfp_lock_acquire>:
 810b5bc:	4801      	ldr	r0, [pc, #4]	; (810b5c4 <__sfp_lock_acquire+0x8>)
 810b5be:	f000 bc26 	b.w	810be0e <__retarget_lock_acquire_recursive>
 810b5c2:	bf00      	nop
 810b5c4:	1000052c 	.word	0x1000052c

0810b5c8 <__sfp_lock_release>:
 810b5c8:	4801      	ldr	r0, [pc, #4]	; (810b5d0 <__sfp_lock_release+0x8>)
 810b5ca:	f000 bc21 	b.w	810be10 <__retarget_lock_release_recursive>
 810b5ce:	bf00      	nop
 810b5d0:	1000052c 	.word	0x1000052c

0810b5d4 <__sinit_lock_acquire>:
 810b5d4:	4801      	ldr	r0, [pc, #4]	; (810b5dc <__sinit_lock_acquire+0x8>)
 810b5d6:	f000 bc1a 	b.w	810be0e <__retarget_lock_acquire_recursive>
 810b5da:	bf00      	nop
 810b5dc:	10000527 	.word	0x10000527

0810b5e0 <__sinit_lock_release>:
 810b5e0:	4801      	ldr	r0, [pc, #4]	; (810b5e8 <__sinit_lock_release+0x8>)
 810b5e2:	f000 bc15 	b.w	810be10 <__retarget_lock_release_recursive>
 810b5e6:	bf00      	nop
 810b5e8:	10000527 	.word	0x10000527

0810b5ec <__sinit>:
 810b5ec:	b510      	push	{r4, lr}
 810b5ee:	4604      	mov	r4, r0
 810b5f0:	f7ff fff0 	bl	810b5d4 <__sinit_lock_acquire>
 810b5f4:	69a3      	ldr	r3, [r4, #24]
 810b5f6:	b11b      	cbz	r3, 810b600 <__sinit+0x14>
 810b5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b5fc:	f7ff bff0 	b.w	810b5e0 <__sinit_lock_release>
 810b600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810b604:	6523      	str	r3, [r4, #80]	; 0x50
 810b606:	4b13      	ldr	r3, [pc, #76]	; (810b654 <__sinit+0x68>)
 810b608:	4a13      	ldr	r2, [pc, #76]	; (810b658 <__sinit+0x6c>)
 810b60a:	681b      	ldr	r3, [r3, #0]
 810b60c:	62a2      	str	r2, [r4, #40]	; 0x28
 810b60e:	42a3      	cmp	r3, r4
 810b610:	bf04      	itt	eq
 810b612:	2301      	moveq	r3, #1
 810b614:	61a3      	streq	r3, [r4, #24]
 810b616:	4620      	mov	r0, r4
 810b618:	f000 f820 	bl	810b65c <__sfp>
 810b61c:	6060      	str	r0, [r4, #4]
 810b61e:	4620      	mov	r0, r4
 810b620:	f000 f81c 	bl	810b65c <__sfp>
 810b624:	60a0      	str	r0, [r4, #8]
 810b626:	4620      	mov	r0, r4
 810b628:	f000 f818 	bl	810b65c <__sfp>
 810b62c:	2200      	movs	r2, #0
 810b62e:	60e0      	str	r0, [r4, #12]
 810b630:	2104      	movs	r1, #4
 810b632:	6860      	ldr	r0, [r4, #4]
 810b634:	f7ff ff82 	bl	810b53c <std>
 810b638:	68a0      	ldr	r0, [r4, #8]
 810b63a:	2201      	movs	r2, #1
 810b63c:	2109      	movs	r1, #9
 810b63e:	f7ff ff7d 	bl	810b53c <std>
 810b642:	68e0      	ldr	r0, [r4, #12]
 810b644:	2202      	movs	r2, #2
 810b646:	2112      	movs	r1, #18
 810b648:	f7ff ff78 	bl	810b53c <std>
 810b64c:	2301      	movs	r3, #1
 810b64e:	61a3      	str	r3, [r4, #24]
 810b650:	e7d2      	b.n	810b5f8 <__sinit+0xc>
 810b652:	bf00      	nop
 810b654:	0810dc0c 	.word	0x0810dc0c
 810b658:	0810b585 	.word	0x0810b585

0810b65c <__sfp>:
 810b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b65e:	4607      	mov	r7, r0
 810b660:	f7ff ffac 	bl	810b5bc <__sfp_lock_acquire>
 810b664:	4b1e      	ldr	r3, [pc, #120]	; (810b6e0 <__sfp+0x84>)
 810b666:	681e      	ldr	r6, [r3, #0]
 810b668:	69b3      	ldr	r3, [r6, #24]
 810b66a:	b913      	cbnz	r3, 810b672 <__sfp+0x16>
 810b66c:	4630      	mov	r0, r6
 810b66e:	f7ff ffbd 	bl	810b5ec <__sinit>
 810b672:	3648      	adds	r6, #72	; 0x48
 810b674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810b678:	3b01      	subs	r3, #1
 810b67a:	d503      	bpl.n	810b684 <__sfp+0x28>
 810b67c:	6833      	ldr	r3, [r6, #0]
 810b67e:	b30b      	cbz	r3, 810b6c4 <__sfp+0x68>
 810b680:	6836      	ldr	r6, [r6, #0]
 810b682:	e7f7      	b.n	810b674 <__sfp+0x18>
 810b684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810b688:	b9d5      	cbnz	r5, 810b6c0 <__sfp+0x64>
 810b68a:	4b16      	ldr	r3, [pc, #88]	; (810b6e4 <__sfp+0x88>)
 810b68c:	60e3      	str	r3, [r4, #12]
 810b68e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b692:	6665      	str	r5, [r4, #100]	; 0x64
 810b694:	f000 fbba 	bl	810be0c <__retarget_lock_init_recursive>
 810b698:	f7ff ff96 	bl	810b5c8 <__sfp_lock_release>
 810b69c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810b6a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810b6a4:	6025      	str	r5, [r4, #0]
 810b6a6:	61a5      	str	r5, [r4, #24]
 810b6a8:	2208      	movs	r2, #8
 810b6aa:	4629      	mov	r1, r5
 810b6ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810b6b0:	f7fc ffae 	bl	8108610 <memset>
 810b6b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810b6b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810b6bc:	4620      	mov	r0, r4
 810b6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b6c0:	3468      	adds	r4, #104	; 0x68
 810b6c2:	e7d9      	b.n	810b678 <__sfp+0x1c>
 810b6c4:	2104      	movs	r1, #4
 810b6c6:	4638      	mov	r0, r7
 810b6c8:	f7ff ff62 	bl	810b590 <__sfmoreglue>
 810b6cc:	4604      	mov	r4, r0
 810b6ce:	6030      	str	r0, [r6, #0]
 810b6d0:	2800      	cmp	r0, #0
 810b6d2:	d1d5      	bne.n	810b680 <__sfp+0x24>
 810b6d4:	f7ff ff78 	bl	810b5c8 <__sfp_lock_release>
 810b6d8:	230c      	movs	r3, #12
 810b6da:	603b      	str	r3, [r7, #0]
 810b6dc:	e7ee      	b.n	810b6bc <__sfp+0x60>
 810b6de:	bf00      	nop
 810b6e0:	0810dc0c 	.word	0x0810dc0c
 810b6e4:	ffff0001 	.word	0xffff0001

0810b6e8 <_fwalk_reent>:
 810b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b6ec:	4606      	mov	r6, r0
 810b6ee:	4688      	mov	r8, r1
 810b6f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810b6f4:	2700      	movs	r7, #0
 810b6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b6fa:	f1b9 0901 	subs.w	r9, r9, #1
 810b6fe:	d505      	bpl.n	810b70c <_fwalk_reent+0x24>
 810b700:	6824      	ldr	r4, [r4, #0]
 810b702:	2c00      	cmp	r4, #0
 810b704:	d1f7      	bne.n	810b6f6 <_fwalk_reent+0xe>
 810b706:	4638      	mov	r0, r7
 810b708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b70c:	89ab      	ldrh	r3, [r5, #12]
 810b70e:	2b01      	cmp	r3, #1
 810b710:	d907      	bls.n	810b722 <_fwalk_reent+0x3a>
 810b712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b716:	3301      	adds	r3, #1
 810b718:	d003      	beq.n	810b722 <_fwalk_reent+0x3a>
 810b71a:	4629      	mov	r1, r5
 810b71c:	4630      	mov	r0, r6
 810b71e:	47c0      	blx	r8
 810b720:	4307      	orrs	r7, r0
 810b722:	3568      	adds	r5, #104	; 0x68
 810b724:	e7e9      	b.n	810b6fa <_fwalk_reent+0x12>

0810b726 <rshift>:
 810b726:	6903      	ldr	r3, [r0, #16]
 810b728:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810b72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b730:	ea4f 1261 	mov.w	r2, r1, asr #5
 810b734:	f100 0414 	add.w	r4, r0, #20
 810b738:	dd45      	ble.n	810b7c6 <rshift+0xa0>
 810b73a:	f011 011f 	ands.w	r1, r1, #31
 810b73e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810b742:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810b746:	d10c      	bne.n	810b762 <rshift+0x3c>
 810b748:	f100 0710 	add.w	r7, r0, #16
 810b74c:	4629      	mov	r1, r5
 810b74e:	42b1      	cmp	r1, r6
 810b750:	d334      	bcc.n	810b7bc <rshift+0x96>
 810b752:	1a9b      	subs	r3, r3, r2
 810b754:	009b      	lsls	r3, r3, #2
 810b756:	1eea      	subs	r2, r5, #3
 810b758:	4296      	cmp	r6, r2
 810b75a:	bf38      	it	cc
 810b75c:	2300      	movcc	r3, #0
 810b75e:	4423      	add	r3, r4
 810b760:	e015      	b.n	810b78e <rshift+0x68>
 810b762:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810b766:	f1c1 0820 	rsb	r8, r1, #32
 810b76a:	40cf      	lsrs	r7, r1
 810b76c:	f105 0e04 	add.w	lr, r5, #4
 810b770:	46a1      	mov	r9, r4
 810b772:	4576      	cmp	r6, lr
 810b774:	46f4      	mov	ip, lr
 810b776:	d815      	bhi.n	810b7a4 <rshift+0x7e>
 810b778:	1a9b      	subs	r3, r3, r2
 810b77a:	009a      	lsls	r2, r3, #2
 810b77c:	3a04      	subs	r2, #4
 810b77e:	3501      	adds	r5, #1
 810b780:	42ae      	cmp	r6, r5
 810b782:	bf38      	it	cc
 810b784:	2200      	movcc	r2, #0
 810b786:	18a3      	adds	r3, r4, r2
 810b788:	50a7      	str	r7, [r4, r2]
 810b78a:	b107      	cbz	r7, 810b78e <rshift+0x68>
 810b78c:	3304      	adds	r3, #4
 810b78e:	1b1a      	subs	r2, r3, r4
 810b790:	42a3      	cmp	r3, r4
 810b792:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810b796:	bf08      	it	eq
 810b798:	2300      	moveq	r3, #0
 810b79a:	6102      	str	r2, [r0, #16]
 810b79c:	bf08      	it	eq
 810b79e:	6143      	streq	r3, [r0, #20]
 810b7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b7a4:	f8dc c000 	ldr.w	ip, [ip]
 810b7a8:	fa0c fc08 	lsl.w	ip, ip, r8
 810b7ac:	ea4c 0707 	orr.w	r7, ip, r7
 810b7b0:	f849 7b04 	str.w	r7, [r9], #4
 810b7b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 810b7b8:	40cf      	lsrs	r7, r1
 810b7ba:	e7da      	b.n	810b772 <rshift+0x4c>
 810b7bc:	f851 cb04 	ldr.w	ip, [r1], #4
 810b7c0:	f847 cf04 	str.w	ip, [r7, #4]!
 810b7c4:	e7c3      	b.n	810b74e <rshift+0x28>
 810b7c6:	4623      	mov	r3, r4
 810b7c8:	e7e1      	b.n	810b78e <rshift+0x68>

0810b7ca <__hexdig_fun>:
 810b7ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810b7ce:	2b09      	cmp	r3, #9
 810b7d0:	d802      	bhi.n	810b7d8 <__hexdig_fun+0xe>
 810b7d2:	3820      	subs	r0, #32
 810b7d4:	b2c0      	uxtb	r0, r0
 810b7d6:	4770      	bx	lr
 810b7d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810b7dc:	2b05      	cmp	r3, #5
 810b7de:	d801      	bhi.n	810b7e4 <__hexdig_fun+0x1a>
 810b7e0:	3847      	subs	r0, #71	; 0x47
 810b7e2:	e7f7      	b.n	810b7d4 <__hexdig_fun+0xa>
 810b7e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810b7e8:	2b05      	cmp	r3, #5
 810b7ea:	d801      	bhi.n	810b7f0 <__hexdig_fun+0x26>
 810b7ec:	3827      	subs	r0, #39	; 0x27
 810b7ee:	e7f1      	b.n	810b7d4 <__hexdig_fun+0xa>
 810b7f0:	2000      	movs	r0, #0
 810b7f2:	4770      	bx	lr

0810b7f4 <__gethex>:
 810b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b7f8:	ed2d 8b02 	vpush	{d8}
 810b7fc:	b089      	sub	sp, #36	; 0x24
 810b7fe:	ee08 0a10 	vmov	s16, r0
 810b802:	9304      	str	r3, [sp, #16]
 810b804:	4bbc      	ldr	r3, [pc, #752]	; (810baf8 <__gethex+0x304>)
 810b806:	681b      	ldr	r3, [r3, #0]
 810b808:	9301      	str	r3, [sp, #4]
 810b80a:	4618      	mov	r0, r3
 810b80c:	468b      	mov	fp, r1
 810b80e:	4690      	mov	r8, r2
 810b810:	f7f4 fd70 	bl	81002f4 <strlen>
 810b814:	9b01      	ldr	r3, [sp, #4]
 810b816:	f8db 2000 	ldr.w	r2, [fp]
 810b81a:	4403      	add	r3, r0
 810b81c:	4682      	mov	sl, r0
 810b81e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810b822:	9305      	str	r3, [sp, #20]
 810b824:	1c93      	adds	r3, r2, #2
 810b826:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810b82a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810b82e:	32fe      	adds	r2, #254	; 0xfe
 810b830:	18d1      	adds	r1, r2, r3
 810b832:	461f      	mov	r7, r3
 810b834:	f813 0b01 	ldrb.w	r0, [r3], #1
 810b838:	9100      	str	r1, [sp, #0]
 810b83a:	2830      	cmp	r0, #48	; 0x30
 810b83c:	d0f8      	beq.n	810b830 <__gethex+0x3c>
 810b83e:	f7ff ffc4 	bl	810b7ca <__hexdig_fun>
 810b842:	4604      	mov	r4, r0
 810b844:	2800      	cmp	r0, #0
 810b846:	d13a      	bne.n	810b8be <__gethex+0xca>
 810b848:	9901      	ldr	r1, [sp, #4]
 810b84a:	4652      	mov	r2, sl
 810b84c:	4638      	mov	r0, r7
 810b84e:	f7fd ff9b 	bl	8109788 <strncmp>
 810b852:	4605      	mov	r5, r0
 810b854:	2800      	cmp	r0, #0
 810b856:	d168      	bne.n	810b92a <__gethex+0x136>
 810b858:	f817 000a 	ldrb.w	r0, [r7, sl]
 810b85c:	eb07 060a 	add.w	r6, r7, sl
 810b860:	f7ff ffb3 	bl	810b7ca <__hexdig_fun>
 810b864:	2800      	cmp	r0, #0
 810b866:	d062      	beq.n	810b92e <__gethex+0x13a>
 810b868:	4633      	mov	r3, r6
 810b86a:	7818      	ldrb	r0, [r3, #0]
 810b86c:	2830      	cmp	r0, #48	; 0x30
 810b86e:	461f      	mov	r7, r3
 810b870:	f103 0301 	add.w	r3, r3, #1
 810b874:	d0f9      	beq.n	810b86a <__gethex+0x76>
 810b876:	f7ff ffa8 	bl	810b7ca <__hexdig_fun>
 810b87a:	2301      	movs	r3, #1
 810b87c:	fab0 f480 	clz	r4, r0
 810b880:	0964      	lsrs	r4, r4, #5
 810b882:	4635      	mov	r5, r6
 810b884:	9300      	str	r3, [sp, #0]
 810b886:	463a      	mov	r2, r7
 810b888:	4616      	mov	r6, r2
 810b88a:	3201      	adds	r2, #1
 810b88c:	7830      	ldrb	r0, [r6, #0]
 810b88e:	f7ff ff9c 	bl	810b7ca <__hexdig_fun>
 810b892:	2800      	cmp	r0, #0
 810b894:	d1f8      	bne.n	810b888 <__gethex+0x94>
 810b896:	9901      	ldr	r1, [sp, #4]
 810b898:	4652      	mov	r2, sl
 810b89a:	4630      	mov	r0, r6
 810b89c:	f7fd ff74 	bl	8109788 <strncmp>
 810b8a0:	b980      	cbnz	r0, 810b8c4 <__gethex+0xd0>
 810b8a2:	b94d      	cbnz	r5, 810b8b8 <__gethex+0xc4>
 810b8a4:	eb06 050a 	add.w	r5, r6, sl
 810b8a8:	462a      	mov	r2, r5
 810b8aa:	4616      	mov	r6, r2
 810b8ac:	3201      	adds	r2, #1
 810b8ae:	7830      	ldrb	r0, [r6, #0]
 810b8b0:	f7ff ff8b 	bl	810b7ca <__hexdig_fun>
 810b8b4:	2800      	cmp	r0, #0
 810b8b6:	d1f8      	bne.n	810b8aa <__gethex+0xb6>
 810b8b8:	1bad      	subs	r5, r5, r6
 810b8ba:	00ad      	lsls	r5, r5, #2
 810b8bc:	e004      	b.n	810b8c8 <__gethex+0xd4>
 810b8be:	2400      	movs	r4, #0
 810b8c0:	4625      	mov	r5, r4
 810b8c2:	e7e0      	b.n	810b886 <__gethex+0x92>
 810b8c4:	2d00      	cmp	r5, #0
 810b8c6:	d1f7      	bne.n	810b8b8 <__gethex+0xc4>
 810b8c8:	7833      	ldrb	r3, [r6, #0]
 810b8ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810b8ce:	2b50      	cmp	r3, #80	; 0x50
 810b8d0:	d13b      	bne.n	810b94a <__gethex+0x156>
 810b8d2:	7873      	ldrb	r3, [r6, #1]
 810b8d4:	2b2b      	cmp	r3, #43	; 0x2b
 810b8d6:	d02c      	beq.n	810b932 <__gethex+0x13e>
 810b8d8:	2b2d      	cmp	r3, #45	; 0x2d
 810b8da:	d02e      	beq.n	810b93a <__gethex+0x146>
 810b8dc:	1c71      	adds	r1, r6, #1
 810b8de:	f04f 0900 	mov.w	r9, #0
 810b8e2:	7808      	ldrb	r0, [r1, #0]
 810b8e4:	f7ff ff71 	bl	810b7ca <__hexdig_fun>
 810b8e8:	1e43      	subs	r3, r0, #1
 810b8ea:	b2db      	uxtb	r3, r3
 810b8ec:	2b18      	cmp	r3, #24
 810b8ee:	d82c      	bhi.n	810b94a <__gethex+0x156>
 810b8f0:	f1a0 0210 	sub.w	r2, r0, #16
 810b8f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810b8f8:	f7ff ff67 	bl	810b7ca <__hexdig_fun>
 810b8fc:	1e43      	subs	r3, r0, #1
 810b8fe:	b2db      	uxtb	r3, r3
 810b900:	2b18      	cmp	r3, #24
 810b902:	d91d      	bls.n	810b940 <__gethex+0x14c>
 810b904:	f1b9 0f00 	cmp.w	r9, #0
 810b908:	d000      	beq.n	810b90c <__gethex+0x118>
 810b90a:	4252      	negs	r2, r2
 810b90c:	4415      	add	r5, r2
 810b90e:	f8cb 1000 	str.w	r1, [fp]
 810b912:	b1e4      	cbz	r4, 810b94e <__gethex+0x15a>
 810b914:	9b00      	ldr	r3, [sp, #0]
 810b916:	2b00      	cmp	r3, #0
 810b918:	bf14      	ite	ne
 810b91a:	2700      	movne	r7, #0
 810b91c:	2706      	moveq	r7, #6
 810b91e:	4638      	mov	r0, r7
 810b920:	b009      	add	sp, #36	; 0x24
 810b922:	ecbd 8b02 	vpop	{d8}
 810b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b92a:	463e      	mov	r6, r7
 810b92c:	4625      	mov	r5, r4
 810b92e:	2401      	movs	r4, #1
 810b930:	e7ca      	b.n	810b8c8 <__gethex+0xd4>
 810b932:	f04f 0900 	mov.w	r9, #0
 810b936:	1cb1      	adds	r1, r6, #2
 810b938:	e7d3      	b.n	810b8e2 <__gethex+0xee>
 810b93a:	f04f 0901 	mov.w	r9, #1
 810b93e:	e7fa      	b.n	810b936 <__gethex+0x142>
 810b940:	230a      	movs	r3, #10
 810b942:	fb03 0202 	mla	r2, r3, r2, r0
 810b946:	3a10      	subs	r2, #16
 810b948:	e7d4      	b.n	810b8f4 <__gethex+0x100>
 810b94a:	4631      	mov	r1, r6
 810b94c:	e7df      	b.n	810b90e <__gethex+0x11a>
 810b94e:	1bf3      	subs	r3, r6, r7
 810b950:	3b01      	subs	r3, #1
 810b952:	4621      	mov	r1, r4
 810b954:	2b07      	cmp	r3, #7
 810b956:	dc0b      	bgt.n	810b970 <__gethex+0x17c>
 810b958:	ee18 0a10 	vmov	r0, s16
 810b95c:	f000 faf6 	bl	810bf4c <_Balloc>
 810b960:	4604      	mov	r4, r0
 810b962:	b940      	cbnz	r0, 810b976 <__gethex+0x182>
 810b964:	4b65      	ldr	r3, [pc, #404]	; (810bafc <__gethex+0x308>)
 810b966:	4602      	mov	r2, r0
 810b968:	21de      	movs	r1, #222	; 0xde
 810b96a:	4865      	ldr	r0, [pc, #404]	; (810bb00 <__gethex+0x30c>)
 810b96c:	f7fc fdd8 	bl	8108520 <__assert_func>
 810b970:	3101      	adds	r1, #1
 810b972:	105b      	asrs	r3, r3, #1
 810b974:	e7ee      	b.n	810b954 <__gethex+0x160>
 810b976:	f100 0914 	add.w	r9, r0, #20
 810b97a:	f04f 0b00 	mov.w	fp, #0
 810b97e:	f1ca 0301 	rsb	r3, sl, #1
 810b982:	f8cd 9008 	str.w	r9, [sp, #8]
 810b986:	f8cd b000 	str.w	fp, [sp]
 810b98a:	9306      	str	r3, [sp, #24]
 810b98c:	42b7      	cmp	r7, r6
 810b98e:	d340      	bcc.n	810ba12 <__gethex+0x21e>
 810b990:	9802      	ldr	r0, [sp, #8]
 810b992:	9b00      	ldr	r3, [sp, #0]
 810b994:	f840 3b04 	str.w	r3, [r0], #4
 810b998:	eba0 0009 	sub.w	r0, r0, r9
 810b99c:	1080      	asrs	r0, r0, #2
 810b99e:	0146      	lsls	r6, r0, #5
 810b9a0:	6120      	str	r0, [r4, #16]
 810b9a2:	4618      	mov	r0, r3
 810b9a4:	f000 fbc8 	bl	810c138 <__hi0bits>
 810b9a8:	1a30      	subs	r0, r6, r0
 810b9aa:	f8d8 6000 	ldr.w	r6, [r8]
 810b9ae:	42b0      	cmp	r0, r6
 810b9b0:	dd63      	ble.n	810ba7a <__gethex+0x286>
 810b9b2:	1b87      	subs	r7, r0, r6
 810b9b4:	4639      	mov	r1, r7
 810b9b6:	4620      	mov	r0, r4
 810b9b8:	f000 ff62 	bl	810c880 <__any_on>
 810b9bc:	4682      	mov	sl, r0
 810b9be:	b1a8      	cbz	r0, 810b9ec <__gethex+0x1f8>
 810b9c0:	1e7b      	subs	r3, r7, #1
 810b9c2:	1159      	asrs	r1, r3, #5
 810b9c4:	f003 021f 	and.w	r2, r3, #31
 810b9c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810b9cc:	f04f 0a01 	mov.w	sl, #1
 810b9d0:	fa0a f202 	lsl.w	r2, sl, r2
 810b9d4:	420a      	tst	r2, r1
 810b9d6:	d009      	beq.n	810b9ec <__gethex+0x1f8>
 810b9d8:	4553      	cmp	r3, sl
 810b9da:	dd05      	ble.n	810b9e8 <__gethex+0x1f4>
 810b9dc:	1eb9      	subs	r1, r7, #2
 810b9de:	4620      	mov	r0, r4
 810b9e0:	f000 ff4e 	bl	810c880 <__any_on>
 810b9e4:	2800      	cmp	r0, #0
 810b9e6:	d145      	bne.n	810ba74 <__gethex+0x280>
 810b9e8:	f04f 0a02 	mov.w	sl, #2
 810b9ec:	4639      	mov	r1, r7
 810b9ee:	4620      	mov	r0, r4
 810b9f0:	f7ff fe99 	bl	810b726 <rshift>
 810b9f4:	443d      	add	r5, r7
 810b9f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b9fa:	42ab      	cmp	r3, r5
 810b9fc:	da4c      	bge.n	810ba98 <__gethex+0x2a4>
 810b9fe:	ee18 0a10 	vmov	r0, s16
 810ba02:	4621      	mov	r1, r4
 810ba04:	f000 fae2 	bl	810bfcc <_Bfree>
 810ba08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810ba0a:	2300      	movs	r3, #0
 810ba0c:	6013      	str	r3, [r2, #0]
 810ba0e:	27a3      	movs	r7, #163	; 0xa3
 810ba10:	e785      	b.n	810b91e <__gethex+0x12a>
 810ba12:	1e73      	subs	r3, r6, #1
 810ba14:	9a05      	ldr	r2, [sp, #20]
 810ba16:	9303      	str	r3, [sp, #12]
 810ba18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810ba1c:	4293      	cmp	r3, r2
 810ba1e:	d019      	beq.n	810ba54 <__gethex+0x260>
 810ba20:	f1bb 0f20 	cmp.w	fp, #32
 810ba24:	d107      	bne.n	810ba36 <__gethex+0x242>
 810ba26:	9b02      	ldr	r3, [sp, #8]
 810ba28:	9a00      	ldr	r2, [sp, #0]
 810ba2a:	f843 2b04 	str.w	r2, [r3], #4
 810ba2e:	9302      	str	r3, [sp, #8]
 810ba30:	2300      	movs	r3, #0
 810ba32:	9300      	str	r3, [sp, #0]
 810ba34:	469b      	mov	fp, r3
 810ba36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810ba3a:	f7ff fec6 	bl	810b7ca <__hexdig_fun>
 810ba3e:	9b00      	ldr	r3, [sp, #0]
 810ba40:	f000 000f 	and.w	r0, r0, #15
 810ba44:	fa00 f00b 	lsl.w	r0, r0, fp
 810ba48:	4303      	orrs	r3, r0
 810ba4a:	9300      	str	r3, [sp, #0]
 810ba4c:	f10b 0b04 	add.w	fp, fp, #4
 810ba50:	9b03      	ldr	r3, [sp, #12]
 810ba52:	e00d      	b.n	810ba70 <__gethex+0x27c>
 810ba54:	9b03      	ldr	r3, [sp, #12]
 810ba56:	9a06      	ldr	r2, [sp, #24]
 810ba58:	4413      	add	r3, r2
 810ba5a:	42bb      	cmp	r3, r7
 810ba5c:	d3e0      	bcc.n	810ba20 <__gethex+0x22c>
 810ba5e:	4618      	mov	r0, r3
 810ba60:	9901      	ldr	r1, [sp, #4]
 810ba62:	9307      	str	r3, [sp, #28]
 810ba64:	4652      	mov	r2, sl
 810ba66:	f7fd fe8f 	bl	8109788 <strncmp>
 810ba6a:	9b07      	ldr	r3, [sp, #28]
 810ba6c:	2800      	cmp	r0, #0
 810ba6e:	d1d7      	bne.n	810ba20 <__gethex+0x22c>
 810ba70:	461e      	mov	r6, r3
 810ba72:	e78b      	b.n	810b98c <__gethex+0x198>
 810ba74:	f04f 0a03 	mov.w	sl, #3
 810ba78:	e7b8      	b.n	810b9ec <__gethex+0x1f8>
 810ba7a:	da0a      	bge.n	810ba92 <__gethex+0x29e>
 810ba7c:	1a37      	subs	r7, r6, r0
 810ba7e:	4621      	mov	r1, r4
 810ba80:	ee18 0a10 	vmov	r0, s16
 810ba84:	463a      	mov	r2, r7
 810ba86:	f000 fcbd 	bl	810c404 <__lshift>
 810ba8a:	1bed      	subs	r5, r5, r7
 810ba8c:	4604      	mov	r4, r0
 810ba8e:	f100 0914 	add.w	r9, r0, #20
 810ba92:	f04f 0a00 	mov.w	sl, #0
 810ba96:	e7ae      	b.n	810b9f6 <__gethex+0x202>
 810ba98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810ba9c:	42a8      	cmp	r0, r5
 810ba9e:	dd72      	ble.n	810bb86 <__gethex+0x392>
 810baa0:	1b45      	subs	r5, r0, r5
 810baa2:	42ae      	cmp	r6, r5
 810baa4:	dc36      	bgt.n	810bb14 <__gethex+0x320>
 810baa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810baaa:	2b02      	cmp	r3, #2
 810baac:	d02a      	beq.n	810bb04 <__gethex+0x310>
 810baae:	2b03      	cmp	r3, #3
 810bab0:	d02c      	beq.n	810bb0c <__gethex+0x318>
 810bab2:	2b01      	cmp	r3, #1
 810bab4:	d115      	bne.n	810bae2 <__gethex+0x2ee>
 810bab6:	42ae      	cmp	r6, r5
 810bab8:	d113      	bne.n	810bae2 <__gethex+0x2ee>
 810baba:	2e01      	cmp	r6, #1
 810babc:	d10b      	bne.n	810bad6 <__gethex+0x2e2>
 810babe:	9a04      	ldr	r2, [sp, #16]
 810bac0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810bac4:	6013      	str	r3, [r2, #0]
 810bac6:	2301      	movs	r3, #1
 810bac8:	6123      	str	r3, [r4, #16]
 810baca:	f8c9 3000 	str.w	r3, [r9]
 810bace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810bad0:	2762      	movs	r7, #98	; 0x62
 810bad2:	601c      	str	r4, [r3, #0]
 810bad4:	e723      	b.n	810b91e <__gethex+0x12a>
 810bad6:	1e71      	subs	r1, r6, #1
 810bad8:	4620      	mov	r0, r4
 810bada:	f000 fed1 	bl	810c880 <__any_on>
 810bade:	2800      	cmp	r0, #0
 810bae0:	d1ed      	bne.n	810babe <__gethex+0x2ca>
 810bae2:	ee18 0a10 	vmov	r0, s16
 810bae6:	4621      	mov	r1, r4
 810bae8:	f000 fa70 	bl	810bfcc <_Bfree>
 810baec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810baee:	2300      	movs	r3, #0
 810baf0:	6013      	str	r3, [r2, #0]
 810baf2:	2750      	movs	r7, #80	; 0x50
 810baf4:	e713      	b.n	810b91e <__gethex+0x12a>
 810baf6:	bf00      	nop
 810baf8:	0810df14 	.word	0x0810df14
 810bafc:	0810de34 	.word	0x0810de34
 810bb00:	0810dea8 	.word	0x0810dea8
 810bb04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb06:	2b00      	cmp	r3, #0
 810bb08:	d1eb      	bne.n	810bae2 <__gethex+0x2ee>
 810bb0a:	e7d8      	b.n	810babe <__gethex+0x2ca>
 810bb0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb0e:	2b00      	cmp	r3, #0
 810bb10:	d1d5      	bne.n	810babe <__gethex+0x2ca>
 810bb12:	e7e6      	b.n	810bae2 <__gethex+0x2ee>
 810bb14:	1e6f      	subs	r7, r5, #1
 810bb16:	f1ba 0f00 	cmp.w	sl, #0
 810bb1a:	d131      	bne.n	810bb80 <__gethex+0x38c>
 810bb1c:	b127      	cbz	r7, 810bb28 <__gethex+0x334>
 810bb1e:	4639      	mov	r1, r7
 810bb20:	4620      	mov	r0, r4
 810bb22:	f000 fead 	bl	810c880 <__any_on>
 810bb26:	4682      	mov	sl, r0
 810bb28:	117b      	asrs	r3, r7, #5
 810bb2a:	2101      	movs	r1, #1
 810bb2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810bb30:	f007 071f 	and.w	r7, r7, #31
 810bb34:	fa01 f707 	lsl.w	r7, r1, r7
 810bb38:	421f      	tst	r7, r3
 810bb3a:	4629      	mov	r1, r5
 810bb3c:	4620      	mov	r0, r4
 810bb3e:	bf18      	it	ne
 810bb40:	f04a 0a02 	orrne.w	sl, sl, #2
 810bb44:	1b76      	subs	r6, r6, r5
 810bb46:	f7ff fdee 	bl	810b726 <rshift>
 810bb4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810bb4e:	2702      	movs	r7, #2
 810bb50:	f1ba 0f00 	cmp.w	sl, #0
 810bb54:	d048      	beq.n	810bbe8 <__gethex+0x3f4>
 810bb56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810bb5a:	2b02      	cmp	r3, #2
 810bb5c:	d015      	beq.n	810bb8a <__gethex+0x396>
 810bb5e:	2b03      	cmp	r3, #3
 810bb60:	d017      	beq.n	810bb92 <__gethex+0x39e>
 810bb62:	2b01      	cmp	r3, #1
 810bb64:	d109      	bne.n	810bb7a <__gethex+0x386>
 810bb66:	f01a 0f02 	tst.w	sl, #2
 810bb6a:	d006      	beq.n	810bb7a <__gethex+0x386>
 810bb6c:	f8d9 0000 	ldr.w	r0, [r9]
 810bb70:	ea4a 0a00 	orr.w	sl, sl, r0
 810bb74:	f01a 0f01 	tst.w	sl, #1
 810bb78:	d10e      	bne.n	810bb98 <__gethex+0x3a4>
 810bb7a:	f047 0710 	orr.w	r7, r7, #16
 810bb7e:	e033      	b.n	810bbe8 <__gethex+0x3f4>
 810bb80:	f04f 0a01 	mov.w	sl, #1
 810bb84:	e7d0      	b.n	810bb28 <__gethex+0x334>
 810bb86:	2701      	movs	r7, #1
 810bb88:	e7e2      	b.n	810bb50 <__gethex+0x35c>
 810bb8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb8c:	f1c3 0301 	rsb	r3, r3, #1
 810bb90:	9315      	str	r3, [sp, #84]	; 0x54
 810bb92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb94:	2b00      	cmp	r3, #0
 810bb96:	d0f0      	beq.n	810bb7a <__gethex+0x386>
 810bb98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810bb9c:	f104 0314 	add.w	r3, r4, #20
 810bba0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810bba4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810bba8:	f04f 0c00 	mov.w	ip, #0
 810bbac:	4618      	mov	r0, r3
 810bbae:	f853 2b04 	ldr.w	r2, [r3], #4
 810bbb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 810bbb6:	d01c      	beq.n	810bbf2 <__gethex+0x3fe>
 810bbb8:	3201      	adds	r2, #1
 810bbba:	6002      	str	r2, [r0, #0]
 810bbbc:	2f02      	cmp	r7, #2
 810bbbe:	f104 0314 	add.w	r3, r4, #20
 810bbc2:	d13f      	bne.n	810bc44 <__gethex+0x450>
 810bbc4:	f8d8 2000 	ldr.w	r2, [r8]
 810bbc8:	3a01      	subs	r2, #1
 810bbca:	42b2      	cmp	r2, r6
 810bbcc:	d10a      	bne.n	810bbe4 <__gethex+0x3f0>
 810bbce:	1171      	asrs	r1, r6, #5
 810bbd0:	2201      	movs	r2, #1
 810bbd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810bbd6:	f006 061f 	and.w	r6, r6, #31
 810bbda:	fa02 f606 	lsl.w	r6, r2, r6
 810bbde:	421e      	tst	r6, r3
 810bbe0:	bf18      	it	ne
 810bbe2:	4617      	movne	r7, r2
 810bbe4:	f047 0720 	orr.w	r7, r7, #32
 810bbe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810bbea:	601c      	str	r4, [r3, #0]
 810bbec:	9b04      	ldr	r3, [sp, #16]
 810bbee:	601d      	str	r5, [r3, #0]
 810bbf0:	e695      	b.n	810b91e <__gethex+0x12a>
 810bbf2:	4299      	cmp	r1, r3
 810bbf4:	f843 cc04 	str.w	ip, [r3, #-4]
 810bbf8:	d8d8      	bhi.n	810bbac <__gethex+0x3b8>
 810bbfa:	68a3      	ldr	r3, [r4, #8]
 810bbfc:	459b      	cmp	fp, r3
 810bbfe:	db19      	blt.n	810bc34 <__gethex+0x440>
 810bc00:	6861      	ldr	r1, [r4, #4]
 810bc02:	ee18 0a10 	vmov	r0, s16
 810bc06:	3101      	adds	r1, #1
 810bc08:	f000 f9a0 	bl	810bf4c <_Balloc>
 810bc0c:	4681      	mov	r9, r0
 810bc0e:	b918      	cbnz	r0, 810bc18 <__gethex+0x424>
 810bc10:	4b1a      	ldr	r3, [pc, #104]	; (810bc7c <__gethex+0x488>)
 810bc12:	4602      	mov	r2, r0
 810bc14:	2184      	movs	r1, #132	; 0x84
 810bc16:	e6a8      	b.n	810b96a <__gethex+0x176>
 810bc18:	6922      	ldr	r2, [r4, #16]
 810bc1a:	3202      	adds	r2, #2
 810bc1c:	f104 010c 	add.w	r1, r4, #12
 810bc20:	0092      	lsls	r2, r2, #2
 810bc22:	300c      	adds	r0, #12
 810bc24:	f7fc fce6 	bl	81085f4 <memcpy>
 810bc28:	4621      	mov	r1, r4
 810bc2a:	ee18 0a10 	vmov	r0, s16
 810bc2e:	f000 f9cd 	bl	810bfcc <_Bfree>
 810bc32:	464c      	mov	r4, r9
 810bc34:	6923      	ldr	r3, [r4, #16]
 810bc36:	1c5a      	adds	r2, r3, #1
 810bc38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810bc3c:	6122      	str	r2, [r4, #16]
 810bc3e:	2201      	movs	r2, #1
 810bc40:	615a      	str	r2, [r3, #20]
 810bc42:	e7bb      	b.n	810bbbc <__gethex+0x3c8>
 810bc44:	6922      	ldr	r2, [r4, #16]
 810bc46:	455a      	cmp	r2, fp
 810bc48:	dd0b      	ble.n	810bc62 <__gethex+0x46e>
 810bc4a:	2101      	movs	r1, #1
 810bc4c:	4620      	mov	r0, r4
 810bc4e:	f7ff fd6a 	bl	810b726 <rshift>
 810bc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810bc56:	3501      	adds	r5, #1
 810bc58:	42ab      	cmp	r3, r5
 810bc5a:	f6ff aed0 	blt.w	810b9fe <__gethex+0x20a>
 810bc5e:	2701      	movs	r7, #1
 810bc60:	e7c0      	b.n	810bbe4 <__gethex+0x3f0>
 810bc62:	f016 061f 	ands.w	r6, r6, #31
 810bc66:	d0fa      	beq.n	810bc5e <__gethex+0x46a>
 810bc68:	449a      	add	sl, r3
 810bc6a:	f1c6 0620 	rsb	r6, r6, #32
 810bc6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810bc72:	f000 fa61 	bl	810c138 <__hi0bits>
 810bc76:	42b0      	cmp	r0, r6
 810bc78:	dbe7      	blt.n	810bc4a <__gethex+0x456>
 810bc7a:	e7f0      	b.n	810bc5e <__gethex+0x46a>
 810bc7c:	0810de34 	.word	0x0810de34

0810bc80 <L_shift>:
 810bc80:	f1c2 0208 	rsb	r2, r2, #8
 810bc84:	0092      	lsls	r2, r2, #2
 810bc86:	b570      	push	{r4, r5, r6, lr}
 810bc88:	f1c2 0620 	rsb	r6, r2, #32
 810bc8c:	6843      	ldr	r3, [r0, #4]
 810bc8e:	6804      	ldr	r4, [r0, #0]
 810bc90:	fa03 f506 	lsl.w	r5, r3, r6
 810bc94:	432c      	orrs	r4, r5
 810bc96:	40d3      	lsrs	r3, r2
 810bc98:	6004      	str	r4, [r0, #0]
 810bc9a:	f840 3f04 	str.w	r3, [r0, #4]!
 810bc9e:	4288      	cmp	r0, r1
 810bca0:	d3f4      	bcc.n	810bc8c <L_shift+0xc>
 810bca2:	bd70      	pop	{r4, r5, r6, pc}

0810bca4 <__match>:
 810bca4:	b530      	push	{r4, r5, lr}
 810bca6:	6803      	ldr	r3, [r0, #0]
 810bca8:	3301      	adds	r3, #1
 810bcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 810bcae:	b914      	cbnz	r4, 810bcb6 <__match+0x12>
 810bcb0:	6003      	str	r3, [r0, #0]
 810bcb2:	2001      	movs	r0, #1
 810bcb4:	bd30      	pop	{r4, r5, pc}
 810bcb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bcba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810bcbe:	2d19      	cmp	r5, #25
 810bcc0:	bf98      	it	ls
 810bcc2:	3220      	addls	r2, #32
 810bcc4:	42a2      	cmp	r2, r4
 810bcc6:	d0f0      	beq.n	810bcaa <__match+0x6>
 810bcc8:	2000      	movs	r0, #0
 810bcca:	e7f3      	b.n	810bcb4 <__match+0x10>

0810bccc <__hexnan>:
 810bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bcd0:	680b      	ldr	r3, [r1, #0]
 810bcd2:	6801      	ldr	r1, [r0, #0]
 810bcd4:	115e      	asrs	r6, r3, #5
 810bcd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810bcda:	f013 031f 	ands.w	r3, r3, #31
 810bcde:	b087      	sub	sp, #28
 810bce0:	bf18      	it	ne
 810bce2:	3604      	addne	r6, #4
 810bce4:	2500      	movs	r5, #0
 810bce6:	1f37      	subs	r7, r6, #4
 810bce8:	4682      	mov	sl, r0
 810bcea:	4690      	mov	r8, r2
 810bcec:	9301      	str	r3, [sp, #4]
 810bcee:	f846 5c04 	str.w	r5, [r6, #-4]
 810bcf2:	46b9      	mov	r9, r7
 810bcf4:	463c      	mov	r4, r7
 810bcf6:	9502      	str	r5, [sp, #8]
 810bcf8:	46ab      	mov	fp, r5
 810bcfa:	784a      	ldrb	r2, [r1, #1]
 810bcfc:	1c4b      	adds	r3, r1, #1
 810bcfe:	9303      	str	r3, [sp, #12]
 810bd00:	b342      	cbz	r2, 810bd54 <__hexnan+0x88>
 810bd02:	4610      	mov	r0, r2
 810bd04:	9105      	str	r1, [sp, #20]
 810bd06:	9204      	str	r2, [sp, #16]
 810bd08:	f7ff fd5f 	bl	810b7ca <__hexdig_fun>
 810bd0c:	2800      	cmp	r0, #0
 810bd0e:	d14f      	bne.n	810bdb0 <__hexnan+0xe4>
 810bd10:	9a04      	ldr	r2, [sp, #16]
 810bd12:	9905      	ldr	r1, [sp, #20]
 810bd14:	2a20      	cmp	r2, #32
 810bd16:	d818      	bhi.n	810bd4a <__hexnan+0x7e>
 810bd18:	9b02      	ldr	r3, [sp, #8]
 810bd1a:	459b      	cmp	fp, r3
 810bd1c:	dd13      	ble.n	810bd46 <__hexnan+0x7a>
 810bd1e:	454c      	cmp	r4, r9
 810bd20:	d206      	bcs.n	810bd30 <__hexnan+0x64>
 810bd22:	2d07      	cmp	r5, #7
 810bd24:	dc04      	bgt.n	810bd30 <__hexnan+0x64>
 810bd26:	462a      	mov	r2, r5
 810bd28:	4649      	mov	r1, r9
 810bd2a:	4620      	mov	r0, r4
 810bd2c:	f7ff ffa8 	bl	810bc80 <L_shift>
 810bd30:	4544      	cmp	r4, r8
 810bd32:	d950      	bls.n	810bdd6 <__hexnan+0x10a>
 810bd34:	2300      	movs	r3, #0
 810bd36:	f1a4 0904 	sub.w	r9, r4, #4
 810bd3a:	f844 3c04 	str.w	r3, [r4, #-4]
 810bd3e:	f8cd b008 	str.w	fp, [sp, #8]
 810bd42:	464c      	mov	r4, r9
 810bd44:	461d      	mov	r5, r3
 810bd46:	9903      	ldr	r1, [sp, #12]
 810bd48:	e7d7      	b.n	810bcfa <__hexnan+0x2e>
 810bd4a:	2a29      	cmp	r2, #41	; 0x29
 810bd4c:	d156      	bne.n	810bdfc <__hexnan+0x130>
 810bd4e:	3102      	adds	r1, #2
 810bd50:	f8ca 1000 	str.w	r1, [sl]
 810bd54:	f1bb 0f00 	cmp.w	fp, #0
 810bd58:	d050      	beq.n	810bdfc <__hexnan+0x130>
 810bd5a:	454c      	cmp	r4, r9
 810bd5c:	d206      	bcs.n	810bd6c <__hexnan+0xa0>
 810bd5e:	2d07      	cmp	r5, #7
 810bd60:	dc04      	bgt.n	810bd6c <__hexnan+0xa0>
 810bd62:	462a      	mov	r2, r5
 810bd64:	4649      	mov	r1, r9
 810bd66:	4620      	mov	r0, r4
 810bd68:	f7ff ff8a 	bl	810bc80 <L_shift>
 810bd6c:	4544      	cmp	r4, r8
 810bd6e:	d934      	bls.n	810bdda <__hexnan+0x10e>
 810bd70:	f1a8 0204 	sub.w	r2, r8, #4
 810bd74:	4623      	mov	r3, r4
 810bd76:	f853 1b04 	ldr.w	r1, [r3], #4
 810bd7a:	f842 1f04 	str.w	r1, [r2, #4]!
 810bd7e:	429f      	cmp	r7, r3
 810bd80:	d2f9      	bcs.n	810bd76 <__hexnan+0xaa>
 810bd82:	1b3b      	subs	r3, r7, r4
 810bd84:	f023 0303 	bic.w	r3, r3, #3
 810bd88:	3304      	adds	r3, #4
 810bd8a:	3401      	adds	r4, #1
 810bd8c:	3e03      	subs	r6, #3
 810bd8e:	42b4      	cmp	r4, r6
 810bd90:	bf88      	it	hi
 810bd92:	2304      	movhi	r3, #4
 810bd94:	4443      	add	r3, r8
 810bd96:	2200      	movs	r2, #0
 810bd98:	f843 2b04 	str.w	r2, [r3], #4
 810bd9c:	429f      	cmp	r7, r3
 810bd9e:	d2fb      	bcs.n	810bd98 <__hexnan+0xcc>
 810bda0:	683b      	ldr	r3, [r7, #0]
 810bda2:	b91b      	cbnz	r3, 810bdac <__hexnan+0xe0>
 810bda4:	4547      	cmp	r7, r8
 810bda6:	d127      	bne.n	810bdf8 <__hexnan+0x12c>
 810bda8:	2301      	movs	r3, #1
 810bdaa:	603b      	str	r3, [r7, #0]
 810bdac:	2005      	movs	r0, #5
 810bdae:	e026      	b.n	810bdfe <__hexnan+0x132>
 810bdb0:	3501      	adds	r5, #1
 810bdb2:	2d08      	cmp	r5, #8
 810bdb4:	f10b 0b01 	add.w	fp, fp, #1
 810bdb8:	dd06      	ble.n	810bdc8 <__hexnan+0xfc>
 810bdba:	4544      	cmp	r4, r8
 810bdbc:	d9c3      	bls.n	810bd46 <__hexnan+0x7a>
 810bdbe:	2300      	movs	r3, #0
 810bdc0:	f844 3c04 	str.w	r3, [r4, #-4]
 810bdc4:	2501      	movs	r5, #1
 810bdc6:	3c04      	subs	r4, #4
 810bdc8:	6822      	ldr	r2, [r4, #0]
 810bdca:	f000 000f 	and.w	r0, r0, #15
 810bdce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810bdd2:	6022      	str	r2, [r4, #0]
 810bdd4:	e7b7      	b.n	810bd46 <__hexnan+0x7a>
 810bdd6:	2508      	movs	r5, #8
 810bdd8:	e7b5      	b.n	810bd46 <__hexnan+0x7a>
 810bdda:	9b01      	ldr	r3, [sp, #4]
 810bddc:	2b00      	cmp	r3, #0
 810bdde:	d0df      	beq.n	810bda0 <__hexnan+0xd4>
 810bde0:	f04f 32ff 	mov.w	r2, #4294967295
 810bde4:	f1c3 0320 	rsb	r3, r3, #32
 810bde8:	fa22 f303 	lsr.w	r3, r2, r3
 810bdec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810bdf0:	401a      	ands	r2, r3
 810bdf2:	f846 2c04 	str.w	r2, [r6, #-4]
 810bdf6:	e7d3      	b.n	810bda0 <__hexnan+0xd4>
 810bdf8:	3f04      	subs	r7, #4
 810bdfa:	e7d1      	b.n	810bda0 <__hexnan+0xd4>
 810bdfc:	2004      	movs	r0, #4
 810bdfe:	b007      	add	sp, #28
 810be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810be04 <_localeconv_r>:
 810be04:	4800      	ldr	r0, [pc, #0]	; (810be08 <_localeconv_r+0x4>)
 810be06:	4770      	bx	lr
 810be08:	10000210 	.word	0x10000210

0810be0c <__retarget_lock_init_recursive>:
 810be0c:	4770      	bx	lr

0810be0e <__retarget_lock_acquire_recursive>:
 810be0e:	4770      	bx	lr

0810be10 <__retarget_lock_release_recursive>:
 810be10:	4770      	bx	lr

0810be12 <__swhatbuf_r>:
 810be12:	b570      	push	{r4, r5, r6, lr}
 810be14:	460e      	mov	r6, r1
 810be16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810be1a:	2900      	cmp	r1, #0
 810be1c:	b096      	sub	sp, #88	; 0x58
 810be1e:	4614      	mov	r4, r2
 810be20:	461d      	mov	r5, r3
 810be22:	da07      	bge.n	810be34 <__swhatbuf_r+0x22>
 810be24:	2300      	movs	r3, #0
 810be26:	602b      	str	r3, [r5, #0]
 810be28:	89b3      	ldrh	r3, [r6, #12]
 810be2a:	061a      	lsls	r2, r3, #24
 810be2c:	d410      	bmi.n	810be50 <__swhatbuf_r+0x3e>
 810be2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810be32:	e00e      	b.n	810be52 <__swhatbuf_r+0x40>
 810be34:	466a      	mov	r2, sp
 810be36:	f000 ff95 	bl	810cd64 <_fstat_r>
 810be3a:	2800      	cmp	r0, #0
 810be3c:	dbf2      	blt.n	810be24 <__swhatbuf_r+0x12>
 810be3e:	9a01      	ldr	r2, [sp, #4]
 810be40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810be44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810be48:	425a      	negs	r2, r3
 810be4a:	415a      	adcs	r2, r3
 810be4c:	602a      	str	r2, [r5, #0]
 810be4e:	e7ee      	b.n	810be2e <__swhatbuf_r+0x1c>
 810be50:	2340      	movs	r3, #64	; 0x40
 810be52:	2000      	movs	r0, #0
 810be54:	6023      	str	r3, [r4, #0]
 810be56:	b016      	add	sp, #88	; 0x58
 810be58:	bd70      	pop	{r4, r5, r6, pc}
	...

0810be5c <__smakebuf_r>:
 810be5c:	898b      	ldrh	r3, [r1, #12]
 810be5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810be60:	079d      	lsls	r5, r3, #30
 810be62:	4606      	mov	r6, r0
 810be64:	460c      	mov	r4, r1
 810be66:	d507      	bpl.n	810be78 <__smakebuf_r+0x1c>
 810be68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810be6c:	6023      	str	r3, [r4, #0]
 810be6e:	6123      	str	r3, [r4, #16]
 810be70:	2301      	movs	r3, #1
 810be72:	6163      	str	r3, [r4, #20]
 810be74:	b002      	add	sp, #8
 810be76:	bd70      	pop	{r4, r5, r6, pc}
 810be78:	ab01      	add	r3, sp, #4
 810be7a:	466a      	mov	r2, sp
 810be7c:	f7ff ffc9 	bl	810be12 <__swhatbuf_r>
 810be80:	9900      	ldr	r1, [sp, #0]
 810be82:	4605      	mov	r5, r0
 810be84:	4630      	mov	r0, r6
 810be86:	f7fc fc1b 	bl	81086c0 <_malloc_r>
 810be8a:	b948      	cbnz	r0, 810bea0 <__smakebuf_r+0x44>
 810be8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810be90:	059a      	lsls	r2, r3, #22
 810be92:	d4ef      	bmi.n	810be74 <__smakebuf_r+0x18>
 810be94:	f023 0303 	bic.w	r3, r3, #3
 810be98:	f043 0302 	orr.w	r3, r3, #2
 810be9c:	81a3      	strh	r3, [r4, #12]
 810be9e:	e7e3      	b.n	810be68 <__smakebuf_r+0xc>
 810bea0:	4b0d      	ldr	r3, [pc, #52]	; (810bed8 <__smakebuf_r+0x7c>)
 810bea2:	62b3      	str	r3, [r6, #40]	; 0x28
 810bea4:	89a3      	ldrh	r3, [r4, #12]
 810bea6:	6020      	str	r0, [r4, #0]
 810bea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810beac:	81a3      	strh	r3, [r4, #12]
 810beae:	9b00      	ldr	r3, [sp, #0]
 810beb0:	6163      	str	r3, [r4, #20]
 810beb2:	9b01      	ldr	r3, [sp, #4]
 810beb4:	6120      	str	r0, [r4, #16]
 810beb6:	b15b      	cbz	r3, 810bed0 <__smakebuf_r+0x74>
 810beb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810bebc:	4630      	mov	r0, r6
 810bebe:	f000 ff63 	bl	810cd88 <_isatty_r>
 810bec2:	b128      	cbz	r0, 810bed0 <__smakebuf_r+0x74>
 810bec4:	89a3      	ldrh	r3, [r4, #12]
 810bec6:	f023 0303 	bic.w	r3, r3, #3
 810beca:	f043 0301 	orr.w	r3, r3, #1
 810bece:	81a3      	strh	r3, [r4, #12]
 810bed0:	89a0      	ldrh	r0, [r4, #12]
 810bed2:	4305      	orrs	r5, r0
 810bed4:	81a5      	strh	r5, [r4, #12]
 810bed6:	e7cd      	b.n	810be74 <__smakebuf_r+0x18>
 810bed8:	0810b585 	.word	0x0810b585

0810bedc <__ascii_mbtowc>:
 810bedc:	b082      	sub	sp, #8
 810bede:	b901      	cbnz	r1, 810bee2 <__ascii_mbtowc+0x6>
 810bee0:	a901      	add	r1, sp, #4
 810bee2:	b142      	cbz	r2, 810bef6 <__ascii_mbtowc+0x1a>
 810bee4:	b14b      	cbz	r3, 810befa <__ascii_mbtowc+0x1e>
 810bee6:	7813      	ldrb	r3, [r2, #0]
 810bee8:	600b      	str	r3, [r1, #0]
 810beea:	7812      	ldrb	r2, [r2, #0]
 810beec:	1e10      	subs	r0, r2, #0
 810beee:	bf18      	it	ne
 810bef0:	2001      	movne	r0, #1
 810bef2:	b002      	add	sp, #8
 810bef4:	4770      	bx	lr
 810bef6:	4610      	mov	r0, r2
 810bef8:	e7fb      	b.n	810bef2 <__ascii_mbtowc+0x16>
 810befa:	f06f 0001 	mvn.w	r0, #1
 810befe:	e7f8      	b.n	810bef2 <__ascii_mbtowc+0x16>

0810bf00 <memmove>:
 810bf00:	4288      	cmp	r0, r1
 810bf02:	b510      	push	{r4, lr}
 810bf04:	eb01 0402 	add.w	r4, r1, r2
 810bf08:	d902      	bls.n	810bf10 <memmove+0x10>
 810bf0a:	4284      	cmp	r4, r0
 810bf0c:	4623      	mov	r3, r4
 810bf0e:	d807      	bhi.n	810bf20 <memmove+0x20>
 810bf10:	1e43      	subs	r3, r0, #1
 810bf12:	42a1      	cmp	r1, r4
 810bf14:	d008      	beq.n	810bf28 <memmove+0x28>
 810bf16:	f811 2b01 	ldrb.w	r2, [r1], #1
 810bf1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810bf1e:	e7f8      	b.n	810bf12 <memmove+0x12>
 810bf20:	4402      	add	r2, r0
 810bf22:	4601      	mov	r1, r0
 810bf24:	428a      	cmp	r2, r1
 810bf26:	d100      	bne.n	810bf2a <memmove+0x2a>
 810bf28:	bd10      	pop	{r4, pc}
 810bf2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810bf2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810bf32:	e7f7      	b.n	810bf24 <memmove+0x24>

0810bf34 <__malloc_lock>:
 810bf34:	4801      	ldr	r0, [pc, #4]	; (810bf3c <__malloc_lock+0x8>)
 810bf36:	f7ff bf6a 	b.w	810be0e <__retarget_lock_acquire_recursive>
 810bf3a:	bf00      	nop
 810bf3c:	10000528 	.word	0x10000528

0810bf40 <__malloc_unlock>:
 810bf40:	4801      	ldr	r0, [pc, #4]	; (810bf48 <__malloc_unlock+0x8>)
 810bf42:	f7ff bf65 	b.w	810be10 <__retarget_lock_release_recursive>
 810bf46:	bf00      	nop
 810bf48:	10000528 	.word	0x10000528

0810bf4c <_Balloc>:
 810bf4c:	b570      	push	{r4, r5, r6, lr}
 810bf4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810bf50:	4604      	mov	r4, r0
 810bf52:	460d      	mov	r5, r1
 810bf54:	b976      	cbnz	r6, 810bf74 <_Balloc+0x28>
 810bf56:	2010      	movs	r0, #16
 810bf58:	f7fc fb3c 	bl	81085d4 <malloc>
 810bf5c:	4602      	mov	r2, r0
 810bf5e:	6260      	str	r0, [r4, #36]	; 0x24
 810bf60:	b920      	cbnz	r0, 810bf6c <_Balloc+0x20>
 810bf62:	4b18      	ldr	r3, [pc, #96]	; (810bfc4 <_Balloc+0x78>)
 810bf64:	4818      	ldr	r0, [pc, #96]	; (810bfc8 <_Balloc+0x7c>)
 810bf66:	2166      	movs	r1, #102	; 0x66
 810bf68:	f7fc fada 	bl	8108520 <__assert_func>
 810bf6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bf70:	6006      	str	r6, [r0, #0]
 810bf72:	60c6      	str	r6, [r0, #12]
 810bf74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810bf76:	68f3      	ldr	r3, [r6, #12]
 810bf78:	b183      	cbz	r3, 810bf9c <_Balloc+0x50>
 810bf7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810bf7c:	68db      	ldr	r3, [r3, #12]
 810bf7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810bf82:	b9b8      	cbnz	r0, 810bfb4 <_Balloc+0x68>
 810bf84:	2101      	movs	r1, #1
 810bf86:	fa01 f605 	lsl.w	r6, r1, r5
 810bf8a:	1d72      	adds	r2, r6, #5
 810bf8c:	0092      	lsls	r2, r2, #2
 810bf8e:	4620      	mov	r0, r4
 810bf90:	f000 fc97 	bl	810c8c2 <_calloc_r>
 810bf94:	b160      	cbz	r0, 810bfb0 <_Balloc+0x64>
 810bf96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810bf9a:	e00e      	b.n	810bfba <_Balloc+0x6e>
 810bf9c:	2221      	movs	r2, #33	; 0x21
 810bf9e:	2104      	movs	r1, #4
 810bfa0:	4620      	mov	r0, r4
 810bfa2:	f000 fc8e 	bl	810c8c2 <_calloc_r>
 810bfa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810bfa8:	60f0      	str	r0, [r6, #12]
 810bfaa:	68db      	ldr	r3, [r3, #12]
 810bfac:	2b00      	cmp	r3, #0
 810bfae:	d1e4      	bne.n	810bf7a <_Balloc+0x2e>
 810bfb0:	2000      	movs	r0, #0
 810bfb2:	bd70      	pop	{r4, r5, r6, pc}
 810bfb4:	6802      	ldr	r2, [r0, #0]
 810bfb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810bfba:	2300      	movs	r3, #0
 810bfbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810bfc0:	e7f7      	b.n	810bfb2 <_Balloc+0x66>
 810bfc2:	bf00      	nop
 810bfc4:	0810ddbe 	.word	0x0810ddbe
 810bfc8:	0810df28 	.word	0x0810df28

0810bfcc <_Bfree>:
 810bfcc:	b570      	push	{r4, r5, r6, lr}
 810bfce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810bfd0:	4605      	mov	r5, r0
 810bfd2:	460c      	mov	r4, r1
 810bfd4:	b976      	cbnz	r6, 810bff4 <_Bfree+0x28>
 810bfd6:	2010      	movs	r0, #16
 810bfd8:	f7fc fafc 	bl	81085d4 <malloc>
 810bfdc:	4602      	mov	r2, r0
 810bfde:	6268      	str	r0, [r5, #36]	; 0x24
 810bfe0:	b920      	cbnz	r0, 810bfec <_Bfree+0x20>
 810bfe2:	4b09      	ldr	r3, [pc, #36]	; (810c008 <_Bfree+0x3c>)
 810bfe4:	4809      	ldr	r0, [pc, #36]	; (810c00c <_Bfree+0x40>)
 810bfe6:	218a      	movs	r1, #138	; 0x8a
 810bfe8:	f7fc fa9a 	bl	8108520 <__assert_func>
 810bfec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bff0:	6006      	str	r6, [r0, #0]
 810bff2:	60c6      	str	r6, [r0, #12]
 810bff4:	b13c      	cbz	r4, 810c006 <_Bfree+0x3a>
 810bff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810bff8:	6862      	ldr	r2, [r4, #4]
 810bffa:	68db      	ldr	r3, [r3, #12]
 810bffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c000:	6021      	str	r1, [r4, #0]
 810c002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c006:	bd70      	pop	{r4, r5, r6, pc}
 810c008:	0810ddbe 	.word	0x0810ddbe
 810c00c:	0810df28 	.word	0x0810df28

0810c010 <__multadd>:
 810c010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c014:	690e      	ldr	r6, [r1, #16]
 810c016:	4607      	mov	r7, r0
 810c018:	4698      	mov	r8, r3
 810c01a:	460c      	mov	r4, r1
 810c01c:	f101 0014 	add.w	r0, r1, #20
 810c020:	2300      	movs	r3, #0
 810c022:	6805      	ldr	r5, [r0, #0]
 810c024:	b2a9      	uxth	r1, r5
 810c026:	fb02 8101 	mla	r1, r2, r1, r8
 810c02a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810c02e:	0c2d      	lsrs	r5, r5, #16
 810c030:	fb02 c505 	mla	r5, r2, r5, ip
 810c034:	b289      	uxth	r1, r1
 810c036:	3301      	adds	r3, #1
 810c038:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810c03c:	429e      	cmp	r6, r3
 810c03e:	f840 1b04 	str.w	r1, [r0], #4
 810c042:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810c046:	dcec      	bgt.n	810c022 <__multadd+0x12>
 810c048:	f1b8 0f00 	cmp.w	r8, #0
 810c04c:	d022      	beq.n	810c094 <__multadd+0x84>
 810c04e:	68a3      	ldr	r3, [r4, #8]
 810c050:	42b3      	cmp	r3, r6
 810c052:	dc19      	bgt.n	810c088 <__multadd+0x78>
 810c054:	6861      	ldr	r1, [r4, #4]
 810c056:	4638      	mov	r0, r7
 810c058:	3101      	adds	r1, #1
 810c05a:	f7ff ff77 	bl	810bf4c <_Balloc>
 810c05e:	4605      	mov	r5, r0
 810c060:	b928      	cbnz	r0, 810c06e <__multadd+0x5e>
 810c062:	4602      	mov	r2, r0
 810c064:	4b0d      	ldr	r3, [pc, #52]	; (810c09c <__multadd+0x8c>)
 810c066:	480e      	ldr	r0, [pc, #56]	; (810c0a0 <__multadd+0x90>)
 810c068:	21b5      	movs	r1, #181	; 0xb5
 810c06a:	f7fc fa59 	bl	8108520 <__assert_func>
 810c06e:	6922      	ldr	r2, [r4, #16]
 810c070:	3202      	adds	r2, #2
 810c072:	f104 010c 	add.w	r1, r4, #12
 810c076:	0092      	lsls	r2, r2, #2
 810c078:	300c      	adds	r0, #12
 810c07a:	f7fc fabb 	bl	81085f4 <memcpy>
 810c07e:	4621      	mov	r1, r4
 810c080:	4638      	mov	r0, r7
 810c082:	f7ff ffa3 	bl	810bfcc <_Bfree>
 810c086:	462c      	mov	r4, r5
 810c088:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810c08c:	3601      	adds	r6, #1
 810c08e:	f8c3 8014 	str.w	r8, [r3, #20]
 810c092:	6126      	str	r6, [r4, #16]
 810c094:	4620      	mov	r0, r4
 810c096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c09a:	bf00      	nop
 810c09c:	0810de34 	.word	0x0810de34
 810c0a0:	0810df28 	.word	0x0810df28

0810c0a4 <__s2b>:
 810c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c0a8:	460c      	mov	r4, r1
 810c0aa:	4615      	mov	r5, r2
 810c0ac:	461f      	mov	r7, r3
 810c0ae:	2209      	movs	r2, #9
 810c0b0:	3308      	adds	r3, #8
 810c0b2:	4606      	mov	r6, r0
 810c0b4:	fb93 f3f2 	sdiv	r3, r3, r2
 810c0b8:	2100      	movs	r1, #0
 810c0ba:	2201      	movs	r2, #1
 810c0bc:	429a      	cmp	r2, r3
 810c0be:	db09      	blt.n	810c0d4 <__s2b+0x30>
 810c0c0:	4630      	mov	r0, r6
 810c0c2:	f7ff ff43 	bl	810bf4c <_Balloc>
 810c0c6:	b940      	cbnz	r0, 810c0da <__s2b+0x36>
 810c0c8:	4602      	mov	r2, r0
 810c0ca:	4b19      	ldr	r3, [pc, #100]	; (810c130 <__s2b+0x8c>)
 810c0cc:	4819      	ldr	r0, [pc, #100]	; (810c134 <__s2b+0x90>)
 810c0ce:	21ce      	movs	r1, #206	; 0xce
 810c0d0:	f7fc fa26 	bl	8108520 <__assert_func>
 810c0d4:	0052      	lsls	r2, r2, #1
 810c0d6:	3101      	adds	r1, #1
 810c0d8:	e7f0      	b.n	810c0bc <__s2b+0x18>
 810c0da:	9b08      	ldr	r3, [sp, #32]
 810c0dc:	6143      	str	r3, [r0, #20]
 810c0de:	2d09      	cmp	r5, #9
 810c0e0:	f04f 0301 	mov.w	r3, #1
 810c0e4:	6103      	str	r3, [r0, #16]
 810c0e6:	dd16      	ble.n	810c116 <__s2b+0x72>
 810c0e8:	f104 0909 	add.w	r9, r4, #9
 810c0ec:	46c8      	mov	r8, r9
 810c0ee:	442c      	add	r4, r5
 810c0f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c0f4:	4601      	mov	r1, r0
 810c0f6:	3b30      	subs	r3, #48	; 0x30
 810c0f8:	220a      	movs	r2, #10
 810c0fa:	4630      	mov	r0, r6
 810c0fc:	f7ff ff88 	bl	810c010 <__multadd>
 810c100:	45a0      	cmp	r8, r4
 810c102:	d1f5      	bne.n	810c0f0 <__s2b+0x4c>
 810c104:	f1a5 0408 	sub.w	r4, r5, #8
 810c108:	444c      	add	r4, r9
 810c10a:	1b2d      	subs	r5, r5, r4
 810c10c:	1963      	adds	r3, r4, r5
 810c10e:	42bb      	cmp	r3, r7
 810c110:	db04      	blt.n	810c11c <__s2b+0x78>
 810c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c116:	340a      	adds	r4, #10
 810c118:	2509      	movs	r5, #9
 810c11a:	e7f6      	b.n	810c10a <__s2b+0x66>
 810c11c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c120:	4601      	mov	r1, r0
 810c122:	3b30      	subs	r3, #48	; 0x30
 810c124:	220a      	movs	r2, #10
 810c126:	4630      	mov	r0, r6
 810c128:	f7ff ff72 	bl	810c010 <__multadd>
 810c12c:	e7ee      	b.n	810c10c <__s2b+0x68>
 810c12e:	bf00      	nop
 810c130:	0810de34 	.word	0x0810de34
 810c134:	0810df28 	.word	0x0810df28

0810c138 <__hi0bits>:
 810c138:	0c03      	lsrs	r3, r0, #16
 810c13a:	041b      	lsls	r3, r3, #16
 810c13c:	b9d3      	cbnz	r3, 810c174 <__hi0bits+0x3c>
 810c13e:	0400      	lsls	r0, r0, #16
 810c140:	2310      	movs	r3, #16
 810c142:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c146:	bf04      	itt	eq
 810c148:	0200      	lsleq	r0, r0, #8
 810c14a:	3308      	addeq	r3, #8
 810c14c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c150:	bf04      	itt	eq
 810c152:	0100      	lsleq	r0, r0, #4
 810c154:	3304      	addeq	r3, #4
 810c156:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c15a:	bf04      	itt	eq
 810c15c:	0080      	lsleq	r0, r0, #2
 810c15e:	3302      	addeq	r3, #2
 810c160:	2800      	cmp	r0, #0
 810c162:	db05      	blt.n	810c170 <__hi0bits+0x38>
 810c164:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c168:	f103 0301 	add.w	r3, r3, #1
 810c16c:	bf08      	it	eq
 810c16e:	2320      	moveq	r3, #32
 810c170:	4618      	mov	r0, r3
 810c172:	4770      	bx	lr
 810c174:	2300      	movs	r3, #0
 810c176:	e7e4      	b.n	810c142 <__hi0bits+0xa>

0810c178 <__lo0bits>:
 810c178:	6803      	ldr	r3, [r0, #0]
 810c17a:	f013 0207 	ands.w	r2, r3, #7
 810c17e:	4601      	mov	r1, r0
 810c180:	d00b      	beq.n	810c19a <__lo0bits+0x22>
 810c182:	07da      	lsls	r2, r3, #31
 810c184:	d424      	bmi.n	810c1d0 <__lo0bits+0x58>
 810c186:	0798      	lsls	r0, r3, #30
 810c188:	bf49      	itett	mi
 810c18a:	085b      	lsrmi	r3, r3, #1
 810c18c:	089b      	lsrpl	r3, r3, #2
 810c18e:	2001      	movmi	r0, #1
 810c190:	600b      	strmi	r3, [r1, #0]
 810c192:	bf5c      	itt	pl
 810c194:	600b      	strpl	r3, [r1, #0]
 810c196:	2002      	movpl	r0, #2
 810c198:	4770      	bx	lr
 810c19a:	b298      	uxth	r0, r3
 810c19c:	b9b0      	cbnz	r0, 810c1cc <__lo0bits+0x54>
 810c19e:	0c1b      	lsrs	r3, r3, #16
 810c1a0:	2010      	movs	r0, #16
 810c1a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 810c1a6:	bf04      	itt	eq
 810c1a8:	0a1b      	lsreq	r3, r3, #8
 810c1aa:	3008      	addeq	r0, #8
 810c1ac:	071a      	lsls	r2, r3, #28
 810c1ae:	bf04      	itt	eq
 810c1b0:	091b      	lsreq	r3, r3, #4
 810c1b2:	3004      	addeq	r0, #4
 810c1b4:	079a      	lsls	r2, r3, #30
 810c1b6:	bf04      	itt	eq
 810c1b8:	089b      	lsreq	r3, r3, #2
 810c1ba:	3002      	addeq	r0, #2
 810c1bc:	07da      	lsls	r2, r3, #31
 810c1be:	d403      	bmi.n	810c1c8 <__lo0bits+0x50>
 810c1c0:	085b      	lsrs	r3, r3, #1
 810c1c2:	f100 0001 	add.w	r0, r0, #1
 810c1c6:	d005      	beq.n	810c1d4 <__lo0bits+0x5c>
 810c1c8:	600b      	str	r3, [r1, #0]
 810c1ca:	4770      	bx	lr
 810c1cc:	4610      	mov	r0, r2
 810c1ce:	e7e8      	b.n	810c1a2 <__lo0bits+0x2a>
 810c1d0:	2000      	movs	r0, #0
 810c1d2:	4770      	bx	lr
 810c1d4:	2020      	movs	r0, #32
 810c1d6:	4770      	bx	lr

0810c1d8 <__i2b>:
 810c1d8:	b510      	push	{r4, lr}
 810c1da:	460c      	mov	r4, r1
 810c1dc:	2101      	movs	r1, #1
 810c1de:	f7ff feb5 	bl	810bf4c <_Balloc>
 810c1e2:	4602      	mov	r2, r0
 810c1e4:	b928      	cbnz	r0, 810c1f2 <__i2b+0x1a>
 810c1e6:	4b05      	ldr	r3, [pc, #20]	; (810c1fc <__i2b+0x24>)
 810c1e8:	4805      	ldr	r0, [pc, #20]	; (810c200 <__i2b+0x28>)
 810c1ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810c1ee:	f7fc f997 	bl	8108520 <__assert_func>
 810c1f2:	2301      	movs	r3, #1
 810c1f4:	6144      	str	r4, [r0, #20]
 810c1f6:	6103      	str	r3, [r0, #16]
 810c1f8:	bd10      	pop	{r4, pc}
 810c1fa:	bf00      	nop
 810c1fc:	0810de34 	.word	0x0810de34
 810c200:	0810df28 	.word	0x0810df28

0810c204 <__multiply>:
 810c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c208:	4614      	mov	r4, r2
 810c20a:	690a      	ldr	r2, [r1, #16]
 810c20c:	6923      	ldr	r3, [r4, #16]
 810c20e:	429a      	cmp	r2, r3
 810c210:	bfb8      	it	lt
 810c212:	460b      	movlt	r3, r1
 810c214:	460d      	mov	r5, r1
 810c216:	bfbc      	itt	lt
 810c218:	4625      	movlt	r5, r4
 810c21a:	461c      	movlt	r4, r3
 810c21c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810c220:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810c224:	68ab      	ldr	r3, [r5, #8]
 810c226:	6869      	ldr	r1, [r5, #4]
 810c228:	eb0a 0709 	add.w	r7, sl, r9
 810c22c:	42bb      	cmp	r3, r7
 810c22e:	b085      	sub	sp, #20
 810c230:	bfb8      	it	lt
 810c232:	3101      	addlt	r1, #1
 810c234:	f7ff fe8a 	bl	810bf4c <_Balloc>
 810c238:	b930      	cbnz	r0, 810c248 <__multiply+0x44>
 810c23a:	4602      	mov	r2, r0
 810c23c:	4b42      	ldr	r3, [pc, #264]	; (810c348 <__multiply+0x144>)
 810c23e:	4843      	ldr	r0, [pc, #268]	; (810c34c <__multiply+0x148>)
 810c240:	f240 115d 	movw	r1, #349	; 0x15d
 810c244:	f7fc f96c 	bl	8108520 <__assert_func>
 810c248:	f100 0614 	add.w	r6, r0, #20
 810c24c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810c250:	4633      	mov	r3, r6
 810c252:	2200      	movs	r2, #0
 810c254:	4543      	cmp	r3, r8
 810c256:	d31e      	bcc.n	810c296 <__multiply+0x92>
 810c258:	f105 0c14 	add.w	ip, r5, #20
 810c25c:	f104 0314 	add.w	r3, r4, #20
 810c260:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810c264:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810c268:	9202      	str	r2, [sp, #8]
 810c26a:	ebac 0205 	sub.w	r2, ip, r5
 810c26e:	3a15      	subs	r2, #21
 810c270:	f022 0203 	bic.w	r2, r2, #3
 810c274:	3204      	adds	r2, #4
 810c276:	f105 0115 	add.w	r1, r5, #21
 810c27a:	458c      	cmp	ip, r1
 810c27c:	bf38      	it	cc
 810c27e:	2204      	movcc	r2, #4
 810c280:	9201      	str	r2, [sp, #4]
 810c282:	9a02      	ldr	r2, [sp, #8]
 810c284:	9303      	str	r3, [sp, #12]
 810c286:	429a      	cmp	r2, r3
 810c288:	d808      	bhi.n	810c29c <__multiply+0x98>
 810c28a:	2f00      	cmp	r7, #0
 810c28c:	dc55      	bgt.n	810c33a <__multiply+0x136>
 810c28e:	6107      	str	r7, [r0, #16]
 810c290:	b005      	add	sp, #20
 810c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c296:	f843 2b04 	str.w	r2, [r3], #4
 810c29a:	e7db      	b.n	810c254 <__multiply+0x50>
 810c29c:	f8b3 a000 	ldrh.w	sl, [r3]
 810c2a0:	f1ba 0f00 	cmp.w	sl, #0
 810c2a4:	d020      	beq.n	810c2e8 <__multiply+0xe4>
 810c2a6:	f105 0e14 	add.w	lr, r5, #20
 810c2aa:	46b1      	mov	r9, r6
 810c2ac:	2200      	movs	r2, #0
 810c2ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 810c2b2:	f8d9 b000 	ldr.w	fp, [r9]
 810c2b6:	b2a1      	uxth	r1, r4
 810c2b8:	fa1f fb8b 	uxth.w	fp, fp
 810c2bc:	fb0a b101 	mla	r1, sl, r1, fp
 810c2c0:	4411      	add	r1, r2
 810c2c2:	f8d9 2000 	ldr.w	r2, [r9]
 810c2c6:	0c24      	lsrs	r4, r4, #16
 810c2c8:	0c12      	lsrs	r2, r2, #16
 810c2ca:	fb0a 2404 	mla	r4, sl, r4, r2
 810c2ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810c2d2:	b289      	uxth	r1, r1
 810c2d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810c2d8:	45f4      	cmp	ip, lr
 810c2da:	f849 1b04 	str.w	r1, [r9], #4
 810c2de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810c2e2:	d8e4      	bhi.n	810c2ae <__multiply+0xaa>
 810c2e4:	9901      	ldr	r1, [sp, #4]
 810c2e6:	5072      	str	r2, [r6, r1]
 810c2e8:	9a03      	ldr	r2, [sp, #12]
 810c2ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810c2ee:	3304      	adds	r3, #4
 810c2f0:	f1b9 0f00 	cmp.w	r9, #0
 810c2f4:	d01f      	beq.n	810c336 <__multiply+0x132>
 810c2f6:	6834      	ldr	r4, [r6, #0]
 810c2f8:	f105 0114 	add.w	r1, r5, #20
 810c2fc:	46b6      	mov	lr, r6
 810c2fe:	f04f 0a00 	mov.w	sl, #0
 810c302:	880a      	ldrh	r2, [r1, #0]
 810c304:	f8be b002 	ldrh.w	fp, [lr, #2]
 810c308:	fb09 b202 	mla	r2, r9, r2, fp
 810c30c:	4492      	add	sl, r2
 810c30e:	b2a4      	uxth	r4, r4
 810c310:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810c314:	f84e 4b04 	str.w	r4, [lr], #4
 810c318:	f851 4b04 	ldr.w	r4, [r1], #4
 810c31c:	f8be 2000 	ldrh.w	r2, [lr]
 810c320:	0c24      	lsrs	r4, r4, #16
 810c322:	fb09 2404 	mla	r4, r9, r4, r2
 810c326:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810c32a:	458c      	cmp	ip, r1
 810c32c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810c330:	d8e7      	bhi.n	810c302 <__multiply+0xfe>
 810c332:	9a01      	ldr	r2, [sp, #4]
 810c334:	50b4      	str	r4, [r6, r2]
 810c336:	3604      	adds	r6, #4
 810c338:	e7a3      	b.n	810c282 <__multiply+0x7e>
 810c33a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810c33e:	2b00      	cmp	r3, #0
 810c340:	d1a5      	bne.n	810c28e <__multiply+0x8a>
 810c342:	3f01      	subs	r7, #1
 810c344:	e7a1      	b.n	810c28a <__multiply+0x86>
 810c346:	bf00      	nop
 810c348:	0810de34 	.word	0x0810de34
 810c34c:	0810df28 	.word	0x0810df28

0810c350 <__pow5mult>:
 810c350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c354:	4615      	mov	r5, r2
 810c356:	f012 0203 	ands.w	r2, r2, #3
 810c35a:	4606      	mov	r6, r0
 810c35c:	460f      	mov	r7, r1
 810c35e:	d007      	beq.n	810c370 <__pow5mult+0x20>
 810c360:	4c25      	ldr	r4, [pc, #148]	; (810c3f8 <__pow5mult+0xa8>)
 810c362:	3a01      	subs	r2, #1
 810c364:	2300      	movs	r3, #0
 810c366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c36a:	f7ff fe51 	bl	810c010 <__multadd>
 810c36e:	4607      	mov	r7, r0
 810c370:	10ad      	asrs	r5, r5, #2
 810c372:	d03d      	beq.n	810c3f0 <__pow5mult+0xa0>
 810c374:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810c376:	b97c      	cbnz	r4, 810c398 <__pow5mult+0x48>
 810c378:	2010      	movs	r0, #16
 810c37a:	f7fc f92b 	bl	81085d4 <malloc>
 810c37e:	4602      	mov	r2, r0
 810c380:	6270      	str	r0, [r6, #36]	; 0x24
 810c382:	b928      	cbnz	r0, 810c390 <__pow5mult+0x40>
 810c384:	4b1d      	ldr	r3, [pc, #116]	; (810c3fc <__pow5mult+0xac>)
 810c386:	481e      	ldr	r0, [pc, #120]	; (810c400 <__pow5mult+0xb0>)
 810c388:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810c38c:	f7fc f8c8 	bl	8108520 <__assert_func>
 810c390:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c394:	6004      	str	r4, [r0, #0]
 810c396:	60c4      	str	r4, [r0, #12]
 810c398:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810c39c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c3a0:	b94c      	cbnz	r4, 810c3b6 <__pow5mult+0x66>
 810c3a2:	f240 2171 	movw	r1, #625	; 0x271
 810c3a6:	4630      	mov	r0, r6
 810c3a8:	f7ff ff16 	bl	810c1d8 <__i2b>
 810c3ac:	2300      	movs	r3, #0
 810c3ae:	f8c8 0008 	str.w	r0, [r8, #8]
 810c3b2:	4604      	mov	r4, r0
 810c3b4:	6003      	str	r3, [r0, #0]
 810c3b6:	f04f 0900 	mov.w	r9, #0
 810c3ba:	07eb      	lsls	r3, r5, #31
 810c3bc:	d50a      	bpl.n	810c3d4 <__pow5mult+0x84>
 810c3be:	4639      	mov	r1, r7
 810c3c0:	4622      	mov	r2, r4
 810c3c2:	4630      	mov	r0, r6
 810c3c4:	f7ff ff1e 	bl	810c204 <__multiply>
 810c3c8:	4639      	mov	r1, r7
 810c3ca:	4680      	mov	r8, r0
 810c3cc:	4630      	mov	r0, r6
 810c3ce:	f7ff fdfd 	bl	810bfcc <_Bfree>
 810c3d2:	4647      	mov	r7, r8
 810c3d4:	106d      	asrs	r5, r5, #1
 810c3d6:	d00b      	beq.n	810c3f0 <__pow5mult+0xa0>
 810c3d8:	6820      	ldr	r0, [r4, #0]
 810c3da:	b938      	cbnz	r0, 810c3ec <__pow5mult+0x9c>
 810c3dc:	4622      	mov	r2, r4
 810c3de:	4621      	mov	r1, r4
 810c3e0:	4630      	mov	r0, r6
 810c3e2:	f7ff ff0f 	bl	810c204 <__multiply>
 810c3e6:	6020      	str	r0, [r4, #0]
 810c3e8:	f8c0 9000 	str.w	r9, [r0]
 810c3ec:	4604      	mov	r4, r0
 810c3ee:	e7e4      	b.n	810c3ba <__pow5mult+0x6a>
 810c3f0:	4638      	mov	r0, r7
 810c3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c3f6:	bf00      	nop
 810c3f8:	0810e078 	.word	0x0810e078
 810c3fc:	0810ddbe 	.word	0x0810ddbe
 810c400:	0810df28 	.word	0x0810df28

0810c404 <__lshift>:
 810c404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c408:	460c      	mov	r4, r1
 810c40a:	6849      	ldr	r1, [r1, #4]
 810c40c:	6923      	ldr	r3, [r4, #16]
 810c40e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c412:	68a3      	ldr	r3, [r4, #8]
 810c414:	4607      	mov	r7, r0
 810c416:	4691      	mov	r9, r2
 810c418:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c41c:	f108 0601 	add.w	r6, r8, #1
 810c420:	42b3      	cmp	r3, r6
 810c422:	db0b      	blt.n	810c43c <__lshift+0x38>
 810c424:	4638      	mov	r0, r7
 810c426:	f7ff fd91 	bl	810bf4c <_Balloc>
 810c42a:	4605      	mov	r5, r0
 810c42c:	b948      	cbnz	r0, 810c442 <__lshift+0x3e>
 810c42e:	4602      	mov	r2, r0
 810c430:	4b28      	ldr	r3, [pc, #160]	; (810c4d4 <__lshift+0xd0>)
 810c432:	4829      	ldr	r0, [pc, #164]	; (810c4d8 <__lshift+0xd4>)
 810c434:	f240 11d9 	movw	r1, #473	; 0x1d9
 810c438:	f7fc f872 	bl	8108520 <__assert_func>
 810c43c:	3101      	adds	r1, #1
 810c43e:	005b      	lsls	r3, r3, #1
 810c440:	e7ee      	b.n	810c420 <__lshift+0x1c>
 810c442:	2300      	movs	r3, #0
 810c444:	f100 0114 	add.w	r1, r0, #20
 810c448:	f100 0210 	add.w	r2, r0, #16
 810c44c:	4618      	mov	r0, r3
 810c44e:	4553      	cmp	r3, sl
 810c450:	db33      	blt.n	810c4ba <__lshift+0xb6>
 810c452:	6920      	ldr	r0, [r4, #16]
 810c454:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c458:	f104 0314 	add.w	r3, r4, #20
 810c45c:	f019 091f 	ands.w	r9, r9, #31
 810c460:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c464:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c468:	d02b      	beq.n	810c4c2 <__lshift+0xbe>
 810c46a:	f1c9 0e20 	rsb	lr, r9, #32
 810c46e:	468a      	mov	sl, r1
 810c470:	2200      	movs	r2, #0
 810c472:	6818      	ldr	r0, [r3, #0]
 810c474:	fa00 f009 	lsl.w	r0, r0, r9
 810c478:	4302      	orrs	r2, r0
 810c47a:	f84a 2b04 	str.w	r2, [sl], #4
 810c47e:	f853 2b04 	ldr.w	r2, [r3], #4
 810c482:	459c      	cmp	ip, r3
 810c484:	fa22 f20e 	lsr.w	r2, r2, lr
 810c488:	d8f3      	bhi.n	810c472 <__lshift+0x6e>
 810c48a:	ebac 0304 	sub.w	r3, ip, r4
 810c48e:	3b15      	subs	r3, #21
 810c490:	f023 0303 	bic.w	r3, r3, #3
 810c494:	3304      	adds	r3, #4
 810c496:	f104 0015 	add.w	r0, r4, #21
 810c49a:	4584      	cmp	ip, r0
 810c49c:	bf38      	it	cc
 810c49e:	2304      	movcc	r3, #4
 810c4a0:	50ca      	str	r2, [r1, r3]
 810c4a2:	b10a      	cbz	r2, 810c4a8 <__lshift+0xa4>
 810c4a4:	f108 0602 	add.w	r6, r8, #2
 810c4a8:	3e01      	subs	r6, #1
 810c4aa:	4638      	mov	r0, r7
 810c4ac:	612e      	str	r6, [r5, #16]
 810c4ae:	4621      	mov	r1, r4
 810c4b0:	f7ff fd8c 	bl	810bfcc <_Bfree>
 810c4b4:	4628      	mov	r0, r5
 810c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c4ba:	f842 0f04 	str.w	r0, [r2, #4]!
 810c4be:	3301      	adds	r3, #1
 810c4c0:	e7c5      	b.n	810c44e <__lshift+0x4a>
 810c4c2:	3904      	subs	r1, #4
 810c4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 810c4c8:	f841 2f04 	str.w	r2, [r1, #4]!
 810c4cc:	459c      	cmp	ip, r3
 810c4ce:	d8f9      	bhi.n	810c4c4 <__lshift+0xc0>
 810c4d0:	e7ea      	b.n	810c4a8 <__lshift+0xa4>
 810c4d2:	bf00      	nop
 810c4d4:	0810de34 	.word	0x0810de34
 810c4d8:	0810df28 	.word	0x0810df28

0810c4dc <__mcmp>:
 810c4dc:	b530      	push	{r4, r5, lr}
 810c4de:	6902      	ldr	r2, [r0, #16]
 810c4e0:	690c      	ldr	r4, [r1, #16]
 810c4e2:	1b12      	subs	r2, r2, r4
 810c4e4:	d10e      	bne.n	810c504 <__mcmp+0x28>
 810c4e6:	f100 0314 	add.w	r3, r0, #20
 810c4ea:	3114      	adds	r1, #20
 810c4ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c4f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c4f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c4f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c4fc:	42a5      	cmp	r5, r4
 810c4fe:	d003      	beq.n	810c508 <__mcmp+0x2c>
 810c500:	d305      	bcc.n	810c50e <__mcmp+0x32>
 810c502:	2201      	movs	r2, #1
 810c504:	4610      	mov	r0, r2
 810c506:	bd30      	pop	{r4, r5, pc}
 810c508:	4283      	cmp	r3, r0
 810c50a:	d3f3      	bcc.n	810c4f4 <__mcmp+0x18>
 810c50c:	e7fa      	b.n	810c504 <__mcmp+0x28>
 810c50e:	f04f 32ff 	mov.w	r2, #4294967295
 810c512:	e7f7      	b.n	810c504 <__mcmp+0x28>

0810c514 <__mdiff>:
 810c514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c518:	460c      	mov	r4, r1
 810c51a:	4606      	mov	r6, r0
 810c51c:	4611      	mov	r1, r2
 810c51e:	4620      	mov	r0, r4
 810c520:	4617      	mov	r7, r2
 810c522:	f7ff ffdb 	bl	810c4dc <__mcmp>
 810c526:	1e05      	subs	r5, r0, #0
 810c528:	d110      	bne.n	810c54c <__mdiff+0x38>
 810c52a:	4629      	mov	r1, r5
 810c52c:	4630      	mov	r0, r6
 810c52e:	f7ff fd0d 	bl	810bf4c <_Balloc>
 810c532:	b930      	cbnz	r0, 810c542 <__mdiff+0x2e>
 810c534:	4b39      	ldr	r3, [pc, #228]	; (810c61c <__mdiff+0x108>)
 810c536:	4602      	mov	r2, r0
 810c538:	f240 2132 	movw	r1, #562	; 0x232
 810c53c:	4838      	ldr	r0, [pc, #224]	; (810c620 <__mdiff+0x10c>)
 810c53e:	f7fb ffef 	bl	8108520 <__assert_func>
 810c542:	2301      	movs	r3, #1
 810c544:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c54c:	bfa4      	itt	ge
 810c54e:	463b      	movge	r3, r7
 810c550:	4627      	movge	r7, r4
 810c552:	4630      	mov	r0, r6
 810c554:	6879      	ldr	r1, [r7, #4]
 810c556:	bfa6      	itte	ge
 810c558:	461c      	movge	r4, r3
 810c55a:	2500      	movge	r5, #0
 810c55c:	2501      	movlt	r5, #1
 810c55e:	f7ff fcf5 	bl	810bf4c <_Balloc>
 810c562:	b920      	cbnz	r0, 810c56e <__mdiff+0x5a>
 810c564:	4b2d      	ldr	r3, [pc, #180]	; (810c61c <__mdiff+0x108>)
 810c566:	4602      	mov	r2, r0
 810c568:	f44f 7110 	mov.w	r1, #576	; 0x240
 810c56c:	e7e6      	b.n	810c53c <__mdiff+0x28>
 810c56e:	693e      	ldr	r6, [r7, #16]
 810c570:	60c5      	str	r5, [r0, #12]
 810c572:	6925      	ldr	r5, [r4, #16]
 810c574:	f107 0114 	add.w	r1, r7, #20
 810c578:	f104 0914 	add.w	r9, r4, #20
 810c57c:	f100 0e14 	add.w	lr, r0, #20
 810c580:	f107 0210 	add.w	r2, r7, #16
 810c584:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810c588:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810c58c:	46f2      	mov	sl, lr
 810c58e:	2700      	movs	r7, #0
 810c590:	f859 3b04 	ldr.w	r3, [r9], #4
 810c594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c598:	fa1f f883 	uxth.w	r8, r3
 810c59c:	fa17 f78b 	uxtah	r7, r7, fp
 810c5a0:	0c1b      	lsrs	r3, r3, #16
 810c5a2:	eba7 0808 	sub.w	r8, r7, r8
 810c5a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c5aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c5ae:	fa1f f888 	uxth.w	r8, r8
 810c5b2:	141f      	asrs	r7, r3, #16
 810c5b4:	454d      	cmp	r5, r9
 810c5b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c5ba:	f84a 3b04 	str.w	r3, [sl], #4
 810c5be:	d8e7      	bhi.n	810c590 <__mdiff+0x7c>
 810c5c0:	1b2b      	subs	r3, r5, r4
 810c5c2:	3b15      	subs	r3, #21
 810c5c4:	f023 0303 	bic.w	r3, r3, #3
 810c5c8:	3304      	adds	r3, #4
 810c5ca:	3415      	adds	r4, #21
 810c5cc:	42a5      	cmp	r5, r4
 810c5ce:	bf38      	it	cc
 810c5d0:	2304      	movcc	r3, #4
 810c5d2:	4419      	add	r1, r3
 810c5d4:	4473      	add	r3, lr
 810c5d6:	469e      	mov	lr, r3
 810c5d8:	460d      	mov	r5, r1
 810c5da:	4565      	cmp	r5, ip
 810c5dc:	d30e      	bcc.n	810c5fc <__mdiff+0xe8>
 810c5de:	f10c 0203 	add.w	r2, ip, #3
 810c5e2:	1a52      	subs	r2, r2, r1
 810c5e4:	f022 0203 	bic.w	r2, r2, #3
 810c5e8:	3903      	subs	r1, #3
 810c5ea:	458c      	cmp	ip, r1
 810c5ec:	bf38      	it	cc
 810c5ee:	2200      	movcc	r2, #0
 810c5f0:	441a      	add	r2, r3
 810c5f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810c5f6:	b17b      	cbz	r3, 810c618 <__mdiff+0x104>
 810c5f8:	6106      	str	r6, [r0, #16]
 810c5fa:	e7a5      	b.n	810c548 <__mdiff+0x34>
 810c5fc:	f855 8b04 	ldr.w	r8, [r5], #4
 810c600:	fa17 f488 	uxtah	r4, r7, r8
 810c604:	1422      	asrs	r2, r4, #16
 810c606:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810c60a:	b2a4      	uxth	r4, r4
 810c60c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810c610:	f84e 4b04 	str.w	r4, [lr], #4
 810c614:	1417      	asrs	r7, r2, #16
 810c616:	e7e0      	b.n	810c5da <__mdiff+0xc6>
 810c618:	3e01      	subs	r6, #1
 810c61a:	e7ea      	b.n	810c5f2 <__mdiff+0xde>
 810c61c:	0810de34 	.word	0x0810de34
 810c620:	0810df28 	.word	0x0810df28

0810c624 <__ulp>:
 810c624:	b082      	sub	sp, #8
 810c626:	ed8d 0b00 	vstr	d0, [sp]
 810c62a:	9b01      	ldr	r3, [sp, #4]
 810c62c:	4912      	ldr	r1, [pc, #72]	; (810c678 <__ulp+0x54>)
 810c62e:	4019      	ands	r1, r3
 810c630:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810c634:	2900      	cmp	r1, #0
 810c636:	dd05      	ble.n	810c644 <__ulp+0x20>
 810c638:	2200      	movs	r2, #0
 810c63a:	460b      	mov	r3, r1
 810c63c:	ec43 2b10 	vmov	d0, r2, r3
 810c640:	b002      	add	sp, #8
 810c642:	4770      	bx	lr
 810c644:	4249      	negs	r1, r1
 810c646:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810c64a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810c64e:	f04f 0200 	mov.w	r2, #0
 810c652:	f04f 0300 	mov.w	r3, #0
 810c656:	da04      	bge.n	810c662 <__ulp+0x3e>
 810c658:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810c65c:	fa41 f300 	asr.w	r3, r1, r0
 810c660:	e7ec      	b.n	810c63c <__ulp+0x18>
 810c662:	f1a0 0114 	sub.w	r1, r0, #20
 810c666:	291e      	cmp	r1, #30
 810c668:	bfda      	itte	le
 810c66a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810c66e:	fa20 f101 	lsrle.w	r1, r0, r1
 810c672:	2101      	movgt	r1, #1
 810c674:	460a      	mov	r2, r1
 810c676:	e7e1      	b.n	810c63c <__ulp+0x18>
 810c678:	7ff00000 	.word	0x7ff00000

0810c67c <__b2d>:
 810c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c67e:	6905      	ldr	r5, [r0, #16]
 810c680:	f100 0714 	add.w	r7, r0, #20
 810c684:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810c688:	1f2e      	subs	r6, r5, #4
 810c68a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810c68e:	4620      	mov	r0, r4
 810c690:	f7ff fd52 	bl	810c138 <__hi0bits>
 810c694:	f1c0 0320 	rsb	r3, r0, #32
 810c698:	280a      	cmp	r0, #10
 810c69a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810c718 <__b2d+0x9c>
 810c69e:	600b      	str	r3, [r1, #0]
 810c6a0:	dc14      	bgt.n	810c6cc <__b2d+0x50>
 810c6a2:	f1c0 0e0b 	rsb	lr, r0, #11
 810c6a6:	fa24 f10e 	lsr.w	r1, r4, lr
 810c6aa:	42b7      	cmp	r7, r6
 810c6ac:	ea41 030c 	orr.w	r3, r1, ip
 810c6b0:	bf34      	ite	cc
 810c6b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c6b6:	2100      	movcs	r1, #0
 810c6b8:	3015      	adds	r0, #21
 810c6ba:	fa04 f000 	lsl.w	r0, r4, r0
 810c6be:	fa21 f10e 	lsr.w	r1, r1, lr
 810c6c2:	ea40 0201 	orr.w	r2, r0, r1
 810c6c6:	ec43 2b10 	vmov	d0, r2, r3
 810c6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c6cc:	42b7      	cmp	r7, r6
 810c6ce:	bf3a      	itte	cc
 810c6d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c6d4:	f1a5 0608 	subcc.w	r6, r5, #8
 810c6d8:	2100      	movcs	r1, #0
 810c6da:	380b      	subs	r0, #11
 810c6dc:	d017      	beq.n	810c70e <__b2d+0x92>
 810c6de:	f1c0 0c20 	rsb	ip, r0, #32
 810c6e2:	fa04 f500 	lsl.w	r5, r4, r0
 810c6e6:	42be      	cmp	r6, r7
 810c6e8:	fa21 f40c 	lsr.w	r4, r1, ip
 810c6ec:	ea45 0504 	orr.w	r5, r5, r4
 810c6f0:	bf8c      	ite	hi
 810c6f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810c6f6:	2400      	movls	r4, #0
 810c6f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810c6fc:	fa01 f000 	lsl.w	r0, r1, r0
 810c700:	fa24 f40c 	lsr.w	r4, r4, ip
 810c704:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810c708:	ea40 0204 	orr.w	r2, r0, r4
 810c70c:	e7db      	b.n	810c6c6 <__b2d+0x4a>
 810c70e:	ea44 030c 	orr.w	r3, r4, ip
 810c712:	460a      	mov	r2, r1
 810c714:	e7d7      	b.n	810c6c6 <__b2d+0x4a>
 810c716:	bf00      	nop
 810c718:	3ff00000 	.word	0x3ff00000

0810c71c <__d2b>:
 810c71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c720:	4689      	mov	r9, r1
 810c722:	2101      	movs	r1, #1
 810c724:	ec57 6b10 	vmov	r6, r7, d0
 810c728:	4690      	mov	r8, r2
 810c72a:	f7ff fc0f 	bl	810bf4c <_Balloc>
 810c72e:	4604      	mov	r4, r0
 810c730:	b930      	cbnz	r0, 810c740 <__d2b+0x24>
 810c732:	4602      	mov	r2, r0
 810c734:	4b25      	ldr	r3, [pc, #148]	; (810c7cc <__d2b+0xb0>)
 810c736:	4826      	ldr	r0, [pc, #152]	; (810c7d0 <__d2b+0xb4>)
 810c738:	f240 310a 	movw	r1, #778	; 0x30a
 810c73c:	f7fb fef0 	bl	8108520 <__assert_func>
 810c740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810c744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810c748:	bb35      	cbnz	r5, 810c798 <__d2b+0x7c>
 810c74a:	2e00      	cmp	r6, #0
 810c74c:	9301      	str	r3, [sp, #4]
 810c74e:	d028      	beq.n	810c7a2 <__d2b+0x86>
 810c750:	4668      	mov	r0, sp
 810c752:	9600      	str	r6, [sp, #0]
 810c754:	f7ff fd10 	bl	810c178 <__lo0bits>
 810c758:	9900      	ldr	r1, [sp, #0]
 810c75a:	b300      	cbz	r0, 810c79e <__d2b+0x82>
 810c75c:	9a01      	ldr	r2, [sp, #4]
 810c75e:	f1c0 0320 	rsb	r3, r0, #32
 810c762:	fa02 f303 	lsl.w	r3, r2, r3
 810c766:	430b      	orrs	r3, r1
 810c768:	40c2      	lsrs	r2, r0
 810c76a:	6163      	str	r3, [r4, #20]
 810c76c:	9201      	str	r2, [sp, #4]
 810c76e:	9b01      	ldr	r3, [sp, #4]
 810c770:	61a3      	str	r3, [r4, #24]
 810c772:	2b00      	cmp	r3, #0
 810c774:	bf14      	ite	ne
 810c776:	2202      	movne	r2, #2
 810c778:	2201      	moveq	r2, #1
 810c77a:	6122      	str	r2, [r4, #16]
 810c77c:	b1d5      	cbz	r5, 810c7b4 <__d2b+0x98>
 810c77e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c782:	4405      	add	r5, r0
 810c784:	f8c9 5000 	str.w	r5, [r9]
 810c788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c78c:	f8c8 0000 	str.w	r0, [r8]
 810c790:	4620      	mov	r0, r4
 810c792:	b003      	add	sp, #12
 810c794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c79c:	e7d5      	b.n	810c74a <__d2b+0x2e>
 810c79e:	6161      	str	r1, [r4, #20]
 810c7a0:	e7e5      	b.n	810c76e <__d2b+0x52>
 810c7a2:	a801      	add	r0, sp, #4
 810c7a4:	f7ff fce8 	bl	810c178 <__lo0bits>
 810c7a8:	9b01      	ldr	r3, [sp, #4]
 810c7aa:	6163      	str	r3, [r4, #20]
 810c7ac:	2201      	movs	r2, #1
 810c7ae:	6122      	str	r2, [r4, #16]
 810c7b0:	3020      	adds	r0, #32
 810c7b2:	e7e3      	b.n	810c77c <__d2b+0x60>
 810c7b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c7b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c7bc:	f8c9 0000 	str.w	r0, [r9]
 810c7c0:	6918      	ldr	r0, [r3, #16]
 810c7c2:	f7ff fcb9 	bl	810c138 <__hi0bits>
 810c7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c7ca:	e7df      	b.n	810c78c <__d2b+0x70>
 810c7cc:	0810de34 	.word	0x0810de34
 810c7d0:	0810df28 	.word	0x0810df28

0810c7d4 <__ratio>:
 810c7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c7d8:	4688      	mov	r8, r1
 810c7da:	4669      	mov	r1, sp
 810c7dc:	4681      	mov	r9, r0
 810c7de:	f7ff ff4d 	bl	810c67c <__b2d>
 810c7e2:	a901      	add	r1, sp, #4
 810c7e4:	4640      	mov	r0, r8
 810c7e6:	ec55 4b10 	vmov	r4, r5, d0
 810c7ea:	f7ff ff47 	bl	810c67c <__b2d>
 810c7ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c7f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c7f6:	eba3 0c02 	sub.w	ip, r3, r2
 810c7fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c7fe:	1a9b      	subs	r3, r3, r2
 810c800:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c804:	ec51 0b10 	vmov	r0, r1, d0
 810c808:	2b00      	cmp	r3, #0
 810c80a:	bfd6      	itet	le
 810c80c:	460a      	movle	r2, r1
 810c80e:	462a      	movgt	r2, r5
 810c810:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c814:	468b      	mov	fp, r1
 810c816:	462f      	mov	r7, r5
 810c818:	bfd4      	ite	le
 810c81a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c81e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c822:	4620      	mov	r0, r4
 810c824:	ee10 2a10 	vmov	r2, s0
 810c828:	465b      	mov	r3, fp
 810c82a:	4639      	mov	r1, r7
 810c82c:	f7f4 f8a6 	bl	810097c <__aeabi_ddiv>
 810c830:	ec41 0b10 	vmov	d0, r0, r1
 810c834:	b003      	add	sp, #12
 810c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c83a <__copybits>:
 810c83a:	3901      	subs	r1, #1
 810c83c:	b570      	push	{r4, r5, r6, lr}
 810c83e:	1149      	asrs	r1, r1, #5
 810c840:	6914      	ldr	r4, [r2, #16]
 810c842:	3101      	adds	r1, #1
 810c844:	f102 0314 	add.w	r3, r2, #20
 810c848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c84c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c850:	1f05      	subs	r5, r0, #4
 810c852:	42a3      	cmp	r3, r4
 810c854:	d30c      	bcc.n	810c870 <__copybits+0x36>
 810c856:	1aa3      	subs	r3, r4, r2
 810c858:	3b11      	subs	r3, #17
 810c85a:	f023 0303 	bic.w	r3, r3, #3
 810c85e:	3211      	adds	r2, #17
 810c860:	42a2      	cmp	r2, r4
 810c862:	bf88      	it	hi
 810c864:	2300      	movhi	r3, #0
 810c866:	4418      	add	r0, r3
 810c868:	2300      	movs	r3, #0
 810c86a:	4288      	cmp	r0, r1
 810c86c:	d305      	bcc.n	810c87a <__copybits+0x40>
 810c86e:	bd70      	pop	{r4, r5, r6, pc}
 810c870:	f853 6b04 	ldr.w	r6, [r3], #4
 810c874:	f845 6f04 	str.w	r6, [r5, #4]!
 810c878:	e7eb      	b.n	810c852 <__copybits+0x18>
 810c87a:	f840 3b04 	str.w	r3, [r0], #4
 810c87e:	e7f4      	b.n	810c86a <__copybits+0x30>

0810c880 <__any_on>:
 810c880:	f100 0214 	add.w	r2, r0, #20
 810c884:	6900      	ldr	r0, [r0, #16]
 810c886:	114b      	asrs	r3, r1, #5
 810c888:	4298      	cmp	r0, r3
 810c88a:	b510      	push	{r4, lr}
 810c88c:	db11      	blt.n	810c8b2 <__any_on+0x32>
 810c88e:	dd0a      	ble.n	810c8a6 <__any_on+0x26>
 810c890:	f011 011f 	ands.w	r1, r1, #31
 810c894:	d007      	beq.n	810c8a6 <__any_on+0x26>
 810c896:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c89a:	fa24 f001 	lsr.w	r0, r4, r1
 810c89e:	fa00 f101 	lsl.w	r1, r0, r1
 810c8a2:	428c      	cmp	r4, r1
 810c8a4:	d10b      	bne.n	810c8be <__any_on+0x3e>
 810c8a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c8aa:	4293      	cmp	r3, r2
 810c8ac:	d803      	bhi.n	810c8b6 <__any_on+0x36>
 810c8ae:	2000      	movs	r0, #0
 810c8b0:	bd10      	pop	{r4, pc}
 810c8b2:	4603      	mov	r3, r0
 810c8b4:	e7f7      	b.n	810c8a6 <__any_on+0x26>
 810c8b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c8ba:	2900      	cmp	r1, #0
 810c8bc:	d0f5      	beq.n	810c8aa <__any_on+0x2a>
 810c8be:	2001      	movs	r0, #1
 810c8c0:	e7f6      	b.n	810c8b0 <__any_on+0x30>

0810c8c2 <_calloc_r>:
 810c8c2:	b513      	push	{r0, r1, r4, lr}
 810c8c4:	434a      	muls	r2, r1
 810c8c6:	4611      	mov	r1, r2
 810c8c8:	9201      	str	r2, [sp, #4]
 810c8ca:	f7fb fef9 	bl	81086c0 <_malloc_r>
 810c8ce:	4604      	mov	r4, r0
 810c8d0:	b118      	cbz	r0, 810c8da <_calloc_r+0x18>
 810c8d2:	9a01      	ldr	r2, [sp, #4]
 810c8d4:	2100      	movs	r1, #0
 810c8d6:	f7fb fe9b 	bl	8108610 <memset>
 810c8da:	4620      	mov	r0, r4
 810c8dc:	b002      	add	sp, #8
 810c8de:	bd10      	pop	{r4, pc}

0810c8e0 <_realloc_r>:
 810c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c8e2:	4607      	mov	r7, r0
 810c8e4:	4614      	mov	r4, r2
 810c8e6:	460e      	mov	r6, r1
 810c8e8:	b921      	cbnz	r1, 810c8f4 <_realloc_r+0x14>
 810c8ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810c8ee:	4611      	mov	r1, r2
 810c8f0:	f7fb bee6 	b.w	81086c0 <_malloc_r>
 810c8f4:	b922      	cbnz	r2, 810c900 <_realloc_r+0x20>
 810c8f6:	f7fb fe93 	bl	8108620 <_free_r>
 810c8fa:	4625      	mov	r5, r4
 810c8fc:	4628      	mov	r0, r5
 810c8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c900:	f000 fa64 	bl	810cdcc <_malloc_usable_size_r>
 810c904:	42a0      	cmp	r0, r4
 810c906:	d20f      	bcs.n	810c928 <_realloc_r+0x48>
 810c908:	4621      	mov	r1, r4
 810c90a:	4638      	mov	r0, r7
 810c90c:	f7fb fed8 	bl	81086c0 <_malloc_r>
 810c910:	4605      	mov	r5, r0
 810c912:	2800      	cmp	r0, #0
 810c914:	d0f2      	beq.n	810c8fc <_realloc_r+0x1c>
 810c916:	4631      	mov	r1, r6
 810c918:	4622      	mov	r2, r4
 810c91a:	f7fb fe6b 	bl	81085f4 <memcpy>
 810c91e:	4631      	mov	r1, r6
 810c920:	4638      	mov	r0, r7
 810c922:	f7fb fe7d 	bl	8108620 <_free_r>
 810c926:	e7e9      	b.n	810c8fc <_realloc_r+0x1c>
 810c928:	4635      	mov	r5, r6
 810c92a:	e7e7      	b.n	810c8fc <_realloc_r+0x1c>

0810c92c <__ssputs_r>:
 810c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c930:	688e      	ldr	r6, [r1, #8]
 810c932:	429e      	cmp	r6, r3
 810c934:	4682      	mov	sl, r0
 810c936:	460c      	mov	r4, r1
 810c938:	4690      	mov	r8, r2
 810c93a:	461f      	mov	r7, r3
 810c93c:	d838      	bhi.n	810c9b0 <__ssputs_r+0x84>
 810c93e:	898a      	ldrh	r2, [r1, #12]
 810c940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c944:	d032      	beq.n	810c9ac <__ssputs_r+0x80>
 810c946:	6825      	ldr	r5, [r4, #0]
 810c948:	6909      	ldr	r1, [r1, #16]
 810c94a:	eba5 0901 	sub.w	r9, r5, r1
 810c94e:	6965      	ldr	r5, [r4, #20]
 810c950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c958:	3301      	adds	r3, #1
 810c95a:	444b      	add	r3, r9
 810c95c:	106d      	asrs	r5, r5, #1
 810c95e:	429d      	cmp	r5, r3
 810c960:	bf38      	it	cc
 810c962:	461d      	movcc	r5, r3
 810c964:	0553      	lsls	r3, r2, #21
 810c966:	d531      	bpl.n	810c9cc <__ssputs_r+0xa0>
 810c968:	4629      	mov	r1, r5
 810c96a:	f7fb fea9 	bl	81086c0 <_malloc_r>
 810c96e:	4606      	mov	r6, r0
 810c970:	b950      	cbnz	r0, 810c988 <__ssputs_r+0x5c>
 810c972:	230c      	movs	r3, #12
 810c974:	f8ca 3000 	str.w	r3, [sl]
 810c978:	89a3      	ldrh	r3, [r4, #12]
 810c97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c97e:	81a3      	strh	r3, [r4, #12]
 810c980:	f04f 30ff 	mov.w	r0, #4294967295
 810c984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c988:	6921      	ldr	r1, [r4, #16]
 810c98a:	464a      	mov	r2, r9
 810c98c:	f7fb fe32 	bl	81085f4 <memcpy>
 810c990:	89a3      	ldrh	r3, [r4, #12]
 810c992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c99a:	81a3      	strh	r3, [r4, #12]
 810c99c:	6126      	str	r6, [r4, #16]
 810c99e:	6165      	str	r5, [r4, #20]
 810c9a0:	444e      	add	r6, r9
 810c9a2:	eba5 0509 	sub.w	r5, r5, r9
 810c9a6:	6026      	str	r6, [r4, #0]
 810c9a8:	60a5      	str	r5, [r4, #8]
 810c9aa:	463e      	mov	r6, r7
 810c9ac:	42be      	cmp	r6, r7
 810c9ae:	d900      	bls.n	810c9b2 <__ssputs_r+0x86>
 810c9b0:	463e      	mov	r6, r7
 810c9b2:	4632      	mov	r2, r6
 810c9b4:	6820      	ldr	r0, [r4, #0]
 810c9b6:	4641      	mov	r1, r8
 810c9b8:	f7ff faa2 	bl	810bf00 <memmove>
 810c9bc:	68a3      	ldr	r3, [r4, #8]
 810c9be:	6822      	ldr	r2, [r4, #0]
 810c9c0:	1b9b      	subs	r3, r3, r6
 810c9c2:	4432      	add	r2, r6
 810c9c4:	60a3      	str	r3, [r4, #8]
 810c9c6:	6022      	str	r2, [r4, #0]
 810c9c8:	2000      	movs	r0, #0
 810c9ca:	e7db      	b.n	810c984 <__ssputs_r+0x58>
 810c9cc:	462a      	mov	r2, r5
 810c9ce:	f7ff ff87 	bl	810c8e0 <_realloc_r>
 810c9d2:	4606      	mov	r6, r0
 810c9d4:	2800      	cmp	r0, #0
 810c9d6:	d1e1      	bne.n	810c99c <__ssputs_r+0x70>
 810c9d8:	6921      	ldr	r1, [r4, #16]
 810c9da:	4650      	mov	r0, sl
 810c9dc:	f7fb fe20 	bl	8108620 <_free_r>
 810c9e0:	e7c7      	b.n	810c972 <__ssputs_r+0x46>
	...

0810c9e4 <_svfiprintf_r>:
 810c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c9e8:	4698      	mov	r8, r3
 810c9ea:	898b      	ldrh	r3, [r1, #12]
 810c9ec:	061b      	lsls	r3, r3, #24
 810c9ee:	b09d      	sub	sp, #116	; 0x74
 810c9f0:	4607      	mov	r7, r0
 810c9f2:	460d      	mov	r5, r1
 810c9f4:	4614      	mov	r4, r2
 810c9f6:	d50e      	bpl.n	810ca16 <_svfiprintf_r+0x32>
 810c9f8:	690b      	ldr	r3, [r1, #16]
 810c9fa:	b963      	cbnz	r3, 810ca16 <_svfiprintf_r+0x32>
 810c9fc:	2140      	movs	r1, #64	; 0x40
 810c9fe:	f7fb fe5f 	bl	81086c0 <_malloc_r>
 810ca02:	6028      	str	r0, [r5, #0]
 810ca04:	6128      	str	r0, [r5, #16]
 810ca06:	b920      	cbnz	r0, 810ca12 <_svfiprintf_r+0x2e>
 810ca08:	230c      	movs	r3, #12
 810ca0a:	603b      	str	r3, [r7, #0]
 810ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 810ca10:	e0d1      	b.n	810cbb6 <_svfiprintf_r+0x1d2>
 810ca12:	2340      	movs	r3, #64	; 0x40
 810ca14:	616b      	str	r3, [r5, #20]
 810ca16:	2300      	movs	r3, #0
 810ca18:	9309      	str	r3, [sp, #36]	; 0x24
 810ca1a:	2320      	movs	r3, #32
 810ca1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810ca20:	f8cd 800c 	str.w	r8, [sp, #12]
 810ca24:	2330      	movs	r3, #48	; 0x30
 810ca26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810cbd0 <_svfiprintf_r+0x1ec>
 810ca2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ca2e:	f04f 0901 	mov.w	r9, #1
 810ca32:	4623      	mov	r3, r4
 810ca34:	469a      	mov	sl, r3
 810ca36:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ca3a:	b10a      	cbz	r2, 810ca40 <_svfiprintf_r+0x5c>
 810ca3c:	2a25      	cmp	r2, #37	; 0x25
 810ca3e:	d1f9      	bne.n	810ca34 <_svfiprintf_r+0x50>
 810ca40:	ebba 0b04 	subs.w	fp, sl, r4
 810ca44:	d00b      	beq.n	810ca5e <_svfiprintf_r+0x7a>
 810ca46:	465b      	mov	r3, fp
 810ca48:	4622      	mov	r2, r4
 810ca4a:	4629      	mov	r1, r5
 810ca4c:	4638      	mov	r0, r7
 810ca4e:	f7ff ff6d 	bl	810c92c <__ssputs_r>
 810ca52:	3001      	adds	r0, #1
 810ca54:	f000 80aa 	beq.w	810cbac <_svfiprintf_r+0x1c8>
 810ca58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ca5a:	445a      	add	r2, fp
 810ca5c:	9209      	str	r2, [sp, #36]	; 0x24
 810ca5e:	f89a 3000 	ldrb.w	r3, [sl]
 810ca62:	2b00      	cmp	r3, #0
 810ca64:	f000 80a2 	beq.w	810cbac <_svfiprintf_r+0x1c8>
 810ca68:	2300      	movs	r3, #0
 810ca6a:	f04f 32ff 	mov.w	r2, #4294967295
 810ca6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ca72:	f10a 0a01 	add.w	sl, sl, #1
 810ca76:	9304      	str	r3, [sp, #16]
 810ca78:	9307      	str	r3, [sp, #28]
 810ca7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ca7e:	931a      	str	r3, [sp, #104]	; 0x68
 810ca80:	4654      	mov	r4, sl
 810ca82:	2205      	movs	r2, #5
 810ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ca88:	4851      	ldr	r0, [pc, #324]	; (810cbd0 <_svfiprintf_r+0x1ec>)
 810ca8a:	f7f3 fc41 	bl	8100310 <memchr>
 810ca8e:	9a04      	ldr	r2, [sp, #16]
 810ca90:	b9d8      	cbnz	r0, 810caca <_svfiprintf_r+0xe6>
 810ca92:	06d0      	lsls	r0, r2, #27
 810ca94:	bf44      	itt	mi
 810ca96:	2320      	movmi	r3, #32
 810ca98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ca9c:	0711      	lsls	r1, r2, #28
 810ca9e:	bf44      	itt	mi
 810caa0:	232b      	movmi	r3, #43	; 0x2b
 810caa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810caa6:	f89a 3000 	ldrb.w	r3, [sl]
 810caaa:	2b2a      	cmp	r3, #42	; 0x2a
 810caac:	d015      	beq.n	810cada <_svfiprintf_r+0xf6>
 810caae:	9a07      	ldr	r2, [sp, #28]
 810cab0:	4654      	mov	r4, sl
 810cab2:	2000      	movs	r0, #0
 810cab4:	f04f 0c0a 	mov.w	ip, #10
 810cab8:	4621      	mov	r1, r4
 810caba:	f811 3b01 	ldrb.w	r3, [r1], #1
 810cabe:	3b30      	subs	r3, #48	; 0x30
 810cac0:	2b09      	cmp	r3, #9
 810cac2:	d94e      	bls.n	810cb62 <_svfiprintf_r+0x17e>
 810cac4:	b1b0      	cbz	r0, 810caf4 <_svfiprintf_r+0x110>
 810cac6:	9207      	str	r2, [sp, #28]
 810cac8:	e014      	b.n	810caf4 <_svfiprintf_r+0x110>
 810caca:	eba0 0308 	sub.w	r3, r0, r8
 810cace:	fa09 f303 	lsl.w	r3, r9, r3
 810cad2:	4313      	orrs	r3, r2
 810cad4:	9304      	str	r3, [sp, #16]
 810cad6:	46a2      	mov	sl, r4
 810cad8:	e7d2      	b.n	810ca80 <_svfiprintf_r+0x9c>
 810cada:	9b03      	ldr	r3, [sp, #12]
 810cadc:	1d19      	adds	r1, r3, #4
 810cade:	681b      	ldr	r3, [r3, #0]
 810cae0:	9103      	str	r1, [sp, #12]
 810cae2:	2b00      	cmp	r3, #0
 810cae4:	bfbb      	ittet	lt
 810cae6:	425b      	neglt	r3, r3
 810cae8:	f042 0202 	orrlt.w	r2, r2, #2
 810caec:	9307      	strge	r3, [sp, #28]
 810caee:	9307      	strlt	r3, [sp, #28]
 810caf0:	bfb8      	it	lt
 810caf2:	9204      	strlt	r2, [sp, #16]
 810caf4:	7823      	ldrb	r3, [r4, #0]
 810caf6:	2b2e      	cmp	r3, #46	; 0x2e
 810caf8:	d10c      	bne.n	810cb14 <_svfiprintf_r+0x130>
 810cafa:	7863      	ldrb	r3, [r4, #1]
 810cafc:	2b2a      	cmp	r3, #42	; 0x2a
 810cafe:	d135      	bne.n	810cb6c <_svfiprintf_r+0x188>
 810cb00:	9b03      	ldr	r3, [sp, #12]
 810cb02:	1d1a      	adds	r2, r3, #4
 810cb04:	681b      	ldr	r3, [r3, #0]
 810cb06:	9203      	str	r2, [sp, #12]
 810cb08:	2b00      	cmp	r3, #0
 810cb0a:	bfb8      	it	lt
 810cb0c:	f04f 33ff 	movlt.w	r3, #4294967295
 810cb10:	3402      	adds	r4, #2
 810cb12:	9305      	str	r3, [sp, #20]
 810cb14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810cbe0 <_svfiprintf_r+0x1fc>
 810cb18:	7821      	ldrb	r1, [r4, #0]
 810cb1a:	2203      	movs	r2, #3
 810cb1c:	4650      	mov	r0, sl
 810cb1e:	f7f3 fbf7 	bl	8100310 <memchr>
 810cb22:	b140      	cbz	r0, 810cb36 <_svfiprintf_r+0x152>
 810cb24:	2340      	movs	r3, #64	; 0x40
 810cb26:	eba0 000a 	sub.w	r0, r0, sl
 810cb2a:	fa03 f000 	lsl.w	r0, r3, r0
 810cb2e:	9b04      	ldr	r3, [sp, #16]
 810cb30:	4303      	orrs	r3, r0
 810cb32:	3401      	adds	r4, #1
 810cb34:	9304      	str	r3, [sp, #16]
 810cb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 810cb3a:	4826      	ldr	r0, [pc, #152]	; (810cbd4 <_svfiprintf_r+0x1f0>)
 810cb3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810cb40:	2206      	movs	r2, #6
 810cb42:	f7f3 fbe5 	bl	8100310 <memchr>
 810cb46:	2800      	cmp	r0, #0
 810cb48:	d038      	beq.n	810cbbc <_svfiprintf_r+0x1d8>
 810cb4a:	4b23      	ldr	r3, [pc, #140]	; (810cbd8 <_svfiprintf_r+0x1f4>)
 810cb4c:	bb1b      	cbnz	r3, 810cb96 <_svfiprintf_r+0x1b2>
 810cb4e:	9b03      	ldr	r3, [sp, #12]
 810cb50:	3307      	adds	r3, #7
 810cb52:	f023 0307 	bic.w	r3, r3, #7
 810cb56:	3308      	adds	r3, #8
 810cb58:	9303      	str	r3, [sp, #12]
 810cb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cb5c:	4433      	add	r3, r6
 810cb5e:	9309      	str	r3, [sp, #36]	; 0x24
 810cb60:	e767      	b.n	810ca32 <_svfiprintf_r+0x4e>
 810cb62:	fb0c 3202 	mla	r2, ip, r2, r3
 810cb66:	460c      	mov	r4, r1
 810cb68:	2001      	movs	r0, #1
 810cb6a:	e7a5      	b.n	810cab8 <_svfiprintf_r+0xd4>
 810cb6c:	2300      	movs	r3, #0
 810cb6e:	3401      	adds	r4, #1
 810cb70:	9305      	str	r3, [sp, #20]
 810cb72:	4619      	mov	r1, r3
 810cb74:	f04f 0c0a 	mov.w	ip, #10
 810cb78:	4620      	mov	r0, r4
 810cb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810cb7e:	3a30      	subs	r2, #48	; 0x30
 810cb80:	2a09      	cmp	r2, #9
 810cb82:	d903      	bls.n	810cb8c <_svfiprintf_r+0x1a8>
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d0c5      	beq.n	810cb14 <_svfiprintf_r+0x130>
 810cb88:	9105      	str	r1, [sp, #20]
 810cb8a:	e7c3      	b.n	810cb14 <_svfiprintf_r+0x130>
 810cb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 810cb90:	4604      	mov	r4, r0
 810cb92:	2301      	movs	r3, #1
 810cb94:	e7f0      	b.n	810cb78 <_svfiprintf_r+0x194>
 810cb96:	ab03      	add	r3, sp, #12
 810cb98:	9300      	str	r3, [sp, #0]
 810cb9a:	462a      	mov	r2, r5
 810cb9c:	4b0f      	ldr	r3, [pc, #60]	; (810cbdc <_svfiprintf_r+0x1f8>)
 810cb9e:	a904      	add	r1, sp, #16
 810cba0:	4638      	mov	r0, r7
 810cba2:	f7fb ffe1 	bl	8108b68 <_printf_float>
 810cba6:	1c42      	adds	r2, r0, #1
 810cba8:	4606      	mov	r6, r0
 810cbaa:	d1d6      	bne.n	810cb5a <_svfiprintf_r+0x176>
 810cbac:	89ab      	ldrh	r3, [r5, #12]
 810cbae:	065b      	lsls	r3, r3, #25
 810cbb0:	f53f af2c 	bmi.w	810ca0c <_svfiprintf_r+0x28>
 810cbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cbb6:	b01d      	add	sp, #116	; 0x74
 810cbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cbbc:	ab03      	add	r3, sp, #12
 810cbbe:	9300      	str	r3, [sp, #0]
 810cbc0:	462a      	mov	r2, r5
 810cbc2:	4b06      	ldr	r3, [pc, #24]	; (810cbdc <_svfiprintf_r+0x1f8>)
 810cbc4:	a904      	add	r1, sp, #16
 810cbc6:	4638      	mov	r0, r7
 810cbc8:	f7fc fa72 	bl	81090b0 <_printf_i>
 810cbcc:	e7eb      	b.n	810cba6 <_svfiprintf_r+0x1c2>
 810cbce:	bf00      	nop
 810cbd0:	0810dc10 	.word	0x0810dc10
 810cbd4:	0810dc1a 	.word	0x0810dc1a
 810cbd8:	08108b69 	.word	0x08108b69
 810cbdc:	0810c92d 	.word	0x0810c92d
 810cbe0:	0810dc16 	.word	0x0810dc16
 810cbe4:	00000000 	.word	0x00000000

0810cbe8 <nan>:
 810cbe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810cbf0 <nan+0x8>
 810cbec:	4770      	bx	lr
 810cbee:	bf00      	nop
 810cbf0:	00000000 	.word	0x00000000
 810cbf4:	7ff80000 	.word	0x7ff80000

0810cbf8 <_raise_r>:
 810cbf8:	291f      	cmp	r1, #31
 810cbfa:	b538      	push	{r3, r4, r5, lr}
 810cbfc:	4604      	mov	r4, r0
 810cbfe:	460d      	mov	r5, r1
 810cc00:	d904      	bls.n	810cc0c <_raise_r+0x14>
 810cc02:	2316      	movs	r3, #22
 810cc04:	6003      	str	r3, [r0, #0]
 810cc06:	f04f 30ff 	mov.w	r0, #4294967295
 810cc0a:	bd38      	pop	{r3, r4, r5, pc}
 810cc0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810cc0e:	b112      	cbz	r2, 810cc16 <_raise_r+0x1e>
 810cc10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810cc14:	b94b      	cbnz	r3, 810cc2a <_raise_r+0x32>
 810cc16:	4620      	mov	r0, r4
 810cc18:	f000 f830 	bl	810cc7c <_getpid_r>
 810cc1c:	462a      	mov	r2, r5
 810cc1e:	4601      	mov	r1, r0
 810cc20:	4620      	mov	r0, r4
 810cc22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810cc26:	f000 b817 	b.w	810cc58 <_kill_r>
 810cc2a:	2b01      	cmp	r3, #1
 810cc2c:	d00a      	beq.n	810cc44 <_raise_r+0x4c>
 810cc2e:	1c59      	adds	r1, r3, #1
 810cc30:	d103      	bne.n	810cc3a <_raise_r+0x42>
 810cc32:	2316      	movs	r3, #22
 810cc34:	6003      	str	r3, [r0, #0]
 810cc36:	2001      	movs	r0, #1
 810cc38:	e7e7      	b.n	810cc0a <_raise_r+0x12>
 810cc3a:	2400      	movs	r4, #0
 810cc3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810cc40:	4628      	mov	r0, r5
 810cc42:	4798      	blx	r3
 810cc44:	2000      	movs	r0, #0
 810cc46:	e7e0      	b.n	810cc0a <_raise_r+0x12>

0810cc48 <raise>:
 810cc48:	4b02      	ldr	r3, [pc, #8]	; (810cc54 <raise+0xc>)
 810cc4a:	4601      	mov	r1, r0
 810cc4c:	6818      	ldr	r0, [r3, #0]
 810cc4e:	f7ff bfd3 	b.w	810cbf8 <_raise_r>
 810cc52:	bf00      	nop
 810cc54:	100000b8 	.word	0x100000b8

0810cc58 <_kill_r>:
 810cc58:	b538      	push	{r3, r4, r5, lr}
 810cc5a:	4d07      	ldr	r5, [pc, #28]	; (810cc78 <_kill_r+0x20>)
 810cc5c:	2300      	movs	r3, #0
 810cc5e:	4604      	mov	r4, r0
 810cc60:	4608      	mov	r0, r1
 810cc62:	4611      	mov	r1, r2
 810cc64:	602b      	str	r3, [r5, #0]
 810cc66:	f7f4 fe33 	bl	81018d0 <_kill>
 810cc6a:	1c43      	adds	r3, r0, #1
 810cc6c:	d102      	bne.n	810cc74 <_kill_r+0x1c>
 810cc6e:	682b      	ldr	r3, [r5, #0]
 810cc70:	b103      	cbz	r3, 810cc74 <_kill_r+0x1c>
 810cc72:	6023      	str	r3, [r4, #0]
 810cc74:	bd38      	pop	{r3, r4, r5, pc}
 810cc76:	bf00      	nop
 810cc78:	10000530 	.word	0x10000530

0810cc7c <_getpid_r>:
 810cc7c:	f7f4 be20 	b.w	81018c0 <_getpid>

0810cc80 <__sread>:
 810cc80:	b510      	push	{r4, lr}
 810cc82:	460c      	mov	r4, r1
 810cc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cc88:	f000 f8a8 	bl	810cddc <_read_r>
 810cc8c:	2800      	cmp	r0, #0
 810cc8e:	bfab      	itete	ge
 810cc90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810cc92:	89a3      	ldrhlt	r3, [r4, #12]
 810cc94:	181b      	addge	r3, r3, r0
 810cc96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810cc9a:	bfac      	ite	ge
 810cc9c:	6563      	strge	r3, [r4, #84]	; 0x54
 810cc9e:	81a3      	strhlt	r3, [r4, #12]
 810cca0:	bd10      	pop	{r4, pc}

0810cca2 <__swrite>:
 810cca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cca6:	461f      	mov	r7, r3
 810cca8:	898b      	ldrh	r3, [r1, #12]
 810ccaa:	05db      	lsls	r3, r3, #23
 810ccac:	4605      	mov	r5, r0
 810ccae:	460c      	mov	r4, r1
 810ccb0:	4616      	mov	r6, r2
 810ccb2:	d505      	bpl.n	810ccc0 <__swrite+0x1e>
 810ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ccb8:	2302      	movs	r3, #2
 810ccba:	2200      	movs	r2, #0
 810ccbc:	f000 f874 	bl	810cda8 <_lseek_r>
 810ccc0:	89a3      	ldrh	r3, [r4, #12]
 810ccc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ccc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ccca:	81a3      	strh	r3, [r4, #12]
 810cccc:	4632      	mov	r2, r6
 810ccce:	463b      	mov	r3, r7
 810ccd0:	4628      	mov	r0, r5
 810ccd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ccd6:	f000 b823 	b.w	810cd20 <_write_r>

0810ccda <__sseek>:
 810ccda:	b510      	push	{r4, lr}
 810ccdc:	460c      	mov	r4, r1
 810ccde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cce2:	f000 f861 	bl	810cda8 <_lseek_r>
 810cce6:	1c43      	adds	r3, r0, #1
 810cce8:	89a3      	ldrh	r3, [r4, #12]
 810ccea:	bf15      	itete	ne
 810ccec:	6560      	strne	r0, [r4, #84]	; 0x54
 810ccee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810ccf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810ccf6:	81a3      	strheq	r3, [r4, #12]
 810ccf8:	bf18      	it	ne
 810ccfa:	81a3      	strhne	r3, [r4, #12]
 810ccfc:	bd10      	pop	{r4, pc}

0810ccfe <__sclose>:
 810ccfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810cd02:	f000 b81f 	b.w	810cd44 <_close_r>

0810cd06 <__ascii_wctomb>:
 810cd06:	b149      	cbz	r1, 810cd1c <__ascii_wctomb+0x16>
 810cd08:	2aff      	cmp	r2, #255	; 0xff
 810cd0a:	bf85      	ittet	hi
 810cd0c:	238a      	movhi	r3, #138	; 0x8a
 810cd0e:	6003      	strhi	r3, [r0, #0]
 810cd10:	700a      	strbls	r2, [r1, #0]
 810cd12:	f04f 30ff 	movhi.w	r0, #4294967295
 810cd16:	bf98      	it	ls
 810cd18:	2001      	movls	r0, #1
 810cd1a:	4770      	bx	lr
 810cd1c:	4608      	mov	r0, r1
 810cd1e:	4770      	bx	lr

0810cd20 <_write_r>:
 810cd20:	b538      	push	{r3, r4, r5, lr}
 810cd22:	4d07      	ldr	r5, [pc, #28]	; (810cd40 <_write_r+0x20>)
 810cd24:	4604      	mov	r4, r0
 810cd26:	4608      	mov	r0, r1
 810cd28:	4611      	mov	r1, r2
 810cd2a:	2200      	movs	r2, #0
 810cd2c:	602a      	str	r2, [r5, #0]
 810cd2e:	461a      	mov	r2, r3
 810cd30:	f7f4 fe05 	bl	810193e <_write>
 810cd34:	1c43      	adds	r3, r0, #1
 810cd36:	d102      	bne.n	810cd3e <_write_r+0x1e>
 810cd38:	682b      	ldr	r3, [r5, #0]
 810cd3a:	b103      	cbz	r3, 810cd3e <_write_r+0x1e>
 810cd3c:	6023      	str	r3, [r4, #0]
 810cd3e:	bd38      	pop	{r3, r4, r5, pc}
 810cd40:	10000530 	.word	0x10000530

0810cd44 <_close_r>:
 810cd44:	b538      	push	{r3, r4, r5, lr}
 810cd46:	4d06      	ldr	r5, [pc, #24]	; (810cd60 <_close_r+0x1c>)
 810cd48:	2300      	movs	r3, #0
 810cd4a:	4604      	mov	r4, r0
 810cd4c:	4608      	mov	r0, r1
 810cd4e:	602b      	str	r3, [r5, #0]
 810cd50:	f7f4 fe11 	bl	8101976 <_close>
 810cd54:	1c43      	adds	r3, r0, #1
 810cd56:	d102      	bne.n	810cd5e <_close_r+0x1a>
 810cd58:	682b      	ldr	r3, [r5, #0]
 810cd5a:	b103      	cbz	r3, 810cd5e <_close_r+0x1a>
 810cd5c:	6023      	str	r3, [r4, #0]
 810cd5e:	bd38      	pop	{r3, r4, r5, pc}
 810cd60:	10000530 	.word	0x10000530

0810cd64 <_fstat_r>:
 810cd64:	b538      	push	{r3, r4, r5, lr}
 810cd66:	4d07      	ldr	r5, [pc, #28]	; (810cd84 <_fstat_r+0x20>)
 810cd68:	2300      	movs	r3, #0
 810cd6a:	4604      	mov	r4, r0
 810cd6c:	4608      	mov	r0, r1
 810cd6e:	4611      	mov	r1, r2
 810cd70:	602b      	str	r3, [r5, #0]
 810cd72:	f7f4 fe0c 	bl	810198e <_fstat>
 810cd76:	1c43      	adds	r3, r0, #1
 810cd78:	d102      	bne.n	810cd80 <_fstat_r+0x1c>
 810cd7a:	682b      	ldr	r3, [r5, #0]
 810cd7c:	b103      	cbz	r3, 810cd80 <_fstat_r+0x1c>
 810cd7e:	6023      	str	r3, [r4, #0]
 810cd80:	bd38      	pop	{r3, r4, r5, pc}
 810cd82:	bf00      	nop
 810cd84:	10000530 	.word	0x10000530

0810cd88 <_isatty_r>:
 810cd88:	b538      	push	{r3, r4, r5, lr}
 810cd8a:	4d06      	ldr	r5, [pc, #24]	; (810cda4 <_isatty_r+0x1c>)
 810cd8c:	2300      	movs	r3, #0
 810cd8e:	4604      	mov	r4, r0
 810cd90:	4608      	mov	r0, r1
 810cd92:	602b      	str	r3, [r5, #0]
 810cd94:	f7f4 fe0b 	bl	81019ae <_isatty>
 810cd98:	1c43      	adds	r3, r0, #1
 810cd9a:	d102      	bne.n	810cda2 <_isatty_r+0x1a>
 810cd9c:	682b      	ldr	r3, [r5, #0]
 810cd9e:	b103      	cbz	r3, 810cda2 <_isatty_r+0x1a>
 810cda0:	6023      	str	r3, [r4, #0]
 810cda2:	bd38      	pop	{r3, r4, r5, pc}
 810cda4:	10000530 	.word	0x10000530

0810cda8 <_lseek_r>:
 810cda8:	b538      	push	{r3, r4, r5, lr}
 810cdaa:	4d07      	ldr	r5, [pc, #28]	; (810cdc8 <_lseek_r+0x20>)
 810cdac:	4604      	mov	r4, r0
 810cdae:	4608      	mov	r0, r1
 810cdb0:	4611      	mov	r1, r2
 810cdb2:	2200      	movs	r2, #0
 810cdb4:	602a      	str	r2, [r5, #0]
 810cdb6:	461a      	mov	r2, r3
 810cdb8:	f7f4 fe04 	bl	81019c4 <_lseek>
 810cdbc:	1c43      	adds	r3, r0, #1
 810cdbe:	d102      	bne.n	810cdc6 <_lseek_r+0x1e>
 810cdc0:	682b      	ldr	r3, [r5, #0]
 810cdc2:	b103      	cbz	r3, 810cdc6 <_lseek_r+0x1e>
 810cdc4:	6023      	str	r3, [r4, #0]
 810cdc6:	bd38      	pop	{r3, r4, r5, pc}
 810cdc8:	10000530 	.word	0x10000530

0810cdcc <_malloc_usable_size_r>:
 810cdcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810cdd0:	1f18      	subs	r0, r3, #4
 810cdd2:	2b00      	cmp	r3, #0
 810cdd4:	bfbc      	itt	lt
 810cdd6:	580b      	ldrlt	r3, [r1, r0]
 810cdd8:	18c0      	addlt	r0, r0, r3
 810cdda:	4770      	bx	lr

0810cddc <_read_r>:
 810cddc:	b538      	push	{r3, r4, r5, lr}
 810cdde:	4d07      	ldr	r5, [pc, #28]	; (810cdfc <_read_r+0x20>)
 810cde0:	4604      	mov	r4, r0
 810cde2:	4608      	mov	r0, r1
 810cde4:	4611      	mov	r1, r2
 810cde6:	2200      	movs	r2, #0
 810cde8:	602a      	str	r2, [r5, #0]
 810cdea:	461a      	mov	r2, r3
 810cdec:	f7f4 fd8a 	bl	8101904 <_read>
 810cdf0:	1c43      	adds	r3, r0, #1
 810cdf2:	d102      	bne.n	810cdfa <_read_r+0x1e>
 810cdf4:	682b      	ldr	r3, [r5, #0]
 810cdf6:	b103      	cbz	r3, 810cdfa <_read_r+0x1e>
 810cdf8:	6023      	str	r3, [r4, #0]
 810cdfa:	bd38      	pop	{r3, r4, r5, pc}
 810cdfc:	10000530 	.word	0x10000530

0810ce00 <asin>:
 810ce00:	b538      	push	{r3, r4, r5, lr}
 810ce02:	ed2d 8b02 	vpush	{d8}
 810ce06:	ec55 4b10 	vmov	r4, r5, d0
 810ce0a:	f000 f869 	bl	810cee0 <__ieee754_asin>
 810ce0e:	4b16      	ldr	r3, [pc, #88]	; (810ce68 <asin+0x68>)
 810ce10:	eeb0 8a40 	vmov.f32	s16, s0
 810ce14:	eef0 8a60 	vmov.f32	s17, s1
 810ce18:	f993 3000 	ldrsb.w	r3, [r3]
 810ce1c:	3301      	adds	r3, #1
 810ce1e:	d01c      	beq.n	810ce5a <asin+0x5a>
 810ce20:	4622      	mov	r2, r4
 810ce22:	462b      	mov	r3, r5
 810ce24:	4620      	mov	r0, r4
 810ce26:	4629      	mov	r1, r5
 810ce28:	f7f3 ff18 	bl	8100c5c <__aeabi_dcmpun>
 810ce2c:	b9a8      	cbnz	r0, 810ce5a <asin+0x5a>
 810ce2e:	ec45 4b10 	vmov	d0, r4, r5
 810ce32:	f000 fd89 	bl	810d948 <fabs>
 810ce36:	4b0d      	ldr	r3, [pc, #52]	; (810ce6c <asin+0x6c>)
 810ce38:	ec51 0b10 	vmov	r0, r1, d0
 810ce3c:	2200      	movs	r2, #0
 810ce3e:	f7f3 ff03 	bl	8100c48 <__aeabi_dcmpgt>
 810ce42:	b150      	cbz	r0, 810ce5a <asin+0x5a>
 810ce44:	f7fb fb8a 	bl	810855c <__errno>
 810ce48:	ecbd 8b02 	vpop	{d8}
 810ce4c:	2321      	movs	r3, #33	; 0x21
 810ce4e:	6003      	str	r3, [r0, #0]
 810ce50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ce54:	4806      	ldr	r0, [pc, #24]	; (810ce70 <asin+0x70>)
 810ce56:	f7ff bec7 	b.w	810cbe8 <nan>
 810ce5a:	eeb0 0a48 	vmov.f32	s0, s16
 810ce5e:	eef0 0a68 	vmov.f32	s1, s17
 810ce62:	ecbd 8b02 	vpop	{d8}
 810ce66:	bd38      	pop	{r3, r4, r5, pc}
 810ce68:	1000028c 	.word	0x1000028c
 810ce6c:	3ff00000 	.word	0x3ff00000
 810ce70:	0810dc09 	.word	0x0810dc09

0810ce74 <atan2>:
 810ce74:	f000 ba48 	b.w	810d308 <__ieee754_atan2>

0810ce78 <sqrt>:
 810ce78:	b538      	push	{r3, r4, r5, lr}
 810ce7a:	ed2d 8b02 	vpush	{d8}
 810ce7e:	ec55 4b10 	vmov	r4, r5, d0
 810ce82:	f000 fb0b 	bl	810d49c <__ieee754_sqrt>
 810ce86:	4b15      	ldr	r3, [pc, #84]	; (810cedc <sqrt+0x64>)
 810ce88:	eeb0 8a40 	vmov.f32	s16, s0
 810ce8c:	eef0 8a60 	vmov.f32	s17, s1
 810ce90:	f993 3000 	ldrsb.w	r3, [r3]
 810ce94:	3301      	adds	r3, #1
 810ce96:	d019      	beq.n	810cecc <sqrt+0x54>
 810ce98:	4622      	mov	r2, r4
 810ce9a:	462b      	mov	r3, r5
 810ce9c:	4620      	mov	r0, r4
 810ce9e:	4629      	mov	r1, r5
 810cea0:	f7f3 fedc 	bl	8100c5c <__aeabi_dcmpun>
 810cea4:	b990      	cbnz	r0, 810cecc <sqrt+0x54>
 810cea6:	2200      	movs	r2, #0
 810cea8:	2300      	movs	r3, #0
 810ceaa:	4620      	mov	r0, r4
 810ceac:	4629      	mov	r1, r5
 810ceae:	f7f3 fead 	bl	8100c0c <__aeabi_dcmplt>
 810ceb2:	b158      	cbz	r0, 810cecc <sqrt+0x54>
 810ceb4:	f7fb fb52 	bl	810855c <__errno>
 810ceb8:	2321      	movs	r3, #33	; 0x21
 810ceba:	6003      	str	r3, [r0, #0]
 810cebc:	2200      	movs	r2, #0
 810cebe:	2300      	movs	r3, #0
 810cec0:	4610      	mov	r0, r2
 810cec2:	4619      	mov	r1, r3
 810cec4:	f7f3 fd5a 	bl	810097c <__aeabi_ddiv>
 810cec8:	ec41 0b18 	vmov	d8, r0, r1
 810cecc:	eeb0 0a48 	vmov.f32	s0, s16
 810ced0:	eef0 0a68 	vmov.f32	s1, s17
 810ced4:	ecbd 8b02 	vpop	{d8}
 810ced8:	bd38      	pop	{r3, r4, r5, pc}
 810ceda:	bf00      	nop
 810cedc:	1000028c 	.word	0x1000028c

0810cee0 <__ieee754_asin>:
 810cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cee4:	ed2d 8b04 	vpush	{d8-d9}
 810cee8:	ec55 4b10 	vmov	r4, r5, d0
 810ceec:	4bcc      	ldr	r3, [pc, #816]	; (810d220 <__ieee754_asin+0x340>)
 810ceee:	b083      	sub	sp, #12
 810cef0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 810cef4:	4598      	cmp	r8, r3
 810cef6:	9501      	str	r5, [sp, #4]
 810cef8:	dd35      	ble.n	810cf66 <__ieee754_asin+0x86>
 810cefa:	ee10 3a10 	vmov	r3, s0
 810cefe:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 810cf02:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 810cf06:	ea58 0303 	orrs.w	r3, r8, r3
 810cf0a:	d117      	bne.n	810cf3c <__ieee754_asin+0x5c>
 810cf0c:	a3aa      	add	r3, pc, #680	; (adr r3, 810d1b8 <__ieee754_asin+0x2d8>)
 810cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf12:	ee10 0a10 	vmov	r0, s0
 810cf16:	4629      	mov	r1, r5
 810cf18:	f7f3 fc06 	bl	8100728 <__aeabi_dmul>
 810cf1c:	a3a8      	add	r3, pc, #672	; (adr r3, 810d1c0 <__ieee754_asin+0x2e0>)
 810cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf22:	4606      	mov	r6, r0
 810cf24:	460f      	mov	r7, r1
 810cf26:	4620      	mov	r0, r4
 810cf28:	4629      	mov	r1, r5
 810cf2a:	f7f3 fbfd 	bl	8100728 <__aeabi_dmul>
 810cf2e:	4602      	mov	r2, r0
 810cf30:	460b      	mov	r3, r1
 810cf32:	4630      	mov	r0, r6
 810cf34:	4639      	mov	r1, r7
 810cf36:	f7f3 fa41 	bl	81003bc <__adddf3>
 810cf3a:	e00b      	b.n	810cf54 <__ieee754_asin+0x74>
 810cf3c:	ee10 2a10 	vmov	r2, s0
 810cf40:	462b      	mov	r3, r5
 810cf42:	ee10 0a10 	vmov	r0, s0
 810cf46:	4629      	mov	r1, r5
 810cf48:	f7f3 fa36 	bl	81003b8 <__aeabi_dsub>
 810cf4c:	4602      	mov	r2, r0
 810cf4e:	460b      	mov	r3, r1
 810cf50:	f7f3 fd14 	bl	810097c <__aeabi_ddiv>
 810cf54:	4604      	mov	r4, r0
 810cf56:	460d      	mov	r5, r1
 810cf58:	ec45 4b10 	vmov	d0, r4, r5
 810cf5c:	b003      	add	sp, #12
 810cf5e:	ecbd 8b04 	vpop	{d8-d9}
 810cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cf66:	4baf      	ldr	r3, [pc, #700]	; (810d224 <__ieee754_asin+0x344>)
 810cf68:	4598      	cmp	r8, r3
 810cf6a:	dc11      	bgt.n	810cf90 <__ieee754_asin+0xb0>
 810cf6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 810cf70:	f280 80ae 	bge.w	810d0d0 <__ieee754_asin+0x1f0>
 810cf74:	a394      	add	r3, pc, #592	; (adr r3, 810d1c8 <__ieee754_asin+0x2e8>)
 810cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf7a:	ee10 0a10 	vmov	r0, s0
 810cf7e:	4629      	mov	r1, r5
 810cf80:	f7f3 fa1c 	bl	81003bc <__adddf3>
 810cf84:	4ba8      	ldr	r3, [pc, #672]	; (810d228 <__ieee754_asin+0x348>)
 810cf86:	2200      	movs	r2, #0
 810cf88:	f7f3 fe5e 	bl	8100c48 <__aeabi_dcmpgt>
 810cf8c:	2800      	cmp	r0, #0
 810cf8e:	d1e3      	bne.n	810cf58 <__ieee754_asin+0x78>
 810cf90:	ec45 4b10 	vmov	d0, r4, r5
 810cf94:	f000 fcd8 	bl	810d948 <fabs>
 810cf98:	49a3      	ldr	r1, [pc, #652]	; (810d228 <__ieee754_asin+0x348>)
 810cf9a:	ec53 2b10 	vmov	r2, r3, d0
 810cf9e:	2000      	movs	r0, #0
 810cfa0:	f7f3 fa0a 	bl	81003b8 <__aeabi_dsub>
 810cfa4:	4ba1      	ldr	r3, [pc, #644]	; (810d22c <__ieee754_asin+0x34c>)
 810cfa6:	2200      	movs	r2, #0
 810cfa8:	f7f3 fbbe 	bl	8100728 <__aeabi_dmul>
 810cfac:	a388      	add	r3, pc, #544	; (adr r3, 810d1d0 <__ieee754_asin+0x2f0>)
 810cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfb2:	4604      	mov	r4, r0
 810cfb4:	460d      	mov	r5, r1
 810cfb6:	f7f3 fbb7 	bl	8100728 <__aeabi_dmul>
 810cfba:	a387      	add	r3, pc, #540	; (adr r3, 810d1d8 <__ieee754_asin+0x2f8>)
 810cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfc0:	f7f3 f9fc 	bl	81003bc <__adddf3>
 810cfc4:	4622      	mov	r2, r4
 810cfc6:	462b      	mov	r3, r5
 810cfc8:	f7f3 fbae 	bl	8100728 <__aeabi_dmul>
 810cfcc:	a384      	add	r3, pc, #528	; (adr r3, 810d1e0 <__ieee754_asin+0x300>)
 810cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfd2:	f7f3 f9f1 	bl	81003b8 <__aeabi_dsub>
 810cfd6:	4622      	mov	r2, r4
 810cfd8:	462b      	mov	r3, r5
 810cfda:	f7f3 fba5 	bl	8100728 <__aeabi_dmul>
 810cfde:	a382      	add	r3, pc, #520	; (adr r3, 810d1e8 <__ieee754_asin+0x308>)
 810cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfe4:	f7f3 f9ea 	bl	81003bc <__adddf3>
 810cfe8:	4622      	mov	r2, r4
 810cfea:	462b      	mov	r3, r5
 810cfec:	f7f3 fb9c 	bl	8100728 <__aeabi_dmul>
 810cff0:	a37f      	add	r3, pc, #508	; (adr r3, 810d1f0 <__ieee754_asin+0x310>)
 810cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cff6:	f7f3 f9df 	bl	81003b8 <__aeabi_dsub>
 810cffa:	4622      	mov	r2, r4
 810cffc:	462b      	mov	r3, r5
 810cffe:	f7f3 fb93 	bl	8100728 <__aeabi_dmul>
 810d002:	a37d      	add	r3, pc, #500	; (adr r3, 810d1f8 <__ieee754_asin+0x318>)
 810d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d008:	f7f3 f9d8 	bl	81003bc <__adddf3>
 810d00c:	4622      	mov	r2, r4
 810d00e:	462b      	mov	r3, r5
 810d010:	f7f3 fb8a 	bl	8100728 <__aeabi_dmul>
 810d014:	a37a      	add	r3, pc, #488	; (adr r3, 810d200 <__ieee754_asin+0x320>)
 810d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d01a:	ec41 0b18 	vmov	d8, r0, r1
 810d01e:	4620      	mov	r0, r4
 810d020:	4629      	mov	r1, r5
 810d022:	f7f3 fb81 	bl	8100728 <__aeabi_dmul>
 810d026:	a378      	add	r3, pc, #480	; (adr r3, 810d208 <__ieee754_asin+0x328>)
 810d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d02c:	f7f3 f9c4 	bl	81003b8 <__aeabi_dsub>
 810d030:	4622      	mov	r2, r4
 810d032:	462b      	mov	r3, r5
 810d034:	f7f3 fb78 	bl	8100728 <__aeabi_dmul>
 810d038:	a375      	add	r3, pc, #468	; (adr r3, 810d210 <__ieee754_asin+0x330>)
 810d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d03e:	f7f3 f9bd 	bl	81003bc <__adddf3>
 810d042:	4622      	mov	r2, r4
 810d044:	462b      	mov	r3, r5
 810d046:	f7f3 fb6f 	bl	8100728 <__aeabi_dmul>
 810d04a:	a373      	add	r3, pc, #460	; (adr r3, 810d218 <__ieee754_asin+0x338>)
 810d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d050:	f7f3 f9b2 	bl	81003b8 <__aeabi_dsub>
 810d054:	4622      	mov	r2, r4
 810d056:	462b      	mov	r3, r5
 810d058:	f7f3 fb66 	bl	8100728 <__aeabi_dmul>
 810d05c:	4b72      	ldr	r3, [pc, #456]	; (810d228 <__ieee754_asin+0x348>)
 810d05e:	2200      	movs	r2, #0
 810d060:	f7f3 f9ac 	bl	81003bc <__adddf3>
 810d064:	ec45 4b10 	vmov	d0, r4, r5
 810d068:	4606      	mov	r6, r0
 810d06a:	460f      	mov	r7, r1
 810d06c:	f000 fa16 	bl	810d49c <__ieee754_sqrt>
 810d070:	4b6f      	ldr	r3, [pc, #444]	; (810d230 <__ieee754_asin+0x350>)
 810d072:	4598      	cmp	r8, r3
 810d074:	ec5b ab10 	vmov	sl, fp, d0
 810d078:	f340 80dc 	ble.w	810d234 <__ieee754_asin+0x354>
 810d07c:	4632      	mov	r2, r6
 810d07e:	463b      	mov	r3, r7
 810d080:	ec51 0b18 	vmov	r0, r1, d8
 810d084:	f7f3 fc7a 	bl	810097c <__aeabi_ddiv>
 810d088:	4652      	mov	r2, sl
 810d08a:	465b      	mov	r3, fp
 810d08c:	f7f3 fb4c 	bl	8100728 <__aeabi_dmul>
 810d090:	4652      	mov	r2, sl
 810d092:	465b      	mov	r3, fp
 810d094:	f7f3 f992 	bl	81003bc <__adddf3>
 810d098:	4602      	mov	r2, r0
 810d09a:	460b      	mov	r3, r1
 810d09c:	f7f3 f98e 	bl	81003bc <__adddf3>
 810d0a0:	a347      	add	r3, pc, #284	; (adr r3, 810d1c0 <__ieee754_asin+0x2e0>)
 810d0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0a6:	f7f3 f987 	bl	81003b8 <__aeabi_dsub>
 810d0aa:	4602      	mov	r2, r0
 810d0ac:	460b      	mov	r3, r1
 810d0ae:	a142      	add	r1, pc, #264	; (adr r1, 810d1b8 <__ieee754_asin+0x2d8>)
 810d0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d0b4:	f7f3 f980 	bl	81003b8 <__aeabi_dsub>
 810d0b8:	9b01      	ldr	r3, [sp, #4]
 810d0ba:	2b00      	cmp	r3, #0
 810d0bc:	bfdc      	itt	le
 810d0be:	4602      	movle	r2, r0
 810d0c0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 810d0c4:	4604      	mov	r4, r0
 810d0c6:	460d      	mov	r5, r1
 810d0c8:	bfdc      	itt	le
 810d0ca:	4614      	movle	r4, r2
 810d0cc:	461d      	movle	r5, r3
 810d0ce:	e743      	b.n	810cf58 <__ieee754_asin+0x78>
 810d0d0:	ee10 2a10 	vmov	r2, s0
 810d0d4:	ee10 0a10 	vmov	r0, s0
 810d0d8:	462b      	mov	r3, r5
 810d0da:	4629      	mov	r1, r5
 810d0dc:	f7f3 fb24 	bl	8100728 <__aeabi_dmul>
 810d0e0:	a33b      	add	r3, pc, #236	; (adr r3, 810d1d0 <__ieee754_asin+0x2f0>)
 810d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0e6:	4606      	mov	r6, r0
 810d0e8:	460f      	mov	r7, r1
 810d0ea:	f7f3 fb1d 	bl	8100728 <__aeabi_dmul>
 810d0ee:	a33a      	add	r3, pc, #232	; (adr r3, 810d1d8 <__ieee754_asin+0x2f8>)
 810d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0f4:	f7f3 f962 	bl	81003bc <__adddf3>
 810d0f8:	4632      	mov	r2, r6
 810d0fa:	463b      	mov	r3, r7
 810d0fc:	f7f3 fb14 	bl	8100728 <__aeabi_dmul>
 810d100:	a337      	add	r3, pc, #220	; (adr r3, 810d1e0 <__ieee754_asin+0x300>)
 810d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d106:	f7f3 f957 	bl	81003b8 <__aeabi_dsub>
 810d10a:	4632      	mov	r2, r6
 810d10c:	463b      	mov	r3, r7
 810d10e:	f7f3 fb0b 	bl	8100728 <__aeabi_dmul>
 810d112:	a335      	add	r3, pc, #212	; (adr r3, 810d1e8 <__ieee754_asin+0x308>)
 810d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d118:	f7f3 f950 	bl	81003bc <__adddf3>
 810d11c:	4632      	mov	r2, r6
 810d11e:	463b      	mov	r3, r7
 810d120:	f7f3 fb02 	bl	8100728 <__aeabi_dmul>
 810d124:	a332      	add	r3, pc, #200	; (adr r3, 810d1f0 <__ieee754_asin+0x310>)
 810d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d12a:	f7f3 f945 	bl	81003b8 <__aeabi_dsub>
 810d12e:	4632      	mov	r2, r6
 810d130:	463b      	mov	r3, r7
 810d132:	f7f3 faf9 	bl	8100728 <__aeabi_dmul>
 810d136:	a330      	add	r3, pc, #192	; (adr r3, 810d1f8 <__ieee754_asin+0x318>)
 810d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d13c:	f7f3 f93e 	bl	81003bc <__adddf3>
 810d140:	4632      	mov	r2, r6
 810d142:	463b      	mov	r3, r7
 810d144:	f7f3 faf0 	bl	8100728 <__aeabi_dmul>
 810d148:	a32d      	add	r3, pc, #180	; (adr r3, 810d200 <__ieee754_asin+0x320>)
 810d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d14e:	4680      	mov	r8, r0
 810d150:	4689      	mov	r9, r1
 810d152:	4630      	mov	r0, r6
 810d154:	4639      	mov	r1, r7
 810d156:	f7f3 fae7 	bl	8100728 <__aeabi_dmul>
 810d15a:	a32b      	add	r3, pc, #172	; (adr r3, 810d208 <__ieee754_asin+0x328>)
 810d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d160:	f7f3 f92a 	bl	81003b8 <__aeabi_dsub>
 810d164:	4632      	mov	r2, r6
 810d166:	463b      	mov	r3, r7
 810d168:	f7f3 fade 	bl	8100728 <__aeabi_dmul>
 810d16c:	a328      	add	r3, pc, #160	; (adr r3, 810d210 <__ieee754_asin+0x330>)
 810d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d172:	f7f3 f923 	bl	81003bc <__adddf3>
 810d176:	4632      	mov	r2, r6
 810d178:	463b      	mov	r3, r7
 810d17a:	f7f3 fad5 	bl	8100728 <__aeabi_dmul>
 810d17e:	a326      	add	r3, pc, #152	; (adr r3, 810d218 <__ieee754_asin+0x338>)
 810d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d184:	f7f3 f918 	bl	81003b8 <__aeabi_dsub>
 810d188:	4632      	mov	r2, r6
 810d18a:	463b      	mov	r3, r7
 810d18c:	f7f3 facc 	bl	8100728 <__aeabi_dmul>
 810d190:	4b25      	ldr	r3, [pc, #148]	; (810d228 <__ieee754_asin+0x348>)
 810d192:	2200      	movs	r2, #0
 810d194:	f7f3 f912 	bl	81003bc <__adddf3>
 810d198:	4602      	mov	r2, r0
 810d19a:	460b      	mov	r3, r1
 810d19c:	4640      	mov	r0, r8
 810d19e:	4649      	mov	r1, r9
 810d1a0:	f7f3 fbec 	bl	810097c <__aeabi_ddiv>
 810d1a4:	4622      	mov	r2, r4
 810d1a6:	462b      	mov	r3, r5
 810d1a8:	f7f3 fabe 	bl	8100728 <__aeabi_dmul>
 810d1ac:	4602      	mov	r2, r0
 810d1ae:	460b      	mov	r3, r1
 810d1b0:	4620      	mov	r0, r4
 810d1b2:	4629      	mov	r1, r5
 810d1b4:	e6bf      	b.n	810cf36 <__ieee754_asin+0x56>
 810d1b6:	bf00      	nop
 810d1b8:	54442d18 	.word	0x54442d18
 810d1bc:	3ff921fb 	.word	0x3ff921fb
 810d1c0:	33145c07 	.word	0x33145c07
 810d1c4:	3c91a626 	.word	0x3c91a626
 810d1c8:	8800759c 	.word	0x8800759c
 810d1cc:	7e37e43c 	.word	0x7e37e43c
 810d1d0:	0dfdf709 	.word	0x0dfdf709
 810d1d4:	3f023de1 	.word	0x3f023de1
 810d1d8:	7501b288 	.word	0x7501b288
 810d1dc:	3f49efe0 	.word	0x3f49efe0
 810d1e0:	b5688f3b 	.word	0xb5688f3b
 810d1e4:	3fa48228 	.word	0x3fa48228
 810d1e8:	0e884455 	.word	0x0e884455
 810d1ec:	3fc9c155 	.word	0x3fc9c155
 810d1f0:	03eb6f7d 	.word	0x03eb6f7d
 810d1f4:	3fd4d612 	.word	0x3fd4d612
 810d1f8:	55555555 	.word	0x55555555
 810d1fc:	3fc55555 	.word	0x3fc55555
 810d200:	b12e9282 	.word	0xb12e9282
 810d204:	3fb3b8c5 	.word	0x3fb3b8c5
 810d208:	1b8d0159 	.word	0x1b8d0159
 810d20c:	3fe6066c 	.word	0x3fe6066c
 810d210:	9c598ac8 	.word	0x9c598ac8
 810d214:	40002ae5 	.word	0x40002ae5
 810d218:	1c8a2d4b 	.word	0x1c8a2d4b
 810d21c:	40033a27 	.word	0x40033a27
 810d220:	3fefffff 	.word	0x3fefffff
 810d224:	3fdfffff 	.word	0x3fdfffff
 810d228:	3ff00000 	.word	0x3ff00000
 810d22c:	3fe00000 	.word	0x3fe00000
 810d230:	3fef3332 	.word	0x3fef3332
 810d234:	ee10 2a10 	vmov	r2, s0
 810d238:	ee10 0a10 	vmov	r0, s0
 810d23c:	465b      	mov	r3, fp
 810d23e:	4659      	mov	r1, fp
 810d240:	f7f3 f8bc 	bl	81003bc <__adddf3>
 810d244:	4632      	mov	r2, r6
 810d246:	463b      	mov	r3, r7
 810d248:	ec41 0b19 	vmov	d9, r0, r1
 810d24c:	ec51 0b18 	vmov	r0, r1, d8
 810d250:	f7f3 fb94 	bl	810097c <__aeabi_ddiv>
 810d254:	4602      	mov	r2, r0
 810d256:	460b      	mov	r3, r1
 810d258:	ec51 0b19 	vmov	r0, r1, d9
 810d25c:	f7f3 fa64 	bl	8100728 <__aeabi_dmul>
 810d260:	f04f 0800 	mov.w	r8, #0
 810d264:	4606      	mov	r6, r0
 810d266:	460f      	mov	r7, r1
 810d268:	4642      	mov	r2, r8
 810d26a:	465b      	mov	r3, fp
 810d26c:	4640      	mov	r0, r8
 810d26e:	4659      	mov	r1, fp
 810d270:	f7f3 fa5a 	bl	8100728 <__aeabi_dmul>
 810d274:	4602      	mov	r2, r0
 810d276:	460b      	mov	r3, r1
 810d278:	4620      	mov	r0, r4
 810d27a:	4629      	mov	r1, r5
 810d27c:	f7f3 f89c 	bl	81003b8 <__aeabi_dsub>
 810d280:	4642      	mov	r2, r8
 810d282:	4604      	mov	r4, r0
 810d284:	460d      	mov	r5, r1
 810d286:	465b      	mov	r3, fp
 810d288:	4650      	mov	r0, sl
 810d28a:	4659      	mov	r1, fp
 810d28c:	f7f3 f896 	bl	81003bc <__adddf3>
 810d290:	4602      	mov	r2, r0
 810d292:	460b      	mov	r3, r1
 810d294:	4620      	mov	r0, r4
 810d296:	4629      	mov	r1, r5
 810d298:	f7f3 fb70 	bl	810097c <__aeabi_ddiv>
 810d29c:	4602      	mov	r2, r0
 810d29e:	460b      	mov	r3, r1
 810d2a0:	f7f3 f88c 	bl	81003bc <__adddf3>
 810d2a4:	4602      	mov	r2, r0
 810d2a6:	460b      	mov	r3, r1
 810d2a8:	a113      	add	r1, pc, #76	; (adr r1, 810d2f8 <__ieee754_asin+0x418>)
 810d2aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d2ae:	f7f3 f883 	bl	81003b8 <__aeabi_dsub>
 810d2b2:	4602      	mov	r2, r0
 810d2b4:	460b      	mov	r3, r1
 810d2b6:	4630      	mov	r0, r6
 810d2b8:	4639      	mov	r1, r7
 810d2ba:	f7f3 f87d 	bl	81003b8 <__aeabi_dsub>
 810d2be:	4642      	mov	r2, r8
 810d2c0:	4604      	mov	r4, r0
 810d2c2:	460d      	mov	r5, r1
 810d2c4:	465b      	mov	r3, fp
 810d2c6:	4640      	mov	r0, r8
 810d2c8:	4659      	mov	r1, fp
 810d2ca:	f7f3 f877 	bl	81003bc <__adddf3>
 810d2ce:	4602      	mov	r2, r0
 810d2d0:	460b      	mov	r3, r1
 810d2d2:	a10b      	add	r1, pc, #44	; (adr r1, 810d300 <__ieee754_asin+0x420>)
 810d2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d2d8:	f7f3 f86e 	bl	81003b8 <__aeabi_dsub>
 810d2dc:	4602      	mov	r2, r0
 810d2de:	460b      	mov	r3, r1
 810d2e0:	4620      	mov	r0, r4
 810d2e2:	4629      	mov	r1, r5
 810d2e4:	f7f3 f868 	bl	81003b8 <__aeabi_dsub>
 810d2e8:	4602      	mov	r2, r0
 810d2ea:	460b      	mov	r3, r1
 810d2ec:	a104      	add	r1, pc, #16	; (adr r1, 810d300 <__ieee754_asin+0x420>)
 810d2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d2f2:	e6df      	b.n	810d0b4 <__ieee754_asin+0x1d4>
 810d2f4:	f3af 8000 	nop.w
 810d2f8:	33145c07 	.word	0x33145c07
 810d2fc:	3c91a626 	.word	0x3c91a626
 810d300:	54442d18 	.word	0x54442d18
 810d304:	3fe921fb 	.word	0x3fe921fb

0810d308 <__ieee754_atan2>:
 810d308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d30c:	ec57 6b11 	vmov	r6, r7, d1
 810d310:	4273      	negs	r3, r6
 810d312:	f8df e184 	ldr.w	lr, [pc, #388]	; 810d498 <__ieee754_atan2+0x190>
 810d316:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 810d31a:	4333      	orrs	r3, r6
 810d31c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 810d320:	4573      	cmp	r3, lr
 810d322:	ec51 0b10 	vmov	r0, r1, d0
 810d326:	ee11 8a10 	vmov	r8, s2
 810d32a:	d80a      	bhi.n	810d342 <__ieee754_atan2+0x3a>
 810d32c:	4244      	negs	r4, r0
 810d32e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d332:	4304      	orrs	r4, r0
 810d334:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 810d338:	4574      	cmp	r4, lr
 810d33a:	ee10 9a10 	vmov	r9, s0
 810d33e:	468c      	mov	ip, r1
 810d340:	d907      	bls.n	810d352 <__ieee754_atan2+0x4a>
 810d342:	4632      	mov	r2, r6
 810d344:	463b      	mov	r3, r7
 810d346:	f7f3 f839 	bl	81003bc <__adddf3>
 810d34a:	ec41 0b10 	vmov	d0, r0, r1
 810d34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d352:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 810d356:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810d35a:	4334      	orrs	r4, r6
 810d35c:	d103      	bne.n	810d366 <__ieee754_atan2+0x5e>
 810d35e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d362:	f000 b951 	b.w	810d608 <atan>
 810d366:	17bc      	asrs	r4, r7, #30
 810d368:	f004 0402 	and.w	r4, r4, #2
 810d36c:	ea53 0909 	orrs.w	r9, r3, r9
 810d370:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 810d374:	d107      	bne.n	810d386 <__ieee754_atan2+0x7e>
 810d376:	2c02      	cmp	r4, #2
 810d378:	d060      	beq.n	810d43c <__ieee754_atan2+0x134>
 810d37a:	2c03      	cmp	r4, #3
 810d37c:	d1e5      	bne.n	810d34a <__ieee754_atan2+0x42>
 810d37e:	a142      	add	r1, pc, #264	; (adr r1, 810d488 <__ieee754_atan2+0x180>)
 810d380:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d384:	e7e1      	b.n	810d34a <__ieee754_atan2+0x42>
 810d386:	ea52 0808 	orrs.w	r8, r2, r8
 810d38a:	d106      	bne.n	810d39a <__ieee754_atan2+0x92>
 810d38c:	f1bc 0f00 	cmp.w	ip, #0
 810d390:	da5f      	bge.n	810d452 <__ieee754_atan2+0x14a>
 810d392:	a13f      	add	r1, pc, #252	; (adr r1, 810d490 <__ieee754_atan2+0x188>)
 810d394:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d398:	e7d7      	b.n	810d34a <__ieee754_atan2+0x42>
 810d39a:	4572      	cmp	r2, lr
 810d39c:	d10f      	bne.n	810d3be <__ieee754_atan2+0xb6>
 810d39e:	4293      	cmp	r3, r2
 810d3a0:	f104 34ff 	add.w	r4, r4, #4294967295
 810d3a4:	d107      	bne.n	810d3b6 <__ieee754_atan2+0xae>
 810d3a6:	2c02      	cmp	r4, #2
 810d3a8:	d84c      	bhi.n	810d444 <__ieee754_atan2+0x13c>
 810d3aa:	4b35      	ldr	r3, [pc, #212]	; (810d480 <__ieee754_atan2+0x178>)
 810d3ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 810d3b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 810d3b4:	e7c9      	b.n	810d34a <__ieee754_atan2+0x42>
 810d3b6:	2c02      	cmp	r4, #2
 810d3b8:	d848      	bhi.n	810d44c <__ieee754_atan2+0x144>
 810d3ba:	4b32      	ldr	r3, [pc, #200]	; (810d484 <__ieee754_atan2+0x17c>)
 810d3bc:	e7f6      	b.n	810d3ac <__ieee754_atan2+0xa4>
 810d3be:	4573      	cmp	r3, lr
 810d3c0:	d0e4      	beq.n	810d38c <__ieee754_atan2+0x84>
 810d3c2:	1a9b      	subs	r3, r3, r2
 810d3c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 810d3c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 810d3cc:	da1e      	bge.n	810d40c <__ieee754_atan2+0x104>
 810d3ce:	2f00      	cmp	r7, #0
 810d3d0:	da01      	bge.n	810d3d6 <__ieee754_atan2+0xce>
 810d3d2:	323c      	adds	r2, #60	; 0x3c
 810d3d4:	db1e      	blt.n	810d414 <__ieee754_atan2+0x10c>
 810d3d6:	4632      	mov	r2, r6
 810d3d8:	463b      	mov	r3, r7
 810d3da:	f7f3 facf 	bl	810097c <__aeabi_ddiv>
 810d3de:	ec41 0b10 	vmov	d0, r0, r1
 810d3e2:	f000 fab1 	bl	810d948 <fabs>
 810d3e6:	f000 f90f 	bl	810d608 <atan>
 810d3ea:	ec51 0b10 	vmov	r0, r1, d0
 810d3ee:	2c01      	cmp	r4, #1
 810d3f0:	d013      	beq.n	810d41a <__ieee754_atan2+0x112>
 810d3f2:	2c02      	cmp	r4, #2
 810d3f4:	d015      	beq.n	810d422 <__ieee754_atan2+0x11a>
 810d3f6:	2c00      	cmp	r4, #0
 810d3f8:	d0a7      	beq.n	810d34a <__ieee754_atan2+0x42>
 810d3fa:	a319      	add	r3, pc, #100	; (adr r3, 810d460 <__ieee754_atan2+0x158>)
 810d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d400:	f7f2 ffda 	bl	81003b8 <__aeabi_dsub>
 810d404:	a318      	add	r3, pc, #96	; (adr r3, 810d468 <__ieee754_atan2+0x160>)
 810d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d40a:	e014      	b.n	810d436 <__ieee754_atan2+0x12e>
 810d40c:	a118      	add	r1, pc, #96	; (adr r1, 810d470 <__ieee754_atan2+0x168>)
 810d40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d412:	e7ec      	b.n	810d3ee <__ieee754_atan2+0xe6>
 810d414:	2000      	movs	r0, #0
 810d416:	2100      	movs	r1, #0
 810d418:	e7e9      	b.n	810d3ee <__ieee754_atan2+0xe6>
 810d41a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d41e:	4619      	mov	r1, r3
 810d420:	e793      	b.n	810d34a <__ieee754_atan2+0x42>
 810d422:	a30f      	add	r3, pc, #60	; (adr r3, 810d460 <__ieee754_atan2+0x158>)
 810d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d428:	f7f2 ffc6 	bl	81003b8 <__aeabi_dsub>
 810d42c:	4602      	mov	r2, r0
 810d42e:	460b      	mov	r3, r1
 810d430:	a10d      	add	r1, pc, #52	; (adr r1, 810d468 <__ieee754_atan2+0x160>)
 810d432:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d436:	f7f2 ffbf 	bl	81003b8 <__aeabi_dsub>
 810d43a:	e786      	b.n	810d34a <__ieee754_atan2+0x42>
 810d43c:	a10a      	add	r1, pc, #40	; (adr r1, 810d468 <__ieee754_atan2+0x160>)
 810d43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d442:	e782      	b.n	810d34a <__ieee754_atan2+0x42>
 810d444:	a10c      	add	r1, pc, #48	; (adr r1, 810d478 <__ieee754_atan2+0x170>)
 810d446:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d44a:	e77e      	b.n	810d34a <__ieee754_atan2+0x42>
 810d44c:	2000      	movs	r0, #0
 810d44e:	2100      	movs	r1, #0
 810d450:	e77b      	b.n	810d34a <__ieee754_atan2+0x42>
 810d452:	a107      	add	r1, pc, #28	; (adr r1, 810d470 <__ieee754_atan2+0x168>)
 810d454:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d458:	e777      	b.n	810d34a <__ieee754_atan2+0x42>
 810d45a:	bf00      	nop
 810d45c:	f3af 8000 	nop.w
 810d460:	33145c07 	.word	0x33145c07
 810d464:	3ca1a626 	.word	0x3ca1a626
 810d468:	54442d18 	.word	0x54442d18
 810d46c:	400921fb 	.word	0x400921fb
 810d470:	54442d18 	.word	0x54442d18
 810d474:	3ff921fb 	.word	0x3ff921fb
 810d478:	54442d18 	.word	0x54442d18
 810d47c:	3fe921fb 	.word	0x3fe921fb
 810d480:	0810e088 	.word	0x0810e088
 810d484:	0810e0a0 	.word	0x0810e0a0
 810d488:	54442d18 	.word	0x54442d18
 810d48c:	c00921fb 	.word	0xc00921fb
 810d490:	54442d18 	.word	0x54442d18
 810d494:	bff921fb 	.word	0xbff921fb
 810d498:	7ff00000 	.word	0x7ff00000

0810d49c <__ieee754_sqrt>:
 810d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d4a0:	ec55 4b10 	vmov	r4, r5, d0
 810d4a4:	4e56      	ldr	r6, [pc, #344]	; (810d600 <__ieee754_sqrt+0x164>)
 810d4a6:	43ae      	bics	r6, r5
 810d4a8:	ee10 0a10 	vmov	r0, s0
 810d4ac:	ee10 3a10 	vmov	r3, s0
 810d4b0:	4629      	mov	r1, r5
 810d4b2:	462a      	mov	r2, r5
 810d4b4:	d110      	bne.n	810d4d8 <__ieee754_sqrt+0x3c>
 810d4b6:	ee10 2a10 	vmov	r2, s0
 810d4ba:	462b      	mov	r3, r5
 810d4bc:	f7f3 f934 	bl	8100728 <__aeabi_dmul>
 810d4c0:	4602      	mov	r2, r0
 810d4c2:	460b      	mov	r3, r1
 810d4c4:	4620      	mov	r0, r4
 810d4c6:	4629      	mov	r1, r5
 810d4c8:	f7f2 ff78 	bl	81003bc <__adddf3>
 810d4cc:	4604      	mov	r4, r0
 810d4ce:	460d      	mov	r5, r1
 810d4d0:	ec45 4b10 	vmov	d0, r4, r5
 810d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d4d8:	2d00      	cmp	r5, #0
 810d4da:	dc10      	bgt.n	810d4fe <__ieee754_sqrt+0x62>
 810d4dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d4e0:	4330      	orrs	r0, r6
 810d4e2:	d0f5      	beq.n	810d4d0 <__ieee754_sqrt+0x34>
 810d4e4:	b15d      	cbz	r5, 810d4fe <__ieee754_sqrt+0x62>
 810d4e6:	ee10 2a10 	vmov	r2, s0
 810d4ea:	462b      	mov	r3, r5
 810d4ec:	ee10 0a10 	vmov	r0, s0
 810d4f0:	f7f2 ff62 	bl	81003b8 <__aeabi_dsub>
 810d4f4:	4602      	mov	r2, r0
 810d4f6:	460b      	mov	r3, r1
 810d4f8:	f7f3 fa40 	bl	810097c <__aeabi_ddiv>
 810d4fc:	e7e6      	b.n	810d4cc <__ieee754_sqrt+0x30>
 810d4fe:	1509      	asrs	r1, r1, #20
 810d500:	d076      	beq.n	810d5f0 <__ieee754_sqrt+0x154>
 810d502:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810d506:	07ce      	lsls	r6, r1, #31
 810d508:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810d50c:	bf5e      	ittt	pl
 810d50e:	0fda      	lsrpl	r2, r3, #31
 810d510:	005b      	lslpl	r3, r3, #1
 810d512:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810d516:	0fda      	lsrs	r2, r3, #31
 810d518:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810d51c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810d520:	2000      	movs	r0, #0
 810d522:	106d      	asrs	r5, r5, #1
 810d524:	005b      	lsls	r3, r3, #1
 810d526:	f04f 0e16 	mov.w	lr, #22
 810d52a:	4684      	mov	ip, r0
 810d52c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d530:	eb0c 0401 	add.w	r4, ip, r1
 810d534:	4294      	cmp	r4, r2
 810d536:	bfde      	ittt	le
 810d538:	1b12      	suble	r2, r2, r4
 810d53a:	eb04 0c01 	addle.w	ip, r4, r1
 810d53e:	1840      	addle	r0, r0, r1
 810d540:	0052      	lsls	r2, r2, #1
 810d542:	f1be 0e01 	subs.w	lr, lr, #1
 810d546:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d54a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810d54e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d552:	d1ed      	bne.n	810d530 <__ieee754_sqrt+0x94>
 810d554:	4671      	mov	r1, lr
 810d556:	2720      	movs	r7, #32
 810d558:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810d55c:	4562      	cmp	r2, ip
 810d55e:	eb04 060e 	add.w	r6, r4, lr
 810d562:	dc02      	bgt.n	810d56a <__ieee754_sqrt+0xce>
 810d564:	d113      	bne.n	810d58e <__ieee754_sqrt+0xf2>
 810d566:	429e      	cmp	r6, r3
 810d568:	d811      	bhi.n	810d58e <__ieee754_sqrt+0xf2>
 810d56a:	2e00      	cmp	r6, #0
 810d56c:	eb06 0e04 	add.w	lr, r6, r4
 810d570:	da43      	bge.n	810d5fa <__ieee754_sqrt+0x15e>
 810d572:	f1be 0f00 	cmp.w	lr, #0
 810d576:	db40      	blt.n	810d5fa <__ieee754_sqrt+0x15e>
 810d578:	f10c 0801 	add.w	r8, ip, #1
 810d57c:	eba2 020c 	sub.w	r2, r2, ip
 810d580:	429e      	cmp	r6, r3
 810d582:	bf88      	it	hi
 810d584:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810d588:	1b9b      	subs	r3, r3, r6
 810d58a:	4421      	add	r1, r4
 810d58c:	46c4      	mov	ip, r8
 810d58e:	0052      	lsls	r2, r2, #1
 810d590:	3f01      	subs	r7, #1
 810d592:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d596:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810d59a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d59e:	d1dd      	bne.n	810d55c <__ieee754_sqrt+0xc0>
 810d5a0:	4313      	orrs	r3, r2
 810d5a2:	d006      	beq.n	810d5b2 <__ieee754_sqrt+0x116>
 810d5a4:	1c4c      	adds	r4, r1, #1
 810d5a6:	bf13      	iteet	ne
 810d5a8:	3101      	addne	r1, #1
 810d5aa:	3001      	addeq	r0, #1
 810d5ac:	4639      	moveq	r1, r7
 810d5ae:	f021 0101 	bicne.w	r1, r1, #1
 810d5b2:	1043      	asrs	r3, r0, #1
 810d5b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810d5b8:	0849      	lsrs	r1, r1, #1
 810d5ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810d5be:	07c2      	lsls	r2, r0, #31
 810d5c0:	bf48      	it	mi
 810d5c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810d5c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810d5ca:	460c      	mov	r4, r1
 810d5cc:	463d      	mov	r5, r7
 810d5ce:	e77f      	b.n	810d4d0 <__ieee754_sqrt+0x34>
 810d5d0:	0ada      	lsrs	r2, r3, #11
 810d5d2:	3815      	subs	r0, #21
 810d5d4:	055b      	lsls	r3, r3, #21
 810d5d6:	2a00      	cmp	r2, #0
 810d5d8:	d0fa      	beq.n	810d5d0 <__ieee754_sqrt+0x134>
 810d5da:	02d7      	lsls	r7, r2, #11
 810d5dc:	d50a      	bpl.n	810d5f4 <__ieee754_sqrt+0x158>
 810d5de:	f1c1 0420 	rsb	r4, r1, #32
 810d5e2:	fa23 f404 	lsr.w	r4, r3, r4
 810d5e6:	1e4d      	subs	r5, r1, #1
 810d5e8:	408b      	lsls	r3, r1
 810d5ea:	4322      	orrs	r2, r4
 810d5ec:	1b41      	subs	r1, r0, r5
 810d5ee:	e788      	b.n	810d502 <__ieee754_sqrt+0x66>
 810d5f0:	4608      	mov	r0, r1
 810d5f2:	e7f0      	b.n	810d5d6 <__ieee754_sqrt+0x13a>
 810d5f4:	0052      	lsls	r2, r2, #1
 810d5f6:	3101      	adds	r1, #1
 810d5f8:	e7ef      	b.n	810d5da <__ieee754_sqrt+0x13e>
 810d5fa:	46e0      	mov	r8, ip
 810d5fc:	e7be      	b.n	810d57c <__ieee754_sqrt+0xe0>
 810d5fe:	bf00      	nop
 810d600:	7ff00000 	.word	0x7ff00000
 810d604:	00000000 	.word	0x00000000

0810d608 <atan>:
 810d608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d60c:	ec55 4b10 	vmov	r4, r5, d0
 810d610:	4bc3      	ldr	r3, [pc, #780]	; (810d920 <atan+0x318>)
 810d612:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d616:	429e      	cmp	r6, r3
 810d618:	46ab      	mov	fp, r5
 810d61a:	dd18      	ble.n	810d64e <atan+0x46>
 810d61c:	4bc1      	ldr	r3, [pc, #772]	; (810d924 <atan+0x31c>)
 810d61e:	429e      	cmp	r6, r3
 810d620:	dc01      	bgt.n	810d626 <atan+0x1e>
 810d622:	d109      	bne.n	810d638 <atan+0x30>
 810d624:	b144      	cbz	r4, 810d638 <atan+0x30>
 810d626:	4622      	mov	r2, r4
 810d628:	462b      	mov	r3, r5
 810d62a:	4620      	mov	r0, r4
 810d62c:	4629      	mov	r1, r5
 810d62e:	f7f2 fec5 	bl	81003bc <__adddf3>
 810d632:	4604      	mov	r4, r0
 810d634:	460d      	mov	r5, r1
 810d636:	e006      	b.n	810d646 <atan+0x3e>
 810d638:	f1bb 0f00 	cmp.w	fp, #0
 810d63c:	f300 8131 	bgt.w	810d8a2 <atan+0x29a>
 810d640:	a59b      	add	r5, pc, #620	; (adr r5, 810d8b0 <atan+0x2a8>)
 810d642:	e9d5 4500 	ldrd	r4, r5, [r5]
 810d646:	ec45 4b10 	vmov	d0, r4, r5
 810d64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d64e:	4bb6      	ldr	r3, [pc, #728]	; (810d928 <atan+0x320>)
 810d650:	429e      	cmp	r6, r3
 810d652:	dc14      	bgt.n	810d67e <atan+0x76>
 810d654:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 810d658:	429e      	cmp	r6, r3
 810d65a:	dc0d      	bgt.n	810d678 <atan+0x70>
 810d65c:	a396      	add	r3, pc, #600	; (adr r3, 810d8b8 <atan+0x2b0>)
 810d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d662:	ee10 0a10 	vmov	r0, s0
 810d666:	4629      	mov	r1, r5
 810d668:	f7f2 fea8 	bl	81003bc <__adddf3>
 810d66c:	4baf      	ldr	r3, [pc, #700]	; (810d92c <atan+0x324>)
 810d66e:	2200      	movs	r2, #0
 810d670:	f7f3 faea 	bl	8100c48 <__aeabi_dcmpgt>
 810d674:	2800      	cmp	r0, #0
 810d676:	d1e6      	bne.n	810d646 <atan+0x3e>
 810d678:	f04f 3aff 	mov.w	sl, #4294967295
 810d67c:	e02b      	b.n	810d6d6 <atan+0xce>
 810d67e:	f000 f963 	bl	810d948 <fabs>
 810d682:	4bab      	ldr	r3, [pc, #684]	; (810d930 <atan+0x328>)
 810d684:	429e      	cmp	r6, r3
 810d686:	ec55 4b10 	vmov	r4, r5, d0
 810d68a:	f300 80bf 	bgt.w	810d80c <atan+0x204>
 810d68e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 810d692:	429e      	cmp	r6, r3
 810d694:	f300 80a0 	bgt.w	810d7d8 <atan+0x1d0>
 810d698:	ee10 2a10 	vmov	r2, s0
 810d69c:	ee10 0a10 	vmov	r0, s0
 810d6a0:	462b      	mov	r3, r5
 810d6a2:	4629      	mov	r1, r5
 810d6a4:	f7f2 fe8a 	bl	81003bc <__adddf3>
 810d6a8:	4ba0      	ldr	r3, [pc, #640]	; (810d92c <atan+0x324>)
 810d6aa:	2200      	movs	r2, #0
 810d6ac:	f7f2 fe84 	bl	81003b8 <__aeabi_dsub>
 810d6b0:	2200      	movs	r2, #0
 810d6b2:	4606      	mov	r6, r0
 810d6b4:	460f      	mov	r7, r1
 810d6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810d6ba:	4620      	mov	r0, r4
 810d6bc:	4629      	mov	r1, r5
 810d6be:	f7f2 fe7d 	bl	81003bc <__adddf3>
 810d6c2:	4602      	mov	r2, r0
 810d6c4:	460b      	mov	r3, r1
 810d6c6:	4630      	mov	r0, r6
 810d6c8:	4639      	mov	r1, r7
 810d6ca:	f7f3 f957 	bl	810097c <__aeabi_ddiv>
 810d6ce:	f04f 0a00 	mov.w	sl, #0
 810d6d2:	4604      	mov	r4, r0
 810d6d4:	460d      	mov	r5, r1
 810d6d6:	4622      	mov	r2, r4
 810d6d8:	462b      	mov	r3, r5
 810d6da:	4620      	mov	r0, r4
 810d6dc:	4629      	mov	r1, r5
 810d6de:	f7f3 f823 	bl	8100728 <__aeabi_dmul>
 810d6e2:	4602      	mov	r2, r0
 810d6e4:	460b      	mov	r3, r1
 810d6e6:	4680      	mov	r8, r0
 810d6e8:	4689      	mov	r9, r1
 810d6ea:	f7f3 f81d 	bl	8100728 <__aeabi_dmul>
 810d6ee:	a374      	add	r3, pc, #464	; (adr r3, 810d8c0 <atan+0x2b8>)
 810d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6f4:	4606      	mov	r6, r0
 810d6f6:	460f      	mov	r7, r1
 810d6f8:	f7f3 f816 	bl	8100728 <__aeabi_dmul>
 810d6fc:	a372      	add	r3, pc, #456	; (adr r3, 810d8c8 <atan+0x2c0>)
 810d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d702:	f7f2 fe5b 	bl	81003bc <__adddf3>
 810d706:	4632      	mov	r2, r6
 810d708:	463b      	mov	r3, r7
 810d70a:	f7f3 f80d 	bl	8100728 <__aeabi_dmul>
 810d70e:	a370      	add	r3, pc, #448	; (adr r3, 810d8d0 <atan+0x2c8>)
 810d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d714:	f7f2 fe52 	bl	81003bc <__adddf3>
 810d718:	4632      	mov	r2, r6
 810d71a:	463b      	mov	r3, r7
 810d71c:	f7f3 f804 	bl	8100728 <__aeabi_dmul>
 810d720:	a36d      	add	r3, pc, #436	; (adr r3, 810d8d8 <atan+0x2d0>)
 810d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d726:	f7f2 fe49 	bl	81003bc <__adddf3>
 810d72a:	4632      	mov	r2, r6
 810d72c:	463b      	mov	r3, r7
 810d72e:	f7f2 fffb 	bl	8100728 <__aeabi_dmul>
 810d732:	a36b      	add	r3, pc, #428	; (adr r3, 810d8e0 <atan+0x2d8>)
 810d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d738:	f7f2 fe40 	bl	81003bc <__adddf3>
 810d73c:	4632      	mov	r2, r6
 810d73e:	463b      	mov	r3, r7
 810d740:	f7f2 fff2 	bl	8100728 <__aeabi_dmul>
 810d744:	a368      	add	r3, pc, #416	; (adr r3, 810d8e8 <atan+0x2e0>)
 810d746:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d74a:	f7f2 fe37 	bl	81003bc <__adddf3>
 810d74e:	4642      	mov	r2, r8
 810d750:	464b      	mov	r3, r9
 810d752:	f7f2 ffe9 	bl	8100728 <__aeabi_dmul>
 810d756:	a366      	add	r3, pc, #408	; (adr r3, 810d8f0 <atan+0x2e8>)
 810d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d75c:	4680      	mov	r8, r0
 810d75e:	4689      	mov	r9, r1
 810d760:	4630      	mov	r0, r6
 810d762:	4639      	mov	r1, r7
 810d764:	f7f2 ffe0 	bl	8100728 <__aeabi_dmul>
 810d768:	a363      	add	r3, pc, #396	; (adr r3, 810d8f8 <atan+0x2f0>)
 810d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d76e:	f7f2 fe23 	bl	81003b8 <__aeabi_dsub>
 810d772:	4632      	mov	r2, r6
 810d774:	463b      	mov	r3, r7
 810d776:	f7f2 ffd7 	bl	8100728 <__aeabi_dmul>
 810d77a:	a361      	add	r3, pc, #388	; (adr r3, 810d900 <atan+0x2f8>)
 810d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d780:	f7f2 fe1a 	bl	81003b8 <__aeabi_dsub>
 810d784:	4632      	mov	r2, r6
 810d786:	463b      	mov	r3, r7
 810d788:	f7f2 ffce 	bl	8100728 <__aeabi_dmul>
 810d78c:	a35e      	add	r3, pc, #376	; (adr r3, 810d908 <atan+0x300>)
 810d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d792:	f7f2 fe11 	bl	81003b8 <__aeabi_dsub>
 810d796:	4632      	mov	r2, r6
 810d798:	463b      	mov	r3, r7
 810d79a:	f7f2 ffc5 	bl	8100728 <__aeabi_dmul>
 810d79e:	a35c      	add	r3, pc, #368	; (adr r3, 810d910 <atan+0x308>)
 810d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7a4:	f7f2 fe08 	bl	81003b8 <__aeabi_dsub>
 810d7a8:	4632      	mov	r2, r6
 810d7aa:	463b      	mov	r3, r7
 810d7ac:	f7f2 ffbc 	bl	8100728 <__aeabi_dmul>
 810d7b0:	4602      	mov	r2, r0
 810d7b2:	460b      	mov	r3, r1
 810d7b4:	4640      	mov	r0, r8
 810d7b6:	4649      	mov	r1, r9
 810d7b8:	f7f2 fe00 	bl	81003bc <__adddf3>
 810d7bc:	4622      	mov	r2, r4
 810d7be:	462b      	mov	r3, r5
 810d7c0:	f7f2 ffb2 	bl	8100728 <__aeabi_dmul>
 810d7c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 810d7c8:	4602      	mov	r2, r0
 810d7ca:	460b      	mov	r3, r1
 810d7cc:	d14b      	bne.n	810d866 <atan+0x25e>
 810d7ce:	4620      	mov	r0, r4
 810d7d0:	4629      	mov	r1, r5
 810d7d2:	f7f2 fdf1 	bl	81003b8 <__aeabi_dsub>
 810d7d6:	e72c      	b.n	810d632 <atan+0x2a>
 810d7d8:	ee10 0a10 	vmov	r0, s0
 810d7dc:	4b53      	ldr	r3, [pc, #332]	; (810d92c <atan+0x324>)
 810d7de:	2200      	movs	r2, #0
 810d7e0:	4629      	mov	r1, r5
 810d7e2:	f7f2 fde9 	bl	81003b8 <__aeabi_dsub>
 810d7e6:	4b51      	ldr	r3, [pc, #324]	; (810d92c <atan+0x324>)
 810d7e8:	4606      	mov	r6, r0
 810d7ea:	460f      	mov	r7, r1
 810d7ec:	2200      	movs	r2, #0
 810d7ee:	4620      	mov	r0, r4
 810d7f0:	4629      	mov	r1, r5
 810d7f2:	f7f2 fde3 	bl	81003bc <__adddf3>
 810d7f6:	4602      	mov	r2, r0
 810d7f8:	460b      	mov	r3, r1
 810d7fa:	4630      	mov	r0, r6
 810d7fc:	4639      	mov	r1, r7
 810d7fe:	f7f3 f8bd 	bl	810097c <__aeabi_ddiv>
 810d802:	f04f 0a01 	mov.w	sl, #1
 810d806:	4604      	mov	r4, r0
 810d808:	460d      	mov	r5, r1
 810d80a:	e764      	b.n	810d6d6 <atan+0xce>
 810d80c:	4b49      	ldr	r3, [pc, #292]	; (810d934 <atan+0x32c>)
 810d80e:	429e      	cmp	r6, r3
 810d810:	da1d      	bge.n	810d84e <atan+0x246>
 810d812:	ee10 0a10 	vmov	r0, s0
 810d816:	4b48      	ldr	r3, [pc, #288]	; (810d938 <atan+0x330>)
 810d818:	2200      	movs	r2, #0
 810d81a:	4629      	mov	r1, r5
 810d81c:	f7f2 fdcc 	bl	81003b8 <__aeabi_dsub>
 810d820:	4b45      	ldr	r3, [pc, #276]	; (810d938 <atan+0x330>)
 810d822:	4606      	mov	r6, r0
 810d824:	460f      	mov	r7, r1
 810d826:	2200      	movs	r2, #0
 810d828:	4620      	mov	r0, r4
 810d82a:	4629      	mov	r1, r5
 810d82c:	f7f2 ff7c 	bl	8100728 <__aeabi_dmul>
 810d830:	4b3e      	ldr	r3, [pc, #248]	; (810d92c <atan+0x324>)
 810d832:	2200      	movs	r2, #0
 810d834:	f7f2 fdc2 	bl	81003bc <__adddf3>
 810d838:	4602      	mov	r2, r0
 810d83a:	460b      	mov	r3, r1
 810d83c:	4630      	mov	r0, r6
 810d83e:	4639      	mov	r1, r7
 810d840:	f7f3 f89c 	bl	810097c <__aeabi_ddiv>
 810d844:	f04f 0a02 	mov.w	sl, #2
 810d848:	4604      	mov	r4, r0
 810d84a:	460d      	mov	r5, r1
 810d84c:	e743      	b.n	810d6d6 <atan+0xce>
 810d84e:	462b      	mov	r3, r5
 810d850:	ee10 2a10 	vmov	r2, s0
 810d854:	4939      	ldr	r1, [pc, #228]	; (810d93c <atan+0x334>)
 810d856:	2000      	movs	r0, #0
 810d858:	f7f3 f890 	bl	810097c <__aeabi_ddiv>
 810d85c:	f04f 0a03 	mov.w	sl, #3
 810d860:	4604      	mov	r4, r0
 810d862:	460d      	mov	r5, r1
 810d864:	e737      	b.n	810d6d6 <atan+0xce>
 810d866:	4b36      	ldr	r3, [pc, #216]	; (810d940 <atan+0x338>)
 810d868:	4e36      	ldr	r6, [pc, #216]	; (810d944 <atan+0x33c>)
 810d86a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 810d86e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 810d872:	e9da 2300 	ldrd	r2, r3, [sl]
 810d876:	f7f2 fd9f 	bl	81003b8 <__aeabi_dsub>
 810d87a:	4622      	mov	r2, r4
 810d87c:	462b      	mov	r3, r5
 810d87e:	f7f2 fd9b 	bl	81003b8 <__aeabi_dsub>
 810d882:	4602      	mov	r2, r0
 810d884:	460b      	mov	r3, r1
 810d886:	e9d6 0100 	ldrd	r0, r1, [r6]
 810d88a:	f7f2 fd95 	bl	81003b8 <__aeabi_dsub>
 810d88e:	f1bb 0f00 	cmp.w	fp, #0
 810d892:	4604      	mov	r4, r0
 810d894:	460d      	mov	r5, r1
 810d896:	f6bf aed6 	bge.w	810d646 <atan+0x3e>
 810d89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d89e:	461d      	mov	r5, r3
 810d8a0:	e6d1      	b.n	810d646 <atan+0x3e>
 810d8a2:	a51d      	add	r5, pc, #116	; (adr r5, 810d918 <atan+0x310>)
 810d8a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 810d8a8:	e6cd      	b.n	810d646 <atan+0x3e>
 810d8aa:	bf00      	nop
 810d8ac:	f3af 8000 	nop.w
 810d8b0:	54442d18 	.word	0x54442d18
 810d8b4:	bff921fb 	.word	0xbff921fb
 810d8b8:	8800759c 	.word	0x8800759c
 810d8bc:	7e37e43c 	.word	0x7e37e43c
 810d8c0:	e322da11 	.word	0xe322da11
 810d8c4:	3f90ad3a 	.word	0x3f90ad3a
 810d8c8:	24760deb 	.word	0x24760deb
 810d8cc:	3fa97b4b 	.word	0x3fa97b4b
 810d8d0:	a0d03d51 	.word	0xa0d03d51
 810d8d4:	3fb10d66 	.word	0x3fb10d66
 810d8d8:	c54c206e 	.word	0xc54c206e
 810d8dc:	3fb745cd 	.word	0x3fb745cd
 810d8e0:	920083ff 	.word	0x920083ff
 810d8e4:	3fc24924 	.word	0x3fc24924
 810d8e8:	5555550d 	.word	0x5555550d
 810d8ec:	3fd55555 	.word	0x3fd55555
 810d8f0:	2c6a6c2f 	.word	0x2c6a6c2f
 810d8f4:	bfa2b444 	.word	0xbfa2b444
 810d8f8:	52defd9a 	.word	0x52defd9a
 810d8fc:	3fadde2d 	.word	0x3fadde2d
 810d900:	af749a6d 	.word	0xaf749a6d
 810d904:	3fb3b0f2 	.word	0x3fb3b0f2
 810d908:	fe231671 	.word	0xfe231671
 810d90c:	3fbc71c6 	.word	0x3fbc71c6
 810d910:	9998ebc4 	.word	0x9998ebc4
 810d914:	3fc99999 	.word	0x3fc99999
 810d918:	54442d18 	.word	0x54442d18
 810d91c:	3ff921fb 	.word	0x3ff921fb
 810d920:	440fffff 	.word	0x440fffff
 810d924:	7ff00000 	.word	0x7ff00000
 810d928:	3fdbffff 	.word	0x3fdbffff
 810d92c:	3ff00000 	.word	0x3ff00000
 810d930:	3ff2ffff 	.word	0x3ff2ffff
 810d934:	40038000 	.word	0x40038000
 810d938:	3ff80000 	.word	0x3ff80000
 810d93c:	bff00000 	.word	0xbff00000
 810d940:	0810e0d8 	.word	0x0810e0d8
 810d944:	0810e0b8 	.word	0x0810e0b8

0810d948 <fabs>:
 810d948:	ec51 0b10 	vmov	r0, r1, d0
 810d94c:	ee10 2a10 	vmov	r2, s0
 810d950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d954:	ec43 2b10 	vmov	d0, r2, r3
 810d958:	4770      	bx	lr
	...

0810d95c <_init>:
 810d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d95e:	bf00      	nop
 810d960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d962:	bc08      	pop	{r3}
 810d964:	469e      	mov	lr, r3
 810d966:	4770      	bx	lr

0810d968 <_fini>:
 810d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d96a:	bf00      	nop
 810d96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d96e:	bc08      	pop	{r3}
 810d970:	469e      	mov	lr, r3
 810d972:	4770      	bx	lr
