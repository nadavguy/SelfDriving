
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e94c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0810ebf0  0810ebf0  0001ebf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0810f37c  0810f37c  0001f37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000008  0810f384  0810f384  0001f384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000290  10000000  0810f38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000398  10000290  0810f61c  00020290  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000628  0810f61c  00020628  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810f61c  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00048b09  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007b13  00000000  00000000  00068dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab0  00000000  00000000  000708e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017f0  00000000  00000000  00072390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004622e  00000000  00000000  00073b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b370  00000000  00000000  000b9dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00190c85  00000000  00000000  000e511e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00275da3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000082d8  00000000  00000000  00275df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000290 	.word	0x10000290
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ebd4 	.word	0x0810ebd4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000294 	.word	0x10000294
 81002dc:	0810ebd4 	.word	0x0810ebd4

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_d2lz>:
 8100db8:	b538      	push	{r3, r4, r5, lr}
 8100dba:	2200      	movs	r2, #0
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	460d      	mov	r5, r1
 8100dc2:	f7ff ff23 	bl	8100c0c <__aeabi_dcmplt>
 8100dc6:	b928      	cbnz	r0, 8100dd4 <__aeabi_d2lz+0x1c>
 8100dc8:	4620      	mov	r0, r4
 8100dca:	4629      	mov	r1, r5
 8100dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100dd0:	f000 b80a 	b.w	8100de8 <__aeabi_d2ulz>
 8100dd4:	4620      	mov	r0, r4
 8100dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dda:	f000 f805 	bl	8100de8 <__aeabi_d2ulz>
 8100dde:	4240      	negs	r0, r0
 8100de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100de4:	bd38      	pop	{r3, r4, r5, pc}
 8100de6:	bf00      	nop

08100de8 <__aeabi_d2ulz>:
 8100de8:	b5d0      	push	{r4, r6, r7, lr}
 8100dea:	4b0c      	ldr	r3, [pc, #48]	; (8100e1c <__aeabi_d2ulz+0x34>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	4606      	mov	r6, r0
 8100df0:	460f      	mov	r7, r1
 8100df2:	f7ff fc99 	bl	8100728 <__aeabi_dmul>
 8100df6:	f7ff ff6f 	bl	8100cd8 <__aeabi_d2uiz>
 8100dfa:	4604      	mov	r4, r0
 8100dfc:	f7ff fc1a 	bl	8100634 <__aeabi_ui2d>
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <__aeabi_d2ulz+0x38>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	f7ff fc90 	bl	8100728 <__aeabi_dmul>
 8100e08:	4602      	mov	r2, r0
 8100e0a:	460b      	mov	r3, r1
 8100e0c:	4630      	mov	r0, r6
 8100e0e:	4639      	mov	r1, r7
 8100e10:	f7ff fad2 	bl	81003b8 <__aeabi_dsub>
 8100e14:	f7ff ff60 	bl	8100cd8 <__aeabi_d2uiz>
 8100e18:	4621      	mov	r1, r4
 8100e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e1c:	3df00000 	.word	0x3df00000
 8100e20:	41f00000 	.word	0x41f00000

08100e24 <_ZN13PIDControllerC1Effff>:
{
	// TODO Auto-generated constructor stub
	
}

PIDController::PIDController(float newKi, float newKp, float newKd, float newSP)
 8100e24:	b480      	push	{r7}
 8100e26:	b087      	sub	sp, #28
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	6178      	str	r0, [r7, #20]
 8100e2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8100e30:	edc7 0a03 	vstr	s1, [r7, #12]
 8100e34:	ed87 1a02 	vstr	s2, [r7, #8]
 8100e38:	edc7 1a01 	vstr	s3, [r7, #4]
 8100e3c:	4a0a      	ldr	r2, [pc, #40]	; (8100e68 <_ZN13PIDControllerC1Effff+0x44>)
 8100e3e:	697b      	ldr	r3, [r7, #20]
 8100e40:	601a      	str	r2, [r3, #0]
{
	Ki = newKi;
 8100e42:	697b      	ldr	r3, [r7, #20]
 8100e44:	693a      	ldr	r2, [r7, #16]
 8100e46:	605a      	str	r2, [r3, #4]
	Kp = newKp;
 8100e48:	697b      	ldr	r3, [r7, #20]
 8100e4a:	68fa      	ldr	r2, [r7, #12]
 8100e4c:	609a      	str	r2, [r3, #8]
	Kd = newKd;
 8100e4e:	697b      	ldr	r3, [r7, #20]
 8100e50:	68ba      	ldr	r2, [r7, #8]
 8100e52:	60da      	str	r2, [r3, #12]
	SetPoint = newSP;
 8100e54:	697b      	ldr	r3, [r7, #20]
 8100e56:	687a      	ldr	r2, [r7, #4]
 8100e58:	621a      	str	r2, [r3, #32]
}
 8100e5a:	697b      	ldr	r3, [r7, #20]
 8100e5c:	4618      	mov	r0, r3
 8100e5e:	371c      	adds	r7, #28
 8100e60:	46bd      	mov	sp, r7
 8100e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e66:	4770      	bx	lr
 8100e68:	0810edec 	.word	0x0810edec

08100e6c <_ZN13PIDControllerD1Ev>:

PIDController::~PIDController()
 8100e6c:	b480      	push	{r7}
 8100e6e:	b083      	sub	sp, #12
 8100e70:	af00      	add	r7, sp, #0
 8100e72:	6078      	str	r0, [r7, #4]
 8100e74:	4a04      	ldr	r2, [pc, #16]	; (8100e88 <_ZN13PIDControllerD1Ev+0x1c>)
 8100e76:	687b      	ldr	r3, [r7, #4]
 8100e78:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8100e7a:	687b      	ldr	r3, [r7, #4]
 8100e7c:	4618      	mov	r0, r3
 8100e7e:	370c      	adds	r7, #12
 8100e80:	46bd      	mov	sp, r7
 8100e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e86:	4770      	bx	lr
 8100e88:	0810edec 	.word	0x0810edec

08100e8c <_ZN13PIDControllerD0Ev>:
PIDController::~PIDController()
 8100e8c:	b580      	push	{r7, lr}
 8100e8e:	b082      	sub	sp, #8
 8100e90:	af00      	add	r7, sp, #0
 8100e92:	6078      	str	r0, [r7, #4]
}
 8100e94:	6878      	ldr	r0, [r7, #4]
 8100e96:	f7ff ffe9 	bl	8100e6c <_ZN13PIDControllerD1Ev>
 8100e9a:	2128      	movs	r1, #40	; 0x28
 8100e9c:	6878      	ldr	r0, [r7, #4]
 8100e9e:	f008 fc74 	bl	810978a <_ZdlPvj>
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	4618      	mov	r0, r3
 8100ea6:	3708      	adds	r7, #8
 8100ea8:	46bd      	mov	sp, r7
 8100eaa:	bd80      	pop	{r7, pc}

08100eac <_ZN13PIDController11updateCycleEf>:

int PIDController::updateCycle(float input)
{
 8100eac:	b580      	push	{r7, lr}
 8100eae:	b086      	sub	sp, #24
 8100eb0:	af00      	add	r7, sp, #0
 8100eb2:	6078      	str	r0, [r7, #4]
 8100eb4:	ed87 0a00 	vstr	s0, [r7]
	if (HAL_GetTick() - PreviousTimestamp >= CycleDurationInmSec)
 8100eb8:	f000 fe50 	bl	8101b5c <HAL_GetTick>
 8100ebc:	4602      	mov	r2, r0
 8100ebe:	687b      	ldr	r3, [r7, #4]
 8100ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100ec2:	1ad3      	subs	r3, r2, r3
 8100ec4:	2b31      	cmp	r3, #49	; 0x31
 8100ec6:	bf8c      	ite	hi
 8100ec8:	2301      	movhi	r3, #1
 8100eca:	2300      	movls	r3, #0
 8100ecc:	b2db      	uxtb	r3, r3
 8100ece:	2b00      	cmp	r3, #0
 8100ed0:	d052      	beq.n	8100f78 <_ZN13PIDController11updateCycleEf+0xcc>
	{
		PreviousTimestamp = HAL_GetTick();
 8100ed2:	f000 fe43 	bl	8101b5c <HAL_GetTick>
 8100ed6:	4602      	mov	r2, r0
 8100ed8:	687b      	ldr	r3, [r7, #4]
 8100eda:	625a      	str	r2, [r3, #36]	; 0x24
		CurrentError = SetPoint - input;
 8100edc:	687b      	ldr	r3, [r7, #4]
 8100ede:	ed93 7a08 	vldr	s14, [r3, #32]
 8100ee2:	edd7 7a00 	vldr	s15, [r7]
 8100ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	edc3 7a06 	vstr	s15, [r3, #24]
		float Proportional = CurrentError;
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	699b      	ldr	r3, [r3, #24]
 8100ef4:	617b      	str	r3, [r7, #20]
		float Integral = PreviousIntegral + CurrentError * CycleDurationInmSec;
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	ed93 7a07 	vldr	s14, [r3, #28]
 8100efc:	687b      	ldr	r3, [r7, #4]
 8100efe:	edd3 7a06 	vldr	s15, [r3, #24]
 8100f02:	eddf 6a20 	vldr	s13, [pc, #128]	; 8100f84 <_ZN13PIDController11updateCycleEf+0xd8>
 8100f06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8100f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8100f0e:	edc7 7a04 	vstr	s15, [r7, #16]
		float Derivative = (CurrentError - PreviousError) / CycleDurationInmSec;
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	ed93 7a06 	vldr	s14, [r3, #24]
 8100f18:	687b      	ldr	r3, [r7, #4]
 8100f1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8100f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8100f22:	eddf 6a18 	vldr	s13, [pc, #96]	; 8100f84 <_ZN13PIDController11updateCycleEf+0xd8>
 8100f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8100f2a:	edc7 7a03 	vstr	s15, [r7, #12]
		Output = Kp * Proportional + Ki * Integral + Kd * Derivative;
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	ed93 7a02 	vldr	s14, [r3, #8]
 8100f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8100f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8100f3c:	687b      	ldr	r3, [r7, #4]
 8100f3e:	edd3 6a01 	vldr	s13, [r3, #4]
 8100f42:	edd7 7a04 	vldr	s15, [r7, #16]
 8100f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8100f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8100f4e:	687b      	ldr	r3, [r7, #4]
 8100f50:	edd3 6a03 	vldr	s13, [r3, #12]
 8100f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8100f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8100f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	edc3 7a04 	vstr	s15, [r3, #16]
		PreviousError = CurrentError;
 8100f66:	687b      	ldr	r3, [r7, #4]
 8100f68:	699a      	ldr	r2, [r3, #24]
 8100f6a:	687b      	ldr	r3, [r7, #4]
 8100f6c:	615a      	str	r2, [r3, #20]
		PreviousIntegral = Integral;
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	693a      	ldr	r2, [r7, #16]
 8100f72:	61da      	str	r2, [r3, #28]
		return 0;
 8100f74:	2300      	movs	r3, #0
 8100f76:	e001      	b.n	8100f7c <_ZN13PIDController11updateCycleEf+0xd0>
	}
	return -1;
 8100f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100f7c:	4618      	mov	r0, r3
 8100f7e:	3718      	adds	r7, #24
 8100f80:	46bd      	mov	sp, r7
 8100f82:	bd80      	pop	{r7, pc}
 8100f84:	42480000 	.word	0x42480000

08100f88 <_ZN13PIDController9getOutputEv>:

float PIDController::getOutput()
{
 8100f88:	b480      	push	{r7}
 8100f8a:	b083      	sub	sp, #12
 8100f8c:	af00      	add	r7, sp, #0
 8100f8e:	6078      	str	r0, [r7, #4]
	return Output;
 8100f90:	687b      	ldr	r3, [r7, #4]
 8100f92:	691b      	ldr	r3, [r3, #16]
 8100f94:	ee07 3a90 	vmov	s15, r3
}
 8100f98:	eeb0 0a67 	vmov.f32	s0, s15
 8100f9c:	370c      	adds	r7, #12
 8100f9e:	46bd      	mov	sp, r7
 8100fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fa4:	4770      	bx	lr
	...

08100fa8 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8100fa8:	b580      	push	{r7, lr}
 8100faa:	b086      	sub	sp, #24
 8100fac:	af02      	add	r7, sp, #8
 8100fae:	60f8      	str	r0, [r7, #12]
 8100fb0:	60b9      	str	r1, [r7, #8]
 8100fb2:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8100fb4:	68fb      	ldr	r3, [r7, #12]
 8100fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100fbc:	d101      	bne.n	8100fc2 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8100fbe:	4b09      	ldr	r3, [pc, #36]	; (8100fe4 <rpmsg_send+0x3c>)
 8100fc0:	e00c      	b.n	8100fdc <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8100fc2:	68fb      	ldr	r3, [r7, #12]
 8100fc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8100fc6:	68fb      	ldr	r3, [r7, #12]
 8100fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8100fca:	2301      	movs	r3, #1
 8100fcc:	9301      	str	r3, [sp, #4]
 8100fce:	687b      	ldr	r3, [r7, #4]
 8100fd0:	9300      	str	r3, [sp, #0]
 8100fd2:	68bb      	ldr	r3, [r7, #8]
 8100fd4:	68f8      	ldr	r0, [r7, #12]
 8100fd6:	f005 fe4d 	bl	8106c74 <rpmsg_send_offchannel_raw>
 8100fda:	4603      	mov	r3, r0
					 len, true);
}
 8100fdc:	4618      	mov	r0, r3
 8100fde:	3710      	adds	r7, #16
 8100fe0:	46bd      	mov	sp, r7
 8100fe2:	bd80      	pop	{r7, pc}
 8100fe4:	fffff829 	.word	0xfffff829

08100fe8 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b084      	sub	sp, #16
 8100fec:	af00      	add	r7, sp, #0
 8100fee:	60f8      	str	r0, [r7, #12]
 8100ff0:	60b9      	str	r1, [r7, #8]
 8100ff2:	607a      	str	r2, [r7, #4]
 8100ff4:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8100ff6:	68bb      	ldr	r3, [r7, #8]
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	4a09      	ldr	r2, [pc, #36]	; (8101020 <rpmsg_recv_callback+0x38>)
 8100ffc:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8100ffe:	68bb      	ldr	r3, [r7, #8]
 8101000:	4a08      	ldr	r2, [pc, #32]	; (8101024 <rpmsg_recv_callback+0x3c>)
 8101002:	6013      	str	r3, [r2, #0]
	message_received=1;
 8101004:	4b08      	ldr	r3, [pc, #32]	; (8101028 <rpmsg_recv_callback+0x40>)
 8101006:	2201      	movs	r2, #1
 8101008:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 810100a:	4b05      	ldr	r3, [pc, #20]	; (8101020 <rpmsg_recv_callback+0x38>)
 810100c:	681b      	ldr	r3, [r3, #0]
 810100e:	b2db      	uxtb	r3, r3
 8101010:	4618      	mov	r0, r3
 8101012:	f000 f853 	bl	81010bc <parseRecievedMessages>
	return 0;
 8101016:	2300      	movs	r3, #0
}
 8101018:	4618      	mov	r0, r3
 810101a:	3710      	adds	r7, #16
 810101c:	46bd      	mov	sp, r7
 810101e:	bd80      	pop	{r7, pc}
 8101020:	1000041c 	.word	0x1000041c
 8101024:	100002ac 	.word	0x100002ac
 8101028:	100004b0 	.word	0x100004b0

0810102c <receive_message>:

#ifdef CORE_CM4
unsigned int receive_message(void)
{
 810102c:	b580      	push	{r7, lr}
 810102e:	af00      	add	r7, sp, #0
	while (message_received == 0)
 8101030:	e001      	b.n	8101036 <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8101032:	f008 fb2b 	bl	810968c <OPENAMP_check_for_message>
	while (message_received == 0)
 8101036:	4b05      	ldr	r3, [pc, #20]	; (810104c <receive_message+0x20>)
 8101038:	681b      	ldr	r3, [r3, #0]
 810103a:	2b00      	cmp	r3, #0
 810103c:	d0f9      	beq.n	8101032 <receive_message+0x6>
	}
	message_received = 0;
 810103e:	4b03      	ldr	r3, [pc, #12]	; (810104c <receive_message+0x20>)
 8101040:	2200      	movs	r2, #0
 8101042:	601a      	str	r2, [r3, #0]

	return received_data;
 8101044:	4b02      	ldr	r3, [pc, #8]	; (8101050 <receive_message+0x24>)
 8101046:	681b      	ldr	r3, [r3, #0]
}
 8101048:	4618      	mov	r0, r3
 810104a:	bd80      	pop	{r7, pc}
 810104c:	100004b0 	.word	0x100004b0
 8101050:	1000041c 	.word	0x1000041c

08101054 <sendAnglesToCM7>:

void sendAnglesToCM7(tAHRSDATA chasisAHRS, tAHRSDATA lidarAHRS)
{
 8101054:	b084      	sub	sp, #16
 8101056:	b580      	push	{r7, lr}
 8101058:	b088      	sub	sp, #32
 810105a:	af00      	add	r7, sp, #0
 810105c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8101060:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_GetTick() - lastAnglesSentToCM7Time > 100)
 8101064:	f000 fd7a 	bl	8101b5c <HAL_GetTick>
 8101068:	4602      	mov	r2, r0
 810106a:	4b12      	ldr	r3, [pc, #72]	; (81010b4 <sendAnglesToCM7+0x60>)
 810106c:	681b      	ldr	r3, [r3, #0]
 810106e:	1ad3      	subs	r3, r2, r3
 8101070:	2b64      	cmp	r3, #100	; 0x64
 8101072:	d918      	bls.n	81010a6 <sendAnglesToCM7+0x52>
	{
		tANGLESMESSAGES sentAnglesData;

		sentAnglesData.opCode = 1;
 8101074:	2301      	movs	r3, #1
 8101076:	713b      	strb	r3, [r7, #4]
		sentAnglesData.bodyAngles.Pitch = chasisAHRS.Pitch;
 8101078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810107a:	60fb      	str	r3, [r7, #12]
		sentAnglesData.bodyAngles.Roll = chasisAHRS.Roll;
 810107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810107e:	60bb      	str	r3, [r7, #8]
		sentAnglesData.bodyAngles.Yaw = chasisAHRS.Yaw;
 8101080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101082:	613b      	str	r3, [r7, #16]
		sentAnglesData.lidarAngles.Pitch = lidarAHRS.Pitch;
 8101084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101086:	61bb      	str	r3, [r7, #24]
		sentAnglesData.lidarAngles.Roll = lidarAHRS.Roll;
 8101088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810108a:	617b      	str	r3, [r7, #20]
		sentAnglesData.lidarAngles.Yaw = lidarAHRS.Yaw;
 810108c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 810108e:	61fb      	str	r3, [r7, #28]

		OPENAMP_send(&rp_endpoint,&sentAnglesData, sizeof(sentAnglesData));
 8101090:	1d3b      	adds	r3, r7, #4
 8101092:	221c      	movs	r2, #28
 8101094:	4619      	mov	r1, r3
 8101096:	4808      	ldr	r0, [pc, #32]	; (81010b8 <sendAnglesToCM7+0x64>)
 8101098:	f7ff ff86 	bl	8100fa8 <rpmsg_send>
		lastAnglesSentToCM7Time = HAL_GetTick();
 810109c:	f000 fd5e 	bl	8101b5c <HAL_GetTick>
 81010a0:	4603      	mov	r3, r0
 81010a2:	4a04      	ldr	r2, [pc, #16]	; (81010b4 <sendAnglesToCM7+0x60>)
 81010a4:	6013      	str	r3, [r2, #0]
	}
}
 81010a6:	bf00      	nop
 81010a8:	3720      	adds	r7, #32
 81010aa:	46bd      	mov	sp, r7
 81010ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81010b0:	b004      	add	sp, #16
 81010b2:	4770      	bx	lr
 81010b4:	100002b4 	.word	0x100002b4
 81010b8:	10000470 	.word	0x10000470

081010bc <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 81010bc:	b480      	push	{r7}
 81010be:	b083      	sub	sp, #12
 81010c0:	af00      	add	r7, sp, #0
 81010c2:	4603      	mov	r3, r0
 81010c4:	71fb      	strb	r3, [r7, #7]
		default:
		{

		}
	}
}
 81010c6:	bf00      	nop
 81010c8:	370c      	adds	r7, #12
 81010ca:	46bd      	mov	sp, r7
 81010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010d0:	4770      	bx	lr
	...

081010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010d4:	b480      	push	{r7}
 81010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010d8:	4b0b      	ldr	r3, [pc, #44]	; (8101108 <SystemInit+0x34>)
 81010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81010de:	4a0a      	ldr	r2, [pc, #40]	; (8101108 <SystemInit+0x34>)
 81010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81010e8:	4b07      	ldr	r3, [pc, #28]	; (8101108 <SystemInit+0x34>)
 81010ea:	691b      	ldr	r3, [r3, #16]
 81010ec:	4a06      	ldr	r2, [pc, #24]	; (8101108 <SystemInit+0x34>)
 81010ee:	f043 0310 	orr.w	r3, r3, #16
 81010f2:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81010f4:	4b04      	ldr	r3, [pc, #16]	; (8101108 <SystemInit+0x34>)
 81010f6:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81010fa:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81010fc:	bf00      	nop
 81010fe:	46bd      	mov	sp, r7
 8101100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop
 8101108:	e000ed00 	.word	0xe000ed00

0810110c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 810110c:	b480      	push	{r7}
 810110e:	b083      	sub	sp, #12
 8101110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101112:	4b0a      	ldr	r3, [pc, #40]	; (810113c <MX_DMA_Init+0x30>)
 8101114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101118:	4a08      	ldr	r2, [pc, #32]	; (810113c <MX_DMA_Init+0x30>)
 810111a:	f043 0301 	orr.w	r3, r3, #1
 810111e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101122:	4b06      	ldr	r3, [pc, #24]	; (810113c <MX_DMA_Init+0x30>)
 8101124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101128:	f003 0301 	and.w	r3, r3, #1
 810112c:	607b      	str	r3, [r7, #4]
 810112e:	687b      	ldr	r3, [r7, #4]

}
 8101130:	bf00      	nop
 8101132:	370c      	adds	r7, #12
 8101134:	46bd      	mov	sp, r7
 8101136:	f85d 7b04 	ldr.w	r7, [sp], #4
 810113a:	4770      	bx	lr
 810113c:	58024400 	.word	0x58024400

08101140 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101140:	b480      	push	{r7}
 8101142:	b083      	sub	sp, #12
 8101144:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101146:	4b12      	ldr	r3, [pc, #72]	; (8101190 <MX_GPIO_Init+0x50>)
 8101148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810114c:	4a10      	ldr	r2, [pc, #64]	; (8101190 <MX_GPIO_Init+0x50>)
 810114e:	f043 0301 	orr.w	r3, r3, #1
 8101152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101156:	4b0e      	ldr	r3, [pc, #56]	; (8101190 <MX_GPIO_Init+0x50>)
 8101158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810115c:	f003 0301 	and.w	r3, r3, #1
 8101160:	607b      	str	r3, [r7, #4]
 8101162:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101164:	4b0a      	ldr	r3, [pc, #40]	; (8101190 <MX_GPIO_Init+0x50>)
 8101166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810116a:	4a09      	ldr	r2, [pc, #36]	; (8101190 <MX_GPIO_Init+0x50>)
 810116c:	f043 0302 	orr.w	r3, r3, #2
 8101170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101174:	4b06      	ldr	r3, [pc, #24]	; (8101190 <MX_GPIO_Init+0x50>)
 8101176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810117a:	f003 0302 	and.w	r3, r3, #2
 810117e:	603b      	str	r3, [r7, #0]
 8101180:	683b      	ldr	r3, [r7, #0]

}
 8101182:	bf00      	nop
 8101184:	370c      	adds	r7, #12
 8101186:	46bd      	mov	sp, r7
 8101188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810118c:	4770      	bx	lr
 810118e:	bf00      	nop
 8101190:	58024400 	.word	0x58024400

08101194 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101194:	b580      	push	{r7, lr}
 8101196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8101198:	4b1b      	ldr	r3, [pc, #108]	; (8101208 <MX_I2C2_Init+0x74>)
 810119a:	4a1c      	ldr	r2, [pc, #112]	; (810120c <MX_I2C2_Init+0x78>)
 810119c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 810119e:	4b1a      	ldr	r3, [pc, #104]	; (8101208 <MX_I2C2_Init+0x74>)
 81011a0:	4a1b      	ldr	r2, [pc, #108]	; (8101210 <MX_I2C2_Init+0x7c>)
 81011a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81011a4:	4b18      	ldr	r3, [pc, #96]	; (8101208 <MX_I2C2_Init+0x74>)
 81011a6:	2200      	movs	r2, #0
 81011a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81011aa:	4b17      	ldr	r3, [pc, #92]	; (8101208 <MX_I2C2_Init+0x74>)
 81011ac:	2201      	movs	r2, #1
 81011ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81011b0:	4b15      	ldr	r3, [pc, #84]	; (8101208 <MX_I2C2_Init+0x74>)
 81011b2:	2200      	movs	r2, #0
 81011b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81011b6:	4b14      	ldr	r3, [pc, #80]	; (8101208 <MX_I2C2_Init+0x74>)
 81011b8:	2200      	movs	r2, #0
 81011ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81011bc:	4b12      	ldr	r3, [pc, #72]	; (8101208 <MX_I2C2_Init+0x74>)
 81011be:	2200      	movs	r2, #0
 81011c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81011c2:	4b11      	ldr	r3, [pc, #68]	; (8101208 <MX_I2C2_Init+0x74>)
 81011c4:	2200      	movs	r2, #0
 81011c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81011c8:	4b0f      	ldr	r3, [pc, #60]	; (8101208 <MX_I2C2_Init+0x74>)
 81011ca:	2200      	movs	r2, #0
 81011cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81011ce:	480e      	ldr	r0, [pc, #56]	; (8101208 <MX_I2C2_Init+0x74>)
 81011d0:	f001 f84e 	bl	8102270 <HAL_I2C_Init>
 81011d4:	4603      	mov	r3, r0
 81011d6:	2b00      	cmp	r3, #0
 81011d8:	d001      	beq.n	81011de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81011da:	f000 f9b9 	bl	8101550 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81011de:	2100      	movs	r1, #0
 81011e0:	4809      	ldr	r0, [pc, #36]	; (8101208 <MX_I2C2_Init+0x74>)
 81011e2:	f001 fd39 	bl	8102c58 <HAL_I2CEx_ConfigAnalogFilter>
 81011e6:	4603      	mov	r3, r0
 81011e8:	2b00      	cmp	r3, #0
 81011ea:	d001      	beq.n	81011f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81011ec:	f000 f9b0 	bl	8101550 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81011f0:	2100      	movs	r1, #0
 81011f2:	4805      	ldr	r0, [pc, #20]	; (8101208 <MX_I2C2_Init+0x74>)
 81011f4:	f001 fd7b 	bl	8102cee <HAL_I2CEx_ConfigDigitalFilter>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d001      	beq.n	8101202 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81011fe:	f000 f9a7 	bl	8101550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8101202:	bf00      	nop
 8101204:	bd80      	pop	{r7, pc}
 8101206:	bf00      	nop
 8101208:	100003cc 	.word	0x100003cc
 810120c:	40005800 	.word	0x40005800
 8101210:	00301242 	.word	0x00301242

08101214 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	b0b8      	sub	sp, #224	; 0xe0
 8101218:	af00      	add	r7, sp, #0
 810121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810121c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101220:	2200      	movs	r2, #0
 8101222:	601a      	str	r2, [r3, #0]
 8101224:	605a      	str	r2, [r3, #4]
 8101226:	609a      	str	r2, [r3, #8]
 8101228:	60da      	str	r2, [r3, #12]
 810122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810122c:	f107 0310 	add.w	r3, r7, #16
 8101230:	22bc      	movs	r2, #188	; 0xbc
 8101232:	2100      	movs	r1, #0
 8101234:	4618      	mov	r0, r3
 8101236:	f009 f8df 	bl	810a3f8 <memset>
  if(i2cHandle->Instance==I2C2)
 810123a:	687b      	ldr	r3, [r7, #4]
 810123c:	681b      	ldr	r3, [r3, #0]
 810123e:	4a29      	ldr	r2, [pc, #164]	; (81012e4 <HAL_I2C_MspInit+0xd0>)
 8101240:	4293      	cmp	r3, r2
 8101242:	d14a      	bne.n	81012da <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101244:	2308      	movs	r3, #8
 8101246:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101248:	2300      	movs	r3, #0
 810124a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810124e:	f107 0310 	add.w	r3, r7, #16
 8101252:	4618      	mov	r0, r3
 8101254:	f001 ff9a 	bl	810318c <HAL_RCCEx_PeriphCLKConfig>
 8101258:	4603      	mov	r3, r0
 810125a:	2b00      	cmp	r3, #0
 810125c:	d001      	beq.n	8101262 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 810125e:	f000 f977 	bl	8101550 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101262:	4b21      	ldr	r3, [pc, #132]	; (81012e8 <HAL_I2C_MspInit+0xd4>)
 8101264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101268:	4a1f      	ldr	r2, [pc, #124]	; (81012e8 <HAL_I2C_MspInit+0xd4>)
 810126a:	f043 0302 	orr.w	r3, r3, #2
 810126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101272:	4b1d      	ldr	r3, [pc, #116]	; (81012e8 <HAL_I2C_MspInit+0xd4>)
 8101274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101278:	f003 0302 	and.w	r3, r3, #2
 810127c:	60fb      	str	r3, [r7, #12]
 810127e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL___OLED_Screen_Pin|I2C2_SDA___OLED_Screen_Pin;
 8101280:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101288:	2312      	movs	r3, #18
 810128a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 810128e:	2301      	movs	r3, #1
 8101290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101294:	2300      	movs	r3, #0
 8101296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810129a:	2304      	movs	r3, #4
 810129c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012a4:	4619      	mov	r1, r3
 81012a6:	4811      	ldr	r0, [pc, #68]	; (81012ec <HAL_I2C_MspInit+0xd8>)
 81012a8:	f000 fdd8 	bl	8101e5c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 81012ac:	4b0e      	ldr	r3, [pc, #56]	; (81012e8 <HAL_I2C_MspInit+0xd4>)
 81012ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81012b2:	4a0d      	ldr	r2, [pc, #52]	; (81012e8 <HAL_I2C_MspInit+0xd4>)
 81012b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81012b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81012bc:	4b0a      	ldr	r3, [pc, #40]	; (81012e8 <HAL_I2C_MspInit+0xd4>)
 81012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81012c6:	60bb      	str	r3, [r7, #8]
 81012c8:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 81012ca:	2200      	movs	r2, #0
 81012cc:	2100      	movs	r1, #0
 81012ce:	2021      	movs	r0, #33	; 0x21
 81012d0:	f000 fd6d 	bl	8101dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 81012d4:	2021      	movs	r0, #33	; 0x21
 81012d6:	f000 fd84 	bl	8101de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 81012da:	bf00      	nop
 81012dc:	37e0      	adds	r7, #224	; 0xe0
 81012de:	46bd      	mov	sp, r7
 81012e0:	bd80      	pop	{r7, pc}
 81012e2:	bf00      	nop
 81012e4:	40005800 	.word	0x40005800
 81012e8:	58024400 	.word	0x58024400
 81012ec:	58020400 	.word	0x58020400

081012f0 <rpmsg_send>:
{
 81012f0:	b580      	push	{r7, lr}
 81012f2:	b086      	sub	sp, #24
 81012f4:	af02      	add	r7, sp, #8
 81012f6:	60f8      	str	r0, [r7, #12]
 81012f8:	60b9      	str	r1, [r7, #8]
 81012fa:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81012fc:	68fb      	ldr	r3, [r7, #12]
 81012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101304:	d101      	bne.n	810130a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8101306:	4b09      	ldr	r3, [pc, #36]	; (810132c <rpmsg_send+0x3c>)
 8101308:	e00c      	b.n	8101324 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 810130a:	68fb      	ldr	r3, [r7, #12]
 810130c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 810130e:	68fb      	ldr	r3, [r7, #12]
 8101310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101312:	2301      	movs	r3, #1
 8101314:	9301      	str	r3, [sp, #4]
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	9300      	str	r3, [sp, #0]
 810131a:	68bb      	ldr	r3, [r7, #8]
 810131c:	68f8      	ldr	r0, [r7, #12]
 810131e:	f005 fca9 	bl	8106c74 <rpmsg_send_offchannel_raw>
 8101322:	4603      	mov	r3, r0
}
 8101324:	4618      	mov	r0, r3
 8101326:	3710      	adds	r7, #16
 8101328:	46bd      	mov	sp, r7
 810132a:	bd80      	pop	{r7, pc}
 810132c:	fffff829 	.word	0xfffff829

08101330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101332:	b0a5      	sub	sp, #148	; 0x94
 8101334:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 8101336:	2300      	movs	r3, #0
 8101338:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810133a:	4b78      	ldr	r3, [pc, #480]	; (810151c <main+0x1ec>)
 810133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101340:	4a76      	ldr	r2, [pc, #472]	; (810151c <main+0x1ec>)
 8101342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810134a:	4b74      	ldr	r3, [pc, #464]	; (810151c <main+0x1ec>)
 810134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101354:	603b      	str	r3, [r7, #0]
 8101356:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101358:	2001      	movs	r0, #1
 810135a:	f000 ff5d 	bl	8102218 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810135e:	f001 fd8d 	bl	8102e7c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101362:	2201      	movs	r2, #1
 8101364:	2102      	movs	r1, #2
 8101366:	2000      	movs	r0, #0
 8101368:	f001 fd0e 	bl	8102d88 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810136c:	4b6c      	ldr	r3, [pc, #432]	; (8101520 <main+0x1f0>)
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	091b      	lsrs	r3, r3, #4
 8101372:	f003 030f 	and.w	r3, r3, #15
 8101376:	2b07      	cmp	r3, #7
 8101378:	d108      	bne.n	810138c <main+0x5c>
 810137a:	4b6a      	ldr	r3, [pc, #424]	; (8101524 <main+0x1f4>)
 810137c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101380:	4a68      	ldr	r2, [pc, #416]	; (8101524 <main+0x1f4>)
 8101382:	f043 0301 	orr.w	r3, r3, #1
 8101386:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810138a:	e007      	b.n	810139c <main+0x6c>
 810138c:	4b65      	ldr	r3, [pc, #404]	; (8101524 <main+0x1f4>)
 810138e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101392:	4a64      	ldr	r2, [pc, #400]	; (8101524 <main+0x1f4>)
 8101394:	f043 0301 	orr.w	r3, r3, #1
 8101398:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 810139c:	207e      	movs	r0, #126	; 0x7e
 810139e:	f000 fd3a 	bl	8101e16 <HAL_NVIC_ClearPendingIRQ>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81013a2:	f000 fb33 	bl	8101a0c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81013a6:	f7ff fecb 	bl	8101140 <MX_GPIO_Init>
  MX_DMA_Init();
 81013aa:	f7ff feaf 	bl	810110c <MX_DMA_Init>
  MX_I2C2_Init();
 81013ae:	f7ff fef1 	bl	8101194 <MX_I2C2_Init>
  MX_TIM2_Init();
 81013b2:	f000 fa1b 	bl	81017ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	/* Inilitize the mailbox use notify the other core on new message */
  MAILBOX_Init();
 81013b6:	f007 ffb3 	bl	8109320 <MAILBOX_Init>

  if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 81013ba:	2100      	movs	r1, #0
 81013bc:	2001      	movs	r0, #1
 81013be:	f008 f8b1 	bl	8109524 <MX_OPENAMP_Init>
 81013c2:	4603      	mov	r3, r0
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	d001      	beq.n	81013cc <main+0x9c>
  {
	  Error_Handler();
 81013c8:	f000 f8c2 	bl	8101550 <Error_Handler>
  }

  /* create a endpoint for rmpsg communication */
  status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 81013cc:	2300      	movs	r3, #0
 81013ce:	9300      	str	r3, [sp, #0]
 81013d0:	4b55      	ldr	r3, [pc, #340]	; (8101528 <main+0x1f8>)
 81013d2:	f04f 32ff 	mov.w	r2, #4294967295
 81013d6:	4955      	ldr	r1, [pc, #340]	; (810152c <main+0x1fc>)
 81013d8:	4855      	ldr	r0, [pc, #340]	; (8101530 <main+0x200>)
 81013da:	f008 f939 	bl	8109650 <OPENAMP_create_endpoint>
 81013de:	6078      	str	r0, [r7, #4]
		  rpmsg_recv_callback, NULL);
  if (status < 0)
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	2b00      	cmp	r3, #0
 81013e4:	da17      	bge.n	8101416 <main+0xe6>
  {
	  Error_Handler();
 81013e6:	f000 f8b3 	bl	8101550 <Error_Handler>
  }

  /* Pingpong application*/
  /* Reveice an interger from the master, incremennt it and send back the result to the master*/
  while (message < 100)
 81013ea:	e014      	b.n	8101416 <main+0xe6>
  {
	  message = receive_message();
 81013ec:	f7ff fe1e 	bl	810102c <receive_message>
 81013f0:	4603      	mov	r3, r0
 81013f2:	4a50      	ldr	r2, [pc, #320]	; (8101534 <main+0x204>)
 81013f4:	6013      	str	r3, [r2, #0]
	  message++;
 81013f6:	4b4f      	ldr	r3, [pc, #316]	; (8101534 <main+0x204>)
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	3301      	adds	r3, #1
 81013fc:	4a4d      	ldr	r2, [pc, #308]	; (8101534 <main+0x204>)
 81013fe:	6013      	str	r3, [r2, #0]
	  status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8101400:	2204      	movs	r2, #4
 8101402:	494c      	ldr	r1, [pc, #304]	; (8101534 <main+0x204>)
 8101404:	484a      	ldr	r0, [pc, #296]	; (8101530 <main+0x200>)
 8101406:	f7ff ff73 	bl	81012f0 <rpmsg_send>
 810140a:	6078      	str	r0, [r7, #4]
	  if (status < 0)
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	2b00      	cmp	r3, #0
 8101410:	da01      	bge.n	8101416 <main+0xe6>
	  {
		  Error_Handler();
 8101412:	f000 f89d 	bl	8101550 <Error_Handler>
  while (message < 100)
 8101416:	4b47      	ldr	r3, [pc, #284]	; (8101534 <main+0x204>)
 8101418:	681b      	ldr	r3, [r3, #0]
 810141a:	2b63      	cmp	r3, #99	; 0x63
 810141c:	d9e6      	bls.n	81013ec <main+0xbc>
	  }
  }

	chasisIMU.deviceAddress = 0x68<<1;
 810141e:	4b46      	ldr	r3, [pc, #280]	; (8101538 <main+0x208>)
 8101420:	22d0      	movs	r2, #208	; 0xd0
 8101422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 8101426:	4a44      	ldr	r2, [pc, #272]	; (8101538 <main+0x208>)
 8101428:	4b44      	ldr	r3, [pc, #272]	; (810153c <main+0x20c>)
 810142a:	4610      	mov	r0, r2
 810142c:	4619      	mov	r1, r3
 810142e:	234c      	movs	r3, #76	; 0x4c
 8101430:	461a      	mov	r2, r3
 8101432:	f008 ffd3 	bl	810a3dc <memcpy>
	initMPU(chasisIMU);
 8101436:	4e40      	ldr	r6, [pc, #256]	; (8101538 <main+0x208>)
 8101438:	466d      	mov	r5, sp
 810143a:	f106 0410 	add.w	r4, r6, #16
 810143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810144a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810144e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101452:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101456:	f007 ff2d 	bl	81092b4 <initMPU>

	initAHRS(&chasisIMUAHRS);
 810145a:	4839      	ldr	r0, [pc, #228]	; (8101540 <main+0x210>)
 810145c:	f007 fcd0 	bl	8108e00 <initAHRS>

	initServo(&chasisServo, htim2, TIM_CHANNEL_1, TIM2);
 8101460:	4e38      	ldr	r6, [pc, #224]	; (8101544 <main+0x214>)
 8101462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8101466:	9311      	str	r3, [sp, #68]	; 0x44
 8101468:	2300      	movs	r3, #0
 810146a:	9310      	str	r3, [sp, #64]	; 0x40
 810146c:	466d      	mov	r5, sp
 810146e:	f106 040c 	add.w	r4, r6, #12
 8101472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810147e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101482:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101486:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 810148a:	482f      	ldr	r0, [pc, #188]	; (8101548 <main+0x218>)
 810148c:	f008 f926 	bl	81096dc <initServo>
	initServo(&lidarServo, htim2, TIM_CHANNEL_2, TIM2);
 8101490:	4e2c      	ldr	r6, [pc, #176]	; (8101544 <main+0x214>)
 8101492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8101496:	9311      	str	r3, [sp, #68]	; 0x44
 8101498:	2304      	movs	r3, #4
 810149a:	9310      	str	r3, [sp, #64]	; 0x40
 810149c:	466d      	mov	r5, sp
 810149e:	f106 040c 	add.w	r4, r6, #12
 81014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81014ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81014b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81014b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 81014ba:	4824      	ldr	r0, [pc, #144]	; (810154c <main+0x21c>)
 81014bc:	f008 f90e 	bl	81096dc <initServo>
	startPWM(chasisServo, 1500);
 81014c0:	4c21      	ldr	r4, [pc, #132]	; (8101548 <main+0x218>)
 81014c2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 81014c6:	9311      	str	r3, [sp, #68]	; 0x44
 81014c8:	4668      	mov	r0, sp
 81014ca:	f104 0310 	add.w	r3, r4, #16
 81014ce:	2244      	movs	r2, #68	; 0x44
 81014d0:	4619      	mov	r1, r3
 81014d2:	f008 ff83 	bl	810a3dc <memcpy>
 81014d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81014da:	f008 f91d 	bl	8109718 <startPWM>
  /* USER CODE BEGIN WHILE */


	while (1)
	{
		runAHRSCycle();
 81014de:	f007 fcaf 	bl	8108e40 <runAHRSCycle>
		sendAnglesToCM7(chasisIMUAHRS, chasisIMUAHRS);
 81014e2:	4e17      	ldr	r6, [pc, #92]	; (8101540 <main+0x210>)
 81014e4:	4a16      	ldr	r2, [pc, #88]	; (8101540 <main+0x210>)
 81014e6:	ab0f      	add	r3, sp, #60	; 0x3c
 81014e8:	4611      	mov	r1, r2
 81014ea:	224c      	movs	r2, #76	; 0x4c
 81014ec:	4618      	mov	r0, r3
 81014ee:	f008 ff75 	bl	810a3dc <memcpy>
 81014f2:	466d      	mov	r5, sp
 81014f4:	f106 0410 	add.w	r4, r6, #16
 81014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81014fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101504:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8101508:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 810150c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101510:	f7ff fda0 	bl	8101054 <sendAnglesToCM7>
//		updatePIDs();
		updatePIDs();
 8101514:	f007 fe1a 	bl	810914c <updatePIDs>
		runAHRSCycle();
 8101518:	e7e1      	b.n	81014de <main+0x1ae>
 810151a:	bf00      	nop
 810151c:	58024400 	.word	0x58024400
 8101520:	e000ed00 	.word	0xe000ed00
 8101524:	58026400 	.word	0x58026400
 8101528:	08100fe9 	.word	0x08100fe9
 810152c:	0810ebf0 	.word	0x0810ebf0
 8101530:	10000470 	.word	0x10000470
 8101534:	10000418 	.word	0x10000418
 8101538:	10000420 	.word	0x10000420
 810153c:	100003cc 	.word	0x100003cc
 8101540:	100004b4 	.word	0x100004b4
 8101544:	10000500 	.word	0x10000500
 8101548:	10000570 	.word	0x10000570
 810154c:	100005c4 	.word	0x100005c4

08101550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101550:	b480      	push	{r7}
 8101552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101554:	b672      	cpsid	i
}
 8101556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8101558:	e7fe      	b.n	8101558 <Error_Handler+0x8>
	...

0810155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810155c:	b580      	push	{r7, lr}
 810155e:	b082      	sub	sp, #8
 8101560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101562:	4b15      	ldr	r3, [pc, #84]	; (81015b8 <HAL_MspInit+0x5c>)
 8101564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101568:	4a13      	ldr	r2, [pc, #76]	; (81015b8 <HAL_MspInit+0x5c>)
 810156a:	f043 0302 	orr.w	r3, r3, #2
 810156e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101572:	4b11      	ldr	r3, [pc, #68]	; (81015b8 <HAL_MspInit+0x5c>)
 8101574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101578:	f003 0302 	and.w	r3, r3, #2
 810157c:	607b      	str	r3, [r7, #4]
 810157e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 4, 0);
 8101580:	2200      	movs	r2, #0
 8101582:	2104      	movs	r1, #4
 8101584:	2040      	movs	r0, #64	; 0x40
 8101586:	f000 fc12 	bl	8101dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810158a:	2040      	movs	r0, #64	; 0x40
 810158c:	f000 fc29 	bl	8101de2 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 4, 0);
 8101590:	2200      	movs	r2, #0
 8101592:	2104      	movs	r1, #4
 8101594:	207e      	movs	r0, #126	; 0x7e
 8101596:	f000 fc0a 	bl	8101dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810159a:	207e      	movs	r0, #126	; 0x7e
 810159c:	f000 fc21 	bl	8101de2 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 81015a0:	2200      	movs	r2, #0
 81015a2:	2104      	movs	r1, #4
 81015a4:	2094      	movs	r0, #148	; 0x94
 81015a6:	f000 fc02 	bl	8101dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 81015aa:	2094      	movs	r0, #148	; 0x94
 81015ac:	f000 fc19 	bl	8101de2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81015b0:	bf00      	nop
 81015b2:	3708      	adds	r7, #8
 81015b4:	46bd      	mov	sp, r7
 81015b6:	bd80      	pop	{r7, pc}
 81015b8:	58024400 	.word	0x58024400

081015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81015bc:	b480      	push	{r7}
 81015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81015c0:	e7fe      	b.n	81015c0 <NMI_Handler+0x4>

081015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81015c2:	b480      	push	{r7}
 81015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81015c6:	e7fe      	b.n	81015c6 <HardFault_Handler+0x4>

081015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81015c8:	b480      	push	{r7}
 81015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81015cc:	e7fe      	b.n	81015cc <MemManage_Handler+0x4>

081015ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81015ce:	b480      	push	{r7}
 81015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81015d2:	e7fe      	b.n	81015d2 <BusFault_Handler+0x4>

081015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81015d4:	b480      	push	{r7}
 81015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81015d8:	e7fe      	b.n	81015d8 <UsageFault_Handler+0x4>

081015da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81015da:	b480      	push	{r7}
 81015dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81015de:	bf00      	nop
 81015e0:	46bd      	mov	sp, r7
 81015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e6:	4770      	bx	lr

081015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81015e8:	b480      	push	{r7}
 81015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81015ec:	bf00      	nop
 81015ee:	46bd      	mov	sp, r7
 81015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f4:	4770      	bx	lr

081015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81015f6:	b480      	push	{r7}
 81015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81015fa:	bf00      	nop
 81015fc:	46bd      	mov	sp, r7
 81015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101602:	4770      	bx	lr

08101604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101608:	f000 fa94 	bl	8101b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810160c:	bf00      	nop
 810160e:	bd80      	pop	{r7, pc}

08101610 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8101610:	b580      	push	{r7, lr}
 8101612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8101614:	4802      	ldr	r0, [pc, #8]	; (8101620 <TIM2_IRQHandler+0x10>)
 8101616:	f002 ffbd 	bl	8104594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810161a:	bf00      	nop
 810161c:	bd80      	pop	{r7, pc}
 810161e:	bf00      	nop
 8101620:	10000500 	.word	0x10000500

08101624 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8101624:	b580      	push	{r7, lr}
 8101626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8101628:	4802      	ldr	r0, [pc, #8]	; (8101634 <I2C2_EV_IRQHandler+0x10>)
 810162a:	f001 f8df 	bl	81027ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 810162e:	bf00      	nop
 8101630:	bd80      	pop	{r7, pc}
 8101632:	bf00      	nop
 8101634:	100003cc 	.word	0x100003cc

08101638 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101638:	b480      	push	{r7}
 810163a:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 810163c:	bf00      	nop
 810163e:	46bd      	mov	sp, r7
 8101640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101644:	4770      	bx	lr

08101646 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101646:	b580      	push	{r7, lr}
 8101648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810164a:	f000 fdf7 	bl	810223c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810164e:	bf00      	nop
 8101650:	bd80      	pop	{r7, pc}

08101652 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8101652:	b480      	push	{r7}
 8101654:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8101656:	bf00      	nop
 8101658:	46bd      	mov	sp, r7
 810165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810165e:	4770      	bx	lr

08101660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101660:	b480      	push	{r7}
 8101662:	af00      	add	r7, sp, #0
	return 1;
 8101664:	2301      	movs	r3, #1
}
 8101666:	4618      	mov	r0, r3
 8101668:	46bd      	mov	sp, r7
 810166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166e:	4770      	bx	lr

08101670 <_kill>:

int _kill(int pid, int sig)
{
 8101670:	b580      	push	{r7, lr}
 8101672:	b082      	sub	sp, #8
 8101674:	af00      	add	r7, sp, #0
 8101676:	6078      	str	r0, [r7, #4]
 8101678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810167a:	f008 fe63 	bl	810a344 <__errno>
 810167e:	4603      	mov	r3, r0
 8101680:	2216      	movs	r2, #22
 8101682:	601a      	str	r2, [r3, #0]
	return -1;
 8101684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101688:	4618      	mov	r0, r3
 810168a:	3708      	adds	r7, #8
 810168c:	46bd      	mov	sp, r7
 810168e:	bd80      	pop	{r7, pc}

08101690 <_exit>:

void _exit (int status)
{
 8101690:	b580      	push	{r7, lr}
 8101692:	b082      	sub	sp, #8
 8101694:	af00      	add	r7, sp, #0
 8101696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101698:	f04f 31ff 	mov.w	r1, #4294967295
 810169c:	6878      	ldr	r0, [r7, #4]
 810169e:	f7ff ffe7 	bl	8101670 <_kill>
	while (1) {}		/* Make sure we hang here */
 81016a2:	e7fe      	b.n	81016a2 <_exit+0x12>

081016a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81016a4:	b580      	push	{r7, lr}
 81016a6:	b086      	sub	sp, #24
 81016a8:	af00      	add	r7, sp, #0
 81016aa:	60f8      	str	r0, [r7, #12]
 81016ac:	60b9      	str	r1, [r7, #8]
 81016ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81016b0:	2300      	movs	r3, #0
 81016b2:	617b      	str	r3, [r7, #20]
 81016b4:	e00a      	b.n	81016cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81016b6:	f3af 8000 	nop.w
 81016ba:	4601      	mov	r1, r0
 81016bc:	68bb      	ldr	r3, [r7, #8]
 81016be:	1c5a      	adds	r2, r3, #1
 81016c0:	60ba      	str	r2, [r7, #8]
 81016c2:	b2ca      	uxtb	r2, r1
 81016c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81016c6:	697b      	ldr	r3, [r7, #20]
 81016c8:	3301      	adds	r3, #1
 81016ca:	617b      	str	r3, [r7, #20]
 81016cc:	697a      	ldr	r2, [r7, #20]
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	429a      	cmp	r2, r3
 81016d2:	dbf0      	blt.n	81016b6 <_read+0x12>
	}

return len;
 81016d4:	687b      	ldr	r3, [r7, #4]
}
 81016d6:	4618      	mov	r0, r3
 81016d8:	3718      	adds	r7, #24
 81016da:	46bd      	mov	sp, r7
 81016dc:	bd80      	pop	{r7, pc}

081016de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81016de:	b580      	push	{r7, lr}
 81016e0:	b086      	sub	sp, #24
 81016e2:	af00      	add	r7, sp, #0
 81016e4:	60f8      	str	r0, [r7, #12]
 81016e6:	60b9      	str	r1, [r7, #8]
 81016e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81016ea:	2300      	movs	r3, #0
 81016ec:	617b      	str	r3, [r7, #20]
 81016ee:	e009      	b.n	8101704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81016f0:	68bb      	ldr	r3, [r7, #8]
 81016f2:	1c5a      	adds	r2, r3, #1
 81016f4:	60ba      	str	r2, [r7, #8]
 81016f6:	781b      	ldrb	r3, [r3, #0]
 81016f8:	4618      	mov	r0, r3
 81016fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81016fe:	697b      	ldr	r3, [r7, #20]
 8101700:	3301      	adds	r3, #1
 8101702:	617b      	str	r3, [r7, #20]
 8101704:	697a      	ldr	r2, [r7, #20]
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	429a      	cmp	r2, r3
 810170a:	dbf1      	blt.n	81016f0 <_write+0x12>
	}
	return len;
 810170c:	687b      	ldr	r3, [r7, #4]
}
 810170e:	4618      	mov	r0, r3
 8101710:	3718      	adds	r7, #24
 8101712:	46bd      	mov	sp, r7
 8101714:	bd80      	pop	{r7, pc}

08101716 <_close>:

int _close(int file)
{
 8101716:	b480      	push	{r7}
 8101718:	b083      	sub	sp, #12
 810171a:	af00      	add	r7, sp, #0
 810171c:	6078      	str	r0, [r7, #4]
	return -1;
 810171e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101722:	4618      	mov	r0, r3
 8101724:	370c      	adds	r7, #12
 8101726:	46bd      	mov	sp, r7
 8101728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810172c:	4770      	bx	lr

0810172e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810172e:	b480      	push	{r7}
 8101730:	b083      	sub	sp, #12
 8101732:	af00      	add	r7, sp, #0
 8101734:	6078      	str	r0, [r7, #4]
 8101736:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101738:	683b      	ldr	r3, [r7, #0]
 810173a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810173e:	605a      	str	r2, [r3, #4]
	return 0;
 8101740:	2300      	movs	r3, #0
}
 8101742:	4618      	mov	r0, r3
 8101744:	370c      	adds	r7, #12
 8101746:	46bd      	mov	sp, r7
 8101748:	f85d 7b04 	ldr.w	r7, [sp], #4
 810174c:	4770      	bx	lr

0810174e <_isatty>:

int _isatty(int file)
{
 810174e:	b480      	push	{r7}
 8101750:	b083      	sub	sp, #12
 8101752:	af00      	add	r7, sp, #0
 8101754:	6078      	str	r0, [r7, #4]
	return 1;
 8101756:	2301      	movs	r3, #1
}
 8101758:	4618      	mov	r0, r3
 810175a:	370c      	adds	r7, #12
 810175c:	46bd      	mov	sp, r7
 810175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101762:	4770      	bx	lr

08101764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101764:	b480      	push	{r7}
 8101766:	b085      	sub	sp, #20
 8101768:	af00      	add	r7, sp, #0
 810176a:	60f8      	str	r0, [r7, #12]
 810176c:	60b9      	str	r1, [r7, #8]
 810176e:	607a      	str	r2, [r7, #4]
	return 0;
 8101770:	2300      	movs	r3, #0
}
 8101772:	4618      	mov	r0, r3
 8101774:	3714      	adds	r7, #20
 8101776:	46bd      	mov	sp, r7
 8101778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810177c:	4770      	bx	lr
	...

08101780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101780:	b580      	push	{r7, lr}
 8101782:	b086      	sub	sp, #24
 8101784:	af00      	add	r7, sp, #0
 8101786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101788:	4a14      	ldr	r2, [pc, #80]	; (81017dc <_sbrk+0x5c>)
 810178a:	4b15      	ldr	r3, [pc, #84]	; (81017e0 <_sbrk+0x60>)
 810178c:	1ad3      	subs	r3, r2, r3
 810178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101790:	697b      	ldr	r3, [r7, #20]
 8101792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101794:	4b13      	ldr	r3, [pc, #76]	; (81017e4 <_sbrk+0x64>)
 8101796:	681b      	ldr	r3, [r3, #0]
 8101798:	2b00      	cmp	r3, #0
 810179a:	d102      	bne.n	81017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810179c:	4b11      	ldr	r3, [pc, #68]	; (81017e4 <_sbrk+0x64>)
 810179e:	4a12      	ldr	r2, [pc, #72]	; (81017e8 <_sbrk+0x68>)
 81017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81017a2:	4b10      	ldr	r3, [pc, #64]	; (81017e4 <_sbrk+0x64>)
 81017a4:	681a      	ldr	r2, [r3, #0]
 81017a6:	687b      	ldr	r3, [r7, #4]
 81017a8:	4413      	add	r3, r2
 81017aa:	693a      	ldr	r2, [r7, #16]
 81017ac:	429a      	cmp	r2, r3
 81017ae:	d207      	bcs.n	81017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81017b0:	f008 fdc8 	bl	810a344 <__errno>
 81017b4:	4603      	mov	r3, r0
 81017b6:	220c      	movs	r2, #12
 81017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81017ba:	f04f 33ff 	mov.w	r3, #4294967295
 81017be:	e009      	b.n	81017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81017c0:	4b08      	ldr	r3, [pc, #32]	; (81017e4 <_sbrk+0x64>)
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81017c6:	4b07      	ldr	r3, [pc, #28]	; (81017e4 <_sbrk+0x64>)
 81017c8:	681a      	ldr	r2, [r3, #0]
 81017ca:	687b      	ldr	r3, [r7, #4]
 81017cc:	4413      	add	r3, r2
 81017ce:	4a05      	ldr	r2, [pc, #20]	; (81017e4 <_sbrk+0x64>)
 81017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81017d2:	68fb      	ldr	r3, [r7, #12]
}
 81017d4:	4618      	mov	r0, r3
 81017d6:	3718      	adds	r7, #24
 81017d8:	46bd      	mov	sp, r7
 81017da:	bd80      	pop	{r7, pc}
 81017dc:	10048000 	.word	0x10048000
 81017e0:	00000400 	.word	0x00000400
 81017e4:	100002b8 	.word	0x100002b8
 81017e8:	10000628 	.word	0x10000628

081017ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 81017ec:	b580      	push	{r7, lr}
 81017ee:	b08a      	sub	sp, #40	; 0x28
 81017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81017f2:	f107 031c 	add.w	r3, r7, #28
 81017f6:	2200      	movs	r2, #0
 81017f8:	601a      	str	r2, [r3, #0]
 81017fa:	605a      	str	r2, [r3, #4]
 81017fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81017fe:	463b      	mov	r3, r7
 8101800:	2200      	movs	r2, #0
 8101802:	601a      	str	r2, [r3, #0]
 8101804:	605a      	str	r2, [r3, #4]
 8101806:	609a      	str	r2, [r3, #8]
 8101808:	60da      	str	r2, [r3, #12]
 810180a:	611a      	str	r2, [r3, #16]
 810180c:	615a      	str	r2, [r3, #20]
 810180e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101810:	4b28      	ldr	r3, [pc, #160]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8101818:	4b26      	ldr	r3, [pc, #152]	; (81018b4 <MX_TIM2_Init+0xc8>)
 810181a:	224b      	movs	r2, #75	; 0x4b
 810181c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810181e:	4b25      	ldr	r3, [pc, #148]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101820:	2200      	movs	r2, #0
 8101822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8101824:	4b23      	ldr	r3, [pc, #140]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101826:	f644 6220 	movw	r2, #20000	; 0x4e20
 810182a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810182c:	4b21      	ldr	r3, [pc, #132]	; (81018b4 <MX_TIM2_Init+0xc8>)
 810182e:	2200      	movs	r2, #0
 8101830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8101832:	4b20      	ldr	r3, [pc, #128]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101834:	2280      	movs	r2, #128	; 0x80
 8101836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8101838:	481e      	ldr	r0, [pc, #120]	; (81018b4 <MX_TIM2_Init+0xc8>)
 810183a:	f002 fd4b 	bl	81042d4 <HAL_TIM_PWM_Init>
 810183e:	4603      	mov	r3, r0
 8101840:	2b00      	cmp	r3, #0
 8101842:	d001      	beq.n	8101848 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8101844:	f7ff fe84 	bl	8101550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101848:	2300      	movs	r3, #0
 810184a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810184c:	2300      	movs	r3, #0
 810184e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101850:	f107 031c 	add.w	r3, r7, #28
 8101854:	4619      	mov	r1, r3
 8101856:	4817      	ldr	r0, [pc, #92]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101858:	f003 fc8c 	bl	8105174 <HAL_TIMEx_MasterConfigSynchronization>
 810185c:	4603      	mov	r3, r0
 810185e:	2b00      	cmp	r3, #0
 8101860:	d001      	beq.n	8101866 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8101862:	f7ff fe75 	bl	8101550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101866:	2360      	movs	r3, #96	; 0x60
 8101868:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 810186a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 810186e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101870:	2300      	movs	r3, #0
 8101872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101874:	2300      	movs	r3, #0
 8101876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101878:	463b      	mov	r3, r7
 810187a:	2200      	movs	r2, #0
 810187c:	4619      	mov	r1, r3
 810187e:	480d      	ldr	r0, [pc, #52]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101880:	f002 ffa8 	bl	81047d4 <HAL_TIM_PWM_ConfigChannel>
 8101884:	4603      	mov	r3, r0
 8101886:	2b00      	cmp	r3, #0
 8101888:	d001      	beq.n	810188e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 810188a:	f7ff fe61 	bl	8101550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810188e:	463b      	mov	r3, r7
 8101890:	2204      	movs	r2, #4
 8101892:	4619      	mov	r1, r3
 8101894:	4807      	ldr	r0, [pc, #28]	; (81018b4 <MX_TIM2_Init+0xc8>)
 8101896:	f002 ff9d 	bl	81047d4 <HAL_TIM_PWM_ConfigChannel>
 810189a:	4603      	mov	r3, r0
 810189c:	2b00      	cmp	r3, #0
 810189e:	d001      	beq.n	81018a4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 81018a0:	f7ff fe56 	bl	8101550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 81018a4:	4803      	ldr	r0, [pc, #12]	; (81018b4 <MX_TIM2_Init+0xc8>)
 81018a6:	f000 f82d 	bl	8101904 <HAL_TIM_MspPostInit>

}
 81018aa:	bf00      	nop
 81018ac:	3728      	adds	r7, #40	; 0x28
 81018ae:	46bd      	mov	sp, r7
 81018b0:	bd80      	pop	{r7, pc}
 81018b2:	bf00      	nop
 81018b4:	10000500 	.word	0x10000500

081018b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	b084      	sub	sp, #16
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81018c8:	d116      	bne.n	81018f8 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 81018ca:	4b0d      	ldr	r3, [pc, #52]	; (8101900 <HAL_TIM_PWM_MspInit+0x48>)
 81018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018d0:	4a0b      	ldr	r2, [pc, #44]	; (8101900 <HAL_TIM_PWM_MspInit+0x48>)
 81018d2:	f043 0301 	orr.w	r3, r3, #1
 81018d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81018da:	4b09      	ldr	r3, [pc, #36]	; (8101900 <HAL_TIM_PWM_MspInit+0x48>)
 81018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018e0:	f003 0301 	and.w	r3, r3, #1
 81018e4:	60fb      	str	r3, [r7, #12]
 81018e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 81018e8:	2200      	movs	r2, #0
 81018ea:	2100      	movs	r1, #0
 81018ec:	201c      	movs	r0, #28
 81018ee:	f000 fa5e 	bl	8101dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81018f2:	201c      	movs	r0, #28
 81018f4:	f000 fa75 	bl	8101de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 81018f8:	bf00      	nop
 81018fa:	3710      	adds	r7, #16
 81018fc:	46bd      	mov	sp, r7
 81018fe:	bd80      	pop	{r7, pc}
 8101900:	58024400 	.word	0x58024400

08101904 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101904:	b580      	push	{r7, lr}
 8101906:	b08a      	sub	sp, #40	; 0x28
 8101908:	af00      	add	r7, sp, #0
 810190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810190c:	f107 0314 	add.w	r3, r7, #20
 8101910:	2200      	movs	r2, #0
 8101912:	601a      	str	r2, [r3, #0]
 8101914:	605a      	str	r2, [r3, #4]
 8101916:	609a      	str	r2, [r3, #8]
 8101918:	60da      	str	r2, [r3, #12]
 810191a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101924:	d13d      	bne.n	81019a2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101926:	4b21      	ldr	r3, [pc, #132]	; (81019ac <HAL_TIM_MspPostInit+0xa8>)
 8101928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810192c:	4a1f      	ldr	r2, [pc, #124]	; (81019ac <HAL_TIM_MspPostInit+0xa8>)
 810192e:	f043 0301 	orr.w	r3, r3, #1
 8101932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101936:	4b1d      	ldr	r3, [pc, #116]	; (81019ac <HAL_TIM_MspPostInit+0xa8>)
 8101938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810193c:	f003 0301 	and.w	r3, r3, #1
 8101940:	613b      	str	r3, [r7, #16]
 8101942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101944:	4b19      	ldr	r3, [pc, #100]	; (81019ac <HAL_TIM_MspPostInit+0xa8>)
 8101946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810194a:	4a18      	ldr	r2, [pc, #96]	; (81019ac <HAL_TIM_MspPostInit+0xa8>)
 810194c:	f043 0302 	orr.w	r3, r3, #2
 8101950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101954:	4b15      	ldr	r3, [pc, #84]	; (81019ac <HAL_TIM_MspPostInit+0xa8>)
 8101956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810195a:	f003 0302 	and.w	r3, r3, #2
 810195e:	60fb      	str	r3, [r7, #12]
 8101960:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101962:	2301      	movs	r3, #1
 8101964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101966:	2302      	movs	r3, #2
 8101968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810196a:	2300      	movs	r3, #0
 810196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810196e:	2300      	movs	r3, #0
 8101970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101972:	2301      	movs	r3, #1
 8101974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101976:	f107 0314 	add.w	r3, r7, #20
 810197a:	4619      	mov	r1, r3
 810197c:	480c      	ldr	r0, [pc, #48]	; (81019b0 <HAL_TIM_MspPostInit+0xac>)
 810197e:	f000 fa6d 	bl	8101e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101982:	2308      	movs	r3, #8
 8101984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101986:	2302      	movs	r3, #2
 8101988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810198a:	2300      	movs	r3, #0
 810198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810198e:	2300      	movs	r3, #0
 8101990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101992:	2301      	movs	r3, #1
 8101994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101996:	f107 0314 	add.w	r3, r7, #20
 810199a:	4619      	mov	r1, r3
 810199c:	4805      	ldr	r0, [pc, #20]	; (81019b4 <HAL_TIM_MspPostInit+0xb0>)
 810199e:	f000 fa5d 	bl	8101e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 81019a2:	bf00      	nop
 81019a4:	3728      	adds	r7, #40	; 0x28
 81019a6:	46bd      	mov	sp, r7
 81019a8:	bd80      	pop	{r7, pc}
 81019aa:	bf00      	nop
 81019ac:	58024400 	.word	0x58024400
 81019b0:	58020000 	.word	0x58020000
 81019b4:	58020400 	.word	0x58020400

081019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 81019f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81019bc:	f7ff fb8a 	bl	81010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81019c0:	480c      	ldr	r0, [pc, #48]	; (81019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81019c2:	490d      	ldr	r1, [pc, #52]	; (81019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81019c4:	4a0d      	ldr	r2, [pc, #52]	; (81019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 81019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81019c8:	e002      	b.n	81019d0 <LoopCopyDataInit>

081019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81019ce:	3304      	adds	r3, #4

081019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81019d4:	d3f9      	bcc.n	81019ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81019d6:	4a0a      	ldr	r2, [pc, #40]	; (8101a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81019d8:	4c0a      	ldr	r4, [pc, #40]	; (8101a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 81019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 81019dc:	e001      	b.n	81019e2 <LoopFillZerobss>

081019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81019e0:	3204      	adds	r2, #4

081019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81019e4:	d3fb      	bcc.n	81019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81019e6:	f008 fcc5 	bl	810a374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81019ea:	f7ff fca1 	bl	8101330 <main>
  bx  lr
 81019ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81019f0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81019f4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81019f8:	10000290 	.word	0x10000290
  ldr r2, =_sidata
 81019fc:	0810f38c 	.word	0x0810f38c
  ldr r2, =_sbss
 8101a00:	10000290 	.word	0x10000290
  ldr r4, =_ebss
 8101a04:	10000628 	.word	0x10000628

08101a08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101a08:	e7fe      	b.n	8101a08 <ADC3_IRQHandler>
	...

08101a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101a0c:	b580      	push	{r7, lr}
 8101a0e:	b082      	sub	sp, #8
 8101a10:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101a12:	4b28      	ldr	r3, [pc, #160]	; (8101ab4 <HAL_Init+0xa8>)
 8101a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a18:	4a26      	ldr	r2, [pc, #152]	; (8101ab4 <HAL_Init+0xa8>)
 8101a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101a1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a22:	4b24      	ldr	r3, [pc, #144]	; (8101ab4 <HAL_Init+0xa8>)
 8101a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101a2c:	603b      	str	r3, [r7, #0]
 8101a2e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101a30:	4b21      	ldr	r3, [pc, #132]	; (8101ab8 <HAL_Init+0xac>)
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101a38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101a3c:	4a1e      	ldr	r2, [pc, #120]	; (8101ab8 <HAL_Init+0xac>)
 8101a3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101a42:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101a44:	4b1c      	ldr	r3, [pc, #112]	; (8101ab8 <HAL_Init+0xac>)
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	4a1b      	ldr	r2, [pc, #108]	; (8101ab8 <HAL_Init+0xac>)
 8101a4a:	f043 0301 	orr.w	r3, r3, #1
 8101a4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101a50:	2003      	movs	r0, #3
 8101a52:	f000 f9a1 	bl	8101d98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101a56:	f001 fa1f 	bl	8102e98 <HAL_RCC_GetSysClockFreq>
 8101a5a:	4602      	mov	r2, r0
 8101a5c:	4b15      	ldr	r3, [pc, #84]	; (8101ab4 <HAL_Init+0xa8>)
 8101a5e:	699b      	ldr	r3, [r3, #24]
 8101a60:	0a1b      	lsrs	r3, r3, #8
 8101a62:	f003 030f 	and.w	r3, r3, #15
 8101a66:	4915      	ldr	r1, [pc, #84]	; (8101abc <HAL_Init+0xb0>)
 8101a68:	5ccb      	ldrb	r3, [r1, r3]
 8101a6a:	f003 031f 	and.w	r3, r3, #31
 8101a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8101a72:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a74:	4b0f      	ldr	r3, [pc, #60]	; (8101ab4 <HAL_Init+0xa8>)
 8101a76:	699b      	ldr	r3, [r3, #24]
 8101a78:	f003 030f 	and.w	r3, r3, #15
 8101a7c:	4a0f      	ldr	r2, [pc, #60]	; (8101abc <HAL_Init+0xb0>)
 8101a7e:	5cd3      	ldrb	r3, [r2, r3]
 8101a80:	f003 031f 	and.w	r3, r3, #31
 8101a84:	687a      	ldr	r2, [r7, #4]
 8101a86:	fa22 f303 	lsr.w	r3, r2, r3
 8101a8a:	4a0d      	ldr	r2, [pc, #52]	; (8101ac0 <HAL_Init+0xb4>)
 8101a8c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a8e:	4b0c      	ldr	r3, [pc, #48]	; (8101ac0 <HAL_Init+0xb4>)
 8101a90:	681b      	ldr	r3, [r3, #0]
 8101a92:	4a0c      	ldr	r2, [pc, #48]	; (8101ac4 <HAL_Init+0xb8>)
 8101a94:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101a96:	2000      	movs	r0, #0
 8101a98:	f000 f816 	bl	8101ac8 <HAL_InitTick>
 8101a9c:	4603      	mov	r3, r0
 8101a9e:	2b00      	cmp	r3, #0
 8101aa0:	d001      	beq.n	8101aa6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101aa2:	2301      	movs	r3, #1
 8101aa4:	e002      	b.n	8101aac <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101aa6:	f7ff fd59 	bl	810155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101aaa:	2300      	movs	r3, #0
}
 8101aac:	4618      	mov	r0, r3
 8101aae:	3708      	adds	r7, #8
 8101ab0:	46bd      	mov	sp, r7
 8101ab2:	bd80      	pop	{r7, pc}
 8101ab4:	58024400 	.word	0x58024400
 8101ab8:	40024400 	.word	0x40024400
 8101abc:	0810edf4 	.word	0x0810edf4
 8101ac0:	10000004 	.word	0x10000004
 8101ac4:	10000000 	.word	0x10000000

08101ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101ac8:	b580      	push	{r7, lr}
 8101aca:	b082      	sub	sp, #8
 8101acc:	af00      	add	r7, sp, #0
 8101ace:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101ad0:	4b15      	ldr	r3, [pc, #84]	; (8101b28 <HAL_InitTick+0x60>)
 8101ad2:	781b      	ldrb	r3, [r3, #0]
 8101ad4:	2b00      	cmp	r3, #0
 8101ad6:	d101      	bne.n	8101adc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101ad8:	2301      	movs	r3, #1
 8101ada:	e021      	b.n	8101b20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101adc:	4b13      	ldr	r3, [pc, #76]	; (8101b2c <HAL_InitTick+0x64>)
 8101ade:	681a      	ldr	r2, [r3, #0]
 8101ae0:	4b11      	ldr	r3, [pc, #68]	; (8101b28 <HAL_InitTick+0x60>)
 8101ae2:	781b      	ldrb	r3, [r3, #0]
 8101ae4:	4619      	mov	r1, r3
 8101ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8101aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8101af2:	4618      	mov	r0, r3
 8101af4:	f000 f983 	bl	8101dfe <HAL_SYSTICK_Config>
 8101af8:	4603      	mov	r3, r0
 8101afa:	2b00      	cmp	r3, #0
 8101afc:	d001      	beq.n	8101b02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101afe:	2301      	movs	r3, #1
 8101b00:	e00e      	b.n	8101b20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b02:	687b      	ldr	r3, [r7, #4]
 8101b04:	2b0f      	cmp	r3, #15
 8101b06:	d80a      	bhi.n	8101b1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101b08:	2200      	movs	r2, #0
 8101b0a:	6879      	ldr	r1, [r7, #4]
 8101b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8101b10:	f000 f94d 	bl	8101dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101b14:	4a06      	ldr	r2, [pc, #24]	; (8101b30 <HAL_InitTick+0x68>)
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101b1a:	2300      	movs	r3, #0
 8101b1c:	e000      	b.n	8101b20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101b1e:	2301      	movs	r3, #1
}
 8101b20:	4618      	mov	r0, r3
 8101b22:	3708      	adds	r7, #8
 8101b24:	46bd      	mov	sp, r7
 8101b26:	bd80      	pop	{r7, pc}
 8101b28:	1000000c 	.word	0x1000000c
 8101b2c:	10000000 	.word	0x10000000
 8101b30:	10000008 	.word	0x10000008

08101b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101b34:	b480      	push	{r7}
 8101b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101b38:	4b06      	ldr	r3, [pc, #24]	; (8101b54 <HAL_IncTick+0x20>)
 8101b3a:	781b      	ldrb	r3, [r3, #0]
 8101b3c:	461a      	mov	r2, r3
 8101b3e:	4b06      	ldr	r3, [pc, #24]	; (8101b58 <HAL_IncTick+0x24>)
 8101b40:	681b      	ldr	r3, [r3, #0]
 8101b42:	4413      	add	r3, r2
 8101b44:	4a04      	ldr	r2, [pc, #16]	; (8101b58 <HAL_IncTick+0x24>)
 8101b46:	6013      	str	r3, [r2, #0]
}
 8101b48:	bf00      	nop
 8101b4a:	46bd      	mov	sp, r7
 8101b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b50:	4770      	bx	lr
 8101b52:	bf00      	nop
 8101b54:	1000000c 	.word	0x1000000c
 8101b58:	1000054c 	.word	0x1000054c

08101b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101b5c:	b480      	push	{r7}
 8101b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8101b60:	4b03      	ldr	r3, [pc, #12]	; (8101b70 <HAL_GetTick+0x14>)
 8101b62:	681b      	ldr	r3, [r3, #0]
}
 8101b64:	4618      	mov	r0, r3
 8101b66:	46bd      	mov	sp, r7
 8101b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6c:	4770      	bx	lr
 8101b6e:	bf00      	nop
 8101b70:	1000054c 	.word	0x1000054c

08101b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101b74:	b580      	push	{r7, lr}
 8101b76:	b084      	sub	sp, #16
 8101b78:	af00      	add	r7, sp, #0
 8101b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101b7c:	f7ff ffee 	bl	8101b5c <HAL_GetTick>
 8101b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101b86:	68fb      	ldr	r3, [r7, #12]
 8101b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101b8c:	d005      	beq.n	8101b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101b8e:	4b0a      	ldr	r3, [pc, #40]	; (8101bb8 <HAL_Delay+0x44>)
 8101b90:	781b      	ldrb	r3, [r3, #0]
 8101b92:	461a      	mov	r2, r3
 8101b94:	68fb      	ldr	r3, [r7, #12]
 8101b96:	4413      	add	r3, r2
 8101b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101b9a:	bf00      	nop
 8101b9c:	f7ff ffde 	bl	8101b5c <HAL_GetTick>
 8101ba0:	4602      	mov	r2, r0
 8101ba2:	68bb      	ldr	r3, [r7, #8]
 8101ba4:	1ad3      	subs	r3, r2, r3
 8101ba6:	68fa      	ldr	r2, [r7, #12]
 8101ba8:	429a      	cmp	r2, r3
 8101baa:	d8f7      	bhi.n	8101b9c <HAL_Delay+0x28>
  {
  }
}
 8101bac:	bf00      	nop
 8101bae:	bf00      	nop
 8101bb0:	3710      	adds	r7, #16
 8101bb2:	46bd      	mov	sp, r7
 8101bb4:	bd80      	pop	{r7, pc}
 8101bb6:	bf00      	nop
 8101bb8:	1000000c 	.word	0x1000000c

08101bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101bbc:	b480      	push	{r7}
 8101bbe:	b085      	sub	sp, #20
 8101bc0:	af00      	add	r7, sp, #0
 8101bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	f003 0307 	and.w	r3, r3, #7
 8101bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101bcc:	4b0c      	ldr	r3, [pc, #48]	; (8101c00 <__NVIC_SetPriorityGrouping+0x44>)
 8101bce:	68db      	ldr	r3, [r3, #12]
 8101bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101bd2:	68ba      	ldr	r2, [r7, #8]
 8101bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101bd8:	4013      	ands	r3, r2
 8101bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101bdc:	68fb      	ldr	r3, [r7, #12]
 8101bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101be0:	68bb      	ldr	r3, [r7, #8]
 8101be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101bee:	4a04      	ldr	r2, [pc, #16]	; (8101c00 <__NVIC_SetPriorityGrouping+0x44>)
 8101bf0:	68bb      	ldr	r3, [r7, #8]
 8101bf2:	60d3      	str	r3, [r2, #12]
}
 8101bf4:	bf00      	nop
 8101bf6:	3714      	adds	r7, #20
 8101bf8:	46bd      	mov	sp, r7
 8101bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bfe:	4770      	bx	lr
 8101c00:	e000ed00 	.word	0xe000ed00

08101c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101c04:	b480      	push	{r7}
 8101c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101c08:	4b04      	ldr	r3, [pc, #16]	; (8101c1c <__NVIC_GetPriorityGrouping+0x18>)
 8101c0a:	68db      	ldr	r3, [r3, #12]
 8101c0c:	0a1b      	lsrs	r3, r3, #8
 8101c0e:	f003 0307 	and.w	r3, r3, #7
}
 8101c12:	4618      	mov	r0, r3
 8101c14:	46bd      	mov	sp, r7
 8101c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1a:	4770      	bx	lr
 8101c1c:	e000ed00 	.word	0xe000ed00

08101c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101c20:	b480      	push	{r7}
 8101c22:	b083      	sub	sp, #12
 8101c24:	af00      	add	r7, sp, #0
 8101c26:	4603      	mov	r3, r0
 8101c28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c2e:	2b00      	cmp	r3, #0
 8101c30:	db0b      	blt.n	8101c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101c32:	88fb      	ldrh	r3, [r7, #6]
 8101c34:	f003 021f 	and.w	r2, r3, #31
 8101c38:	4907      	ldr	r1, [pc, #28]	; (8101c58 <__NVIC_EnableIRQ+0x38>)
 8101c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c3e:	095b      	lsrs	r3, r3, #5
 8101c40:	2001      	movs	r0, #1
 8101c42:	fa00 f202 	lsl.w	r2, r0, r2
 8101c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101c4a:	bf00      	nop
 8101c4c:	370c      	adds	r7, #12
 8101c4e:	46bd      	mov	sp, r7
 8101c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c54:	4770      	bx	lr
 8101c56:	bf00      	nop
 8101c58:	e000e100 	.word	0xe000e100

08101c5c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101c5c:	b480      	push	{r7}
 8101c5e:	b083      	sub	sp, #12
 8101c60:	af00      	add	r7, sp, #0
 8101c62:	4603      	mov	r3, r0
 8101c64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	db0c      	blt.n	8101c88 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101c6e:	88fb      	ldrh	r3, [r7, #6]
 8101c70:	f003 021f 	and.w	r2, r3, #31
 8101c74:	4907      	ldr	r1, [pc, #28]	; (8101c94 <__NVIC_ClearPendingIRQ+0x38>)
 8101c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c7a:	095b      	lsrs	r3, r3, #5
 8101c7c:	2001      	movs	r0, #1
 8101c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8101c82:	3360      	adds	r3, #96	; 0x60
 8101c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101c88:	bf00      	nop
 8101c8a:	370c      	adds	r7, #12
 8101c8c:	46bd      	mov	sp, r7
 8101c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c92:	4770      	bx	lr
 8101c94:	e000e100 	.word	0xe000e100

08101c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101c98:	b480      	push	{r7}
 8101c9a:	b083      	sub	sp, #12
 8101c9c:	af00      	add	r7, sp, #0
 8101c9e:	4603      	mov	r3, r0
 8101ca0:	6039      	str	r1, [r7, #0]
 8101ca2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ca8:	2b00      	cmp	r3, #0
 8101caa:	db0a      	blt.n	8101cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cac:	683b      	ldr	r3, [r7, #0]
 8101cae:	b2da      	uxtb	r2, r3
 8101cb0:	490c      	ldr	r1, [pc, #48]	; (8101ce4 <__NVIC_SetPriority+0x4c>)
 8101cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cb6:	0112      	lsls	r2, r2, #4
 8101cb8:	b2d2      	uxtb	r2, r2
 8101cba:	440b      	add	r3, r1
 8101cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101cc0:	e00a      	b.n	8101cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cc2:	683b      	ldr	r3, [r7, #0]
 8101cc4:	b2da      	uxtb	r2, r3
 8101cc6:	4908      	ldr	r1, [pc, #32]	; (8101ce8 <__NVIC_SetPriority+0x50>)
 8101cc8:	88fb      	ldrh	r3, [r7, #6]
 8101cca:	f003 030f 	and.w	r3, r3, #15
 8101cce:	3b04      	subs	r3, #4
 8101cd0:	0112      	lsls	r2, r2, #4
 8101cd2:	b2d2      	uxtb	r2, r2
 8101cd4:	440b      	add	r3, r1
 8101cd6:	761a      	strb	r2, [r3, #24]
}
 8101cd8:	bf00      	nop
 8101cda:	370c      	adds	r7, #12
 8101cdc:	46bd      	mov	sp, r7
 8101cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce2:	4770      	bx	lr
 8101ce4:	e000e100 	.word	0xe000e100
 8101ce8:	e000ed00 	.word	0xe000ed00

08101cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101cec:	b480      	push	{r7}
 8101cee:	b089      	sub	sp, #36	; 0x24
 8101cf0:	af00      	add	r7, sp, #0
 8101cf2:	60f8      	str	r0, [r7, #12]
 8101cf4:	60b9      	str	r1, [r7, #8]
 8101cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101cf8:	68fb      	ldr	r3, [r7, #12]
 8101cfa:	f003 0307 	and.w	r3, r3, #7
 8101cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d00:	69fb      	ldr	r3, [r7, #28]
 8101d02:	f1c3 0307 	rsb	r3, r3, #7
 8101d06:	2b04      	cmp	r3, #4
 8101d08:	bf28      	it	cs
 8101d0a:	2304      	movcs	r3, #4
 8101d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d0e:	69fb      	ldr	r3, [r7, #28]
 8101d10:	3304      	adds	r3, #4
 8101d12:	2b06      	cmp	r3, #6
 8101d14:	d902      	bls.n	8101d1c <NVIC_EncodePriority+0x30>
 8101d16:	69fb      	ldr	r3, [r7, #28]
 8101d18:	3b03      	subs	r3, #3
 8101d1a:	e000      	b.n	8101d1e <NVIC_EncodePriority+0x32>
 8101d1c:	2300      	movs	r3, #0
 8101d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d20:	f04f 32ff 	mov.w	r2, #4294967295
 8101d24:	69bb      	ldr	r3, [r7, #24]
 8101d26:	fa02 f303 	lsl.w	r3, r2, r3
 8101d2a:	43da      	mvns	r2, r3
 8101d2c:	68bb      	ldr	r3, [r7, #8]
 8101d2e:	401a      	ands	r2, r3
 8101d30:	697b      	ldr	r3, [r7, #20]
 8101d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101d34:	f04f 31ff 	mov.w	r1, #4294967295
 8101d38:	697b      	ldr	r3, [r7, #20]
 8101d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8101d3e:	43d9      	mvns	r1, r3
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d44:	4313      	orrs	r3, r2
         );
}
 8101d46:	4618      	mov	r0, r3
 8101d48:	3724      	adds	r7, #36	; 0x24
 8101d4a:	46bd      	mov	sp, r7
 8101d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d50:	4770      	bx	lr
	...

08101d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101d54:	b580      	push	{r7, lr}
 8101d56:	b082      	sub	sp, #8
 8101d58:	af00      	add	r7, sp, #0
 8101d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	3b01      	subs	r3, #1
 8101d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101d64:	d301      	bcc.n	8101d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101d66:	2301      	movs	r3, #1
 8101d68:	e00f      	b.n	8101d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101d6a:	4a0a      	ldr	r2, [pc, #40]	; (8101d94 <SysTick_Config+0x40>)
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	3b01      	subs	r3, #1
 8101d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101d72:	210f      	movs	r1, #15
 8101d74:	f04f 30ff 	mov.w	r0, #4294967295
 8101d78:	f7ff ff8e 	bl	8101c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101d7c:	4b05      	ldr	r3, [pc, #20]	; (8101d94 <SysTick_Config+0x40>)
 8101d7e:	2200      	movs	r2, #0
 8101d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101d82:	4b04      	ldr	r3, [pc, #16]	; (8101d94 <SysTick_Config+0x40>)
 8101d84:	2207      	movs	r2, #7
 8101d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101d88:	2300      	movs	r3, #0
}
 8101d8a:	4618      	mov	r0, r3
 8101d8c:	3708      	adds	r7, #8
 8101d8e:	46bd      	mov	sp, r7
 8101d90:	bd80      	pop	{r7, pc}
 8101d92:	bf00      	nop
 8101d94:	e000e010 	.word	0xe000e010

08101d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101d98:	b580      	push	{r7, lr}
 8101d9a:	b082      	sub	sp, #8
 8101d9c:	af00      	add	r7, sp, #0
 8101d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101da0:	6878      	ldr	r0, [r7, #4]
 8101da2:	f7ff ff0b 	bl	8101bbc <__NVIC_SetPriorityGrouping>
}
 8101da6:	bf00      	nop
 8101da8:	3708      	adds	r7, #8
 8101daa:	46bd      	mov	sp, r7
 8101dac:	bd80      	pop	{r7, pc}

08101dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101dae:	b580      	push	{r7, lr}
 8101db0:	b086      	sub	sp, #24
 8101db2:	af00      	add	r7, sp, #0
 8101db4:	4603      	mov	r3, r0
 8101db6:	60b9      	str	r1, [r7, #8]
 8101db8:	607a      	str	r2, [r7, #4]
 8101dba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101dbc:	f7ff ff22 	bl	8101c04 <__NVIC_GetPriorityGrouping>
 8101dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101dc2:	687a      	ldr	r2, [r7, #4]
 8101dc4:	68b9      	ldr	r1, [r7, #8]
 8101dc6:	6978      	ldr	r0, [r7, #20]
 8101dc8:	f7ff ff90 	bl	8101cec <NVIC_EncodePriority>
 8101dcc:	4602      	mov	r2, r0
 8101dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101dd2:	4611      	mov	r1, r2
 8101dd4:	4618      	mov	r0, r3
 8101dd6:	f7ff ff5f 	bl	8101c98 <__NVIC_SetPriority>
}
 8101dda:	bf00      	nop
 8101ddc:	3718      	adds	r7, #24
 8101dde:	46bd      	mov	sp, r7
 8101de0:	bd80      	pop	{r7, pc}

08101de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101de2:	b580      	push	{r7, lr}
 8101de4:	b082      	sub	sp, #8
 8101de6:	af00      	add	r7, sp, #0
 8101de8:	4603      	mov	r3, r0
 8101dea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101df0:	4618      	mov	r0, r3
 8101df2:	f7ff ff15 	bl	8101c20 <__NVIC_EnableIRQ>
}
 8101df6:	bf00      	nop
 8101df8:	3708      	adds	r7, #8
 8101dfa:	46bd      	mov	sp, r7
 8101dfc:	bd80      	pop	{r7, pc}

08101dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101dfe:	b580      	push	{r7, lr}
 8101e00:	b082      	sub	sp, #8
 8101e02:	af00      	add	r7, sp, #0
 8101e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101e06:	6878      	ldr	r0, [r7, #4]
 8101e08:	f7ff ffa4 	bl	8101d54 <SysTick_Config>
 8101e0c:	4603      	mov	r3, r0
}
 8101e0e:	4618      	mov	r0, r3
 8101e10:	3708      	adds	r7, #8
 8101e12:	46bd      	mov	sp, r7
 8101e14:	bd80      	pop	{r7, pc}

08101e16 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101e16:	b580      	push	{r7, lr}
 8101e18:	b082      	sub	sp, #8
 8101e1a:	af00      	add	r7, sp, #0
 8101e1c:	4603      	mov	r3, r0
 8101e1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8101e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e24:	4618      	mov	r0, r3
 8101e26:	f7ff ff19 	bl	8101c5c <__NVIC_ClearPendingIRQ>
}
 8101e2a:	bf00      	nop
 8101e2c:	3708      	adds	r7, #8
 8101e2e:	46bd      	mov	sp, r7
 8101e30:	bd80      	pop	{r7, pc}
	...

08101e34 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101e34:	b480      	push	{r7}
 8101e36:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101e38:	4b07      	ldr	r3, [pc, #28]	; (8101e58 <HAL_GetCurrentCPUID+0x24>)
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	091b      	lsrs	r3, r3, #4
 8101e3e:	f003 030f 	and.w	r3, r3, #15
 8101e42:	2b07      	cmp	r3, #7
 8101e44:	d101      	bne.n	8101e4a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101e46:	2303      	movs	r3, #3
 8101e48:	e000      	b.n	8101e4c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101e4a:	2301      	movs	r3, #1
  }
}
 8101e4c:	4618      	mov	r0, r3
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e54:	4770      	bx	lr
 8101e56:	bf00      	nop
 8101e58:	e000ed00 	.word	0xe000ed00

08101e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101e5c:	b480      	push	{r7}
 8101e5e:	b089      	sub	sp, #36	; 0x24
 8101e60:	af00      	add	r7, sp, #0
 8101e62:	6078      	str	r0, [r7, #4]
 8101e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101e66:	2300      	movs	r3, #0
 8101e68:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101e6a:	4b89      	ldr	r3, [pc, #548]	; (8102090 <HAL_GPIO_Init+0x234>)
 8101e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101e6e:	e194      	b.n	810219a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101e70:	683b      	ldr	r3, [r7, #0]
 8101e72:	681a      	ldr	r2, [r3, #0]
 8101e74:	2101      	movs	r1, #1
 8101e76:	69fb      	ldr	r3, [r7, #28]
 8101e78:	fa01 f303 	lsl.w	r3, r1, r3
 8101e7c:	4013      	ands	r3, r2
 8101e7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101e80:	693b      	ldr	r3, [r7, #16]
 8101e82:	2b00      	cmp	r3, #0
 8101e84:	f000 8186 	beq.w	8102194 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101e88:	683b      	ldr	r3, [r7, #0]
 8101e8a:	685b      	ldr	r3, [r3, #4]
 8101e8c:	2b01      	cmp	r3, #1
 8101e8e:	d00b      	beq.n	8101ea8 <HAL_GPIO_Init+0x4c>
 8101e90:	683b      	ldr	r3, [r7, #0]
 8101e92:	685b      	ldr	r3, [r3, #4]
 8101e94:	2b02      	cmp	r3, #2
 8101e96:	d007      	beq.n	8101ea8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101e98:	683b      	ldr	r3, [r7, #0]
 8101e9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101e9c:	2b11      	cmp	r3, #17
 8101e9e:	d003      	beq.n	8101ea8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101ea0:	683b      	ldr	r3, [r7, #0]
 8101ea2:	685b      	ldr	r3, [r3, #4]
 8101ea4:	2b12      	cmp	r3, #18
 8101ea6:	d130      	bne.n	8101f0a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	689b      	ldr	r3, [r3, #8]
 8101eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101eae:	69fb      	ldr	r3, [r7, #28]
 8101eb0:	005b      	lsls	r3, r3, #1
 8101eb2:	2203      	movs	r2, #3
 8101eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8101eb8:	43db      	mvns	r3, r3
 8101eba:	69ba      	ldr	r2, [r7, #24]
 8101ebc:	4013      	ands	r3, r2
 8101ebe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101ec0:	683b      	ldr	r3, [r7, #0]
 8101ec2:	68da      	ldr	r2, [r3, #12]
 8101ec4:	69fb      	ldr	r3, [r7, #28]
 8101ec6:	005b      	lsls	r3, r3, #1
 8101ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8101ecc:	69ba      	ldr	r2, [r7, #24]
 8101ece:	4313      	orrs	r3, r2
 8101ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	69ba      	ldr	r2, [r7, #24]
 8101ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	685b      	ldr	r3, [r3, #4]
 8101edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101ede:	2201      	movs	r2, #1
 8101ee0:	69fb      	ldr	r3, [r7, #28]
 8101ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8101ee6:	43db      	mvns	r3, r3
 8101ee8:	69ba      	ldr	r2, [r7, #24]
 8101eea:	4013      	ands	r3, r2
 8101eec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101eee:	683b      	ldr	r3, [r7, #0]
 8101ef0:	685b      	ldr	r3, [r3, #4]
 8101ef2:	091b      	lsrs	r3, r3, #4
 8101ef4:	f003 0201 	and.w	r2, r3, #1
 8101ef8:	69fb      	ldr	r3, [r7, #28]
 8101efa:	fa02 f303 	lsl.w	r3, r2, r3
 8101efe:	69ba      	ldr	r2, [r7, #24]
 8101f00:	4313      	orrs	r3, r2
 8101f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	69ba      	ldr	r2, [r7, #24]
 8101f08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	68db      	ldr	r3, [r3, #12]
 8101f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101f10:	69fb      	ldr	r3, [r7, #28]
 8101f12:	005b      	lsls	r3, r3, #1
 8101f14:	2203      	movs	r2, #3
 8101f16:	fa02 f303 	lsl.w	r3, r2, r3
 8101f1a:	43db      	mvns	r3, r3
 8101f1c:	69ba      	ldr	r2, [r7, #24]
 8101f1e:	4013      	ands	r3, r2
 8101f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101f22:	683b      	ldr	r3, [r7, #0]
 8101f24:	689a      	ldr	r2, [r3, #8]
 8101f26:	69fb      	ldr	r3, [r7, #28]
 8101f28:	005b      	lsls	r3, r3, #1
 8101f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8101f2e:	69ba      	ldr	r2, [r7, #24]
 8101f30:	4313      	orrs	r3, r2
 8101f32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	69ba      	ldr	r2, [r7, #24]
 8101f38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101f3a:	683b      	ldr	r3, [r7, #0]
 8101f3c:	685b      	ldr	r3, [r3, #4]
 8101f3e:	2b02      	cmp	r3, #2
 8101f40:	d003      	beq.n	8101f4a <HAL_GPIO_Init+0xee>
 8101f42:	683b      	ldr	r3, [r7, #0]
 8101f44:	685b      	ldr	r3, [r3, #4]
 8101f46:	2b12      	cmp	r3, #18
 8101f48:	d123      	bne.n	8101f92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101f4a:	69fb      	ldr	r3, [r7, #28]
 8101f4c:	08da      	lsrs	r2, r3, #3
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	3208      	adds	r2, #8
 8101f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101f58:	69fb      	ldr	r3, [r7, #28]
 8101f5a:	f003 0307 	and.w	r3, r3, #7
 8101f5e:	009b      	lsls	r3, r3, #2
 8101f60:	220f      	movs	r2, #15
 8101f62:	fa02 f303 	lsl.w	r3, r2, r3
 8101f66:	43db      	mvns	r3, r3
 8101f68:	69ba      	ldr	r2, [r7, #24]
 8101f6a:	4013      	ands	r3, r2
 8101f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101f6e:	683b      	ldr	r3, [r7, #0]
 8101f70:	691a      	ldr	r2, [r3, #16]
 8101f72:	69fb      	ldr	r3, [r7, #28]
 8101f74:	f003 0307 	and.w	r3, r3, #7
 8101f78:	009b      	lsls	r3, r3, #2
 8101f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8101f7e:	69ba      	ldr	r2, [r7, #24]
 8101f80:	4313      	orrs	r3, r2
 8101f82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101f84:	69fb      	ldr	r3, [r7, #28]
 8101f86:	08da      	lsrs	r2, r3, #3
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	3208      	adds	r2, #8
 8101f8c:	69b9      	ldr	r1, [r7, #24]
 8101f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101f98:	69fb      	ldr	r3, [r7, #28]
 8101f9a:	005b      	lsls	r3, r3, #1
 8101f9c:	2203      	movs	r2, #3
 8101f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8101fa2:	43db      	mvns	r3, r3
 8101fa4:	69ba      	ldr	r2, [r7, #24]
 8101fa6:	4013      	ands	r3, r2
 8101fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101faa:	683b      	ldr	r3, [r7, #0]
 8101fac:	685b      	ldr	r3, [r3, #4]
 8101fae:	f003 0203 	and.w	r2, r3, #3
 8101fb2:	69fb      	ldr	r3, [r7, #28]
 8101fb4:	005b      	lsls	r3, r3, #1
 8101fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8101fba:	69ba      	ldr	r2, [r7, #24]
 8101fbc:	4313      	orrs	r3, r2
 8101fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	69ba      	ldr	r2, [r7, #24]
 8101fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101fc6:	683b      	ldr	r3, [r7, #0]
 8101fc8:	685b      	ldr	r3, [r3, #4]
 8101fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101fce:	2b00      	cmp	r3, #0
 8101fd0:	f000 80e0 	beq.w	8102194 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101fd4:	4b2f      	ldr	r3, [pc, #188]	; (8102094 <HAL_GPIO_Init+0x238>)
 8101fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fda:	4a2e      	ldr	r2, [pc, #184]	; (8102094 <HAL_GPIO_Init+0x238>)
 8101fdc:	f043 0302 	orr.w	r3, r3, #2
 8101fe0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101fe4:	4b2b      	ldr	r3, [pc, #172]	; (8102094 <HAL_GPIO_Init+0x238>)
 8101fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fea:	f003 0302 	and.w	r3, r3, #2
 8101fee:	60fb      	str	r3, [r7, #12]
 8101ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101ff2:	4a29      	ldr	r2, [pc, #164]	; (8102098 <HAL_GPIO_Init+0x23c>)
 8101ff4:	69fb      	ldr	r3, [r7, #28]
 8101ff6:	089b      	lsrs	r3, r3, #2
 8101ff8:	3302      	adds	r3, #2
 8101ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102000:	69fb      	ldr	r3, [r7, #28]
 8102002:	f003 0303 	and.w	r3, r3, #3
 8102006:	009b      	lsls	r3, r3, #2
 8102008:	220f      	movs	r2, #15
 810200a:	fa02 f303 	lsl.w	r3, r2, r3
 810200e:	43db      	mvns	r3, r3
 8102010:	69ba      	ldr	r2, [r7, #24]
 8102012:	4013      	ands	r3, r2
 8102014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	4a20      	ldr	r2, [pc, #128]	; (810209c <HAL_GPIO_Init+0x240>)
 810201a:	4293      	cmp	r3, r2
 810201c:	d052      	beq.n	81020c4 <HAL_GPIO_Init+0x268>
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	4a1f      	ldr	r2, [pc, #124]	; (81020a0 <HAL_GPIO_Init+0x244>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d031      	beq.n	810208a <HAL_GPIO_Init+0x22e>
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	4a1e      	ldr	r2, [pc, #120]	; (81020a4 <HAL_GPIO_Init+0x248>)
 810202a:	4293      	cmp	r3, r2
 810202c:	d02b      	beq.n	8102086 <HAL_GPIO_Init+0x22a>
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	4a1d      	ldr	r2, [pc, #116]	; (81020a8 <HAL_GPIO_Init+0x24c>)
 8102032:	4293      	cmp	r3, r2
 8102034:	d025      	beq.n	8102082 <HAL_GPIO_Init+0x226>
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	4a1c      	ldr	r2, [pc, #112]	; (81020ac <HAL_GPIO_Init+0x250>)
 810203a:	4293      	cmp	r3, r2
 810203c:	d01f      	beq.n	810207e <HAL_GPIO_Init+0x222>
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	4a1b      	ldr	r2, [pc, #108]	; (81020b0 <HAL_GPIO_Init+0x254>)
 8102042:	4293      	cmp	r3, r2
 8102044:	d019      	beq.n	810207a <HAL_GPIO_Init+0x21e>
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	4a1a      	ldr	r2, [pc, #104]	; (81020b4 <HAL_GPIO_Init+0x258>)
 810204a:	4293      	cmp	r3, r2
 810204c:	d013      	beq.n	8102076 <HAL_GPIO_Init+0x21a>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	4a19      	ldr	r2, [pc, #100]	; (81020b8 <HAL_GPIO_Init+0x25c>)
 8102052:	4293      	cmp	r3, r2
 8102054:	d00d      	beq.n	8102072 <HAL_GPIO_Init+0x216>
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	4a18      	ldr	r2, [pc, #96]	; (81020bc <HAL_GPIO_Init+0x260>)
 810205a:	4293      	cmp	r3, r2
 810205c:	d007      	beq.n	810206e <HAL_GPIO_Init+0x212>
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	4a17      	ldr	r2, [pc, #92]	; (81020c0 <HAL_GPIO_Init+0x264>)
 8102062:	4293      	cmp	r3, r2
 8102064:	d101      	bne.n	810206a <HAL_GPIO_Init+0x20e>
 8102066:	2309      	movs	r3, #9
 8102068:	e02d      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 810206a:	230a      	movs	r3, #10
 810206c:	e02b      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 810206e:	2308      	movs	r3, #8
 8102070:	e029      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 8102072:	2307      	movs	r3, #7
 8102074:	e027      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 8102076:	2306      	movs	r3, #6
 8102078:	e025      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 810207a:	2305      	movs	r3, #5
 810207c:	e023      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 810207e:	2304      	movs	r3, #4
 8102080:	e021      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 8102082:	2303      	movs	r3, #3
 8102084:	e01f      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 8102086:	2302      	movs	r3, #2
 8102088:	e01d      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 810208a:	2301      	movs	r3, #1
 810208c:	e01b      	b.n	81020c6 <HAL_GPIO_Init+0x26a>
 810208e:	bf00      	nop
 8102090:	580000c0 	.word	0x580000c0
 8102094:	58024400 	.word	0x58024400
 8102098:	58000400 	.word	0x58000400
 810209c:	58020000 	.word	0x58020000
 81020a0:	58020400 	.word	0x58020400
 81020a4:	58020800 	.word	0x58020800
 81020a8:	58020c00 	.word	0x58020c00
 81020ac:	58021000 	.word	0x58021000
 81020b0:	58021400 	.word	0x58021400
 81020b4:	58021800 	.word	0x58021800
 81020b8:	58021c00 	.word	0x58021c00
 81020bc:	58022000 	.word	0x58022000
 81020c0:	58022400 	.word	0x58022400
 81020c4:	2300      	movs	r3, #0
 81020c6:	69fa      	ldr	r2, [r7, #28]
 81020c8:	f002 0203 	and.w	r2, r2, #3
 81020cc:	0092      	lsls	r2, r2, #2
 81020ce:	4093      	lsls	r3, r2
 81020d0:	69ba      	ldr	r2, [r7, #24]
 81020d2:	4313      	orrs	r3, r2
 81020d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81020d6:	4938      	ldr	r1, [pc, #224]	; (81021b8 <HAL_GPIO_Init+0x35c>)
 81020d8:	69fb      	ldr	r3, [r7, #28]
 81020da:	089b      	lsrs	r3, r3, #2
 81020dc:	3302      	adds	r3, #2
 81020de:	69ba      	ldr	r2, [r7, #24]
 81020e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81020e4:	697b      	ldr	r3, [r7, #20]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81020ea:	693b      	ldr	r3, [r7, #16]
 81020ec:	43db      	mvns	r3, r3
 81020ee:	69ba      	ldr	r2, [r7, #24]
 81020f0:	4013      	ands	r3, r2
 81020f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81020f4:	683b      	ldr	r3, [r7, #0]
 81020f6:	685b      	ldr	r3, [r3, #4]
 81020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81020fc:	2b00      	cmp	r3, #0
 81020fe:	d003      	beq.n	8102108 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8102100:	69ba      	ldr	r2, [r7, #24]
 8102102:	693b      	ldr	r3, [r7, #16]
 8102104:	4313      	orrs	r3, r2
 8102106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102108:	697b      	ldr	r3, [r7, #20]
 810210a:	69ba      	ldr	r2, [r7, #24]
 810210c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810210e:	697b      	ldr	r3, [r7, #20]
 8102110:	685b      	ldr	r3, [r3, #4]
 8102112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102114:	693b      	ldr	r3, [r7, #16]
 8102116:	43db      	mvns	r3, r3
 8102118:	69ba      	ldr	r2, [r7, #24]
 810211a:	4013      	ands	r3, r2
 810211c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810211e:	683b      	ldr	r3, [r7, #0]
 8102120:	685b      	ldr	r3, [r3, #4]
 8102122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102126:	2b00      	cmp	r3, #0
 8102128:	d003      	beq.n	8102132 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810212a:	69ba      	ldr	r2, [r7, #24]
 810212c:	693b      	ldr	r3, [r7, #16]
 810212e:	4313      	orrs	r3, r2
 8102130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102132:	697b      	ldr	r3, [r7, #20]
 8102134:	69ba      	ldr	r2, [r7, #24]
 8102136:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102140:	693b      	ldr	r3, [r7, #16]
 8102142:	43db      	mvns	r3, r3
 8102144:	69ba      	ldr	r2, [r7, #24]
 8102146:	4013      	ands	r3, r2
 8102148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810214a:	683b      	ldr	r3, [r7, #0]
 810214c:	685b      	ldr	r3, [r3, #4]
 810214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102152:	2b00      	cmp	r3, #0
 8102154:	d003      	beq.n	810215e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8102156:	69ba      	ldr	r2, [r7, #24]
 8102158:	693b      	ldr	r3, [r7, #16]
 810215a:	4313      	orrs	r3, r2
 810215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810215e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102162:	69bb      	ldr	r3, [r7, #24]
 8102164:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810216a:	685b      	ldr	r3, [r3, #4]
 810216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810216e:	693b      	ldr	r3, [r7, #16]
 8102170:	43db      	mvns	r3, r3
 8102172:	69ba      	ldr	r2, [r7, #24]
 8102174:	4013      	ands	r3, r2
 8102176:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8102178:	683b      	ldr	r3, [r7, #0]
 810217a:	685b      	ldr	r3, [r3, #4]
 810217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102180:	2b00      	cmp	r3, #0
 8102182:	d003      	beq.n	810218c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8102184:	69ba      	ldr	r2, [r7, #24]
 8102186:	693b      	ldr	r3, [r7, #16]
 8102188:	4313      	orrs	r3, r2
 810218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810218c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102190:	69bb      	ldr	r3, [r7, #24]
 8102192:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8102194:	69fb      	ldr	r3, [r7, #28]
 8102196:	3301      	adds	r3, #1
 8102198:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810219a:	683b      	ldr	r3, [r7, #0]
 810219c:	681a      	ldr	r2, [r3, #0]
 810219e:	69fb      	ldr	r3, [r7, #28]
 81021a0:	fa22 f303 	lsr.w	r3, r2, r3
 81021a4:	2b00      	cmp	r3, #0
 81021a6:	f47f ae63 	bne.w	8101e70 <HAL_GPIO_Init+0x14>
  }
}
 81021aa:	bf00      	nop
 81021ac:	bf00      	nop
 81021ae:	3724      	adds	r7, #36	; 0x24
 81021b0:	46bd      	mov	sp, r7
 81021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b6:	4770      	bx	lr
 81021b8:	58000400 	.word	0x58000400

081021bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81021bc:	b480      	push	{r7}
 81021be:	b083      	sub	sp, #12
 81021c0:	af00      	add	r7, sp, #0
 81021c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81021c4:	4a08      	ldr	r2, [pc, #32]	; (81021e8 <HAL_HSEM_FastTake+0x2c>)
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	3320      	adds	r3, #32
 81021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81021ce:	4a07      	ldr	r2, [pc, #28]	; (81021ec <HAL_HSEM_FastTake+0x30>)
 81021d0:	4293      	cmp	r3, r2
 81021d2:	d101      	bne.n	81021d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81021d4:	2300      	movs	r3, #0
 81021d6:	e000      	b.n	81021da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81021d8:	2301      	movs	r3, #1
}
 81021da:	4618      	mov	r0, r3
 81021dc:	370c      	adds	r7, #12
 81021de:	46bd      	mov	sp, r7
 81021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021e4:	4770      	bx	lr
 81021e6:	bf00      	nop
 81021e8:	58026400 	.word	0x58026400
 81021ec:	80000100 	.word	0x80000100

081021f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81021f0:	b480      	push	{r7}
 81021f2:	b083      	sub	sp, #12
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	6078      	str	r0, [r7, #4]
 81021f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81021fa:	4906      	ldr	r1, [pc, #24]	; (8102214 <HAL_HSEM_Release+0x24>)
 81021fc:	683b      	ldr	r3, [r7, #0]
 81021fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8102208:	bf00      	nop
 810220a:	370c      	adds	r7, #12
 810220c:	46bd      	mov	sp, r7
 810220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102212:	4770      	bx	lr
 8102214:	58026400 	.word	0x58026400

08102218 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102218:	b480      	push	{r7}
 810221a:	b083      	sub	sp, #12
 810221c:	af00      	add	r7, sp, #0
 810221e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102220:	4b05      	ldr	r3, [pc, #20]	; (8102238 <HAL_HSEM_ActivateNotification+0x20>)
 8102222:	681a      	ldr	r2, [r3, #0]
 8102224:	4904      	ldr	r1, [pc, #16]	; (8102238 <HAL_HSEM_ActivateNotification+0x20>)
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	4313      	orrs	r3, r2
 810222a:	600b      	str	r3, [r1, #0]
#endif
}
 810222c:	bf00      	nop
 810222e:	370c      	adds	r7, #12
 8102230:	46bd      	mov	sp, r7
 8102232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102236:	4770      	bx	lr
 8102238:	58026510 	.word	0x58026510

0810223c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810223c:	b580      	push	{r7, lr}
 810223e:	b082      	sub	sp, #8
 8102240:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8102242:	4b0a      	ldr	r3, [pc, #40]	; (810226c <HAL_HSEM_IRQHandler+0x30>)
 8102244:	68db      	ldr	r3, [r3, #12]
 8102246:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8102248:	4b08      	ldr	r3, [pc, #32]	; (810226c <HAL_HSEM_IRQHandler+0x30>)
 810224a:	681a      	ldr	r2, [r3, #0]
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	43db      	mvns	r3, r3
 8102250:	4906      	ldr	r1, [pc, #24]	; (810226c <HAL_HSEM_IRQHandler+0x30>)
 8102252:	4013      	ands	r3, r2
 8102254:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8102256:	4a05      	ldr	r2, [pc, #20]	; (810226c <HAL_HSEM_IRQHandler+0x30>)
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810225c:	6878      	ldr	r0, [r7, #4]
 810225e:	f007 f84f 	bl	8109300 <HAL_HSEM_FreeCallback>
}
 8102262:	bf00      	nop
 8102264:	3708      	adds	r7, #8
 8102266:	46bd      	mov	sp, r7
 8102268:	bd80      	pop	{r7, pc}
 810226a:	bf00      	nop
 810226c:	58026510 	.word	0x58026510

08102270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102270:	b580      	push	{r7, lr}
 8102272:	b082      	sub	sp, #8
 8102274:	af00      	add	r7, sp, #0
 8102276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	2b00      	cmp	r3, #0
 810227c:	d101      	bne.n	8102282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810227e:	2301      	movs	r3, #1
 8102280:	e081      	b.n	8102386 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102288:	b2db      	uxtb	r3, r3
 810228a:	2b00      	cmp	r3, #0
 810228c:	d106      	bne.n	810229c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	2200      	movs	r2, #0
 8102292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102296:	6878      	ldr	r0, [r7, #4]
 8102298:	f7fe ffbc 	bl	8101214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	2224      	movs	r2, #36	; 0x24
 81022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	681a      	ldr	r2, [r3, #0]
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	f022 0201 	bic.w	r2, r2, #1
 81022b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	685a      	ldr	r2, [r3, #4]
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81022c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	689a      	ldr	r2, [r3, #8]
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81022d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	68db      	ldr	r3, [r3, #12]
 81022d6:	2b01      	cmp	r3, #1
 81022d8:	d107      	bne.n	81022ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	689a      	ldr	r2, [r3, #8]
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	681b      	ldr	r3, [r3, #0]
 81022e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81022e6:	609a      	str	r2, [r3, #8]
 81022e8:	e006      	b.n	81022f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	689a      	ldr	r2, [r3, #8]
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81022f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	68db      	ldr	r3, [r3, #12]
 81022fc:	2b02      	cmp	r3, #2
 81022fe:	d104      	bne.n	810230a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	685b      	ldr	r3, [r3, #4]
 8102310:	687a      	ldr	r2, [r7, #4]
 8102312:	6812      	ldr	r2, [r2, #0]
 8102314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810231c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	68da      	ldr	r2, [r3, #12]
 8102324:	687b      	ldr	r3, [r7, #4]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810232c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	691a      	ldr	r2, [r3, #16]
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	695b      	ldr	r3, [r3, #20]
 8102336:	ea42 0103 	orr.w	r1, r2, r3
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	699b      	ldr	r3, [r3, #24]
 810233e:	021a      	lsls	r2, r3, #8
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	430a      	orrs	r2, r1
 8102346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	69d9      	ldr	r1, [r3, #28]
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	6a1a      	ldr	r2, [r3, #32]
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	430a      	orrs	r2, r1
 8102356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	681a      	ldr	r2, [r3, #0]
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	f042 0201 	orr.w	r2, r2, #1
 8102366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	2200      	movs	r2, #0
 810236c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	2220      	movs	r2, #32
 8102372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	2200      	movs	r2, #0
 810237a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	2200      	movs	r2, #0
 8102380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102384:	2300      	movs	r3, #0
}
 8102386:	4618      	mov	r0, r3
 8102388:	3708      	adds	r7, #8
 810238a:	46bd      	mov	sp, r7
 810238c:	bd80      	pop	{r7, pc}
	...

08102390 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102390:	b580      	push	{r7, lr}
 8102392:	b088      	sub	sp, #32
 8102394:	af02      	add	r7, sp, #8
 8102396:	60f8      	str	r0, [r7, #12]
 8102398:	4608      	mov	r0, r1
 810239a:	4611      	mov	r1, r2
 810239c:	461a      	mov	r2, r3
 810239e:	4603      	mov	r3, r0
 81023a0:	817b      	strh	r3, [r7, #10]
 81023a2:	460b      	mov	r3, r1
 81023a4:	813b      	strh	r3, [r7, #8]
 81023a6:	4613      	mov	r3, r2
 81023a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81023aa:	68fb      	ldr	r3, [r7, #12]
 81023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81023b0:	b2db      	uxtb	r3, r3
 81023b2:	2b20      	cmp	r3, #32
 81023b4:	f040 80f9 	bne.w	81025aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81023b8:	6a3b      	ldr	r3, [r7, #32]
 81023ba:	2b00      	cmp	r3, #0
 81023bc:	d002      	beq.n	81023c4 <HAL_I2C_Mem_Write+0x34>
 81023be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81023c0:	2b00      	cmp	r3, #0
 81023c2:	d105      	bne.n	81023d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81023c4:	68fb      	ldr	r3, [r7, #12]
 81023c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81023ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81023cc:	2301      	movs	r3, #1
 81023ce:	e0ed      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81023d0:	68fb      	ldr	r3, [r7, #12]
 81023d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81023d6:	2b01      	cmp	r3, #1
 81023d8:	d101      	bne.n	81023de <HAL_I2C_Mem_Write+0x4e>
 81023da:	2302      	movs	r3, #2
 81023dc:	e0e6      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
 81023de:	68fb      	ldr	r3, [r7, #12]
 81023e0:	2201      	movs	r2, #1
 81023e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81023e6:	f7ff fbb9 	bl	8101b5c <HAL_GetTick>
 81023ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81023ec:	697b      	ldr	r3, [r7, #20]
 81023ee:	9300      	str	r3, [sp, #0]
 81023f0:	2319      	movs	r3, #25
 81023f2:	2201      	movs	r2, #1
 81023f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81023f8:	68f8      	ldr	r0, [r7, #12]
 81023fa:	f000 fadd 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 81023fe:	4603      	mov	r3, r0
 8102400:	2b00      	cmp	r3, #0
 8102402:	d001      	beq.n	8102408 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102404:	2301      	movs	r3, #1
 8102406:	e0d1      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102408:	68fb      	ldr	r3, [r7, #12]
 810240a:	2221      	movs	r2, #33	; 0x21
 810240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102410:	68fb      	ldr	r3, [r7, #12]
 8102412:	2240      	movs	r2, #64	; 0x40
 8102414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102418:	68fb      	ldr	r3, [r7, #12]
 810241a:	2200      	movs	r2, #0
 810241c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810241e:	68fb      	ldr	r3, [r7, #12]
 8102420:	6a3a      	ldr	r2, [r7, #32]
 8102422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102424:	68fb      	ldr	r3, [r7, #12]
 8102426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	2200      	movs	r2, #0
 810242e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102430:	88f8      	ldrh	r0, [r7, #6]
 8102432:	893a      	ldrh	r2, [r7, #8]
 8102434:	8979      	ldrh	r1, [r7, #10]
 8102436:	697b      	ldr	r3, [r7, #20]
 8102438:	9301      	str	r3, [sp, #4]
 810243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810243c:	9300      	str	r3, [sp, #0]
 810243e:	4603      	mov	r3, r0
 8102440:	68f8      	ldr	r0, [r7, #12]
 8102442:	f000 f9ed 	bl	8102820 <I2C_RequestMemoryWrite>
 8102446:	4603      	mov	r3, r0
 8102448:	2b00      	cmp	r3, #0
 810244a:	d005      	beq.n	8102458 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810244c:	68fb      	ldr	r3, [r7, #12]
 810244e:	2200      	movs	r2, #0
 8102450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102454:	2301      	movs	r3, #1
 8102456:	e0a9      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102458:	68fb      	ldr	r3, [r7, #12]
 810245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810245c:	b29b      	uxth	r3, r3
 810245e:	2bff      	cmp	r3, #255	; 0xff
 8102460:	d90e      	bls.n	8102480 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102462:	68fb      	ldr	r3, [r7, #12]
 8102464:	22ff      	movs	r2, #255	; 0xff
 8102466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102468:	68fb      	ldr	r3, [r7, #12]
 810246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810246c:	b2da      	uxtb	r2, r3
 810246e:	8979      	ldrh	r1, [r7, #10]
 8102470:	2300      	movs	r3, #0
 8102472:	9300      	str	r3, [sp, #0]
 8102474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102478:	68f8      	ldr	r0, [r7, #12]
 810247a:	f000 fbbf 	bl	8102bfc <I2C_TransferConfig>
 810247e:	e00f      	b.n	81024a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102484:	b29a      	uxth	r2, r3
 8102486:	68fb      	ldr	r3, [r7, #12]
 8102488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810248a:	68fb      	ldr	r3, [r7, #12]
 810248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810248e:	b2da      	uxtb	r2, r3
 8102490:	8979      	ldrh	r1, [r7, #10]
 8102492:	2300      	movs	r3, #0
 8102494:	9300      	str	r3, [sp, #0]
 8102496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810249a:	68f8      	ldr	r0, [r7, #12]
 810249c:	f000 fbae 	bl	8102bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81024a0:	697a      	ldr	r2, [r7, #20]
 81024a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81024a4:	68f8      	ldr	r0, [r7, #12]
 81024a6:	f000 fac7 	bl	8102a38 <I2C_WaitOnTXISFlagUntilTimeout>
 81024aa:	4603      	mov	r3, r0
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d001      	beq.n	81024b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81024b0:	2301      	movs	r3, #1
 81024b2:	e07b      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81024b4:	68fb      	ldr	r3, [r7, #12]
 81024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024b8:	781a      	ldrb	r2, [r3, #0]
 81024ba:	68fb      	ldr	r3, [r7, #12]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81024c0:	68fb      	ldr	r3, [r7, #12]
 81024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024c4:	1c5a      	adds	r2, r3, #1
 81024c6:	68fb      	ldr	r3, [r7, #12]
 81024c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81024ca:	68fb      	ldr	r3, [r7, #12]
 81024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024ce:	b29b      	uxth	r3, r3
 81024d0:	3b01      	subs	r3, #1
 81024d2:	b29a      	uxth	r2, r3
 81024d4:	68fb      	ldr	r3, [r7, #12]
 81024d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81024d8:	68fb      	ldr	r3, [r7, #12]
 81024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024dc:	3b01      	subs	r3, #1
 81024de:	b29a      	uxth	r2, r3
 81024e0:	68fb      	ldr	r3, [r7, #12]
 81024e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81024e4:	68fb      	ldr	r3, [r7, #12]
 81024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024e8:	b29b      	uxth	r3, r3
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d034      	beq.n	8102558 <HAL_I2C_Mem_Write+0x1c8>
 81024ee:	68fb      	ldr	r3, [r7, #12]
 81024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d130      	bne.n	8102558 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81024f6:	697b      	ldr	r3, [r7, #20]
 81024f8:	9300      	str	r3, [sp, #0]
 81024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024fc:	2200      	movs	r2, #0
 81024fe:	2180      	movs	r1, #128	; 0x80
 8102500:	68f8      	ldr	r0, [r7, #12]
 8102502:	f000 fa59 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 8102506:	4603      	mov	r3, r0
 8102508:	2b00      	cmp	r3, #0
 810250a:	d001      	beq.n	8102510 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 810250c:	2301      	movs	r3, #1
 810250e:	e04d      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102514:	b29b      	uxth	r3, r3
 8102516:	2bff      	cmp	r3, #255	; 0xff
 8102518:	d90e      	bls.n	8102538 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810251a:	68fb      	ldr	r3, [r7, #12]
 810251c:	22ff      	movs	r2, #255	; 0xff
 810251e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102520:	68fb      	ldr	r3, [r7, #12]
 8102522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102524:	b2da      	uxtb	r2, r3
 8102526:	8979      	ldrh	r1, [r7, #10]
 8102528:	2300      	movs	r3, #0
 810252a:	9300      	str	r3, [sp, #0]
 810252c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102530:	68f8      	ldr	r0, [r7, #12]
 8102532:	f000 fb63 	bl	8102bfc <I2C_TransferConfig>
 8102536:	e00f      	b.n	8102558 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102538:	68fb      	ldr	r3, [r7, #12]
 810253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810253c:	b29a      	uxth	r2, r3
 810253e:	68fb      	ldr	r3, [r7, #12]
 8102540:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102542:	68fb      	ldr	r3, [r7, #12]
 8102544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102546:	b2da      	uxtb	r2, r3
 8102548:	8979      	ldrh	r1, [r7, #10]
 810254a:	2300      	movs	r3, #0
 810254c:	9300      	str	r3, [sp, #0]
 810254e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102552:	68f8      	ldr	r0, [r7, #12]
 8102554:	f000 fb52 	bl	8102bfc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8102558:	68fb      	ldr	r3, [r7, #12]
 810255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810255c:	b29b      	uxth	r3, r3
 810255e:	2b00      	cmp	r3, #0
 8102560:	d19e      	bne.n	81024a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102562:	697a      	ldr	r2, [r7, #20]
 8102564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102566:	68f8      	ldr	r0, [r7, #12]
 8102568:	f000 faa6 	bl	8102ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 810256c:	4603      	mov	r3, r0
 810256e:	2b00      	cmp	r3, #0
 8102570:	d001      	beq.n	8102576 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102572:	2301      	movs	r3, #1
 8102574:	e01a      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102576:	68fb      	ldr	r3, [r7, #12]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	2220      	movs	r2, #32
 810257c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810257e:	68fb      	ldr	r3, [r7, #12]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	6859      	ldr	r1, [r3, #4]
 8102584:	68fb      	ldr	r3, [r7, #12]
 8102586:	681a      	ldr	r2, [r3, #0]
 8102588:	4b0a      	ldr	r3, [pc, #40]	; (81025b4 <HAL_I2C_Mem_Write+0x224>)
 810258a:	400b      	ands	r3, r1
 810258c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810258e:	68fb      	ldr	r3, [r7, #12]
 8102590:	2220      	movs	r2, #32
 8102592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102596:	68fb      	ldr	r3, [r7, #12]
 8102598:	2200      	movs	r2, #0
 810259a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810259e:	68fb      	ldr	r3, [r7, #12]
 81025a0:	2200      	movs	r2, #0
 81025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81025a6:	2300      	movs	r3, #0
 81025a8:	e000      	b.n	81025ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81025aa:	2302      	movs	r3, #2
  }
}
 81025ac:	4618      	mov	r0, r3
 81025ae:	3718      	adds	r7, #24
 81025b0:	46bd      	mov	sp, r7
 81025b2:	bd80      	pop	{r7, pc}
 81025b4:	fe00e800 	.word	0xfe00e800

081025b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81025b8:	b580      	push	{r7, lr}
 81025ba:	b088      	sub	sp, #32
 81025bc:	af02      	add	r7, sp, #8
 81025be:	60f8      	str	r0, [r7, #12]
 81025c0:	4608      	mov	r0, r1
 81025c2:	4611      	mov	r1, r2
 81025c4:	461a      	mov	r2, r3
 81025c6:	4603      	mov	r3, r0
 81025c8:	817b      	strh	r3, [r7, #10]
 81025ca:	460b      	mov	r3, r1
 81025cc:	813b      	strh	r3, [r7, #8]
 81025ce:	4613      	mov	r3, r2
 81025d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81025d2:	68fb      	ldr	r3, [r7, #12]
 81025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81025d8:	b2db      	uxtb	r3, r3
 81025da:	2b20      	cmp	r3, #32
 81025dc:	f040 80fd 	bne.w	81027da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81025e0:	6a3b      	ldr	r3, [r7, #32]
 81025e2:	2b00      	cmp	r3, #0
 81025e4:	d002      	beq.n	81025ec <HAL_I2C_Mem_Read+0x34>
 81025e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d105      	bne.n	81025f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81025ec:	68fb      	ldr	r3, [r7, #12]
 81025ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 81025f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81025f4:	2301      	movs	r3, #1
 81025f6:	e0f1      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81025f8:	68fb      	ldr	r3, [r7, #12]
 81025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81025fe:	2b01      	cmp	r3, #1
 8102600:	d101      	bne.n	8102606 <HAL_I2C_Mem_Read+0x4e>
 8102602:	2302      	movs	r3, #2
 8102604:	e0ea      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
 8102606:	68fb      	ldr	r3, [r7, #12]
 8102608:	2201      	movs	r2, #1
 810260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810260e:	f7ff faa5 	bl	8101b5c <HAL_GetTick>
 8102612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102614:	697b      	ldr	r3, [r7, #20]
 8102616:	9300      	str	r3, [sp, #0]
 8102618:	2319      	movs	r3, #25
 810261a:	2201      	movs	r2, #1
 810261c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102620:	68f8      	ldr	r0, [r7, #12]
 8102622:	f000 f9c9 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 8102626:	4603      	mov	r3, r0
 8102628:	2b00      	cmp	r3, #0
 810262a:	d001      	beq.n	8102630 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810262c:	2301      	movs	r3, #1
 810262e:	e0d5      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102630:	68fb      	ldr	r3, [r7, #12]
 8102632:	2222      	movs	r2, #34	; 0x22
 8102634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102638:	68fb      	ldr	r3, [r7, #12]
 810263a:	2240      	movs	r2, #64	; 0x40
 810263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102640:	68fb      	ldr	r3, [r7, #12]
 8102642:	2200      	movs	r2, #0
 8102644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102646:	68fb      	ldr	r3, [r7, #12]
 8102648:	6a3a      	ldr	r2, [r7, #32]
 810264a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810264c:	68fb      	ldr	r3, [r7, #12]
 810264e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102652:	68fb      	ldr	r3, [r7, #12]
 8102654:	2200      	movs	r2, #0
 8102656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102658:	88f8      	ldrh	r0, [r7, #6]
 810265a:	893a      	ldrh	r2, [r7, #8]
 810265c:	8979      	ldrh	r1, [r7, #10]
 810265e:	697b      	ldr	r3, [r7, #20]
 8102660:	9301      	str	r3, [sp, #4]
 8102662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102664:	9300      	str	r3, [sp, #0]
 8102666:	4603      	mov	r3, r0
 8102668:	68f8      	ldr	r0, [r7, #12]
 810266a:	f000 f92d 	bl	81028c8 <I2C_RequestMemoryRead>
 810266e:	4603      	mov	r3, r0
 8102670:	2b00      	cmp	r3, #0
 8102672:	d005      	beq.n	8102680 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	2200      	movs	r2, #0
 8102678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810267c:	2301      	movs	r3, #1
 810267e:	e0ad      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102680:	68fb      	ldr	r3, [r7, #12]
 8102682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102684:	b29b      	uxth	r3, r3
 8102686:	2bff      	cmp	r3, #255	; 0xff
 8102688:	d90e      	bls.n	81026a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810268a:	68fb      	ldr	r3, [r7, #12]
 810268c:	22ff      	movs	r2, #255	; 0xff
 810268e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8102690:	68fb      	ldr	r3, [r7, #12]
 8102692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102694:	b2da      	uxtb	r2, r3
 8102696:	8979      	ldrh	r1, [r7, #10]
 8102698:	4b52      	ldr	r3, [pc, #328]	; (81027e4 <HAL_I2C_Mem_Read+0x22c>)
 810269a:	9300      	str	r3, [sp, #0]
 810269c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81026a0:	68f8      	ldr	r0, [r7, #12]
 81026a2:	f000 faab 	bl	8102bfc <I2C_TransferConfig>
 81026a6:	e00f      	b.n	81026c8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81026a8:	68fb      	ldr	r3, [r7, #12]
 81026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026ac:	b29a      	uxth	r2, r3
 81026ae:	68fb      	ldr	r3, [r7, #12]
 81026b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81026b2:	68fb      	ldr	r3, [r7, #12]
 81026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026b6:	b2da      	uxtb	r2, r3
 81026b8:	8979      	ldrh	r1, [r7, #10]
 81026ba:	4b4a      	ldr	r3, [pc, #296]	; (81027e4 <HAL_I2C_Mem_Read+0x22c>)
 81026bc:	9300      	str	r3, [sp, #0]
 81026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81026c2:	68f8      	ldr	r0, [r7, #12]
 81026c4:	f000 fa9a 	bl	8102bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81026c8:	697b      	ldr	r3, [r7, #20]
 81026ca:	9300      	str	r3, [sp, #0]
 81026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026ce:	2200      	movs	r2, #0
 81026d0:	2104      	movs	r1, #4
 81026d2:	68f8      	ldr	r0, [r7, #12]
 81026d4:	f000 f970 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 81026d8:	4603      	mov	r3, r0
 81026da:	2b00      	cmp	r3, #0
 81026dc:	d001      	beq.n	81026e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81026de:	2301      	movs	r3, #1
 81026e0:	e07c      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	681b      	ldr	r3, [r3, #0]
 81026e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026ec:	b2d2      	uxtb	r2, r2
 81026ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026f4:	1c5a      	adds	r2, r3, #1
 81026f6:	68fb      	ldr	r3, [r7, #12]
 81026f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81026fa:	68fb      	ldr	r3, [r7, #12]
 81026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026fe:	3b01      	subs	r3, #1
 8102700:	b29a      	uxth	r2, r3
 8102702:	68fb      	ldr	r3, [r7, #12]
 8102704:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102706:	68fb      	ldr	r3, [r7, #12]
 8102708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810270a:	b29b      	uxth	r3, r3
 810270c:	3b01      	subs	r3, #1
 810270e:	b29a      	uxth	r2, r3
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102714:	68fb      	ldr	r3, [r7, #12]
 8102716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102718:	b29b      	uxth	r3, r3
 810271a:	2b00      	cmp	r3, #0
 810271c:	d034      	beq.n	8102788 <HAL_I2C_Mem_Read+0x1d0>
 810271e:	68fb      	ldr	r3, [r7, #12]
 8102720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102722:	2b00      	cmp	r3, #0
 8102724:	d130      	bne.n	8102788 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102726:	697b      	ldr	r3, [r7, #20]
 8102728:	9300      	str	r3, [sp, #0]
 810272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810272c:	2200      	movs	r2, #0
 810272e:	2180      	movs	r1, #128	; 0x80
 8102730:	68f8      	ldr	r0, [r7, #12]
 8102732:	f000 f941 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 8102736:	4603      	mov	r3, r0
 8102738:	2b00      	cmp	r3, #0
 810273a:	d001      	beq.n	8102740 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810273c:	2301      	movs	r3, #1
 810273e:	e04d      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102740:	68fb      	ldr	r3, [r7, #12]
 8102742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102744:	b29b      	uxth	r3, r3
 8102746:	2bff      	cmp	r3, #255	; 0xff
 8102748:	d90e      	bls.n	8102768 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810274a:	68fb      	ldr	r3, [r7, #12]
 810274c:	22ff      	movs	r2, #255	; 0xff
 810274e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102750:	68fb      	ldr	r3, [r7, #12]
 8102752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102754:	b2da      	uxtb	r2, r3
 8102756:	8979      	ldrh	r1, [r7, #10]
 8102758:	2300      	movs	r3, #0
 810275a:	9300      	str	r3, [sp, #0]
 810275c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102760:	68f8      	ldr	r0, [r7, #12]
 8102762:	f000 fa4b 	bl	8102bfc <I2C_TransferConfig>
 8102766:	e00f      	b.n	8102788 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102768:	68fb      	ldr	r3, [r7, #12]
 810276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810276c:	b29a      	uxth	r2, r3
 810276e:	68fb      	ldr	r3, [r7, #12]
 8102770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102772:	68fb      	ldr	r3, [r7, #12]
 8102774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102776:	b2da      	uxtb	r2, r3
 8102778:	8979      	ldrh	r1, [r7, #10]
 810277a:	2300      	movs	r3, #0
 810277c:	9300      	str	r3, [sp, #0]
 810277e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102782:	68f8      	ldr	r0, [r7, #12]
 8102784:	f000 fa3a 	bl	8102bfc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8102788:	68fb      	ldr	r3, [r7, #12]
 810278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810278c:	b29b      	uxth	r3, r3
 810278e:	2b00      	cmp	r3, #0
 8102790:	d19a      	bne.n	81026c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102792:	697a      	ldr	r2, [r7, #20]
 8102794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102796:	68f8      	ldr	r0, [r7, #12]
 8102798:	f000 f98e 	bl	8102ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 810279c:	4603      	mov	r3, r0
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d001      	beq.n	81027a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81027a2:	2301      	movs	r3, #1
 81027a4:	e01a      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81027a6:	68fb      	ldr	r3, [r7, #12]
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	2220      	movs	r2, #32
 81027ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81027ae:	68fb      	ldr	r3, [r7, #12]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	6859      	ldr	r1, [r3, #4]
 81027b4:	68fb      	ldr	r3, [r7, #12]
 81027b6:	681a      	ldr	r2, [r3, #0]
 81027b8:	4b0b      	ldr	r3, [pc, #44]	; (81027e8 <HAL_I2C_Mem_Read+0x230>)
 81027ba:	400b      	ands	r3, r1
 81027bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81027be:	68fb      	ldr	r3, [r7, #12]
 81027c0:	2220      	movs	r2, #32
 81027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81027c6:	68fb      	ldr	r3, [r7, #12]
 81027c8:	2200      	movs	r2, #0
 81027ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81027ce:	68fb      	ldr	r3, [r7, #12]
 81027d0:	2200      	movs	r2, #0
 81027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81027d6:	2300      	movs	r3, #0
 81027d8:	e000      	b.n	81027dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81027da:	2302      	movs	r3, #2
  }
}
 81027dc:	4618      	mov	r0, r3
 81027de:	3718      	adds	r7, #24
 81027e0:	46bd      	mov	sp, r7
 81027e2:	bd80      	pop	{r7, pc}
 81027e4:	80002400 	.word	0x80002400
 81027e8:	fe00e800 	.word	0xfe00e800

081027ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81027ec:	b580      	push	{r7, lr}
 81027ee:	b084      	sub	sp, #16
 81027f0:	af00      	add	r7, sp, #0
 81027f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	699b      	ldr	r3, [r3, #24]
 81027fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102808:	2b00      	cmp	r3, #0
 810280a:	d005      	beq.n	8102818 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102810:	68ba      	ldr	r2, [r7, #8]
 8102812:	68f9      	ldr	r1, [r7, #12]
 8102814:	6878      	ldr	r0, [r7, #4]
 8102816:	4798      	blx	r3
  }
}
 8102818:	bf00      	nop
 810281a:	3710      	adds	r7, #16
 810281c:	46bd      	mov	sp, r7
 810281e:	bd80      	pop	{r7, pc}

08102820 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102820:	b580      	push	{r7, lr}
 8102822:	b086      	sub	sp, #24
 8102824:	af02      	add	r7, sp, #8
 8102826:	60f8      	str	r0, [r7, #12]
 8102828:	4608      	mov	r0, r1
 810282a:	4611      	mov	r1, r2
 810282c:	461a      	mov	r2, r3
 810282e:	4603      	mov	r3, r0
 8102830:	817b      	strh	r3, [r7, #10]
 8102832:	460b      	mov	r3, r1
 8102834:	813b      	strh	r3, [r7, #8]
 8102836:	4613      	mov	r3, r2
 8102838:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810283a:	88fb      	ldrh	r3, [r7, #6]
 810283c:	b2da      	uxtb	r2, r3
 810283e:	8979      	ldrh	r1, [r7, #10]
 8102840:	4b20      	ldr	r3, [pc, #128]	; (81028c4 <I2C_RequestMemoryWrite+0xa4>)
 8102842:	9300      	str	r3, [sp, #0]
 8102844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102848:	68f8      	ldr	r0, [r7, #12]
 810284a:	f000 f9d7 	bl	8102bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810284e:	69fa      	ldr	r2, [r7, #28]
 8102850:	69b9      	ldr	r1, [r7, #24]
 8102852:	68f8      	ldr	r0, [r7, #12]
 8102854:	f000 f8f0 	bl	8102a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8102858:	4603      	mov	r3, r0
 810285a:	2b00      	cmp	r3, #0
 810285c:	d001      	beq.n	8102862 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810285e:	2301      	movs	r3, #1
 8102860:	e02c      	b.n	81028bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102862:	88fb      	ldrh	r3, [r7, #6]
 8102864:	2b01      	cmp	r3, #1
 8102866:	d105      	bne.n	8102874 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102868:	893b      	ldrh	r3, [r7, #8]
 810286a:	b2da      	uxtb	r2, r3
 810286c:	68fb      	ldr	r3, [r7, #12]
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	629a      	str	r2, [r3, #40]	; 0x28
 8102872:	e015      	b.n	81028a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102874:	893b      	ldrh	r3, [r7, #8]
 8102876:	0a1b      	lsrs	r3, r3, #8
 8102878:	b29b      	uxth	r3, r3
 810287a:	b2da      	uxtb	r2, r3
 810287c:	68fb      	ldr	r3, [r7, #12]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102882:	69fa      	ldr	r2, [r7, #28]
 8102884:	69b9      	ldr	r1, [r7, #24]
 8102886:	68f8      	ldr	r0, [r7, #12]
 8102888:	f000 f8d6 	bl	8102a38 <I2C_WaitOnTXISFlagUntilTimeout>
 810288c:	4603      	mov	r3, r0
 810288e:	2b00      	cmp	r3, #0
 8102890:	d001      	beq.n	8102896 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102892:	2301      	movs	r3, #1
 8102894:	e012      	b.n	81028bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102896:	893b      	ldrh	r3, [r7, #8]
 8102898:	b2da      	uxtb	r2, r3
 810289a:	68fb      	ldr	r3, [r7, #12]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81028a0:	69fb      	ldr	r3, [r7, #28]
 81028a2:	9300      	str	r3, [sp, #0]
 81028a4:	69bb      	ldr	r3, [r7, #24]
 81028a6:	2200      	movs	r2, #0
 81028a8:	2180      	movs	r1, #128	; 0x80
 81028aa:	68f8      	ldr	r0, [r7, #12]
 81028ac:	f000 f884 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 81028b0:	4603      	mov	r3, r0
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d001      	beq.n	81028ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81028b6:	2301      	movs	r3, #1
 81028b8:	e000      	b.n	81028bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81028ba:	2300      	movs	r3, #0
}
 81028bc:	4618      	mov	r0, r3
 81028be:	3710      	adds	r7, #16
 81028c0:	46bd      	mov	sp, r7
 81028c2:	bd80      	pop	{r7, pc}
 81028c4:	80002000 	.word	0x80002000

081028c8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81028c8:	b580      	push	{r7, lr}
 81028ca:	b086      	sub	sp, #24
 81028cc:	af02      	add	r7, sp, #8
 81028ce:	60f8      	str	r0, [r7, #12]
 81028d0:	4608      	mov	r0, r1
 81028d2:	4611      	mov	r1, r2
 81028d4:	461a      	mov	r2, r3
 81028d6:	4603      	mov	r3, r0
 81028d8:	817b      	strh	r3, [r7, #10]
 81028da:	460b      	mov	r3, r1
 81028dc:	813b      	strh	r3, [r7, #8]
 81028de:	4613      	mov	r3, r2
 81028e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81028e2:	88fb      	ldrh	r3, [r7, #6]
 81028e4:	b2da      	uxtb	r2, r3
 81028e6:	8979      	ldrh	r1, [r7, #10]
 81028e8:	4b20      	ldr	r3, [pc, #128]	; (810296c <I2C_RequestMemoryRead+0xa4>)
 81028ea:	9300      	str	r3, [sp, #0]
 81028ec:	2300      	movs	r3, #0
 81028ee:	68f8      	ldr	r0, [r7, #12]
 81028f0:	f000 f984 	bl	8102bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81028f4:	69fa      	ldr	r2, [r7, #28]
 81028f6:	69b9      	ldr	r1, [r7, #24]
 81028f8:	68f8      	ldr	r0, [r7, #12]
 81028fa:	f000 f89d 	bl	8102a38 <I2C_WaitOnTXISFlagUntilTimeout>
 81028fe:	4603      	mov	r3, r0
 8102900:	2b00      	cmp	r3, #0
 8102902:	d001      	beq.n	8102908 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102904:	2301      	movs	r3, #1
 8102906:	e02c      	b.n	8102962 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102908:	88fb      	ldrh	r3, [r7, #6]
 810290a:	2b01      	cmp	r3, #1
 810290c:	d105      	bne.n	810291a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810290e:	893b      	ldrh	r3, [r7, #8]
 8102910:	b2da      	uxtb	r2, r3
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	629a      	str	r2, [r3, #40]	; 0x28
 8102918:	e015      	b.n	8102946 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810291a:	893b      	ldrh	r3, [r7, #8]
 810291c:	0a1b      	lsrs	r3, r3, #8
 810291e:	b29b      	uxth	r3, r3
 8102920:	b2da      	uxtb	r2, r3
 8102922:	68fb      	ldr	r3, [r7, #12]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102928:	69fa      	ldr	r2, [r7, #28]
 810292a:	69b9      	ldr	r1, [r7, #24]
 810292c:	68f8      	ldr	r0, [r7, #12]
 810292e:	f000 f883 	bl	8102a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8102932:	4603      	mov	r3, r0
 8102934:	2b00      	cmp	r3, #0
 8102936:	d001      	beq.n	810293c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102938:	2301      	movs	r3, #1
 810293a:	e012      	b.n	8102962 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810293c:	893b      	ldrh	r3, [r7, #8]
 810293e:	b2da      	uxtb	r2, r3
 8102940:	68fb      	ldr	r3, [r7, #12]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102946:	69fb      	ldr	r3, [r7, #28]
 8102948:	9300      	str	r3, [sp, #0]
 810294a:	69bb      	ldr	r3, [r7, #24]
 810294c:	2200      	movs	r2, #0
 810294e:	2140      	movs	r1, #64	; 0x40
 8102950:	68f8      	ldr	r0, [r7, #12]
 8102952:	f000 f831 	bl	81029b8 <I2C_WaitOnFlagUntilTimeout>
 8102956:	4603      	mov	r3, r0
 8102958:	2b00      	cmp	r3, #0
 810295a:	d001      	beq.n	8102960 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810295c:	2301      	movs	r3, #1
 810295e:	e000      	b.n	8102962 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102960:	2300      	movs	r3, #0
}
 8102962:	4618      	mov	r0, r3
 8102964:	3710      	adds	r7, #16
 8102966:	46bd      	mov	sp, r7
 8102968:	bd80      	pop	{r7, pc}
 810296a:	bf00      	nop
 810296c:	80002000 	.word	0x80002000

08102970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102970:	b480      	push	{r7}
 8102972:	b083      	sub	sp, #12
 8102974:	af00      	add	r7, sp, #0
 8102976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	699b      	ldr	r3, [r3, #24]
 810297e:	f003 0302 	and.w	r3, r3, #2
 8102982:	2b02      	cmp	r3, #2
 8102984:	d103      	bne.n	810298e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	2200      	movs	r2, #0
 810298c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	699b      	ldr	r3, [r3, #24]
 8102994:	f003 0301 	and.w	r3, r3, #1
 8102998:	2b01      	cmp	r3, #1
 810299a:	d007      	beq.n	81029ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	699a      	ldr	r2, [r3, #24]
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	f042 0201 	orr.w	r2, r2, #1
 81029aa:	619a      	str	r2, [r3, #24]
  }
}
 81029ac:	bf00      	nop
 81029ae:	370c      	adds	r7, #12
 81029b0:	46bd      	mov	sp, r7
 81029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b6:	4770      	bx	lr

081029b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81029b8:	b580      	push	{r7, lr}
 81029ba:	b084      	sub	sp, #16
 81029bc:	af00      	add	r7, sp, #0
 81029be:	60f8      	str	r0, [r7, #12]
 81029c0:	60b9      	str	r1, [r7, #8]
 81029c2:	603b      	str	r3, [r7, #0]
 81029c4:	4613      	mov	r3, r2
 81029c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81029c8:	e022      	b.n	8102a10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81029ca:	683b      	ldr	r3, [r7, #0]
 81029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81029d0:	d01e      	beq.n	8102a10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81029d2:	f7ff f8c3 	bl	8101b5c <HAL_GetTick>
 81029d6:	4602      	mov	r2, r0
 81029d8:	69bb      	ldr	r3, [r7, #24]
 81029da:	1ad3      	subs	r3, r2, r3
 81029dc:	683a      	ldr	r2, [r7, #0]
 81029de:	429a      	cmp	r2, r3
 81029e0:	d302      	bcc.n	81029e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 81029e2:	683b      	ldr	r3, [r7, #0]
 81029e4:	2b00      	cmp	r3, #0
 81029e6:	d113      	bne.n	8102a10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81029e8:	68fb      	ldr	r3, [r7, #12]
 81029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81029ec:	f043 0220 	orr.w	r2, r3, #32
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	2220      	movs	r2, #32
 81029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	2200      	movs	r2, #0
 8102a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102a04:	68fb      	ldr	r3, [r7, #12]
 8102a06:	2200      	movs	r2, #0
 8102a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102a0c:	2301      	movs	r3, #1
 8102a0e:	e00f      	b.n	8102a30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102a10:	68fb      	ldr	r3, [r7, #12]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	699a      	ldr	r2, [r3, #24]
 8102a16:	68bb      	ldr	r3, [r7, #8]
 8102a18:	4013      	ands	r3, r2
 8102a1a:	68ba      	ldr	r2, [r7, #8]
 8102a1c:	429a      	cmp	r2, r3
 8102a1e:	bf0c      	ite	eq
 8102a20:	2301      	moveq	r3, #1
 8102a22:	2300      	movne	r3, #0
 8102a24:	b2db      	uxtb	r3, r3
 8102a26:	461a      	mov	r2, r3
 8102a28:	79fb      	ldrb	r3, [r7, #7]
 8102a2a:	429a      	cmp	r2, r3
 8102a2c:	d0cd      	beq.n	81029ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102a2e:	2300      	movs	r3, #0
}
 8102a30:	4618      	mov	r0, r3
 8102a32:	3710      	adds	r7, #16
 8102a34:	46bd      	mov	sp, r7
 8102a36:	bd80      	pop	{r7, pc}

08102a38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102a38:	b580      	push	{r7, lr}
 8102a3a:	b084      	sub	sp, #16
 8102a3c:	af00      	add	r7, sp, #0
 8102a3e:	60f8      	str	r0, [r7, #12]
 8102a40:	60b9      	str	r1, [r7, #8]
 8102a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102a44:	e02c      	b.n	8102aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102a46:	687a      	ldr	r2, [r7, #4]
 8102a48:	68b9      	ldr	r1, [r7, #8]
 8102a4a:	68f8      	ldr	r0, [r7, #12]
 8102a4c:	f000 f870 	bl	8102b30 <I2C_IsAcknowledgeFailed>
 8102a50:	4603      	mov	r3, r0
 8102a52:	2b00      	cmp	r3, #0
 8102a54:	d001      	beq.n	8102a5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102a56:	2301      	movs	r3, #1
 8102a58:	e02a      	b.n	8102ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102a5a:	68bb      	ldr	r3, [r7, #8]
 8102a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a60:	d01e      	beq.n	8102aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102a62:	f7ff f87b 	bl	8101b5c <HAL_GetTick>
 8102a66:	4602      	mov	r2, r0
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	1ad3      	subs	r3, r2, r3
 8102a6c:	68ba      	ldr	r2, [r7, #8]
 8102a6e:	429a      	cmp	r2, r3
 8102a70:	d302      	bcc.n	8102a78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102a72:	68bb      	ldr	r3, [r7, #8]
 8102a74:	2b00      	cmp	r3, #0
 8102a76:	d113      	bne.n	8102aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102a78:	68fb      	ldr	r3, [r7, #12]
 8102a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102a7c:	f043 0220 	orr.w	r2, r3, #32
 8102a80:	68fb      	ldr	r3, [r7, #12]
 8102a82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	2220      	movs	r2, #32
 8102a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102a8c:	68fb      	ldr	r3, [r7, #12]
 8102a8e:	2200      	movs	r2, #0
 8102a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102a94:	68fb      	ldr	r3, [r7, #12]
 8102a96:	2200      	movs	r2, #0
 8102a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102a9c:	2301      	movs	r3, #1
 8102a9e:	e007      	b.n	8102ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	699b      	ldr	r3, [r3, #24]
 8102aa6:	f003 0302 	and.w	r3, r3, #2
 8102aaa:	2b02      	cmp	r3, #2
 8102aac:	d1cb      	bne.n	8102a46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102aae:	2300      	movs	r3, #0
}
 8102ab0:	4618      	mov	r0, r3
 8102ab2:	3710      	adds	r7, #16
 8102ab4:	46bd      	mov	sp, r7
 8102ab6:	bd80      	pop	{r7, pc}

08102ab8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102ab8:	b580      	push	{r7, lr}
 8102aba:	b084      	sub	sp, #16
 8102abc:	af00      	add	r7, sp, #0
 8102abe:	60f8      	str	r0, [r7, #12]
 8102ac0:	60b9      	str	r1, [r7, #8]
 8102ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102ac4:	e028      	b.n	8102b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102ac6:	687a      	ldr	r2, [r7, #4]
 8102ac8:	68b9      	ldr	r1, [r7, #8]
 8102aca:	68f8      	ldr	r0, [r7, #12]
 8102acc:	f000 f830 	bl	8102b30 <I2C_IsAcknowledgeFailed>
 8102ad0:	4603      	mov	r3, r0
 8102ad2:	2b00      	cmp	r3, #0
 8102ad4:	d001      	beq.n	8102ada <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102ad6:	2301      	movs	r3, #1
 8102ad8:	e026      	b.n	8102b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102ada:	f7ff f83f 	bl	8101b5c <HAL_GetTick>
 8102ade:	4602      	mov	r2, r0
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	1ad3      	subs	r3, r2, r3
 8102ae4:	68ba      	ldr	r2, [r7, #8]
 8102ae6:	429a      	cmp	r2, r3
 8102ae8:	d302      	bcc.n	8102af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102aea:	68bb      	ldr	r3, [r7, #8]
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	d113      	bne.n	8102b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102af0:	68fb      	ldr	r3, [r7, #12]
 8102af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102af4:	f043 0220 	orr.w	r2, r3, #32
 8102af8:	68fb      	ldr	r3, [r7, #12]
 8102afa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102afc:	68fb      	ldr	r3, [r7, #12]
 8102afe:	2220      	movs	r2, #32
 8102b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	2200      	movs	r2, #0
 8102b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102b0c:	68fb      	ldr	r3, [r7, #12]
 8102b0e:	2200      	movs	r2, #0
 8102b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102b14:	2301      	movs	r3, #1
 8102b16:	e007      	b.n	8102b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102b18:	68fb      	ldr	r3, [r7, #12]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	699b      	ldr	r3, [r3, #24]
 8102b1e:	f003 0320 	and.w	r3, r3, #32
 8102b22:	2b20      	cmp	r3, #32
 8102b24:	d1cf      	bne.n	8102ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102b26:	2300      	movs	r3, #0
}
 8102b28:	4618      	mov	r0, r3
 8102b2a:	3710      	adds	r7, #16
 8102b2c:	46bd      	mov	sp, r7
 8102b2e:	bd80      	pop	{r7, pc}

08102b30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102b30:	b580      	push	{r7, lr}
 8102b32:	b084      	sub	sp, #16
 8102b34:	af00      	add	r7, sp, #0
 8102b36:	60f8      	str	r0, [r7, #12]
 8102b38:	60b9      	str	r1, [r7, #8]
 8102b3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	699b      	ldr	r3, [r3, #24]
 8102b42:	f003 0310 	and.w	r3, r3, #16
 8102b46:	2b10      	cmp	r3, #16
 8102b48:	d151      	bne.n	8102bee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102b4a:	e022      	b.n	8102b92 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102b4c:	68bb      	ldr	r3, [r7, #8]
 8102b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b52:	d01e      	beq.n	8102b92 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b54:	f7ff f802 	bl	8101b5c <HAL_GetTick>
 8102b58:	4602      	mov	r2, r0
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	1ad3      	subs	r3, r2, r3
 8102b5e:	68ba      	ldr	r2, [r7, #8]
 8102b60:	429a      	cmp	r2, r3
 8102b62:	d302      	bcc.n	8102b6a <I2C_IsAcknowledgeFailed+0x3a>
 8102b64:	68bb      	ldr	r3, [r7, #8]
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d113      	bne.n	8102b92 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b6e:	f043 0220 	orr.w	r2, r3, #32
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	2220      	movs	r2, #32
 8102b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	2200      	movs	r2, #0
 8102b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102b86:	68fb      	ldr	r3, [r7, #12]
 8102b88:	2200      	movs	r2, #0
 8102b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102b8e:	2301      	movs	r3, #1
 8102b90:	e02e      	b.n	8102bf0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	699b      	ldr	r3, [r3, #24]
 8102b98:	f003 0320 	and.w	r3, r3, #32
 8102b9c:	2b20      	cmp	r3, #32
 8102b9e:	d1d5      	bne.n	8102b4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102ba0:	68fb      	ldr	r3, [r7, #12]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	2210      	movs	r2, #16
 8102ba6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	2220      	movs	r2, #32
 8102bae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102bb0:	68f8      	ldr	r0, [r7, #12]
 8102bb2:	f7ff fedd 	bl	8102970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102bb6:	68fb      	ldr	r3, [r7, #12]
 8102bb8:	681b      	ldr	r3, [r3, #0]
 8102bba:	6859      	ldr	r1, [r3, #4]
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	681a      	ldr	r2, [r3, #0]
 8102bc0:	4b0d      	ldr	r3, [pc, #52]	; (8102bf8 <I2C_IsAcknowledgeFailed+0xc8>)
 8102bc2:	400b      	ands	r3, r1
 8102bc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102bc6:	68fb      	ldr	r3, [r7, #12]
 8102bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102bca:	f043 0204 	orr.w	r2, r3, #4
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102bd2:	68fb      	ldr	r3, [r7, #12]
 8102bd4:	2220      	movs	r2, #32
 8102bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	2200      	movs	r2, #0
 8102bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102be2:	68fb      	ldr	r3, [r7, #12]
 8102be4:	2200      	movs	r2, #0
 8102be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102bea:	2301      	movs	r3, #1
 8102bec:	e000      	b.n	8102bf0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102bee:	2300      	movs	r3, #0
}
 8102bf0:	4618      	mov	r0, r3
 8102bf2:	3710      	adds	r7, #16
 8102bf4:	46bd      	mov	sp, r7
 8102bf6:	bd80      	pop	{r7, pc}
 8102bf8:	fe00e800 	.word	0xfe00e800

08102bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102bfc:	b480      	push	{r7}
 8102bfe:	b085      	sub	sp, #20
 8102c00:	af00      	add	r7, sp, #0
 8102c02:	60f8      	str	r0, [r7, #12]
 8102c04:	607b      	str	r3, [r7, #4]
 8102c06:	460b      	mov	r3, r1
 8102c08:	817b      	strh	r3, [r7, #10]
 8102c0a:	4613      	mov	r3, r2
 8102c0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8102c0e:	68fb      	ldr	r3, [r7, #12]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	685a      	ldr	r2, [r3, #4]
 8102c14:	69bb      	ldr	r3, [r7, #24]
 8102c16:	0d5b      	lsrs	r3, r3, #21
 8102c18:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102c1c:	4b0d      	ldr	r3, [pc, #52]	; (8102c54 <I2C_TransferConfig+0x58>)
 8102c1e:	430b      	orrs	r3, r1
 8102c20:	43db      	mvns	r3, r3
 8102c22:	ea02 0103 	and.w	r1, r2, r3
 8102c26:	897b      	ldrh	r3, [r7, #10]
 8102c28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8102c2c:	7a7b      	ldrb	r3, [r7, #9]
 8102c2e:	041b      	lsls	r3, r3, #16
 8102c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8102c34:	431a      	orrs	r2, r3
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	431a      	orrs	r2, r3
 8102c3a:	69bb      	ldr	r3, [r7, #24]
 8102c3c:	431a      	orrs	r2, r3
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	430a      	orrs	r2, r1
 8102c44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102c46:	bf00      	nop
 8102c48:	3714      	adds	r7, #20
 8102c4a:	46bd      	mov	sp, r7
 8102c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c50:	4770      	bx	lr
 8102c52:	bf00      	nop
 8102c54:	03ff63ff 	.word	0x03ff63ff

08102c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102c58:	b480      	push	{r7}
 8102c5a:	b083      	sub	sp, #12
 8102c5c:	af00      	add	r7, sp, #0
 8102c5e:	6078      	str	r0, [r7, #4]
 8102c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102c68:	b2db      	uxtb	r3, r3
 8102c6a:	2b20      	cmp	r3, #32
 8102c6c:	d138      	bne.n	8102ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102c74:	2b01      	cmp	r3, #1
 8102c76:	d101      	bne.n	8102c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102c78:	2302      	movs	r3, #2
 8102c7a:	e032      	b.n	8102ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	2201      	movs	r2, #1
 8102c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	2224      	movs	r2, #36	; 0x24
 8102c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	681a      	ldr	r2, [r3, #0]
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	f022 0201 	bic.w	r2, r2, #1
 8102c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	681a      	ldr	r2, [r3, #0]
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	6819      	ldr	r1, [r3, #0]
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	683a      	ldr	r2, [r7, #0]
 8102cb8:	430a      	orrs	r2, r1
 8102cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	681a      	ldr	r2, [r3, #0]
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	f042 0201 	orr.w	r2, r2, #1
 8102cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	2220      	movs	r2, #32
 8102cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	2200      	movs	r2, #0
 8102cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102cdc:	2300      	movs	r3, #0
 8102cde:	e000      	b.n	8102ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102ce0:	2302      	movs	r3, #2
  }
}
 8102ce2:	4618      	mov	r0, r3
 8102ce4:	370c      	adds	r7, #12
 8102ce6:	46bd      	mov	sp, r7
 8102ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cec:	4770      	bx	lr

08102cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102cee:	b480      	push	{r7}
 8102cf0:	b085      	sub	sp, #20
 8102cf2:	af00      	add	r7, sp, #0
 8102cf4:	6078      	str	r0, [r7, #4]
 8102cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102cfe:	b2db      	uxtb	r3, r3
 8102d00:	2b20      	cmp	r3, #32
 8102d02:	d139      	bne.n	8102d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102d0a:	2b01      	cmp	r3, #1
 8102d0c:	d101      	bne.n	8102d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102d0e:	2302      	movs	r3, #2
 8102d10:	e033      	b.n	8102d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	2201      	movs	r2, #1
 8102d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	2224      	movs	r2, #36	; 0x24
 8102d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	681a      	ldr	r2, [r3, #0]
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	f022 0201 	bic.w	r2, r2, #1
 8102d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102d3a:	68fb      	ldr	r3, [r7, #12]
 8102d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102d42:	683b      	ldr	r3, [r7, #0]
 8102d44:	021b      	lsls	r3, r3, #8
 8102d46:	68fa      	ldr	r2, [r7, #12]
 8102d48:	4313      	orrs	r3, r2
 8102d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	68fa      	ldr	r2, [r7, #12]
 8102d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	681a      	ldr	r2, [r3, #0]
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	f042 0201 	orr.w	r2, r2, #1
 8102d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	2220      	movs	r2, #32
 8102d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	2200      	movs	r2, #0
 8102d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102d74:	2300      	movs	r3, #0
 8102d76:	e000      	b.n	8102d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102d78:	2302      	movs	r3, #2
  }
}
 8102d7a:	4618      	mov	r0, r3
 8102d7c:	3714      	adds	r7, #20
 8102d7e:	46bd      	mov	sp, r7
 8102d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d84:	4770      	bx	lr
	...

08102d88 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102d88:	b580      	push	{r7, lr}
 8102d8a:	b084      	sub	sp, #16
 8102d8c:	af00      	add	r7, sp, #0
 8102d8e:	60f8      	str	r0, [r7, #12]
 8102d90:	460b      	mov	r3, r1
 8102d92:	607a      	str	r2, [r7, #4]
 8102d94:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102d96:	4b37      	ldr	r3, [pc, #220]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	f023 0201 	bic.w	r2, r3, #1
 8102d9e:	4935      	ldr	r1, [pc, #212]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102da0:	68fb      	ldr	r3, [r7, #12]
 8102da2:	4313      	orrs	r3, r2
 8102da4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	2b00      	cmp	r3, #0
 8102daa:	d123      	bne.n	8102df4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102dac:	f7ff f842 	bl	8101e34 <HAL_GetCurrentCPUID>
 8102db0:	4603      	mov	r3, r0
 8102db2:	2b03      	cmp	r3, #3
 8102db4:	d158      	bne.n	8102e68 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102db6:	4b2f      	ldr	r3, [pc, #188]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102db8:	691b      	ldr	r3, [r3, #16]
 8102dba:	4a2e      	ldr	r2, [pc, #184]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102dbc:	f023 0301 	bic.w	r3, r3, #1
 8102dc0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102dc2:	4b2d      	ldr	r3, [pc, #180]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dc4:	691b      	ldr	r3, [r3, #16]
 8102dc6:	4a2c      	ldr	r2, [pc, #176]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dc8:	f043 0304 	orr.w	r3, r3, #4
 8102dcc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102dce:	f3bf 8f4f 	dsb	sy
}
 8102dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102dd4:	f3bf 8f6f 	isb	sy
}
 8102dd8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102dda:	7afb      	ldrb	r3, [r7, #11]
 8102ddc:	2b01      	cmp	r3, #1
 8102dde:	d101      	bne.n	8102de4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102de0:	bf30      	wfi
 8102de2:	e000      	b.n	8102de6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102de4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102de6:	4b24      	ldr	r3, [pc, #144]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102de8:	691b      	ldr	r3, [r3, #16]
 8102dea:	4a23      	ldr	r2, [pc, #140]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dec:	f023 0304 	bic.w	r3, r3, #4
 8102df0:	6113      	str	r3, [r2, #16]
 8102df2:	e03c      	b.n	8102e6e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	2b01      	cmp	r3, #1
 8102df8:	d123      	bne.n	8102e42 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102dfa:	f7ff f81b 	bl	8101e34 <HAL_GetCurrentCPUID>
 8102dfe:	4603      	mov	r3, r0
 8102e00:	2b01      	cmp	r3, #1
 8102e02:	d133      	bne.n	8102e6c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102e04:	4b1b      	ldr	r3, [pc, #108]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e06:	695b      	ldr	r3, [r3, #20]
 8102e08:	4a1a      	ldr	r2, [pc, #104]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e0a:	f023 0302 	bic.w	r3, r3, #2
 8102e0e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e10:	4b19      	ldr	r3, [pc, #100]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e12:	691b      	ldr	r3, [r3, #16]
 8102e14:	4a18      	ldr	r2, [pc, #96]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e16:	f043 0304 	orr.w	r3, r3, #4
 8102e1a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102e1c:	f3bf 8f4f 	dsb	sy
}
 8102e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102e22:	f3bf 8f6f 	isb	sy
}
 8102e26:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102e28:	7afb      	ldrb	r3, [r7, #11]
 8102e2a:	2b01      	cmp	r3, #1
 8102e2c:	d101      	bne.n	8102e32 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102e2e:	bf30      	wfi
 8102e30:	e000      	b.n	8102e34 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102e32:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e34:	4b10      	ldr	r3, [pc, #64]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e36:	691b      	ldr	r3, [r3, #16]
 8102e38:	4a0f      	ldr	r2, [pc, #60]	; (8102e78 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e3a:	f023 0304 	bic.w	r3, r3, #4
 8102e3e:	6113      	str	r3, [r2, #16]
 8102e40:	e015      	b.n	8102e6e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102e42:	f7fe fff7 	bl	8101e34 <HAL_GetCurrentCPUID>
 8102e46:	4603      	mov	r3, r0
 8102e48:	2b03      	cmp	r3, #3
 8102e4a:	d106      	bne.n	8102e5a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102e4c:	4b09      	ldr	r3, [pc, #36]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e4e:	691b      	ldr	r3, [r3, #16]
 8102e50:	4a08      	ldr	r2, [pc, #32]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e52:	f023 0304 	bic.w	r3, r3, #4
 8102e56:	6113      	str	r3, [r2, #16]
 8102e58:	e009      	b.n	8102e6e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102e5a:	4b06      	ldr	r3, [pc, #24]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e5c:	695b      	ldr	r3, [r3, #20]
 8102e5e:	4a05      	ldr	r2, [pc, #20]	; (8102e74 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e60:	f023 0304 	bic.w	r3, r3, #4
 8102e64:	6153      	str	r3, [r2, #20]
 8102e66:	e002      	b.n	8102e6e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102e68:	bf00      	nop
 8102e6a:	e000      	b.n	8102e6e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102e6c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102e6e:	3710      	adds	r7, #16
 8102e70:	46bd      	mov	sp, r7
 8102e72:	bd80      	pop	{r7, pc}
 8102e74:	58024800 	.word	0x58024800
 8102e78:	e000ed00 	.word	0xe000ed00

08102e7c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102e7c:	b580      	push	{r7, lr}
 8102e7e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102e80:	f7fe ffd8 	bl	8101e34 <HAL_GetCurrentCPUID>
 8102e84:	4603      	mov	r3, r0
 8102e86:	2b03      	cmp	r3, #3
 8102e88:	d101      	bne.n	8102e8e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102e8a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102e8c:	e001      	b.n	8102e92 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102e8e:	bf40      	sev
    __WFE ();
 8102e90:	bf20      	wfe
}
 8102e92:	bf00      	nop
 8102e94:	bd80      	pop	{r7, pc}
	...

08102e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102e98:	b480      	push	{r7}
 8102e9a:	b089      	sub	sp, #36	; 0x24
 8102e9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102e9e:	4bb3      	ldr	r3, [pc, #716]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ea0:	691b      	ldr	r3, [r3, #16]
 8102ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102ea6:	2b18      	cmp	r3, #24
 8102ea8:	f200 8155 	bhi.w	8103156 <HAL_RCC_GetSysClockFreq+0x2be>
 8102eac:	a201      	add	r2, pc, #4	; (adr r2, 8102eb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102eb2:	bf00      	nop
 8102eb4:	08102f19 	.word	0x08102f19
 8102eb8:	08103157 	.word	0x08103157
 8102ebc:	08103157 	.word	0x08103157
 8102ec0:	08103157 	.word	0x08103157
 8102ec4:	08103157 	.word	0x08103157
 8102ec8:	08103157 	.word	0x08103157
 8102ecc:	08103157 	.word	0x08103157
 8102ed0:	08103157 	.word	0x08103157
 8102ed4:	08102f3f 	.word	0x08102f3f
 8102ed8:	08103157 	.word	0x08103157
 8102edc:	08103157 	.word	0x08103157
 8102ee0:	08103157 	.word	0x08103157
 8102ee4:	08103157 	.word	0x08103157
 8102ee8:	08103157 	.word	0x08103157
 8102eec:	08103157 	.word	0x08103157
 8102ef0:	08103157 	.word	0x08103157
 8102ef4:	08102f45 	.word	0x08102f45
 8102ef8:	08103157 	.word	0x08103157
 8102efc:	08103157 	.word	0x08103157
 8102f00:	08103157 	.word	0x08103157
 8102f04:	08103157 	.word	0x08103157
 8102f08:	08103157 	.word	0x08103157
 8102f0c:	08103157 	.word	0x08103157
 8102f10:	08103157 	.word	0x08103157
 8102f14:	08102f4b 	.word	0x08102f4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102f18:	4b94      	ldr	r3, [pc, #592]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	f003 0320 	and.w	r3, r3, #32
 8102f20:	2b00      	cmp	r3, #0
 8102f22:	d009      	beq.n	8102f38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102f24:	4b91      	ldr	r3, [pc, #580]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	08db      	lsrs	r3, r3, #3
 8102f2a:	f003 0303 	and.w	r3, r3, #3
 8102f2e:	4a90      	ldr	r2, [pc, #576]	; (8103170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102f30:	fa22 f303 	lsr.w	r3, r2, r3
 8102f34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102f36:	e111      	b.n	810315c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102f38:	4b8d      	ldr	r3, [pc, #564]	; (8103170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102f3a:	61bb      	str	r3, [r7, #24]
    break;
 8102f3c:	e10e      	b.n	810315c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102f3e:	4b8d      	ldr	r3, [pc, #564]	; (8103174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102f40:	61bb      	str	r3, [r7, #24]
    break;
 8102f42:	e10b      	b.n	810315c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102f44:	4b8c      	ldr	r3, [pc, #560]	; (8103178 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102f46:	61bb      	str	r3, [r7, #24]
    break;
 8102f48:	e108      	b.n	810315c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102f4a:	4b88      	ldr	r3, [pc, #544]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f4e:	f003 0303 	and.w	r3, r3, #3
 8102f52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102f54:	4b85      	ldr	r3, [pc, #532]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f58:	091b      	lsrs	r3, r3, #4
 8102f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102f5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102f60:	4b82      	ldr	r3, [pc, #520]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f64:	f003 0301 	and.w	r3, r3, #1
 8102f68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102f6a:	4b80      	ldr	r3, [pc, #512]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102f6e:	08db      	lsrs	r3, r3, #3
 8102f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102f74:	68fa      	ldr	r2, [r7, #12]
 8102f76:	fb02 f303 	mul.w	r3, r2, r3
 8102f7a:	ee07 3a90 	vmov	s15, r3
 8102f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102f86:	693b      	ldr	r3, [r7, #16]
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	f000 80e1 	beq.w	8103150 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102f8e:	697b      	ldr	r3, [r7, #20]
 8102f90:	2b02      	cmp	r3, #2
 8102f92:	f000 8083 	beq.w	810309c <HAL_RCC_GetSysClockFreq+0x204>
 8102f96:	697b      	ldr	r3, [r7, #20]
 8102f98:	2b02      	cmp	r3, #2
 8102f9a:	f200 80a1 	bhi.w	81030e0 <HAL_RCC_GetSysClockFreq+0x248>
 8102f9e:	697b      	ldr	r3, [r7, #20]
 8102fa0:	2b00      	cmp	r3, #0
 8102fa2:	d003      	beq.n	8102fac <HAL_RCC_GetSysClockFreq+0x114>
 8102fa4:	697b      	ldr	r3, [r7, #20]
 8102fa6:	2b01      	cmp	r3, #1
 8102fa8:	d056      	beq.n	8103058 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102faa:	e099      	b.n	81030e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102fac:	4b6f      	ldr	r3, [pc, #444]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	f003 0320 	and.w	r3, r3, #32
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d02d      	beq.n	8103014 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102fb8:	4b6c      	ldr	r3, [pc, #432]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	08db      	lsrs	r3, r3, #3
 8102fbe:	f003 0303 	and.w	r3, r3, #3
 8102fc2:	4a6b      	ldr	r2, [pc, #428]	; (8103170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8102fc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	ee07 3a90 	vmov	s15, r3
 8102fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fd4:	693b      	ldr	r3, [r7, #16]
 8102fd6:	ee07 3a90 	vmov	s15, r3
 8102fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102fe2:	4b62      	ldr	r3, [pc, #392]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102fea:	ee07 3a90 	vmov	s15, r3
 8102fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ff6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810317c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810300e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103012:	e087      	b.n	8103124 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103014:	693b      	ldr	r3, [r7, #16]
 8103016:	ee07 3a90 	vmov	s15, r3
 810301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810301e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103180 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103026:	4b51      	ldr	r3, [pc, #324]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810302e:	ee07 3a90 	vmov	s15, r3
 8103032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103036:	ed97 6a02 	vldr	s12, [r7, #8]
 810303a:	eddf 5a50 	vldr	s11, [pc, #320]	; 810317c <HAL_RCC_GetSysClockFreq+0x2e4>
 810303e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103056:	e065      	b.n	8103124 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103058:	693b      	ldr	r3, [r7, #16]
 810305a:	ee07 3a90 	vmov	s15, r3
 810305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103062:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103184 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810306a:	4b40      	ldr	r3, [pc, #256]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103072:	ee07 3a90 	vmov	s15, r3
 8103076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810307a:	ed97 6a02 	vldr	s12, [r7, #8]
 810307e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810317c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810308a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810308e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810309a:	e043      	b.n	8103124 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810309c:	693b      	ldr	r3, [r7, #16]
 810309e:	ee07 3a90 	vmov	s15, r3
 81030a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103188 <HAL_RCC_GetSysClockFreq+0x2f0>
 81030aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030ae:	4b2f      	ldr	r3, [pc, #188]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030b6:	ee07 3a90 	vmov	s15, r3
 81030ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030be:	ed97 6a02 	vldr	s12, [r7, #8]
 81030c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810317c <HAL_RCC_GetSysClockFreq+0x2e4>
 81030c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030de:	e021      	b.n	8103124 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81030e0:	693b      	ldr	r3, [r7, #16]
 81030e2:	ee07 3a90 	vmov	s15, r3
 81030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103184 <HAL_RCC_GetSysClockFreq+0x2ec>
 81030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030f2:	4b1e      	ldr	r3, [pc, #120]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030fa:	ee07 3a90 	vmov	s15, r3
 81030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103102:	ed97 6a02 	vldr	s12, [r7, #8]
 8103106:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810317c <HAL_RCC_GetSysClockFreq+0x2e4>
 810310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810311e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103122:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103124:	4b11      	ldr	r3, [pc, #68]	; (810316c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103128:	0a5b      	lsrs	r3, r3, #9
 810312a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810312e:	3301      	adds	r3, #1
 8103130:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103132:	683b      	ldr	r3, [r7, #0]
 8103134:	ee07 3a90 	vmov	s15, r3
 8103138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810313c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103148:	ee17 3a90 	vmov	r3, s15
 810314c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810314e:	e005      	b.n	810315c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103150:	2300      	movs	r3, #0
 8103152:	61bb      	str	r3, [r7, #24]
    break;
 8103154:	e002      	b.n	810315c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103156:	4b07      	ldr	r3, [pc, #28]	; (8103174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103158:	61bb      	str	r3, [r7, #24]
    break;
 810315a:	bf00      	nop
  }

  return sysclockfreq;
 810315c:	69bb      	ldr	r3, [r7, #24]
}
 810315e:	4618      	mov	r0, r3
 8103160:	3724      	adds	r7, #36	; 0x24
 8103162:	46bd      	mov	sp, r7
 8103164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103168:	4770      	bx	lr
 810316a:	bf00      	nop
 810316c:	58024400 	.word	0x58024400
 8103170:	03d09000 	.word	0x03d09000
 8103174:	003d0900 	.word	0x003d0900
 8103178:	007a1200 	.word	0x007a1200
 810317c:	46000000 	.word	0x46000000
 8103180:	4c742400 	.word	0x4c742400
 8103184:	4a742400 	.word	0x4a742400
 8103188:	4af42400 	.word	0x4af42400

0810318c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810318c:	b580      	push	{r7, lr}
 810318e:	b086      	sub	sp, #24
 8103190:	af00      	add	r7, sp, #0
 8103192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103194:	2300      	movs	r3, #0
 8103196:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103198:	2300      	movs	r3, #0
 810319a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81031a4:	2b00      	cmp	r3, #0
 81031a6:	d03f      	beq.n	8103228 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81031ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81031b0:	d02a      	beq.n	8103208 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81031b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81031b6:	d824      	bhi.n	8103202 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81031b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031bc:	d018      	beq.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81031be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031c2:	d81e      	bhi.n	8103202 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81031c4:	2b00      	cmp	r3, #0
 81031c6:	d003      	beq.n	81031d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81031c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81031cc:	d007      	beq.n	81031de <HAL_RCCEx_PeriphCLKConfig+0x52>
 81031ce:	e018      	b.n	8103202 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031d0:	4bab      	ldr	r3, [pc, #684]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031d4:	4aaa      	ldr	r2, [pc, #680]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81031dc:	e015      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	3304      	adds	r3, #4
 81031e2:	2102      	movs	r1, #2
 81031e4:	4618      	mov	r0, r3
 81031e6:	f000 ff11 	bl	810400c <RCCEx_PLL2_Config>
 81031ea:	4603      	mov	r3, r0
 81031ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81031ee:	e00c      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	3324      	adds	r3, #36	; 0x24
 81031f4:	2102      	movs	r1, #2
 81031f6:	4618      	mov	r0, r3
 81031f8:	f000 ffba 	bl	8104170 <RCCEx_PLL3_Config>
 81031fc:	4603      	mov	r3, r0
 81031fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103200:	e003      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103202:	2301      	movs	r3, #1
 8103204:	75fb      	strb	r3, [r7, #23]
      break;
 8103206:	e000      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103208:	bf00      	nop
    }

    if(ret == HAL_OK)
 810320a:	7dfb      	ldrb	r3, [r7, #23]
 810320c:	2b00      	cmp	r3, #0
 810320e:	d109      	bne.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103210:	4b9b      	ldr	r3, [pc, #620]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810321c:	4998      	ldr	r1, [pc, #608]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810321e:	4313      	orrs	r3, r2
 8103220:	650b      	str	r3, [r1, #80]	; 0x50
 8103222:	e001      	b.n	8103228 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103224:	7dfb      	ldrb	r3, [r7, #23]
 8103226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103230:	2b00      	cmp	r3, #0
 8103232:	d03d      	beq.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103238:	2b04      	cmp	r3, #4
 810323a:	d826      	bhi.n	810328a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 810323c:	a201      	add	r2, pc, #4	; (adr r2, 8103244 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103242:	bf00      	nop
 8103244:	08103259 	.word	0x08103259
 8103248:	08103267 	.word	0x08103267
 810324c:	08103279 	.word	0x08103279
 8103250:	08103291 	.word	0x08103291
 8103254:	08103291 	.word	0x08103291
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103258:	4b89      	ldr	r3, [pc, #548]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810325c:	4a88      	ldr	r2, [pc, #544]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810325e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103264:	e015      	b.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	3304      	adds	r3, #4
 810326a:	2100      	movs	r1, #0
 810326c:	4618      	mov	r0, r3
 810326e:	f000 fecd 	bl	810400c <RCCEx_PLL2_Config>
 8103272:	4603      	mov	r3, r0
 8103274:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103276:	e00c      	b.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	3324      	adds	r3, #36	; 0x24
 810327c:	2100      	movs	r1, #0
 810327e:	4618      	mov	r0, r3
 8103280:	f000 ff76 	bl	8104170 <RCCEx_PLL3_Config>
 8103284:	4603      	mov	r3, r0
 8103286:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103288:	e003      	b.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810328a:	2301      	movs	r3, #1
 810328c:	75fb      	strb	r3, [r7, #23]
      break;
 810328e:	e000      	b.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103292:	7dfb      	ldrb	r3, [r7, #23]
 8103294:	2b00      	cmp	r3, #0
 8103296:	d109      	bne.n	81032ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103298:	4b79      	ldr	r3, [pc, #484]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810329c:	f023 0207 	bic.w	r2, r3, #7
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032a4:	4976      	ldr	r1, [pc, #472]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032a6:	4313      	orrs	r3, r2
 81032a8:	650b      	str	r3, [r1, #80]	; 0x50
 81032aa:	e001      	b.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ac:	7dfb      	ldrb	r3, [r7, #23]
 81032ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d042      	beq.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81032c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81032c4:	d02b      	beq.n	810331e <HAL_RCCEx_PeriphCLKConfig+0x192>
 81032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81032ca:	d825      	bhi.n	8103318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81032cc:	2bc0      	cmp	r3, #192	; 0xc0
 81032ce:	d028      	beq.n	8103322 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81032d0:	2bc0      	cmp	r3, #192	; 0xc0
 81032d2:	d821      	bhi.n	8103318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81032d4:	2b80      	cmp	r3, #128	; 0x80
 81032d6:	d016      	beq.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81032d8:	2b80      	cmp	r3, #128	; 0x80
 81032da:	d81d      	bhi.n	8103318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81032dc:	2b00      	cmp	r3, #0
 81032de:	d002      	beq.n	81032e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81032e0:	2b40      	cmp	r3, #64	; 0x40
 81032e2:	d007      	beq.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81032e4:	e018      	b.n	8103318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032e6:	4b66      	ldr	r3, [pc, #408]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032ea:	4a65      	ldr	r2, [pc, #404]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81032f2:	e017      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	3304      	adds	r3, #4
 81032f8:	2100      	movs	r1, #0
 81032fa:	4618      	mov	r0, r3
 81032fc:	f000 fe86 	bl	810400c <RCCEx_PLL2_Config>
 8103300:	4603      	mov	r3, r0
 8103302:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103304:	e00e      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	3324      	adds	r3, #36	; 0x24
 810330a:	2100      	movs	r1, #0
 810330c:	4618      	mov	r0, r3
 810330e:	f000 ff2f 	bl	8104170 <RCCEx_PLL3_Config>
 8103312:	4603      	mov	r3, r0
 8103314:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103316:	e005      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103318:	2301      	movs	r3, #1
 810331a:	75fb      	strb	r3, [r7, #23]
      break;
 810331c:	e002      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810331e:	bf00      	nop
 8103320:	e000      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103324:	7dfb      	ldrb	r3, [r7, #23]
 8103326:	2b00      	cmp	r3, #0
 8103328:	d109      	bne.n	810333e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810332a:	4b55      	ldr	r3, [pc, #340]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810332e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103336:	4952      	ldr	r1, [pc, #328]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103338:	4313      	orrs	r3, r2
 810333a:	650b      	str	r3, [r1, #80]	; 0x50
 810333c:	e001      	b.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810333e:	7dfb      	ldrb	r3, [r7, #23]
 8103340:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	681b      	ldr	r3, [r3, #0]
 8103346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810334a:	2b00      	cmp	r3, #0
 810334c:	d049      	beq.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103354:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103358:	d030      	beq.n	81033bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 810335a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810335e:	d82a      	bhi.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103360:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103364:	d02c      	beq.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103366:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810336a:	d824      	bhi.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810336c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103370:	d018      	beq.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103376:	d81e      	bhi.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103378:	2b00      	cmp	r3, #0
 810337a:	d003      	beq.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810337c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103380:	d007      	beq.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103382:	e018      	b.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103384:	4b3e      	ldr	r3, [pc, #248]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103388:	4a3d      	ldr	r2, [pc, #244]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810338e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103390:	e017      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	3304      	adds	r3, #4
 8103396:	2100      	movs	r1, #0
 8103398:	4618      	mov	r0, r3
 810339a:	f000 fe37 	bl	810400c <RCCEx_PLL2_Config>
 810339e:	4603      	mov	r3, r0
 81033a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81033a2:	e00e      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	3324      	adds	r3, #36	; 0x24
 81033a8:	2100      	movs	r1, #0
 81033aa:	4618      	mov	r0, r3
 81033ac:	f000 fee0 	bl	8104170 <RCCEx_PLL3_Config>
 81033b0:	4603      	mov	r3, r0
 81033b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81033b4:	e005      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81033b6:	2301      	movs	r3, #1
 81033b8:	75fb      	strb	r3, [r7, #23]
      break;
 81033ba:	e002      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81033bc:	bf00      	nop
 81033be:	e000      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81033c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033c2:	7dfb      	ldrb	r3, [r7, #23]
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d10a      	bne.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81033c8:	4b2d      	ldr	r3, [pc, #180]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81033cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81033d6:	492a      	ldr	r1, [pc, #168]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033d8:	4313      	orrs	r3, r2
 81033da:	658b      	str	r3, [r1, #88]	; 0x58
 81033dc:	e001      	b.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033de:	7dfb      	ldrb	r3, [r7, #23]
 81033e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d04c      	beq.n	8103488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81033f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81033f8:	d030      	beq.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81033fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81033fe:	d82a      	bhi.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103400:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103404:	d02c      	beq.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810340a:	d824      	bhi.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810340c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103410:	d018      	beq.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103416:	d81e      	bhi.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103418:	2b00      	cmp	r3, #0
 810341a:	d003      	beq.n	8103424 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810341c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103420:	d007      	beq.n	8103432 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103422:	e018      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103424:	4b16      	ldr	r3, [pc, #88]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103428:	4a15      	ldr	r2, [pc, #84]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810342a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810342e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103430:	e017      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	3304      	adds	r3, #4
 8103436:	2100      	movs	r1, #0
 8103438:	4618      	mov	r0, r3
 810343a:	f000 fde7 	bl	810400c <RCCEx_PLL2_Config>
 810343e:	4603      	mov	r3, r0
 8103440:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103442:	e00e      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	3324      	adds	r3, #36	; 0x24
 8103448:	2100      	movs	r1, #0
 810344a:	4618      	mov	r0, r3
 810344c:	f000 fe90 	bl	8104170 <RCCEx_PLL3_Config>
 8103450:	4603      	mov	r3, r0
 8103452:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103454:	e005      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103456:	2301      	movs	r3, #1
 8103458:	75fb      	strb	r3, [r7, #23]
      break;
 810345a:	e002      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810345c:	bf00      	nop
 810345e:	e000      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103462:	7dfb      	ldrb	r3, [r7, #23]
 8103464:	2b00      	cmp	r3, #0
 8103466:	d10d      	bne.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103468:	4b05      	ldr	r3, [pc, #20]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810346c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103476:	4902      	ldr	r1, [pc, #8]	; (8103480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103478:	4313      	orrs	r3, r2
 810347a:	658b      	str	r3, [r1, #88]	; 0x58
 810347c:	e004      	b.n	8103488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810347e:	bf00      	nop
 8103480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103484:	7dfb      	ldrb	r3, [r7, #23]
 8103486:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	681b      	ldr	r3, [r3, #0]
 810348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103490:	2b00      	cmp	r3, #0
 8103492:	d032      	beq.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103498:	2b30      	cmp	r3, #48	; 0x30
 810349a:	d01c      	beq.n	81034d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810349c:	2b30      	cmp	r3, #48	; 0x30
 810349e:	d817      	bhi.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81034a0:	2b20      	cmp	r3, #32
 81034a2:	d00c      	beq.n	81034be <HAL_RCCEx_PeriphCLKConfig+0x332>
 81034a4:	2b20      	cmp	r3, #32
 81034a6:	d813      	bhi.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	d016      	beq.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81034ac:	2b10      	cmp	r3, #16
 81034ae:	d10f      	bne.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034b0:	4baf      	ldr	r3, [pc, #700]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034b4:	4aae      	ldr	r2, [pc, #696]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81034bc:	e00e      	b.n	81034dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	3304      	adds	r3, #4
 81034c2:	2102      	movs	r1, #2
 81034c4:	4618      	mov	r0, r3
 81034c6:	f000 fda1 	bl	810400c <RCCEx_PLL2_Config>
 81034ca:	4603      	mov	r3, r0
 81034cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81034ce:	e005      	b.n	81034dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81034d0:	2301      	movs	r3, #1
 81034d2:	75fb      	strb	r3, [r7, #23]
      break;
 81034d4:	e002      	b.n	81034dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81034d6:	bf00      	nop
 81034d8:	e000      	b.n	81034dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81034da:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034dc:	7dfb      	ldrb	r3, [r7, #23]
 81034de:	2b00      	cmp	r3, #0
 81034e0:	d109      	bne.n	81034f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81034e2:	4ba3      	ldr	r3, [pc, #652]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81034e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81034ee:	49a0      	ldr	r1, [pc, #640]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034f0:	4313      	orrs	r3, r2
 81034f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81034f4:	e001      	b.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034f6:	7dfb      	ldrb	r3, [r7, #23]
 81034f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103502:	2b00      	cmp	r3, #0
 8103504:	d047      	beq.n	8103596 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810350a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810350e:	d030      	beq.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103514:	d82a      	bhi.n	810356c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810351a:	d02c      	beq.n	8103576 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810351c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103520:	d824      	bhi.n	810356c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103526:	d018      	beq.n	810355a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810352c:	d81e      	bhi.n	810356c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810352e:	2b00      	cmp	r3, #0
 8103530:	d003      	beq.n	810353a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103536:	d007      	beq.n	8103548 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103538:	e018      	b.n	810356c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810353a:	4b8d      	ldr	r3, [pc, #564]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810353e:	4a8c      	ldr	r2, [pc, #560]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103546:	e017      	b.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	3304      	adds	r3, #4
 810354c:	2100      	movs	r1, #0
 810354e:	4618      	mov	r0, r3
 8103550:	f000 fd5c 	bl	810400c <RCCEx_PLL2_Config>
 8103554:	4603      	mov	r3, r0
 8103556:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103558:	e00e      	b.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	3324      	adds	r3, #36	; 0x24
 810355e:	2100      	movs	r1, #0
 8103560:	4618      	mov	r0, r3
 8103562:	f000 fe05 	bl	8104170 <RCCEx_PLL3_Config>
 8103566:	4603      	mov	r3, r0
 8103568:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810356a:	e005      	b.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810356c:	2301      	movs	r3, #1
 810356e:	75fb      	strb	r3, [r7, #23]
      break;
 8103570:	e002      	b.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103572:	bf00      	nop
 8103574:	e000      	b.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103578:	7dfb      	ldrb	r3, [r7, #23]
 810357a:	2b00      	cmp	r3, #0
 810357c:	d109      	bne.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810357e:	4b7c      	ldr	r3, [pc, #496]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103582:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810358a:	4979      	ldr	r1, [pc, #484]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810358c:	4313      	orrs	r3, r2
 810358e:	650b      	str	r3, [r1, #80]	; 0x50
 8103590:	e001      	b.n	8103596 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103592:	7dfb      	ldrb	r3, [r7, #23]
 8103594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d049      	beq.n	8103636 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81035a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81035aa:	d02e      	beq.n	810360a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81035b0:	d828      	bhi.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81035b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81035b6:	d02a      	beq.n	810360e <HAL_RCCEx_PeriphCLKConfig+0x482>
 81035b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81035bc:	d822      	bhi.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81035be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81035c2:	d026      	beq.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81035c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81035c8:	d81c      	bhi.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81035ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035ce:	d010      	beq.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 81035d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035d4:	d816      	bhi.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81035d6:	2b00      	cmp	r3, #0
 81035d8:	d01d      	beq.n	8103616 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81035de:	d111      	bne.n	8103604 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	3304      	adds	r3, #4
 81035e4:	2101      	movs	r1, #1
 81035e6:	4618      	mov	r0, r3
 81035e8:	f000 fd10 	bl	810400c <RCCEx_PLL2_Config>
 81035ec:	4603      	mov	r3, r0
 81035ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81035f0:	e012      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	3324      	adds	r3, #36	; 0x24
 81035f6:	2101      	movs	r1, #1
 81035f8:	4618      	mov	r0, r3
 81035fa:	f000 fdb9 	bl	8104170 <RCCEx_PLL3_Config>
 81035fe:	4603      	mov	r3, r0
 8103600:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103602:	e009      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103604:	2301      	movs	r3, #1
 8103606:	75fb      	strb	r3, [r7, #23]
      break;
 8103608:	e006      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810360a:	bf00      	nop
 810360c:	e004      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810360e:	bf00      	nop
 8103610:	e002      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103612:	bf00      	nop
 8103614:	e000      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103618:	7dfb      	ldrb	r3, [r7, #23]
 810361a:	2b00      	cmp	r3, #0
 810361c:	d109      	bne.n	8103632 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810361e:	4b54      	ldr	r3, [pc, #336]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103622:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810362a:	4951      	ldr	r1, [pc, #324]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810362c:	4313      	orrs	r3, r2
 810362e:	650b      	str	r3, [r1, #80]	; 0x50
 8103630:	e001      	b.n	8103636 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103632:	7dfb      	ldrb	r3, [r7, #23]
 8103634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810363e:	2b00      	cmp	r3, #0
 8103640:	d04b      	beq.n	81036da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810364c:	d02e      	beq.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 810364e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103652:	d828      	bhi.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103658:	d02a      	beq.n	81036b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810365a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810365e:	d822      	bhi.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103664:	d026      	beq.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103666:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810366a:	d81c      	bhi.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810366c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103670:	d010      	beq.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103676:	d816      	bhi.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103678:	2b00      	cmp	r3, #0
 810367a:	d01d      	beq.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810367c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103680:	d111      	bne.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	3304      	adds	r3, #4
 8103686:	2101      	movs	r1, #1
 8103688:	4618      	mov	r0, r3
 810368a:	f000 fcbf 	bl	810400c <RCCEx_PLL2_Config>
 810368e:	4603      	mov	r3, r0
 8103690:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103692:	e012      	b.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	3324      	adds	r3, #36	; 0x24
 8103698:	2101      	movs	r1, #1
 810369a:	4618      	mov	r0, r3
 810369c:	f000 fd68 	bl	8104170 <RCCEx_PLL3_Config>
 81036a0:	4603      	mov	r3, r0
 81036a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81036a4:	e009      	b.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81036a6:	2301      	movs	r3, #1
 81036a8:	75fb      	strb	r3, [r7, #23]
      break;
 81036aa:	e006      	b.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81036ac:	bf00      	nop
 81036ae:	e004      	b.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81036b0:	bf00      	nop
 81036b2:	e002      	b.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81036b4:	bf00      	nop
 81036b6:	e000      	b.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81036b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036ba:	7dfb      	ldrb	r3, [r7, #23]
 81036bc:	2b00      	cmp	r3, #0
 81036be:	d10a      	bne.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81036c0:	4b2b      	ldr	r3, [pc, #172]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81036ce:	4928      	ldr	r1, [pc, #160]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036d0:	4313      	orrs	r3, r2
 81036d2:	658b      	str	r3, [r1, #88]	; 0x58
 81036d4:	e001      	b.n	81036da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036d6:	7dfb      	ldrb	r3, [r7, #23]
 81036d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81036e2:	2b00      	cmp	r3, #0
 81036e4:	d02f      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81036ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81036ee:	d00e      	beq.n	810370e <HAL_RCCEx_PeriphCLKConfig+0x582>
 81036f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81036f4:	d814      	bhi.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81036f6:	2b00      	cmp	r3, #0
 81036f8:	d015      	beq.n	8103726 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81036fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81036fe:	d10f      	bne.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103700:	4b1b      	ldr	r3, [pc, #108]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103704:	4a1a      	ldr	r2, [pc, #104]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810370a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810370c:	e00c      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	3304      	adds	r3, #4
 8103712:	2101      	movs	r1, #1
 8103714:	4618      	mov	r0, r3
 8103716:	f000 fc79 	bl	810400c <RCCEx_PLL2_Config>
 810371a:	4603      	mov	r3, r0
 810371c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810371e:	e003      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103720:	2301      	movs	r3, #1
 8103722:	75fb      	strb	r3, [r7, #23]
      break;
 8103724:	e000      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103728:	7dfb      	ldrb	r3, [r7, #23]
 810372a:	2b00      	cmp	r3, #0
 810372c:	d109      	bne.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810372e:	4b10      	ldr	r3, [pc, #64]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103732:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810373a:	490d      	ldr	r1, [pc, #52]	; (8103770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810373c:	4313      	orrs	r3, r2
 810373e:	650b      	str	r3, [r1, #80]	; 0x50
 8103740:	e001      	b.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103742:	7dfb      	ldrb	r3, [r7, #23]
 8103744:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810374e:	2b00      	cmp	r3, #0
 8103750:	d033      	beq.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103756:	2b03      	cmp	r3, #3
 8103758:	d81c      	bhi.n	8103794 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810375a:	a201      	add	r2, pc, #4	; (adr r2, 8103760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103760:	0810379b 	.word	0x0810379b
 8103764:	08103775 	.word	0x08103775
 8103768:	08103783 	.word	0x08103783
 810376c:	0810379b 	.word	0x0810379b
 8103770:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103774:	4bb9      	ldr	r3, [pc, #740]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103778:	4ab8      	ldr	r2, [pc, #736]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810377e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103780:	e00c      	b.n	810379c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	3304      	adds	r3, #4
 8103786:	2102      	movs	r1, #2
 8103788:	4618      	mov	r0, r3
 810378a:	f000 fc3f 	bl	810400c <RCCEx_PLL2_Config>
 810378e:	4603      	mov	r3, r0
 8103790:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103792:	e003      	b.n	810379c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103794:	2301      	movs	r3, #1
 8103796:	75fb      	strb	r3, [r7, #23]
      break;
 8103798:	e000      	b.n	810379c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810379a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810379c:	7dfb      	ldrb	r3, [r7, #23]
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d109      	bne.n	81037b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81037a2:	4bae      	ldr	r3, [pc, #696]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81037a6:	f023 0203 	bic.w	r2, r3, #3
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81037ae:	49ab      	ldr	r1, [pc, #684]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81037b0:	4313      	orrs	r3, r2
 81037b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81037b4:	e001      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037b6:	7dfb      	ldrb	r3, [r7, #23]
 81037b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	f000 8088 	beq.w	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81037c8:	4ba5      	ldr	r3, [pc, #660]	; (8103a60 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4aa4      	ldr	r2, [pc, #656]	; (8103a60 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81037ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81037d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81037d4:	f7fe f9c2 	bl	8101b5c <HAL_GetTick>
 81037d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81037da:	e009      	b.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81037dc:	f7fe f9be 	bl	8101b5c <HAL_GetTick>
 81037e0:	4602      	mov	r2, r0
 81037e2:	693b      	ldr	r3, [r7, #16]
 81037e4:	1ad3      	subs	r3, r2, r3
 81037e6:	2b64      	cmp	r3, #100	; 0x64
 81037e8:	d902      	bls.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81037ea:	2303      	movs	r3, #3
 81037ec:	75fb      	strb	r3, [r7, #23]
        break;
 81037ee:	e005      	b.n	81037fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81037f0:	4b9b      	ldr	r3, [pc, #620]	; (8103a60 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81037f8:	2b00      	cmp	r3, #0
 81037fa:	d0ef      	beq.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81037fc:	7dfb      	ldrb	r3, [r7, #23]
 81037fe:	2b00      	cmp	r3, #0
 8103800:	d168      	bne.n	81038d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103802:	4b96      	ldr	r3, [pc, #600]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810380c:	4053      	eors	r3, r2
 810380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103812:	2b00      	cmp	r3, #0
 8103814:	d013      	beq.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103816:	4b91      	ldr	r3, [pc, #580]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810381e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103820:	4b8e      	ldr	r3, [pc, #568]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103824:	4a8d      	ldr	r2, [pc, #564]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810382a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810382c:	4b8b      	ldr	r3, [pc, #556]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103830:	4a8a      	ldr	r2, [pc, #552]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103836:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103838:	4a88      	ldr	r2, [pc, #544]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810383a:	68fb      	ldr	r3, [r7, #12]
 810383c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103848:	d115      	bne.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810384a:	f7fe f987 	bl	8101b5c <HAL_GetTick>
 810384e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103850:	e00b      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103852:	f7fe f983 	bl	8101b5c <HAL_GetTick>
 8103856:	4602      	mov	r2, r0
 8103858:	693b      	ldr	r3, [r7, #16]
 810385a:	1ad3      	subs	r3, r2, r3
 810385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8103860:	4293      	cmp	r3, r2
 8103862:	d902      	bls.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103864:	2303      	movs	r3, #3
 8103866:	75fb      	strb	r3, [r7, #23]
            break;
 8103868:	e005      	b.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810386a:	4b7c      	ldr	r3, [pc, #496]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810386e:	f003 0302 	and.w	r3, r3, #2
 8103872:	2b00      	cmp	r3, #0
 8103874:	d0ed      	beq.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103876:	7dfb      	ldrb	r3, [r7, #23]
 8103878:	2b00      	cmp	r3, #0
 810387a:	d128      	bne.n	81038ce <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810388a:	d10f      	bne.n	81038ac <HAL_RCCEx_PeriphCLKConfig+0x720>
 810388c:	4b73      	ldr	r3, [pc, #460]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810388e:	691b      	ldr	r3, [r3, #16]
 8103890:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810389a:	091b      	lsrs	r3, r3, #4
 810389c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81038a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81038a4:	496d      	ldr	r1, [pc, #436]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038a6:	4313      	orrs	r3, r2
 81038a8:	610b      	str	r3, [r1, #16]
 81038aa:	e005      	b.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81038ac:	4b6b      	ldr	r3, [pc, #428]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038ae:	691b      	ldr	r3, [r3, #16]
 81038b0:	4a6a      	ldr	r2, [pc, #424]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81038b6:	6113      	str	r3, [r2, #16]
 81038b8:	4b68      	ldr	r3, [pc, #416]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81038c6:	4965      	ldr	r1, [pc, #404]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038c8:	4313      	orrs	r3, r2
 81038ca:	670b      	str	r3, [r1, #112]	; 0x70
 81038cc:	e004      	b.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81038ce:	7dfb      	ldrb	r3, [r7, #23]
 81038d0:	75bb      	strb	r3, [r7, #22]
 81038d2:	e001      	b.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038d4:	7dfb      	ldrb	r3, [r7, #23]
 81038d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	f003 0301 	and.w	r3, r3, #1
 81038e0:	2b00      	cmp	r3, #0
 81038e2:	d07e      	beq.n	81039e2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81038e8:	2b28      	cmp	r3, #40	; 0x28
 81038ea:	d867      	bhi.n	81039bc <HAL_RCCEx_PeriphCLKConfig+0x830>
 81038ec:	a201      	add	r2, pc, #4	; (adr r2, 81038f4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038f2:	bf00      	nop
 81038f4:	081039c3 	.word	0x081039c3
 81038f8:	081039bd 	.word	0x081039bd
 81038fc:	081039bd 	.word	0x081039bd
 8103900:	081039bd 	.word	0x081039bd
 8103904:	081039bd 	.word	0x081039bd
 8103908:	081039bd 	.word	0x081039bd
 810390c:	081039bd 	.word	0x081039bd
 8103910:	081039bd 	.word	0x081039bd
 8103914:	08103999 	.word	0x08103999
 8103918:	081039bd 	.word	0x081039bd
 810391c:	081039bd 	.word	0x081039bd
 8103920:	081039bd 	.word	0x081039bd
 8103924:	081039bd 	.word	0x081039bd
 8103928:	081039bd 	.word	0x081039bd
 810392c:	081039bd 	.word	0x081039bd
 8103930:	081039bd 	.word	0x081039bd
 8103934:	081039ab 	.word	0x081039ab
 8103938:	081039bd 	.word	0x081039bd
 810393c:	081039bd 	.word	0x081039bd
 8103940:	081039bd 	.word	0x081039bd
 8103944:	081039bd 	.word	0x081039bd
 8103948:	081039bd 	.word	0x081039bd
 810394c:	081039bd 	.word	0x081039bd
 8103950:	081039bd 	.word	0x081039bd
 8103954:	081039c3 	.word	0x081039c3
 8103958:	081039bd 	.word	0x081039bd
 810395c:	081039bd 	.word	0x081039bd
 8103960:	081039bd 	.word	0x081039bd
 8103964:	081039bd 	.word	0x081039bd
 8103968:	081039bd 	.word	0x081039bd
 810396c:	081039bd 	.word	0x081039bd
 8103970:	081039bd 	.word	0x081039bd
 8103974:	081039c3 	.word	0x081039c3
 8103978:	081039bd 	.word	0x081039bd
 810397c:	081039bd 	.word	0x081039bd
 8103980:	081039bd 	.word	0x081039bd
 8103984:	081039bd 	.word	0x081039bd
 8103988:	081039bd 	.word	0x081039bd
 810398c:	081039bd 	.word	0x081039bd
 8103990:	081039bd 	.word	0x081039bd
 8103994:	081039c3 	.word	0x081039c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	3304      	adds	r3, #4
 810399c:	2101      	movs	r1, #1
 810399e:	4618      	mov	r0, r3
 81039a0:	f000 fb34 	bl	810400c <RCCEx_PLL2_Config>
 81039a4:	4603      	mov	r3, r0
 81039a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81039a8:	e00c      	b.n	81039c4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	3324      	adds	r3, #36	; 0x24
 81039ae:	2101      	movs	r1, #1
 81039b0:	4618      	mov	r0, r3
 81039b2:	f000 fbdd 	bl	8104170 <RCCEx_PLL3_Config>
 81039b6:	4603      	mov	r3, r0
 81039b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81039ba:	e003      	b.n	81039c4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039bc:	2301      	movs	r3, #1
 81039be:	75fb      	strb	r3, [r7, #23]
      break;
 81039c0:	e000      	b.n	81039c4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81039c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039c4:	7dfb      	ldrb	r3, [r7, #23]
 81039c6:	2b00      	cmp	r3, #0
 81039c8:	d109      	bne.n	81039de <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81039ca:	4b24      	ldr	r3, [pc, #144]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81039d6:	4921      	ldr	r1, [pc, #132]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039d8:	4313      	orrs	r3, r2
 81039da:	654b      	str	r3, [r1, #84]	; 0x54
 81039dc:	e001      	b.n	81039e2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039de:	7dfb      	ldrb	r3, [r7, #23]
 81039e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	f003 0302 	and.w	r3, r3, #2
 81039ea:	2b00      	cmp	r3, #0
 81039ec:	d03c      	beq.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81039f2:	2b05      	cmp	r3, #5
 81039f4:	d820      	bhi.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81039f6:	a201      	add	r2, pc, #4	; (adr r2, 81039fc <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039fc:	08103a3f 	.word	0x08103a3f
 8103a00:	08103a15 	.word	0x08103a15
 8103a04:	08103a27 	.word	0x08103a27
 8103a08:	08103a3f 	.word	0x08103a3f
 8103a0c:	08103a3f 	.word	0x08103a3f
 8103a10:	08103a3f 	.word	0x08103a3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	3304      	adds	r3, #4
 8103a18:	2101      	movs	r1, #1
 8103a1a:	4618      	mov	r0, r3
 8103a1c:	f000 faf6 	bl	810400c <RCCEx_PLL2_Config>
 8103a20:	4603      	mov	r3, r0
 8103a22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103a24:	e00c      	b.n	8103a40 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	3324      	adds	r3, #36	; 0x24
 8103a2a:	2101      	movs	r1, #1
 8103a2c:	4618      	mov	r0, r3
 8103a2e:	f000 fb9f 	bl	8104170 <RCCEx_PLL3_Config>
 8103a32:	4603      	mov	r3, r0
 8103a34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103a36:	e003      	b.n	8103a40 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a38:	2301      	movs	r3, #1
 8103a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8103a3c:	e000      	b.n	8103a40 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a40:	7dfb      	ldrb	r3, [r7, #23]
 8103a42:	2b00      	cmp	r3, #0
 8103a44:	d10e      	bne.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103a46:	4b05      	ldr	r3, [pc, #20]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a4a:	f023 0207 	bic.w	r2, r3, #7
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103a52:	4902      	ldr	r1, [pc, #8]	; (8103a5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a54:	4313      	orrs	r3, r2
 8103a56:	654b      	str	r3, [r1, #84]	; 0x54
 8103a58:	e006      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103a5a:	bf00      	nop
 8103a5c:	58024400 	.word	0x58024400
 8103a60:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a64:	7dfb      	ldrb	r3, [r7, #23]
 8103a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	f003 0304 	and.w	r3, r3, #4
 8103a70:	2b00      	cmp	r3, #0
 8103a72:	d039      	beq.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103a7a:	2b05      	cmp	r3, #5
 8103a7c:	d820      	bhi.n	8103ac0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103a7e:	a201      	add	r2, pc, #4	; (adr r2, 8103a84 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a84:	08103ac7 	.word	0x08103ac7
 8103a88:	08103a9d 	.word	0x08103a9d
 8103a8c:	08103aaf 	.word	0x08103aaf
 8103a90:	08103ac7 	.word	0x08103ac7
 8103a94:	08103ac7 	.word	0x08103ac7
 8103a98:	08103ac7 	.word	0x08103ac7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	3304      	adds	r3, #4
 8103aa0:	2101      	movs	r1, #1
 8103aa2:	4618      	mov	r0, r3
 8103aa4:	f000 fab2 	bl	810400c <RCCEx_PLL2_Config>
 8103aa8:	4603      	mov	r3, r0
 8103aaa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103aac:	e00c      	b.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	3324      	adds	r3, #36	; 0x24
 8103ab2:	2101      	movs	r1, #1
 8103ab4:	4618      	mov	r0, r3
 8103ab6:	f000 fb5b 	bl	8104170 <RCCEx_PLL3_Config>
 8103aba:	4603      	mov	r3, r0
 8103abc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103abe:	e003      	b.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ac0:	2301      	movs	r3, #1
 8103ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8103ac4:	e000      	b.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ac8:	7dfb      	ldrb	r3, [r7, #23]
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	d10a      	bne.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103ace:	4bb7      	ldr	r3, [pc, #732]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ad2:	f023 0207 	bic.w	r2, r3, #7
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103adc:	49b3      	ldr	r1, [pc, #716]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ade:	4313      	orrs	r3, r2
 8103ae0:	658b      	str	r3, [r1, #88]	; 0x58
 8103ae2:	e001      	b.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ae4:	7dfb      	ldrb	r3, [r7, #23]
 8103ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	f003 0320 	and.w	r3, r3, #32
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d04b      	beq.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103afe:	d02e      	beq.n	8103b5e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103b04:	d828      	bhi.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103b0a:	d02a      	beq.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103b10:	d822      	bhi.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103b16:	d026      	beq.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103b18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103b1c:	d81c      	bhi.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103b22:	d010      	beq.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103b28:	d816      	bhi.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	d01d      	beq.n	8103b6a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103b32:	d111      	bne.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	3304      	adds	r3, #4
 8103b38:	2100      	movs	r1, #0
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f000 fa66 	bl	810400c <RCCEx_PLL2_Config>
 8103b40:	4603      	mov	r3, r0
 8103b42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103b44:	e012      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	3324      	adds	r3, #36	; 0x24
 8103b4a:	2102      	movs	r1, #2
 8103b4c:	4618      	mov	r0, r3
 8103b4e:	f000 fb0f 	bl	8104170 <RCCEx_PLL3_Config>
 8103b52:	4603      	mov	r3, r0
 8103b54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103b56:	e009      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b58:	2301      	movs	r3, #1
 8103b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8103b5c:	e006      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103b5e:	bf00      	nop
 8103b60:	e004      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103b62:	bf00      	nop
 8103b64:	e002      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103b66:	bf00      	nop
 8103b68:	e000      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b6c:	7dfb      	ldrb	r3, [r7, #23]
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d10a      	bne.n	8103b88 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103b72:	4b8e      	ldr	r3, [pc, #568]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103b80:	498a      	ldr	r1, [pc, #552]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b82:	4313      	orrs	r3, r2
 8103b84:	654b      	str	r3, [r1, #84]	; 0x54
 8103b86:	e001      	b.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b88:	7dfb      	ldrb	r3, [r7, #23]
 8103b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	681b      	ldr	r3, [r3, #0]
 8103b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103b94:	2b00      	cmp	r3, #0
 8103b96:	d04b      	beq.n	8103c30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103b9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103ba2:	d02e      	beq.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103ba4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103ba8:	d828      	bhi.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103bae:	d02a      	beq.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103bb4:	d822      	bhi.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103bba:	d026      	beq.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103bbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103bc0:	d81c      	bhi.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103bc6:	d010      	beq.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103bcc:	d816      	bhi.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	d01d      	beq.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103bd6:	d111      	bne.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	3304      	adds	r3, #4
 8103bdc:	2100      	movs	r1, #0
 8103bde:	4618      	mov	r0, r3
 8103be0:	f000 fa14 	bl	810400c <RCCEx_PLL2_Config>
 8103be4:	4603      	mov	r3, r0
 8103be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103be8:	e012      	b.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	3324      	adds	r3, #36	; 0x24
 8103bee:	2102      	movs	r1, #2
 8103bf0:	4618      	mov	r0, r3
 8103bf2:	f000 fabd 	bl	8104170 <RCCEx_PLL3_Config>
 8103bf6:	4603      	mov	r3, r0
 8103bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103bfa:	e009      	b.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bfc:	2301      	movs	r3, #1
 8103bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8103c00:	e006      	b.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c02:	bf00      	nop
 8103c04:	e004      	b.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c06:	bf00      	nop
 8103c08:	e002      	b.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c0a:	bf00      	nop
 8103c0c:	e000      	b.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c10:	7dfb      	ldrb	r3, [r7, #23]
 8103c12:	2b00      	cmp	r3, #0
 8103c14:	d10a      	bne.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103c16:	4b65      	ldr	r3, [pc, #404]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103c24:	4961      	ldr	r1, [pc, #388]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c26:	4313      	orrs	r3, r2
 8103c28:	658b      	str	r3, [r1, #88]	; 0x58
 8103c2a:	e001      	b.n	8103c30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c2c:	7dfb      	ldrb	r3, [r7, #23]
 8103c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	681b      	ldr	r3, [r3, #0]
 8103c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103c38:	2b00      	cmp	r3, #0
 8103c3a:	d04b      	beq.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103c42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103c46:	d02e      	beq.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103c48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103c4c:	d828      	bhi.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103c52:	d02a      	beq.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103c58:	d822      	bhi.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103c5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103c5e:	d026      	beq.n	8103cae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103c60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103c64:	d81c      	bhi.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c6a:	d010      	beq.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c70:	d816      	bhi.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103c72:	2b00      	cmp	r3, #0
 8103c74:	d01d      	beq.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c7a:	d111      	bne.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	3304      	adds	r3, #4
 8103c80:	2100      	movs	r1, #0
 8103c82:	4618      	mov	r0, r3
 8103c84:	f000 f9c2 	bl	810400c <RCCEx_PLL2_Config>
 8103c88:	4603      	mov	r3, r0
 8103c8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103c8c:	e012      	b.n	8103cb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	3324      	adds	r3, #36	; 0x24
 8103c92:	2102      	movs	r1, #2
 8103c94:	4618      	mov	r0, r3
 8103c96:	f000 fa6b 	bl	8104170 <RCCEx_PLL3_Config>
 8103c9a:	4603      	mov	r3, r0
 8103c9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103c9e:	e009      	b.n	8103cb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ca0:	2301      	movs	r3, #1
 8103ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8103ca4:	e006      	b.n	8103cb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103ca6:	bf00      	nop
 8103ca8:	e004      	b.n	8103cb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103caa:	bf00      	nop
 8103cac:	e002      	b.n	8103cb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103cae:	bf00      	nop
 8103cb0:	e000      	b.n	8103cb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cb4:	7dfb      	ldrb	r3, [r7, #23]
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	d10a      	bne.n	8103cd0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103cba:	4b3c      	ldr	r3, [pc, #240]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103cc8:	4938      	ldr	r1, [pc, #224]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103cca:	4313      	orrs	r3, r2
 8103ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8103cce:	e001      	b.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cd0:	7dfb      	ldrb	r3, [r7, #23]
 8103cd2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	f003 0308 	and.w	r3, r3, #8
 8103cdc:	2b00      	cmp	r3, #0
 8103cde:	d01a      	beq.n	8103d16 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103cea:	d10a      	bne.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	3324      	adds	r3, #36	; 0x24
 8103cf0:	2102      	movs	r1, #2
 8103cf2:	4618      	mov	r0, r3
 8103cf4:	f000 fa3c 	bl	8104170 <RCCEx_PLL3_Config>
 8103cf8:	4603      	mov	r3, r0
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d001      	beq.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103cfe:	2301      	movs	r3, #1
 8103d00:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103d02:	4b2a      	ldr	r3, [pc, #168]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103d10:	4926      	ldr	r1, [pc, #152]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d12:	4313      	orrs	r3, r2
 8103d14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	681b      	ldr	r3, [r3, #0]
 8103d1a:	f003 0310 	and.w	r3, r3, #16
 8103d1e:	2b00      	cmp	r3, #0
 8103d20:	d01a      	beq.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103d2c:	d10a      	bne.n	8103d44 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	3324      	adds	r3, #36	; 0x24
 8103d32:	2102      	movs	r1, #2
 8103d34:	4618      	mov	r0, r3
 8103d36:	f000 fa1b 	bl	8104170 <RCCEx_PLL3_Config>
 8103d3a:	4603      	mov	r3, r0
 8103d3c:	2b00      	cmp	r3, #0
 8103d3e:	d001      	beq.n	8103d44 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103d40:	2301      	movs	r3, #1
 8103d42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103d44:	4b19      	ldr	r3, [pc, #100]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103d52:	4916      	ldr	r1, [pc, #88]	; (8103dac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d54:	4313      	orrs	r3, r2
 8103d56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103d60:	2b00      	cmp	r3, #0
 8103d62:	d036      	beq.n	8103dd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d6e:	d01f      	beq.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d74:	d817      	bhi.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103d76:	2b00      	cmp	r3, #0
 8103d78:	d003      	beq.n	8103d82 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d7e:	d009      	beq.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103d80:	e011      	b.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	3304      	adds	r3, #4
 8103d86:	2100      	movs	r1, #0
 8103d88:	4618      	mov	r0, r3
 8103d8a:	f000 f93f 	bl	810400c <RCCEx_PLL2_Config>
 8103d8e:	4603      	mov	r3, r0
 8103d90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103d92:	e00e      	b.n	8103db2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	3324      	adds	r3, #36	; 0x24
 8103d98:	2102      	movs	r1, #2
 8103d9a:	4618      	mov	r0, r3
 8103d9c:	f000 f9e8 	bl	8104170 <RCCEx_PLL3_Config>
 8103da0:	4603      	mov	r3, r0
 8103da2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103da4:	e005      	b.n	8103db2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103da6:	2301      	movs	r3, #1
 8103da8:	75fb      	strb	r3, [r7, #23]
      break;
 8103daa:	e002      	b.n	8103db2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103dac:	58024400 	.word	0x58024400
      break;
 8103db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103db2:	7dfb      	ldrb	r3, [r7, #23]
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	d10a      	bne.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103db8:	4b93      	ldr	r3, [pc, #588]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103dc6:	4990      	ldr	r1, [pc, #576]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103dc8:	4313      	orrs	r3, r2
 8103dca:	658b      	str	r3, [r1, #88]	; 0x58
 8103dcc:	e001      	b.n	8103dd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dce:	7dfb      	ldrb	r3, [r7, #23]
 8103dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d033      	beq.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103de4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103de8:	d01c      	beq.n	8103e24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103dea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103dee:	d816      	bhi.n	8103e1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103df4:	d003      	beq.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103dfa:	d007      	beq.n	8103e0c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103dfc:	e00f      	b.n	8103e1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103dfe:	4b82      	ldr	r3, [pc, #520]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e02:	4a81      	ldr	r2, [pc, #516]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103e0a:	e00c      	b.n	8103e26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	3324      	adds	r3, #36	; 0x24
 8103e10:	2101      	movs	r1, #1
 8103e12:	4618      	mov	r0, r3
 8103e14:	f000 f9ac 	bl	8104170 <RCCEx_PLL3_Config>
 8103e18:	4603      	mov	r3, r0
 8103e1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103e1c:	e003      	b.n	8103e26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e1e:	2301      	movs	r3, #1
 8103e20:	75fb      	strb	r3, [r7, #23]
      break;
 8103e22:	e000      	b.n	8103e26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e26:	7dfb      	ldrb	r3, [r7, #23]
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	d10a      	bne.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103e2c:	4b76      	ldr	r3, [pc, #472]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103e3a:	4973      	ldr	r1, [pc, #460]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e3c:	4313      	orrs	r3, r2
 8103e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8103e40:	e001      	b.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e42:	7dfb      	ldrb	r3, [r7, #23]
 8103e44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	d029      	beq.n	8103ea6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e56:	2b00      	cmp	r3, #0
 8103e58:	d003      	beq.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e5e:	d007      	beq.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103e60:	e00f      	b.n	8103e82 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e62:	4b69      	ldr	r3, [pc, #420]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e66:	4a68      	ldr	r2, [pc, #416]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103e6e:	e00b      	b.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	3304      	adds	r3, #4
 8103e74:	2102      	movs	r1, #2
 8103e76:	4618      	mov	r0, r3
 8103e78:	f000 f8c8 	bl	810400c <RCCEx_PLL2_Config>
 8103e7c:	4603      	mov	r3, r0
 8103e7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103e80:	e002      	b.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103e82:	2301      	movs	r3, #1
 8103e84:	75fb      	strb	r3, [r7, #23]
      break;
 8103e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e88:	7dfb      	ldrb	r3, [r7, #23]
 8103e8a:	2b00      	cmp	r3, #0
 8103e8c:	d109      	bne.n	8103ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103e8e:	4b5e      	ldr	r3, [pc, #376]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e9a:	495b      	ldr	r1, [pc, #364]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103e9c:	4313      	orrs	r3, r2
 8103e9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103ea0:	e001      	b.n	8103ea6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ea2:	7dfb      	ldrb	r3, [r7, #23]
 8103ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	681b      	ldr	r3, [r3, #0]
 8103eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d00a      	beq.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	3324      	adds	r3, #36	; 0x24
 8103eb6:	2102      	movs	r1, #2
 8103eb8:	4618      	mov	r0, r3
 8103eba:	f000 f959 	bl	8104170 <RCCEx_PLL3_Config>
 8103ebe:	4603      	mov	r3, r0
 8103ec0:	2b00      	cmp	r3, #0
 8103ec2:	d001      	beq.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103ec4:	2301      	movs	r3, #1
 8103ec6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103ed0:	2b00      	cmp	r3, #0
 8103ed2:	d030      	beq.n	8103f36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103edc:	d017      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103ee2:	d811      	bhi.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103ee8:	d013      	beq.n	8103f12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103eee:	d80b      	bhi.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d010      	beq.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103ef8:	d106      	bne.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103efa:	4b43      	ldr	r3, [pc, #268]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103efe:	4a42      	ldr	r2, [pc, #264]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103f06:	e007      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f08:	2301      	movs	r3, #1
 8103f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8103f0c:	e004      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103f0e:	bf00      	nop
 8103f10:	e002      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103f12:	bf00      	nop
 8103f14:	e000      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f18:	7dfb      	ldrb	r3, [r7, #23]
 8103f1a:	2b00      	cmp	r3, #0
 8103f1c:	d109      	bne.n	8103f32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103f1e:	4b3a      	ldr	r3, [pc, #232]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103f2a:	4937      	ldr	r1, [pc, #220]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f2c:	4313      	orrs	r3, r2
 8103f2e:	654b      	str	r3, [r1, #84]	; 0x54
 8103f30:	e001      	b.n	8103f36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f32:	7dfb      	ldrb	r3, [r7, #23]
 8103f34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103f3e:	2b00      	cmp	r3, #0
 8103f40:	d008      	beq.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103f42:	4b31      	ldr	r3, [pc, #196]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f4e:	492e      	ldr	r1, [pc, #184]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f50:	4313      	orrs	r3, r2
 8103f52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103f5c:	2b00      	cmp	r3, #0
 8103f5e:	d009      	beq.n	8103f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103f60:	4b29      	ldr	r3, [pc, #164]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f62:	691b      	ldr	r3, [r3, #16]
 8103f64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103f6e:	4926      	ldr	r1, [pc, #152]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f70:	4313      	orrs	r3, r2
 8103f72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d008      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103f80:	4b21      	ldr	r3, [pc, #132]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103f8c:	491e      	ldr	r1, [pc, #120]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f8e:	4313      	orrs	r3, r2
 8103f90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103f9a:	2b00      	cmp	r3, #0
 8103f9c:	d00d      	beq.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103f9e:	4b1a      	ldr	r3, [pc, #104]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fa0:	691b      	ldr	r3, [r3, #16]
 8103fa2:	4a19      	ldr	r2, [pc, #100]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103fa8:	6113      	str	r3, [r2, #16]
 8103faa:	4b17      	ldr	r3, [pc, #92]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fac:	691a      	ldr	r2, [r3, #16]
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103fb4:	4914      	ldr	r1, [pc, #80]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fb6:	4313      	orrs	r3, r2
 8103fb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	681b      	ldr	r3, [r3, #0]
 8103fbe:	2b00      	cmp	r3, #0
 8103fc0:	da08      	bge.n	8103fd4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103fc2:	4b11      	ldr	r3, [pc, #68]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fce:	490e      	ldr	r1, [pc, #56]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fd0:	4313      	orrs	r3, r2
 8103fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	d009      	beq.n	8103ff4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103fe0:	4b09      	ldr	r3, [pc, #36]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fe4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103fee:	4906      	ldr	r1, [pc, #24]	; (8104008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ff0:	4313      	orrs	r3, r2
 8103ff2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103ff4:	7dbb      	ldrb	r3, [r7, #22]
 8103ff6:	2b00      	cmp	r3, #0
 8103ff8:	d101      	bne.n	8103ffe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103ffa:	2300      	movs	r3, #0
 8103ffc:	e000      	b.n	8104000 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103ffe:	2301      	movs	r3, #1
}
 8104000:	4618      	mov	r0, r3
 8104002:	3718      	adds	r7, #24
 8104004:	46bd      	mov	sp, r7
 8104006:	bd80      	pop	{r7, pc}
 8104008:	58024400 	.word	0x58024400

0810400c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810400c:	b580      	push	{r7, lr}
 810400e:	b084      	sub	sp, #16
 8104010:	af00      	add	r7, sp, #0
 8104012:	6078      	str	r0, [r7, #4]
 8104014:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104016:	2300      	movs	r3, #0
 8104018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810401a:	4b54      	ldr	r3, [pc, #336]	; (810416c <RCCEx_PLL2_Config+0x160>)
 810401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810401e:	f003 0303 	and.w	r3, r3, #3
 8104022:	2b03      	cmp	r3, #3
 8104024:	d101      	bne.n	810402a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104026:	2301      	movs	r3, #1
 8104028:	e09b      	b.n	8104162 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810402a:	4b50      	ldr	r3, [pc, #320]	; (810416c <RCCEx_PLL2_Config+0x160>)
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	4a4f      	ldr	r2, [pc, #316]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104036:	f7fd fd91 	bl	8101b5c <HAL_GetTick>
 810403a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810403c:	e008      	b.n	8104050 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810403e:	f7fd fd8d 	bl	8101b5c <HAL_GetTick>
 8104042:	4602      	mov	r2, r0
 8104044:	68bb      	ldr	r3, [r7, #8]
 8104046:	1ad3      	subs	r3, r2, r3
 8104048:	2b02      	cmp	r3, #2
 810404a:	d901      	bls.n	8104050 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810404c:	2303      	movs	r3, #3
 810404e:	e088      	b.n	8104162 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104050:	4b46      	ldr	r3, [pc, #280]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104058:	2b00      	cmp	r3, #0
 810405a:	d1f0      	bne.n	810403e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810405c:	4b43      	ldr	r3, [pc, #268]	; (810416c <RCCEx_PLL2_Config+0x160>)
 810405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	031b      	lsls	r3, r3, #12
 810406a:	4940      	ldr	r1, [pc, #256]	; (810416c <RCCEx_PLL2_Config+0x160>)
 810406c:	4313      	orrs	r3, r2
 810406e:	628b      	str	r3, [r1, #40]	; 0x28
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	685b      	ldr	r3, [r3, #4]
 8104074:	3b01      	subs	r3, #1
 8104076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	689b      	ldr	r3, [r3, #8]
 810407e:	3b01      	subs	r3, #1
 8104080:	025b      	lsls	r3, r3, #9
 8104082:	b29b      	uxth	r3, r3
 8104084:	431a      	orrs	r2, r3
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	68db      	ldr	r3, [r3, #12]
 810408a:	3b01      	subs	r3, #1
 810408c:	041b      	lsls	r3, r3, #16
 810408e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104092:	431a      	orrs	r2, r3
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	691b      	ldr	r3, [r3, #16]
 8104098:	3b01      	subs	r3, #1
 810409a:	061b      	lsls	r3, r3, #24
 810409c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81040a0:	4932      	ldr	r1, [pc, #200]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040a2:	4313      	orrs	r3, r2
 81040a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81040a6:	4b31      	ldr	r3, [pc, #196]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	695b      	ldr	r3, [r3, #20]
 81040b2:	492e      	ldr	r1, [pc, #184]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040b4:	4313      	orrs	r3, r2
 81040b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81040b8:	4b2c      	ldr	r3, [pc, #176]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040bc:	f023 0220 	bic.w	r2, r3, #32
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	699b      	ldr	r3, [r3, #24]
 81040c4:	4929      	ldr	r1, [pc, #164]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040c6:	4313      	orrs	r3, r2
 81040c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81040ca:	4b28      	ldr	r3, [pc, #160]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040ce:	4a27      	ldr	r2, [pc, #156]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040d0:	f023 0310 	bic.w	r3, r3, #16
 81040d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81040d6:	4b25      	ldr	r3, [pc, #148]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81040de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81040e2:	687a      	ldr	r2, [r7, #4]
 81040e4:	69d2      	ldr	r2, [r2, #28]
 81040e6:	00d2      	lsls	r2, r2, #3
 81040e8:	4920      	ldr	r1, [pc, #128]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040ea:	4313      	orrs	r3, r2
 81040ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81040ee:	4b1f      	ldr	r3, [pc, #124]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040f2:	4a1e      	ldr	r2, [pc, #120]	; (810416c <RCCEx_PLL2_Config+0x160>)
 81040f4:	f043 0310 	orr.w	r3, r3, #16
 81040f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81040fa:	683b      	ldr	r3, [r7, #0]
 81040fc:	2b00      	cmp	r3, #0
 81040fe:	d106      	bne.n	810410e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104100:	4b1a      	ldr	r3, [pc, #104]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104104:	4a19      	ldr	r2, [pc, #100]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810410a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810410c:	e00f      	b.n	810412e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810410e:	683b      	ldr	r3, [r7, #0]
 8104110:	2b01      	cmp	r3, #1
 8104112:	d106      	bne.n	8104122 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104114:	4b15      	ldr	r3, [pc, #84]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104118:	4a14      	ldr	r2, [pc, #80]	; (810416c <RCCEx_PLL2_Config+0x160>)
 810411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810411e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104120:	e005      	b.n	810412e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104122:	4b12      	ldr	r3, [pc, #72]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104126:	4a11      	ldr	r2, [pc, #68]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810412c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810412e:	4b0f      	ldr	r3, [pc, #60]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	4a0e      	ldr	r2, [pc, #56]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810413a:	f7fd fd0f 	bl	8101b5c <HAL_GetTick>
 810413e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104140:	e008      	b.n	8104154 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104142:	f7fd fd0b 	bl	8101b5c <HAL_GetTick>
 8104146:	4602      	mov	r2, r0
 8104148:	68bb      	ldr	r3, [r7, #8]
 810414a:	1ad3      	subs	r3, r2, r3
 810414c:	2b02      	cmp	r3, #2
 810414e:	d901      	bls.n	8104154 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104150:	2303      	movs	r3, #3
 8104152:	e006      	b.n	8104162 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104154:	4b05      	ldr	r3, [pc, #20]	; (810416c <RCCEx_PLL2_Config+0x160>)
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810415c:	2b00      	cmp	r3, #0
 810415e:	d0f0      	beq.n	8104142 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104160:	7bfb      	ldrb	r3, [r7, #15]
}
 8104162:	4618      	mov	r0, r3
 8104164:	3710      	adds	r7, #16
 8104166:	46bd      	mov	sp, r7
 8104168:	bd80      	pop	{r7, pc}
 810416a:	bf00      	nop
 810416c:	58024400 	.word	0x58024400

08104170 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104170:	b580      	push	{r7, lr}
 8104172:	b084      	sub	sp, #16
 8104174:	af00      	add	r7, sp, #0
 8104176:	6078      	str	r0, [r7, #4]
 8104178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810417a:	2300      	movs	r3, #0
 810417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810417e:	4b54      	ldr	r3, [pc, #336]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104182:	f003 0303 	and.w	r3, r3, #3
 8104186:	2b03      	cmp	r3, #3
 8104188:	d101      	bne.n	810418e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810418a:	2301      	movs	r3, #1
 810418c:	e09b      	b.n	81042c6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810418e:	4b50      	ldr	r3, [pc, #320]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	4a4f      	ldr	r2, [pc, #316]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810419a:	f7fd fcdf 	bl	8101b5c <HAL_GetTick>
 810419e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81041a0:	e008      	b.n	81041b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81041a2:	f7fd fcdb 	bl	8101b5c <HAL_GetTick>
 81041a6:	4602      	mov	r2, r0
 81041a8:	68bb      	ldr	r3, [r7, #8]
 81041aa:	1ad3      	subs	r3, r2, r3
 81041ac:	2b02      	cmp	r3, #2
 81041ae:	d901      	bls.n	81041b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81041b0:	2303      	movs	r3, #3
 81041b2:	e088      	b.n	81042c6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81041b4:	4b46      	ldr	r3, [pc, #280]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81041bc:	2b00      	cmp	r3, #0
 81041be:	d1f0      	bne.n	81041a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81041c0:	4b43      	ldr	r3, [pc, #268]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 81041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	051b      	lsls	r3, r3, #20
 81041ce:	4940      	ldr	r1, [pc, #256]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 81041d0:	4313      	orrs	r3, r2
 81041d2:	628b      	str	r3, [r1, #40]	; 0x28
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	685b      	ldr	r3, [r3, #4]
 81041d8:	3b01      	subs	r3, #1
 81041da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	689b      	ldr	r3, [r3, #8]
 81041e2:	3b01      	subs	r3, #1
 81041e4:	025b      	lsls	r3, r3, #9
 81041e6:	b29b      	uxth	r3, r3
 81041e8:	431a      	orrs	r2, r3
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	68db      	ldr	r3, [r3, #12]
 81041ee:	3b01      	subs	r3, #1
 81041f0:	041b      	lsls	r3, r3, #16
 81041f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81041f6:	431a      	orrs	r2, r3
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	691b      	ldr	r3, [r3, #16]
 81041fc:	3b01      	subs	r3, #1
 81041fe:	061b      	lsls	r3, r3, #24
 8104200:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104204:	4932      	ldr	r1, [pc, #200]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104206:	4313      	orrs	r3, r2
 8104208:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810420a:	4b31      	ldr	r3, [pc, #196]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810420e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	695b      	ldr	r3, [r3, #20]
 8104216:	492e      	ldr	r1, [pc, #184]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104218:	4313      	orrs	r3, r2
 810421a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810421c:	4b2c      	ldr	r3, [pc, #176]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104220:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	699b      	ldr	r3, [r3, #24]
 8104228:	4929      	ldr	r1, [pc, #164]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810422a:	4313      	orrs	r3, r2
 810422c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810422e:	4b28      	ldr	r3, [pc, #160]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104232:	4a27      	ldr	r2, [pc, #156]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810423a:	4b25      	ldr	r3, [pc, #148]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810423e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104242:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104246:	687a      	ldr	r2, [r7, #4]
 8104248:	69d2      	ldr	r2, [r2, #28]
 810424a:	00d2      	lsls	r2, r2, #3
 810424c:	4920      	ldr	r1, [pc, #128]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810424e:	4313      	orrs	r3, r2
 8104250:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104252:	4b1f      	ldr	r3, [pc, #124]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104256:	4a1e      	ldr	r2, [pc, #120]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810425c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810425e:	683b      	ldr	r3, [r7, #0]
 8104260:	2b00      	cmp	r3, #0
 8104262:	d106      	bne.n	8104272 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104264:	4b1a      	ldr	r3, [pc, #104]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104268:	4a19      	ldr	r2, [pc, #100]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810426a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810426e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104270:	e00f      	b.n	8104292 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104272:	683b      	ldr	r3, [r7, #0]
 8104274:	2b01      	cmp	r3, #1
 8104276:	d106      	bne.n	8104286 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104278:	4b15      	ldr	r3, [pc, #84]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810427c:	4a14      	ldr	r2, [pc, #80]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810427e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104284:	e005      	b.n	8104292 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104286:	4b12      	ldr	r3, [pc, #72]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810428a:	4a11      	ldr	r2, [pc, #68]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 810428c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104292:	4b0f      	ldr	r3, [pc, #60]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a0e      	ldr	r2, [pc, #56]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 8104298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810429e:	f7fd fc5d 	bl	8101b5c <HAL_GetTick>
 81042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81042a4:	e008      	b.n	81042b8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81042a6:	f7fd fc59 	bl	8101b5c <HAL_GetTick>
 81042aa:	4602      	mov	r2, r0
 81042ac:	68bb      	ldr	r3, [r7, #8]
 81042ae:	1ad3      	subs	r3, r2, r3
 81042b0:	2b02      	cmp	r3, #2
 81042b2:	d901      	bls.n	81042b8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81042b4:	2303      	movs	r3, #3
 81042b6:	e006      	b.n	81042c6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81042b8:	4b05      	ldr	r3, [pc, #20]	; (81042d0 <RCCEx_PLL3_Config+0x160>)
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81042c0:	2b00      	cmp	r3, #0
 81042c2:	d0f0      	beq.n	81042a6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81042c6:	4618      	mov	r0, r3
 81042c8:	3710      	adds	r7, #16
 81042ca:	46bd      	mov	sp, r7
 81042cc:	bd80      	pop	{r7, pc}
 81042ce:	bf00      	nop
 81042d0:	58024400 	.word	0x58024400

081042d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81042d4:	b580      	push	{r7, lr}
 81042d6:	b082      	sub	sp, #8
 81042d8:	af00      	add	r7, sp, #0
 81042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	2b00      	cmp	r3, #0
 81042e0:	d101      	bne.n	81042e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81042e2:	2301      	movs	r3, #1
 81042e4:	e049      	b.n	810437a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81042ec:	b2db      	uxtb	r3, r3
 81042ee:	2b00      	cmp	r3, #0
 81042f0:	d106      	bne.n	8104300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	2200      	movs	r2, #0
 81042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81042fa:	6878      	ldr	r0, [r7, #4]
 81042fc:	f7fd fadc 	bl	81018b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	2202      	movs	r2, #2
 8104304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	681a      	ldr	r2, [r3, #0]
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	3304      	adds	r3, #4
 8104310:	4619      	mov	r1, r3
 8104312:	4610      	mov	r0, r2
 8104314:	f000 fba0 	bl	8104a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	2201      	movs	r2, #1
 810431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	2201      	movs	r2, #1
 8104324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	2201      	movs	r2, #1
 810432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	2201      	movs	r2, #1
 8104334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	2201      	movs	r2, #1
 810433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	2201      	movs	r2, #1
 8104344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	2201      	movs	r2, #1
 810434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	2201      	movs	r2, #1
 8104354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	2201      	movs	r2, #1
 810435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	2201      	movs	r2, #1
 8104364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	2201      	movs	r2, #1
 810436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	2201      	movs	r2, #1
 8104374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104378:	2300      	movs	r3, #0
}
 810437a:	4618      	mov	r0, r3
 810437c:	3708      	adds	r7, #8
 810437e:	46bd      	mov	sp, r7
 8104380:	bd80      	pop	{r7, pc}
	...

08104384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8104384:	b580      	push	{r7, lr}
 8104386:	b084      	sub	sp, #16
 8104388:	af00      	add	r7, sp, #0
 810438a:	6078      	str	r0, [r7, #4]
 810438c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810438e:	683b      	ldr	r3, [r7, #0]
 8104390:	2b00      	cmp	r3, #0
 8104392:	d109      	bne.n	81043a8 <HAL_TIM_PWM_Start+0x24>
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810439a:	b2db      	uxtb	r3, r3
 810439c:	2b01      	cmp	r3, #1
 810439e:	bf14      	ite	ne
 81043a0:	2301      	movne	r3, #1
 81043a2:	2300      	moveq	r3, #0
 81043a4:	b2db      	uxtb	r3, r3
 81043a6:	e03c      	b.n	8104422 <HAL_TIM_PWM_Start+0x9e>
 81043a8:	683b      	ldr	r3, [r7, #0]
 81043aa:	2b04      	cmp	r3, #4
 81043ac:	d109      	bne.n	81043c2 <HAL_TIM_PWM_Start+0x3e>
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81043b4:	b2db      	uxtb	r3, r3
 81043b6:	2b01      	cmp	r3, #1
 81043b8:	bf14      	ite	ne
 81043ba:	2301      	movne	r3, #1
 81043bc:	2300      	moveq	r3, #0
 81043be:	b2db      	uxtb	r3, r3
 81043c0:	e02f      	b.n	8104422 <HAL_TIM_PWM_Start+0x9e>
 81043c2:	683b      	ldr	r3, [r7, #0]
 81043c4:	2b08      	cmp	r3, #8
 81043c6:	d109      	bne.n	81043dc <HAL_TIM_PWM_Start+0x58>
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81043ce:	b2db      	uxtb	r3, r3
 81043d0:	2b01      	cmp	r3, #1
 81043d2:	bf14      	ite	ne
 81043d4:	2301      	movne	r3, #1
 81043d6:	2300      	moveq	r3, #0
 81043d8:	b2db      	uxtb	r3, r3
 81043da:	e022      	b.n	8104422 <HAL_TIM_PWM_Start+0x9e>
 81043dc:	683b      	ldr	r3, [r7, #0]
 81043de:	2b0c      	cmp	r3, #12
 81043e0:	d109      	bne.n	81043f6 <HAL_TIM_PWM_Start+0x72>
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81043e8:	b2db      	uxtb	r3, r3
 81043ea:	2b01      	cmp	r3, #1
 81043ec:	bf14      	ite	ne
 81043ee:	2301      	movne	r3, #1
 81043f0:	2300      	moveq	r3, #0
 81043f2:	b2db      	uxtb	r3, r3
 81043f4:	e015      	b.n	8104422 <HAL_TIM_PWM_Start+0x9e>
 81043f6:	683b      	ldr	r3, [r7, #0]
 81043f8:	2b10      	cmp	r3, #16
 81043fa:	d109      	bne.n	8104410 <HAL_TIM_PWM_Start+0x8c>
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8104402:	b2db      	uxtb	r3, r3
 8104404:	2b01      	cmp	r3, #1
 8104406:	bf14      	ite	ne
 8104408:	2301      	movne	r3, #1
 810440a:	2300      	moveq	r3, #0
 810440c:	b2db      	uxtb	r3, r3
 810440e:	e008      	b.n	8104422 <HAL_TIM_PWM_Start+0x9e>
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8104416:	b2db      	uxtb	r3, r3
 8104418:	2b01      	cmp	r3, #1
 810441a:	bf14      	ite	ne
 810441c:	2301      	movne	r3, #1
 810441e:	2300      	moveq	r3, #0
 8104420:	b2db      	uxtb	r3, r3
 8104422:	2b00      	cmp	r3, #0
 8104424:	d001      	beq.n	810442a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8104426:	2301      	movs	r3, #1
 8104428:	e09c      	b.n	8104564 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810442a:	683b      	ldr	r3, [r7, #0]
 810442c:	2b00      	cmp	r3, #0
 810442e:	d104      	bne.n	810443a <HAL_TIM_PWM_Start+0xb6>
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	2202      	movs	r2, #2
 8104434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104438:	e023      	b.n	8104482 <HAL_TIM_PWM_Start+0xfe>
 810443a:	683b      	ldr	r3, [r7, #0]
 810443c:	2b04      	cmp	r3, #4
 810443e:	d104      	bne.n	810444a <HAL_TIM_PWM_Start+0xc6>
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	2202      	movs	r2, #2
 8104444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104448:	e01b      	b.n	8104482 <HAL_TIM_PWM_Start+0xfe>
 810444a:	683b      	ldr	r3, [r7, #0]
 810444c:	2b08      	cmp	r3, #8
 810444e:	d104      	bne.n	810445a <HAL_TIM_PWM_Start+0xd6>
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	2202      	movs	r2, #2
 8104454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104458:	e013      	b.n	8104482 <HAL_TIM_PWM_Start+0xfe>
 810445a:	683b      	ldr	r3, [r7, #0]
 810445c:	2b0c      	cmp	r3, #12
 810445e:	d104      	bne.n	810446a <HAL_TIM_PWM_Start+0xe6>
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	2202      	movs	r2, #2
 8104464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104468:	e00b      	b.n	8104482 <HAL_TIM_PWM_Start+0xfe>
 810446a:	683b      	ldr	r3, [r7, #0]
 810446c:	2b10      	cmp	r3, #16
 810446e:	d104      	bne.n	810447a <HAL_TIM_PWM_Start+0xf6>
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	2202      	movs	r2, #2
 8104474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104478:	e003      	b.n	8104482 <HAL_TIM_PWM_Start+0xfe>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	2202      	movs	r2, #2
 810447e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	2201      	movs	r2, #1
 8104488:	6839      	ldr	r1, [r7, #0]
 810448a:	4618      	mov	r0, r3
 810448c:	f000 fe4c 	bl	8105128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	681b      	ldr	r3, [r3, #0]
 8104494:	4a35      	ldr	r2, [pc, #212]	; (810456c <HAL_TIM_PWM_Start+0x1e8>)
 8104496:	4293      	cmp	r3, r2
 8104498:	d013      	beq.n	81044c2 <HAL_TIM_PWM_Start+0x13e>
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	681b      	ldr	r3, [r3, #0]
 810449e:	4a34      	ldr	r2, [pc, #208]	; (8104570 <HAL_TIM_PWM_Start+0x1ec>)
 81044a0:	4293      	cmp	r3, r2
 81044a2:	d00e      	beq.n	81044c2 <HAL_TIM_PWM_Start+0x13e>
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	681b      	ldr	r3, [r3, #0]
 81044a8:	4a32      	ldr	r2, [pc, #200]	; (8104574 <HAL_TIM_PWM_Start+0x1f0>)
 81044aa:	4293      	cmp	r3, r2
 81044ac:	d009      	beq.n	81044c2 <HAL_TIM_PWM_Start+0x13e>
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	4a31      	ldr	r2, [pc, #196]	; (8104578 <HAL_TIM_PWM_Start+0x1f4>)
 81044b4:	4293      	cmp	r3, r2
 81044b6:	d004      	beq.n	81044c2 <HAL_TIM_PWM_Start+0x13e>
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	4a2f      	ldr	r2, [pc, #188]	; (810457c <HAL_TIM_PWM_Start+0x1f8>)
 81044be:	4293      	cmp	r3, r2
 81044c0:	d101      	bne.n	81044c6 <HAL_TIM_PWM_Start+0x142>
 81044c2:	2301      	movs	r3, #1
 81044c4:	e000      	b.n	81044c8 <HAL_TIM_PWM_Start+0x144>
 81044c6:	2300      	movs	r3, #0
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d007      	beq.n	81044dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	681b      	ldr	r3, [r3, #0]
 81044d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81044da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	4a22      	ldr	r2, [pc, #136]	; (810456c <HAL_TIM_PWM_Start+0x1e8>)
 81044e2:	4293      	cmp	r3, r2
 81044e4:	d01d      	beq.n	8104522 <HAL_TIM_PWM_Start+0x19e>
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044ee:	d018      	beq.n	8104522 <HAL_TIM_PWM_Start+0x19e>
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	4a22      	ldr	r2, [pc, #136]	; (8104580 <HAL_TIM_PWM_Start+0x1fc>)
 81044f6:	4293      	cmp	r3, r2
 81044f8:	d013      	beq.n	8104522 <HAL_TIM_PWM_Start+0x19e>
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	4a21      	ldr	r2, [pc, #132]	; (8104584 <HAL_TIM_PWM_Start+0x200>)
 8104500:	4293      	cmp	r3, r2
 8104502:	d00e      	beq.n	8104522 <HAL_TIM_PWM_Start+0x19e>
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	4a1f      	ldr	r2, [pc, #124]	; (8104588 <HAL_TIM_PWM_Start+0x204>)
 810450a:	4293      	cmp	r3, r2
 810450c:	d009      	beq.n	8104522 <HAL_TIM_PWM_Start+0x19e>
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	4a17      	ldr	r2, [pc, #92]	; (8104570 <HAL_TIM_PWM_Start+0x1ec>)
 8104514:	4293      	cmp	r3, r2
 8104516:	d004      	beq.n	8104522 <HAL_TIM_PWM_Start+0x19e>
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	4a1b      	ldr	r2, [pc, #108]	; (810458c <HAL_TIM_PWM_Start+0x208>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d115      	bne.n	810454e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	689a      	ldr	r2, [r3, #8]
 8104528:	4b19      	ldr	r3, [pc, #100]	; (8104590 <HAL_TIM_PWM_Start+0x20c>)
 810452a:	4013      	ands	r3, r2
 810452c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810452e:	68fb      	ldr	r3, [r7, #12]
 8104530:	2b06      	cmp	r3, #6
 8104532:	d015      	beq.n	8104560 <HAL_TIM_PWM_Start+0x1dc>
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810453a:	d011      	beq.n	8104560 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	681a      	ldr	r2, [r3, #0]
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	f042 0201 	orr.w	r2, r2, #1
 810454a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810454c:	e008      	b.n	8104560 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	681a      	ldr	r2, [r3, #0]
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	f042 0201 	orr.w	r2, r2, #1
 810455c:	601a      	str	r2, [r3, #0]
 810455e:	e000      	b.n	8104562 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8104562:	2300      	movs	r3, #0
}
 8104564:	4618      	mov	r0, r3
 8104566:	3710      	adds	r7, #16
 8104568:	46bd      	mov	sp, r7
 810456a:	bd80      	pop	{r7, pc}
 810456c:	40010000 	.word	0x40010000
 8104570:	40010400 	.word	0x40010400
 8104574:	40014000 	.word	0x40014000
 8104578:	40014400 	.word	0x40014400
 810457c:	40014800 	.word	0x40014800
 8104580:	40000400 	.word	0x40000400
 8104584:	40000800 	.word	0x40000800
 8104588:	40000c00 	.word	0x40000c00
 810458c:	40001800 	.word	0x40001800
 8104590:	00010007 	.word	0x00010007

08104594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104594:	b580      	push	{r7, lr}
 8104596:	b082      	sub	sp, #8
 8104598:	af00      	add	r7, sp, #0
 810459a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	691b      	ldr	r3, [r3, #16]
 81045a2:	f003 0302 	and.w	r3, r3, #2
 81045a6:	2b02      	cmp	r3, #2
 81045a8:	d122      	bne.n	81045f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	68db      	ldr	r3, [r3, #12]
 81045b0:	f003 0302 	and.w	r3, r3, #2
 81045b4:	2b02      	cmp	r3, #2
 81045b6:	d11b      	bne.n	81045f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	f06f 0202 	mvn.w	r2, #2
 81045c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	2201      	movs	r2, #1
 81045c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	699b      	ldr	r3, [r3, #24]
 81045ce:	f003 0303 	and.w	r3, r3, #3
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d003      	beq.n	81045de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81045d6:	6878      	ldr	r0, [r7, #4]
 81045d8:	f000 fa20 	bl	8104a1c <HAL_TIM_IC_CaptureCallback>
 81045dc:	e005      	b.n	81045ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81045de:	6878      	ldr	r0, [r7, #4]
 81045e0:	f000 fa12 	bl	8104a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81045e4:	6878      	ldr	r0, [r7, #4]
 81045e6:	f000 fa23 	bl	8104a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	2200      	movs	r2, #0
 81045ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	691b      	ldr	r3, [r3, #16]
 81045f6:	f003 0304 	and.w	r3, r3, #4
 81045fa:	2b04      	cmp	r3, #4
 81045fc:	d122      	bne.n	8104644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	68db      	ldr	r3, [r3, #12]
 8104604:	f003 0304 	and.w	r3, r3, #4
 8104608:	2b04      	cmp	r3, #4
 810460a:	d11b      	bne.n	8104644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	681b      	ldr	r3, [r3, #0]
 8104610:	f06f 0204 	mvn.w	r2, #4
 8104614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	2202      	movs	r2, #2
 810461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	699b      	ldr	r3, [r3, #24]
 8104622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104626:	2b00      	cmp	r3, #0
 8104628:	d003      	beq.n	8104632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810462a:	6878      	ldr	r0, [r7, #4]
 810462c:	f000 f9f6 	bl	8104a1c <HAL_TIM_IC_CaptureCallback>
 8104630:	e005      	b.n	810463e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104632:	6878      	ldr	r0, [r7, #4]
 8104634:	f000 f9e8 	bl	8104a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104638:	6878      	ldr	r0, [r7, #4]
 810463a:	f000 f9f9 	bl	8104a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	2200      	movs	r2, #0
 8104642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	691b      	ldr	r3, [r3, #16]
 810464a:	f003 0308 	and.w	r3, r3, #8
 810464e:	2b08      	cmp	r3, #8
 8104650:	d122      	bne.n	8104698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104652:	687b      	ldr	r3, [r7, #4]
 8104654:	681b      	ldr	r3, [r3, #0]
 8104656:	68db      	ldr	r3, [r3, #12]
 8104658:	f003 0308 	and.w	r3, r3, #8
 810465c:	2b08      	cmp	r3, #8
 810465e:	d11b      	bne.n	8104698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	f06f 0208 	mvn.w	r2, #8
 8104668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	2204      	movs	r2, #4
 810466e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	681b      	ldr	r3, [r3, #0]
 8104674:	69db      	ldr	r3, [r3, #28]
 8104676:	f003 0303 	and.w	r3, r3, #3
 810467a:	2b00      	cmp	r3, #0
 810467c:	d003      	beq.n	8104686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810467e:	6878      	ldr	r0, [r7, #4]
 8104680:	f000 f9cc 	bl	8104a1c <HAL_TIM_IC_CaptureCallback>
 8104684:	e005      	b.n	8104692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104686:	6878      	ldr	r0, [r7, #4]
 8104688:	f000 f9be 	bl	8104a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810468c:	6878      	ldr	r0, [r7, #4]
 810468e:	f000 f9cf 	bl	8104a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	2200      	movs	r2, #0
 8104696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	691b      	ldr	r3, [r3, #16]
 810469e:	f003 0310 	and.w	r3, r3, #16
 81046a2:	2b10      	cmp	r3, #16
 81046a4:	d122      	bne.n	81046ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	68db      	ldr	r3, [r3, #12]
 81046ac:	f003 0310 	and.w	r3, r3, #16
 81046b0:	2b10      	cmp	r3, #16
 81046b2:	d11b      	bne.n	81046ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	f06f 0210 	mvn.w	r2, #16
 81046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	2208      	movs	r2, #8
 81046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	69db      	ldr	r3, [r3, #28]
 81046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81046ce:	2b00      	cmp	r3, #0
 81046d0:	d003      	beq.n	81046da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81046d2:	6878      	ldr	r0, [r7, #4]
 81046d4:	f000 f9a2 	bl	8104a1c <HAL_TIM_IC_CaptureCallback>
 81046d8:	e005      	b.n	81046e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81046da:	6878      	ldr	r0, [r7, #4]
 81046dc:	f000 f994 	bl	8104a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81046e0:	6878      	ldr	r0, [r7, #4]
 81046e2:	f000 f9a5 	bl	8104a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	2200      	movs	r2, #0
 81046ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	681b      	ldr	r3, [r3, #0]
 81046f0:	691b      	ldr	r3, [r3, #16]
 81046f2:	f003 0301 	and.w	r3, r3, #1
 81046f6:	2b01      	cmp	r3, #1
 81046f8:	d10e      	bne.n	8104718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	68db      	ldr	r3, [r3, #12]
 8104700:	f003 0301 	and.w	r3, r3, #1
 8104704:	2b01      	cmp	r3, #1
 8104706:	d107      	bne.n	8104718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	f06f 0201 	mvn.w	r2, #1
 8104710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104712:	6878      	ldr	r0, [r7, #4]
 8104714:	f000 f96e 	bl	81049f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	691b      	ldr	r3, [r3, #16]
 810471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104722:	2b80      	cmp	r3, #128	; 0x80
 8104724:	d10e      	bne.n	8104744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	68db      	ldr	r3, [r3, #12]
 810472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104730:	2b80      	cmp	r3, #128	; 0x80
 8104732:	d107      	bne.n	8104744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	681b      	ldr	r3, [r3, #0]
 8104738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810473c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810473e:	6878      	ldr	r0, [r7, #4]
 8104740:	f000 fdaa 	bl	8105298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	691b      	ldr	r3, [r3, #16]
 810474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104752:	d10e      	bne.n	8104772 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	68db      	ldr	r3, [r3, #12]
 810475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810475e:	2b80      	cmp	r3, #128	; 0x80
 8104760:	d107      	bne.n	8104772 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810476c:	6878      	ldr	r0, [r7, #4]
 810476e:	f000 fd9d 	bl	81052ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	681b      	ldr	r3, [r3, #0]
 8104776:	691b      	ldr	r3, [r3, #16]
 8104778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810477c:	2b40      	cmp	r3, #64	; 0x40
 810477e:	d10e      	bne.n	810479e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	681b      	ldr	r3, [r3, #0]
 8104784:	68db      	ldr	r3, [r3, #12]
 8104786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810478a:	2b40      	cmp	r3, #64	; 0x40
 810478c:	d107      	bne.n	810479e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	681b      	ldr	r3, [r3, #0]
 8104792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8104796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104798:	6878      	ldr	r0, [r7, #4]
 810479a:	f000 f953 	bl	8104a44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810479e:	687b      	ldr	r3, [r7, #4]
 81047a0:	681b      	ldr	r3, [r3, #0]
 81047a2:	691b      	ldr	r3, [r3, #16]
 81047a4:	f003 0320 	and.w	r3, r3, #32
 81047a8:	2b20      	cmp	r3, #32
 81047aa:	d10e      	bne.n	81047ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	68db      	ldr	r3, [r3, #12]
 81047b2:	f003 0320 	and.w	r3, r3, #32
 81047b6:	2b20      	cmp	r3, #32
 81047b8:	d107      	bne.n	81047ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	f06f 0220 	mvn.w	r2, #32
 81047c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81047c4:	6878      	ldr	r0, [r7, #4]
 81047c6:	f000 fd5d 	bl	8105284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81047ca:	bf00      	nop
 81047cc:	3708      	adds	r7, #8
 81047ce:	46bd      	mov	sp, r7
 81047d0:	bd80      	pop	{r7, pc}
	...

081047d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81047d4:	b580      	push	{r7, lr}
 81047d6:	b084      	sub	sp, #16
 81047d8:	af00      	add	r7, sp, #0
 81047da:	60f8      	str	r0, [r7, #12]
 81047dc:	60b9      	str	r1, [r7, #8]
 81047de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81047e6:	2b01      	cmp	r3, #1
 81047e8:	d101      	bne.n	81047ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 81047ea:	2302      	movs	r3, #2
 81047ec:	e0fd      	b.n	81049ea <HAL_TIM_PWM_ConfigChannel+0x216>
 81047ee:	68fb      	ldr	r3, [r7, #12]
 81047f0:	2201      	movs	r2, #1
 81047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	2b14      	cmp	r3, #20
 81047fa:	f200 80f0 	bhi.w	81049de <HAL_TIM_PWM_ConfigChannel+0x20a>
 81047fe:	a201      	add	r2, pc, #4	; (adr r2, 8104804 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8104800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104804:	08104859 	.word	0x08104859
 8104808:	081049df 	.word	0x081049df
 810480c:	081049df 	.word	0x081049df
 8104810:	081049df 	.word	0x081049df
 8104814:	08104899 	.word	0x08104899
 8104818:	081049df 	.word	0x081049df
 810481c:	081049df 	.word	0x081049df
 8104820:	081049df 	.word	0x081049df
 8104824:	081048db 	.word	0x081048db
 8104828:	081049df 	.word	0x081049df
 810482c:	081049df 	.word	0x081049df
 8104830:	081049df 	.word	0x081049df
 8104834:	0810491b 	.word	0x0810491b
 8104838:	081049df 	.word	0x081049df
 810483c:	081049df 	.word	0x081049df
 8104840:	081049df 	.word	0x081049df
 8104844:	0810495d 	.word	0x0810495d
 8104848:	081049df 	.word	0x081049df
 810484c:	081049df 	.word	0x081049df
 8104850:	081049df 	.word	0x081049df
 8104854:	0810499d 	.word	0x0810499d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	68b9      	ldr	r1, [r7, #8]
 810485e:	4618      	mov	r0, r3
 8104860:	f000 f994 	bl	8104b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8104864:	68fb      	ldr	r3, [r7, #12]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	699a      	ldr	r2, [r3, #24]
 810486a:	68fb      	ldr	r3, [r7, #12]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	f042 0208 	orr.w	r2, r2, #8
 8104872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	699a      	ldr	r2, [r3, #24]
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	f022 0204 	bic.w	r2, r2, #4
 8104882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104884:	68fb      	ldr	r3, [r7, #12]
 8104886:	681b      	ldr	r3, [r3, #0]
 8104888:	6999      	ldr	r1, [r3, #24]
 810488a:	68bb      	ldr	r3, [r7, #8]
 810488c:	691a      	ldr	r2, [r3, #16]
 810488e:	68fb      	ldr	r3, [r7, #12]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	430a      	orrs	r2, r1
 8104894:	619a      	str	r2, [r3, #24]
      break;
 8104896:	e0a3      	b.n	81049e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	68b9      	ldr	r1, [r7, #8]
 810489e:	4618      	mov	r0, r3
 81048a0:	f000 fa04 	bl	8104cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81048a4:	68fb      	ldr	r3, [r7, #12]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	699a      	ldr	r2, [r3, #24]
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81048b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81048b4:	68fb      	ldr	r3, [r7, #12]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	699a      	ldr	r2, [r3, #24]
 81048ba:	68fb      	ldr	r3, [r7, #12]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81048c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81048c4:	68fb      	ldr	r3, [r7, #12]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	6999      	ldr	r1, [r3, #24]
 81048ca:	68bb      	ldr	r3, [r7, #8]
 81048cc:	691b      	ldr	r3, [r3, #16]
 81048ce:	021a      	lsls	r2, r3, #8
 81048d0:	68fb      	ldr	r3, [r7, #12]
 81048d2:	681b      	ldr	r3, [r3, #0]
 81048d4:	430a      	orrs	r2, r1
 81048d6:	619a      	str	r2, [r3, #24]
      break;
 81048d8:	e082      	b.n	81049e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81048da:	68fb      	ldr	r3, [r7, #12]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	68b9      	ldr	r1, [r7, #8]
 81048e0:	4618      	mov	r0, r3
 81048e2:	f000 fa6d 	bl	8104dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81048e6:	68fb      	ldr	r3, [r7, #12]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	69da      	ldr	r2, [r3, #28]
 81048ec:	68fb      	ldr	r3, [r7, #12]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	f042 0208 	orr.w	r2, r2, #8
 81048f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	69da      	ldr	r2, [r3, #28]
 81048fc:	68fb      	ldr	r3, [r7, #12]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	f022 0204 	bic.w	r2, r2, #4
 8104904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8104906:	68fb      	ldr	r3, [r7, #12]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	69d9      	ldr	r1, [r3, #28]
 810490c:	68bb      	ldr	r3, [r7, #8]
 810490e:	691a      	ldr	r2, [r3, #16]
 8104910:	68fb      	ldr	r3, [r7, #12]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	430a      	orrs	r2, r1
 8104916:	61da      	str	r2, [r3, #28]
      break;
 8104918:	e062      	b.n	81049e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810491a:	68fb      	ldr	r3, [r7, #12]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	68b9      	ldr	r1, [r7, #8]
 8104920:	4618      	mov	r0, r3
 8104922:	f000 fad3 	bl	8104ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	69da      	ldr	r2, [r3, #28]
 810492c:	68fb      	ldr	r3, [r7, #12]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8104936:	68fb      	ldr	r3, [r7, #12]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	69da      	ldr	r2, [r3, #28]
 810493c:	68fb      	ldr	r3, [r7, #12]
 810493e:	681b      	ldr	r3, [r3, #0]
 8104940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	681b      	ldr	r3, [r3, #0]
 810494a:	69d9      	ldr	r1, [r3, #28]
 810494c:	68bb      	ldr	r3, [r7, #8]
 810494e:	691b      	ldr	r3, [r3, #16]
 8104950:	021a      	lsls	r2, r3, #8
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	430a      	orrs	r2, r1
 8104958:	61da      	str	r2, [r3, #28]
      break;
 810495a:	e041      	b.n	81049e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	68b9      	ldr	r1, [r7, #8]
 8104962:	4618      	mov	r0, r3
 8104964:	f000 fb1a 	bl	8104f9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810496e:	68fb      	ldr	r3, [r7, #12]
 8104970:	681b      	ldr	r3, [r3, #0]
 8104972:	f042 0208 	orr.w	r2, r2, #8
 8104976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104978:	68fb      	ldr	r3, [r7, #12]
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810497e:	68fb      	ldr	r3, [r7, #12]
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	f022 0204 	bic.w	r2, r2, #4
 8104986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104988:	68fb      	ldr	r3, [r7, #12]
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810498e:	68bb      	ldr	r3, [r7, #8]
 8104990:	691a      	ldr	r2, [r3, #16]
 8104992:	68fb      	ldr	r3, [r7, #12]
 8104994:	681b      	ldr	r3, [r3, #0]
 8104996:	430a      	orrs	r2, r1
 8104998:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810499a:	e021      	b.n	81049e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	68b9      	ldr	r1, [r7, #8]
 81049a2:	4618      	mov	r0, r3
 81049a4:	f000 fb5c 	bl	8105060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81049b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81049be:	68fb      	ldr	r3, [r7, #12]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81049c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81049c8:	68fb      	ldr	r3, [r7, #12]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81049ce:	68bb      	ldr	r3, [r7, #8]
 81049d0:	691b      	ldr	r3, [r3, #16]
 81049d2:	021a      	lsls	r2, r3, #8
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	430a      	orrs	r2, r1
 81049da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81049dc:	e000      	b.n	81049e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 81049de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	2200      	movs	r2, #0
 81049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81049e8:	2300      	movs	r3, #0
}
 81049ea:	4618      	mov	r0, r3
 81049ec:	3710      	adds	r7, #16
 81049ee:	46bd      	mov	sp, r7
 81049f0:	bd80      	pop	{r7, pc}
 81049f2:	bf00      	nop

081049f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81049f4:	b480      	push	{r7}
 81049f6:	b083      	sub	sp, #12
 81049f8:	af00      	add	r7, sp, #0
 81049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 81049fc:	bf00      	nop
 81049fe:	370c      	adds	r7, #12
 8104a00:	46bd      	mov	sp, r7
 8104a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a06:	4770      	bx	lr

08104a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104a08:	b480      	push	{r7}
 8104a0a:	b083      	sub	sp, #12
 8104a0c:	af00      	add	r7, sp, #0
 8104a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8104a10:	bf00      	nop
 8104a12:	370c      	adds	r7, #12
 8104a14:	46bd      	mov	sp, r7
 8104a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a1a:	4770      	bx	lr

08104a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8104a1c:	b480      	push	{r7}
 8104a1e:	b083      	sub	sp, #12
 8104a20:	af00      	add	r7, sp, #0
 8104a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8104a24:	bf00      	nop
 8104a26:	370c      	adds	r7, #12
 8104a28:	46bd      	mov	sp, r7
 8104a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a2e:	4770      	bx	lr

08104a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8104a30:	b480      	push	{r7}
 8104a32:	b083      	sub	sp, #12
 8104a34:	af00      	add	r7, sp, #0
 8104a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8104a38:	bf00      	nop
 8104a3a:	370c      	adds	r7, #12
 8104a3c:	46bd      	mov	sp, r7
 8104a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a42:	4770      	bx	lr

08104a44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8104a44:	b480      	push	{r7}
 8104a46:	b083      	sub	sp, #12
 8104a48:	af00      	add	r7, sp, #0
 8104a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8104a4c:	bf00      	nop
 8104a4e:	370c      	adds	r7, #12
 8104a50:	46bd      	mov	sp, r7
 8104a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a56:	4770      	bx	lr

08104a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8104a58:	b480      	push	{r7}
 8104a5a:	b085      	sub	sp, #20
 8104a5c:	af00      	add	r7, sp, #0
 8104a5e:	6078      	str	r0, [r7, #4]
 8104a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8104a62:	687b      	ldr	r3, [r7, #4]
 8104a64:	681b      	ldr	r3, [r3, #0]
 8104a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	4a40      	ldr	r2, [pc, #256]	; (8104b6c <TIM_Base_SetConfig+0x114>)
 8104a6c:	4293      	cmp	r3, r2
 8104a6e:	d013      	beq.n	8104a98 <TIM_Base_SetConfig+0x40>
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104a76:	d00f      	beq.n	8104a98 <TIM_Base_SetConfig+0x40>
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	4a3d      	ldr	r2, [pc, #244]	; (8104b70 <TIM_Base_SetConfig+0x118>)
 8104a7c:	4293      	cmp	r3, r2
 8104a7e:	d00b      	beq.n	8104a98 <TIM_Base_SetConfig+0x40>
 8104a80:	687b      	ldr	r3, [r7, #4]
 8104a82:	4a3c      	ldr	r2, [pc, #240]	; (8104b74 <TIM_Base_SetConfig+0x11c>)
 8104a84:	4293      	cmp	r3, r2
 8104a86:	d007      	beq.n	8104a98 <TIM_Base_SetConfig+0x40>
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	4a3b      	ldr	r2, [pc, #236]	; (8104b78 <TIM_Base_SetConfig+0x120>)
 8104a8c:	4293      	cmp	r3, r2
 8104a8e:	d003      	beq.n	8104a98 <TIM_Base_SetConfig+0x40>
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	4a3a      	ldr	r2, [pc, #232]	; (8104b7c <TIM_Base_SetConfig+0x124>)
 8104a94:	4293      	cmp	r3, r2
 8104a96:	d108      	bne.n	8104aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8104aa0:	683b      	ldr	r3, [r7, #0]
 8104aa2:	685b      	ldr	r3, [r3, #4]
 8104aa4:	68fa      	ldr	r2, [r7, #12]
 8104aa6:	4313      	orrs	r3, r2
 8104aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	4a2f      	ldr	r2, [pc, #188]	; (8104b6c <TIM_Base_SetConfig+0x114>)
 8104aae:	4293      	cmp	r3, r2
 8104ab0:	d01f      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104ab8:	d01b      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	4a2c      	ldr	r2, [pc, #176]	; (8104b70 <TIM_Base_SetConfig+0x118>)
 8104abe:	4293      	cmp	r3, r2
 8104ac0:	d017      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	4a2b      	ldr	r2, [pc, #172]	; (8104b74 <TIM_Base_SetConfig+0x11c>)
 8104ac6:	4293      	cmp	r3, r2
 8104ac8:	d013      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	4a2a      	ldr	r2, [pc, #168]	; (8104b78 <TIM_Base_SetConfig+0x120>)
 8104ace:	4293      	cmp	r3, r2
 8104ad0:	d00f      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	4a29      	ldr	r2, [pc, #164]	; (8104b7c <TIM_Base_SetConfig+0x124>)
 8104ad6:	4293      	cmp	r3, r2
 8104ad8:	d00b      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	4a28      	ldr	r2, [pc, #160]	; (8104b80 <TIM_Base_SetConfig+0x128>)
 8104ade:	4293      	cmp	r3, r2
 8104ae0:	d007      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	4a27      	ldr	r2, [pc, #156]	; (8104b84 <TIM_Base_SetConfig+0x12c>)
 8104ae6:	4293      	cmp	r3, r2
 8104ae8:	d003      	beq.n	8104af2 <TIM_Base_SetConfig+0x9a>
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	4a26      	ldr	r2, [pc, #152]	; (8104b88 <TIM_Base_SetConfig+0x130>)
 8104aee:	4293      	cmp	r3, r2
 8104af0:	d108      	bne.n	8104b04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104af2:	68fb      	ldr	r3, [r7, #12]
 8104af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8104afa:	683b      	ldr	r3, [r7, #0]
 8104afc:	68db      	ldr	r3, [r3, #12]
 8104afe:	68fa      	ldr	r2, [r7, #12]
 8104b00:	4313      	orrs	r3, r2
 8104b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104b04:	68fb      	ldr	r3, [r7, #12]
 8104b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8104b0a:	683b      	ldr	r3, [r7, #0]
 8104b0c:	695b      	ldr	r3, [r3, #20]
 8104b0e:	4313      	orrs	r3, r2
 8104b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	68fa      	ldr	r2, [r7, #12]
 8104b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104b18:	683b      	ldr	r3, [r7, #0]
 8104b1a:	689a      	ldr	r2, [r3, #8]
 8104b1c:	687b      	ldr	r3, [r7, #4]
 8104b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104b20:	683b      	ldr	r3, [r7, #0]
 8104b22:	681a      	ldr	r2, [r3, #0]
 8104b24:	687b      	ldr	r3, [r7, #4]
 8104b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	4a10      	ldr	r2, [pc, #64]	; (8104b6c <TIM_Base_SetConfig+0x114>)
 8104b2c:	4293      	cmp	r3, r2
 8104b2e:	d00f      	beq.n	8104b50 <TIM_Base_SetConfig+0xf8>
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	4a12      	ldr	r2, [pc, #72]	; (8104b7c <TIM_Base_SetConfig+0x124>)
 8104b34:	4293      	cmp	r3, r2
 8104b36:	d00b      	beq.n	8104b50 <TIM_Base_SetConfig+0xf8>
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	4a11      	ldr	r2, [pc, #68]	; (8104b80 <TIM_Base_SetConfig+0x128>)
 8104b3c:	4293      	cmp	r3, r2
 8104b3e:	d007      	beq.n	8104b50 <TIM_Base_SetConfig+0xf8>
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	4a10      	ldr	r2, [pc, #64]	; (8104b84 <TIM_Base_SetConfig+0x12c>)
 8104b44:	4293      	cmp	r3, r2
 8104b46:	d003      	beq.n	8104b50 <TIM_Base_SetConfig+0xf8>
 8104b48:	687b      	ldr	r3, [r7, #4]
 8104b4a:	4a0f      	ldr	r2, [pc, #60]	; (8104b88 <TIM_Base_SetConfig+0x130>)
 8104b4c:	4293      	cmp	r3, r2
 8104b4e:	d103      	bne.n	8104b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104b50:	683b      	ldr	r3, [r7, #0]
 8104b52:	691a      	ldr	r2, [r3, #16]
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	2201      	movs	r2, #1
 8104b5c:	615a      	str	r2, [r3, #20]
}
 8104b5e:	bf00      	nop
 8104b60:	3714      	adds	r7, #20
 8104b62:	46bd      	mov	sp, r7
 8104b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b68:	4770      	bx	lr
 8104b6a:	bf00      	nop
 8104b6c:	40010000 	.word	0x40010000
 8104b70:	40000400 	.word	0x40000400
 8104b74:	40000800 	.word	0x40000800
 8104b78:	40000c00 	.word	0x40000c00
 8104b7c:	40010400 	.word	0x40010400
 8104b80:	40014000 	.word	0x40014000
 8104b84:	40014400 	.word	0x40014400
 8104b88:	40014800 	.word	0x40014800

08104b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104b8c:	b480      	push	{r7}
 8104b8e:	b087      	sub	sp, #28
 8104b90:	af00      	add	r7, sp, #0
 8104b92:	6078      	str	r0, [r7, #4]
 8104b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8104b96:	687b      	ldr	r3, [r7, #4]
 8104b98:	6a1b      	ldr	r3, [r3, #32]
 8104b9a:	f023 0201 	bic.w	r2, r3, #1
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	6a1b      	ldr	r3, [r3, #32]
 8104ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	685b      	ldr	r3, [r3, #4]
 8104bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	699b      	ldr	r3, [r3, #24]
 8104bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8104bb4:	68fb      	ldr	r3, [r7, #12]
 8104bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	f023 0303 	bic.w	r3, r3, #3
 8104bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104bc8:	683b      	ldr	r3, [r7, #0]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	68fa      	ldr	r2, [r7, #12]
 8104bce:	4313      	orrs	r3, r2
 8104bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8104bd2:	697b      	ldr	r3, [r7, #20]
 8104bd4:	f023 0302 	bic.w	r3, r3, #2
 8104bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8104bda:	683b      	ldr	r3, [r7, #0]
 8104bdc:	689b      	ldr	r3, [r3, #8]
 8104bde:	697a      	ldr	r2, [r7, #20]
 8104be0:	4313      	orrs	r3, r2
 8104be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	4a2c      	ldr	r2, [pc, #176]	; (8104c98 <TIM_OC1_SetConfig+0x10c>)
 8104be8:	4293      	cmp	r3, r2
 8104bea:	d00f      	beq.n	8104c0c <TIM_OC1_SetConfig+0x80>
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	4a2b      	ldr	r2, [pc, #172]	; (8104c9c <TIM_OC1_SetConfig+0x110>)
 8104bf0:	4293      	cmp	r3, r2
 8104bf2:	d00b      	beq.n	8104c0c <TIM_OC1_SetConfig+0x80>
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	4a2a      	ldr	r2, [pc, #168]	; (8104ca0 <TIM_OC1_SetConfig+0x114>)
 8104bf8:	4293      	cmp	r3, r2
 8104bfa:	d007      	beq.n	8104c0c <TIM_OC1_SetConfig+0x80>
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	4a29      	ldr	r2, [pc, #164]	; (8104ca4 <TIM_OC1_SetConfig+0x118>)
 8104c00:	4293      	cmp	r3, r2
 8104c02:	d003      	beq.n	8104c0c <TIM_OC1_SetConfig+0x80>
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	4a28      	ldr	r2, [pc, #160]	; (8104ca8 <TIM_OC1_SetConfig+0x11c>)
 8104c08:	4293      	cmp	r3, r2
 8104c0a:	d10c      	bne.n	8104c26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8104c0c:	697b      	ldr	r3, [r7, #20]
 8104c0e:	f023 0308 	bic.w	r3, r3, #8
 8104c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8104c14:	683b      	ldr	r3, [r7, #0]
 8104c16:	68db      	ldr	r3, [r3, #12]
 8104c18:	697a      	ldr	r2, [r7, #20]
 8104c1a:	4313      	orrs	r3, r2
 8104c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8104c1e:	697b      	ldr	r3, [r7, #20]
 8104c20:	f023 0304 	bic.w	r3, r3, #4
 8104c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	4a1b      	ldr	r2, [pc, #108]	; (8104c98 <TIM_OC1_SetConfig+0x10c>)
 8104c2a:	4293      	cmp	r3, r2
 8104c2c:	d00f      	beq.n	8104c4e <TIM_OC1_SetConfig+0xc2>
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	4a1a      	ldr	r2, [pc, #104]	; (8104c9c <TIM_OC1_SetConfig+0x110>)
 8104c32:	4293      	cmp	r3, r2
 8104c34:	d00b      	beq.n	8104c4e <TIM_OC1_SetConfig+0xc2>
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	4a19      	ldr	r2, [pc, #100]	; (8104ca0 <TIM_OC1_SetConfig+0x114>)
 8104c3a:	4293      	cmp	r3, r2
 8104c3c:	d007      	beq.n	8104c4e <TIM_OC1_SetConfig+0xc2>
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	4a18      	ldr	r2, [pc, #96]	; (8104ca4 <TIM_OC1_SetConfig+0x118>)
 8104c42:	4293      	cmp	r3, r2
 8104c44:	d003      	beq.n	8104c4e <TIM_OC1_SetConfig+0xc2>
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	4a17      	ldr	r2, [pc, #92]	; (8104ca8 <TIM_OC1_SetConfig+0x11c>)
 8104c4a:	4293      	cmp	r3, r2
 8104c4c:	d111      	bne.n	8104c72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8104c4e:	693b      	ldr	r3, [r7, #16]
 8104c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8104c56:	693b      	ldr	r3, [r7, #16]
 8104c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8104c5e:	683b      	ldr	r3, [r7, #0]
 8104c60:	695b      	ldr	r3, [r3, #20]
 8104c62:	693a      	ldr	r2, [r7, #16]
 8104c64:	4313      	orrs	r3, r2
 8104c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8104c68:	683b      	ldr	r3, [r7, #0]
 8104c6a:	699b      	ldr	r3, [r3, #24]
 8104c6c:	693a      	ldr	r2, [r7, #16]
 8104c6e:	4313      	orrs	r3, r2
 8104c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	693a      	ldr	r2, [r7, #16]
 8104c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104c78:	687b      	ldr	r3, [r7, #4]
 8104c7a:	68fa      	ldr	r2, [r7, #12]
 8104c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8104c7e:	683b      	ldr	r3, [r7, #0]
 8104c80:	685a      	ldr	r2, [r3, #4]
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	697a      	ldr	r2, [r7, #20]
 8104c8a:	621a      	str	r2, [r3, #32]
}
 8104c8c:	bf00      	nop
 8104c8e:	371c      	adds	r7, #28
 8104c90:	46bd      	mov	sp, r7
 8104c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c96:	4770      	bx	lr
 8104c98:	40010000 	.word	0x40010000
 8104c9c:	40010400 	.word	0x40010400
 8104ca0:	40014000 	.word	0x40014000
 8104ca4:	40014400 	.word	0x40014400
 8104ca8:	40014800 	.word	0x40014800

08104cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104cac:	b480      	push	{r7}
 8104cae:	b087      	sub	sp, #28
 8104cb0:	af00      	add	r7, sp, #0
 8104cb2:	6078      	str	r0, [r7, #4]
 8104cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	6a1b      	ldr	r3, [r3, #32]
 8104cba:	f023 0210 	bic.w	r2, r3, #16
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	6a1b      	ldr	r3, [r3, #32]
 8104cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	685b      	ldr	r3, [r3, #4]
 8104ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	699b      	ldr	r3, [r3, #24]
 8104cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8104cd4:	68fb      	ldr	r3, [r7, #12]
 8104cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8104cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8104ce0:	68fb      	ldr	r3, [r7, #12]
 8104ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104ce8:	683b      	ldr	r3, [r7, #0]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	021b      	lsls	r3, r3, #8
 8104cee:	68fa      	ldr	r2, [r7, #12]
 8104cf0:	4313      	orrs	r3, r2
 8104cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8104cf4:	697b      	ldr	r3, [r7, #20]
 8104cf6:	f023 0320 	bic.w	r3, r3, #32
 8104cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8104cfc:	683b      	ldr	r3, [r7, #0]
 8104cfe:	689b      	ldr	r3, [r3, #8]
 8104d00:	011b      	lsls	r3, r3, #4
 8104d02:	697a      	ldr	r2, [r7, #20]
 8104d04:	4313      	orrs	r3, r2
 8104d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	4a28      	ldr	r2, [pc, #160]	; (8104dac <TIM_OC2_SetConfig+0x100>)
 8104d0c:	4293      	cmp	r3, r2
 8104d0e:	d003      	beq.n	8104d18 <TIM_OC2_SetConfig+0x6c>
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	4a27      	ldr	r2, [pc, #156]	; (8104db0 <TIM_OC2_SetConfig+0x104>)
 8104d14:	4293      	cmp	r3, r2
 8104d16:	d10d      	bne.n	8104d34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8104d18:	697b      	ldr	r3, [r7, #20]
 8104d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8104d20:	683b      	ldr	r3, [r7, #0]
 8104d22:	68db      	ldr	r3, [r3, #12]
 8104d24:	011b      	lsls	r3, r3, #4
 8104d26:	697a      	ldr	r2, [r7, #20]
 8104d28:	4313      	orrs	r3, r2
 8104d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8104d2c:	697b      	ldr	r3, [r7, #20]
 8104d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	4a1d      	ldr	r2, [pc, #116]	; (8104dac <TIM_OC2_SetConfig+0x100>)
 8104d38:	4293      	cmp	r3, r2
 8104d3a:	d00f      	beq.n	8104d5c <TIM_OC2_SetConfig+0xb0>
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	4a1c      	ldr	r2, [pc, #112]	; (8104db0 <TIM_OC2_SetConfig+0x104>)
 8104d40:	4293      	cmp	r3, r2
 8104d42:	d00b      	beq.n	8104d5c <TIM_OC2_SetConfig+0xb0>
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	4a1b      	ldr	r2, [pc, #108]	; (8104db4 <TIM_OC2_SetConfig+0x108>)
 8104d48:	4293      	cmp	r3, r2
 8104d4a:	d007      	beq.n	8104d5c <TIM_OC2_SetConfig+0xb0>
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	4a1a      	ldr	r2, [pc, #104]	; (8104db8 <TIM_OC2_SetConfig+0x10c>)
 8104d50:	4293      	cmp	r3, r2
 8104d52:	d003      	beq.n	8104d5c <TIM_OC2_SetConfig+0xb0>
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	4a19      	ldr	r2, [pc, #100]	; (8104dbc <TIM_OC2_SetConfig+0x110>)
 8104d58:	4293      	cmp	r3, r2
 8104d5a:	d113      	bne.n	8104d84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8104d5c:	693b      	ldr	r3, [r7, #16]
 8104d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8104d64:	693b      	ldr	r3, [r7, #16]
 8104d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8104d6c:	683b      	ldr	r3, [r7, #0]
 8104d6e:	695b      	ldr	r3, [r3, #20]
 8104d70:	009b      	lsls	r3, r3, #2
 8104d72:	693a      	ldr	r2, [r7, #16]
 8104d74:	4313      	orrs	r3, r2
 8104d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8104d78:	683b      	ldr	r3, [r7, #0]
 8104d7a:	699b      	ldr	r3, [r3, #24]
 8104d7c:	009b      	lsls	r3, r3, #2
 8104d7e:	693a      	ldr	r2, [r7, #16]
 8104d80:	4313      	orrs	r3, r2
 8104d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	693a      	ldr	r2, [r7, #16]
 8104d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	68fa      	ldr	r2, [r7, #12]
 8104d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8104d90:	683b      	ldr	r3, [r7, #0]
 8104d92:	685a      	ldr	r2, [r3, #4]
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	697a      	ldr	r2, [r7, #20]
 8104d9c:	621a      	str	r2, [r3, #32]
}
 8104d9e:	bf00      	nop
 8104da0:	371c      	adds	r7, #28
 8104da2:	46bd      	mov	sp, r7
 8104da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da8:	4770      	bx	lr
 8104daa:	bf00      	nop
 8104dac:	40010000 	.word	0x40010000
 8104db0:	40010400 	.word	0x40010400
 8104db4:	40014000 	.word	0x40014000
 8104db8:	40014400 	.word	0x40014400
 8104dbc:	40014800 	.word	0x40014800

08104dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104dc0:	b480      	push	{r7}
 8104dc2:	b087      	sub	sp, #28
 8104dc4:	af00      	add	r7, sp, #0
 8104dc6:	6078      	str	r0, [r7, #4]
 8104dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	6a1b      	ldr	r3, [r3, #32]
 8104dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	6a1b      	ldr	r3, [r3, #32]
 8104dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	685b      	ldr	r3, [r3, #4]
 8104de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	69db      	ldr	r3, [r3, #28]
 8104de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8104de8:	68fb      	ldr	r3, [r7, #12]
 8104dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8104df0:	68fb      	ldr	r3, [r7, #12]
 8104df2:	f023 0303 	bic.w	r3, r3, #3
 8104df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104df8:	683b      	ldr	r3, [r7, #0]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	68fa      	ldr	r2, [r7, #12]
 8104dfe:	4313      	orrs	r3, r2
 8104e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8104e02:	697b      	ldr	r3, [r7, #20]
 8104e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8104e0a:	683b      	ldr	r3, [r7, #0]
 8104e0c:	689b      	ldr	r3, [r3, #8]
 8104e0e:	021b      	lsls	r3, r3, #8
 8104e10:	697a      	ldr	r2, [r7, #20]
 8104e12:	4313      	orrs	r3, r2
 8104e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	4a27      	ldr	r2, [pc, #156]	; (8104eb8 <TIM_OC3_SetConfig+0xf8>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d003      	beq.n	8104e26 <TIM_OC3_SetConfig+0x66>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	4a26      	ldr	r2, [pc, #152]	; (8104ebc <TIM_OC3_SetConfig+0xfc>)
 8104e22:	4293      	cmp	r3, r2
 8104e24:	d10d      	bne.n	8104e42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8104e26:	697b      	ldr	r3, [r7, #20]
 8104e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8104e2e:	683b      	ldr	r3, [r7, #0]
 8104e30:	68db      	ldr	r3, [r3, #12]
 8104e32:	021b      	lsls	r3, r3, #8
 8104e34:	697a      	ldr	r2, [r7, #20]
 8104e36:	4313      	orrs	r3, r2
 8104e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8104e3a:	697b      	ldr	r3, [r7, #20]
 8104e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	4a1c      	ldr	r2, [pc, #112]	; (8104eb8 <TIM_OC3_SetConfig+0xf8>)
 8104e46:	4293      	cmp	r3, r2
 8104e48:	d00f      	beq.n	8104e6a <TIM_OC3_SetConfig+0xaa>
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	4a1b      	ldr	r2, [pc, #108]	; (8104ebc <TIM_OC3_SetConfig+0xfc>)
 8104e4e:	4293      	cmp	r3, r2
 8104e50:	d00b      	beq.n	8104e6a <TIM_OC3_SetConfig+0xaa>
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	4a1a      	ldr	r2, [pc, #104]	; (8104ec0 <TIM_OC3_SetConfig+0x100>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d007      	beq.n	8104e6a <TIM_OC3_SetConfig+0xaa>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	4a19      	ldr	r2, [pc, #100]	; (8104ec4 <TIM_OC3_SetConfig+0x104>)
 8104e5e:	4293      	cmp	r3, r2
 8104e60:	d003      	beq.n	8104e6a <TIM_OC3_SetConfig+0xaa>
 8104e62:	687b      	ldr	r3, [r7, #4]
 8104e64:	4a18      	ldr	r2, [pc, #96]	; (8104ec8 <TIM_OC3_SetConfig+0x108>)
 8104e66:	4293      	cmp	r3, r2
 8104e68:	d113      	bne.n	8104e92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8104e6a:	693b      	ldr	r3, [r7, #16]
 8104e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8104e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8104e72:	693b      	ldr	r3, [r7, #16]
 8104e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8104e7a:	683b      	ldr	r3, [r7, #0]
 8104e7c:	695b      	ldr	r3, [r3, #20]
 8104e7e:	011b      	lsls	r3, r3, #4
 8104e80:	693a      	ldr	r2, [r7, #16]
 8104e82:	4313      	orrs	r3, r2
 8104e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8104e86:	683b      	ldr	r3, [r7, #0]
 8104e88:	699b      	ldr	r3, [r3, #24]
 8104e8a:	011b      	lsls	r3, r3, #4
 8104e8c:	693a      	ldr	r2, [r7, #16]
 8104e8e:	4313      	orrs	r3, r2
 8104e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	693a      	ldr	r2, [r7, #16]
 8104e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	68fa      	ldr	r2, [r7, #12]
 8104e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8104e9e:	683b      	ldr	r3, [r7, #0]
 8104ea0:	685a      	ldr	r2, [r3, #4]
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	697a      	ldr	r2, [r7, #20]
 8104eaa:	621a      	str	r2, [r3, #32]
}
 8104eac:	bf00      	nop
 8104eae:	371c      	adds	r7, #28
 8104eb0:	46bd      	mov	sp, r7
 8104eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104eb6:	4770      	bx	lr
 8104eb8:	40010000 	.word	0x40010000
 8104ebc:	40010400 	.word	0x40010400
 8104ec0:	40014000 	.word	0x40014000
 8104ec4:	40014400 	.word	0x40014400
 8104ec8:	40014800 	.word	0x40014800

08104ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104ecc:	b480      	push	{r7}
 8104ece:	b087      	sub	sp, #28
 8104ed0:	af00      	add	r7, sp, #0
 8104ed2:	6078      	str	r0, [r7, #4]
 8104ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	6a1b      	ldr	r3, [r3, #32]
 8104eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	6a1b      	ldr	r3, [r3, #32]
 8104ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	685b      	ldr	r3, [r3, #4]
 8104eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	69db      	ldr	r3, [r3, #28]
 8104ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8104efc:	68fb      	ldr	r3, [r7, #12]
 8104efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104f04:	683b      	ldr	r3, [r7, #0]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	021b      	lsls	r3, r3, #8
 8104f0a:	68fa      	ldr	r2, [r7, #12]
 8104f0c:	4313      	orrs	r3, r2
 8104f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8104f10:	693b      	ldr	r3, [r7, #16]
 8104f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8104f18:	683b      	ldr	r3, [r7, #0]
 8104f1a:	689b      	ldr	r3, [r3, #8]
 8104f1c:	031b      	lsls	r3, r3, #12
 8104f1e:	693a      	ldr	r2, [r7, #16]
 8104f20:	4313      	orrs	r3, r2
 8104f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	4a18      	ldr	r2, [pc, #96]	; (8104f88 <TIM_OC4_SetConfig+0xbc>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d00f      	beq.n	8104f4c <TIM_OC4_SetConfig+0x80>
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	4a17      	ldr	r2, [pc, #92]	; (8104f8c <TIM_OC4_SetConfig+0xc0>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d00b      	beq.n	8104f4c <TIM_OC4_SetConfig+0x80>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	4a16      	ldr	r2, [pc, #88]	; (8104f90 <TIM_OC4_SetConfig+0xc4>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d007      	beq.n	8104f4c <TIM_OC4_SetConfig+0x80>
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	4a15      	ldr	r2, [pc, #84]	; (8104f94 <TIM_OC4_SetConfig+0xc8>)
 8104f40:	4293      	cmp	r3, r2
 8104f42:	d003      	beq.n	8104f4c <TIM_OC4_SetConfig+0x80>
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	4a14      	ldr	r2, [pc, #80]	; (8104f98 <TIM_OC4_SetConfig+0xcc>)
 8104f48:	4293      	cmp	r3, r2
 8104f4a:	d109      	bne.n	8104f60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8104f4c:	697b      	ldr	r3, [r7, #20]
 8104f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8104f54:	683b      	ldr	r3, [r7, #0]
 8104f56:	695b      	ldr	r3, [r3, #20]
 8104f58:	019b      	lsls	r3, r3, #6
 8104f5a:	697a      	ldr	r2, [r7, #20]
 8104f5c:	4313      	orrs	r3, r2
 8104f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	697a      	ldr	r2, [r7, #20]
 8104f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	68fa      	ldr	r2, [r7, #12]
 8104f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8104f6c:	683b      	ldr	r3, [r7, #0]
 8104f6e:	685a      	ldr	r2, [r3, #4]
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	693a      	ldr	r2, [r7, #16]
 8104f78:	621a      	str	r2, [r3, #32]
}
 8104f7a:	bf00      	nop
 8104f7c:	371c      	adds	r7, #28
 8104f7e:	46bd      	mov	sp, r7
 8104f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f84:	4770      	bx	lr
 8104f86:	bf00      	nop
 8104f88:	40010000 	.word	0x40010000
 8104f8c:	40010400 	.word	0x40010400
 8104f90:	40014000 	.word	0x40014000
 8104f94:	40014400 	.word	0x40014400
 8104f98:	40014800 	.word	0x40014800

08104f9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8104f9c:	b480      	push	{r7}
 8104f9e:	b087      	sub	sp, #28
 8104fa0:	af00      	add	r7, sp, #0
 8104fa2:	6078      	str	r0, [r7, #4]
 8104fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	6a1b      	ldr	r3, [r3, #32]
 8104faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	6a1b      	ldr	r3, [r3, #32]
 8104fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	685b      	ldr	r3, [r3, #4]
 8104fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8104fc4:	68fb      	ldr	r3, [r7, #12]
 8104fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104fcc:	683b      	ldr	r3, [r7, #0]
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	68fa      	ldr	r2, [r7, #12]
 8104fd2:	4313      	orrs	r3, r2
 8104fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8104fd6:	693b      	ldr	r3, [r7, #16]
 8104fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8104fde:	683b      	ldr	r3, [r7, #0]
 8104fe0:	689b      	ldr	r3, [r3, #8]
 8104fe2:	041b      	lsls	r3, r3, #16
 8104fe4:	693a      	ldr	r2, [r7, #16]
 8104fe6:	4313      	orrs	r3, r2
 8104fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	4a17      	ldr	r2, [pc, #92]	; (810504c <TIM_OC5_SetConfig+0xb0>)
 8104fee:	4293      	cmp	r3, r2
 8104ff0:	d00f      	beq.n	8105012 <TIM_OC5_SetConfig+0x76>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	4a16      	ldr	r2, [pc, #88]	; (8105050 <TIM_OC5_SetConfig+0xb4>)
 8104ff6:	4293      	cmp	r3, r2
 8104ff8:	d00b      	beq.n	8105012 <TIM_OC5_SetConfig+0x76>
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	4a15      	ldr	r2, [pc, #84]	; (8105054 <TIM_OC5_SetConfig+0xb8>)
 8104ffe:	4293      	cmp	r3, r2
 8105000:	d007      	beq.n	8105012 <TIM_OC5_SetConfig+0x76>
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	4a14      	ldr	r2, [pc, #80]	; (8105058 <TIM_OC5_SetConfig+0xbc>)
 8105006:	4293      	cmp	r3, r2
 8105008:	d003      	beq.n	8105012 <TIM_OC5_SetConfig+0x76>
 810500a:	687b      	ldr	r3, [r7, #4]
 810500c:	4a13      	ldr	r2, [pc, #76]	; (810505c <TIM_OC5_SetConfig+0xc0>)
 810500e:	4293      	cmp	r3, r2
 8105010:	d109      	bne.n	8105026 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8105012:	697b      	ldr	r3, [r7, #20]
 8105014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810501a:	683b      	ldr	r3, [r7, #0]
 810501c:	695b      	ldr	r3, [r3, #20]
 810501e:	021b      	lsls	r3, r3, #8
 8105020:	697a      	ldr	r2, [r7, #20]
 8105022:	4313      	orrs	r3, r2
 8105024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	697a      	ldr	r2, [r7, #20]
 810502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	68fa      	ldr	r2, [r7, #12]
 8105030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8105032:	683b      	ldr	r3, [r7, #0]
 8105034:	685a      	ldr	r2, [r3, #4]
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	693a      	ldr	r2, [r7, #16]
 810503e:	621a      	str	r2, [r3, #32]
}
 8105040:	bf00      	nop
 8105042:	371c      	adds	r7, #28
 8105044:	46bd      	mov	sp, r7
 8105046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810504a:	4770      	bx	lr
 810504c:	40010000 	.word	0x40010000
 8105050:	40010400 	.word	0x40010400
 8105054:	40014000 	.word	0x40014000
 8105058:	40014400 	.word	0x40014400
 810505c:	40014800 	.word	0x40014800

08105060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8105060:	b480      	push	{r7}
 8105062:	b087      	sub	sp, #28
 8105064:	af00      	add	r7, sp, #0
 8105066:	6078      	str	r0, [r7, #4]
 8105068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	6a1b      	ldr	r3, [r3, #32]
 810506e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	6a1b      	ldr	r3, [r3, #32]
 810507a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	685b      	ldr	r3, [r3, #4]
 8105080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8105088:	68fb      	ldr	r3, [r7, #12]
 810508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105090:	683b      	ldr	r3, [r7, #0]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	021b      	lsls	r3, r3, #8
 8105096:	68fa      	ldr	r2, [r7, #12]
 8105098:	4313      	orrs	r3, r2
 810509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810509c:	693b      	ldr	r3, [r7, #16]
 810509e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81050a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81050a4:	683b      	ldr	r3, [r7, #0]
 81050a6:	689b      	ldr	r3, [r3, #8]
 81050a8:	051b      	lsls	r3, r3, #20
 81050aa:	693a      	ldr	r2, [r7, #16]
 81050ac:	4313      	orrs	r3, r2
 81050ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	4a18      	ldr	r2, [pc, #96]	; (8105114 <TIM_OC6_SetConfig+0xb4>)
 81050b4:	4293      	cmp	r3, r2
 81050b6:	d00f      	beq.n	81050d8 <TIM_OC6_SetConfig+0x78>
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	4a17      	ldr	r2, [pc, #92]	; (8105118 <TIM_OC6_SetConfig+0xb8>)
 81050bc:	4293      	cmp	r3, r2
 81050be:	d00b      	beq.n	81050d8 <TIM_OC6_SetConfig+0x78>
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	4a16      	ldr	r2, [pc, #88]	; (810511c <TIM_OC6_SetConfig+0xbc>)
 81050c4:	4293      	cmp	r3, r2
 81050c6:	d007      	beq.n	81050d8 <TIM_OC6_SetConfig+0x78>
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	4a15      	ldr	r2, [pc, #84]	; (8105120 <TIM_OC6_SetConfig+0xc0>)
 81050cc:	4293      	cmp	r3, r2
 81050ce:	d003      	beq.n	81050d8 <TIM_OC6_SetConfig+0x78>
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	4a14      	ldr	r2, [pc, #80]	; (8105124 <TIM_OC6_SetConfig+0xc4>)
 81050d4:	4293      	cmp	r3, r2
 81050d6:	d109      	bne.n	81050ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81050d8:	697b      	ldr	r3, [r7, #20]
 81050da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81050de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81050e0:	683b      	ldr	r3, [r7, #0]
 81050e2:	695b      	ldr	r3, [r3, #20]
 81050e4:	029b      	lsls	r3, r3, #10
 81050e6:	697a      	ldr	r2, [r7, #20]
 81050e8:	4313      	orrs	r3, r2
 81050ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	697a      	ldr	r2, [r7, #20]
 81050f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	68fa      	ldr	r2, [r7, #12]
 81050f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81050f8:	683b      	ldr	r3, [r7, #0]
 81050fa:	685a      	ldr	r2, [r3, #4]
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	693a      	ldr	r2, [r7, #16]
 8105104:	621a      	str	r2, [r3, #32]
}
 8105106:	bf00      	nop
 8105108:	371c      	adds	r7, #28
 810510a:	46bd      	mov	sp, r7
 810510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105110:	4770      	bx	lr
 8105112:	bf00      	nop
 8105114:	40010000 	.word	0x40010000
 8105118:	40010400 	.word	0x40010400
 810511c:	40014000 	.word	0x40014000
 8105120:	40014400 	.word	0x40014400
 8105124:	40014800 	.word	0x40014800

08105128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8105128:	b480      	push	{r7}
 810512a:	b087      	sub	sp, #28
 810512c:	af00      	add	r7, sp, #0
 810512e:	60f8      	str	r0, [r7, #12]
 8105130:	60b9      	str	r1, [r7, #8]
 8105132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8105134:	68bb      	ldr	r3, [r7, #8]
 8105136:	f003 031f 	and.w	r3, r3, #31
 810513a:	2201      	movs	r2, #1
 810513c:	fa02 f303 	lsl.w	r3, r2, r3
 8105140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8105142:	68fb      	ldr	r3, [r7, #12]
 8105144:	6a1a      	ldr	r2, [r3, #32]
 8105146:	697b      	ldr	r3, [r7, #20]
 8105148:	43db      	mvns	r3, r3
 810514a:	401a      	ands	r2, r3
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	6a1a      	ldr	r2, [r3, #32]
 8105154:	68bb      	ldr	r3, [r7, #8]
 8105156:	f003 031f 	and.w	r3, r3, #31
 810515a:	6879      	ldr	r1, [r7, #4]
 810515c:	fa01 f303 	lsl.w	r3, r1, r3
 8105160:	431a      	orrs	r2, r3
 8105162:	68fb      	ldr	r3, [r7, #12]
 8105164:	621a      	str	r2, [r3, #32]
}
 8105166:	bf00      	nop
 8105168:	371c      	adds	r7, #28
 810516a:	46bd      	mov	sp, r7
 810516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105170:	4770      	bx	lr
	...

08105174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105174:	b480      	push	{r7}
 8105176:	b085      	sub	sp, #20
 8105178:	af00      	add	r7, sp, #0
 810517a:	6078      	str	r0, [r7, #4]
 810517c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105184:	2b01      	cmp	r3, #1
 8105186:	d101      	bne.n	810518c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8105188:	2302      	movs	r3, #2
 810518a:	e068      	b.n	810525e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	2201      	movs	r2, #1
 8105190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	2202      	movs	r2, #2
 8105198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	681b      	ldr	r3, [r3, #0]
 81051a0:	685b      	ldr	r3, [r3, #4]
 81051a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	689b      	ldr	r3, [r3, #8]
 81051aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81051ac:	687b      	ldr	r3, [r7, #4]
 81051ae:	681b      	ldr	r3, [r3, #0]
 81051b0:	4a2e      	ldr	r2, [pc, #184]	; (810526c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 81051b2:	4293      	cmp	r3, r2
 81051b4:	d004      	beq.n	81051c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	4a2d      	ldr	r2, [pc, #180]	; (8105270 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 81051bc:	4293      	cmp	r3, r2
 81051be:	d108      	bne.n	81051d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81051c0:	68fb      	ldr	r3, [r7, #12]
 81051c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81051c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81051c8:	683b      	ldr	r3, [r7, #0]
 81051ca:	685b      	ldr	r3, [r3, #4]
 81051cc:	68fa      	ldr	r2, [r7, #12]
 81051ce:	4313      	orrs	r3, r2
 81051d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81051d2:	68fb      	ldr	r3, [r7, #12]
 81051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81051d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81051da:	683b      	ldr	r3, [r7, #0]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	68fa      	ldr	r2, [r7, #12]
 81051e0:	4313      	orrs	r3, r2
 81051e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	68fa      	ldr	r2, [r7, #12]
 81051ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	681b      	ldr	r3, [r3, #0]
 81051f0:	4a1e      	ldr	r2, [pc, #120]	; (810526c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 81051f2:	4293      	cmp	r3, r2
 81051f4:	d01d      	beq.n	8105232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81051fe:	d018      	beq.n	8105232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	681b      	ldr	r3, [r3, #0]
 8105204:	4a1b      	ldr	r2, [pc, #108]	; (8105274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105206:	4293      	cmp	r3, r2
 8105208:	d013      	beq.n	8105232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	4a1a      	ldr	r2, [pc, #104]	; (8105278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105210:	4293      	cmp	r3, r2
 8105212:	d00e      	beq.n	8105232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	4a18      	ldr	r2, [pc, #96]	; (810527c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810521a:	4293      	cmp	r3, r2
 810521c:	d009      	beq.n	8105232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	681b      	ldr	r3, [r3, #0]
 8105222:	4a13      	ldr	r2, [pc, #76]	; (8105270 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8105224:	4293      	cmp	r3, r2
 8105226:	d004      	beq.n	8105232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	681b      	ldr	r3, [r3, #0]
 810522c:	4a14      	ldr	r2, [pc, #80]	; (8105280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810522e:	4293      	cmp	r3, r2
 8105230:	d10c      	bne.n	810524c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105232:	68bb      	ldr	r3, [r7, #8]
 8105234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810523a:	683b      	ldr	r3, [r7, #0]
 810523c:	689b      	ldr	r3, [r3, #8]
 810523e:	68ba      	ldr	r2, [r7, #8]
 8105240:	4313      	orrs	r3, r2
 8105242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	68ba      	ldr	r2, [r7, #8]
 810524a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	2201      	movs	r2, #1
 8105250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	2200      	movs	r2, #0
 8105258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810525c:	2300      	movs	r3, #0
}
 810525e:	4618      	mov	r0, r3
 8105260:	3714      	adds	r7, #20
 8105262:	46bd      	mov	sp, r7
 8105264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105268:	4770      	bx	lr
 810526a:	bf00      	nop
 810526c:	40010000 	.word	0x40010000
 8105270:	40010400 	.word	0x40010400
 8105274:	40000400 	.word	0x40000400
 8105278:	40000800 	.word	0x40000800
 810527c:	40000c00 	.word	0x40000c00
 8105280:	40001800 	.word	0x40001800

08105284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8105284:	b480      	push	{r7}
 8105286:	b083      	sub	sp, #12
 8105288:	af00      	add	r7, sp, #0
 810528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810528c:	bf00      	nop
 810528e:	370c      	adds	r7, #12
 8105290:	46bd      	mov	sp, r7
 8105292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105296:	4770      	bx	lr

08105298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8105298:	b480      	push	{r7}
 810529a:	b083      	sub	sp, #12
 810529c:	af00      	add	r7, sp, #0
 810529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81052a0:	bf00      	nop
 81052a2:	370c      	adds	r7, #12
 81052a4:	46bd      	mov	sp, r7
 81052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052aa:	4770      	bx	lr

081052ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81052ac:	b480      	push	{r7}
 81052ae:	b083      	sub	sp, #12
 81052b0:	af00      	add	r7, sp, #0
 81052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81052b4:	bf00      	nop
 81052b6:	370c      	adds	r7, #12
 81052b8:	46bd      	mov	sp, r7
 81052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052be:	4770      	bx	lr

081052c0 <writeRegister>:
//	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 81052c0:	b084      	sub	sp, #16
 81052c2:	b580      	push	{r7, lr}
 81052c4:	b086      	sub	sp, #24
 81052c6:	af04      	add	r7, sp, #16
 81052c8:	f107 0c10 	add.w	ip, r7, #16
 81052cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 81052d0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81052d4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, 10);
 81052d6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 81052da:	b299      	uxth	r1, r3
 81052dc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81052e0:	b29a      	uxth	r2, r3
 81052e2:	230a      	movs	r3, #10
 81052e4:	9302      	str	r3, [sp, #8]
 81052e6:	2301      	movs	r3, #1
 81052e8:	9301      	str	r3, [sp, #4]
 81052ea:	1d3b      	adds	r3, r7, #4
 81052ec:	9300      	str	r3, [sp, #0]
 81052ee:	2301      	movs	r3, #1
 81052f0:	f107 0010 	add.w	r0, r7, #16
 81052f4:	f7fd f84c 	bl	8102390 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 81052f8:	200a      	movs	r0, #10
 81052fa:	f7fc fc3b 	bl	8101b74 <HAL_Delay>
}
 81052fe:	bf00      	nop
 8105300:	3708      	adds	r7, #8
 8105302:	46bd      	mov	sp, r7
 8105304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8105308:	b004      	add	sp, #16
 810530a:	4770      	bx	lr

0810530c <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 810530c:	b084      	sub	sp, #16
 810530e:	b580      	push	{r7, lr}
 8105310:	b084      	sub	sp, #16
 8105312:	af04      	add	r7, sp, #16
 8105314:	f107 0c08 	add.w	ip, r7, #8
 8105318:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, 10);
 810531c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8105320:	b299      	uxth	r1, r3
 8105322:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8105326:	b29a      	uxth	r2, r3
 8105328:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 810532c:	b29b      	uxth	r3, r3
 810532e:	200a      	movs	r0, #10
 8105330:	9002      	str	r0, [sp, #8]
 8105332:	9301      	str	r3, [sp, #4]
 8105334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8105336:	9300      	str	r3, [sp, #0]
 8105338:	2301      	movs	r3, #1
 810533a:	f107 0008 	add.w	r0, r7, #8
 810533e:	f7fd f93b 	bl	81025b8 <HAL_I2C_Mem_Read>
}
 8105342:	bf00      	nop
 8105344:	46bd      	mov	sp, r7
 8105346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810534a:	b004      	add	sp, #16
 810534c:	4770      	bx	lr

0810534e <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 810534e:	b084      	sub	sp, #16
 8105350:	b5b0      	push	{r4, r5, r7, lr}
 8105352:	b092      	sub	sp, #72	; 0x48
 8105354:	af12      	add	r7, sp, #72	; 0x48
 8105356:	f107 0410 	add.w	r4, r7, #16
 810535a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 810535e:	2325      	movs	r3, #37	; 0x25
 8105360:	220c      	movs	r2, #12
 8105362:	9211      	str	r2, [sp, #68]	; 0x44
 8105364:	9310      	str	r3, [sp, #64]	; 0x40
 8105366:	466d      	mov	r5, sp
 8105368:	f107 0420 	add.w	r4, r7, #32
 810536c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810536e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105378:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810537c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105380:	f107 0310 	add.w	r3, r7, #16
 8105384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105386:	f7ff ff9b 	bl	81052c0 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 810538a:	2226      	movs	r2, #38	; 0x26
 810538c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8105390:	9311      	str	r3, [sp, #68]	; 0x44
 8105392:	9210      	str	r2, [sp, #64]	; 0x40
 8105394:	466d      	mov	r5, sp
 8105396:	f107 0420 	add.w	r4, r7, #32
 810539a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810539c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810539e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81053a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81053a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81053a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81053a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81053aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81053ae:	f107 0310 	add.w	r3, r7, #16
 81053b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81053b4:	f7ff ff84 	bl	81052c0 <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 81053b8:	2263      	movs	r2, #99	; 0x63
 81053ba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81053be:	9311      	str	r3, [sp, #68]	; 0x44
 81053c0:	9210      	str	r2, [sp, #64]	; 0x40
 81053c2:	466d      	mov	r5, sp
 81053c4:	f107 0420 	add.w	r4, r7, #32
 81053c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81053ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81053cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81053ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81053d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81053d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81053d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81053d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81053dc:	f107 0310 	add.w	r3, r7, #16
 81053e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81053e2:	f7ff ff6d 	bl	81052c0 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 81053e6:	2227      	movs	r2, #39	; 0x27
 81053e8:	2380      	movs	r3, #128	; 0x80
 81053ea:	f043 0301 	orr.w	r3, r3, #1
 81053ee:	b2db      	uxtb	r3, r3
 81053f0:	9311      	str	r3, [sp, #68]	; 0x44
 81053f2:	9210      	str	r2, [sp, #64]	; 0x40
 81053f4:	466d      	mov	r5, sp
 81053f6:	f107 0420 	add.w	r4, r7, #32
 81053fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81053fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81053fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105406:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810540a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810540e:	f107 0310 	add.w	r3, r7, #16
 8105412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105414:	f7ff ff54 	bl	81052c0 <writeRegister>
}
 8105418:	bf00      	nop
 810541a:	46bd      	mov	sp, r7
 810541c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105420:	b004      	add	sp, #16
 8105422:	4770      	bx	lr

08105424 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8105424:	b084      	sub	sp, #16
 8105426:	b5b0      	push	{r4, r5, r7, lr}
 8105428:	b094      	sub	sp, #80	; 0x50
 810542a:	af14      	add	r7, sp, #80	; 0x50
 810542c:	f107 0410 	add.w	r4, r7, #16
 8105430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8105434:	2225      	movs	r2, #37	; 0x25
 8105436:	210c      	movs	r1, #12
 8105438:	2380      	movs	r3, #128	; 0x80
 810543a:	430b      	orrs	r3, r1
 810543c:	b2db      	uxtb	r3, r3
 810543e:	9311      	str	r3, [sp, #68]	; 0x44
 8105440:	9210      	str	r2, [sp, #64]	; 0x40
 8105442:	466d      	mov	r5, sp
 8105444:	f107 0420 	add.w	r4, r7, #32
 8105448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810544a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810544c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810544e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105454:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105458:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810545c:	f107 0310 	add.w	r3, r7, #16
 8105460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105462:	f7ff ff2d 	bl	81052c0 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8105466:	2226      	movs	r2, #38	; 0x26
 8105468:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 810546c:	9311      	str	r3, [sp, #68]	; 0x44
 810546e:	9210      	str	r2, [sp, #64]	; 0x40
 8105470:	466d      	mov	r5, sp
 8105472:	f107 0420 	add.w	r4, r7, #32
 8105476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810547a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810547c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810547e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105482:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105486:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810548a:	f107 0310 	add.w	r3, r7, #16
 810548e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105490:	f7ff ff16 	bl	81052c0 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8105494:	2227      	movs	r2, #39	; 0x27
 8105496:	2180      	movs	r1, #128	; 0x80
 8105498:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 810549c:	430b      	orrs	r3, r1
 810549e:	b2db      	uxtb	r3, r3
 81054a0:	9311      	str	r3, [sp, #68]	; 0x44
 81054a2:	9210      	str	r2, [sp, #64]	; 0x40
 81054a4:	466d      	mov	r5, sp
 81054a6:	f107 0420 	add.w	r4, r7, #32
 81054aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81054ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81054ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81054b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81054b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81054b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81054b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81054ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81054be:	f107 0310 	add.w	r3, r7, #16
 81054c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81054c4:	f7ff fefc 	bl	81052c0 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 81054c8:	2001      	movs	r0, #1
 81054ca:	f7fc fb53 	bl	8101b74 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 81054ce:	2249      	movs	r2, #73	; 0x49
 81054d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81054d2:	9312      	str	r3, [sp, #72]	; 0x48
 81054d4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81054d8:	9311      	str	r3, [sp, #68]	; 0x44
 81054da:	9210      	str	r2, [sp, #64]	; 0x40
 81054dc:	466d      	mov	r5, sp
 81054de:	f107 0420 	add.w	r4, r7, #32
 81054e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81054e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81054e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81054e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81054ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81054ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81054ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81054f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81054f6:	f107 0310 	add.w	r3, r7, #16
 81054fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81054fc:	f7ff ff06 	bl	810530c <readRegisters>
}
 8105500:	bf00      	nop
 8105502:	46bd      	mov	sp, r7
 8105504:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105508:	b004      	add	sp, #16
 810550a:	4770      	bx	lr

0810550c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 810550c:	b084      	sub	sp, #16
 810550e:	b5b0      	push	{r4, r5, r7, lr}
 8105510:	b094      	sub	sp, #80	; 0x50
 8105512:	af14      	add	r7, sp, #80	; 0x50
 8105514:	f107 0410 	add.w	r4, r7, #16
 8105518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 810551c:	2375      	movs	r3, #117	; 0x75
 810551e:	4a0f      	ldr	r2, [pc, #60]	; (810555c <whoAmI+0x50>)
 8105520:	9212      	str	r2, [sp, #72]	; 0x48
 8105522:	2201      	movs	r2, #1
 8105524:	9211      	str	r2, [sp, #68]	; 0x44
 8105526:	9310      	str	r3, [sp, #64]	; 0x40
 8105528:	466d      	mov	r5, sp
 810552a:	f107 0420 	add.w	r4, r7, #32
 810552e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810553a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810553e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105542:	f107 0310 	add.w	r3, r7, #16
 8105546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105548:	f7ff fee0 	bl	810530c <readRegisters>

	// return the register value
	return _buffer[0];
 810554c:	4b03      	ldr	r3, [pc, #12]	; (810555c <whoAmI+0x50>)
 810554e:	781b      	ldrb	r3, [r3, #0]
}
 8105550:	4618      	mov	r0, r3
 8105552:	46bd      	mov	sp, r7
 8105554:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105558:	b004      	add	sp, #16
 810555a:	4770      	bx	lr
 810555c:	100002bc 	.word	0x100002bc

08105560 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 8105560:	b084      	sub	sp, #16
 8105562:	b5b0      	push	{r4, r5, r7, lr}
 8105564:	b094      	sub	sp, #80	; 0x50
 8105566:	af14      	add	r7, sp, #80	; 0x50
 8105568:	f107 0410 	add.w	r4, r7, #16
 810556c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 8105570:	2300      	movs	r3, #0
 8105572:	4a0f      	ldr	r2, [pc, #60]	; (81055b0 <whoAmIAK8963+0x50>)
 8105574:	9212      	str	r2, [sp, #72]	; 0x48
 8105576:	2201      	movs	r2, #1
 8105578:	9211      	str	r2, [sp, #68]	; 0x44
 810557a:	9310      	str	r3, [sp, #64]	; 0x40
 810557c:	466d      	mov	r5, sp
 810557e:	f107 0420 	add.w	r4, r7, #32
 8105582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810558a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810558c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810558e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105592:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105596:	f107 0310 	add.w	r3, r7, #16
 810559a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810559c:	f7ff ff42 	bl	8105424 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 81055a0:	4b03      	ldr	r3, [pc, #12]	; (81055b0 <whoAmIAK8963+0x50>)
 81055a2:	781b      	ldrb	r3, [r3, #0]
}
 81055a4:	4618      	mov	r0, r3
 81055a6:	46bd      	mov	sp, r7
 81055a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81055ac:	b004      	add	sp, #16
 81055ae:	4770      	bx	lr
 81055b0:	100002bc 	.word	0x100002bc

081055b4 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 81055b4:	b084      	sub	sp, #16
 81055b6:	b5b0      	push	{r4, r5, r7, lr}
 81055b8:	b096      	sub	sp, #88	; 0x58
 81055ba:	af14      	add	r7, sp, #80	; 0x50
 81055bc:	f107 0418 	add.w	r4, r7, #24
 81055c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 81055c4:	236b      	movs	r3, #107	; 0x6b
 81055c6:	2201      	movs	r2, #1
 81055c8:	9211      	str	r2, [sp, #68]	; 0x44
 81055ca:	9310      	str	r3, [sp, #64]	; 0x40
 81055cc:	466d      	mov	r5, sp
 81055ce:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81055d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81055d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81055d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81055d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81055da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81055dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81055de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81055e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81055e6:	f107 0318 	add.w	r3, r7, #24
 81055ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81055ec:	f7ff fe68 	bl	81052c0 <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 81055f0:	236a      	movs	r3, #106	; 0x6a
 81055f2:	2220      	movs	r2, #32
 81055f4:	9211      	str	r2, [sp, #68]	; 0x44
 81055f6:	9310      	str	r3, [sp, #64]	; 0x40
 81055f8:	466d      	mov	r5, sp
 81055fa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81055fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810560a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810560e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105612:	f107 0318 	add.w	r3, r7, #24
 8105616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105618:	f7ff fe52 	bl	81052c0 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 810561c:	2324      	movs	r3, #36	; 0x24
 810561e:	220d      	movs	r2, #13
 8105620:	9211      	str	r2, [sp, #68]	; 0x44
 8105622:	9310      	str	r3, [sp, #64]	; 0x40
 8105624:	466d      	mov	r5, sp
 8105626:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810562a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810562c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810562e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810563a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810563e:	f107 0318 	add.w	r3, r7, #24
 8105642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105644:	f7ff fe3c 	bl	81052c0 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8105648:	230a      	movs	r3, #10
 810564a:	2200      	movs	r2, #0
 810564c:	9211      	str	r2, [sp, #68]	; 0x44
 810564e:	9310      	str	r3, [sp, #64]	; 0x40
 8105650:	466d      	mov	r5, sp
 8105652:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810565a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810565c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810565e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105662:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105666:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810566a:	f107 0318 	add.w	r3, r7, #24
 810566e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105670:	f7ff fe6d 	bl	810534e <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 8105674:	236b      	movs	r3, #107	; 0x6b
 8105676:	2280      	movs	r2, #128	; 0x80
 8105678:	9211      	str	r2, [sp, #68]	; 0x44
 810567a:	9310      	str	r3, [sp, #64]	; 0x40
 810567c:	466d      	mov	r5, sp
 810567e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810568a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810568c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810568e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105692:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105696:	f107 0318 	add.w	r3, r7, #24
 810569a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810569c:	f7ff fe10 	bl	81052c0 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 81056a0:	200a      	movs	r0, #10
 81056a2:	f7fc fa67 	bl	8101b74 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 81056a6:	230b      	movs	r3, #11
 81056a8:	2201      	movs	r2, #1
 81056aa:	9211      	str	r2, [sp, #68]	; 0x44
 81056ac:	9310      	str	r3, [sp, #64]	; 0x40
 81056ae:	466d      	mov	r5, sp
 81056b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81056b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81056c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81056c8:	f107 0318 	add.w	r3, r7, #24
 81056cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81056ce:	f7ff fe3e 	bl	810534e <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81056d2:	236b      	movs	r3, #107	; 0x6b
 81056d4:	2201      	movs	r2, #1
 81056d6:	9211      	str	r2, [sp, #68]	; 0x44
 81056d8:	9310      	str	r3, [sp, #64]	; 0x40
 81056da:	466d      	mov	r5, sp
 81056dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81056e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81056f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81056f4:	f107 0318 	add.w	r3, r7, #24
 81056f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81056fa:	f7ff fde1 	bl	81052c0 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 81056fe:	466d      	mov	r5, sp
 8105700:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810570a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810570c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810570e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105710:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105714:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105718:	f107 0318 	add.w	r3, r7, #24
 810571c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810571e:	f7ff fef5 	bl	810550c <whoAmI>
 8105722:	4603      	mov	r3, r0
 8105724:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8105726:	79fb      	ldrb	r3, [r7, #7]
 8105728:	2b71      	cmp	r3, #113	; 0x71
 810572a:	d004      	beq.n	8105736 <MPU9250_Init+0x182>
 810572c:	79fb      	ldrb	r3, [r7, #7]
 810572e:	2b73      	cmp	r3, #115	; 0x73
 8105730:	d001      	beq.n	8105736 <MPU9250_Init+0x182>
	{
		return 1;
 8105732:	2301      	movs	r3, #1
 8105734:	e171      	b.n	8105a1a <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 8105736:	236c      	movs	r3, #108	; 0x6c
 8105738:	2200      	movs	r2, #0
 810573a:	9211      	str	r2, [sp, #68]	; 0x44
 810573c:	9310      	str	r3, [sp, #64]	; 0x40
 810573e:	466d      	mov	r5, sp
 8105740:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810574a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810574c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810574e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105750:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105754:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105758:	f107 0318 	add.w	r3, r7, #24
 810575c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810575e:	f7ff fdaf 	bl	81052c0 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8105762:	231c      	movs	r3, #28
 8105764:	2200      	movs	r2, #0
 8105766:	9211      	str	r2, [sp, #68]	; 0x44
 8105768:	9310      	str	r3, [sp, #64]	; 0x40
 810576a:	466d      	mov	r5, sp
 810576c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810577a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810577c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105780:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105784:	f107 0318 	add.w	r3, r7, #24
 8105788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810578a:	f7ff fd99 	bl	81052c0 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 810578e:	231b      	movs	r3, #27
 8105790:	2200      	movs	r2, #0
 8105792:	9211      	str	r2, [sp, #68]	; 0x44
 8105794:	9310      	str	r3, [sp, #64]	; 0x40
 8105796:	466d      	mov	r5, sp
 8105798:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810579c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810579e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81057ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81057b0:	f107 0318 	add.w	r3, r7, #24
 81057b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81057b6:	f7ff fd83 	bl	81052c0 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 81057ba:	231d      	movs	r3, #29
 81057bc:	2201      	movs	r2, #1
 81057be:	9211      	str	r2, [sp, #68]	; 0x44
 81057c0:	9310      	str	r3, [sp, #64]	; 0x40
 81057c2:	466d      	mov	r5, sp
 81057c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81057c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81057d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81057dc:	f107 0318 	add.w	r3, r7, #24
 81057e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81057e2:	f7ff fd6d 	bl	81052c0 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 81057e6:	231a      	movs	r3, #26
 81057e8:	2201      	movs	r2, #1
 81057ea:	9211      	str	r2, [sp, #68]	; 0x44
 81057ec:	9310      	str	r3, [sp, #64]	; 0x40
 81057ee:	466d      	mov	r5, sp
 81057f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81057f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105800:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105804:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105808:	f107 0318 	add.w	r3, r7, #24
 810580c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810580e:	f7ff fd57 	bl	81052c0 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 8105812:	2319      	movs	r3, #25
 8105814:	2200      	movs	r2, #0
 8105816:	9211      	str	r2, [sp, #68]	; 0x44
 8105818:	9310      	str	r3, [sp, #64]	; 0x40
 810581a:	466d      	mov	r5, sp
 810581c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810582a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810582c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105830:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105834:	f107 0318 	add.w	r3, r7, #24
 8105838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810583a:	f7ff fd41 	bl	81052c0 <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 810583e:	236a      	movs	r3, #106	; 0x6a
 8105840:	2220      	movs	r2, #32
 8105842:	9211      	str	r2, [sp, #68]	; 0x44
 8105844:	9310      	str	r3, [sp, #64]	; 0x40
 8105846:	466d      	mov	r5, sp
 8105848:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810584c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810584e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105858:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810585c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105860:	f107 0318 	add.w	r3, r7, #24
 8105864:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105866:	f7ff fd2b 	bl	81052c0 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 810586a:	2324      	movs	r3, #36	; 0x24
 810586c:	220d      	movs	r2, #13
 810586e:	9211      	str	r2, [sp, #68]	; 0x44
 8105870:	9310      	str	r3, [sp, #64]	; 0x40
 8105872:	466d      	mov	r5, sp
 8105874:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810587a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810587c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810587e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105884:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105888:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810588c:	f107 0318 	add.w	r3, r7, #24
 8105890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105892:	f7ff fd15 	bl	81052c0 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 8105896:	466d      	mov	r5, sp
 8105898:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810589c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810589e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81058ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81058b0:	f107 0318 	add.w	r3, r7, #24
 81058b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81058b6:	f7ff fe53 	bl	8105560 <whoAmIAK8963>
 81058ba:	4603      	mov	r3, r0
 81058bc:	2b48      	cmp	r3, #72	; 0x48
 81058be:	d001      	beq.n	81058c4 <MPU9250_Init+0x310>
	{
		return 1;
 81058c0:	2301      	movs	r3, #1
 81058c2:	e0aa      	b.n	8105a1a <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81058c4:	230a      	movs	r3, #10
 81058c6:	2200      	movs	r2, #0
 81058c8:	9211      	str	r2, [sp, #68]	; 0x44
 81058ca:	9310      	str	r3, [sp, #64]	; 0x40
 81058cc:	466d      	mov	r5, sp
 81058ce:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81058d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81058e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81058e6:	f107 0318 	add.w	r3, r7, #24
 81058ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81058ec:	f7ff fd2f 	bl	810534e <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 81058f0:	2064      	movs	r0, #100	; 0x64
 81058f2:	f7fc f93f 	bl	8101b74 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 81058f6:	230a      	movs	r3, #10
 81058f8:	220f      	movs	r2, #15
 81058fa:	9211      	str	r2, [sp, #68]	; 0x44
 81058fc:	9310      	str	r3, [sp, #64]	; 0x40
 81058fe:	466d      	mov	r5, sp
 8105900:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810590a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810590c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810590e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105910:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105914:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105918:	f107 0318 	add.w	r3, r7, #24
 810591c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810591e:	f7ff fd16 	bl	810534e <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8105922:	2064      	movs	r0, #100	; 0x64
 8105924:	f7fc f926 	bl	8101b74 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 8105928:	2310      	movs	r3, #16
 810592a:	4a3f      	ldr	r2, [pc, #252]	; (8105a28 <MPU9250_Init+0x474>)
 810592c:	9212      	str	r2, [sp, #72]	; 0x48
 810592e:	2203      	movs	r2, #3
 8105930:	9211      	str	r2, [sp, #68]	; 0x44
 8105932:	9310      	str	r3, [sp, #64]	; 0x40
 8105934:	466d      	mov	r5, sp
 8105936:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810593a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810593c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810593e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105946:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810594a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810594e:	f107 0318 	add.w	r3, r7, #24
 8105952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105954:	f7ff fd66 	bl	8105424 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8105958:	230a      	movs	r3, #10
 810595a:	2200      	movs	r2, #0
 810595c:	9211      	str	r2, [sp, #68]	; 0x44
 810595e:	9310      	str	r3, [sp, #64]	; 0x40
 8105960:	466d      	mov	r5, sp
 8105962:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810596a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810596c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810596e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105972:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105976:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810597a:	f107 0318 	add.w	r3, r7, #24
 810597e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105980:	f7ff fce5 	bl	810534e <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8105984:	2064      	movs	r0, #100	; 0x64
 8105986:	f7fc f8f5 	bl	8101b74 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 810598a:	230a      	movs	r3, #10
 810598c:	2216      	movs	r2, #22
 810598e:	9211      	str	r2, [sp, #68]	; 0x44
 8105990:	9310      	str	r3, [sp, #64]	; 0x40
 8105992:	466d      	mov	r5, sp
 8105994:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810599a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810599c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810599e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81059a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81059ac:	f107 0318 	add.w	r3, r7, #24
 81059b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81059b2:	f7ff fccc 	bl	810534e <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 81059b6:	2064      	movs	r0, #100	; 0x64
 81059b8:	f7fc f8dc 	bl	8101b74 <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81059bc:	236b      	movs	r3, #107	; 0x6b
 81059be:	2201      	movs	r2, #1
 81059c0:	9211      	str	r2, [sp, #68]	; 0x44
 81059c2:	9310      	str	r3, [sp, #64]	; 0x40
 81059c4:	466d      	mov	r5, sp
 81059c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81059ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81059da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81059de:	f107 0318 	add.w	r3, r7, #24
 81059e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81059e4:	f7ff fc6c 	bl	81052c0 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 81059e8:	2303      	movs	r3, #3
 81059ea:	4a10      	ldr	r2, [pc, #64]	; (8105a2c <MPU9250_Init+0x478>)
 81059ec:	9212      	str	r2, [sp, #72]	; 0x48
 81059ee:	2207      	movs	r2, #7
 81059f0:	9211      	str	r2, [sp, #68]	; 0x44
 81059f2:	9310      	str	r3, [sp, #64]	; 0x40
 81059f4:	466d      	mov	r5, sp
 81059f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81059fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105a0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105a0e:	f107 0318 	add.w	r3, r7, #24
 8105a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105a14:	f7ff fd06 	bl	8105424 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8105a18:	2300      	movs	r3, #0
}
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	3708      	adds	r7, #8
 8105a1e:	46bd      	mov	sp, r7
 8105a20:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105a24:	b004      	add	sp, #16
 8105a26:	4770      	bx	lr
 8105a28:	100002d4 	.word	0x100002d4
 8105a2c:	100002bc 	.word	0x100002bc

08105a30 <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8105a30:	b084      	sub	sp, #16
 8105a32:	b5b0      	push	{r4, r5, r7, lr}
 8105a34:	b096      	sub	sp, #88	; 0x58
 8105a36:	af14      	add	r7, sp, #80	; 0x50
 8105a38:	f107 0418 	add.w	r4, r7, #24
 8105a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 8105a40:	233b      	movs	r3, #59	; 0x3b
 8105a42:	4a6d      	ldr	r2, [pc, #436]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105a44:	9212      	str	r2, [sp, #72]	; 0x48
 8105a46:	2215      	movs	r2, #21
 8105a48:	9211      	str	r2, [sp, #68]	; 0x44
 8105a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8105a4c:	466d      	mov	r5, sp
 8105a4e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105a62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105a66:	f107 0318 	add.w	r3, r7, #24
 8105a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105a6c:	f7ff fc4e 	bl	810530c <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8105a70:	4b61      	ldr	r3, [pc, #388]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105a72:	781b      	ldrb	r3, [r3, #0]
 8105a74:	021b      	lsls	r3, r3, #8
 8105a76:	b21a      	sxth	r2, r3
 8105a78:	4b5f      	ldr	r3, [pc, #380]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105a7a:	785b      	ldrb	r3, [r3, #1]
 8105a7c:	b21b      	sxth	r3, r3
 8105a7e:	4313      	orrs	r3, r2
 8105a80:	b21a      	sxth	r2, r3
 8105a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105a84:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8105a86:	4b5c      	ldr	r3, [pc, #368]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105a88:	789b      	ldrb	r3, [r3, #2]
 8105a8a:	021b      	lsls	r3, r3, #8
 8105a8c:	b219      	sxth	r1, r3
 8105a8e:	4b5a      	ldr	r3, [pc, #360]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105a90:	78db      	ldrb	r3, [r3, #3]
 8105a92:	b21a      	sxth	r2, r3
 8105a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105a96:	3302      	adds	r3, #2
 8105a98:	430a      	orrs	r2, r1
 8105a9a:	b212      	sxth	r2, r2
 8105a9c:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8105a9e:	4b56      	ldr	r3, [pc, #344]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105aa0:	791b      	ldrb	r3, [r3, #4]
 8105aa2:	021b      	lsls	r3, r3, #8
 8105aa4:	b219      	sxth	r1, r3
 8105aa6:	4b54      	ldr	r3, [pc, #336]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105aa8:	795b      	ldrb	r3, [r3, #5]
 8105aaa:	b21a      	sxth	r2, r3
 8105aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105aae:	3304      	adds	r3, #4
 8105ab0:	430a      	orrs	r2, r1
 8105ab2:	b212      	sxth	r2, r2
 8105ab4:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8105ab6:	4b50      	ldr	r3, [pc, #320]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105ab8:	7a1b      	ldrb	r3, [r3, #8]
 8105aba:	021b      	lsls	r3, r3, #8
 8105abc:	b21a      	sxth	r2, r3
 8105abe:	4b4e      	ldr	r3, [pc, #312]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105ac0:	7a5b      	ldrb	r3, [r3, #9]
 8105ac2:	b21b      	sxth	r3, r3
 8105ac4:	4313      	orrs	r3, r2
 8105ac6:	b21a      	sxth	r2, r3
 8105ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105aca:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8105acc:	4b4a      	ldr	r3, [pc, #296]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105ace:	7a9b      	ldrb	r3, [r3, #10]
 8105ad0:	021b      	lsls	r3, r3, #8
 8105ad2:	b219      	sxth	r1, r3
 8105ad4:	4b48      	ldr	r3, [pc, #288]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105ad6:	7adb      	ldrb	r3, [r3, #11]
 8105ad8:	b21a      	sxth	r2, r3
 8105ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105adc:	3302      	adds	r3, #2
 8105ade:	430a      	orrs	r2, r1
 8105ae0:	b212      	sxth	r2, r2
 8105ae2:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8105ae4:	4b44      	ldr	r3, [pc, #272]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105ae6:	7b1b      	ldrb	r3, [r3, #12]
 8105ae8:	021b      	lsls	r3, r3, #8
 8105aea:	b219      	sxth	r1, r3
 8105aec:	4b42      	ldr	r3, [pc, #264]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105aee:	7b5b      	ldrb	r3, [r3, #13]
 8105af0:	b21a      	sxth	r2, r3
 8105af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105af4:	3304      	adds	r3, #4
 8105af6:	430a      	orrs	r2, r1
 8105af8:	b212      	sxth	r2, r2
 8105afa:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8105afc:	4b3e      	ldr	r3, [pc, #248]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105afe:	7bdb      	ldrb	r3, [r3, #15]
 8105b00:	021b      	lsls	r3, r3, #8
 8105b02:	b21a      	sxth	r2, r3
 8105b04:	4b3c      	ldr	r3, [pc, #240]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105b06:	7b9b      	ldrb	r3, [r3, #14]
 8105b08:	b21b      	sxth	r3, r3
 8105b0a:	4313      	orrs	r3, r2
 8105b0c:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8105b0e:	4b3a      	ldr	r3, [pc, #232]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105b10:	7c5b      	ldrb	r3, [r3, #17]
 8105b12:	021b      	lsls	r3, r3, #8
 8105b14:	b21a      	sxth	r2, r3
 8105b16:	4b38      	ldr	r3, [pc, #224]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105b18:	7c1b      	ldrb	r3, [r3, #16]
 8105b1a:	b21b      	sxth	r3, r3
 8105b1c:	4313      	orrs	r3, r2
 8105b1e:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8105b20:	4b35      	ldr	r3, [pc, #212]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105b22:	7cdb      	ldrb	r3, [r3, #19]
 8105b24:	021b      	lsls	r3, r3, #8
 8105b26:	b21a      	sxth	r2, r3
 8105b28:	4b33      	ldr	r3, [pc, #204]	; (8105bf8 <MPU9250_GetData+0x1c8>)
 8105b2a:	7c9b      	ldrb	r3, [r3, #18]
 8105b2c:	b21b      	sxth	r3, r3
 8105b2e:	4313      	orrs	r3, r2
 8105b30:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8105b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105b36:	ee07 3a90 	vmov	s15, r3
 8105b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105b3e:	4b2f      	ldr	r3, [pc, #188]	; (8105bfc <MPU9250_GetData+0x1cc>)
 8105b40:	781b      	ldrb	r3, [r3, #0]
 8105b42:	3b80      	subs	r3, #128	; 0x80
 8105b44:	ee07 3a90 	vmov	s15, r3
 8105b48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8105b4c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8105c00 <MPU9250_GetData+0x1d0>
 8105b50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8105b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105b64:	ee17 3a90 	vmov	r3, s15
 8105b68:	b21a      	sxth	r2, r3
 8105b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105b6c:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8105b6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8105b72:	ee07 3a90 	vmov	s15, r3
 8105b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105b7a:	4b20      	ldr	r3, [pc, #128]	; (8105bfc <MPU9250_GetData+0x1cc>)
 8105b7c:	785b      	ldrb	r3, [r3, #1]
 8105b7e:	3b80      	subs	r3, #128	; 0x80
 8105b80:	ee07 3a90 	vmov	s15, r3
 8105b84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8105b88:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8105c00 <MPU9250_GetData+0x1d0>
 8105b8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8105b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105b9e:	3302      	adds	r3, #2
 8105ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105ba4:	ee17 2a90 	vmov	r2, s15
 8105ba8:	b212      	sxth	r2, r2
 8105baa:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8105bac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8105bb0:	ee07 3a90 	vmov	s15, r3
 8105bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105bb8:	4b10      	ldr	r3, [pc, #64]	; (8105bfc <MPU9250_GetData+0x1cc>)
 8105bba:	789b      	ldrb	r3, [r3, #2]
 8105bbc:	3b80      	subs	r3, #128	; 0x80
 8105bbe:	ee07 3a90 	vmov	s15, r3
 8105bc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8105bc6:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8105c00 <MPU9250_GetData+0x1d0>
 8105bca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8105bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105bdc:	3304      	adds	r3, #4
 8105bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105be2:	ee17 2a90 	vmov	r2, s15
 8105be6:	b212      	sxth	r2, r2
 8105be8:	801a      	strh	r2, [r3, #0]
}
 8105bea:	bf00      	nop
 8105bec:	3708      	adds	r7, #8
 8105bee:	46bd      	mov	sp, r7
 8105bf0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105bf4:	b004      	add	sp, #16
 8105bf6:	4770      	bx	lr
 8105bf8:	100002bc 	.word	0x100002bc
 8105bfc:	100002d4 	.word	0x100002d4
 8105c00:	43800000 	.word	0x43800000

08105c04 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8105c04:	b480      	push	{r7}
 8105c06:	b083      	sub	sp, #12
 8105c08:	af00      	add	r7, sp, #0
 8105c0a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	687a      	ldr	r2, [r7, #4]
 8105c10:	605a      	str	r2, [r3, #4]
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	685a      	ldr	r2, [r3, #4]
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	601a      	str	r2, [r3, #0]
}
 8105c1a:	bf00      	nop
 8105c1c:	370c      	adds	r7, #12
 8105c1e:	46bd      	mov	sp, r7
 8105c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c24:	4770      	bx	lr

08105c26 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8105c26:	b480      	push	{r7}
 8105c28:	b083      	sub	sp, #12
 8105c2a:	af00      	add	r7, sp, #0
 8105c2c:	6078      	str	r0, [r7, #4]
 8105c2e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	685a      	ldr	r2, [r3, #4]
 8105c34:	683b      	ldr	r3, [r7, #0]
 8105c36:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105c38:	683b      	ldr	r3, [r7, #0]
 8105c3a:	687a      	ldr	r2, [r7, #4]
 8105c3c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8105c3e:	683b      	ldr	r3, [r7, #0]
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	683a      	ldr	r2, [r7, #0]
 8105c44:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8105c46:	683b      	ldr	r3, [r7, #0]
 8105c48:	685b      	ldr	r3, [r3, #4]
 8105c4a:	683a      	ldr	r2, [r7, #0]
 8105c4c:	601a      	str	r2, [r3, #0]
}
 8105c4e:	bf00      	nop
 8105c50:	370c      	adds	r7, #12
 8105c52:	46bd      	mov	sp, r7
 8105c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c58:	4770      	bx	lr

08105c5a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8105c5a:	b580      	push	{r7, lr}
 8105c5c:	b082      	sub	sp, #8
 8105c5e:	af00      	add	r7, sp, #0
 8105c60:	6078      	str	r0, [r7, #4]
 8105c62:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8105c64:	6839      	ldr	r1, [r7, #0]
 8105c66:	6878      	ldr	r0, [r7, #4]
 8105c68:	f7ff ffdd 	bl	8105c26 <metal_list_add_before>
}
 8105c6c:	bf00      	nop
 8105c6e:	3708      	adds	r7, #8
 8105c70:	46bd      	mov	sp, r7
 8105c72:	bd80      	pop	{r7, pc}

08105c74 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8105c74:	b580      	push	{r7, lr}
 8105c76:	b082      	sub	sp, #8
 8105c78:	af00      	add	r7, sp, #0
 8105c7a:	6078      	str	r0, [r7, #4]
 8105c7c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8105c7e:	6839      	ldr	r1, [r7, #0]
 8105c80:	6878      	ldr	r0, [r7, #4]
 8105c82:	f001 fdb9 	bl	81077f8 <metal_machine_cache_flush>
}
 8105c86:	bf00      	nop
 8105c88:	3708      	adds	r7, #8
 8105c8a:	46bd      	mov	sp, r7
 8105c8c:	bd80      	pop	{r7, pc}

08105c8e <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8105c8e:	b580      	push	{r7, lr}
 8105c90:	b082      	sub	sp, #8
 8105c92:	af00      	add	r7, sp, #0
 8105c94:	6078      	str	r0, [r7, #4]
 8105c96:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8105c98:	6839      	ldr	r1, [r7, #0]
 8105c9a:	6878      	ldr	r0, [r7, #4]
 8105c9c:	f001 fdb7 	bl	810780e <metal_machine_cache_invalidate>
}
 8105ca0:	bf00      	nop
 8105ca2:	3708      	adds	r7, #8
 8105ca4:	46bd      	mov	sp, r7
 8105ca6:	bd80      	pop	{r7, pc}

08105ca8 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8105ca8:	b580      	push	{r7, lr}
 8105caa:	b082      	sub	sp, #8
 8105cac:	af00      	add	r7, sp, #0
 8105cae:	6078      	str	r0, [r7, #4]
 8105cb0:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8105cb2:	6839      	ldr	r1, [r7, #0]
 8105cb4:	6878      	ldr	r0, [r7, #4]
 8105cb6:	f7ff ffdd 	bl	8105c74 <__metal_cache_flush>
}
 8105cba:	bf00      	nop
 8105cbc:	3708      	adds	r7, #8
 8105cbe:	46bd      	mov	sp, r7
 8105cc0:	bd80      	pop	{r7, pc}

08105cc2 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8105cc2:	b580      	push	{r7, lr}
 8105cc4:	b082      	sub	sp, #8
 8105cc6:	af00      	add	r7, sp, #0
 8105cc8:	6078      	str	r0, [r7, #4]
 8105cca:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8105ccc:	6839      	ldr	r1, [r7, #0]
 8105cce:	6878      	ldr	r0, [r7, #4]
 8105cd0:	f7ff ffdd 	bl	8105c8e <__metal_cache_invalidate>
}
 8105cd4:	bf00      	nop
 8105cd6:	3708      	adds	r7, #8
 8105cd8:	46bd      	mov	sp, r7
 8105cda:	bd80      	pop	{r7, pc}

08105cdc <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8105cdc:	b580      	push	{r7, lr}
 8105cde:	b082      	sub	sp, #8
 8105ce0:	af00      	add	r7, sp, #0
 8105ce2:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	2b00      	cmp	r3, #0
 8105ce8:	d008      	beq.n	8105cfc <metal_bus_register+0x20>
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	2b00      	cmp	r3, #0
 8105cf0:	d004      	beq.n	8105cfc <metal_bus_register+0x20>
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	781b      	ldrb	r3, [r3, #0]
 8105cf8:	2b00      	cmp	r3, #0
 8105cfa:	d102      	bne.n	8105d02 <metal_bus_register+0x26>
		return -EINVAL;
 8105cfc:	f06f 0315 	mvn.w	r3, #21
 8105d00:	e026      	b.n	8105d50 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	2100      	movs	r1, #0
 8105d08:	4618      	mov	r0, r3
 8105d0a:	f000 f82b 	bl	8105d64 <metal_bus_find>
 8105d0e:	4603      	mov	r3, r0
 8105d10:	2b00      	cmp	r3, #0
 8105d12:	d102      	bne.n	8105d1a <metal_bus_register+0x3e>
		return -EEXIST;
 8105d14:	f06f 0310 	mvn.w	r3, #16
 8105d18:	e01a      	b.n	8105d50 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	331c      	adds	r3, #28
 8105d1e:	4618      	mov	r0, r3
 8105d20:	f7ff ff70 	bl	8105c04 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	3324      	adds	r3, #36	; 0x24
 8105d28:	4619      	mov	r1, r3
 8105d2a:	480b      	ldr	r0, [pc, #44]	; (8105d58 <metal_bus_register+0x7c>)
 8105d2c:	f7ff ff95 	bl	8105c5a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8105d30:	4b0a      	ldr	r3, [pc, #40]	; (8105d5c <metal_bus_register+0x80>)
 8105d32:	781b      	ldrb	r3, [r3, #0]
 8105d34:	2b06      	cmp	r3, #6
 8105d36:	d90a      	bls.n	8105d4e <metal_bus_register+0x72>
 8105d38:	4b08      	ldr	r3, [pc, #32]	; (8105d5c <metal_bus_register+0x80>)
 8105d3a:	685b      	ldr	r3, [r3, #4]
 8105d3c:	2b00      	cmp	r3, #0
 8105d3e:	d006      	beq.n	8105d4e <metal_bus_register+0x72>
 8105d40:	4b06      	ldr	r3, [pc, #24]	; (8105d5c <metal_bus_register+0x80>)
 8105d42:	685b      	ldr	r3, [r3, #4]
 8105d44:	687a      	ldr	r2, [r7, #4]
 8105d46:	6812      	ldr	r2, [r2, #0]
 8105d48:	4905      	ldr	r1, [pc, #20]	; (8105d60 <metal_bus_register+0x84>)
 8105d4a:	2007      	movs	r0, #7
 8105d4c:	4798      	blx	r3
	return 0;
 8105d4e:	2300      	movs	r3, #0
}
 8105d50:	4618      	mov	r0, r3
 8105d52:	3708      	adds	r7, #8
 8105d54:	46bd      	mov	sp, r7
 8105d56:	bd80      	pop	{r7, pc}
 8105d58:	10000558 	.word	0x10000558
 8105d5c:	10000550 	.word	0x10000550
 8105d60:	0810ec08 	.word	0x0810ec08

08105d64 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8105d64:	b580      	push	{r7, lr}
 8105d66:	b084      	sub	sp, #16
 8105d68:	af00      	add	r7, sp, #0
 8105d6a:	6078      	str	r0, [r7, #4]
 8105d6c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8105d6e:	4b13      	ldr	r3, [pc, #76]	; (8105dbc <metal_bus_find+0x58>)
 8105d70:	689b      	ldr	r3, [r3, #8]
 8105d72:	60fb      	str	r3, [r7, #12]
 8105d74:	e017      	b.n	8105da6 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	3b24      	subs	r3, #36	; 0x24
 8105d7a:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8105d7c:	68bb      	ldr	r3, [r7, #8]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	6879      	ldr	r1, [r7, #4]
 8105d82:	4618      	mov	r0, r3
 8105d84:	f7fa faac 	bl	81002e0 <strcmp>
 8105d88:	4603      	mov	r3, r0
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d003      	beq.n	8105d96 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8105d8e:	68fb      	ldr	r3, [r7, #12]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	60fb      	str	r3, [r7, #12]
 8105d94:	e007      	b.n	8105da6 <metal_bus_find+0x42>
			continue;
		if (result)
 8105d96:	683b      	ldr	r3, [r7, #0]
 8105d98:	2b00      	cmp	r3, #0
 8105d9a:	d002      	beq.n	8105da2 <metal_bus_find+0x3e>
			*result = bus;
 8105d9c:	683b      	ldr	r3, [r7, #0]
 8105d9e:	68ba      	ldr	r2, [r7, #8]
 8105da0:	601a      	str	r2, [r3, #0]
		return 0;
 8105da2:	2300      	movs	r3, #0
 8105da4:	e005      	b.n	8105db2 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8105da6:	68fb      	ldr	r3, [r7, #12]
 8105da8:	4a05      	ldr	r2, [pc, #20]	; (8105dc0 <metal_bus_find+0x5c>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d1e3      	bne.n	8105d76 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8105dae:	f06f 0301 	mvn.w	r3, #1
}
 8105db2:	4618      	mov	r0, r3
 8105db4:	3710      	adds	r7, #16
 8105db6:	46bd      	mov	sp, r7
 8105db8:	bd80      	pop	{r7, pc}
 8105dba:	bf00      	nop
 8105dbc:	10000550 	.word	0x10000550
 8105dc0:	10000558 	.word	0x10000558

08105dc4 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8105dc4:	b580      	push	{r7, lr}
 8105dc6:	b086      	sub	sp, #24
 8105dc8:	af00      	add	r7, sp, #0
 8105dca:	60f8      	str	r0, [r7, #12]
 8105dcc:	60b9      	str	r1, [r7, #8]
 8105dce:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	2b00      	cmp	r3, #0
 8105dd4:	d00d      	beq.n	8105df2 <metal_device_open+0x2e>
 8105dd6:	68fb      	ldr	r3, [r7, #12]
 8105dd8:	781b      	ldrb	r3, [r3, #0]
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	d009      	beq.n	8105df2 <metal_device_open+0x2e>
 8105dde:	68bb      	ldr	r3, [r7, #8]
 8105de0:	2b00      	cmp	r3, #0
 8105de2:	d006      	beq.n	8105df2 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8105de4:	68bb      	ldr	r3, [r7, #8]
 8105de6:	781b      	ldrb	r3, [r3, #0]
 8105de8:	2b00      	cmp	r3, #0
 8105dea:	d002      	beq.n	8105df2 <metal_device_open+0x2e>
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	d102      	bne.n	8105df8 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8105df2:	f06f 0315 	mvn.w	r3, #21
 8105df6:	e01f      	b.n	8105e38 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8105df8:	f107 0310 	add.w	r3, r7, #16
 8105dfc:	4619      	mov	r1, r3
 8105dfe:	68f8      	ldr	r0, [r7, #12]
 8105e00:	f7ff ffb0 	bl	8105d64 <metal_bus_find>
 8105e04:	6178      	str	r0, [r7, #20]
	if (error)
 8105e06:	697b      	ldr	r3, [r7, #20]
 8105e08:	2b00      	cmp	r3, #0
 8105e0a:	d001      	beq.n	8105e10 <metal_device_open+0x4c>
		return error;
 8105e0c:	697b      	ldr	r3, [r7, #20]
 8105e0e:	e013      	b.n	8105e38 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8105e10:	693b      	ldr	r3, [r7, #16]
 8105e12:	689b      	ldr	r3, [r3, #8]
 8105e14:	2b00      	cmp	r3, #0
 8105e16:	d102      	bne.n	8105e1e <metal_device_open+0x5a>
		return -ENODEV;
 8105e18:	f06f 0312 	mvn.w	r3, #18
 8105e1c:	e00c      	b.n	8105e38 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8105e1e:	693b      	ldr	r3, [r7, #16]
 8105e20:	689b      	ldr	r3, [r3, #8]
 8105e22:	6938      	ldr	r0, [r7, #16]
 8105e24:	687a      	ldr	r2, [r7, #4]
 8105e26:	68b9      	ldr	r1, [r7, #8]
 8105e28:	4798      	blx	r3
 8105e2a:	6178      	str	r0, [r7, #20]
	if (error)
 8105e2c:	697b      	ldr	r3, [r7, #20]
 8105e2e:	2b00      	cmp	r3, #0
 8105e30:	d001      	beq.n	8105e36 <metal_device_open+0x72>
		return error;
 8105e32:	697b      	ldr	r3, [r7, #20]
 8105e34:	e000      	b.n	8105e38 <metal_device_open+0x74>

	return 0;
 8105e36:	2300      	movs	r3, #0
}
 8105e38:	4618      	mov	r0, r3
 8105e3a:	3718      	adds	r7, #24
 8105e3c:	46bd      	mov	sp, r7
 8105e3e:	bd80      	pop	{r7, pc}

08105e40 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8105e40:	b580      	push	{r7, lr}
 8105e42:	b082      	sub	sp, #8
 8105e44:	af00      	add	r7, sp, #0
 8105e46:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	2b00      	cmp	r3, #0
 8105e4e:	d008      	beq.n	8105e62 <metal_register_generic_device+0x22>
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	781b      	ldrb	r3, [r3, #0]
 8105e56:	2b00      	cmp	r3, #0
 8105e58:	d003      	beq.n	8105e62 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8105e5e:	2b02      	cmp	r3, #2
 8105e60:	d902      	bls.n	8105e68 <metal_register_generic_device+0x28>
		return -EINVAL;
 8105e62:	f06f 0315 	mvn.w	r3, #21
 8105e66:	e009      	b.n	8105e7c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	4a06      	ldr	r2, [pc, #24]	; (8105e84 <metal_register_generic_device+0x44>)
 8105e6c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	336c      	adds	r3, #108	; 0x6c
 8105e72:	4619      	mov	r1, r3
 8105e74:	4804      	ldr	r0, [pc, #16]	; (8105e88 <metal_register_generic_device+0x48>)
 8105e76:	f7ff fef0 	bl	8105c5a <metal_list_add_tail>
			    &device->node);
	return 0;
 8105e7a:	2300      	movs	r3, #0
}
 8105e7c:	4618      	mov	r0, r3
 8105e7e:	3708      	adds	r7, #8
 8105e80:	46bd      	mov	sp, r7
 8105e82:	bd80      	pop	{r7, pc}
 8105e84:	10000010 	.word	0x10000010
 8105e88:	10000568 	.word	0x10000568

08105e8c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8105e8c:	b580      	push	{r7, lr}
 8105e8e:	b086      	sub	sp, #24
 8105e90:	af00      	add	r7, sp, #0
 8105e92:	60f8      	str	r0, [r7, #12]
 8105e94:	60b9      	str	r1, [r7, #8]
 8105e96:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8105e98:	4b12      	ldr	r3, [pc, #72]	; (8105ee4 <metal_generic_dev_open+0x58>)
 8105e9a:	699b      	ldr	r3, [r3, #24]
 8105e9c:	617b      	str	r3, [r7, #20]
 8105e9e:	e017      	b.n	8105ed0 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8105ea0:	697b      	ldr	r3, [r7, #20]
 8105ea2:	3b6c      	subs	r3, #108	; 0x6c
 8105ea4:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8105ea6:	693b      	ldr	r3, [r7, #16]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	68b9      	ldr	r1, [r7, #8]
 8105eac:	4618      	mov	r0, r3
 8105eae:	f7fa fa17 	bl	81002e0 <strcmp>
 8105eb2:	4603      	mov	r3, r0
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	d003      	beq.n	8105ec0 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8105eb8:	697b      	ldr	r3, [r7, #20]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	617b      	str	r3, [r7, #20]
 8105ebe:	e007      	b.n	8105ed0 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	693a      	ldr	r2, [r7, #16]
 8105ec4:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8105ec6:	6938      	ldr	r0, [r7, #16]
 8105ec8:	f000 f88c 	bl	8105fe4 <metal_generic_dev_sys_open>
 8105ecc:	4603      	mov	r3, r0
 8105ece:	e005      	b.n	8105edc <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8105ed0:	697b      	ldr	r3, [r7, #20]
 8105ed2:	4a05      	ldr	r2, [pc, #20]	; (8105ee8 <metal_generic_dev_open+0x5c>)
 8105ed4:	4293      	cmp	r3, r2
 8105ed6:	d1e3      	bne.n	8105ea0 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8105ed8:	f06f 0312 	mvn.w	r3, #18
}
 8105edc:	4618      	mov	r0, r3
 8105ede:	3718      	adds	r7, #24
 8105ee0:	46bd      	mov	sp, r7
 8105ee2:	bd80      	pop	{r7, pc}
 8105ee4:	10000550 	.word	0x10000550
 8105ee8:	10000568 	.word	0x10000568

08105eec <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8105eec:	b580      	push	{r7, lr}
 8105eee:	b086      	sub	sp, #24
 8105ef0:	af00      	add	r7, sp, #0
 8105ef2:	60f8      	str	r0, [r7, #12]
 8105ef4:	60b9      	str	r1, [r7, #8]
 8105ef6:	607a      	str	r2, [r7, #4]
 8105ef8:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8105efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105efc:	683b      	ldr	r3, [r7, #0]
 8105efe:	429a      	cmp	r2, r3
 8105f00:	d009      	beq.n	8105f16 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8105f02:	6a3a      	ldr	r2, [r7, #32]
 8105f04:	4613      	mov	r3, r2
 8105f06:	005b      	lsls	r3, r3, #1
 8105f08:	4413      	add	r3, r2
 8105f0a:	009b      	lsls	r3, r3, #2
 8105f0c:	461a      	mov	r2, r3
 8105f0e:	6839      	ldr	r1, [r7, #0]
 8105f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105f12:	f004 fa63 	bl	810a3dc <memcpy>
	for (i = 0; i < nents_in; i++) {
 8105f16:	2300      	movs	r3, #0
 8105f18:	617b      	str	r3, [r7, #20]
 8105f1a:	e02f      	b.n	8105f7c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8105f1c:	687b      	ldr	r3, [r7, #4]
 8105f1e:	2b02      	cmp	r3, #2
 8105f20:	d114      	bne.n	8105f4c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8105f22:	697a      	ldr	r2, [r7, #20]
 8105f24:	4613      	mov	r3, r2
 8105f26:	005b      	lsls	r3, r3, #1
 8105f28:	4413      	add	r3, r2
 8105f2a:	009b      	lsls	r3, r3, #2
 8105f2c:	461a      	mov	r2, r3
 8105f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f30:	4413      	add	r3, r2
 8105f32:	6818      	ldr	r0, [r3, #0]
 8105f34:	697a      	ldr	r2, [r7, #20]
 8105f36:	4613      	mov	r3, r2
 8105f38:	005b      	lsls	r3, r3, #1
 8105f3a:	4413      	add	r3, r2
 8105f3c:	009b      	lsls	r3, r3, #2
 8105f3e:	461a      	mov	r2, r3
 8105f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f42:	4413      	add	r3, r2
 8105f44:	689b      	ldr	r3, [r3, #8]
 8105f46:	4619      	mov	r1, r3
 8105f48:	f7ff feae 	bl	8105ca8 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8105f4c:	697a      	ldr	r2, [r7, #20]
 8105f4e:	4613      	mov	r3, r2
 8105f50:	005b      	lsls	r3, r3, #1
 8105f52:	4413      	add	r3, r2
 8105f54:	009b      	lsls	r3, r3, #2
 8105f56:	461a      	mov	r2, r3
 8105f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f5a:	4413      	add	r3, r2
 8105f5c:	6818      	ldr	r0, [r3, #0]
 8105f5e:	697a      	ldr	r2, [r7, #20]
 8105f60:	4613      	mov	r3, r2
 8105f62:	005b      	lsls	r3, r3, #1
 8105f64:	4413      	add	r3, r2
 8105f66:	009b      	lsls	r3, r3, #2
 8105f68:	461a      	mov	r2, r3
 8105f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f6c:	4413      	add	r3, r2
 8105f6e:	689b      	ldr	r3, [r3, #8]
 8105f70:	4619      	mov	r1, r3
 8105f72:	f7ff fea6 	bl	8105cc2 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8105f76:	697b      	ldr	r3, [r7, #20]
 8105f78:	3301      	adds	r3, #1
 8105f7a:	617b      	str	r3, [r7, #20]
 8105f7c:	697a      	ldr	r2, [r7, #20]
 8105f7e:	6a3b      	ldr	r3, [r7, #32]
 8105f80:	429a      	cmp	r2, r3
 8105f82:	dbcb      	blt.n	8105f1c <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8105f84:	6a3b      	ldr	r3, [r7, #32]
}
 8105f86:	4618      	mov	r0, r3
 8105f88:	3718      	adds	r7, #24
 8105f8a:	46bd      	mov	sp, r7
 8105f8c:	bd80      	pop	{r7, pc}

08105f8e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8105f8e:	b580      	push	{r7, lr}
 8105f90:	b086      	sub	sp, #24
 8105f92:	af00      	add	r7, sp, #0
 8105f94:	60f8      	str	r0, [r7, #12]
 8105f96:	60b9      	str	r1, [r7, #8]
 8105f98:	607a      	str	r2, [r7, #4]
 8105f9a:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8105f9c:	2300      	movs	r3, #0
 8105f9e:	617b      	str	r3, [r7, #20]
 8105fa0:	e017      	b.n	8105fd2 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8105fa2:	697a      	ldr	r2, [r7, #20]
 8105fa4:	4613      	mov	r3, r2
 8105fa6:	005b      	lsls	r3, r3, #1
 8105fa8:	4413      	add	r3, r2
 8105faa:	009b      	lsls	r3, r3, #2
 8105fac:	461a      	mov	r2, r3
 8105fae:	683b      	ldr	r3, [r7, #0]
 8105fb0:	4413      	add	r3, r2
 8105fb2:	6818      	ldr	r0, [r3, #0]
 8105fb4:	697a      	ldr	r2, [r7, #20]
 8105fb6:	4613      	mov	r3, r2
 8105fb8:	005b      	lsls	r3, r3, #1
 8105fba:	4413      	add	r3, r2
 8105fbc:	009b      	lsls	r3, r3, #2
 8105fbe:	461a      	mov	r2, r3
 8105fc0:	683b      	ldr	r3, [r7, #0]
 8105fc2:	4413      	add	r3, r2
 8105fc4:	689b      	ldr	r3, [r3, #8]
 8105fc6:	4619      	mov	r1, r3
 8105fc8:	f7ff fe7b 	bl	8105cc2 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8105fcc:	697b      	ldr	r3, [r7, #20]
 8105fce:	3301      	adds	r3, #1
 8105fd0:	617b      	str	r3, [r7, #20]
 8105fd2:	697a      	ldr	r2, [r7, #20]
 8105fd4:	6a3b      	ldr	r3, [r7, #32]
 8105fd6:	429a      	cmp	r2, r3
 8105fd8:	dbe3      	blt.n	8105fa2 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8105fda:	bf00      	nop
 8105fdc:	bf00      	nop
 8105fde:	3718      	adds	r7, #24
 8105fe0:	46bd      	mov	sp, r7
 8105fe2:	bd80      	pop	{r7, pc}

08105fe4 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8105fe4:	b580      	push	{r7, lr}
 8105fe6:	b084      	sub	sp, #16
 8105fe8:	af00      	add	r7, sp, #0
 8105fea:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8105fec:	2300      	movs	r3, #0
 8105fee:	60fb      	str	r3, [r7, #12]
 8105ff0:	e013      	b.n	810601a <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8105ff2:	68fa      	ldr	r2, [r7, #12]
 8105ff4:	4613      	mov	r3, r2
 8105ff6:	005b      	lsls	r3, r3, #1
 8105ff8:	4413      	add	r3, r2
 8105ffa:	011b      	lsls	r3, r3, #4
 8105ffc:	3308      	adds	r3, #8
 8105ffe:	687a      	ldr	r2, [r7, #4]
 8106000:	4413      	add	r3, r2
 8106002:	3304      	adds	r3, #4
 8106004:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8106006:	68bb      	ldr	r3, [r7, #8]
 8106008:	689b      	ldr	r3, [r3, #8]
 810600a:	2b00      	cmp	r3, #0
 810600c:	d00b      	beq.n	8106026 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 810600e:	68b8      	ldr	r0, [r7, #8]
 8106010:	f000 f81e 	bl	8106050 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8106014:	68fb      	ldr	r3, [r7, #12]
 8106016:	3301      	adds	r3, #1
 8106018:	60fb      	str	r3, [r7, #12]
 810601a:	687b      	ldr	r3, [r7, #4]
 810601c:	689b      	ldr	r3, [r3, #8]
 810601e:	68fa      	ldr	r2, [r7, #12]
 8106020:	429a      	cmp	r2, r3
 8106022:	d3e6      	bcc.n	8105ff2 <metal_generic_dev_sys_open+0xe>
 8106024:	e000      	b.n	8106028 <metal_generic_dev_sys_open+0x44>
			break;
 8106026:	bf00      	nop
	}

	return 0;
 8106028:	2300      	movs	r3, #0
}
 810602a:	4618      	mov	r0, r3
 810602c:	3710      	adds	r7, #16
 810602e:	46bd      	mov	sp, r7
 8106030:	bd80      	pop	{r7, pc}
	...

08106034 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8106034:	b580      	push	{r7, lr}
 8106036:	b082      	sub	sp, #8
 8106038:	af00      	add	r7, sp, #0
 810603a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 810603c:	4803      	ldr	r0, [pc, #12]	; (810604c <metal_sys_init+0x18>)
 810603e:	f7ff fe4d 	bl	8105cdc <metal_bus_register>
	return 0;
 8106042:	2300      	movs	r3, #0
}
 8106044:	4618      	mov	r0, r3
 8106046:	3708      	adds	r7, #8
 8106048:	46bd      	mov	sp, r7
 810604a:	bd80      	pop	{r7, pc}
 810604c:	10000010 	.word	0x10000010

08106050 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8106050:	b580      	push	{r7, lr}
 8106052:	b086      	sub	sp, #24
 8106054:	af00      	add	r7, sp, #0
 8106056:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	689b      	ldr	r3, [r3, #8]
 8106062:	613b      	str	r3, [r7, #16]
	if (psize) {
 8106064:	693b      	ldr	r3, [r7, #16]
 8106066:	2b00      	cmp	r3, #0
 8106068:	d02c      	beq.n	81060c4 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	68db      	ldr	r3, [r3, #12]
 810606e:	693a      	ldr	r2, [r7, #16]
 8106070:	fa22 f303 	lsr.w	r3, r2, r3
 8106074:	2b00      	cmp	r3, #0
 8106076:	d005      	beq.n	8106084 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	68db      	ldr	r3, [r3, #12]
 810607c:	2201      	movs	r2, #1
 810607e:	fa02 f303 	lsl.w	r3, r2, r3
 8106082:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8106084:	2300      	movs	r3, #0
 8106086:	617b      	str	r3, [r7, #20]
 8106088:	e013      	b.n	81060b2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	685a      	ldr	r2, [r3, #4]
 810608e:	697b      	ldr	r3, [r7, #20]
 8106090:	009b      	lsls	r3, r3, #2
 8106092:	4413      	add	r3, r2
 8106094:	6819      	ldr	r1, [r3, #0]
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	695b      	ldr	r3, [r3, #20]
 810609a:	693a      	ldr	r2, [r7, #16]
 810609c:	68f8      	ldr	r0, [r7, #12]
 810609e:	f001 fbc1 	bl	8107824 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 81060a2:	693b      	ldr	r3, [r7, #16]
 81060a4:	009b      	lsls	r3, r3, #2
 81060a6:	68fa      	ldr	r2, [r7, #12]
 81060a8:	4413      	add	r3, r2
 81060aa:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 81060ac:	697b      	ldr	r3, [r7, #20]
 81060ae:	3301      	adds	r3, #1
 81060b0:	617b      	str	r3, [r7, #20]
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	689a      	ldr	r2, [r3, #8]
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	68db      	ldr	r3, [r3, #12]
 81060ba:	fa22 f303 	lsr.w	r3, r2, r3
 81060be:	697a      	ldr	r2, [r7, #20]
 81060c0:	429a      	cmp	r2, r3
 81060c2:	d9e2      	bls.n	810608a <metal_sys_io_mem_map+0x3a>
		}
	}
}
 81060c4:	bf00      	nop
 81060c6:	3718      	adds	r7, #24
 81060c8:	46bd      	mov	sp, r7
 81060ca:	bd80      	pop	{r7, pc}

081060cc <metal_list_init>:
{
 81060cc:	b480      	push	{r7}
 81060ce:	b083      	sub	sp, #12
 81060d0:	af00      	add	r7, sp, #0
 81060d2:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	687a      	ldr	r2, [r7, #4]
 81060d8:	605a      	str	r2, [r3, #4]
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	685a      	ldr	r2, [r3, #4]
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	601a      	str	r2, [r3, #0]
}
 81060e2:	bf00      	nop
 81060e4:	370c      	adds	r7, #12
 81060e6:	46bd      	mov	sp, r7
 81060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060ec:	4770      	bx	lr
	...

081060f0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 81060f0:	b580      	push	{r7, lr}
 81060f2:	b084      	sub	sp, #16
 81060f4:	af00      	add	r7, sp, #0
 81060f6:	6078      	str	r0, [r7, #4]
	int error = 0;
 81060f8:	2300      	movs	r3, #0
 81060fa:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 81060fc:	2220      	movs	r2, #32
 81060fe:	2100      	movs	r1, #0
 8106100:	4810      	ldr	r0, [pc, #64]	; (8106144 <metal_init+0x54>)
 8106102:	f004 f979 	bl	810a3f8 <memset>

	_metal.common.log_handler   = params->log_handler;
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	4a0e      	ldr	r2, [pc, #56]	; (8106144 <metal_init+0x54>)
 810610c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	791a      	ldrb	r2, [r3, #4]
 8106112:	4b0c      	ldr	r3, [pc, #48]	; (8106144 <metal_init+0x54>)
 8106114:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8106116:	480c      	ldr	r0, [pc, #48]	; (8106148 <metal_init+0x58>)
 8106118:	f7ff ffd8 	bl	81060cc <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 810611c:	480b      	ldr	r0, [pc, #44]	; (810614c <metal_init+0x5c>)
 810611e:	f7ff ffd5 	bl	81060cc <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8106122:	480b      	ldr	r0, [pc, #44]	; (8106150 <metal_init+0x60>)
 8106124:	f7ff ffd2 	bl	81060cc <metal_list_init>

	error = metal_sys_init(params);
 8106128:	6878      	ldr	r0, [r7, #4]
 810612a:	f7ff ff83 	bl	8106034 <metal_sys_init>
 810612e:	60f8      	str	r0, [r7, #12]
	if (error)
 8106130:	68fb      	ldr	r3, [r7, #12]
 8106132:	2b00      	cmp	r3, #0
 8106134:	d001      	beq.n	810613a <metal_init+0x4a>
		return error;
 8106136:	68fb      	ldr	r3, [r7, #12]
 8106138:	e000      	b.n	810613c <metal_init+0x4c>

	return error;
 810613a:	68fb      	ldr	r3, [r7, #12]
}
 810613c:	4618      	mov	r0, r3
 810613e:	3710      	adds	r7, #16
 8106140:	46bd      	mov	sp, r7
 8106142:	bd80      	pop	{r7, pc}
 8106144:	10000550 	.word	0x10000550
 8106148:	10000558 	.word	0x10000558
 810614c:	10000560 	.word	0x10000560
 8106150:	10000568 	.word	0x10000568

08106154 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8106154:	b480      	push	{r7}
 8106156:	b083      	sub	sp, #12
 8106158:	af00      	add	r7, sp, #0
 810615a:	6078      	str	r0, [r7, #4]
 810615c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8106162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106166:	d009      	beq.n	810617c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106168:	687b      	ldr	r3, [r7, #4]
 810616a:	689b      	ldr	r3, [r3, #8]
 810616c:	683a      	ldr	r2, [r7, #0]
 810616e:	429a      	cmp	r2, r3
 8106170:	d804      	bhi.n	810617c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106176:	683b      	ldr	r3, [r7, #0]
 8106178:	4413      	add	r3, r2
 810617a:	e000      	b.n	810617e <metal_io_virt+0x2a>
 810617c:	2300      	movs	r3, #0
}
 810617e:	4618      	mov	r0, r3
 8106180:	370c      	adds	r7, #12
 8106182:	46bd      	mov	sp, r7
 8106184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106188:	4770      	bx	lr

0810618a <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 810618a:	b5b0      	push	{r4, r5, r7, lr}
 810618c:	b08a      	sub	sp, #40	; 0x28
 810618e:	af00      	add	r7, sp, #0
 8106190:	60f8      	str	r0, [r7, #12]
 8106192:	60b9      	str	r1, [r7, #8]
 8106194:	607a      	str	r2, [r7, #4]
 8106196:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8106198:	f107 0310 	add.w	r3, r7, #16
 810619c:	2200      	movs	r2, #0
 810619e:	601a      	str	r2, [r3, #0]
 81061a0:	605a      	str	r2, [r3, #4]
 81061a2:	609a      	str	r2, [r3, #8]
 81061a4:	60da      	str	r2, [r3, #12]
 81061a6:	611a      	str	r2, [r3, #16]
 81061a8:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 81061aa:	68fb      	ldr	r3, [r7, #12]
 81061ac:	68ba      	ldr	r2, [r7, #8]
 81061ae:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 81061b0:	68fb      	ldr	r3, [r7, #12]
 81061b2:	687a      	ldr	r2, [r7, #4]
 81061b4:	605a      	str	r2, [r3, #4]
	io->size = size;
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	683a      	ldr	r2, [r7, #0]
 81061ba:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 81061bc:	68fb      	ldr	r3, [r7, #12]
 81061be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81061c0:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 81061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061c4:	2b1f      	cmp	r3, #31
 81061c6:	d904      	bls.n	81061d2 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 81061c8:	68fb      	ldr	r3, [r7, #12]
 81061ca:	f04f 32ff 	mov.w	r2, #4294967295
 81061ce:	611a      	str	r2, [r3, #16]
 81061d0:	e006      	b.n	81061e0 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 81061d2:	2201      	movs	r2, #1
 81061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061d6:	fa02 f303 	lsl.w	r3, r2, r3
 81061da:	1e5a      	subs	r2, r3, #1
 81061dc:	68fb      	ldr	r3, [r7, #12]
 81061de:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 81061e0:	68fb      	ldr	r3, [r7, #12]
 81061e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81061e4:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 81061e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81061e8:	2b00      	cmp	r3, #0
 81061ea:	d00b      	beq.n	8106204 <metal_io_init+0x7a>
 81061ec:	68fb      	ldr	r3, [r7, #12]
 81061ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81061f0:	f103 0418 	add.w	r4, r3, #24
 81061f4:	4615      	mov	r5, r2
 81061f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81061f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81061fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 81061fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8106202:	e00a      	b.n	810621a <metal_io_init+0x90>
 8106204:	68fb      	ldr	r3, [r7, #12]
 8106206:	f103 0418 	add.w	r4, r3, #24
 810620a:	f107 0510 	add.w	r5, r7, #16
 810620e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106212:	e895 0003 	ldmia.w	r5, {r0, r1}
 8106216:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 810621a:	68f8      	ldr	r0, [r7, #12]
 810621c:	f7ff ff18 	bl	8106050 <metal_sys_io_mem_map>
}
 8106220:	bf00      	nop
 8106222:	3728      	adds	r7, #40	; 0x28
 8106224:	46bd      	mov	sp, r7
 8106226:	bdb0      	pop	{r4, r5, r7, pc}

08106228 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8106228:	b590      	push	{r4, r7, lr}
 810622a:	b08b      	sub	sp, #44	; 0x2c
 810622c:	af02      	add	r7, sp, #8
 810622e:	60f8      	str	r0, [r7, #12]
 8106230:	60b9      	str	r1, [r7, #8]
 8106232:	607a      	str	r2, [r7, #4]
 8106234:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8106236:	68b9      	ldr	r1, [r7, #8]
 8106238:	68f8      	ldr	r0, [r7, #12]
 810623a:	f7ff ff8b 	bl	8106154 <metal_io_virt>
 810623e:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8106244:	68fb      	ldr	r3, [r7, #12]
 8106246:	689b      	ldr	r3, [r3, #8]
 8106248:	68ba      	ldr	r2, [r7, #8]
 810624a:	429a      	cmp	r2, r3
 810624c:	d902      	bls.n	8106254 <metal_io_block_read+0x2c>
		return -ERANGE;
 810624e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8106252:	e05c      	b.n	810630e <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8106254:	683a      	ldr	r2, [r7, #0]
 8106256:	68bb      	ldr	r3, [r7, #8]
 8106258:	441a      	add	r2, r3
 810625a:	68fb      	ldr	r3, [r7, #12]
 810625c:	689b      	ldr	r3, [r3, #8]
 810625e:	429a      	cmp	r2, r3
 8106260:	d904      	bls.n	810626c <metal_io_block_read+0x44>
		len = io->size - offset;
 8106262:	68fb      	ldr	r3, [r7, #12]
 8106264:	689a      	ldr	r2, [r3, #8]
 8106266:	68bb      	ldr	r3, [r7, #8]
 8106268:	1ad3      	subs	r3, r2, r3
 810626a:	603b      	str	r3, [r7, #0]
	retlen = len;
 810626c:	683b      	ldr	r3, [r7, #0]
 810626e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8106270:	68fb      	ldr	r3, [r7, #12]
 8106272:	6a1b      	ldr	r3, [r3, #32]
 8106274:	2b00      	cmp	r3, #0
 8106276:	d00a      	beq.n	810628e <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8106278:	68fb      	ldr	r3, [r7, #12]
 810627a:	6a1c      	ldr	r4, [r3, #32]
 810627c:	683b      	ldr	r3, [r7, #0]
 810627e:	9300      	str	r3, [sp, #0]
 8106280:	2305      	movs	r3, #5
 8106282:	687a      	ldr	r2, [r7, #4]
 8106284:	68b9      	ldr	r1, [r7, #8]
 8106286:	68f8      	ldr	r0, [r7, #12]
 8106288:	47a0      	blx	r4
 810628a:	6178      	str	r0, [r7, #20]
 810628c:	e03e      	b.n	810630c <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 810628e:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8106292:	e00c      	b.n	81062ae <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8106294:	69fb      	ldr	r3, [r7, #28]
 8106296:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8106298:	69bb      	ldr	r3, [r7, #24]
 810629a:	701a      	strb	r2, [r3, #0]
			dest++;
 810629c:	69bb      	ldr	r3, [r7, #24]
 810629e:	3301      	adds	r3, #1
 81062a0:	61bb      	str	r3, [r7, #24]
			ptr++;
 81062a2:	69fb      	ldr	r3, [r7, #28]
 81062a4:	3301      	adds	r3, #1
 81062a6:	61fb      	str	r3, [r7, #28]
			len--;
 81062a8:	683b      	ldr	r3, [r7, #0]
 81062aa:	3b01      	subs	r3, #1
 81062ac:	603b      	str	r3, [r7, #0]
		while ( len && (
 81062ae:	683b      	ldr	r3, [r7, #0]
 81062b0:	2b00      	cmp	r3, #0
 81062b2:	d017      	beq.n	81062e4 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 81062b4:	69bb      	ldr	r3, [r7, #24]
 81062b6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81062ba:	2b00      	cmp	r3, #0
 81062bc:	d1ea      	bne.n	8106294 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 81062be:	69fb      	ldr	r3, [r7, #28]
 81062c0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 81062c4:	2b00      	cmp	r3, #0
 81062c6:	d1e5      	bne.n	8106294 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81062c8:	e00c      	b.n	81062e4 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 81062ca:	69fb      	ldr	r3, [r7, #28]
 81062cc:	681a      	ldr	r2, [r3, #0]
 81062ce:	69bb      	ldr	r3, [r7, #24]
 81062d0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81062d2:	69bb      	ldr	r3, [r7, #24]
 81062d4:	3304      	adds	r3, #4
 81062d6:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 81062d8:	69fb      	ldr	r3, [r7, #28]
 81062da:	3304      	adds	r3, #4
 81062dc:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 81062de:	683b      	ldr	r3, [r7, #0]
 81062e0:	3b04      	subs	r3, #4
 81062e2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81062e4:	683b      	ldr	r3, [r7, #0]
 81062e6:	2b03      	cmp	r3, #3
 81062e8:	dcef      	bgt.n	81062ca <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 81062ea:	e00c      	b.n	8106306 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81062ec:	69fb      	ldr	r3, [r7, #28]
 81062ee:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 81062f0:	69bb      	ldr	r3, [r7, #24]
 81062f2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 81062f4:	69bb      	ldr	r3, [r7, #24]
 81062f6:	3301      	adds	r3, #1
 81062f8:	61bb      	str	r3, [r7, #24]
 81062fa:	69fb      	ldr	r3, [r7, #28]
 81062fc:	3301      	adds	r3, #1
 81062fe:	61fb      	str	r3, [r7, #28]
 8106300:	683b      	ldr	r3, [r7, #0]
 8106302:	3b01      	subs	r3, #1
 8106304:	603b      	str	r3, [r7, #0]
 8106306:	683b      	ldr	r3, [r7, #0]
 8106308:	2b00      	cmp	r3, #0
 810630a:	d1ef      	bne.n	81062ec <metal_io_block_read+0xc4>
	}
	return retlen;
 810630c:	697b      	ldr	r3, [r7, #20]
}
 810630e:	4618      	mov	r0, r3
 8106310:	3724      	adds	r7, #36	; 0x24
 8106312:	46bd      	mov	sp, r7
 8106314:	bd90      	pop	{r4, r7, pc}

08106316 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8106316:	b590      	push	{r4, r7, lr}
 8106318:	b08b      	sub	sp, #44	; 0x2c
 810631a:	af02      	add	r7, sp, #8
 810631c:	60f8      	str	r0, [r7, #12]
 810631e:	60b9      	str	r1, [r7, #8]
 8106320:	607a      	str	r2, [r7, #4]
 8106322:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8106324:	68b9      	ldr	r1, [r7, #8]
 8106326:	68f8      	ldr	r0, [r7, #12]
 8106328:	f7ff ff14 	bl	8106154 <metal_io_virt>
 810632c:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 810632e:	687b      	ldr	r3, [r7, #4]
 8106330:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8106332:	68fb      	ldr	r3, [r7, #12]
 8106334:	689b      	ldr	r3, [r3, #8]
 8106336:	68ba      	ldr	r2, [r7, #8]
 8106338:	429a      	cmp	r2, r3
 810633a:	d902      	bls.n	8106342 <metal_io_block_write+0x2c>
		return -ERANGE;
 810633c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8106340:	e05b      	b.n	81063fa <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8106342:	683a      	ldr	r2, [r7, #0]
 8106344:	68bb      	ldr	r3, [r7, #8]
 8106346:	441a      	add	r2, r3
 8106348:	68fb      	ldr	r3, [r7, #12]
 810634a:	689b      	ldr	r3, [r3, #8]
 810634c:	429a      	cmp	r2, r3
 810634e:	d904      	bls.n	810635a <metal_io_block_write+0x44>
		len = io->size - offset;
 8106350:	68fb      	ldr	r3, [r7, #12]
 8106352:	689a      	ldr	r2, [r3, #8]
 8106354:	68bb      	ldr	r3, [r7, #8]
 8106356:	1ad3      	subs	r3, r2, r3
 8106358:	603b      	str	r3, [r7, #0]
	retlen = len;
 810635a:	683b      	ldr	r3, [r7, #0]
 810635c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 810635e:	68fb      	ldr	r3, [r7, #12]
 8106360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106362:	2b00      	cmp	r3, #0
 8106364:	d017      	beq.n	8106396 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8106366:	68fb      	ldr	r3, [r7, #12]
 8106368:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 810636a:	683b      	ldr	r3, [r7, #0]
 810636c:	9300      	str	r3, [sp, #0]
 810636e:	2305      	movs	r3, #5
 8106370:	687a      	ldr	r2, [r7, #4]
 8106372:	68b9      	ldr	r1, [r7, #8]
 8106374:	68f8      	ldr	r0, [r7, #12]
 8106376:	47a0      	blx	r4
 8106378:	6178      	str	r0, [r7, #20]
 810637a:	e03d      	b.n	81063f8 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810637c:	69bb      	ldr	r3, [r7, #24]
 810637e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8106380:	69fb      	ldr	r3, [r7, #28]
 8106382:	701a      	strb	r2, [r3, #0]
			ptr++;
 8106384:	69fb      	ldr	r3, [r7, #28]
 8106386:	3301      	adds	r3, #1
 8106388:	61fb      	str	r3, [r7, #28]
			source++;
 810638a:	69bb      	ldr	r3, [r7, #24]
 810638c:	3301      	adds	r3, #1
 810638e:	61bb      	str	r3, [r7, #24]
			len--;
 8106390:	683b      	ldr	r3, [r7, #0]
 8106392:	3b01      	subs	r3, #1
 8106394:	603b      	str	r3, [r7, #0]
		while ( len && (
 8106396:	683b      	ldr	r3, [r7, #0]
 8106398:	2b00      	cmp	r3, #0
 810639a:	d017      	beq.n	81063cc <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 810639c:	69fb      	ldr	r3, [r7, #28]
 810639e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81063a2:	2b00      	cmp	r3, #0
 81063a4:	d1ea      	bne.n	810637c <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 81063a6:	69bb      	ldr	r3, [r7, #24]
 81063a8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 81063ac:	2b00      	cmp	r3, #0
 81063ae:	d1e5      	bne.n	810637c <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81063b0:	e00c      	b.n	81063cc <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 81063b2:	69bb      	ldr	r3, [r7, #24]
 81063b4:	681a      	ldr	r2, [r3, #0]
 81063b6:	69fb      	ldr	r3, [r7, #28]
 81063b8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81063ba:	69fb      	ldr	r3, [r7, #28]
 81063bc:	3304      	adds	r3, #4
 81063be:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 81063c0:	69bb      	ldr	r3, [r7, #24]
 81063c2:	3304      	adds	r3, #4
 81063c4:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 81063c6:	683b      	ldr	r3, [r7, #0]
 81063c8:	3b04      	subs	r3, #4
 81063ca:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81063cc:	683b      	ldr	r3, [r7, #0]
 81063ce:	2b03      	cmp	r3, #3
 81063d0:	dcef      	bgt.n	81063b2 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 81063d2:	e00c      	b.n	81063ee <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81063d4:	69bb      	ldr	r3, [r7, #24]
 81063d6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81063d8:	69fb      	ldr	r3, [r7, #28]
 81063da:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 81063dc:	69fb      	ldr	r3, [r7, #28]
 81063de:	3301      	adds	r3, #1
 81063e0:	61fb      	str	r3, [r7, #28]
 81063e2:	69bb      	ldr	r3, [r7, #24]
 81063e4:	3301      	adds	r3, #1
 81063e6:	61bb      	str	r3, [r7, #24]
 81063e8:	683b      	ldr	r3, [r7, #0]
 81063ea:	3b01      	subs	r3, #1
 81063ec:	603b      	str	r3, [r7, #0]
 81063ee:	683b      	ldr	r3, [r7, #0]
 81063f0:	2b00      	cmp	r3, #0
 81063f2:	d1ef      	bne.n	81063d4 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 81063f4:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 81063f8:	697b      	ldr	r3, [r7, #20]
}
 81063fa:	4618      	mov	r0, r3
 81063fc:	3724      	adds	r7, #36	; 0x24
 81063fe:	46bd      	mov	sp, r7
 8106400:	bd90      	pop	{r4, r7, pc}

08106402 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8106402:	b40e      	push	{r1, r2, r3}
 8106404:	b480      	push	{r7}
 8106406:	b082      	sub	sp, #8
 8106408:	af00      	add	r7, sp, #0
 810640a:	4603      	mov	r3, r0
 810640c:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 810640e:	bf00      	nop
 8106410:	3708      	adds	r7, #8
 8106412:	46bd      	mov	sp, r7
 8106414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106418:	b003      	add	sp, #12
 810641a:	4770      	bx	lr

0810641c <metal_io_virt>:
{
 810641c:	b480      	push	{r7}
 810641e:	b083      	sub	sp, #12
 8106420:	af00      	add	r7, sp, #0
 8106422:	6078      	str	r0, [r7, #4]
 8106424:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	681b      	ldr	r3, [r3, #0]
		: NULL);
 810642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810642e:	d009      	beq.n	8106444 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	689b      	ldr	r3, [r3, #8]
 8106434:	683a      	ldr	r2, [r7, #0]
 8106436:	429a      	cmp	r2, r3
 8106438:	d804      	bhi.n	8106444 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810643e:	683b      	ldr	r3, [r7, #0]
 8106440:	4413      	add	r3, r2
 8106442:	e000      	b.n	8106446 <metal_io_virt+0x2a>
 8106444:	2300      	movs	r3, #0
}
 8106446:	4618      	mov	r0, r3
 8106448:	370c      	adds	r7, #12
 810644a:	46bd      	mov	sp, r7
 810644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106450:	4770      	bx	lr

08106452 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8106452:	b480      	push	{r7}
 8106454:	b085      	sub	sp, #20
 8106456:	af00      	add	r7, sp, #0
 8106458:	6078      	str	r0, [r7, #4]
 810645a:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	683a      	ldr	r2, [r7, #0]
 8106462:	1ad3      	subs	r3, r2, r3
 8106464:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	689b      	ldr	r3, [r3, #8]
 810646a:	68fa      	ldr	r2, [r7, #12]
 810646c:	429a      	cmp	r2, r3
 810646e:	d201      	bcs.n	8106474 <metal_io_virt_to_offset+0x22>
 8106470:	68fb      	ldr	r3, [r7, #12]
 8106472:	e001      	b.n	8106478 <metal_io_virt_to_offset+0x26>
 8106474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106478:	4618      	mov	r0, r3
 810647a:	3714      	adds	r7, #20
 810647c:	46bd      	mov	sp, r7
 810647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106482:	4770      	bx	lr

08106484 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8106484:	b590      	push	{r4, r7, lr}
 8106486:	b08d      	sub	sp, #52	; 0x34
 8106488:	af00      	add	r7, sp, #0
 810648a:	60f8      	str	r0, [r7, #12]
 810648c:	60b9      	str	r1, [r7, #8]
 810648e:	603b      	str	r3, [r7, #0]
 8106490:	4613      	mov	r3, r2
 8106492:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8106494:	68b9      	ldr	r1, [r7, #8]
 8106496:	68f8      	ldr	r0, [r7, #12]
 8106498:	f7ff ffc0 	bl	810641c <metal_io_virt>
 810649c:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	699b      	ldr	r3, [r3, #24]
 81064a2:	2b00      	cmp	r3, #0
 81064a4:	d009      	beq.n	81064ba <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 81064a6:	68fb      	ldr	r3, [r7, #12]
 81064a8:	699c      	ldr	r4, [r3, #24]
 81064aa:	79fa      	ldrb	r2, [r7, #7]
 81064ac:	683b      	ldr	r3, [r7, #0]
 81064ae:	68b9      	ldr	r1, [r7, #8]
 81064b0:	68f8      	ldr	r0, [r7, #12]
 81064b2:	47a0      	blx	r4
 81064b4:	4602      	mov	r2, r0
 81064b6:	460b      	mov	r3, r1
 81064b8:	e057      	b.n	810656a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 81064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81064bc:	2b00      	cmp	r3, #0
 81064be:	d011      	beq.n	81064e4 <metal_io_read+0x60>
 81064c0:	683b      	ldr	r3, [r7, #0]
 81064c2:	2b01      	cmp	r3, #1
 81064c4:	d10e      	bne.n	81064e4 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 81064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 81064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81064cc:	f3bf 8f5b 	dmb	ish
 81064d0:	781b      	ldrb	r3, [r3, #0]
 81064d2:	f3bf 8f5b 	dmb	ish
 81064d6:	b2db      	uxtb	r3, r3
 81064d8:	76fb      	strb	r3, [r7, #27]
 81064da:	7efb      	ldrb	r3, [r7, #27]
 81064dc:	b2da      	uxtb	r2, r3
 81064de:	f04f 0300 	mov.w	r3, #0
 81064e2:	e042      	b.n	810656a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 81064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81064e6:	2b00      	cmp	r3, #0
 81064e8:	d011      	beq.n	810650e <metal_io_read+0x8a>
 81064ea:	683b      	ldr	r3, [r7, #0]
 81064ec:	2b02      	cmp	r3, #2
 81064ee:	d10e      	bne.n	810650e <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 81064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81064f2:	627b      	str	r3, [r7, #36]	; 0x24
 81064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064f6:	f3bf 8f5b 	dmb	ish
 81064fa:	881b      	ldrh	r3, [r3, #0]
 81064fc:	f3bf 8f5b 	dmb	ish
 8106500:	b29b      	uxth	r3, r3
 8106502:	833b      	strh	r3, [r7, #24]
 8106504:	8b3b      	ldrh	r3, [r7, #24]
 8106506:	b29a      	uxth	r2, r3
 8106508:	f04f 0300 	mov.w	r3, #0
 810650c:	e02d      	b.n	810656a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 810650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106510:	2b00      	cmp	r3, #0
 8106512:	d010      	beq.n	8106536 <metal_io_read+0xb2>
 8106514:	683b      	ldr	r3, [r7, #0]
 8106516:	2b04      	cmp	r3, #4
 8106518:	d10d      	bne.n	8106536 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 810651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810651c:	623b      	str	r3, [r7, #32]
 810651e:	6a3b      	ldr	r3, [r7, #32]
 8106520:	f3bf 8f5b 	dmb	ish
 8106524:	681b      	ldr	r3, [r3, #0]
 8106526:	f3bf 8f5b 	dmb	ish
 810652a:	617b      	str	r3, [r7, #20]
 810652c:	697b      	ldr	r3, [r7, #20]
 810652e:	461a      	mov	r2, r3
 8106530:	f04f 0300 	mov.w	r3, #0
 8106534:	e019      	b.n	810656a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8106536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106538:	2b00      	cmp	r3, #0
 810653a:	d010      	beq.n	810655e <metal_io_read+0xda>
 810653c:	683b      	ldr	r3, [r7, #0]
 810653e:	2b04      	cmp	r3, #4
 8106540:	d10d      	bne.n	810655e <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8106542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106544:	61fb      	str	r3, [r7, #28]
 8106546:	69fb      	ldr	r3, [r7, #28]
 8106548:	f3bf 8f5b 	dmb	ish
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	f3bf 8f5b 	dmb	ish
 8106552:	613b      	str	r3, [r7, #16]
 8106554:	693b      	ldr	r3, [r7, #16]
 8106556:	461a      	mov	r2, r3
 8106558:	f04f 0300 	mov.w	r3, #0
 810655c:	e005      	b.n	810656a <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 810655e:	4b05      	ldr	r3, [pc, #20]	; (8106574 <metal_io_read+0xf0>)
 8106560:	4a05      	ldr	r2, [pc, #20]	; (8106578 <metal_io_read+0xf4>)
 8106562:	21f0      	movs	r1, #240	; 0xf0
 8106564:	4805      	ldr	r0, [pc, #20]	; (810657c <metal_io_read+0xf8>)
 8106566:	f003 fecf 	bl	810a308 <__assert_func>
	return 0; /* quiet compiler */
}
 810656a:	4610      	mov	r0, r2
 810656c:	4619      	mov	r1, r3
 810656e:	3734      	adds	r7, #52	; 0x34
 8106570:	46bd      	mov	sp, r7
 8106572:	bd90      	pop	{r4, r7, pc}
 8106574:	0810ecc4 	.word	0x0810ecc4
 8106578:	0810ee48 	.word	0x0810ee48
 810657c:	0810ecc8 	.word	0x0810ecc8

08106580 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8106580:	b580      	push	{r7, lr}
 8106582:	b082      	sub	sp, #8
 8106584:	af00      	add	r7, sp, #0
 8106586:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8106588:	6878      	ldr	r0, [r7, #4]
 810658a:	f003 ff17 	bl	810a3bc <malloc>
 810658e:	4603      	mov	r3, r0
}
 8106590:	4618      	mov	r0, r3
 8106592:	3708      	adds	r7, #8
 8106594:	46bd      	mov	sp, r7
 8106596:	bd80      	pop	{r7, pc}

08106598 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8106598:	b580      	push	{r7, lr}
 810659a:	b082      	sub	sp, #8
 810659c:	af00      	add	r7, sp, #0
 810659e:	6078      	str	r0, [r7, #4]
	free(ptr);
 81065a0:	6878      	ldr	r0, [r7, #4]
 81065a2:	f003 ff13 	bl	810a3cc <free>
}
 81065a6:	bf00      	nop
 81065a8:	3708      	adds	r7, #8
 81065aa:	46bd      	mov	sp, r7
 81065ac:	bd80      	pop	{r7, pc}

081065ae <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 81065ae:	b580      	push	{r7, lr}
 81065b0:	b084      	sub	sp, #16
 81065b2:	af00      	add	r7, sp, #0
 81065b4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	3307      	adds	r3, #7
 81065ba:	00db      	lsls	r3, r3, #3
 81065bc:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 81065be:	68f8      	ldr	r0, [r7, #12]
 81065c0:	f7ff ffde 	bl	8106580 <metal_allocate_memory>
 81065c4:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 81065c6:	68bb      	ldr	r3, [r7, #8]
 81065c8:	2b00      	cmp	r3, #0
 81065ca:	d004      	beq.n	81065d6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 81065cc:	68fa      	ldr	r2, [r7, #12]
 81065ce:	2100      	movs	r1, #0
 81065d0:	68b8      	ldr	r0, [r7, #8]
 81065d2:	f003 ff11 	bl	810a3f8 <memset>
	}

	return vqs;
 81065d6:	68bb      	ldr	r3, [r7, #8]
}
 81065d8:	4618      	mov	r0, r3
 81065da:	3710      	adds	r7, #16
 81065dc:	46bd      	mov	sp, r7
 81065de:	bd80      	pop	{r7, pc}

081065e0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 81065e0:	b580      	push	{r7, lr}
 81065e2:	b086      	sub	sp, #24
 81065e4:	af00      	add	r7, sp, #0
 81065e6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	891b      	ldrh	r3, [r3, #8]
 81065ec:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81065f4:	693b      	ldr	r3, [r7, #16]
 81065f6:	3b18      	subs	r3, #24
 81065f8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 81065fa:	693b      	ldr	r3, [r7, #16]
 81065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065fe:	697a      	ldr	r2, [r7, #20]
 8106600:	429a      	cmp	r2, r3
 8106602:	d905      	bls.n	8106610 <rproc_virtio_virtqueue_notify+0x30>
 8106604:	4b0d      	ldr	r3, [pc, #52]	; (810663c <rproc_virtio_virtqueue_notify+0x5c>)
 8106606:	4a0e      	ldr	r2, [pc, #56]	; (8106640 <rproc_virtio_virtqueue_notify+0x60>)
 8106608:	2133      	movs	r1, #51	; 0x33
 810660a:	480e      	ldr	r0, [pc, #56]	; (8106644 <rproc_virtio_virtqueue_notify+0x64>)
 810660c:	f003 fe7c 	bl	810a308 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8106610:	693b      	ldr	r3, [r7, #16]
 8106612:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106614:	697a      	ldr	r2, [r7, #20]
 8106616:	4613      	mov	r3, r2
 8106618:	005b      	lsls	r3, r3, #1
 810661a:	4413      	add	r3, r2
 810661c:	00db      	lsls	r3, r3, #3
 810661e:	440b      	add	r3, r1
 8106620:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8106622:	68fb      	ldr	r3, [r7, #12]
 8106624:	691b      	ldr	r3, [r3, #16]
 8106626:	68fa      	ldr	r2, [r7, #12]
 8106628:	6810      	ldr	r0, [r2, #0]
 810662a:	68ba      	ldr	r2, [r7, #8]
 810662c:	6912      	ldr	r2, [r2, #16]
 810662e:	4611      	mov	r1, r2
 8106630:	4798      	blx	r3
}
 8106632:	bf00      	nop
 8106634:	3718      	adds	r7, #24
 8106636:	46bd      	mov	sp, r7
 8106638:	bd80      	pop	{r7, pc}
 810663a:	bf00      	nop
 810663c:	0810ed10 	.word	0x0810ed10
 8106640:	0810ee28 	.word	0x0810ee28
 8106644:	0810ed2c 	.word	0x0810ed2c

08106648 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8106648:	b580      	push	{r7, lr}
 810664a:	b086      	sub	sp, #24
 810664c:	af00      	add	r7, sp, #0
 810664e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	3b18      	subs	r3, #24
 8106654:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8106656:	697b      	ldr	r3, [r7, #20]
 8106658:	689b      	ldr	r3, [r3, #8]
 810665a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 810665c:	697b      	ldr	r3, [r7, #20]
 810665e:	68db      	ldr	r3, [r3, #12]
 8106660:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8106662:	693b      	ldr	r3, [r7, #16]
 8106664:	3318      	adds	r3, #24
 8106666:	4619      	mov	r1, r3
 8106668:	68f8      	ldr	r0, [r7, #12]
 810666a:	f7ff fef2 	bl	8106452 <metal_io_virt_to_offset>
 810666e:	4601      	mov	r1, r0
 8106670:	2301      	movs	r3, #1
 8106672:	2205      	movs	r2, #5
 8106674:	68f8      	ldr	r0, [r7, #12]
 8106676:	f7ff ff05 	bl	8106484 <metal_io_read>
 810667a:	4602      	mov	r2, r0
 810667c:	460b      	mov	r3, r1
 810667e:	4613      	mov	r3, r2
 8106680:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8106682:	7afb      	ldrb	r3, [r7, #11]
}
 8106684:	4618      	mov	r0, r3
 8106686:	3718      	adds	r7, #24
 8106688:	46bd      	mov	sp, r7
 810668a:	bd80      	pop	{r7, pc}

0810668c <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 810668c:	b580      	push	{r7, lr}
 810668e:	b086      	sub	sp, #24
 8106690:	af00      	add	r7, sp, #0
 8106692:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	3b18      	subs	r3, #24
 8106698:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810669a:	697b      	ldr	r3, [r7, #20]
 810669c:	689b      	ldr	r3, [r3, #8]
 810669e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81066a0:	697b      	ldr	r3, [r7, #20]
 81066a2:	68db      	ldr	r3, [r3, #12]
 81066a4:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 81066a6:	693b      	ldr	r3, [r7, #16]
 81066a8:	330c      	adds	r3, #12
 81066aa:	4619      	mov	r1, r3
 81066ac:	68f8      	ldr	r0, [r7, #12]
 81066ae:	f7ff fed0 	bl	8106452 <metal_io_virt_to_offset>
 81066b2:	4601      	mov	r1, r0
 81066b4:	2304      	movs	r3, #4
 81066b6:	2205      	movs	r2, #5
 81066b8:	68f8      	ldr	r0, [r7, #12]
 81066ba:	f7ff fee3 	bl	8106484 <metal_io_read>
 81066be:	4602      	mov	r2, r0
 81066c0:	460b      	mov	r3, r1
 81066c2:	4613      	mov	r3, r2
 81066c4:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 81066c6:	68bb      	ldr	r3, [r7, #8]
}
 81066c8:	4618      	mov	r0, r3
 81066ca:	3718      	adds	r7, #24
 81066cc:	46bd      	mov	sp, r7
 81066ce:	bd80      	pop	{r7, pc}

081066d0 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 81066d0:	b480      	push	{r7}
 81066d2:	b083      	sub	sp, #12
 81066d4:	af00      	add	r7, sp, #0
 81066d6:	6078      	str	r0, [r7, #4]
 81066d8:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 81066da:	2300      	movs	r3, #0
}
 81066dc:	4618      	mov	r0, r3
 81066de:	370c      	adds	r7, #12
 81066e0:	46bd      	mov	sp, r7
 81066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066e6:	4770      	bx	lr

081066e8 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81066e8:	b480      	push	{r7}
 81066ea:	b085      	sub	sp, #20
 81066ec:	af00      	add	r7, sp, #0
 81066ee:	60f8      	str	r0, [r7, #12]
 81066f0:	60b9      	str	r1, [r7, #8]
 81066f2:	607a      	str	r2, [r7, #4]
 81066f4:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 81066f6:	bf00      	nop
 81066f8:	3714      	adds	r7, #20
 81066fa:	46bd      	mov	sp, r7
 81066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106700:	4770      	bx	lr
	...

08106704 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8106704:	b580      	push	{r7, lr}
 8106706:	b08e      	sub	sp, #56	; 0x38
 8106708:	af00      	add	r7, sp, #0
 810670a:	60f8      	str	r0, [r7, #12]
 810670c:	60b9      	str	r1, [r7, #8]
 810670e:	607a      	str	r2, [r7, #4]
 8106710:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8106716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106718:	7e5b      	ldrb	r3, [r3, #25]
 810671a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 810671c:	2050      	movs	r0, #80	; 0x50
 810671e:	f7ff ff2f 	bl	8106580 <metal_allocate_memory>
 8106722:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8106724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106726:	2b00      	cmp	r3, #0
 8106728:	d101      	bne.n	810672e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 810672a:	2300      	movs	r3, #0
 810672c:	e092      	b.n	8106854 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 810672e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106730:	4613      	mov	r3, r2
 8106732:	005b      	lsls	r3, r3, #1
 8106734:	4413      	add	r3, r2
 8106736:	00db      	lsls	r3, r3, #3
 8106738:	4618      	mov	r0, r3
 810673a:	f7ff ff21 	bl	8106580 <metal_allocate_memory>
 810673e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8106740:	6a3b      	ldr	r3, [r7, #32]
 8106742:	2b00      	cmp	r3, #0
 8106744:	f000 8081 	beq.w	810684a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8106748:	2250      	movs	r2, #80	; 0x50
 810674a:	2100      	movs	r1, #0
 810674c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810674e:	f003 fe53 	bl	810a3f8 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8106752:	2218      	movs	r2, #24
 8106754:	2100      	movs	r1, #0
 8106756:	6a38      	ldr	r0, [r7, #32]
 8106758:	f003 fe4e 	bl	810a3f8 <memset>
	vdev = &rpvdev->vdev;
 810675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810675e:	3318      	adds	r3, #24
 8106760:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8106762:	2300      	movs	r3, #0
 8106764:	637b      	str	r3, [r7, #52]	; 0x34
 8106766:	e025      	b.n	81067b4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8106768:	2300      	movs	r3, #0
 810676a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 810676c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810676e:	4613      	mov	r3, r2
 8106770:	009b      	lsls	r3, r3, #2
 8106772:	4413      	add	r3, r2
 8106774:	009b      	lsls	r3, r3, #2
 8106776:	3318      	adds	r3, #24
 8106778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810677a:	4413      	add	r3, r2
 810677c:	3304      	adds	r3, #4
 810677e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8106780:	68fb      	ldr	r3, [r7, #12]
 8106782:	2b00      	cmp	r3, #0
 8106784:	d102      	bne.n	810678c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8106786:	69bb      	ldr	r3, [r7, #24]
 8106788:	689b      	ldr	r3, [r3, #8]
 810678a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 810678c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810678e:	f7ff ff0e 	bl	81065ae <virtqueue_allocate>
 8106792:	6178      	str	r0, [r7, #20]
		if (!vq)
 8106794:	697b      	ldr	r3, [r7, #20]
 8106796:	2b00      	cmp	r3, #0
 8106798:	d031      	beq.n	81067fe <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 810679a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810679c:	4613      	mov	r3, r2
 810679e:	005b      	lsls	r3, r3, #1
 81067a0:	4413      	add	r3, r2
 81067a2:	00db      	lsls	r3, r3, #3
 81067a4:	461a      	mov	r2, r3
 81067a6:	6a3b      	ldr	r3, [r7, #32]
 81067a8:	4413      	add	r3, r2
 81067aa:	697a      	ldr	r2, [r7, #20]
 81067ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 81067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81067b0:	3301      	adds	r3, #1
 81067b2:	637b      	str	r3, [r7, #52]	; 0x34
 81067b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81067b8:	429a      	cmp	r2, r3
 81067ba:	d3d5      	bcc.n	8106768 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 81067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81067c0:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 81067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81067c6:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 81067c8:	69fb      	ldr	r3, [r7, #28]
 81067ca:	6a3a      	ldr	r2, [r7, #32]
 81067cc:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 81067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81067d2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 81067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067d6:	683a      	ldr	r2, [r7, #0]
 81067d8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 81067da:	69fb      	ldr	r3, [r7, #28]
 81067dc:	68ba      	ldr	r2, [r7, #8]
 81067de:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 81067e0:	69fb      	ldr	r3, [r7, #28]
 81067e2:	68fa      	ldr	r2, [r7, #12]
 81067e4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 81067e6:	69fb      	ldr	r3, [r7, #28]
 81067e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81067ea:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 81067ec:	69fb      	ldr	r3, [r7, #28]
 81067ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81067f0:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 81067f2:	69fb      	ldr	r3, [r7, #28]
 81067f4:	4a19      	ldr	r2, [pc, #100]	; (810685c <rproc_virtio_create_vdev+0x158>)
 81067f6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 81067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067fa:	3318      	adds	r3, #24
 81067fc:	e02a      	b.n	8106854 <rproc_virtio_create_vdev+0x150>
			goto err1;
 81067fe:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8106800:	2300      	movs	r3, #0
 8106802:	637b      	str	r3, [r7, #52]	; 0x34
 8106804:	e019      	b.n	810683a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8106806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106808:	4613      	mov	r3, r2
 810680a:	005b      	lsls	r3, r3, #1
 810680c:	4413      	add	r3, r2
 810680e:	00db      	lsls	r3, r3, #3
 8106810:	461a      	mov	r2, r3
 8106812:	6a3b      	ldr	r3, [r7, #32]
 8106814:	4413      	add	r3, r2
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	2b00      	cmp	r3, #0
 810681a:	d00b      	beq.n	8106834 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 810681c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810681e:	4613      	mov	r3, r2
 8106820:	005b      	lsls	r3, r3, #1
 8106822:	4413      	add	r3, r2
 8106824:	00db      	lsls	r3, r3, #3
 8106826:	461a      	mov	r2, r3
 8106828:	6a3b      	ldr	r3, [r7, #32]
 810682a:	4413      	add	r3, r2
 810682c:	681b      	ldr	r3, [r3, #0]
 810682e:	4618      	mov	r0, r3
 8106830:	f7ff feb2 	bl	8106598 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8106834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106836:	3301      	adds	r3, #1
 8106838:	637b      	str	r3, [r7, #52]	; 0x34
 810683a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810683e:	429a      	cmp	r2, r3
 8106840:	d3e1      	bcc.n	8106806 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8106842:	6a38      	ldr	r0, [r7, #32]
 8106844:	f7ff fea8 	bl	8106598 <metal_free_memory>
 8106848:	e000      	b.n	810684c <rproc_virtio_create_vdev+0x148>
		goto err0;
 810684a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 810684c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810684e:	f7ff fea3 	bl	8106598 <metal_free_memory>
	return NULL;
 8106852:	2300      	movs	r3, #0
}
 8106854:	4618      	mov	r0, r3
 8106856:	3738      	adds	r7, #56	; 0x38
 8106858:	46bd      	mov	sp, r7
 810685a:	bd80      	pop	{r7, pc}
 810685c:	0810ee04 	.word	0x0810ee04

08106860 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8106860:	b480      	push	{r7}
 8106862:	b087      	sub	sp, #28
 8106864:	af00      	add	r7, sp, #0
 8106866:	60f8      	str	r0, [r7, #12]
 8106868:	60b9      	str	r1, [r7, #8]
 810686a:	607a      	str	r2, [r7, #4]
 810686c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 810686e:	68fb      	ldr	r3, [r7, #12]
 8106870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106872:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8106874:	68ba      	ldr	r2, [r7, #8]
 8106876:	697b      	ldr	r3, [r7, #20]
 8106878:	429a      	cmp	r2, r3
 810687a:	d302      	bcc.n	8106882 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 810687c:	f06f 0301 	mvn.w	r3, #1
 8106880:	e019      	b.n	81068b6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8106882:	68fb      	ldr	r3, [r7, #12]
 8106884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106886:	68ba      	ldr	r2, [r7, #8]
 8106888:	4613      	mov	r3, r2
 810688a:	005b      	lsls	r3, r3, #1
 810688c:	4413      	add	r3, r2
 810688e:	00db      	lsls	r3, r3, #3
 8106890:	440b      	add	r3, r1
 8106892:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8106894:	693b      	ldr	r3, [r7, #16]
 8106896:	6a3a      	ldr	r2, [r7, #32]
 8106898:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 810689a:	693b      	ldr	r3, [r7, #16]
 810689c:	687a      	ldr	r2, [r7, #4]
 810689e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 81068a0:	693b      	ldr	r3, [r7, #16]
 81068a2:	683a      	ldr	r2, [r7, #0]
 81068a4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 81068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068a8:	b29a      	uxth	r2, r3
 81068aa:	693b      	ldr	r3, [r7, #16]
 81068ac:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 81068ae:	693b      	ldr	r3, [r7, #16]
 81068b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81068b2:	609a      	str	r2, [r3, #8]

	return 0;
 81068b4:	2300      	movs	r3, #0
}
 81068b6:	4618      	mov	r0, r3
 81068b8:	371c      	adds	r7, #28
 81068ba:	46bd      	mov	sp, r7
 81068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068c0:	4770      	bx	lr

081068c2 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 81068c2:	b580      	push	{r7, lr}
 81068c4:	b086      	sub	sp, #24
 81068c6:	af00      	add	r7, sp, #0
 81068c8:	6078      	str	r0, [r7, #4]
 81068ca:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	2b00      	cmp	r3, #0
 81068d0:	d102      	bne.n	81068d8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 81068d2:	f06f 0315 	mvn.w	r3, #21
 81068d6:	e02c      	b.n	8106932 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	683a      	ldr	r2, [r7, #0]
 81068de:	429a      	cmp	r2, r3
 81068e0:	d101      	bne.n	81068e6 <rproc_virtio_notified+0x24>
		return 0;
 81068e2:	2300      	movs	r3, #0
 81068e4:	e025      	b.n	8106932 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 81068e6:	687b      	ldr	r3, [r7, #4]
 81068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068ea:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 81068ec:	2300      	movs	r3, #0
 81068ee:	617b      	str	r3, [r7, #20]
 81068f0:	e01a      	b.n	8106928 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81068f6:	697a      	ldr	r2, [r7, #20]
 81068f8:	4613      	mov	r3, r2
 81068fa:	005b      	lsls	r3, r3, #1
 81068fc:	4413      	add	r3, r2
 81068fe:	00db      	lsls	r3, r3, #3
 8106900:	440b      	add	r3, r1
 8106902:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8106904:	68fb      	ldr	r3, [r7, #12]
 8106906:	691b      	ldr	r3, [r3, #16]
 8106908:	683a      	ldr	r2, [r7, #0]
 810690a:	429a      	cmp	r2, r3
 810690c:	d003      	beq.n	8106916 <rproc_virtio_notified+0x54>
 810690e:	683b      	ldr	r3, [r7, #0]
 8106910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106914:	d105      	bne.n	8106922 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8106916:	68fb      	ldr	r3, [r7, #12]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 810691c:	68b8      	ldr	r0, [r7, #8]
 810691e:	f001 fa19 	bl	8107d54 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8106922:	697b      	ldr	r3, [r7, #20]
 8106924:	3301      	adds	r3, #1
 8106926:	617b      	str	r3, [r7, #20]
 8106928:	697a      	ldr	r2, [r7, #20]
 810692a:	693b      	ldr	r3, [r7, #16]
 810692c:	429a      	cmp	r2, r3
 810692e:	d3e0      	bcc.n	81068f2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8106930:	2300      	movs	r3, #0
}
 8106932:	4618      	mov	r0, r3
 8106934:	3718      	adds	r7, #24
 8106936:	46bd      	mov	sp, r7
 8106938:	bd80      	pop	{r7, pc}

0810693a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 810693a:	b580      	push	{r7, lr}
 810693c:	b084      	sub	sp, #16
 810693e:	af00      	add	r7, sp, #0
 8106940:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	699b      	ldr	r3, [r3, #24]
 8106946:	2b00      	cmp	r3, #0
 8106948:	d00a      	beq.n	8106960 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 810694a:	6878      	ldr	r0, [r7, #4]
 810694c:	f7ff fe7c 	bl	8106648 <rproc_virtio_get_status>
 8106950:	4603      	mov	r3, r0
 8106952:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8106954:	7bfb      	ldrb	r3, [r7, #15]
 8106956:	f003 0304 	and.w	r3, r3, #4
 810695a:	2b00      	cmp	r3, #0
 810695c:	d102      	bne.n	8106964 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 810695e:	e7f4      	b.n	810694a <rproc_virtio_wait_remote_ready+0x10>
		return;
 8106960:	bf00      	nop
 8106962:	e000      	b.n	8106966 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8106964:	bf00      	nop
	}
}
 8106966:	3710      	adds	r7, #16
 8106968:	46bd      	mov	sp, r7
 810696a:	bd80      	pop	{r7, pc}

0810696c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 810696c:	b480      	push	{r7}
 810696e:	b083      	sub	sp, #12
 8106970:	af00      	add	r7, sp, #0
 8106972:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8106974:	bf00      	nop
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	2201      	movs	r2, #1
 810697a:	4611      	mov	r1, r2
 810697c:	f3bf 8f5b 	dmb	ish
 8106980:	e8d3 2f4f 	ldrexb	r2, [r3]
 8106984:	e8c3 1f40 	strexb	r0, r1, [r3]
 8106988:	2800      	cmp	r0, #0
 810698a:	d1f9      	bne.n	8106980 <__metal_mutex_acquire+0x14>
 810698c:	f3bf 8f5b 	dmb	ish
 8106990:	b2d3      	uxtb	r3, r2
 8106992:	2b00      	cmp	r3, #0
 8106994:	d1ef      	bne.n	8106976 <__metal_mutex_acquire+0xa>
		;
	}
}
 8106996:	bf00      	nop
 8106998:	bf00      	nop
 810699a:	370c      	adds	r7, #12
 810699c:	46bd      	mov	sp, r7
 810699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069a2:	4770      	bx	lr

081069a4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 81069a4:	b480      	push	{r7}
 81069a6:	b083      	sub	sp, #12
 81069a8:	af00      	add	r7, sp, #0
 81069aa:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	f3bf 8f5b 	dmb	ish
 81069b2:	2200      	movs	r2, #0
 81069b4:	701a      	strb	r2, [r3, #0]
 81069b6:	f3bf 8f5b 	dmb	ish
}
 81069ba:	bf00      	nop
 81069bc:	370c      	adds	r7, #12
 81069be:	46bd      	mov	sp, r7
 81069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069c4:	4770      	bx	lr

081069c6 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 81069c6:	b580      	push	{r7, lr}
 81069c8:	b082      	sub	sp, #8
 81069ca:	af00      	add	r7, sp, #0
 81069cc:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81069ce:	6878      	ldr	r0, [r7, #4]
 81069d0:	f7ff ffcc 	bl	810696c <__metal_mutex_acquire>
}
 81069d4:	bf00      	nop
 81069d6:	3708      	adds	r7, #8
 81069d8:	46bd      	mov	sp, r7
 81069da:	bd80      	pop	{r7, pc}

081069dc <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 81069dc:	b580      	push	{r7, lr}
 81069de:	b082      	sub	sp, #8
 81069e0:	af00      	add	r7, sp, #0
 81069e2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81069e4:	6878      	ldr	r0, [r7, #4]
 81069e6:	f7ff ffdd 	bl	81069a4 <__metal_mutex_release>
}
 81069ea:	bf00      	nop
 81069ec:	3708      	adds	r7, #8
 81069ee:	46bd      	mov	sp, r7
 81069f0:	bd80      	pop	{r7, pc}

081069f2 <metal_list_add_before>:
{
 81069f2:	b480      	push	{r7}
 81069f4:	b083      	sub	sp, #12
 81069f6:	af00      	add	r7, sp, #0
 81069f8:	6078      	str	r0, [r7, #4]
 81069fa:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	685a      	ldr	r2, [r3, #4]
 8106a00:	683b      	ldr	r3, [r7, #0]
 8106a02:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8106a04:	683b      	ldr	r3, [r7, #0]
 8106a06:	687a      	ldr	r2, [r7, #4]
 8106a08:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8106a0a:	683b      	ldr	r3, [r7, #0]
 8106a0c:	681b      	ldr	r3, [r3, #0]
 8106a0e:	683a      	ldr	r2, [r7, #0]
 8106a10:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8106a12:	683b      	ldr	r3, [r7, #0]
 8106a14:	685b      	ldr	r3, [r3, #4]
 8106a16:	683a      	ldr	r2, [r7, #0]
 8106a18:	601a      	str	r2, [r3, #0]
}
 8106a1a:	bf00      	nop
 8106a1c:	370c      	adds	r7, #12
 8106a1e:	46bd      	mov	sp, r7
 8106a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a24:	4770      	bx	lr

08106a26 <metal_list_add_tail>:
{
 8106a26:	b580      	push	{r7, lr}
 8106a28:	b082      	sub	sp, #8
 8106a2a:	af00      	add	r7, sp, #0
 8106a2c:	6078      	str	r0, [r7, #4]
 8106a2e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8106a30:	6839      	ldr	r1, [r7, #0]
 8106a32:	6878      	ldr	r0, [r7, #4]
 8106a34:	f7ff ffdd 	bl	81069f2 <metal_list_add_before>
}
 8106a38:	bf00      	nop
 8106a3a:	3708      	adds	r7, #8
 8106a3c:	46bd      	mov	sp, r7
 8106a3e:	bd80      	pop	{r7, pc}

08106a40 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8106a40:	b480      	push	{r7}
 8106a42:	b083      	sub	sp, #12
 8106a44:	af00      	add	r7, sp, #0
 8106a46:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	687a      	ldr	r2, [r7, #4]
 8106a4e:	6852      	ldr	r2, [r2, #4]
 8106a50:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	685b      	ldr	r3, [r3, #4]
 8106a56:	687a      	ldr	r2, [r7, #4]
 8106a58:	6812      	ldr	r2, [r2, #0]
 8106a5a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	687a      	ldr	r2, [r7, #4]
 8106a60:	605a      	str	r2, [r3, #4]
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	685a      	ldr	r2, [r3, #4]
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	601a      	str	r2, [r3, #0]
}
 8106a6a:	bf00      	nop
 8106a6c:	370c      	adds	r7, #12
 8106a6e:	46bd      	mov	sp, r7
 8106a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a74:	4770      	bx	lr

08106a76 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8106a76:	b480      	push	{r7}
 8106a78:	b083      	sub	sp, #12
 8106a7a:	af00      	add	r7, sp, #0
 8106a7c:	6078      	str	r0, [r7, #4]
 8106a7e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8106a80:	683b      	ldr	r3, [r7, #0]
 8106a82:	095b      	lsrs	r3, r3, #5
 8106a84:	009a      	lsls	r2, r3, #2
 8106a86:	6879      	ldr	r1, [r7, #4]
 8106a88:	440a      	add	r2, r1
 8106a8a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8106a8c:	683a      	ldr	r2, [r7, #0]
 8106a8e:	f002 021f 	and.w	r2, r2, #31
 8106a92:	2001      	movs	r0, #1
 8106a94:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8106a98:	009b      	lsls	r3, r3, #2
 8106a9a:	6878      	ldr	r0, [r7, #4]
 8106a9c:	4403      	add	r3, r0
 8106a9e:	430a      	orrs	r2, r1
 8106aa0:	601a      	str	r2, [r3, #0]
}
 8106aa2:	bf00      	nop
 8106aa4:	370c      	adds	r7, #12
 8106aa6:	46bd      	mov	sp, r7
 8106aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106aac:	4770      	bx	lr

08106aae <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8106aae:	b480      	push	{r7}
 8106ab0:	b083      	sub	sp, #12
 8106ab2:	af00      	add	r7, sp, #0
 8106ab4:	6078      	str	r0, [r7, #4]
 8106ab6:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8106ab8:	683b      	ldr	r3, [r7, #0]
 8106aba:	095b      	lsrs	r3, r3, #5
 8106abc:	009b      	lsls	r3, r3, #2
 8106abe:	687a      	ldr	r2, [r7, #4]
 8106ac0:	4413      	add	r3, r2
 8106ac2:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8106ac4:	683b      	ldr	r3, [r7, #0]
 8106ac6:	f003 031f 	and.w	r3, r3, #31
 8106aca:	2101      	movs	r1, #1
 8106acc:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8106ad0:	4013      	ands	r3, r2
}
 8106ad2:	4618      	mov	r0, r3
 8106ad4:	370c      	adds	r7, #12
 8106ad6:	46bd      	mov	sp, r7
 8106ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106adc:	4770      	bx	lr

08106ade <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8106ade:	b480      	push	{r7}
 8106ae0:	b083      	sub	sp, #12
 8106ae2:	af00      	add	r7, sp, #0
 8106ae4:	6078      	str	r0, [r7, #4]
 8106ae6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8106ae8:	683b      	ldr	r3, [r7, #0]
 8106aea:	095b      	lsrs	r3, r3, #5
 8106aec:	009a      	lsls	r2, r3, #2
 8106aee:	6879      	ldr	r1, [r7, #4]
 8106af0:	440a      	add	r2, r1
 8106af2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8106af4:	683a      	ldr	r2, [r7, #0]
 8106af6:	f002 021f 	and.w	r2, r2, #31
 8106afa:	2001      	movs	r0, #1
 8106afc:	fa00 f202 	lsl.w	r2, r0, r2
 8106b00:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8106b02:	009b      	lsls	r3, r3, #2
 8106b04:	6878      	ldr	r0, [r7, #4]
 8106b06:	4403      	add	r3, r0
 8106b08:	400a      	ands	r2, r1
 8106b0a:	601a      	str	r2, [r3, #0]
}
 8106b0c:	bf00      	nop
 8106b0e:	370c      	adds	r7, #12
 8106b10:	46bd      	mov	sp, r7
 8106b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b16:	4770      	bx	lr

08106b18 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8106b18:	b580      	push	{r7, lr}
 8106b1a:	b082      	sub	sp, #8
 8106b1c:	af00      	add	r7, sp, #0
 8106b1e:	6078      	str	r0, [r7, #4]
 8106b20:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8106b22:	6839      	ldr	r1, [r7, #0]
 8106b24:	6878      	ldr	r0, [r7, #4]
 8106b26:	f7ff ffc2 	bl	8106aae <metal_bitmap_is_bit_set>
 8106b2a:	4603      	mov	r3, r0
 8106b2c:	2b00      	cmp	r3, #0
 8106b2e:	bf0c      	ite	eq
 8106b30:	2301      	moveq	r3, #1
 8106b32:	2300      	movne	r3, #0
 8106b34:	b2db      	uxtb	r3, r3
}
 8106b36:	4618      	mov	r0, r3
 8106b38:	3708      	adds	r7, #8
 8106b3a:	46bd      	mov	sp, r7
 8106b3c:	bd80      	pop	{r7, pc}

08106b3e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8106b3e:	b580      	push	{r7, lr}
 8106b40:	b086      	sub	sp, #24
 8106b42:	af00      	add	r7, sp, #0
 8106b44:	60f8      	str	r0, [r7, #12]
 8106b46:	60b9      	str	r1, [r7, #8]
 8106b48:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8106b4a:	68bb      	ldr	r3, [r7, #8]
 8106b4c:	617b      	str	r3, [r7, #20]
 8106b4e:	e002      	b.n	8106b56 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8106b50:	697b      	ldr	r3, [r7, #20]
 8106b52:	3301      	adds	r3, #1
 8106b54:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8106b56:	697a      	ldr	r2, [r7, #20]
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	429a      	cmp	r2, r3
 8106b5c:	d207      	bcs.n	8106b6e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8106b5e:	697b      	ldr	r3, [r7, #20]
 8106b60:	4619      	mov	r1, r3
 8106b62:	68f8      	ldr	r0, [r7, #12]
 8106b64:	f7ff ffd8 	bl	8106b18 <metal_bitmap_is_bit_clear>
 8106b68:	4603      	mov	r3, r0
 8106b6a:	2b00      	cmp	r3, #0
 8106b6c:	d0f0      	beq.n	8106b50 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8106b6e:	697b      	ldr	r3, [r7, #20]
}
 8106b70:	4618      	mov	r0, r3
 8106b72:	3718      	adds	r7, #24
 8106b74:	46bd      	mov	sp, r7
 8106b76:	bd80      	pop	{r7, pc}

08106b78 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8106b78:	b580      	push	{r7, lr}
 8106b7a:	b084      	sub	sp, #16
 8106b7c:	af00      	add	r7, sp, #0
 8106b7e:	60f8      	str	r0, [r7, #12]
 8106b80:	60b9      	str	r1, [r7, #8]
 8106b82:	607a      	str	r2, [r7, #4]
 8106b84:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8106b86:	68fb      	ldr	r3, [r7, #12]
 8106b88:	2220      	movs	r2, #32
 8106b8a:	68b9      	ldr	r1, [r7, #8]
 8106b8c:	4618      	mov	r0, r3
 8106b8e:	f004 fd01 	bl	810b594 <strncpy>
	ept->addr = src;
 8106b92:	68fb      	ldr	r3, [r7, #12]
 8106b94:	687a      	ldr	r2, [r7, #4]
 8106b96:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8106b98:	68fb      	ldr	r3, [r7, #12]
 8106b9a:	683a      	ldr	r2, [r7, #0]
 8106b9c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8106b9e:	68fb      	ldr	r3, [r7, #12]
 8106ba0:	69ba      	ldr	r2, [r7, #24]
 8106ba2:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8106ba4:	68fb      	ldr	r3, [r7, #12]
 8106ba6:	69fa      	ldr	r2, [r7, #28]
 8106ba8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8106baa:	bf00      	nop
 8106bac:	3710      	adds	r7, #16
 8106bae:	46bd      	mov	sp, r7
 8106bb0:	bd80      	pop	{r7, pc}

08106bb2 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8106bb2:	b580      	push	{r7, lr}
 8106bb4:	b084      	sub	sp, #16
 8106bb6:	af00      	add	r7, sp, #0
 8106bb8:	6078      	str	r0, [r7, #4]
 8106bba:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8106bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8106bc0:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8106bc2:	683b      	ldr	r3, [r7, #0]
 8106bc4:	461a      	mov	r2, r3
 8106bc6:	2100      	movs	r1, #0
 8106bc8:	6878      	ldr	r0, [r7, #4]
 8106bca:	f7ff ffb8 	bl	8106b3e <metal_bitmap_next_clear_bit>
 8106bce:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8106bd0:	683b      	ldr	r3, [r7, #0]
 8106bd2:	68ba      	ldr	r2, [r7, #8]
 8106bd4:	429a      	cmp	r2, r3
 8106bd6:	d206      	bcs.n	8106be6 <rpmsg_get_address+0x34>
		addr = nextbit;
 8106bd8:	68bb      	ldr	r3, [r7, #8]
 8106bda:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8106bdc:	68bb      	ldr	r3, [r7, #8]
 8106bde:	4619      	mov	r1, r3
 8106be0:	6878      	ldr	r0, [r7, #4]
 8106be2:	f7ff ff48 	bl	8106a76 <metal_bitmap_set_bit>
	}

	return addr;
 8106be6:	68fb      	ldr	r3, [r7, #12]
}
 8106be8:	4618      	mov	r0, r3
 8106bea:	3710      	adds	r7, #16
 8106bec:	46bd      	mov	sp, r7
 8106bee:	bd80      	pop	{r7, pc}

08106bf0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8106bf0:	b580      	push	{r7, lr}
 8106bf2:	b084      	sub	sp, #16
 8106bf4:	af00      	add	r7, sp, #0
 8106bf6:	60f8      	str	r0, [r7, #12]
 8106bf8:	60b9      	str	r1, [r7, #8]
 8106bfa:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8106bfc:	687a      	ldr	r2, [r7, #4]
 8106bfe:	68bb      	ldr	r3, [r7, #8]
 8106c00:	429a      	cmp	r2, r3
 8106c02:	da03      	bge.n	8106c0c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8106c04:	6879      	ldr	r1, [r7, #4]
 8106c06:	68f8      	ldr	r0, [r7, #12]
 8106c08:	f7ff ff69 	bl	8106ade <metal_bitmap_clear_bit>
}
 8106c0c:	bf00      	nop
 8106c0e:	3710      	adds	r7, #16
 8106c10:	46bd      	mov	sp, r7
 8106c12:	bd80      	pop	{r7, pc}

08106c14 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8106c14:	b580      	push	{r7, lr}
 8106c16:	b084      	sub	sp, #16
 8106c18:	af00      	add	r7, sp, #0
 8106c1a:	60f8      	str	r0, [r7, #12]
 8106c1c:	60b9      	str	r1, [r7, #8]
 8106c1e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8106c20:	687a      	ldr	r2, [r7, #4]
 8106c22:	68bb      	ldr	r3, [r7, #8]
 8106c24:	429a      	cmp	r2, r3
 8106c26:	da05      	bge.n	8106c34 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8106c28:	6879      	ldr	r1, [r7, #4]
 8106c2a:	68f8      	ldr	r0, [r7, #12]
 8106c2c:	f7ff ff3f 	bl	8106aae <metal_bitmap_is_bit_set>
 8106c30:	4603      	mov	r3, r0
 8106c32:	e000      	b.n	8106c36 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8106c34:	4b02      	ldr	r3, [pc, #8]	; (8106c40 <rpmsg_is_address_set+0x2c>)
}
 8106c36:	4618      	mov	r0, r3
 8106c38:	3710      	adds	r7, #16
 8106c3a:	46bd      	mov	sp, r7
 8106c3c:	bd80      	pop	{r7, pc}
 8106c3e:	bf00      	nop
 8106c40:	fffff82d 	.word	0xfffff82d

08106c44 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8106c44:	b580      	push	{r7, lr}
 8106c46:	b084      	sub	sp, #16
 8106c48:	af00      	add	r7, sp, #0
 8106c4a:	60f8      	str	r0, [r7, #12]
 8106c4c:	60b9      	str	r1, [r7, #8]
 8106c4e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8106c50:	687a      	ldr	r2, [r7, #4]
 8106c52:	68bb      	ldr	r3, [r7, #8]
 8106c54:	429a      	cmp	r2, r3
 8106c56:	da05      	bge.n	8106c64 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8106c58:	6879      	ldr	r1, [r7, #4]
 8106c5a:	68f8      	ldr	r0, [r7, #12]
 8106c5c:	f7ff ff0b 	bl	8106a76 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8106c60:	2300      	movs	r3, #0
 8106c62:	e000      	b.n	8106c66 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8106c64:	4b02      	ldr	r3, [pc, #8]	; (8106c70 <rpmsg_set_address+0x2c>)
	}
}
 8106c66:	4618      	mov	r0, r3
 8106c68:	3710      	adds	r7, #16
 8106c6a:	46bd      	mov	sp, r7
 8106c6c:	bd80      	pop	{r7, pc}
 8106c6e:	bf00      	nop
 8106c70:	fffff82d 	.word	0xfffff82d

08106c74 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8106c74:	b590      	push	{r4, r7, lr}
 8106c76:	b089      	sub	sp, #36	; 0x24
 8106c78:	af02      	add	r7, sp, #8
 8106c7a:	60f8      	str	r0, [r7, #12]
 8106c7c:	60b9      	str	r1, [r7, #8]
 8106c7e:	607a      	str	r2, [r7, #4]
 8106c80:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8106c82:	68fb      	ldr	r3, [r7, #12]
 8106c84:	2b00      	cmp	r3, #0
 8106c86:	d00a      	beq.n	8106c9e <rpmsg_send_offchannel_raw+0x2a>
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	6a1b      	ldr	r3, [r3, #32]
 8106c8c:	2b00      	cmp	r3, #0
 8106c8e:	d006      	beq.n	8106c9e <rpmsg_send_offchannel_raw+0x2a>
 8106c90:	683b      	ldr	r3, [r7, #0]
 8106c92:	2b00      	cmp	r3, #0
 8106c94:	d003      	beq.n	8106c9e <rpmsg_send_offchannel_raw+0x2a>
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106c9c:	d101      	bne.n	8106ca2 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8106c9e:	4b0d      	ldr	r3, [pc, #52]	; (8106cd4 <rpmsg_send_offchannel_raw+0x60>)
 8106ca0:	e014      	b.n	8106ccc <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8106ca2:	68fb      	ldr	r3, [r7, #12]
 8106ca4:	6a1b      	ldr	r3, [r3, #32]
 8106ca6:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8106ca8:	697b      	ldr	r3, [r7, #20]
 8106caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106cac:	2b00      	cmp	r3, #0
 8106cae:	d00c      	beq.n	8106cca <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8106cb0:	697b      	ldr	r3, [r7, #20]
 8106cb2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8106cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106cb6:	9301      	str	r3, [sp, #4]
 8106cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cba:	9300      	str	r3, [sp, #0]
 8106cbc:	683b      	ldr	r3, [r7, #0]
 8106cbe:	687a      	ldr	r2, [r7, #4]
 8106cc0:	68b9      	ldr	r1, [r7, #8]
 8106cc2:	6978      	ldr	r0, [r7, #20]
 8106cc4:	47a0      	blx	r4
 8106cc6:	4603      	mov	r3, r0
 8106cc8:	e000      	b.n	8106ccc <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8106cca:	4b02      	ldr	r3, [pc, #8]	; (8106cd4 <rpmsg_send_offchannel_raw+0x60>)
}
 8106ccc:	4618      	mov	r0, r3
 8106cce:	371c      	adds	r7, #28
 8106cd0:	46bd      	mov	sp, r7
 8106cd2:	bd90      	pop	{r4, r7, pc}
 8106cd4:	fffff82d 	.word	0xfffff82d

08106cd8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8106cd8:	b580      	push	{r7, lr}
 8106cda:	b090      	sub	sp, #64	; 0x40
 8106cdc:	af02      	add	r7, sp, #8
 8106cde:	6078      	str	r0, [r7, #4]
 8106ce0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8106ce2:	683b      	ldr	r3, [r7, #0]
 8106ce4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106cea:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8106cec:	6879      	ldr	r1, [r7, #4]
 8106cee:	f107 030c 	add.w	r3, r7, #12
 8106cf2:	2220      	movs	r2, #32
 8106cf4:	4618      	mov	r0, r3
 8106cf6:	f004 fc4d 	bl	810b594 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8106cfe:	f107 030c 	add.w	r3, r7, #12
 8106d02:	2201      	movs	r2, #1
 8106d04:	9201      	str	r2, [sp, #4]
 8106d06:	2228      	movs	r2, #40	; 0x28
 8106d08:	9200      	str	r2, [sp, #0]
 8106d0a:	2235      	movs	r2, #53	; 0x35
 8106d0c:	6878      	ldr	r0, [r7, #4]
 8106d0e:	f7ff ffb1 	bl	8106c74 <rpmsg_send_offchannel_raw>
 8106d12:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8106d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d16:	2b00      	cmp	r3, #0
 8106d18:	da01      	bge.n	8106d1e <rpmsg_send_ns_message+0x46>
		return ret;
 8106d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d1c:	e000      	b.n	8106d20 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8106d1e:	2300      	movs	r3, #0
}
 8106d20:	4618      	mov	r0, r3
 8106d22:	3738      	adds	r7, #56	; 0x38
 8106d24:	46bd      	mov	sp, r7
 8106d26:	bd80      	pop	{r7, pc}

08106d28 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8106d28:	b580      	push	{r7, lr}
 8106d2a:	b088      	sub	sp, #32
 8106d2c:	af00      	add	r7, sp, #0
 8106d2e:	60f8      	str	r0, [r7, #12]
 8106d30:	60b9      	str	r1, [r7, #8]
 8106d32:	607a      	str	r2, [r7, #4]
 8106d34:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8106d36:	68fb      	ldr	r3, [r7, #12]
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	61fb      	str	r3, [r7, #28]
 8106d3c:	e04b      	b.n	8106dd6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8106d3e:	2300      	movs	r3, #0
 8106d40:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8106d42:	69fb      	ldr	r3, [r7, #28]
 8106d44:	3b34      	subs	r3, #52	; 0x34
 8106d46:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d4e:	d006      	beq.n	8106d5e <rpmsg_get_endpoint+0x36>
 8106d50:	697b      	ldr	r3, [r7, #20]
 8106d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d54:	687a      	ldr	r2, [r7, #4]
 8106d56:	429a      	cmp	r2, r3
 8106d58:	d101      	bne.n	8106d5e <rpmsg_get_endpoint+0x36>
			return ept;
 8106d5a:	697b      	ldr	r3, [r7, #20]
 8106d5c:	e040      	b.n	8106de0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8106d5e:	697b      	ldr	r3, [r7, #20]
 8106d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d62:	687a      	ldr	r2, [r7, #4]
 8106d64:	429a      	cmp	r2, r3
 8106d66:	d106      	bne.n	8106d76 <rpmsg_get_endpoint+0x4e>
 8106d68:	697b      	ldr	r3, [r7, #20]
 8106d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d6c:	683a      	ldr	r2, [r7, #0]
 8106d6e:	429a      	cmp	r2, r3
 8106d70:	d101      	bne.n	8106d76 <rpmsg_get_endpoint+0x4e>
			return ept;
 8106d72:	697b      	ldr	r3, [r7, #20]
 8106d74:	e034      	b.n	8106de0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8106d76:	68bb      	ldr	r3, [r7, #8]
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	d00c      	beq.n	8106d96 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8106d7c:	697b      	ldr	r3, [r7, #20]
 8106d7e:	2220      	movs	r2, #32
 8106d80:	68b9      	ldr	r1, [r7, #8]
 8106d82:	4618      	mov	r0, r3
 8106d84:	f004 fbf4 	bl	810b570 <strncmp>
 8106d88:	4603      	mov	r3, r0
 8106d8a:	2b00      	cmp	r3, #0
 8106d8c:	bf0c      	ite	eq
 8106d8e:	2301      	moveq	r3, #1
 8106d90:	2300      	movne	r3, #0
 8106d92:	b2db      	uxtb	r3, r3
 8106d94:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8106d96:	68bb      	ldr	r3, [r7, #8]
 8106d98:	2b00      	cmp	r3, #0
 8106d9a:	d018      	beq.n	8106dce <rpmsg_get_endpoint+0xa6>
 8106d9c:	69bb      	ldr	r3, [r7, #24]
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	d015      	beq.n	8106dce <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8106da2:	683b      	ldr	r3, [r7, #0]
 8106da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106da8:	d006      	beq.n	8106db8 <rpmsg_get_endpoint+0x90>
 8106daa:	697b      	ldr	r3, [r7, #20]
 8106dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106dae:	683a      	ldr	r2, [r7, #0]
 8106db0:	429a      	cmp	r2, r3
 8106db2:	d101      	bne.n	8106db8 <rpmsg_get_endpoint+0x90>
			return ept;
 8106db4:	697b      	ldr	r3, [r7, #20]
 8106db6:	e013      	b.n	8106de0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8106db8:	687b      	ldr	r3, [r7, #4]
 8106dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106dbe:	d107      	bne.n	8106dd0 <rpmsg_get_endpoint+0xa8>
 8106dc0:	697b      	ldr	r3, [r7, #20]
 8106dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106dc8:	d102      	bne.n	8106dd0 <rpmsg_get_endpoint+0xa8>
			return ept;
 8106dca:	697b      	ldr	r3, [r7, #20]
 8106dcc:	e008      	b.n	8106de0 <rpmsg_get_endpoint+0xb8>
			continue;
 8106dce:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8106dd0:	69fb      	ldr	r3, [r7, #28]
 8106dd2:	681b      	ldr	r3, [r3, #0]
 8106dd4:	61fb      	str	r3, [r7, #28]
 8106dd6:	68fb      	ldr	r3, [r7, #12]
 8106dd8:	69fa      	ldr	r2, [r7, #28]
 8106dda:	429a      	cmp	r2, r3
 8106ddc:	d1af      	bne.n	8106d3e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8106dde:	2300      	movs	r3, #0
}
 8106de0:	4618      	mov	r0, r3
 8106de2:	3720      	adds	r7, #32
 8106de4:	46bd      	mov	sp, r7
 8106de6:	bd80      	pop	{r7, pc}

08106de8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8106de8:	b580      	push	{r7, lr}
 8106dea:	b084      	sub	sp, #16
 8106dec:	af00      	add	r7, sp, #0
 8106dee:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	2b00      	cmp	r3, #0
 8106df4:	d016      	beq.n	8106e24 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	6a1b      	ldr	r3, [r3, #32]
 8106dfa:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8106dfc:	687b      	ldr	r3, [r7, #4]
 8106dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e04:	d008      	beq.n	8106e18 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8106e06:	68fb      	ldr	r3, [r7, #12]
 8106e08:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8106e10:	461a      	mov	r2, r3
 8106e12:	2180      	movs	r1, #128	; 0x80
 8106e14:	f7ff feec 	bl	8106bf0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	3334      	adds	r3, #52	; 0x34
 8106e1c:	4618      	mov	r0, r3
 8106e1e:	f7ff fe0f 	bl	8106a40 <metal_list_del>
 8106e22:	e000      	b.n	8106e26 <rpmsg_unregister_endpoint+0x3e>
		return;
 8106e24:	bf00      	nop
}
 8106e26:	3710      	adds	r7, #16
 8106e28:	46bd      	mov	sp, r7
 8106e2a:	bd80      	pop	{r7, pc}

08106e2c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8106e2c:	b580      	push	{r7, lr}
 8106e2e:	b082      	sub	sp, #8
 8106e30:	af00      	add	r7, sp, #0
 8106e32:	6078      	str	r0, [r7, #4]
 8106e34:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8106e36:	683b      	ldr	r3, [r7, #0]
 8106e38:	687a      	ldr	r2, [r7, #4]
 8106e3a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8106e3c:	687a      	ldr	r2, [r7, #4]
 8106e3e:	683b      	ldr	r3, [r7, #0]
 8106e40:	3334      	adds	r3, #52	; 0x34
 8106e42:	4619      	mov	r1, r3
 8106e44:	4610      	mov	r0, r2
 8106e46:	f7ff fdee 	bl	8106a26 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8106e4a:	2300      	movs	r3, #0
}
 8106e4c:	4618      	mov	r0, r3
 8106e4e:	3708      	adds	r7, #8
 8106e50:	46bd      	mov	sp, r7
 8106e52:	bd80      	pop	{r7, pc}

08106e54 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8106e54:	b580      	push	{r7, lr}
 8106e56:	b088      	sub	sp, #32
 8106e58:	af02      	add	r7, sp, #8
 8106e5a:	60f8      	str	r0, [r7, #12]
 8106e5c:	60b9      	str	r1, [r7, #8]
 8106e5e:	607a      	str	r2, [r7, #4]
 8106e60:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8106e62:	683b      	ldr	r3, [r7, #0]
 8106e64:	613b      	str	r3, [r7, #16]

	if (!ept)
 8106e66:	68fb      	ldr	r3, [r7, #12]
 8106e68:	2b00      	cmp	r3, #0
 8106e6a:	d101      	bne.n	8106e70 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8106e6c:	4b37      	ldr	r3, [pc, #220]	; (8106f4c <rpmsg_create_ept+0xf8>)
 8106e6e:	e068      	b.n	8106f42 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8106e70:	68bb      	ldr	r3, [r7, #8]
 8106e72:	3358      	adds	r3, #88	; 0x58
 8106e74:	4618      	mov	r0, r3
 8106e76:	f7ff fda6 	bl	81069c6 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8106e7a:	683b      	ldr	r3, [r7, #0]
 8106e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e80:	d018      	beq.n	8106eb4 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8106e82:	68bb      	ldr	r3, [r7, #8]
 8106e84:	3348      	adds	r3, #72	; 0x48
 8106e86:	683a      	ldr	r2, [r7, #0]
 8106e88:	2180      	movs	r1, #128	; 0x80
 8106e8a:	4618      	mov	r0, r3
 8106e8c:	f7ff fec2 	bl	8106c14 <rpmsg_is_address_set>
 8106e90:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8106e92:	697b      	ldr	r3, [r7, #20]
 8106e94:	2b00      	cmp	r3, #0
 8106e96:	d107      	bne.n	8106ea8 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8106e98:	68bb      	ldr	r3, [r7, #8]
 8106e9a:	3348      	adds	r3, #72	; 0x48
 8106e9c:	683a      	ldr	r2, [r7, #0]
 8106e9e:	2180      	movs	r1, #128	; 0x80
 8106ea0:	4618      	mov	r0, r3
 8106ea2:	f7ff fecf 	bl	8106c44 <rpmsg_set_address>
 8106ea6:	e00c      	b.n	8106ec2 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8106ea8:	697b      	ldr	r3, [r7, #20]
 8106eaa:	2b00      	cmp	r3, #0
 8106eac:	dd40      	ble.n	8106f30 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8106eae:	2300      	movs	r3, #0
 8106eb0:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8106eb2:	e040      	b.n	8106f36 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8106eb4:	68bb      	ldr	r3, [r7, #8]
 8106eb6:	3348      	adds	r3, #72	; 0x48
 8106eb8:	2180      	movs	r1, #128	; 0x80
 8106eba:	4618      	mov	r0, r3
 8106ebc:	f7ff fe79 	bl	8106bb2 <rpmsg_get_address>
 8106ec0:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8106ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ec4:	9301      	str	r3, [sp, #4]
 8106ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106ec8:	9300      	str	r3, [sp, #0]
 8106eca:	6a3b      	ldr	r3, [r7, #32]
 8106ecc:	693a      	ldr	r2, [r7, #16]
 8106ece:	6879      	ldr	r1, [r7, #4]
 8106ed0:	68f8      	ldr	r0, [r7, #12]
 8106ed2:	f7ff fe51 	bl	8106b78 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8106ed6:	68f9      	ldr	r1, [r7, #12]
 8106ed8:	68b8      	ldr	r0, [r7, #8]
 8106eda:	f7ff ffa7 	bl	8106e2c <rpmsg_register_endpoint>
 8106ede:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8106ee0:	697b      	ldr	r3, [r7, #20]
 8106ee2:	2b00      	cmp	r3, #0
 8106ee4:	da06      	bge.n	8106ef4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8106ee6:	68bb      	ldr	r3, [r7, #8]
 8106ee8:	3348      	adds	r3, #72	; 0x48
 8106eea:	693a      	ldr	r2, [r7, #16]
 8106eec:	2180      	movs	r1, #128	; 0x80
 8106eee:	4618      	mov	r0, r3
 8106ef0:	f7ff fe7e 	bl	8106bf0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8106ef4:	697b      	ldr	r3, [r7, #20]
 8106ef6:	2b00      	cmp	r3, #0
 8106ef8:	d11c      	bne.n	8106f34 <rpmsg_create_ept+0xe0>
 8106efa:	68fb      	ldr	r3, [r7, #12]
 8106efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f02:	d117      	bne.n	8106f34 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8106f04:	68bb      	ldr	r3, [r7, #8]
 8106f06:	3358      	adds	r3, #88	; 0x58
 8106f08:	4618      	mov	r0, r3
 8106f0a:	f7ff fd67 	bl	81069dc <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8106f0e:	2100      	movs	r1, #0
 8106f10:	68f8      	ldr	r0, [r7, #12]
 8106f12:	f7ff fee1 	bl	8106cd8 <rpmsg_send_ns_message>
 8106f16:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8106f18:	68bb      	ldr	r3, [r7, #8]
 8106f1a:	3358      	adds	r3, #88	; 0x58
 8106f1c:	4618      	mov	r0, r3
 8106f1e:	f7ff fd52 	bl	81069c6 <metal_mutex_acquire>
		if (status)
 8106f22:	697b      	ldr	r3, [r7, #20]
 8106f24:	2b00      	cmp	r3, #0
 8106f26:	d005      	beq.n	8106f34 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8106f28:	68f8      	ldr	r0, [r7, #12]
 8106f2a:	f7ff ff5d 	bl	8106de8 <rpmsg_unregister_endpoint>
 8106f2e:	e002      	b.n	8106f36 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8106f30:	bf00      	nop
 8106f32:	e000      	b.n	8106f36 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8106f34:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8106f36:	68bb      	ldr	r3, [r7, #8]
 8106f38:	3358      	adds	r3, #88	; 0x58
 8106f3a:	4618      	mov	r0, r3
 8106f3c:	f7ff fd4e 	bl	81069dc <metal_mutex_release>
	return status;
 8106f40:	697b      	ldr	r3, [r7, #20]
}
 8106f42:	4618      	mov	r0, r3
 8106f44:	3718      	adds	r7, #24
 8106f46:	46bd      	mov	sp, r7
 8106f48:	bd80      	pop	{r7, pc}
 8106f4a:	bf00      	nop
 8106f4c:	fffff82d 	.word	0xfffff82d

08106f50 <__metal_cache_invalidate>:
{
 8106f50:	b580      	push	{r7, lr}
 8106f52:	b082      	sub	sp, #8
 8106f54:	af00      	add	r7, sp, #0
 8106f56:	6078      	str	r0, [r7, #4]
 8106f58:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8106f5a:	6839      	ldr	r1, [r7, #0]
 8106f5c:	6878      	ldr	r0, [r7, #4]
 8106f5e:	f000 fc56 	bl	810780e <metal_machine_cache_invalidate>
}
 8106f62:	bf00      	nop
 8106f64:	3708      	adds	r7, #8
 8106f66:	46bd      	mov	sp, r7
 8106f68:	bd80      	pop	{r7, pc}

08106f6a <metal_cache_invalidate>:
{
 8106f6a:	b580      	push	{r7, lr}
 8106f6c:	b082      	sub	sp, #8
 8106f6e:	af00      	add	r7, sp, #0
 8106f70:	6078      	str	r0, [r7, #4]
 8106f72:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8106f74:	6839      	ldr	r1, [r7, #0]
 8106f76:	6878      	ldr	r0, [r7, #4]
 8106f78:	f7ff ffea 	bl	8106f50 <__metal_cache_invalidate>
}
 8106f7c:	bf00      	nop
 8106f7e:	3708      	adds	r7, #8
 8106f80:	46bd      	mov	sp, r7
 8106f82:	bd80      	pop	{r7, pc}

08106f84 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8106f84:	b480      	push	{r7}
 8106f86:	b083      	sub	sp, #12
 8106f88:	af00      	add	r7, sp, #0
 8106f8a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8106f8c:	2300      	movs	r3, #0
}
 8106f8e:	4618      	mov	r0, r3
 8106f90:	370c      	adds	r7, #12
 8106f92:	46bd      	mov	sp, r7
 8106f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f98:	4770      	bx	lr

08106f9a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8106f9a:	b580      	push	{r7, lr}
 8106f9c:	b082      	sub	sp, #8
 8106f9e:	af00      	add	r7, sp, #0
 8106fa0:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8106fa2:	6878      	ldr	r0, [r7, #4]
 8106fa4:	f7ff ffee 	bl	8106f84 <__metal_sleep_usec>
 8106fa8:	4603      	mov	r3, r0
}
 8106faa:	4618      	mov	r0, r3
 8106fac:	3708      	adds	r7, #8
 8106fae:	46bd      	mov	sp, r7
 8106fb0:	bd80      	pop	{r7, pc}

08106fb2 <metal_list_init>:
{
 8106fb2:	b480      	push	{r7}
 8106fb4:	b083      	sub	sp, #12
 8106fb6:	af00      	add	r7, sp, #0
 8106fb8:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	687a      	ldr	r2, [r7, #4]
 8106fbe:	605a      	str	r2, [r3, #4]
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	685a      	ldr	r2, [r3, #4]
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	601a      	str	r2, [r3, #0]
}
 8106fc8:	bf00      	nop
 8106fca:	370c      	adds	r7, #12
 8106fcc:	46bd      	mov	sp, r7
 8106fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fd2:	4770      	bx	lr

08106fd4 <metal_io_virt_to_offset>:
{
 8106fd4:	b480      	push	{r7}
 8106fd6:	b085      	sub	sp, #20
 8106fd8:	af00      	add	r7, sp, #0
 8106fda:	6078      	str	r0, [r7, #4]
 8106fdc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	681b      	ldr	r3, [r3, #0]
 8106fe2:	683a      	ldr	r2, [r7, #0]
 8106fe4:	1ad3      	subs	r3, r2, r3
 8106fe6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	689b      	ldr	r3, [r3, #8]
 8106fec:	68fa      	ldr	r2, [r7, #12]
 8106fee:	429a      	cmp	r2, r3
 8106ff0:	d201      	bcs.n	8106ff6 <metal_io_virt_to_offset+0x22>
 8106ff2:	68fb      	ldr	r3, [r7, #12]
 8106ff4:	e001      	b.n	8106ffa <metal_io_virt_to_offset+0x26>
 8106ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106ffa:	4618      	mov	r0, r3
 8106ffc:	3714      	adds	r7, #20
 8106ffe:	46bd      	mov	sp, r7
 8107000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107004:	4770      	bx	lr

08107006 <__metal_mutex_init>:
{
 8107006:	b480      	push	{r7}
 8107008:	b085      	sub	sp, #20
 810700a:	af00      	add	r7, sp, #0
 810700c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	60fb      	str	r3, [r7, #12]
 8107012:	2300      	movs	r3, #0
 8107014:	60bb      	str	r3, [r7, #8]
 8107016:	68bb      	ldr	r3, [r7, #8]
 8107018:	461a      	mov	r2, r3
 810701a:	68fb      	ldr	r3, [r7, #12]
 810701c:	f3bf 8f5b 	dmb	ish
 8107020:	601a      	str	r2, [r3, #0]
 8107022:	f3bf 8f5b 	dmb	ish
}
 8107026:	bf00      	nop
 8107028:	3714      	adds	r7, #20
 810702a:	46bd      	mov	sp, r7
 810702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107030:	4770      	bx	lr

08107032 <__metal_mutex_acquire>:
{
 8107032:	b480      	push	{r7}
 8107034:	b083      	sub	sp, #12
 8107036:	af00      	add	r7, sp, #0
 8107038:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 810703a:	bf00      	nop
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	2201      	movs	r2, #1
 8107040:	4611      	mov	r1, r2
 8107042:	f3bf 8f5b 	dmb	ish
 8107046:	e8d3 2f4f 	ldrexb	r2, [r3]
 810704a:	e8c3 1f40 	strexb	r0, r1, [r3]
 810704e:	2800      	cmp	r0, #0
 8107050:	d1f9      	bne.n	8107046 <__metal_mutex_acquire+0x14>
 8107052:	f3bf 8f5b 	dmb	ish
 8107056:	b2d3      	uxtb	r3, r2
 8107058:	2b00      	cmp	r3, #0
 810705a:	d1ef      	bne.n	810703c <__metal_mutex_acquire+0xa>
}
 810705c:	bf00      	nop
 810705e:	bf00      	nop
 8107060:	370c      	adds	r7, #12
 8107062:	46bd      	mov	sp, r7
 8107064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107068:	4770      	bx	lr

0810706a <__metal_mutex_release>:
{
 810706a:	b480      	push	{r7}
 810706c:	b083      	sub	sp, #12
 810706e:	af00      	add	r7, sp, #0
 8107070:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	f3bf 8f5b 	dmb	ish
 8107078:	2200      	movs	r2, #0
 810707a:	701a      	strb	r2, [r3, #0]
 810707c:	f3bf 8f5b 	dmb	ish
}
 8107080:	bf00      	nop
 8107082:	370c      	adds	r7, #12
 8107084:	46bd      	mov	sp, r7
 8107086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708a:	4770      	bx	lr

0810708c <metal_mutex_init>:
{
 810708c:	b580      	push	{r7, lr}
 810708e:	b082      	sub	sp, #8
 8107090:	af00      	add	r7, sp, #0
 8107092:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8107094:	6878      	ldr	r0, [r7, #4]
 8107096:	f7ff ffb6 	bl	8107006 <__metal_mutex_init>
}
 810709a:	bf00      	nop
 810709c:	3708      	adds	r7, #8
 810709e:	46bd      	mov	sp, r7
 81070a0:	bd80      	pop	{r7, pc}

081070a2 <metal_mutex_acquire>:
{
 81070a2:	b580      	push	{r7, lr}
 81070a4:	b082      	sub	sp, #8
 81070a6:	af00      	add	r7, sp, #0
 81070a8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81070aa:	6878      	ldr	r0, [r7, #4]
 81070ac:	f7ff ffc1 	bl	8107032 <__metal_mutex_acquire>
}
 81070b0:	bf00      	nop
 81070b2:	3708      	adds	r7, #8
 81070b4:	46bd      	mov	sp, r7
 81070b6:	bd80      	pop	{r7, pc}

081070b8 <metal_mutex_release>:
{
 81070b8:	b580      	push	{r7, lr}
 81070ba:	b082      	sub	sp, #8
 81070bc:	af00      	add	r7, sp, #0
 81070be:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81070c0:	6878      	ldr	r0, [r7, #4]
 81070c2:	f7ff ffd2 	bl	810706a <__metal_mutex_release>
}
 81070c6:	bf00      	nop
 81070c8:	3708      	adds	r7, #8
 81070ca:	46bd      	mov	sp, r7
 81070cc:	bd80      	pop	{r7, pc}

081070ce <rpmsg_init_ept>:
{
 81070ce:	b580      	push	{r7, lr}
 81070d0:	b084      	sub	sp, #16
 81070d2:	af00      	add	r7, sp, #0
 81070d4:	60f8      	str	r0, [r7, #12]
 81070d6:	60b9      	str	r1, [r7, #8]
 81070d8:	607a      	str	r2, [r7, #4]
 81070da:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81070dc:	68fb      	ldr	r3, [r7, #12]
 81070de:	2220      	movs	r2, #32
 81070e0:	68b9      	ldr	r1, [r7, #8]
 81070e2:	4618      	mov	r0, r3
 81070e4:	f004 fa56 	bl	810b594 <strncpy>
	ept->addr = src;
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	687a      	ldr	r2, [r7, #4]
 81070ec:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	683a      	ldr	r2, [r7, #0]
 81070f2:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	69ba      	ldr	r2, [r7, #24]
 81070f8:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81070fa:	68fb      	ldr	r3, [r7, #12]
 81070fc:	69fa      	ldr	r2, [r7, #28]
 81070fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8107100:	bf00      	nop
 8107102:	3710      	adds	r7, #16
 8107104:	46bd      	mov	sp, r7
 8107106:	bd80      	pop	{r7, pc}

08107108 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8107108:	b480      	push	{r7}
 810710a:	b083      	sub	sp, #12
 810710c:	af00      	add	r7, sp, #0
 810710e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107114:	699b      	ldr	r3, [r3, #24]
}
 8107116:	4618      	mov	r0, r3
 8107118:	370c      	adds	r7, #12
 810711a:	46bd      	mov	sp, r7
 810711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107120:	4770      	bx	lr

08107122 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8107122:	b580      	push	{r7, lr}
 8107124:	b082      	sub	sp, #8
 8107126:	af00      	add	r7, sp, #0
 8107128:	6078      	str	r0, [r7, #4]
 810712a:	460b      	mov	r3, r1
 810712c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107132:	6a1b      	ldr	r3, [r3, #32]
 8107134:	685b      	ldr	r3, [r3, #4]
 8107136:	687a      	ldr	r2, [r7, #4]
 8107138:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810713a:	78f9      	ldrb	r1, [r7, #3]
 810713c:	4610      	mov	r0, r2
 810713e:	4798      	blx	r3
}
 8107140:	bf00      	nop
 8107142:	3708      	adds	r7, #8
 8107144:	46bd      	mov	sp, r7
 8107146:	bd80      	pop	{r7, pc}

08107148 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8107148:	b580      	push	{r7, lr}
 810714a:	b082      	sub	sp, #8
 810714c:	af00      	add	r7, sp, #0
 810714e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107154:	6a1b      	ldr	r3, [r3, #32]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	687a      	ldr	r2, [r7, #4]
 810715a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810715c:	4610      	mov	r0, r2
 810715e:	4798      	blx	r3
 8107160:	4603      	mov	r3, r0
}
 8107162:	4618      	mov	r0, r3
 8107164:	3708      	adds	r7, #8
 8107166:	46bd      	mov	sp, r7
 8107168:	bd80      	pop	{r7, pc}

0810716a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 810716a:	b580      	push	{r7, lr}
 810716c:	b082      	sub	sp, #8
 810716e:	af00      	add	r7, sp, #0
 8107170:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107176:	6a1b      	ldr	r3, [r3, #32]
 8107178:	689b      	ldr	r3, [r3, #8]
 810717a:	687a      	ldr	r2, [r7, #4]
 810717c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810717e:	4610      	mov	r0, r2
 8107180:	4798      	blx	r3
 8107182:	4603      	mov	r3, r0
}
 8107184:	4618      	mov	r0, r3
 8107186:	3708      	adds	r7, #8
 8107188:	46bd      	mov	sp, r7
 810718a:	bd80      	pop	{r7, pc}

0810718c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 810718c:	b580      	push	{r7, lr}
 810718e:	b086      	sub	sp, #24
 8107190:	af02      	add	r7, sp, #8
 8107192:	60f8      	str	r0, [r7, #12]
 8107194:	60b9      	str	r1, [r7, #8]
 8107196:	607a      	str	r2, [r7, #4]
 8107198:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 810719a:	68fb      	ldr	r3, [r7, #12]
 810719c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 810719e:	68b9      	ldr	r1, [r7, #8]
 81071a0:	69bb      	ldr	r3, [r7, #24]
 81071a2:	9300      	str	r3, [sp, #0]
 81071a4:	683b      	ldr	r3, [r7, #0]
 81071a6:	687a      	ldr	r2, [r7, #4]
 81071a8:	f000 fb4a 	bl	8107840 <virtio_create_virtqueues>
 81071ac:	4603      	mov	r3, r0
					callbacks);
}
 81071ae:	4618      	mov	r0, r3
 81071b0:	3710      	adds	r7, #16
 81071b2:	46bd      	mov	sp, r7
 81071b4:	bd80      	pop	{r7, pc}

081071b6 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 81071b6:	b580      	push	{r7, lr}
 81071b8:	b082      	sub	sp, #8
 81071ba:	af00      	add	r7, sp, #0
 81071bc:	6078      	str	r0, [r7, #4]
 81071be:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 81071c0:	f04f 33ff 	mov.w	r3, #4294967295
 81071c4:	683a      	ldr	r2, [r7, #0]
 81071c6:	2100      	movs	r1, #0
 81071c8:	6878      	ldr	r0, [r7, #4]
 81071ca:	f7ff fdad 	bl	8106d28 <rpmsg_get_endpoint>
 81071ce:	4603      	mov	r3, r0
}
 81071d0:	4618      	mov	r0, r3
 81071d2:	3708      	adds	r7, #8
 81071d4:	46bd      	mov	sp, r7
 81071d6:	bd80      	pop	{r7, pc}

081071d8 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81071d8:	b480      	push	{r7}
 81071da:	b085      	sub	sp, #20
 81071dc:	af00      	add	r7, sp, #0
 81071de:	60f8      	str	r0, [r7, #12]
 81071e0:	60b9      	str	r1, [r7, #8]
 81071e2:	607a      	str	r2, [r7, #4]
	if (!shpool)
 81071e4:	68fb      	ldr	r3, [r7, #12]
 81071e6:	2b00      	cmp	r3, #0
 81071e8:	d01d      	beq.n	8107226 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 81071ea:	68fb      	ldr	r3, [r7, #12]
 81071ec:	68ba      	ldr	r2, [r7, #8]
 81071ee:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 81071f0:	687b      	ldr	r3, [r7, #4]
 81071f2:	f003 0303 	and.w	r3, r3, #3
 81071f6:	2b00      	cmp	r3, #0
 81071f8:	d004      	beq.n	8107204 <rpmsg_virtio_init_shm_pool+0x2c>
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	f023 0303 	bic.w	r3, r3, #3
 8107200:	3304      	adds	r3, #4
 8107202:	e000      	b.n	8107206 <rpmsg_virtio_init_shm_pool+0x2e>
 8107204:	687b      	ldr	r3, [r7, #4]
 8107206:	68fa      	ldr	r2, [r7, #12]
 8107208:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	f003 0303 	and.w	r3, r3, #3
 8107210:	2b00      	cmp	r3, #0
 8107212:	d004      	beq.n	810721e <rpmsg_virtio_init_shm_pool+0x46>
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	f023 0303 	bic.w	r3, r3, #3
 810721a:	3304      	adds	r3, #4
 810721c:	e000      	b.n	8107220 <rpmsg_virtio_init_shm_pool+0x48>
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	68fa      	ldr	r2, [r7, #12]
 8107222:	6053      	str	r3, [r2, #4]
 8107224:	e000      	b.n	8107228 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8107226:	bf00      	nop
}
 8107228:	3714      	adds	r7, #20
 810722a:	46bd      	mov	sp, r7
 810722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107230:	4770      	bx	lr

08107232 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8107232:	b580      	push	{r7, lr}
 8107234:	b086      	sub	sp, #24
 8107236:	af00      	add	r7, sp, #0
 8107238:	60f8      	str	r0, [r7, #12]
 810723a:	60b9      	str	r1, [r7, #8]
 810723c:	607a      	str	r2, [r7, #4]
 810723e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107240:	68f8      	ldr	r0, [r7, #12]
 8107242:	f7ff ff61 	bl	8107108 <rpmsg_virtio_get_role>
 8107246:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107248:	697b      	ldr	r3, [r7, #20]
 810724a:	2b01      	cmp	r3, #1
 810724c:	d106      	bne.n	810725c <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 810724e:	68fb      	ldr	r3, [r7, #12]
 8107250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107252:	8879      	ldrh	r1, [r7, #2]
 8107254:	687a      	ldr	r2, [r7, #4]
 8107256:	4618      	mov	r0, r3
 8107258:	f000 fc9c 	bl	8107b94 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 810725c:	bf00      	nop
 810725e:	3718      	adds	r7, #24
 8107260:	46bd      	mov	sp, r7
 8107262:	bd80      	pop	{r7, pc}

08107264 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8107264:	b580      	push	{r7, lr}
 8107266:	b086      	sub	sp, #24
 8107268:	af00      	add	r7, sp, #0
 810726a:	60f8      	str	r0, [r7, #12]
 810726c:	60b9      	str	r1, [r7, #8]
 810726e:	607a      	str	r2, [r7, #4]
 8107270:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107272:	68f8      	ldr	r0, [r7, #12]
 8107274:	f7ff ff48 	bl	8107108 <rpmsg_virtio_get_role>
 8107278:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810727a:	697b      	ldr	r3, [r7, #20]
 810727c:	2b01      	cmp	r3, #1
 810727e:	d108      	bne.n	8107292 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8107280:	68fb      	ldr	r3, [r7, #12]
 8107282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107284:	8879      	ldrh	r1, [r7, #2]
 8107286:	687a      	ldr	r2, [r7, #4]
 8107288:	4618      	mov	r0, r3
 810728a:	f000 fc83 	bl	8107b94 <virtqueue_add_consumed_buffer>
 810728e:	4603      	mov	r3, r0
 8107290:	e000      	b.n	8107294 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8107292:	2300      	movs	r3, #0
}
 8107294:	4618      	mov	r0, r3
 8107296:	3718      	adds	r7, #24
 8107298:	46bd      	mov	sp, r7
 810729a:	bd80      	pop	{r7, pc}

0810729c <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 810729c:	b580      	push	{r7, lr}
 810729e:	b086      	sub	sp, #24
 81072a0:	af00      	add	r7, sp, #0
 81072a2:	60f8      	str	r0, [r7, #12]
 81072a4:	60b9      	str	r1, [r7, #8]
 81072a6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81072a8:	68f8      	ldr	r0, [r7, #12]
 81072aa:	f7ff ff2d 	bl	8107108 <rpmsg_virtio_get_role>
 81072ae:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81072b0:	2300      	movs	r3, #0
 81072b2:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81072b4:	693b      	ldr	r3, [r7, #16]
 81072b6:	2b01      	cmp	r3, #1
 81072b8:	d107      	bne.n	81072ca <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 81072ba:	68fb      	ldr	r3, [r7, #12]
 81072bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81072be:	68ba      	ldr	r2, [r7, #8]
 81072c0:	6879      	ldr	r1, [r7, #4]
 81072c2:	4618      	mov	r0, r3
 81072c4:	f000 fc20 	bl	8107b08 <virtqueue_get_available_buffer>
 81072c8:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 81072ca:	697b      	ldr	r3, [r7, #20]
}
 81072cc:	4618      	mov	r0, r3
 81072ce:	3718      	adds	r7, #24
 81072d0:	46bd      	mov	sp, r7
 81072d2:	bd80      	pop	{r7, pc}

081072d4 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81072d4:	b580      	push	{r7, lr}
 81072d6:	b086      	sub	sp, #24
 81072d8:	af00      	add	r7, sp, #0
 81072da:	60f8      	str	r0, [r7, #12]
 81072dc:	60b9      	str	r1, [r7, #8]
 81072de:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81072e0:	68f8      	ldr	r0, [r7, #12]
 81072e2:	f7ff ff11 	bl	8107108 <rpmsg_virtio_get_role>
 81072e6:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81072e8:	2300      	movs	r3, #0
 81072ea:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81072ec:	693b      	ldr	r3, [r7, #16]
 81072ee:	2b01      	cmp	r3, #1
 81072f0:	d107      	bne.n	8107302 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 81072f2:	68fb      	ldr	r3, [r7, #12]
 81072f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81072f6:	68ba      	ldr	r2, [r7, #8]
 81072f8:	6879      	ldr	r1, [r7, #4]
 81072fa:	4618      	mov	r0, r3
 81072fc:	f000 fc04 	bl	8107b08 <virtqueue_get_available_buffer>
 8107300:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8107302:	697b      	ldr	r3, [r7, #20]
 8107304:	2b00      	cmp	r3, #0
 8107306:	d005      	beq.n	8107314 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8107308:	68bb      	ldr	r3, [r7, #8]
 810730a:	681b      	ldr	r3, [r3, #0]
 810730c:	4619      	mov	r1, r3
 810730e:	6978      	ldr	r0, [r7, #20]
 8107310:	f7ff fe2b 	bl	8106f6a <metal_cache_invalidate>
	}

	return data;
 8107314:	697b      	ldr	r3, [r7, #20]
}
 8107316:	4618      	mov	r0, r3
 8107318:	3718      	adds	r7, #24
 810731a:	46bd      	mov	sp, r7
 810731c:	bd80      	pop	{r7, pc}

0810731e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 810731e:	b580      	push	{r7, lr}
 8107320:	b084      	sub	sp, #16
 8107322:	af00      	add	r7, sp, #0
 8107324:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8107326:	6878      	ldr	r0, [r7, #4]
 8107328:	f7ff ff0e 	bl	8107148 <rpmsg_virtio_get_status>
 810732c:	4603      	mov	r3, r0
 810732e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8107330:	7bfb      	ldrb	r3, [r7, #15]
 8107332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107336:	2b00      	cmp	r3, #0
 8107338:	d004      	beq.n	8107344 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 810733a:	2100      	movs	r1, #0
 810733c:	6878      	ldr	r0, [r7, #4]
 810733e:	f7ff fef0 	bl	8107122 <rpmsg_virtio_set_status>
 8107342:	e7f0      	b.n	8107326 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8107344:	7bfb      	ldrb	r3, [r7, #15]
 8107346:	f003 0304 	and.w	r3, r3, #4
 810734a:	2b00      	cmp	r3, #0
 810734c:	d0eb      	beq.n	8107326 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 810734e:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8107350:	4618      	mov	r0, r3
 8107352:	3710      	adds	r7, #16
 8107354:	46bd      	mov	sp, r7
 8107356:	bd80      	pop	{r7, pc}

08107358 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8107358:	b580      	push	{r7, lr}
 810735a:	b084      	sub	sp, #16
 810735c:	af00      	add	r7, sp, #0
 810735e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107360:	6878      	ldr	r0, [r7, #4]
 8107362:	f7ff fed1 	bl	8107108 <rpmsg_virtio_get_role>
 8107366:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8107368:	2300      	movs	r3, #0
 810736a:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810736c:	68bb      	ldr	r3, [r7, #8]
 810736e:	2b01      	cmp	r3, #1
 8107370:	d107      	bne.n	8107382 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107376:	4618      	mov	r0, r3
 8107378:	f000 fc86 	bl	8107c88 <virtqueue_get_desc_size>
 810737c:	4603      	mov	r3, r0
 810737e:	3b10      	subs	r3, #16
		length =
 8107380:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8107382:	68fb      	ldr	r3, [r7, #12]
}
 8107384:	4618      	mov	r0, r3
 8107386:	3710      	adds	r7, #16
 8107388:	46bd      	mov	sp, r7
 810738a:	bd80      	pop	{r7, pc}

0810738c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 810738c:	b580      	push	{r7, lr}
 810738e:	b090      	sub	sp, #64	; 0x40
 8107390:	af00      	add	r7, sp, #0
 8107392:	60f8      	str	r0, [r7, #12]
 8107394:	60b9      	str	r1, [r7, #8]
 8107396:	607a      	str	r2, [r7, #4]
 8107398:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 810739a:	2300      	movs	r3, #0
 810739c:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 810739e:	2300      	movs	r3, #0
 81073a0:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 81073a2:	68fb      	ldr	r3, [r7, #12]
 81073a4:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 81073a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81073a8:	f7ff fece 	bl	8107148 <rpmsg_virtio_get_status>
 81073ac:	4603      	mov	r3, r0
 81073ae:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 81073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81073b2:	f003 0304 	and.w	r3, r3, #4
 81073b6:	2b00      	cmp	r3, #0
 81073b8:	d101      	bne.n	81073be <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 81073ba:	4b45      	ldr	r3, [pc, #276]	; (81074d0 <rpmsg_virtio_send_offchannel_raw+0x144>)
 81073bc:	e083      	b.n	81074c6 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 81073be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d003      	beq.n	81073cc <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 81073c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 81073c8:	63bb      	str	r3, [r7, #56]	; 0x38
 81073ca:	e001      	b.n	81073d0 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 81073cc:	2300      	movs	r3, #0
 81073ce:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	3358      	adds	r3, #88	; 0x58
 81073d4:	4618      	mov	r0, r3
 81073d6:	f7ff fe64 	bl	81070a2 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 81073da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81073dc:	f7ff ffbc 	bl	8107358 <_rpmsg_virtio_get_buffer_size>
 81073e0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 81073e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81073e6:	429a      	cmp	r2, r3
 81073e8:	dc08      	bgt.n	81073fc <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81073ea:	f107 0216 	add.w	r2, r7, #22
 81073ee:	f107 0310 	add.w	r3, r7, #16
 81073f2:	4619      	mov	r1, r3
 81073f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81073f6:	f7ff ff51 	bl	810729c <rpmsg_virtio_get_tx_buffer>
 81073fa:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 81073fc:	68fb      	ldr	r3, [r7, #12]
 81073fe:	3358      	adds	r3, #88	; 0x58
 8107400:	4618      	mov	r0, r3
 8107402:	f7ff fe59 	bl	81070b8 <metal_mutex_release>
		if (buffer || !tick_count)
 8107406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107408:	2b00      	cmp	r3, #0
 810740a:	d10e      	bne.n	810742a <rpmsg_virtio_send_offchannel_raw+0x9e>
 810740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810740e:	2b00      	cmp	r3, #0
 8107410:	d00b      	beq.n	810742a <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8107412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107414:	2b00      	cmp	r3, #0
 8107416:	d001      	beq.n	810741c <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8107418:	4b2e      	ldr	r3, [pc, #184]	; (81074d4 <rpmsg_virtio_send_offchannel_raw+0x148>)
 810741a:	e054      	b.n	81074c6 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 810741c:	200a      	movs	r0, #10
 810741e:	f7ff fdbc 	bl	8106f9a <metal_sleep_usec>
		tick_count--;
 8107422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107424:	3b01      	subs	r3, #1
 8107426:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8107428:	e7d2      	b.n	81073d0 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 810742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810742c:	2b00      	cmp	r3, #0
 810742e:	d101      	bne.n	8107434 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8107430:	4b29      	ldr	r3, [pc, #164]	; (81074d8 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8107432:	e048      	b.n	81074c6 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8107434:	687b      	ldr	r3, [r7, #4]
 8107436:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8107438:	68bb      	ldr	r3, [r7, #8]
 810743a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 810743c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810743e:	b29b      	uxth	r3, r3
 8107440:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8107442:	2300      	movs	r3, #0
 8107444:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8107446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810744a:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 810744c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810744e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107450:	f7ff fdc0 	bl	8106fd4 <metal_io_virt_to_offset>
 8107454:	4601      	mov	r1, r0
 8107456:	f107 0218 	add.w	r2, r7, #24
 810745a:	2310      	movs	r3, #16
 810745c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810745e:	f7fe ff5a 	bl	8106316 <metal_io_block_write>
 8107462:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8107464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107466:	2b10      	cmp	r3, #16
 8107468:	d000      	beq.n	810746c <rpmsg_virtio_send_offchannel_raw+0xe0>
 810746a:	e7fe      	b.n	810746a <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 810746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810746e:	3310      	adds	r3, #16
 8107470:	4619      	mov	r1, r3
 8107472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107474:	f7ff fdae 	bl	8106fd4 <metal_io_virt_to_offset>
 8107478:	4601      	mov	r1, r0
 810747a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810747c:	683a      	ldr	r2, [r7, #0]
 810747e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107480:	f7fe ff49 	bl	8106316 <metal_io_block_write>
 8107484:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8107486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810748a:	429a      	cmp	r2, r3
 810748c:	d000      	beq.n	8107490 <rpmsg_virtio_send_offchannel_raw+0x104>
 810748e:	e7fe      	b.n	810748e <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8107490:	68fb      	ldr	r3, [r7, #12]
 8107492:	3358      	adds	r3, #88	; 0x58
 8107494:	4618      	mov	r0, r3
 8107496:	f7ff fe04 	bl	81070a2 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 810749a:	693a      	ldr	r2, [r7, #16]
 810749c:	8afb      	ldrh	r3, [r7, #22]
 810749e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81074a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81074a2:	f7ff fedf 	bl	8107264 <rpmsg_virtio_enqueue_buffer>
 81074a6:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 81074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81074aa:	2b00      	cmp	r3, #0
 81074ac:	d000      	beq.n	81074b0 <rpmsg_virtio_send_offchannel_raw+0x124>
 81074ae:	e7fe      	b.n	81074ae <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 81074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81074b4:	4618      	mov	r0, r3
 81074b6:	f000 fbd1 	bl	8107c5c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 81074ba:	68fb      	ldr	r3, [r7, #12]
 81074bc:	3358      	adds	r3, #88	; 0x58
 81074be:	4618      	mov	r0, r3
 81074c0:	f7ff fdfa 	bl	81070b8 <metal_mutex_release>

	return size;
 81074c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 81074c6:	4618      	mov	r0, r3
 81074c8:	3740      	adds	r7, #64	; 0x40
 81074ca:	46bd      	mov	sp, r7
 81074cc:	bd80      	pop	{r7, pc}
 81074ce:	bf00      	nop
 81074d0:	fffff82c 	.word	0xfffff82c
 81074d4:	fffff82b 	.word	0xfffff82b
 81074d8:	fffff82e 	.word	0xfffff82e

081074dc <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 81074dc:	b480      	push	{r7}
 81074de:	b083      	sub	sp, #12
 81074e0:	af00      	add	r7, sp, #0
 81074e2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81074e4:	bf00      	nop
 81074e6:	370c      	adds	r7, #12
 81074e8:	46bd      	mov	sp, r7
 81074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ee:	4770      	bx	lr

081074f0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 81074f0:	b590      	push	{r4, r7, lr}
 81074f2:	b08d      	sub	sp, #52	; 0x34
 81074f4:	af02      	add	r7, sp, #8
 81074f6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 81074fe:	6a3b      	ldr	r3, [r7, #32]
 8107500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107502:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8107504:	69fb      	ldr	r3, [r7, #28]
 8107506:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8107508:	69bb      	ldr	r3, [r7, #24]
 810750a:	3358      	adds	r3, #88	; 0x58
 810750c:	4618      	mov	r0, r3
 810750e:	f7ff fdc8 	bl	81070a2 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8107512:	f107 020a 	add.w	r2, r7, #10
 8107516:	f107 030c 	add.w	r3, r7, #12
 810751a:	4619      	mov	r1, r3
 810751c:	69f8      	ldr	r0, [r7, #28]
 810751e:	f7ff fed9 	bl	81072d4 <rpmsg_virtio_get_rx_buffer>
 8107522:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8107524:	69bb      	ldr	r3, [r7, #24]
 8107526:	3358      	adds	r3, #88	; 0x58
 8107528:	4618      	mov	r0, r3
 810752a:	f7ff fdc5 	bl	81070b8 <metal_mutex_release>

	while (rp_hdr) {
 810752e:	e04c      	b.n	81075ca <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8107530:	69bb      	ldr	r3, [r7, #24]
 8107532:	3358      	adds	r3, #88	; 0x58
 8107534:	4618      	mov	r0, r3
 8107536:	f7ff fdb4 	bl	81070a2 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 810753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810753c:	685b      	ldr	r3, [r3, #4]
 810753e:	4619      	mov	r1, r3
 8107540:	69b8      	ldr	r0, [r7, #24]
 8107542:	f7ff fe38 	bl	81071b6 <rpmsg_get_ept_from_addr>
 8107546:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8107548:	69bb      	ldr	r3, [r7, #24]
 810754a:	3358      	adds	r3, #88	; 0x58
 810754c:	4618      	mov	r0, r3
 810754e:	f7ff fdb3 	bl	81070b8 <metal_mutex_release>

		if (!ept)
 8107552:	697b      	ldr	r3, [r7, #20]
 8107554:	2b00      	cmp	r3, #0
 8107556:	d03c      	beq.n	81075d2 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8107558:	697b      	ldr	r3, [r7, #20]
 810755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107560:	d103      	bne.n	810756a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8107562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107564:	681a      	ldr	r2, [r3, #0]
 8107566:	697b      	ldr	r3, [r7, #20]
 8107568:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810756a:	697b      	ldr	r3, [r7, #20]
 810756c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 810756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107570:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8107574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107576:	899b      	ldrh	r3, [r3, #12]
 8107578:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810757a:	4618      	mov	r0, r3
 810757c:	697b      	ldr	r3, [r7, #20]
 810757e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107580:	697b      	ldr	r3, [r7, #20]
 8107582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107584:	9300      	str	r3, [sp, #0]
 8107586:	4613      	mov	r3, r2
 8107588:	4602      	mov	r2, r0
 810758a:	6978      	ldr	r0, [r7, #20]
 810758c:	47a0      	blx	r4
 810758e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8107590:	693b      	ldr	r3, [r7, #16]
 8107592:	2b00      	cmp	r3, #0
 8107594:	d000      	beq.n	8107598 <rpmsg_virtio_rx_callback+0xa8>
 8107596:	e7fe      	b.n	8107596 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8107598:	69bb      	ldr	r3, [r7, #24]
 810759a:	3358      	adds	r3, #88	; 0x58
 810759c:	4618      	mov	r0, r3
 810759e:	f7ff fd80 	bl	81070a2 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 81075a2:	68fa      	ldr	r2, [r7, #12]
 81075a4:	897b      	ldrh	r3, [r7, #10]
 81075a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81075a8:	69f8      	ldr	r0, [r7, #28]
 81075aa:	f7ff fe42 	bl	8107232 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 81075ae:	f107 020a 	add.w	r2, r7, #10
 81075b2:	f107 030c 	add.w	r3, r7, #12
 81075b6:	4619      	mov	r1, r3
 81075b8:	69f8      	ldr	r0, [r7, #28]
 81075ba:	f7ff fe8b 	bl	81072d4 <rpmsg_virtio_get_rx_buffer>
 81075be:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 81075c0:	69bb      	ldr	r3, [r7, #24]
 81075c2:	3358      	adds	r3, #88	; 0x58
 81075c4:	4618      	mov	r0, r3
 81075c6:	f7ff fd77 	bl	81070b8 <metal_mutex_release>
	while (rp_hdr) {
 81075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81075cc:	2b00      	cmp	r3, #0
 81075ce:	d1af      	bne.n	8107530 <rpmsg_virtio_rx_callback+0x40>
 81075d0:	e000      	b.n	81075d4 <rpmsg_virtio_rx_callback+0xe4>
			return;
 81075d2:	bf00      	nop
	}
}
 81075d4:	372c      	adds	r7, #44	; 0x2c
 81075d6:	46bd      	mov	sp, r7
 81075d8:	bd90      	pop	{r4, r7, pc}

081075da <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 81075da:	b580      	push	{r7, lr}
 81075dc:	b092      	sub	sp, #72	; 0x48
 81075de:	af00      	add	r7, sp, #0
 81075e0:	60f8      	str	r0, [r7, #12]
 81075e2:	60b9      	str	r1, [r7, #8]
 81075e4:	607a      	str	r2, [r7, #4]
 81075e6:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81075e8:	68fb      	ldr	r3, [r7, #12]
 81075ea:	6a1b      	ldr	r3, [r3, #32]
 81075ec:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 81075ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81075f0:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 81075f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 81075f8:	68bb      	ldr	r3, [r7, #8]
 81075fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	2b28      	cmp	r3, #40	; 0x28
 8107600:	d001      	beq.n	8107606 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8107602:	2300      	movs	r3, #0
 8107604:	e057      	b.n	81076b6 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8107606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8107608:	4619      	mov	r1, r3
 810760a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810760c:	f7ff fce2 	bl	8106fd4 <metal_io_virt_to_offset>
 8107610:	4601      	mov	r1, r0
 8107612:	f107 0210 	add.w	r2, r7, #16
 8107616:	2320      	movs	r3, #32
 8107618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810761a:	f7fe fe05 	bl	8106228 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 810761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107620:	6a1b      	ldr	r3, [r3, #32]
 8107622:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8107624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107626:	3358      	adds	r3, #88	; 0x58
 8107628:	4618      	mov	r0, r3
 810762a:	f7ff fd3a 	bl	81070a2 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 810762e:	f107 0110 	add.w	r1, r7, #16
 8107632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107634:	f04f 32ff 	mov.w	r2, #4294967295
 8107638:	6c78      	ldr	r0, [r7, #68]	; 0x44
 810763a:	f7ff fb75 	bl	8106d28 <rpmsg_get_endpoint>
 810763e:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8107640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107644:	f003 0301 	and.w	r3, r3, #1
 8107648:	2b00      	cmp	r3, #0
 810764a:	d017      	beq.n	810767c <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 810764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810764e:	2b00      	cmp	r3, #0
 8107650:	d003      	beq.n	810765a <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8107652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107654:	f04f 32ff 	mov.w	r2, #4294967295
 8107658:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 810765a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810765c:	3358      	adds	r3, #88	; 0x58
 810765e:	4618      	mov	r0, r3
 8107660:	f7ff fd2a 	bl	81070b8 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8107664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107666:	2b00      	cmp	r3, #0
 8107668:	d024      	beq.n	81076b4 <rpmsg_virtio_ns_callback+0xda>
 810766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810766e:	2b00      	cmp	r3, #0
 8107670:	d020      	beq.n	81076b4 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8107672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107676:	68f8      	ldr	r0, [r7, #12]
 8107678:	4798      	blx	r3
 810767a:	e01b      	b.n	81076b4 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 810767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810767e:	2b00      	cmp	r3, #0
 8107680:	d110      	bne.n	81076a4 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8107682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107684:	3358      	adds	r3, #88	; 0x58
 8107686:	4618      	mov	r0, r3
 8107688:	f7ff fd16 	bl	81070b8 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 810768c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107690:	2b00      	cmp	r3, #0
 8107692:	d00f      	beq.n	81076b4 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8107694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107698:	f107 0110 	add.w	r1, r7, #16
 810769c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810769e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81076a0:	4798      	blx	r3
 81076a2:	e007      	b.n	81076b4 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 81076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81076a8:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 81076aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81076ac:	3358      	adds	r3, #88	; 0x58
 81076ae:	4618      	mov	r0, r3
 81076b0:	f7ff fd02 	bl	81070b8 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 81076b4:	2300      	movs	r3, #0
}
 81076b6:	4618      	mov	r0, r3
 81076b8:	3748      	adds	r7, #72	; 0x48
 81076ba:	46bd      	mov	sp, r7
 81076bc:	bd80      	pop	{r7, pc}
	...

081076c0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 81076c0:	b580      	push	{r7, lr}
 81076c2:	b090      	sub	sp, #64	; 0x40
 81076c4:	af02      	add	r7, sp, #8
 81076c6:	60f8      	str	r0, [r7, #12]
 81076c8:	60b9      	str	r1, [r7, #8]
 81076ca:	607a      	str	r2, [r7, #4]
 81076cc:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81076ce:	68fb      	ldr	r3, [r7, #12]
 81076d0:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 81076d2:	2264      	movs	r2, #100	; 0x64
 81076d4:	2100      	movs	r1, #0
 81076d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81076d8:	f002 fe8e 	bl	810a3f8 <memset>
	metal_mutex_init(&rdev->lock);
 81076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076de:	3358      	adds	r3, #88	; 0x58
 81076e0:	4618      	mov	r0, r3
 81076e2:	f7ff fcd3 	bl	810708c <metal_mutex_init>
	rvdev->vdev = vdev;
 81076e6:	68fb      	ldr	r3, [r7, #12]
 81076e8:	68ba      	ldr	r2, [r7, #8]
 81076ea:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 81076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076ee:	687a      	ldr	r2, [r7, #4]
 81076f0:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 81076f2:	68bb      	ldr	r3, [r7, #8]
 81076f4:	68fa      	ldr	r2, [r7, #12]
 81076f6:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 81076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076fa:	4a38      	ldr	r2, [pc, #224]	; (81077dc <rpmsg_init_vdev+0x11c>)
 81076fc:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 81076fe:	68f8      	ldr	r0, [r7, #12]
 8107700:	f7ff fd02 	bl	8107108 <rpmsg_virtio_get_role>
 8107704:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8107706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107708:	2b01      	cmp	r3, #1
 810770a:	d112      	bne.n	8107732 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 810770c:	4b34      	ldr	r3, [pc, #208]	; (81077e0 <rpmsg_init_vdev+0x120>)
 810770e:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8107710:	4b34      	ldr	r3, [pc, #208]	; (81077e4 <rpmsg_init_vdev+0x124>)
 8107712:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8107714:	4b34      	ldr	r3, [pc, #208]	; (81077e8 <rpmsg_init_vdev+0x128>)
 8107716:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8107718:	4b34      	ldr	r3, [pc, #208]	; (81077ec <rpmsg_init_vdev+0x12c>)
 810771a:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 810771c:	68bb      	ldr	r3, [r7, #8]
 810771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107720:	3318      	adds	r3, #24
 8107722:	681a      	ldr	r2, [r3, #0]
 8107724:	68fb      	ldr	r3, [r7, #12]
 8107726:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8107728:	68bb      	ldr	r3, [r7, #8]
 810772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810772c:	681a      	ldr	r2, [r3, #0]
 810772e:	68fb      	ldr	r3, [r7, #12]
 8107730:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8107732:	68fb      	ldr	r3, [r7, #12]
 8107734:	683a      	ldr	r2, [r7, #0]
 8107736:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810773a:	2b01      	cmp	r3, #1
 810773c:	d102      	bne.n	8107744 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 810773e:	68f8      	ldr	r0, [r7, #12]
 8107740:	f7ff fded 	bl	810731e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8107744:	f107 0218 	add.w	r2, r7, #24
 8107748:	f107 0310 	add.w	r3, r7, #16
 810774c:	9300      	str	r3, [sp, #0]
 810774e:	4613      	mov	r3, r2
 8107750:	2202      	movs	r2, #2
 8107752:	2100      	movs	r1, #0
 8107754:	68f8      	ldr	r0, [r7, #12]
 8107756:	f7ff fd19 	bl	810718c <rpmsg_virtio_create_virtqueues>
 810775a:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 810775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810775e:	2b00      	cmp	r3, #0
 8107760:	d001      	beq.n	8107766 <rpmsg_init_vdev+0xa6>
		return status;
 8107762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107764:	e035      	b.n	81077d2 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8107766:	2300      	movs	r3, #0
 8107768:	637b      	str	r3, [r7, #52]	; 0x34
 810776a:	e00f      	b.n	810778c <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 810776c:	68bb      	ldr	r3, [r7, #8]
 810776e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8107770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107772:	4613      	mov	r3, r2
 8107774:	005b      	lsls	r3, r3, #1
 8107776:	4413      	add	r3, r2
 8107778:	00db      	lsls	r3, r3, #3
 810777a:	440b      	add	r3, r1
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8107780:	6a3b      	ldr	r3, [r7, #32]
 8107782:	683a      	ldr	r2, [r7, #0]
 8107784:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8107786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107788:	3301      	adds	r3, #1
 810778a:	637b      	str	r3, [r7, #52]	; 0x34
 810778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810778e:	2b01      	cmp	r3, #1
 8107790:	d9ec      	bls.n	810776c <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8107792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107794:	4618      	mov	r0, r3
 8107796:	f7ff fc0c 	bl	8106fb2 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 810779a:	68f8      	ldr	r0, [r7, #12]
 810779c:	f7ff fce5 	bl	810716a <rpmsg_virtio_get_features>
 81077a0:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 81077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81077a4:	f003 0301 	and.w	r3, r3, #1
 81077a8:	2b00      	cmp	r3, #0
 81077aa:	d011      	beq.n	81077d0 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 81077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81077ae:	f103 0008 	add.w	r0, r3, #8
 81077b2:	2300      	movs	r3, #0
 81077b4:	9301      	str	r3, [sp, #4]
 81077b6:	4b0e      	ldr	r3, [pc, #56]	; (81077f0 <rpmsg_init_vdev+0x130>)
 81077b8:	9300      	str	r3, [sp, #0]
 81077ba:	2335      	movs	r3, #53	; 0x35
 81077bc:	2235      	movs	r2, #53	; 0x35
 81077be:	490d      	ldr	r1, [pc, #52]	; (81077f4 <rpmsg_init_vdev+0x134>)
 81077c0:	f7ff fc85 	bl	81070ce <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 81077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81077c6:	3308      	adds	r3, #8
 81077c8:	4619      	mov	r1, r3
 81077ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81077cc:	f7ff fb2e 	bl	8106e2c <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 81077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 81077d2:	4618      	mov	r0, r3
 81077d4:	3738      	adds	r7, #56	; 0x38
 81077d6:	46bd      	mov	sp, r7
 81077d8:	bd80      	pop	{r7, pc}
 81077da:	bf00      	nop
 81077dc:	0810738d 	.word	0x0810738d
 81077e0:	0810edb0 	.word	0x0810edb0
 81077e4:	0810edb8 	.word	0x0810edb8
 81077e8:	081074dd 	.word	0x081074dd
 81077ec:	081074f1 	.word	0x081074f1
 81077f0:	081075db 	.word	0x081075db
 81077f4:	0810edc0 	.word	0x0810edc0

081077f8 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 81077f8:	b480      	push	{r7}
 81077fa:	b083      	sub	sp, #12
 81077fc:	af00      	add	r7, sp, #0
 81077fe:	6078      	str	r0, [r7, #4]
 8107800:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8107802:	bf00      	nop
 8107804:	370c      	adds	r7, #12
 8107806:	46bd      	mov	sp, r7
 8107808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810780c:	4770      	bx	lr

0810780e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 810780e:	b480      	push	{r7}
 8107810:	b083      	sub	sp, #12
 8107812:	af00      	add	r7, sp, #0
 8107814:	6078      	str	r0, [r7, #4]
 8107816:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8107818:	bf00      	nop
 810781a:	370c      	adds	r7, #12
 810781c:	46bd      	mov	sp, r7
 810781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107822:	4770      	bx	lr

08107824 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8107824:	b480      	push	{r7}
 8107826:	b085      	sub	sp, #20
 8107828:	af00      	add	r7, sp, #0
 810782a:	60f8      	str	r0, [r7, #12]
 810782c:	60b9      	str	r1, [r7, #8]
 810782e:	607a      	str	r2, [r7, #4]
 8107830:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8107832:	68fb      	ldr	r3, [r7, #12]
}
 8107834:	4618      	mov	r0, r3
 8107836:	3714      	adds	r7, #20
 8107838:	46bd      	mov	sp, r7
 810783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810783e:	4770      	bx	lr

08107840 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8107840:	b590      	push	{r4, r7, lr}
 8107842:	b08f      	sub	sp, #60	; 0x3c
 8107844:	af04      	add	r7, sp, #16
 8107846:	60f8      	str	r0, [r7, #12]
 8107848:	60b9      	str	r1, [r7, #8]
 810784a:	607a      	str	r2, [r7, #4]
 810784c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 810784e:	68fb      	ldr	r3, [r7, #12]
 8107850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107852:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8107854:	687a      	ldr	r2, [r7, #4]
 8107856:	6a3b      	ldr	r3, [r7, #32]
 8107858:	429a      	cmp	r2, r3
 810785a:	d902      	bls.n	8107862 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 810785c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8107860:	e036      	b.n	81078d0 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8107862:	2300      	movs	r3, #0
 8107864:	627b      	str	r3, [r7, #36]	; 0x24
 8107866:	e02e      	b.n	81078c6 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8107868:	68fb      	ldr	r3, [r7, #12]
 810786a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810786c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810786e:	4613      	mov	r3, r2
 8107870:	005b      	lsls	r3, r3, #1
 8107872:	4413      	add	r3, r2
 8107874:	00db      	lsls	r3, r3, #3
 8107876:	440b      	add	r3, r1
 8107878:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 810787a:	69fb      	ldr	r3, [r7, #28]
 810787c:	3304      	adds	r3, #4
 810787e:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8107880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107882:	b298      	uxth	r0, r3
 8107884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107886:	009b      	lsls	r3, r3, #2
 8107888:	683a      	ldr	r2, [r7, #0]
 810788a:	4413      	add	r3, r2
 810788c:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107890:	009b      	lsls	r3, r3, #2
 8107892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107894:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8107896:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8107898:	68fa      	ldr	r2, [r7, #12]
 810789a:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810789c:	6a12      	ldr	r2, [r2, #32]
 810789e:	69f9      	ldr	r1, [r7, #28]
 81078a0:	6809      	ldr	r1, [r1, #0]
 81078a2:	9102      	str	r1, [sp, #8]
 81078a4:	9201      	str	r2, [sp, #4]
 81078a6:	9300      	str	r3, [sp, #0]
 81078a8:	69bb      	ldr	r3, [r7, #24]
 81078aa:	4622      	mov	r2, r4
 81078ac:	4601      	mov	r1, r0
 81078ae:	68f8      	ldr	r0, [r7, #12]
 81078b0:	f000 f8f6 	bl	8107aa0 <virtqueue_create>
 81078b4:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 81078b6:	697b      	ldr	r3, [r7, #20]
 81078b8:	2b00      	cmp	r3, #0
 81078ba:	d001      	beq.n	81078c0 <virtio_create_virtqueues+0x80>
			return ret;
 81078bc:	697b      	ldr	r3, [r7, #20]
 81078be:	e007      	b.n	81078d0 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 81078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81078c2:	3301      	adds	r3, #1
 81078c4:	627b      	str	r3, [r7, #36]	; 0x24
 81078c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81078c8:	687b      	ldr	r3, [r7, #4]
 81078ca:	429a      	cmp	r2, r3
 81078cc:	d3cc      	bcc.n	8107868 <virtio_create_virtqueues+0x28>
	}
	return 0;
 81078ce:	2300      	movs	r3, #0
}
 81078d0:	4618      	mov	r0, r3
 81078d2:	372c      	adds	r7, #44	; 0x2c
 81078d4:	46bd      	mov	sp, r7
 81078d6:	bd90      	pop	{r4, r7, pc}

081078d8 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 81078d8:	b480      	push	{r7}
 81078da:	b085      	sub	sp, #20
 81078dc:	af00      	add	r7, sp, #0
 81078de:	60f8      	str	r0, [r7, #12]
 81078e0:	60b9      	str	r1, [r7, #8]
 81078e2:	607a      	str	r2, [r7, #4]
 81078e4:	603b      	str	r3, [r7, #0]
	vr->num = num;
 81078e6:	68fb      	ldr	r3, [r7, #12]
 81078e8:	68ba      	ldr	r2, [r7, #8]
 81078ea:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 81078ec:	68fb      	ldr	r3, [r7, #12]
 81078ee:	687a      	ldr	r2, [r7, #4]
 81078f0:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 81078f2:	68bb      	ldr	r3, [r7, #8]
 81078f4:	011b      	lsls	r3, r3, #4
 81078f6:	687a      	ldr	r2, [r7, #4]
 81078f8:	441a      	add	r2, r3
 81078fa:	68fb      	ldr	r3, [r7, #12]
 81078fc:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 81078fe:	68fb      	ldr	r3, [r7, #12]
 8107900:	689a      	ldr	r2, [r3, #8]
 8107902:	68bb      	ldr	r3, [r7, #8]
 8107904:	005b      	lsls	r3, r3, #1
 8107906:	4413      	add	r3, r2
 8107908:	3304      	adds	r3, #4
 810790a:	461a      	mov	r2, r3
 810790c:	683b      	ldr	r3, [r7, #0]
 810790e:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8107910:	1c5a      	adds	r2, r3, #1
 8107912:	683b      	ldr	r3, [r7, #0]
 8107914:	425b      	negs	r3, r3
 8107916:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8107918:	461a      	mov	r2, r3
 810791a:	68fb      	ldr	r3, [r7, #12]
 810791c:	60da      	str	r2, [r3, #12]
}
 810791e:	bf00      	nop
 8107920:	3714      	adds	r7, #20
 8107922:	46bd      	mov	sp, r7
 8107924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107928:	4770      	bx	lr

0810792a <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 810792a:	b480      	push	{r7}
 810792c:	b083      	sub	sp, #12
 810792e:	af00      	add	r7, sp, #0
 8107930:	4603      	mov	r3, r0
 8107932:	80fb      	strh	r3, [r7, #6]
 8107934:	460b      	mov	r3, r1
 8107936:	80bb      	strh	r3, [r7, #4]
 8107938:	4613      	mov	r3, r2
 810793a:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 810793c:	88ba      	ldrh	r2, [r7, #4]
 810793e:	88fb      	ldrh	r3, [r7, #6]
 8107940:	1ad3      	subs	r3, r2, r3
 8107942:	b29b      	uxth	r3, r3
 8107944:	3b01      	subs	r3, #1
 8107946:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8107948:	88b9      	ldrh	r1, [r7, #4]
 810794a:	887b      	ldrh	r3, [r7, #2]
 810794c:	1acb      	subs	r3, r1, r3
 810794e:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8107950:	429a      	cmp	r2, r3
 8107952:	bf34      	ite	cc
 8107954:	2301      	movcc	r3, #1
 8107956:	2300      	movcs	r3, #0
 8107958:	b2db      	uxtb	r3, r3
}
 810795a:	4618      	mov	r0, r3
 810795c:	370c      	adds	r7, #12
 810795e:	46bd      	mov	sp, r7
 8107960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107964:	4770      	bx	lr

08107966 <metal_io_virt>:
{
 8107966:	b480      	push	{r7}
 8107968:	b083      	sub	sp, #12
 810796a:	af00      	add	r7, sp, #0
 810796c:	6078      	str	r0, [r7, #4]
 810796e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8107974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107978:	d009      	beq.n	810798e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	689b      	ldr	r3, [r3, #8]
 810797e:	683a      	ldr	r2, [r7, #0]
 8107980:	429a      	cmp	r2, r3
 8107982:	d804      	bhi.n	810798e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8107988:	683b      	ldr	r3, [r7, #0]
 810798a:	4413      	add	r3, r2
 810798c:	e000      	b.n	8107990 <metal_io_virt+0x2a>
 810798e:	2300      	movs	r3, #0
}
 8107990:	4618      	mov	r0, r3
 8107992:	370c      	adds	r7, #12
 8107994:	46bd      	mov	sp, r7
 8107996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810799a:	4770      	bx	lr

0810799c <metal_io_phys>:
{
 810799c:	b480      	push	{r7}
 810799e:	b085      	sub	sp, #20
 81079a0:	af00      	add	r7, sp, #0
 81079a2:	6078      	str	r0, [r7, #4]
 81079a4:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 81079aa:	2b1f      	cmp	r3, #31
 81079ac:	d805      	bhi.n	81079ba <metal_io_phys+0x1e>
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	68db      	ldr	r3, [r3, #12]
 81079b2:	683a      	ldr	r2, [r7, #0]
 81079b4:	fa22 f303 	lsr.w	r3, r2, r3
 81079b8:	e000      	b.n	81079bc <metal_io_phys+0x20>
 81079ba:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 81079bc:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 81079be:	687b      	ldr	r3, [r7, #4]
 81079c0:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 81079c2:	2b00      	cmp	r3, #0
 81079c4:	d010      	beq.n	81079e8 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 81079c6:	687b      	ldr	r3, [r7, #4]
 81079c8:	689b      	ldr	r3, [r3, #8]
 81079ca:	683a      	ldr	r2, [r7, #0]
 81079cc:	429a      	cmp	r2, r3
 81079ce:	d80b      	bhi.n	81079e8 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	685a      	ldr	r2, [r3, #4]
 81079d4:	68fb      	ldr	r3, [r7, #12]
 81079d6:	009b      	lsls	r3, r3, #2
 81079d8:	4413      	add	r3, r2
 81079da:	681a      	ldr	r2, [r3, #0]
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	6919      	ldr	r1, [r3, #16]
 81079e0:	683b      	ldr	r3, [r7, #0]
 81079e2:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 81079e4:	4413      	add	r3, r2
 81079e6:	e001      	b.n	81079ec <metal_io_phys+0x50>
 81079e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 81079ec:	4618      	mov	r0, r3
 81079ee:	3714      	adds	r7, #20
 81079f0:	46bd      	mov	sp, r7
 81079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079f6:	4770      	bx	lr

081079f8 <metal_io_phys_to_offset>:
{
 81079f8:	b580      	push	{r7, lr}
 81079fa:	b084      	sub	sp, #16
 81079fc:	af00      	add	r7, sp, #0
 81079fe:	6078      	str	r0, [r7, #4]
 8107a00:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8107a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107a0a:	d105      	bne.n	8107a18 <metal_io_phys_to_offset+0x20>
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	685b      	ldr	r3, [r3, #4]
 8107a10:	681b      	ldr	r3, [r3, #0]
 8107a12:	683a      	ldr	r2, [r7, #0]
 8107a14:	1ad3      	subs	r3, r2, r3
 8107a16:	e003      	b.n	8107a20 <metal_io_phys_to_offset+0x28>
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	691a      	ldr	r2, [r3, #16]
 8107a1c:	683b      	ldr	r3, [r7, #0]
 8107a1e:	4013      	ands	r3, r2
	unsigned long offset =
 8107a20:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8107a22:	68f9      	ldr	r1, [r7, #12]
 8107a24:	6878      	ldr	r0, [r7, #4]
 8107a26:	f7ff ffb9 	bl	810799c <metal_io_phys>
 8107a2a:	4602      	mov	r2, r0
 8107a2c:	683b      	ldr	r3, [r7, #0]
 8107a2e:	4293      	cmp	r3, r2
 8107a30:	d101      	bne.n	8107a36 <metal_io_phys_to_offset+0x3e>
			return offset;
 8107a32:	68fb      	ldr	r3, [r7, #12]
 8107a34:	e00c      	b.n	8107a50 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	691a      	ldr	r2, [r3, #16]
 8107a3a:	68fb      	ldr	r3, [r7, #12]
 8107a3c:	4413      	add	r3, r2
 8107a3e:	3301      	adds	r3, #1
 8107a40:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8107a42:	687b      	ldr	r3, [r7, #4]
 8107a44:	689b      	ldr	r3, [r3, #8]
 8107a46:	68fa      	ldr	r2, [r7, #12]
 8107a48:	429a      	cmp	r2, r3
 8107a4a:	d3ea      	bcc.n	8107a22 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8107a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8107a50:	4618      	mov	r0, r3
 8107a52:	3710      	adds	r7, #16
 8107a54:	46bd      	mov	sp, r7
 8107a56:	bd80      	pop	{r7, pc}

08107a58 <metal_io_phys_to_virt>:
{
 8107a58:	b580      	push	{r7, lr}
 8107a5a:	b082      	sub	sp, #8
 8107a5c:	af00      	add	r7, sp, #0
 8107a5e:	6078      	str	r0, [r7, #4]
 8107a60:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8107a62:	6839      	ldr	r1, [r7, #0]
 8107a64:	6878      	ldr	r0, [r7, #4]
 8107a66:	f7ff ffc7 	bl	81079f8 <metal_io_phys_to_offset>
 8107a6a:	4603      	mov	r3, r0
 8107a6c:	4619      	mov	r1, r3
 8107a6e:	6878      	ldr	r0, [r7, #4]
 8107a70:	f7ff ff79 	bl	8107966 <metal_io_virt>
 8107a74:	4603      	mov	r3, r0
}
 8107a76:	4618      	mov	r0, r3
 8107a78:	3708      	adds	r7, #8
 8107a7a:	46bd      	mov	sp, r7
 8107a7c:	bd80      	pop	{r7, pc}

08107a7e <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8107a7e:	b580      	push	{r7, lr}
 8107a80:	b084      	sub	sp, #16
 8107a82:	af00      	add	r7, sp, #0
 8107a84:	6078      	str	r0, [r7, #4]
 8107a86:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a8c:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8107a8e:	6839      	ldr	r1, [r7, #0]
 8107a90:	68f8      	ldr	r0, [r7, #12]
 8107a92:	f7ff ffe1 	bl	8107a58 <metal_io_phys_to_virt>
 8107a96:	4603      	mov	r3, r0
}
 8107a98:	4618      	mov	r0, r3
 8107a9a:	3710      	adds	r7, #16
 8107a9c:	46bd      	mov	sp, r7
 8107a9e:	bd80      	pop	{r7, pc}

08107aa0 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8107aa0:	b580      	push	{r7, lr}
 8107aa2:	b086      	sub	sp, #24
 8107aa4:	af00      	add	r7, sp, #0
 8107aa6:	60f8      	str	r0, [r7, #12]
 8107aa8:	607a      	str	r2, [r7, #4]
 8107aaa:	603b      	str	r3, [r7, #0]
 8107aac:	460b      	mov	r3, r1
 8107aae:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8107ab0:	2300      	movs	r3, #0
 8107ab2:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8107ab4:	697b      	ldr	r3, [r7, #20]
 8107ab6:	2b00      	cmp	r3, #0
 8107ab8:	d121      	bne.n	8107afe <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8107aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107abc:	68fa      	ldr	r2, [r7, #12]
 8107abe:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8107ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ac2:	687a      	ldr	r2, [r7, #4]
 8107ac4:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8107ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ac8:	897a      	ldrh	r2, [r7, #10]
 8107aca:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8107acc:	683b      	ldr	r3, [r7, #0]
 8107ace:	891a      	ldrh	r2, [r3, #8]
 8107ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ad2:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8107ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ad6:	895a      	ldrh	r2, [r3, #10]
 8107ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ada:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8107adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ade:	6a3a      	ldr	r2, [r7, #32]
 8107ae0:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8107ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107ae6:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8107ae8:	683b      	ldr	r3, [r7, #0]
 8107aea:	6819      	ldr	r1, [r3, #0]
 8107aec:	683b      	ldr	r3, [r7, #0]
 8107aee:	685b      	ldr	r3, [r3, #4]
 8107af0:	461a      	mov	r2, r3
 8107af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107af4:	f000 f8fb 	bl	8107cee <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8107af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107afa:	f000 f885 	bl	8107c08 <virtqueue_disable_cb>
	}

	return (status);
 8107afe:	697b      	ldr	r3, [r7, #20]
}
 8107b00:	4618      	mov	r0, r3
 8107b02:	3718      	adds	r7, #24
 8107b04:	46bd      	mov	sp, r7
 8107b06:	bd80      	pop	{r7, pc}

08107b08 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8107b08:	b580      	push	{r7, lr}
 8107b0a:	b086      	sub	sp, #24
 8107b0c:	af00      	add	r7, sp, #0
 8107b0e:	60f8      	str	r0, [r7, #12]
 8107b10:	60b9      	str	r1, [r7, #8]
 8107b12:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8107b14:	2300      	movs	r3, #0
 8107b16:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8107b18:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8107b1c:	68fb      	ldr	r3, [r7, #12]
 8107b1e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8107b20:	68fb      	ldr	r3, [r7, #12]
 8107b22:	6a1b      	ldr	r3, [r3, #32]
 8107b24:	885b      	ldrh	r3, [r3, #2]
 8107b26:	429a      	cmp	r2, r3
 8107b28:	d101      	bne.n	8107b2e <virtqueue_get_available_buffer+0x26>
		return NULL;
 8107b2a:	2300      	movs	r3, #0
 8107b2c:	e02e      	b.n	8107b8c <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8107b2e:	68fb      	ldr	r3, [r7, #12]
 8107b30:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8107b32:	1c5a      	adds	r2, r3, #1
 8107b34:	b291      	uxth	r1, r2
 8107b36:	68fa      	ldr	r2, [r7, #12]
 8107b38:	8691      	strh	r1, [r2, #52]	; 0x34
 8107b3a:	b21a      	sxth	r2, r3
 8107b3c:	68fb      	ldr	r3, [r7, #12]
 8107b3e:	895b      	ldrh	r3, [r3, #10]
 8107b40:	3b01      	subs	r3, #1
 8107b42:	b29b      	uxth	r3, r3
 8107b44:	b21b      	sxth	r3, r3
 8107b46:	4013      	ands	r3, r2
 8107b48:	b21b      	sxth	r3, r3
 8107b4a:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8107b4c:	68fb      	ldr	r3, [r7, #12]
 8107b4e:	6a1a      	ldr	r2, [r3, #32]
 8107b50:	8afb      	ldrh	r3, [r7, #22]
 8107b52:	005b      	lsls	r3, r3, #1
 8107b54:	4413      	add	r3, r2
 8107b56:	889a      	ldrh	r2, [r3, #4]
 8107b58:	68bb      	ldr	r3, [r7, #8]
 8107b5a:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8107b5c:	68fb      	ldr	r3, [r7, #12]
 8107b5e:	69da      	ldr	r2, [r3, #28]
 8107b60:	68bb      	ldr	r3, [r7, #8]
 8107b62:	881b      	ldrh	r3, [r3, #0]
 8107b64:	011b      	lsls	r3, r3, #4
 8107b66:	4413      	add	r3, r2
 8107b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b6c:	4613      	mov	r3, r2
 8107b6e:	4619      	mov	r1, r3
 8107b70:	68f8      	ldr	r0, [r7, #12]
 8107b72:	f7ff ff84 	bl	8107a7e <virtqueue_phys_to_virt>
 8107b76:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8107b78:	68fb      	ldr	r3, [r7, #12]
 8107b7a:	69da      	ldr	r2, [r3, #28]
 8107b7c:	68bb      	ldr	r3, [r7, #8]
 8107b7e:	881b      	ldrh	r3, [r3, #0]
 8107b80:	011b      	lsls	r3, r3, #4
 8107b82:	4413      	add	r3, r2
 8107b84:	689a      	ldr	r2, [r3, #8]
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8107b8a:	693b      	ldr	r3, [r7, #16]
}
 8107b8c:	4618      	mov	r0, r3
 8107b8e:	3718      	adds	r7, #24
 8107b90:	46bd      	mov	sp, r7
 8107b92:	bd80      	pop	{r7, pc}

08107b94 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8107b94:	b480      	push	{r7}
 8107b96:	b087      	sub	sp, #28
 8107b98:	af00      	add	r7, sp, #0
 8107b9a:	60f8      	str	r0, [r7, #12]
 8107b9c:	460b      	mov	r3, r1
 8107b9e:	607a      	str	r2, [r7, #4]
 8107ba0:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8107ba2:	2300      	movs	r3, #0
 8107ba4:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8107ba6:	68fb      	ldr	r3, [r7, #12]
 8107ba8:	895b      	ldrh	r3, [r3, #10]
 8107baa:	897a      	ldrh	r2, [r7, #10]
 8107bac:	429a      	cmp	r2, r3
 8107bae:	d901      	bls.n	8107bb4 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8107bb0:	4b14      	ldr	r3, [pc, #80]	; (8107c04 <virtqueue_add_consumed_buffer+0x70>)
 8107bb2:	e021      	b.n	8107bf8 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8107bb4:	68fb      	ldr	r3, [r7, #12]
 8107bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107bb8:	885b      	ldrh	r3, [r3, #2]
 8107bba:	b21a      	sxth	r2, r3
 8107bbc:	68fb      	ldr	r3, [r7, #12]
 8107bbe:	895b      	ldrh	r3, [r3, #10]
 8107bc0:	3b01      	subs	r3, #1
 8107bc2:	b29b      	uxth	r3, r3
 8107bc4:	b21b      	sxth	r3, r3
 8107bc6:	4013      	ands	r3, r2
 8107bc8:	b21b      	sxth	r3, r3
 8107bca:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8107bcc:	68fb      	ldr	r3, [r7, #12]
 8107bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107bd0:	8a7b      	ldrh	r3, [r7, #18]
 8107bd2:	00db      	lsls	r3, r3, #3
 8107bd4:	4413      	add	r3, r2
 8107bd6:	3304      	adds	r3, #4
 8107bd8:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8107bda:	897a      	ldrh	r2, [r7, #10]
 8107bdc:	697b      	ldr	r3, [r7, #20]
 8107bde:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8107be0:	697b      	ldr	r3, [r7, #20]
 8107be2:	687a      	ldr	r2, [r7, #4]
 8107be4:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8107be6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8107bea:	68fb      	ldr	r3, [r7, #12]
 8107bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107bee:	885a      	ldrh	r2, [r3, #2]
 8107bf0:	3201      	adds	r2, #1
 8107bf2:	b292      	uxth	r2, r2
 8107bf4:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8107bf6:	2300      	movs	r3, #0
}
 8107bf8:	4618      	mov	r0, r3
 8107bfa:	371c      	adds	r7, #28
 8107bfc:	46bd      	mov	sp, r7
 8107bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c02:	4770      	bx	lr
 8107c04:	fffff441 	.word	0xfffff441

08107c08 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8107c08:	b480      	push	{r7}
 8107c0a:	b083      	sub	sp, #12
 8107c0c:	af00      	add	r7, sp, #0
 8107c0e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	68db      	ldr	r3, [r3, #12]
 8107c14:	f003 0302 	and.w	r3, r3, #2
 8107c18:	2b00      	cmp	r3, #0
 8107c1a:	d010      	beq.n	8107c3e <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	895b      	ldrh	r3, [r3, #10]
 8107c24:	1ad3      	subs	r3, r2, r3
 8107c26:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	6a1a      	ldr	r2, [r3, #32]
 8107c2c:	687b      	ldr	r3, [r7, #4]
 8107c2e:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8107c30:	3901      	subs	r1, #1
 8107c32:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8107c34:	005b      	lsls	r3, r3, #1
 8107c36:	4413      	add	r3, r2
 8107c38:	460a      	mov	r2, r1
 8107c3a:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8107c3c:	e008      	b.n	8107c50 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	6a1b      	ldr	r3, [r3, #32]
 8107c42:	881a      	ldrh	r2, [r3, #0]
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	6a1b      	ldr	r3, [r3, #32]
 8107c48:	f042 0201 	orr.w	r2, r2, #1
 8107c4c:	b292      	uxth	r2, r2
 8107c4e:	801a      	strh	r2, [r3, #0]
}
 8107c50:	bf00      	nop
 8107c52:	370c      	adds	r7, #12
 8107c54:	46bd      	mov	sp, r7
 8107c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c5a:	4770      	bx	lr

08107c5c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8107c5c:	b580      	push	{r7, lr}
 8107c5e:	b082      	sub	sp, #8
 8107c60:	af00      	add	r7, sp, #0
 8107c62:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8107c64:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8107c68:	6878      	ldr	r0, [r7, #4]
 8107c6a:	f000 f885 	bl	8107d78 <vq_ring_must_notify_host>
 8107c6e:	4603      	mov	r3, r0
 8107c70:	2b00      	cmp	r3, #0
 8107c72:	d002      	beq.n	8107c7a <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8107c74:	6878      	ldr	r0, [r7, #4]
 8107c76:	f000 f8b5 	bl	8107de4 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	2200      	movs	r2, #0
 8107c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8107c80:	bf00      	nop
 8107c82:	3708      	adds	r7, #8
 8107c84:	46bd      	mov	sp, r7
 8107c86:	bd80      	pop	{r7, pc}

08107c88 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8107c88:	b480      	push	{r7}
 8107c8a:	b085      	sub	sp, #20
 8107c8c:	af00      	add	r7, sp, #0
 8107c8e:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8107c90:	2300      	movs	r3, #0
 8107c92:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8107c94:	2300      	movs	r3, #0
 8107c96:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8107c98:	2300      	movs	r3, #0
 8107c9a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	6a1b      	ldr	r3, [r3, #32]
 8107ca4:	885b      	ldrh	r3, [r3, #2]
 8107ca6:	429a      	cmp	r2, r3
 8107ca8:	d101      	bne.n	8107cae <virtqueue_get_desc_size+0x26>
		return 0;
 8107caa:	2300      	movs	r3, #0
 8107cac:	e019      	b.n	8107ce2 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8107cb2:	b21a      	sxth	r2, r3
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	895b      	ldrh	r3, [r3, #10]
 8107cb8:	3b01      	subs	r3, #1
 8107cba:	b29b      	uxth	r3, r3
 8107cbc:	b21b      	sxth	r3, r3
 8107cbe:	4013      	ands	r3, r2
 8107cc0:	b21b      	sxth	r3, r3
 8107cc2:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	6a1a      	ldr	r2, [r3, #32]
 8107cc8:	89fb      	ldrh	r3, [r7, #14]
 8107cca:	005b      	lsls	r3, r3, #1
 8107ccc:	4413      	add	r3, r2
 8107cce:	889b      	ldrh	r3, [r3, #4]
 8107cd0:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	69da      	ldr	r2, [r3, #28]
 8107cd6:	89bb      	ldrh	r3, [r7, #12]
 8107cd8:	011b      	lsls	r3, r3, #4
 8107cda:	4413      	add	r3, r2
 8107cdc:	689b      	ldr	r3, [r3, #8]
 8107cde:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8107ce0:	68bb      	ldr	r3, [r7, #8]
}
 8107ce2:	4618      	mov	r0, r3
 8107ce4:	3714      	adds	r7, #20
 8107ce6:	46bd      	mov	sp, r7
 8107ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cec:	4770      	bx	lr

08107cee <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8107cee:	b580      	push	{r7, lr}
 8107cf0:	b088      	sub	sp, #32
 8107cf2:	af00      	add	r7, sp, #0
 8107cf4:	60f8      	str	r0, [r7, #12]
 8107cf6:	60b9      	str	r1, [r7, #8]
 8107cf8:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8107cfa:	68fb      	ldr	r3, [r7, #12]
 8107cfc:	895b      	ldrh	r3, [r3, #10]
 8107cfe:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8107d00:	68fb      	ldr	r3, [r7, #12]
 8107d02:	3318      	adds	r3, #24
 8107d04:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8107d06:	69b9      	ldr	r1, [r7, #24]
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	68ba      	ldr	r2, [r7, #8]
 8107d0c:	6978      	ldr	r0, [r7, #20]
 8107d0e:	f7ff fde3 	bl	81078d8 <vring_init>

	for (i = 0; i < size - 1; i++)
 8107d12:	2300      	movs	r3, #0
 8107d14:	61fb      	str	r3, [r7, #28]
 8107d16:	e00c      	b.n	8107d32 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8107d18:	69fb      	ldr	r3, [r7, #28]
 8107d1a:	b29a      	uxth	r2, r3
 8107d1c:	697b      	ldr	r3, [r7, #20]
 8107d1e:	6859      	ldr	r1, [r3, #4]
 8107d20:	69fb      	ldr	r3, [r7, #28]
 8107d22:	011b      	lsls	r3, r3, #4
 8107d24:	440b      	add	r3, r1
 8107d26:	3201      	adds	r2, #1
 8107d28:	b292      	uxth	r2, r2
 8107d2a:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8107d2c:	69fb      	ldr	r3, [r7, #28]
 8107d2e:	3301      	adds	r3, #1
 8107d30:	61fb      	str	r3, [r7, #28]
 8107d32:	69bb      	ldr	r3, [r7, #24]
 8107d34:	3b01      	subs	r3, #1
 8107d36:	69fa      	ldr	r2, [r7, #28]
 8107d38:	429a      	cmp	r2, r3
 8107d3a:	dbed      	blt.n	8107d18 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8107d3c:	697b      	ldr	r3, [r7, #20]
 8107d3e:	685a      	ldr	r2, [r3, #4]
 8107d40:	69fb      	ldr	r3, [r7, #28]
 8107d42:	011b      	lsls	r3, r3, #4
 8107d44:	4413      	add	r3, r2
 8107d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8107d4a:	81da      	strh	r2, [r3, #14]
}
 8107d4c:	bf00      	nop
 8107d4e:	3720      	adds	r7, #32
 8107d50:	46bd      	mov	sp, r7
 8107d52:	bd80      	pop	{r7, pc}

08107d54 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8107d54:	b580      	push	{r7, lr}
 8107d56:	b082      	sub	sp, #8
 8107d58:	af00      	add	r7, sp, #0
 8107d5a:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8107d5c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	691b      	ldr	r3, [r3, #16]
 8107d64:	2b00      	cmp	r3, #0
 8107d66:	d003      	beq.n	8107d70 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8107d68:	687b      	ldr	r3, [r7, #4]
 8107d6a:	691b      	ldr	r3, [r3, #16]
 8107d6c:	6878      	ldr	r0, [r7, #4]
 8107d6e:	4798      	blx	r3
}
 8107d70:	bf00      	nop
 8107d72:	3708      	adds	r7, #8
 8107d74:	46bd      	mov	sp, r7
 8107d76:	bd80      	pop	{r7, pc}

08107d78 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8107d78:	b580      	push	{r7, lr}
 8107d7a:	b084      	sub	sp, #16
 8107d7c:	af00      	add	r7, sp, #0
 8107d7e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	68db      	ldr	r3, [r3, #12]
 8107d84:	f003 0302 	and.w	r3, r3, #2
 8107d88:	2b00      	cmp	r3, #0
 8107d8a:	d01d      	beq.n	8107dc8 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	6a1b      	ldr	r3, [r3, #32]
 8107d90:	885b      	ldrh	r3, [r3, #2]
 8107d92:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107d98:	89fa      	ldrh	r2, [r7, #14]
 8107d9a:	1ad3      	subs	r3, r2, r3
 8107d9c:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	699b      	ldr	r3, [r3, #24]
 8107da6:	00db      	lsls	r3, r3, #3
 8107da8:	4413      	add	r3, r2
 8107daa:	685b      	ldr	r3, [r3, #4]
 8107dac:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8107dae:	89ba      	ldrh	r2, [r7, #12]
 8107db0:	89f9      	ldrh	r1, [r7, #14]
 8107db2:	897b      	ldrh	r3, [r7, #10]
 8107db4:	4618      	mov	r0, r3
 8107db6:	f7ff fdb8 	bl	810792a <vring_need_event>
 8107dba:	4603      	mov	r3, r0
 8107dbc:	2b00      	cmp	r3, #0
 8107dbe:	bf14      	ite	ne
 8107dc0:	2301      	movne	r3, #1
 8107dc2:	2300      	moveq	r3, #0
 8107dc4:	b2db      	uxtb	r3, r3
 8107dc6:	e009      	b.n	8107ddc <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8107dc8:	687b      	ldr	r3, [r7, #4]
 8107dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107dcc:	881b      	ldrh	r3, [r3, #0]
 8107dce:	f003 0301 	and.w	r3, r3, #1
 8107dd2:	2b00      	cmp	r3, #0
 8107dd4:	bf0c      	ite	eq
 8107dd6:	2301      	moveq	r3, #1
 8107dd8:	2300      	movne	r3, #0
 8107dda:	b2db      	uxtb	r3, r3
}
 8107ddc:	4618      	mov	r0, r3
 8107dde:	3710      	adds	r7, #16
 8107de0:	46bd      	mov	sp, r7
 8107de2:	bd80      	pop	{r7, pc}

08107de4 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8107de4:	b580      	push	{r7, lr}
 8107de6:	b082      	sub	sp, #8
 8107de8:	af00      	add	r7, sp, #0
 8107dea:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	695b      	ldr	r3, [r3, #20]
 8107df0:	2b00      	cmp	r3, #0
 8107df2:	d003      	beq.n	8107dfc <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	695b      	ldr	r3, [r3, #20]
 8107df8:	6878      	ldr	r0, [r7, #4]
 8107dfa:	4798      	blx	r3
}
 8107dfc:	bf00      	nop
 8107dfe:	3708      	adds	r7, #8
 8107e00:	46bd      	mov	sp, r7
 8107e02:	bd80      	pop	{r7, pc}

08107e04 <OneOverSqrt>:

#include "main.h"


float OneOverSqrt(float x)
{
 8107e04:	b580      	push	{r7, lr}
 8107e06:	b082      	sub	sp, #8
 8107e08:	af00      	add	r7, sp, #0
 8107e0a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (float)sqrt(x);
 8107e0e:	6878      	ldr	r0, [r7, #4]
 8107e10:	f7f8 fc32 	bl	8100678 <__aeabi_f2d>
 8107e14:	4602      	mov	r2, r0
 8107e16:	460b      	mov	r3, r1
 8107e18:	ec43 2b10 	vmov	d0, r2, r3
 8107e1c:	f001 fcf6 	bl	810980c <sqrt>
 8107e20:	ec53 2b10 	vmov	r2, r3, d0
 8107e24:	4610      	mov	r0, r2
 8107e26:	4619      	mov	r1, r3
 8107e28:	f7f8 ff76 	bl	8100d18 <__aeabi_d2f>
 8107e2c:	ee06 0a90 	vmov	s13, r0
 8107e30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8107e34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8107e38:	eef0 7a47 	vmov.f32	s15, s14
}
 8107e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8107e40:	3708      	adds	r7, #8
 8107e42:	46bd      	mov	sp, r7
 8107e44:	bd80      	pop	{r7, pc}
	...

08107e48 <CalculateAngles>:

void CalculateAngles(tAHRSDATA *inputAHRS)
{
 8107e48:	b5b0      	push	{r4, r5, r7, lr}
 8107e4a:	b08c      	sub	sp, #48	; 0x30
 8107e4c:	af00      	add	r7, sp, #0
 8107e4e:	6078      	str	r0, [r7, #4]
	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 8107e50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8107e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8107e56:	f04f 0300 	mov.w	r3, #0
 8107e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8107e5c:	f04f 0300 	mov.w	r3, #0
 8107e60:	627b      	str	r3, [r7, #36]	; 0x24
 8107e62:	f04f 0300 	mov.w	r3, #0
 8107e66:	623b      	str	r3, [r7, #32]
    double AHRSIMU_RAD2DEG = 180 / PI;
 8107e68:	a38e      	add	r3, pc, #568	; (adr r3, 81080a4 <CalculateAngles+0x25c>)
 8107e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float Roll;        /*!< Roll angle value. This parameter is in units of degrees */
    float Pitch;       /*!< Pitch angle value. This parameter is in units of degrees */
    float Yaw;         /*!< Yaw angle value. This parameter is in units of degrees */
    float Inclination = 3.5; /*!< Inclination in units of degrees */
 8107e72:	4b89      	ldr	r3, [pc, #548]	; (8108098 <CalculateAngles+0x250>)
 8107e74:	617b      	str	r3, [r7, #20]

    q0 = inputAHRS->q0;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	695b      	ldr	r3, [r3, #20]
 8107e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    q1 = inputAHRS->q1;
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	699b      	ldr	r3, [r3, #24]
 8107e80:	62bb      	str	r3, [r7, #40]	; 0x28
    q2 = inputAHRS->q2;
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	69db      	ldr	r3, [r3, #28]
 8107e86:	627b      	str	r3, [r7, #36]	; 0x24
    q3 = inputAHRS->q3;
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	6a1b      	ldr	r3, [r3, #32]
 8107e8c:	623b      	str	r3, [r7, #32]

    Roll = atan2(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2);
 8107e8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8107e92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8107e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107e9a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8107e9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8107ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107eaa:	ee17 0a90 	vmov	r0, s15
 8107eae:	f7f8 fbe3 	bl	8100678 <__aeabi_f2d>
 8107eb2:	4604      	mov	r4, r0
 8107eb4:	460d      	mov	r5, r1
 8107eb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8107eba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107ebe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8107ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107ec6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8107eca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107ed2:	ee17 0a90 	vmov	r0, s15
 8107ed6:	f7f8 fbcf 	bl	8100678 <__aeabi_f2d>
 8107eda:	4602      	mov	r2, r0
 8107edc:	460b      	mov	r3, r1
 8107ede:	ec43 2b11 	vmov	d1, r2, r3
 8107ee2:	ec45 4b10 	vmov	d0, r4, r5
 8107ee6:	f001 fc8f 	bl	8109808 <atan2>
 8107eea:	ec53 2b10 	vmov	r2, r3, d0
 8107eee:	4610      	mov	r0, r2
 8107ef0:	4619      	mov	r1, r3
 8107ef2:	f7f8 ff11 	bl	8100d18 <__aeabi_d2f>
 8107ef6:	4603      	mov	r3, r0
 8107ef8:	613b      	str	r3, [r7, #16]
    Pitch = asin(-2.0f * (q1 * q3 - q0 * q2));
 8107efa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8107efe:	edd7 7a08 	vldr	s15, [r7, #32]
 8107f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107f06:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8107f0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8107f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107f16:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8107f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8107f1e:	ee17 0a90 	vmov	r0, s15
 8107f22:	f7f8 fba9 	bl	8100678 <__aeabi_f2d>
 8107f26:	4602      	mov	r2, r0
 8107f28:	460b      	mov	r3, r1
 8107f2a:	ec43 2b10 	vmov	d0, r2, r3
 8107f2e:	f001 fc31 	bl	8109794 <asin>
 8107f32:	ec53 2b10 	vmov	r2, r3, d0
 8107f36:	4610      	mov	r0, r2
 8107f38:	4619      	mov	r1, r3
 8107f3a:	f7f8 feed 	bl	8100d18 <__aeabi_d2f>
 8107f3e:	4603      	mov	r3, r0
 8107f40:	60fb      	str	r3, [r7, #12]
    Yaw = atan2(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3);
 8107f42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8107f46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8107f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107f4e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8107f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8107f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8107f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8107f5e:	ee17 0a90 	vmov	r0, s15
 8107f62:	f7f8 fb89 	bl	8100678 <__aeabi_f2d>
 8107f66:	4604      	mov	r4, r0
 8107f68:	460d      	mov	r5, r1
 8107f6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8107f6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107f72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8107f76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107f7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8107f7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8107f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107f86:	ee17 0a90 	vmov	r0, s15
 8107f8a:	f7f8 fb75 	bl	8100678 <__aeabi_f2d>
 8107f8e:	4602      	mov	r2, r0
 8107f90:	460b      	mov	r3, r1
 8107f92:	ec43 2b11 	vmov	d1, r2, r3
 8107f96:	ec45 4b10 	vmov	d0, r4, r5
 8107f9a:	f001 fc35 	bl	8109808 <atan2>
 8107f9e:	ec53 2b10 	vmov	r2, r3, d0
 8107fa2:	4610      	mov	r0, r2
 8107fa4:	4619      	mov	r1, r3
 8107fa6:	f7f8 feb7 	bl	8100d18 <__aeabi_d2f>
 8107faa:	4603      	mov	r3, r0
 8107fac:	60bb      	str	r3, [r7, #8]

    /* Calculate degrees and remove inclination */
    Roll *= AHRSIMU_RAD2DEG;
 8107fae:	6938      	ldr	r0, [r7, #16]
 8107fb0:	f7f8 fb62 	bl	8100678 <__aeabi_f2d>
 8107fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8107fb8:	f7f8 fbb6 	bl	8100728 <__aeabi_dmul>
 8107fbc:	4602      	mov	r2, r0
 8107fbe:	460b      	mov	r3, r1
 8107fc0:	4610      	mov	r0, r2
 8107fc2:	4619      	mov	r1, r3
 8107fc4:	f7f8 fea8 	bl	8100d18 <__aeabi_d2f>
 8107fc8:	4603      	mov	r3, r0
 8107fca:	613b      	str	r3, [r7, #16]
    Pitch *= AHRSIMU_RAD2DEG;
 8107fcc:	68f8      	ldr	r0, [r7, #12]
 8107fce:	f7f8 fb53 	bl	8100678 <__aeabi_f2d>
 8107fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8107fd6:	f7f8 fba7 	bl	8100728 <__aeabi_dmul>
 8107fda:	4602      	mov	r2, r0
 8107fdc:	460b      	mov	r3, r1
 8107fde:	4610      	mov	r0, r2
 8107fe0:	4619      	mov	r1, r3
 8107fe2:	f7f8 fe99 	bl	8100d18 <__aeabi_d2f>
 8107fe6:	4603      	mov	r3, r0
 8107fe8:	60fb      	str	r3, [r7, #12]
    Yaw = Yaw * AHRSIMU_RAD2DEG - Inclination;
 8107fea:	68b8      	ldr	r0, [r7, #8]
 8107fec:	f7f8 fb44 	bl	8100678 <__aeabi_f2d>
 8107ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8107ff4:	f7f8 fb98 	bl	8100728 <__aeabi_dmul>
 8107ff8:	4602      	mov	r2, r0
 8107ffa:	460b      	mov	r3, r1
 8107ffc:	4614      	mov	r4, r2
 8107ffe:	461d      	mov	r5, r3
 8108000:	6978      	ldr	r0, [r7, #20]
 8108002:	f7f8 fb39 	bl	8100678 <__aeabi_f2d>
 8108006:	4602      	mov	r2, r0
 8108008:	460b      	mov	r3, r1
 810800a:	4620      	mov	r0, r4
 810800c:	4629      	mov	r1, r5
 810800e:	f7f8 f9d3 	bl	81003b8 <__aeabi_dsub>
 8108012:	4602      	mov	r2, r0
 8108014:	460b      	mov	r3, r1
 8108016:	4610      	mov	r0, r2
 8108018:	4619      	mov	r1, r3
 810801a:	f7f8 fe7d 	bl	8100d18 <__aeabi_d2f>
 810801e:	4603      	mov	r3, r0
 8108020:	60bb      	str	r3, [r7, #8]

    inputAHRS->Roll = Roll;
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	693a      	ldr	r2, [r7, #16]
 8108026:	601a      	str	r2, [r3, #0]
    inputAHRS->Pitch = Pitch;
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	68fa      	ldr	r2, [r7, #12]
 810802c:	605a      	str	r2, [r3, #4]
    inputAHRS->Yaw = Yaw;
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	68ba      	ldr	r2, [r7, #8]
 8108032:	609a      	str	r2, [r3, #8]

    /* Check values because of inclination */
    if (Yaw < -180)
 8108034:	edd7 7a02 	vldr	s15, [r7, #8]
 8108038:	ed9f 7a18 	vldr	s14, [pc, #96]	; 810809c <CalculateAngles+0x254>
 810803c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8108040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108044:	d50c      	bpl.n	8108060 <CalculateAngles+0x218>
    {
        Yaw = 180.0f - (-180.0f - Yaw);
 8108046:	ed9f 7a15 	vldr	s14, [pc, #84]	; 810809c <CalculateAngles+0x254>
 810804a:	edd7 7a02 	vldr	s15, [r7, #8]
 810804e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108052:	ed9f 7a13 	vldr	s14, [pc, #76]	; 81080a0 <CalculateAngles+0x258>
 8108056:	ee77 7a67 	vsub.f32	s15, s14, s15
 810805a:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    else if (Yaw > 180)
    {
        Yaw = -180.0f - (180.0f - Yaw);
    }
}
 810805e:	e015      	b.n	810808c <CalculateAngles+0x244>
    else if (Yaw > 180)
 8108060:	edd7 7a02 	vldr	s15, [r7, #8]
 8108064:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 81080a0 <CalculateAngles+0x258>
 8108068:	eef4 7ac7 	vcmpe.f32	s15, s14
 810806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108070:	dc00      	bgt.n	8108074 <CalculateAngles+0x22c>
}
 8108072:	e00b      	b.n	810808c <CalculateAngles+0x244>
        Yaw = -180.0f - (180.0f - Yaw);
 8108074:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 81080a0 <CalculateAngles+0x258>
 8108078:	edd7 7a02 	vldr	s15, [r7, #8]
 810807c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108080:	ed9f 7a06 	vldr	s14, [pc, #24]	; 810809c <CalculateAngles+0x254>
 8108084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108088:	edc7 7a02 	vstr	s15, [r7, #8]
}
 810808c:	bf00      	nop
 810808e:	3730      	adds	r7, #48	; 0x30
 8108090:	46bd      	mov	sp, r7
 8108092:	bdb0      	pop	{r4, r5, r7, pc}
 8108094:	f3af 8000 	nop.w
 8108098:	40600000 	.word	0x40600000
 810809c:	c3340000 	.word	0xc3340000
 81080a0:	43340000 	.word	0x43340000
 81080a4:	1a63c1f8 	.word	0x1a63c1f8
 81080a8:	404ca5dc 	.word	0x404ca5dc

081080ac <UpdateAHRS>:

void UpdateAHRS(tAHRSDATA *inputAHRS, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 81080ac:	b580      	push	{r7, lr}
 81080ae:	b0b4      	sub	sp, #208	; 0xd0
 81080b0:	af00      	add	r7, sp, #0
 81080b2:	6278      	str	r0, [r7, #36]	; 0x24
 81080b4:	ed87 0a08 	vstr	s0, [r7, #32]
 81080b8:	edc7 0a07 	vstr	s1, [r7, #28]
 81080bc:	ed87 1a06 	vstr	s2, [r7, #24]
 81080c0:	edc7 1a05 	vstr	s3, [r7, #20]
 81080c4:	ed87 2a04 	vstr	s4, [r7, #16]
 81080c8:	edc7 2a03 	vstr	s5, [r7, #12]
 81080cc:	ed87 3a02 	vstr	s6, [r7, #8]
 81080d0:	edc7 3a01 	vstr	s7, [r7, #4]
 81080d4:	ed87 4a00 	vstr	s8, [r7]
	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;					// quaternion of sensor frame relative to auxiliary frame
 81080d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 81080dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81080e0:	f04f 0300 	mov.w	r3, #0
 81080e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81080e8:	f04f 0300 	mov.w	r3, #0
 81080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81080f0:	f04f 0300 	mov.w	r3, #0
 81080f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float sampleRate = 1/20.0;
 81080f8:	4b5c      	ldr	r3, [pc, #368]	; (810826c <UpdateAHRS+0x1c0>)
 81080fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float recipNorm;
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float hx, hy;
    float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
    float beta = 0.3;
 81080fe:	4b5c      	ldr	r3, [pc, #368]	; (8108270 <UpdateAHRS+0x1c4>)
 8108100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    q0 = inputAHRS->q0;
 8108104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108106:	695b      	ldr	r3, [r3, #20]
 8108108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    q1 = inputAHRS->q1;
 810810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810810e:	699b      	ldr	r3, [r3, #24]
 8108110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    q2 = inputAHRS->q2;
 8108114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108116:	69db      	ldr	r3, [r3, #28]
 8108118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    q3 = inputAHRS->q3;
 810811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810811e:	6a1b      	ldr	r3, [r3, #32]
 8108120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    sampleRate = inputAHRS->sampleRate;
 8108124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation) */
    if (( mx != 0.0f) || (my != 0.0f) || (mz != 0.0f))
 810812c:	edd7 7a02 	vldr	s15, [r7, #8]
 8108130:	eef5 7a40 	vcmp.f32	s15, #0.0
 8108134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108138:	d10e      	bne.n	8108158 <UpdateAHRS+0xac>
 810813a:	edd7 7a01 	vldr	s15, [r7, #4]
 810813e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8108142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108146:	d107      	bne.n	8108158 <UpdateAHRS+0xac>
 8108148:	edd7 7a00 	vldr	s15, [r7]
 810814c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8108150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108154:	f000 864c 	beq.w	8108df0 <UpdateAHRS+0xd44>
    {
        /* Rate of change of quaternion from gyroscope */
        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8108158:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 810815c:	eeb1 7a67 	vneg.f32	s14, s15
 8108160:	edd7 7a08 	vldr	s15, [r7, #32]
 8108164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108168:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 810816c:	edd7 7a07 	vldr	s15, [r7, #28]
 8108170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108178:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 810817c:	edd7 7a06 	vldr	s15, [r7, #24]
 8108180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108188:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810818c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8108190:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8108194:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108198:	edd7 7a08 	vldr	s15, [r7, #32]
 810819c:	ee27 7a27 	vmul.f32	s14, s14, s15
 81081a0:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 81081a4:	edd7 7a06 	vldr	s15, [r7, #24]
 81081a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81081ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 81081b0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 81081b4:	edd7 7a07 	vldr	s15, [r7, #28]
 81081b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81081bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 81081c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81081c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81081c8:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 81081cc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81081d0:	edd7 7a07 	vldr	s15, [r7, #28]
 81081d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 81081d8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 81081dc:	edd7 7a06 	vldr	s15, [r7, #24]
 81081e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81081e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81081e8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 81081ec:	edd7 7a08 	vldr	s15, [r7, #32]
 81081f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81081f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81081f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81081fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8108200:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8108204:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108208:	edd7 7a06 	vldr	s15, [r7, #24]
 810820c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108210:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8108214:	edd7 7a07 	vldr	s15, [r7, #28]
 8108218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810821c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108220:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8108224:	edd7 7a08 	vldr	s15, [r7, #32]
 8108228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810822c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108230:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8108234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8108238:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

        /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
        if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 810823c:	edd7 7a05 	vldr	s15, [r7, #20]
 8108240:	eef5 7a40 	vcmp.f32	s15, #0.0
 8108244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108248:	d114      	bne.n	8108274 <UpdateAHRS+0x1c8>
 810824a:	edd7 7a04 	vldr	s15, [r7, #16]
 810824e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8108252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108256:	d10d      	bne.n	8108274 <UpdateAHRS+0x1c8>
 8108258:	edd7 7a03 	vldr	s15, [r7, #12]
 810825c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8108260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108264:	f000 8548 	beq.w	8108cf8 <UpdateAHRS+0xc4c>
 8108268:	e004      	b.n	8108274 <UpdateAHRS+0x1c8>
 810826a:	bf00      	nop
 810826c:	3d4ccccd 	.word	0x3d4ccccd
 8108270:	3e99999a 	.word	0x3e99999a
        {

            /* Normalise accelerometer measurement */
            recipNorm = OneOverSqrt(ax * ax + ay * ay + az * az);
 8108274:	edd7 7a05 	vldr	s15, [r7, #20]
 8108278:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810827c:	edd7 7a04 	vldr	s15, [r7, #16]
 8108280:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108288:	edd7 7a03 	vldr	s15, [r7, #12]
 810828c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108294:	eeb0 0a67 	vmov.f32	s0, s15
 8108298:	f7ff fdb4 	bl	8107e04 <OneOverSqrt>
 810829c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            ax *= recipNorm;
 81082a0:	ed97 7a05 	vldr	s14, [r7, #20]
 81082a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81082a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082ac:	edc7 7a05 	vstr	s15, [r7, #20]
            ay *= recipNorm;
 81082b0:	ed97 7a04 	vldr	s14, [r7, #16]
 81082b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81082b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082bc:	edc7 7a04 	vstr	s15, [r7, #16]
            az *= recipNorm;
 81082c0:	ed97 7a03 	vldr	s14, [r7, #12]
 81082c4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 81082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082cc:	edc7 7a03 	vstr	s15, [r7, #12]

            /* Normalise magnetometer measurement */
            recipNorm = OneOverSqrt(mx * mx + my * my + mz * mz);
 81082d0:	edd7 7a02 	vldr	s15, [r7, #8]
 81082d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81082d8:	edd7 7a01 	vldr	s15, [r7, #4]
 81082dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81082e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81082e4:	edd7 7a00 	vldr	s15, [r7]
 81082e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81082ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 81082f0:	eeb0 0a67 	vmov.f32	s0, s15
 81082f4:	f7ff fd86 	bl	8107e04 <OneOverSqrt>
 81082f8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            mx *= recipNorm;
 81082fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8108300:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108308:	edc7 7a02 	vstr	s15, [r7, #8]
            my *= recipNorm;
 810830c:	ed97 7a01 	vldr	s14, [r7, #4]
 8108310:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108318:	edc7 7a01 	vstr	s15, [r7, #4]
            mz *= recipNorm;
 810831c:	ed97 7a00 	vldr	s14, [r7]
 8108320:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108328:	edc7 7a00 	vstr	s15, [r7]

            /* Auxiliary variables to avoid repeated arithmetic */
            _2q0mx = 2.0f * q0 * mx;
 810832c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108330:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108334:	ed97 7a02 	vldr	s14, [r7, #8]
 8108338:	ee67 7a27 	vmul.f32	s15, s14, s15
 810833c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            _2q0my = 2.0f * q0 * my;
 8108340:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108344:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108348:	ed97 7a01 	vldr	s14, [r7, #4]
 810834c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108350:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            _2q0mz = 2.0f * q0 * mz;
 8108354:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108358:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810835c:	ed97 7a00 	vldr	s14, [r7]
 8108360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108364:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            _2q1mx = 2.0f * q1 * mx;
 8108368:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 810836c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108370:	ed97 7a02 	vldr	s14, [r7, #8]
 8108374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108378:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            _2q0 = 2.0f * q0;
 810837c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108380:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108384:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            _2q1 = 2.0f * q1;
 8108388:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 810838c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108390:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            _2q2 = 2.0f * q2;
 8108394:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108398:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810839c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            _2q3 = 2.0f * q3;
 81083a0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81083a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81083a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            _2q0q2 = 2.0f * q0 * q2;
 81083ac:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81083b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81083b4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 81083b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083bc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            _2q2q3 = 2.0f * q2 * q3;
 81083c0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81083c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81083c8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 81083cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083d0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            q0q0 = q0 * q0;
 81083d4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81083d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81083dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            q0q1 = q0 * q1;
 81083e0:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81083e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81083e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083ec:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            q0q2 = q0 * q2;
 81083f0:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81083f4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81083f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083fc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            q0q3 = q0 * q3;
 8108400:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108404:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108408:	ee67 7a27 	vmul.f32	s15, s14, s15
 810840c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            q1q1 = q1 * q1;
 8108410:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108418:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            q1q2 = q1 * q2;
 810841c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108420:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108428:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            q1q3 = q1 * q3;
 810842c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108430:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108438:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
            q2q2 = q2 * q2;
 810843c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108440:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108444:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            q2q3 = q2 * q3;
 8108448:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 810844c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108454:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            q3q3 = q3 * q3;
 8108458:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 810845c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108460:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

            /* Reference direction of Earth's magnetic field */
            hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8108464:	ed97 7a02 	vldr	s14, [r7, #8]
 8108468:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 810846c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108470:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8108474:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810847c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108480:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8108484:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810848c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108490:	edd7 6a02 	vldr	s13, [r7, #8]
 8108494:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810849c:	ee37 7a27 	vadd.f32	s14, s14, s15
 81084a0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 81084a4:	edd7 7a01 	vldr	s15, [r7, #4]
 81084a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81084ac:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81084b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81084b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 81084b8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 81084bc:	edd7 7a00 	vldr	s15, [r7]
 81084c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81084c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81084c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81084cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 81084d0:	edd7 6a02 	vldr	s13, [r7, #8]
 81084d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81084d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81084dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 81084e0:	edd7 6a02 	vldr	s13, [r7, #8]
 81084e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 81084e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81084ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 81084f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 81084f4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 81084f8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81084fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108500:	edd7 6a01 	vldr	s13, [r7, #4]
 8108504:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8108508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810850c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108510:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8108514:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810851c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108520:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8108524:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810852c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108530:	edd7 6a01 	vldr	s13, [r7, #4]
 8108534:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810853c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108540:	edd7 6a01 	vldr	s13, [r7, #4]
 8108544:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810854c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108550:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8108554:	edd7 7a00 	vldr	s15, [r7]
 8108558:	ee66 6aa7 	vmul.f32	s13, s13, s15
 810855c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108568:	edd7 6a01 	vldr	s13, [r7, #4]
 810856c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108578:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            _2bx = sqrt(hx * hx + hy * hy);
 810857c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8108580:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8108584:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8108588:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810858c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108590:	ee17 0a90 	vmov	r0, s15
 8108594:	f7f8 f870 	bl	8100678 <__aeabi_f2d>
 8108598:	4602      	mov	r2, r0
 810859a:	460b      	mov	r3, r1
 810859c:	ec43 2b10 	vmov	d0, r2, r3
 81085a0:	f001 f934 	bl	810980c <sqrt>
 81085a4:	ec53 2b10 	vmov	r2, r3, d0
 81085a8:	4610      	mov	r0, r2
 81085aa:	4619      	mov	r1, r3
 81085ac:	f7f8 fbb4 	bl	8100d18 <__aeabi_d2f>
 81085b0:	4603      	mov	r3, r0
 81085b2:	64bb      	str	r3, [r7, #72]	; 0x48
            _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 81085b4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 81085b8:	eeb1 7a67 	vneg.f32	s14, s15
 81085bc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81085c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81085c4:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 81085c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81085cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81085d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81085d4:	edd7 6a00 	vldr	s13, [r7]
 81085d8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 81085dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81085e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81085e4:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 81085e8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81085ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81085f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81085f4:	edd7 6a00 	vldr	s13, [r7]
 81085f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 81085fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108604:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8108608:	edd7 7a01 	vldr	s15, [r7, #4]
 810860c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108610:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108618:	ee37 7a27 	vadd.f32	s14, s14, s15
 810861c:	edd7 6a00 	vldr	s13, [r7]
 8108620:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108628:	ee37 7a67 	vsub.f32	s14, s14, s15
 810862c:	edd7 6a00 	vldr	s13, [r7]
 8108630:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108638:	ee77 7a27 	vadd.f32	s15, s14, s15
 810863c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            _4bx = 2.0f * _2bx;
 8108640:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108644:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108648:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            _4bz = 2.0f * _2bz;
 810864c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108650:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108654:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            /* Gradient decent algorithm corrective step */
            s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8108658:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 810865c:	eeb1 7a67 	vneg.f32	s14, s15
 8108660:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108664:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108668:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 810866c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108670:	edd7 7a05 	vldr	s15, [r7, #20]
 8108674:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8108678:	ee27 7a27 	vmul.f32	s14, s14, s15
 810867c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8108680:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108684:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8108688:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810868c:	edd7 7a04 	vldr	s15, [r7, #16]
 8108690:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108694:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8108698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810869c:	ee37 7a27 	vadd.f32	s14, s14, s15
 81086a0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 81086a4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81086a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81086ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 81086b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81086b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 81086b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 81086bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 81086c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81086c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 81086c8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 81086cc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 81086d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 81086d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81086d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 81086dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 81086e0:	edd7 7a02 	vldr	s15, [r7, #8]
 81086e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 81086e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81086ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 81086f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81086f4:	eef1 6a67 	vneg.f32	s13, s15
 81086f8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81086fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108700:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108704:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108708:	ee66 7a27 	vmul.f32	s15, s12, s15
 810870c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108710:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108714:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108718:	ee36 6a67 	vsub.f32	s12, s12, s15
 810871c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108720:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108724:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108728:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 810872c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108730:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108734:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108738:	ee36 6a27 	vadd.f32	s12, s12, s15
 810873c:	edd7 7a01 	vldr	s15, [r7, #4]
 8108740:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108748:	ee37 7a27 	vadd.f32	s14, s14, s15
 810874c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108750:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108754:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108758:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 810875c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108760:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108764:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108768:	ee26 6a27 	vmul.f32	s12, s12, s15
 810876c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108770:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108774:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108778:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 810877c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108780:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108784:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108788:	ee36 6a27 	vadd.f32	s12, s12, s15
 810878c:	edd7 7a00 	vldr	s15, [r7]
 8108790:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108798:	ee77 7a27 	vadd.f32	s15, s14, s15
 810879c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 81087a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 81087a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 81087a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 81087ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 81087b0:	edd7 7a05 	vldr	s15, [r7, #20]
 81087b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81087b8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 81087bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 81087c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 81087c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 81087c8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 81087cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 81087d0:	edd7 7a04 	vldr	s15, [r7, #16]
 81087d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 81087d8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 81087dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81087e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81087e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81087e8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 81087ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 81087f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 81087f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81087f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81087fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108800:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108804:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108808:	ee36 6a67 	vsub.f32	s12, s12, s15
 810880c:	edd7 7a03 	vldr	s15, [r7, #12]
 8108810:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108818:	ee37 7a67 	vsub.f32	s14, s14, s15
 810881c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8108820:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108824:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108828:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 810882c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108830:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108834:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108838:	ee36 6a67 	vsub.f32	s12, s12, s15
 810883c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108840:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108844:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8108848:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 810884c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108850:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108854:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108858:	ee36 6a27 	vadd.f32	s12, s12, s15
 810885c:	edd7 7a02 	vldr	s15, [r7, #8]
 8108860:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108868:	ee37 7a27 	vadd.f32	s14, s14, s15
 810886c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108870:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108878:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 810887c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108880:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108884:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108888:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 810888c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108890:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108894:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108898:	ee26 6a27 	vmul.f32	s12, s12, s15
 810889c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 81088a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 81088a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 81088a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81088ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 81088b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 81088b4:	edd7 7a01 	vldr	s15, [r7, #4]
 81088b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 81088bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81088c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81088c4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 81088c8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81088cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81088d0:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 81088d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81088d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 81088dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 81088e0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 81088e4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 81088e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 81088ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81088f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 81088f4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 81088f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 81088fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108900:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108904:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108908:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 810890c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108910:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108914:	edd7 7a00 	vldr	s15, [r7]
 8108918:	ee76 7a67 	vsub.f32	s15, s12, s15
 810891c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108924:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8108928:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 810892c:	eeb1 7a67 	vneg.f32	s14, s15
 8108930:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108934:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108938:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 810893c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108940:	edd7 7a05 	vldr	s15, [r7, #20]
 8108944:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8108948:	ee27 7a27 	vmul.f32	s14, s14, s15
 810894c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8108950:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108954:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8108958:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810895c:	edd7 7a04 	vldr	s15, [r7, #16]
 8108960:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108964:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8108968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810896c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108970:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108974:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8108978:	ee67 6aa6 	vmul.f32	s13, s15, s13
 810897c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108980:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108984:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8108988:	ee36 6a67 	vsub.f32	s12, s12, s15
 810898c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108990:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108994:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108998:	edd7 7a03 	vldr	s15, [r7, #12]
 810899c:	ee76 7a67 	vsub.f32	s15, s12, s15
 81089a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81089a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81089a8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 81089ac:	eef1 6a67 	vneg.f32	s13, s15
 81089b0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81089b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81089b8:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 81089bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81089c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 81089c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 81089c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 81089cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81089d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 81089d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 81089d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 81089dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81089e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 81089e4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 81089e8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 81089ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 81089f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81089f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 81089f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 81089fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8108a00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108a0c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108a10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108a14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108a18:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108a1c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108a20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108a24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108a28:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108a2c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108a30:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108a34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108a38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108a3c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108a40:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8108a44:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108a48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108a4c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108a50:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8108a58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108a64:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108a68:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108a6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108a70:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8108a74:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108a80:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8108a84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108a88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108a8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108a90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108a94:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108a98:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108a9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108aa0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108aa4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108aa8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108aac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108ab0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108ab4:	edd7 7a00 	vldr	s15, [r7]
 8108ab8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108ac4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8108ac8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108acc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8108ad0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8108ad4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8108adc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108ae0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8108ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108ae8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8108aec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108af0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8108af4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108af8:	edd7 7a04 	vldr	s15, [r7, #16]
 8108afc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108b00:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8108b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108b0c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8108b10:	eef1 6a67 	vneg.f32	s13, s15
 8108b14:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108b1c:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108b20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108b24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108b28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108b2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8108b30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108b34:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108b38:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108b3c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108b40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108b44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108b48:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8108b4c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8108b50:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108b58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108b5c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8108b64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108b70:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108b74:	eef1 6a67 	vneg.f32	s13, s15
 8108b78:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108b7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108b80:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108b84:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108b88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108b8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108b90:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108b94:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108b98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108b9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108ba0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108ba4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108ba8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8108bac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108bb0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108bb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108bb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108bbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8108bc0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108bcc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108bd0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108bd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108bd8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8108bdc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108be0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108be4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108be8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108bec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108bf0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108bf4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108bf8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108bfc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108c00:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108c04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108c08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108c0c:	edd7 7a00 	vldr	s15, [r7]
 8108c10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108c1c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* normalise step magnitude */
            recipNorm = OneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8108c20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8108c24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8108c28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8108c2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108c34:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8108c38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108c40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8108c44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8108c50:	f7ff f8d8 	bl	8107e04 <OneOverSqrt>
 8108c54:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            s0 *= recipNorm;
 8108c58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8108c5c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c64:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            s1 *= recipNorm;
 8108c68:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8108c6c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c74:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            s2 *= recipNorm;
 8108c78:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8108c7c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            s3 *= recipNorm;
 8108c88:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8108c8c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* Apply feedback step */
            qDot1 -= beta * s0;
 8108c98:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8108c9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8108ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ca4:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8108ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108cac:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
            qDot2 -= beta * s1;
 8108cb0:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8108cb4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8108cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cbc:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8108cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108cc4:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
            qDot3 -= beta * s2;
 8108cc8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8108ccc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8108cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cd4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8108cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108cdc:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
            qDot4 -= beta * s3;
 8108ce0:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8108ce4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8108ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cec:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8108cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108cf4:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
        }

        /* Integrate rate of change of quaternion to yield quaternion */
        q0 += qDot1 * sampleRate;
 8108cf8:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8108cfc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d04:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108d0c:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
        q1 += qDot2 * sampleRate;
 8108d10:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8108d14:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d1c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108d24:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
        q2 += qDot3 * sampleRate;
 8108d28:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8108d2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8108d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108d3c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        q3 += qDot4 * sampleRate;
 8108d40:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8108d44:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8108d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d4c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8108d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108d54:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

        /* Normalise quaternion */
        recipNorm = OneOverSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8108d58:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108d5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8108d60:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108d6c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108d70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108d78:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108d7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108d84:	eeb0 0a67 	vmov.f32	s0, s15
 8108d88:	f7ff f83c 	bl	8107e04 <OneOverSqrt>
 8108d8c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
        q0 *= recipNorm;
 8108d90:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108d94:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d9c:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
        q1 *= recipNorm;
 8108da0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108da4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dac:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
        q2 *= recipNorm;
 8108db0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8108db4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dbc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        q3 *= recipNorm;
 8108dc0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8108dc4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dcc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

        inputAHRS->q0 = q0;
 8108dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108dd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8108dd6:	615a      	str	r2, [r3, #20]
        inputAHRS->q1 = q1;
 8108dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8108dde:	619a      	str	r2, [r3, #24]
        inputAHRS->q2 = q2;
 8108de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8108de6:	61da      	str	r2, [r3, #28]
        inputAHRS->q3 = q3;
 8108de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108dea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8108dee:	621a      	str	r2, [r3, #32]
        /* Update IMU algorithm */
        // UpdateIMU();
    }

    /* Calculate new angles */
    CalculateAngles(inputAHRS);
 8108df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8108df2:	f7ff f829 	bl	8107e48 <CalculateAngles>
}
 8108df6:	bf00      	nop
 8108df8:	37d0      	adds	r7, #208	; 0xd0
 8108dfa:	46bd      	mov	sp, r7
 8108dfc:	bd80      	pop	{r7, pc}
 8108dfe:	bf00      	nop

08108e00 <initAHRS>:

void initAHRS(tAHRSDATA *imuAHRS)
{
 8108e00:	b480      	push	{r7}
 8108e02:	b083      	sub	sp, #12
 8108e04:	af00      	add	r7, sp, #0
 8108e06:	6078      	str	r0, [r7, #4]
	imuAHRS->q0 = 1;
 8108e08:	687b      	ldr	r3, [r7, #4]
 8108e0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8108e0e:	615a      	str	r2, [r3, #20]
	imuAHRS->q1 = 0;
 8108e10:	687b      	ldr	r3, [r7, #4]
 8108e12:	f04f 0200 	mov.w	r2, #0
 8108e16:	619a      	str	r2, [r3, #24]
	imuAHRS->q2 = 0;
 8108e18:	687b      	ldr	r3, [r7, #4]
 8108e1a:	f04f 0200 	mov.w	r2, #0
 8108e1e:	61da      	str	r2, [r3, #28]
	imuAHRS->q3 = 0;
 8108e20:	687b      	ldr	r3, [r7, #4]
 8108e22:	f04f 0200 	mov.w	r2, #0
 8108e26:	621a      	str	r2, [r3, #32]
	imuAHRS->sampleRate = 1/20.0;
 8108e28:	687b      	ldr	r3, [r7, #4]
 8108e2a:	4a04      	ldr	r2, [pc, #16]	; (8108e3c <initAHRS+0x3c>)
 8108e2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8108e2e:	bf00      	nop
 8108e30:	370c      	adds	r7, #12
 8108e32:	46bd      	mov	sp, r7
 8108e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e38:	4770      	bx	lr
 8108e3a:	bf00      	nop
 8108e3c:	3d4ccccd 	.word	0x3d4ccccd

08108e40 <runAHRSCycle>:

void runAHRSCycle(void)
{
 8108e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108e42:	b09b      	sub	sp, #108	; 0x6c
 8108e44:	af14      	add	r7, sp, #80	; 0x50
	if (HAL_GetTick() - lastChasisIMUMeasurement > 50)
 8108e46:	f7f8 fe89 	bl	8101b5c <HAL_GetTick>
 8108e4a:	4602      	mov	r2, r0
 8108e4c:	4bba      	ldr	r3, [pc, #744]	; (8109138 <runAHRSCycle+0x2f8>)
 8108e4e:	681b      	ldr	r3, [r3, #0]
 8108e50:	1ad3      	subs	r3, r2, r3
 8108e52:	2b32      	cmp	r3, #50	; 0x32
 8108e54:	f240 815a 	bls.w	810910c <runAHRSCycle+0x2cc>
	{
		int16_t AccData[3], GyroData[3], MagData[3];
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 8108e58:	4eb8      	ldr	r6, [pc, #736]	; (810913c <runAHRSCycle+0x2fc>)
 8108e5a:	f107 0308 	add.w	r3, r7, #8
 8108e5e:	9312      	str	r3, [sp, #72]	; 0x48
 8108e60:	463b      	mov	r3, r7
 8108e62:	9311      	str	r3, [sp, #68]	; 0x44
 8108e64:	f107 0310 	add.w	r3, r7, #16
 8108e68:	9310      	str	r3, [sp, #64]	; 0x40
 8108e6a:	466d      	mov	r5, sp
 8108e6c:	f106 0410 	add.w	r4, r6, #16
 8108e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108e7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8108e80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8108e84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8108e88:	f7fc fdd2 	bl	8105a30 <MPU9250_GetData>
		chasisIMUAHRS.AccData[0] = 9.80665 * AccData[0] / 16384.0;
 8108e8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8108e90:	4618      	mov	r0, r3
 8108e92:	f7f7 fbdf 	bl	8100654 <__aeabi_i2d>
 8108e96:	a3a0      	add	r3, pc, #640	; (adr r3, 8109118 <runAHRSCycle+0x2d8>)
 8108e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e9c:	f7f7 fc44 	bl	8100728 <__aeabi_dmul>
 8108ea0:	4602      	mov	r2, r0
 8108ea2:	460b      	mov	r3, r1
 8108ea4:	4610      	mov	r0, r2
 8108ea6:	4619      	mov	r1, r3
 8108ea8:	f04f 0200 	mov.w	r2, #0
 8108eac:	4ba4      	ldr	r3, [pc, #656]	; (8109140 <runAHRSCycle+0x300>)
 8108eae:	f7f7 fd65 	bl	810097c <__aeabi_ddiv>
 8108eb2:	4602      	mov	r2, r0
 8108eb4:	460b      	mov	r3, r1
 8108eb6:	4610      	mov	r0, r2
 8108eb8:	4619      	mov	r1, r3
 8108eba:	f7f7 ff2d 	bl	8100d18 <__aeabi_d2f>
 8108ebe:	4603      	mov	r3, r0
 8108ec0:	4aa0      	ldr	r2, [pc, #640]	; (8109144 <runAHRSCycle+0x304>)
 8108ec2:	6293      	str	r3, [r2, #40]	; 0x28
		chasisIMUAHRS.AccData[1] = 9.80665 * AccData[1] / 16384.0;
 8108ec4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8108ec8:	4618      	mov	r0, r3
 8108eca:	f7f7 fbc3 	bl	8100654 <__aeabi_i2d>
 8108ece:	a392      	add	r3, pc, #584	; (adr r3, 8109118 <runAHRSCycle+0x2d8>)
 8108ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ed4:	f7f7 fc28 	bl	8100728 <__aeabi_dmul>
 8108ed8:	4602      	mov	r2, r0
 8108eda:	460b      	mov	r3, r1
 8108edc:	4610      	mov	r0, r2
 8108ede:	4619      	mov	r1, r3
 8108ee0:	f04f 0200 	mov.w	r2, #0
 8108ee4:	4b96      	ldr	r3, [pc, #600]	; (8109140 <runAHRSCycle+0x300>)
 8108ee6:	f7f7 fd49 	bl	810097c <__aeabi_ddiv>
 8108eea:	4602      	mov	r2, r0
 8108eec:	460b      	mov	r3, r1
 8108eee:	4610      	mov	r0, r2
 8108ef0:	4619      	mov	r1, r3
 8108ef2:	f7f7 ff11 	bl	8100d18 <__aeabi_d2f>
 8108ef6:	4603      	mov	r3, r0
 8108ef8:	4a92      	ldr	r2, [pc, #584]	; (8109144 <runAHRSCycle+0x304>)
 8108efa:	62d3      	str	r3, [r2, #44]	; 0x2c
		chasisIMUAHRS.AccData[2] = 9.80665 * AccData[2] / 16384.0;
 8108efc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8108f00:	4618      	mov	r0, r3
 8108f02:	f7f7 fba7 	bl	8100654 <__aeabi_i2d>
 8108f06:	a384      	add	r3, pc, #528	; (adr r3, 8109118 <runAHRSCycle+0x2d8>)
 8108f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f0c:	f7f7 fc0c 	bl	8100728 <__aeabi_dmul>
 8108f10:	4602      	mov	r2, r0
 8108f12:	460b      	mov	r3, r1
 8108f14:	4610      	mov	r0, r2
 8108f16:	4619      	mov	r1, r3
 8108f18:	f04f 0200 	mov.w	r2, #0
 8108f1c:	4b88      	ldr	r3, [pc, #544]	; (8109140 <runAHRSCycle+0x300>)
 8108f1e:	f7f7 fd2d 	bl	810097c <__aeabi_ddiv>
 8108f22:	4602      	mov	r2, r0
 8108f24:	460b      	mov	r3, r1
 8108f26:	4610      	mov	r0, r2
 8108f28:	4619      	mov	r1, r3
 8108f2a:	f7f7 fef5 	bl	8100d18 <__aeabi_d2f>
 8108f2e:	4603      	mov	r3, r0
 8108f30:	4a84      	ldr	r2, [pc, #528]	; (8109144 <runAHRSCycle+0x304>)
 8108f32:	6313      	str	r3, [r2, #48]	; 0x30

		chasisIMUAHRS.GyroData[0] = GyroData[0] / 131.0; // Degrees / Sec
 8108f34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8108f38:	4618      	mov	r0, r3
 8108f3a:	f7f7 fb8b 	bl	8100654 <__aeabi_i2d>
 8108f3e:	a378      	add	r3, pc, #480	; (adr r3, 8109120 <runAHRSCycle+0x2e0>)
 8108f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f44:	f7f7 fd1a 	bl	810097c <__aeabi_ddiv>
 8108f48:	4602      	mov	r2, r0
 8108f4a:	460b      	mov	r3, r1
 8108f4c:	4610      	mov	r0, r2
 8108f4e:	4619      	mov	r1, r3
 8108f50:	f7f7 fee2 	bl	8100d18 <__aeabi_d2f>
 8108f54:	4603      	mov	r3, r0
 8108f56:	4a7b      	ldr	r2, [pc, #492]	; (8109144 <runAHRSCycle+0x304>)
 8108f58:	6353      	str	r3, [r2, #52]	; 0x34
		chasisIMUAHRS.GyroData[1] = GyroData[1] / 131.0;
 8108f5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8108f5e:	4618      	mov	r0, r3
 8108f60:	f7f7 fb78 	bl	8100654 <__aeabi_i2d>
 8108f64:	a36e      	add	r3, pc, #440	; (adr r3, 8109120 <runAHRSCycle+0x2e0>)
 8108f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f6a:	f7f7 fd07 	bl	810097c <__aeabi_ddiv>
 8108f6e:	4602      	mov	r2, r0
 8108f70:	460b      	mov	r3, r1
 8108f72:	4610      	mov	r0, r2
 8108f74:	4619      	mov	r1, r3
 8108f76:	f7f7 fecf 	bl	8100d18 <__aeabi_d2f>
 8108f7a:	4603      	mov	r3, r0
 8108f7c:	4a71      	ldr	r2, [pc, #452]	; (8109144 <runAHRSCycle+0x304>)
 8108f7e:	6393      	str	r3, [r2, #56]	; 0x38
		chasisIMUAHRS.GyroData[2] = GyroData[2] / 131.0;
 8108f80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8108f84:	4618      	mov	r0, r3
 8108f86:	f7f7 fb65 	bl	8100654 <__aeabi_i2d>
 8108f8a:	a365      	add	r3, pc, #404	; (adr r3, 8109120 <runAHRSCycle+0x2e0>)
 8108f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f90:	f7f7 fcf4 	bl	810097c <__aeabi_ddiv>
 8108f94:	4602      	mov	r2, r0
 8108f96:	460b      	mov	r3, r1
 8108f98:	4610      	mov	r0, r2
 8108f9a:	4619      	mov	r1, r3
 8108f9c:	f7f7 febc 	bl	8100d18 <__aeabi_d2f>
 8108fa0:	4603      	mov	r3, r0
 8108fa2:	4a68      	ldr	r2, [pc, #416]	; (8109144 <runAHRSCycle+0x304>)
 8108fa4:	63d3      	str	r3, [r2, #60]	; 0x3c

		chasisIMUAHRS.MagData[0] = MagData[0] * 0.6;
 8108fa6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8108faa:	4618      	mov	r0, r3
 8108fac:	f7f7 fb52 	bl	8100654 <__aeabi_i2d>
 8108fb0:	a35d      	add	r3, pc, #372	; (adr r3, 8109128 <runAHRSCycle+0x2e8>)
 8108fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fb6:	f7f7 fbb7 	bl	8100728 <__aeabi_dmul>
 8108fba:	4602      	mov	r2, r0
 8108fbc:	460b      	mov	r3, r1
 8108fbe:	4610      	mov	r0, r2
 8108fc0:	4619      	mov	r1, r3
 8108fc2:	f7f7 fea9 	bl	8100d18 <__aeabi_d2f>
 8108fc6:	4603      	mov	r3, r0
 8108fc8:	4a5e      	ldr	r2, [pc, #376]	; (8109144 <runAHRSCycle+0x304>)
 8108fca:	6413      	str	r3, [r2, #64]	; 0x40
		chasisIMUAHRS.MagData[1] = MagData[1] * 0.6;
 8108fcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108fd0:	4618      	mov	r0, r3
 8108fd2:	f7f7 fb3f 	bl	8100654 <__aeabi_i2d>
 8108fd6:	a354      	add	r3, pc, #336	; (adr r3, 8109128 <runAHRSCycle+0x2e8>)
 8108fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fdc:	f7f7 fba4 	bl	8100728 <__aeabi_dmul>
 8108fe0:	4602      	mov	r2, r0
 8108fe2:	460b      	mov	r3, r1
 8108fe4:	4610      	mov	r0, r2
 8108fe6:	4619      	mov	r1, r3
 8108fe8:	f7f7 fe96 	bl	8100d18 <__aeabi_d2f>
 8108fec:	4603      	mov	r3, r0
 8108fee:	4a55      	ldr	r2, [pc, #340]	; (8109144 <runAHRSCycle+0x304>)
 8108ff0:	6453      	str	r3, [r2, #68]	; 0x44
		chasisIMUAHRS.MagData[2] = MagData[2] * 0.6;
 8108ff2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8108ff6:	4618      	mov	r0, r3
 8108ff8:	f7f7 fb2c 	bl	8100654 <__aeabi_i2d>
 8108ffc:	a34a      	add	r3, pc, #296	; (adr r3, 8109128 <runAHRSCycle+0x2e8>)
 8108ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109002:	f7f7 fb91 	bl	8100728 <__aeabi_dmul>
 8109006:	4602      	mov	r2, r0
 8109008:	460b      	mov	r3, r1
 810900a:	4610      	mov	r0, r2
 810900c:	4619      	mov	r1, r3
 810900e:	f7f7 fe83 	bl	8100d18 <__aeabi_d2f>
 8109012:	4603      	mov	r3, r0
 8109014:	4a4b      	ldr	r2, [pc, #300]	; (8109144 <runAHRSCycle+0x304>)
 8109016:	6493      	str	r3, [r2, #72]	; 0x48

		UpdateAHRS(&chasisIMUAHRS,
				chasisIMUAHRS.GyroData[0] * AHRSIMU_DEG2RAD, chasisIMUAHRS.GyroData[1] * AHRSIMU_DEG2RAD,
 8109018:	4b4a      	ldr	r3, [pc, #296]	; (8109144 <runAHRSCycle+0x304>)
 810901a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810901c:	4618      	mov	r0, r3
 810901e:	f7f7 fb2b 	bl	8100678 <__aeabi_f2d>
 8109022:	a343      	add	r3, pc, #268	; (adr r3, 8109130 <runAHRSCycle+0x2f0>)
 8109024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109028:	f7f7 fb7e 	bl	8100728 <__aeabi_dmul>
 810902c:	4602      	mov	r2, r0
 810902e:	460b      	mov	r3, r1
 8109030:	4610      	mov	r0, r2
 8109032:	4619      	mov	r1, r3
 8109034:	f04f 0200 	mov.w	r2, #0
 8109038:	4b43      	ldr	r3, [pc, #268]	; (8109148 <runAHRSCycle+0x308>)
 810903a:	f7f7 fc9f 	bl	810097c <__aeabi_ddiv>
 810903e:	4602      	mov	r2, r0
 8109040:	460b      	mov	r3, r1
		UpdateAHRS(&chasisIMUAHRS,
 8109042:	4610      	mov	r0, r2
 8109044:	4619      	mov	r1, r3
 8109046:	f7f7 fe67 	bl	8100d18 <__aeabi_d2f>
 810904a:	4604      	mov	r4, r0
				chasisIMUAHRS.GyroData[0] * AHRSIMU_DEG2RAD, chasisIMUAHRS.GyroData[1] * AHRSIMU_DEG2RAD,
 810904c:	4b3d      	ldr	r3, [pc, #244]	; (8109144 <runAHRSCycle+0x304>)
 810904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109050:	4618      	mov	r0, r3
 8109052:	f7f7 fb11 	bl	8100678 <__aeabi_f2d>
 8109056:	a336      	add	r3, pc, #216	; (adr r3, 8109130 <runAHRSCycle+0x2f0>)
 8109058:	e9d3 2300 	ldrd	r2, r3, [r3]
 810905c:	f7f7 fb64 	bl	8100728 <__aeabi_dmul>
 8109060:	4602      	mov	r2, r0
 8109062:	460b      	mov	r3, r1
 8109064:	4610      	mov	r0, r2
 8109066:	4619      	mov	r1, r3
 8109068:	f04f 0200 	mov.w	r2, #0
 810906c:	4b36      	ldr	r3, [pc, #216]	; (8109148 <runAHRSCycle+0x308>)
 810906e:	f7f7 fc85 	bl	810097c <__aeabi_ddiv>
 8109072:	4602      	mov	r2, r0
 8109074:	460b      	mov	r3, r1
		UpdateAHRS(&chasisIMUAHRS,
 8109076:	4610      	mov	r0, r2
 8109078:	4619      	mov	r1, r3
 810907a:	f7f7 fe4d 	bl	8100d18 <__aeabi_d2f>
 810907e:	4605      	mov	r5, r0
				chasisIMUAHRS.GyroData[2] * AHRSIMU_DEG2RAD,
 8109080:	4b30      	ldr	r3, [pc, #192]	; (8109144 <runAHRSCycle+0x304>)
 8109082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109084:	4618      	mov	r0, r3
 8109086:	f7f7 faf7 	bl	8100678 <__aeabi_f2d>
 810908a:	a329      	add	r3, pc, #164	; (adr r3, 8109130 <runAHRSCycle+0x2f0>)
 810908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109090:	f7f7 fb4a 	bl	8100728 <__aeabi_dmul>
 8109094:	4602      	mov	r2, r0
 8109096:	460b      	mov	r3, r1
 8109098:	4610      	mov	r0, r2
 810909a:	4619      	mov	r1, r3
 810909c:	f04f 0200 	mov.w	r2, #0
 81090a0:	4b29      	ldr	r3, [pc, #164]	; (8109148 <runAHRSCycle+0x308>)
 81090a2:	f7f7 fc6b 	bl	810097c <__aeabi_ddiv>
 81090a6:	4602      	mov	r2, r0
 81090a8:	460b      	mov	r3, r1
		UpdateAHRS(&chasisIMUAHRS,
 81090aa:	4610      	mov	r0, r2
 81090ac:	4619      	mov	r1, r3
 81090ae:	f7f7 fe33 	bl	8100d18 <__aeabi_d2f>
 81090b2:	4602      	mov	r2, r0
 81090b4:	4b23      	ldr	r3, [pc, #140]	; (8109144 <runAHRSCycle+0x304>)
 81090b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 81090ba:	4b22      	ldr	r3, [pc, #136]	; (8109144 <runAHRSCycle+0x304>)
 81090bc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 81090c0:	4b20      	ldr	r3, [pc, #128]	; (8109144 <runAHRSCycle+0x304>)
 81090c2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 81090c6:	4b1f      	ldr	r3, [pc, #124]	; (8109144 <runAHRSCycle+0x304>)
 81090c8:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 81090cc:	4b1d      	ldr	r3, [pc, #116]	; (8109144 <runAHRSCycle+0x304>)
 81090ce:	edd3 5a11 	vldr	s11, [r3, #68]	; 0x44
 81090d2:	4b1c      	ldr	r3, [pc, #112]	; (8109144 <runAHRSCycle+0x304>)
 81090d4:	ed93 5a12 	vldr	s10, [r3, #72]	; 0x48
 81090d8:	eeb0 4a45 	vmov.f32	s8, s10
 81090dc:	eef0 3a65 	vmov.f32	s7, s11
 81090e0:	eeb0 3a46 	vmov.f32	s6, s12
 81090e4:	eef0 2a66 	vmov.f32	s5, s13
 81090e8:	eeb0 2a47 	vmov.f32	s4, s14
 81090ec:	eef0 1a67 	vmov.f32	s3, s15
 81090f0:	ee01 2a10 	vmov	s2, r2
 81090f4:	ee00 5a90 	vmov	s1, r5
 81090f8:	ee00 4a10 	vmov	s0, r4
 81090fc:	4811      	ldr	r0, [pc, #68]	; (8109144 <runAHRSCycle+0x304>)
 81090fe:	f7fe ffd5 	bl	81080ac <UpdateAHRS>
				chasisIMUAHRS.AccData[0], chasisIMUAHRS.AccData[1], chasisIMUAHRS.AccData[2],
				chasisIMUAHRS.MagData[0], chasisIMUAHRS.MagData[1], chasisIMUAHRS.MagData[2]);
		lastChasisIMUMeasurement = HAL_GetTick();
 8109102:	f7f8 fd2b 	bl	8101b5c <HAL_GetTick>
 8109106:	4603      	mov	r3, r0
 8109108:	4a0b      	ldr	r2, [pc, #44]	; (8109138 <runAHRSCycle+0x2f8>)
 810910a:	6013      	str	r3, [r2, #0]
	}
}
 810910c:	bf00      	nop
 810910e:	371c      	adds	r7, #28
 8109110:	46bd      	mov	sp, r7
 8109112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109114:	f3af 8000 	nop.w
 8109118:	3a92a305 	.word	0x3a92a305
 810911c:	40239d01 	.word	0x40239d01
 8109120:	00000000 	.word	0x00000000
 8109124:	40606000 	.word	0x40606000
 8109128:	33333333 	.word	0x33333333
 810912c:	3fe33333 	.word	0x3fe33333
 8109130:	54442d18 	.word	0x54442d18
 8109134:	400921fb 	.word	0x400921fb
 8109138:	100002b0 	.word	0x100002b0
 810913c:	10000420 	.word	0x10000420
 8109140:	40d00000 	.word	0x40d00000
 8109144:	100004b4 	.word	0x100004b4
 8109148:	40668000 	.word	0x40668000

0810914c <updatePIDs>:
{

}

void updatePIDs(void)
{
 810914c:	b590      	push	{r4, r7, lr}
 810914e:	b097      	sub	sp, #92	; 0x5c
 8109150:	af12      	add	r7, sp, #72	; 0x48
	pitchPID.updateCycle(chasisIMUAHRS.Pitch);
 8109152:	4b2d      	ldr	r3, [pc, #180]	; (8109208 <updatePIDs+0xbc>)
 8109154:	edd3 7a01 	vldr	s15, [r3, #4]
 8109158:	eeb0 0a67 	vmov.f32	s0, s15
 810915c:	482b      	ldr	r0, [pc, #172]	; (810920c <updatePIDs+0xc0>)
 810915e:	f7f7 fea5 	bl	8100eac <_ZN13PIDController11updateCycleEf>
	rollPID.updateCycle(chasisIMUAHRS.Roll);
 8109162:	4b29      	ldr	r3, [pc, #164]	; (8109208 <updatePIDs+0xbc>)
 8109164:	edd3 7a00 	vldr	s15, [r3]
 8109168:	eeb0 0a67 	vmov.f32	s0, s15
 810916c:	4828      	ldr	r0, [pc, #160]	; (8109210 <updatePIDs+0xc4>)
 810916e:	f7f7 fe9d 	bl	8100eac <_ZN13PIDController11updateCycleEf>
	if (HAL_GetTick() - lastPWMUpdate > 50)
 8109172:	f7f8 fcf3 	bl	8101b5c <HAL_GetTick>
 8109176:	4602      	mov	r2, r0
 8109178:	4b26      	ldr	r3, [pc, #152]	; (8109214 <updatePIDs+0xc8>)
 810917a:	681b      	ldr	r3, [r3, #0]
 810917c:	1ad3      	subs	r3, r2, r3
 810917e:	2b32      	cmp	r3, #50	; 0x32
 8109180:	bf8c      	ite	hi
 8109182:	2301      	movhi	r3, #1
 8109184:	2300      	movls	r3, #0
 8109186:	b2db      	uxtb	r3, r3
 8109188:	2b00      	cmp	r3, #0
 810918a:	d039      	beq.n	8109200 <updatePIDs+0xb4>
	{
		float rollOutput = rollPID.getOutput();
 810918c:	4820      	ldr	r0, [pc, #128]	; (8109210 <updatePIDs+0xc4>)
 810918e:	f7f7 fefb 	bl	8100f88 <_ZN13PIDController9getOutputEv>
 8109192:	ed87 0a02 	vstr	s0, [r7, #8]
		uint32_t currentPWM = TIM2->CCR1;
 8109196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810919a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810919c:	607b      	str	r3, [r7, #4]
		uint32_t newPWM = (uint32_t)(currentPWM - 10 * (int (rollOutput)));
 810919e:	edd7 7a02 	vldr	s15, [r7, #8]
 81091a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 81091a6:	ee17 2a90 	vmov	r2, s15
 81091aa:	4613      	mov	r3, r2
 81091ac:	009b      	lsls	r3, r3, #2
 81091ae:	4413      	add	r3, r2
 81091b0:	005b      	lsls	r3, r3, #1
 81091b2:	461a      	mov	r2, r3
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	1a9b      	subs	r3, r3, r2
 81091b8:	60fb      	str	r3, [r7, #12]
		if (newPWM < 500)
 81091ba:	68fb      	ldr	r3, [r7, #12]
 81091bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81091c0:	d203      	bcs.n	81091ca <updatePIDs+0x7e>
		{
			newPWM = 500;
 81091c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81091c6:	60fb      	str	r3, [r7, #12]
 81091c8:	e007      	b.n	81091da <updatePIDs+0x8e>
		}
		else if (newPWM > 2500)
 81091ca:	68fb      	ldr	r3, [r7, #12]
 81091cc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 81091d0:	4293      	cmp	r3, r2
 81091d2:	d902      	bls.n	81091da <updatePIDs+0x8e>
		{
			newPWM = 2500;
 81091d4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 81091d8:	60fb      	str	r3, [r7, #12]
		}
		updatePWM(chasisServo, newPWM);
 81091da:	4c0f      	ldr	r4, [pc, #60]	; (8109218 <updatePIDs+0xcc>)
 81091dc:	68fb      	ldr	r3, [r7, #12]
 81091de:	9311      	str	r3, [sp, #68]	; 0x44
 81091e0:	4668      	mov	r0, sp
 81091e2:	f104 0310 	add.w	r3, r4, #16
 81091e6:	2244      	movs	r2, #68	; 0x44
 81091e8:	4619      	mov	r1, r3
 81091ea:	f001 f8f7 	bl	810a3dc <memcpy>
 81091ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81091f2:	f000 fab1 	bl	8109758 <updatePWM>
		lastPWMUpdate = HAL_GetTick();
 81091f6:	f7f8 fcb1 	bl	8101b5c <HAL_GetTick>
 81091fa:	4603      	mov	r3, r0
 81091fc:	4a05      	ldr	r2, [pc, #20]	; (8109214 <updatePIDs+0xc8>)
 81091fe:	6013      	str	r3, [r2, #0]
	}
}
 8109200:	bf00      	nop
 8109202:	3714      	adds	r7, #20
 8109204:	46bd      	mov	sp, r7
 8109206:	bd90      	pop	{r4, r7, pc}
 8109208:	100004b4 	.word	0x100004b4
 810920c:	100002d8 	.word	0x100002d8
 8109210:	10000300 	.word	0x10000300
 8109214:	10000328 	.word	0x10000328
 8109218:	10000570 	.word	0x10000570

0810921c <_Z41__static_initialization_and_destruction_0ii>:
 810921c:	b580      	push	{r7, lr}
 810921e:	b082      	sub	sp, #8
 8109220:	af00      	add	r7, sp, #0
 8109222:	6078      	str	r0, [r7, #4]
 8109224:	6039      	str	r1, [r7, #0]
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	2b01      	cmp	r3, #1
 810922a:	d11a      	bne.n	8109262 <_Z41__static_initialization_and_destruction_0ii+0x46>
 810922c:	683b      	ldr	r3, [r7, #0]
 810922e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8109232:	4293      	cmp	r3, r2
 8109234:	d115      	bne.n	8109262 <_Z41__static_initialization_and_destruction_0ii+0x46>
PIDController pitchPID(0, 0.5, 0, 0);
 8109236:	eddf 1a14 	vldr	s3, [pc, #80]	; 8109288 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 810923a:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8109288 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 810923e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8109242:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8109288 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8109246:	4811      	ldr	r0, [pc, #68]	; (810928c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8109248:	f7f7 fdec 	bl	8100e24 <_ZN13PIDControllerC1Effff>
PIDController rollPID(0, 0.5, 0, 0);
 810924c:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8109288 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8109250:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8109288 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8109254:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8109258:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8109288 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 810925c:	480c      	ldr	r0, [pc, #48]	; (8109290 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 810925e:	f7f7 fde1 	bl	8100e24 <_ZN13PIDControllerC1Effff>
 8109262:	687b      	ldr	r3, [r7, #4]
 8109264:	2b00      	cmp	r3, #0
 8109266:	d10a      	bne.n	810927e <_Z41__static_initialization_and_destruction_0ii+0x62>
 8109268:	683b      	ldr	r3, [r7, #0]
 810926a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810926e:	4293      	cmp	r3, r2
 8109270:	d105      	bne.n	810927e <_Z41__static_initialization_and_destruction_0ii+0x62>
 8109272:	4807      	ldr	r0, [pc, #28]	; (8109290 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8109274:	f7f7 fdfa 	bl	8100e6c <_ZN13PIDControllerD1Ev>
PIDController pitchPID(0, 0.5, 0, 0);
 8109278:	4804      	ldr	r0, [pc, #16]	; (810928c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 810927a:	f7f7 fdf7 	bl	8100e6c <_ZN13PIDControllerD1Ev>
}
 810927e:	bf00      	nop
 8109280:	3708      	adds	r7, #8
 8109282:	46bd      	mov	sp, r7
 8109284:	bd80      	pop	{r7, pc}
 8109286:	bf00      	nop
 8109288:	00000000 	.word	0x00000000
 810928c:	100002d8 	.word	0x100002d8
 8109290:	10000300 	.word	0x10000300

08109294 <_GLOBAL__sub_I_pitchPID>:
 8109294:	b580      	push	{r7, lr}
 8109296:	af00      	add	r7, sp, #0
 8109298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810929c:	2001      	movs	r0, #1
 810929e:	f7ff ffbd 	bl	810921c <_Z41__static_initialization_and_destruction_0ii>
 81092a2:	bd80      	pop	{r7, pc}

081092a4 <_GLOBAL__sub_D_pitchPID>:
 81092a4:	b580      	push	{r7, lr}
 81092a6:	af00      	add	r7, sp, #0
 81092a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81092ac:	2000      	movs	r0, #0
 81092ae:	f7ff ffb5 	bl	810921c <_Z41__static_initialization_and_destruction_0ii>
 81092b2:	bd80      	pop	{r7, pc}

081092b4 <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 81092b4:	b084      	sub	sp, #16
 81092b6:	b5b0      	push	{r4, r5, r7, lr}
 81092b8:	b092      	sub	sp, #72	; 0x48
 81092ba:	af10      	add	r7, sp, #64	; 0x40
 81092bc:	f107 0418 	add.w	r4, r7, #24
 81092c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 81092c4:	2300      	movs	r3, #0
 81092c6:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 81092c8:	466d      	mov	r5, sp
 81092ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81092ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81092d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81092d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81092d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81092d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81092d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81092da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81092de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81092e2:	f107 0318 	add.w	r3, r7, #24
 81092e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81092e8:	f7fc f964 	bl	81055b4 <MPU9250_Init>
 81092ec:	4603      	mov	r3, r0
 81092ee:	71fb      	strb	r3, [r7, #7]
	return ret;
 81092f0:	79fb      	ldrb	r3, [r7, #7]
}
 81092f2:	4618      	mov	r0, r3
 81092f4:	3708      	adds	r7, #8
 81092f6:	46bd      	mov	sp, r7
 81092f8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81092fc:	b004      	add	sp, #16
 81092fe:	4770      	bx	lr

08109300 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8109300:	b580      	push	{r7, lr}
 8109302:	b082      	sub	sp, #8
 8109304:	af00      	add	r7, sp, #0
 8109306:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8109308:	4b04      	ldr	r3, [pc, #16]	; (810931c <HAL_HSEM_FreeCallback+0x1c>)
 810930a:	2201      	movs	r2, #1
 810930c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810930e:	2001      	movs	r0, #1
 8109310:	f7f8 ff82 	bl	8102218 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8109314:	bf00      	nop
 8109316:	3708      	adds	r7, #8
 8109318:	46bd      	mov	sp, r7
 810931a:	bd80      	pop	{r7, pc}
 810931c:	1000032c 	.word	0x1000032c

08109320 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8109320:	b580      	push	{r7, lr}
 8109322:	b082      	sub	sp, #8
 8109324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8109326:	4b0b      	ldr	r3, [pc, #44]	; (8109354 <MAILBOX_Init+0x34>)
 8109328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810932c:	4a09      	ldr	r2, [pc, #36]	; (8109354 <MAILBOX_Init+0x34>)
 810932e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8109332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8109336:	4b07      	ldr	r3, [pc, #28]	; (8109354 <MAILBOX_Init+0x34>)
 8109338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810933c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109340:	607b      	str	r3, [r7, #4]
 8109342:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8109344:	2001      	movs	r0, #1
 8109346:	f7f8 ff67 	bl	8102218 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 810934a:	2300      	movs	r3, #0
}
 810934c:	4618      	mov	r0, r3
 810934e:	3708      	adds	r7, #8
 8109350:	46bd      	mov	sp, r7
 8109352:	bd80      	pop	{r7, pc}
 8109354:	58024400 	.word	0x58024400

08109358 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8109358:	b580      	push	{r7, lr}
 810935a:	b082      	sub	sp, #8
 810935c:	af00      	add	r7, sp, #0
 810935e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8109360:	4b09      	ldr	r3, [pc, #36]	; (8109388 <MAILBOX_Poll+0x30>)
 8109362:	681b      	ldr	r3, [r3, #0]
 8109364:	2b01      	cmp	r3, #1
 8109366:	d108      	bne.n	810937a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8109368:	2101      	movs	r1, #1
 810936a:	6878      	ldr	r0, [r7, #4]
 810936c:	f7fd faa9 	bl	81068c2 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8109370:	4b05      	ldr	r3, [pc, #20]	; (8109388 <MAILBOX_Poll+0x30>)
 8109372:	2200      	movs	r2, #0
 8109374:	601a      	str	r2, [r3, #0]
    return 0;
 8109376:	2300      	movs	r3, #0
 8109378:	e001      	b.n	810937e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 810937a:	f06f 030a 	mvn.w	r3, #10
}
 810937e:	4618      	mov	r0, r3
 8109380:	3708      	adds	r7, #8
 8109382:	46bd      	mov	sp, r7
 8109384:	bd80      	pop	{r7, pc}
 8109386:	bf00      	nop
 8109388:	1000032c 	.word	0x1000032c

0810938c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 810938c:	b580      	push	{r7, lr}
 810938e:	b082      	sub	sp, #8
 8109390:	af00      	add	r7, sp, #0
 8109392:	6078      	str	r0, [r7, #4]
 8109394:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8109396:	2001      	movs	r0, #1
 8109398:	f7f8 ff10 	bl	81021bc <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 810939c:	2100      	movs	r1, #0
 810939e:	2001      	movs	r0, #1
 81093a0:	f7f8 ff26 	bl	81021f0 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 81093a4:	2300      	movs	r3, #0
}
 81093a6:	4618      	mov	r0, r3
 81093a8:	3708      	adds	r7, #8
 81093aa:	46bd      	mov	sp, r7
 81093ac:	bd80      	pop	{r7, pc}

081093ae <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 81093ae:	b480      	push	{r7}
 81093b0:	b083      	sub	sp, #12
 81093b2:	af00      	add	r7, sp, #0
 81093b4:	6078      	str	r0, [r7, #4]
 81093b6:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 81093bc:	683a      	ldr	r2, [r7, #0]
 81093be:	429a      	cmp	r2, r3
 81093c0:	d209      	bcs.n	81093d6 <metal_device_io_region+0x28>
 81093c2:	683a      	ldr	r2, [r7, #0]
 81093c4:	4613      	mov	r3, r2
 81093c6:	005b      	lsls	r3, r3, #1
 81093c8:	4413      	add	r3, r2
 81093ca:	011b      	lsls	r3, r3, #4
 81093cc:	3308      	adds	r3, #8
 81093ce:	687a      	ldr	r2, [r7, #4]
 81093d0:	4413      	add	r3, r2
 81093d2:	3304      	adds	r3, #4
 81093d4:	e000      	b.n	81093d8 <metal_device_io_region+0x2a>
 81093d6:	2300      	movs	r3, #0
}
 81093d8:	4618      	mov	r0, r3
 81093da:	370c      	adds	r7, #12
 81093dc:	46bd      	mov	sp, r7
 81093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093e2:	4770      	bx	lr

081093e4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 81093e4:	b590      	push	{r4, r7, lr}
 81093e6:	b08d      	sub	sp, #52	; 0x34
 81093e8:	af04      	add	r7, sp, #16
 81093ea:	6078      	str	r0, [r7, #4]
  int status = 0;
 81093ec:	2300      	movs	r3, #0
 81093ee:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 81093f0:	2300      	movs	r3, #0
 81093f2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 81093f4:	4a41      	ldr	r2, [pc, #260]	; (81094fc <OPENAMP_shmem_init+0x118>)
 81093f6:	f107 0310 	add.w	r3, r7, #16
 81093fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 81093fe:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8109402:	2300      	movs	r3, #0
 8109404:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8109406:	2300      	movs	r3, #0
 8109408:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 810940a:	f107 0310 	add.w	r3, r7, #16
 810940e:	4618      	mov	r0, r3
 8109410:	f7fc fe6e 	bl	81060f0 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8109414:	483a      	ldr	r0, [pc, #232]	; (8109500 <OPENAMP_shmem_init+0x11c>)
 8109416:	f7fc fd13 	bl	8105e40 <metal_register_generic_device>
 810941a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810941c:	69fb      	ldr	r3, [r7, #28]
 810941e:	2b00      	cmp	r3, #0
 8109420:	d001      	beq.n	8109426 <OPENAMP_shmem_init+0x42>
    return status;
 8109422:	69fb      	ldr	r3, [r7, #28]
 8109424:	e066      	b.n	81094f4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8109426:	f107 0318 	add.w	r3, r7, #24
 810942a:	461a      	mov	r2, r3
 810942c:	4935      	ldr	r1, [pc, #212]	; (8109504 <OPENAMP_shmem_init+0x120>)
 810942e:	4836      	ldr	r0, [pc, #216]	; (8109508 <OPENAMP_shmem_init+0x124>)
 8109430:	f7fc fcc8 	bl	8105dc4 <metal_device_open>
 8109434:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8109436:	69fb      	ldr	r3, [r7, #28]
 8109438:	2b00      	cmp	r3, #0
 810943a:	d001      	beq.n	8109440 <OPENAMP_shmem_init+0x5c>
    return status;
 810943c:	69fb      	ldr	r3, [r7, #28]
 810943e:	e059      	b.n	81094f4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8109440:	4a32      	ldr	r2, [pc, #200]	; (810950c <OPENAMP_shmem_init+0x128>)
 8109442:	4b33      	ldr	r3, [pc, #204]	; (8109510 <OPENAMP_shmem_init+0x12c>)
 8109444:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8109446:	69bb      	ldr	r3, [r7, #24]
 8109448:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 810944c:	4a31      	ldr	r2, [pc, #196]	; (8109514 <OPENAMP_shmem_init+0x130>)
 810944e:	4b2f      	ldr	r3, [pc, #188]	; (810950c <OPENAMP_shmem_init+0x128>)
 8109450:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8109452:	461a      	mov	r2, r3
 8109454:	2300      	movs	r3, #0
 8109456:	9302      	str	r3, [sp, #8]
 8109458:	2300      	movs	r3, #0
 810945a:	9301      	str	r3, [sp, #4]
 810945c:	f04f 33ff 	mov.w	r3, #4294967295
 8109460:	9300      	str	r3, [sp, #0]
 8109462:	4613      	mov	r3, r2
 8109464:	4a2a      	ldr	r2, [pc, #168]	; (8109510 <OPENAMP_shmem_init+0x12c>)
 8109466:	4929      	ldr	r1, [pc, #164]	; (810950c <OPENAMP_shmem_init+0x128>)
 8109468:	f7fc fe8f 	bl	810618a <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 810946c:	69bb      	ldr	r3, [r7, #24]
 810946e:	2100      	movs	r1, #0
 8109470:	4618      	mov	r0, r3
 8109472:	f7ff ff9c 	bl	81093ae <metal_device_io_region>
 8109476:	4603      	mov	r3, r0
 8109478:	4a27      	ldr	r2, [pc, #156]	; (8109518 <OPENAMP_shmem_init+0x134>)
 810947a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 810947c:	4b26      	ldr	r3, [pc, #152]	; (8109518 <OPENAMP_shmem_init+0x134>)
 810947e:	681b      	ldr	r3, [r3, #0]
 8109480:	2b00      	cmp	r3, #0
 8109482:	d102      	bne.n	810948a <OPENAMP_shmem_init+0xa6>
    return -1;
 8109484:	f04f 33ff 	mov.w	r3, #4294967295
 8109488:	e034      	b.n	81094f4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 810948a:	f107 0208 	add.w	r2, r7, #8
 810948e:	f107 030c 	add.w	r3, r7, #12
 8109492:	4619      	mov	r1, r3
 8109494:	6878      	ldr	r0, [r7, #4]
 8109496:	f000 f905 	bl	81096a4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810949a:	68fb      	ldr	r3, [r7, #12]
 810949c:	4a1f      	ldr	r2, [pc, #124]	; (810951c <OPENAMP_shmem_init+0x138>)
 810949e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 81094a0:	4b1e      	ldr	r3, [pc, #120]	; (810951c <OPENAMP_shmem_init+0x138>)
 81094a2:	681b      	ldr	r3, [r3, #0]
 81094a4:	2b00      	cmp	r3, #0
 81094a6:	d102      	bne.n	81094ae <OPENAMP_shmem_init+0xca>
  {
    return -1;
 81094a8:	f04f 33ff 	mov.w	r3, #4294967295
 81094ac:	e022      	b.n	81094f4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 81094ae:	69bb      	ldr	r3, [r7, #24]
 81094b0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 81094b4:	4b19      	ldr	r3, [pc, #100]	; (810951c <OPENAMP_shmem_init+0x138>)
 81094b6:	6819      	ldr	r1, [r3, #0]
 81094b8:	4b18      	ldr	r3, [pc, #96]	; (810951c <OPENAMP_shmem_init+0x138>)
 81094ba:	681a      	ldr	r2, [r3, #0]
 81094bc:	68bb      	ldr	r3, [r7, #8]
 81094be:	461c      	mov	r4, r3
 81094c0:	2300      	movs	r3, #0
 81094c2:	9302      	str	r3, [sp, #8]
 81094c4:	2300      	movs	r3, #0
 81094c6:	9301      	str	r3, [sp, #4]
 81094c8:	f04f 33ff 	mov.w	r3, #4294967295
 81094cc:	9300      	str	r3, [sp, #0]
 81094ce:	4623      	mov	r3, r4
 81094d0:	f7fc fe5b 	bl	810618a <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 81094d4:	69bb      	ldr	r3, [r7, #24]
 81094d6:	2101      	movs	r1, #1
 81094d8:	4618      	mov	r0, r3
 81094da:	f7ff ff68 	bl	81093ae <metal_device_io_region>
 81094de:	4603      	mov	r3, r0
 81094e0:	4a0f      	ldr	r2, [pc, #60]	; (8109520 <OPENAMP_shmem_init+0x13c>)
 81094e2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 81094e4:	4b0e      	ldr	r3, [pc, #56]	; (8109520 <OPENAMP_shmem_init+0x13c>)
 81094e6:	681b      	ldr	r3, [r3, #0]
 81094e8:	2b00      	cmp	r3, #0
 81094ea:	d102      	bne.n	81094f2 <OPENAMP_shmem_init+0x10e>
    return -1;
 81094ec:	f04f 33ff 	mov.w	r3, #4294967295
 81094f0:	e000      	b.n	81094f4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 81094f2:	2300      	movs	r3, #0
}
 81094f4:	4618      	mov	r0, r3
 81094f6:	3724      	adds	r7, #36	; 0x24
 81094f8:	46bd      	mov	sp, r7
 81094fa:	bd90      	pop	{r4, r7, pc}
 81094fc:	0810edd8 	.word	0x0810edd8
 8109500:	1000003c 	.word	0x1000003c
 8109504:	0810edc4 	.word	0x0810edc4
 8109508:	0810edd0 	.word	0x0810edd0
 810950c:	38000400 	.word	0x38000400
 8109510:	100003c0 	.word	0x100003c0
 8109514:	38010000 	.word	0x38010000
 8109518:	10000330 	.word	0x10000330
 810951c:	10000338 	.word	0x10000338
 8109520:	10000334 	.word	0x10000334

08109524 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8109524:	b590      	push	{r4, r7, lr}
 8109526:	b08b      	sub	sp, #44	; 0x2c
 8109528:	af04      	add	r7, sp, #16
 810952a:	6078      	str	r0, [r7, #4]
 810952c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810952e:	2300      	movs	r3, #0
 8109530:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8109532:	2300      	movs	r3, #0
 8109534:	613b      	str	r3, [r7, #16]
  int status = 0;
 8109536:	2300      	movs	r3, #0
 8109538:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810953a:	f7ff fef1 	bl	8109320 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 810953e:	6878      	ldr	r0, [r7, #4]
 8109540:	f7ff ff50 	bl	81093e4 <OPENAMP_shmem_init>
 8109544:	60f8      	str	r0, [r7, #12]
  if(status)
 8109546:	68fb      	ldr	r3, [r7, #12]
 8109548:	2b00      	cmp	r3, #0
 810954a:	d001      	beq.n	8109550 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 810954c:	68fb      	ldr	r3, [r7, #12]
 810954e:	e06a      	b.n	8109626 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8109550:	6878      	ldr	r0, [r7, #4]
 8109552:	4b37      	ldr	r3, [pc, #220]	; (8109630 <MX_OPENAMP_Init+0x10c>)
 8109554:	681b      	ldr	r3, [r3, #0]
 8109556:	f103 0218 	add.w	r2, r3, #24
 810955a:	4b36      	ldr	r3, [pc, #216]	; (8109634 <MX_OPENAMP_Init+0x110>)
 810955c:	681b      	ldr	r3, [r3, #0]
 810955e:	2100      	movs	r1, #0
 8109560:	9102      	str	r1, [sp, #8]
 8109562:	4935      	ldr	r1, [pc, #212]	; (8109638 <MX_OPENAMP_Init+0x114>)
 8109564:	9101      	str	r1, [sp, #4]
 8109566:	2100      	movs	r1, #0
 8109568:	9100      	str	r1, [sp, #0]
 810956a:	21ff      	movs	r1, #255	; 0xff
 810956c:	f7fd f8ca 	bl	8106704 <rproc_virtio_create_vdev>
 8109570:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8109572:	693b      	ldr	r3, [r7, #16]
 8109574:	2b00      	cmp	r3, #0
 8109576:	d102      	bne.n	810957e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8109578:	f04f 33ff 	mov.w	r3, #4294967295
 810957c:	e053      	b.n	8109626 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 810957e:	6938      	ldr	r0, [r7, #16]
 8109580:	f7fd f9db 	bl	810693a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8109584:	4b2a      	ldr	r3, [pc, #168]	; (8109630 <MX_OPENAMP_Init+0x10c>)
 8109586:	681b      	ldr	r3, [r3, #0]
 8109588:	3334      	adds	r3, #52	; 0x34
 810958a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810958c:	697b      	ldr	r3, [r7, #20]
 810958e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8109590:	697b      	ldr	r3, [r7, #20]
 8109592:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8109594:	461c      	mov	r4, r3
 8109596:	4b29      	ldr	r3, [pc, #164]	; (810963c <MX_OPENAMP_Init+0x118>)
 8109598:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810959a:	697a      	ldr	r2, [r7, #20]
 810959c:	6892      	ldr	r2, [r2, #8]
 810959e:	6979      	ldr	r1, [r7, #20]
 81095a0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81095a2:	9102      	str	r1, [sp, #8]
 81095a4:	9201      	str	r2, [sp, #4]
 81095a6:	9300      	str	r3, [sp, #0]
 81095a8:	4623      	mov	r3, r4
 81095aa:	4602      	mov	r2, r0
 81095ac:	2100      	movs	r1, #0
 81095ae:	6938      	ldr	r0, [r7, #16]
 81095b0:	f7fd f956 	bl	8106860 <rproc_virtio_init_vring>
 81095b4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81095b6:	68fb      	ldr	r3, [r7, #12]
 81095b8:	2b00      	cmp	r3, #0
 81095ba:	d001      	beq.n	81095c0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 81095bc:	68fb      	ldr	r3, [r7, #12]
 81095be:	e032      	b.n	8109626 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 81095c0:	4b1b      	ldr	r3, [pc, #108]	; (8109630 <MX_OPENAMP_Init+0x10c>)
 81095c2:	681b      	ldr	r3, [r3, #0]
 81095c4:	3348      	adds	r3, #72	; 0x48
 81095c6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81095c8:	697b      	ldr	r3, [r7, #20]
 81095ca:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 81095cc:	697b      	ldr	r3, [r7, #20]
 81095ce:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81095d0:	461c      	mov	r4, r3
 81095d2:	4b1a      	ldr	r3, [pc, #104]	; (810963c <MX_OPENAMP_Init+0x118>)
 81095d4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 81095d6:	697a      	ldr	r2, [r7, #20]
 81095d8:	6892      	ldr	r2, [r2, #8]
 81095da:	6979      	ldr	r1, [r7, #20]
 81095dc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81095de:	9102      	str	r1, [sp, #8]
 81095e0:	9201      	str	r2, [sp, #4]
 81095e2:	9300      	str	r3, [sp, #0]
 81095e4:	4623      	mov	r3, r4
 81095e6:	4602      	mov	r2, r0
 81095e8:	2101      	movs	r1, #1
 81095ea:	6938      	ldr	r0, [r7, #16]
 81095ec:	f7fd f938 	bl	8106860 <rproc_virtio_init_vring>
 81095f0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81095f2:	68fb      	ldr	r3, [r7, #12]
 81095f4:	2b00      	cmp	r3, #0
 81095f6:	d001      	beq.n	81095fc <MX_OPENAMP_Init+0xd8>
  {
    return status;
 81095f8:	68fb      	ldr	r3, [r7, #12]
 81095fa:	e014      	b.n	8109626 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81095fc:	4b10      	ldr	r3, [pc, #64]	; (8109640 <MX_OPENAMP_Init+0x11c>)
 81095fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8109602:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8109604:	4a0f      	ldr	r2, [pc, #60]	; (8109644 <MX_OPENAMP_Init+0x120>)
 8109606:	4b0e      	ldr	r3, [pc, #56]	; (8109640 <MX_OPENAMP_Init+0x11c>)
 8109608:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810960a:	461a      	mov	r2, r3
 810960c:	480e      	ldr	r0, [pc, #56]	; (8109648 <MX_OPENAMP_Init+0x124>)
 810960e:	f7fd fde3 	bl	81071d8 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8109612:	4b0a      	ldr	r3, [pc, #40]	; (810963c <MX_OPENAMP_Init+0x118>)
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	4a0c      	ldr	r2, [pc, #48]	; (8109648 <MX_OPENAMP_Init+0x124>)
 8109618:	9200      	str	r2, [sp, #0]
 810961a:	683a      	ldr	r2, [r7, #0]
 810961c:	6939      	ldr	r1, [r7, #16]
 810961e:	480b      	ldr	r0, [pc, #44]	; (810964c <MX_OPENAMP_Init+0x128>)
 8109620:	f7fe f84e 	bl	81076c0 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8109624:	2300      	movs	r3, #0
}
 8109626:	4618      	mov	r0, r3
 8109628:	371c      	adds	r7, #28
 810962a:	46bd      	mov	sp, r7
 810962c:	bd90      	pop	{r4, r7, pc}
 810962e:	bf00      	nop
 8109630:	10000338 	.word	0x10000338
 8109634:	10000334 	.word	0x10000334
 8109638:	0810938d 	.word	0x0810938d
 810963c:	10000330 	.word	0x10000330
 8109640:	38000400 	.word	0x38000400
 8109644:	38010000 	.word	0x38010000
 8109648:	1000033c 	.word	0x1000033c
 810964c:	10000348 	.word	0x10000348

08109650 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8109650:	b580      	push	{r7, lr}
 8109652:	b08a      	sub	sp, #40	; 0x28
 8109654:	af04      	add	r7, sp, #16
 8109656:	60f8      	str	r0, [r7, #12]
 8109658:	60b9      	str	r1, [r7, #8]
 810965a:	607a      	str	r2, [r7, #4]
 810965c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 810965e:	2300      	movs	r3, #0
 8109660:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8109662:	6a3b      	ldr	r3, [r7, #32]
 8109664:	9302      	str	r3, [sp, #8]
 8109666:	683b      	ldr	r3, [r7, #0]
 8109668:	9301      	str	r3, [sp, #4]
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	9300      	str	r3, [sp, #0]
 810966e:	f04f 33ff 	mov.w	r3, #4294967295
 8109672:	68ba      	ldr	r2, [r7, #8]
 8109674:	4904      	ldr	r1, [pc, #16]	; (8109688 <OPENAMP_create_endpoint+0x38>)
 8109676:	68f8      	ldr	r0, [r7, #12]
 8109678:	f7fd fbec 	bl	8106e54 <rpmsg_create_ept>
 810967c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 810967e:	697b      	ldr	r3, [r7, #20]
}
 8109680:	4618      	mov	r0, r3
 8109682:	3718      	adds	r7, #24
 8109684:	46bd      	mov	sp, r7
 8109686:	bd80      	pop	{r7, pc}
 8109688:	10000348 	.word	0x10000348

0810968c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 810968c:	b580      	push	{r7, lr}
 810968e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8109690:	4b03      	ldr	r3, [pc, #12]	; (81096a0 <OPENAMP_check_for_message+0x14>)
 8109692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109694:	4618      	mov	r0, r3
 8109696:	f7ff fe5f 	bl	8109358 <MAILBOX_Poll>
}
 810969a:	bf00      	nop
 810969c:	bd80      	pop	{r7, pc}
 810969e:	bf00      	nop
 81096a0:	10000348 	.word	0x10000348

081096a4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 81096a4:	b480      	push	{r7}
 81096a6:	b085      	sub	sp, #20
 81096a8:	af00      	add	r7, sp, #0
 81096aa:	60f8      	str	r0, [r7, #12]
 81096ac:	60b9      	str	r1, [r7, #8]
 81096ae:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 81096b0:	bf00      	nop
 81096b2:	4b08      	ldr	r3, [pc, #32]	; (81096d4 <resource_table_init+0x30>)
 81096b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81096b6:	4a08      	ldr	r2, [pc, #32]	; (81096d8 <resource_table_init+0x34>)
 81096b8:	4293      	cmp	r3, r2
 81096ba:	d1fa      	bne.n	81096b2 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	228c      	movs	r2, #140	; 0x8c
 81096c0:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 81096c2:	68bb      	ldr	r3, [r7, #8]
 81096c4:	4a03      	ldr	r2, [pc, #12]	; (81096d4 <resource_table_init+0x30>)
 81096c6:	601a      	str	r2, [r3, #0]
}
 81096c8:	bf00      	nop
 81096ca:	3714      	adds	r7, #20
 81096cc:	46bd      	mov	sp, r7
 81096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096d2:	4770      	bx	lr
 81096d4:	38000000 	.word	0x38000000
 81096d8:	38000400 	.word	0x38000400

081096dc <initServo>:

tSERVO chasisServo;
tSERVO lidarServo;

void initServo(tSERVO *servoToInit, TIM_HandleTypeDef htimToInit, uint32_t ChannelToInit, TIM_TypeDef *TIMToInit)
{
 81096dc:	b084      	sub	sp, #16
 81096de:	b580      	push	{r7, lr}
 81096e0:	b082      	sub	sp, #8
 81096e2:	af00      	add	r7, sp, #0
 81096e4:	6078      	str	r0, [r7, #4]
 81096e6:	f107 0014 	add.w	r0, r7, #20
 81096ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	servoToInit->htim = htimToInit;
 81096ee:	687b      	ldr	r3, [r7, #4]
 81096f0:	4618      	mov	r0, r3
 81096f2:	f107 0314 	add.w	r3, r7, #20
 81096f6:	224c      	movs	r2, #76	; 0x4c
 81096f8:	4619      	mov	r1, r3
 81096fa:	f000 fe6f 	bl	810a3dc <memcpy>
	servoToInit->ChannelID = ChannelToInit;
 81096fe:	687b      	ldr	r3, [r7, #4]
 8109700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8109702:	64da      	str	r2, [r3, #76]	; 0x4c
	servoToInit->TIM = TIMToInit;
 8109704:	687b      	ldr	r3, [r7, #4]
 8109706:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8109708:	651a      	str	r2, [r3, #80]	; 0x50
}
 810970a:	bf00      	nop
 810970c:	3708      	adds	r7, #8
 810970e:	46bd      	mov	sp, r7
 8109710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109714:	b004      	add	sp, #16
 8109716:	4770      	bx	lr

08109718 <startPWM>:

void startPWM(tSERVO servoToStart, uint32_t pwmValue)
{
 8109718:	b084      	sub	sp, #16
 810971a:	b580      	push	{r7, lr}
 810971c:	af00      	add	r7, sp, #0
 810971e:	f107 0c08 	add.w	ip, r7, #8
 8109722:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (servoToStart.ChannelID == 0)
 8109726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109728:	2b00      	cmp	r3, #0
 810972a:	d103      	bne.n	8109734 <startPWM+0x1c>
	{
		servoToStart.TIM->CCR1 = pwmValue;
 810972c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810972e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8109730:	635a      	str	r2, [r3, #52]	; 0x34
 8109732:	e005      	b.n	8109740 <startPWM+0x28>
	}
	else if (servoToStart.ChannelID == 1)
 8109734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109736:	2b01      	cmp	r3, #1
 8109738:	d102      	bne.n	8109740 <startPWM+0x28>
	{
		servoToStart.TIM->CCR2 = pwmValue;
 810973a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810973c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810973e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	HAL_TIM_PWM_Start(&servoToStart.htim, servoToStart.ChannelID);
 8109740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109742:	4619      	mov	r1, r3
 8109744:	f107 0008 	add.w	r0, r7, #8
 8109748:	f7fa fe1c 	bl	8104384 <HAL_TIM_PWM_Start>
}
 810974c:	bf00      	nop
 810974e:	46bd      	mov	sp, r7
 8109750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109754:	b004      	add	sp, #16
 8109756:	4770      	bx	lr

08109758 <updatePWM>:
{
	HAL_TIM_PWM_Stop(&servoToStop.htim, servoToStop.ChannelID);
}

void updatePWM(tSERVO servoToUpdate, uint32_t pwmValue)
{
 8109758:	b084      	sub	sp, #16
 810975a:	b490      	push	{r4, r7}
 810975c:	af00      	add	r7, sp, #0
 810975e:	f107 0408 	add.w	r4, r7, #8
 8109762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (servoToUpdate.ChannelID == 0)
 8109766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109768:	2b00      	cmp	r3, #0
 810976a:	d103      	bne.n	8109774 <updatePWM+0x1c>
	{
		servoToUpdate.TIM->CCR1 = pwmValue;
 810976c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810976e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8109770:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if (servoToUpdate.ChannelID == 1)
	{
		servoToUpdate.TIM->CCR2 = pwmValue;
	}
}
 8109772:	e005      	b.n	8109780 <updatePWM+0x28>
	else if (servoToUpdate.ChannelID == 1)
 8109774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109776:	2b01      	cmp	r3, #1
 8109778:	d102      	bne.n	8109780 <updatePWM+0x28>
		servoToUpdate.TIM->CCR2 = pwmValue;
 810977a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810977c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810977e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8109780:	bf00      	nop
 8109782:	46bd      	mov	sp, r7
 8109784:	bc90      	pop	{r4, r7}
 8109786:	b004      	add	sp, #16
 8109788:	4770      	bx	lr

0810978a <_ZdlPvj>:
 810978a:	f000 b800 	b.w	810978e <_ZdlPv>

0810978e <_ZdlPv>:
 810978e:	f000 be1d 	b.w	810a3cc <free>
	...

08109794 <asin>:
 8109794:	b538      	push	{r3, r4, r5, lr}
 8109796:	ed2d 8b02 	vpush	{d8}
 810979a:	ec55 4b10 	vmov	r4, r5, d0
 810979e:	f000 f86b 	bl	8109878 <__ieee754_asin>
 81097a2:	4b16      	ldr	r3, [pc, #88]	; (81097fc <asin+0x68>)
 81097a4:	eeb0 8a40 	vmov.f32	s16, s0
 81097a8:	eef0 8a60 	vmov.f32	s17, s1
 81097ac:	f993 3000 	ldrsb.w	r3, [r3]
 81097b0:	3301      	adds	r3, #1
 81097b2:	d01c      	beq.n	81097ee <asin+0x5a>
 81097b4:	4622      	mov	r2, r4
 81097b6:	462b      	mov	r3, r5
 81097b8:	4620      	mov	r0, r4
 81097ba:	4629      	mov	r1, r5
 81097bc:	f7f7 fa4e 	bl	8100c5c <__aeabi_dcmpun>
 81097c0:	b9a8      	cbnz	r0, 81097ee <asin+0x5a>
 81097c2:	ec45 4b10 	vmov	d0, r4, r5
 81097c6:	f000 fd8b 	bl	810a2e0 <fabs>
 81097ca:	4b0d      	ldr	r3, [pc, #52]	; (8109800 <asin+0x6c>)
 81097cc:	ec51 0b10 	vmov	r0, r1, d0
 81097d0:	2200      	movs	r2, #0
 81097d2:	f7f7 fa39 	bl	8100c48 <__aeabi_dcmpgt>
 81097d6:	b150      	cbz	r0, 81097ee <asin+0x5a>
 81097d8:	f000 fdb4 	bl	810a344 <__errno>
 81097dc:	ecbd 8b02 	vpop	{d8}
 81097e0:	2321      	movs	r3, #33	; 0x21
 81097e2:	6003      	str	r3, [r0, #0]
 81097e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81097e8:	4806      	ldr	r0, [pc, #24]	; (8109804 <asin+0x70>)
 81097ea:	f000 bd85 	b.w	810a2f8 <nan>
 81097ee:	eeb0 0a48 	vmov.f32	s0, s16
 81097f2:	eef0 0a68 	vmov.f32	s1, s17
 81097f6:	ecbd 8b02 	vpop	{d8}
 81097fa:	bd38      	pop	{r3, r4, r5, pc}
 81097fc:	100000b8 	.word	0x100000b8
 8109800:	3ff00000 	.word	0x3ff00000
 8109804:	0810ef03 	.word	0x0810ef03

08109808 <atan2>:
 8109808:	f000 ba4a 	b.w	8109ca0 <__ieee754_atan2>

0810980c <sqrt>:
 810980c:	b538      	push	{r3, r4, r5, lr}
 810980e:	ed2d 8b02 	vpush	{d8}
 8109812:	ec55 4b10 	vmov	r4, r5, d0
 8109816:	f000 fb0d 	bl	8109e34 <__ieee754_sqrt>
 810981a:	4b15      	ldr	r3, [pc, #84]	; (8109870 <sqrt+0x64>)
 810981c:	eeb0 8a40 	vmov.f32	s16, s0
 8109820:	eef0 8a60 	vmov.f32	s17, s1
 8109824:	f993 3000 	ldrsb.w	r3, [r3]
 8109828:	3301      	adds	r3, #1
 810982a:	d019      	beq.n	8109860 <sqrt+0x54>
 810982c:	4622      	mov	r2, r4
 810982e:	462b      	mov	r3, r5
 8109830:	4620      	mov	r0, r4
 8109832:	4629      	mov	r1, r5
 8109834:	f7f7 fa12 	bl	8100c5c <__aeabi_dcmpun>
 8109838:	b990      	cbnz	r0, 8109860 <sqrt+0x54>
 810983a:	2200      	movs	r2, #0
 810983c:	2300      	movs	r3, #0
 810983e:	4620      	mov	r0, r4
 8109840:	4629      	mov	r1, r5
 8109842:	f7f7 f9e3 	bl	8100c0c <__aeabi_dcmplt>
 8109846:	b158      	cbz	r0, 8109860 <sqrt+0x54>
 8109848:	f000 fd7c 	bl	810a344 <__errno>
 810984c:	2321      	movs	r3, #33	; 0x21
 810984e:	6003      	str	r3, [r0, #0]
 8109850:	2200      	movs	r2, #0
 8109852:	2300      	movs	r3, #0
 8109854:	4610      	mov	r0, r2
 8109856:	4619      	mov	r1, r3
 8109858:	f7f7 f890 	bl	810097c <__aeabi_ddiv>
 810985c:	ec41 0b18 	vmov	d8, r0, r1
 8109860:	eeb0 0a48 	vmov.f32	s0, s16
 8109864:	eef0 0a68 	vmov.f32	s1, s17
 8109868:	ecbd 8b02 	vpop	{d8}
 810986c:	bd38      	pop	{r3, r4, r5, pc}
 810986e:	bf00      	nop
 8109870:	100000b8 	.word	0x100000b8
 8109874:	00000000 	.word	0x00000000

08109878 <__ieee754_asin>:
 8109878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810987c:	ed2d 8b04 	vpush	{d8-d9}
 8109880:	ec55 4b10 	vmov	r4, r5, d0
 8109884:	4bcc      	ldr	r3, [pc, #816]	; (8109bb8 <__ieee754_asin+0x340>)
 8109886:	b083      	sub	sp, #12
 8109888:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 810988c:	4598      	cmp	r8, r3
 810988e:	9501      	str	r5, [sp, #4]
 8109890:	dd35      	ble.n	81098fe <__ieee754_asin+0x86>
 8109892:	ee10 3a10 	vmov	r3, s0
 8109896:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 810989a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 810989e:	ea58 0303 	orrs.w	r3, r8, r3
 81098a2:	d117      	bne.n	81098d4 <__ieee754_asin+0x5c>
 81098a4:	a3aa      	add	r3, pc, #680	; (adr r3, 8109b50 <__ieee754_asin+0x2d8>)
 81098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098aa:	ee10 0a10 	vmov	r0, s0
 81098ae:	4629      	mov	r1, r5
 81098b0:	f7f6 ff3a 	bl	8100728 <__aeabi_dmul>
 81098b4:	a3a8      	add	r3, pc, #672	; (adr r3, 8109b58 <__ieee754_asin+0x2e0>)
 81098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098ba:	4606      	mov	r6, r0
 81098bc:	460f      	mov	r7, r1
 81098be:	4620      	mov	r0, r4
 81098c0:	4629      	mov	r1, r5
 81098c2:	f7f6 ff31 	bl	8100728 <__aeabi_dmul>
 81098c6:	4602      	mov	r2, r0
 81098c8:	460b      	mov	r3, r1
 81098ca:	4630      	mov	r0, r6
 81098cc:	4639      	mov	r1, r7
 81098ce:	f7f6 fd75 	bl	81003bc <__adddf3>
 81098d2:	e00b      	b.n	81098ec <__ieee754_asin+0x74>
 81098d4:	ee10 2a10 	vmov	r2, s0
 81098d8:	462b      	mov	r3, r5
 81098da:	ee10 0a10 	vmov	r0, s0
 81098de:	4629      	mov	r1, r5
 81098e0:	f7f6 fd6a 	bl	81003b8 <__aeabi_dsub>
 81098e4:	4602      	mov	r2, r0
 81098e6:	460b      	mov	r3, r1
 81098e8:	f7f7 f848 	bl	810097c <__aeabi_ddiv>
 81098ec:	4604      	mov	r4, r0
 81098ee:	460d      	mov	r5, r1
 81098f0:	ec45 4b10 	vmov	d0, r4, r5
 81098f4:	b003      	add	sp, #12
 81098f6:	ecbd 8b04 	vpop	{d8-d9}
 81098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81098fe:	4baf      	ldr	r3, [pc, #700]	; (8109bbc <__ieee754_asin+0x344>)
 8109900:	4598      	cmp	r8, r3
 8109902:	dc11      	bgt.n	8109928 <__ieee754_asin+0xb0>
 8109904:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8109908:	f280 80ae 	bge.w	8109a68 <__ieee754_asin+0x1f0>
 810990c:	a394      	add	r3, pc, #592	; (adr r3, 8109b60 <__ieee754_asin+0x2e8>)
 810990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109912:	ee10 0a10 	vmov	r0, s0
 8109916:	4629      	mov	r1, r5
 8109918:	f7f6 fd50 	bl	81003bc <__adddf3>
 810991c:	4ba8      	ldr	r3, [pc, #672]	; (8109bc0 <__ieee754_asin+0x348>)
 810991e:	2200      	movs	r2, #0
 8109920:	f7f7 f992 	bl	8100c48 <__aeabi_dcmpgt>
 8109924:	2800      	cmp	r0, #0
 8109926:	d1e3      	bne.n	81098f0 <__ieee754_asin+0x78>
 8109928:	ec45 4b10 	vmov	d0, r4, r5
 810992c:	f000 fcd8 	bl	810a2e0 <fabs>
 8109930:	49a3      	ldr	r1, [pc, #652]	; (8109bc0 <__ieee754_asin+0x348>)
 8109932:	ec53 2b10 	vmov	r2, r3, d0
 8109936:	2000      	movs	r0, #0
 8109938:	f7f6 fd3e 	bl	81003b8 <__aeabi_dsub>
 810993c:	4ba1      	ldr	r3, [pc, #644]	; (8109bc4 <__ieee754_asin+0x34c>)
 810993e:	2200      	movs	r2, #0
 8109940:	f7f6 fef2 	bl	8100728 <__aeabi_dmul>
 8109944:	a388      	add	r3, pc, #544	; (adr r3, 8109b68 <__ieee754_asin+0x2f0>)
 8109946:	e9d3 2300 	ldrd	r2, r3, [r3]
 810994a:	4604      	mov	r4, r0
 810994c:	460d      	mov	r5, r1
 810994e:	f7f6 feeb 	bl	8100728 <__aeabi_dmul>
 8109952:	a387      	add	r3, pc, #540	; (adr r3, 8109b70 <__ieee754_asin+0x2f8>)
 8109954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109958:	f7f6 fd30 	bl	81003bc <__adddf3>
 810995c:	4622      	mov	r2, r4
 810995e:	462b      	mov	r3, r5
 8109960:	f7f6 fee2 	bl	8100728 <__aeabi_dmul>
 8109964:	a384      	add	r3, pc, #528	; (adr r3, 8109b78 <__ieee754_asin+0x300>)
 8109966:	e9d3 2300 	ldrd	r2, r3, [r3]
 810996a:	f7f6 fd25 	bl	81003b8 <__aeabi_dsub>
 810996e:	4622      	mov	r2, r4
 8109970:	462b      	mov	r3, r5
 8109972:	f7f6 fed9 	bl	8100728 <__aeabi_dmul>
 8109976:	a382      	add	r3, pc, #520	; (adr r3, 8109b80 <__ieee754_asin+0x308>)
 8109978:	e9d3 2300 	ldrd	r2, r3, [r3]
 810997c:	f7f6 fd1e 	bl	81003bc <__adddf3>
 8109980:	4622      	mov	r2, r4
 8109982:	462b      	mov	r3, r5
 8109984:	f7f6 fed0 	bl	8100728 <__aeabi_dmul>
 8109988:	a37f      	add	r3, pc, #508	; (adr r3, 8109b88 <__ieee754_asin+0x310>)
 810998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810998e:	f7f6 fd13 	bl	81003b8 <__aeabi_dsub>
 8109992:	4622      	mov	r2, r4
 8109994:	462b      	mov	r3, r5
 8109996:	f7f6 fec7 	bl	8100728 <__aeabi_dmul>
 810999a:	a37d      	add	r3, pc, #500	; (adr r3, 8109b90 <__ieee754_asin+0x318>)
 810999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099a0:	f7f6 fd0c 	bl	81003bc <__adddf3>
 81099a4:	4622      	mov	r2, r4
 81099a6:	462b      	mov	r3, r5
 81099a8:	f7f6 febe 	bl	8100728 <__aeabi_dmul>
 81099ac:	a37a      	add	r3, pc, #488	; (adr r3, 8109b98 <__ieee754_asin+0x320>)
 81099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099b2:	ec41 0b18 	vmov	d8, r0, r1
 81099b6:	4620      	mov	r0, r4
 81099b8:	4629      	mov	r1, r5
 81099ba:	f7f6 feb5 	bl	8100728 <__aeabi_dmul>
 81099be:	a378      	add	r3, pc, #480	; (adr r3, 8109ba0 <__ieee754_asin+0x328>)
 81099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099c4:	f7f6 fcf8 	bl	81003b8 <__aeabi_dsub>
 81099c8:	4622      	mov	r2, r4
 81099ca:	462b      	mov	r3, r5
 81099cc:	f7f6 feac 	bl	8100728 <__aeabi_dmul>
 81099d0:	a375      	add	r3, pc, #468	; (adr r3, 8109ba8 <__ieee754_asin+0x330>)
 81099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099d6:	f7f6 fcf1 	bl	81003bc <__adddf3>
 81099da:	4622      	mov	r2, r4
 81099dc:	462b      	mov	r3, r5
 81099de:	f7f6 fea3 	bl	8100728 <__aeabi_dmul>
 81099e2:	a373      	add	r3, pc, #460	; (adr r3, 8109bb0 <__ieee754_asin+0x338>)
 81099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099e8:	f7f6 fce6 	bl	81003b8 <__aeabi_dsub>
 81099ec:	4622      	mov	r2, r4
 81099ee:	462b      	mov	r3, r5
 81099f0:	f7f6 fe9a 	bl	8100728 <__aeabi_dmul>
 81099f4:	4b72      	ldr	r3, [pc, #456]	; (8109bc0 <__ieee754_asin+0x348>)
 81099f6:	2200      	movs	r2, #0
 81099f8:	f7f6 fce0 	bl	81003bc <__adddf3>
 81099fc:	ec45 4b10 	vmov	d0, r4, r5
 8109a00:	4606      	mov	r6, r0
 8109a02:	460f      	mov	r7, r1
 8109a04:	f000 fa16 	bl	8109e34 <__ieee754_sqrt>
 8109a08:	4b6f      	ldr	r3, [pc, #444]	; (8109bc8 <__ieee754_asin+0x350>)
 8109a0a:	4598      	cmp	r8, r3
 8109a0c:	ec5b ab10 	vmov	sl, fp, d0
 8109a10:	f340 80dc 	ble.w	8109bcc <__ieee754_asin+0x354>
 8109a14:	4632      	mov	r2, r6
 8109a16:	463b      	mov	r3, r7
 8109a18:	ec51 0b18 	vmov	r0, r1, d8
 8109a1c:	f7f6 ffae 	bl	810097c <__aeabi_ddiv>
 8109a20:	4652      	mov	r2, sl
 8109a22:	465b      	mov	r3, fp
 8109a24:	f7f6 fe80 	bl	8100728 <__aeabi_dmul>
 8109a28:	4652      	mov	r2, sl
 8109a2a:	465b      	mov	r3, fp
 8109a2c:	f7f6 fcc6 	bl	81003bc <__adddf3>
 8109a30:	4602      	mov	r2, r0
 8109a32:	460b      	mov	r3, r1
 8109a34:	f7f6 fcc2 	bl	81003bc <__adddf3>
 8109a38:	a347      	add	r3, pc, #284	; (adr r3, 8109b58 <__ieee754_asin+0x2e0>)
 8109a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a3e:	f7f6 fcbb 	bl	81003b8 <__aeabi_dsub>
 8109a42:	4602      	mov	r2, r0
 8109a44:	460b      	mov	r3, r1
 8109a46:	a142      	add	r1, pc, #264	; (adr r1, 8109b50 <__ieee754_asin+0x2d8>)
 8109a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109a4c:	f7f6 fcb4 	bl	81003b8 <__aeabi_dsub>
 8109a50:	9b01      	ldr	r3, [sp, #4]
 8109a52:	2b00      	cmp	r3, #0
 8109a54:	bfdc      	itt	le
 8109a56:	4602      	movle	r2, r0
 8109a58:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8109a5c:	4604      	mov	r4, r0
 8109a5e:	460d      	mov	r5, r1
 8109a60:	bfdc      	itt	le
 8109a62:	4614      	movle	r4, r2
 8109a64:	461d      	movle	r5, r3
 8109a66:	e743      	b.n	81098f0 <__ieee754_asin+0x78>
 8109a68:	ee10 2a10 	vmov	r2, s0
 8109a6c:	ee10 0a10 	vmov	r0, s0
 8109a70:	462b      	mov	r3, r5
 8109a72:	4629      	mov	r1, r5
 8109a74:	f7f6 fe58 	bl	8100728 <__aeabi_dmul>
 8109a78:	a33b      	add	r3, pc, #236	; (adr r3, 8109b68 <__ieee754_asin+0x2f0>)
 8109a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a7e:	4606      	mov	r6, r0
 8109a80:	460f      	mov	r7, r1
 8109a82:	f7f6 fe51 	bl	8100728 <__aeabi_dmul>
 8109a86:	a33a      	add	r3, pc, #232	; (adr r3, 8109b70 <__ieee754_asin+0x2f8>)
 8109a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a8c:	f7f6 fc96 	bl	81003bc <__adddf3>
 8109a90:	4632      	mov	r2, r6
 8109a92:	463b      	mov	r3, r7
 8109a94:	f7f6 fe48 	bl	8100728 <__aeabi_dmul>
 8109a98:	a337      	add	r3, pc, #220	; (adr r3, 8109b78 <__ieee754_asin+0x300>)
 8109a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a9e:	f7f6 fc8b 	bl	81003b8 <__aeabi_dsub>
 8109aa2:	4632      	mov	r2, r6
 8109aa4:	463b      	mov	r3, r7
 8109aa6:	f7f6 fe3f 	bl	8100728 <__aeabi_dmul>
 8109aaa:	a335      	add	r3, pc, #212	; (adr r3, 8109b80 <__ieee754_asin+0x308>)
 8109aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ab0:	f7f6 fc84 	bl	81003bc <__adddf3>
 8109ab4:	4632      	mov	r2, r6
 8109ab6:	463b      	mov	r3, r7
 8109ab8:	f7f6 fe36 	bl	8100728 <__aeabi_dmul>
 8109abc:	a332      	add	r3, pc, #200	; (adr r3, 8109b88 <__ieee754_asin+0x310>)
 8109abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ac2:	f7f6 fc79 	bl	81003b8 <__aeabi_dsub>
 8109ac6:	4632      	mov	r2, r6
 8109ac8:	463b      	mov	r3, r7
 8109aca:	f7f6 fe2d 	bl	8100728 <__aeabi_dmul>
 8109ace:	a330      	add	r3, pc, #192	; (adr r3, 8109b90 <__ieee754_asin+0x318>)
 8109ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ad4:	f7f6 fc72 	bl	81003bc <__adddf3>
 8109ad8:	4632      	mov	r2, r6
 8109ada:	463b      	mov	r3, r7
 8109adc:	f7f6 fe24 	bl	8100728 <__aeabi_dmul>
 8109ae0:	a32d      	add	r3, pc, #180	; (adr r3, 8109b98 <__ieee754_asin+0x320>)
 8109ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ae6:	4680      	mov	r8, r0
 8109ae8:	4689      	mov	r9, r1
 8109aea:	4630      	mov	r0, r6
 8109aec:	4639      	mov	r1, r7
 8109aee:	f7f6 fe1b 	bl	8100728 <__aeabi_dmul>
 8109af2:	a32b      	add	r3, pc, #172	; (adr r3, 8109ba0 <__ieee754_asin+0x328>)
 8109af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109af8:	f7f6 fc5e 	bl	81003b8 <__aeabi_dsub>
 8109afc:	4632      	mov	r2, r6
 8109afe:	463b      	mov	r3, r7
 8109b00:	f7f6 fe12 	bl	8100728 <__aeabi_dmul>
 8109b04:	a328      	add	r3, pc, #160	; (adr r3, 8109ba8 <__ieee754_asin+0x330>)
 8109b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b0a:	f7f6 fc57 	bl	81003bc <__adddf3>
 8109b0e:	4632      	mov	r2, r6
 8109b10:	463b      	mov	r3, r7
 8109b12:	f7f6 fe09 	bl	8100728 <__aeabi_dmul>
 8109b16:	a326      	add	r3, pc, #152	; (adr r3, 8109bb0 <__ieee754_asin+0x338>)
 8109b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b1c:	f7f6 fc4c 	bl	81003b8 <__aeabi_dsub>
 8109b20:	4632      	mov	r2, r6
 8109b22:	463b      	mov	r3, r7
 8109b24:	f7f6 fe00 	bl	8100728 <__aeabi_dmul>
 8109b28:	4b25      	ldr	r3, [pc, #148]	; (8109bc0 <__ieee754_asin+0x348>)
 8109b2a:	2200      	movs	r2, #0
 8109b2c:	f7f6 fc46 	bl	81003bc <__adddf3>
 8109b30:	4602      	mov	r2, r0
 8109b32:	460b      	mov	r3, r1
 8109b34:	4640      	mov	r0, r8
 8109b36:	4649      	mov	r1, r9
 8109b38:	f7f6 ff20 	bl	810097c <__aeabi_ddiv>
 8109b3c:	4622      	mov	r2, r4
 8109b3e:	462b      	mov	r3, r5
 8109b40:	f7f6 fdf2 	bl	8100728 <__aeabi_dmul>
 8109b44:	4602      	mov	r2, r0
 8109b46:	460b      	mov	r3, r1
 8109b48:	4620      	mov	r0, r4
 8109b4a:	4629      	mov	r1, r5
 8109b4c:	e6bf      	b.n	81098ce <__ieee754_asin+0x56>
 8109b4e:	bf00      	nop
 8109b50:	54442d18 	.word	0x54442d18
 8109b54:	3ff921fb 	.word	0x3ff921fb
 8109b58:	33145c07 	.word	0x33145c07
 8109b5c:	3c91a626 	.word	0x3c91a626
 8109b60:	8800759c 	.word	0x8800759c
 8109b64:	7e37e43c 	.word	0x7e37e43c
 8109b68:	0dfdf709 	.word	0x0dfdf709
 8109b6c:	3f023de1 	.word	0x3f023de1
 8109b70:	7501b288 	.word	0x7501b288
 8109b74:	3f49efe0 	.word	0x3f49efe0
 8109b78:	b5688f3b 	.word	0xb5688f3b
 8109b7c:	3fa48228 	.word	0x3fa48228
 8109b80:	0e884455 	.word	0x0e884455
 8109b84:	3fc9c155 	.word	0x3fc9c155
 8109b88:	03eb6f7d 	.word	0x03eb6f7d
 8109b8c:	3fd4d612 	.word	0x3fd4d612
 8109b90:	55555555 	.word	0x55555555
 8109b94:	3fc55555 	.word	0x3fc55555
 8109b98:	b12e9282 	.word	0xb12e9282
 8109b9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8109ba0:	1b8d0159 	.word	0x1b8d0159
 8109ba4:	3fe6066c 	.word	0x3fe6066c
 8109ba8:	9c598ac8 	.word	0x9c598ac8
 8109bac:	40002ae5 	.word	0x40002ae5
 8109bb0:	1c8a2d4b 	.word	0x1c8a2d4b
 8109bb4:	40033a27 	.word	0x40033a27
 8109bb8:	3fefffff 	.word	0x3fefffff
 8109bbc:	3fdfffff 	.word	0x3fdfffff
 8109bc0:	3ff00000 	.word	0x3ff00000
 8109bc4:	3fe00000 	.word	0x3fe00000
 8109bc8:	3fef3332 	.word	0x3fef3332
 8109bcc:	ee10 2a10 	vmov	r2, s0
 8109bd0:	ee10 0a10 	vmov	r0, s0
 8109bd4:	465b      	mov	r3, fp
 8109bd6:	4659      	mov	r1, fp
 8109bd8:	f7f6 fbf0 	bl	81003bc <__adddf3>
 8109bdc:	4632      	mov	r2, r6
 8109bde:	463b      	mov	r3, r7
 8109be0:	ec41 0b19 	vmov	d9, r0, r1
 8109be4:	ec51 0b18 	vmov	r0, r1, d8
 8109be8:	f7f6 fec8 	bl	810097c <__aeabi_ddiv>
 8109bec:	4602      	mov	r2, r0
 8109bee:	460b      	mov	r3, r1
 8109bf0:	ec51 0b19 	vmov	r0, r1, d9
 8109bf4:	f7f6 fd98 	bl	8100728 <__aeabi_dmul>
 8109bf8:	f04f 0800 	mov.w	r8, #0
 8109bfc:	4606      	mov	r6, r0
 8109bfe:	460f      	mov	r7, r1
 8109c00:	4642      	mov	r2, r8
 8109c02:	465b      	mov	r3, fp
 8109c04:	4640      	mov	r0, r8
 8109c06:	4659      	mov	r1, fp
 8109c08:	f7f6 fd8e 	bl	8100728 <__aeabi_dmul>
 8109c0c:	4602      	mov	r2, r0
 8109c0e:	460b      	mov	r3, r1
 8109c10:	4620      	mov	r0, r4
 8109c12:	4629      	mov	r1, r5
 8109c14:	f7f6 fbd0 	bl	81003b8 <__aeabi_dsub>
 8109c18:	4642      	mov	r2, r8
 8109c1a:	4604      	mov	r4, r0
 8109c1c:	460d      	mov	r5, r1
 8109c1e:	465b      	mov	r3, fp
 8109c20:	4650      	mov	r0, sl
 8109c22:	4659      	mov	r1, fp
 8109c24:	f7f6 fbca 	bl	81003bc <__adddf3>
 8109c28:	4602      	mov	r2, r0
 8109c2a:	460b      	mov	r3, r1
 8109c2c:	4620      	mov	r0, r4
 8109c2e:	4629      	mov	r1, r5
 8109c30:	f7f6 fea4 	bl	810097c <__aeabi_ddiv>
 8109c34:	4602      	mov	r2, r0
 8109c36:	460b      	mov	r3, r1
 8109c38:	f7f6 fbc0 	bl	81003bc <__adddf3>
 8109c3c:	4602      	mov	r2, r0
 8109c3e:	460b      	mov	r3, r1
 8109c40:	a113      	add	r1, pc, #76	; (adr r1, 8109c90 <__ieee754_asin+0x418>)
 8109c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109c46:	f7f6 fbb7 	bl	81003b8 <__aeabi_dsub>
 8109c4a:	4602      	mov	r2, r0
 8109c4c:	460b      	mov	r3, r1
 8109c4e:	4630      	mov	r0, r6
 8109c50:	4639      	mov	r1, r7
 8109c52:	f7f6 fbb1 	bl	81003b8 <__aeabi_dsub>
 8109c56:	4642      	mov	r2, r8
 8109c58:	4604      	mov	r4, r0
 8109c5a:	460d      	mov	r5, r1
 8109c5c:	465b      	mov	r3, fp
 8109c5e:	4640      	mov	r0, r8
 8109c60:	4659      	mov	r1, fp
 8109c62:	f7f6 fbab 	bl	81003bc <__adddf3>
 8109c66:	4602      	mov	r2, r0
 8109c68:	460b      	mov	r3, r1
 8109c6a:	a10b      	add	r1, pc, #44	; (adr r1, 8109c98 <__ieee754_asin+0x420>)
 8109c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109c70:	f7f6 fba2 	bl	81003b8 <__aeabi_dsub>
 8109c74:	4602      	mov	r2, r0
 8109c76:	460b      	mov	r3, r1
 8109c78:	4620      	mov	r0, r4
 8109c7a:	4629      	mov	r1, r5
 8109c7c:	f7f6 fb9c 	bl	81003b8 <__aeabi_dsub>
 8109c80:	4602      	mov	r2, r0
 8109c82:	460b      	mov	r3, r1
 8109c84:	a104      	add	r1, pc, #16	; (adr r1, 8109c98 <__ieee754_asin+0x420>)
 8109c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109c8a:	e6df      	b.n	8109a4c <__ieee754_asin+0x1d4>
 8109c8c:	f3af 8000 	nop.w
 8109c90:	33145c07 	.word	0x33145c07
 8109c94:	3c91a626 	.word	0x3c91a626
 8109c98:	54442d18 	.word	0x54442d18
 8109c9c:	3fe921fb 	.word	0x3fe921fb

08109ca0 <__ieee754_atan2>:
 8109ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109ca4:	ec57 6b11 	vmov	r6, r7, d1
 8109ca8:	4273      	negs	r3, r6
 8109caa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8109e30 <__ieee754_atan2+0x190>
 8109cae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8109cb2:	4333      	orrs	r3, r6
 8109cb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8109cb8:	4573      	cmp	r3, lr
 8109cba:	ec51 0b10 	vmov	r0, r1, d0
 8109cbe:	ee11 8a10 	vmov	r8, s2
 8109cc2:	d80a      	bhi.n	8109cda <__ieee754_atan2+0x3a>
 8109cc4:	4244      	negs	r4, r0
 8109cc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8109cca:	4304      	orrs	r4, r0
 8109ccc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8109cd0:	4574      	cmp	r4, lr
 8109cd2:	ee10 9a10 	vmov	r9, s0
 8109cd6:	468c      	mov	ip, r1
 8109cd8:	d907      	bls.n	8109cea <__ieee754_atan2+0x4a>
 8109cda:	4632      	mov	r2, r6
 8109cdc:	463b      	mov	r3, r7
 8109cde:	f7f6 fb6d 	bl	81003bc <__adddf3>
 8109ce2:	ec41 0b10 	vmov	d0, r0, r1
 8109ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109cea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8109cee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8109cf2:	4334      	orrs	r4, r6
 8109cf4:	d103      	bne.n	8109cfe <__ieee754_atan2+0x5e>
 8109cf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109cfa:	f000 b951 	b.w	8109fa0 <atan>
 8109cfe:	17bc      	asrs	r4, r7, #30
 8109d00:	f004 0402 	and.w	r4, r4, #2
 8109d04:	ea53 0909 	orrs.w	r9, r3, r9
 8109d08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8109d0c:	d107      	bne.n	8109d1e <__ieee754_atan2+0x7e>
 8109d0e:	2c02      	cmp	r4, #2
 8109d10:	d060      	beq.n	8109dd4 <__ieee754_atan2+0x134>
 8109d12:	2c03      	cmp	r4, #3
 8109d14:	d1e5      	bne.n	8109ce2 <__ieee754_atan2+0x42>
 8109d16:	a142      	add	r1, pc, #264	; (adr r1, 8109e20 <__ieee754_atan2+0x180>)
 8109d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109d1c:	e7e1      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109d1e:	ea52 0808 	orrs.w	r8, r2, r8
 8109d22:	d106      	bne.n	8109d32 <__ieee754_atan2+0x92>
 8109d24:	f1bc 0f00 	cmp.w	ip, #0
 8109d28:	da5f      	bge.n	8109dea <__ieee754_atan2+0x14a>
 8109d2a:	a13f      	add	r1, pc, #252	; (adr r1, 8109e28 <__ieee754_atan2+0x188>)
 8109d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109d30:	e7d7      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109d32:	4572      	cmp	r2, lr
 8109d34:	d10f      	bne.n	8109d56 <__ieee754_atan2+0xb6>
 8109d36:	4293      	cmp	r3, r2
 8109d38:	f104 34ff 	add.w	r4, r4, #4294967295
 8109d3c:	d107      	bne.n	8109d4e <__ieee754_atan2+0xae>
 8109d3e:	2c02      	cmp	r4, #2
 8109d40:	d84c      	bhi.n	8109ddc <__ieee754_atan2+0x13c>
 8109d42:	4b35      	ldr	r3, [pc, #212]	; (8109e18 <__ieee754_atan2+0x178>)
 8109d44:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8109d48:	e9d4 0100 	ldrd	r0, r1, [r4]
 8109d4c:	e7c9      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109d4e:	2c02      	cmp	r4, #2
 8109d50:	d848      	bhi.n	8109de4 <__ieee754_atan2+0x144>
 8109d52:	4b32      	ldr	r3, [pc, #200]	; (8109e1c <__ieee754_atan2+0x17c>)
 8109d54:	e7f6      	b.n	8109d44 <__ieee754_atan2+0xa4>
 8109d56:	4573      	cmp	r3, lr
 8109d58:	d0e4      	beq.n	8109d24 <__ieee754_atan2+0x84>
 8109d5a:	1a9b      	subs	r3, r3, r2
 8109d5c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8109d60:	ea4f 5223 	mov.w	r2, r3, asr #20
 8109d64:	da1e      	bge.n	8109da4 <__ieee754_atan2+0x104>
 8109d66:	2f00      	cmp	r7, #0
 8109d68:	da01      	bge.n	8109d6e <__ieee754_atan2+0xce>
 8109d6a:	323c      	adds	r2, #60	; 0x3c
 8109d6c:	db1e      	blt.n	8109dac <__ieee754_atan2+0x10c>
 8109d6e:	4632      	mov	r2, r6
 8109d70:	463b      	mov	r3, r7
 8109d72:	f7f6 fe03 	bl	810097c <__aeabi_ddiv>
 8109d76:	ec41 0b10 	vmov	d0, r0, r1
 8109d7a:	f000 fab1 	bl	810a2e0 <fabs>
 8109d7e:	f000 f90f 	bl	8109fa0 <atan>
 8109d82:	ec51 0b10 	vmov	r0, r1, d0
 8109d86:	2c01      	cmp	r4, #1
 8109d88:	d013      	beq.n	8109db2 <__ieee754_atan2+0x112>
 8109d8a:	2c02      	cmp	r4, #2
 8109d8c:	d015      	beq.n	8109dba <__ieee754_atan2+0x11a>
 8109d8e:	2c00      	cmp	r4, #0
 8109d90:	d0a7      	beq.n	8109ce2 <__ieee754_atan2+0x42>
 8109d92:	a319      	add	r3, pc, #100	; (adr r3, 8109df8 <__ieee754_atan2+0x158>)
 8109d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d98:	f7f6 fb0e 	bl	81003b8 <__aeabi_dsub>
 8109d9c:	a318      	add	r3, pc, #96	; (adr r3, 8109e00 <__ieee754_atan2+0x160>)
 8109d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109da2:	e014      	b.n	8109dce <__ieee754_atan2+0x12e>
 8109da4:	a118      	add	r1, pc, #96	; (adr r1, 8109e08 <__ieee754_atan2+0x168>)
 8109da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109daa:	e7ec      	b.n	8109d86 <__ieee754_atan2+0xe6>
 8109dac:	2000      	movs	r0, #0
 8109dae:	2100      	movs	r1, #0
 8109db0:	e7e9      	b.n	8109d86 <__ieee754_atan2+0xe6>
 8109db2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109db6:	4619      	mov	r1, r3
 8109db8:	e793      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109dba:	a30f      	add	r3, pc, #60	; (adr r3, 8109df8 <__ieee754_atan2+0x158>)
 8109dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109dc0:	f7f6 fafa 	bl	81003b8 <__aeabi_dsub>
 8109dc4:	4602      	mov	r2, r0
 8109dc6:	460b      	mov	r3, r1
 8109dc8:	a10d      	add	r1, pc, #52	; (adr r1, 8109e00 <__ieee754_atan2+0x160>)
 8109dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109dce:	f7f6 faf3 	bl	81003b8 <__aeabi_dsub>
 8109dd2:	e786      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109dd4:	a10a      	add	r1, pc, #40	; (adr r1, 8109e00 <__ieee754_atan2+0x160>)
 8109dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109dda:	e782      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109ddc:	a10c      	add	r1, pc, #48	; (adr r1, 8109e10 <__ieee754_atan2+0x170>)
 8109dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109de2:	e77e      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109de4:	2000      	movs	r0, #0
 8109de6:	2100      	movs	r1, #0
 8109de8:	e77b      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109dea:	a107      	add	r1, pc, #28	; (adr r1, 8109e08 <__ieee754_atan2+0x168>)
 8109dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109df0:	e777      	b.n	8109ce2 <__ieee754_atan2+0x42>
 8109df2:	bf00      	nop
 8109df4:	f3af 8000 	nop.w
 8109df8:	33145c07 	.word	0x33145c07
 8109dfc:	3ca1a626 	.word	0x3ca1a626
 8109e00:	54442d18 	.word	0x54442d18
 8109e04:	400921fb 	.word	0x400921fb
 8109e08:	54442d18 	.word	0x54442d18
 8109e0c:	3ff921fb 	.word	0x3ff921fb
 8109e10:	54442d18 	.word	0x54442d18
 8109e14:	3fe921fb 	.word	0x3fe921fb
 8109e18:	0810ee58 	.word	0x0810ee58
 8109e1c:	0810ee70 	.word	0x0810ee70
 8109e20:	54442d18 	.word	0x54442d18
 8109e24:	c00921fb 	.word	0xc00921fb
 8109e28:	54442d18 	.word	0x54442d18
 8109e2c:	bff921fb 	.word	0xbff921fb
 8109e30:	7ff00000 	.word	0x7ff00000

08109e34 <__ieee754_sqrt>:
 8109e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109e38:	ec55 4b10 	vmov	r4, r5, d0
 8109e3c:	4e56      	ldr	r6, [pc, #344]	; (8109f98 <__ieee754_sqrt+0x164>)
 8109e3e:	43ae      	bics	r6, r5
 8109e40:	ee10 0a10 	vmov	r0, s0
 8109e44:	ee10 3a10 	vmov	r3, s0
 8109e48:	4629      	mov	r1, r5
 8109e4a:	462a      	mov	r2, r5
 8109e4c:	d110      	bne.n	8109e70 <__ieee754_sqrt+0x3c>
 8109e4e:	ee10 2a10 	vmov	r2, s0
 8109e52:	462b      	mov	r3, r5
 8109e54:	f7f6 fc68 	bl	8100728 <__aeabi_dmul>
 8109e58:	4602      	mov	r2, r0
 8109e5a:	460b      	mov	r3, r1
 8109e5c:	4620      	mov	r0, r4
 8109e5e:	4629      	mov	r1, r5
 8109e60:	f7f6 faac 	bl	81003bc <__adddf3>
 8109e64:	4604      	mov	r4, r0
 8109e66:	460d      	mov	r5, r1
 8109e68:	ec45 4b10 	vmov	d0, r4, r5
 8109e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109e70:	2d00      	cmp	r5, #0
 8109e72:	dc10      	bgt.n	8109e96 <__ieee754_sqrt+0x62>
 8109e74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8109e78:	4330      	orrs	r0, r6
 8109e7a:	d0f5      	beq.n	8109e68 <__ieee754_sqrt+0x34>
 8109e7c:	b15d      	cbz	r5, 8109e96 <__ieee754_sqrt+0x62>
 8109e7e:	ee10 2a10 	vmov	r2, s0
 8109e82:	462b      	mov	r3, r5
 8109e84:	ee10 0a10 	vmov	r0, s0
 8109e88:	f7f6 fa96 	bl	81003b8 <__aeabi_dsub>
 8109e8c:	4602      	mov	r2, r0
 8109e8e:	460b      	mov	r3, r1
 8109e90:	f7f6 fd74 	bl	810097c <__aeabi_ddiv>
 8109e94:	e7e6      	b.n	8109e64 <__ieee754_sqrt+0x30>
 8109e96:	1509      	asrs	r1, r1, #20
 8109e98:	d076      	beq.n	8109f88 <__ieee754_sqrt+0x154>
 8109e9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8109e9e:	07ce      	lsls	r6, r1, #31
 8109ea0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8109ea4:	bf5e      	ittt	pl
 8109ea6:	0fda      	lsrpl	r2, r3, #31
 8109ea8:	005b      	lslpl	r3, r3, #1
 8109eaa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8109eae:	0fda      	lsrs	r2, r3, #31
 8109eb0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8109eb4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8109eb8:	2000      	movs	r0, #0
 8109eba:	106d      	asrs	r5, r5, #1
 8109ebc:	005b      	lsls	r3, r3, #1
 8109ebe:	f04f 0e16 	mov.w	lr, #22
 8109ec2:	4684      	mov	ip, r0
 8109ec4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8109ec8:	eb0c 0401 	add.w	r4, ip, r1
 8109ecc:	4294      	cmp	r4, r2
 8109ece:	bfde      	ittt	le
 8109ed0:	1b12      	suble	r2, r2, r4
 8109ed2:	eb04 0c01 	addle.w	ip, r4, r1
 8109ed6:	1840      	addle	r0, r0, r1
 8109ed8:	0052      	lsls	r2, r2, #1
 8109eda:	f1be 0e01 	subs.w	lr, lr, #1
 8109ede:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8109ee2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8109ee6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8109eea:	d1ed      	bne.n	8109ec8 <__ieee754_sqrt+0x94>
 8109eec:	4671      	mov	r1, lr
 8109eee:	2720      	movs	r7, #32
 8109ef0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8109ef4:	4562      	cmp	r2, ip
 8109ef6:	eb04 060e 	add.w	r6, r4, lr
 8109efa:	dc02      	bgt.n	8109f02 <__ieee754_sqrt+0xce>
 8109efc:	d113      	bne.n	8109f26 <__ieee754_sqrt+0xf2>
 8109efe:	429e      	cmp	r6, r3
 8109f00:	d811      	bhi.n	8109f26 <__ieee754_sqrt+0xf2>
 8109f02:	2e00      	cmp	r6, #0
 8109f04:	eb06 0e04 	add.w	lr, r6, r4
 8109f08:	da43      	bge.n	8109f92 <__ieee754_sqrt+0x15e>
 8109f0a:	f1be 0f00 	cmp.w	lr, #0
 8109f0e:	db40      	blt.n	8109f92 <__ieee754_sqrt+0x15e>
 8109f10:	f10c 0801 	add.w	r8, ip, #1
 8109f14:	eba2 020c 	sub.w	r2, r2, ip
 8109f18:	429e      	cmp	r6, r3
 8109f1a:	bf88      	it	hi
 8109f1c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8109f20:	1b9b      	subs	r3, r3, r6
 8109f22:	4421      	add	r1, r4
 8109f24:	46c4      	mov	ip, r8
 8109f26:	0052      	lsls	r2, r2, #1
 8109f28:	3f01      	subs	r7, #1
 8109f2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8109f2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8109f32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8109f36:	d1dd      	bne.n	8109ef4 <__ieee754_sqrt+0xc0>
 8109f38:	4313      	orrs	r3, r2
 8109f3a:	d006      	beq.n	8109f4a <__ieee754_sqrt+0x116>
 8109f3c:	1c4c      	adds	r4, r1, #1
 8109f3e:	bf13      	iteet	ne
 8109f40:	3101      	addne	r1, #1
 8109f42:	3001      	addeq	r0, #1
 8109f44:	4639      	moveq	r1, r7
 8109f46:	f021 0101 	bicne.w	r1, r1, #1
 8109f4a:	1043      	asrs	r3, r0, #1
 8109f4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8109f50:	0849      	lsrs	r1, r1, #1
 8109f52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8109f56:	07c2      	lsls	r2, r0, #31
 8109f58:	bf48      	it	mi
 8109f5a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8109f5e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8109f62:	460c      	mov	r4, r1
 8109f64:	463d      	mov	r5, r7
 8109f66:	e77f      	b.n	8109e68 <__ieee754_sqrt+0x34>
 8109f68:	0ada      	lsrs	r2, r3, #11
 8109f6a:	3815      	subs	r0, #21
 8109f6c:	055b      	lsls	r3, r3, #21
 8109f6e:	2a00      	cmp	r2, #0
 8109f70:	d0fa      	beq.n	8109f68 <__ieee754_sqrt+0x134>
 8109f72:	02d7      	lsls	r7, r2, #11
 8109f74:	d50a      	bpl.n	8109f8c <__ieee754_sqrt+0x158>
 8109f76:	f1c1 0420 	rsb	r4, r1, #32
 8109f7a:	fa23 f404 	lsr.w	r4, r3, r4
 8109f7e:	1e4d      	subs	r5, r1, #1
 8109f80:	408b      	lsls	r3, r1
 8109f82:	4322      	orrs	r2, r4
 8109f84:	1b41      	subs	r1, r0, r5
 8109f86:	e788      	b.n	8109e9a <__ieee754_sqrt+0x66>
 8109f88:	4608      	mov	r0, r1
 8109f8a:	e7f0      	b.n	8109f6e <__ieee754_sqrt+0x13a>
 8109f8c:	0052      	lsls	r2, r2, #1
 8109f8e:	3101      	adds	r1, #1
 8109f90:	e7ef      	b.n	8109f72 <__ieee754_sqrt+0x13e>
 8109f92:	46e0      	mov	r8, ip
 8109f94:	e7be      	b.n	8109f14 <__ieee754_sqrt+0xe0>
 8109f96:	bf00      	nop
 8109f98:	7ff00000 	.word	0x7ff00000
 8109f9c:	00000000 	.word	0x00000000

08109fa0 <atan>:
 8109fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109fa4:	ec55 4b10 	vmov	r4, r5, d0
 8109fa8:	4bc3      	ldr	r3, [pc, #780]	; (810a2b8 <atan+0x318>)
 8109faa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8109fae:	429e      	cmp	r6, r3
 8109fb0:	46ab      	mov	fp, r5
 8109fb2:	dd18      	ble.n	8109fe6 <atan+0x46>
 8109fb4:	4bc1      	ldr	r3, [pc, #772]	; (810a2bc <atan+0x31c>)
 8109fb6:	429e      	cmp	r6, r3
 8109fb8:	dc01      	bgt.n	8109fbe <atan+0x1e>
 8109fba:	d109      	bne.n	8109fd0 <atan+0x30>
 8109fbc:	b144      	cbz	r4, 8109fd0 <atan+0x30>
 8109fbe:	4622      	mov	r2, r4
 8109fc0:	462b      	mov	r3, r5
 8109fc2:	4620      	mov	r0, r4
 8109fc4:	4629      	mov	r1, r5
 8109fc6:	f7f6 f9f9 	bl	81003bc <__adddf3>
 8109fca:	4604      	mov	r4, r0
 8109fcc:	460d      	mov	r5, r1
 8109fce:	e006      	b.n	8109fde <atan+0x3e>
 8109fd0:	f1bb 0f00 	cmp.w	fp, #0
 8109fd4:	f300 8131 	bgt.w	810a23a <atan+0x29a>
 8109fd8:	a59b      	add	r5, pc, #620	; (adr r5, 810a248 <atan+0x2a8>)
 8109fda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8109fde:	ec45 4b10 	vmov	d0, r4, r5
 8109fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109fe6:	4bb6      	ldr	r3, [pc, #728]	; (810a2c0 <atan+0x320>)
 8109fe8:	429e      	cmp	r6, r3
 8109fea:	dc14      	bgt.n	810a016 <atan+0x76>
 8109fec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8109ff0:	429e      	cmp	r6, r3
 8109ff2:	dc0d      	bgt.n	810a010 <atan+0x70>
 8109ff4:	a396      	add	r3, pc, #600	; (adr r3, 810a250 <atan+0x2b0>)
 8109ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ffa:	ee10 0a10 	vmov	r0, s0
 8109ffe:	4629      	mov	r1, r5
 810a000:	f7f6 f9dc 	bl	81003bc <__adddf3>
 810a004:	4baf      	ldr	r3, [pc, #700]	; (810a2c4 <atan+0x324>)
 810a006:	2200      	movs	r2, #0
 810a008:	f7f6 fe1e 	bl	8100c48 <__aeabi_dcmpgt>
 810a00c:	2800      	cmp	r0, #0
 810a00e:	d1e6      	bne.n	8109fde <atan+0x3e>
 810a010:	f04f 3aff 	mov.w	sl, #4294967295
 810a014:	e02b      	b.n	810a06e <atan+0xce>
 810a016:	f000 f963 	bl	810a2e0 <fabs>
 810a01a:	4bab      	ldr	r3, [pc, #684]	; (810a2c8 <atan+0x328>)
 810a01c:	429e      	cmp	r6, r3
 810a01e:	ec55 4b10 	vmov	r4, r5, d0
 810a022:	f300 80bf 	bgt.w	810a1a4 <atan+0x204>
 810a026:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 810a02a:	429e      	cmp	r6, r3
 810a02c:	f300 80a0 	bgt.w	810a170 <atan+0x1d0>
 810a030:	ee10 2a10 	vmov	r2, s0
 810a034:	ee10 0a10 	vmov	r0, s0
 810a038:	462b      	mov	r3, r5
 810a03a:	4629      	mov	r1, r5
 810a03c:	f7f6 f9be 	bl	81003bc <__adddf3>
 810a040:	4ba0      	ldr	r3, [pc, #640]	; (810a2c4 <atan+0x324>)
 810a042:	2200      	movs	r2, #0
 810a044:	f7f6 f9b8 	bl	81003b8 <__aeabi_dsub>
 810a048:	2200      	movs	r2, #0
 810a04a:	4606      	mov	r6, r0
 810a04c:	460f      	mov	r7, r1
 810a04e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a052:	4620      	mov	r0, r4
 810a054:	4629      	mov	r1, r5
 810a056:	f7f6 f9b1 	bl	81003bc <__adddf3>
 810a05a:	4602      	mov	r2, r0
 810a05c:	460b      	mov	r3, r1
 810a05e:	4630      	mov	r0, r6
 810a060:	4639      	mov	r1, r7
 810a062:	f7f6 fc8b 	bl	810097c <__aeabi_ddiv>
 810a066:	f04f 0a00 	mov.w	sl, #0
 810a06a:	4604      	mov	r4, r0
 810a06c:	460d      	mov	r5, r1
 810a06e:	4622      	mov	r2, r4
 810a070:	462b      	mov	r3, r5
 810a072:	4620      	mov	r0, r4
 810a074:	4629      	mov	r1, r5
 810a076:	f7f6 fb57 	bl	8100728 <__aeabi_dmul>
 810a07a:	4602      	mov	r2, r0
 810a07c:	460b      	mov	r3, r1
 810a07e:	4680      	mov	r8, r0
 810a080:	4689      	mov	r9, r1
 810a082:	f7f6 fb51 	bl	8100728 <__aeabi_dmul>
 810a086:	a374      	add	r3, pc, #464	; (adr r3, 810a258 <atan+0x2b8>)
 810a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a08c:	4606      	mov	r6, r0
 810a08e:	460f      	mov	r7, r1
 810a090:	f7f6 fb4a 	bl	8100728 <__aeabi_dmul>
 810a094:	a372      	add	r3, pc, #456	; (adr r3, 810a260 <atan+0x2c0>)
 810a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a09a:	f7f6 f98f 	bl	81003bc <__adddf3>
 810a09e:	4632      	mov	r2, r6
 810a0a0:	463b      	mov	r3, r7
 810a0a2:	f7f6 fb41 	bl	8100728 <__aeabi_dmul>
 810a0a6:	a370      	add	r3, pc, #448	; (adr r3, 810a268 <atan+0x2c8>)
 810a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0ac:	f7f6 f986 	bl	81003bc <__adddf3>
 810a0b0:	4632      	mov	r2, r6
 810a0b2:	463b      	mov	r3, r7
 810a0b4:	f7f6 fb38 	bl	8100728 <__aeabi_dmul>
 810a0b8:	a36d      	add	r3, pc, #436	; (adr r3, 810a270 <atan+0x2d0>)
 810a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0be:	f7f6 f97d 	bl	81003bc <__adddf3>
 810a0c2:	4632      	mov	r2, r6
 810a0c4:	463b      	mov	r3, r7
 810a0c6:	f7f6 fb2f 	bl	8100728 <__aeabi_dmul>
 810a0ca:	a36b      	add	r3, pc, #428	; (adr r3, 810a278 <atan+0x2d8>)
 810a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0d0:	f7f6 f974 	bl	81003bc <__adddf3>
 810a0d4:	4632      	mov	r2, r6
 810a0d6:	463b      	mov	r3, r7
 810a0d8:	f7f6 fb26 	bl	8100728 <__aeabi_dmul>
 810a0dc:	a368      	add	r3, pc, #416	; (adr r3, 810a280 <atan+0x2e0>)
 810a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0e2:	f7f6 f96b 	bl	81003bc <__adddf3>
 810a0e6:	4642      	mov	r2, r8
 810a0e8:	464b      	mov	r3, r9
 810a0ea:	f7f6 fb1d 	bl	8100728 <__aeabi_dmul>
 810a0ee:	a366      	add	r3, pc, #408	; (adr r3, 810a288 <atan+0x2e8>)
 810a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0f4:	4680      	mov	r8, r0
 810a0f6:	4689      	mov	r9, r1
 810a0f8:	4630      	mov	r0, r6
 810a0fa:	4639      	mov	r1, r7
 810a0fc:	f7f6 fb14 	bl	8100728 <__aeabi_dmul>
 810a100:	a363      	add	r3, pc, #396	; (adr r3, 810a290 <atan+0x2f0>)
 810a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a106:	f7f6 f957 	bl	81003b8 <__aeabi_dsub>
 810a10a:	4632      	mov	r2, r6
 810a10c:	463b      	mov	r3, r7
 810a10e:	f7f6 fb0b 	bl	8100728 <__aeabi_dmul>
 810a112:	a361      	add	r3, pc, #388	; (adr r3, 810a298 <atan+0x2f8>)
 810a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a118:	f7f6 f94e 	bl	81003b8 <__aeabi_dsub>
 810a11c:	4632      	mov	r2, r6
 810a11e:	463b      	mov	r3, r7
 810a120:	f7f6 fb02 	bl	8100728 <__aeabi_dmul>
 810a124:	a35e      	add	r3, pc, #376	; (adr r3, 810a2a0 <atan+0x300>)
 810a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a12a:	f7f6 f945 	bl	81003b8 <__aeabi_dsub>
 810a12e:	4632      	mov	r2, r6
 810a130:	463b      	mov	r3, r7
 810a132:	f7f6 faf9 	bl	8100728 <__aeabi_dmul>
 810a136:	a35c      	add	r3, pc, #368	; (adr r3, 810a2a8 <atan+0x308>)
 810a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a13c:	f7f6 f93c 	bl	81003b8 <__aeabi_dsub>
 810a140:	4632      	mov	r2, r6
 810a142:	463b      	mov	r3, r7
 810a144:	f7f6 faf0 	bl	8100728 <__aeabi_dmul>
 810a148:	4602      	mov	r2, r0
 810a14a:	460b      	mov	r3, r1
 810a14c:	4640      	mov	r0, r8
 810a14e:	4649      	mov	r1, r9
 810a150:	f7f6 f934 	bl	81003bc <__adddf3>
 810a154:	4622      	mov	r2, r4
 810a156:	462b      	mov	r3, r5
 810a158:	f7f6 fae6 	bl	8100728 <__aeabi_dmul>
 810a15c:	f1ba 3fff 	cmp.w	sl, #4294967295
 810a160:	4602      	mov	r2, r0
 810a162:	460b      	mov	r3, r1
 810a164:	d14b      	bne.n	810a1fe <atan+0x25e>
 810a166:	4620      	mov	r0, r4
 810a168:	4629      	mov	r1, r5
 810a16a:	f7f6 f925 	bl	81003b8 <__aeabi_dsub>
 810a16e:	e72c      	b.n	8109fca <atan+0x2a>
 810a170:	ee10 0a10 	vmov	r0, s0
 810a174:	4b53      	ldr	r3, [pc, #332]	; (810a2c4 <atan+0x324>)
 810a176:	2200      	movs	r2, #0
 810a178:	4629      	mov	r1, r5
 810a17a:	f7f6 f91d 	bl	81003b8 <__aeabi_dsub>
 810a17e:	4b51      	ldr	r3, [pc, #324]	; (810a2c4 <atan+0x324>)
 810a180:	4606      	mov	r6, r0
 810a182:	460f      	mov	r7, r1
 810a184:	2200      	movs	r2, #0
 810a186:	4620      	mov	r0, r4
 810a188:	4629      	mov	r1, r5
 810a18a:	f7f6 f917 	bl	81003bc <__adddf3>
 810a18e:	4602      	mov	r2, r0
 810a190:	460b      	mov	r3, r1
 810a192:	4630      	mov	r0, r6
 810a194:	4639      	mov	r1, r7
 810a196:	f7f6 fbf1 	bl	810097c <__aeabi_ddiv>
 810a19a:	f04f 0a01 	mov.w	sl, #1
 810a19e:	4604      	mov	r4, r0
 810a1a0:	460d      	mov	r5, r1
 810a1a2:	e764      	b.n	810a06e <atan+0xce>
 810a1a4:	4b49      	ldr	r3, [pc, #292]	; (810a2cc <atan+0x32c>)
 810a1a6:	429e      	cmp	r6, r3
 810a1a8:	da1d      	bge.n	810a1e6 <atan+0x246>
 810a1aa:	ee10 0a10 	vmov	r0, s0
 810a1ae:	4b48      	ldr	r3, [pc, #288]	; (810a2d0 <atan+0x330>)
 810a1b0:	2200      	movs	r2, #0
 810a1b2:	4629      	mov	r1, r5
 810a1b4:	f7f6 f900 	bl	81003b8 <__aeabi_dsub>
 810a1b8:	4b45      	ldr	r3, [pc, #276]	; (810a2d0 <atan+0x330>)
 810a1ba:	4606      	mov	r6, r0
 810a1bc:	460f      	mov	r7, r1
 810a1be:	2200      	movs	r2, #0
 810a1c0:	4620      	mov	r0, r4
 810a1c2:	4629      	mov	r1, r5
 810a1c4:	f7f6 fab0 	bl	8100728 <__aeabi_dmul>
 810a1c8:	4b3e      	ldr	r3, [pc, #248]	; (810a2c4 <atan+0x324>)
 810a1ca:	2200      	movs	r2, #0
 810a1cc:	f7f6 f8f6 	bl	81003bc <__adddf3>
 810a1d0:	4602      	mov	r2, r0
 810a1d2:	460b      	mov	r3, r1
 810a1d4:	4630      	mov	r0, r6
 810a1d6:	4639      	mov	r1, r7
 810a1d8:	f7f6 fbd0 	bl	810097c <__aeabi_ddiv>
 810a1dc:	f04f 0a02 	mov.w	sl, #2
 810a1e0:	4604      	mov	r4, r0
 810a1e2:	460d      	mov	r5, r1
 810a1e4:	e743      	b.n	810a06e <atan+0xce>
 810a1e6:	462b      	mov	r3, r5
 810a1e8:	ee10 2a10 	vmov	r2, s0
 810a1ec:	4939      	ldr	r1, [pc, #228]	; (810a2d4 <atan+0x334>)
 810a1ee:	2000      	movs	r0, #0
 810a1f0:	f7f6 fbc4 	bl	810097c <__aeabi_ddiv>
 810a1f4:	f04f 0a03 	mov.w	sl, #3
 810a1f8:	4604      	mov	r4, r0
 810a1fa:	460d      	mov	r5, r1
 810a1fc:	e737      	b.n	810a06e <atan+0xce>
 810a1fe:	4b36      	ldr	r3, [pc, #216]	; (810a2d8 <atan+0x338>)
 810a200:	4e36      	ldr	r6, [pc, #216]	; (810a2dc <atan+0x33c>)
 810a202:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 810a206:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 810a20a:	e9da 2300 	ldrd	r2, r3, [sl]
 810a20e:	f7f6 f8d3 	bl	81003b8 <__aeabi_dsub>
 810a212:	4622      	mov	r2, r4
 810a214:	462b      	mov	r3, r5
 810a216:	f7f6 f8cf 	bl	81003b8 <__aeabi_dsub>
 810a21a:	4602      	mov	r2, r0
 810a21c:	460b      	mov	r3, r1
 810a21e:	e9d6 0100 	ldrd	r0, r1, [r6]
 810a222:	f7f6 f8c9 	bl	81003b8 <__aeabi_dsub>
 810a226:	f1bb 0f00 	cmp.w	fp, #0
 810a22a:	4604      	mov	r4, r0
 810a22c:	460d      	mov	r5, r1
 810a22e:	f6bf aed6 	bge.w	8109fde <atan+0x3e>
 810a232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a236:	461d      	mov	r5, r3
 810a238:	e6d1      	b.n	8109fde <atan+0x3e>
 810a23a:	a51d      	add	r5, pc, #116	; (adr r5, 810a2b0 <atan+0x310>)
 810a23c:	e9d5 4500 	ldrd	r4, r5, [r5]
 810a240:	e6cd      	b.n	8109fde <atan+0x3e>
 810a242:	bf00      	nop
 810a244:	f3af 8000 	nop.w
 810a248:	54442d18 	.word	0x54442d18
 810a24c:	bff921fb 	.word	0xbff921fb
 810a250:	8800759c 	.word	0x8800759c
 810a254:	7e37e43c 	.word	0x7e37e43c
 810a258:	e322da11 	.word	0xe322da11
 810a25c:	3f90ad3a 	.word	0x3f90ad3a
 810a260:	24760deb 	.word	0x24760deb
 810a264:	3fa97b4b 	.word	0x3fa97b4b
 810a268:	a0d03d51 	.word	0xa0d03d51
 810a26c:	3fb10d66 	.word	0x3fb10d66
 810a270:	c54c206e 	.word	0xc54c206e
 810a274:	3fb745cd 	.word	0x3fb745cd
 810a278:	920083ff 	.word	0x920083ff
 810a27c:	3fc24924 	.word	0x3fc24924
 810a280:	5555550d 	.word	0x5555550d
 810a284:	3fd55555 	.word	0x3fd55555
 810a288:	2c6a6c2f 	.word	0x2c6a6c2f
 810a28c:	bfa2b444 	.word	0xbfa2b444
 810a290:	52defd9a 	.word	0x52defd9a
 810a294:	3fadde2d 	.word	0x3fadde2d
 810a298:	af749a6d 	.word	0xaf749a6d
 810a29c:	3fb3b0f2 	.word	0x3fb3b0f2
 810a2a0:	fe231671 	.word	0xfe231671
 810a2a4:	3fbc71c6 	.word	0x3fbc71c6
 810a2a8:	9998ebc4 	.word	0x9998ebc4
 810a2ac:	3fc99999 	.word	0x3fc99999
 810a2b0:	54442d18 	.word	0x54442d18
 810a2b4:	3ff921fb 	.word	0x3ff921fb
 810a2b8:	440fffff 	.word	0x440fffff
 810a2bc:	7ff00000 	.word	0x7ff00000
 810a2c0:	3fdbffff 	.word	0x3fdbffff
 810a2c4:	3ff00000 	.word	0x3ff00000
 810a2c8:	3ff2ffff 	.word	0x3ff2ffff
 810a2cc:	40038000 	.word	0x40038000
 810a2d0:	3ff80000 	.word	0x3ff80000
 810a2d4:	bff00000 	.word	0xbff00000
 810a2d8:	0810eea8 	.word	0x0810eea8
 810a2dc:	0810ee88 	.word	0x0810ee88

0810a2e0 <fabs>:
 810a2e0:	ec51 0b10 	vmov	r0, r1, d0
 810a2e4:	ee10 2a10 	vmov	r2, s0
 810a2e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810a2ec:	ec43 2b10 	vmov	d0, r2, r3
 810a2f0:	4770      	bx	lr
 810a2f2:	0000      	movs	r0, r0
 810a2f4:	0000      	movs	r0, r0
	...

0810a2f8 <nan>:
 810a2f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810a300 <nan+0x8>
 810a2fc:	4770      	bx	lr
 810a2fe:	bf00      	nop
 810a300:	00000000 	.word	0x00000000
 810a304:	7ff80000 	.word	0x7ff80000

0810a308 <__assert_func>:
 810a308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a30a:	4614      	mov	r4, r2
 810a30c:	461a      	mov	r2, r3
 810a30e:	4b09      	ldr	r3, [pc, #36]	; (810a334 <__assert_func+0x2c>)
 810a310:	681b      	ldr	r3, [r3, #0]
 810a312:	4605      	mov	r5, r0
 810a314:	68d8      	ldr	r0, [r3, #12]
 810a316:	b14c      	cbz	r4, 810a32c <__assert_func+0x24>
 810a318:	4b07      	ldr	r3, [pc, #28]	; (810a338 <__assert_func+0x30>)
 810a31a:	9100      	str	r1, [sp, #0]
 810a31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a320:	4906      	ldr	r1, [pc, #24]	; (810a33c <__assert_func+0x34>)
 810a322:	462b      	mov	r3, r5
 810a324:	f000 f814 	bl	810a350 <fiprintf>
 810a328:	f002 f8bc 	bl	810c4a4 <abort>
 810a32c:	4b04      	ldr	r3, [pc, #16]	; (810a340 <__assert_func+0x38>)
 810a32e:	461c      	mov	r4, r3
 810a330:	e7f3      	b.n	810a31a <__assert_func+0x12>
 810a332:	bf00      	nop
 810a334:	100000bc 	.word	0x100000bc
 810a338:	0810eec8 	.word	0x0810eec8
 810a33c:	0810eed5 	.word	0x0810eed5
 810a340:	0810ef03 	.word	0x0810ef03

0810a344 <__errno>:
 810a344:	4b01      	ldr	r3, [pc, #4]	; (810a34c <__errno+0x8>)
 810a346:	6818      	ldr	r0, [r3, #0]
 810a348:	4770      	bx	lr
 810a34a:	bf00      	nop
 810a34c:	100000bc 	.word	0x100000bc

0810a350 <fiprintf>:
 810a350:	b40e      	push	{r1, r2, r3}
 810a352:	b503      	push	{r0, r1, lr}
 810a354:	4601      	mov	r1, r0
 810a356:	ab03      	add	r3, sp, #12
 810a358:	4805      	ldr	r0, [pc, #20]	; (810a370 <fiprintf+0x20>)
 810a35a:	f853 2b04 	ldr.w	r2, [r3], #4
 810a35e:	6800      	ldr	r0, [r0, #0]
 810a360:	9301      	str	r3, [sp, #4]
 810a362:	f000 f925 	bl	810a5b0 <_vfiprintf_r>
 810a366:	b002      	add	sp, #8
 810a368:	f85d eb04 	ldr.w	lr, [sp], #4
 810a36c:	b003      	add	sp, #12
 810a36e:	4770      	bx	lr
 810a370:	100000bc 	.word	0x100000bc

0810a374 <__libc_init_array>:
 810a374:	b570      	push	{r4, r5, r6, lr}
 810a376:	4d0d      	ldr	r5, [pc, #52]	; (810a3ac <__libc_init_array+0x38>)
 810a378:	4c0d      	ldr	r4, [pc, #52]	; (810a3b0 <__libc_init_array+0x3c>)
 810a37a:	1b64      	subs	r4, r4, r5
 810a37c:	10a4      	asrs	r4, r4, #2
 810a37e:	2600      	movs	r6, #0
 810a380:	42a6      	cmp	r6, r4
 810a382:	d109      	bne.n	810a398 <__libc_init_array+0x24>
 810a384:	4d0b      	ldr	r5, [pc, #44]	; (810a3b4 <__libc_init_array+0x40>)
 810a386:	4c0c      	ldr	r4, [pc, #48]	; (810a3b8 <__libc_init_array+0x44>)
 810a388:	f004 fc24 	bl	810ebd4 <_init>
 810a38c:	1b64      	subs	r4, r4, r5
 810a38e:	10a4      	asrs	r4, r4, #2
 810a390:	2600      	movs	r6, #0
 810a392:	42a6      	cmp	r6, r4
 810a394:	d105      	bne.n	810a3a2 <__libc_init_array+0x2e>
 810a396:	bd70      	pop	{r4, r5, r6, pc}
 810a398:	f855 3b04 	ldr.w	r3, [r5], #4
 810a39c:	4798      	blx	r3
 810a39e:	3601      	adds	r6, #1
 810a3a0:	e7ee      	b.n	810a380 <__libc_init_array+0xc>
 810a3a2:	f855 3b04 	ldr.w	r3, [r5], #4
 810a3a6:	4798      	blx	r3
 810a3a8:	3601      	adds	r6, #1
 810a3aa:	e7f2      	b.n	810a392 <__libc_init_array+0x1e>
 810a3ac:	0810f37c 	.word	0x0810f37c
 810a3b0:	0810f37c 	.word	0x0810f37c
 810a3b4:	0810f37c 	.word	0x0810f37c
 810a3b8:	0810f384 	.word	0x0810f384

0810a3bc <malloc>:
 810a3bc:	4b02      	ldr	r3, [pc, #8]	; (810a3c8 <malloc+0xc>)
 810a3be:	4601      	mov	r1, r0
 810a3c0:	6818      	ldr	r0, [r3, #0]
 810a3c2:	f000 b871 	b.w	810a4a8 <_malloc_r>
 810a3c6:	bf00      	nop
 810a3c8:	100000bc 	.word	0x100000bc

0810a3cc <free>:
 810a3cc:	4b02      	ldr	r3, [pc, #8]	; (810a3d8 <free+0xc>)
 810a3ce:	4601      	mov	r1, r0
 810a3d0:	6818      	ldr	r0, [r3, #0]
 810a3d2:	f000 b819 	b.w	810a408 <_free_r>
 810a3d6:	bf00      	nop
 810a3d8:	100000bc 	.word	0x100000bc

0810a3dc <memcpy>:
 810a3dc:	440a      	add	r2, r1
 810a3de:	4291      	cmp	r1, r2
 810a3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 810a3e4:	d100      	bne.n	810a3e8 <memcpy+0xc>
 810a3e6:	4770      	bx	lr
 810a3e8:	b510      	push	{r4, lr}
 810a3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a3f2:	4291      	cmp	r1, r2
 810a3f4:	d1f9      	bne.n	810a3ea <memcpy+0xe>
 810a3f6:	bd10      	pop	{r4, pc}

0810a3f8 <memset>:
 810a3f8:	4402      	add	r2, r0
 810a3fa:	4603      	mov	r3, r0
 810a3fc:	4293      	cmp	r3, r2
 810a3fe:	d100      	bne.n	810a402 <memset+0xa>
 810a400:	4770      	bx	lr
 810a402:	f803 1b01 	strb.w	r1, [r3], #1
 810a406:	e7f9      	b.n	810a3fc <memset+0x4>

0810a408 <_free_r>:
 810a408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a40a:	2900      	cmp	r1, #0
 810a40c:	d048      	beq.n	810a4a0 <_free_r+0x98>
 810a40e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a412:	9001      	str	r0, [sp, #4]
 810a414:	2b00      	cmp	r3, #0
 810a416:	f1a1 0404 	sub.w	r4, r1, #4
 810a41a:	bfb8      	it	lt
 810a41c:	18e4      	addlt	r4, r4, r3
 810a41e:	f003 fc7d 	bl	810dd1c <__malloc_lock>
 810a422:	4a20      	ldr	r2, [pc, #128]	; (810a4a4 <_free_r+0x9c>)
 810a424:	9801      	ldr	r0, [sp, #4]
 810a426:	6813      	ldr	r3, [r2, #0]
 810a428:	4615      	mov	r5, r2
 810a42a:	b933      	cbnz	r3, 810a43a <_free_r+0x32>
 810a42c:	6063      	str	r3, [r4, #4]
 810a42e:	6014      	str	r4, [r2, #0]
 810a430:	b003      	add	sp, #12
 810a432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810a436:	f003 bc77 	b.w	810dd28 <__malloc_unlock>
 810a43a:	42a3      	cmp	r3, r4
 810a43c:	d90b      	bls.n	810a456 <_free_r+0x4e>
 810a43e:	6821      	ldr	r1, [r4, #0]
 810a440:	1862      	adds	r2, r4, r1
 810a442:	4293      	cmp	r3, r2
 810a444:	bf04      	itt	eq
 810a446:	681a      	ldreq	r2, [r3, #0]
 810a448:	685b      	ldreq	r3, [r3, #4]
 810a44a:	6063      	str	r3, [r4, #4]
 810a44c:	bf04      	itt	eq
 810a44e:	1852      	addeq	r2, r2, r1
 810a450:	6022      	streq	r2, [r4, #0]
 810a452:	602c      	str	r4, [r5, #0]
 810a454:	e7ec      	b.n	810a430 <_free_r+0x28>
 810a456:	461a      	mov	r2, r3
 810a458:	685b      	ldr	r3, [r3, #4]
 810a45a:	b10b      	cbz	r3, 810a460 <_free_r+0x58>
 810a45c:	42a3      	cmp	r3, r4
 810a45e:	d9fa      	bls.n	810a456 <_free_r+0x4e>
 810a460:	6811      	ldr	r1, [r2, #0]
 810a462:	1855      	adds	r5, r2, r1
 810a464:	42a5      	cmp	r5, r4
 810a466:	d10b      	bne.n	810a480 <_free_r+0x78>
 810a468:	6824      	ldr	r4, [r4, #0]
 810a46a:	4421      	add	r1, r4
 810a46c:	1854      	adds	r4, r2, r1
 810a46e:	42a3      	cmp	r3, r4
 810a470:	6011      	str	r1, [r2, #0]
 810a472:	d1dd      	bne.n	810a430 <_free_r+0x28>
 810a474:	681c      	ldr	r4, [r3, #0]
 810a476:	685b      	ldr	r3, [r3, #4]
 810a478:	6053      	str	r3, [r2, #4]
 810a47a:	4421      	add	r1, r4
 810a47c:	6011      	str	r1, [r2, #0]
 810a47e:	e7d7      	b.n	810a430 <_free_r+0x28>
 810a480:	d902      	bls.n	810a488 <_free_r+0x80>
 810a482:	230c      	movs	r3, #12
 810a484:	6003      	str	r3, [r0, #0]
 810a486:	e7d3      	b.n	810a430 <_free_r+0x28>
 810a488:	6825      	ldr	r5, [r4, #0]
 810a48a:	1961      	adds	r1, r4, r5
 810a48c:	428b      	cmp	r3, r1
 810a48e:	bf04      	itt	eq
 810a490:	6819      	ldreq	r1, [r3, #0]
 810a492:	685b      	ldreq	r3, [r3, #4]
 810a494:	6063      	str	r3, [r4, #4]
 810a496:	bf04      	itt	eq
 810a498:	1949      	addeq	r1, r1, r5
 810a49a:	6021      	streq	r1, [r4, #0]
 810a49c:	6054      	str	r4, [r2, #4]
 810a49e:	e7c7      	b.n	810a430 <_free_r+0x28>
 810a4a0:	b003      	add	sp, #12
 810a4a2:	bd30      	pop	{r4, r5, pc}
 810a4a4:	100003c4 	.word	0x100003c4

0810a4a8 <_malloc_r>:
 810a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a4aa:	1ccd      	adds	r5, r1, #3
 810a4ac:	f025 0503 	bic.w	r5, r5, #3
 810a4b0:	3508      	adds	r5, #8
 810a4b2:	2d0c      	cmp	r5, #12
 810a4b4:	bf38      	it	cc
 810a4b6:	250c      	movcc	r5, #12
 810a4b8:	2d00      	cmp	r5, #0
 810a4ba:	4606      	mov	r6, r0
 810a4bc:	db01      	blt.n	810a4c2 <_malloc_r+0x1a>
 810a4be:	42a9      	cmp	r1, r5
 810a4c0:	d903      	bls.n	810a4ca <_malloc_r+0x22>
 810a4c2:	230c      	movs	r3, #12
 810a4c4:	6033      	str	r3, [r6, #0]
 810a4c6:	2000      	movs	r0, #0
 810a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a4ca:	f003 fc27 	bl	810dd1c <__malloc_lock>
 810a4ce:	4921      	ldr	r1, [pc, #132]	; (810a554 <_malloc_r+0xac>)
 810a4d0:	680a      	ldr	r2, [r1, #0]
 810a4d2:	4614      	mov	r4, r2
 810a4d4:	b99c      	cbnz	r4, 810a4fe <_malloc_r+0x56>
 810a4d6:	4f20      	ldr	r7, [pc, #128]	; (810a558 <_malloc_r+0xb0>)
 810a4d8:	683b      	ldr	r3, [r7, #0]
 810a4da:	b923      	cbnz	r3, 810a4e6 <_malloc_r+0x3e>
 810a4dc:	4621      	mov	r1, r4
 810a4de:	4630      	mov	r0, r6
 810a4e0:	f001 f810 	bl	810b504 <_sbrk_r>
 810a4e4:	6038      	str	r0, [r7, #0]
 810a4e6:	4629      	mov	r1, r5
 810a4e8:	4630      	mov	r0, r6
 810a4ea:	f001 f80b 	bl	810b504 <_sbrk_r>
 810a4ee:	1c43      	adds	r3, r0, #1
 810a4f0:	d123      	bne.n	810a53a <_malloc_r+0x92>
 810a4f2:	230c      	movs	r3, #12
 810a4f4:	6033      	str	r3, [r6, #0]
 810a4f6:	4630      	mov	r0, r6
 810a4f8:	f003 fc16 	bl	810dd28 <__malloc_unlock>
 810a4fc:	e7e3      	b.n	810a4c6 <_malloc_r+0x1e>
 810a4fe:	6823      	ldr	r3, [r4, #0]
 810a500:	1b5b      	subs	r3, r3, r5
 810a502:	d417      	bmi.n	810a534 <_malloc_r+0x8c>
 810a504:	2b0b      	cmp	r3, #11
 810a506:	d903      	bls.n	810a510 <_malloc_r+0x68>
 810a508:	6023      	str	r3, [r4, #0]
 810a50a:	441c      	add	r4, r3
 810a50c:	6025      	str	r5, [r4, #0]
 810a50e:	e004      	b.n	810a51a <_malloc_r+0x72>
 810a510:	6863      	ldr	r3, [r4, #4]
 810a512:	42a2      	cmp	r2, r4
 810a514:	bf0c      	ite	eq
 810a516:	600b      	streq	r3, [r1, #0]
 810a518:	6053      	strne	r3, [r2, #4]
 810a51a:	4630      	mov	r0, r6
 810a51c:	f003 fc04 	bl	810dd28 <__malloc_unlock>
 810a520:	f104 000b 	add.w	r0, r4, #11
 810a524:	1d23      	adds	r3, r4, #4
 810a526:	f020 0007 	bic.w	r0, r0, #7
 810a52a:	1ac2      	subs	r2, r0, r3
 810a52c:	d0cc      	beq.n	810a4c8 <_malloc_r+0x20>
 810a52e:	1a1b      	subs	r3, r3, r0
 810a530:	50a3      	str	r3, [r4, r2]
 810a532:	e7c9      	b.n	810a4c8 <_malloc_r+0x20>
 810a534:	4622      	mov	r2, r4
 810a536:	6864      	ldr	r4, [r4, #4]
 810a538:	e7cc      	b.n	810a4d4 <_malloc_r+0x2c>
 810a53a:	1cc4      	adds	r4, r0, #3
 810a53c:	f024 0403 	bic.w	r4, r4, #3
 810a540:	42a0      	cmp	r0, r4
 810a542:	d0e3      	beq.n	810a50c <_malloc_r+0x64>
 810a544:	1a21      	subs	r1, r4, r0
 810a546:	4630      	mov	r0, r6
 810a548:	f000 ffdc 	bl	810b504 <_sbrk_r>
 810a54c:	3001      	adds	r0, #1
 810a54e:	d1dd      	bne.n	810a50c <_malloc_r+0x64>
 810a550:	e7cf      	b.n	810a4f2 <_malloc_r+0x4a>
 810a552:	bf00      	nop
 810a554:	100003c4 	.word	0x100003c4
 810a558:	100003c8 	.word	0x100003c8

0810a55c <__sfputc_r>:
 810a55c:	6893      	ldr	r3, [r2, #8]
 810a55e:	3b01      	subs	r3, #1
 810a560:	2b00      	cmp	r3, #0
 810a562:	b410      	push	{r4}
 810a564:	6093      	str	r3, [r2, #8]
 810a566:	da08      	bge.n	810a57a <__sfputc_r+0x1e>
 810a568:	6994      	ldr	r4, [r2, #24]
 810a56a:	42a3      	cmp	r3, r4
 810a56c:	db01      	blt.n	810a572 <__sfputc_r+0x16>
 810a56e:	290a      	cmp	r1, #10
 810a570:	d103      	bne.n	810a57a <__sfputc_r+0x1e>
 810a572:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a576:	f001 bed5 	b.w	810c324 <__swbuf_r>
 810a57a:	6813      	ldr	r3, [r2, #0]
 810a57c:	1c58      	adds	r0, r3, #1
 810a57e:	6010      	str	r0, [r2, #0]
 810a580:	7019      	strb	r1, [r3, #0]
 810a582:	4608      	mov	r0, r1
 810a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a588:	4770      	bx	lr

0810a58a <__sfputs_r>:
 810a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a58c:	4606      	mov	r6, r0
 810a58e:	460f      	mov	r7, r1
 810a590:	4614      	mov	r4, r2
 810a592:	18d5      	adds	r5, r2, r3
 810a594:	42ac      	cmp	r4, r5
 810a596:	d101      	bne.n	810a59c <__sfputs_r+0x12>
 810a598:	2000      	movs	r0, #0
 810a59a:	e007      	b.n	810a5ac <__sfputs_r+0x22>
 810a59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a5a0:	463a      	mov	r2, r7
 810a5a2:	4630      	mov	r0, r6
 810a5a4:	f7ff ffda 	bl	810a55c <__sfputc_r>
 810a5a8:	1c43      	adds	r3, r0, #1
 810a5aa:	d1f3      	bne.n	810a594 <__sfputs_r+0xa>
 810a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a5b0 <_vfiprintf_r>:
 810a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a5b4:	460d      	mov	r5, r1
 810a5b6:	b09d      	sub	sp, #116	; 0x74
 810a5b8:	4614      	mov	r4, r2
 810a5ba:	4698      	mov	r8, r3
 810a5bc:	4606      	mov	r6, r0
 810a5be:	b118      	cbz	r0, 810a5c8 <_vfiprintf_r+0x18>
 810a5c0:	6983      	ldr	r3, [r0, #24]
 810a5c2:	b90b      	cbnz	r3, 810a5c8 <_vfiprintf_r+0x18>
 810a5c4:	f002 ff06 	bl	810d3d4 <__sinit>
 810a5c8:	4b89      	ldr	r3, [pc, #548]	; (810a7f0 <_vfiprintf_r+0x240>)
 810a5ca:	429d      	cmp	r5, r3
 810a5cc:	d11b      	bne.n	810a606 <_vfiprintf_r+0x56>
 810a5ce:	6875      	ldr	r5, [r6, #4]
 810a5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a5d2:	07d9      	lsls	r1, r3, #31
 810a5d4:	d405      	bmi.n	810a5e2 <_vfiprintf_r+0x32>
 810a5d6:	89ab      	ldrh	r3, [r5, #12]
 810a5d8:	059a      	lsls	r2, r3, #22
 810a5da:	d402      	bmi.n	810a5e2 <_vfiprintf_r+0x32>
 810a5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a5de:	f003 fb0a 	bl	810dbf6 <__retarget_lock_acquire_recursive>
 810a5e2:	89ab      	ldrh	r3, [r5, #12]
 810a5e4:	071b      	lsls	r3, r3, #28
 810a5e6:	d501      	bpl.n	810a5ec <_vfiprintf_r+0x3c>
 810a5e8:	692b      	ldr	r3, [r5, #16]
 810a5ea:	b9eb      	cbnz	r3, 810a628 <_vfiprintf_r+0x78>
 810a5ec:	4629      	mov	r1, r5
 810a5ee:	4630      	mov	r0, r6
 810a5f0:	f001 feea 	bl	810c3c8 <__swsetup_r>
 810a5f4:	b1c0      	cbz	r0, 810a628 <_vfiprintf_r+0x78>
 810a5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a5f8:	07dc      	lsls	r4, r3, #31
 810a5fa:	d50e      	bpl.n	810a61a <_vfiprintf_r+0x6a>
 810a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 810a600:	b01d      	add	sp, #116	; 0x74
 810a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a606:	4b7b      	ldr	r3, [pc, #492]	; (810a7f4 <_vfiprintf_r+0x244>)
 810a608:	429d      	cmp	r5, r3
 810a60a:	d101      	bne.n	810a610 <_vfiprintf_r+0x60>
 810a60c:	68b5      	ldr	r5, [r6, #8]
 810a60e:	e7df      	b.n	810a5d0 <_vfiprintf_r+0x20>
 810a610:	4b79      	ldr	r3, [pc, #484]	; (810a7f8 <_vfiprintf_r+0x248>)
 810a612:	429d      	cmp	r5, r3
 810a614:	bf08      	it	eq
 810a616:	68f5      	ldreq	r5, [r6, #12]
 810a618:	e7da      	b.n	810a5d0 <_vfiprintf_r+0x20>
 810a61a:	89ab      	ldrh	r3, [r5, #12]
 810a61c:	0598      	lsls	r0, r3, #22
 810a61e:	d4ed      	bmi.n	810a5fc <_vfiprintf_r+0x4c>
 810a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a622:	f003 fae9 	bl	810dbf8 <__retarget_lock_release_recursive>
 810a626:	e7e9      	b.n	810a5fc <_vfiprintf_r+0x4c>
 810a628:	2300      	movs	r3, #0
 810a62a:	9309      	str	r3, [sp, #36]	; 0x24
 810a62c:	2320      	movs	r3, #32
 810a62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a632:	f8cd 800c 	str.w	r8, [sp, #12]
 810a636:	2330      	movs	r3, #48	; 0x30
 810a638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810a7fc <_vfiprintf_r+0x24c>
 810a63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a640:	f04f 0901 	mov.w	r9, #1
 810a644:	4623      	mov	r3, r4
 810a646:	469a      	mov	sl, r3
 810a648:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a64c:	b10a      	cbz	r2, 810a652 <_vfiprintf_r+0xa2>
 810a64e:	2a25      	cmp	r2, #37	; 0x25
 810a650:	d1f9      	bne.n	810a646 <_vfiprintf_r+0x96>
 810a652:	ebba 0b04 	subs.w	fp, sl, r4
 810a656:	d00b      	beq.n	810a670 <_vfiprintf_r+0xc0>
 810a658:	465b      	mov	r3, fp
 810a65a:	4622      	mov	r2, r4
 810a65c:	4629      	mov	r1, r5
 810a65e:	4630      	mov	r0, r6
 810a660:	f7ff ff93 	bl	810a58a <__sfputs_r>
 810a664:	3001      	adds	r0, #1
 810a666:	f000 80aa 	beq.w	810a7be <_vfiprintf_r+0x20e>
 810a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a66c:	445a      	add	r2, fp
 810a66e:	9209      	str	r2, [sp, #36]	; 0x24
 810a670:	f89a 3000 	ldrb.w	r3, [sl]
 810a674:	2b00      	cmp	r3, #0
 810a676:	f000 80a2 	beq.w	810a7be <_vfiprintf_r+0x20e>
 810a67a:	2300      	movs	r3, #0
 810a67c:	f04f 32ff 	mov.w	r2, #4294967295
 810a680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a684:	f10a 0a01 	add.w	sl, sl, #1
 810a688:	9304      	str	r3, [sp, #16]
 810a68a:	9307      	str	r3, [sp, #28]
 810a68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a690:	931a      	str	r3, [sp, #104]	; 0x68
 810a692:	4654      	mov	r4, sl
 810a694:	2205      	movs	r2, #5
 810a696:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a69a:	4858      	ldr	r0, [pc, #352]	; (810a7fc <_vfiprintf_r+0x24c>)
 810a69c:	f7f5 fe38 	bl	8100310 <memchr>
 810a6a0:	9a04      	ldr	r2, [sp, #16]
 810a6a2:	b9d8      	cbnz	r0, 810a6dc <_vfiprintf_r+0x12c>
 810a6a4:	06d1      	lsls	r1, r2, #27
 810a6a6:	bf44      	itt	mi
 810a6a8:	2320      	movmi	r3, #32
 810a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a6ae:	0713      	lsls	r3, r2, #28
 810a6b0:	bf44      	itt	mi
 810a6b2:	232b      	movmi	r3, #43	; 0x2b
 810a6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a6b8:	f89a 3000 	ldrb.w	r3, [sl]
 810a6bc:	2b2a      	cmp	r3, #42	; 0x2a
 810a6be:	d015      	beq.n	810a6ec <_vfiprintf_r+0x13c>
 810a6c0:	9a07      	ldr	r2, [sp, #28]
 810a6c2:	4654      	mov	r4, sl
 810a6c4:	2000      	movs	r0, #0
 810a6c6:	f04f 0c0a 	mov.w	ip, #10
 810a6ca:	4621      	mov	r1, r4
 810a6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a6d0:	3b30      	subs	r3, #48	; 0x30
 810a6d2:	2b09      	cmp	r3, #9
 810a6d4:	d94e      	bls.n	810a774 <_vfiprintf_r+0x1c4>
 810a6d6:	b1b0      	cbz	r0, 810a706 <_vfiprintf_r+0x156>
 810a6d8:	9207      	str	r2, [sp, #28]
 810a6da:	e014      	b.n	810a706 <_vfiprintf_r+0x156>
 810a6dc:	eba0 0308 	sub.w	r3, r0, r8
 810a6e0:	fa09 f303 	lsl.w	r3, r9, r3
 810a6e4:	4313      	orrs	r3, r2
 810a6e6:	9304      	str	r3, [sp, #16]
 810a6e8:	46a2      	mov	sl, r4
 810a6ea:	e7d2      	b.n	810a692 <_vfiprintf_r+0xe2>
 810a6ec:	9b03      	ldr	r3, [sp, #12]
 810a6ee:	1d19      	adds	r1, r3, #4
 810a6f0:	681b      	ldr	r3, [r3, #0]
 810a6f2:	9103      	str	r1, [sp, #12]
 810a6f4:	2b00      	cmp	r3, #0
 810a6f6:	bfbb      	ittet	lt
 810a6f8:	425b      	neglt	r3, r3
 810a6fa:	f042 0202 	orrlt.w	r2, r2, #2
 810a6fe:	9307      	strge	r3, [sp, #28]
 810a700:	9307      	strlt	r3, [sp, #28]
 810a702:	bfb8      	it	lt
 810a704:	9204      	strlt	r2, [sp, #16]
 810a706:	7823      	ldrb	r3, [r4, #0]
 810a708:	2b2e      	cmp	r3, #46	; 0x2e
 810a70a:	d10c      	bne.n	810a726 <_vfiprintf_r+0x176>
 810a70c:	7863      	ldrb	r3, [r4, #1]
 810a70e:	2b2a      	cmp	r3, #42	; 0x2a
 810a710:	d135      	bne.n	810a77e <_vfiprintf_r+0x1ce>
 810a712:	9b03      	ldr	r3, [sp, #12]
 810a714:	1d1a      	adds	r2, r3, #4
 810a716:	681b      	ldr	r3, [r3, #0]
 810a718:	9203      	str	r2, [sp, #12]
 810a71a:	2b00      	cmp	r3, #0
 810a71c:	bfb8      	it	lt
 810a71e:	f04f 33ff 	movlt.w	r3, #4294967295
 810a722:	3402      	adds	r4, #2
 810a724:	9305      	str	r3, [sp, #20]
 810a726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810a80c <_vfiprintf_r+0x25c>
 810a72a:	7821      	ldrb	r1, [r4, #0]
 810a72c:	2203      	movs	r2, #3
 810a72e:	4650      	mov	r0, sl
 810a730:	f7f5 fdee 	bl	8100310 <memchr>
 810a734:	b140      	cbz	r0, 810a748 <_vfiprintf_r+0x198>
 810a736:	2340      	movs	r3, #64	; 0x40
 810a738:	eba0 000a 	sub.w	r0, r0, sl
 810a73c:	fa03 f000 	lsl.w	r0, r3, r0
 810a740:	9b04      	ldr	r3, [sp, #16]
 810a742:	4303      	orrs	r3, r0
 810a744:	3401      	adds	r4, #1
 810a746:	9304      	str	r3, [sp, #16]
 810a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a74c:	482c      	ldr	r0, [pc, #176]	; (810a800 <_vfiprintf_r+0x250>)
 810a74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a752:	2206      	movs	r2, #6
 810a754:	f7f5 fddc 	bl	8100310 <memchr>
 810a758:	2800      	cmp	r0, #0
 810a75a:	d03f      	beq.n	810a7dc <_vfiprintf_r+0x22c>
 810a75c:	4b29      	ldr	r3, [pc, #164]	; (810a804 <_vfiprintf_r+0x254>)
 810a75e:	bb1b      	cbnz	r3, 810a7a8 <_vfiprintf_r+0x1f8>
 810a760:	9b03      	ldr	r3, [sp, #12]
 810a762:	3307      	adds	r3, #7
 810a764:	f023 0307 	bic.w	r3, r3, #7
 810a768:	3308      	adds	r3, #8
 810a76a:	9303      	str	r3, [sp, #12]
 810a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a76e:	443b      	add	r3, r7
 810a770:	9309      	str	r3, [sp, #36]	; 0x24
 810a772:	e767      	b.n	810a644 <_vfiprintf_r+0x94>
 810a774:	fb0c 3202 	mla	r2, ip, r2, r3
 810a778:	460c      	mov	r4, r1
 810a77a:	2001      	movs	r0, #1
 810a77c:	e7a5      	b.n	810a6ca <_vfiprintf_r+0x11a>
 810a77e:	2300      	movs	r3, #0
 810a780:	3401      	adds	r4, #1
 810a782:	9305      	str	r3, [sp, #20]
 810a784:	4619      	mov	r1, r3
 810a786:	f04f 0c0a 	mov.w	ip, #10
 810a78a:	4620      	mov	r0, r4
 810a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a790:	3a30      	subs	r2, #48	; 0x30
 810a792:	2a09      	cmp	r2, #9
 810a794:	d903      	bls.n	810a79e <_vfiprintf_r+0x1ee>
 810a796:	2b00      	cmp	r3, #0
 810a798:	d0c5      	beq.n	810a726 <_vfiprintf_r+0x176>
 810a79a:	9105      	str	r1, [sp, #20]
 810a79c:	e7c3      	b.n	810a726 <_vfiprintf_r+0x176>
 810a79e:	fb0c 2101 	mla	r1, ip, r1, r2
 810a7a2:	4604      	mov	r4, r0
 810a7a4:	2301      	movs	r3, #1
 810a7a6:	e7f0      	b.n	810a78a <_vfiprintf_r+0x1da>
 810a7a8:	ab03      	add	r3, sp, #12
 810a7aa:	9300      	str	r3, [sp, #0]
 810a7ac:	462a      	mov	r2, r5
 810a7ae:	4b16      	ldr	r3, [pc, #88]	; (810a808 <_vfiprintf_r+0x258>)
 810a7b0:	a904      	add	r1, sp, #16
 810a7b2:	4630      	mov	r0, r6
 810a7b4:	f000 f8cc 	bl	810a950 <_printf_float>
 810a7b8:	4607      	mov	r7, r0
 810a7ba:	1c78      	adds	r0, r7, #1
 810a7bc:	d1d6      	bne.n	810a76c <_vfiprintf_r+0x1bc>
 810a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a7c0:	07d9      	lsls	r1, r3, #31
 810a7c2:	d405      	bmi.n	810a7d0 <_vfiprintf_r+0x220>
 810a7c4:	89ab      	ldrh	r3, [r5, #12]
 810a7c6:	059a      	lsls	r2, r3, #22
 810a7c8:	d402      	bmi.n	810a7d0 <_vfiprintf_r+0x220>
 810a7ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a7cc:	f003 fa14 	bl	810dbf8 <__retarget_lock_release_recursive>
 810a7d0:	89ab      	ldrh	r3, [r5, #12]
 810a7d2:	065b      	lsls	r3, r3, #25
 810a7d4:	f53f af12 	bmi.w	810a5fc <_vfiprintf_r+0x4c>
 810a7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a7da:	e711      	b.n	810a600 <_vfiprintf_r+0x50>
 810a7dc:	ab03      	add	r3, sp, #12
 810a7de:	9300      	str	r3, [sp, #0]
 810a7e0:	462a      	mov	r2, r5
 810a7e2:	4b09      	ldr	r3, [pc, #36]	; (810a808 <_vfiprintf_r+0x258>)
 810a7e4:	a904      	add	r1, sp, #16
 810a7e6:	4630      	mov	r0, r6
 810a7e8:	f000 fb56 	bl	810ae98 <_printf_i>
 810a7ec:	e7e4      	b.n	810a7b8 <_vfiprintf_r+0x208>
 810a7ee:	bf00      	nop
 810a7f0:	0810f160 	.word	0x0810f160
 810a7f4:	0810f180 	.word	0x0810f180
 810a7f8:	0810f140 	.word	0x0810f140
 810a7fc:	0810ef08 	.word	0x0810ef08
 810a800:	0810ef12 	.word	0x0810ef12
 810a804:	0810a951 	.word	0x0810a951
 810a808:	0810a58b 	.word	0x0810a58b
 810a80c:	0810ef0e 	.word	0x0810ef0e

0810a810 <__cvt>:
 810a810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a814:	ec55 4b10 	vmov	r4, r5, d0
 810a818:	2d00      	cmp	r5, #0
 810a81a:	460e      	mov	r6, r1
 810a81c:	4619      	mov	r1, r3
 810a81e:	462b      	mov	r3, r5
 810a820:	bfbb      	ittet	lt
 810a822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810a826:	461d      	movlt	r5, r3
 810a828:	2300      	movge	r3, #0
 810a82a:	232d      	movlt	r3, #45	; 0x2d
 810a82c:	700b      	strb	r3, [r1, #0]
 810a82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810a834:	4691      	mov	r9, r2
 810a836:	f023 0820 	bic.w	r8, r3, #32
 810a83a:	bfbc      	itt	lt
 810a83c:	4622      	movlt	r2, r4
 810a83e:	4614      	movlt	r4, r2
 810a840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a844:	d005      	beq.n	810a852 <__cvt+0x42>
 810a846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810a84a:	d100      	bne.n	810a84e <__cvt+0x3e>
 810a84c:	3601      	adds	r6, #1
 810a84e:	2102      	movs	r1, #2
 810a850:	e000      	b.n	810a854 <__cvt+0x44>
 810a852:	2103      	movs	r1, #3
 810a854:	ab03      	add	r3, sp, #12
 810a856:	9301      	str	r3, [sp, #4]
 810a858:	ab02      	add	r3, sp, #8
 810a85a:	9300      	str	r3, [sp, #0]
 810a85c:	ec45 4b10 	vmov	d0, r4, r5
 810a860:	4653      	mov	r3, sl
 810a862:	4632      	mov	r2, r6
 810a864:	f001 feb0 	bl	810c5c8 <_dtoa_r>
 810a868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810a86c:	4607      	mov	r7, r0
 810a86e:	d102      	bne.n	810a876 <__cvt+0x66>
 810a870:	f019 0f01 	tst.w	r9, #1
 810a874:	d022      	beq.n	810a8bc <__cvt+0xac>
 810a876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a87a:	eb07 0906 	add.w	r9, r7, r6
 810a87e:	d110      	bne.n	810a8a2 <__cvt+0x92>
 810a880:	783b      	ldrb	r3, [r7, #0]
 810a882:	2b30      	cmp	r3, #48	; 0x30
 810a884:	d10a      	bne.n	810a89c <__cvt+0x8c>
 810a886:	2200      	movs	r2, #0
 810a888:	2300      	movs	r3, #0
 810a88a:	4620      	mov	r0, r4
 810a88c:	4629      	mov	r1, r5
 810a88e:	f7f6 f9b3 	bl	8100bf8 <__aeabi_dcmpeq>
 810a892:	b918      	cbnz	r0, 810a89c <__cvt+0x8c>
 810a894:	f1c6 0601 	rsb	r6, r6, #1
 810a898:	f8ca 6000 	str.w	r6, [sl]
 810a89c:	f8da 3000 	ldr.w	r3, [sl]
 810a8a0:	4499      	add	r9, r3
 810a8a2:	2200      	movs	r2, #0
 810a8a4:	2300      	movs	r3, #0
 810a8a6:	4620      	mov	r0, r4
 810a8a8:	4629      	mov	r1, r5
 810a8aa:	f7f6 f9a5 	bl	8100bf8 <__aeabi_dcmpeq>
 810a8ae:	b108      	cbz	r0, 810a8b4 <__cvt+0xa4>
 810a8b0:	f8cd 900c 	str.w	r9, [sp, #12]
 810a8b4:	2230      	movs	r2, #48	; 0x30
 810a8b6:	9b03      	ldr	r3, [sp, #12]
 810a8b8:	454b      	cmp	r3, r9
 810a8ba:	d307      	bcc.n	810a8cc <__cvt+0xbc>
 810a8bc:	9b03      	ldr	r3, [sp, #12]
 810a8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a8c0:	1bdb      	subs	r3, r3, r7
 810a8c2:	4638      	mov	r0, r7
 810a8c4:	6013      	str	r3, [r2, #0]
 810a8c6:	b004      	add	sp, #16
 810a8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a8cc:	1c59      	adds	r1, r3, #1
 810a8ce:	9103      	str	r1, [sp, #12]
 810a8d0:	701a      	strb	r2, [r3, #0]
 810a8d2:	e7f0      	b.n	810a8b6 <__cvt+0xa6>

0810a8d4 <__exponent>:
 810a8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a8d6:	4603      	mov	r3, r0
 810a8d8:	2900      	cmp	r1, #0
 810a8da:	bfb8      	it	lt
 810a8dc:	4249      	neglt	r1, r1
 810a8de:	f803 2b02 	strb.w	r2, [r3], #2
 810a8e2:	bfb4      	ite	lt
 810a8e4:	222d      	movlt	r2, #45	; 0x2d
 810a8e6:	222b      	movge	r2, #43	; 0x2b
 810a8e8:	2909      	cmp	r1, #9
 810a8ea:	7042      	strb	r2, [r0, #1]
 810a8ec:	dd2a      	ble.n	810a944 <__exponent+0x70>
 810a8ee:	f10d 0407 	add.w	r4, sp, #7
 810a8f2:	46a4      	mov	ip, r4
 810a8f4:	270a      	movs	r7, #10
 810a8f6:	46a6      	mov	lr, r4
 810a8f8:	460a      	mov	r2, r1
 810a8fa:	fb91 f6f7 	sdiv	r6, r1, r7
 810a8fe:	fb07 1516 	mls	r5, r7, r6, r1
 810a902:	3530      	adds	r5, #48	; 0x30
 810a904:	2a63      	cmp	r2, #99	; 0x63
 810a906:	f104 34ff 	add.w	r4, r4, #4294967295
 810a90a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810a90e:	4631      	mov	r1, r6
 810a910:	dcf1      	bgt.n	810a8f6 <__exponent+0x22>
 810a912:	3130      	adds	r1, #48	; 0x30
 810a914:	f1ae 0502 	sub.w	r5, lr, #2
 810a918:	f804 1c01 	strb.w	r1, [r4, #-1]
 810a91c:	1c44      	adds	r4, r0, #1
 810a91e:	4629      	mov	r1, r5
 810a920:	4561      	cmp	r1, ip
 810a922:	d30a      	bcc.n	810a93a <__exponent+0x66>
 810a924:	f10d 0209 	add.w	r2, sp, #9
 810a928:	eba2 020e 	sub.w	r2, r2, lr
 810a92c:	4565      	cmp	r5, ip
 810a92e:	bf88      	it	hi
 810a930:	2200      	movhi	r2, #0
 810a932:	4413      	add	r3, r2
 810a934:	1a18      	subs	r0, r3, r0
 810a936:	b003      	add	sp, #12
 810a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a93e:	f804 2f01 	strb.w	r2, [r4, #1]!
 810a942:	e7ed      	b.n	810a920 <__exponent+0x4c>
 810a944:	2330      	movs	r3, #48	; 0x30
 810a946:	3130      	adds	r1, #48	; 0x30
 810a948:	7083      	strb	r3, [r0, #2]
 810a94a:	70c1      	strb	r1, [r0, #3]
 810a94c:	1d03      	adds	r3, r0, #4
 810a94e:	e7f1      	b.n	810a934 <__exponent+0x60>

0810a950 <_printf_float>:
 810a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a954:	ed2d 8b02 	vpush	{d8}
 810a958:	b08d      	sub	sp, #52	; 0x34
 810a95a:	460c      	mov	r4, r1
 810a95c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a960:	4616      	mov	r6, r2
 810a962:	461f      	mov	r7, r3
 810a964:	4605      	mov	r5, r0
 810a966:	f003 f941 	bl	810dbec <_localeconv_r>
 810a96a:	f8d0 a000 	ldr.w	sl, [r0]
 810a96e:	4650      	mov	r0, sl
 810a970:	f7f5 fcc0 	bl	81002f4 <strlen>
 810a974:	2300      	movs	r3, #0
 810a976:	930a      	str	r3, [sp, #40]	; 0x28
 810a978:	6823      	ldr	r3, [r4, #0]
 810a97a:	9305      	str	r3, [sp, #20]
 810a97c:	f8d8 3000 	ldr.w	r3, [r8]
 810a980:	f894 b018 	ldrb.w	fp, [r4, #24]
 810a984:	3307      	adds	r3, #7
 810a986:	f023 0307 	bic.w	r3, r3, #7
 810a98a:	f103 0208 	add.w	r2, r3, #8
 810a98e:	f8c8 2000 	str.w	r2, [r8]
 810a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810a99a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810a99e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a9a2:	9307      	str	r3, [sp, #28]
 810a9a4:	f8cd 8018 	str.w	r8, [sp, #24]
 810a9a8:	ee08 0a10 	vmov	s16, r0
 810a9ac:	4b9f      	ldr	r3, [pc, #636]	; (810ac2c <_printf_float+0x2dc>)
 810a9ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 810a9b6:	f7f6 f951 	bl	8100c5c <__aeabi_dcmpun>
 810a9ba:	bb88      	cbnz	r0, 810aa20 <_printf_float+0xd0>
 810a9bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a9c0:	4b9a      	ldr	r3, [pc, #616]	; (810ac2c <_printf_float+0x2dc>)
 810a9c2:	f04f 32ff 	mov.w	r2, #4294967295
 810a9c6:	f7f6 f92b 	bl	8100c20 <__aeabi_dcmple>
 810a9ca:	bb48      	cbnz	r0, 810aa20 <_printf_float+0xd0>
 810a9cc:	2200      	movs	r2, #0
 810a9ce:	2300      	movs	r3, #0
 810a9d0:	4640      	mov	r0, r8
 810a9d2:	4649      	mov	r1, r9
 810a9d4:	f7f6 f91a 	bl	8100c0c <__aeabi_dcmplt>
 810a9d8:	b110      	cbz	r0, 810a9e0 <_printf_float+0x90>
 810a9da:	232d      	movs	r3, #45	; 0x2d
 810a9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a9e0:	4b93      	ldr	r3, [pc, #588]	; (810ac30 <_printf_float+0x2e0>)
 810a9e2:	4894      	ldr	r0, [pc, #592]	; (810ac34 <_printf_float+0x2e4>)
 810a9e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810a9e8:	bf94      	ite	ls
 810a9ea:	4698      	movls	r8, r3
 810a9ec:	4680      	movhi	r8, r0
 810a9ee:	2303      	movs	r3, #3
 810a9f0:	6123      	str	r3, [r4, #16]
 810a9f2:	9b05      	ldr	r3, [sp, #20]
 810a9f4:	f023 0204 	bic.w	r2, r3, #4
 810a9f8:	6022      	str	r2, [r4, #0]
 810a9fa:	f04f 0900 	mov.w	r9, #0
 810a9fe:	9700      	str	r7, [sp, #0]
 810aa00:	4633      	mov	r3, r6
 810aa02:	aa0b      	add	r2, sp, #44	; 0x2c
 810aa04:	4621      	mov	r1, r4
 810aa06:	4628      	mov	r0, r5
 810aa08:	f000 f9d8 	bl	810adbc <_printf_common>
 810aa0c:	3001      	adds	r0, #1
 810aa0e:	f040 8090 	bne.w	810ab32 <_printf_float+0x1e2>
 810aa12:	f04f 30ff 	mov.w	r0, #4294967295
 810aa16:	b00d      	add	sp, #52	; 0x34
 810aa18:	ecbd 8b02 	vpop	{d8}
 810aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aa20:	4642      	mov	r2, r8
 810aa22:	464b      	mov	r3, r9
 810aa24:	4640      	mov	r0, r8
 810aa26:	4649      	mov	r1, r9
 810aa28:	f7f6 f918 	bl	8100c5c <__aeabi_dcmpun>
 810aa2c:	b140      	cbz	r0, 810aa40 <_printf_float+0xf0>
 810aa2e:	464b      	mov	r3, r9
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	bfbc      	itt	lt
 810aa34:	232d      	movlt	r3, #45	; 0x2d
 810aa36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810aa3a:	487f      	ldr	r0, [pc, #508]	; (810ac38 <_printf_float+0x2e8>)
 810aa3c:	4b7f      	ldr	r3, [pc, #508]	; (810ac3c <_printf_float+0x2ec>)
 810aa3e:	e7d1      	b.n	810a9e4 <_printf_float+0x94>
 810aa40:	6863      	ldr	r3, [r4, #4]
 810aa42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810aa46:	9206      	str	r2, [sp, #24]
 810aa48:	1c5a      	adds	r2, r3, #1
 810aa4a:	d13f      	bne.n	810aacc <_printf_float+0x17c>
 810aa4c:	2306      	movs	r3, #6
 810aa4e:	6063      	str	r3, [r4, #4]
 810aa50:	9b05      	ldr	r3, [sp, #20]
 810aa52:	6861      	ldr	r1, [r4, #4]
 810aa54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810aa58:	2300      	movs	r3, #0
 810aa5a:	9303      	str	r3, [sp, #12]
 810aa5c:	ab0a      	add	r3, sp, #40	; 0x28
 810aa5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 810aa62:	ab09      	add	r3, sp, #36	; 0x24
 810aa64:	ec49 8b10 	vmov	d0, r8, r9
 810aa68:	9300      	str	r3, [sp, #0]
 810aa6a:	6022      	str	r2, [r4, #0]
 810aa6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810aa70:	4628      	mov	r0, r5
 810aa72:	f7ff fecd 	bl	810a810 <__cvt>
 810aa76:	9b06      	ldr	r3, [sp, #24]
 810aa78:	9909      	ldr	r1, [sp, #36]	; 0x24
 810aa7a:	2b47      	cmp	r3, #71	; 0x47
 810aa7c:	4680      	mov	r8, r0
 810aa7e:	d108      	bne.n	810aa92 <_printf_float+0x142>
 810aa80:	1cc8      	adds	r0, r1, #3
 810aa82:	db02      	blt.n	810aa8a <_printf_float+0x13a>
 810aa84:	6863      	ldr	r3, [r4, #4]
 810aa86:	4299      	cmp	r1, r3
 810aa88:	dd41      	ble.n	810ab0e <_printf_float+0x1be>
 810aa8a:	f1ab 0b02 	sub.w	fp, fp, #2
 810aa8e:	fa5f fb8b 	uxtb.w	fp, fp
 810aa92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810aa96:	d820      	bhi.n	810aada <_printf_float+0x18a>
 810aa98:	3901      	subs	r1, #1
 810aa9a:	465a      	mov	r2, fp
 810aa9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810aaa0:	9109      	str	r1, [sp, #36]	; 0x24
 810aaa2:	f7ff ff17 	bl	810a8d4 <__exponent>
 810aaa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810aaa8:	1813      	adds	r3, r2, r0
 810aaaa:	2a01      	cmp	r2, #1
 810aaac:	4681      	mov	r9, r0
 810aaae:	6123      	str	r3, [r4, #16]
 810aab0:	dc02      	bgt.n	810aab8 <_printf_float+0x168>
 810aab2:	6822      	ldr	r2, [r4, #0]
 810aab4:	07d2      	lsls	r2, r2, #31
 810aab6:	d501      	bpl.n	810aabc <_printf_float+0x16c>
 810aab8:	3301      	adds	r3, #1
 810aaba:	6123      	str	r3, [r4, #16]
 810aabc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810aac0:	2b00      	cmp	r3, #0
 810aac2:	d09c      	beq.n	810a9fe <_printf_float+0xae>
 810aac4:	232d      	movs	r3, #45	; 0x2d
 810aac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810aaca:	e798      	b.n	810a9fe <_printf_float+0xae>
 810aacc:	9a06      	ldr	r2, [sp, #24]
 810aace:	2a47      	cmp	r2, #71	; 0x47
 810aad0:	d1be      	bne.n	810aa50 <_printf_float+0x100>
 810aad2:	2b00      	cmp	r3, #0
 810aad4:	d1bc      	bne.n	810aa50 <_printf_float+0x100>
 810aad6:	2301      	movs	r3, #1
 810aad8:	e7b9      	b.n	810aa4e <_printf_float+0xfe>
 810aada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810aade:	d118      	bne.n	810ab12 <_printf_float+0x1c2>
 810aae0:	2900      	cmp	r1, #0
 810aae2:	6863      	ldr	r3, [r4, #4]
 810aae4:	dd0b      	ble.n	810aafe <_printf_float+0x1ae>
 810aae6:	6121      	str	r1, [r4, #16]
 810aae8:	b913      	cbnz	r3, 810aaf0 <_printf_float+0x1a0>
 810aaea:	6822      	ldr	r2, [r4, #0]
 810aaec:	07d0      	lsls	r0, r2, #31
 810aaee:	d502      	bpl.n	810aaf6 <_printf_float+0x1a6>
 810aaf0:	3301      	adds	r3, #1
 810aaf2:	440b      	add	r3, r1
 810aaf4:	6123      	str	r3, [r4, #16]
 810aaf6:	65a1      	str	r1, [r4, #88]	; 0x58
 810aaf8:	f04f 0900 	mov.w	r9, #0
 810aafc:	e7de      	b.n	810aabc <_printf_float+0x16c>
 810aafe:	b913      	cbnz	r3, 810ab06 <_printf_float+0x1b6>
 810ab00:	6822      	ldr	r2, [r4, #0]
 810ab02:	07d2      	lsls	r2, r2, #31
 810ab04:	d501      	bpl.n	810ab0a <_printf_float+0x1ba>
 810ab06:	3302      	adds	r3, #2
 810ab08:	e7f4      	b.n	810aaf4 <_printf_float+0x1a4>
 810ab0a:	2301      	movs	r3, #1
 810ab0c:	e7f2      	b.n	810aaf4 <_printf_float+0x1a4>
 810ab0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810ab12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab14:	4299      	cmp	r1, r3
 810ab16:	db05      	blt.n	810ab24 <_printf_float+0x1d4>
 810ab18:	6823      	ldr	r3, [r4, #0]
 810ab1a:	6121      	str	r1, [r4, #16]
 810ab1c:	07d8      	lsls	r0, r3, #31
 810ab1e:	d5ea      	bpl.n	810aaf6 <_printf_float+0x1a6>
 810ab20:	1c4b      	adds	r3, r1, #1
 810ab22:	e7e7      	b.n	810aaf4 <_printf_float+0x1a4>
 810ab24:	2900      	cmp	r1, #0
 810ab26:	bfd4      	ite	le
 810ab28:	f1c1 0202 	rsble	r2, r1, #2
 810ab2c:	2201      	movgt	r2, #1
 810ab2e:	4413      	add	r3, r2
 810ab30:	e7e0      	b.n	810aaf4 <_printf_float+0x1a4>
 810ab32:	6823      	ldr	r3, [r4, #0]
 810ab34:	055a      	lsls	r2, r3, #21
 810ab36:	d407      	bmi.n	810ab48 <_printf_float+0x1f8>
 810ab38:	6923      	ldr	r3, [r4, #16]
 810ab3a:	4642      	mov	r2, r8
 810ab3c:	4631      	mov	r1, r6
 810ab3e:	4628      	mov	r0, r5
 810ab40:	47b8      	blx	r7
 810ab42:	3001      	adds	r0, #1
 810ab44:	d12c      	bne.n	810aba0 <_printf_float+0x250>
 810ab46:	e764      	b.n	810aa12 <_printf_float+0xc2>
 810ab48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810ab4c:	f240 80e0 	bls.w	810ad10 <_printf_float+0x3c0>
 810ab50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ab54:	2200      	movs	r2, #0
 810ab56:	2300      	movs	r3, #0
 810ab58:	f7f6 f84e 	bl	8100bf8 <__aeabi_dcmpeq>
 810ab5c:	2800      	cmp	r0, #0
 810ab5e:	d034      	beq.n	810abca <_printf_float+0x27a>
 810ab60:	4a37      	ldr	r2, [pc, #220]	; (810ac40 <_printf_float+0x2f0>)
 810ab62:	2301      	movs	r3, #1
 810ab64:	4631      	mov	r1, r6
 810ab66:	4628      	mov	r0, r5
 810ab68:	47b8      	blx	r7
 810ab6a:	3001      	adds	r0, #1
 810ab6c:	f43f af51 	beq.w	810aa12 <_printf_float+0xc2>
 810ab70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ab74:	429a      	cmp	r2, r3
 810ab76:	db02      	blt.n	810ab7e <_printf_float+0x22e>
 810ab78:	6823      	ldr	r3, [r4, #0]
 810ab7a:	07d8      	lsls	r0, r3, #31
 810ab7c:	d510      	bpl.n	810aba0 <_printf_float+0x250>
 810ab7e:	ee18 3a10 	vmov	r3, s16
 810ab82:	4652      	mov	r2, sl
 810ab84:	4631      	mov	r1, r6
 810ab86:	4628      	mov	r0, r5
 810ab88:	47b8      	blx	r7
 810ab8a:	3001      	adds	r0, #1
 810ab8c:	f43f af41 	beq.w	810aa12 <_printf_float+0xc2>
 810ab90:	f04f 0800 	mov.w	r8, #0
 810ab94:	f104 091a 	add.w	r9, r4, #26
 810ab98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab9a:	3b01      	subs	r3, #1
 810ab9c:	4543      	cmp	r3, r8
 810ab9e:	dc09      	bgt.n	810abb4 <_printf_float+0x264>
 810aba0:	6823      	ldr	r3, [r4, #0]
 810aba2:	079b      	lsls	r3, r3, #30
 810aba4:	f100 8105 	bmi.w	810adb2 <_printf_float+0x462>
 810aba8:	68e0      	ldr	r0, [r4, #12]
 810abaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810abac:	4298      	cmp	r0, r3
 810abae:	bfb8      	it	lt
 810abb0:	4618      	movlt	r0, r3
 810abb2:	e730      	b.n	810aa16 <_printf_float+0xc6>
 810abb4:	2301      	movs	r3, #1
 810abb6:	464a      	mov	r2, r9
 810abb8:	4631      	mov	r1, r6
 810abba:	4628      	mov	r0, r5
 810abbc:	47b8      	blx	r7
 810abbe:	3001      	adds	r0, #1
 810abc0:	f43f af27 	beq.w	810aa12 <_printf_float+0xc2>
 810abc4:	f108 0801 	add.w	r8, r8, #1
 810abc8:	e7e6      	b.n	810ab98 <_printf_float+0x248>
 810abca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810abcc:	2b00      	cmp	r3, #0
 810abce:	dc39      	bgt.n	810ac44 <_printf_float+0x2f4>
 810abd0:	4a1b      	ldr	r2, [pc, #108]	; (810ac40 <_printf_float+0x2f0>)
 810abd2:	2301      	movs	r3, #1
 810abd4:	4631      	mov	r1, r6
 810abd6:	4628      	mov	r0, r5
 810abd8:	47b8      	blx	r7
 810abda:	3001      	adds	r0, #1
 810abdc:	f43f af19 	beq.w	810aa12 <_printf_float+0xc2>
 810abe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810abe4:	4313      	orrs	r3, r2
 810abe6:	d102      	bne.n	810abee <_printf_float+0x29e>
 810abe8:	6823      	ldr	r3, [r4, #0]
 810abea:	07d9      	lsls	r1, r3, #31
 810abec:	d5d8      	bpl.n	810aba0 <_printf_float+0x250>
 810abee:	ee18 3a10 	vmov	r3, s16
 810abf2:	4652      	mov	r2, sl
 810abf4:	4631      	mov	r1, r6
 810abf6:	4628      	mov	r0, r5
 810abf8:	47b8      	blx	r7
 810abfa:	3001      	adds	r0, #1
 810abfc:	f43f af09 	beq.w	810aa12 <_printf_float+0xc2>
 810ac00:	f04f 0900 	mov.w	r9, #0
 810ac04:	f104 0a1a 	add.w	sl, r4, #26
 810ac08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ac0a:	425b      	negs	r3, r3
 810ac0c:	454b      	cmp	r3, r9
 810ac0e:	dc01      	bgt.n	810ac14 <_printf_float+0x2c4>
 810ac10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ac12:	e792      	b.n	810ab3a <_printf_float+0x1ea>
 810ac14:	2301      	movs	r3, #1
 810ac16:	4652      	mov	r2, sl
 810ac18:	4631      	mov	r1, r6
 810ac1a:	4628      	mov	r0, r5
 810ac1c:	47b8      	blx	r7
 810ac1e:	3001      	adds	r0, #1
 810ac20:	f43f aef7 	beq.w	810aa12 <_printf_float+0xc2>
 810ac24:	f109 0901 	add.w	r9, r9, #1
 810ac28:	e7ee      	b.n	810ac08 <_printf_float+0x2b8>
 810ac2a:	bf00      	nop
 810ac2c:	7fefffff 	.word	0x7fefffff
 810ac30:	0810ef19 	.word	0x0810ef19
 810ac34:	0810ef1d 	.word	0x0810ef1d
 810ac38:	0810ef25 	.word	0x0810ef25
 810ac3c:	0810ef21 	.word	0x0810ef21
 810ac40:	0810ef29 	.word	0x0810ef29
 810ac44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ac46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810ac48:	429a      	cmp	r2, r3
 810ac4a:	bfa8      	it	ge
 810ac4c:	461a      	movge	r2, r3
 810ac4e:	2a00      	cmp	r2, #0
 810ac50:	4691      	mov	r9, r2
 810ac52:	dc37      	bgt.n	810acc4 <_printf_float+0x374>
 810ac54:	f04f 0b00 	mov.w	fp, #0
 810ac58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ac5c:	f104 021a 	add.w	r2, r4, #26
 810ac60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810ac62:	9305      	str	r3, [sp, #20]
 810ac64:	eba3 0309 	sub.w	r3, r3, r9
 810ac68:	455b      	cmp	r3, fp
 810ac6a:	dc33      	bgt.n	810acd4 <_printf_float+0x384>
 810ac6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ac70:	429a      	cmp	r2, r3
 810ac72:	db3b      	blt.n	810acec <_printf_float+0x39c>
 810ac74:	6823      	ldr	r3, [r4, #0]
 810ac76:	07da      	lsls	r2, r3, #31
 810ac78:	d438      	bmi.n	810acec <_printf_float+0x39c>
 810ac7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ac7c:	9b05      	ldr	r3, [sp, #20]
 810ac7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 810ac80:	1ad3      	subs	r3, r2, r3
 810ac82:	eba2 0901 	sub.w	r9, r2, r1
 810ac86:	4599      	cmp	r9, r3
 810ac88:	bfa8      	it	ge
 810ac8a:	4699      	movge	r9, r3
 810ac8c:	f1b9 0f00 	cmp.w	r9, #0
 810ac90:	dc35      	bgt.n	810acfe <_printf_float+0x3ae>
 810ac92:	f04f 0800 	mov.w	r8, #0
 810ac96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ac9a:	f104 0a1a 	add.w	sl, r4, #26
 810ac9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810aca2:	1a9b      	subs	r3, r3, r2
 810aca4:	eba3 0309 	sub.w	r3, r3, r9
 810aca8:	4543      	cmp	r3, r8
 810acaa:	f77f af79 	ble.w	810aba0 <_printf_float+0x250>
 810acae:	2301      	movs	r3, #1
 810acb0:	4652      	mov	r2, sl
 810acb2:	4631      	mov	r1, r6
 810acb4:	4628      	mov	r0, r5
 810acb6:	47b8      	blx	r7
 810acb8:	3001      	adds	r0, #1
 810acba:	f43f aeaa 	beq.w	810aa12 <_printf_float+0xc2>
 810acbe:	f108 0801 	add.w	r8, r8, #1
 810acc2:	e7ec      	b.n	810ac9e <_printf_float+0x34e>
 810acc4:	4613      	mov	r3, r2
 810acc6:	4631      	mov	r1, r6
 810acc8:	4642      	mov	r2, r8
 810acca:	4628      	mov	r0, r5
 810accc:	47b8      	blx	r7
 810acce:	3001      	adds	r0, #1
 810acd0:	d1c0      	bne.n	810ac54 <_printf_float+0x304>
 810acd2:	e69e      	b.n	810aa12 <_printf_float+0xc2>
 810acd4:	2301      	movs	r3, #1
 810acd6:	4631      	mov	r1, r6
 810acd8:	4628      	mov	r0, r5
 810acda:	9205      	str	r2, [sp, #20]
 810acdc:	47b8      	blx	r7
 810acde:	3001      	adds	r0, #1
 810ace0:	f43f ae97 	beq.w	810aa12 <_printf_float+0xc2>
 810ace4:	9a05      	ldr	r2, [sp, #20]
 810ace6:	f10b 0b01 	add.w	fp, fp, #1
 810acea:	e7b9      	b.n	810ac60 <_printf_float+0x310>
 810acec:	ee18 3a10 	vmov	r3, s16
 810acf0:	4652      	mov	r2, sl
 810acf2:	4631      	mov	r1, r6
 810acf4:	4628      	mov	r0, r5
 810acf6:	47b8      	blx	r7
 810acf8:	3001      	adds	r0, #1
 810acfa:	d1be      	bne.n	810ac7a <_printf_float+0x32a>
 810acfc:	e689      	b.n	810aa12 <_printf_float+0xc2>
 810acfe:	9a05      	ldr	r2, [sp, #20]
 810ad00:	464b      	mov	r3, r9
 810ad02:	4442      	add	r2, r8
 810ad04:	4631      	mov	r1, r6
 810ad06:	4628      	mov	r0, r5
 810ad08:	47b8      	blx	r7
 810ad0a:	3001      	adds	r0, #1
 810ad0c:	d1c1      	bne.n	810ac92 <_printf_float+0x342>
 810ad0e:	e680      	b.n	810aa12 <_printf_float+0xc2>
 810ad10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ad12:	2a01      	cmp	r2, #1
 810ad14:	dc01      	bgt.n	810ad1a <_printf_float+0x3ca>
 810ad16:	07db      	lsls	r3, r3, #31
 810ad18:	d538      	bpl.n	810ad8c <_printf_float+0x43c>
 810ad1a:	2301      	movs	r3, #1
 810ad1c:	4642      	mov	r2, r8
 810ad1e:	4631      	mov	r1, r6
 810ad20:	4628      	mov	r0, r5
 810ad22:	47b8      	blx	r7
 810ad24:	3001      	adds	r0, #1
 810ad26:	f43f ae74 	beq.w	810aa12 <_printf_float+0xc2>
 810ad2a:	ee18 3a10 	vmov	r3, s16
 810ad2e:	4652      	mov	r2, sl
 810ad30:	4631      	mov	r1, r6
 810ad32:	4628      	mov	r0, r5
 810ad34:	47b8      	blx	r7
 810ad36:	3001      	adds	r0, #1
 810ad38:	f43f ae6b 	beq.w	810aa12 <_printf_float+0xc2>
 810ad3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ad40:	2200      	movs	r2, #0
 810ad42:	2300      	movs	r3, #0
 810ad44:	f7f5 ff58 	bl	8100bf8 <__aeabi_dcmpeq>
 810ad48:	b9d8      	cbnz	r0, 810ad82 <_printf_float+0x432>
 810ad4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ad4c:	f108 0201 	add.w	r2, r8, #1
 810ad50:	3b01      	subs	r3, #1
 810ad52:	4631      	mov	r1, r6
 810ad54:	4628      	mov	r0, r5
 810ad56:	47b8      	blx	r7
 810ad58:	3001      	adds	r0, #1
 810ad5a:	d10e      	bne.n	810ad7a <_printf_float+0x42a>
 810ad5c:	e659      	b.n	810aa12 <_printf_float+0xc2>
 810ad5e:	2301      	movs	r3, #1
 810ad60:	4652      	mov	r2, sl
 810ad62:	4631      	mov	r1, r6
 810ad64:	4628      	mov	r0, r5
 810ad66:	47b8      	blx	r7
 810ad68:	3001      	adds	r0, #1
 810ad6a:	f43f ae52 	beq.w	810aa12 <_printf_float+0xc2>
 810ad6e:	f108 0801 	add.w	r8, r8, #1
 810ad72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ad74:	3b01      	subs	r3, #1
 810ad76:	4543      	cmp	r3, r8
 810ad78:	dcf1      	bgt.n	810ad5e <_printf_float+0x40e>
 810ad7a:	464b      	mov	r3, r9
 810ad7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810ad80:	e6dc      	b.n	810ab3c <_printf_float+0x1ec>
 810ad82:	f04f 0800 	mov.w	r8, #0
 810ad86:	f104 0a1a 	add.w	sl, r4, #26
 810ad8a:	e7f2      	b.n	810ad72 <_printf_float+0x422>
 810ad8c:	2301      	movs	r3, #1
 810ad8e:	4642      	mov	r2, r8
 810ad90:	e7df      	b.n	810ad52 <_printf_float+0x402>
 810ad92:	2301      	movs	r3, #1
 810ad94:	464a      	mov	r2, r9
 810ad96:	4631      	mov	r1, r6
 810ad98:	4628      	mov	r0, r5
 810ad9a:	47b8      	blx	r7
 810ad9c:	3001      	adds	r0, #1
 810ad9e:	f43f ae38 	beq.w	810aa12 <_printf_float+0xc2>
 810ada2:	f108 0801 	add.w	r8, r8, #1
 810ada6:	68e3      	ldr	r3, [r4, #12]
 810ada8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810adaa:	1a5b      	subs	r3, r3, r1
 810adac:	4543      	cmp	r3, r8
 810adae:	dcf0      	bgt.n	810ad92 <_printf_float+0x442>
 810adb0:	e6fa      	b.n	810aba8 <_printf_float+0x258>
 810adb2:	f04f 0800 	mov.w	r8, #0
 810adb6:	f104 0919 	add.w	r9, r4, #25
 810adba:	e7f4      	b.n	810ada6 <_printf_float+0x456>

0810adbc <_printf_common>:
 810adbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810adc0:	4616      	mov	r6, r2
 810adc2:	4699      	mov	r9, r3
 810adc4:	688a      	ldr	r2, [r1, #8]
 810adc6:	690b      	ldr	r3, [r1, #16]
 810adc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810adcc:	4293      	cmp	r3, r2
 810adce:	bfb8      	it	lt
 810add0:	4613      	movlt	r3, r2
 810add2:	6033      	str	r3, [r6, #0]
 810add4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810add8:	4607      	mov	r7, r0
 810adda:	460c      	mov	r4, r1
 810addc:	b10a      	cbz	r2, 810ade2 <_printf_common+0x26>
 810adde:	3301      	adds	r3, #1
 810ade0:	6033      	str	r3, [r6, #0]
 810ade2:	6823      	ldr	r3, [r4, #0]
 810ade4:	0699      	lsls	r1, r3, #26
 810ade6:	bf42      	ittt	mi
 810ade8:	6833      	ldrmi	r3, [r6, #0]
 810adea:	3302      	addmi	r3, #2
 810adec:	6033      	strmi	r3, [r6, #0]
 810adee:	6825      	ldr	r5, [r4, #0]
 810adf0:	f015 0506 	ands.w	r5, r5, #6
 810adf4:	d106      	bne.n	810ae04 <_printf_common+0x48>
 810adf6:	f104 0a19 	add.w	sl, r4, #25
 810adfa:	68e3      	ldr	r3, [r4, #12]
 810adfc:	6832      	ldr	r2, [r6, #0]
 810adfe:	1a9b      	subs	r3, r3, r2
 810ae00:	42ab      	cmp	r3, r5
 810ae02:	dc26      	bgt.n	810ae52 <_printf_common+0x96>
 810ae04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810ae08:	1e13      	subs	r3, r2, #0
 810ae0a:	6822      	ldr	r2, [r4, #0]
 810ae0c:	bf18      	it	ne
 810ae0e:	2301      	movne	r3, #1
 810ae10:	0692      	lsls	r2, r2, #26
 810ae12:	d42b      	bmi.n	810ae6c <_printf_common+0xb0>
 810ae14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810ae18:	4649      	mov	r1, r9
 810ae1a:	4638      	mov	r0, r7
 810ae1c:	47c0      	blx	r8
 810ae1e:	3001      	adds	r0, #1
 810ae20:	d01e      	beq.n	810ae60 <_printf_common+0xa4>
 810ae22:	6823      	ldr	r3, [r4, #0]
 810ae24:	68e5      	ldr	r5, [r4, #12]
 810ae26:	6832      	ldr	r2, [r6, #0]
 810ae28:	f003 0306 	and.w	r3, r3, #6
 810ae2c:	2b04      	cmp	r3, #4
 810ae2e:	bf08      	it	eq
 810ae30:	1aad      	subeq	r5, r5, r2
 810ae32:	68a3      	ldr	r3, [r4, #8]
 810ae34:	6922      	ldr	r2, [r4, #16]
 810ae36:	bf0c      	ite	eq
 810ae38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810ae3c:	2500      	movne	r5, #0
 810ae3e:	4293      	cmp	r3, r2
 810ae40:	bfc4      	itt	gt
 810ae42:	1a9b      	subgt	r3, r3, r2
 810ae44:	18ed      	addgt	r5, r5, r3
 810ae46:	2600      	movs	r6, #0
 810ae48:	341a      	adds	r4, #26
 810ae4a:	42b5      	cmp	r5, r6
 810ae4c:	d11a      	bne.n	810ae84 <_printf_common+0xc8>
 810ae4e:	2000      	movs	r0, #0
 810ae50:	e008      	b.n	810ae64 <_printf_common+0xa8>
 810ae52:	2301      	movs	r3, #1
 810ae54:	4652      	mov	r2, sl
 810ae56:	4649      	mov	r1, r9
 810ae58:	4638      	mov	r0, r7
 810ae5a:	47c0      	blx	r8
 810ae5c:	3001      	adds	r0, #1
 810ae5e:	d103      	bne.n	810ae68 <_printf_common+0xac>
 810ae60:	f04f 30ff 	mov.w	r0, #4294967295
 810ae64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ae68:	3501      	adds	r5, #1
 810ae6a:	e7c6      	b.n	810adfa <_printf_common+0x3e>
 810ae6c:	18e1      	adds	r1, r4, r3
 810ae6e:	1c5a      	adds	r2, r3, #1
 810ae70:	2030      	movs	r0, #48	; 0x30
 810ae72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810ae76:	4422      	add	r2, r4
 810ae78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810ae7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810ae80:	3302      	adds	r3, #2
 810ae82:	e7c7      	b.n	810ae14 <_printf_common+0x58>
 810ae84:	2301      	movs	r3, #1
 810ae86:	4622      	mov	r2, r4
 810ae88:	4649      	mov	r1, r9
 810ae8a:	4638      	mov	r0, r7
 810ae8c:	47c0      	blx	r8
 810ae8e:	3001      	adds	r0, #1
 810ae90:	d0e6      	beq.n	810ae60 <_printf_common+0xa4>
 810ae92:	3601      	adds	r6, #1
 810ae94:	e7d9      	b.n	810ae4a <_printf_common+0x8e>
	...

0810ae98 <_printf_i>:
 810ae98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810ae9c:	460c      	mov	r4, r1
 810ae9e:	4691      	mov	r9, r2
 810aea0:	7e27      	ldrb	r7, [r4, #24]
 810aea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 810aea4:	2f78      	cmp	r7, #120	; 0x78
 810aea6:	4680      	mov	r8, r0
 810aea8:	469a      	mov	sl, r3
 810aeaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810aeae:	d807      	bhi.n	810aec0 <_printf_i+0x28>
 810aeb0:	2f62      	cmp	r7, #98	; 0x62
 810aeb2:	d80a      	bhi.n	810aeca <_printf_i+0x32>
 810aeb4:	2f00      	cmp	r7, #0
 810aeb6:	f000 80d8 	beq.w	810b06a <_printf_i+0x1d2>
 810aeba:	2f58      	cmp	r7, #88	; 0x58
 810aebc:	f000 80a3 	beq.w	810b006 <_printf_i+0x16e>
 810aec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810aec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810aec8:	e03a      	b.n	810af40 <_printf_i+0xa8>
 810aeca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810aece:	2b15      	cmp	r3, #21
 810aed0:	d8f6      	bhi.n	810aec0 <_printf_i+0x28>
 810aed2:	a001      	add	r0, pc, #4	; (adr r0, 810aed8 <_printf_i+0x40>)
 810aed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 810aed8:	0810af31 	.word	0x0810af31
 810aedc:	0810af45 	.word	0x0810af45
 810aee0:	0810aec1 	.word	0x0810aec1
 810aee4:	0810aec1 	.word	0x0810aec1
 810aee8:	0810aec1 	.word	0x0810aec1
 810aeec:	0810aec1 	.word	0x0810aec1
 810aef0:	0810af45 	.word	0x0810af45
 810aef4:	0810aec1 	.word	0x0810aec1
 810aef8:	0810aec1 	.word	0x0810aec1
 810aefc:	0810aec1 	.word	0x0810aec1
 810af00:	0810aec1 	.word	0x0810aec1
 810af04:	0810b051 	.word	0x0810b051
 810af08:	0810af75 	.word	0x0810af75
 810af0c:	0810b033 	.word	0x0810b033
 810af10:	0810aec1 	.word	0x0810aec1
 810af14:	0810aec1 	.word	0x0810aec1
 810af18:	0810b073 	.word	0x0810b073
 810af1c:	0810aec1 	.word	0x0810aec1
 810af20:	0810af75 	.word	0x0810af75
 810af24:	0810aec1 	.word	0x0810aec1
 810af28:	0810aec1 	.word	0x0810aec1
 810af2c:	0810b03b 	.word	0x0810b03b
 810af30:	680b      	ldr	r3, [r1, #0]
 810af32:	1d1a      	adds	r2, r3, #4
 810af34:	681b      	ldr	r3, [r3, #0]
 810af36:	600a      	str	r2, [r1, #0]
 810af38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810af3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810af40:	2301      	movs	r3, #1
 810af42:	e0a3      	b.n	810b08c <_printf_i+0x1f4>
 810af44:	6825      	ldr	r5, [r4, #0]
 810af46:	6808      	ldr	r0, [r1, #0]
 810af48:	062e      	lsls	r6, r5, #24
 810af4a:	f100 0304 	add.w	r3, r0, #4
 810af4e:	d50a      	bpl.n	810af66 <_printf_i+0xce>
 810af50:	6805      	ldr	r5, [r0, #0]
 810af52:	600b      	str	r3, [r1, #0]
 810af54:	2d00      	cmp	r5, #0
 810af56:	da03      	bge.n	810af60 <_printf_i+0xc8>
 810af58:	232d      	movs	r3, #45	; 0x2d
 810af5a:	426d      	negs	r5, r5
 810af5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810af60:	485e      	ldr	r0, [pc, #376]	; (810b0dc <_printf_i+0x244>)
 810af62:	230a      	movs	r3, #10
 810af64:	e019      	b.n	810af9a <_printf_i+0x102>
 810af66:	f015 0f40 	tst.w	r5, #64	; 0x40
 810af6a:	6805      	ldr	r5, [r0, #0]
 810af6c:	600b      	str	r3, [r1, #0]
 810af6e:	bf18      	it	ne
 810af70:	b22d      	sxthne	r5, r5
 810af72:	e7ef      	b.n	810af54 <_printf_i+0xbc>
 810af74:	680b      	ldr	r3, [r1, #0]
 810af76:	6825      	ldr	r5, [r4, #0]
 810af78:	1d18      	adds	r0, r3, #4
 810af7a:	6008      	str	r0, [r1, #0]
 810af7c:	0628      	lsls	r0, r5, #24
 810af7e:	d501      	bpl.n	810af84 <_printf_i+0xec>
 810af80:	681d      	ldr	r5, [r3, #0]
 810af82:	e002      	b.n	810af8a <_printf_i+0xf2>
 810af84:	0669      	lsls	r1, r5, #25
 810af86:	d5fb      	bpl.n	810af80 <_printf_i+0xe8>
 810af88:	881d      	ldrh	r5, [r3, #0]
 810af8a:	4854      	ldr	r0, [pc, #336]	; (810b0dc <_printf_i+0x244>)
 810af8c:	2f6f      	cmp	r7, #111	; 0x6f
 810af8e:	bf0c      	ite	eq
 810af90:	2308      	moveq	r3, #8
 810af92:	230a      	movne	r3, #10
 810af94:	2100      	movs	r1, #0
 810af96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810af9a:	6866      	ldr	r6, [r4, #4]
 810af9c:	60a6      	str	r6, [r4, #8]
 810af9e:	2e00      	cmp	r6, #0
 810afa0:	bfa2      	ittt	ge
 810afa2:	6821      	ldrge	r1, [r4, #0]
 810afa4:	f021 0104 	bicge.w	r1, r1, #4
 810afa8:	6021      	strge	r1, [r4, #0]
 810afaa:	b90d      	cbnz	r5, 810afb0 <_printf_i+0x118>
 810afac:	2e00      	cmp	r6, #0
 810afae:	d04d      	beq.n	810b04c <_printf_i+0x1b4>
 810afb0:	4616      	mov	r6, r2
 810afb2:	fbb5 f1f3 	udiv	r1, r5, r3
 810afb6:	fb03 5711 	mls	r7, r3, r1, r5
 810afba:	5dc7      	ldrb	r7, [r0, r7]
 810afbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810afc0:	462f      	mov	r7, r5
 810afc2:	42bb      	cmp	r3, r7
 810afc4:	460d      	mov	r5, r1
 810afc6:	d9f4      	bls.n	810afb2 <_printf_i+0x11a>
 810afc8:	2b08      	cmp	r3, #8
 810afca:	d10b      	bne.n	810afe4 <_printf_i+0x14c>
 810afcc:	6823      	ldr	r3, [r4, #0]
 810afce:	07df      	lsls	r7, r3, #31
 810afd0:	d508      	bpl.n	810afe4 <_printf_i+0x14c>
 810afd2:	6923      	ldr	r3, [r4, #16]
 810afd4:	6861      	ldr	r1, [r4, #4]
 810afd6:	4299      	cmp	r1, r3
 810afd8:	bfde      	ittt	le
 810afda:	2330      	movle	r3, #48	; 0x30
 810afdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 810afe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 810afe4:	1b92      	subs	r2, r2, r6
 810afe6:	6122      	str	r2, [r4, #16]
 810afe8:	f8cd a000 	str.w	sl, [sp]
 810afec:	464b      	mov	r3, r9
 810afee:	aa03      	add	r2, sp, #12
 810aff0:	4621      	mov	r1, r4
 810aff2:	4640      	mov	r0, r8
 810aff4:	f7ff fee2 	bl	810adbc <_printf_common>
 810aff8:	3001      	adds	r0, #1
 810affa:	d14c      	bne.n	810b096 <_printf_i+0x1fe>
 810affc:	f04f 30ff 	mov.w	r0, #4294967295
 810b000:	b004      	add	sp, #16
 810b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b006:	4835      	ldr	r0, [pc, #212]	; (810b0dc <_printf_i+0x244>)
 810b008:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810b00c:	6823      	ldr	r3, [r4, #0]
 810b00e:	680e      	ldr	r6, [r1, #0]
 810b010:	061f      	lsls	r7, r3, #24
 810b012:	f856 5b04 	ldr.w	r5, [r6], #4
 810b016:	600e      	str	r6, [r1, #0]
 810b018:	d514      	bpl.n	810b044 <_printf_i+0x1ac>
 810b01a:	07d9      	lsls	r1, r3, #31
 810b01c:	bf44      	itt	mi
 810b01e:	f043 0320 	orrmi.w	r3, r3, #32
 810b022:	6023      	strmi	r3, [r4, #0]
 810b024:	b91d      	cbnz	r5, 810b02e <_printf_i+0x196>
 810b026:	6823      	ldr	r3, [r4, #0]
 810b028:	f023 0320 	bic.w	r3, r3, #32
 810b02c:	6023      	str	r3, [r4, #0]
 810b02e:	2310      	movs	r3, #16
 810b030:	e7b0      	b.n	810af94 <_printf_i+0xfc>
 810b032:	6823      	ldr	r3, [r4, #0]
 810b034:	f043 0320 	orr.w	r3, r3, #32
 810b038:	6023      	str	r3, [r4, #0]
 810b03a:	2378      	movs	r3, #120	; 0x78
 810b03c:	4828      	ldr	r0, [pc, #160]	; (810b0e0 <_printf_i+0x248>)
 810b03e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810b042:	e7e3      	b.n	810b00c <_printf_i+0x174>
 810b044:	065e      	lsls	r6, r3, #25
 810b046:	bf48      	it	mi
 810b048:	b2ad      	uxthmi	r5, r5
 810b04a:	e7e6      	b.n	810b01a <_printf_i+0x182>
 810b04c:	4616      	mov	r6, r2
 810b04e:	e7bb      	b.n	810afc8 <_printf_i+0x130>
 810b050:	680b      	ldr	r3, [r1, #0]
 810b052:	6826      	ldr	r6, [r4, #0]
 810b054:	6960      	ldr	r0, [r4, #20]
 810b056:	1d1d      	adds	r5, r3, #4
 810b058:	600d      	str	r5, [r1, #0]
 810b05a:	0635      	lsls	r5, r6, #24
 810b05c:	681b      	ldr	r3, [r3, #0]
 810b05e:	d501      	bpl.n	810b064 <_printf_i+0x1cc>
 810b060:	6018      	str	r0, [r3, #0]
 810b062:	e002      	b.n	810b06a <_printf_i+0x1d2>
 810b064:	0671      	lsls	r1, r6, #25
 810b066:	d5fb      	bpl.n	810b060 <_printf_i+0x1c8>
 810b068:	8018      	strh	r0, [r3, #0]
 810b06a:	2300      	movs	r3, #0
 810b06c:	6123      	str	r3, [r4, #16]
 810b06e:	4616      	mov	r6, r2
 810b070:	e7ba      	b.n	810afe8 <_printf_i+0x150>
 810b072:	680b      	ldr	r3, [r1, #0]
 810b074:	1d1a      	adds	r2, r3, #4
 810b076:	600a      	str	r2, [r1, #0]
 810b078:	681e      	ldr	r6, [r3, #0]
 810b07a:	6862      	ldr	r2, [r4, #4]
 810b07c:	2100      	movs	r1, #0
 810b07e:	4630      	mov	r0, r6
 810b080:	f7f5 f946 	bl	8100310 <memchr>
 810b084:	b108      	cbz	r0, 810b08a <_printf_i+0x1f2>
 810b086:	1b80      	subs	r0, r0, r6
 810b088:	6060      	str	r0, [r4, #4]
 810b08a:	6863      	ldr	r3, [r4, #4]
 810b08c:	6123      	str	r3, [r4, #16]
 810b08e:	2300      	movs	r3, #0
 810b090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b094:	e7a8      	b.n	810afe8 <_printf_i+0x150>
 810b096:	6923      	ldr	r3, [r4, #16]
 810b098:	4632      	mov	r2, r6
 810b09a:	4649      	mov	r1, r9
 810b09c:	4640      	mov	r0, r8
 810b09e:	47d0      	blx	sl
 810b0a0:	3001      	adds	r0, #1
 810b0a2:	d0ab      	beq.n	810affc <_printf_i+0x164>
 810b0a4:	6823      	ldr	r3, [r4, #0]
 810b0a6:	079b      	lsls	r3, r3, #30
 810b0a8:	d413      	bmi.n	810b0d2 <_printf_i+0x23a>
 810b0aa:	68e0      	ldr	r0, [r4, #12]
 810b0ac:	9b03      	ldr	r3, [sp, #12]
 810b0ae:	4298      	cmp	r0, r3
 810b0b0:	bfb8      	it	lt
 810b0b2:	4618      	movlt	r0, r3
 810b0b4:	e7a4      	b.n	810b000 <_printf_i+0x168>
 810b0b6:	2301      	movs	r3, #1
 810b0b8:	4632      	mov	r2, r6
 810b0ba:	4649      	mov	r1, r9
 810b0bc:	4640      	mov	r0, r8
 810b0be:	47d0      	blx	sl
 810b0c0:	3001      	adds	r0, #1
 810b0c2:	d09b      	beq.n	810affc <_printf_i+0x164>
 810b0c4:	3501      	adds	r5, #1
 810b0c6:	68e3      	ldr	r3, [r4, #12]
 810b0c8:	9903      	ldr	r1, [sp, #12]
 810b0ca:	1a5b      	subs	r3, r3, r1
 810b0cc:	42ab      	cmp	r3, r5
 810b0ce:	dcf2      	bgt.n	810b0b6 <_printf_i+0x21e>
 810b0d0:	e7eb      	b.n	810b0aa <_printf_i+0x212>
 810b0d2:	2500      	movs	r5, #0
 810b0d4:	f104 0619 	add.w	r6, r4, #25
 810b0d8:	e7f5      	b.n	810b0c6 <_printf_i+0x22e>
 810b0da:	bf00      	nop
 810b0dc:	0810ef2b 	.word	0x0810ef2b
 810b0e0:	0810ef3c 	.word	0x0810ef3c

0810b0e4 <_scanf_float>:
 810b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b0e8:	b087      	sub	sp, #28
 810b0ea:	4617      	mov	r7, r2
 810b0ec:	9303      	str	r3, [sp, #12]
 810b0ee:	688b      	ldr	r3, [r1, #8]
 810b0f0:	1e5a      	subs	r2, r3, #1
 810b0f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b0f6:	bf83      	ittte	hi
 810b0f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b0fc:	195b      	addhi	r3, r3, r5
 810b0fe:	9302      	strhi	r3, [sp, #8]
 810b100:	2300      	movls	r3, #0
 810b102:	bf86      	itte	hi
 810b104:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b108:	608b      	strhi	r3, [r1, #8]
 810b10a:	9302      	strls	r3, [sp, #8]
 810b10c:	680b      	ldr	r3, [r1, #0]
 810b10e:	468b      	mov	fp, r1
 810b110:	2500      	movs	r5, #0
 810b112:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b116:	f84b 3b1c 	str.w	r3, [fp], #28
 810b11a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b11e:	4680      	mov	r8, r0
 810b120:	460c      	mov	r4, r1
 810b122:	465e      	mov	r6, fp
 810b124:	46aa      	mov	sl, r5
 810b126:	46a9      	mov	r9, r5
 810b128:	9501      	str	r5, [sp, #4]
 810b12a:	68a2      	ldr	r2, [r4, #8]
 810b12c:	b152      	cbz	r2, 810b144 <_scanf_float+0x60>
 810b12e:	683b      	ldr	r3, [r7, #0]
 810b130:	781b      	ldrb	r3, [r3, #0]
 810b132:	2b4e      	cmp	r3, #78	; 0x4e
 810b134:	d864      	bhi.n	810b200 <_scanf_float+0x11c>
 810b136:	2b40      	cmp	r3, #64	; 0x40
 810b138:	d83c      	bhi.n	810b1b4 <_scanf_float+0xd0>
 810b13a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b13e:	b2c8      	uxtb	r0, r1
 810b140:	280e      	cmp	r0, #14
 810b142:	d93a      	bls.n	810b1ba <_scanf_float+0xd6>
 810b144:	f1b9 0f00 	cmp.w	r9, #0
 810b148:	d003      	beq.n	810b152 <_scanf_float+0x6e>
 810b14a:	6823      	ldr	r3, [r4, #0]
 810b14c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b150:	6023      	str	r3, [r4, #0]
 810b152:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b156:	f1ba 0f01 	cmp.w	sl, #1
 810b15a:	f200 8113 	bhi.w	810b384 <_scanf_float+0x2a0>
 810b15e:	455e      	cmp	r6, fp
 810b160:	f200 8105 	bhi.w	810b36e <_scanf_float+0x28a>
 810b164:	2501      	movs	r5, #1
 810b166:	4628      	mov	r0, r5
 810b168:	b007      	add	sp, #28
 810b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b16e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810b172:	2a0d      	cmp	r2, #13
 810b174:	d8e6      	bhi.n	810b144 <_scanf_float+0x60>
 810b176:	a101      	add	r1, pc, #4	; (adr r1, 810b17c <_scanf_float+0x98>)
 810b178:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810b17c:	0810b2bb 	.word	0x0810b2bb
 810b180:	0810b145 	.word	0x0810b145
 810b184:	0810b145 	.word	0x0810b145
 810b188:	0810b145 	.word	0x0810b145
 810b18c:	0810b31b 	.word	0x0810b31b
 810b190:	0810b2f3 	.word	0x0810b2f3
 810b194:	0810b145 	.word	0x0810b145
 810b198:	0810b145 	.word	0x0810b145
 810b19c:	0810b2c9 	.word	0x0810b2c9
 810b1a0:	0810b145 	.word	0x0810b145
 810b1a4:	0810b145 	.word	0x0810b145
 810b1a8:	0810b145 	.word	0x0810b145
 810b1ac:	0810b145 	.word	0x0810b145
 810b1b0:	0810b281 	.word	0x0810b281
 810b1b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810b1b8:	e7db      	b.n	810b172 <_scanf_float+0x8e>
 810b1ba:	290e      	cmp	r1, #14
 810b1bc:	d8c2      	bhi.n	810b144 <_scanf_float+0x60>
 810b1be:	a001      	add	r0, pc, #4	; (adr r0, 810b1c4 <_scanf_float+0xe0>)
 810b1c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810b1c4:	0810b273 	.word	0x0810b273
 810b1c8:	0810b145 	.word	0x0810b145
 810b1cc:	0810b273 	.word	0x0810b273
 810b1d0:	0810b307 	.word	0x0810b307
 810b1d4:	0810b145 	.word	0x0810b145
 810b1d8:	0810b221 	.word	0x0810b221
 810b1dc:	0810b25d 	.word	0x0810b25d
 810b1e0:	0810b25d 	.word	0x0810b25d
 810b1e4:	0810b25d 	.word	0x0810b25d
 810b1e8:	0810b25d 	.word	0x0810b25d
 810b1ec:	0810b25d 	.word	0x0810b25d
 810b1f0:	0810b25d 	.word	0x0810b25d
 810b1f4:	0810b25d 	.word	0x0810b25d
 810b1f8:	0810b25d 	.word	0x0810b25d
 810b1fc:	0810b25d 	.word	0x0810b25d
 810b200:	2b6e      	cmp	r3, #110	; 0x6e
 810b202:	d809      	bhi.n	810b218 <_scanf_float+0x134>
 810b204:	2b60      	cmp	r3, #96	; 0x60
 810b206:	d8b2      	bhi.n	810b16e <_scanf_float+0x8a>
 810b208:	2b54      	cmp	r3, #84	; 0x54
 810b20a:	d077      	beq.n	810b2fc <_scanf_float+0x218>
 810b20c:	2b59      	cmp	r3, #89	; 0x59
 810b20e:	d199      	bne.n	810b144 <_scanf_float+0x60>
 810b210:	2d07      	cmp	r5, #7
 810b212:	d197      	bne.n	810b144 <_scanf_float+0x60>
 810b214:	2508      	movs	r5, #8
 810b216:	e029      	b.n	810b26c <_scanf_float+0x188>
 810b218:	2b74      	cmp	r3, #116	; 0x74
 810b21a:	d06f      	beq.n	810b2fc <_scanf_float+0x218>
 810b21c:	2b79      	cmp	r3, #121	; 0x79
 810b21e:	e7f6      	b.n	810b20e <_scanf_float+0x12a>
 810b220:	6821      	ldr	r1, [r4, #0]
 810b222:	05c8      	lsls	r0, r1, #23
 810b224:	d51a      	bpl.n	810b25c <_scanf_float+0x178>
 810b226:	9b02      	ldr	r3, [sp, #8]
 810b228:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810b22c:	6021      	str	r1, [r4, #0]
 810b22e:	f109 0901 	add.w	r9, r9, #1
 810b232:	b11b      	cbz	r3, 810b23c <_scanf_float+0x158>
 810b234:	3b01      	subs	r3, #1
 810b236:	3201      	adds	r2, #1
 810b238:	9302      	str	r3, [sp, #8]
 810b23a:	60a2      	str	r2, [r4, #8]
 810b23c:	68a3      	ldr	r3, [r4, #8]
 810b23e:	3b01      	subs	r3, #1
 810b240:	60a3      	str	r3, [r4, #8]
 810b242:	6923      	ldr	r3, [r4, #16]
 810b244:	3301      	adds	r3, #1
 810b246:	6123      	str	r3, [r4, #16]
 810b248:	687b      	ldr	r3, [r7, #4]
 810b24a:	3b01      	subs	r3, #1
 810b24c:	2b00      	cmp	r3, #0
 810b24e:	607b      	str	r3, [r7, #4]
 810b250:	f340 8084 	ble.w	810b35c <_scanf_float+0x278>
 810b254:	683b      	ldr	r3, [r7, #0]
 810b256:	3301      	adds	r3, #1
 810b258:	603b      	str	r3, [r7, #0]
 810b25a:	e766      	b.n	810b12a <_scanf_float+0x46>
 810b25c:	eb1a 0f05 	cmn.w	sl, r5
 810b260:	f47f af70 	bne.w	810b144 <_scanf_float+0x60>
 810b264:	6822      	ldr	r2, [r4, #0]
 810b266:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810b26a:	6022      	str	r2, [r4, #0]
 810b26c:	f806 3b01 	strb.w	r3, [r6], #1
 810b270:	e7e4      	b.n	810b23c <_scanf_float+0x158>
 810b272:	6822      	ldr	r2, [r4, #0]
 810b274:	0610      	lsls	r0, r2, #24
 810b276:	f57f af65 	bpl.w	810b144 <_scanf_float+0x60>
 810b27a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b27e:	e7f4      	b.n	810b26a <_scanf_float+0x186>
 810b280:	f1ba 0f00 	cmp.w	sl, #0
 810b284:	d10e      	bne.n	810b2a4 <_scanf_float+0x1c0>
 810b286:	f1b9 0f00 	cmp.w	r9, #0
 810b28a:	d10e      	bne.n	810b2aa <_scanf_float+0x1c6>
 810b28c:	6822      	ldr	r2, [r4, #0]
 810b28e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b292:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b296:	d108      	bne.n	810b2aa <_scanf_float+0x1c6>
 810b298:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b29c:	6022      	str	r2, [r4, #0]
 810b29e:	f04f 0a01 	mov.w	sl, #1
 810b2a2:	e7e3      	b.n	810b26c <_scanf_float+0x188>
 810b2a4:	f1ba 0f02 	cmp.w	sl, #2
 810b2a8:	d055      	beq.n	810b356 <_scanf_float+0x272>
 810b2aa:	2d01      	cmp	r5, #1
 810b2ac:	d002      	beq.n	810b2b4 <_scanf_float+0x1d0>
 810b2ae:	2d04      	cmp	r5, #4
 810b2b0:	f47f af48 	bne.w	810b144 <_scanf_float+0x60>
 810b2b4:	3501      	adds	r5, #1
 810b2b6:	b2ed      	uxtb	r5, r5
 810b2b8:	e7d8      	b.n	810b26c <_scanf_float+0x188>
 810b2ba:	f1ba 0f01 	cmp.w	sl, #1
 810b2be:	f47f af41 	bne.w	810b144 <_scanf_float+0x60>
 810b2c2:	f04f 0a02 	mov.w	sl, #2
 810b2c6:	e7d1      	b.n	810b26c <_scanf_float+0x188>
 810b2c8:	b97d      	cbnz	r5, 810b2ea <_scanf_float+0x206>
 810b2ca:	f1b9 0f00 	cmp.w	r9, #0
 810b2ce:	f47f af3c 	bne.w	810b14a <_scanf_float+0x66>
 810b2d2:	6822      	ldr	r2, [r4, #0]
 810b2d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b2d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b2dc:	f47f af39 	bne.w	810b152 <_scanf_float+0x6e>
 810b2e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b2e4:	6022      	str	r2, [r4, #0]
 810b2e6:	2501      	movs	r5, #1
 810b2e8:	e7c0      	b.n	810b26c <_scanf_float+0x188>
 810b2ea:	2d03      	cmp	r5, #3
 810b2ec:	d0e2      	beq.n	810b2b4 <_scanf_float+0x1d0>
 810b2ee:	2d05      	cmp	r5, #5
 810b2f0:	e7de      	b.n	810b2b0 <_scanf_float+0x1cc>
 810b2f2:	2d02      	cmp	r5, #2
 810b2f4:	f47f af26 	bne.w	810b144 <_scanf_float+0x60>
 810b2f8:	2503      	movs	r5, #3
 810b2fa:	e7b7      	b.n	810b26c <_scanf_float+0x188>
 810b2fc:	2d06      	cmp	r5, #6
 810b2fe:	f47f af21 	bne.w	810b144 <_scanf_float+0x60>
 810b302:	2507      	movs	r5, #7
 810b304:	e7b2      	b.n	810b26c <_scanf_float+0x188>
 810b306:	6822      	ldr	r2, [r4, #0]
 810b308:	0591      	lsls	r1, r2, #22
 810b30a:	f57f af1b 	bpl.w	810b144 <_scanf_float+0x60>
 810b30e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810b312:	6022      	str	r2, [r4, #0]
 810b314:	f8cd 9004 	str.w	r9, [sp, #4]
 810b318:	e7a8      	b.n	810b26c <_scanf_float+0x188>
 810b31a:	6822      	ldr	r2, [r4, #0]
 810b31c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810b320:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810b324:	d006      	beq.n	810b334 <_scanf_float+0x250>
 810b326:	0550      	lsls	r0, r2, #21
 810b328:	f57f af0c 	bpl.w	810b144 <_scanf_float+0x60>
 810b32c:	f1b9 0f00 	cmp.w	r9, #0
 810b330:	f43f af0f 	beq.w	810b152 <_scanf_float+0x6e>
 810b334:	0591      	lsls	r1, r2, #22
 810b336:	bf58      	it	pl
 810b338:	9901      	ldrpl	r1, [sp, #4]
 810b33a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b33e:	bf58      	it	pl
 810b340:	eba9 0101 	subpl.w	r1, r9, r1
 810b344:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810b348:	bf58      	it	pl
 810b34a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810b34e:	6022      	str	r2, [r4, #0]
 810b350:	f04f 0900 	mov.w	r9, #0
 810b354:	e78a      	b.n	810b26c <_scanf_float+0x188>
 810b356:	f04f 0a03 	mov.w	sl, #3
 810b35a:	e787      	b.n	810b26c <_scanf_float+0x188>
 810b35c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810b360:	4639      	mov	r1, r7
 810b362:	4640      	mov	r0, r8
 810b364:	4798      	blx	r3
 810b366:	2800      	cmp	r0, #0
 810b368:	f43f aedf 	beq.w	810b12a <_scanf_float+0x46>
 810b36c:	e6ea      	b.n	810b144 <_scanf_float+0x60>
 810b36e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b376:	463a      	mov	r2, r7
 810b378:	4640      	mov	r0, r8
 810b37a:	4798      	blx	r3
 810b37c:	6923      	ldr	r3, [r4, #16]
 810b37e:	3b01      	subs	r3, #1
 810b380:	6123      	str	r3, [r4, #16]
 810b382:	e6ec      	b.n	810b15e <_scanf_float+0x7a>
 810b384:	1e6b      	subs	r3, r5, #1
 810b386:	2b06      	cmp	r3, #6
 810b388:	d825      	bhi.n	810b3d6 <_scanf_float+0x2f2>
 810b38a:	2d02      	cmp	r5, #2
 810b38c:	d836      	bhi.n	810b3fc <_scanf_float+0x318>
 810b38e:	455e      	cmp	r6, fp
 810b390:	f67f aee8 	bls.w	810b164 <_scanf_float+0x80>
 810b394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b398:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b39c:	463a      	mov	r2, r7
 810b39e:	4640      	mov	r0, r8
 810b3a0:	4798      	blx	r3
 810b3a2:	6923      	ldr	r3, [r4, #16]
 810b3a4:	3b01      	subs	r3, #1
 810b3a6:	6123      	str	r3, [r4, #16]
 810b3a8:	e7f1      	b.n	810b38e <_scanf_float+0x2aa>
 810b3aa:	9802      	ldr	r0, [sp, #8]
 810b3ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b3b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810b3b4:	9002      	str	r0, [sp, #8]
 810b3b6:	463a      	mov	r2, r7
 810b3b8:	4640      	mov	r0, r8
 810b3ba:	4798      	blx	r3
 810b3bc:	6923      	ldr	r3, [r4, #16]
 810b3be:	3b01      	subs	r3, #1
 810b3c0:	6123      	str	r3, [r4, #16]
 810b3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b3c6:	fa5f fa8a 	uxtb.w	sl, sl
 810b3ca:	f1ba 0f02 	cmp.w	sl, #2
 810b3ce:	d1ec      	bne.n	810b3aa <_scanf_float+0x2c6>
 810b3d0:	3d03      	subs	r5, #3
 810b3d2:	b2ed      	uxtb	r5, r5
 810b3d4:	1b76      	subs	r6, r6, r5
 810b3d6:	6823      	ldr	r3, [r4, #0]
 810b3d8:	05da      	lsls	r2, r3, #23
 810b3da:	d52f      	bpl.n	810b43c <_scanf_float+0x358>
 810b3dc:	055b      	lsls	r3, r3, #21
 810b3de:	d510      	bpl.n	810b402 <_scanf_float+0x31e>
 810b3e0:	455e      	cmp	r6, fp
 810b3e2:	f67f aebf 	bls.w	810b164 <_scanf_float+0x80>
 810b3e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b3ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b3ee:	463a      	mov	r2, r7
 810b3f0:	4640      	mov	r0, r8
 810b3f2:	4798      	blx	r3
 810b3f4:	6923      	ldr	r3, [r4, #16]
 810b3f6:	3b01      	subs	r3, #1
 810b3f8:	6123      	str	r3, [r4, #16]
 810b3fa:	e7f1      	b.n	810b3e0 <_scanf_float+0x2fc>
 810b3fc:	46aa      	mov	sl, r5
 810b3fe:	9602      	str	r6, [sp, #8]
 810b400:	e7df      	b.n	810b3c2 <_scanf_float+0x2de>
 810b402:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810b406:	6923      	ldr	r3, [r4, #16]
 810b408:	2965      	cmp	r1, #101	; 0x65
 810b40a:	f103 33ff 	add.w	r3, r3, #4294967295
 810b40e:	f106 35ff 	add.w	r5, r6, #4294967295
 810b412:	6123      	str	r3, [r4, #16]
 810b414:	d00c      	beq.n	810b430 <_scanf_float+0x34c>
 810b416:	2945      	cmp	r1, #69	; 0x45
 810b418:	d00a      	beq.n	810b430 <_scanf_float+0x34c>
 810b41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b41e:	463a      	mov	r2, r7
 810b420:	4640      	mov	r0, r8
 810b422:	4798      	blx	r3
 810b424:	6923      	ldr	r3, [r4, #16]
 810b426:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810b42a:	3b01      	subs	r3, #1
 810b42c:	1eb5      	subs	r5, r6, #2
 810b42e:	6123      	str	r3, [r4, #16]
 810b430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b434:	463a      	mov	r2, r7
 810b436:	4640      	mov	r0, r8
 810b438:	4798      	blx	r3
 810b43a:	462e      	mov	r6, r5
 810b43c:	6825      	ldr	r5, [r4, #0]
 810b43e:	f015 0510 	ands.w	r5, r5, #16
 810b442:	d158      	bne.n	810b4f6 <_scanf_float+0x412>
 810b444:	7035      	strb	r5, [r6, #0]
 810b446:	6823      	ldr	r3, [r4, #0]
 810b448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810b44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810b450:	d11c      	bne.n	810b48c <_scanf_float+0x3a8>
 810b452:	9b01      	ldr	r3, [sp, #4]
 810b454:	454b      	cmp	r3, r9
 810b456:	eba3 0209 	sub.w	r2, r3, r9
 810b45a:	d124      	bne.n	810b4a6 <_scanf_float+0x3c2>
 810b45c:	2200      	movs	r2, #0
 810b45e:	4659      	mov	r1, fp
 810b460:	4640      	mov	r0, r8
 810b462:	f000 fed3 	bl	810c20c <_strtod_r>
 810b466:	9b03      	ldr	r3, [sp, #12]
 810b468:	6821      	ldr	r1, [r4, #0]
 810b46a:	681b      	ldr	r3, [r3, #0]
 810b46c:	f011 0f02 	tst.w	r1, #2
 810b470:	ec57 6b10 	vmov	r6, r7, d0
 810b474:	f103 0204 	add.w	r2, r3, #4
 810b478:	d020      	beq.n	810b4bc <_scanf_float+0x3d8>
 810b47a:	9903      	ldr	r1, [sp, #12]
 810b47c:	600a      	str	r2, [r1, #0]
 810b47e:	681b      	ldr	r3, [r3, #0]
 810b480:	e9c3 6700 	strd	r6, r7, [r3]
 810b484:	68e3      	ldr	r3, [r4, #12]
 810b486:	3301      	adds	r3, #1
 810b488:	60e3      	str	r3, [r4, #12]
 810b48a:	e66c      	b.n	810b166 <_scanf_float+0x82>
 810b48c:	9b04      	ldr	r3, [sp, #16]
 810b48e:	2b00      	cmp	r3, #0
 810b490:	d0e4      	beq.n	810b45c <_scanf_float+0x378>
 810b492:	9905      	ldr	r1, [sp, #20]
 810b494:	230a      	movs	r3, #10
 810b496:	462a      	mov	r2, r5
 810b498:	3101      	adds	r1, #1
 810b49a:	4640      	mov	r0, r8
 810b49c:	f000 ff40 	bl	810c320 <_strtol_r>
 810b4a0:	9b04      	ldr	r3, [sp, #16]
 810b4a2:	9e05      	ldr	r6, [sp, #20]
 810b4a4:	1ac2      	subs	r2, r0, r3
 810b4a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810b4aa:	429e      	cmp	r6, r3
 810b4ac:	bf28      	it	cs
 810b4ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810b4b2:	4912      	ldr	r1, [pc, #72]	; (810b4fc <_scanf_float+0x418>)
 810b4b4:	4630      	mov	r0, r6
 810b4b6:	f000 f83b 	bl	810b530 <siprintf>
 810b4ba:	e7cf      	b.n	810b45c <_scanf_float+0x378>
 810b4bc:	f011 0f04 	tst.w	r1, #4
 810b4c0:	9903      	ldr	r1, [sp, #12]
 810b4c2:	600a      	str	r2, [r1, #0]
 810b4c4:	d1db      	bne.n	810b47e <_scanf_float+0x39a>
 810b4c6:	f8d3 8000 	ldr.w	r8, [r3]
 810b4ca:	ee10 2a10 	vmov	r2, s0
 810b4ce:	ee10 0a10 	vmov	r0, s0
 810b4d2:	463b      	mov	r3, r7
 810b4d4:	4639      	mov	r1, r7
 810b4d6:	f7f5 fbc1 	bl	8100c5c <__aeabi_dcmpun>
 810b4da:	b128      	cbz	r0, 810b4e8 <_scanf_float+0x404>
 810b4dc:	4808      	ldr	r0, [pc, #32]	; (810b500 <_scanf_float+0x41c>)
 810b4de:	f000 f821 	bl	810b524 <nanf>
 810b4e2:	ed88 0a00 	vstr	s0, [r8]
 810b4e6:	e7cd      	b.n	810b484 <_scanf_float+0x3a0>
 810b4e8:	4630      	mov	r0, r6
 810b4ea:	4639      	mov	r1, r7
 810b4ec:	f7f5 fc14 	bl	8100d18 <__aeabi_d2f>
 810b4f0:	f8c8 0000 	str.w	r0, [r8]
 810b4f4:	e7c6      	b.n	810b484 <_scanf_float+0x3a0>
 810b4f6:	2500      	movs	r5, #0
 810b4f8:	e635      	b.n	810b166 <_scanf_float+0x82>
 810b4fa:	bf00      	nop
 810b4fc:	0810ef4d 	.word	0x0810ef4d
 810b500:	0810ef03 	.word	0x0810ef03

0810b504 <_sbrk_r>:
 810b504:	b538      	push	{r3, r4, r5, lr}
 810b506:	4d06      	ldr	r5, [pc, #24]	; (810b520 <_sbrk_r+0x1c>)
 810b508:	2300      	movs	r3, #0
 810b50a:	4604      	mov	r4, r0
 810b50c:	4608      	mov	r0, r1
 810b50e:	602b      	str	r3, [r5, #0]
 810b510:	f7f6 f936 	bl	8101780 <_sbrk>
 810b514:	1c43      	adds	r3, r0, #1
 810b516:	d102      	bne.n	810b51e <_sbrk_r+0x1a>
 810b518:	682b      	ldr	r3, [r5, #0]
 810b51a:	b103      	cbz	r3, 810b51e <_sbrk_r+0x1a>
 810b51c:	6023      	str	r3, [r4, #0]
 810b51e:	bd38      	pop	{r3, r4, r5, pc}
 810b520:	10000624 	.word	0x10000624

0810b524 <nanf>:
 810b524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810b52c <nanf+0x8>
 810b528:	4770      	bx	lr
 810b52a:	bf00      	nop
 810b52c:	7fc00000 	.word	0x7fc00000

0810b530 <siprintf>:
 810b530:	b40e      	push	{r1, r2, r3}
 810b532:	b500      	push	{lr}
 810b534:	b09c      	sub	sp, #112	; 0x70
 810b536:	ab1d      	add	r3, sp, #116	; 0x74
 810b538:	9002      	str	r0, [sp, #8]
 810b53a:	9006      	str	r0, [sp, #24]
 810b53c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810b540:	4809      	ldr	r0, [pc, #36]	; (810b568 <siprintf+0x38>)
 810b542:	9107      	str	r1, [sp, #28]
 810b544:	9104      	str	r1, [sp, #16]
 810b546:	4909      	ldr	r1, [pc, #36]	; (810b56c <siprintf+0x3c>)
 810b548:	f853 2b04 	ldr.w	r2, [r3], #4
 810b54c:	9105      	str	r1, [sp, #20]
 810b54e:	6800      	ldr	r0, [r0, #0]
 810b550:	9301      	str	r3, [sp, #4]
 810b552:	a902      	add	r1, sp, #8
 810b554:	f003 f93a 	bl	810e7cc <_svfiprintf_r>
 810b558:	9b02      	ldr	r3, [sp, #8]
 810b55a:	2200      	movs	r2, #0
 810b55c:	701a      	strb	r2, [r3, #0]
 810b55e:	b01c      	add	sp, #112	; 0x70
 810b560:	f85d eb04 	ldr.w	lr, [sp], #4
 810b564:	b003      	add	sp, #12
 810b566:	4770      	bx	lr
 810b568:	100000bc 	.word	0x100000bc
 810b56c:	ffff0208 	.word	0xffff0208

0810b570 <strncmp>:
 810b570:	b510      	push	{r4, lr}
 810b572:	b16a      	cbz	r2, 810b590 <strncmp+0x20>
 810b574:	3901      	subs	r1, #1
 810b576:	1884      	adds	r4, r0, r2
 810b578:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b57c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b580:	4293      	cmp	r3, r2
 810b582:	d103      	bne.n	810b58c <strncmp+0x1c>
 810b584:	42a0      	cmp	r0, r4
 810b586:	d001      	beq.n	810b58c <strncmp+0x1c>
 810b588:	2b00      	cmp	r3, #0
 810b58a:	d1f5      	bne.n	810b578 <strncmp+0x8>
 810b58c:	1a98      	subs	r0, r3, r2
 810b58e:	bd10      	pop	{r4, pc}
 810b590:	4610      	mov	r0, r2
 810b592:	e7fc      	b.n	810b58e <strncmp+0x1e>

0810b594 <strncpy>:
 810b594:	b510      	push	{r4, lr}
 810b596:	3901      	subs	r1, #1
 810b598:	4603      	mov	r3, r0
 810b59a:	b132      	cbz	r2, 810b5aa <strncpy+0x16>
 810b59c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810b5a0:	f803 4b01 	strb.w	r4, [r3], #1
 810b5a4:	3a01      	subs	r2, #1
 810b5a6:	2c00      	cmp	r4, #0
 810b5a8:	d1f7      	bne.n	810b59a <strncpy+0x6>
 810b5aa:	441a      	add	r2, r3
 810b5ac:	2100      	movs	r1, #0
 810b5ae:	4293      	cmp	r3, r2
 810b5b0:	d100      	bne.n	810b5b4 <strncpy+0x20>
 810b5b2:	bd10      	pop	{r4, pc}
 810b5b4:	f803 1b01 	strb.w	r1, [r3], #1
 810b5b8:	e7f9      	b.n	810b5ae <strncpy+0x1a>

0810b5ba <sulp>:
 810b5ba:	b570      	push	{r4, r5, r6, lr}
 810b5bc:	4604      	mov	r4, r0
 810b5be:	460d      	mov	r5, r1
 810b5c0:	ec45 4b10 	vmov	d0, r4, r5
 810b5c4:	4616      	mov	r6, r2
 810b5c6:	f002 ff21 	bl	810e40c <__ulp>
 810b5ca:	ec51 0b10 	vmov	r0, r1, d0
 810b5ce:	b17e      	cbz	r6, 810b5f0 <sulp+0x36>
 810b5d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810b5d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810b5d8:	2b00      	cmp	r3, #0
 810b5da:	dd09      	ble.n	810b5f0 <sulp+0x36>
 810b5dc:	051b      	lsls	r3, r3, #20
 810b5de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810b5e2:	2400      	movs	r4, #0
 810b5e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810b5e8:	4622      	mov	r2, r4
 810b5ea:	462b      	mov	r3, r5
 810b5ec:	f7f5 f89c 	bl	8100728 <__aeabi_dmul>
 810b5f0:	bd70      	pop	{r4, r5, r6, pc}
 810b5f2:	0000      	movs	r0, r0
 810b5f4:	0000      	movs	r0, r0
	...

0810b5f8 <_strtod_l>:
 810b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b5fc:	b0a3      	sub	sp, #140	; 0x8c
 810b5fe:	461f      	mov	r7, r3
 810b600:	2300      	movs	r3, #0
 810b602:	931e      	str	r3, [sp, #120]	; 0x78
 810b604:	4ba4      	ldr	r3, [pc, #656]	; (810b898 <_strtod_l+0x2a0>)
 810b606:	9219      	str	r2, [sp, #100]	; 0x64
 810b608:	681b      	ldr	r3, [r3, #0]
 810b60a:	9307      	str	r3, [sp, #28]
 810b60c:	4604      	mov	r4, r0
 810b60e:	4618      	mov	r0, r3
 810b610:	4688      	mov	r8, r1
 810b612:	f7f4 fe6f 	bl	81002f4 <strlen>
 810b616:	f04f 0a00 	mov.w	sl, #0
 810b61a:	4605      	mov	r5, r0
 810b61c:	f04f 0b00 	mov.w	fp, #0
 810b620:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810b624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b626:	781a      	ldrb	r2, [r3, #0]
 810b628:	2a2b      	cmp	r2, #43	; 0x2b
 810b62a:	d04c      	beq.n	810b6c6 <_strtod_l+0xce>
 810b62c:	d839      	bhi.n	810b6a2 <_strtod_l+0xaa>
 810b62e:	2a0d      	cmp	r2, #13
 810b630:	d832      	bhi.n	810b698 <_strtod_l+0xa0>
 810b632:	2a08      	cmp	r2, #8
 810b634:	d832      	bhi.n	810b69c <_strtod_l+0xa4>
 810b636:	2a00      	cmp	r2, #0
 810b638:	d03c      	beq.n	810b6b4 <_strtod_l+0xbc>
 810b63a:	2300      	movs	r3, #0
 810b63c:	930e      	str	r3, [sp, #56]	; 0x38
 810b63e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 810b640:	7833      	ldrb	r3, [r6, #0]
 810b642:	2b30      	cmp	r3, #48	; 0x30
 810b644:	f040 80b4 	bne.w	810b7b0 <_strtod_l+0x1b8>
 810b648:	7873      	ldrb	r3, [r6, #1]
 810b64a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810b64e:	2b58      	cmp	r3, #88	; 0x58
 810b650:	d16c      	bne.n	810b72c <_strtod_l+0x134>
 810b652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b654:	9301      	str	r3, [sp, #4]
 810b656:	ab1e      	add	r3, sp, #120	; 0x78
 810b658:	9702      	str	r7, [sp, #8]
 810b65a:	9300      	str	r3, [sp, #0]
 810b65c:	4a8f      	ldr	r2, [pc, #572]	; (810b89c <_strtod_l+0x2a4>)
 810b65e:	ab1f      	add	r3, sp, #124	; 0x7c
 810b660:	a91d      	add	r1, sp, #116	; 0x74
 810b662:	4620      	mov	r0, r4
 810b664:	f001 ffba 	bl	810d5dc <__gethex>
 810b668:	f010 0707 	ands.w	r7, r0, #7
 810b66c:	4605      	mov	r5, r0
 810b66e:	d005      	beq.n	810b67c <_strtod_l+0x84>
 810b670:	2f06      	cmp	r7, #6
 810b672:	d12a      	bne.n	810b6ca <_strtod_l+0xd2>
 810b674:	3601      	adds	r6, #1
 810b676:	2300      	movs	r3, #0
 810b678:	961d      	str	r6, [sp, #116]	; 0x74
 810b67a:	930e      	str	r3, [sp, #56]	; 0x38
 810b67c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810b67e:	2b00      	cmp	r3, #0
 810b680:	f040 8596 	bne.w	810c1b0 <_strtod_l+0xbb8>
 810b684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b686:	b1db      	cbz	r3, 810b6c0 <_strtod_l+0xc8>
 810b688:	4652      	mov	r2, sl
 810b68a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b68e:	ec43 2b10 	vmov	d0, r2, r3
 810b692:	b023      	add	sp, #140	; 0x8c
 810b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b698:	2a20      	cmp	r2, #32
 810b69a:	d1ce      	bne.n	810b63a <_strtod_l+0x42>
 810b69c:	3301      	adds	r3, #1
 810b69e:	931d      	str	r3, [sp, #116]	; 0x74
 810b6a0:	e7c0      	b.n	810b624 <_strtod_l+0x2c>
 810b6a2:	2a2d      	cmp	r2, #45	; 0x2d
 810b6a4:	d1c9      	bne.n	810b63a <_strtod_l+0x42>
 810b6a6:	2201      	movs	r2, #1
 810b6a8:	920e      	str	r2, [sp, #56]	; 0x38
 810b6aa:	1c5a      	adds	r2, r3, #1
 810b6ac:	921d      	str	r2, [sp, #116]	; 0x74
 810b6ae:	785b      	ldrb	r3, [r3, #1]
 810b6b0:	2b00      	cmp	r3, #0
 810b6b2:	d1c4      	bne.n	810b63e <_strtod_l+0x46>
 810b6b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810b6b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810b6ba:	2b00      	cmp	r3, #0
 810b6bc:	f040 8576 	bne.w	810c1ac <_strtod_l+0xbb4>
 810b6c0:	4652      	mov	r2, sl
 810b6c2:	465b      	mov	r3, fp
 810b6c4:	e7e3      	b.n	810b68e <_strtod_l+0x96>
 810b6c6:	2200      	movs	r2, #0
 810b6c8:	e7ee      	b.n	810b6a8 <_strtod_l+0xb0>
 810b6ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810b6cc:	b13a      	cbz	r2, 810b6de <_strtod_l+0xe6>
 810b6ce:	2135      	movs	r1, #53	; 0x35
 810b6d0:	a820      	add	r0, sp, #128	; 0x80
 810b6d2:	f002 ffa6 	bl	810e622 <__copybits>
 810b6d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 810b6d8:	4620      	mov	r0, r4
 810b6da:	f002 fb6b 	bl	810ddb4 <_Bfree>
 810b6de:	3f01      	subs	r7, #1
 810b6e0:	2f05      	cmp	r7, #5
 810b6e2:	d807      	bhi.n	810b6f4 <_strtod_l+0xfc>
 810b6e4:	e8df f007 	tbb	[pc, r7]
 810b6e8:	1d180b0e 	.word	0x1d180b0e
 810b6ec:	030e      	.short	0x030e
 810b6ee:	f04f 0b00 	mov.w	fp, #0
 810b6f2:	46da      	mov	sl, fp
 810b6f4:	0728      	lsls	r0, r5, #28
 810b6f6:	d5c1      	bpl.n	810b67c <_strtod_l+0x84>
 810b6f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810b6fc:	e7be      	b.n	810b67c <_strtod_l+0x84>
 810b6fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 810b702:	e7f7      	b.n	810b6f4 <_strtod_l+0xfc>
 810b704:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 810b708:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 810b70a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810b70e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810b712:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810b716:	e7ed      	b.n	810b6f4 <_strtod_l+0xfc>
 810b718:	f8df b184 	ldr.w	fp, [pc, #388]	; 810b8a0 <_strtod_l+0x2a8>
 810b71c:	f04f 0a00 	mov.w	sl, #0
 810b720:	e7e8      	b.n	810b6f4 <_strtod_l+0xfc>
 810b722:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810b726:	f04f 3aff 	mov.w	sl, #4294967295
 810b72a:	e7e3      	b.n	810b6f4 <_strtod_l+0xfc>
 810b72c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b72e:	1c5a      	adds	r2, r3, #1
 810b730:	921d      	str	r2, [sp, #116]	; 0x74
 810b732:	785b      	ldrb	r3, [r3, #1]
 810b734:	2b30      	cmp	r3, #48	; 0x30
 810b736:	d0f9      	beq.n	810b72c <_strtod_l+0x134>
 810b738:	2b00      	cmp	r3, #0
 810b73a:	d09f      	beq.n	810b67c <_strtod_l+0x84>
 810b73c:	2301      	movs	r3, #1
 810b73e:	f04f 0900 	mov.w	r9, #0
 810b742:	9304      	str	r3, [sp, #16]
 810b744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b746:	930a      	str	r3, [sp, #40]	; 0x28
 810b748:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810b74c:	464f      	mov	r7, r9
 810b74e:	220a      	movs	r2, #10
 810b750:	981d      	ldr	r0, [sp, #116]	; 0x74
 810b752:	7806      	ldrb	r6, [r0, #0]
 810b754:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810b758:	b2d9      	uxtb	r1, r3
 810b75a:	2909      	cmp	r1, #9
 810b75c:	d92a      	bls.n	810b7b4 <_strtod_l+0x1bc>
 810b75e:	9907      	ldr	r1, [sp, #28]
 810b760:	462a      	mov	r2, r5
 810b762:	f7ff ff05 	bl	810b570 <strncmp>
 810b766:	b398      	cbz	r0, 810b7d0 <_strtod_l+0x1d8>
 810b768:	2000      	movs	r0, #0
 810b76a:	4633      	mov	r3, r6
 810b76c:	463d      	mov	r5, r7
 810b76e:	9007      	str	r0, [sp, #28]
 810b770:	4602      	mov	r2, r0
 810b772:	2b65      	cmp	r3, #101	; 0x65
 810b774:	d001      	beq.n	810b77a <_strtod_l+0x182>
 810b776:	2b45      	cmp	r3, #69	; 0x45
 810b778:	d118      	bne.n	810b7ac <_strtod_l+0x1b4>
 810b77a:	b91d      	cbnz	r5, 810b784 <_strtod_l+0x18c>
 810b77c:	9b04      	ldr	r3, [sp, #16]
 810b77e:	4303      	orrs	r3, r0
 810b780:	d098      	beq.n	810b6b4 <_strtod_l+0xbc>
 810b782:	2500      	movs	r5, #0
 810b784:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 810b788:	f108 0301 	add.w	r3, r8, #1
 810b78c:	931d      	str	r3, [sp, #116]	; 0x74
 810b78e:	f898 3001 	ldrb.w	r3, [r8, #1]
 810b792:	2b2b      	cmp	r3, #43	; 0x2b
 810b794:	d075      	beq.n	810b882 <_strtod_l+0x28a>
 810b796:	2b2d      	cmp	r3, #45	; 0x2d
 810b798:	d07b      	beq.n	810b892 <_strtod_l+0x29a>
 810b79a:	f04f 0c00 	mov.w	ip, #0
 810b79e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 810b7a2:	2909      	cmp	r1, #9
 810b7a4:	f240 8082 	bls.w	810b8ac <_strtod_l+0x2b4>
 810b7a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810b7ac:	2600      	movs	r6, #0
 810b7ae:	e09d      	b.n	810b8ec <_strtod_l+0x2f4>
 810b7b0:	2300      	movs	r3, #0
 810b7b2:	e7c4      	b.n	810b73e <_strtod_l+0x146>
 810b7b4:	2f08      	cmp	r7, #8
 810b7b6:	bfd8      	it	le
 810b7b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810b7ba:	f100 0001 	add.w	r0, r0, #1
 810b7be:	bfda      	itte	le
 810b7c0:	fb02 3301 	mlale	r3, r2, r1, r3
 810b7c4:	9309      	strle	r3, [sp, #36]	; 0x24
 810b7c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 810b7ca:	3701      	adds	r7, #1
 810b7cc:	901d      	str	r0, [sp, #116]	; 0x74
 810b7ce:	e7bf      	b.n	810b750 <_strtod_l+0x158>
 810b7d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b7d2:	195a      	adds	r2, r3, r5
 810b7d4:	921d      	str	r2, [sp, #116]	; 0x74
 810b7d6:	5d5b      	ldrb	r3, [r3, r5]
 810b7d8:	2f00      	cmp	r7, #0
 810b7da:	d037      	beq.n	810b84c <_strtod_l+0x254>
 810b7dc:	9007      	str	r0, [sp, #28]
 810b7de:	463d      	mov	r5, r7
 810b7e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 810b7e4:	2a09      	cmp	r2, #9
 810b7e6:	d912      	bls.n	810b80e <_strtod_l+0x216>
 810b7e8:	2201      	movs	r2, #1
 810b7ea:	e7c2      	b.n	810b772 <_strtod_l+0x17a>
 810b7ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b7ee:	1c5a      	adds	r2, r3, #1
 810b7f0:	921d      	str	r2, [sp, #116]	; 0x74
 810b7f2:	785b      	ldrb	r3, [r3, #1]
 810b7f4:	3001      	adds	r0, #1
 810b7f6:	2b30      	cmp	r3, #48	; 0x30
 810b7f8:	d0f8      	beq.n	810b7ec <_strtod_l+0x1f4>
 810b7fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 810b7fe:	2a08      	cmp	r2, #8
 810b800:	f200 84db 	bhi.w	810c1ba <_strtod_l+0xbc2>
 810b804:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 810b806:	9007      	str	r0, [sp, #28]
 810b808:	2000      	movs	r0, #0
 810b80a:	920a      	str	r2, [sp, #40]	; 0x28
 810b80c:	4605      	mov	r5, r0
 810b80e:	3b30      	subs	r3, #48	; 0x30
 810b810:	f100 0201 	add.w	r2, r0, #1
 810b814:	d014      	beq.n	810b840 <_strtod_l+0x248>
 810b816:	9907      	ldr	r1, [sp, #28]
 810b818:	4411      	add	r1, r2
 810b81a:	9107      	str	r1, [sp, #28]
 810b81c:	462a      	mov	r2, r5
 810b81e:	eb00 0e05 	add.w	lr, r0, r5
 810b822:	210a      	movs	r1, #10
 810b824:	4572      	cmp	r2, lr
 810b826:	d113      	bne.n	810b850 <_strtod_l+0x258>
 810b828:	182a      	adds	r2, r5, r0
 810b82a:	2a08      	cmp	r2, #8
 810b82c:	f105 0501 	add.w	r5, r5, #1
 810b830:	4405      	add	r5, r0
 810b832:	dc1c      	bgt.n	810b86e <_strtod_l+0x276>
 810b834:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b836:	220a      	movs	r2, #10
 810b838:	fb02 3301 	mla	r3, r2, r1, r3
 810b83c:	9309      	str	r3, [sp, #36]	; 0x24
 810b83e:	2200      	movs	r2, #0
 810b840:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b842:	1c59      	adds	r1, r3, #1
 810b844:	911d      	str	r1, [sp, #116]	; 0x74
 810b846:	785b      	ldrb	r3, [r3, #1]
 810b848:	4610      	mov	r0, r2
 810b84a:	e7c9      	b.n	810b7e0 <_strtod_l+0x1e8>
 810b84c:	4638      	mov	r0, r7
 810b84e:	e7d2      	b.n	810b7f6 <_strtod_l+0x1fe>
 810b850:	2a08      	cmp	r2, #8
 810b852:	dc04      	bgt.n	810b85e <_strtod_l+0x266>
 810b854:	9e09      	ldr	r6, [sp, #36]	; 0x24
 810b856:	434e      	muls	r6, r1
 810b858:	9609      	str	r6, [sp, #36]	; 0x24
 810b85a:	3201      	adds	r2, #1
 810b85c:	e7e2      	b.n	810b824 <_strtod_l+0x22c>
 810b85e:	f102 0c01 	add.w	ip, r2, #1
 810b862:	f1bc 0f10 	cmp.w	ip, #16
 810b866:	bfd8      	it	le
 810b868:	fb01 f909 	mulle.w	r9, r1, r9
 810b86c:	e7f5      	b.n	810b85a <_strtod_l+0x262>
 810b86e:	2d10      	cmp	r5, #16
 810b870:	bfdc      	itt	le
 810b872:	220a      	movle	r2, #10
 810b874:	fb02 3909 	mlale	r9, r2, r9, r3
 810b878:	e7e1      	b.n	810b83e <_strtod_l+0x246>
 810b87a:	2300      	movs	r3, #0
 810b87c:	9307      	str	r3, [sp, #28]
 810b87e:	2201      	movs	r2, #1
 810b880:	e77c      	b.n	810b77c <_strtod_l+0x184>
 810b882:	f04f 0c00 	mov.w	ip, #0
 810b886:	f108 0302 	add.w	r3, r8, #2
 810b88a:	931d      	str	r3, [sp, #116]	; 0x74
 810b88c:	f898 3002 	ldrb.w	r3, [r8, #2]
 810b890:	e785      	b.n	810b79e <_strtod_l+0x1a6>
 810b892:	f04f 0c01 	mov.w	ip, #1
 810b896:	e7f6      	b.n	810b886 <_strtod_l+0x28e>
 810b898:	0810f20c 	.word	0x0810f20c
 810b89c:	0810ef54 	.word	0x0810ef54
 810b8a0:	7ff00000 	.word	0x7ff00000
 810b8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b8a6:	1c59      	adds	r1, r3, #1
 810b8a8:	911d      	str	r1, [sp, #116]	; 0x74
 810b8aa:	785b      	ldrb	r3, [r3, #1]
 810b8ac:	2b30      	cmp	r3, #48	; 0x30
 810b8ae:	d0f9      	beq.n	810b8a4 <_strtod_l+0x2ac>
 810b8b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 810b8b4:	2908      	cmp	r1, #8
 810b8b6:	f63f af79 	bhi.w	810b7ac <_strtod_l+0x1b4>
 810b8ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 810b8be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b8c0:	9308      	str	r3, [sp, #32]
 810b8c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b8c4:	1c59      	adds	r1, r3, #1
 810b8c6:	911d      	str	r1, [sp, #116]	; 0x74
 810b8c8:	785b      	ldrb	r3, [r3, #1]
 810b8ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 810b8ce:	2e09      	cmp	r6, #9
 810b8d0:	d937      	bls.n	810b942 <_strtod_l+0x34a>
 810b8d2:	9e08      	ldr	r6, [sp, #32]
 810b8d4:	1b89      	subs	r1, r1, r6
 810b8d6:	2908      	cmp	r1, #8
 810b8d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810b8dc:	dc02      	bgt.n	810b8e4 <_strtod_l+0x2ec>
 810b8de:	4576      	cmp	r6, lr
 810b8e0:	bfa8      	it	ge
 810b8e2:	4676      	movge	r6, lr
 810b8e4:	f1bc 0f00 	cmp.w	ip, #0
 810b8e8:	d000      	beq.n	810b8ec <_strtod_l+0x2f4>
 810b8ea:	4276      	negs	r6, r6
 810b8ec:	2d00      	cmp	r5, #0
 810b8ee:	d14f      	bne.n	810b990 <_strtod_l+0x398>
 810b8f0:	9904      	ldr	r1, [sp, #16]
 810b8f2:	4301      	orrs	r1, r0
 810b8f4:	f47f aec2 	bne.w	810b67c <_strtod_l+0x84>
 810b8f8:	2a00      	cmp	r2, #0
 810b8fa:	f47f aedb 	bne.w	810b6b4 <_strtod_l+0xbc>
 810b8fe:	2b69      	cmp	r3, #105	; 0x69
 810b900:	d027      	beq.n	810b952 <_strtod_l+0x35a>
 810b902:	dc24      	bgt.n	810b94e <_strtod_l+0x356>
 810b904:	2b49      	cmp	r3, #73	; 0x49
 810b906:	d024      	beq.n	810b952 <_strtod_l+0x35a>
 810b908:	2b4e      	cmp	r3, #78	; 0x4e
 810b90a:	f47f aed3 	bne.w	810b6b4 <_strtod_l+0xbc>
 810b90e:	499e      	ldr	r1, [pc, #632]	; (810bb88 <_strtod_l+0x590>)
 810b910:	a81d      	add	r0, sp, #116	; 0x74
 810b912:	f002 f8bb 	bl	810da8c <__match>
 810b916:	2800      	cmp	r0, #0
 810b918:	f43f aecc 	beq.w	810b6b4 <_strtod_l+0xbc>
 810b91c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b91e:	781b      	ldrb	r3, [r3, #0]
 810b920:	2b28      	cmp	r3, #40	; 0x28
 810b922:	d12d      	bne.n	810b980 <_strtod_l+0x388>
 810b924:	4999      	ldr	r1, [pc, #612]	; (810bb8c <_strtod_l+0x594>)
 810b926:	aa20      	add	r2, sp, #128	; 0x80
 810b928:	a81d      	add	r0, sp, #116	; 0x74
 810b92a:	f002 f8c3 	bl	810dab4 <__hexnan>
 810b92e:	2805      	cmp	r0, #5
 810b930:	d126      	bne.n	810b980 <_strtod_l+0x388>
 810b932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b934:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 810b938:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810b93c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810b940:	e69c      	b.n	810b67c <_strtod_l+0x84>
 810b942:	210a      	movs	r1, #10
 810b944:	fb01 3e0e 	mla	lr, r1, lr, r3
 810b948:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810b94c:	e7b9      	b.n	810b8c2 <_strtod_l+0x2ca>
 810b94e:	2b6e      	cmp	r3, #110	; 0x6e
 810b950:	e7db      	b.n	810b90a <_strtod_l+0x312>
 810b952:	498f      	ldr	r1, [pc, #572]	; (810bb90 <_strtod_l+0x598>)
 810b954:	a81d      	add	r0, sp, #116	; 0x74
 810b956:	f002 f899 	bl	810da8c <__match>
 810b95a:	2800      	cmp	r0, #0
 810b95c:	f43f aeaa 	beq.w	810b6b4 <_strtod_l+0xbc>
 810b960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b962:	498c      	ldr	r1, [pc, #560]	; (810bb94 <_strtod_l+0x59c>)
 810b964:	3b01      	subs	r3, #1
 810b966:	a81d      	add	r0, sp, #116	; 0x74
 810b968:	931d      	str	r3, [sp, #116]	; 0x74
 810b96a:	f002 f88f 	bl	810da8c <__match>
 810b96e:	b910      	cbnz	r0, 810b976 <_strtod_l+0x37e>
 810b970:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b972:	3301      	adds	r3, #1
 810b974:	931d      	str	r3, [sp, #116]	; 0x74
 810b976:	f8df b22c 	ldr.w	fp, [pc, #556]	; 810bba4 <_strtod_l+0x5ac>
 810b97a:	f04f 0a00 	mov.w	sl, #0
 810b97e:	e67d      	b.n	810b67c <_strtod_l+0x84>
 810b980:	4885      	ldr	r0, [pc, #532]	; (810bb98 <_strtod_l+0x5a0>)
 810b982:	f7fe fcb9 	bl	810a2f8 <nan>
 810b986:	ed8d 0b04 	vstr	d0, [sp, #16]
 810b98a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 810b98e:	e675      	b.n	810b67c <_strtod_l+0x84>
 810b990:	9b07      	ldr	r3, [sp, #28]
 810b992:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b994:	1af3      	subs	r3, r6, r3
 810b996:	2f00      	cmp	r7, #0
 810b998:	bf08      	it	eq
 810b99a:	462f      	moveq	r7, r5
 810b99c:	2d10      	cmp	r5, #16
 810b99e:	9308      	str	r3, [sp, #32]
 810b9a0:	46a8      	mov	r8, r5
 810b9a2:	bfa8      	it	ge
 810b9a4:	f04f 0810 	movge.w	r8, #16
 810b9a8:	f7f4 fe44 	bl	8100634 <__aeabi_ui2d>
 810b9ac:	2d09      	cmp	r5, #9
 810b9ae:	4682      	mov	sl, r0
 810b9b0:	468b      	mov	fp, r1
 810b9b2:	dd13      	ble.n	810b9dc <_strtod_l+0x3e4>
 810b9b4:	4b79      	ldr	r3, [pc, #484]	; (810bb9c <_strtod_l+0x5a4>)
 810b9b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810b9ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810b9be:	f7f4 feb3 	bl	8100728 <__aeabi_dmul>
 810b9c2:	4682      	mov	sl, r0
 810b9c4:	4648      	mov	r0, r9
 810b9c6:	468b      	mov	fp, r1
 810b9c8:	f7f4 fe34 	bl	8100634 <__aeabi_ui2d>
 810b9cc:	4602      	mov	r2, r0
 810b9ce:	460b      	mov	r3, r1
 810b9d0:	4650      	mov	r0, sl
 810b9d2:	4659      	mov	r1, fp
 810b9d4:	f7f4 fcf2 	bl	81003bc <__adddf3>
 810b9d8:	4682      	mov	sl, r0
 810b9da:	468b      	mov	fp, r1
 810b9dc:	2d0f      	cmp	r5, #15
 810b9de:	dc38      	bgt.n	810ba52 <_strtod_l+0x45a>
 810b9e0:	9b08      	ldr	r3, [sp, #32]
 810b9e2:	2b00      	cmp	r3, #0
 810b9e4:	f43f ae4a 	beq.w	810b67c <_strtod_l+0x84>
 810b9e8:	dd24      	ble.n	810ba34 <_strtod_l+0x43c>
 810b9ea:	2b16      	cmp	r3, #22
 810b9ec:	dc0b      	bgt.n	810ba06 <_strtod_l+0x40e>
 810b9ee:	4d6b      	ldr	r5, [pc, #428]	; (810bb9c <_strtod_l+0x5a4>)
 810b9f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 810b9f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 810b9f8:	4652      	mov	r2, sl
 810b9fa:	465b      	mov	r3, fp
 810b9fc:	f7f4 fe94 	bl	8100728 <__aeabi_dmul>
 810ba00:	4682      	mov	sl, r0
 810ba02:	468b      	mov	fp, r1
 810ba04:	e63a      	b.n	810b67c <_strtod_l+0x84>
 810ba06:	9a08      	ldr	r2, [sp, #32]
 810ba08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810ba0c:	4293      	cmp	r3, r2
 810ba0e:	db20      	blt.n	810ba52 <_strtod_l+0x45a>
 810ba10:	4c62      	ldr	r4, [pc, #392]	; (810bb9c <_strtod_l+0x5a4>)
 810ba12:	f1c5 050f 	rsb	r5, r5, #15
 810ba16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810ba1a:	4652      	mov	r2, sl
 810ba1c:	465b      	mov	r3, fp
 810ba1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ba22:	f7f4 fe81 	bl	8100728 <__aeabi_dmul>
 810ba26:	9b08      	ldr	r3, [sp, #32]
 810ba28:	1b5d      	subs	r5, r3, r5
 810ba2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810ba2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 810ba32:	e7e3      	b.n	810b9fc <_strtod_l+0x404>
 810ba34:	9b08      	ldr	r3, [sp, #32]
 810ba36:	3316      	adds	r3, #22
 810ba38:	db0b      	blt.n	810ba52 <_strtod_l+0x45a>
 810ba3a:	9b07      	ldr	r3, [sp, #28]
 810ba3c:	4a57      	ldr	r2, [pc, #348]	; (810bb9c <_strtod_l+0x5a4>)
 810ba3e:	1b9e      	subs	r6, r3, r6
 810ba40:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810ba44:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ba48:	4650      	mov	r0, sl
 810ba4a:	4659      	mov	r1, fp
 810ba4c:	f7f4 ff96 	bl	810097c <__aeabi_ddiv>
 810ba50:	e7d6      	b.n	810ba00 <_strtod_l+0x408>
 810ba52:	9b08      	ldr	r3, [sp, #32]
 810ba54:	eba5 0808 	sub.w	r8, r5, r8
 810ba58:	4498      	add	r8, r3
 810ba5a:	f1b8 0f00 	cmp.w	r8, #0
 810ba5e:	dd71      	ble.n	810bb44 <_strtod_l+0x54c>
 810ba60:	f018 030f 	ands.w	r3, r8, #15
 810ba64:	d00a      	beq.n	810ba7c <_strtod_l+0x484>
 810ba66:	494d      	ldr	r1, [pc, #308]	; (810bb9c <_strtod_l+0x5a4>)
 810ba68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810ba6c:	4652      	mov	r2, sl
 810ba6e:	465b      	mov	r3, fp
 810ba70:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ba74:	f7f4 fe58 	bl	8100728 <__aeabi_dmul>
 810ba78:	4682      	mov	sl, r0
 810ba7a:	468b      	mov	fp, r1
 810ba7c:	f038 080f 	bics.w	r8, r8, #15
 810ba80:	d04d      	beq.n	810bb1e <_strtod_l+0x526>
 810ba82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810ba86:	dd22      	ble.n	810bace <_strtod_l+0x4d6>
 810ba88:	2500      	movs	r5, #0
 810ba8a:	462e      	mov	r6, r5
 810ba8c:	9509      	str	r5, [sp, #36]	; 0x24
 810ba8e:	9507      	str	r5, [sp, #28]
 810ba90:	2322      	movs	r3, #34	; 0x22
 810ba92:	f8df b110 	ldr.w	fp, [pc, #272]	; 810bba4 <_strtod_l+0x5ac>
 810ba96:	6023      	str	r3, [r4, #0]
 810ba98:	f04f 0a00 	mov.w	sl, #0
 810ba9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ba9e:	2b00      	cmp	r3, #0
 810baa0:	f43f adec 	beq.w	810b67c <_strtod_l+0x84>
 810baa4:	991e      	ldr	r1, [sp, #120]	; 0x78
 810baa6:	4620      	mov	r0, r4
 810baa8:	f002 f984 	bl	810ddb4 <_Bfree>
 810baac:	9907      	ldr	r1, [sp, #28]
 810baae:	4620      	mov	r0, r4
 810bab0:	f002 f980 	bl	810ddb4 <_Bfree>
 810bab4:	4631      	mov	r1, r6
 810bab6:	4620      	mov	r0, r4
 810bab8:	f002 f97c 	bl	810ddb4 <_Bfree>
 810babc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810babe:	4620      	mov	r0, r4
 810bac0:	f002 f978 	bl	810ddb4 <_Bfree>
 810bac4:	4629      	mov	r1, r5
 810bac6:	4620      	mov	r0, r4
 810bac8:	f002 f974 	bl	810ddb4 <_Bfree>
 810bacc:	e5d6      	b.n	810b67c <_strtod_l+0x84>
 810bace:	2300      	movs	r3, #0
 810bad0:	ea4f 1828 	mov.w	r8, r8, asr #4
 810bad4:	4650      	mov	r0, sl
 810bad6:	4659      	mov	r1, fp
 810bad8:	4699      	mov	r9, r3
 810bada:	f1b8 0f01 	cmp.w	r8, #1
 810bade:	dc21      	bgt.n	810bb24 <_strtod_l+0x52c>
 810bae0:	b10b      	cbz	r3, 810bae6 <_strtod_l+0x4ee>
 810bae2:	4682      	mov	sl, r0
 810bae4:	468b      	mov	fp, r1
 810bae6:	4b2e      	ldr	r3, [pc, #184]	; (810bba0 <_strtod_l+0x5a8>)
 810bae8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810baec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810baf0:	4652      	mov	r2, sl
 810baf2:	465b      	mov	r3, fp
 810baf4:	e9d9 0100 	ldrd	r0, r1, [r9]
 810baf8:	f7f4 fe16 	bl	8100728 <__aeabi_dmul>
 810bafc:	4b29      	ldr	r3, [pc, #164]	; (810bba4 <_strtod_l+0x5ac>)
 810bafe:	460a      	mov	r2, r1
 810bb00:	400b      	ands	r3, r1
 810bb02:	4929      	ldr	r1, [pc, #164]	; (810bba8 <_strtod_l+0x5b0>)
 810bb04:	428b      	cmp	r3, r1
 810bb06:	4682      	mov	sl, r0
 810bb08:	d8be      	bhi.n	810ba88 <_strtod_l+0x490>
 810bb0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810bb0e:	428b      	cmp	r3, r1
 810bb10:	bf86      	itte	hi
 810bb12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 810bbac <_strtod_l+0x5b4>
 810bb16:	f04f 3aff 	movhi.w	sl, #4294967295
 810bb1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810bb1e:	2300      	movs	r3, #0
 810bb20:	9304      	str	r3, [sp, #16]
 810bb22:	e081      	b.n	810bc28 <_strtod_l+0x630>
 810bb24:	f018 0f01 	tst.w	r8, #1
 810bb28:	d007      	beq.n	810bb3a <_strtod_l+0x542>
 810bb2a:	4b1d      	ldr	r3, [pc, #116]	; (810bba0 <_strtod_l+0x5a8>)
 810bb2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 810bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bb34:	f7f4 fdf8 	bl	8100728 <__aeabi_dmul>
 810bb38:	2301      	movs	r3, #1
 810bb3a:	f109 0901 	add.w	r9, r9, #1
 810bb3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 810bb42:	e7ca      	b.n	810bada <_strtod_l+0x4e2>
 810bb44:	d0eb      	beq.n	810bb1e <_strtod_l+0x526>
 810bb46:	f1c8 0800 	rsb	r8, r8, #0
 810bb4a:	f018 020f 	ands.w	r2, r8, #15
 810bb4e:	d00a      	beq.n	810bb66 <_strtod_l+0x56e>
 810bb50:	4b12      	ldr	r3, [pc, #72]	; (810bb9c <_strtod_l+0x5a4>)
 810bb52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bb56:	4650      	mov	r0, sl
 810bb58:	4659      	mov	r1, fp
 810bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bb5e:	f7f4 ff0d 	bl	810097c <__aeabi_ddiv>
 810bb62:	4682      	mov	sl, r0
 810bb64:	468b      	mov	fp, r1
 810bb66:	ea5f 1828 	movs.w	r8, r8, asr #4
 810bb6a:	d0d8      	beq.n	810bb1e <_strtod_l+0x526>
 810bb6c:	f1b8 0f1f 	cmp.w	r8, #31
 810bb70:	dd1e      	ble.n	810bbb0 <_strtod_l+0x5b8>
 810bb72:	2500      	movs	r5, #0
 810bb74:	462e      	mov	r6, r5
 810bb76:	9509      	str	r5, [sp, #36]	; 0x24
 810bb78:	9507      	str	r5, [sp, #28]
 810bb7a:	2322      	movs	r3, #34	; 0x22
 810bb7c:	f04f 0a00 	mov.w	sl, #0
 810bb80:	f04f 0b00 	mov.w	fp, #0
 810bb84:	6023      	str	r3, [r4, #0]
 810bb86:	e789      	b.n	810ba9c <_strtod_l+0x4a4>
 810bb88:	0810ef26 	.word	0x0810ef26
 810bb8c:	0810ef68 	.word	0x0810ef68
 810bb90:	0810ef1e 	.word	0x0810ef1e
 810bb94:	0810f0ac 	.word	0x0810f0ac
 810bb98:	0810ef03 	.word	0x0810ef03
 810bb9c:	0810f2a8 	.word	0x0810f2a8
 810bba0:	0810f280 	.word	0x0810f280
 810bba4:	7ff00000 	.word	0x7ff00000
 810bba8:	7ca00000 	.word	0x7ca00000
 810bbac:	7fefffff 	.word	0x7fefffff
 810bbb0:	f018 0310 	ands.w	r3, r8, #16
 810bbb4:	bf18      	it	ne
 810bbb6:	236a      	movne	r3, #106	; 0x6a
 810bbb8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 810bf70 <_strtod_l+0x978>
 810bbbc:	9304      	str	r3, [sp, #16]
 810bbbe:	4650      	mov	r0, sl
 810bbc0:	4659      	mov	r1, fp
 810bbc2:	2300      	movs	r3, #0
 810bbc4:	f018 0f01 	tst.w	r8, #1
 810bbc8:	d004      	beq.n	810bbd4 <_strtod_l+0x5dc>
 810bbca:	e9d9 2300 	ldrd	r2, r3, [r9]
 810bbce:	f7f4 fdab 	bl	8100728 <__aeabi_dmul>
 810bbd2:	2301      	movs	r3, #1
 810bbd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 810bbd8:	f109 0908 	add.w	r9, r9, #8
 810bbdc:	d1f2      	bne.n	810bbc4 <_strtod_l+0x5cc>
 810bbde:	b10b      	cbz	r3, 810bbe4 <_strtod_l+0x5ec>
 810bbe0:	4682      	mov	sl, r0
 810bbe2:	468b      	mov	fp, r1
 810bbe4:	9b04      	ldr	r3, [sp, #16]
 810bbe6:	b1bb      	cbz	r3, 810bc18 <_strtod_l+0x620>
 810bbe8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 810bbec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810bbf0:	2b00      	cmp	r3, #0
 810bbf2:	4659      	mov	r1, fp
 810bbf4:	dd10      	ble.n	810bc18 <_strtod_l+0x620>
 810bbf6:	2b1f      	cmp	r3, #31
 810bbf8:	f340 8128 	ble.w	810be4c <_strtod_l+0x854>
 810bbfc:	2b34      	cmp	r3, #52	; 0x34
 810bbfe:	bfde      	ittt	le
 810bc00:	3b20      	suble	r3, #32
 810bc02:	f04f 32ff 	movle.w	r2, #4294967295
 810bc06:	fa02 f303 	lslle.w	r3, r2, r3
 810bc0a:	f04f 0a00 	mov.w	sl, #0
 810bc0e:	bfcc      	ite	gt
 810bc10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810bc14:	ea03 0b01 	andle.w	fp, r3, r1
 810bc18:	2200      	movs	r2, #0
 810bc1a:	2300      	movs	r3, #0
 810bc1c:	4650      	mov	r0, sl
 810bc1e:	4659      	mov	r1, fp
 810bc20:	f7f4 ffea 	bl	8100bf8 <__aeabi_dcmpeq>
 810bc24:	2800      	cmp	r0, #0
 810bc26:	d1a4      	bne.n	810bb72 <_strtod_l+0x57a>
 810bc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bc2a:	9300      	str	r3, [sp, #0]
 810bc2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 810bc2e:	462b      	mov	r3, r5
 810bc30:	463a      	mov	r2, r7
 810bc32:	4620      	mov	r0, r4
 810bc34:	f002 f92a 	bl	810de8c <__s2b>
 810bc38:	9009      	str	r0, [sp, #36]	; 0x24
 810bc3a:	2800      	cmp	r0, #0
 810bc3c:	f43f af24 	beq.w	810ba88 <_strtod_l+0x490>
 810bc40:	9b07      	ldr	r3, [sp, #28]
 810bc42:	1b9e      	subs	r6, r3, r6
 810bc44:	9b08      	ldr	r3, [sp, #32]
 810bc46:	2b00      	cmp	r3, #0
 810bc48:	bfb4      	ite	lt
 810bc4a:	4633      	movlt	r3, r6
 810bc4c:	2300      	movge	r3, #0
 810bc4e:	9310      	str	r3, [sp, #64]	; 0x40
 810bc50:	9b08      	ldr	r3, [sp, #32]
 810bc52:	2500      	movs	r5, #0
 810bc54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810bc58:	9318      	str	r3, [sp, #96]	; 0x60
 810bc5a:	462e      	mov	r6, r5
 810bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bc5e:	4620      	mov	r0, r4
 810bc60:	6859      	ldr	r1, [r3, #4]
 810bc62:	f002 f867 	bl	810dd34 <_Balloc>
 810bc66:	9007      	str	r0, [sp, #28]
 810bc68:	2800      	cmp	r0, #0
 810bc6a:	f43f af11 	beq.w	810ba90 <_strtod_l+0x498>
 810bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bc70:	691a      	ldr	r2, [r3, #16]
 810bc72:	3202      	adds	r2, #2
 810bc74:	f103 010c 	add.w	r1, r3, #12
 810bc78:	0092      	lsls	r2, r2, #2
 810bc7a:	300c      	adds	r0, #12
 810bc7c:	f7fe fbae 	bl	810a3dc <memcpy>
 810bc80:	ec4b ab10 	vmov	d0, sl, fp
 810bc84:	aa20      	add	r2, sp, #128	; 0x80
 810bc86:	a91f      	add	r1, sp, #124	; 0x7c
 810bc88:	4620      	mov	r0, r4
 810bc8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 810bc8e:	f002 fc39 	bl	810e504 <__d2b>
 810bc92:	901e      	str	r0, [sp, #120]	; 0x78
 810bc94:	2800      	cmp	r0, #0
 810bc96:	f43f aefb 	beq.w	810ba90 <_strtod_l+0x498>
 810bc9a:	2101      	movs	r1, #1
 810bc9c:	4620      	mov	r0, r4
 810bc9e:	f002 f98f 	bl	810dfc0 <__i2b>
 810bca2:	4606      	mov	r6, r0
 810bca4:	2800      	cmp	r0, #0
 810bca6:	f43f aef3 	beq.w	810ba90 <_strtod_l+0x498>
 810bcaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810bcac:	9904      	ldr	r1, [sp, #16]
 810bcae:	2b00      	cmp	r3, #0
 810bcb0:	bfab      	itete	ge
 810bcb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 810bcb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 810bcb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 810bcb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 810bcbc:	bfac      	ite	ge
 810bcbe:	eb03 0902 	addge.w	r9, r3, r2
 810bcc2:	1ad7      	sublt	r7, r2, r3
 810bcc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810bcc6:	eba3 0801 	sub.w	r8, r3, r1
 810bcca:	4490      	add	r8, r2
 810bccc:	4ba3      	ldr	r3, [pc, #652]	; (810bf5c <_strtod_l+0x964>)
 810bcce:	f108 38ff 	add.w	r8, r8, #4294967295
 810bcd2:	4598      	cmp	r8, r3
 810bcd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810bcd8:	f280 80cc 	bge.w	810be74 <_strtod_l+0x87c>
 810bcdc:	eba3 0308 	sub.w	r3, r3, r8
 810bce0:	2b1f      	cmp	r3, #31
 810bce2:	eba2 0203 	sub.w	r2, r2, r3
 810bce6:	f04f 0101 	mov.w	r1, #1
 810bcea:	f300 80b6 	bgt.w	810be5a <_strtod_l+0x862>
 810bcee:	fa01 f303 	lsl.w	r3, r1, r3
 810bcf2:	9311      	str	r3, [sp, #68]	; 0x44
 810bcf4:	2300      	movs	r3, #0
 810bcf6:	930c      	str	r3, [sp, #48]	; 0x30
 810bcf8:	eb09 0802 	add.w	r8, r9, r2
 810bcfc:	9b04      	ldr	r3, [sp, #16]
 810bcfe:	45c1      	cmp	r9, r8
 810bd00:	4417      	add	r7, r2
 810bd02:	441f      	add	r7, r3
 810bd04:	464b      	mov	r3, r9
 810bd06:	bfa8      	it	ge
 810bd08:	4643      	movge	r3, r8
 810bd0a:	42bb      	cmp	r3, r7
 810bd0c:	bfa8      	it	ge
 810bd0e:	463b      	movge	r3, r7
 810bd10:	2b00      	cmp	r3, #0
 810bd12:	bfc2      	ittt	gt
 810bd14:	eba8 0803 	subgt.w	r8, r8, r3
 810bd18:	1aff      	subgt	r7, r7, r3
 810bd1a:	eba9 0903 	subgt.w	r9, r9, r3
 810bd1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bd20:	2b00      	cmp	r3, #0
 810bd22:	dd17      	ble.n	810bd54 <_strtod_l+0x75c>
 810bd24:	4631      	mov	r1, r6
 810bd26:	461a      	mov	r2, r3
 810bd28:	4620      	mov	r0, r4
 810bd2a:	f002 fa05 	bl	810e138 <__pow5mult>
 810bd2e:	4606      	mov	r6, r0
 810bd30:	2800      	cmp	r0, #0
 810bd32:	f43f aead 	beq.w	810ba90 <_strtod_l+0x498>
 810bd36:	4601      	mov	r1, r0
 810bd38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810bd3a:	4620      	mov	r0, r4
 810bd3c:	f002 f956 	bl	810dfec <__multiply>
 810bd40:	900f      	str	r0, [sp, #60]	; 0x3c
 810bd42:	2800      	cmp	r0, #0
 810bd44:	f43f aea4 	beq.w	810ba90 <_strtod_l+0x498>
 810bd48:	991e      	ldr	r1, [sp, #120]	; 0x78
 810bd4a:	4620      	mov	r0, r4
 810bd4c:	f002 f832 	bl	810ddb4 <_Bfree>
 810bd50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bd52:	931e      	str	r3, [sp, #120]	; 0x78
 810bd54:	f1b8 0f00 	cmp.w	r8, #0
 810bd58:	f300 8091 	bgt.w	810be7e <_strtod_l+0x886>
 810bd5c:	9b08      	ldr	r3, [sp, #32]
 810bd5e:	2b00      	cmp	r3, #0
 810bd60:	dd08      	ble.n	810bd74 <_strtod_l+0x77c>
 810bd62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810bd64:	9907      	ldr	r1, [sp, #28]
 810bd66:	4620      	mov	r0, r4
 810bd68:	f002 f9e6 	bl	810e138 <__pow5mult>
 810bd6c:	9007      	str	r0, [sp, #28]
 810bd6e:	2800      	cmp	r0, #0
 810bd70:	f43f ae8e 	beq.w	810ba90 <_strtod_l+0x498>
 810bd74:	2f00      	cmp	r7, #0
 810bd76:	dd08      	ble.n	810bd8a <_strtod_l+0x792>
 810bd78:	9907      	ldr	r1, [sp, #28]
 810bd7a:	463a      	mov	r2, r7
 810bd7c:	4620      	mov	r0, r4
 810bd7e:	f002 fa35 	bl	810e1ec <__lshift>
 810bd82:	9007      	str	r0, [sp, #28]
 810bd84:	2800      	cmp	r0, #0
 810bd86:	f43f ae83 	beq.w	810ba90 <_strtod_l+0x498>
 810bd8a:	f1b9 0f00 	cmp.w	r9, #0
 810bd8e:	dd08      	ble.n	810bda2 <_strtod_l+0x7aa>
 810bd90:	4631      	mov	r1, r6
 810bd92:	464a      	mov	r2, r9
 810bd94:	4620      	mov	r0, r4
 810bd96:	f002 fa29 	bl	810e1ec <__lshift>
 810bd9a:	4606      	mov	r6, r0
 810bd9c:	2800      	cmp	r0, #0
 810bd9e:	f43f ae77 	beq.w	810ba90 <_strtod_l+0x498>
 810bda2:	9a07      	ldr	r2, [sp, #28]
 810bda4:	991e      	ldr	r1, [sp, #120]	; 0x78
 810bda6:	4620      	mov	r0, r4
 810bda8:	f002 faa8 	bl	810e2fc <__mdiff>
 810bdac:	4605      	mov	r5, r0
 810bdae:	2800      	cmp	r0, #0
 810bdb0:	f43f ae6e 	beq.w	810ba90 <_strtod_l+0x498>
 810bdb4:	68c3      	ldr	r3, [r0, #12]
 810bdb6:	930f      	str	r3, [sp, #60]	; 0x3c
 810bdb8:	2300      	movs	r3, #0
 810bdba:	60c3      	str	r3, [r0, #12]
 810bdbc:	4631      	mov	r1, r6
 810bdbe:	f002 fa81 	bl	810e2c4 <__mcmp>
 810bdc2:	2800      	cmp	r0, #0
 810bdc4:	da65      	bge.n	810be92 <_strtod_l+0x89a>
 810bdc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bdc8:	ea53 030a 	orrs.w	r3, r3, sl
 810bdcc:	f040 8087 	bne.w	810bede <_strtod_l+0x8e6>
 810bdd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810bdd4:	2b00      	cmp	r3, #0
 810bdd6:	f040 8082 	bne.w	810bede <_strtod_l+0x8e6>
 810bdda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810bdde:	0d1b      	lsrs	r3, r3, #20
 810bde0:	051b      	lsls	r3, r3, #20
 810bde2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810bde6:	d97a      	bls.n	810bede <_strtod_l+0x8e6>
 810bde8:	696b      	ldr	r3, [r5, #20]
 810bdea:	b913      	cbnz	r3, 810bdf2 <_strtod_l+0x7fa>
 810bdec:	692b      	ldr	r3, [r5, #16]
 810bdee:	2b01      	cmp	r3, #1
 810bdf0:	dd75      	ble.n	810bede <_strtod_l+0x8e6>
 810bdf2:	4629      	mov	r1, r5
 810bdf4:	2201      	movs	r2, #1
 810bdf6:	4620      	mov	r0, r4
 810bdf8:	f002 f9f8 	bl	810e1ec <__lshift>
 810bdfc:	4631      	mov	r1, r6
 810bdfe:	4605      	mov	r5, r0
 810be00:	f002 fa60 	bl	810e2c4 <__mcmp>
 810be04:	2800      	cmp	r0, #0
 810be06:	dd6a      	ble.n	810bede <_strtod_l+0x8e6>
 810be08:	9904      	ldr	r1, [sp, #16]
 810be0a:	4a55      	ldr	r2, [pc, #340]	; (810bf60 <_strtod_l+0x968>)
 810be0c:	465b      	mov	r3, fp
 810be0e:	2900      	cmp	r1, #0
 810be10:	f000 8085 	beq.w	810bf1e <_strtod_l+0x926>
 810be14:	ea02 010b 	and.w	r1, r2, fp
 810be18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810be1c:	dc7f      	bgt.n	810bf1e <_strtod_l+0x926>
 810be1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810be22:	f77f aeaa 	ble.w	810bb7a <_strtod_l+0x582>
 810be26:	4a4f      	ldr	r2, [pc, #316]	; (810bf64 <_strtod_l+0x96c>)
 810be28:	2300      	movs	r3, #0
 810be2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 810be2e:	4650      	mov	r0, sl
 810be30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 810be34:	4659      	mov	r1, fp
 810be36:	f7f4 fc77 	bl	8100728 <__aeabi_dmul>
 810be3a:	460b      	mov	r3, r1
 810be3c:	4303      	orrs	r3, r0
 810be3e:	bf08      	it	eq
 810be40:	2322      	moveq	r3, #34	; 0x22
 810be42:	4682      	mov	sl, r0
 810be44:	468b      	mov	fp, r1
 810be46:	bf08      	it	eq
 810be48:	6023      	streq	r3, [r4, #0]
 810be4a:	e62b      	b.n	810baa4 <_strtod_l+0x4ac>
 810be4c:	f04f 32ff 	mov.w	r2, #4294967295
 810be50:	fa02 f303 	lsl.w	r3, r2, r3
 810be54:	ea03 0a0a 	and.w	sl, r3, sl
 810be58:	e6de      	b.n	810bc18 <_strtod_l+0x620>
 810be5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810be5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810be62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810be66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810be6a:	fa01 f308 	lsl.w	r3, r1, r8
 810be6e:	930c      	str	r3, [sp, #48]	; 0x30
 810be70:	9111      	str	r1, [sp, #68]	; 0x44
 810be72:	e741      	b.n	810bcf8 <_strtod_l+0x700>
 810be74:	2300      	movs	r3, #0
 810be76:	930c      	str	r3, [sp, #48]	; 0x30
 810be78:	2301      	movs	r3, #1
 810be7a:	9311      	str	r3, [sp, #68]	; 0x44
 810be7c:	e73c      	b.n	810bcf8 <_strtod_l+0x700>
 810be7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 810be80:	4642      	mov	r2, r8
 810be82:	4620      	mov	r0, r4
 810be84:	f002 f9b2 	bl	810e1ec <__lshift>
 810be88:	901e      	str	r0, [sp, #120]	; 0x78
 810be8a:	2800      	cmp	r0, #0
 810be8c:	f47f af66 	bne.w	810bd5c <_strtod_l+0x764>
 810be90:	e5fe      	b.n	810ba90 <_strtod_l+0x498>
 810be92:	465f      	mov	r7, fp
 810be94:	d16e      	bne.n	810bf74 <_strtod_l+0x97c>
 810be96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810be98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810be9c:	b342      	cbz	r2, 810bef0 <_strtod_l+0x8f8>
 810be9e:	4a32      	ldr	r2, [pc, #200]	; (810bf68 <_strtod_l+0x970>)
 810bea0:	4293      	cmp	r3, r2
 810bea2:	d128      	bne.n	810bef6 <_strtod_l+0x8fe>
 810bea4:	9b04      	ldr	r3, [sp, #16]
 810bea6:	4650      	mov	r0, sl
 810bea8:	b1eb      	cbz	r3, 810bee6 <_strtod_l+0x8ee>
 810beaa:	4a2d      	ldr	r2, [pc, #180]	; (810bf60 <_strtod_l+0x968>)
 810beac:	403a      	ands	r2, r7
 810beae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 810beb2:	f04f 31ff 	mov.w	r1, #4294967295
 810beb6:	d819      	bhi.n	810beec <_strtod_l+0x8f4>
 810beb8:	0d12      	lsrs	r2, r2, #20
 810beba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810bebe:	fa01 f303 	lsl.w	r3, r1, r3
 810bec2:	4298      	cmp	r0, r3
 810bec4:	d117      	bne.n	810bef6 <_strtod_l+0x8fe>
 810bec6:	4b29      	ldr	r3, [pc, #164]	; (810bf6c <_strtod_l+0x974>)
 810bec8:	429f      	cmp	r7, r3
 810beca:	d102      	bne.n	810bed2 <_strtod_l+0x8da>
 810becc:	3001      	adds	r0, #1
 810bece:	f43f addf 	beq.w	810ba90 <_strtod_l+0x498>
 810bed2:	4b23      	ldr	r3, [pc, #140]	; (810bf60 <_strtod_l+0x968>)
 810bed4:	403b      	ands	r3, r7
 810bed6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810beda:	f04f 0a00 	mov.w	sl, #0
 810bede:	9b04      	ldr	r3, [sp, #16]
 810bee0:	2b00      	cmp	r3, #0
 810bee2:	d1a0      	bne.n	810be26 <_strtod_l+0x82e>
 810bee4:	e5de      	b.n	810baa4 <_strtod_l+0x4ac>
 810bee6:	f04f 33ff 	mov.w	r3, #4294967295
 810beea:	e7ea      	b.n	810bec2 <_strtod_l+0x8ca>
 810beec:	460b      	mov	r3, r1
 810beee:	e7e8      	b.n	810bec2 <_strtod_l+0x8ca>
 810bef0:	ea53 030a 	orrs.w	r3, r3, sl
 810bef4:	d088      	beq.n	810be08 <_strtod_l+0x810>
 810bef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bef8:	b1db      	cbz	r3, 810bf32 <_strtod_l+0x93a>
 810befa:	423b      	tst	r3, r7
 810befc:	d0ef      	beq.n	810bede <_strtod_l+0x8e6>
 810befe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bf00:	9a04      	ldr	r2, [sp, #16]
 810bf02:	4650      	mov	r0, sl
 810bf04:	4659      	mov	r1, fp
 810bf06:	b1c3      	cbz	r3, 810bf3a <_strtod_l+0x942>
 810bf08:	f7ff fb57 	bl	810b5ba <sulp>
 810bf0c:	4602      	mov	r2, r0
 810bf0e:	460b      	mov	r3, r1
 810bf10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810bf14:	f7f4 fa52 	bl	81003bc <__adddf3>
 810bf18:	4682      	mov	sl, r0
 810bf1a:	468b      	mov	fp, r1
 810bf1c:	e7df      	b.n	810bede <_strtod_l+0x8e6>
 810bf1e:	4013      	ands	r3, r2
 810bf20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810bf24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810bf28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810bf2c:	f04f 3aff 	mov.w	sl, #4294967295
 810bf30:	e7d5      	b.n	810bede <_strtod_l+0x8e6>
 810bf32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810bf34:	ea13 0f0a 	tst.w	r3, sl
 810bf38:	e7e0      	b.n	810befc <_strtod_l+0x904>
 810bf3a:	f7ff fb3e 	bl	810b5ba <sulp>
 810bf3e:	4602      	mov	r2, r0
 810bf40:	460b      	mov	r3, r1
 810bf42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810bf46:	f7f4 fa37 	bl	81003b8 <__aeabi_dsub>
 810bf4a:	2200      	movs	r2, #0
 810bf4c:	2300      	movs	r3, #0
 810bf4e:	4682      	mov	sl, r0
 810bf50:	468b      	mov	fp, r1
 810bf52:	f7f4 fe51 	bl	8100bf8 <__aeabi_dcmpeq>
 810bf56:	2800      	cmp	r0, #0
 810bf58:	d0c1      	beq.n	810bede <_strtod_l+0x8e6>
 810bf5a:	e60e      	b.n	810bb7a <_strtod_l+0x582>
 810bf5c:	fffffc02 	.word	0xfffffc02
 810bf60:	7ff00000 	.word	0x7ff00000
 810bf64:	39500000 	.word	0x39500000
 810bf68:	000fffff 	.word	0x000fffff
 810bf6c:	7fefffff 	.word	0x7fefffff
 810bf70:	0810ef80 	.word	0x0810ef80
 810bf74:	4631      	mov	r1, r6
 810bf76:	4628      	mov	r0, r5
 810bf78:	f002 fb20 	bl	810e5bc <__ratio>
 810bf7c:	ec59 8b10 	vmov	r8, r9, d0
 810bf80:	ee10 0a10 	vmov	r0, s0
 810bf84:	2200      	movs	r2, #0
 810bf86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810bf8a:	4649      	mov	r1, r9
 810bf8c:	f7f4 fe48 	bl	8100c20 <__aeabi_dcmple>
 810bf90:	2800      	cmp	r0, #0
 810bf92:	d07c      	beq.n	810c08e <_strtod_l+0xa96>
 810bf94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bf96:	2b00      	cmp	r3, #0
 810bf98:	d04c      	beq.n	810c034 <_strtod_l+0xa3c>
 810bf9a:	4b95      	ldr	r3, [pc, #596]	; (810c1f0 <_strtod_l+0xbf8>)
 810bf9c:	2200      	movs	r2, #0
 810bf9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810bfa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810c1f0 <_strtod_l+0xbf8>
 810bfa6:	f04f 0800 	mov.w	r8, #0
 810bfaa:	4b92      	ldr	r3, [pc, #584]	; (810c1f4 <_strtod_l+0xbfc>)
 810bfac:	403b      	ands	r3, r7
 810bfae:	9311      	str	r3, [sp, #68]	; 0x44
 810bfb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810bfb2:	4b91      	ldr	r3, [pc, #580]	; (810c1f8 <_strtod_l+0xc00>)
 810bfb4:	429a      	cmp	r2, r3
 810bfb6:	f040 80b2 	bne.w	810c11e <_strtod_l+0xb26>
 810bfba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810bfbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810bfc2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810bfc6:	ec4b ab10 	vmov	d0, sl, fp
 810bfca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 810bfce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810bfd2:	f002 fa1b 	bl	810e40c <__ulp>
 810bfd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810bfda:	ec53 2b10 	vmov	r2, r3, d0
 810bfde:	f7f4 fba3 	bl	8100728 <__aeabi_dmul>
 810bfe2:	4652      	mov	r2, sl
 810bfe4:	465b      	mov	r3, fp
 810bfe6:	f7f4 f9e9 	bl	81003bc <__adddf3>
 810bfea:	460b      	mov	r3, r1
 810bfec:	4981      	ldr	r1, [pc, #516]	; (810c1f4 <_strtod_l+0xbfc>)
 810bfee:	4a83      	ldr	r2, [pc, #524]	; (810c1fc <_strtod_l+0xc04>)
 810bff0:	4019      	ands	r1, r3
 810bff2:	4291      	cmp	r1, r2
 810bff4:	4682      	mov	sl, r0
 810bff6:	d95e      	bls.n	810c0b6 <_strtod_l+0xabe>
 810bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bffa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810bffe:	4293      	cmp	r3, r2
 810c000:	d103      	bne.n	810c00a <_strtod_l+0xa12>
 810c002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c004:	3301      	adds	r3, #1
 810c006:	f43f ad43 	beq.w	810ba90 <_strtod_l+0x498>
 810c00a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 810c208 <_strtod_l+0xc10>
 810c00e:	f04f 3aff 	mov.w	sl, #4294967295
 810c012:	991e      	ldr	r1, [sp, #120]	; 0x78
 810c014:	4620      	mov	r0, r4
 810c016:	f001 fecd 	bl	810ddb4 <_Bfree>
 810c01a:	9907      	ldr	r1, [sp, #28]
 810c01c:	4620      	mov	r0, r4
 810c01e:	f001 fec9 	bl	810ddb4 <_Bfree>
 810c022:	4631      	mov	r1, r6
 810c024:	4620      	mov	r0, r4
 810c026:	f001 fec5 	bl	810ddb4 <_Bfree>
 810c02a:	4629      	mov	r1, r5
 810c02c:	4620      	mov	r0, r4
 810c02e:	f001 fec1 	bl	810ddb4 <_Bfree>
 810c032:	e613      	b.n	810bc5c <_strtod_l+0x664>
 810c034:	f1ba 0f00 	cmp.w	sl, #0
 810c038:	d11b      	bne.n	810c072 <_strtod_l+0xa7a>
 810c03a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c03e:	b9f3      	cbnz	r3, 810c07e <_strtod_l+0xa86>
 810c040:	4b6b      	ldr	r3, [pc, #428]	; (810c1f0 <_strtod_l+0xbf8>)
 810c042:	2200      	movs	r2, #0
 810c044:	4640      	mov	r0, r8
 810c046:	4649      	mov	r1, r9
 810c048:	f7f4 fde0 	bl	8100c0c <__aeabi_dcmplt>
 810c04c:	b9d0      	cbnz	r0, 810c084 <_strtod_l+0xa8c>
 810c04e:	4640      	mov	r0, r8
 810c050:	4649      	mov	r1, r9
 810c052:	4b6b      	ldr	r3, [pc, #428]	; (810c200 <_strtod_l+0xc08>)
 810c054:	2200      	movs	r2, #0
 810c056:	f7f4 fb67 	bl	8100728 <__aeabi_dmul>
 810c05a:	4680      	mov	r8, r0
 810c05c:	4689      	mov	r9, r1
 810c05e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c062:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 810c066:	931b      	str	r3, [sp, #108]	; 0x6c
 810c068:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 810c06c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810c070:	e79b      	b.n	810bfaa <_strtod_l+0x9b2>
 810c072:	f1ba 0f01 	cmp.w	sl, #1
 810c076:	d102      	bne.n	810c07e <_strtod_l+0xa86>
 810c078:	2f00      	cmp	r7, #0
 810c07a:	f43f ad7e 	beq.w	810bb7a <_strtod_l+0x582>
 810c07e:	4b61      	ldr	r3, [pc, #388]	; (810c204 <_strtod_l+0xc0c>)
 810c080:	2200      	movs	r2, #0
 810c082:	e78c      	b.n	810bf9e <_strtod_l+0x9a6>
 810c084:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810c200 <_strtod_l+0xc08>
 810c088:	f04f 0800 	mov.w	r8, #0
 810c08c:	e7e7      	b.n	810c05e <_strtod_l+0xa66>
 810c08e:	4b5c      	ldr	r3, [pc, #368]	; (810c200 <_strtod_l+0xc08>)
 810c090:	4640      	mov	r0, r8
 810c092:	4649      	mov	r1, r9
 810c094:	2200      	movs	r2, #0
 810c096:	f7f4 fb47 	bl	8100728 <__aeabi_dmul>
 810c09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c09c:	4680      	mov	r8, r0
 810c09e:	4689      	mov	r9, r1
 810c0a0:	b933      	cbnz	r3, 810c0b0 <_strtod_l+0xab8>
 810c0a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c0a6:	9012      	str	r0, [sp, #72]	; 0x48
 810c0a8:	9313      	str	r3, [sp, #76]	; 0x4c
 810c0aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 810c0ae:	e7dd      	b.n	810c06c <_strtod_l+0xa74>
 810c0b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 810c0b4:	e7f9      	b.n	810c0aa <_strtod_l+0xab2>
 810c0b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810c0ba:	9b04      	ldr	r3, [sp, #16]
 810c0bc:	2b00      	cmp	r3, #0
 810c0be:	d1a8      	bne.n	810c012 <_strtod_l+0xa1a>
 810c0c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c0c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810c0c6:	0d1b      	lsrs	r3, r3, #20
 810c0c8:	051b      	lsls	r3, r3, #20
 810c0ca:	429a      	cmp	r2, r3
 810c0cc:	d1a1      	bne.n	810c012 <_strtod_l+0xa1a>
 810c0ce:	4640      	mov	r0, r8
 810c0d0:	4649      	mov	r1, r9
 810c0d2:	f7f4 fe71 	bl	8100db8 <__aeabi_d2lz>
 810c0d6:	f7f4 faf9 	bl	81006cc <__aeabi_l2d>
 810c0da:	4602      	mov	r2, r0
 810c0dc:	460b      	mov	r3, r1
 810c0de:	4640      	mov	r0, r8
 810c0e0:	4649      	mov	r1, r9
 810c0e2:	f7f4 f969 	bl	81003b8 <__aeabi_dsub>
 810c0e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c0e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c0ec:	ea43 030a 	orr.w	r3, r3, sl
 810c0f0:	4313      	orrs	r3, r2
 810c0f2:	4680      	mov	r8, r0
 810c0f4:	4689      	mov	r9, r1
 810c0f6:	d053      	beq.n	810c1a0 <_strtod_l+0xba8>
 810c0f8:	a335      	add	r3, pc, #212	; (adr r3, 810c1d0 <_strtod_l+0xbd8>)
 810c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c0fe:	f7f4 fd85 	bl	8100c0c <__aeabi_dcmplt>
 810c102:	2800      	cmp	r0, #0
 810c104:	f47f acce 	bne.w	810baa4 <_strtod_l+0x4ac>
 810c108:	a333      	add	r3, pc, #204	; (adr r3, 810c1d8 <_strtod_l+0xbe0>)
 810c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c10e:	4640      	mov	r0, r8
 810c110:	4649      	mov	r1, r9
 810c112:	f7f4 fd99 	bl	8100c48 <__aeabi_dcmpgt>
 810c116:	2800      	cmp	r0, #0
 810c118:	f43f af7b 	beq.w	810c012 <_strtod_l+0xa1a>
 810c11c:	e4c2      	b.n	810baa4 <_strtod_l+0x4ac>
 810c11e:	9b04      	ldr	r3, [sp, #16]
 810c120:	b333      	cbz	r3, 810c170 <_strtod_l+0xb78>
 810c122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810c124:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c128:	d822      	bhi.n	810c170 <_strtod_l+0xb78>
 810c12a:	a32d      	add	r3, pc, #180	; (adr r3, 810c1e0 <_strtod_l+0xbe8>)
 810c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c130:	4640      	mov	r0, r8
 810c132:	4649      	mov	r1, r9
 810c134:	f7f4 fd74 	bl	8100c20 <__aeabi_dcmple>
 810c138:	b1a0      	cbz	r0, 810c164 <_strtod_l+0xb6c>
 810c13a:	4649      	mov	r1, r9
 810c13c:	4640      	mov	r0, r8
 810c13e:	f7f4 fdcb 	bl	8100cd8 <__aeabi_d2uiz>
 810c142:	2801      	cmp	r0, #1
 810c144:	bf38      	it	cc
 810c146:	2001      	movcc	r0, #1
 810c148:	f7f4 fa74 	bl	8100634 <__aeabi_ui2d>
 810c14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c14e:	4680      	mov	r8, r0
 810c150:	4689      	mov	r9, r1
 810c152:	bb13      	cbnz	r3, 810c19a <_strtod_l+0xba2>
 810c154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c158:	9014      	str	r0, [sp, #80]	; 0x50
 810c15a:	9315      	str	r3, [sp, #84]	; 0x54
 810c15c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810c160:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810c164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c166:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810c168:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810c16c:	1a9b      	subs	r3, r3, r2
 810c16e:	930d      	str	r3, [sp, #52]	; 0x34
 810c170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810c174:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810c178:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810c17c:	f002 f946 	bl	810e40c <__ulp>
 810c180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810c184:	ec53 2b10 	vmov	r2, r3, d0
 810c188:	f7f4 face 	bl	8100728 <__aeabi_dmul>
 810c18c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810c190:	f7f4 f914 	bl	81003bc <__adddf3>
 810c194:	4682      	mov	sl, r0
 810c196:	468b      	mov	fp, r1
 810c198:	e78f      	b.n	810c0ba <_strtod_l+0xac2>
 810c19a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 810c19e:	e7dd      	b.n	810c15c <_strtod_l+0xb64>
 810c1a0:	a311      	add	r3, pc, #68	; (adr r3, 810c1e8 <_strtod_l+0xbf0>)
 810c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c1a6:	f7f4 fd31 	bl	8100c0c <__aeabi_dcmplt>
 810c1aa:	e7b4      	b.n	810c116 <_strtod_l+0xb1e>
 810c1ac:	2300      	movs	r3, #0
 810c1ae:	930e      	str	r3, [sp, #56]	; 0x38
 810c1b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810c1b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810c1b4:	6013      	str	r3, [r2, #0]
 810c1b6:	f7ff ba65 	b.w	810b684 <_strtod_l+0x8c>
 810c1ba:	2b65      	cmp	r3, #101	; 0x65
 810c1bc:	f43f ab5d 	beq.w	810b87a <_strtod_l+0x282>
 810c1c0:	2b45      	cmp	r3, #69	; 0x45
 810c1c2:	f43f ab5a 	beq.w	810b87a <_strtod_l+0x282>
 810c1c6:	2201      	movs	r2, #1
 810c1c8:	f7ff bb92 	b.w	810b8f0 <_strtod_l+0x2f8>
 810c1cc:	f3af 8000 	nop.w
 810c1d0:	94a03595 	.word	0x94a03595
 810c1d4:	3fdfffff 	.word	0x3fdfffff
 810c1d8:	35afe535 	.word	0x35afe535
 810c1dc:	3fe00000 	.word	0x3fe00000
 810c1e0:	ffc00000 	.word	0xffc00000
 810c1e4:	41dfffff 	.word	0x41dfffff
 810c1e8:	94a03595 	.word	0x94a03595
 810c1ec:	3fcfffff 	.word	0x3fcfffff
 810c1f0:	3ff00000 	.word	0x3ff00000
 810c1f4:	7ff00000 	.word	0x7ff00000
 810c1f8:	7fe00000 	.word	0x7fe00000
 810c1fc:	7c9fffff 	.word	0x7c9fffff
 810c200:	3fe00000 	.word	0x3fe00000
 810c204:	bff00000 	.word	0xbff00000
 810c208:	7fefffff 	.word	0x7fefffff

0810c20c <_strtod_r>:
 810c20c:	4b01      	ldr	r3, [pc, #4]	; (810c214 <_strtod_r+0x8>)
 810c20e:	f7ff b9f3 	b.w	810b5f8 <_strtod_l>
 810c212:	bf00      	nop
 810c214:	10000124 	.word	0x10000124

0810c218 <_strtol_l.isra.0>:
 810c218:	2b01      	cmp	r3, #1
 810c21a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c21e:	d001      	beq.n	810c224 <_strtol_l.isra.0+0xc>
 810c220:	2b24      	cmp	r3, #36	; 0x24
 810c222:	d906      	bls.n	810c232 <_strtol_l.isra.0+0x1a>
 810c224:	f7fe f88e 	bl	810a344 <__errno>
 810c228:	2316      	movs	r3, #22
 810c22a:	6003      	str	r3, [r0, #0]
 810c22c:	2000      	movs	r0, #0
 810c22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c232:	4f3a      	ldr	r7, [pc, #232]	; (810c31c <_strtol_l.isra.0+0x104>)
 810c234:	468e      	mov	lr, r1
 810c236:	4676      	mov	r6, lr
 810c238:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810c23c:	5de5      	ldrb	r5, [r4, r7]
 810c23e:	f015 0508 	ands.w	r5, r5, #8
 810c242:	d1f8      	bne.n	810c236 <_strtol_l.isra.0+0x1e>
 810c244:	2c2d      	cmp	r4, #45	; 0x2d
 810c246:	d134      	bne.n	810c2b2 <_strtol_l.isra.0+0x9a>
 810c248:	f89e 4000 	ldrb.w	r4, [lr]
 810c24c:	f04f 0801 	mov.w	r8, #1
 810c250:	f106 0e02 	add.w	lr, r6, #2
 810c254:	2b00      	cmp	r3, #0
 810c256:	d05c      	beq.n	810c312 <_strtol_l.isra.0+0xfa>
 810c258:	2b10      	cmp	r3, #16
 810c25a:	d10c      	bne.n	810c276 <_strtol_l.isra.0+0x5e>
 810c25c:	2c30      	cmp	r4, #48	; 0x30
 810c25e:	d10a      	bne.n	810c276 <_strtol_l.isra.0+0x5e>
 810c260:	f89e 4000 	ldrb.w	r4, [lr]
 810c264:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810c268:	2c58      	cmp	r4, #88	; 0x58
 810c26a:	d14d      	bne.n	810c308 <_strtol_l.isra.0+0xf0>
 810c26c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 810c270:	2310      	movs	r3, #16
 810c272:	f10e 0e02 	add.w	lr, lr, #2
 810c276:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 810c27a:	f10c 3cff 	add.w	ip, ip, #4294967295
 810c27e:	2600      	movs	r6, #0
 810c280:	fbbc f9f3 	udiv	r9, ip, r3
 810c284:	4635      	mov	r5, r6
 810c286:	fb03 ca19 	mls	sl, r3, r9, ip
 810c28a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 810c28e:	2f09      	cmp	r7, #9
 810c290:	d818      	bhi.n	810c2c4 <_strtol_l.isra.0+0xac>
 810c292:	463c      	mov	r4, r7
 810c294:	42a3      	cmp	r3, r4
 810c296:	dd24      	ble.n	810c2e2 <_strtol_l.isra.0+0xca>
 810c298:	2e00      	cmp	r6, #0
 810c29a:	db1f      	blt.n	810c2dc <_strtol_l.isra.0+0xc4>
 810c29c:	45a9      	cmp	r9, r5
 810c29e:	d31d      	bcc.n	810c2dc <_strtol_l.isra.0+0xc4>
 810c2a0:	d101      	bne.n	810c2a6 <_strtol_l.isra.0+0x8e>
 810c2a2:	45a2      	cmp	sl, r4
 810c2a4:	db1a      	blt.n	810c2dc <_strtol_l.isra.0+0xc4>
 810c2a6:	fb05 4503 	mla	r5, r5, r3, r4
 810c2aa:	2601      	movs	r6, #1
 810c2ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810c2b0:	e7eb      	b.n	810c28a <_strtol_l.isra.0+0x72>
 810c2b2:	2c2b      	cmp	r4, #43	; 0x2b
 810c2b4:	bf08      	it	eq
 810c2b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 810c2ba:	46a8      	mov	r8, r5
 810c2bc:	bf08      	it	eq
 810c2be:	f106 0e02 	addeq.w	lr, r6, #2
 810c2c2:	e7c7      	b.n	810c254 <_strtol_l.isra.0+0x3c>
 810c2c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 810c2c8:	2f19      	cmp	r7, #25
 810c2ca:	d801      	bhi.n	810c2d0 <_strtol_l.isra.0+0xb8>
 810c2cc:	3c37      	subs	r4, #55	; 0x37
 810c2ce:	e7e1      	b.n	810c294 <_strtol_l.isra.0+0x7c>
 810c2d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 810c2d4:	2f19      	cmp	r7, #25
 810c2d6:	d804      	bhi.n	810c2e2 <_strtol_l.isra.0+0xca>
 810c2d8:	3c57      	subs	r4, #87	; 0x57
 810c2da:	e7db      	b.n	810c294 <_strtol_l.isra.0+0x7c>
 810c2dc:	f04f 36ff 	mov.w	r6, #4294967295
 810c2e0:	e7e4      	b.n	810c2ac <_strtol_l.isra.0+0x94>
 810c2e2:	2e00      	cmp	r6, #0
 810c2e4:	da05      	bge.n	810c2f2 <_strtol_l.isra.0+0xda>
 810c2e6:	2322      	movs	r3, #34	; 0x22
 810c2e8:	6003      	str	r3, [r0, #0]
 810c2ea:	4665      	mov	r5, ip
 810c2ec:	b942      	cbnz	r2, 810c300 <_strtol_l.isra.0+0xe8>
 810c2ee:	4628      	mov	r0, r5
 810c2f0:	e79d      	b.n	810c22e <_strtol_l.isra.0+0x16>
 810c2f2:	f1b8 0f00 	cmp.w	r8, #0
 810c2f6:	d000      	beq.n	810c2fa <_strtol_l.isra.0+0xe2>
 810c2f8:	426d      	negs	r5, r5
 810c2fa:	2a00      	cmp	r2, #0
 810c2fc:	d0f7      	beq.n	810c2ee <_strtol_l.isra.0+0xd6>
 810c2fe:	b10e      	cbz	r6, 810c304 <_strtol_l.isra.0+0xec>
 810c300:	f10e 31ff 	add.w	r1, lr, #4294967295
 810c304:	6011      	str	r1, [r2, #0]
 810c306:	e7f2      	b.n	810c2ee <_strtol_l.isra.0+0xd6>
 810c308:	2430      	movs	r4, #48	; 0x30
 810c30a:	2b00      	cmp	r3, #0
 810c30c:	d1b3      	bne.n	810c276 <_strtol_l.isra.0+0x5e>
 810c30e:	2308      	movs	r3, #8
 810c310:	e7b1      	b.n	810c276 <_strtol_l.isra.0+0x5e>
 810c312:	2c30      	cmp	r4, #48	; 0x30
 810c314:	d0a4      	beq.n	810c260 <_strtol_l.isra.0+0x48>
 810c316:	230a      	movs	r3, #10
 810c318:	e7ad      	b.n	810c276 <_strtol_l.isra.0+0x5e>
 810c31a:	bf00      	nop
 810c31c:	0810efa9 	.word	0x0810efa9

0810c320 <_strtol_r>:
 810c320:	f7ff bf7a 	b.w	810c218 <_strtol_l.isra.0>

0810c324 <__swbuf_r>:
 810c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c326:	460e      	mov	r6, r1
 810c328:	4614      	mov	r4, r2
 810c32a:	4605      	mov	r5, r0
 810c32c:	b118      	cbz	r0, 810c336 <__swbuf_r+0x12>
 810c32e:	6983      	ldr	r3, [r0, #24]
 810c330:	b90b      	cbnz	r3, 810c336 <__swbuf_r+0x12>
 810c332:	f001 f84f 	bl	810d3d4 <__sinit>
 810c336:	4b21      	ldr	r3, [pc, #132]	; (810c3bc <__swbuf_r+0x98>)
 810c338:	429c      	cmp	r4, r3
 810c33a:	d12b      	bne.n	810c394 <__swbuf_r+0x70>
 810c33c:	686c      	ldr	r4, [r5, #4]
 810c33e:	69a3      	ldr	r3, [r4, #24]
 810c340:	60a3      	str	r3, [r4, #8]
 810c342:	89a3      	ldrh	r3, [r4, #12]
 810c344:	071a      	lsls	r2, r3, #28
 810c346:	d52f      	bpl.n	810c3a8 <__swbuf_r+0x84>
 810c348:	6923      	ldr	r3, [r4, #16]
 810c34a:	b36b      	cbz	r3, 810c3a8 <__swbuf_r+0x84>
 810c34c:	6923      	ldr	r3, [r4, #16]
 810c34e:	6820      	ldr	r0, [r4, #0]
 810c350:	1ac0      	subs	r0, r0, r3
 810c352:	6963      	ldr	r3, [r4, #20]
 810c354:	b2f6      	uxtb	r6, r6
 810c356:	4283      	cmp	r3, r0
 810c358:	4637      	mov	r7, r6
 810c35a:	dc04      	bgt.n	810c366 <__swbuf_r+0x42>
 810c35c:	4621      	mov	r1, r4
 810c35e:	4628      	mov	r0, r5
 810c360:	f000 ffa4 	bl	810d2ac <_fflush_r>
 810c364:	bb30      	cbnz	r0, 810c3b4 <__swbuf_r+0x90>
 810c366:	68a3      	ldr	r3, [r4, #8]
 810c368:	3b01      	subs	r3, #1
 810c36a:	60a3      	str	r3, [r4, #8]
 810c36c:	6823      	ldr	r3, [r4, #0]
 810c36e:	1c5a      	adds	r2, r3, #1
 810c370:	6022      	str	r2, [r4, #0]
 810c372:	701e      	strb	r6, [r3, #0]
 810c374:	6963      	ldr	r3, [r4, #20]
 810c376:	3001      	adds	r0, #1
 810c378:	4283      	cmp	r3, r0
 810c37a:	d004      	beq.n	810c386 <__swbuf_r+0x62>
 810c37c:	89a3      	ldrh	r3, [r4, #12]
 810c37e:	07db      	lsls	r3, r3, #31
 810c380:	d506      	bpl.n	810c390 <__swbuf_r+0x6c>
 810c382:	2e0a      	cmp	r6, #10
 810c384:	d104      	bne.n	810c390 <__swbuf_r+0x6c>
 810c386:	4621      	mov	r1, r4
 810c388:	4628      	mov	r0, r5
 810c38a:	f000 ff8f 	bl	810d2ac <_fflush_r>
 810c38e:	b988      	cbnz	r0, 810c3b4 <__swbuf_r+0x90>
 810c390:	4638      	mov	r0, r7
 810c392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c394:	4b0a      	ldr	r3, [pc, #40]	; (810c3c0 <__swbuf_r+0x9c>)
 810c396:	429c      	cmp	r4, r3
 810c398:	d101      	bne.n	810c39e <__swbuf_r+0x7a>
 810c39a:	68ac      	ldr	r4, [r5, #8]
 810c39c:	e7cf      	b.n	810c33e <__swbuf_r+0x1a>
 810c39e:	4b09      	ldr	r3, [pc, #36]	; (810c3c4 <__swbuf_r+0xa0>)
 810c3a0:	429c      	cmp	r4, r3
 810c3a2:	bf08      	it	eq
 810c3a4:	68ec      	ldreq	r4, [r5, #12]
 810c3a6:	e7ca      	b.n	810c33e <__swbuf_r+0x1a>
 810c3a8:	4621      	mov	r1, r4
 810c3aa:	4628      	mov	r0, r5
 810c3ac:	f000 f80c 	bl	810c3c8 <__swsetup_r>
 810c3b0:	2800      	cmp	r0, #0
 810c3b2:	d0cb      	beq.n	810c34c <__swbuf_r+0x28>
 810c3b4:	f04f 37ff 	mov.w	r7, #4294967295
 810c3b8:	e7ea      	b.n	810c390 <__swbuf_r+0x6c>
 810c3ba:	bf00      	nop
 810c3bc:	0810f160 	.word	0x0810f160
 810c3c0:	0810f180 	.word	0x0810f180
 810c3c4:	0810f140 	.word	0x0810f140

0810c3c8 <__swsetup_r>:
 810c3c8:	4b32      	ldr	r3, [pc, #200]	; (810c494 <__swsetup_r+0xcc>)
 810c3ca:	b570      	push	{r4, r5, r6, lr}
 810c3cc:	681d      	ldr	r5, [r3, #0]
 810c3ce:	4606      	mov	r6, r0
 810c3d0:	460c      	mov	r4, r1
 810c3d2:	b125      	cbz	r5, 810c3de <__swsetup_r+0x16>
 810c3d4:	69ab      	ldr	r3, [r5, #24]
 810c3d6:	b913      	cbnz	r3, 810c3de <__swsetup_r+0x16>
 810c3d8:	4628      	mov	r0, r5
 810c3da:	f000 fffb 	bl	810d3d4 <__sinit>
 810c3de:	4b2e      	ldr	r3, [pc, #184]	; (810c498 <__swsetup_r+0xd0>)
 810c3e0:	429c      	cmp	r4, r3
 810c3e2:	d10f      	bne.n	810c404 <__swsetup_r+0x3c>
 810c3e4:	686c      	ldr	r4, [r5, #4]
 810c3e6:	89a3      	ldrh	r3, [r4, #12]
 810c3e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810c3ec:	0719      	lsls	r1, r3, #28
 810c3ee:	d42c      	bmi.n	810c44a <__swsetup_r+0x82>
 810c3f0:	06dd      	lsls	r5, r3, #27
 810c3f2:	d411      	bmi.n	810c418 <__swsetup_r+0x50>
 810c3f4:	2309      	movs	r3, #9
 810c3f6:	6033      	str	r3, [r6, #0]
 810c3f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810c3fc:	81a3      	strh	r3, [r4, #12]
 810c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 810c402:	e03e      	b.n	810c482 <__swsetup_r+0xba>
 810c404:	4b25      	ldr	r3, [pc, #148]	; (810c49c <__swsetup_r+0xd4>)
 810c406:	429c      	cmp	r4, r3
 810c408:	d101      	bne.n	810c40e <__swsetup_r+0x46>
 810c40a:	68ac      	ldr	r4, [r5, #8]
 810c40c:	e7eb      	b.n	810c3e6 <__swsetup_r+0x1e>
 810c40e:	4b24      	ldr	r3, [pc, #144]	; (810c4a0 <__swsetup_r+0xd8>)
 810c410:	429c      	cmp	r4, r3
 810c412:	bf08      	it	eq
 810c414:	68ec      	ldreq	r4, [r5, #12]
 810c416:	e7e6      	b.n	810c3e6 <__swsetup_r+0x1e>
 810c418:	0758      	lsls	r0, r3, #29
 810c41a:	d512      	bpl.n	810c442 <__swsetup_r+0x7a>
 810c41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c41e:	b141      	cbz	r1, 810c432 <__swsetup_r+0x6a>
 810c420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c424:	4299      	cmp	r1, r3
 810c426:	d002      	beq.n	810c42e <__swsetup_r+0x66>
 810c428:	4630      	mov	r0, r6
 810c42a:	f7fd ffed 	bl	810a408 <_free_r>
 810c42e:	2300      	movs	r3, #0
 810c430:	6363      	str	r3, [r4, #52]	; 0x34
 810c432:	89a3      	ldrh	r3, [r4, #12]
 810c434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810c438:	81a3      	strh	r3, [r4, #12]
 810c43a:	2300      	movs	r3, #0
 810c43c:	6063      	str	r3, [r4, #4]
 810c43e:	6923      	ldr	r3, [r4, #16]
 810c440:	6023      	str	r3, [r4, #0]
 810c442:	89a3      	ldrh	r3, [r4, #12]
 810c444:	f043 0308 	orr.w	r3, r3, #8
 810c448:	81a3      	strh	r3, [r4, #12]
 810c44a:	6923      	ldr	r3, [r4, #16]
 810c44c:	b94b      	cbnz	r3, 810c462 <__swsetup_r+0x9a>
 810c44e:	89a3      	ldrh	r3, [r4, #12]
 810c450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810c454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810c458:	d003      	beq.n	810c462 <__swsetup_r+0x9a>
 810c45a:	4621      	mov	r1, r4
 810c45c:	4630      	mov	r0, r6
 810c45e:	f001 fbf1 	bl	810dc44 <__smakebuf_r>
 810c462:	89a0      	ldrh	r0, [r4, #12]
 810c464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810c468:	f010 0301 	ands.w	r3, r0, #1
 810c46c:	d00a      	beq.n	810c484 <__swsetup_r+0xbc>
 810c46e:	2300      	movs	r3, #0
 810c470:	60a3      	str	r3, [r4, #8]
 810c472:	6963      	ldr	r3, [r4, #20]
 810c474:	425b      	negs	r3, r3
 810c476:	61a3      	str	r3, [r4, #24]
 810c478:	6923      	ldr	r3, [r4, #16]
 810c47a:	b943      	cbnz	r3, 810c48e <__swsetup_r+0xc6>
 810c47c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810c480:	d1ba      	bne.n	810c3f8 <__swsetup_r+0x30>
 810c482:	bd70      	pop	{r4, r5, r6, pc}
 810c484:	0781      	lsls	r1, r0, #30
 810c486:	bf58      	it	pl
 810c488:	6963      	ldrpl	r3, [r4, #20]
 810c48a:	60a3      	str	r3, [r4, #8]
 810c48c:	e7f4      	b.n	810c478 <__swsetup_r+0xb0>
 810c48e:	2000      	movs	r0, #0
 810c490:	e7f7      	b.n	810c482 <__swsetup_r+0xba>
 810c492:	bf00      	nop
 810c494:	100000bc 	.word	0x100000bc
 810c498:	0810f160 	.word	0x0810f160
 810c49c:	0810f180 	.word	0x0810f180
 810c4a0:	0810f140 	.word	0x0810f140

0810c4a4 <abort>:
 810c4a4:	b508      	push	{r3, lr}
 810c4a6:	2006      	movs	r0, #6
 810c4a8:	f002 fab8 	bl	810ea1c <raise>
 810c4ac:	2001      	movs	r0, #1
 810c4ae:	f7f5 f8ef 	bl	8101690 <_exit>

0810c4b2 <quorem>:
 810c4b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c4b6:	6903      	ldr	r3, [r0, #16]
 810c4b8:	690c      	ldr	r4, [r1, #16]
 810c4ba:	42a3      	cmp	r3, r4
 810c4bc:	4607      	mov	r7, r0
 810c4be:	f2c0 8081 	blt.w	810c5c4 <quorem+0x112>
 810c4c2:	3c01      	subs	r4, #1
 810c4c4:	f101 0814 	add.w	r8, r1, #20
 810c4c8:	f100 0514 	add.w	r5, r0, #20
 810c4cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810c4d0:	9301      	str	r3, [sp, #4]
 810c4d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810c4d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810c4da:	3301      	adds	r3, #1
 810c4dc:	429a      	cmp	r2, r3
 810c4de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810c4e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810c4e6:	fbb2 f6f3 	udiv	r6, r2, r3
 810c4ea:	d331      	bcc.n	810c550 <quorem+0x9e>
 810c4ec:	f04f 0e00 	mov.w	lr, #0
 810c4f0:	4640      	mov	r0, r8
 810c4f2:	46ac      	mov	ip, r5
 810c4f4:	46f2      	mov	sl, lr
 810c4f6:	f850 2b04 	ldr.w	r2, [r0], #4
 810c4fa:	b293      	uxth	r3, r2
 810c4fc:	fb06 e303 	mla	r3, r6, r3, lr
 810c500:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810c504:	b29b      	uxth	r3, r3
 810c506:	ebaa 0303 	sub.w	r3, sl, r3
 810c50a:	0c12      	lsrs	r2, r2, #16
 810c50c:	f8dc a000 	ldr.w	sl, [ip]
 810c510:	fb06 e202 	mla	r2, r6, r2, lr
 810c514:	fa13 f38a 	uxtah	r3, r3, sl
 810c518:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810c51c:	fa1f fa82 	uxth.w	sl, r2
 810c520:	f8dc 2000 	ldr.w	r2, [ip]
 810c524:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 810c528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810c52c:	b29b      	uxth	r3, r3
 810c52e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c532:	4581      	cmp	r9, r0
 810c534:	f84c 3b04 	str.w	r3, [ip], #4
 810c538:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810c53c:	d2db      	bcs.n	810c4f6 <quorem+0x44>
 810c53e:	f855 300b 	ldr.w	r3, [r5, fp]
 810c542:	b92b      	cbnz	r3, 810c550 <quorem+0x9e>
 810c544:	9b01      	ldr	r3, [sp, #4]
 810c546:	3b04      	subs	r3, #4
 810c548:	429d      	cmp	r5, r3
 810c54a:	461a      	mov	r2, r3
 810c54c:	d32e      	bcc.n	810c5ac <quorem+0xfa>
 810c54e:	613c      	str	r4, [r7, #16]
 810c550:	4638      	mov	r0, r7
 810c552:	f001 feb7 	bl	810e2c4 <__mcmp>
 810c556:	2800      	cmp	r0, #0
 810c558:	db24      	blt.n	810c5a4 <quorem+0xf2>
 810c55a:	3601      	adds	r6, #1
 810c55c:	4628      	mov	r0, r5
 810c55e:	f04f 0c00 	mov.w	ip, #0
 810c562:	f858 2b04 	ldr.w	r2, [r8], #4
 810c566:	f8d0 e000 	ldr.w	lr, [r0]
 810c56a:	b293      	uxth	r3, r2
 810c56c:	ebac 0303 	sub.w	r3, ip, r3
 810c570:	0c12      	lsrs	r2, r2, #16
 810c572:	fa13 f38e 	uxtah	r3, r3, lr
 810c576:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810c57a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810c57e:	b29b      	uxth	r3, r3
 810c580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c584:	45c1      	cmp	r9, r8
 810c586:	f840 3b04 	str.w	r3, [r0], #4
 810c58a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810c58e:	d2e8      	bcs.n	810c562 <quorem+0xb0>
 810c590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810c594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810c598:	b922      	cbnz	r2, 810c5a4 <quorem+0xf2>
 810c59a:	3b04      	subs	r3, #4
 810c59c:	429d      	cmp	r5, r3
 810c59e:	461a      	mov	r2, r3
 810c5a0:	d30a      	bcc.n	810c5b8 <quorem+0x106>
 810c5a2:	613c      	str	r4, [r7, #16]
 810c5a4:	4630      	mov	r0, r6
 810c5a6:	b003      	add	sp, #12
 810c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c5ac:	6812      	ldr	r2, [r2, #0]
 810c5ae:	3b04      	subs	r3, #4
 810c5b0:	2a00      	cmp	r2, #0
 810c5b2:	d1cc      	bne.n	810c54e <quorem+0x9c>
 810c5b4:	3c01      	subs	r4, #1
 810c5b6:	e7c7      	b.n	810c548 <quorem+0x96>
 810c5b8:	6812      	ldr	r2, [r2, #0]
 810c5ba:	3b04      	subs	r3, #4
 810c5bc:	2a00      	cmp	r2, #0
 810c5be:	d1f0      	bne.n	810c5a2 <quorem+0xf0>
 810c5c0:	3c01      	subs	r4, #1
 810c5c2:	e7eb      	b.n	810c59c <quorem+0xea>
 810c5c4:	2000      	movs	r0, #0
 810c5c6:	e7ee      	b.n	810c5a6 <quorem+0xf4>

0810c5c8 <_dtoa_r>:
 810c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c5cc:	ed2d 8b02 	vpush	{d8}
 810c5d0:	ec57 6b10 	vmov	r6, r7, d0
 810c5d4:	b095      	sub	sp, #84	; 0x54
 810c5d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810c5d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810c5dc:	9105      	str	r1, [sp, #20]
 810c5de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 810c5e2:	4604      	mov	r4, r0
 810c5e4:	9209      	str	r2, [sp, #36]	; 0x24
 810c5e6:	930f      	str	r3, [sp, #60]	; 0x3c
 810c5e8:	b975      	cbnz	r5, 810c608 <_dtoa_r+0x40>
 810c5ea:	2010      	movs	r0, #16
 810c5ec:	f7fd fee6 	bl	810a3bc <malloc>
 810c5f0:	4602      	mov	r2, r0
 810c5f2:	6260      	str	r0, [r4, #36]	; 0x24
 810c5f4:	b920      	cbnz	r0, 810c600 <_dtoa_r+0x38>
 810c5f6:	4bb2      	ldr	r3, [pc, #712]	; (810c8c0 <_dtoa_r+0x2f8>)
 810c5f8:	21ea      	movs	r1, #234	; 0xea
 810c5fa:	48b2      	ldr	r0, [pc, #712]	; (810c8c4 <_dtoa_r+0x2fc>)
 810c5fc:	f7fd fe84 	bl	810a308 <__assert_func>
 810c600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810c604:	6005      	str	r5, [r0, #0]
 810c606:	60c5      	str	r5, [r0, #12]
 810c608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c60a:	6819      	ldr	r1, [r3, #0]
 810c60c:	b151      	cbz	r1, 810c624 <_dtoa_r+0x5c>
 810c60e:	685a      	ldr	r2, [r3, #4]
 810c610:	604a      	str	r2, [r1, #4]
 810c612:	2301      	movs	r3, #1
 810c614:	4093      	lsls	r3, r2
 810c616:	608b      	str	r3, [r1, #8]
 810c618:	4620      	mov	r0, r4
 810c61a:	f001 fbcb 	bl	810ddb4 <_Bfree>
 810c61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c620:	2200      	movs	r2, #0
 810c622:	601a      	str	r2, [r3, #0]
 810c624:	1e3b      	subs	r3, r7, #0
 810c626:	bfb9      	ittee	lt
 810c628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810c62c:	9303      	strlt	r3, [sp, #12]
 810c62e:	2300      	movge	r3, #0
 810c630:	f8c8 3000 	strge.w	r3, [r8]
 810c634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810c638:	4ba3      	ldr	r3, [pc, #652]	; (810c8c8 <_dtoa_r+0x300>)
 810c63a:	bfbc      	itt	lt
 810c63c:	2201      	movlt	r2, #1
 810c63e:	f8c8 2000 	strlt.w	r2, [r8]
 810c642:	ea33 0309 	bics.w	r3, r3, r9
 810c646:	d11b      	bne.n	810c680 <_dtoa_r+0xb8>
 810c648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c64a:	f242 730f 	movw	r3, #9999	; 0x270f
 810c64e:	6013      	str	r3, [r2, #0]
 810c650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c654:	4333      	orrs	r3, r6
 810c656:	f000 857a 	beq.w	810d14e <_dtoa_r+0xb86>
 810c65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c65c:	b963      	cbnz	r3, 810c678 <_dtoa_r+0xb0>
 810c65e:	4b9b      	ldr	r3, [pc, #620]	; (810c8cc <_dtoa_r+0x304>)
 810c660:	e024      	b.n	810c6ac <_dtoa_r+0xe4>
 810c662:	4b9b      	ldr	r3, [pc, #620]	; (810c8d0 <_dtoa_r+0x308>)
 810c664:	9300      	str	r3, [sp, #0]
 810c666:	3308      	adds	r3, #8
 810c668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810c66a:	6013      	str	r3, [r2, #0]
 810c66c:	9800      	ldr	r0, [sp, #0]
 810c66e:	b015      	add	sp, #84	; 0x54
 810c670:	ecbd 8b02 	vpop	{d8}
 810c674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c678:	4b94      	ldr	r3, [pc, #592]	; (810c8cc <_dtoa_r+0x304>)
 810c67a:	9300      	str	r3, [sp, #0]
 810c67c:	3303      	adds	r3, #3
 810c67e:	e7f3      	b.n	810c668 <_dtoa_r+0xa0>
 810c680:	ed9d 7b02 	vldr	d7, [sp, #8]
 810c684:	2200      	movs	r2, #0
 810c686:	ec51 0b17 	vmov	r0, r1, d7
 810c68a:	2300      	movs	r3, #0
 810c68c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 810c690:	f7f4 fab2 	bl	8100bf8 <__aeabi_dcmpeq>
 810c694:	4680      	mov	r8, r0
 810c696:	b158      	cbz	r0, 810c6b0 <_dtoa_r+0xe8>
 810c698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c69a:	2301      	movs	r3, #1
 810c69c:	6013      	str	r3, [r2, #0]
 810c69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c6a0:	2b00      	cmp	r3, #0
 810c6a2:	f000 8551 	beq.w	810d148 <_dtoa_r+0xb80>
 810c6a6:	488b      	ldr	r0, [pc, #556]	; (810c8d4 <_dtoa_r+0x30c>)
 810c6a8:	6018      	str	r0, [r3, #0]
 810c6aa:	1e43      	subs	r3, r0, #1
 810c6ac:	9300      	str	r3, [sp, #0]
 810c6ae:	e7dd      	b.n	810c66c <_dtoa_r+0xa4>
 810c6b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810c6b4:	aa12      	add	r2, sp, #72	; 0x48
 810c6b6:	a913      	add	r1, sp, #76	; 0x4c
 810c6b8:	4620      	mov	r0, r4
 810c6ba:	f001 ff23 	bl	810e504 <__d2b>
 810c6be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c6c2:	4683      	mov	fp, r0
 810c6c4:	2d00      	cmp	r5, #0
 810c6c6:	d07c      	beq.n	810c7c2 <_dtoa_r+0x1fa>
 810c6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c6ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 810c6ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810c6d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 810c6d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810c6da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810c6de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810c6e2:	4b7d      	ldr	r3, [pc, #500]	; (810c8d8 <_dtoa_r+0x310>)
 810c6e4:	2200      	movs	r2, #0
 810c6e6:	4630      	mov	r0, r6
 810c6e8:	4639      	mov	r1, r7
 810c6ea:	f7f3 fe65 	bl	81003b8 <__aeabi_dsub>
 810c6ee:	a36e      	add	r3, pc, #440	; (adr r3, 810c8a8 <_dtoa_r+0x2e0>)
 810c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c6f4:	f7f4 f818 	bl	8100728 <__aeabi_dmul>
 810c6f8:	a36d      	add	r3, pc, #436	; (adr r3, 810c8b0 <_dtoa_r+0x2e8>)
 810c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c6fe:	f7f3 fe5d 	bl	81003bc <__adddf3>
 810c702:	4606      	mov	r6, r0
 810c704:	4628      	mov	r0, r5
 810c706:	460f      	mov	r7, r1
 810c708:	f7f3 ffa4 	bl	8100654 <__aeabi_i2d>
 810c70c:	a36a      	add	r3, pc, #424	; (adr r3, 810c8b8 <_dtoa_r+0x2f0>)
 810c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c712:	f7f4 f809 	bl	8100728 <__aeabi_dmul>
 810c716:	4602      	mov	r2, r0
 810c718:	460b      	mov	r3, r1
 810c71a:	4630      	mov	r0, r6
 810c71c:	4639      	mov	r1, r7
 810c71e:	f7f3 fe4d 	bl	81003bc <__adddf3>
 810c722:	4606      	mov	r6, r0
 810c724:	460f      	mov	r7, r1
 810c726:	f7f4 faaf 	bl	8100c88 <__aeabi_d2iz>
 810c72a:	2200      	movs	r2, #0
 810c72c:	4682      	mov	sl, r0
 810c72e:	2300      	movs	r3, #0
 810c730:	4630      	mov	r0, r6
 810c732:	4639      	mov	r1, r7
 810c734:	f7f4 fa6a 	bl	8100c0c <__aeabi_dcmplt>
 810c738:	b148      	cbz	r0, 810c74e <_dtoa_r+0x186>
 810c73a:	4650      	mov	r0, sl
 810c73c:	f7f3 ff8a 	bl	8100654 <__aeabi_i2d>
 810c740:	4632      	mov	r2, r6
 810c742:	463b      	mov	r3, r7
 810c744:	f7f4 fa58 	bl	8100bf8 <__aeabi_dcmpeq>
 810c748:	b908      	cbnz	r0, 810c74e <_dtoa_r+0x186>
 810c74a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c74e:	f1ba 0f16 	cmp.w	sl, #22
 810c752:	d854      	bhi.n	810c7fe <_dtoa_r+0x236>
 810c754:	4b61      	ldr	r3, [pc, #388]	; (810c8dc <_dtoa_r+0x314>)
 810c756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c75e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810c762:	f7f4 fa53 	bl	8100c0c <__aeabi_dcmplt>
 810c766:	2800      	cmp	r0, #0
 810c768:	d04b      	beq.n	810c802 <_dtoa_r+0x23a>
 810c76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c76e:	2300      	movs	r3, #0
 810c770:	930e      	str	r3, [sp, #56]	; 0x38
 810c772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810c774:	1b5d      	subs	r5, r3, r5
 810c776:	1e6b      	subs	r3, r5, #1
 810c778:	9304      	str	r3, [sp, #16]
 810c77a:	bf43      	ittte	mi
 810c77c:	2300      	movmi	r3, #0
 810c77e:	f1c5 0801 	rsbmi	r8, r5, #1
 810c782:	9304      	strmi	r3, [sp, #16]
 810c784:	f04f 0800 	movpl.w	r8, #0
 810c788:	f1ba 0f00 	cmp.w	sl, #0
 810c78c:	db3b      	blt.n	810c806 <_dtoa_r+0x23e>
 810c78e:	9b04      	ldr	r3, [sp, #16]
 810c790:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 810c794:	4453      	add	r3, sl
 810c796:	9304      	str	r3, [sp, #16]
 810c798:	2300      	movs	r3, #0
 810c79a:	9306      	str	r3, [sp, #24]
 810c79c:	9b05      	ldr	r3, [sp, #20]
 810c79e:	2b09      	cmp	r3, #9
 810c7a0:	d869      	bhi.n	810c876 <_dtoa_r+0x2ae>
 810c7a2:	2b05      	cmp	r3, #5
 810c7a4:	bfc4      	itt	gt
 810c7a6:	3b04      	subgt	r3, #4
 810c7a8:	9305      	strgt	r3, [sp, #20]
 810c7aa:	9b05      	ldr	r3, [sp, #20]
 810c7ac:	f1a3 0302 	sub.w	r3, r3, #2
 810c7b0:	bfcc      	ite	gt
 810c7b2:	2500      	movgt	r5, #0
 810c7b4:	2501      	movle	r5, #1
 810c7b6:	2b03      	cmp	r3, #3
 810c7b8:	d869      	bhi.n	810c88e <_dtoa_r+0x2c6>
 810c7ba:	e8df f003 	tbb	[pc, r3]
 810c7be:	4e2c      	.short	0x4e2c
 810c7c0:	5a4c      	.short	0x5a4c
 810c7c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 810c7c6:	441d      	add	r5, r3
 810c7c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810c7cc:	2b20      	cmp	r3, #32
 810c7ce:	bfc1      	itttt	gt
 810c7d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810c7d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810c7d8:	fa09 f303 	lslgt.w	r3, r9, r3
 810c7dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 810c7e0:	bfda      	itte	le
 810c7e2:	f1c3 0320 	rsble	r3, r3, #32
 810c7e6:	fa06 f003 	lslle.w	r0, r6, r3
 810c7ea:	4318      	orrgt	r0, r3
 810c7ec:	f7f3 ff22 	bl	8100634 <__aeabi_ui2d>
 810c7f0:	2301      	movs	r3, #1
 810c7f2:	4606      	mov	r6, r0
 810c7f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810c7f8:	3d01      	subs	r5, #1
 810c7fa:	9310      	str	r3, [sp, #64]	; 0x40
 810c7fc:	e771      	b.n	810c6e2 <_dtoa_r+0x11a>
 810c7fe:	2301      	movs	r3, #1
 810c800:	e7b6      	b.n	810c770 <_dtoa_r+0x1a8>
 810c802:	900e      	str	r0, [sp, #56]	; 0x38
 810c804:	e7b5      	b.n	810c772 <_dtoa_r+0x1aa>
 810c806:	f1ca 0300 	rsb	r3, sl, #0
 810c80a:	9306      	str	r3, [sp, #24]
 810c80c:	2300      	movs	r3, #0
 810c80e:	eba8 080a 	sub.w	r8, r8, sl
 810c812:	930d      	str	r3, [sp, #52]	; 0x34
 810c814:	e7c2      	b.n	810c79c <_dtoa_r+0x1d4>
 810c816:	2300      	movs	r3, #0
 810c818:	9308      	str	r3, [sp, #32]
 810c81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c81c:	2b00      	cmp	r3, #0
 810c81e:	dc39      	bgt.n	810c894 <_dtoa_r+0x2cc>
 810c820:	f04f 0901 	mov.w	r9, #1
 810c824:	f8cd 9004 	str.w	r9, [sp, #4]
 810c828:	464b      	mov	r3, r9
 810c82a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810c82e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810c830:	2200      	movs	r2, #0
 810c832:	6042      	str	r2, [r0, #4]
 810c834:	2204      	movs	r2, #4
 810c836:	f102 0614 	add.w	r6, r2, #20
 810c83a:	429e      	cmp	r6, r3
 810c83c:	6841      	ldr	r1, [r0, #4]
 810c83e:	d92f      	bls.n	810c8a0 <_dtoa_r+0x2d8>
 810c840:	4620      	mov	r0, r4
 810c842:	f001 fa77 	bl	810dd34 <_Balloc>
 810c846:	9000      	str	r0, [sp, #0]
 810c848:	2800      	cmp	r0, #0
 810c84a:	d14b      	bne.n	810c8e4 <_dtoa_r+0x31c>
 810c84c:	4b24      	ldr	r3, [pc, #144]	; (810c8e0 <_dtoa_r+0x318>)
 810c84e:	4602      	mov	r2, r0
 810c850:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810c854:	e6d1      	b.n	810c5fa <_dtoa_r+0x32>
 810c856:	2301      	movs	r3, #1
 810c858:	e7de      	b.n	810c818 <_dtoa_r+0x250>
 810c85a:	2300      	movs	r3, #0
 810c85c:	9308      	str	r3, [sp, #32]
 810c85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c860:	eb0a 0903 	add.w	r9, sl, r3
 810c864:	f109 0301 	add.w	r3, r9, #1
 810c868:	2b01      	cmp	r3, #1
 810c86a:	9301      	str	r3, [sp, #4]
 810c86c:	bfb8      	it	lt
 810c86e:	2301      	movlt	r3, #1
 810c870:	e7dd      	b.n	810c82e <_dtoa_r+0x266>
 810c872:	2301      	movs	r3, #1
 810c874:	e7f2      	b.n	810c85c <_dtoa_r+0x294>
 810c876:	2501      	movs	r5, #1
 810c878:	2300      	movs	r3, #0
 810c87a:	9305      	str	r3, [sp, #20]
 810c87c:	9508      	str	r5, [sp, #32]
 810c87e:	f04f 39ff 	mov.w	r9, #4294967295
 810c882:	2200      	movs	r2, #0
 810c884:	f8cd 9004 	str.w	r9, [sp, #4]
 810c888:	2312      	movs	r3, #18
 810c88a:	9209      	str	r2, [sp, #36]	; 0x24
 810c88c:	e7cf      	b.n	810c82e <_dtoa_r+0x266>
 810c88e:	2301      	movs	r3, #1
 810c890:	9308      	str	r3, [sp, #32]
 810c892:	e7f4      	b.n	810c87e <_dtoa_r+0x2b6>
 810c894:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 810c898:	f8cd 9004 	str.w	r9, [sp, #4]
 810c89c:	464b      	mov	r3, r9
 810c89e:	e7c6      	b.n	810c82e <_dtoa_r+0x266>
 810c8a0:	3101      	adds	r1, #1
 810c8a2:	6041      	str	r1, [r0, #4]
 810c8a4:	0052      	lsls	r2, r2, #1
 810c8a6:	e7c6      	b.n	810c836 <_dtoa_r+0x26e>
 810c8a8:	636f4361 	.word	0x636f4361
 810c8ac:	3fd287a7 	.word	0x3fd287a7
 810c8b0:	8b60c8b3 	.word	0x8b60c8b3
 810c8b4:	3fc68a28 	.word	0x3fc68a28
 810c8b8:	509f79fb 	.word	0x509f79fb
 810c8bc:	3fd34413 	.word	0x3fd34413
 810c8c0:	0810f0b6 	.word	0x0810f0b6
 810c8c4:	0810f0cd 	.word	0x0810f0cd
 810c8c8:	7ff00000 	.word	0x7ff00000
 810c8cc:	0810f0b2 	.word	0x0810f0b2
 810c8d0:	0810f0a9 	.word	0x0810f0a9
 810c8d4:	0810ef2a 	.word	0x0810ef2a
 810c8d8:	3ff80000 	.word	0x3ff80000
 810c8dc:	0810f2a8 	.word	0x0810f2a8
 810c8e0:	0810f12c 	.word	0x0810f12c
 810c8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c8e6:	9a00      	ldr	r2, [sp, #0]
 810c8e8:	601a      	str	r2, [r3, #0]
 810c8ea:	9b01      	ldr	r3, [sp, #4]
 810c8ec:	2b0e      	cmp	r3, #14
 810c8ee:	f200 80ad 	bhi.w	810ca4c <_dtoa_r+0x484>
 810c8f2:	2d00      	cmp	r5, #0
 810c8f4:	f000 80aa 	beq.w	810ca4c <_dtoa_r+0x484>
 810c8f8:	f1ba 0f00 	cmp.w	sl, #0
 810c8fc:	dd36      	ble.n	810c96c <_dtoa_r+0x3a4>
 810c8fe:	4ac3      	ldr	r2, [pc, #780]	; (810cc0c <_dtoa_r+0x644>)
 810c900:	f00a 030f 	and.w	r3, sl, #15
 810c904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810c908:	ed93 7b00 	vldr	d7, [r3]
 810c90c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 810c910:	ea4f 172a 	mov.w	r7, sl, asr #4
 810c914:	eeb0 8a47 	vmov.f32	s16, s14
 810c918:	eef0 8a67 	vmov.f32	s17, s15
 810c91c:	d016      	beq.n	810c94c <_dtoa_r+0x384>
 810c91e:	4bbc      	ldr	r3, [pc, #752]	; (810cc10 <_dtoa_r+0x648>)
 810c920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810c924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810c928:	f7f4 f828 	bl	810097c <__aeabi_ddiv>
 810c92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810c930:	f007 070f 	and.w	r7, r7, #15
 810c934:	2503      	movs	r5, #3
 810c936:	4eb6      	ldr	r6, [pc, #728]	; (810cc10 <_dtoa_r+0x648>)
 810c938:	b957      	cbnz	r7, 810c950 <_dtoa_r+0x388>
 810c93a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c93e:	ec53 2b18 	vmov	r2, r3, d8
 810c942:	f7f4 f81b 	bl	810097c <__aeabi_ddiv>
 810c946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810c94a:	e029      	b.n	810c9a0 <_dtoa_r+0x3d8>
 810c94c:	2502      	movs	r5, #2
 810c94e:	e7f2      	b.n	810c936 <_dtoa_r+0x36e>
 810c950:	07f9      	lsls	r1, r7, #31
 810c952:	d508      	bpl.n	810c966 <_dtoa_r+0x39e>
 810c954:	ec51 0b18 	vmov	r0, r1, d8
 810c958:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c95c:	f7f3 fee4 	bl	8100728 <__aeabi_dmul>
 810c960:	ec41 0b18 	vmov	d8, r0, r1
 810c964:	3501      	adds	r5, #1
 810c966:	107f      	asrs	r7, r7, #1
 810c968:	3608      	adds	r6, #8
 810c96a:	e7e5      	b.n	810c938 <_dtoa_r+0x370>
 810c96c:	f000 80a6 	beq.w	810cabc <_dtoa_r+0x4f4>
 810c970:	f1ca 0600 	rsb	r6, sl, #0
 810c974:	4ba5      	ldr	r3, [pc, #660]	; (810cc0c <_dtoa_r+0x644>)
 810c976:	4fa6      	ldr	r7, [pc, #664]	; (810cc10 <_dtoa_r+0x648>)
 810c978:	f006 020f 	and.w	r2, r6, #15
 810c97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c980:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810c988:	f7f3 fece 	bl	8100728 <__aeabi_dmul>
 810c98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810c990:	1136      	asrs	r6, r6, #4
 810c992:	2300      	movs	r3, #0
 810c994:	2502      	movs	r5, #2
 810c996:	2e00      	cmp	r6, #0
 810c998:	f040 8085 	bne.w	810caa6 <_dtoa_r+0x4de>
 810c99c:	2b00      	cmp	r3, #0
 810c99e:	d1d2      	bne.n	810c946 <_dtoa_r+0x37e>
 810c9a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c9a2:	2b00      	cmp	r3, #0
 810c9a4:	f000 808c 	beq.w	810cac0 <_dtoa_r+0x4f8>
 810c9a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c9ac:	4b99      	ldr	r3, [pc, #612]	; (810cc14 <_dtoa_r+0x64c>)
 810c9ae:	2200      	movs	r2, #0
 810c9b0:	4630      	mov	r0, r6
 810c9b2:	4639      	mov	r1, r7
 810c9b4:	f7f4 f92a 	bl	8100c0c <__aeabi_dcmplt>
 810c9b8:	2800      	cmp	r0, #0
 810c9ba:	f000 8081 	beq.w	810cac0 <_dtoa_r+0x4f8>
 810c9be:	9b01      	ldr	r3, [sp, #4]
 810c9c0:	2b00      	cmp	r3, #0
 810c9c2:	d07d      	beq.n	810cac0 <_dtoa_r+0x4f8>
 810c9c4:	f1b9 0f00 	cmp.w	r9, #0
 810c9c8:	dd3c      	ble.n	810ca44 <_dtoa_r+0x47c>
 810c9ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 810c9ce:	9307      	str	r3, [sp, #28]
 810c9d0:	2200      	movs	r2, #0
 810c9d2:	4b91      	ldr	r3, [pc, #580]	; (810cc18 <_dtoa_r+0x650>)
 810c9d4:	4630      	mov	r0, r6
 810c9d6:	4639      	mov	r1, r7
 810c9d8:	f7f3 fea6 	bl	8100728 <__aeabi_dmul>
 810c9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810c9e0:	3501      	adds	r5, #1
 810c9e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 810c9e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c9ea:	4628      	mov	r0, r5
 810c9ec:	f7f3 fe32 	bl	8100654 <__aeabi_i2d>
 810c9f0:	4632      	mov	r2, r6
 810c9f2:	463b      	mov	r3, r7
 810c9f4:	f7f3 fe98 	bl	8100728 <__aeabi_dmul>
 810c9f8:	4b88      	ldr	r3, [pc, #544]	; (810cc1c <_dtoa_r+0x654>)
 810c9fa:	2200      	movs	r2, #0
 810c9fc:	f7f3 fcde 	bl	81003bc <__adddf3>
 810ca00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810ca04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ca08:	9303      	str	r3, [sp, #12]
 810ca0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810ca0c:	2b00      	cmp	r3, #0
 810ca0e:	d15c      	bne.n	810caca <_dtoa_r+0x502>
 810ca10:	4b83      	ldr	r3, [pc, #524]	; (810cc20 <_dtoa_r+0x658>)
 810ca12:	2200      	movs	r2, #0
 810ca14:	4630      	mov	r0, r6
 810ca16:	4639      	mov	r1, r7
 810ca18:	f7f3 fcce 	bl	81003b8 <__aeabi_dsub>
 810ca1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810ca20:	4606      	mov	r6, r0
 810ca22:	460f      	mov	r7, r1
 810ca24:	f7f4 f910 	bl	8100c48 <__aeabi_dcmpgt>
 810ca28:	2800      	cmp	r0, #0
 810ca2a:	f040 8296 	bne.w	810cf5a <_dtoa_r+0x992>
 810ca2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810ca32:	4630      	mov	r0, r6
 810ca34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ca38:	4639      	mov	r1, r7
 810ca3a:	f7f4 f8e7 	bl	8100c0c <__aeabi_dcmplt>
 810ca3e:	2800      	cmp	r0, #0
 810ca40:	f040 8288 	bne.w	810cf54 <_dtoa_r+0x98c>
 810ca44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810ca48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810ca4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810ca4e:	2b00      	cmp	r3, #0
 810ca50:	f2c0 8158 	blt.w	810cd04 <_dtoa_r+0x73c>
 810ca54:	f1ba 0f0e 	cmp.w	sl, #14
 810ca58:	f300 8154 	bgt.w	810cd04 <_dtoa_r+0x73c>
 810ca5c:	4b6b      	ldr	r3, [pc, #428]	; (810cc0c <_dtoa_r+0x644>)
 810ca5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810ca62:	e9d3 8900 	ldrd	r8, r9, [r3]
 810ca66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ca68:	2b00      	cmp	r3, #0
 810ca6a:	f280 80e3 	bge.w	810cc34 <_dtoa_r+0x66c>
 810ca6e:	9b01      	ldr	r3, [sp, #4]
 810ca70:	2b00      	cmp	r3, #0
 810ca72:	f300 80df 	bgt.w	810cc34 <_dtoa_r+0x66c>
 810ca76:	f040 826d 	bne.w	810cf54 <_dtoa_r+0x98c>
 810ca7a:	4b69      	ldr	r3, [pc, #420]	; (810cc20 <_dtoa_r+0x658>)
 810ca7c:	2200      	movs	r2, #0
 810ca7e:	4640      	mov	r0, r8
 810ca80:	4649      	mov	r1, r9
 810ca82:	f7f3 fe51 	bl	8100728 <__aeabi_dmul>
 810ca86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810ca8a:	f7f4 f8d3 	bl	8100c34 <__aeabi_dcmpge>
 810ca8e:	9e01      	ldr	r6, [sp, #4]
 810ca90:	4637      	mov	r7, r6
 810ca92:	2800      	cmp	r0, #0
 810ca94:	f040 8243 	bne.w	810cf1e <_dtoa_r+0x956>
 810ca98:	9d00      	ldr	r5, [sp, #0]
 810ca9a:	2331      	movs	r3, #49	; 0x31
 810ca9c:	f805 3b01 	strb.w	r3, [r5], #1
 810caa0:	f10a 0a01 	add.w	sl, sl, #1
 810caa4:	e23f      	b.n	810cf26 <_dtoa_r+0x95e>
 810caa6:	07f2      	lsls	r2, r6, #31
 810caa8:	d505      	bpl.n	810cab6 <_dtoa_r+0x4ee>
 810caaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 810caae:	f7f3 fe3b 	bl	8100728 <__aeabi_dmul>
 810cab2:	3501      	adds	r5, #1
 810cab4:	2301      	movs	r3, #1
 810cab6:	1076      	asrs	r6, r6, #1
 810cab8:	3708      	adds	r7, #8
 810caba:	e76c      	b.n	810c996 <_dtoa_r+0x3ce>
 810cabc:	2502      	movs	r5, #2
 810cabe:	e76f      	b.n	810c9a0 <_dtoa_r+0x3d8>
 810cac0:	9b01      	ldr	r3, [sp, #4]
 810cac2:	f8cd a01c 	str.w	sl, [sp, #28]
 810cac6:	930c      	str	r3, [sp, #48]	; 0x30
 810cac8:	e78d      	b.n	810c9e6 <_dtoa_r+0x41e>
 810caca:	9900      	ldr	r1, [sp, #0]
 810cacc:	980c      	ldr	r0, [sp, #48]	; 0x30
 810cace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cad0:	4b4e      	ldr	r3, [pc, #312]	; (810cc0c <_dtoa_r+0x644>)
 810cad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 810cad6:	4401      	add	r1, r0
 810cad8:	9102      	str	r1, [sp, #8]
 810cada:	9908      	ldr	r1, [sp, #32]
 810cadc:	eeb0 8a47 	vmov.f32	s16, s14
 810cae0:	eef0 8a67 	vmov.f32	s17, s15
 810cae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810cae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810caec:	2900      	cmp	r1, #0
 810caee:	d045      	beq.n	810cb7c <_dtoa_r+0x5b4>
 810caf0:	494c      	ldr	r1, [pc, #304]	; (810cc24 <_dtoa_r+0x65c>)
 810caf2:	2000      	movs	r0, #0
 810caf4:	f7f3 ff42 	bl	810097c <__aeabi_ddiv>
 810caf8:	ec53 2b18 	vmov	r2, r3, d8
 810cafc:	f7f3 fc5c 	bl	81003b8 <__aeabi_dsub>
 810cb00:	9d00      	ldr	r5, [sp, #0]
 810cb02:	ec41 0b18 	vmov	d8, r0, r1
 810cb06:	4639      	mov	r1, r7
 810cb08:	4630      	mov	r0, r6
 810cb0a:	f7f4 f8bd 	bl	8100c88 <__aeabi_d2iz>
 810cb0e:	900c      	str	r0, [sp, #48]	; 0x30
 810cb10:	f7f3 fda0 	bl	8100654 <__aeabi_i2d>
 810cb14:	4602      	mov	r2, r0
 810cb16:	460b      	mov	r3, r1
 810cb18:	4630      	mov	r0, r6
 810cb1a:	4639      	mov	r1, r7
 810cb1c:	f7f3 fc4c 	bl	81003b8 <__aeabi_dsub>
 810cb20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810cb22:	3330      	adds	r3, #48	; 0x30
 810cb24:	f805 3b01 	strb.w	r3, [r5], #1
 810cb28:	ec53 2b18 	vmov	r2, r3, d8
 810cb2c:	4606      	mov	r6, r0
 810cb2e:	460f      	mov	r7, r1
 810cb30:	f7f4 f86c 	bl	8100c0c <__aeabi_dcmplt>
 810cb34:	2800      	cmp	r0, #0
 810cb36:	d165      	bne.n	810cc04 <_dtoa_r+0x63c>
 810cb38:	4632      	mov	r2, r6
 810cb3a:	463b      	mov	r3, r7
 810cb3c:	4935      	ldr	r1, [pc, #212]	; (810cc14 <_dtoa_r+0x64c>)
 810cb3e:	2000      	movs	r0, #0
 810cb40:	f7f3 fc3a 	bl	81003b8 <__aeabi_dsub>
 810cb44:	ec53 2b18 	vmov	r2, r3, d8
 810cb48:	f7f4 f860 	bl	8100c0c <__aeabi_dcmplt>
 810cb4c:	2800      	cmp	r0, #0
 810cb4e:	f040 80b9 	bne.w	810ccc4 <_dtoa_r+0x6fc>
 810cb52:	9b02      	ldr	r3, [sp, #8]
 810cb54:	429d      	cmp	r5, r3
 810cb56:	f43f af75 	beq.w	810ca44 <_dtoa_r+0x47c>
 810cb5a:	4b2f      	ldr	r3, [pc, #188]	; (810cc18 <_dtoa_r+0x650>)
 810cb5c:	ec51 0b18 	vmov	r0, r1, d8
 810cb60:	2200      	movs	r2, #0
 810cb62:	f7f3 fde1 	bl	8100728 <__aeabi_dmul>
 810cb66:	4b2c      	ldr	r3, [pc, #176]	; (810cc18 <_dtoa_r+0x650>)
 810cb68:	ec41 0b18 	vmov	d8, r0, r1
 810cb6c:	2200      	movs	r2, #0
 810cb6e:	4630      	mov	r0, r6
 810cb70:	4639      	mov	r1, r7
 810cb72:	f7f3 fdd9 	bl	8100728 <__aeabi_dmul>
 810cb76:	4606      	mov	r6, r0
 810cb78:	460f      	mov	r7, r1
 810cb7a:	e7c4      	b.n	810cb06 <_dtoa_r+0x53e>
 810cb7c:	ec51 0b17 	vmov	r0, r1, d7
 810cb80:	f7f3 fdd2 	bl	8100728 <__aeabi_dmul>
 810cb84:	9b02      	ldr	r3, [sp, #8]
 810cb86:	9d00      	ldr	r5, [sp, #0]
 810cb88:	930c      	str	r3, [sp, #48]	; 0x30
 810cb8a:	ec41 0b18 	vmov	d8, r0, r1
 810cb8e:	4639      	mov	r1, r7
 810cb90:	4630      	mov	r0, r6
 810cb92:	f7f4 f879 	bl	8100c88 <__aeabi_d2iz>
 810cb96:	9011      	str	r0, [sp, #68]	; 0x44
 810cb98:	f7f3 fd5c 	bl	8100654 <__aeabi_i2d>
 810cb9c:	4602      	mov	r2, r0
 810cb9e:	460b      	mov	r3, r1
 810cba0:	4630      	mov	r0, r6
 810cba2:	4639      	mov	r1, r7
 810cba4:	f7f3 fc08 	bl	81003b8 <__aeabi_dsub>
 810cba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810cbaa:	3330      	adds	r3, #48	; 0x30
 810cbac:	f805 3b01 	strb.w	r3, [r5], #1
 810cbb0:	9b02      	ldr	r3, [sp, #8]
 810cbb2:	429d      	cmp	r5, r3
 810cbb4:	4606      	mov	r6, r0
 810cbb6:	460f      	mov	r7, r1
 810cbb8:	f04f 0200 	mov.w	r2, #0
 810cbbc:	d134      	bne.n	810cc28 <_dtoa_r+0x660>
 810cbbe:	4b19      	ldr	r3, [pc, #100]	; (810cc24 <_dtoa_r+0x65c>)
 810cbc0:	ec51 0b18 	vmov	r0, r1, d8
 810cbc4:	f7f3 fbfa 	bl	81003bc <__adddf3>
 810cbc8:	4602      	mov	r2, r0
 810cbca:	460b      	mov	r3, r1
 810cbcc:	4630      	mov	r0, r6
 810cbce:	4639      	mov	r1, r7
 810cbd0:	f7f4 f83a 	bl	8100c48 <__aeabi_dcmpgt>
 810cbd4:	2800      	cmp	r0, #0
 810cbd6:	d175      	bne.n	810ccc4 <_dtoa_r+0x6fc>
 810cbd8:	ec53 2b18 	vmov	r2, r3, d8
 810cbdc:	4911      	ldr	r1, [pc, #68]	; (810cc24 <_dtoa_r+0x65c>)
 810cbde:	2000      	movs	r0, #0
 810cbe0:	f7f3 fbea 	bl	81003b8 <__aeabi_dsub>
 810cbe4:	4602      	mov	r2, r0
 810cbe6:	460b      	mov	r3, r1
 810cbe8:	4630      	mov	r0, r6
 810cbea:	4639      	mov	r1, r7
 810cbec:	f7f4 f80e 	bl	8100c0c <__aeabi_dcmplt>
 810cbf0:	2800      	cmp	r0, #0
 810cbf2:	f43f af27 	beq.w	810ca44 <_dtoa_r+0x47c>
 810cbf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810cbf8:	1e6b      	subs	r3, r5, #1
 810cbfa:	930c      	str	r3, [sp, #48]	; 0x30
 810cbfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810cc00:	2b30      	cmp	r3, #48	; 0x30
 810cc02:	d0f8      	beq.n	810cbf6 <_dtoa_r+0x62e>
 810cc04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810cc08:	e04a      	b.n	810cca0 <_dtoa_r+0x6d8>
 810cc0a:	bf00      	nop
 810cc0c:	0810f2a8 	.word	0x0810f2a8
 810cc10:	0810f280 	.word	0x0810f280
 810cc14:	3ff00000 	.word	0x3ff00000
 810cc18:	40240000 	.word	0x40240000
 810cc1c:	401c0000 	.word	0x401c0000
 810cc20:	40140000 	.word	0x40140000
 810cc24:	3fe00000 	.word	0x3fe00000
 810cc28:	4baf      	ldr	r3, [pc, #700]	; (810cee8 <_dtoa_r+0x920>)
 810cc2a:	f7f3 fd7d 	bl	8100728 <__aeabi_dmul>
 810cc2e:	4606      	mov	r6, r0
 810cc30:	460f      	mov	r7, r1
 810cc32:	e7ac      	b.n	810cb8e <_dtoa_r+0x5c6>
 810cc34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810cc38:	9d00      	ldr	r5, [sp, #0]
 810cc3a:	4642      	mov	r2, r8
 810cc3c:	464b      	mov	r3, r9
 810cc3e:	4630      	mov	r0, r6
 810cc40:	4639      	mov	r1, r7
 810cc42:	f7f3 fe9b 	bl	810097c <__aeabi_ddiv>
 810cc46:	f7f4 f81f 	bl	8100c88 <__aeabi_d2iz>
 810cc4a:	9002      	str	r0, [sp, #8]
 810cc4c:	f7f3 fd02 	bl	8100654 <__aeabi_i2d>
 810cc50:	4642      	mov	r2, r8
 810cc52:	464b      	mov	r3, r9
 810cc54:	f7f3 fd68 	bl	8100728 <__aeabi_dmul>
 810cc58:	4602      	mov	r2, r0
 810cc5a:	460b      	mov	r3, r1
 810cc5c:	4630      	mov	r0, r6
 810cc5e:	4639      	mov	r1, r7
 810cc60:	f7f3 fbaa 	bl	81003b8 <__aeabi_dsub>
 810cc64:	9e02      	ldr	r6, [sp, #8]
 810cc66:	9f01      	ldr	r7, [sp, #4]
 810cc68:	3630      	adds	r6, #48	; 0x30
 810cc6a:	f805 6b01 	strb.w	r6, [r5], #1
 810cc6e:	9e00      	ldr	r6, [sp, #0]
 810cc70:	1bae      	subs	r6, r5, r6
 810cc72:	42b7      	cmp	r7, r6
 810cc74:	4602      	mov	r2, r0
 810cc76:	460b      	mov	r3, r1
 810cc78:	d137      	bne.n	810ccea <_dtoa_r+0x722>
 810cc7a:	f7f3 fb9f 	bl	81003bc <__adddf3>
 810cc7e:	4642      	mov	r2, r8
 810cc80:	464b      	mov	r3, r9
 810cc82:	4606      	mov	r6, r0
 810cc84:	460f      	mov	r7, r1
 810cc86:	f7f3 ffdf 	bl	8100c48 <__aeabi_dcmpgt>
 810cc8a:	b9c8      	cbnz	r0, 810ccc0 <_dtoa_r+0x6f8>
 810cc8c:	4642      	mov	r2, r8
 810cc8e:	464b      	mov	r3, r9
 810cc90:	4630      	mov	r0, r6
 810cc92:	4639      	mov	r1, r7
 810cc94:	f7f3 ffb0 	bl	8100bf8 <__aeabi_dcmpeq>
 810cc98:	b110      	cbz	r0, 810cca0 <_dtoa_r+0x6d8>
 810cc9a:	9b02      	ldr	r3, [sp, #8]
 810cc9c:	07d9      	lsls	r1, r3, #31
 810cc9e:	d40f      	bmi.n	810ccc0 <_dtoa_r+0x6f8>
 810cca0:	4620      	mov	r0, r4
 810cca2:	4659      	mov	r1, fp
 810cca4:	f001 f886 	bl	810ddb4 <_Bfree>
 810cca8:	2300      	movs	r3, #0
 810ccaa:	702b      	strb	r3, [r5, #0]
 810ccac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ccae:	f10a 0001 	add.w	r0, sl, #1
 810ccb2:	6018      	str	r0, [r3, #0]
 810ccb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ccb6:	2b00      	cmp	r3, #0
 810ccb8:	f43f acd8 	beq.w	810c66c <_dtoa_r+0xa4>
 810ccbc:	601d      	str	r5, [r3, #0]
 810ccbe:	e4d5      	b.n	810c66c <_dtoa_r+0xa4>
 810ccc0:	f8cd a01c 	str.w	sl, [sp, #28]
 810ccc4:	462b      	mov	r3, r5
 810ccc6:	461d      	mov	r5, r3
 810ccc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810cccc:	2a39      	cmp	r2, #57	; 0x39
 810ccce:	d108      	bne.n	810cce2 <_dtoa_r+0x71a>
 810ccd0:	9a00      	ldr	r2, [sp, #0]
 810ccd2:	429a      	cmp	r2, r3
 810ccd4:	d1f7      	bne.n	810ccc6 <_dtoa_r+0x6fe>
 810ccd6:	9a07      	ldr	r2, [sp, #28]
 810ccd8:	9900      	ldr	r1, [sp, #0]
 810ccda:	3201      	adds	r2, #1
 810ccdc:	9207      	str	r2, [sp, #28]
 810ccde:	2230      	movs	r2, #48	; 0x30
 810cce0:	700a      	strb	r2, [r1, #0]
 810cce2:	781a      	ldrb	r2, [r3, #0]
 810cce4:	3201      	adds	r2, #1
 810cce6:	701a      	strb	r2, [r3, #0]
 810cce8:	e78c      	b.n	810cc04 <_dtoa_r+0x63c>
 810ccea:	4b7f      	ldr	r3, [pc, #508]	; (810cee8 <_dtoa_r+0x920>)
 810ccec:	2200      	movs	r2, #0
 810ccee:	f7f3 fd1b 	bl	8100728 <__aeabi_dmul>
 810ccf2:	2200      	movs	r2, #0
 810ccf4:	2300      	movs	r3, #0
 810ccf6:	4606      	mov	r6, r0
 810ccf8:	460f      	mov	r7, r1
 810ccfa:	f7f3 ff7d 	bl	8100bf8 <__aeabi_dcmpeq>
 810ccfe:	2800      	cmp	r0, #0
 810cd00:	d09b      	beq.n	810cc3a <_dtoa_r+0x672>
 810cd02:	e7cd      	b.n	810cca0 <_dtoa_r+0x6d8>
 810cd04:	9a08      	ldr	r2, [sp, #32]
 810cd06:	2a00      	cmp	r2, #0
 810cd08:	f000 80c4 	beq.w	810ce94 <_dtoa_r+0x8cc>
 810cd0c:	9a05      	ldr	r2, [sp, #20]
 810cd0e:	2a01      	cmp	r2, #1
 810cd10:	f300 80a8 	bgt.w	810ce64 <_dtoa_r+0x89c>
 810cd14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 810cd16:	2a00      	cmp	r2, #0
 810cd18:	f000 80a0 	beq.w	810ce5c <_dtoa_r+0x894>
 810cd1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810cd20:	9e06      	ldr	r6, [sp, #24]
 810cd22:	4645      	mov	r5, r8
 810cd24:	9a04      	ldr	r2, [sp, #16]
 810cd26:	2101      	movs	r1, #1
 810cd28:	441a      	add	r2, r3
 810cd2a:	4620      	mov	r0, r4
 810cd2c:	4498      	add	r8, r3
 810cd2e:	9204      	str	r2, [sp, #16]
 810cd30:	f001 f946 	bl	810dfc0 <__i2b>
 810cd34:	4607      	mov	r7, r0
 810cd36:	2d00      	cmp	r5, #0
 810cd38:	dd0b      	ble.n	810cd52 <_dtoa_r+0x78a>
 810cd3a:	9b04      	ldr	r3, [sp, #16]
 810cd3c:	2b00      	cmp	r3, #0
 810cd3e:	dd08      	ble.n	810cd52 <_dtoa_r+0x78a>
 810cd40:	42ab      	cmp	r3, r5
 810cd42:	9a04      	ldr	r2, [sp, #16]
 810cd44:	bfa8      	it	ge
 810cd46:	462b      	movge	r3, r5
 810cd48:	eba8 0803 	sub.w	r8, r8, r3
 810cd4c:	1aed      	subs	r5, r5, r3
 810cd4e:	1ad3      	subs	r3, r2, r3
 810cd50:	9304      	str	r3, [sp, #16]
 810cd52:	9b06      	ldr	r3, [sp, #24]
 810cd54:	b1fb      	cbz	r3, 810cd96 <_dtoa_r+0x7ce>
 810cd56:	9b08      	ldr	r3, [sp, #32]
 810cd58:	2b00      	cmp	r3, #0
 810cd5a:	f000 809f 	beq.w	810ce9c <_dtoa_r+0x8d4>
 810cd5e:	2e00      	cmp	r6, #0
 810cd60:	dd11      	ble.n	810cd86 <_dtoa_r+0x7be>
 810cd62:	4639      	mov	r1, r7
 810cd64:	4632      	mov	r2, r6
 810cd66:	4620      	mov	r0, r4
 810cd68:	f001 f9e6 	bl	810e138 <__pow5mult>
 810cd6c:	465a      	mov	r2, fp
 810cd6e:	4601      	mov	r1, r0
 810cd70:	4607      	mov	r7, r0
 810cd72:	4620      	mov	r0, r4
 810cd74:	f001 f93a 	bl	810dfec <__multiply>
 810cd78:	4659      	mov	r1, fp
 810cd7a:	9007      	str	r0, [sp, #28]
 810cd7c:	4620      	mov	r0, r4
 810cd7e:	f001 f819 	bl	810ddb4 <_Bfree>
 810cd82:	9b07      	ldr	r3, [sp, #28]
 810cd84:	469b      	mov	fp, r3
 810cd86:	9b06      	ldr	r3, [sp, #24]
 810cd88:	1b9a      	subs	r2, r3, r6
 810cd8a:	d004      	beq.n	810cd96 <_dtoa_r+0x7ce>
 810cd8c:	4659      	mov	r1, fp
 810cd8e:	4620      	mov	r0, r4
 810cd90:	f001 f9d2 	bl	810e138 <__pow5mult>
 810cd94:	4683      	mov	fp, r0
 810cd96:	2101      	movs	r1, #1
 810cd98:	4620      	mov	r0, r4
 810cd9a:	f001 f911 	bl	810dfc0 <__i2b>
 810cd9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810cda0:	2b00      	cmp	r3, #0
 810cda2:	4606      	mov	r6, r0
 810cda4:	dd7c      	ble.n	810cea0 <_dtoa_r+0x8d8>
 810cda6:	461a      	mov	r2, r3
 810cda8:	4601      	mov	r1, r0
 810cdaa:	4620      	mov	r0, r4
 810cdac:	f001 f9c4 	bl	810e138 <__pow5mult>
 810cdb0:	9b05      	ldr	r3, [sp, #20]
 810cdb2:	2b01      	cmp	r3, #1
 810cdb4:	4606      	mov	r6, r0
 810cdb6:	dd76      	ble.n	810cea6 <_dtoa_r+0x8de>
 810cdb8:	2300      	movs	r3, #0
 810cdba:	9306      	str	r3, [sp, #24]
 810cdbc:	6933      	ldr	r3, [r6, #16]
 810cdbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810cdc2:	6918      	ldr	r0, [r3, #16]
 810cdc4:	f001 f8ac 	bl	810df20 <__hi0bits>
 810cdc8:	f1c0 0020 	rsb	r0, r0, #32
 810cdcc:	9b04      	ldr	r3, [sp, #16]
 810cdce:	4418      	add	r0, r3
 810cdd0:	f010 001f 	ands.w	r0, r0, #31
 810cdd4:	f000 8086 	beq.w	810cee4 <_dtoa_r+0x91c>
 810cdd8:	f1c0 0320 	rsb	r3, r0, #32
 810cddc:	2b04      	cmp	r3, #4
 810cdde:	dd7f      	ble.n	810cee0 <_dtoa_r+0x918>
 810cde0:	f1c0 001c 	rsb	r0, r0, #28
 810cde4:	9b04      	ldr	r3, [sp, #16]
 810cde6:	4403      	add	r3, r0
 810cde8:	4480      	add	r8, r0
 810cdea:	4405      	add	r5, r0
 810cdec:	9304      	str	r3, [sp, #16]
 810cdee:	f1b8 0f00 	cmp.w	r8, #0
 810cdf2:	dd05      	ble.n	810ce00 <_dtoa_r+0x838>
 810cdf4:	4659      	mov	r1, fp
 810cdf6:	4642      	mov	r2, r8
 810cdf8:	4620      	mov	r0, r4
 810cdfa:	f001 f9f7 	bl	810e1ec <__lshift>
 810cdfe:	4683      	mov	fp, r0
 810ce00:	9b04      	ldr	r3, [sp, #16]
 810ce02:	2b00      	cmp	r3, #0
 810ce04:	dd05      	ble.n	810ce12 <_dtoa_r+0x84a>
 810ce06:	4631      	mov	r1, r6
 810ce08:	461a      	mov	r2, r3
 810ce0a:	4620      	mov	r0, r4
 810ce0c:	f001 f9ee 	bl	810e1ec <__lshift>
 810ce10:	4606      	mov	r6, r0
 810ce12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ce14:	2b00      	cmp	r3, #0
 810ce16:	d069      	beq.n	810ceec <_dtoa_r+0x924>
 810ce18:	4631      	mov	r1, r6
 810ce1a:	4658      	mov	r0, fp
 810ce1c:	f001 fa52 	bl	810e2c4 <__mcmp>
 810ce20:	2800      	cmp	r0, #0
 810ce22:	da63      	bge.n	810ceec <_dtoa_r+0x924>
 810ce24:	2300      	movs	r3, #0
 810ce26:	4659      	mov	r1, fp
 810ce28:	220a      	movs	r2, #10
 810ce2a:	4620      	mov	r0, r4
 810ce2c:	f000 ffe4 	bl	810ddf8 <__multadd>
 810ce30:	9b08      	ldr	r3, [sp, #32]
 810ce32:	f10a 3aff 	add.w	sl, sl, #4294967295
 810ce36:	4683      	mov	fp, r0
 810ce38:	2b00      	cmp	r3, #0
 810ce3a:	f000 818f 	beq.w	810d15c <_dtoa_r+0xb94>
 810ce3e:	4639      	mov	r1, r7
 810ce40:	2300      	movs	r3, #0
 810ce42:	220a      	movs	r2, #10
 810ce44:	4620      	mov	r0, r4
 810ce46:	f000 ffd7 	bl	810ddf8 <__multadd>
 810ce4a:	f1b9 0f00 	cmp.w	r9, #0
 810ce4e:	4607      	mov	r7, r0
 810ce50:	f300 808e 	bgt.w	810cf70 <_dtoa_r+0x9a8>
 810ce54:	9b05      	ldr	r3, [sp, #20]
 810ce56:	2b02      	cmp	r3, #2
 810ce58:	dc50      	bgt.n	810cefc <_dtoa_r+0x934>
 810ce5a:	e089      	b.n	810cf70 <_dtoa_r+0x9a8>
 810ce5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810ce5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810ce62:	e75d      	b.n	810cd20 <_dtoa_r+0x758>
 810ce64:	9b01      	ldr	r3, [sp, #4]
 810ce66:	1e5e      	subs	r6, r3, #1
 810ce68:	9b06      	ldr	r3, [sp, #24]
 810ce6a:	42b3      	cmp	r3, r6
 810ce6c:	bfbf      	itttt	lt
 810ce6e:	9b06      	ldrlt	r3, [sp, #24]
 810ce70:	9606      	strlt	r6, [sp, #24]
 810ce72:	1af2      	sublt	r2, r6, r3
 810ce74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 810ce76:	bfb6      	itet	lt
 810ce78:	189b      	addlt	r3, r3, r2
 810ce7a:	1b9e      	subge	r6, r3, r6
 810ce7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 810ce7e:	9b01      	ldr	r3, [sp, #4]
 810ce80:	bfb8      	it	lt
 810ce82:	2600      	movlt	r6, #0
 810ce84:	2b00      	cmp	r3, #0
 810ce86:	bfb5      	itete	lt
 810ce88:	eba8 0503 	sublt.w	r5, r8, r3
 810ce8c:	9b01      	ldrge	r3, [sp, #4]
 810ce8e:	2300      	movlt	r3, #0
 810ce90:	4645      	movge	r5, r8
 810ce92:	e747      	b.n	810cd24 <_dtoa_r+0x75c>
 810ce94:	9e06      	ldr	r6, [sp, #24]
 810ce96:	9f08      	ldr	r7, [sp, #32]
 810ce98:	4645      	mov	r5, r8
 810ce9a:	e74c      	b.n	810cd36 <_dtoa_r+0x76e>
 810ce9c:	9a06      	ldr	r2, [sp, #24]
 810ce9e:	e775      	b.n	810cd8c <_dtoa_r+0x7c4>
 810cea0:	9b05      	ldr	r3, [sp, #20]
 810cea2:	2b01      	cmp	r3, #1
 810cea4:	dc18      	bgt.n	810ced8 <_dtoa_r+0x910>
 810cea6:	9b02      	ldr	r3, [sp, #8]
 810cea8:	b9b3      	cbnz	r3, 810ced8 <_dtoa_r+0x910>
 810ceaa:	9b03      	ldr	r3, [sp, #12]
 810ceac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ceb0:	b9a3      	cbnz	r3, 810cedc <_dtoa_r+0x914>
 810ceb2:	9b03      	ldr	r3, [sp, #12]
 810ceb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810ceb8:	0d1b      	lsrs	r3, r3, #20
 810ceba:	051b      	lsls	r3, r3, #20
 810cebc:	b12b      	cbz	r3, 810ceca <_dtoa_r+0x902>
 810cebe:	9b04      	ldr	r3, [sp, #16]
 810cec0:	3301      	adds	r3, #1
 810cec2:	9304      	str	r3, [sp, #16]
 810cec4:	f108 0801 	add.w	r8, r8, #1
 810cec8:	2301      	movs	r3, #1
 810ceca:	9306      	str	r3, [sp, #24]
 810cecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810cece:	2b00      	cmp	r3, #0
 810ced0:	f47f af74 	bne.w	810cdbc <_dtoa_r+0x7f4>
 810ced4:	2001      	movs	r0, #1
 810ced6:	e779      	b.n	810cdcc <_dtoa_r+0x804>
 810ced8:	2300      	movs	r3, #0
 810ceda:	e7f6      	b.n	810ceca <_dtoa_r+0x902>
 810cedc:	9b02      	ldr	r3, [sp, #8]
 810cede:	e7f4      	b.n	810ceca <_dtoa_r+0x902>
 810cee0:	d085      	beq.n	810cdee <_dtoa_r+0x826>
 810cee2:	4618      	mov	r0, r3
 810cee4:	301c      	adds	r0, #28
 810cee6:	e77d      	b.n	810cde4 <_dtoa_r+0x81c>
 810cee8:	40240000 	.word	0x40240000
 810ceec:	9b01      	ldr	r3, [sp, #4]
 810ceee:	2b00      	cmp	r3, #0
 810cef0:	dc38      	bgt.n	810cf64 <_dtoa_r+0x99c>
 810cef2:	9b05      	ldr	r3, [sp, #20]
 810cef4:	2b02      	cmp	r3, #2
 810cef6:	dd35      	ble.n	810cf64 <_dtoa_r+0x99c>
 810cef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810cefc:	f1b9 0f00 	cmp.w	r9, #0
 810cf00:	d10d      	bne.n	810cf1e <_dtoa_r+0x956>
 810cf02:	4631      	mov	r1, r6
 810cf04:	464b      	mov	r3, r9
 810cf06:	2205      	movs	r2, #5
 810cf08:	4620      	mov	r0, r4
 810cf0a:	f000 ff75 	bl	810ddf8 <__multadd>
 810cf0e:	4601      	mov	r1, r0
 810cf10:	4606      	mov	r6, r0
 810cf12:	4658      	mov	r0, fp
 810cf14:	f001 f9d6 	bl	810e2c4 <__mcmp>
 810cf18:	2800      	cmp	r0, #0
 810cf1a:	f73f adbd 	bgt.w	810ca98 <_dtoa_r+0x4d0>
 810cf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cf20:	9d00      	ldr	r5, [sp, #0]
 810cf22:	ea6f 0a03 	mvn.w	sl, r3
 810cf26:	f04f 0800 	mov.w	r8, #0
 810cf2a:	4631      	mov	r1, r6
 810cf2c:	4620      	mov	r0, r4
 810cf2e:	f000 ff41 	bl	810ddb4 <_Bfree>
 810cf32:	2f00      	cmp	r7, #0
 810cf34:	f43f aeb4 	beq.w	810cca0 <_dtoa_r+0x6d8>
 810cf38:	f1b8 0f00 	cmp.w	r8, #0
 810cf3c:	d005      	beq.n	810cf4a <_dtoa_r+0x982>
 810cf3e:	45b8      	cmp	r8, r7
 810cf40:	d003      	beq.n	810cf4a <_dtoa_r+0x982>
 810cf42:	4641      	mov	r1, r8
 810cf44:	4620      	mov	r0, r4
 810cf46:	f000 ff35 	bl	810ddb4 <_Bfree>
 810cf4a:	4639      	mov	r1, r7
 810cf4c:	4620      	mov	r0, r4
 810cf4e:	f000 ff31 	bl	810ddb4 <_Bfree>
 810cf52:	e6a5      	b.n	810cca0 <_dtoa_r+0x6d8>
 810cf54:	2600      	movs	r6, #0
 810cf56:	4637      	mov	r7, r6
 810cf58:	e7e1      	b.n	810cf1e <_dtoa_r+0x956>
 810cf5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 810cf5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810cf60:	4637      	mov	r7, r6
 810cf62:	e599      	b.n	810ca98 <_dtoa_r+0x4d0>
 810cf64:	9b08      	ldr	r3, [sp, #32]
 810cf66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810cf6a:	2b00      	cmp	r3, #0
 810cf6c:	f000 80fd 	beq.w	810d16a <_dtoa_r+0xba2>
 810cf70:	2d00      	cmp	r5, #0
 810cf72:	dd05      	ble.n	810cf80 <_dtoa_r+0x9b8>
 810cf74:	4639      	mov	r1, r7
 810cf76:	462a      	mov	r2, r5
 810cf78:	4620      	mov	r0, r4
 810cf7a:	f001 f937 	bl	810e1ec <__lshift>
 810cf7e:	4607      	mov	r7, r0
 810cf80:	9b06      	ldr	r3, [sp, #24]
 810cf82:	2b00      	cmp	r3, #0
 810cf84:	d05c      	beq.n	810d040 <_dtoa_r+0xa78>
 810cf86:	6879      	ldr	r1, [r7, #4]
 810cf88:	4620      	mov	r0, r4
 810cf8a:	f000 fed3 	bl	810dd34 <_Balloc>
 810cf8e:	4605      	mov	r5, r0
 810cf90:	b928      	cbnz	r0, 810cf9e <_dtoa_r+0x9d6>
 810cf92:	4b80      	ldr	r3, [pc, #512]	; (810d194 <_dtoa_r+0xbcc>)
 810cf94:	4602      	mov	r2, r0
 810cf96:	f240 21ea 	movw	r1, #746	; 0x2ea
 810cf9a:	f7ff bb2e 	b.w	810c5fa <_dtoa_r+0x32>
 810cf9e:	693a      	ldr	r2, [r7, #16]
 810cfa0:	3202      	adds	r2, #2
 810cfa2:	0092      	lsls	r2, r2, #2
 810cfa4:	f107 010c 	add.w	r1, r7, #12
 810cfa8:	300c      	adds	r0, #12
 810cfaa:	f7fd fa17 	bl	810a3dc <memcpy>
 810cfae:	2201      	movs	r2, #1
 810cfb0:	4629      	mov	r1, r5
 810cfb2:	4620      	mov	r0, r4
 810cfb4:	f001 f91a 	bl	810e1ec <__lshift>
 810cfb8:	9b00      	ldr	r3, [sp, #0]
 810cfba:	3301      	adds	r3, #1
 810cfbc:	9301      	str	r3, [sp, #4]
 810cfbe:	9b00      	ldr	r3, [sp, #0]
 810cfc0:	444b      	add	r3, r9
 810cfc2:	9307      	str	r3, [sp, #28]
 810cfc4:	9b02      	ldr	r3, [sp, #8]
 810cfc6:	f003 0301 	and.w	r3, r3, #1
 810cfca:	46b8      	mov	r8, r7
 810cfcc:	9306      	str	r3, [sp, #24]
 810cfce:	4607      	mov	r7, r0
 810cfd0:	9b01      	ldr	r3, [sp, #4]
 810cfd2:	4631      	mov	r1, r6
 810cfd4:	3b01      	subs	r3, #1
 810cfd6:	4658      	mov	r0, fp
 810cfd8:	9302      	str	r3, [sp, #8]
 810cfda:	f7ff fa6a 	bl	810c4b2 <quorem>
 810cfde:	4603      	mov	r3, r0
 810cfe0:	3330      	adds	r3, #48	; 0x30
 810cfe2:	9004      	str	r0, [sp, #16]
 810cfe4:	4641      	mov	r1, r8
 810cfe6:	4658      	mov	r0, fp
 810cfe8:	9308      	str	r3, [sp, #32]
 810cfea:	f001 f96b 	bl	810e2c4 <__mcmp>
 810cfee:	463a      	mov	r2, r7
 810cff0:	4681      	mov	r9, r0
 810cff2:	4631      	mov	r1, r6
 810cff4:	4620      	mov	r0, r4
 810cff6:	f001 f981 	bl	810e2fc <__mdiff>
 810cffa:	68c2      	ldr	r2, [r0, #12]
 810cffc:	9b08      	ldr	r3, [sp, #32]
 810cffe:	4605      	mov	r5, r0
 810d000:	bb02      	cbnz	r2, 810d044 <_dtoa_r+0xa7c>
 810d002:	4601      	mov	r1, r0
 810d004:	4658      	mov	r0, fp
 810d006:	f001 f95d 	bl	810e2c4 <__mcmp>
 810d00a:	9b08      	ldr	r3, [sp, #32]
 810d00c:	4602      	mov	r2, r0
 810d00e:	4629      	mov	r1, r5
 810d010:	4620      	mov	r0, r4
 810d012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 810d016:	f000 fecd 	bl	810ddb4 <_Bfree>
 810d01a:	9b05      	ldr	r3, [sp, #20]
 810d01c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d01e:	9d01      	ldr	r5, [sp, #4]
 810d020:	ea43 0102 	orr.w	r1, r3, r2
 810d024:	9b06      	ldr	r3, [sp, #24]
 810d026:	430b      	orrs	r3, r1
 810d028:	9b08      	ldr	r3, [sp, #32]
 810d02a:	d10d      	bne.n	810d048 <_dtoa_r+0xa80>
 810d02c:	2b39      	cmp	r3, #57	; 0x39
 810d02e:	d029      	beq.n	810d084 <_dtoa_r+0xabc>
 810d030:	f1b9 0f00 	cmp.w	r9, #0
 810d034:	dd01      	ble.n	810d03a <_dtoa_r+0xa72>
 810d036:	9b04      	ldr	r3, [sp, #16]
 810d038:	3331      	adds	r3, #49	; 0x31
 810d03a:	9a02      	ldr	r2, [sp, #8]
 810d03c:	7013      	strb	r3, [r2, #0]
 810d03e:	e774      	b.n	810cf2a <_dtoa_r+0x962>
 810d040:	4638      	mov	r0, r7
 810d042:	e7b9      	b.n	810cfb8 <_dtoa_r+0x9f0>
 810d044:	2201      	movs	r2, #1
 810d046:	e7e2      	b.n	810d00e <_dtoa_r+0xa46>
 810d048:	f1b9 0f00 	cmp.w	r9, #0
 810d04c:	db06      	blt.n	810d05c <_dtoa_r+0xa94>
 810d04e:	9905      	ldr	r1, [sp, #20]
 810d050:	ea41 0909 	orr.w	r9, r1, r9
 810d054:	9906      	ldr	r1, [sp, #24]
 810d056:	ea59 0101 	orrs.w	r1, r9, r1
 810d05a:	d120      	bne.n	810d09e <_dtoa_r+0xad6>
 810d05c:	2a00      	cmp	r2, #0
 810d05e:	ddec      	ble.n	810d03a <_dtoa_r+0xa72>
 810d060:	4659      	mov	r1, fp
 810d062:	2201      	movs	r2, #1
 810d064:	4620      	mov	r0, r4
 810d066:	9301      	str	r3, [sp, #4]
 810d068:	f001 f8c0 	bl	810e1ec <__lshift>
 810d06c:	4631      	mov	r1, r6
 810d06e:	4683      	mov	fp, r0
 810d070:	f001 f928 	bl	810e2c4 <__mcmp>
 810d074:	2800      	cmp	r0, #0
 810d076:	9b01      	ldr	r3, [sp, #4]
 810d078:	dc02      	bgt.n	810d080 <_dtoa_r+0xab8>
 810d07a:	d1de      	bne.n	810d03a <_dtoa_r+0xa72>
 810d07c:	07da      	lsls	r2, r3, #31
 810d07e:	d5dc      	bpl.n	810d03a <_dtoa_r+0xa72>
 810d080:	2b39      	cmp	r3, #57	; 0x39
 810d082:	d1d8      	bne.n	810d036 <_dtoa_r+0xa6e>
 810d084:	9a02      	ldr	r2, [sp, #8]
 810d086:	2339      	movs	r3, #57	; 0x39
 810d088:	7013      	strb	r3, [r2, #0]
 810d08a:	462b      	mov	r3, r5
 810d08c:	461d      	mov	r5, r3
 810d08e:	3b01      	subs	r3, #1
 810d090:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810d094:	2a39      	cmp	r2, #57	; 0x39
 810d096:	d050      	beq.n	810d13a <_dtoa_r+0xb72>
 810d098:	3201      	adds	r2, #1
 810d09a:	701a      	strb	r2, [r3, #0]
 810d09c:	e745      	b.n	810cf2a <_dtoa_r+0x962>
 810d09e:	2a00      	cmp	r2, #0
 810d0a0:	dd03      	ble.n	810d0aa <_dtoa_r+0xae2>
 810d0a2:	2b39      	cmp	r3, #57	; 0x39
 810d0a4:	d0ee      	beq.n	810d084 <_dtoa_r+0xabc>
 810d0a6:	3301      	adds	r3, #1
 810d0a8:	e7c7      	b.n	810d03a <_dtoa_r+0xa72>
 810d0aa:	9a01      	ldr	r2, [sp, #4]
 810d0ac:	9907      	ldr	r1, [sp, #28]
 810d0ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 810d0b2:	428a      	cmp	r2, r1
 810d0b4:	d02a      	beq.n	810d10c <_dtoa_r+0xb44>
 810d0b6:	4659      	mov	r1, fp
 810d0b8:	2300      	movs	r3, #0
 810d0ba:	220a      	movs	r2, #10
 810d0bc:	4620      	mov	r0, r4
 810d0be:	f000 fe9b 	bl	810ddf8 <__multadd>
 810d0c2:	45b8      	cmp	r8, r7
 810d0c4:	4683      	mov	fp, r0
 810d0c6:	f04f 0300 	mov.w	r3, #0
 810d0ca:	f04f 020a 	mov.w	r2, #10
 810d0ce:	4641      	mov	r1, r8
 810d0d0:	4620      	mov	r0, r4
 810d0d2:	d107      	bne.n	810d0e4 <_dtoa_r+0xb1c>
 810d0d4:	f000 fe90 	bl	810ddf8 <__multadd>
 810d0d8:	4680      	mov	r8, r0
 810d0da:	4607      	mov	r7, r0
 810d0dc:	9b01      	ldr	r3, [sp, #4]
 810d0de:	3301      	adds	r3, #1
 810d0e0:	9301      	str	r3, [sp, #4]
 810d0e2:	e775      	b.n	810cfd0 <_dtoa_r+0xa08>
 810d0e4:	f000 fe88 	bl	810ddf8 <__multadd>
 810d0e8:	4639      	mov	r1, r7
 810d0ea:	4680      	mov	r8, r0
 810d0ec:	2300      	movs	r3, #0
 810d0ee:	220a      	movs	r2, #10
 810d0f0:	4620      	mov	r0, r4
 810d0f2:	f000 fe81 	bl	810ddf8 <__multadd>
 810d0f6:	4607      	mov	r7, r0
 810d0f8:	e7f0      	b.n	810d0dc <_dtoa_r+0xb14>
 810d0fa:	f1b9 0f00 	cmp.w	r9, #0
 810d0fe:	9a00      	ldr	r2, [sp, #0]
 810d100:	bfcc      	ite	gt
 810d102:	464d      	movgt	r5, r9
 810d104:	2501      	movle	r5, #1
 810d106:	4415      	add	r5, r2
 810d108:	f04f 0800 	mov.w	r8, #0
 810d10c:	4659      	mov	r1, fp
 810d10e:	2201      	movs	r2, #1
 810d110:	4620      	mov	r0, r4
 810d112:	9301      	str	r3, [sp, #4]
 810d114:	f001 f86a 	bl	810e1ec <__lshift>
 810d118:	4631      	mov	r1, r6
 810d11a:	4683      	mov	fp, r0
 810d11c:	f001 f8d2 	bl	810e2c4 <__mcmp>
 810d120:	2800      	cmp	r0, #0
 810d122:	dcb2      	bgt.n	810d08a <_dtoa_r+0xac2>
 810d124:	d102      	bne.n	810d12c <_dtoa_r+0xb64>
 810d126:	9b01      	ldr	r3, [sp, #4]
 810d128:	07db      	lsls	r3, r3, #31
 810d12a:	d4ae      	bmi.n	810d08a <_dtoa_r+0xac2>
 810d12c:	462b      	mov	r3, r5
 810d12e:	461d      	mov	r5, r3
 810d130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810d134:	2a30      	cmp	r2, #48	; 0x30
 810d136:	d0fa      	beq.n	810d12e <_dtoa_r+0xb66>
 810d138:	e6f7      	b.n	810cf2a <_dtoa_r+0x962>
 810d13a:	9a00      	ldr	r2, [sp, #0]
 810d13c:	429a      	cmp	r2, r3
 810d13e:	d1a5      	bne.n	810d08c <_dtoa_r+0xac4>
 810d140:	f10a 0a01 	add.w	sl, sl, #1
 810d144:	2331      	movs	r3, #49	; 0x31
 810d146:	e779      	b.n	810d03c <_dtoa_r+0xa74>
 810d148:	4b13      	ldr	r3, [pc, #76]	; (810d198 <_dtoa_r+0xbd0>)
 810d14a:	f7ff baaf 	b.w	810c6ac <_dtoa_r+0xe4>
 810d14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d150:	2b00      	cmp	r3, #0
 810d152:	f47f aa86 	bne.w	810c662 <_dtoa_r+0x9a>
 810d156:	4b11      	ldr	r3, [pc, #68]	; (810d19c <_dtoa_r+0xbd4>)
 810d158:	f7ff baa8 	b.w	810c6ac <_dtoa_r+0xe4>
 810d15c:	f1b9 0f00 	cmp.w	r9, #0
 810d160:	dc03      	bgt.n	810d16a <_dtoa_r+0xba2>
 810d162:	9b05      	ldr	r3, [sp, #20]
 810d164:	2b02      	cmp	r3, #2
 810d166:	f73f aec9 	bgt.w	810cefc <_dtoa_r+0x934>
 810d16a:	9d00      	ldr	r5, [sp, #0]
 810d16c:	4631      	mov	r1, r6
 810d16e:	4658      	mov	r0, fp
 810d170:	f7ff f99f 	bl	810c4b2 <quorem>
 810d174:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810d178:	f805 3b01 	strb.w	r3, [r5], #1
 810d17c:	9a00      	ldr	r2, [sp, #0]
 810d17e:	1aaa      	subs	r2, r5, r2
 810d180:	4591      	cmp	r9, r2
 810d182:	ddba      	ble.n	810d0fa <_dtoa_r+0xb32>
 810d184:	4659      	mov	r1, fp
 810d186:	2300      	movs	r3, #0
 810d188:	220a      	movs	r2, #10
 810d18a:	4620      	mov	r0, r4
 810d18c:	f000 fe34 	bl	810ddf8 <__multadd>
 810d190:	4683      	mov	fp, r0
 810d192:	e7eb      	b.n	810d16c <_dtoa_r+0xba4>
 810d194:	0810f12c 	.word	0x0810f12c
 810d198:	0810ef29 	.word	0x0810ef29
 810d19c:	0810f0a9 	.word	0x0810f0a9

0810d1a0 <__sflush_r>:
 810d1a0:	898a      	ldrh	r2, [r1, #12]
 810d1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d1a6:	4605      	mov	r5, r0
 810d1a8:	0710      	lsls	r0, r2, #28
 810d1aa:	460c      	mov	r4, r1
 810d1ac:	d458      	bmi.n	810d260 <__sflush_r+0xc0>
 810d1ae:	684b      	ldr	r3, [r1, #4]
 810d1b0:	2b00      	cmp	r3, #0
 810d1b2:	dc05      	bgt.n	810d1c0 <__sflush_r+0x20>
 810d1b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810d1b6:	2b00      	cmp	r3, #0
 810d1b8:	dc02      	bgt.n	810d1c0 <__sflush_r+0x20>
 810d1ba:	2000      	movs	r0, #0
 810d1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d1c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d1c2:	2e00      	cmp	r6, #0
 810d1c4:	d0f9      	beq.n	810d1ba <__sflush_r+0x1a>
 810d1c6:	2300      	movs	r3, #0
 810d1c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810d1cc:	682f      	ldr	r7, [r5, #0]
 810d1ce:	602b      	str	r3, [r5, #0]
 810d1d0:	d032      	beq.n	810d238 <__sflush_r+0x98>
 810d1d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810d1d4:	89a3      	ldrh	r3, [r4, #12]
 810d1d6:	075a      	lsls	r2, r3, #29
 810d1d8:	d505      	bpl.n	810d1e6 <__sflush_r+0x46>
 810d1da:	6863      	ldr	r3, [r4, #4]
 810d1dc:	1ac0      	subs	r0, r0, r3
 810d1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810d1e0:	b10b      	cbz	r3, 810d1e6 <__sflush_r+0x46>
 810d1e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810d1e4:	1ac0      	subs	r0, r0, r3
 810d1e6:	2300      	movs	r3, #0
 810d1e8:	4602      	mov	r2, r0
 810d1ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d1ec:	6a21      	ldr	r1, [r4, #32]
 810d1ee:	4628      	mov	r0, r5
 810d1f0:	47b0      	blx	r6
 810d1f2:	1c43      	adds	r3, r0, #1
 810d1f4:	89a3      	ldrh	r3, [r4, #12]
 810d1f6:	d106      	bne.n	810d206 <__sflush_r+0x66>
 810d1f8:	6829      	ldr	r1, [r5, #0]
 810d1fa:	291d      	cmp	r1, #29
 810d1fc:	d82c      	bhi.n	810d258 <__sflush_r+0xb8>
 810d1fe:	4a2a      	ldr	r2, [pc, #168]	; (810d2a8 <__sflush_r+0x108>)
 810d200:	40ca      	lsrs	r2, r1
 810d202:	07d6      	lsls	r6, r2, #31
 810d204:	d528      	bpl.n	810d258 <__sflush_r+0xb8>
 810d206:	2200      	movs	r2, #0
 810d208:	6062      	str	r2, [r4, #4]
 810d20a:	04d9      	lsls	r1, r3, #19
 810d20c:	6922      	ldr	r2, [r4, #16]
 810d20e:	6022      	str	r2, [r4, #0]
 810d210:	d504      	bpl.n	810d21c <__sflush_r+0x7c>
 810d212:	1c42      	adds	r2, r0, #1
 810d214:	d101      	bne.n	810d21a <__sflush_r+0x7a>
 810d216:	682b      	ldr	r3, [r5, #0]
 810d218:	b903      	cbnz	r3, 810d21c <__sflush_r+0x7c>
 810d21a:	6560      	str	r0, [r4, #84]	; 0x54
 810d21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d21e:	602f      	str	r7, [r5, #0]
 810d220:	2900      	cmp	r1, #0
 810d222:	d0ca      	beq.n	810d1ba <__sflush_r+0x1a>
 810d224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d228:	4299      	cmp	r1, r3
 810d22a:	d002      	beq.n	810d232 <__sflush_r+0x92>
 810d22c:	4628      	mov	r0, r5
 810d22e:	f7fd f8eb 	bl	810a408 <_free_r>
 810d232:	2000      	movs	r0, #0
 810d234:	6360      	str	r0, [r4, #52]	; 0x34
 810d236:	e7c1      	b.n	810d1bc <__sflush_r+0x1c>
 810d238:	6a21      	ldr	r1, [r4, #32]
 810d23a:	2301      	movs	r3, #1
 810d23c:	4628      	mov	r0, r5
 810d23e:	47b0      	blx	r6
 810d240:	1c41      	adds	r1, r0, #1
 810d242:	d1c7      	bne.n	810d1d4 <__sflush_r+0x34>
 810d244:	682b      	ldr	r3, [r5, #0]
 810d246:	2b00      	cmp	r3, #0
 810d248:	d0c4      	beq.n	810d1d4 <__sflush_r+0x34>
 810d24a:	2b1d      	cmp	r3, #29
 810d24c:	d001      	beq.n	810d252 <__sflush_r+0xb2>
 810d24e:	2b16      	cmp	r3, #22
 810d250:	d101      	bne.n	810d256 <__sflush_r+0xb6>
 810d252:	602f      	str	r7, [r5, #0]
 810d254:	e7b1      	b.n	810d1ba <__sflush_r+0x1a>
 810d256:	89a3      	ldrh	r3, [r4, #12]
 810d258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d25c:	81a3      	strh	r3, [r4, #12]
 810d25e:	e7ad      	b.n	810d1bc <__sflush_r+0x1c>
 810d260:	690f      	ldr	r7, [r1, #16]
 810d262:	2f00      	cmp	r7, #0
 810d264:	d0a9      	beq.n	810d1ba <__sflush_r+0x1a>
 810d266:	0793      	lsls	r3, r2, #30
 810d268:	680e      	ldr	r6, [r1, #0]
 810d26a:	bf08      	it	eq
 810d26c:	694b      	ldreq	r3, [r1, #20]
 810d26e:	600f      	str	r7, [r1, #0]
 810d270:	bf18      	it	ne
 810d272:	2300      	movne	r3, #0
 810d274:	eba6 0807 	sub.w	r8, r6, r7
 810d278:	608b      	str	r3, [r1, #8]
 810d27a:	f1b8 0f00 	cmp.w	r8, #0
 810d27e:	dd9c      	ble.n	810d1ba <__sflush_r+0x1a>
 810d280:	6a21      	ldr	r1, [r4, #32]
 810d282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810d284:	4643      	mov	r3, r8
 810d286:	463a      	mov	r2, r7
 810d288:	4628      	mov	r0, r5
 810d28a:	47b0      	blx	r6
 810d28c:	2800      	cmp	r0, #0
 810d28e:	dc06      	bgt.n	810d29e <__sflush_r+0xfe>
 810d290:	89a3      	ldrh	r3, [r4, #12]
 810d292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d296:	81a3      	strh	r3, [r4, #12]
 810d298:	f04f 30ff 	mov.w	r0, #4294967295
 810d29c:	e78e      	b.n	810d1bc <__sflush_r+0x1c>
 810d29e:	4407      	add	r7, r0
 810d2a0:	eba8 0800 	sub.w	r8, r8, r0
 810d2a4:	e7e9      	b.n	810d27a <__sflush_r+0xda>
 810d2a6:	bf00      	nop
 810d2a8:	20400001 	.word	0x20400001

0810d2ac <_fflush_r>:
 810d2ac:	b538      	push	{r3, r4, r5, lr}
 810d2ae:	690b      	ldr	r3, [r1, #16]
 810d2b0:	4605      	mov	r5, r0
 810d2b2:	460c      	mov	r4, r1
 810d2b4:	b913      	cbnz	r3, 810d2bc <_fflush_r+0x10>
 810d2b6:	2500      	movs	r5, #0
 810d2b8:	4628      	mov	r0, r5
 810d2ba:	bd38      	pop	{r3, r4, r5, pc}
 810d2bc:	b118      	cbz	r0, 810d2c6 <_fflush_r+0x1a>
 810d2be:	6983      	ldr	r3, [r0, #24]
 810d2c0:	b90b      	cbnz	r3, 810d2c6 <_fflush_r+0x1a>
 810d2c2:	f000 f887 	bl	810d3d4 <__sinit>
 810d2c6:	4b14      	ldr	r3, [pc, #80]	; (810d318 <_fflush_r+0x6c>)
 810d2c8:	429c      	cmp	r4, r3
 810d2ca:	d11b      	bne.n	810d304 <_fflush_r+0x58>
 810d2cc:	686c      	ldr	r4, [r5, #4]
 810d2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d2d2:	2b00      	cmp	r3, #0
 810d2d4:	d0ef      	beq.n	810d2b6 <_fflush_r+0xa>
 810d2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810d2d8:	07d0      	lsls	r0, r2, #31
 810d2da:	d404      	bmi.n	810d2e6 <_fflush_r+0x3a>
 810d2dc:	0599      	lsls	r1, r3, #22
 810d2de:	d402      	bmi.n	810d2e6 <_fflush_r+0x3a>
 810d2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d2e2:	f000 fc88 	bl	810dbf6 <__retarget_lock_acquire_recursive>
 810d2e6:	4628      	mov	r0, r5
 810d2e8:	4621      	mov	r1, r4
 810d2ea:	f7ff ff59 	bl	810d1a0 <__sflush_r>
 810d2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810d2f0:	07da      	lsls	r2, r3, #31
 810d2f2:	4605      	mov	r5, r0
 810d2f4:	d4e0      	bmi.n	810d2b8 <_fflush_r+0xc>
 810d2f6:	89a3      	ldrh	r3, [r4, #12]
 810d2f8:	059b      	lsls	r3, r3, #22
 810d2fa:	d4dd      	bmi.n	810d2b8 <_fflush_r+0xc>
 810d2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d2fe:	f000 fc7b 	bl	810dbf8 <__retarget_lock_release_recursive>
 810d302:	e7d9      	b.n	810d2b8 <_fflush_r+0xc>
 810d304:	4b05      	ldr	r3, [pc, #20]	; (810d31c <_fflush_r+0x70>)
 810d306:	429c      	cmp	r4, r3
 810d308:	d101      	bne.n	810d30e <_fflush_r+0x62>
 810d30a:	68ac      	ldr	r4, [r5, #8]
 810d30c:	e7df      	b.n	810d2ce <_fflush_r+0x22>
 810d30e:	4b04      	ldr	r3, [pc, #16]	; (810d320 <_fflush_r+0x74>)
 810d310:	429c      	cmp	r4, r3
 810d312:	bf08      	it	eq
 810d314:	68ec      	ldreq	r4, [r5, #12]
 810d316:	e7da      	b.n	810d2ce <_fflush_r+0x22>
 810d318:	0810f160 	.word	0x0810f160
 810d31c:	0810f180 	.word	0x0810f180
 810d320:	0810f140 	.word	0x0810f140

0810d324 <std>:
 810d324:	2300      	movs	r3, #0
 810d326:	b510      	push	{r4, lr}
 810d328:	4604      	mov	r4, r0
 810d32a:	e9c0 3300 	strd	r3, r3, [r0]
 810d32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810d332:	6083      	str	r3, [r0, #8]
 810d334:	8181      	strh	r1, [r0, #12]
 810d336:	6643      	str	r3, [r0, #100]	; 0x64
 810d338:	81c2      	strh	r2, [r0, #14]
 810d33a:	6183      	str	r3, [r0, #24]
 810d33c:	4619      	mov	r1, r3
 810d33e:	2208      	movs	r2, #8
 810d340:	305c      	adds	r0, #92	; 0x5c
 810d342:	f7fd f859 	bl	810a3f8 <memset>
 810d346:	4b05      	ldr	r3, [pc, #20]	; (810d35c <std+0x38>)
 810d348:	6263      	str	r3, [r4, #36]	; 0x24
 810d34a:	4b05      	ldr	r3, [pc, #20]	; (810d360 <std+0x3c>)
 810d34c:	62a3      	str	r3, [r4, #40]	; 0x28
 810d34e:	4b05      	ldr	r3, [pc, #20]	; (810d364 <std+0x40>)
 810d350:	62e3      	str	r3, [r4, #44]	; 0x2c
 810d352:	4b05      	ldr	r3, [pc, #20]	; (810d368 <std+0x44>)
 810d354:	6224      	str	r4, [r4, #32]
 810d356:	6323      	str	r3, [r4, #48]	; 0x30
 810d358:	bd10      	pop	{r4, pc}
 810d35a:	bf00      	nop
 810d35c:	0810ea55 	.word	0x0810ea55
 810d360:	0810ea77 	.word	0x0810ea77
 810d364:	0810eaaf 	.word	0x0810eaaf
 810d368:	0810ead3 	.word	0x0810ead3

0810d36c <_cleanup_r>:
 810d36c:	4901      	ldr	r1, [pc, #4]	; (810d374 <_cleanup_r+0x8>)
 810d36e:	f000 b8af 	b.w	810d4d0 <_fwalk_reent>
 810d372:	bf00      	nop
 810d374:	0810d2ad 	.word	0x0810d2ad

0810d378 <__sfmoreglue>:
 810d378:	b570      	push	{r4, r5, r6, lr}
 810d37a:	1e4a      	subs	r2, r1, #1
 810d37c:	2568      	movs	r5, #104	; 0x68
 810d37e:	4355      	muls	r5, r2
 810d380:	460e      	mov	r6, r1
 810d382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810d386:	f7fd f88f 	bl	810a4a8 <_malloc_r>
 810d38a:	4604      	mov	r4, r0
 810d38c:	b140      	cbz	r0, 810d3a0 <__sfmoreglue+0x28>
 810d38e:	2100      	movs	r1, #0
 810d390:	e9c0 1600 	strd	r1, r6, [r0]
 810d394:	300c      	adds	r0, #12
 810d396:	60a0      	str	r0, [r4, #8]
 810d398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810d39c:	f7fd f82c 	bl	810a3f8 <memset>
 810d3a0:	4620      	mov	r0, r4
 810d3a2:	bd70      	pop	{r4, r5, r6, pc}

0810d3a4 <__sfp_lock_acquire>:
 810d3a4:	4801      	ldr	r0, [pc, #4]	; (810d3ac <__sfp_lock_acquire+0x8>)
 810d3a6:	f000 bc26 	b.w	810dbf6 <__retarget_lock_acquire_recursive>
 810d3aa:	bf00      	nop
 810d3ac:	10000620 	.word	0x10000620

0810d3b0 <__sfp_lock_release>:
 810d3b0:	4801      	ldr	r0, [pc, #4]	; (810d3b8 <__sfp_lock_release+0x8>)
 810d3b2:	f000 bc21 	b.w	810dbf8 <__retarget_lock_release_recursive>
 810d3b6:	bf00      	nop
 810d3b8:	10000620 	.word	0x10000620

0810d3bc <__sinit_lock_acquire>:
 810d3bc:	4801      	ldr	r0, [pc, #4]	; (810d3c4 <__sinit_lock_acquire+0x8>)
 810d3be:	f000 bc1a 	b.w	810dbf6 <__retarget_lock_acquire_recursive>
 810d3c2:	bf00      	nop
 810d3c4:	1000061b 	.word	0x1000061b

0810d3c8 <__sinit_lock_release>:
 810d3c8:	4801      	ldr	r0, [pc, #4]	; (810d3d0 <__sinit_lock_release+0x8>)
 810d3ca:	f000 bc15 	b.w	810dbf8 <__retarget_lock_release_recursive>
 810d3ce:	bf00      	nop
 810d3d0:	1000061b 	.word	0x1000061b

0810d3d4 <__sinit>:
 810d3d4:	b510      	push	{r4, lr}
 810d3d6:	4604      	mov	r4, r0
 810d3d8:	f7ff fff0 	bl	810d3bc <__sinit_lock_acquire>
 810d3dc:	69a3      	ldr	r3, [r4, #24]
 810d3de:	b11b      	cbz	r3, 810d3e8 <__sinit+0x14>
 810d3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810d3e4:	f7ff bff0 	b.w	810d3c8 <__sinit_lock_release>
 810d3e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810d3ec:	6523      	str	r3, [r4, #80]	; 0x50
 810d3ee:	4b13      	ldr	r3, [pc, #76]	; (810d43c <__sinit+0x68>)
 810d3f0:	4a13      	ldr	r2, [pc, #76]	; (810d440 <__sinit+0x6c>)
 810d3f2:	681b      	ldr	r3, [r3, #0]
 810d3f4:	62a2      	str	r2, [r4, #40]	; 0x28
 810d3f6:	42a3      	cmp	r3, r4
 810d3f8:	bf04      	itt	eq
 810d3fa:	2301      	moveq	r3, #1
 810d3fc:	61a3      	streq	r3, [r4, #24]
 810d3fe:	4620      	mov	r0, r4
 810d400:	f000 f820 	bl	810d444 <__sfp>
 810d404:	6060      	str	r0, [r4, #4]
 810d406:	4620      	mov	r0, r4
 810d408:	f000 f81c 	bl	810d444 <__sfp>
 810d40c:	60a0      	str	r0, [r4, #8]
 810d40e:	4620      	mov	r0, r4
 810d410:	f000 f818 	bl	810d444 <__sfp>
 810d414:	2200      	movs	r2, #0
 810d416:	60e0      	str	r0, [r4, #12]
 810d418:	2104      	movs	r1, #4
 810d41a:	6860      	ldr	r0, [r4, #4]
 810d41c:	f7ff ff82 	bl	810d324 <std>
 810d420:	68a0      	ldr	r0, [r4, #8]
 810d422:	2201      	movs	r2, #1
 810d424:	2109      	movs	r1, #9
 810d426:	f7ff ff7d 	bl	810d324 <std>
 810d42a:	68e0      	ldr	r0, [r4, #12]
 810d42c:	2202      	movs	r2, #2
 810d42e:	2112      	movs	r1, #18
 810d430:	f7ff ff78 	bl	810d324 <std>
 810d434:	2301      	movs	r3, #1
 810d436:	61a3      	str	r3, [r4, #24]
 810d438:	e7d2      	b.n	810d3e0 <__sinit+0xc>
 810d43a:	bf00      	nop
 810d43c:	0810ef04 	.word	0x0810ef04
 810d440:	0810d36d 	.word	0x0810d36d

0810d444 <__sfp>:
 810d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d446:	4607      	mov	r7, r0
 810d448:	f7ff ffac 	bl	810d3a4 <__sfp_lock_acquire>
 810d44c:	4b1e      	ldr	r3, [pc, #120]	; (810d4c8 <__sfp+0x84>)
 810d44e:	681e      	ldr	r6, [r3, #0]
 810d450:	69b3      	ldr	r3, [r6, #24]
 810d452:	b913      	cbnz	r3, 810d45a <__sfp+0x16>
 810d454:	4630      	mov	r0, r6
 810d456:	f7ff ffbd 	bl	810d3d4 <__sinit>
 810d45a:	3648      	adds	r6, #72	; 0x48
 810d45c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810d460:	3b01      	subs	r3, #1
 810d462:	d503      	bpl.n	810d46c <__sfp+0x28>
 810d464:	6833      	ldr	r3, [r6, #0]
 810d466:	b30b      	cbz	r3, 810d4ac <__sfp+0x68>
 810d468:	6836      	ldr	r6, [r6, #0]
 810d46a:	e7f7      	b.n	810d45c <__sfp+0x18>
 810d46c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810d470:	b9d5      	cbnz	r5, 810d4a8 <__sfp+0x64>
 810d472:	4b16      	ldr	r3, [pc, #88]	; (810d4cc <__sfp+0x88>)
 810d474:	60e3      	str	r3, [r4, #12]
 810d476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810d47a:	6665      	str	r5, [r4, #100]	; 0x64
 810d47c:	f000 fbba 	bl	810dbf4 <__retarget_lock_init_recursive>
 810d480:	f7ff ff96 	bl	810d3b0 <__sfp_lock_release>
 810d484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810d488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810d48c:	6025      	str	r5, [r4, #0]
 810d48e:	61a5      	str	r5, [r4, #24]
 810d490:	2208      	movs	r2, #8
 810d492:	4629      	mov	r1, r5
 810d494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810d498:	f7fc ffae 	bl	810a3f8 <memset>
 810d49c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810d4a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810d4a4:	4620      	mov	r0, r4
 810d4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d4a8:	3468      	adds	r4, #104	; 0x68
 810d4aa:	e7d9      	b.n	810d460 <__sfp+0x1c>
 810d4ac:	2104      	movs	r1, #4
 810d4ae:	4638      	mov	r0, r7
 810d4b0:	f7ff ff62 	bl	810d378 <__sfmoreglue>
 810d4b4:	4604      	mov	r4, r0
 810d4b6:	6030      	str	r0, [r6, #0]
 810d4b8:	2800      	cmp	r0, #0
 810d4ba:	d1d5      	bne.n	810d468 <__sfp+0x24>
 810d4bc:	f7ff ff78 	bl	810d3b0 <__sfp_lock_release>
 810d4c0:	230c      	movs	r3, #12
 810d4c2:	603b      	str	r3, [r7, #0]
 810d4c4:	e7ee      	b.n	810d4a4 <__sfp+0x60>
 810d4c6:	bf00      	nop
 810d4c8:	0810ef04 	.word	0x0810ef04
 810d4cc:	ffff0001 	.word	0xffff0001

0810d4d0 <_fwalk_reent>:
 810d4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d4d4:	4606      	mov	r6, r0
 810d4d6:	4688      	mov	r8, r1
 810d4d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810d4dc:	2700      	movs	r7, #0
 810d4de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810d4e2:	f1b9 0901 	subs.w	r9, r9, #1
 810d4e6:	d505      	bpl.n	810d4f4 <_fwalk_reent+0x24>
 810d4e8:	6824      	ldr	r4, [r4, #0]
 810d4ea:	2c00      	cmp	r4, #0
 810d4ec:	d1f7      	bne.n	810d4de <_fwalk_reent+0xe>
 810d4ee:	4638      	mov	r0, r7
 810d4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d4f4:	89ab      	ldrh	r3, [r5, #12]
 810d4f6:	2b01      	cmp	r3, #1
 810d4f8:	d907      	bls.n	810d50a <_fwalk_reent+0x3a>
 810d4fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810d4fe:	3301      	adds	r3, #1
 810d500:	d003      	beq.n	810d50a <_fwalk_reent+0x3a>
 810d502:	4629      	mov	r1, r5
 810d504:	4630      	mov	r0, r6
 810d506:	47c0      	blx	r8
 810d508:	4307      	orrs	r7, r0
 810d50a:	3568      	adds	r5, #104	; 0x68
 810d50c:	e7e9      	b.n	810d4e2 <_fwalk_reent+0x12>

0810d50e <rshift>:
 810d50e:	6903      	ldr	r3, [r0, #16]
 810d510:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810d514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d518:	ea4f 1261 	mov.w	r2, r1, asr #5
 810d51c:	f100 0414 	add.w	r4, r0, #20
 810d520:	dd45      	ble.n	810d5ae <rshift+0xa0>
 810d522:	f011 011f 	ands.w	r1, r1, #31
 810d526:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810d52a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810d52e:	d10c      	bne.n	810d54a <rshift+0x3c>
 810d530:	f100 0710 	add.w	r7, r0, #16
 810d534:	4629      	mov	r1, r5
 810d536:	42b1      	cmp	r1, r6
 810d538:	d334      	bcc.n	810d5a4 <rshift+0x96>
 810d53a:	1a9b      	subs	r3, r3, r2
 810d53c:	009b      	lsls	r3, r3, #2
 810d53e:	1eea      	subs	r2, r5, #3
 810d540:	4296      	cmp	r6, r2
 810d542:	bf38      	it	cc
 810d544:	2300      	movcc	r3, #0
 810d546:	4423      	add	r3, r4
 810d548:	e015      	b.n	810d576 <rshift+0x68>
 810d54a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810d54e:	f1c1 0820 	rsb	r8, r1, #32
 810d552:	40cf      	lsrs	r7, r1
 810d554:	f105 0e04 	add.w	lr, r5, #4
 810d558:	46a1      	mov	r9, r4
 810d55a:	4576      	cmp	r6, lr
 810d55c:	46f4      	mov	ip, lr
 810d55e:	d815      	bhi.n	810d58c <rshift+0x7e>
 810d560:	1a9b      	subs	r3, r3, r2
 810d562:	009a      	lsls	r2, r3, #2
 810d564:	3a04      	subs	r2, #4
 810d566:	3501      	adds	r5, #1
 810d568:	42ae      	cmp	r6, r5
 810d56a:	bf38      	it	cc
 810d56c:	2200      	movcc	r2, #0
 810d56e:	18a3      	adds	r3, r4, r2
 810d570:	50a7      	str	r7, [r4, r2]
 810d572:	b107      	cbz	r7, 810d576 <rshift+0x68>
 810d574:	3304      	adds	r3, #4
 810d576:	1b1a      	subs	r2, r3, r4
 810d578:	42a3      	cmp	r3, r4
 810d57a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810d57e:	bf08      	it	eq
 810d580:	2300      	moveq	r3, #0
 810d582:	6102      	str	r2, [r0, #16]
 810d584:	bf08      	it	eq
 810d586:	6143      	streq	r3, [r0, #20]
 810d588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d58c:	f8dc c000 	ldr.w	ip, [ip]
 810d590:	fa0c fc08 	lsl.w	ip, ip, r8
 810d594:	ea4c 0707 	orr.w	r7, ip, r7
 810d598:	f849 7b04 	str.w	r7, [r9], #4
 810d59c:	f85e 7b04 	ldr.w	r7, [lr], #4
 810d5a0:	40cf      	lsrs	r7, r1
 810d5a2:	e7da      	b.n	810d55a <rshift+0x4c>
 810d5a4:	f851 cb04 	ldr.w	ip, [r1], #4
 810d5a8:	f847 cf04 	str.w	ip, [r7, #4]!
 810d5ac:	e7c3      	b.n	810d536 <rshift+0x28>
 810d5ae:	4623      	mov	r3, r4
 810d5b0:	e7e1      	b.n	810d576 <rshift+0x68>

0810d5b2 <__hexdig_fun>:
 810d5b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810d5b6:	2b09      	cmp	r3, #9
 810d5b8:	d802      	bhi.n	810d5c0 <__hexdig_fun+0xe>
 810d5ba:	3820      	subs	r0, #32
 810d5bc:	b2c0      	uxtb	r0, r0
 810d5be:	4770      	bx	lr
 810d5c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810d5c4:	2b05      	cmp	r3, #5
 810d5c6:	d801      	bhi.n	810d5cc <__hexdig_fun+0x1a>
 810d5c8:	3847      	subs	r0, #71	; 0x47
 810d5ca:	e7f7      	b.n	810d5bc <__hexdig_fun+0xa>
 810d5cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810d5d0:	2b05      	cmp	r3, #5
 810d5d2:	d801      	bhi.n	810d5d8 <__hexdig_fun+0x26>
 810d5d4:	3827      	subs	r0, #39	; 0x27
 810d5d6:	e7f1      	b.n	810d5bc <__hexdig_fun+0xa>
 810d5d8:	2000      	movs	r0, #0
 810d5da:	4770      	bx	lr

0810d5dc <__gethex>:
 810d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d5e0:	ed2d 8b02 	vpush	{d8}
 810d5e4:	b089      	sub	sp, #36	; 0x24
 810d5e6:	ee08 0a10 	vmov	s16, r0
 810d5ea:	9304      	str	r3, [sp, #16]
 810d5ec:	4bbc      	ldr	r3, [pc, #752]	; (810d8e0 <__gethex+0x304>)
 810d5ee:	681b      	ldr	r3, [r3, #0]
 810d5f0:	9301      	str	r3, [sp, #4]
 810d5f2:	4618      	mov	r0, r3
 810d5f4:	468b      	mov	fp, r1
 810d5f6:	4690      	mov	r8, r2
 810d5f8:	f7f2 fe7c 	bl	81002f4 <strlen>
 810d5fc:	9b01      	ldr	r3, [sp, #4]
 810d5fe:	f8db 2000 	ldr.w	r2, [fp]
 810d602:	4403      	add	r3, r0
 810d604:	4682      	mov	sl, r0
 810d606:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810d60a:	9305      	str	r3, [sp, #20]
 810d60c:	1c93      	adds	r3, r2, #2
 810d60e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810d612:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810d616:	32fe      	adds	r2, #254	; 0xfe
 810d618:	18d1      	adds	r1, r2, r3
 810d61a:	461f      	mov	r7, r3
 810d61c:	f813 0b01 	ldrb.w	r0, [r3], #1
 810d620:	9100      	str	r1, [sp, #0]
 810d622:	2830      	cmp	r0, #48	; 0x30
 810d624:	d0f8      	beq.n	810d618 <__gethex+0x3c>
 810d626:	f7ff ffc4 	bl	810d5b2 <__hexdig_fun>
 810d62a:	4604      	mov	r4, r0
 810d62c:	2800      	cmp	r0, #0
 810d62e:	d13a      	bne.n	810d6a6 <__gethex+0xca>
 810d630:	9901      	ldr	r1, [sp, #4]
 810d632:	4652      	mov	r2, sl
 810d634:	4638      	mov	r0, r7
 810d636:	f7fd ff9b 	bl	810b570 <strncmp>
 810d63a:	4605      	mov	r5, r0
 810d63c:	2800      	cmp	r0, #0
 810d63e:	d168      	bne.n	810d712 <__gethex+0x136>
 810d640:	f817 000a 	ldrb.w	r0, [r7, sl]
 810d644:	eb07 060a 	add.w	r6, r7, sl
 810d648:	f7ff ffb3 	bl	810d5b2 <__hexdig_fun>
 810d64c:	2800      	cmp	r0, #0
 810d64e:	d062      	beq.n	810d716 <__gethex+0x13a>
 810d650:	4633      	mov	r3, r6
 810d652:	7818      	ldrb	r0, [r3, #0]
 810d654:	2830      	cmp	r0, #48	; 0x30
 810d656:	461f      	mov	r7, r3
 810d658:	f103 0301 	add.w	r3, r3, #1
 810d65c:	d0f9      	beq.n	810d652 <__gethex+0x76>
 810d65e:	f7ff ffa8 	bl	810d5b2 <__hexdig_fun>
 810d662:	2301      	movs	r3, #1
 810d664:	fab0 f480 	clz	r4, r0
 810d668:	0964      	lsrs	r4, r4, #5
 810d66a:	4635      	mov	r5, r6
 810d66c:	9300      	str	r3, [sp, #0]
 810d66e:	463a      	mov	r2, r7
 810d670:	4616      	mov	r6, r2
 810d672:	3201      	adds	r2, #1
 810d674:	7830      	ldrb	r0, [r6, #0]
 810d676:	f7ff ff9c 	bl	810d5b2 <__hexdig_fun>
 810d67a:	2800      	cmp	r0, #0
 810d67c:	d1f8      	bne.n	810d670 <__gethex+0x94>
 810d67e:	9901      	ldr	r1, [sp, #4]
 810d680:	4652      	mov	r2, sl
 810d682:	4630      	mov	r0, r6
 810d684:	f7fd ff74 	bl	810b570 <strncmp>
 810d688:	b980      	cbnz	r0, 810d6ac <__gethex+0xd0>
 810d68a:	b94d      	cbnz	r5, 810d6a0 <__gethex+0xc4>
 810d68c:	eb06 050a 	add.w	r5, r6, sl
 810d690:	462a      	mov	r2, r5
 810d692:	4616      	mov	r6, r2
 810d694:	3201      	adds	r2, #1
 810d696:	7830      	ldrb	r0, [r6, #0]
 810d698:	f7ff ff8b 	bl	810d5b2 <__hexdig_fun>
 810d69c:	2800      	cmp	r0, #0
 810d69e:	d1f8      	bne.n	810d692 <__gethex+0xb6>
 810d6a0:	1bad      	subs	r5, r5, r6
 810d6a2:	00ad      	lsls	r5, r5, #2
 810d6a4:	e004      	b.n	810d6b0 <__gethex+0xd4>
 810d6a6:	2400      	movs	r4, #0
 810d6a8:	4625      	mov	r5, r4
 810d6aa:	e7e0      	b.n	810d66e <__gethex+0x92>
 810d6ac:	2d00      	cmp	r5, #0
 810d6ae:	d1f7      	bne.n	810d6a0 <__gethex+0xc4>
 810d6b0:	7833      	ldrb	r3, [r6, #0]
 810d6b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810d6b6:	2b50      	cmp	r3, #80	; 0x50
 810d6b8:	d13b      	bne.n	810d732 <__gethex+0x156>
 810d6ba:	7873      	ldrb	r3, [r6, #1]
 810d6bc:	2b2b      	cmp	r3, #43	; 0x2b
 810d6be:	d02c      	beq.n	810d71a <__gethex+0x13e>
 810d6c0:	2b2d      	cmp	r3, #45	; 0x2d
 810d6c2:	d02e      	beq.n	810d722 <__gethex+0x146>
 810d6c4:	1c71      	adds	r1, r6, #1
 810d6c6:	f04f 0900 	mov.w	r9, #0
 810d6ca:	7808      	ldrb	r0, [r1, #0]
 810d6cc:	f7ff ff71 	bl	810d5b2 <__hexdig_fun>
 810d6d0:	1e43      	subs	r3, r0, #1
 810d6d2:	b2db      	uxtb	r3, r3
 810d6d4:	2b18      	cmp	r3, #24
 810d6d6:	d82c      	bhi.n	810d732 <__gethex+0x156>
 810d6d8:	f1a0 0210 	sub.w	r2, r0, #16
 810d6dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810d6e0:	f7ff ff67 	bl	810d5b2 <__hexdig_fun>
 810d6e4:	1e43      	subs	r3, r0, #1
 810d6e6:	b2db      	uxtb	r3, r3
 810d6e8:	2b18      	cmp	r3, #24
 810d6ea:	d91d      	bls.n	810d728 <__gethex+0x14c>
 810d6ec:	f1b9 0f00 	cmp.w	r9, #0
 810d6f0:	d000      	beq.n	810d6f4 <__gethex+0x118>
 810d6f2:	4252      	negs	r2, r2
 810d6f4:	4415      	add	r5, r2
 810d6f6:	f8cb 1000 	str.w	r1, [fp]
 810d6fa:	b1e4      	cbz	r4, 810d736 <__gethex+0x15a>
 810d6fc:	9b00      	ldr	r3, [sp, #0]
 810d6fe:	2b00      	cmp	r3, #0
 810d700:	bf14      	ite	ne
 810d702:	2700      	movne	r7, #0
 810d704:	2706      	moveq	r7, #6
 810d706:	4638      	mov	r0, r7
 810d708:	b009      	add	sp, #36	; 0x24
 810d70a:	ecbd 8b02 	vpop	{d8}
 810d70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d712:	463e      	mov	r6, r7
 810d714:	4625      	mov	r5, r4
 810d716:	2401      	movs	r4, #1
 810d718:	e7ca      	b.n	810d6b0 <__gethex+0xd4>
 810d71a:	f04f 0900 	mov.w	r9, #0
 810d71e:	1cb1      	adds	r1, r6, #2
 810d720:	e7d3      	b.n	810d6ca <__gethex+0xee>
 810d722:	f04f 0901 	mov.w	r9, #1
 810d726:	e7fa      	b.n	810d71e <__gethex+0x142>
 810d728:	230a      	movs	r3, #10
 810d72a:	fb03 0202 	mla	r2, r3, r2, r0
 810d72e:	3a10      	subs	r2, #16
 810d730:	e7d4      	b.n	810d6dc <__gethex+0x100>
 810d732:	4631      	mov	r1, r6
 810d734:	e7df      	b.n	810d6f6 <__gethex+0x11a>
 810d736:	1bf3      	subs	r3, r6, r7
 810d738:	3b01      	subs	r3, #1
 810d73a:	4621      	mov	r1, r4
 810d73c:	2b07      	cmp	r3, #7
 810d73e:	dc0b      	bgt.n	810d758 <__gethex+0x17c>
 810d740:	ee18 0a10 	vmov	r0, s16
 810d744:	f000 faf6 	bl	810dd34 <_Balloc>
 810d748:	4604      	mov	r4, r0
 810d74a:	b940      	cbnz	r0, 810d75e <__gethex+0x182>
 810d74c:	4b65      	ldr	r3, [pc, #404]	; (810d8e4 <__gethex+0x308>)
 810d74e:	4602      	mov	r2, r0
 810d750:	21de      	movs	r1, #222	; 0xde
 810d752:	4865      	ldr	r0, [pc, #404]	; (810d8e8 <__gethex+0x30c>)
 810d754:	f7fc fdd8 	bl	810a308 <__assert_func>
 810d758:	3101      	adds	r1, #1
 810d75a:	105b      	asrs	r3, r3, #1
 810d75c:	e7ee      	b.n	810d73c <__gethex+0x160>
 810d75e:	f100 0914 	add.w	r9, r0, #20
 810d762:	f04f 0b00 	mov.w	fp, #0
 810d766:	f1ca 0301 	rsb	r3, sl, #1
 810d76a:	f8cd 9008 	str.w	r9, [sp, #8]
 810d76e:	f8cd b000 	str.w	fp, [sp]
 810d772:	9306      	str	r3, [sp, #24]
 810d774:	42b7      	cmp	r7, r6
 810d776:	d340      	bcc.n	810d7fa <__gethex+0x21e>
 810d778:	9802      	ldr	r0, [sp, #8]
 810d77a:	9b00      	ldr	r3, [sp, #0]
 810d77c:	f840 3b04 	str.w	r3, [r0], #4
 810d780:	eba0 0009 	sub.w	r0, r0, r9
 810d784:	1080      	asrs	r0, r0, #2
 810d786:	0146      	lsls	r6, r0, #5
 810d788:	6120      	str	r0, [r4, #16]
 810d78a:	4618      	mov	r0, r3
 810d78c:	f000 fbc8 	bl	810df20 <__hi0bits>
 810d790:	1a30      	subs	r0, r6, r0
 810d792:	f8d8 6000 	ldr.w	r6, [r8]
 810d796:	42b0      	cmp	r0, r6
 810d798:	dd63      	ble.n	810d862 <__gethex+0x286>
 810d79a:	1b87      	subs	r7, r0, r6
 810d79c:	4639      	mov	r1, r7
 810d79e:	4620      	mov	r0, r4
 810d7a0:	f000 ff62 	bl	810e668 <__any_on>
 810d7a4:	4682      	mov	sl, r0
 810d7a6:	b1a8      	cbz	r0, 810d7d4 <__gethex+0x1f8>
 810d7a8:	1e7b      	subs	r3, r7, #1
 810d7aa:	1159      	asrs	r1, r3, #5
 810d7ac:	f003 021f 	and.w	r2, r3, #31
 810d7b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810d7b4:	f04f 0a01 	mov.w	sl, #1
 810d7b8:	fa0a f202 	lsl.w	r2, sl, r2
 810d7bc:	420a      	tst	r2, r1
 810d7be:	d009      	beq.n	810d7d4 <__gethex+0x1f8>
 810d7c0:	4553      	cmp	r3, sl
 810d7c2:	dd05      	ble.n	810d7d0 <__gethex+0x1f4>
 810d7c4:	1eb9      	subs	r1, r7, #2
 810d7c6:	4620      	mov	r0, r4
 810d7c8:	f000 ff4e 	bl	810e668 <__any_on>
 810d7cc:	2800      	cmp	r0, #0
 810d7ce:	d145      	bne.n	810d85c <__gethex+0x280>
 810d7d0:	f04f 0a02 	mov.w	sl, #2
 810d7d4:	4639      	mov	r1, r7
 810d7d6:	4620      	mov	r0, r4
 810d7d8:	f7ff fe99 	bl	810d50e <rshift>
 810d7dc:	443d      	add	r5, r7
 810d7de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810d7e2:	42ab      	cmp	r3, r5
 810d7e4:	da4c      	bge.n	810d880 <__gethex+0x2a4>
 810d7e6:	ee18 0a10 	vmov	r0, s16
 810d7ea:	4621      	mov	r1, r4
 810d7ec:	f000 fae2 	bl	810ddb4 <_Bfree>
 810d7f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810d7f2:	2300      	movs	r3, #0
 810d7f4:	6013      	str	r3, [r2, #0]
 810d7f6:	27a3      	movs	r7, #163	; 0xa3
 810d7f8:	e785      	b.n	810d706 <__gethex+0x12a>
 810d7fa:	1e73      	subs	r3, r6, #1
 810d7fc:	9a05      	ldr	r2, [sp, #20]
 810d7fe:	9303      	str	r3, [sp, #12]
 810d800:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810d804:	4293      	cmp	r3, r2
 810d806:	d019      	beq.n	810d83c <__gethex+0x260>
 810d808:	f1bb 0f20 	cmp.w	fp, #32
 810d80c:	d107      	bne.n	810d81e <__gethex+0x242>
 810d80e:	9b02      	ldr	r3, [sp, #8]
 810d810:	9a00      	ldr	r2, [sp, #0]
 810d812:	f843 2b04 	str.w	r2, [r3], #4
 810d816:	9302      	str	r3, [sp, #8]
 810d818:	2300      	movs	r3, #0
 810d81a:	9300      	str	r3, [sp, #0]
 810d81c:	469b      	mov	fp, r3
 810d81e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810d822:	f7ff fec6 	bl	810d5b2 <__hexdig_fun>
 810d826:	9b00      	ldr	r3, [sp, #0]
 810d828:	f000 000f 	and.w	r0, r0, #15
 810d82c:	fa00 f00b 	lsl.w	r0, r0, fp
 810d830:	4303      	orrs	r3, r0
 810d832:	9300      	str	r3, [sp, #0]
 810d834:	f10b 0b04 	add.w	fp, fp, #4
 810d838:	9b03      	ldr	r3, [sp, #12]
 810d83a:	e00d      	b.n	810d858 <__gethex+0x27c>
 810d83c:	9b03      	ldr	r3, [sp, #12]
 810d83e:	9a06      	ldr	r2, [sp, #24]
 810d840:	4413      	add	r3, r2
 810d842:	42bb      	cmp	r3, r7
 810d844:	d3e0      	bcc.n	810d808 <__gethex+0x22c>
 810d846:	4618      	mov	r0, r3
 810d848:	9901      	ldr	r1, [sp, #4]
 810d84a:	9307      	str	r3, [sp, #28]
 810d84c:	4652      	mov	r2, sl
 810d84e:	f7fd fe8f 	bl	810b570 <strncmp>
 810d852:	9b07      	ldr	r3, [sp, #28]
 810d854:	2800      	cmp	r0, #0
 810d856:	d1d7      	bne.n	810d808 <__gethex+0x22c>
 810d858:	461e      	mov	r6, r3
 810d85a:	e78b      	b.n	810d774 <__gethex+0x198>
 810d85c:	f04f 0a03 	mov.w	sl, #3
 810d860:	e7b8      	b.n	810d7d4 <__gethex+0x1f8>
 810d862:	da0a      	bge.n	810d87a <__gethex+0x29e>
 810d864:	1a37      	subs	r7, r6, r0
 810d866:	4621      	mov	r1, r4
 810d868:	ee18 0a10 	vmov	r0, s16
 810d86c:	463a      	mov	r2, r7
 810d86e:	f000 fcbd 	bl	810e1ec <__lshift>
 810d872:	1bed      	subs	r5, r5, r7
 810d874:	4604      	mov	r4, r0
 810d876:	f100 0914 	add.w	r9, r0, #20
 810d87a:	f04f 0a00 	mov.w	sl, #0
 810d87e:	e7ae      	b.n	810d7de <__gethex+0x202>
 810d880:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810d884:	42a8      	cmp	r0, r5
 810d886:	dd72      	ble.n	810d96e <__gethex+0x392>
 810d888:	1b45      	subs	r5, r0, r5
 810d88a:	42ae      	cmp	r6, r5
 810d88c:	dc36      	bgt.n	810d8fc <__gethex+0x320>
 810d88e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810d892:	2b02      	cmp	r3, #2
 810d894:	d02a      	beq.n	810d8ec <__gethex+0x310>
 810d896:	2b03      	cmp	r3, #3
 810d898:	d02c      	beq.n	810d8f4 <__gethex+0x318>
 810d89a:	2b01      	cmp	r3, #1
 810d89c:	d115      	bne.n	810d8ca <__gethex+0x2ee>
 810d89e:	42ae      	cmp	r6, r5
 810d8a0:	d113      	bne.n	810d8ca <__gethex+0x2ee>
 810d8a2:	2e01      	cmp	r6, #1
 810d8a4:	d10b      	bne.n	810d8be <__gethex+0x2e2>
 810d8a6:	9a04      	ldr	r2, [sp, #16]
 810d8a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810d8ac:	6013      	str	r3, [r2, #0]
 810d8ae:	2301      	movs	r3, #1
 810d8b0:	6123      	str	r3, [r4, #16]
 810d8b2:	f8c9 3000 	str.w	r3, [r9]
 810d8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810d8b8:	2762      	movs	r7, #98	; 0x62
 810d8ba:	601c      	str	r4, [r3, #0]
 810d8bc:	e723      	b.n	810d706 <__gethex+0x12a>
 810d8be:	1e71      	subs	r1, r6, #1
 810d8c0:	4620      	mov	r0, r4
 810d8c2:	f000 fed1 	bl	810e668 <__any_on>
 810d8c6:	2800      	cmp	r0, #0
 810d8c8:	d1ed      	bne.n	810d8a6 <__gethex+0x2ca>
 810d8ca:	ee18 0a10 	vmov	r0, s16
 810d8ce:	4621      	mov	r1, r4
 810d8d0:	f000 fa70 	bl	810ddb4 <_Bfree>
 810d8d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810d8d6:	2300      	movs	r3, #0
 810d8d8:	6013      	str	r3, [r2, #0]
 810d8da:	2750      	movs	r7, #80	; 0x50
 810d8dc:	e713      	b.n	810d706 <__gethex+0x12a>
 810d8de:	bf00      	nop
 810d8e0:	0810f20c 	.word	0x0810f20c
 810d8e4:	0810f12c 	.word	0x0810f12c
 810d8e8:	0810f1a0 	.word	0x0810f1a0
 810d8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d8ee:	2b00      	cmp	r3, #0
 810d8f0:	d1eb      	bne.n	810d8ca <__gethex+0x2ee>
 810d8f2:	e7d8      	b.n	810d8a6 <__gethex+0x2ca>
 810d8f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d8f6:	2b00      	cmp	r3, #0
 810d8f8:	d1d5      	bne.n	810d8a6 <__gethex+0x2ca>
 810d8fa:	e7e6      	b.n	810d8ca <__gethex+0x2ee>
 810d8fc:	1e6f      	subs	r7, r5, #1
 810d8fe:	f1ba 0f00 	cmp.w	sl, #0
 810d902:	d131      	bne.n	810d968 <__gethex+0x38c>
 810d904:	b127      	cbz	r7, 810d910 <__gethex+0x334>
 810d906:	4639      	mov	r1, r7
 810d908:	4620      	mov	r0, r4
 810d90a:	f000 fead 	bl	810e668 <__any_on>
 810d90e:	4682      	mov	sl, r0
 810d910:	117b      	asrs	r3, r7, #5
 810d912:	2101      	movs	r1, #1
 810d914:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810d918:	f007 071f 	and.w	r7, r7, #31
 810d91c:	fa01 f707 	lsl.w	r7, r1, r7
 810d920:	421f      	tst	r7, r3
 810d922:	4629      	mov	r1, r5
 810d924:	4620      	mov	r0, r4
 810d926:	bf18      	it	ne
 810d928:	f04a 0a02 	orrne.w	sl, sl, #2
 810d92c:	1b76      	subs	r6, r6, r5
 810d92e:	f7ff fdee 	bl	810d50e <rshift>
 810d932:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810d936:	2702      	movs	r7, #2
 810d938:	f1ba 0f00 	cmp.w	sl, #0
 810d93c:	d048      	beq.n	810d9d0 <__gethex+0x3f4>
 810d93e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810d942:	2b02      	cmp	r3, #2
 810d944:	d015      	beq.n	810d972 <__gethex+0x396>
 810d946:	2b03      	cmp	r3, #3
 810d948:	d017      	beq.n	810d97a <__gethex+0x39e>
 810d94a:	2b01      	cmp	r3, #1
 810d94c:	d109      	bne.n	810d962 <__gethex+0x386>
 810d94e:	f01a 0f02 	tst.w	sl, #2
 810d952:	d006      	beq.n	810d962 <__gethex+0x386>
 810d954:	f8d9 0000 	ldr.w	r0, [r9]
 810d958:	ea4a 0a00 	orr.w	sl, sl, r0
 810d95c:	f01a 0f01 	tst.w	sl, #1
 810d960:	d10e      	bne.n	810d980 <__gethex+0x3a4>
 810d962:	f047 0710 	orr.w	r7, r7, #16
 810d966:	e033      	b.n	810d9d0 <__gethex+0x3f4>
 810d968:	f04f 0a01 	mov.w	sl, #1
 810d96c:	e7d0      	b.n	810d910 <__gethex+0x334>
 810d96e:	2701      	movs	r7, #1
 810d970:	e7e2      	b.n	810d938 <__gethex+0x35c>
 810d972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d974:	f1c3 0301 	rsb	r3, r3, #1
 810d978:	9315      	str	r3, [sp, #84]	; 0x54
 810d97a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d97c:	2b00      	cmp	r3, #0
 810d97e:	d0f0      	beq.n	810d962 <__gethex+0x386>
 810d980:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810d984:	f104 0314 	add.w	r3, r4, #20
 810d988:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810d98c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810d990:	f04f 0c00 	mov.w	ip, #0
 810d994:	4618      	mov	r0, r3
 810d996:	f853 2b04 	ldr.w	r2, [r3], #4
 810d99a:	f1b2 3fff 	cmp.w	r2, #4294967295
 810d99e:	d01c      	beq.n	810d9da <__gethex+0x3fe>
 810d9a0:	3201      	adds	r2, #1
 810d9a2:	6002      	str	r2, [r0, #0]
 810d9a4:	2f02      	cmp	r7, #2
 810d9a6:	f104 0314 	add.w	r3, r4, #20
 810d9aa:	d13f      	bne.n	810da2c <__gethex+0x450>
 810d9ac:	f8d8 2000 	ldr.w	r2, [r8]
 810d9b0:	3a01      	subs	r2, #1
 810d9b2:	42b2      	cmp	r2, r6
 810d9b4:	d10a      	bne.n	810d9cc <__gethex+0x3f0>
 810d9b6:	1171      	asrs	r1, r6, #5
 810d9b8:	2201      	movs	r2, #1
 810d9ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810d9be:	f006 061f 	and.w	r6, r6, #31
 810d9c2:	fa02 f606 	lsl.w	r6, r2, r6
 810d9c6:	421e      	tst	r6, r3
 810d9c8:	bf18      	it	ne
 810d9ca:	4617      	movne	r7, r2
 810d9cc:	f047 0720 	orr.w	r7, r7, #32
 810d9d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810d9d2:	601c      	str	r4, [r3, #0]
 810d9d4:	9b04      	ldr	r3, [sp, #16]
 810d9d6:	601d      	str	r5, [r3, #0]
 810d9d8:	e695      	b.n	810d706 <__gethex+0x12a>
 810d9da:	4299      	cmp	r1, r3
 810d9dc:	f843 cc04 	str.w	ip, [r3, #-4]
 810d9e0:	d8d8      	bhi.n	810d994 <__gethex+0x3b8>
 810d9e2:	68a3      	ldr	r3, [r4, #8]
 810d9e4:	459b      	cmp	fp, r3
 810d9e6:	db19      	blt.n	810da1c <__gethex+0x440>
 810d9e8:	6861      	ldr	r1, [r4, #4]
 810d9ea:	ee18 0a10 	vmov	r0, s16
 810d9ee:	3101      	adds	r1, #1
 810d9f0:	f000 f9a0 	bl	810dd34 <_Balloc>
 810d9f4:	4681      	mov	r9, r0
 810d9f6:	b918      	cbnz	r0, 810da00 <__gethex+0x424>
 810d9f8:	4b1a      	ldr	r3, [pc, #104]	; (810da64 <__gethex+0x488>)
 810d9fa:	4602      	mov	r2, r0
 810d9fc:	2184      	movs	r1, #132	; 0x84
 810d9fe:	e6a8      	b.n	810d752 <__gethex+0x176>
 810da00:	6922      	ldr	r2, [r4, #16]
 810da02:	3202      	adds	r2, #2
 810da04:	f104 010c 	add.w	r1, r4, #12
 810da08:	0092      	lsls	r2, r2, #2
 810da0a:	300c      	adds	r0, #12
 810da0c:	f7fc fce6 	bl	810a3dc <memcpy>
 810da10:	4621      	mov	r1, r4
 810da12:	ee18 0a10 	vmov	r0, s16
 810da16:	f000 f9cd 	bl	810ddb4 <_Bfree>
 810da1a:	464c      	mov	r4, r9
 810da1c:	6923      	ldr	r3, [r4, #16]
 810da1e:	1c5a      	adds	r2, r3, #1
 810da20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810da24:	6122      	str	r2, [r4, #16]
 810da26:	2201      	movs	r2, #1
 810da28:	615a      	str	r2, [r3, #20]
 810da2a:	e7bb      	b.n	810d9a4 <__gethex+0x3c8>
 810da2c:	6922      	ldr	r2, [r4, #16]
 810da2e:	455a      	cmp	r2, fp
 810da30:	dd0b      	ble.n	810da4a <__gethex+0x46e>
 810da32:	2101      	movs	r1, #1
 810da34:	4620      	mov	r0, r4
 810da36:	f7ff fd6a 	bl	810d50e <rshift>
 810da3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810da3e:	3501      	adds	r5, #1
 810da40:	42ab      	cmp	r3, r5
 810da42:	f6ff aed0 	blt.w	810d7e6 <__gethex+0x20a>
 810da46:	2701      	movs	r7, #1
 810da48:	e7c0      	b.n	810d9cc <__gethex+0x3f0>
 810da4a:	f016 061f 	ands.w	r6, r6, #31
 810da4e:	d0fa      	beq.n	810da46 <__gethex+0x46a>
 810da50:	449a      	add	sl, r3
 810da52:	f1c6 0620 	rsb	r6, r6, #32
 810da56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810da5a:	f000 fa61 	bl	810df20 <__hi0bits>
 810da5e:	42b0      	cmp	r0, r6
 810da60:	dbe7      	blt.n	810da32 <__gethex+0x456>
 810da62:	e7f0      	b.n	810da46 <__gethex+0x46a>
 810da64:	0810f12c 	.word	0x0810f12c

0810da68 <L_shift>:
 810da68:	f1c2 0208 	rsb	r2, r2, #8
 810da6c:	0092      	lsls	r2, r2, #2
 810da6e:	b570      	push	{r4, r5, r6, lr}
 810da70:	f1c2 0620 	rsb	r6, r2, #32
 810da74:	6843      	ldr	r3, [r0, #4]
 810da76:	6804      	ldr	r4, [r0, #0]
 810da78:	fa03 f506 	lsl.w	r5, r3, r6
 810da7c:	432c      	orrs	r4, r5
 810da7e:	40d3      	lsrs	r3, r2
 810da80:	6004      	str	r4, [r0, #0]
 810da82:	f840 3f04 	str.w	r3, [r0, #4]!
 810da86:	4288      	cmp	r0, r1
 810da88:	d3f4      	bcc.n	810da74 <L_shift+0xc>
 810da8a:	bd70      	pop	{r4, r5, r6, pc}

0810da8c <__match>:
 810da8c:	b530      	push	{r4, r5, lr}
 810da8e:	6803      	ldr	r3, [r0, #0]
 810da90:	3301      	adds	r3, #1
 810da92:	f811 4b01 	ldrb.w	r4, [r1], #1
 810da96:	b914      	cbnz	r4, 810da9e <__match+0x12>
 810da98:	6003      	str	r3, [r0, #0]
 810da9a:	2001      	movs	r0, #1
 810da9c:	bd30      	pop	{r4, r5, pc}
 810da9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810daa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810daa6:	2d19      	cmp	r5, #25
 810daa8:	bf98      	it	ls
 810daaa:	3220      	addls	r2, #32
 810daac:	42a2      	cmp	r2, r4
 810daae:	d0f0      	beq.n	810da92 <__match+0x6>
 810dab0:	2000      	movs	r0, #0
 810dab2:	e7f3      	b.n	810da9c <__match+0x10>

0810dab4 <__hexnan>:
 810dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dab8:	680b      	ldr	r3, [r1, #0]
 810daba:	6801      	ldr	r1, [r0, #0]
 810dabc:	115e      	asrs	r6, r3, #5
 810dabe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810dac2:	f013 031f 	ands.w	r3, r3, #31
 810dac6:	b087      	sub	sp, #28
 810dac8:	bf18      	it	ne
 810daca:	3604      	addne	r6, #4
 810dacc:	2500      	movs	r5, #0
 810dace:	1f37      	subs	r7, r6, #4
 810dad0:	4682      	mov	sl, r0
 810dad2:	4690      	mov	r8, r2
 810dad4:	9301      	str	r3, [sp, #4]
 810dad6:	f846 5c04 	str.w	r5, [r6, #-4]
 810dada:	46b9      	mov	r9, r7
 810dadc:	463c      	mov	r4, r7
 810dade:	9502      	str	r5, [sp, #8]
 810dae0:	46ab      	mov	fp, r5
 810dae2:	784a      	ldrb	r2, [r1, #1]
 810dae4:	1c4b      	adds	r3, r1, #1
 810dae6:	9303      	str	r3, [sp, #12]
 810dae8:	b342      	cbz	r2, 810db3c <__hexnan+0x88>
 810daea:	4610      	mov	r0, r2
 810daec:	9105      	str	r1, [sp, #20]
 810daee:	9204      	str	r2, [sp, #16]
 810daf0:	f7ff fd5f 	bl	810d5b2 <__hexdig_fun>
 810daf4:	2800      	cmp	r0, #0
 810daf6:	d14f      	bne.n	810db98 <__hexnan+0xe4>
 810daf8:	9a04      	ldr	r2, [sp, #16]
 810dafa:	9905      	ldr	r1, [sp, #20]
 810dafc:	2a20      	cmp	r2, #32
 810dafe:	d818      	bhi.n	810db32 <__hexnan+0x7e>
 810db00:	9b02      	ldr	r3, [sp, #8]
 810db02:	459b      	cmp	fp, r3
 810db04:	dd13      	ble.n	810db2e <__hexnan+0x7a>
 810db06:	454c      	cmp	r4, r9
 810db08:	d206      	bcs.n	810db18 <__hexnan+0x64>
 810db0a:	2d07      	cmp	r5, #7
 810db0c:	dc04      	bgt.n	810db18 <__hexnan+0x64>
 810db0e:	462a      	mov	r2, r5
 810db10:	4649      	mov	r1, r9
 810db12:	4620      	mov	r0, r4
 810db14:	f7ff ffa8 	bl	810da68 <L_shift>
 810db18:	4544      	cmp	r4, r8
 810db1a:	d950      	bls.n	810dbbe <__hexnan+0x10a>
 810db1c:	2300      	movs	r3, #0
 810db1e:	f1a4 0904 	sub.w	r9, r4, #4
 810db22:	f844 3c04 	str.w	r3, [r4, #-4]
 810db26:	f8cd b008 	str.w	fp, [sp, #8]
 810db2a:	464c      	mov	r4, r9
 810db2c:	461d      	mov	r5, r3
 810db2e:	9903      	ldr	r1, [sp, #12]
 810db30:	e7d7      	b.n	810dae2 <__hexnan+0x2e>
 810db32:	2a29      	cmp	r2, #41	; 0x29
 810db34:	d156      	bne.n	810dbe4 <__hexnan+0x130>
 810db36:	3102      	adds	r1, #2
 810db38:	f8ca 1000 	str.w	r1, [sl]
 810db3c:	f1bb 0f00 	cmp.w	fp, #0
 810db40:	d050      	beq.n	810dbe4 <__hexnan+0x130>
 810db42:	454c      	cmp	r4, r9
 810db44:	d206      	bcs.n	810db54 <__hexnan+0xa0>
 810db46:	2d07      	cmp	r5, #7
 810db48:	dc04      	bgt.n	810db54 <__hexnan+0xa0>
 810db4a:	462a      	mov	r2, r5
 810db4c:	4649      	mov	r1, r9
 810db4e:	4620      	mov	r0, r4
 810db50:	f7ff ff8a 	bl	810da68 <L_shift>
 810db54:	4544      	cmp	r4, r8
 810db56:	d934      	bls.n	810dbc2 <__hexnan+0x10e>
 810db58:	f1a8 0204 	sub.w	r2, r8, #4
 810db5c:	4623      	mov	r3, r4
 810db5e:	f853 1b04 	ldr.w	r1, [r3], #4
 810db62:	f842 1f04 	str.w	r1, [r2, #4]!
 810db66:	429f      	cmp	r7, r3
 810db68:	d2f9      	bcs.n	810db5e <__hexnan+0xaa>
 810db6a:	1b3b      	subs	r3, r7, r4
 810db6c:	f023 0303 	bic.w	r3, r3, #3
 810db70:	3304      	adds	r3, #4
 810db72:	3401      	adds	r4, #1
 810db74:	3e03      	subs	r6, #3
 810db76:	42b4      	cmp	r4, r6
 810db78:	bf88      	it	hi
 810db7a:	2304      	movhi	r3, #4
 810db7c:	4443      	add	r3, r8
 810db7e:	2200      	movs	r2, #0
 810db80:	f843 2b04 	str.w	r2, [r3], #4
 810db84:	429f      	cmp	r7, r3
 810db86:	d2fb      	bcs.n	810db80 <__hexnan+0xcc>
 810db88:	683b      	ldr	r3, [r7, #0]
 810db8a:	b91b      	cbnz	r3, 810db94 <__hexnan+0xe0>
 810db8c:	4547      	cmp	r7, r8
 810db8e:	d127      	bne.n	810dbe0 <__hexnan+0x12c>
 810db90:	2301      	movs	r3, #1
 810db92:	603b      	str	r3, [r7, #0]
 810db94:	2005      	movs	r0, #5
 810db96:	e026      	b.n	810dbe6 <__hexnan+0x132>
 810db98:	3501      	adds	r5, #1
 810db9a:	2d08      	cmp	r5, #8
 810db9c:	f10b 0b01 	add.w	fp, fp, #1
 810dba0:	dd06      	ble.n	810dbb0 <__hexnan+0xfc>
 810dba2:	4544      	cmp	r4, r8
 810dba4:	d9c3      	bls.n	810db2e <__hexnan+0x7a>
 810dba6:	2300      	movs	r3, #0
 810dba8:	f844 3c04 	str.w	r3, [r4, #-4]
 810dbac:	2501      	movs	r5, #1
 810dbae:	3c04      	subs	r4, #4
 810dbb0:	6822      	ldr	r2, [r4, #0]
 810dbb2:	f000 000f 	and.w	r0, r0, #15
 810dbb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810dbba:	6022      	str	r2, [r4, #0]
 810dbbc:	e7b7      	b.n	810db2e <__hexnan+0x7a>
 810dbbe:	2508      	movs	r5, #8
 810dbc0:	e7b5      	b.n	810db2e <__hexnan+0x7a>
 810dbc2:	9b01      	ldr	r3, [sp, #4]
 810dbc4:	2b00      	cmp	r3, #0
 810dbc6:	d0df      	beq.n	810db88 <__hexnan+0xd4>
 810dbc8:	f04f 32ff 	mov.w	r2, #4294967295
 810dbcc:	f1c3 0320 	rsb	r3, r3, #32
 810dbd0:	fa22 f303 	lsr.w	r3, r2, r3
 810dbd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810dbd8:	401a      	ands	r2, r3
 810dbda:	f846 2c04 	str.w	r2, [r6, #-4]
 810dbde:	e7d3      	b.n	810db88 <__hexnan+0xd4>
 810dbe0:	3f04      	subs	r7, #4
 810dbe2:	e7d1      	b.n	810db88 <__hexnan+0xd4>
 810dbe4:	2004      	movs	r0, #4
 810dbe6:	b007      	add	sp, #28
 810dbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810dbec <_localeconv_r>:
 810dbec:	4800      	ldr	r0, [pc, #0]	; (810dbf0 <_localeconv_r+0x4>)
 810dbee:	4770      	bx	lr
 810dbf0:	10000214 	.word	0x10000214

0810dbf4 <__retarget_lock_init_recursive>:
 810dbf4:	4770      	bx	lr

0810dbf6 <__retarget_lock_acquire_recursive>:
 810dbf6:	4770      	bx	lr

0810dbf8 <__retarget_lock_release_recursive>:
 810dbf8:	4770      	bx	lr

0810dbfa <__swhatbuf_r>:
 810dbfa:	b570      	push	{r4, r5, r6, lr}
 810dbfc:	460e      	mov	r6, r1
 810dbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dc02:	2900      	cmp	r1, #0
 810dc04:	b096      	sub	sp, #88	; 0x58
 810dc06:	4614      	mov	r4, r2
 810dc08:	461d      	mov	r5, r3
 810dc0a:	da07      	bge.n	810dc1c <__swhatbuf_r+0x22>
 810dc0c:	2300      	movs	r3, #0
 810dc0e:	602b      	str	r3, [r5, #0]
 810dc10:	89b3      	ldrh	r3, [r6, #12]
 810dc12:	061a      	lsls	r2, r3, #24
 810dc14:	d410      	bmi.n	810dc38 <__swhatbuf_r+0x3e>
 810dc16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810dc1a:	e00e      	b.n	810dc3a <__swhatbuf_r+0x40>
 810dc1c:	466a      	mov	r2, sp
 810dc1e:	f000 ff8b 	bl	810eb38 <_fstat_r>
 810dc22:	2800      	cmp	r0, #0
 810dc24:	dbf2      	blt.n	810dc0c <__swhatbuf_r+0x12>
 810dc26:	9a01      	ldr	r2, [sp, #4]
 810dc28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810dc2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810dc30:	425a      	negs	r2, r3
 810dc32:	415a      	adcs	r2, r3
 810dc34:	602a      	str	r2, [r5, #0]
 810dc36:	e7ee      	b.n	810dc16 <__swhatbuf_r+0x1c>
 810dc38:	2340      	movs	r3, #64	; 0x40
 810dc3a:	2000      	movs	r0, #0
 810dc3c:	6023      	str	r3, [r4, #0]
 810dc3e:	b016      	add	sp, #88	; 0x58
 810dc40:	bd70      	pop	{r4, r5, r6, pc}
	...

0810dc44 <__smakebuf_r>:
 810dc44:	898b      	ldrh	r3, [r1, #12]
 810dc46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810dc48:	079d      	lsls	r5, r3, #30
 810dc4a:	4606      	mov	r6, r0
 810dc4c:	460c      	mov	r4, r1
 810dc4e:	d507      	bpl.n	810dc60 <__smakebuf_r+0x1c>
 810dc50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810dc54:	6023      	str	r3, [r4, #0]
 810dc56:	6123      	str	r3, [r4, #16]
 810dc58:	2301      	movs	r3, #1
 810dc5a:	6163      	str	r3, [r4, #20]
 810dc5c:	b002      	add	sp, #8
 810dc5e:	bd70      	pop	{r4, r5, r6, pc}
 810dc60:	ab01      	add	r3, sp, #4
 810dc62:	466a      	mov	r2, sp
 810dc64:	f7ff ffc9 	bl	810dbfa <__swhatbuf_r>
 810dc68:	9900      	ldr	r1, [sp, #0]
 810dc6a:	4605      	mov	r5, r0
 810dc6c:	4630      	mov	r0, r6
 810dc6e:	f7fc fc1b 	bl	810a4a8 <_malloc_r>
 810dc72:	b948      	cbnz	r0, 810dc88 <__smakebuf_r+0x44>
 810dc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dc78:	059a      	lsls	r2, r3, #22
 810dc7a:	d4ef      	bmi.n	810dc5c <__smakebuf_r+0x18>
 810dc7c:	f023 0303 	bic.w	r3, r3, #3
 810dc80:	f043 0302 	orr.w	r3, r3, #2
 810dc84:	81a3      	strh	r3, [r4, #12]
 810dc86:	e7e3      	b.n	810dc50 <__smakebuf_r+0xc>
 810dc88:	4b0d      	ldr	r3, [pc, #52]	; (810dcc0 <__smakebuf_r+0x7c>)
 810dc8a:	62b3      	str	r3, [r6, #40]	; 0x28
 810dc8c:	89a3      	ldrh	r3, [r4, #12]
 810dc8e:	6020      	str	r0, [r4, #0]
 810dc90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810dc94:	81a3      	strh	r3, [r4, #12]
 810dc96:	9b00      	ldr	r3, [sp, #0]
 810dc98:	6163      	str	r3, [r4, #20]
 810dc9a:	9b01      	ldr	r3, [sp, #4]
 810dc9c:	6120      	str	r0, [r4, #16]
 810dc9e:	b15b      	cbz	r3, 810dcb8 <__smakebuf_r+0x74>
 810dca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810dca4:	4630      	mov	r0, r6
 810dca6:	f000 ff59 	bl	810eb5c <_isatty_r>
 810dcaa:	b128      	cbz	r0, 810dcb8 <__smakebuf_r+0x74>
 810dcac:	89a3      	ldrh	r3, [r4, #12]
 810dcae:	f023 0303 	bic.w	r3, r3, #3
 810dcb2:	f043 0301 	orr.w	r3, r3, #1
 810dcb6:	81a3      	strh	r3, [r4, #12]
 810dcb8:	89a0      	ldrh	r0, [r4, #12]
 810dcba:	4305      	orrs	r5, r0
 810dcbc:	81a5      	strh	r5, [r4, #12]
 810dcbe:	e7cd      	b.n	810dc5c <__smakebuf_r+0x18>
 810dcc0:	0810d36d 	.word	0x0810d36d

0810dcc4 <__ascii_mbtowc>:
 810dcc4:	b082      	sub	sp, #8
 810dcc6:	b901      	cbnz	r1, 810dcca <__ascii_mbtowc+0x6>
 810dcc8:	a901      	add	r1, sp, #4
 810dcca:	b142      	cbz	r2, 810dcde <__ascii_mbtowc+0x1a>
 810dccc:	b14b      	cbz	r3, 810dce2 <__ascii_mbtowc+0x1e>
 810dcce:	7813      	ldrb	r3, [r2, #0]
 810dcd0:	600b      	str	r3, [r1, #0]
 810dcd2:	7812      	ldrb	r2, [r2, #0]
 810dcd4:	1e10      	subs	r0, r2, #0
 810dcd6:	bf18      	it	ne
 810dcd8:	2001      	movne	r0, #1
 810dcda:	b002      	add	sp, #8
 810dcdc:	4770      	bx	lr
 810dcde:	4610      	mov	r0, r2
 810dce0:	e7fb      	b.n	810dcda <__ascii_mbtowc+0x16>
 810dce2:	f06f 0001 	mvn.w	r0, #1
 810dce6:	e7f8      	b.n	810dcda <__ascii_mbtowc+0x16>

0810dce8 <memmove>:
 810dce8:	4288      	cmp	r0, r1
 810dcea:	b510      	push	{r4, lr}
 810dcec:	eb01 0402 	add.w	r4, r1, r2
 810dcf0:	d902      	bls.n	810dcf8 <memmove+0x10>
 810dcf2:	4284      	cmp	r4, r0
 810dcf4:	4623      	mov	r3, r4
 810dcf6:	d807      	bhi.n	810dd08 <memmove+0x20>
 810dcf8:	1e43      	subs	r3, r0, #1
 810dcfa:	42a1      	cmp	r1, r4
 810dcfc:	d008      	beq.n	810dd10 <memmove+0x28>
 810dcfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 810dd02:	f803 2f01 	strb.w	r2, [r3, #1]!
 810dd06:	e7f8      	b.n	810dcfa <memmove+0x12>
 810dd08:	4402      	add	r2, r0
 810dd0a:	4601      	mov	r1, r0
 810dd0c:	428a      	cmp	r2, r1
 810dd0e:	d100      	bne.n	810dd12 <memmove+0x2a>
 810dd10:	bd10      	pop	{r4, pc}
 810dd12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810dd16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810dd1a:	e7f7      	b.n	810dd0c <memmove+0x24>

0810dd1c <__malloc_lock>:
 810dd1c:	4801      	ldr	r0, [pc, #4]	; (810dd24 <__malloc_lock+0x8>)
 810dd1e:	f7ff bf6a 	b.w	810dbf6 <__retarget_lock_acquire_recursive>
 810dd22:	bf00      	nop
 810dd24:	1000061c 	.word	0x1000061c

0810dd28 <__malloc_unlock>:
 810dd28:	4801      	ldr	r0, [pc, #4]	; (810dd30 <__malloc_unlock+0x8>)
 810dd2a:	f7ff bf65 	b.w	810dbf8 <__retarget_lock_release_recursive>
 810dd2e:	bf00      	nop
 810dd30:	1000061c 	.word	0x1000061c

0810dd34 <_Balloc>:
 810dd34:	b570      	push	{r4, r5, r6, lr}
 810dd36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810dd38:	4604      	mov	r4, r0
 810dd3a:	460d      	mov	r5, r1
 810dd3c:	b976      	cbnz	r6, 810dd5c <_Balloc+0x28>
 810dd3e:	2010      	movs	r0, #16
 810dd40:	f7fc fb3c 	bl	810a3bc <malloc>
 810dd44:	4602      	mov	r2, r0
 810dd46:	6260      	str	r0, [r4, #36]	; 0x24
 810dd48:	b920      	cbnz	r0, 810dd54 <_Balloc+0x20>
 810dd4a:	4b18      	ldr	r3, [pc, #96]	; (810ddac <_Balloc+0x78>)
 810dd4c:	4818      	ldr	r0, [pc, #96]	; (810ddb0 <_Balloc+0x7c>)
 810dd4e:	2166      	movs	r1, #102	; 0x66
 810dd50:	f7fc fada 	bl	810a308 <__assert_func>
 810dd54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810dd58:	6006      	str	r6, [r0, #0]
 810dd5a:	60c6      	str	r6, [r0, #12]
 810dd5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810dd5e:	68f3      	ldr	r3, [r6, #12]
 810dd60:	b183      	cbz	r3, 810dd84 <_Balloc+0x50>
 810dd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810dd64:	68db      	ldr	r3, [r3, #12]
 810dd66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810dd6a:	b9b8      	cbnz	r0, 810dd9c <_Balloc+0x68>
 810dd6c:	2101      	movs	r1, #1
 810dd6e:	fa01 f605 	lsl.w	r6, r1, r5
 810dd72:	1d72      	adds	r2, r6, #5
 810dd74:	0092      	lsls	r2, r2, #2
 810dd76:	4620      	mov	r0, r4
 810dd78:	f000 fc97 	bl	810e6aa <_calloc_r>
 810dd7c:	b160      	cbz	r0, 810dd98 <_Balloc+0x64>
 810dd7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810dd82:	e00e      	b.n	810dda2 <_Balloc+0x6e>
 810dd84:	2221      	movs	r2, #33	; 0x21
 810dd86:	2104      	movs	r1, #4
 810dd88:	4620      	mov	r0, r4
 810dd8a:	f000 fc8e 	bl	810e6aa <_calloc_r>
 810dd8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810dd90:	60f0      	str	r0, [r6, #12]
 810dd92:	68db      	ldr	r3, [r3, #12]
 810dd94:	2b00      	cmp	r3, #0
 810dd96:	d1e4      	bne.n	810dd62 <_Balloc+0x2e>
 810dd98:	2000      	movs	r0, #0
 810dd9a:	bd70      	pop	{r4, r5, r6, pc}
 810dd9c:	6802      	ldr	r2, [r0, #0]
 810dd9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810dda2:	2300      	movs	r3, #0
 810dda4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810dda8:	e7f7      	b.n	810dd9a <_Balloc+0x66>
 810ddaa:	bf00      	nop
 810ddac:	0810f0b6 	.word	0x0810f0b6
 810ddb0:	0810f220 	.word	0x0810f220

0810ddb4 <_Bfree>:
 810ddb4:	b570      	push	{r4, r5, r6, lr}
 810ddb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ddb8:	4605      	mov	r5, r0
 810ddba:	460c      	mov	r4, r1
 810ddbc:	b976      	cbnz	r6, 810dddc <_Bfree+0x28>
 810ddbe:	2010      	movs	r0, #16
 810ddc0:	f7fc fafc 	bl	810a3bc <malloc>
 810ddc4:	4602      	mov	r2, r0
 810ddc6:	6268      	str	r0, [r5, #36]	; 0x24
 810ddc8:	b920      	cbnz	r0, 810ddd4 <_Bfree+0x20>
 810ddca:	4b09      	ldr	r3, [pc, #36]	; (810ddf0 <_Bfree+0x3c>)
 810ddcc:	4809      	ldr	r0, [pc, #36]	; (810ddf4 <_Bfree+0x40>)
 810ddce:	218a      	movs	r1, #138	; 0x8a
 810ddd0:	f7fc fa9a 	bl	810a308 <__assert_func>
 810ddd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ddd8:	6006      	str	r6, [r0, #0]
 810ddda:	60c6      	str	r6, [r0, #12]
 810dddc:	b13c      	cbz	r4, 810ddee <_Bfree+0x3a>
 810ddde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810dde0:	6862      	ldr	r2, [r4, #4]
 810dde2:	68db      	ldr	r3, [r3, #12]
 810dde4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810dde8:	6021      	str	r1, [r4, #0]
 810ddea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810ddee:	bd70      	pop	{r4, r5, r6, pc}
 810ddf0:	0810f0b6 	.word	0x0810f0b6
 810ddf4:	0810f220 	.word	0x0810f220

0810ddf8 <__multadd>:
 810ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ddfc:	690e      	ldr	r6, [r1, #16]
 810ddfe:	4607      	mov	r7, r0
 810de00:	4698      	mov	r8, r3
 810de02:	460c      	mov	r4, r1
 810de04:	f101 0014 	add.w	r0, r1, #20
 810de08:	2300      	movs	r3, #0
 810de0a:	6805      	ldr	r5, [r0, #0]
 810de0c:	b2a9      	uxth	r1, r5
 810de0e:	fb02 8101 	mla	r1, r2, r1, r8
 810de12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810de16:	0c2d      	lsrs	r5, r5, #16
 810de18:	fb02 c505 	mla	r5, r2, r5, ip
 810de1c:	b289      	uxth	r1, r1
 810de1e:	3301      	adds	r3, #1
 810de20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810de24:	429e      	cmp	r6, r3
 810de26:	f840 1b04 	str.w	r1, [r0], #4
 810de2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810de2e:	dcec      	bgt.n	810de0a <__multadd+0x12>
 810de30:	f1b8 0f00 	cmp.w	r8, #0
 810de34:	d022      	beq.n	810de7c <__multadd+0x84>
 810de36:	68a3      	ldr	r3, [r4, #8]
 810de38:	42b3      	cmp	r3, r6
 810de3a:	dc19      	bgt.n	810de70 <__multadd+0x78>
 810de3c:	6861      	ldr	r1, [r4, #4]
 810de3e:	4638      	mov	r0, r7
 810de40:	3101      	adds	r1, #1
 810de42:	f7ff ff77 	bl	810dd34 <_Balloc>
 810de46:	4605      	mov	r5, r0
 810de48:	b928      	cbnz	r0, 810de56 <__multadd+0x5e>
 810de4a:	4602      	mov	r2, r0
 810de4c:	4b0d      	ldr	r3, [pc, #52]	; (810de84 <__multadd+0x8c>)
 810de4e:	480e      	ldr	r0, [pc, #56]	; (810de88 <__multadd+0x90>)
 810de50:	21b5      	movs	r1, #181	; 0xb5
 810de52:	f7fc fa59 	bl	810a308 <__assert_func>
 810de56:	6922      	ldr	r2, [r4, #16]
 810de58:	3202      	adds	r2, #2
 810de5a:	f104 010c 	add.w	r1, r4, #12
 810de5e:	0092      	lsls	r2, r2, #2
 810de60:	300c      	adds	r0, #12
 810de62:	f7fc fabb 	bl	810a3dc <memcpy>
 810de66:	4621      	mov	r1, r4
 810de68:	4638      	mov	r0, r7
 810de6a:	f7ff ffa3 	bl	810ddb4 <_Bfree>
 810de6e:	462c      	mov	r4, r5
 810de70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810de74:	3601      	adds	r6, #1
 810de76:	f8c3 8014 	str.w	r8, [r3, #20]
 810de7a:	6126      	str	r6, [r4, #16]
 810de7c:	4620      	mov	r0, r4
 810de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810de82:	bf00      	nop
 810de84:	0810f12c 	.word	0x0810f12c
 810de88:	0810f220 	.word	0x0810f220

0810de8c <__s2b>:
 810de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810de90:	460c      	mov	r4, r1
 810de92:	4615      	mov	r5, r2
 810de94:	461f      	mov	r7, r3
 810de96:	2209      	movs	r2, #9
 810de98:	3308      	adds	r3, #8
 810de9a:	4606      	mov	r6, r0
 810de9c:	fb93 f3f2 	sdiv	r3, r3, r2
 810dea0:	2100      	movs	r1, #0
 810dea2:	2201      	movs	r2, #1
 810dea4:	429a      	cmp	r2, r3
 810dea6:	db09      	blt.n	810debc <__s2b+0x30>
 810dea8:	4630      	mov	r0, r6
 810deaa:	f7ff ff43 	bl	810dd34 <_Balloc>
 810deae:	b940      	cbnz	r0, 810dec2 <__s2b+0x36>
 810deb0:	4602      	mov	r2, r0
 810deb2:	4b19      	ldr	r3, [pc, #100]	; (810df18 <__s2b+0x8c>)
 810deb4:	4819      	ldr	r0, [pc, #100]	; (810df1c <__s2b+0x90>)
 810deb6:	21ce      	movs	r1, #206	; 0xce
 810deb8:	f7fc fa26 	bl	810a308 <__assert_func>
 810debc:	0052      	lsls	r2, r2, #1
 810debe:	3101      	adds	r1, #1
 810dec0:	e7f0      	b.n	810dea4 <__s2b+0x18>
 810dec2:	9b08      	ldr	r3, [sp, #32]
 810dec4:	6143      	str	r3, [r0, #20]
 810dec6:	2d09      	cmp	r5, #9
 810dec8:	f04f 0301 	mov.w	r3, #1
 810decc:	6103      	str	r3, [r0, #16]
 810dece:	dd16      	ble.n	810defe <__s2b+0x72>
 810ded0:	f104 0909 	add.w	r9, r4, #9
 810ded4:	46c8      	mov	r8, r9
 810ded6:	442c      	add	r4, r5
 810ded8:	f818 3b01 	ldrb.w	r3, [r8], #1
 810dedc:	4601      	mov	r1, r0
 810dede:	3b30      	subs	r3, #48	; 0x30
 810dee0:	220a      	movs	r2, #10
 810dee2:	4630      	mov	r0, r6
 810dee4:	f7ff ff88 	bl	810ddf8 <__multadd>
 810dee8:	45a0      	cmp	r8, r4
 810deea:	d1f5      	bne.n	810ded8 <__s2b+0x4c>
 810deec:	f1a5 0408 	sub.w	r4, r5, #8
 810def0:	444c      	add	r4, r9
 810def2:	1b2d      	subs	r5, r5, r4
 810def4:	1963      	adds	r3, r4, r5
 810def6:	42bb      	cmp	r3, r7
 810def8:	db04      	blt.n	810df04 <__s2b+0x78>
 810defa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810defe:	340a      	adds	r4, #10
 810df00:	2509      	movs	r5, #9
 810df02:	e7f6      	b.n	810def2 <__s2b+0x66>
 810df04:	f814 3b01 	ldrb.w	r3, [r4], #1
 810df08:	4601      	mov	r1, r0
 810df0a:	3b30      	subs	r3, #48	; 0x30
 810df0c:	220a      	movs	r2, #10
 810df0e:	4630      	mov	r0, r6
 810df10:	f7ff ff72 	bl	810ddf8 <__multadd>
 810df14:	e7ee      	b.n	810def4 <__s2b+0x68>
 810df16:	bf00      	nop
 810df18:	0810f12c 	.word	0x0810f12c
 810df1c:	0810f220 	.word	0x0810f220

0810df20 <__hi0bits>:
 810df20:	0c03      	lsrs	r3, r0, #16
 810df22:	041b      	lsls	r3, r3, #16
 810df24:	b9d3      	cbnz	r3, 810df5c <__hi0bits+0x3c>
 810df26:	0400      	lsls	r0, r0, #16
 810df28:	2310      	movs	r3, #16
 810df2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810df2e:	bf04      	itt	eq
 810df30:	0200      	lsleq	r0, r0, #8
 810df32:	3308      	addeq	r3, #8
 810df34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810df38:	bf04      	itt	eq
 810df3a:	0100      	lsleq	r0, r0, #4
 810df3c:	3304      	addeq	r3, #4
 810df3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810df42:	bf04      	itt	eq
 810df44:	0080      	lsleq	r0, r0, #2
 810df46:	3302      	addeq	r3, #2
 810df48:	2800      	cmp	r0, #0
 810df4a:	db05      	blt.n	810df58 <__hi0bits+0x38>
 810df4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810df50:	f103 0301 	add.w	r3, r3, #1
 810df54:	bf08      	it	eq
 810df56:	2320      	moveq	r3, #32
 810df58:	4618      	mov	r0, r3
 810df5a:	4770      	bx	lr
 810df5c:	2300      	movs	r3, #0
 810df5e:	e7e4      	b.n	810df2a <__hi0bits+0xa>

0810df60 <__lo0bits>:
 810df60:	6803      	ldr	r3, [r0, #0]
 810df62:	f013 0207 	ands.w	r2, r3, #7
 810df66:	4601      	mov	r1, r0
 810df68:	d00b      	beq.n	810df82 <__lo0bits+0x22>
 810df6a:	07da      	lsls	r2, r3, #31
 810df6c:	d424      	bmi.n	810dfb8 <__lo0bits+0x58>
 810df6e:	0798      	lsls	r0, r3, #30
 810df70:	bf49      	itett	mi
 810df72:	085b      	lsrmi	r3, r3, #1
 810df74:	089b      	lsrpl	r3, r3, #2
 810df76:	2001      	movmi	r0, #1
 810df78:	600b      	strmi	r3, [r1, #0]
 810df7a:	bf5c      	itt	pl
 810df7c:	600b      	strpl	r3, [r1, #0]
 810df7e:	2002      	movpl	r0, #2
 810df80:	4770      	bx	lr
 810df82:	b298      	uxth	r0, r3
 810df84:	b9b0      	cbnz	r0, 810dfb4 <__lo0bits+0x54>
 810df86:	0c1b      	lsrs	r3, r3, #16
 810df88:	2010      	movs	r0, #16
 810df8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 810df8e:	bf04      	itt	eq
 810df90:	0a1b      	lsreq	r3, r3, #8
 810df92:	3008      	addeq	r0, #8
 810df94:	071a      	lsls	r2, r3, #28
 810df96:	bf04      	itt	eq
 810df98:	091b      	lsreq	r3, r3, #4
 810df9a:	3004      	addeq	r0, #4
 810df9c:	079a      	lsls	r2, r3, #30
 810df9e:	bf04      	itt	eq
 810dfa0:	089b      	lsreq	r3, r3, #2
 810dfa2:	3002      	addeq	r0, #2
 810dfa4:	07da      	lsls	r2, r3, #31
 810dfa6:	d403      	bmi.n	810dfb0 <__lo0bits+0x50>
 810dfa8:	085b      	lsrs	r3, r3, #1
 810dfaa:	f100 0001 	add.w	r0, r0, #1
 810dfae:	d005      	beq.n	810dfbc <__lo0bits+0x5c>
 810dfb0:	600b      	str	r3, [r1, #0]
 810dfb2:	4770      	bx	lr
 810dfb4:	4610      	mov	r0, r2
 810dfb6:	e7e8      	b.n	810df8a <__lo0bits+0x2a>
 810dfb8:	2000      	movs	r0, #0
 810dfba:	4770      	bx	lr
 810dfbc:	2020      	movs	r0, #32
 810dfbe:	4770      	bx	lr

0810dfc0 <__i2b>:
 810dfc0:	b510      	push	{r4, lr}
 810dfc2:	460c      	mov	r4, r1
 810dfc4:	2101      	movs	r1, #1
 810dfc6:	f7ff feb5 	bl	810dd34 <_Balloc>
 810dfca:	4602      	mov	r2, r0
 810dfcc:	b928      	cbnz	r0, 810dfda <__i2b+0x1a>
 810dfce:	4b05      	ldr	r3, [pc, #20]	; (810dfe4 <__i2b+0x24>)
 810dfd0:	4805      	ldr	r0, [pc, #20]	; (810dfe8 <__i2b+0x28>)
 810dfd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810dfd6:	f7fc f997 	bl	810a308 <__assert_func>
 810dfda:	2301      	movs	r3, #1
 810dfdc:	6144      	str	r4, [r0, #20]
 810dfde:	6103      	str	r3, [r0, #16]
 810dfe0:	bd10      	pop	{r4, pc}
 810dfe2:	bf00      	nop
 810dfe4:	0810f12c 	.word	0x0810f12c
 810dfe8:	0810f220 	.word	0x0810f220

0810dfec <__multiply>:
 810dfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dff0:	4614      	mov	r4, r2
 810dff2:	690a      	ldr	r2, [r1, #16]
 810dff4:	6923      	ldr	r3, [r4, #16]
 810dff6:	429a      	cmp	r2, r3
 810dff8:	bfb8      	it	lt
 810dffa:	460b      	movlt	r3, r1
 810dffc:	460d      	mov	r5, r1
 810dffe:	bfbc      	itt	lt
 810e000:	4625      	movlt	r5, r4
 810e002:	461c      	movlt	r4, r3
 810e004:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810e008:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810e00c:	68ab      	ldr	r3, [r5, #8]
 810e00e:	6869      	ldr	r1, [r5, #4]
 810e010:	eb0a 0709 	add.w	r7, sl, r9
 810e014:	42bb      	cmp	r3, r7
 810e016:	b085      	sub	sp, #20
 810e018:	bfb8      	it	lt
 810e01a:	3101      	addlt	r1, #1
 810e01c:	f7ff fe8a 	bl	810dd34 <_Balloc>
 810e020:	b930      	cbnz	r0, 810e030 <__multiply+0x44>
 810e022:	4602      	mov	r2, r0
 810e024:	4b42      	ldr	r3, [pc, #264]	; (810e130 <__multiply+0x144>)
 810e026:	4843      	ldr	r0, [pc, #268]	; (810e134 <__multiply+0x148>)
 810e028:	f240 115d 	movw	r1, #349	; 0x15d
 810e02c:	f7fc f96c 	bl	810a308 <__assert_func>
 810e030:	f100 0614 	add.w	r6, r0, #20
 810e034:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810e038:	4633      	mov	r3, r6
 810e03a:	2200      	movs	r2, #0
 810e03c:	4543      	cmp	r3, r8
 810e03e:	d31e      	bcc.n	810e07e <__multiply+0x92>
 810e040:	f105 0c14 	add.w	ip, r5, #20
 810e044:	f104 0314 	add.w	r3, r4, #20
 810e048:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810e04c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810e050:	9202      	str	r2, [sp, #8]
 810e052:	ebac 0205 	sub.w	r2, ip, r5
 810e056:	3a15      	subs	r2, #21
 810e058:	f022 0203 	bic.w	r2, r2, #3
 810e05c:	3204      	adds	r2, #4
 810e05e:	f105 0115 	add.w	r1, r5, #21
 810e062:	458c      	cmp	ip, r1
 810e064:	bf38      	it	cc
 810e066:	2204      	movcc	r2, #4
 810e068:	9201      	str	r2, [sp, #4]
 810e06a:	9a02      	ldr	r2, [sp, #8]
 810e06c:	9303      	str	r3, [sp, #12]
 810e06e:	429a      	cmp	r2, r3
 810e070:	d808      	bhi.n	810e084 <__multiply+0x98>
 810e072:	2f00      	cmp	r7, #0
 810e074:	dc55      	bgt.n	810e122 <__multiply+0x136>
 810e076:	6107      	str	r7, [r0, #16]
 810e078:	b005      	add	sp, #20
 810e07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e07e:	f843 2b04 	str.w	r2, [r3], #4
 810e082:	e7db      	b.n	810e03c <__multiply+0x50>
 810e084:	f8b3 a000 	ldrh.w	sl, [r3]
 810e088:	f1ba 0f00 	cmp.w	sl, #0
 810e08c:	d020      	beq.n	810e0d0 <__multiply+0xe4>
 810e08e:	f105 0e14 	add.w	lr, r5, #20
 810e092:	46b1      	mov	r9, r6
 810e094:	2200      	movs	r2, #0
 810e096:	f85e 4b04 	ldr.w	r4, [lr], #4
 810e09a:	f8d9 b000 	ldr.w	fp, [r9]
 810e09e:	b2a1      	uxth	r1, r4
 810e0a0:	fa1f fb8b 	uxth.w	fp, fp
 810e0a4:	fb0a b101 	mla	r1, sl, r1, fp
 810e0a8:	4411      	add	r1, r2
 810e0aa:	f8d9 2000 	ldr.w	r2, [r9]
 810e0ae:	0c24      	lsrs	r4, r4, #16
 810e0b0:	0c12      	lsrs	r2, r2, #16
 810e0b2:	fb0a 2404 	mla	r4, sl, r4, r2
 810e0b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810e0ba:	b289      	uxth	r1, r1
 810e0bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810e0c0:	45f4      	cmp	ip, lr
 810e0c2:	f849 1b04 	str.w	r1, [r9], #4
 810e0c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810e0ca:	d8e4      	bhi.n	810e096 <__multiply+0xaa>
 810e0cc:	9901      	ldr	r1, [sp, #4]
 810e0ce:	5072      	str	r2, [r6, r1]
 810e0d0:	9a03      	ldr	r2, [sp, #12]
 810e0d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810e0d6:	3304      	adds	r3, #4
 810e0d8:	f1b9 0f00 	cmp.w	r9, #0
 810e0dc:	d01f      	beq.n	810e11e <__multiply+0x132>
 810e0de:	6834      	ldr	r4, [r6, #0]
 810e0e0:	f105 0114 	add.w	r1, r5, #20
 810e0e4:	46b6      	mov	lr, r6
 810e0e6:	f04f 0a00 	mov.w	sl, #0
 810e0ea:	880a      	ldrh	r2, [r1, #0]
 810e0ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 810e0f0:	fb09 b202 	mla	r2, r9, r2, fp
 810e0f4:	4492      	add	sl, r2
 810e0f6:	b2a4      	uxth	r4, r4
 810e0f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810e0fc:	f84e 4b04 	str.w	r4, [lr], #4
 810e100:	f851 4b04 	ldr.w	r4, [r1], #4
 810e104:	f8be 2000 	ldrh.w	r2, [lr]
 810e108:	0c24      	lsrs	r4, r4, #16
 810e10a:	fb09 2404 	mla	r4, r9, r4, r2
 810e10e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810e112:	458c      	cmp	ip, r1
 810e114:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810e118:	d8e7      	bhi.n	810e0ea <__multiply+0xfe>
 810e11a:	9a01      	ldr	r2, [sp, #4]
 810e11c:	50b4      	str	r4, [r6, r2]
 810e11e:	3604      	adds	r6, #4
 810e120:	e7a3      	b.n	810e06a <__multiply+0x7e>
 810e122:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e126:	2b00      	cmp	r3, #0
 810e128:	d1a5      	bne.n	810e076 <__multiply+0x8a>
 810e12a:	3f01      	subs	r7, #1
 810e12c:	e7a1      	b.n	810e072 <__multiply+0x86>
 810e12e:	bf00      	nop
 810e130:	0810f12c 	.word	0x0810f12c
 810e134:	0810f220 	.word	0x0810f220

0810e138 <__pow5mult>:
 810e138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e13c:	4615      	mov	r5, r2
 810e13e:	f012 0203 	ands.w	r2, r2, #3
 810e142:	4606      	mov	r6, r0
 810e144:	460f      	mov	r7, r1
 810e146:	d007      	beq.n	810e158 <__pow5mult+0x20>
 810e148:	4c25      	ldr	r4, [pc, #148]	; (810e1e0 <__pow5mult+0xa8>)
 810e14a:	3a01      	subs	r2, #1
 810e14c:	2300      	movs	r3, #0
 810e14e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810e152:	f7ff fe51 	bl	810ddf8 <__multadd>
 810e156:	4607      	mov	r7, r0
 810e158:	10ad      	asrs	r5, r5, #2
 810e15a:	d03d      	beq.n	810e1d8 <__pow5mult+0xa0>
 810e15c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810e15e:	b97c      	cbnz	r4, 810e180 <__pow5mult+0x48>
 810e160:	2010      	movs	r0, #16
 810e162:	f7fc f92b 	bl	810a3bc <malloc>
 810e166:	4602      	mov	r2, r0
 810e168:	6270      	str	r0, [r6, #36]	; 0x24
 810e16a:	b928      	cbnz	r0, 810e178 <__pow5mult+0x40>
 810e16c:	4b1d      	ldr	r3, [pc, #116]	; (810e1e4 <__pow5mult+0xac>)
 810e16e:	481e      	ldr	r0, [pc, #120]	; (810e1e8 <__pow5mult+0xb0>)
 810e170:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810e174:	f7fc f8c8 	bl	810a308 <__assert_func>
 810e178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810e17c:	6004      	str	r4, [r0, #0]
 810e17e:	60c4      	str	r4, [r0, #12]
 810e180:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810e184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810e188:	b94c      	cbnz	r4, 810e19e <__pow5mult+0x66>
 810e18a:	f240 2171 	movw	r1, #625	; 0x271
 810e18e:	4630      	mov	r0, r6
 810e190:	f7ff ff16 	bl	810dfc0 <__i2b>
 810e194:	2300      	movs	r3, #0
 810e196:	f8c8 0008 	str.w	r0, [r8, #8]
 810e19a:	4604      	mov	r4, r0
 810e19c:	6003      	str	r3, [r0, #0]
 810e19e:	f04f 0900 	mov.w	r9, #0
 810e1a2:	07eb      	lsls	r3, r5, #31
 810e1a4:	d50a      	bpl.n	810e1bc <__pow5mult+0x84>
 810e1a6:	4639      	mov	r1, r7
 810e1a8:	4622      	mov	r2, r4
 810e1aa:	4630      	mov	r0, r6
 810e1ac:	f7ff ff1e 	bl	810dfec <__multiply>
 810e1b0:	4639      	mov	r1, r7
 810e1b2:	4680      	mov	r8, r0
 810e1b4:	4630      	mov	r0, r6
 810e1b6:	f7ff fdfd 	bl	810ddb4 <_Bfree>
 810e1ba:	4647      	mov	r7, r8
 810e1bc:	106d      	asrs	r5, r5, #1
 810e1be:	d00b      	beq.n	810e1d8 <__pow5mult+0xa0>
 810e1c0:	6820      	ldr	r0, [r4, #0]
 810e1c2:	b938      	cbnz	r0, 810e1d4 <__pow5mult+0x9c>
 810e1c4:	4622      	mov	r2, r4
 810e1c6:	4621      	mov	r1, r4
 810e1c8:	4630      	mov	r0, r6
 810e1ca:	f7ff ff0f 	bl	810dfec <__multiply>
 810e1ce:	6020      	str	r0, [r4, #0]
 810e1d0:	f8c0 9000 	str.w	r9, [r0]
 810e1d4:	4604      	mov	r4, r0
 810e1d6:	e7e4      	b.n	810e1a2 <__pow5mult+0x6a>
 810e1d8:	4638      	mov	r0, r7
 810e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e1de:	bf00      	nop
 810e1e0:	0810f370 	.word	0x0810f370
 810e1e4:	0810f0b6 	.word	0x0810f0b6
 810e1e8:	0810f220 	.word	0x0810f220

0810e1ec <__lshift>:
 810e1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e1f0:	460c      	mov	r4, r1
 810e1f2:	6849      	ldr	r1, [r1, #4]
 810e1f4:	6923      	ldr	r3, [r4, #16]
 810e1f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810e1fa:	68a3      	ldr	r3, [r4, #8]
 810e1fc:	4607      	mov	r7, r0
 810e1fe:	4691      	mov	r9, r2
 810e200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810e204:	f108 0601 	add.w	r6, r8, #1
 810e208:	42b3      	cmp	r3, r6
 810e20a:	db0b      	blt.n	810e224 <__lshift+0x38>
 810e20c:	4638      	mov	r0, r7
 810e20e:	f7ff fd91 	bl	810dd34 <_Balloc>
 810e212:	4605      	mov	r5, r0
 810e214:	b948      	cbnz	r0, 810e22a <__lshift+0x3e>
 810e216:	4602      	mov	r2, r0
 810e218:	4b28      	ldr	r3, [pc, #160]	; (810e2bc <__lshift+0xd0>)
 810e21a:	4829      	ldr	r0, [pc, #164]	; (810e2c0 <__lshift+0xd4>)
 810e21c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810e220:	f7fc f872 	bl	810a308 <__assert_func>
 810e224:	3101      	adds	r1, #1
 810e226:	005b      	lsls	r3, r3, #1
 810e228:	e7ee      	b.n	810e208 <__lshift+0x1c>
 810e22a:	2300      	movs	r3, #0
 810e22c:	f100 0114 	add.w	r1, r0, #20
 810e230:	f100 0210 	add.w	r2, r0, #16
 810e234:	4618      	mov	r0, r3
 810e236:	4553      	cmp	r3, sl
 810e238:	db33      	blt.n	810e2a2 <__lshift+0xb6>
 810e23a:	6920      	ldr	r0, [r4, #16]
 810e23c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e240:	f104 0314 	add.w	r3, r4, #20
 810e244:	f019 091f 	ands.w	r9, r9, #31
 810e248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810e24c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810e250:	d02b      	beq.n	810e2aa <__lshift+0xbe>
 810e252:	f1c9 0e20 	rsb	lr, r9, #32
 810e256:	468a      	mov	sl, r1
 810e258:	2200      	movs	r2, #0
 810e25a:	6818      	ldr	r0, [r3, #0]
 810e25c:	fa00 f009 	lsl.w	r0, r0, r9
 810e260:	4302      	orrs	r2, r0
 810e262:	f84a 2b04 	str.w	r2, [sl], #4
 810e266:	f853 2b04 	ldr.w	r2, [r3], #4
 810e26a:	459c      	cmp	ip, r3
 810e26c:	fa22 f20e 	lsr.w	r2, r2, lr
 810e270:	d8f3      	bhi.n	810e25a <__lshift+0x6e>
 810e272:	ebac 0304 	sub.w	r3, ip, r4
 810e276:	3b15      	subs	r3, #21
 810e278:	f023 0303 	bic.w	r3, r3, #3
 810e27c:	3304      	adds	r3, #4
 810e27e:	f104 0015 	add.w	r0, r4, #21
 810e282:	4584      	cmp	ip, r0
 810e284:	bf38      	it	cc
 810e286:	2304      	movcc	r3, #4
 810e288:	50ca      	str	r2, [r1, r3]
 810e28a:	b10a      	cbz	r2, 810e290 <__lshift+0xa4>
 810e28c:	f108 0602 	add.w	r6, r8, #2
 810e290:	3e01      	subs	r6, #1
 810e292:	4638      	mov	r0, r7
 810e294:	612e      	str	r6, [r5, #16]
 810e296:	4621      	mov	r1, r4
 810e298:	f7ff fd8c 	bl	810ddb4 <_Bfree>
 810e29c:	4628      	mov	r0, r5
 810e29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e2a2:	f842 0f04 	str.w	r0, [r2, #4]!
 810e2a6:	3301      	adds	r3, #1
 810e2a8:	e7c5      	b.n	810e236 <__lshift+0x4a>
 810e2aa:	3904      	subs	r1, #4
 810e2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 810e2b0:	f841 2f04 	str.w	r2, [r1, #4]!
 810e2b4:	459c      	cmp	ip, r3
 810e2b6:	d8f9      	bhi.n	810e2ac <__lshift+0xc0>
 810e2b8:	e7ea      	b.n	810e290 <__lshift+0xa4>
 810e2ba:	bf00      	nop
 810e2bc:	0810f12c 	.word	0x0810f12c
 810e2c0:	0810f220 	.word	0x0810f220

0810e2c4 <__mcmp>:
 810e2c4:	b530      	push	{r4, r5, lr}
 810e2c6:	6902      	ldr	r2, [r0, #16]
 810e2c8:	690c      	ldr	r4, [r1, #16]
 810e2ca:	1b12      	subs	r2, r2, r4
 810e2cc:	d10e      	bne.n	810e2ec <__mcmp+0x28>
 810e2ce:	f100 0314 	add.w	r3, r0, #20
 810e2d2:	3114      	adds	r1, #20
 810e2d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810e2d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810e2dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810e2e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810e2e4:	42a5      	cmp	r5, r4
 810e2e6:	d003      	beq.n	810e2f0 <__mcmp+0x2c>
 810e2e8:	d305      	bcc.n	810e2f6 <__mcmp+0x32>
 810e2ea:	2201      	movs	r2, #1
 810e2ec:	4610      	mov	r0, r2
 810e2ee:	bd30      	pop	{r4, r5, pc}
 810e2f0:	4283      	cmp	r3, r0
 810e2f2:	d3f3      	bcc.n	810e2dc <__mcmp+0x18>
 810e2f4:	e7fa      	b.n	810e2ec <__mcmp+0x28>
 810e2f6:	f04f 32ff 	mov.w	r2, #4294967295
 810e2fa:	e7f7      	b.n	810e2ec <__mcmp+0x28>

0810e2fc <__mdiff>:
 810e2fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e300:	460c      	mov	r4, r1
 810e302:	4606      	mov	r6, r0
 810e304:	4611      	mov	r1, r2
 810e306:	4620      	mov	r0, r4
 810e308:	4617      	mov	r7, r2
 810e30a:	f7ff ffdb 	bl	810e2c4 <__mcmp>
 810e30e:	1e05      	subs	r5, r0, #0
 810e310:	d110      	bne.n	810e334 <__mdiff+0x38>
 810e312:	4629      	mov	r1, r5
 810e314:	4630      	mov	r0, r6
 810e316:	f7ff fd0d 	bl	810dd34 <_Balloc>
 810e31a:	b930      	cbnz	r0, 810e32a <__mdiff+0x2e>
 810e31c:	4b39      	ldr	r3, [pc, #228]	; (810e404 <__mdiff+0x108>)
 810e31e:	4602      	mov	r2, r0
 810e320:	f240 2132 	movw	r1, #562	; 0x232
 810e324:	4838      	ldr	r0, [pc, #224]	; (810e408 <__mdiff+0x10c>)
 810e326:	f7fb ffef 	bl	810a308 <__assert_func>
 810e32a:	2301      	movs	r3, #1
 810e32c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810e330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e334:	bfa4      	itt	ge
 810e336:	463b      	movge	r3, r7
 810e338:	4627      	movge	r7, r4
 810e33a:	4630      	mov	r0, r6
 810e33c:	6879      	ldr	r1, [r7, #4]
 810e33e:	bfa6      	itte	ge
 810e340:	461c      	movge	r4, r3
 810e342:	2500      	movge	r5, #0
 810e344:	2501      	movlt	r5, #1
 810e346:	f7ff fcf5 	bl	810dd34 <_Balloc>
 810e34a:	b920      	cbnz	r0, 810e356 <__mdiff+0x5a>
 810e34c:	4b2d      	ldr	r3, [pc, #180]	; (810e404 <__mdiff+0x108>)
 810e34e:	4602      	mov	r2, r0
 810e350:	f44f 7110 	mov.w	r1, #576	; 0x240
 810e354:	e7e6      	b.n	810e324 <__mdiff+0x28>
 810e356:	693e      	ldr	r6, [r7, #16]
 810e358:	60c5      	str	r5, [r0, #12]
 810e35a:	6925      	ldr	r5, [r4, #16]
 810e35c:	f107 0114 	add.w	r1, r7, #20
 810e360:	f104 0914 	add.w	r9, r4, #20
 810e364:	f100 0e14 	add.w	lr, r0, #20
 810e368:	f107 0210 	add.w	r2, r7, #16
 810e36c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810e370:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810e374:	46f2      	mov	sl, lr
 810e376:	2700      	movs	r7, #0
 810e378:	f859 3b04 	ldr.w	r3, [r9], #4
 810e37c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810e380:	fa1f f883 	uxth.w	r8, r3
 810e384:	fa17 f78b 	uxtah	r7, r7, fp
 810e388:	0c1b      	lsrs	r3, r3, #16
 810e38a:	eba7 0808 	sub.w	r8, r7, r8
 810e38e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810e392:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810e396:	fa1f f888 	uxth.w	r8, r8
 810e39a:	141f      	asrs	r7, r3, #16
 810e39c:	454d      	cmp	r5, r9
 810e39e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810e3a2:	f84a 3b04 	str.w	r3, [sl], #4
 810e3a6:	d8e7      	bhi.n	810e378 <__mdiff+0x7c>
 810e3a8:	1b2b      	subs	r3, r5, r4
 810e3aa:	3b15      	subs	r3, #21
 810e3ac:	f023 0303 	bic.w	r3, r3, #3
 810e3b0:	3304      	adds	r3, #4
 810e3b2:	3415      	adds	r4, #21
 810e3b4:	42a5      	cmp	r5, r4
 810e3b6:	bf38      	it	cc
 810e3b8:	2304      	movcc	r3, #4
 810e3ba:	4419      	add	r1, r3
 810e3bc:	4473      	add	r3, lr
 810e3be:	469e      	mov	lr, r3
 810e3c0:	460d      	mov	r5, r1
 810e3c2:	4565      	cmp	r5, ip
 810e3c4:	d30e      	bcc.n	810e3e4 <__mdiff+0xe8>
 810e3c6:	f10c 0203 	add.w	r2, ip, #3
 810e3ca:	1a52      	subs	r2, r2, r1
 810e3cc:	f022 0203 	bic.w	r2, r2, #3
 810e3d0:	3903      	subs	r1, #3
 810e3d2:	458c      	cmp	ip, r1
 810e3d4:	bf38      	it	cc
 810e3d6:	2200      	movcc	r2, #0
 810e3d8:	441a      	add	r2, r3
 810e3da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810e3de:	b17b      	cbz	r3, 810e400 <__mdiff+0x104>
 810e3e0:	6106      	str	r6, [r0, #16]
 810e3e2:	e7a5      	b.n	810e330 <__mdiff+0x34>
 810e3e4:	f855 8b04 	ldr.w	r8, [r5], #4
 810e3e8:	fa17 f488 	uxtah	r4, r7, r8
 810e3ec:	1422      	asrs	r2, r4, #16
 810e3ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810e3f2:	b2a4      	uxth	r4, r4
 810e3f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810e3f8:	f84e 4b04 	str.w	r4, [lr], #4
 810e3fc:	1417      	asrs	r7, r2, #16
 810e3fe:	e7e0      	b.n	810e3c2 <__mdiff+0xc6>
 810e400:	3e01      	subs	r6, #1
 810e402:	e7ea      	b.n	810e3da <__mdiff+0xde>
 810e404:	0810f12c 	.word	0x0810f12c
 810e408:	0810f220 	.word	0x0810f220

0810e40c <__ulp>:
 810e40c:	b082      	sub	sp, #8
 810e40e:	ed8d 0b00 	vstr	d0, [sp]
 810e412:	9b01      	ldr	r3, [sp, #4]
 810e414:	4912      	ldr	r1, [pc, #72]	; (810e460 <__ulp+0x54>)
 810e416:	4019      	ands	r1, r3
 810e418:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810e41c:	2900      	cmp	r1, #0
 810e41e:	dd05      	ble.n	810e42c <__ulp+0x20>
 810e420:	2200      	movs	r2, #0
 810e422:	460b      	mov	r3, r1
 810e424:	ec43 2b10 	vmov	d0, r2, r3
 810e428:	b002      	add	sp, #8
 810e42a:	4770      	bx	lr
 810e42c:	4249      	negs	r1, r1
 810e42e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810e432:	ea4f 5021 	mov.w	r0, r1, asr #20
 810e436:	f04f 0200 	mov.w	r2, #0
 810e43a:	f04f 0300 	mov.w	r3, #0
 810e43e:	da04      	bge.n	810e44a <__ulp+0x3e>
 810e440:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810e444:	fa41 f300 	asr.w	r3, r1, r0
 810e448:	e7ec      	b.n	810e424 <__ulp+0x18>
 810e44a:	f1a0 0114 	sub.w	r1, r0, #20
 810e44e:	291e      	cmp	r1, #30
 810e450:	bfda      	itte	le
 810e452:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810e456:	fa20 f101 	lsrle.w	r1, r0, r1
 810e45a:	2101      	movgt	r1, #1
 810e45c:	460a      	mov	r2, r1
 810e45e:	e7e1      	b.n	810e424 <__ulp+0x18>
 810e460:	7ff00000 	.word	0x7ff00000

0810e464 <__b2d>:
 810e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e466:	6905      	ldr	r5, [r0, #16]
 810e468:	f100 0714 	add.w	r7, r0, #20
 810e46c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810e470:	1f2e      	subs	r6, r5, #4
 810e472:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810e476:	4620      	mov	r0, r4
 810e478:	f7ff fd52 	bl	810df20 <__hi0bits>
 810e47c:	f1c0 0320 	rsb	r3, r0, #32
 810e480:	280a      	cmp	r0, #10
 810e482:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810e500 <__b2d+0x9c>
 810e486:	600b      	str	r3, [r1, #0]
 810e488:	dc14      	bgt.n	810e4b4 <__b2d+0x50>
 810e48a:	f1c0 0e0b 	rsb	lr, r0, #11
 810e48e:	fa24 f10e 	lsr.w	r1, r4, lr
 810e492:	42b7      	cmp	r7, r6
 810e494:	ea41 030c 	orr.w	r3, r1, ip
 810e498:	bf34      	ite	cc
 810e49a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810e49e:	2100      	movcs	r1, #0
 810e4a0:	3015      	adds	r0, #21
 810e4a2:	fa04 f000 	lsl.w	r0, r4, r0
 810e4a6:	fa21 f10e 	lsr.w	r1, r1, lr
 810e4aa:	ea40 0201 	orr.w	r2, r0, r1
 810e4ae:	ec43 2b10 	vmov	d0, r2, r3
 810e4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e4b4:	42b7      	cmp	r7, r6
 810e4b6:	bf3a      	itte	cc
 810e4b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810e4bc:	f1a5 0608 	subcc.w	r6, r5, #8
 810e4c0:	2100      	movcs	r1, #0
 810e4c2:	380b      	subs	r0, #11
 810e4c4:	d017      	beq.n	810e4f6 <__b2d+0x92>
 810e4c6:	f1c0 0c20 	rsb	ip, r0, #32
 810e4ca:	fa04 f500 	lsl.w	r5, r4, r0
 810e4ce:	42be      	cmp	r6, r7
 810e4d0:	fa21 f40c 	lsr.w	r4, r1, ip
 810e4d4:	ea45 0504 	orr.w	r5, r5, r4
 810e4d8:	bf8c      	ite	hi
 810e4da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810e4de:	2400      	movls	r4, #0
 810e4e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810e4e4:	fa01 f000 	lsl.w	r0, r1, r0
 810e4e8:	fa24 f40c 	lsr.w	r4, r4, ip
 810e4ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810e4f0:	ea40 0204 	orr.w	r2, r0, r4
 810e4f4:	e7db      	b.n	810e4ae <__b2d+0x4a>
 810e4f6:	ea44 030c 	orr.w	r3, r4, ip
 810e4fa:	460a      	mov	r2, r1
 810e4fc:	e7d7      	b.n	810e4ae <__b2d+0x4a>
 810e4fe:	bf00      	nop
 810e500:	3ff00000 	.word	0x3ff00000

0810e504 <__d2b>:
 810e504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810e508:	4689      	mov	r9, r1
 810e50a:	2101      	movs	r1, #1
 810e50c:	ec57 6b10 	vmov	r6, r7, d0
 810e510:	4690      	mov	r8, r2
 810e512:	f7ff fc0f 	bl	810dd34 <_Balloc>
 810e516:	4604      	mov	r4, r0
 810e518:	b930      	cbnz	r0, 810e528 <__d2b+0x24>
 810e51a:	4602      	mov	r2, r0
 810e51c:	4b25      	ldr	r3, [pc, #148]	; (810e5b4 <__d2b+0xb0>)
 810e51e:	4826      	ldr	r0, [pc, #152]	; (810e5b8 <__d2b+0xb4>)
 810e520:	f240 310a 	movw	r1, #778	; 0x30a
 810e524:	f7fb fef0 	bl	810a308 <__assert_func>
 810e528:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810e52c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810e530:	bb35      	cbnz	r5, 810e580 <__d2b+0x7c>
 810e532:	2e00      	cmp	r6, #0
 810e534:	9301      	str	r3, [sp, #4]
 810e536:	d028      	beq.n	810e58a <__d2b+0x86>
 810e538:	4668      	mov	r0, sp
 810e53a:	9600      	str	r6, [sp, #0]
 810e53c:	f7ff fd10 	bl	810df60 <__lo0bits>
 810e540:	9900      	ldr	r1, [sp, #0]
 810e542:	b300      	cbz	r0, 810e586 <__d2b+0x82>
 810e544:	9a01      	ldr	r2, [sp, #4]
 810e546:	f1c0 0320 	rsb	r3, r0, #32
 810e54a:	fa02 f303 	lsl.w	r3, r2, r3
 810e54e:	430b      	orrs	r3, r1
 810e550:	40c2      	lsrs	r2, r0
 810e552:	6163      	str	r3, [r4, #20]
 810e554:	9201      	str	r2, [sp, #4]
 810e556:	9b01      	ldr	r3, [sp, #4]
 810e558:	61a3      	str	r3, [r4, #24]
 810e55a:	2b00      	cmp	r3, #0
 810e55c:	bf14      	ite	ne
 810e55e:	2202      	movne	r2, #2
 810e560:	2201      	moveq	r2, #1
 810e562:	6122      	str	r2, [r4, #16]
 810e564:	b1d5      	cbz	r5, 810e59c <__d2b+0x98>
 810e566:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810e56a:	4405      	add	r5, r0
 810e56c:	f8c9 5000 	str.w	r5, [r9]
 810e570:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810e574:	f8c8 0000 	str.w	r0, [r8]
 810e578:	4620      	mov	r0, r4
 810e57a:	b003      	add	sp, #12
 810e57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e584:	e7d5      	b.n	810e532 <__d2b+0x2e>
 810e586:	6161      	str	r1, [r4, #20]
 810e588:	e7e5      	b.n	810e556 <__d2b+0x52>
 810e58a:	a801      	add	r0, sp, #4
 810e58c:	f7ff fce8 	bl	810df60 <__lo0bits>
 810e590:	9b01      	ldr	r3, [sp, #4]
 810e592:	6163      	str	r3, [r4, #20]
 810e594:	2201      	movs	r2, #1
 810e596:	6122      	str	r2, [r4, #16]
 810e598:	3020      	adds	r0, #32
 810e59a:	e7e3      	b.n	810e564 <__d2b+0x60>
 810e59c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810e5a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810e5a4:	f8c9 0000 	str.w	r0, [r9]
 810e5a8:	6918      	ldr	r0, [r3, #16]
 810e5aa:	f7ff fcb9 	bl	810df20 <__hi0bits>
 810e5ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810e5b2:	e7df      	b.n	810e574 <__d2b+0x70>
 810e5b4:	0810f12c 	.word	0x0810f12c
 810e5b8:	0810f220 	.word	0x0810f220

0810e5bc <__ratio>:
 810e5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e5c0:	4688      	mov	r8, r1
 810e5c2:	4669      	mov	r1, sp
 810e5c4:	4681      	mov	r9, r0
 810e5c6:	f7ff ff4d 	bl	810e464 <__b2d>
 810e5ca:	a901      	add	r1, sp, #4
 810e5cc:	4640      	mov	r0, r8
 810e5ce:	ec55 4b10 	vmov	r4, r5, d0
 810e5d2:	f7ff ff47 	bl	810e464 <__b2d>
 810e5d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810e5da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810e5de:	eba3 0c02 	sub.w	ip, r3, r2
 810e5e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 810e5e6:	1a9b      	subs	r3, r3, r2
 810e5e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810e5ec:	ec51 0b10 	vmov	r0, r1, d0
 810e5f0:	2b00      	cmp	r3, #0
 810e5f2:	bfd6      	itet	le
 810e5f4:	460a      	movle	r2, r1
 810e5f6:	462a      	movgt	r2, r5
 810e5f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810e5fc:	468b      	mov	fp, r1
 810e5fe:	462f      	mov	r7, r5
 810e600:	bfd4      	ite	le
 810e602:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810e606:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810e60a:	4620      	mov	r0, r4
 810e60c:	ee10 2a10 	vmov	r2, s0
 810e610:	465b      	mov	r3, fp
 810e612:	4639      	mov	r1, r7
 810e614:	f7f2 f9b2 	bl	810097c <__aeabi_ddiv>
 810e618:	ec41 0b10 	vmov	d0, r0, r1
 810e61c:	b003      	add	sp, #12
 810e61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e622 <__copybits>:
 810e622:	3901      	subs	r1, #1
 810e624:	b570      	push	{r4, r5, r6, lr}
 810e626:	1149      	asrs	r1, r1, #5
 810e628:	6914      	ldr	r4, [r2, #16]
 810e62a:	3101      	adds	r1, #1
 810e62c:	f102 0314 	add.w	r3, r2, #20
 810e630:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810e634:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810e638:	1f05      	subs	r5, r0, #4
 810e63a:	42a3      	cmp	r3, r4
 810e63c:	d30c      	bcc.n	810e658 <__copybits+0x36>
 810e63e:	1aa3      	subs	r3, r4, r2
 810e640:	3b11      	subs	r3, #17
 810e642:	f023 0303 	bic.w	r3, r3, #3
 810e646:	3211      	adds	r2, #17
 810e648:	42a2      	cmp	r2, r4
 810e64a:	bf88      	it	hi
 810e64c:	2300      	movhi	r3, #0
 810e64e:	4418      	add	r0, r3
 810e650:	2300      	movs	r3, #0
 810e652:	4288      	cmp	r0, r1
 810e654:	d305      	bcc.n	810e662 <__copybits+0x40>
 810e656:	bd70      	pop	{r4, r5, r6, pc}
 810e658:	f853 6b04 	ldr.w	r6, [r3], #4
 810e65c:	f845 6f04 	str.w	r6, [r5, #4]!
 810e660:	e7eb      	b.n	810e63a <__copybits+0x18>
 810e662:	f840 3b04 	str.w	r3, [r0], #4
 810e666:	e7f4      	b.n	810e652 <__copybits+0x30>

0810e668 <__any_on>:
 810e668:	f100 0214 	add.w	r2, r0, #20
 810e66c:	6900      	ldr	r0, [r0, #16]
 810e66e:	114b      	asrs	r3, r1, #5
 810e670:	4298      	cmp	r0, r3
 810e672:	b510      	push	{r4, lr}
 810e674:	db11      	blt.n	810e69a <__any_on+0x32>
 810e676:	dd0a      	ble.n	810e68e <__any_on+0x26>
 810e678:	f011 011f 	ands.w	r1, r1, #31
 810e67c:	d007      	beq.n	810e68e <__any_on+0x26>
 810e67e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810e682:	fa24 f001 	lsr.w	r0, r4, r1
 810e686:	fa00 f101 	lsl.w	r1, r0, r1
 810e68a:	428c      	cmp	r4, r1
 810e68c:	d10b      	bne.n	810e6a6 <__any_on+0x3e>
 810e68e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810e692:	4293      	cmp	r3, r2
 810e694:	d803      	bhi.n	810e69e <__any_on+0x36>
 810e696:	2000      	movs	r0, #0
 810e698:	bd10      	pop	{r4, pc}
 810e69a:	4603      	mov	r3, r0
 810e69c:	e7f7      	b.n	810e68e <__any_on+0x26>
 810e69e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810e6a2:	2900      	cmp	r1, #0
 810e6a4:	d0f5      	beq.n	810e692 <__any_on+0x2a>
 810e6a6:	2001      	movs	r0, #1
 810e6a8:	e7f6      	b.n	810e698 <__any_on+0x30>

0810e6aa <_calloc_r>:
 810e6aa:	b513      	push	{r0, r1, r4, lr}
 810e6ac:	434a      	muls	r2, r1
 810e6ae:	4611      	mov	r1, r2
 810e6b0:	9201      	str	r2, [sp, #4]
 810e6b2:	f7fb fef9 	bl	810a4a8 <_malloc_r>
 810e6b6:	4604      	mov	r4, r0
 810e6b8:	b118      	cbz	r0, 810e6c2 <_calloc_r+0x18>
 810e6ba:	9a01      	ldr	r2, [sp, #4]
 810e6bc:	2100      	movs	r1, #0
 810e6be:	f7fb fe9b 	bl	810a3f8 <memset>
 810e6c2:	4620      	mov	r0, r4
 810e6c4:	b002      	add	sp, #8
 810e6c6:	bd10      	pop	{r4, pc}

0810e6c8 <_realloc_r>:
 810e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6ca:	4607      	mov	r7, r0
 810e6cc:	4614      	mov	r4, r2
 810e6ce:	460e      	mov	r6, r1
 810e6d0:	b921      	cbnz	r1, 810e6dc <_realloc_r+0x14>
 810e6d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810e6d6:	4611      	mov	r1, r2
 810e6d8:	f7fb bee6 	b.w	810a4a8 <_malloc_r>
 810e6dc:	b922      	cbnz	r2, 810e6e8 <_realloc_r+0x20>
 810e6de:	f7fb fe93 	bl	810a408 <_free_r>
 810e6e2:	4625      	mov	r5, r4
 810e6e4:	4628      	mov	r0, r5
 810e6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e6e8:	f000 fa5a 	bl	810eba0 <_malloc_usable_size_r>
 810e6ec:	42a0      	cmp	r0, r4
 810e6ee:	d20f      	bcs.n	810e710 <_realloc_r+0x48>
 810e6f0:	4621      	mov	r1, r4
 810e6f2:	4638      	mov	r0, r7
 810e6f4:	f7fb fed8 	bl	810a4a8 <_malloc_r>
 810e6f8:	4605      	mov	r5, r0
 810e6fa:	2800      	cmp	r0, #0
 810e6fc:	d0f2      	beq.n	810e6e4 <_realloc_r+0x1c>
 810e6fe:	4631      	mov	r1, r6
 810e700:	4622      	mov	r2, r4
 810e702:	f7fb fe6b 	bl	810a3dc <memcpy>
 810e706:	4631      	mov	r1, r6
 810e708:	4638      	mov	r0, r7
 810e70a:	f7fb fe7d 	bl	810a408 <_free_r>
 810e70e:	e7e9      	b.n	810e6e4 <_realloc_r+0x1c>
 810e710:	4635      	mov	r5, r6
 810e712:	e7e7      	b.n	810e6e4 <_realloc_r+0x1c>

0810e714 <__ssputs_r>:
 810e714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e718:	688e      	ldr	r6, [r1, #8]
 810e71a:	429e      	cmp	r6, r3
 810e71c:	4682      	mov	sl, r0
 810e71e:	460c      	mov	r4, r1
 810e720:	4690      	mov	r8, r2
 810e722:	461f      	mov	r7, r3
 810e724:	d838      	bhi.n	810e798 <__ssputs_r+0x84>
 810e726:	898a      	ldrh	r2, [r1, #12]
 810e728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810e72c:	d032      	beq.n	810e794 <__ssputs_r+0x80>
 810e72e:	6825      	ldr	r5, [r4, #0]
 810e730:	6909      	ldr	r1, [r1, #16]
 810e732:	eba5 0901 	sub.w	r9, r5, r1
 810e736:	6965      	ldr	r5, [r4, #20]
 810e738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810e73c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810e740:	3301      	adds	r3, #1
 810e742:	444b      	add	r3, r9
 810e744:	106d      	asrs	r5, r5, #1
 810e746:	429d      	cmp	r5, r3
 810e748:	bf38      	it	cc
 810e74a:	461d      	movcc	r5, r3
 810e74c:	0553      	lsls	r3, r2, #21
 810e74e:	d531      	bpl.n	810e7b4 <__ssputs_r+0xa0>
 810e750:	4629      	mov	r1, r5
 810e752:	f7fb fea9 	bl	810a4a8 <_malloc_r>
 810e756:	4606      	mov	r6, r0
 810e758:	b950      	cbnz	r0, 810e770 <__ssputs_r+0x5c>
 810e75a:	230c      	movs	r3, #12
 810e75c:	f8ca 3000 	str.w	r3, [sl]
 810e760:	89a3      	ldrh	r3, [r4, #12]
 810e762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e766:	81a3      	strh	r3, [r4, #12]
 810e768:	f04f 30ff 	mov.w	r0, #4294967295
 810e76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e770:	6921      	ldr	r1, [r4, #16]
 810e772:	464a      	mov	r2, r9
 810e774:	f7fb fe32 	bl	810a3dc <memcpy>
 810e778:	89a3      	ldrh	r3, [r4, #12]
 810e77a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810e77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e782:	81a3      	strh	r3, [r4, #12]
 810e784:	6126      	str	r6, [r4, #16]
 810e786:	6165      	str	r5, [r4, #20]
 810e788:	444e      	add	r6, r9
 810e78a:	eba5 0509 	sub.w	r5, r5, r9
 810e78e:	6026      	str	r6, [r4, #0]
 810e790:	60a5      	str	r5, [r4, #8]
 810e792:	463e      	mov	r6, r7
 810e794:	42be      	cmp	r6, r7
 810e796:	d900      	bls.n	810e79a <__ssputs_r+0x86>
 810e798:	463e      	mov	r6, r7
 810e79a:	4632      	mov	r2, r6
 810e79c:	6820      	ldr	r0, [r4, #0]
 810e79e:	4641      	mov	r1, r8
 810e7a0:	f7ff faa2 	bl	810dce8 <memmove>
 810e7a4:	68a3      	ldr	r3, [r4, #8]
 810e7a6:	6822      	ldr	r2, [r4, #0]
 810e7a8:	1b9b      	subs	r3, r3, r6
 810e7aa:	4432      	add	r2, r6
 810e7ac:	60a3      	str	r3, [r4, #8]
 810e7ae:	6022      	str	r2, [r4, #0]
 810e7b0:	2000      	movs	r0, #0
 810e7b2:	e7db      	b.n	810e76c <__ssputs_r+0x58>
 810e7b4:	462a      	mov	r2, r5
 810e7b6:	f7ff ff87 	bl	810e6c8 <_realloc_r>
 810e7ba:	4606      	mov	r6, r0
 810e7bc:	2800      	cmp	r0, #0
 810e7be:	d1e1      	bne.n	810e784 <__ssputs_r+0x70>
 810e7c0:	6921      	ldr	r1, [r4, #16]
 810e7c2:	4650      	mov	r0, sl
 810e7c4:	f7fb fe20 	bl	810a408 <_free_r>
 810e7c8:	e7c7      	b.n	810e75a <__ssputs_r+0x46>
	...

0810e7cc <_svfiprintf_r>:
 810e7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e7d0:	4698      	mov	r8, r3
 810e7d2:	898b      	ldrh	r3, [r1, #12]
 810e7d4:	061b      	lsls	r3, r3, #24
 810e7d6:	b09d      	sub	sp, #116	; 0x74
 810e7d8:	4607      	mov	r7, r0
 810e7da:	460d      	mov	r5, r1
 810e7dc:	4614      	mov	r4, r2
 810e7de:	d50e      	bpl.n	810e7fe <_svfiprintf_r+0x32>
 810e7e0:	690b      	ldr	r3, [r1, #16]
 810e7e2:	b963      	cbnz	r3, 810e7fe <_svfiprintf_r+0x32>
 810e7e4:	2140      	movs	r1, #64	; 0x40
 810e7e6:	f7fb fe5f 	bl	810a4a8 <_malloc_r>
 810e7ea:	6028      	str	r0, [r5, #0]
 810e7ec:	6128      	str	r0, [r5, #16]
 810e7ee:	b920      	cbnz	r0, 810e7fa <_svfiprintf_r+0x2e>
 810e7f0:	230c      	movs	r3, #12
 810e7f2:	603b      	str	r3, [r7, #0]
 810e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 810e7f8:	e0d1      	b.n	810e99e <_svfiprintf_r+0x1d2>
 810e7fa:	2340      	movs	r3, #64	; 0x40
 810e7fc:	616b      	str	r3, [r5, #20]
 810e7fe:	2300      	movs	r3, #0
 810e800:	9309      	str	r3, [sp, #36]	; 0x24
 810e802:	2320      	movs	r3, #32
 810e804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810e808:	f8cd 800c 	str.w	r8, [sp, #12]
 810e80c:	2330      	movs	r3, #48	; 0x30
 810e80e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810e9b8 <_svfiprintf_r+0x1ec>
 810e812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810e816:	f04f 0901 	mov.w	r9, #1
 810e81a:	4623      	mov	r3, r4
 810e81c:	469a      	mov	sl, r3
 810e81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e822:	b10a      	cbz	r2, 810e828 <_svfiprintf_r+0x5c>
 810e824:	2a25      	cmp	r2, #37	; 0x25
 810e826:	d1f9      	bne.n	810e81c <_svfiprintf_r+0x50>
 810e828:	ebba 0b04 	subs.w	fp, sl, r4
 810e82c:	d00b      	beq.n	810e846 <_svfiprintf_r+0x7a>
 810e82e:	465b      	mov	r3, fp
 810e830:	4622      	mov	r2, r4
 810e832:	4629      	mov	r1, r5
 810e834:	4638      	mov	r0, r7
 810e836:	f7ff ff6d 	bl	810e714 <__ssputs_r>
 810e83a:	3001      	adds	r0, #1
 810e83c:	f000 80aa 	beq.w	810e994 <_svfiprintf_r+0x1c8>
 810e840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810e842:	445a      	add	r2, fp
 810e844:	9209      	str	r2, [sp, #36]	; 0x24
 810e846:	f89a 3000 	ldrb.w	r3, [sl]
 810e84a:	2b00      	cmp	r3, #0
 810e84c:	f000 80a2 	beq.w	810e994 <_svfiprintf_r+0x1c8>
 810e850:	2300      	movs	r3, #0
 810e852:	f04f 32ff 	mov.w	r2, #4294967295
 810e856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810e85a:	f10a 0a01 	add.w	sl, sl, #1
 810e85e:	9304      	str	r3, [sp, #16]
 810e860:	9307      	str	r3, [sp, #28]
 810e862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810e866:	931a      	str	r3, [sp, #104]	; 0x68
 810e868:	4654      	mov	r4, sl
 810e86a:	2205      	movs	r2, #5
 810e86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e870:	4851      	ldr	r0, [pc, #324]	; (810e9b8 <_svfiprintf_r+0x1ec>)
 810e872:	f7f1 fd4d 	bl	8100310 <memchr>
 810e876:	9a04      	ldr	r2, [sp, #16]
 810e878:	b9d8      	cbnz	r0, 810e8b2 <_svfiprintf_r+0xe6>
 810e87a:	06d0      	lsls	r0, r2, #27
 810e87c:	bf44      	itt	mi
 810e87e:	2320      	movmi	r3, #32
 810e880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e884:	0711      	lsls	r1, r2, #28
 810e886:	bf44      	itt	mi
 810e888:	232b      	movmi	r3, #43	; 0x2b
 810e88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e88e:	f89a 3000 	ldrb.w	r3, [sl]
 810e892:	2b2a      	cmp	r3, #42	; 0x2a
 810e894:	d015      	beq.n	810e8c2 <_svfiprintf_r+0xf6>
 810e896:	9a07      	ldr	r2, [sp, #28]
 810e898:	4654      	mov	r4, sl
 810e89a:	2000      	movs	r0, #0
 810e89c:	f04f 0c0a 	mov.w	ip, #10
 810e8a0:	4621      	mov	r1, r4
 810e8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 810e8a6:	3b30      	subs	r3, #48	; 0x30
 810e8a8:	2b09      	cmp	r3, #9
 810e8aa:	d94e      	bls.n	810e94a <_svfiprintf_r+0x17e>
 810e8ac:	b1b0      	cbz	r0, 810e8dc <_svfiprintf_r+0x110>
 810e8ae:	9207      	str	r2, [sp, #28]
 810e8b0:	e014      	b.n	810e8dc <_svfiprintf_r+0x110>
 810e8b2:	eba0 0308 	sub.w	r3, r0, r8
 810e8b6:	fa09 f303 	lsl.w	r3, r9, r3
 810e8ba:	4313      	orrs	r3, r2
 810e8bc:	9304      	str	r3, [sp, #16]
 810e8be:	46a2      	mov	sl, r4
 810e8c0:	e7d2      	b.n	810e868 <_svfiprintf_r+0x9c>
 810e8c2:	9b03      	ldr	r3, [sp, #12]
 810e8c4:	1d19      	adds	r1, r3, #4
 810e8c6:	681b      	ldr	r3, [r3, #0]
 810e8c8:	9103      	str	r1, [sp, #12]
 810e8ca:	2b00      	cmp	r3, #0
 810e8cc:	bfbb      	ittet	lt
 810e8ce:	425b      	neglt	r3, r3
 810e8d0:	f042 0202 	orrlt.w	r2, r2, #2
 810e8d4:	9307      	strge	r3, [sp, #28]
 810e8d6:	9307      	strlt	r3, [sp, #28]
 810e8d8:	bfb8      	it	lt
 810e8da:	9204      	strlt	r2, [sp, #16]
 810e8dc:	7823      	ldrb	r3, [r4, #0]
 810e8de:	2b2e      	cmp	r3, #46	; 0x2e
 810e8e0:	d10c      	bne.n	810e8fc <_svfiprintf_r+0x130>
 810e8e2:	7863      	ldrb	r3, [r4, #1]
 810e8e4:	2b2a      	cmp	r3, #42	; 0x2a
 810e8e6:	d135      	bne.n	810e954 <_svfiprintf_r+0x188>
 810e8e8:	9b03      	ldr	r3, [sp, #12]
 810e8ea:	1d1a      	adds	r2, r3, #4
 810e8ec:	681b      	ldr	r3, [r3, #0]
 810e8ee:	9203      	str	r2, [sp, #12]
 810e8f0:	2b00      	cmp	r3, #0
 810e8f2:	bfb8      	it	lt
 810e8f4:	f04f 33ff 	movlt.w	r3, #4294967295
 810e8f8:	3402      	adds	r4, #2
 810e8fa:	9305      	str	r3, [sp, #20]
 810e8fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810e9c8 <_svfiprintf_r+0x1fc>
 810e900:	7821      	ldrb	r1, [r4, #0]
 810e902:	2203      	movs	r2, #3
 810e904:	4650      	mov	r0, sl
 810e906:	f7f1 fd03 	bl	8100310 <memchr>
 810e90a:	b140      	cbz	r0, 810e91e <_svfiprintf_r+0x152>
 810e90c:	2340      	movs	r3, #64	; 0x40
 810e90e:	eba0 000a 	sub.w	r0, r0, sl
 810e912:	fa03 f000 	lsl.w	r0, r3, r0
 810e916:	9b04      	ldr	r3, [sp, #16]
 810e918:	4303      	orrs	r3, r0
 810e91a:	3401      	adds	r4, #1
 810e91c:	9304      	str	r3, [sp, #16]
 810e91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e922:	4826      	ldr	r0, [pc, #152]	; (810e9bc <_svfiprintf_r+0x1f0>)
 810e924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810e928:	2206      	movs	r2, #6
 810e92a:	f7f1 fcf1 	bl	8100310 <memchr>
 810e92e:	2800      	cmp	r0, #0
 810e930:	d038      	beq.n	810e9a4 <_svfiprintf_r+0x1d8>
 810e932:	4b23      	ldr	r3, [pc, #140]	; (810e9c0 <_svfiprintf_r+0x1f4>)
 810e934:	bb1b      	cbnz	r3, 810e97e <_svfiprintf_r+0x1b2>
 810e936:	9b03      	ldr	r3, [sp, #12]
 810e938:	3307      	adds	r3, #7
 810e93a:	f023 0307 	bic.w	r3, r3, #7
 810e93e:	3308      	adds	r3, #8
 810e940:	9303      	str	r3, [sp, #12]
 810e942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e944:	4433      	add	r3, r6
 810e946:	9309      	str	r3, [sp, #36]	; 0x24
 810e948:	e767      	b.n	810e81a <_svfiprintf_r+0x4e>
 810e94a:	fb0c 3202 	mla	r2, ip, r2, r3
 810e94e:	460c      	mov	r4, r1
 810e950:	2001      	movs	r0, #1
 810e952:	e7a5      	b.n	810e8a0 <_svfiprintf_r+0xd4>
 810e954:	2300      	movs	r3, #0
 810e956:	3401      	adds	r4, #1
 810e958:	9305      	str	r3, [sp, #20]
 810e95a:	4619      	mov	r1, r3
 810e95c:	f04f 0c0a 	mov.w	ip, #10
 810e960:	4620      	mov	r0, r4
 810e962:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e966:	3a30      	subs	r2, #48	; 0x30
 810e968:	2a09      	cmp	r2, #9
 810e96a:	d903      	bls.n	810e974 <_svfiprintf_r+0x1a8>
 810e96c:	2b00      	cmp	r3, #0
 810e96e:	d0c5      	beq.n	810e8fc <_svfiprintf_r+0x130>
 810e970:	9105      	str	r1, [sp, #20]
 810e972:	e7c3      	b.n	810e8fc <_svfiprintf_r+0x130>
 810e974:	fb0c 2101 	mla	r1, ip, r1, r2
 810e978:	4604      	mov	r4, r0
 810e97a:	2301      	movs	r3, #1
 810e97c:	e7f0      	b.n	810e960 <_svfiprintf_r+0x194>
 810e97e:	ab03      	add	r3, sp, #12
 810e980:	9300      	str	r3, [sp, #0]
 810e982:	462a      	mov	r2, r5
 810e984:	4b0f      	ldr	r3, [pc, #60]	; (810e9c4 <_svfiprintf_r+0x1f8>)
 810e986:	a904      	add	r1, sp, #16
 810e988:	4638      	mov	r0, r7
 810e98a:	f7fb ffe1 	bl	810a950 <_printf_float>
 810e98e:	1c42      	adds	r2, r0, #1
 810e990:	4606      	mov	r6, r0
 810e992:	d1d6      	bne.n	810e942 <_svfiprintf_r+0x176>
 810e994:	89ab      	ldrh	r3, [r5, #12]
 810e996:	065b      	lsls	r3, r3, #25
 810e998:	f53f af2c 	bmi.w	810e7f4 <_svfiprintf_r+0x28>
 810e99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810e99e:	b01d      	add	sp, #116	; 0x74
 810e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e9a4:	ab03      	add	r3, sp, #12
 810e9a6:	9300      	str	r3, [sp, #0]
 810e9a8:	462a      	mov	r2, r5
 810e9aa:	4b06      	ldr	r3, [pc, #24]	; (810e9c4 <_svfiprintf_r+0x1f8>)
 810e9ac:	a904      	add	r1, sp, #16
 810e9ae:	4638      	mov	r0, r7
 810e9b0:	f7fc fa72 	bl	810ae98 <_printf_i>
 810e9b4:	e7eb      	b.n	810e98e <_svfiprintf_r+0x1c2>
 810e9b6:	bf00      	nop
 810e9b8:	0810ef08 	.word	0x0810ef08
 810e9bc:	0810ef12 	.word	0x0810ef12
 810e9c0:	0810a951 	.word	0x0810a951
 810e9c4:	0810e715 	.word	0x0810e715
 810e9c8:	0810ef0e 	.word	0x0810ef0e

0810e9cc <_raise_r>:
 810e9cc:	291f      	cmp	r1, #31
 810e9ce:	b538      	push	{r3, r4, r5, lr}
 810e9d0:	4604      	mov	r4, r0
 810e9d2:	460d      	mov	r5, r1
 810e9d4:	d904      	bls.n	810e9e0 <_raise_r+0x14>
 810e9d6:	2316      	movs	r3, #22
 810e9d8:	6003      	str	r3, [r0, #0]
 810e9da:	f04f 30ff 	mov.w	r0, #4294967295
 810e9de:	bd38      	pop	{r3, r4, r5, pc}
 810e9e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810e9e2:	b112      	cbz	r2, 810e9ea <_raise_r+0x1e>
 810e9e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e9e8:	b94b      	cbnz	r3, 810e9fe <_raise_r+0x32>
 810e9ea:	4620      	mov	r0, r4
 810e9ec:	f000 f830 	bl	810ea50 <_getpid_r>
 810e9f0:	462a      	mov	r2, r5
 810e9f2:	4601      	mov	r1, r0
 810e9f4:	4620      	mov	r0, r4
 810e9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e9fa:	f000 b817 	b.w	810ea2c <_kill_r>
 810e9fe:	2b01      	cmp	r3, #1
 810ea00:	d00a      	beq.n	810ea18 <_raise_r+0x4c>
 810ea02:	1c59      	adds	r1, r3, #1
 810ea04:	d103      	bne.n	810ea0e <_raise_r+0x42>
 810ea06:	2316      	movs	r3, #22
 810ea08:	6003      	str	r3, [r0, #0]
 810ea0a:	2001      	movs	r0, #1
 810ea0c:	e7e7      	b.n	810e9de <_raise_r+0x12>
 810ea0e:	2400      	movs	r4, #0
 810ea10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ea14:	4628      	mov	r0, r5
 810ea16:	4798      	blx	r3
 810ea18:	2000      	movs	r0, #0
 810ea1a:	e7e0      	b.n	810e9de <_raise_r+0x12>

0810ea1c <raise>:
 810ea1c:	4b02      	ldr	r3, [pc, #8]	; (810ea28 <raise+0xc>)
 810ea1e:	4601      	mov	r1, r0
 810ea20:	6818      	ldr	r0, [r3, #0]
 810ea22:	f7ff bfd3 	b.w	810e9cc <_raise_r>
 810ea26:	bf00      	nop
 810ea28:	100000bc 	.word	0x100000bc

0810ea2c <_kill_r>:
 810ea2c:	b538      	push	{r3, r4, r5, lr}
 810ea2e:	4d07      	ldr	r5, [pc, #28]	; (810ea4c <_kill_r+0x20>)
 810ea30:	2300      	movs	r3, #0
 810ea32:	4604      	mov	r4, r0
 810ea34:	4608      	mov	r0, r1
 810ea36:	4611      	mov	r1, r2
 810ea38:	602b      	str	r3, [r5, #0]
 810ea3a:	f7f2 fe19 	bl	8101670 <_kill>
 810ea3e:	1c43      	adds	r3, r0, #1
 810ea40:	d102      	bne.n	810ea48 <_kill_r+0x1c>
 810ea42:	682b      	ldr	r3, [r5, #0]
 810ea44:	b103      	cbz	r3, 810ea48 <_kill_r+0x1c>
 810ea46:	6023      	str	r3, [r4, #0]
 810ea48:	bd38      	pop	{r3, r4, r5, pc}
 810ea4a:	bf00      	nop
 810ea4c:	10000624 	.word	0x10000624

0810ea50 <_getpid_r>:
 810ea50:	f7f2 be06 	b.w	8101660 <_getpid>

0810ea54 <__sread>:
 810ea54:	b510      	push	{r4, lr}
 810ea56:	460c      	mov	r4, r1
 810ea58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ea5c:	f000 f8a8 	bl	810ebb0 <_read_r>
 810ea60:	2800      	cmp	r0, #0
 810ea62:	bfab      	itete	ge
 810ea64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810ea66:	89a3      	ldrhlt	r3, [r4, #12]
 810ea68:	181b      	addge	r3, r3, r0
 810ea6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810ea6e:	bfac      	ite	ge
 810ea70:	6563      	strge	r3, [r4, #84]	; 0x54
 810ea72:	81a3      	strhlt	r3, [r4, #12]
 810ea74:	bd10      	pop	{r4, pc}

0810ea76 <__swrite>:
 810ea76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ea7a:	461f      	mov	r7, r3
 810ea7c:	898b      	ldrh	r3, [r1, #12]
 810ea7e:	05db      	lsls	r3, r3, #23
 810ea80:	4605      	mov	r5, r0
 810ea82:	460c      	mov	r4, r1
 810ea84:	4616      	mov	r6, r2
 810ea86:	d505      	bpl.n	810ea94 <__swrite+0x1e>
 810ea88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ea8c:	2302      	movs	r3, #2
 810ea8e:	2200      	movs	r2, #0
 810ea90:	f000 f874 	bl	810eb7c <_lseek_r>
 810ea94:	89a3      	ldrh	r3, [r4, #12]
 810ea96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ea9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ea9e:	81a3      	strh	r3, [r4, #12]
 810eaa0:	4632      	mov	r2, r6
 810eaa2:	463b      	mov	r3, r7
 810eaa4:	4628      	mov	r0, r5
 810eaa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810eaaa:	f000 b823 	b.w	810eaf4 <_write_r>

0810eaae <__sseek>:
 810eaae:	b510      	push	{r4, lr}
 810eab0:	460c      	mov	r4, r1
 810eab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810eab6:	f000 f861 	bl	810eb7c <_lseek_r>
 810eaba:	1c43      	adds	r3, r0, #1
 810eabc:	89a3      	ldrh	r3, [r4, #12]
 810eabe:	bf15      	itete	ne
 810eac0:	6560      	strne	r0, [r4, #84]	; 0x54
 810eac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810eac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810eaca:	81a3      	strheq	r3, [r4, #12]
 810eacc:	bf18      	it	ne
 810eace:	81a3      	strhne	r3, [r4, #12]
 810ead0:	bd10      	pop	{r4, pc}

0810ead2 <__sclose>:
 810ead2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ead6:	f000 b81f 	b.w	810eb18 <_close_r>

0810eada <__ascii_wctomb>:
 810eada:	b149      	cbz	r1, 810eaf0 <__ascii_wctomb+0x16>
 810eadc:	2aff      	cmp	r2, #255	; 0xff
 810eade:	bf85      	ittet	hi
 810eae0:	238a      	movhi	r3, #138	; 0x8a
 810eae2:	6003      	strhi	r3, [r0, #0]
 810eae4:	700a      	strbls	r2, [r1, #0]
 810eae6:	f04f 30ff 	movhi.w	r0, #4294967295
 810eaea:	bf98      	it	ls
 810eaec:	2001      	movls	r0, #1
 810eaee:	4770      	bx	lr
 810eaf0:	4608      	mov	r0, r1
 810eaf2:	4770      	bx	lr

0810eaf4 <_write_r>:
 810eaf4:	b538      	push	{r3, r4, r5, lr}
 810eaf6:	4d07      	ldr	r5, [pc, #28]	; (810eb14 <_write_r+0x20>)
 810eaf8:	4604      	mov	r4, r0
 810eafa:	4608      	mov	r0, r1
 810eafc:	4611      	mov	r1, r2
 810eafe:	2200      	movs	r2, #0
 810eb00:	602a      	str	r2, [r5, #0]
 810eb02:	461a      	mov	r2, r3
 810eb04:	f7f2 fdeb 	bl	81016de <_write>
 810eb08:	1c43      	adds	r3, r0, #1
 810eb0a:	d102      	bne.n	810eb12 <_write_r+0x1e>
 810eb0c:	682b      	ldr	r3, [r5, #0]
 810eb0e:	b103      	cbz	r3, 810eb12 <_write_r+0x1e>
 810eb10:	6023      	str	r3, [r4, #0]
 810eb12:	bd38      	pop	{r3, r4, r5, pc}
 810eb14:	10000624 	.word	0x10000624

0810eb18 <_close_r>:
 810eb18:	b538      	push	{r3, r4, r5, lr}
 810eb1a:	4d06      	ldr	r5, [pc, #24]	; (810eb34 <_close_r+0x1c>)
 810eb1c:	2300      	movs	r3, #0
 810eb1e:	4604      	mov	r4, r0
 810eb20:	4608      	mov	r0, r1
 810eb22:	602b      	str	r3, [r5, #0]
 810eb24:	f7f2 fdf7 	bl	8101716 <_close>
 810eb28:	1c43      	adds	r3, r0, #1
 810eb2a:	d102      	bne.n	810eb32 <_close_r+0x1a>
 810eb2c:	682b      	ldr	r3, [r5, #0]
 810eb2e:	b103      	cbz	r3, 810eb32 <_close_r+0x1a>
 810eb30:	6023      	str	r3, [r4, #0]
 810eb32:	bd38      	pop	{r3, r4, r5, pc}
 810eb34:	10000624 	.word	0x10000624

0810eb38 <_fstat_r>:
 810eb38:	b538      	push	{r3, r4, r5, lr}
 810eb3a:	4d07      	ldr	r5, [pc, #28]	; (810eb58 <_fstat_r+0x20>)
 810eb3c:	2300      	movs	r3, #0
 810eb3e:	4604      	mov	r4, r0
 810eb40:	4608      	mov	r0, r1
 810eb42:	4611      	mov	r1, r2
 810eb44:	602b      	str	r3, [r5, #0]
 810eb46:	f7f2 fdf2 	bl	810172e <_fstat>
 810eb4a:	1c43      	adds	r3, r0, #1
 810eb4c:	d102      	bne.n	810eb54 <_fstat_r+0x1c>
 810eb4e:	682b      	ldr	r3, [r5, #0]
 810eb50:	b103      	cbz	r3, 810eb54 <_fstat_r+0x1c>
 810eb52:	6023      	str	r3, [r4, #0]
 810eb54:	bd38      	pop	{r3, r4, r5, pc}
 810eb56:	bf00      	nop
 810eb58:	10000624 	.word	0x10000624

0810eb5c <_isatty_r>:
 810eb5c:	b538      	push	{r3, r4, r5, lr}
 810eb5e:	4d06      	ldr	r5, [pc, #24]	; (810eb78 <_isatty_r+0x1c>)
 810eb60:	2300      	movs	r3, #0
 810eb62:	4604      	mov	r4, r0
 810eb64:	4608      	mov	r0, r1
 810eb66:	602b      	str	r3, [r5, #0]
 810eb68:	f7f2 fdf1 	bl	810174e <_isatty>
 810eb6c:	1c43      	adds	r3, r0, #1
 810eb6e:	d102      	bne.n	810eb76 <_isatty_r+0x1a>
 810eb70:	682b      	ldr	r3, [r5, #0]
 810eb72:	b103      	cbz	r3, 810eb76 <_isatty_r+0x1a>
 810eb74:	6023      	str	r3, [r4, #0]
 810eb76:	bd38      	pop	{r3, r4, r5, pc}
 810eb78:	10000624 	.word	0x10000624

0810eb7c <_lseek_r>:
 810eb7c:	b538      	push	{r3, r4, r5, lr}
 810eb7e:	4d07      	ldr	r5, [pc, #28]	; (810eb9c <_lseek_r+0x20>)
 810eb80:	4604      	mov	r4, r0
 810eb82:	4608      	mov	r0, r1
 810eb84:	4611      	mov	r1, r2
 810eb86:	2200      	movs	r2, #0
 810eb88:	602a      	str	r2, [r5, #0]
 810eb8a:	461a      	mov	r2, r3
 810eb8c:	f7f2 fdea 	bl	8101764 <_lseek>
 810eb90:	1c43      	adds	r3, r0, #1
 810eb92:	d102      	bne.n	810eb9a <_lseek_r+0x1e>
 810eb94:	682b      	ldr	r3, [r5, #0]
 810eb96:	b103      	cbz	r3, 810eb9a <_lseek_r+0x1e>
 810eb98:	6023      	str	r3, [r4, #0]
 810eb9a:	bd38      	pop	{r3, r4, r5, pc}
 810eb9c:	10000624 	.word	0x10000624

0810eba0 <_malloc_usable_size_r>:
 810eba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810eba4:	1f18      	subs	r0, r3, #4
 810eba6:	2b00      	cmp	r3, #0
 810eba8:	bfbc      	itt	lt
 810ebaa:	580b      	ldrlt	r3, [r1, r0]
 810ebac:	18c0      	addlt	r0, r0, r3
 810ebae:	4770      	bx	lr

0810ebb0 <_read_r>:
 810ebb0:	b538      	push	{r3, r4, r5, lr}
 810ebb2:	4d07      	ldr	r5, [pc, #28]	; (810ebd0 <_read_r+0x20>)
 810ebb4:	4604      	mov	r4, r0
 810ebb6:	4608      	mov	r0, r1
 810ebb8:	4611      	mov	r1, r2
 810ebba:	2200      	movs	r2, #0
 810ebbc:	602a      	str	r2, [r5, #0]
 810ebbe:	461a      	mov	r2, r3
 810ebc0:	f7f2 fd70 	bl	81016a4 <_read>
 810ebc4:	1c43      	adds	r3, r0, #1
 810ebc6:	d102      	bne.n	810ebce <_read_r+0x1e>
 810ebc8:	682b      	ldr	r3, [r5, #0]
 810ebca:	b103      	cbz	r3, 810ebce <_read_r+0x1e>
 810ebcc:	6023      	str	r3, [r4, #0]
 810ebce:	bd38      	pop	{r3, r4, r5, pc}
 810ebd0:	10000624 	.word	0x10000624

0810ebd4 <_init>:
 810ebd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ebd6:	bf00      	nop
 810ebd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ebda:	bc08      	pop	{r3}
 810ebdc:	469e      	mov	lr, r3
 810ebde:	4770      	bx	lr

0810ebe0 <_fini>:
 810ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ebe2:	bf00      	nop
 810ebe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ebe6:	bc08      	pop	{r3}
 810ebe8:	469e      	mov	lr, r3
 810ebea:	4770      	bx	lr
