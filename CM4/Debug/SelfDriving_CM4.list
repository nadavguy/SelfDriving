
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0810bb48  0810bb48  0001bb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810c254  0810c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810c258  0810c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000028c  10000000  0810c25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a0  1000028c  0810c4e8  0002028c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000052c  0810c4e8  0002052c  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810c4e8  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000379b0  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000067c9  00000000  00000000  00057c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001588  00000000  00000000  0005e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001328  00000000  00000000  0005f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041543  00000000  00000000  00060ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022df0  00000000  00000000  000a222b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018599c  00000000  00000000  000c501b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024a9b7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a94  00000000  00000000  0024aa0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000028c 	.word	0x1000028c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810bb30 	.word	0x0810bb30

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000290 	.word	0x10000290
 81002dc:	0810bb30 	.word	0x0810bb30

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_d2lz>:
 8100db8:	b538      	push	{r3, r4, r5, lr}
 8100dba:	2200      	movs	r2, #0
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	460d      	mov	r5, r1
 8100dc2:	f7ff ff23 	bl	8100c0c <__aeabi_dcmplt>
 8100dc6:	b928      	cbnz	r0, 8100dd4 <__aeabi_d2lz+0x1c>
 8100dc8:	4620      	mov	r0, r4
 8100dca:	4629      	mov	r1, r5
 8100dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100dd0:	f000 b80a 	b.w	8100de8 <__aeabi_d2ulz>
 8100dd4:	4620      	mov	r0, r4
 8100dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dda:	f000 f805 	bl	8100de8 <__aeabi_d2ulz>
 8100dde:	4240      	negs	r0, r0
 8100de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100de4:	bd38      	pop	{r3, r4, r5, pc}
 8100de6:	bf00      	nop

08100de8 <__aeabi_d2ulz>:
 8100de8:	b5d0      	push	{r4, r6, r7, lr}
 8100dea:	4b0c      	ldr	r3, [pc, #48]	; (8100e1c <__aeabi_d2ulz+0x34>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	4606      	mov	r6, r0
 8100df0:	460f      	mov	r7, r1
 8100df2:	f7ff fc99 	bl	8100728 <__aeabi_dmul>
 8100df6:	f7ff ff6f 	bl	8100cd8 <__aeabi_d2uiz>
 8100dfa:	4604      	mov	r4, r0
 8100dfc:	f7ff fc1a 	bl	8100634 <__aeabi_ui2d>
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <__aeabi_d2ulz+0x38>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	f7ff fc90 	bl	8100728 <__aeabi_dmul>
 8100e08:	4602      	mov	r2, r0
 8100e0a:	460b      	mov	r3, r1
 8100e0c:	4630      	mov	r0, r6
 8100e0e:	4639      	mov	r1, r7
 8100e10:	f7ff fad2 	bl	81003b8 <__aeabi_dsub>
 8100e14:	f7ff ff60 	bl	8100cd8 <__aeabi_d2uiz>
 8100e18:	4621      	mov	r1, r4
 8100e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e1c:	3df00000 	.word	0x3df00000
 8100e20:	41f00000 	.word	0x41f00000

08100e24 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b084      	sub	sp, #16
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	60f8      	str	r0, [r7, #12]
 8100e2c:	60b9      	str	r1, [r7, #8]
 8100e2e:	607a      	str	r2, [r7, #4]
 8100e30:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8100e32:	68bb      	ldr	r3, [r7, #8]
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	4a09      	ldr	r2, [pc, #36]	; (8100e5c <rpmsg_recv_callback+0x38>)
 8100e38:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8100e3a:	68bb      	ldr	r3, [r7, #8]
 8100e3c:	4a08      	ldr	r2, [pc, #32]	; (8100e60 <rpmsg_recv_callback+0x3c>)
 8100e3e:	6013      	str	r3, [r2, #0]
	message_received=1;
 8100e40:	4b08      	ldr	r3, [pc, #32]	; (8100e64 <rpmsg_recv_callback+0x40>)
 8100e42:	2201      	movs	r2, #1
 8100e44:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8100e46:	4b05      	ldr	r3, [pc, #20]	; (8100e5c <rpmsg_recv_callback+0x38>)
 8100e48:	681b      	ldr	r3, [r3, #0]
 8100e4a:	b2db      	uxtb	r3, r3
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	f000 f81f 	bl	8100e90 <parseRecievedMessages>
	return 0;
 8100e52:	2300      	movs	r3, #0
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	3710      	adds	r7, #16
 8100e58:	46bd      	mov	sp, r7
 8100e5a:	bd80      	pop	{r7, pc}
 8100e5c:	100003bc 	.word	0x100003bc
 8100e60:	100002a8 	.word	0x100002a8
 8100e64:	1000046c 	.word	0x1000046c

08100e68 <receive_message>:

#ifdef CORE_CM4
unsigned int receive_message(void)
{
 8100e68:	b580      	push	{r7, lr}
 8100e6a:	af00      	add	r7, sp, #0
	while (message_received == 0)
 8100e6c:	e001      	b.n	8100e72 <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8100e6e:	f006 f9c7 	bl	8107200 <OPENAMP_check_for_message>
	while (message_received == 0)
 8100e72:	4b05      	ldr	r3, [pc, #20]	; (8100e88 <receive_message+0x20>)
 8100e74:	681b      	ldr	r3, [r3, #0]
 8100e76:	2b00      	cmp	r3, #0
 8100e78:	d0f9      	beq.n	8100e6e <receive_message+0x6>
	}
	message_received = 0;
 8100e7a:	4b03      	ldr	r3, [pc, #12]	; (8100e88 <receive_message+0x20>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	601a      	str	r2, [r3, #0]

	return received_data;
 8100e80:	4b02      	ldr	r3, [pc, #8]	; (8100e8c <receive_message+0x24>)
 8100e82:	681b      	ldr	r3, [r3, #0]
}
 8100e84:	4618      	mov	r0, r3
 8100e86:	bd80      	pop	{r7, pc}
 8100e88:	1000046c 	.word	0x1000046c
 8100e8c:	100003bc 	.word	0x100003bc

08100e90 <parseRecievedMessages>:
 */

#include "main.h"

void parseRecievedMessages(uint8_t opCode)
{
 8100e90:	b480      	push	{r7}
 8100e92:	b083      	sub	sp, #12
 8100e94:	af00      	add	r7, sp, #0
 8100e96:	4603      	mov	r3, r0
 8100e98:	71fb      	strb	r3, [r7, #7]
		default:
		{

		}
	}
}
 8100e9a:	bf00      	nop
 8100e9c:	370c      	adds	r7, #12
 8100e9e:	46bd      	mov	sp, r7
 8100ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ea4:	4770      	bx	lr
	...

08100ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100ea8:	b480      	push	{r7}
 8100eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100eac:	4b0b      	ldr	r3, [pc, #44]	; (8100edc <SystemInit+0x34>)
 8100eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100eb2:	4a0a      	ldr	r2, [pc, #40]	; (8100edc <SystemInit+0x34>)
 8100eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100ebc:	4b07      	ldr	r3, [pc, #28]	; (8100edc <SystemInit+0x34>)
 8100ebe:	691b      	ldr	r3, [r3, #16]
 8100ec0:	4a06      	ldr	r2, [pc, #24]	; (8100edc <SystemInit+0x34>)
 8100ec2:	f043 0310 	orr.w	r3, r3, #16
 8100ec6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100ec8:	4b04      	ldr	r3, [pc, #16]	; (8100edc <SystemInit+0x34>)
 8100eca:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100ece:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100ed0:	bf00      	nop
 8100ed2:	46bd      	mov	sp, r7
 8100ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed8:	4770      	bx	lr
 8100eda:	bf00      	nop
 8100edc:	e000ed00 	.word	0xe000ed00

08100ee0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100ee0:	b480      	push	{r7}
 8100ee2:	b085      	sub	sp, #20
 8100ee4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100ee6:	4b19      	ldr	r3, [pc, #100]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eec:	4a17      	ldr	r2, [pc, #92]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100eee:	f043 0301 	orr.w	r3, r3, #1
 8100ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ef6:	4b15      	ldr	r3, [pc, #84]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100efc:	f003 0301 	and.w	r3, r3, #1
 8100f00:	60fb      	str	r3, [r7, #12]
 8100f02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f04:	4b11      	ldr	r3, [pc, #68]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f0a:	4a10      	ldr	r2, [pc, #64]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f0c:	f043 0302 	orr.w	r3, r3, #2
 8100f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f14:	4b0d      	ldr	r3, [pc, #52]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f1a:	f003 0302 	and.w	r3, r3, #2
 8100f1e:	60bb      	str	r3, [r7, #8]
 8100f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f22:	4b0a      	ldr	r3, [pc, #40]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f28:	4a08      	ldr	r2, [pc, #32]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f2a:	f043 0308 	orr.w	r3, r3, #8
 8100f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f32:	4b06      	ldr	r3, [pc, #24]	; (8100f4c <MX_GPIO_Init+0x6c>)
 8100f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f38:	f003 0308 	and.w	r3, r3, #8
 8100f3c:	607b      	str	r3, [r7, #4]
 8100f3e:	687b      	ldr	r3, [r7, #4]

}
 8100f40:	bf00      	nop
 8100f42:	3714      	adds	r7, #20
 8100f44:	46bd      	mov	sp, r7
 8100f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4a:	4770      	bx	lr
 8100f4c:	58024400 	.word	0x58024400

08100f50 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8100f50:	b580      	push	{r7, lr}
 8100f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100f54:	4b1b      	ldr	r3, [pc, #108]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f56:	4a1c      	ldr	r2, [pc, #112]	; (8100fc8 <MX_I2C2_Init+0x78>)
 8100f58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 8100f5a:	4b1a      	ldr	r3, [pc, #104]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f5c:	4a1b      	ldr	r2, [pc, #108]	; (8100fcc <MX_I2C2_Init+0x7c>)
 8100f5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100f60:	4b18      	ldr	r3, [pc, #96]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100f66:	4b17      	ldr	r3, [pc, #92]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f68:	2201      	movs	r2, #1
 8100f6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f6c:	4b15      	ldr	r3, [pc, #84]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100f72:	4b14      	ldr	r3, [pc, #80]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f74:	2200      	movs	r2, #0
 8100f76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f78:	4b12      	ldr	r3, [pc, #72]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f7a:	2200      	movs	r2, #0
 8100f7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f7e:	4b11      	ldr	r3, [pc, #68]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f84:	4b0f      	ldr	r3, [pc, #60]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100f8a:	480e      	ldr	r0, [pc, #56]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f8c:	f001 f850 	bl	8102030 <HAL_I2C_Init>
 8100f90:	4603      	mov	r3, r0
 8100f92:	2b00      	cmp	r3, #0
 8100f94:	d001      	beq.n	8100f9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100f96:	f000 f9c9 	bl	810132c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100f9a:	2100      	movs	r1, #0
 8100f9c:	4809      	ldr	r0, [pc, #36]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100f9e:	f001 fd3b 	bl	8102a18 <HAL_I2CEx_ConfigAnalogFilter>
 8100fa2:	4603      	mov	r3, r0
 8100fa4:	2b00      	cmp	r3, #0
 8100fa6:	d001      	beq.n	8100fac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100fa8:	f000 f9c0 	bl	810132c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100fac:	2100      	movs	r1, #0
 8100fae:	4805      	ldr	r0, [pc, #20]	; (8100fc4 <MX_I2C2_Init+0x74>)
 8100fb0:	f001 fd7d 	bl	8102aae <HAL_I2CEx_ConfigDigitalFilter>
 8100fb4:	4603      	mov	r3, r0
 8100fb6:	2b00      	cmp	r3, #0
 8100fb8:	d001      	beq.n	8100fbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100fba:	f000 f9b7 	bl	810132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100fbe:	bf00      	nop
 8100fc0:	bd80      	pop	{r7, pc}
 8100fc2:	bf00      	nop
 8100fc4:	1000036c 	.word	0x1000036c
 8100fc8:	40005800 	.word	0x40005800
 8100fcc:	00301242 	.word	0x00301242

08100fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	b0b8      	sub	sp, #224	; 0xe0
 8100fd4:	af00      	add	r7, sp, #0
 8100fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fdc:	2200      	movs	r2, #0
 8100fde:	601a      	str	r2, [r3, #0]
 8100fe0:	605a      	str	r2, [r3, #4]
 8100fe2:	609a      	str	r2, [r3, #8]
 8100fe4:	60da      	str	r2, [r3, #12]
 8100fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fe8:	f107 0310 	add.w	r3, r7, #16
 8100fec:	22bc      	movs	r2, #188	; 0xbc
 8100fee:	2100      	movs	r1, #0
 8100ff0:	4618      	mov	r0, r3
 8100ff2:	f006 f9a5 	bl	8107340 <memset>
  if(i2cHandle->Instance==I2C2)
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	4a29      	ldr	r2, [pc, #164]	; (81010a0 <HAL_I2C_MspInit+0xd0>)
 8100ffc:	4293      	cmp	r3, r2
 8100ffe:	d14a      	bne.n	8101096 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101000:	2308      	movs	r3, #8
 8101002:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101004:	2300      	movs	r3, #0
 8101006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810100a:	f107 0310 	add.w	r3, r7, #16
 810100e:	4618      	mov	r0, r3
 8101010:	f001 ff9c 	bl	8102f4c <HAL_RCCEx_PeriphCLKConfig>
 8101014:	4603      	mov	r3, r0
 8101016:	2b00      	cmp	r3, #0
 8101018:	d001      	beq.n	810101e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 810101a:	f000 f987 	bl	810132c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810101e:	4b21      	ldr	r3, [pc, #132]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101024:	4a1f      	ldr	r2, [pc, #124]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101026:	f043 0302 	orr.w	r3, r3, #2
 810102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810102e:	4b1d      	ldr	r3, [pc, #116]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101034:	f003 0302 	and.w	r3, r3, #2
 8101038:	60fb      	str	r3, [r7, #12]
 810103a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 810103c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101044:	2312      	movs	r3, #18
 8101046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810104a:	2300      	movs	r3, #0
 810104c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101050:	2300      	movs	r3, #0
 8101052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101056:	2304      	movs	r3, #4
 8101058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810105c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101060:	4619      	mov	r1, r3
 8101062:	4811      	ldr	r0, [pc, #68]	; (81010a8 <HAL_I2C_MspInit+0xd8>)
 8101064:	f000 fdda 	bl	8101c1c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101068:	4b0e      	ldr	r3, [pc, #56]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 810106a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810106e:	4a0d      	ldr	r2, [pc, #52]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 8101070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101074:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101078:	4b0a      	ldr	r3, [pc, #40]	; (81010a4 <HAL_I2C_MspInit+0xd4>)
 810107a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101082:	60bb      	str	r3, [r7, #8]
 8101084:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8101086:	2200      	movs	r2, #0
 8101088:	2100      	movs	r1, #0
 810108a:	2021      	movs	r0, #33	; 0x21
 810108c:	f000 fd6f 	bl	8101b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8101090:	2021      	movs	r0, #33	; 0x21
 8101092:	f000 fd86 	bl	8101ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8101096:	bf00      	nop
 8101098:	37e0      	adds	r7, #224	; 0xe0
 810109a:	46bd      	mov	sp, r7
 810109c:	bd80      	pop	{r7, pc}
 810109e:	bf00      	nop
 81010a0:	40005800 	.word	0x40005800
 81010a4:	58024400 	.word	0x58024400
 81010a8:	58020400 	.word	0x58020400

081010ac <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 81010ac:	b580      	push	{r7, lr}
 81010ae:	b086      	sub	sp, #24
 81010b0:	af02      	add	r7, sp, #8
 81010b2:	60f8      	str	r0, [r7, #12]
 81010b4:	60b9      	str	r1, [r7, #8]
 81010b6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81010b8:	68fb      	ldr	r3, [r7, #12]
 81010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81010c0:	d101      	bne.n	81010c6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81010c2:	4b09      	ldr	r3, [pc, #36]	; (81010e8 <rpmsg_send+0x3c>)
 81010c4:	e00c      	b.n	81010e0 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81010c6:	68fb      	ldr	r3, [r7, #12]
 81010c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81010ca:	68fb      	ldr	r3, [r7, #12]
 81010cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81010ce:	2301      	movs	r3, #1
 81010d0:	9301      	str	r3, [sp, #4]
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	9300      	str	r3, [sp, #0]
 81010d6:	68bb      	ldr	r3, [r7, #8]
 81010d8:	68f8      	ldr	r0, [r7, #12]
 81010da:	f004 fdd5 	bl	8105c88 <rpmsg_send_offchannel_raw>
 81010de:	4603      	mov	r3, r0
					 len, true);
}
 81010e0:	4618      	mov	r0, r3
 81010e2:	3710      	adds	r7, #16
 81010e4:	46bd      	mov	sp, r7
 81010e6:	bd80      	pop	{r7, pc}
 81010e8:	fffff829 	.word	0xfffff829

081010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 81010ee:	b09f      	sub	sp, #124	; 0x7c
 81010f0:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 81010f2:	2300      	movs	r3, #0
 81010f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 81010f6:	4b7d      	ldr	r3, [pc, #500]	; (81012ec <main+0x200>)
 81010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010fc:	4a7b      	ldr	r2, [pc, #492]	; (81012ec <main+0x200>)
 81010fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101106:	4b79      	ldr	r3, [pc, #484]	; (81012ec <main+0x200>)
 8101108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810110c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101110:	607b      	str	r3, [r7, #4]
 8101112:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101114:	2001      	movs	r0, #1
 8101116:	f000 ff5f 	bl	8101fd8 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810111a:	f001 fd8f 	bl	8102c3c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810111e:	2201      	movs	r2, #1
 8101120:	2102      	movs	r1, #2
 8101122:	2000      	movs	r0, #0
 8101124:	f001 fd10 	bl	8102b48 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101128:	4b71      	ldr	r3, [pc, #452]	; (81012f0 <main+0x204>)
 810112a:	681b      	ldr	r3, [r3, #0]
 810112c:	091b      	lsrs	r3, r3, #4
 810112e:	f003 030f 	and.w	r3, r3, #15
 8101132:	2b07      	cmp	r3, #7
 8101134:	d108      	bne.n	8101148 <main+0x5c>
 8101136:	4b6f      	ldr	r3, [pc, #444]	; (81012f4 <main+0x208>)
 8101138:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810113c:	4a6d      	ldr	r2, [pc, #436]	; (81012f4 <main+0x208>)
 810113e:	f043 0301 	orr.w	r3, r3, #1
 8101142:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101146:	e007      	b.n	8101158 <main+0x6c>
 8101148:	4b6a      	ldr	r3, [pc, #424]	; (81012f4 <main+0x208>)
 810114a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810114e:	4a69      	ldr	r2, [pc, #420]	; (81012f4 <main+0x208>)
 8101150:	f043 0301 	orr.w	r3, r3, #1
 8101154:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 8101158:	207e      	movs	r0, #126	; 0x7e
 810115a:	f000 fd3c 	bl	8101bd6 <HAL_NVIC_ClearPendingIRQ>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810115e:	f000 fb35 	bl	81017cc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101162:	f7ff febd 	bl	8100ee0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8101166:	f7ff fef3 	bl	8100f50 <MX_I2C2_Init>
  MX_SPI1_Init();
 810116a:	f000 f8e5 	bl	8101338 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 810116e:	f005 fe89 	bl	8106e84 <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 8101172:	2100      	movs	r1, #0
 8101174:	2001      	movs	r0, #1
 8101176:	f005 ff8f 	bl	8107098 <MX_OPENAMP_Init>
 810117a:	4603      	mov	r3, r0
 810117c:	2b00      	cmp	r3, #0
 810117e:	d001      	beq.n	8101184 <main+0x98>
	{
		Error_Handler();
 8101180:	f000 f8d4 	bl	810132c <Error_Handler>
	}

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 8101184:	2300      	movs	r3, #0
 8101186:	9300      	str	r3, [sp, #0]
 8101188:	4b5b      	ldr	r3, [pc, #364]	; (81012f8 <main+0x20c>)
 810118a:	f04f 32ff 	mov.w	r2, #4294967295
 810118e:	495b      	ldr	r1, [pc, #364]	; (81012fc <main+0x210>)
 8101190:	485b      	ldr	r0, [pc, #364]	; (8101300 <main+0x214>)
 8101192:	f006 f817 	bl	81071c4 <OPENAMP_create_endpoint>
 8101196:	6278      	str	r0, [r7, #36]	; 0x24
			rpmsg_recv_callback, NULL);
	if (status < 0)
 8101198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810119a:	2b00      	cmp	r3, #0
 810119c:	da17      	bge.n	81011ce <main+0xe2>
	{
		Error_Handler();
 810119e:	f000 f8c5 	bl	810132c <Error_Handler>
	}

	/* Pingpong application*/
	/* Reveice an interger from the master, incremennt it and send back the result to the master*/
	while (message < 100)
 81011a2:	e014      	b.n	81011ce <main+0xe2>
	{
		message = receive_message();
 81011a4:	f7ff fe60 	bl	8100e68 <receive_message>
 81011a8:	4603      	mov	r3, r0
 81011aa:	4a56      	ldr	r2, [pc, #344]	; (8101304 <main+0x218>)
 81011ac:	6013      	str	r3, [r2, #0]
		message++;
 81011ae:	4b55      	ldr	r3, [pc, #340]	; (8101304 <main+0x218>)
 81011b0:	681b      	ldr	r3, [r3, #0]
 81011b2:	3301      	adds	r3, #1
 81011b4:	4a53      	ldr	r2, [pc, #332]	; (8101304 <main+0x218>)
 81011b6:	6013      	str	r3, [r2, #0]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 81011b8:	2204      	movs	r2, #4
 81011ba:	4952      	ldr	r1, [pc, #328]	; (8101304 <main+0x218>)
 81011bc:	4850      	ldr	r0, [pc, #320]	; (8101300 <main+0x214>)
 81011be:	f7ff ff75 	bl	81010ac <rpmsg_send>
 81011c2:	6278      	str	r0, [r7, #36]	; 0x24
		if (status < 0)
 81011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	da01      	bge.n	81011ce <main+0xe2>
		{
			Error_Handler();
 81011ca:	f000 f8af 	bl	810132c <Error_Handler>
	while (message < 100)
 81011ce:	4b4d      	ldr	r3, [pc, #308]	; (8101304 <main+0x218>)
 81011d0:	681b      	ldr	r3, [r3, #0]
 81011d2:	2b63      	cmp	r3, #99	; 0x63
 81011d4:	d9e6      	bls.n	81011a4 <main+0xb8>
	}

	/* Deinitialize OpenAMP */
//		OPENAMP_DeInit();

	chasisIMU.deviceAddress = 0x68<<1;
 81011d6:	4b4c      	ldr	r3, [pc, #304]	; (8101308 <main+0x21c>)
 81011d8:	22d0      	movs	r2, #208	; 0xd0
 81011da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 81011de:	4a4a      	ldr	r2, [pc, #296]	; (8101308 <main+0x21c>)
 81011e0:	4b4a      	ldr	r3, [pc, #296]	; (810130c <main+0x220>)
 81011e2:	4610      	mov	r0, r2
 81011e4:	4619      	mov	r1, r3
 81011e6:	234c      	movs	r3, #76	; 0x4c
 81011e8:	461a      	mov	r2, r3
 81011ea:	f006 f89b 	bl	8107324 <memcpy>
	initMPU(chasisIMU);
 81011ee:	4e46      	ldr	r6, [pc, #280]	; (8101308 <main+0x21c>)
 81011f0:	466d      	mov	r5, sp
 81011f2:	f106 0410 	add.w	r4, r6, #16
 81011f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81011fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81011fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101202:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101206:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810120a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 810120e:	f005 fe03 	bl	8106e18 <initMPU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int16_t AccData[3], GyroData[3], MagData[3];
	MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 8101212:	4e3d      	ldr	r6, [pc, #244]	; (8101308 <main+0x21c>)
 8101214:	f107 0314 	add.w	r3, r7, #20
 8101218:	9312      	str	r3, [sp, #72]	; 0x48
 810121a:	f107 030c 	add.w	r3, r7, #12
 810121e:	9311      	str	r3, [sp, #68]	; 0x44
 8101220:	f107 031c 	add.w	r3, r7, #28
 8101224:	9310      	str	r3, [sp, #64]	; 0x40
 8101226:	466d      	mov	r5, sp
 8101228:	f106 0410 	add.w	r4, r6, #16
 810122c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810122e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101238:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810123c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101240:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101244:	f003 fbfe 	bl	8104a44 <MPU9250_GetData>
	uint8_t R = 0;
 8101248:	2300      	movs	r3, #0
 810124a:	72fb      	strb	r3, [r7, #11]
	while (1)
	{
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 810124c:	4e2e      	ldr	r6, [pc, #184]	; (8101308 <main+0x21c>)
 810124e:	f107 0314 	add.w	r3, r7, #20
 8101252:	9312      	str	r3, [sp, #72]	; 0x48
 8101254:	f107 030c 	add.w	r3, r7, #12
 8101258:	9311      	str	r3, [sp, #68]	; 0x44
 810125a:	f107 031c 	add.w	r3, r7, #28
 810125e:	9310      	str	r3, [sp, #64]	; 0x40
 8101260:	466d      	mov	r5, sp
 8101262:	f106 0410 	add.w	r4, r6, #16
 8101266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101272:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101276:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810127a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 810127e:	f003 fbe1 	bl	8104a44 <MPU9250_GetData>
		sentAnglesData.opCode = 1;
 8101282:	4b23      	ldr	r3, [pc, #140]	; (8101310 <main+0x224>)
 8101284:	2201      	movs	r2, #1
 8101286:	701a      	strb	r2, [r3, #0]
		sentAnglesData.bodyAngles.Pitch = 13;
 8101288:	4b21      	ldr	r3, [pc, #132]	; (8101310 <main+0x224>)
 810128a:	4a22      	ldr	r2, [pc, #136]	; (8101314 <main+0x228>)
 810128c:	609a      	str	r2, [r3, #8]
		sentAnglesData.bodyAngles.Roll = 14;
 810128e:	4b20      	ldr	r3, [pc, #128]	; (8101310 <main+0x224>)
 8101290:	4a21      	ldr	r2, [pc, #132]	; (8101318 <main+0x22c>)
 8101292:	605a      	str	r2, [r3, #4]
		sentAnglesData.bodyAngles.Yaw = 15;
 8101294:	4b1e      	ldr	r3, [pc, #120]	; (8101310 <main+0x224>)
 8101296:	4a21      	ldr	r2, [pc, #132]	; (810131c <main+0x230>)
 8101298:	60da      	str	r2, [r3, #12]
		sentAnglesData.lidarAngles.Pitch = 45;
 810129a:	4b1d      	ldr	r3, [pc, #116]	; (8101310 <main+0x224>)
 810129c:	4a20      	ldr	r2, [pc, #128]	; (8101320 <main+0x234>)
 810129e:	615a      	str	r2, [r3, #20]
		sentAnglesData.lidarAngles.Roll = 46;
 81012a0:	4b1b      	ldr	r3, [pc, #108]	; (8101310 <main+0x224>)
 81012a2:	4a20      	ldr	r2, [pc, #128]	; (8101324 <main+0x238>)
 81012a4:	611a      	str	r2, [r3, #16]
		sentAnglesData.lidarAngles.Yaw = 47;
 81012a6:	4b1a      	ldr	r3, [pc, #104]	; (8101310 <main+0x224>)
 81012a8:	4a1f      	ldr	r2, [pc, #124]	; (8101328 <main+0x23c>)
 81012aa:	619a      	str	r2, [r3, #24]
		if (R == 1)
 81012ac:	7afb      	ldrb	r3, [r7, #11]
 81012ae:	2b01      	cmp	r3, #1
 81012b0:	d106      	bne.n	81012c0 <main+0x1d4>
		{
			status = OPENAMP_send(&rp_endpoint,&sentAnglesData, sizeof(sentAnglesData));
 81012b2:	221c      	movs	r2, #28
 81012b4:	4916      	ldr	r1, [pc, #88]	; (8101310 <main+0x224>)
 81012b6:	4812      	ldr	r0, [pc, #72]	; (8101300 <main+0x214>)
 81012b8:	f7ff fef8 	bl	81010ac <rpmsg_send>
 81012bc:	6278      	str	r0, [r7, #36]	; 0x24
 81012be:	e007      	b.n	81012d0 <main+0x1e4>
		}
		else
		{
			status = OPENAMP_send(&rp_endpoint,&R, sizeof(R));
 81012c0:	f107 030b 	add.w	r3, r7, #11
 81012c4:	2201      	movs	r2, #1
 81012c6:	4619      	mov	r1, r3
 81012c8:	480d      	ldr	r0, [pc, #52]	; (8101300 <main+0x214>)
 81012ca:	f7ff feef 	bl	81010ac <rpmsg_send>
 81012ce:	6278      	str	r0, [r7, #36]	; 0x24
		}
		R++;
 81012d0:	7afb      	ldrb	r3, [r7, #11]
 81012d2:	3301      	adds	r3, #1
 81012d4:	b2db      	uxtb	r3, r3
 81012d6:	72fb      	strb	r3, [r7, #11]
		if (R == 200)
 81012d8:	7afb      	ldrb	r3, [r7, #11]
 81012da:	2bc8      	cmp	r3, #200	; 0xc8
 81012dc:	d101      	bne.n	81012e2 <main+0x1f6>
		{
			R = 0;
 81012de:	2300      	movs	r3, #0
 81012e0:	72fb      	strb	r3, [r7, #11]
		}
		HAL_Delay(100);
 81012e2:	2064      	movs	r0, #100	; 0x64
 81012e4:	f000 fb26 	bl	8101934 <HAL_Delay>
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81012e8:	e7b0      	b.n	810124c <main+0x160>
 81012ea:	bf00      	nop
 81012ec:	58024400 	.word	0x58024400
 81012f0:	e000ed00 	.word	0xe000ed00
 81012f4:	58026400 	.word	0x58026400
 81012f8:	08100e25 	.word	0x08100e25
 81012fc:	0810bb48 	.word	0x0810bb48
 8101300:	10000410 	.word	0x10000410
 8101304:	100003b8 	.word	0x100003b8
 8101308:	100003c0 	.word	0x100003c0
 810130c:	1000036c 	.word	0x1000036c
 8101310:	10000450 	.word	0x10000450
 8101314:	41500000 	.word	0x41500000
 8101318:	41600000 	.word	0x41600000
 810131c:	41700000 	.word	0x41700000
 8101320:	42340000 	.word	0x42340000
 8101324:	42380000 	.word	0x42380000
 8101328:	423c0000 	.word	0x423c0000

0810132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810132c:	b480      	push	{r7}
 810132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101330:	b672      	cpsid	i
}
 8101332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8101334:	e7fe      	b.n	8101334 <Error_Handler+0x8>
	...

08101338 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101338:	b580      	push	{r7, lr}
 810133a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 810133c:	4b28      	ldr	r3, [pc, #160]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810133e:	4a29      	ldr	r2, [pc, #164]	; (81013e4 <MX_SPI1_Init+0xac>)
 8101340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101342:	4b27      	ldr	r3, [pc, #156]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101344:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 810134a:	4b25      	ldr	r3, [pc, #148]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810134c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8101350:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101352:	4b23      	ldr	r3, [pc, #140]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101354:	2203      	movs	r2, #3
 8101356:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101358:	4b21      	ldr	r3, [pc, #132]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810135a:	2200      	movs	r2, #0
 810135c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 810135e:	4b20      	ldr	r3, [pc, #128]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101360:	2200      	movs	r2, #0
 8101362:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101364:	4b1e      	ldr	r3, [pc, #120]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101366:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810136a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 810136c:	4b1c      	ldr	r3, [pc, #112]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810136e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8101372:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101374:	4b1a      	ldr	r3, [pc, #104]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101376:	2200      	movs	r2, #0
 8101378:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810137a:	4b19      	ldr	r3, [pc, #100]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810137c:	2200      	movs	r2, #0
 810137e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101380:	4b17      	ldr	r3, [pc, #92]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101382:	2200      	movs	r2, #0
 8101384:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101386:	4b16      	ldr	r3, [pc, #88]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101388:	2200      	movs	r2, #0
 810138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810138c:	4b14      	ldr	r3, [pc, #80]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101392:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101394:	4b12      	ldr	r3, [pc, #72]	; (81013e0 <MX_SPI1_Init+0xa8>)
 8101396:	2200      	movs	r2, #0
 8101398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810139a:	4b11      	ldr	r3, [pc, #68]	; (81013e0 <MX_SPI1_Init+0xa8>)
 810139c:	2200      	movs	r2, #0
 810139e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81013a0:	4b0f      	ldr	r3, [pc, #60]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81013a6:	4b0e      	ldr	r3, [pc, #56]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013a8:	2200      	movs	r2, #0
 81013aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81013ac:	4b0c      	ldr	r3, [pc, #48]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81013b2:	4b0b      	ldr	r3, [pc, #44]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013b4:	2200      	movs	r2, #0
 81013b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81013b8:	4b09      	ldr	r3, [pc, #36]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81013be:	4b08      	ldr	r3, [pc, #32]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013c0:	2200      	movs	r2, #0
 81013c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81013c4:	4b06      	ldr	r3, [pc, #24]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81013ca:	4805      	ldr	r0, [pc, #20]	; (81013e0 <MX_SPI1_Init+0xa8>)
 81013cc:	f002 fe62 	bl	8104094 <HAL_SPI_Init>
 81013d0:	4603      	mov	r3, r0
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d001      	beq.n	81013da <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 81013d6:	f7ff ffa9 	bl	810132c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81013da:	bf00      	nop
 81013dc:	bd80      	pop	{r7, pc}
 81013de:	bf00      	nop
 81013e0:	10000470 	.word	0x10000470
 81013e4:	40013000 	.word	0x40013000

081013e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81013e8:	b580      	push	{r7, lr}
 81013ea:	b0ba      	sub	sp, #232	; 0xe8
 81013ec:	af00      	add	r7, sp, #0
 81013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81013f4:	2200      	movs	r2, #0
 81013f6:	601a      	str	r2, [r3, #0]
 81013f8:	605a      	str	r2, [r3, #4]
 81013fa:	609a      	str	r2, [r3, #8]
 81013fc:	60da      	str	r2, [r3, #12]
 81013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101400:	f107 0318 	add.w	r3, r7, #24
 8101404:	22bc      	movs	r2, #188	; 0xbc
 8101406:	2100      	movs	r1, #0
 8101408:	4618      	mov	r0, r3
 810140a:	f005 ff99 	bl	8107340 <memset>
  if(spiHandle->Instance==SPI1)
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	681b      	ldr	r3, [r3, #0]
 8101412:	4a36      	ldr	r2, [pc, #216]	; (81014ec <HAL_SPI_MspInit+0x104>)
 8101414:	4293      	cmp	r3, r2
 8101416:	d165      	bne.n	81014e4 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810141c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 810141e:	2300      	movs	r3, #0
 8101420:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101422:	f107 0318 	add.w	r3, r7, #24
 8101426:	4618      	mov	r0, r3
 8101428:	f001 fd90 	bl	8102f4c <HAL_RCCEx_PeriphCLKConfig>
 810142c:	4603      	mov	r3, r0
 810142e:	2b00      	cmp	r3, #0
 8101430:	d001      	beq.n	8101436 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8101432:	f7ff ff7b 	bl	810132c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101436:	4b2e      	ldr	r3, [pc, #184]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 8101438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810143c:	4a2c      	ldr	r2, [pc, #176]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 810143e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101446:	4b2a      	ldr	r3, [pc, #168]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 8101448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810144c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101450:	617b      	str	r3, [r7, #20]
 8101452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101454:	4b26      	ldr	r3, [pc, #152]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 8101456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810145a:	4a25      	ldr	r2, [pc, #148]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 810145c:	f043 0301 	orr.w	r3, r3, #1
 8101460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101464:	4b22      	ldr	r3, [pc, #136]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 8101466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810146a:	f003 0301 	and.w	r3, r3, #1
 810146e:	613b      	str	r3, [r7, #16]
 8101470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101472:	4b1f      	ldr	r3, [pc, #124]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 8101474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101478:	4a1d      	ldr	r2, [pc, #116]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 810147a:	f043 0308 	orr.w	r3, r3, #8
 810147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101482:	4b1b      	ldr	r3, [pc, #108]	; (81014f0 <HAL_SPI_MspInit+0x108>)
 8101484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101488:	f003 0308 	and.w	r3, r3, #8
 810148c:	60fb      	str	r3, [r7, #12]
 810148e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101490:	2320      	movs	r3, #32
 8101492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101496:	2302      	movs	r3, #2
 8101498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810149c:	2300      	movs	r3, #0
 810149e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014a2:	2300      	movs	r3, #0
 81014a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81014a8:	2305      	movs	r3, #5
 81014aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81014ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81014b2:	4619      	mov	r1, r3
 81014b4:	480f      	ldr	r0, [pc, #60]	; (81014f4 <HAL_SPI_MspInit+0x10c>)
 81014b6:	f000 fbb1 	bl	8101c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81014ba:	2380      	movs	r3, #128	; 0x80
 81014bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014c0:	2302      	movs	r3, #2
 81014c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014c6:	2300      	movs	r3, #0
 81014c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014cc:	2300      	movs	r3, #0
 81014ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81014d2:	2305      	movs	r3, #5
 81014d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81014d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81014dc:	4619      	mov	r1, r3
 81014de:	4806      	ldr	r0, [pc, #24]	; (81014f8 <HAL_SPI_MspInit+0x110>)
 81014e0:	f000 fb9c 	bl	8101c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81014e4:	bf00      	nop
 81014e6:	37e8      	adds	r7, #232	; 0xe8
 81014e8:	46bd      	mov	sp, r7
 81014ea:	bd80      	pop	{r7, pc}
 81014ec:	40013000 	.word	0x40013000
 81014f0:	58024400 	.word	0x58024400
 81014f4:	58020000 	.word	0x58020000
 81014f8:	58020c00 	.word	0x58020c00

081014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014fc:	b580      	push	{r7, lr}
 81014fe:	b082      	sub	sp, #8
 8101500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101502:	4b15      	ldr	r3, [pc, #84]	; (8101558 <HAL_MspInit+0x5c>)
 8101504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101508:	4a13      	ldr	r2, [pc, #76]	; (8101558 <HAL_MspInit+0x5c>)
 810150a:	f043 0302 	orr.w	r3, r3, #2
 810150e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101512:	4b11      	ldr	r3, [pc, #68]	; (8101558 <HAL_MspInit+0x5c>)
 8101514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101518:	f003 0302 	and.w	r3, r3, #2
 810151c:	607b      	str	r3, [r7, #4]
 810151e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 4, 0);
 8101520:	2200      	movs	r2, #0
 8101522:	2104      	movs	r1, #4
 8101524:	2040      	movs	r0, #64	; 0x40
 8101526:	f000 fb22 	bl	8101b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810152a:	2040      	movs	r0, #64	; 0x40
 810152c:	f000 fb39 	bl	8101ba2 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 4, 0);
 8101530:	2200      	movs	r2, #0
 8101532:	2104      	movs	r1, #4
 8101534:	207e      	movs	r0, #126	; 0x7e
 8101536:	f000 fb1a 	bl	8101b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810153a:	207e      	movs	r0, #126	; 0x7e
 810153c:	f000 fb31 	bl	8101ba2 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8101540:	2200      	movs	r2, #0
 8101542:	2104      	movs	r1, #4
 8101544:	2094      	movs	r0, #148	; 0x94
 8101546:	f000 fb12 	bl	8101b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 810154a:	2094      	movs	r0, #148	; 0x94
 810154c:	f000 fb29 	bl	8101ba2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101550:	bf00      	nop
 8101552:	3708      	adds	r7, #8
 8101554:	46bd      	mov	sp, r7
 8101556:	bd80      	pop	{r7, pc}
 8101558:	58024400 	.word	0x58024400

0810155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810155c:	b480      	push	{r7}
 810155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101560:	e7fe      	b.n	8101560 <NMI_Handler+0x4>

08101562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101562:	b480      	push	{r7}
 8101564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101566:	e7fe      	b.n	8101566 <HardFault_Handler+0x4>

08101568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101568:	b480      	push	{r7}
 810156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810156c:	e7fe      	b.n	810156c <MemManage_Handler+0x4>

0810156e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810156e:	b480      	push	{r7}
 8101570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101572:	e7fe      	b.n	8101572 <BusFault_Handler+0x4>

08101574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101574:	b480      	push	{r7}
 8101576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101578:	e7fe      	b.n	8101578 <UsageFault_Handler+0x4>

0810157a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810157a:	b480      	push	{r7}
 810157c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810157e:	bf00      	nop
 8101580:	46bd      	mov	sp, r7
 8101582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101586:	4770      	bx	lr

08101588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101588:	b480      	push	{r7}
 810158a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810158c:	bf00      	nop
 810158e:	46bd      	mov	sp, r7
 8101590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101594:	4770      	bx	lr

08101596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101596:	b480      	push	{r7}
 8101598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810159a:	bf00      	nop
 810159c:	46bd      	mov	sp, r7
 810159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a2:	4770      	bx	lr

081015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81015a4:	b580      	push	{r7, lr}
 81015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81015a8:	f000 f9a4 	bl	81018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81015ac:	bf00      	nop
 81015ae:	bd80      	pop	{r7, pc}

081015b0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 81015b0:	b580      	push	{r7, lr}
 81015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 81015b4:	4802      	ldr	r0, [pc, #8]	; (81015c0 <I2C2_EV_IRQHandler+0x10>)
 81015b6:	f000 fff9 	bl	81025ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 81015ba:	bf00      	nop
 81015bc:	bd80      	pop	{r7, pc}
 81015be:	bf00      	nop
 81015c0:	1000036c 	.word	0x1000036c

081015c4 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 81015c4:	b480      	push	{r7}
 81015c6:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 81015c8:	bf00      	nop
 81015ca:	46bd      	mov	sp, r7
 81015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d0:	4770      	bx	lr

081015d2 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81015d2:	b580      	push	{r7, lr}
 81015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81015d6:	f000 fd11 	bl	8101ffc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81015da:	bf00      	nop
 81015dc:	bd80      	pop	{r7, pc}

081015de <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 81015de:	b480      	push	{r7}
 81015e0:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 81015e2:	bf00      	nop
 81015e4:	46bd      	mov	sp, r7
 81015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ea:	4770      	bx	lr

081015ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81015ec:	b480      	push	{r7}
 81015ee:	af00      	add	r7, sp, #0
	return 1;
 81015f0:	2301      	movs	r3, #1
}
 81015f2:	4618      	mov	r0, r3
 81015f4:	46bd      	mov	sp, r7
 81015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fa:	4770      	bx	lr

081015fc <_kill>:

int _kill(int pid, int sig)
{
 81015fc:	b580      	push	{r7, lr}
 81015fe:	b082      	sub	sp, #8
 8101600:	af00      	add	r7, sp, #0
 8101602:	6078      	str	r0, [r7, #4]
 8101604:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101606:	f005 fe41 	bl	810728c <__errno>
 810160a:	4603      	mov	r3, r0
 810160c:	2216      	movs	r2, #22
 810160e:	601a      	str	r2, [r3, #0]
	return -1;
 8101610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101614:	4618      	mov	r0, r3
 8101616:	3708      	adds	r7, #8
 8101618:	46bd      	mov	sp, r7
 810161a:	bd80      	pop	{r7, pc}

0810161c <_exit>:

void _exit (int status)
{
 810161c:	b580      	push	{r7, lr}
 810161e:	b082      	sub	sp, #8
 8101620:	af00      	add	r7, sp, #0
 8101622:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101624:	f04f 31ff 	mov.w	r1, #4294967295
 8101628:	6878      	ldr	r0, [r7, #4]
 810162a:	f7ff ffe7 	bl	81015fc <_kill>
	while (1) {}		/* Make sure we hang here */
 810162e:	e7fe      	b.n	810162e <_exit+0x12>

08101630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101630:	b580      	push	{r7, lr}
 8101632:	b086      	sub	sp, #24
 8101634:	af00      	add	r7, sp, #0
 8101636:	60f8      	str	r0, [r7, #12]
 8101638:	60b9      	str	r1, [r7, #8]
 810163a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810163c:	2300      	movs	r3, #0
 810163e:	617b      	str	r3, [r7, #20]
 8101640:	e00a      	b.n	8101658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101642:	f3af 8000 	nop.w
 8101646:	4601      	mov	r1, r0
 8101648:	68bb      	ldr	r3, [r7, #8]
 810164a:	1c5a      	adds	r2, r3, #1
 810164c:	60ba      	str	r2, [r7, #8]
 810164e:	b2ca      	uxtb	r2, r1
 8101650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101652:	697b      	ldr	r3, [r7, #20]
 8101654:	3301      	adds	r3, #1
 8101656:	617b      	str	r3, [r7, #20]
 8101658:	697a      	ldr	r2, [r7, #20]
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	429a      	cmp	r2, r3
 810165e:	dbf0      	blt.n	8101642 <_read+0x12>
	}

return len;
 8101660:	687b      	ldr	r3, [r7, #4]
}
 8101662:	4618      	mov	r0, r3
 8101664:	3718      	adds	r7, #24
 8101666:	46bd      	mov	sp, r7
 8101668:	bd80      	pop	{r7, pc}

0810166a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810166a:	b580      	push	{r7, lr}
 810166c:	b086      	sub	sp, #24
 810166e:	af00      	add	r7, sp, #0
 8101670:	60f8      	str	r0, [r7, #12]
 8101672:	60b9      	str	r1, [r7, #8]
 8101674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101676:	2300      	movs	r3, #0
 8101678:	617b      	str	r3, [r7, #20]
 810167a:	e009      	b.n	8101690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 810167c:	68bb      	ldr	r3, [r7, #8]
 810167e:	1c5a      	adds	r2, r3, #1
 8101680:	60ba      	str	r2, [r7, #8]
 8101682:	781b      	ldrb	r3, [r3, #0]
 8101684:	4618      	mov	r0, r3
 8101686:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810168a:	697b      	ldr	r3, [r7, #20]
 810168c:	3301      	adds	r3, #1
 810168e:	617b      	str	r3, [r7, #20]
 8101690:	697a      	ldr	r2, [r7, #20]
 8101692:	687b      	ldr	r3, [r7, #4]
 8101694:	429a      	cmp	r2, r3
 8101696:	dbf1      	blt.n	810167c <_write+0x12>
	}
	return len;
 8101698:	687b      	ldr	r3, [r7, #4]
}
 810169a:	4618      	mov	r0, r3
 810169c:	3718      	adds	r7, #24
 810169e:	46bd      	mov	sp, r7
 81016a0:	bd80      	pop	{r7, pc}

081016a2 <_close>:

int _close(int file)
{
 81016a2:	b480      	push	{r7}
 81016a4:	b083      	sub	sp, #12
 81016a6:	af00      	add	r7, sp, #0
 81016a8:	6078      	str	r0, [r7, #4]
	return -1;
 81016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 81016ae:	4618      	mov	r0, r3
 81016b0:	370c      	adds	r7, #12
 81016b2:	46bd      	mov	sp, r7
 81016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b8:	4770      	bx	lr

081016ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 81016ba:	b480      	push	{r7}
 81016bc:	b083      	sub	sp, #12
 81016be:	af00      	add	r7, sp, #0
 81016c0:	6078      	str	r0, [r7, #4]
 81016c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81016c4:	683b      	ldr	r3, [r7, #0]
 81016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81016ca:	605a      	str	r2, [r3, #4]
	return 0;
 81016cc:	2300      	movs	r3, #0
}
 81016ce:	4618      	mov	r0, r3
 81016d0:	370c      	adds	r7, #12
 81016d2:	46bd      	mov	sp, r7
 81016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d8:	4770      	bx	lr

081016da <_isatty>:

int _isatty(int file)
{
 81016da:	b480      	push	{r7}
 81016dc:	b083      	sub	sp, #12
 81016de:	af00      	add	r7, sp, #0
 81016e0:	6078      	str	r0, [r7, #4]
	return 1;
 81016e2:	2301      	movs	r3, #1
}
 81016e4:	4618      	mov	r0, r3
 81016e6:	370c      	adds	r7, #12
 81016e8:	46bd      	mov	sp, r7
 81016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ee:	4770      	bx	lr

081016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81016f0:	b480      	push	{r7}
 81016f2:	b085      	sub	sp, #20
 81016f4:	af00      	add	r7, sp, #0
 81016f6:	60f8      	str	r0, [r7, #12]
 81016f8:	60b9      	str	r1, [r7, #8]
 81016fa:	607a      	str	r2, [r7, #4]
	return 0;
 81016fc:	2300      	movs	r3, #0
}
 81016fe:	4618      	mov	r0, r3
 8101700:	3714      	adds	r7, #20
 8101702:	46bd      	mov	sp, r7
 8101704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101708:	4770      	bx	lr
	...

0810170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810170c:	b580      	push	{r7, lr}
 810170e:	b086      	sub	sp, #24
 8101710:	af00      	add	r7, sp, #0
 8101712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101714:	4a14      	ldr	r2, [pc, #80]	; (8101768 <_sbrk+0x5c>)
 8101716:	4b15      	ldr	r3, [pc, #84]	; (810176c <_sbrk+0x60>)
 8101718:	1ad3      	subs	r3, r2, r3
 810171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810171c:	697b      	ldr	r3, [r7, #20]
 810171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101720:	4b13      	ldr	r3, [pc, #76]	; (8101770 <_sbrk+0x64>)
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	2b00      	cmp	r3, #0
 8101726:	d102      	bne.n	810172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101728:	4b11      	ldr	r3, [pc, #68]	; (8101770 <_sbrk+0x64>)
 810172a:	4a12      	ldr	r2, [pc, #72]	; (8101774 <_sbrk+0x68>)
 810172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810172e:	4b10      	ldr	r3, [pc, #64]	; (8101770 <_sbrk+0x64>)
 8101730:	681a      	ldr	r2, [r3, #0]
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	4413      	add	r3, r2
 8101736:	693a      	ldr	r2, [r7, #16]
 8101738:	429a      	cmp	r2, r3
 810173a:	d207      	bcs.n	810174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810173c:	f005 fda6 	bl	810728c <__errno>
 8101740:	4603      	mov	r3, r0
 8101742:	220c      	movs	r2, #12
 8101744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101746:	f04f 33ff 	mov.w	r3, #4294967295
 810174a:	e009      	b.n	8101760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810174c:	4b08      	ldr	r3, [pc, #32]	; (8101770 <_sbrk+0x64>)
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101752:	4b07      	ldr	r3, [pc, #28]	; (8101770 <_sbrk+0x64>)
 8101754:	681a      	ldr	r2, [r3, #0]
 8101756:	687b      	ldr	r3, [r7, #4]
 8101758:	4413      	add	r3, r2
 810175a:	4a05      	ldr	r2, [pc, #20]	; (8101770 <_sbrk+0x64>)
 810175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810175e:	68fb      	ldr	r3, [r7, #12]
}
 8101760:	4618      	mov	r0, r3
 8101762:	3718      	adds	r7, #24
 8101764:	46bd      	mov	sp, r7
 8101766:	bd80      	pop	{r7, pc}
 8101768:	10048000 	.word	0x10048000
 810176c:	00000400 	.word	0x00000400
 8101770:	100002ac 	.word	0x100002ac
 8101774:	10000530 	.word	0x10000530

08101778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101778:	f8df d034 	ldr.w	sp, [pc, #52]	; 81017b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810177c:	f7ff fb94 	bl	8100ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101780:	480c      	ldr	r0, [pc, #48]	; (81017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101782:	490d      	ldr	r1, [pc, #52]	; (81017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101784:	4a0d      	ldr	r2, [pc, #52]	; (81017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101788:	e002      	b.n	8101790 <LoopCopyDataInit>

0810178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810178e:	3304      	adds	r3, #4

08101790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101794:	d3f9      	bcc.n	810178a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101796:	4a0a      	ldr	r2, [pc, #40]	; (81017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101798:	4c0a      	ldr	r4, [pc, #40]	; (81017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810179c:	e001      	b.n	81017a2 <LoopFillZerobss>

0810179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81017a0:	3204      	adds	r2, #4

081017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81017a4:	d3fb      	bcc.n	810179e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81017a6:	f005 fd89 	bl	81072bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81017aa:	f7ff fc9f 	bl	81010ec <main>
  bx  lr
 81017ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81017b0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81017b4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81017b8:	1000028c 	.word	0x1000028c
  ldr r2, =_sidata
 81017bc:	0810c25c 	.word	0x0810c25c
  ldr r2, =_sbss
 81017c0:	1000028c 	.word	0x1000028c
  ldr r4, =_ebss
 81017c4:	1000052c 	.word	0x1000052c

081017c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81017c8:	e7fe      	b.n	81017c8 <ADC3_IRQHandler>
	...

081017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81017cc:	b580      	push	{r7, lr}
 81017ce:	b082      	sub	sp, #8
 81017d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81017d2:	4b28      	ldr	r3, [pc, #160]	; (8101874 <HAL_Init+0xa8>)
 81017d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017d8:	4a26      	ldr	r2, [pc, #152]	; (8101874 <HAL_Init+0xa8>)
 81017da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81017de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81017e2:	4b24      	ldr	r3, [pc, #144]	; (8101874 <HAL_Init+0xa8>)
 81017e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81017e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81017ec:	603b      	str	r3, [r7, #0]
 81017ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81017f0:	4b21      	ldr	r3, [pc, #132]	; (8101878 <HAL_Init+0xac>)
 81017f2:	681b      	ldr	r3, [r3, #0]
 81017f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81017f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81017fc:	4a1e      	ldr	r2, [pc, #120]	; (8101878 <HAL_Init+0xac>)
 81017fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101802:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101804:	4b1c      	ldr	r3, [pc, #112]	; (8101878 <HAL_Init+0xac>)
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	4a1b      	ldr	r2, [pc, #108]	; (8101878 <HAL_Init+0xac>)
 810180a:	f043 0301 	orr.w	r3, r3, #1
 810180e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101810:	2003      	movs	r0, #3
 8101812:	f000 f9a1 	bl	8101b58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101816:	f001 fa1f 	bl	8102c58 <HAL_RCC_GetSysClockFreq>
 810181a:	4602      	mov	r2, r0
 810181c:	4b15      	ldr	r3, [pc, #84]	; (8101874 <HAL_Init+0xa8>)
 810181e:	699b      	ldr	r3, [r3, #24]
 8101820:	0a1b      	lsrs	r3, r3, #8
 8101822:	f003 030f 	and.w	r3, r3, #15
 8101826:	4915      	ldr	r1, [pc, #84]	; (810187c <HAL_Init+0xb0>)
 8101828:	5ccb      	ldrb	r3, [r1, r3]
 810182a:	f003 031f 	and.w	r3, r3, #31
 810182e:	fa22 f303 	lsr.w	r3, r2, r3
 8101832:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101834:	4b0f      	ldr	r3, [pc, #60]	; (8101874 <HAL_Init+0xa8>)
 8101836:	699b      	ldr	r3, [r3, #24]
 8101838:	f003 030f 	and.w	r3, r3, #15
 810183c:	4a0f      	ldr	r2, [pc, #60]	; (810187c <HAL_Init+0xb0>)
 810183e:	5cd3      	ldrb	r3, [r2, r3]
 8101840:	f003 031f 	and.w	r3, r3, #31
 8101844:	687a      	ldr	r2, [r7, #4]
 8101846:	fa22 f303 	lsr.w	r3, r2, r3
 810184a:	4a0d      	ldr	r2, [pc, #52]	; (8101880 <HAL_Init+0xb4>)
 810184c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810184e:	4b0c      	ldr	r3, [pc, #48]	; (8101880 <HAL_Init+0xb4>)
 8101850:	681b      	ldr	r3, [r3, #0]
 8101852:	4a0c      	ldr	r2, [pc, #48]	; (8101884 <HAL_Init+0xb8>)
 8101854:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101856:	2000      	movs	r0, #0
 8101858:	f000 f816 	bl	8101888 <HAL_InitTick>
 810185c:	4603      	mov	r3, r0
 810185e:	2b00      	cmp	r3, #0
 8101860:	d001      	beq.n	8101866 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101862:	2301      	movs	r3, #1
 8101864:	e002      	b.n	810186c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101866:	f7ff fe49 	bl	81014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810186a:	2300      	movs	r3, #0
}
 810186c:	4618      	mov	r0, r3
 810186e:	3708      	adds	r7, #8
 8101870:	46bd      	mov	sp, r7
 8101872:	bd80      	pop	{r7, pc}
 8101874:	58024400 	.word	0x58024400
 8101878:	40024400 	.word	0x40024400
 810187c:	0810bd3c 	.word	0x0810bd3c
 8101880:	10000004 	.word	0x10000004
 8101884:	10000000 	.word	0x10000000

08101888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101888:	b580      	push	{r7, lr}
 810188a:	b082      	sub	sp, #8
 810188c:	af00      	add	r7, sp, #0
 810188e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101890:	4b15      	ldr	r3, [pc, #84]	; (81018e8 <HAL_InitTick+0x60>)
 8101892:	781b      	ldrb	r3, [r3, #0]
 8101894:	2b00      	cmp	r3, #0
 8101896:	d101      	bne.n	810189c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101898:	2301      	movs	r3, #1
 810189a:	e021      	b.n	81018e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810189c:	4b13      	ldr	r3, [pc, #76]	; (81018ec <HAL_InitTick+0x64>)
 810189e:	681a      	ldr	r2, [r3, #0]
 81018a0:	4b11      	ldr	r3, [pc, #68]	; (81018e8 <HAL_InitTick+0x60>)
 81018a2:	781b      	ldrb	r3, [r3, #0]
 81018a4:	4619      	mov	r1, r3
 81018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 81018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81018b2:	4618      	mov	r0, r3
 81018b4:	f000 f983 	bl	8101bbe <HAL_SYSTICK_Config>
 81018b8:	4603      	mov	r3, r0
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	d001      	beq.n	81018c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81018be:	2301      	movs	r3, #1
 81018c0:	e00e      	b.n	81018e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	2b0f      	cmp	r3, #15
 81018c6:	d80a      	bhi.n	81018de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81018c8:	2200      	movs	r2, #0
 81018ca:	6879      	ldr	r1, [r7, #4]
 81018cc:	f04f 30ff 	mov.w	r0, #4294967295
 81018d0:	f000 f94d 	bl	8101b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81018d4:	4a06      	ldr	r2, [pc, #24]	; (81018f0 <HAL_InitTick+0x68>)
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81018da:	2300      	movs	r3, #0
 81018dc:	e000      	b.n	81018e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81018de:	2301      	movs	r3, #1
}
 81018e0:	4618      	mov	r0, r3
 81018e2:	3708      	adds	r7, #8
 81018e4:	46bd      	mov	sp, r7
 81018e6:	bd80      	pop	{r7, pc}
 81018e8:	1000000c 	.word	0x1000000c
 81018ec:	10000000 	.word	0x10000000
 81018f0:	10000008 	.word	0x10000008

081018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81018f4:	b480      	push	{r7}
 81018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81018f8:	4b06      	ldr	r3, [pc, #24]	; (8101914 <HAL_IncTick+0x20>)
 81018fa:	781b      	ldrb	r3, [r3, #0]
 81018fc:	461a      	mov	r2, r3
 81018fe:	4b06      	ldr	r3, [pc, #24]	; (8101918 <HAL_IncTick+0x24>)
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	4413      	add	r3, r2
 8101904:	4a04      	ldr	r2, [pc, #16]	; (8101918 <HAL_IncTick+0x24>)
 8101906:	6013      	str	r3, [r2, #0]
}
 8101908:	bf00      	nop
 810190a:	46bd      	mov	sp, r7
 810190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101910:	4770      	bx	lr
 8101912:	bf00      	nop
 8101914:	1000000c 	.word	0x1000000c
 8101918:	100004f8 	.word	0x100004f8

0810191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810191c:	b480      	push	{r7}
 810191e:	af00      	add	r7, sp, #0
  return uwTick;
 8101920:	4b03      	ldr	r3, [pc, #12]	; (8101930 <HAL_GetTick+0x14>)
 8101922:	681b      	ldr	r3, [r3, #0]
}
 8101924:	4618      	mov	r0, r3
 8101926:	46bd      	mov	sp, r7
 8101928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810192c:	4770      	bx	lr
 810192e:	bf00      	nop
 8101930:	100004f8 	.word	0x100004f8

08101934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101934:	b580      	push	{r7, lr}
 8101936:	b084      	sub	sp, #16
 8101938:	af00      	add	r7, sp, #0
 810193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810193c:	f7ff ffee 	bl	810191c <HAL_GetTick>
 8101940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101946:	68fb      	ldr	r3, [r7, #12]
 8101948:	f1b3 3fff 	cmp.w	r3, #4294967295
 810194c:	d005      	beq.n	810195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810194e:	4b0a      	ldr	r3, [pc, #40]	; (8101978 <HAL_Delay+0x44>)
 8101950:	781b      	ldrb	r3, [r3, #0]
 8101952:	461a      	mov	r2, r3
 8101954:	68fb      	ldr	r3, [r7, #12]
 8101956:	4413      	add	r3, r2
 8101958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810195a:	bf00      	nop
 810195c:	f7ff ffde 	bl	810191c <HAL_GetTick>
 8101960:	4602      	mov	r2, r0
 8101962:	68bb      	ldr	r3, [r7, #8]
 8101964:	1ad3      	subs	r3, r2, r3
 8101966:	68fa      	ldr	r2, [r7, #12]
 8101968:	429a      	cmp	r2, r3
 810196a:	d8f7      	bhi.n	810195c <HAL_Delay+0x28>
  {
  }
}
 810196c:	bf00      	nop
 810196e:	bf00      	nop
 8101970:	3710      	adds	r7, #16
 8101972:	46bd      	mov	sp, r7
 8101974:	bd80      	pop	{r7, pc}
 8101976:	bf00      	nop
 8101978:	1000000c 	.word	0x1000000c

0810197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810197c:	b480      	push	{r7}
 810197e:	b085      	sub	sp, #20
 8101980:	af00      	add	r7, sp, #0
 8101982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	f003 0307 	and.w	r3, r3, #7
 810198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810198c:	4b0c      	ldr	r3, [pc, #48]	; (81019c0 <__NVIC_SetPriorityGrouping+0x44>)
 810198e:	68db      	ldr	r3, [r3, #12]
 8101990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101992:	68ba      	ldr	r2, [r7, #8]
 8101994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101998:	4013      	ands	r3, r2
 810199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810199c:	68fb      	ldr	r3, [r7, #12]
 810199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81019a0:	68bb      	ldr	r3, [r7, #8]
 81019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81019ae:	4a04      	ldr	r2, [pc, #16]	; (81019c0 <__NVIC_SetPriorityGrouping+0x44>)
 81019b0:	68bb      	ldr	r3, [r7, #8]
 81019b2:	60d3      	str	r3, [r2, #12]
}
 81019b4:	bf00      	nop
 81019b6:	3714      	adds	r7, #20
 81019b8:	46bd      	mov	sp, r7
 81019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019be:	4770      	bx	lr
 81019c0:	e000ed00 	.word	0xe000ed00

081019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81019c4:	b480      	push	{r7}
 81019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81019c8:	4b04      	ldr	r3, [pc, #16]	; (81019dc <__NVIC_GetPriorityGrouping+0x18>)
 81019ca:	68db      	ldr	r3, [r3, #12]
 81019cc:	0a1b      	lsrs	r3, r3, #8
 81019ce:	f003 0307 	and.w	r3, r3, #7
}
 81019d2:	4618      	mov	r0, r3
 81019d4:	46bd      	mov	sp, r7
 81019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019da:	4770      	bx	lr
 81019dc:	e000ed00 	.word	0xe000ed00

081019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81019e0:	b480      	push	{r7}
 81019e2:	b083      	sub	sp, #12
 81019e4:	af00      	add	r7, sp, #0
 81019e6:	4603      	mov	r3, r0
 81019e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019ee:	2b00      	cmp	r3, #0
 81019f0:	db0b      	blt.n	8101a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81019f2:	88fb      	ldrh	r3, [r7, #6]
 81019f4:	f003 021f 	and.w	r2, r3, #31
 81019f8:	4907      	ldr	r1, [pc, #28]	; (8101a18 <__NVIC_EnableIRQ+0x38>)
 81019fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019fe:	095b      	lsrs	r3, r3, #5
 8101a00:	2001      	movs	r0, #1
 8101a02:	fa00 f202 	lsl.w	r2, r0, r2
 8101a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101a0a:	bf00      	nop
 8101a0c:	370c      	adds	r7, #12
 8101a0e:	46bd      	mov	sp, r7
 8101a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a14:	4770      	bx	lr
 8101a16:	bf00      	nop
 8101a18:	e000e100 	.word	0xe000e100

08101a1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101a1c:	b480      	push	{r7}
 8101a1e:	b083      	sub	sp, #12
 8101a20:	af00      	add	r7, sp, #0
 8101a22:	4603      	mov	r3, r0
 8101a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a2a:	2b00      	cmp	r3, #0
 8101a2c:	db0c      	blt.n	8101a48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101a2e:	88fb      	ldrh	r3, [r7, #6]
 8101a30:	f003 021f 	and.w	r2, r3, #31
 8101a34:	4907      	ldr	r1, [pc, #28]	; (8101a54 <__NVIC_ClearPendingIRQ+0x38>)
 8101a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a3a:	095b      	lsrs	r3, r3, #5
 8101a3c:	2001      	movs	r0, #1
 8101a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8101a42:	3360      	adds	r3, #96	; 0x60
 8101a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101a48:	bf00      	nop
 8101a4a:	370c      	adds	r7, #12
 8101a4c:	46bd      	mov	sp, r7
 8101a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a52:	4770      	bx	lr
 8101a54:	e000e100 	.word	0xe000e100

08101a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101a58:	b480      	push	{r7}
 8101a5a:	b083      	sub	sp, #12
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	4603      	mov	r3, r0
 8101a60:	6039      	str	r1, [r7, #0]
 8101a62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a68:	2b00      	cmp	r3, #0
 8101a6a:	db0a      	blt.n	8101a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a6c:	683b      	ldr	r3, [r7, #0]
 8101a6e:	b2da      	uxtb	r2, r3
 8101a70:	490c      	ldr	r1, [pc, #48]	; (8101aa4 <__NVIC_SetPriority+0x4c>)
 8101a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a76:	0112      	lsls	r2, r2, #4
 8101a78:	b2d2      	uxtb	r2, r2
 8101a7a:	440b      	add	r3, r1
 8101a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101a80:	e00a      	b.n	8101a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a82:	683b      	ldr	r3, [r7, #0]
 8101a84:	b2da      	uxtb	r2, r3
 8101a86:	4908      	ldr	r1, [pc, #32]	; (8101aa8 <__NVIC_SetPriority+0x50>)
 8101a88:	88fb      	ldrh	r3, [r7, #6]
 8101a8a:	f003 030f 	and.w	r3, r3, #15
 8101a8e:	3b04      	subs	r3, #4
 8101a90:	0112      	lsls	r2, r2, #4
 8101a92:	b2d2      	uxtb	r2, r2
 8101a94:	440b      	add	r3, r1
 8101a96:	761a      	strb	r2, [r3, #24]
}
 8101a98:	bf00      	nop
 8101a9a:	370c      	adds	r7, #12
 8101a9c:	46bd      	mov	sp, r7
 8101a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa2:	4770      	bx	lr
 8101aa4:	e000e100 	.word	0xe000e100
 8101aa8:	e000ed00 	.word	0xe000ed00

08101aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101aac:	b480      	push	{r7}
 8101aae:	b089      	sub	sp, #36	; 0x24
 8101ab0:	af00      	add	r7, sp, #0
 8101ab2:	60f8      	str	r0, [r7, #12]
 8101ab4:	60b9      	str	r1, [r7, #8]
 8101ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101ab8:	68fb      	ldr	r3, [r7, #12]
 8101aba:	f003 0307 	and.w	r3, r3, #7
 8101abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101ac0:	69fb      	ldr	r3, [r7, #28]
 8101ac2:	f1c3 0307 	rsb	r3, r3, #7
 8101ac6:	2b04      	cmp	r3, #4
 8101ac8:	bf28      	it	cs
 8101aca:	2304      	movcs	r3, #4
 8101acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101ace:	69fb      	ldr	r3, [r7, #28]
 8101ad0:	3304      	adds	r3, #4
 8101ad2:	2b06      	cmp	r3, #6
 8101ad4:	d902      	bls.n	8101adc <NVIC_EncodePriority+0x30>
 8101ad6:	69fb      	ldr	r3, [r7, #28]
 8101ad8:	3b03      	subs	r3, #3
 8101ada:	e000      	b.n	8101ade <NVIC_EncodePriority+0x32>
 8101adc:	2300      	movs	r3, #0
 8101ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8101ae4:	69bb      	ldr	r3, [r7, #24]
 8101ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8101aea:	43da      	mvns	r2, r3
 8101aec:	68bb      	ldr	r3, [r7, #8]
 8101aee:	401a      	ands	r2, r3
 8101af0:	697b      	ldr	r3, [r7, #20]
 8101af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101af4:	f04f 31ff 	mov.w	r1, #4294967295
 8101af8:	697b      	ldr	r3, [r7, #20]
 8101afa:	fa01 f303 	lsl.w	r3, r1, r3
 8101afe:	43d9      	mvns	r1, r3
 8101b00:	687b      	ldr	r3, [r7, #4]
 8101b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b04:	4313      	orrs	r3, r2
         );
}
 8101b06:	4618      	mov	r0, r3
 8101b08:	3724      	adds	r7, #36	; 0x24
 8101b0a:	46bd      	mov	sp, r7
 8101b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b10:	4770      	bx	lr
	...

08101b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101b14:	b580      	push	{r7, lr}
 8101b16:	b082      	sub	sp, #8
 8101b18:	af00      	add	r7, sp, #0
 8101b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	3b01      	subs	r3, #1
 8101b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101b24:	d301      	bcc.n	8101b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101b26:	2301      	movs	r3, #1
 8101b28:	e00f      	b.n	8101b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101b2a:	4a0a      	ldr	r2, [pc, #40]	; (8101b54 <SysTick_Config+0x40>)
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	3b01      	subs	r3, #1
 8101b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101b32:	210f      	movs	r1, #15
 8101b34:	f04f 30ff 	mov.w	r0, #4294967295
 8101b38:	f7ff ff8e 	bl	8101a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101b3c:	4b05      	ldr	r3, [pc, #20]	; (8101b54 <SysTick_Config+0x40>)
 8101b3e:	2200      	movs	r2, #0
 8101b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101b42:	4b04      	ldr	r3, [pc, #16]	; (8101b54 <SysTick_Config+0x40>)
 8101b44:	2207      	movs	r2, #7
 8101b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101b48:	2300      	movs	r3, #0
}
 8101b4a:	4618      	mov	r0, r3
 8101b4c:	3708      	adds	r7, #8
 8101b4e:	46bd      	mov	sp, r7
 8101b50:	bd80      	pop	{r7, pc}
 8101b52:	bf00      	nop
 8101b54:	e000e010 	.word	0xe000e010

08101b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101b58:	b580      	push	{r7, lr}
 8101b5a:	b082      	sub	sp, #8
 8101b5c:	af00      	add	r7, sp, #0
 8101b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101b60:	6878      	ldr	r0, [r7, #4]
 8101b62:	f7ff ff0b 	bl	810197c <__NVIC_SetPriorityGrouping>
}
 8101b66:	bf00      	nop
 8101b68:	3708      	adds	r7, #8
 8101b6a:	46bd      	mov	sp, r7
 8101b6c:	bd80      	pop	{r7, pc}

08101b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101b6e:	b580      	push	{r7, lr}
 8101b70:	b086      	sub	sp, #24
 8101b72:	af00      	add	r7, sp, #0
 8101b74:	4603      	mov	r3, r0
 8101b76:	60b9      	str	r1, [r7, #8]
 8101b78:	607a      	str	r2, [r7, #4]
 8101b7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101b7c:	f7ff ff22 	bl	81019c4 <__NVIC_GetPriorityGrouping>
 8101b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101b82:	687a      	ldr	r2, [r7, #4]
 8101b84:	68b9      	ldr	r1, [r7, #8]
 8101b86:	6978      	ldr	r0, [r7, #20]
 8101b88:	f7ff ff90 	bl	8101aac <NVIC_EncodePriority>
 8101b8c:	4602      	mov	r2, r0
 8101b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101b92:	4611      	mov	r1, r2
 8101b94:	4618      	mov	r0, r3
 8101b96:	f7ff ff5f 	bl	8101a58 <__NVIC_SetPriority>
}
 8101b9a:	bf00      	nop
 8101b9c:	3718      	adds	r7, #24
 8101b9e:	46bd      	mov	sp, r7
 8101ba0:	bd80      	pop	{r7, pc}

08101ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101ba2:	b580      	push	{r7, lr}
 8101ba4:	b082      	sub	sp, #8
 8101ba6:	af00      	add	r7, sp, #0
 8101ba8:	4603      	mov	r3, r0
 8101baa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101bb0:	4618      	mov	r0, r3
 8101bb2:	f7ff ff15 	bl	81019e0 <__NVIC_EnableIRQ>
}
 8101bb6:	bf00      	nop
 8101bb8:	3708      	adds	r7, #8
 8101bba:	46bd      	mov	sp, r7
 8101bbc:	bd80      	pop	{r7, pc}

08101bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101bbe:	b580      	push	{r7, lr}
 8101bc0:	b082      	sub	sp, #8
 8101bc2:	af00      	add	r7, sp, #0
 8101bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101bc6:	6878      	ldr	r0, [r7, #4]
 8101bc8:	f7ff ffa4 	bl	8101b14 <SysTick_Config>
 8101bcc:	4603      	mov	r3, r0
}
 8101bce:	4618      	mov	r0, r3
 8101bd0:	3708      	adds	r7, #8
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	bd80      	pop	{r7, pc}

08101bd6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101bd6:	b580      	push	{r7, lr}
 8101bd8:	b082      	sub	sp, #8
 8101bda:	af00      	add	r7, sp, #0
 8101bdc:	4603      	mov	r3, r0
 8101bde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8101be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101be4:	4618      	mov	r0, r3
 8101be6:	f7ff ff19 	bl	8101a1c <__NVIC_ClearPendingIRQ>
}
 8101bea:	bf00      	nop
 8101bec:	3708      	adds	r7, #8
 8101bee:	46bd      	mov	sp, r7
 8101bf0:	bd80      	pop	{r7, pc}
	...

08101bf4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101bf4:	b480      	push	{r7}
 8101bf6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101bf8:	4b07      	ldr	r3, [pc, #28]	; (8101c18 <HAL_GetCurrentCPUID+0x24>)
 8101bfa:	681b      	ldr	r3, [r3, #0]
 8101bfc:	091b      	lsrs	r3, r3, #4
 8101bfe:	f003 030f 	and.w	r3, r3, #15
 8101c02:	2b07      	cmp	r3, #7
 8101c04:	d101      	bne.n	8101c0a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101c06:	2303      	movs	r3, #3
 8101c08:	e000      	b.n	8101c0c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101c0a:	2301      	movs	r3, #1
  }
}
 8101c0c:	4618      	mov	r0, r3
 8101c0e:	46bd      	mov	sp, r7
 8101c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c14:	4770      	bx	lr
 8101c16:	bf00      	nop
 8101c18:	e000ed00 	.word	0xe000ed00

08101c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101c1c:	b480      	push	{r7}
 8101c1e:	b089      	sub	sp, #36	; 0x24
 8101c20:	af00      	add	r7, sp, #0
 8101c22:	6078      	str	r0, [r7, #4]
 8101c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101c26:	2300      	movs	r3, #0
 8101c28:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101c2a:	4b89      	ldr	r3, [pc, #548]	; (8101e50 <HAL_GPIO_Init+0x234>)
 8101c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101c2e:	e194      	b.n	8101f5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101c30:	683b      	ldr	r3, [r7, #0]
 8101c32:	681a      	ldr	r2, [r3, #0]
 8101c34:	2101      	movs	r1, #1
 8101c36:	69fb      	ldr	r3, [r7, #28]
 8101c38:	fa01 f303 	lsl.w	r3, r1, r3
 8101c3c:	4013      	ands	r3, r2
 8101c3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101c40:	693b      	ldr	r3, [r7, #16]
 8101c42:	2b00      	cmp	r3, #0
 8101c44:	f000 8186 	beq.w	8101f54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101c48:	683b      	ldr	r3, [r7, #0]
 8101c4a:	685b      	ldr	r3, [r3, #4]
 8101c4c:	2b01      	cmp	r3, #1
 8101c4e:	d00b      	beq.n	8101c68 <HAL_GPIO_Init+0x4c>
 8101c50:	683b      	ldr	r3, [r7, #0]
 8101c52:	685b      	ldr	r3, [r3, #4]
 8101c54:	2b02      	cmp	r3, #2
 8101c56:	d007      	beq.n	8101c68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101c58:	683b      	ldr	r3, [r7, #0]
 8101c5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101c5c:	2b11      	cmp	r3, #17
 8101c5e:	d003      	beq.n	8101c68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101c60:	683b      	ldr	r3, [r7, #0]
 8101c62:	685b      	ldr	r3, [r3, #4]
 8101c64:	2b12      	cmp	r3, #18
 8101c66:	d130      	bne.n	8101cca <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	689b      	ldr	r3, [r3, #8]
 8101c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101c6e:	69fb      	ldr	r3, [r7, #28]
 8101c70:	005b      	lsls	r3, r3, #1
 8101c72:	2203      	movs	r2, #3
 8101c74:	fa02 f303 	lsl.w	r3, r2, r3
 8101c78:	43db      	mvns	r3, r3
 8101c7a:	69ba      	ldr	r2, [r7, #24]
 8101c7c:	4013      	ands	r3, r2
 8101c7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101c80:	683b      	ldr	r3, [r7, #0]
 8101c82:	68da      	ldr	r2, [r3, #12]
 8101c84:	69fb      	ldr	r3, [r7, #28]
 8101c86:	005b      	lsls	r3, r3, #1
 8101c88:	fa02 f303 	lsl.w	r3, r2, r3
 8101c8c:	69ba      	ldr	r2, [r7, #24]
 8101c8e:	4313      	orrs	r3, r2
 8101c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	69ba      	ldr	r2, [r7, #24]
 8101c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	685b      	ldr	r3, [r3, #4]
 8101c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101c9e:	2201      	movs	r2, #1
 8101ca0:	69fb      	ldr	r3, [r7, #28]
 8101ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca6:	43db      	mvns	r3, r3
 8101ca8:	69ba      	ldr	r2, [r7, #24]
 8101caa:	4013      	ands	r3, r2
 8101cac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101cae:	683b      	ldr	r3, [r7, #0]
 8101cb0:	685b      	ldr	r3, [r3, #4]
 8101cb2:	091b      	lsrs	r3, r3, #4
 8101cb4:	f003 0201 	and.w	r2, r3, #1
 8101cb8:	69fb      	ldr	r3, [r7, #28]
 8101cba:	fa02 f303 	lsl.w	r3, r2, r3
 8101cbe:	69ba      	ldr	r2, [r7, #24]
 8101cc0:	4313      	orrs	r3, r2
 8101cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	69ba      	ldr	r2, [r7, #24]
 8101cc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	68db      	ldr	r3, [r3, #12]
 8101cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101cd0:	69fb      	ldr	r3, [r7, #28]
 8101cd2:	005b      	lsls	r3, r3, #1
 8101cd4:	2203      	movs	r2, #3
 8101cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cda:	43db      	mvns	r3, r3
 8101cdc:	69ba      	ldr	r2, [r7, #24]
 8101cde:	4013      	ands	r3, r2
 8101ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101ce2:	683b      	ldr	r3, [r7, #0]
 8101ce4:	689a      	ldr	r2, [r3, #8]
 8101ce6:	69fb      	ldr	r3, [r7, #28]
 8101ce8:	005b      	lsls	r3, r3, #1
 8101cea:	fa02 f303 	lsl.w	r3, r2, r3
 8101cee:	69ba      	ldr	r2, [r7, #24]
 8101cf0:	4313      	orrs	r3, r2
 8101cf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	69ba      	ldr	r2, [r7, #24]
 8101cf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101cfa:	683b      	ldr	r3, [r7, #0]
 8101cfc:	685b      	ldr	r3, [r3, #4]
 8101cfe:	2b02      	cmp	r3, #2
 8101d00:	d003      	beq.n	8101d0a <HAL_GPIO_Init+0xee>
 8101d02:	683b      	ldr	r3, [r7, #0]
 8101d04:	685b      	ldr	r3, [r3, #4]
 8101d06:	2b12      	cmp	r3, #18
 8101d08:	d123      	bne.n	8101d52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101d0a:	69fb      	ldr	r3, [r7, #28]
 8101d0c:	08da      	lsrs	r2, r3, #3
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	3208      	adds	r2, #8
 8101d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101d18:	69fb      	ldr	r3, [r7, #28]
 8101d1a:	f003 0307 	and.w	r3, r3, #7
 8101d1e:	009b      	lsls	r3, r3, #2
 8101d20:	220f      	movs	r2, #15
 8101d22:	fa02 f303 	lsl.w	r3, r2, r3
 8101d26:	43db      	mvns	r3, r3
 8101d28:	69ba      	ldr	r2, [r7, #24]
 8101d2a:	4013      	ands	r3, r2
 8101d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101d2e:	683b      	ldr	r3, [r7, #0]
 8101d30:	691a      	ldr	r2, [r3, #16]
 8101d32:	69fb      	ldr	r3, [r7, #28]
 8101d34:	f003 0307 	and.w	r3, r3, #7
 8101d38:	009b      	lsls	r3, r3, #2
 8101d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d3e:	69ba      	ldr	r2, [r7, #24]
 8101d40:	4313      	orrs	r3, r2
 8101d42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101d44:	69fb      	ldr	r3, [r7, #28]
 8101d46:	08da      	lsrs	r2, r3, #3
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	3208      	adds	r2, #8
 8101d4c:	69b9      	ldr	r1, [r7, #24]
 8101d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101d58:	69fb      	ldr	r3, [r7, #28]
 8101d5a:	005b      	lsls	r3, r3, #1
 8101d5c:	2203      	movs	r2, #3
 8101d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8101d62:	43db      	mvns	r3, r3
 8101d64:	69ba      	ldr	r2, [r7, #24]
 8101d66:	4013      	ands	r3, r2
 8101d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101d6a:	683b      	ldr	r3, [r7, #0]
 8101d6c:	685b      	ldr	r3, [r3, #4]
 8101d6e:	f003 0203 	and.w	r2, r3, #3
 8101d72:	69fb      	ldr	r3, [r7, #28]
 8101d74:	005b      	lsls	r3, r3, #1
 8101d76:	fa02 f303 	lsl.w	r3, r2, r3
 8101d7a:	69ba      	ldr	r2, [r7, #24]
 8101d7c:	4313      	orrs	r3, r2
 8101d7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	69ba      	ldr	r2, [r7, #24]
 8101d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101d86:	683b      	ldr	r3, [r7, #0]
 8101d88:	685b      	ldr	r3, [r3, #4]
 8101d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101d8e:	2b00      	cmp	r3, #0
 8101d90:	f000 80e0 	beq.w	8101f54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d94:	4b2f      	ldr	r3, [pc, #188]	; (8101e54 <HAL_GPIO_Init+0x238>)
 8101d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d9a:	4a2e      	ldr	r2, [pc, #184]	; (8101e54 <HAL_GPIO_Init+0x238>)
 8101d9c:	f043 0302 	orr.w	r3, r3, #2
 8101da0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101da4:	4b2b      	ldr	r3, [pc, #172]	; (8101e54 <HAL_GPIO_Init+0x238>)
 8101da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101daa:	f003 0302 	and.w	r3, r3, #2
 8101dae:	60fb      	str	r3, [r7, #12]
 8101db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101db2:	4a29      	ldr	r2, [pc, #164]	; (8101e58 <HAL_GPIO_Init+0x23c>)
 8101db4:	69fb      	ldr	r3, [r7, #28]
 8101db6:	089b      	lsrs	r3, r3, #2
 8101db8:	3302      	adds	r3, #2
 8101dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101dc0:	69fb      	ldr	r3, [r7, #28]
 8101dc2:	f003 0303 	and.w	r3, r3, #3
 8101dc6:	009b      	lsls	r3, r3, #2
 8101dc8:	220f      	movs	r2, #15
 8101dca:	fa02 f303 	lsl.w	r3, r2, r3
 8101dce:	43db      	mvns	r3, r3
 8101dd0:	69ba      	ldr	r2, [r7, #24]
 8101dd2:	4013      	ands	r3, r2
 8101dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	4a20      	ldr	r2, [pc, #128]	; (8101e5c <HAL_GPIO_Init+0x240>)
 8101dda:	4293      	cmp	r3, r2
 8101ddc:	d052      	beq.n	8101e84 <HAL_GPIO_Init+0x268>
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	4a1f      	ldr	r2, [pc, #124]	; (8101e60 <HAL_GPIO_Init+0x244>)
 8101de2:	4293      	cmp	r3, r2
 8101de4:	d031      	beq.n	8101e4a <HAL_GPIO_Init+0x22e>
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	4a1e      	ldr	r2, [pc, #120]	; (8101e64 <HAL_GPIO_Init+0x248>)
 8101dea:	4293      	cmp	r3, r2
 8101dec:	d02b      	beq.n	8101e46 <HAL_GPIO_Init+0x22a>
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	4a1d      	ldr	r2, [pc, #116]	; (8101e68 <HAL_GPIO_Init+0x24c>)
 8101df2:	4293      	cmp	r3, r2
 8101df4:	d025      	beq.n	8101e42 <HAL_GPIO_Init+0x226>
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	4a1c      	ldr	r2, [pc, #112]	; (8101e6c <HAL_GPIO_Init+0x250>)
 8101dfa:	4293      	cmp	r3, r2
 8101dfc:	d01f      	beq.n	8101e3e <HAL_GPIO_Init+0x222>
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	4a1b      	ldr	r2, [pc, #108]	; (8101e70 <HAL_GPIO_Init+0x254>)
 8101e02:	4293      	cmp	r3, r2
 8101e04:	d019      	beq.n	8101e3a <HAL_GPIO_Init+0x21e>
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	4a1a      	ldr	r2, [pc, #104]	; (8101e74 <HAL_GPIO_Init+0x258>)
 8101e0a:	4293      	cmp	r3, r2
 8101e0c:	d013      	beq.n	8101e36 <HAL_GPIO_Init+0x21a>
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	4a19      	ldr	r2, [pc, #100]	; (8101e78 <HAL_GPIO_Init+0x25c>)
 8101e12:	4293      	cmp	r3, r2
 8101e14:	d00d      	beq.n	8101e32 <HAL_GPIO_Init+0x216>
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	4a18      	ldr	r2, [pc, #96]	; (8101e7c <HAL_GPIO_Init+0x260>)
 8101e1a:	4293      	cmp	r3, r2
 8101e1c:	d007      	beq.n	8101e2e <HAL_GPIO_Init+0x212>
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	4a17      	ldr	r2, [pc, #92]	; (8101e80 <HAL_GPIO_Init+0x264>)
 8101e22:	4293      	cmp	r3, r2
 8101e24:	d101      	bne.n	8101e2a <HAL_GPIO_Init+0x20e>
 8101e26:	2309      	movs	r3, #9
 8101e28:	e02d      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e2a:	230a      	movs	r3, #10
 8101e2c:	e02b      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e2e:	2308      	movs	r3, #8
 8101e30:	e029      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e32:	2307      	movs	r3, #7
 8101e34:	e027      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e36:	2306      	movs	r3, #6
 8101e38:	e025      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e3a:	2305      	movs	r3, #5
 8101e3c:	e023      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e3e:	2304      	movs	r3, #4
 8101e40:	e021      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e42:	2303      	movs	r3, #3
 8101e44:	e01f      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e46:	2302      	movs	r3, #2
 8101e48:	e01d      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e4a:	2301      	movs	r3, #1
 8101e4c:	e01b      	b.n	8101e86 <HAL_GPIO_Init+0x26a>
 8101e4e:	bf00      	nop
 8101e50:	580000c0 	.word	0x580000c0
 8101e54:	58024400 	.word	0x58024400
 8101e58:	58000400 	.word	0x58000400
 8101e5c:	58020000 	.word	0x58020000
 8101e60:	58020400 	.word	0x58020400
 8101e64:	58020800 	.word	0x58020800
 8101e68:	58020c00 	.word	0x58020c00
 8101e6c:	58021000 	.word	0x58021000
 8101e70:	58021400 	.word	0x58021400
 8101e74:	58021800 	.word	0x58021800
 8101e78:	58021c00 	.word	0x58021c00
 8101e7c:	58022000 	.word	0x58022000
 8101e80:	58022400 	.word	0x58022400
 8101e84:	2300      	movs	r3, #0
 8101e86:	69fa      	ldr	r2, [r7, #28]
 8101e88:	f002 0203 	and.w	r2, r2, #3
 8101e8c:	0092      	lsls	r2, r2, #2
 8101e8e:	4093      	lsls	r3, r2
 8101e90:	69ba      	ldr	r2, [r7, #24]
 8101e92:	4313      	orrs	r3, r2
 8101e94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101e96:	4938      	ldr	r1, [pc, #224]	; (8101f78 <HAL_GPIO_Init+0x35c>)
 8101e98:	69fb      	ldr	r3, [r7, #28]
 8101e9a:	089b      	lsrs	r3, r3, #2
 8101e9c:	3302      	adds	r3, #2
 8101e9e:	69ba      	ldr	r2, [r7, #24]
 8101ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101ea4:	697b      	ldr	r3, [r7, #20]
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101eaa:	693b      	ldr	r3, [r7, #16]
 8101eac:	43db      	mvns	r3, r3
 8101eae:	69ba      	ldr	r2, [r7, #24]
 8101eb0:	4013      	ands	r3, r2
 8101eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101eb4:	683b      	ldr	r3, [r7, #0]
 8101eb6:	685b      	ldr	r3, [r3, #4]
 8101eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d003      	beq.n	8101ec8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101ec0:	69ba      	ldr	r2, [r7, #24]
 8101ec2:	693b      	ldr	r3, [r7, #16]
 8101ec4:	4313      	orrs	r3, r2
 8101ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101ec8:	697b      	ldr	r3, [r7, #20]
 8101eca:	69ba      	ldr	r2, [r7, #24]
 8101ecc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101ece:	697b      	ldr	r3, [r7, #20]
 8101ed0:	685b      	ldr	r3, [r3, #4]
 8101ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ed4:	693b      	ldr	r3, [r7, #16]
 8101ed6:	43db      	mvns	r3, r3
 8101ed8:	69ba      	ldr	r2, [r7, #24]
 8101eda:	4013      	ands	r3, r2
 8101edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101ede:	683b      	ldr	r3, [r7, #0]
 8101ee0:	685b      	ldr	r3, [r3, #4]
 8101ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101ee6:	2b00      	cmp	r3, #0
 8101ee8:	d003      	beq.n	8101ef2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101eea:	69ba      	ldr	r2, [r7, #24]
 8101eec:	693b      	ldr	r3, [r7, #16]
 8101eee:	4313      	orrs	r3, r2
 8101ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101ef2:	697b      	ldr	r3, [r7, #20]
 8101ef4:	69ba      	ldr	r2, [r7, #24]
 8101ef6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101f00:	693b      	ldr	r3, [r7, #16]
 8101f02:	43db      	mvns	r3, r3
 8101f04:	69ba      	ldr	r2, [r7, #24]
 8101f06:	4013      	ands	r3, r2
 8101f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101f0a:	683b      	ldr	r3, [r7, #0]
 8101f0c:	685b      	ldr	r3, [r3, #4]
 8101f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d003      	beq.n	8101f1e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101f16:	69ba      	ldr	r2, [r7, #24]
 8101f18:	693b      	ldr	r3, [r7, #16]
 8101f1a:	4313      	orrs	r3, r2
 8101f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101f22:	69bb      	ldr	r3, [r7, #24]
 8101f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101f2a:	685b      	ldr	r3, [r3, #4]
 8101f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101f2e:	693b      	ldr	r3, [r7, #16]
 8101f30:	43db      	mvns	r3, r3
 8101f32:	69ba      	ldr	r2, [r7, #24]
 8101f34:	4013      	ands	r3, r2
 8101f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101f38:	683b      	ldr	r3, [r7, #0]
 8101f3a:	685b      	ldr	r3, [r3, #4]
 8101f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101f40:	2b00      	cmp	r3, #0
 8101f42:	d003      	beq.n	8101f4c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101f44:	69ba      	ldr	r2, [r7, #24]
 8101f46:	693b      	ldr	r3, [r7, #16]
 8101f48:	4313      	orrs	r3, r2
 8101f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101f50:	69bb      	ldr	r3, [r7, #24]
 8101f52:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101f54:	69fb      	ldr	r3, [r7, #28]
 8101f56:	3301      	adds	r3, #1
 8101f58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f5a:	683b      	ldr	r3, [r7, #0]
 8101f5c:	681a      	ldr	r2, [r3, #0]
 8101f5e:	69fb      	ldr	r3, [r7, #28]
 8101f60:	fa22 f303 	lsr.w	r3, r2, r3
 8101f64:	2b00      	cmp	r3, #0
 8101f66:	f47f ae63 	bne.w	8101c30 <HAL_GPIO_Init+0x14>
  }
}
 8101f6a:	bf00      	nop
 8101f6c:	bf00      	nop
 8101f6e:	3724      	adds	r7, #36	; 0x24
 8101f70:	46bd      	mov	sp, r7
 8101f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f76:	4770      	bx	lr
 8101f78:	58000400 	.word	0x58000400

08101f7c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8101f7c:	b480      	push	{r7}
 8101f7e:	b083      	sub	sp, #12
 8101f80:	af00      	add	r7, sp, #0
 8101f82:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101f84:	4a08      	ldr	r2, [pc, #32]	; (8101fa8 <HAL_HSEM_FastTake+0x2c>)
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	3320      	adds	r3, #32
 8101f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101f8e:	4a07      	ldr	r2, [pc, #28]	; (8101fac <HAL_HSEM_FastTake+0x30>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d101      	bne.n	8101f98 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101f94:	2300      	movs	r3, #0
 8101f96:	e000      	b.n	8101f9a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101f98:	2301      	movs	r3, #1
}
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	370c      	adds	r7, #12
 8101f9e:	46bd      	mov	sp, r7
 8101fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa4:	4770      	bx	lr
 8101fa6:	bf00      	nop
 8101fa8:	58026400 	.word	0x58026400
 8101fac:	80000100 	.word	0x80000100

08101fb0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101fb0:	b480      	push	{r7}
 8101fb2:	b083      	sub	sp, #12
 8101fb4:	af00      	add	r7, sp, #0
 8101fb6:	6078      	str	r0, [r7, #4]
 8101fb8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101fba:	4906      	ldr	r1, [pc, #24]	; (8101fd4 <HAL_HSEM_Release+0x24>)
 8101fbc:	683b      	ldr	r3, [r7, #0]
 8101fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101fc8:	bf00      	nop
 8101fca:	370c      	adds	r7, #12
 8101fcc:	46bd      	mov	sp, r7
 8101fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fd2:	4770      	bx	lr
 8101fd4:	58026400 	.word	0x58026400

08101fd8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101fd8:	b480      	push	{r7}
 8101fda:	b083      	sub	sp, #12
 8101fdc:	af00      	add	r7, sp, #0
 8101fde:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101fe0:	4b05      	ldr	r3, [pc, #20]	; (8101ff8 <HAL_HSEM_ActivateNotification+0x20>)
 8101fe2:	681a      	ldr	r2, [r3, #0]
 8101fe4:	4904      	ldr	r1, [pc, #16]	; (8101ff8 <HAL_HSEM_ActivateNotification+0x20>)
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	4313      	orrs	r3, r2
 8101fea:	600b      	str	r3, [r1, #0]
#endif
}
 8101fec:	bf00      	nop
 8101fee:	370c      	adds	r7, #12
 8101ff0:	46bd      	mov	sp, r7
 8101ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff6:	4770      	bx	lr
 8101ff8:	58026510 	.word	0x58026510

08101ffc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101ffc:	b580      	push	{r7, lr}
 8101ffe:	b082      	sub	sp, #8
 8102000:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8102002:	4b0a      	ldr	r3, [pc, #40]	; (810202c <HAL_HSEM_IRQHandler+0x30>)
 8102004:	68db      	ldr	r3, [r3, #12]
 8102006:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8102008:	4b08      	ldr	r3, [pc, #32]	; (810202c <HAL_HSEM_IRQHandler+0x30>)
 810200a:	681a      	ldr	r2, [r3, #0]
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	43db      	mvns	r3, r3
 8102010:	4906      	ldr	r1, [pc, #24]	; (810202c <HAL_HSEM_IRQHandler+0x30>)
 8102012:	4013      	ands	r3, r2
 8102014:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8102016:	4a05      	ldr	r2, [pc, #20]	; (810202c <HAL_HSEM_IRQHandler+0x30>)
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810201c:	6878      	ldr	r0, [r7, #4]
 810201e:	f004 ff21 	bl	8106e64 <HAL_HSEM_FreeCallback>
}
 8102022:	bf00      	nop
 8102024:	3708      	adds	r7, #8
 8102026:	46bd      	mov	sp, r7
 8102028:	bd80      	pop	{r7, pc}
 810202a:	bf00      	nop
 810202c:	58026510 	.word	0x58026510

08102030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102030:	b580      	push	{r7, lr}
 8102032:	b082      	sub	sp, #8
 8102034:	af00      	add	r7, sp, #0
 8102036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	2b00      	cmp	r3, #0
 810203c:	d101      	bne.n	8102042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810203e:	2301      	movs	r3, #1
 8102040:	e081      	b.n	8102146 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102048:	b2db      	uxtb	r3, r3
 810204a:	2b00      	cmp	r3, #0
 810204c:	d106      	bne.n	810205c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	2200      	movs	r2, #0
 8102052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102056:	6878      	ldr	r0, [r7, #4]
 8102058:	f7fe ffba 	bl	8100fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	2224      	movs	r2, #36	; 0x24
 8102060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	681b      	ldr	r3, [r3, #0]
 8102068:	681a      	ldr	r2, [r3, #0]
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	f022 0201 	bic.w	r2, r2, #1
 8102072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	685a      	ldr	r2, [r3, #4]
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	681b      	ldr	r3, [r3, #0]
 8102086:	689a      	ldr	r2, [r3, #8]
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	68db      	ldr	r3, [r3, #12]
 8102096:	2b01      	cmp	r3, #1
 8102098:	d107      	bne.n	81020aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	689a      	ldr	r2, [r3, #8]
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81020a6:	609a      	str	r2, [r3, #8]
 81020a8:	e006      	b.n	81020b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	689a      	ldr	r2, [r3, #8]
 81020ae:	687b      	ldr	r3, [r7, #4]
 81020b0:	681b      	ldr	r3, [r3, #0]
 81020b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81020b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	68db      	ldr	r3, [r3, #12]
 81020bc:	2b02      	cmp	r3, #2
 81020be:	d104      	bne.n	81020ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81020c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	685b      	ldr	r3, [r3, #4]
 81020d0:	687a      	ldr	r2, [r7, #4]
 81020d2:	6812      	ldr	r2, [r2, #0]
 81020d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81020d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81020dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	68da      	ldr	r2, [r3, #12]
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81020ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	691a      	ldr	r2, [r3, #16]
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	695b      	ldr	r3, [r3, #20]
 81020f6:	ea42 0103 	orr.w	r1, r2, r3
 81020fa:	687b      	ldr	r3, [r7, #4]
 81020fc:	699b      	ldr	r3, [r3, #24]
 81020fe:	021a      	lsls	r2, r3, #8
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	681b      	ldr	r3, [r3, #0]
 8102104:	430a      	orrs	r2, r1
 8102106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	69d9      	ldr	r1, [r3, #28]
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	6a1a      	ldr	r2, [r3, #32]
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	430a      	orrs	r2, r1
 8102116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	681b      	ldr	r3, [r3, #0]
 810211c:	681a      	ldr	r2, [r3, #0]
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	681b      	ldr	r3, [r3, #0]
 8102122:	f042 0201 	orr.w	r2, r2, #1
 8102126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	2200      	movs	r2, #0
 810212c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	2220      	movs	r2, #32
 8102132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	2200      	movs	r2, #0
 810213a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	2200      	movs	r2, #0
 8102140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102144:	2300      	movs	r3, #0
}
 8102146:	4618      	mov	r0, r3
 8102148:	3708      	adds	r7, #8
 810214a:	46bd      	mov	sp, r7
 810214c:	bd80      	pop	{r7, pc}
	...

08102150 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102150:	b580      	push	{r7, lr}
 8102152:	b088      	sub	sp, #32
 8102154:	af02      	add	r7, sp, #8
 8102156:	60f8      	str	r0, [r7, #12]
 8102158:	4608      	mov	r0, r1
 810215a:	4611      	mov	r1, r2
 810215c:	461a      	mov	r2, r3
 810215e:	4603      	mov	r3, r0
 8102160:	817b      	strh	r3, [r7, #10]
 8102162:	460b      	mov	r3, r1
 8102164:	813b      	strh	r3, [r7, #8]
 8102166:	4613      	mov	r3, r2
 8102168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810216a:	68fb      	ldr	r3, [r7, #12]
 810216c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102170:	b2db      	uxtb	r3, r3
 8102172:	2b20      	cmp	r3, #32
 8102174:	f040 80f9 	bne.w	810236a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102178:	6a3b      	ldr	r3, [r7, #32]
 810217a:	2b00      	cmp	r3, #0
 810217c:	d002      	beq.n	8102184 <HAL_I2C_Mem_Write+0x34>
 810217e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102180:	2b00      	cmp	r3, #0
 8102182:	d105      	bne.n	8102190 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102184:	68fb      	ldr	r3, [r7, #12]
 8102186:	f44f 7200 	mov.w	r2, #512	; 0x200
 810218a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810218c:	2301      	movs	r3, #1
 810218e:	e0ed      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102190:	68fb      	ldr	r3, [r7, #12]
 8102192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102196:	2b01      	cmp	r3, #1
 8102198:	d101      	bne.n	810219e <HAL_I2C_Mem_Write+0x4e>
 810219a:	2302      	movs	r3, #2
 810219c:	e0e6      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
 810219e:	68fb      	ldr	r3, [r7, #12]
 81021a0:	2201      	movs	r2, #1
 81021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81021a6:	f7ff fbb9 	bl	810191c <HAL_GetTick>
 81021aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81021ac:	697b      	ldr	r3, [r7, #20]
 81021ae:	9300      	str	r3, [sp, #0]
 81021b0:	2319      	movs	r3, #25
 81021b2:	2201      	movs	r2, #1
 81021b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81021b8:	68f8      	ldr	r0, [r7, #12]
 81021ba:	f000 fadd 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 81021be:	4603      	mov	r3, r0
 81021c0:	2b00      	cmp	r3, #0
 81021c2:	d001      	beq.n	81021c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81021c4:	2301      	movs	r3, #1
 81021c6:	e0d1      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	2221      	movs	r2, #33	; 0x21
 81021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81021d0:	68fb      	ldr	r3, [r7, #12]
 81021d2:	2240      	movs	r2, #64	; 0x40
 81021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81021d8:	68fb      	ldr	r3, [r7, #12]
 81021da:	2200      	movs	r2, #0
 81021dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81021de:	68fb      	ldr	r3, [r7, #12]
 81021e0:	6a3a      	ldr	r2, [r7, #32]
 81021e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81021e4:	68fb      	ldr	r3, [r7, #12]
 81021e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81021ea:	68fb      	ldr	r3, [r7, #12]
 81021ec:	2200      	movs	r2, #0
 81021ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81021f0:	88f8      	ldrh	r0, [r7, #6]
 81021f2:	893a      	ldrh	r2, [r7, #8]
 81021f4:	8979      	ldrh	r1, [r7, #10]
 81021f6:	697b      	ldr	r3, [r7, #20]
 81021f8:	9301      	str	r3, [sp, #4]
 81021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81021fc:	9300      	str	r3, [sp, #0]
 81021fe:	4603      	mov	r3, r0
 8102200:	68f8      	ldr	r0, [r7, #12]
 8102202:	f000 f9ed 	bl	81025e0 <I2C_RequestMemoryWrite>
 8102206:	4603      	mov	r3, r0
 8102208:	2b00      	cmp	r3, #0
 810220a:	d005      	beq.n	8102218 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810220c:	68fb      	ldr	r3, [r7, #12]
 810220e:	2200      	movs	r2, #0
 8102210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102214:	2301      	movs	r3, #1
 8102216:	e0a9      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102218:	68fb      	ldr	r3, [r7, #12]
 810221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810221c:	b29b      	uxth	r3, r3
 810221e:	2bff      	cmp	r3, #255	; 0xff
 8102220:	d90e      	bls.n	8102240 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102222:	68fb      	ldr	r3, [r7, #12]
 8102224:	22ff      	movs	r2, #255	; 0xff
 8102226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102228:	68fb      	ldr	r3, [r7, #12]
 810222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810222c:	b2da      	uxtb	r2, r3
 810222e:	8979      	ldrh	r1, [r7, #10]
 8102230:	2300      	movs	r3, #0
 8102232:	9300      	str	r3, [sp, #0]
 8102234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102238:	68f8      	ldr	r0, [r7, #12]
 810223a:	f000 fbbf 	bl	81029bc <I2C_TransferConfig>
 810223e:	e00f      	b.n	8102260 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102240:	68fb      	ldr	r3, [r7, #12]
 8102242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102244:	b29a      	uxth	r2, r3
 8102246:	68fb      	ldr	r3, [r7, #12]
 8102248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810224a:	68fb      	ldr	r3, [r7, #12]
 810224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810224e:	b2da      	uxtb	r2, r3
 8102250:	8979      	ldrh	r1, [r7, #10]
 8102252:	2300      	movs	r3, #0
 8102254:	9300      	str	r3, [sp, #0]
 8102256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810225a:	68f8      	ldr	r0, [r7, #12]
 810225c:	f000 fbae 	bl	81029bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102260:	697a      	ldr	r2, [r7, #20]
 8102262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102264:	68f8      	ldr	r0, [r7, #12]
 8102266:	f000 fac7 	bl	81027f8 <I2C_WaitOnTXISFlagUntilTimeout>
 810226a:	4603      	mov	r3, r0
 810226c:	2b00      	cmp	r3, #0
 810226e:	d001      	beq.n	8102274 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102270:	2301      	movs	r3, #1
 8102272:	e07b      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102274:	68fb      	ldr	r3, [r7, #12]
 8102276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102278:	781a      	ldrb	r2, [r3, #0]
 810227a:	68fb      	ldr	r3, [r7, #12]
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102280:	68fb      	ldr	r3, [r7, #12]
 8102282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102284:	1c5a      	adds	r2, r3, #1
 8102286:	68fb      	ldr	r3, [r7, #12]
 8102288:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810228a:	68fb      	ldr	r3, [r7, #12]
 810228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810228e:	b29b      	uxth	r3, r3
 8102290:	3b01      	subs	r3, #1
 8102292:	b29a      	uxth	r2, r3
 8102294:	68fb      	ldr	r3, [r7, #12]
 8102296:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102298:	68fb      	ldr	r3, [r7, #12]
 810229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810229c:	3b01      	subs	r3, #1
 810229e:	b29a      	uxth	r2, r3
 81022a0:	68fb      	ldr	r3, [r7, #12]
 81022a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81022a4:	68fb      	ldr	r3, [r7, #12]
 81022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81022a8:	b29b      	uxth	r3, r3
 81022aa:	2b00      	cmp	r3, #0
 81022ac:	d034      	beq.n	8102318 <HAL_I2C_Mem_Write+0x1c8>
 81022ae:	68fb      	ldr	r3, [r7, #12]
 81022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81022b2:	2b00      	cmp	r3, #0
 81022b4:	d130      	bne.n	8102318 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81022b6:	697b      	ldr	r3, [r7, #20]
 81022b8:	9300      	str	r3, [sp, #0]
 81022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022bc:	2200      	movs	r2, #0
 81022be:	2180      	movs	r1, #128	; 0x80
 81022c0:	68f8      	ldr	r0, [r7, #12]
 81022c2:	f000 fa59 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 81022c6:	4603      	mov	r3, r0
 81022c8:	2b00      	cmp	r3, #0
 81022ca:	d001      	beq.n	81022d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81022cc:	2301      	movs	r3, #1
 81022ce:	e04d      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81022d0:	68fb      	ldr	r3, [r7, #12]
 81022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81022d4:	b29b      	uxth	r3, r3
 81022d6:	2bff      	cmp	r3, #255	; 0xff
 81022d8:	d90e      	bls.n	81022f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81022da:	68fb      	ldr	r3, [r7, #12]
 81022dc:	22ff      	movs	r2, #255	; 0xff
 81022de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81022e0:	68fb      	ldr	r3, [r7, #12]
 81022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81022e4:	b2da      	uxtb	r2, r3
 81022e6:	8979      	ldrh	r1, [r7, #10]
 81022e8:	2300      	movs	r3, #0
 81022ea:	9300      	str	r3, [sp, #0]
 81022ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81022f0:	68f8      	ldr	r0, [r7, #12]
 81022f2:	f000 fb63 	bl	81029bc <I2C_TransferConfig>
 81022f6:	e00f      	b.n	8102318 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81022f8:	68fb      	ldr	r3, [r7, #12]
 81022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81022fc:	b29a      	uxth	r2, r3
 81022fe:	68fb      	ldr	r3, [r7, #12]
 8102300:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102302:	68fb      	ldr	r3, [r7, #12]
 8102304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102306:	b2da      	uxtb	r2, r3
 8102308:	8979      	ldrh	r1, [r7, #10]
 810230a:	2300      	movs	r3, #0
 810230c:	9300      	str	r3, [sp, #0]
 810230e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102312:	68f8      	ldr	r0, [r7, #12]
 8102314:	f000 fb52 	bl	81029bc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8102318:	68fb      	ldr	r3, [r7, #12]
 810231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810231c:	b29b      	uxth	r3, r3
 810231e:	2b00      	cmp	r3, #0
 8102320:	d19e      	bne.n	8102260 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102322:	697a      	ldr	r2, [r7, #20]
 8102324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102326:	68f8      	ldr	r0, [r7, #12]
 8102328:	f000 faa6 	bl	8102878 <I2C_WaitOnSTOPFlagUntilTimeout>
 810232c:	4603      	mov	r3, r0
 810232e:	2b00      	cmp	r3, #0
 8102330:	d001      	beq.n	8102336 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102332:	2301      	movs	r3, #1
 8102334:	e01a      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102336:	68fb      	ldr	r3, [r7, #12]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	2220      	movs	r2, #32
 810233c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810233e:	68fb      	ldr	r3, [r7, #12]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	6859      	ldr	r1, [r3, #4]
 8102344:	68fb      	ldr	r3, [r7, #12]
 8102346:	681a      	ldr	r2, [r3, #0]
 8102348:	4b0a      	ldr	r3, [pc, #40]	; (8102374 <HAL_I2C_Mem_Write+0x224>)
 810234a:	400b      	ands	r3, r1
 810234c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810234e:	68fb      	ldr	r3, [r7, #12]
 8102350:	2220      	movs	r2, #32
 8102352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102356:	68fb      	ldr	r3, [r7, #12]
 8102358:	2200      	movs	r2, #0
 810235a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810235e:	68fb      	ldr	r3, [r7, #12]
 8102360:	2200      	movs	r2, #0
 8102362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102366:	2300      	movs	r3, #0
 8102368:	e000      	b.n	810236c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810236a:	2302      	movs	r3, #2
  }
}
 810236c:	4618      	mov	r0, r3
 810236e:	3718      	adds	r7, #24
 8102370:	46bd      	mov	sp, r7
 8102372:	bd80      	pop	{r7, pc}
 8102374:	fe00e800 	.word	0xfe00e800

08102378 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102378:	b580      	push	{r7, lr}
 810237a:	b088      	sub	sp, #32
 810237c:	af02      	add	r7, sp, #8
 810237e:	60f8      	str	r0, [r7, #12]
 8102380:	4608      	mov	r0, r1
 8102382:	4611      	mov	r1, r2
 8102384:	461a      	mov	r2, r3
 8102386:	4603      	mov	r3, r0
 8102388:	817b      	strh	r3, [r7, #10]
 810238a:	460b      	mov	r3, r1
 810238c:	813b      	strh	r3, [r7, #8]
 810238e:	4613      	mov	r3, r2
 8102390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102392:	68fb      	ldr	r3, [r7, #12]
 8102394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102398:	b2db      	uxtb	r3, r3
 810239a:	2b20      	cmp	r3, #32
 810239c:	f040 80fd 	bne.w	810259a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81023a0:	6a3b      	ldr	r3, [r7, #32]
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	d002      	beq.n	81023ac <HAL_I2C_Mem_Read+0x34>
 81023a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81023a8:	2b00      	cmp	r3, #0
 81023aa:	d105      	bne.n	81023b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81023ac:	68fb      	ldr	r3, [r7, #12]
 81023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 81023b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81023b4:	2301      	movs	r3, #1
 81023b6:	e0f1      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81023b8:	68fb      	ldr	r3, [r7, #12]
 81023ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81023be:	2b01      	cmp	r3, #1
 81023c0:	d101      	bne.n	81023c6 <HAL_I2C_Mem_Read+0x4e>
 81023c2:	2302      	movs	r3, #2
 81023c4:	e0ea      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
 81023c6:	68fb      	ldr	r3, [r7, #12]
 81023c8:	2201      	movs	r2, #1
 81023ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81023ce:	f7ff faa5 	bl	810191c <HAL_GetTick>
 81023d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81023d4:	697b      	ldr	r3, [r7, #20]
 81023d6:	9300      	str	r3, [sp, #0]
 81023d8:	2319      	movs	r3, #25
 81023da:	2201      	movs	r2, #1
 81023dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81023e0:	68f8      	ldr	r0, [r7, #12]
 81023e2:	f000 f9c9 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 81023e6:	4603      	mov	r3, r0
 81023e8:	2b00      	cmp	r3, #0
 81023ea:	d001      	beq.n	81023f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81023ec:	2301      	movs	r3, #1
 81023ee:	e0d5      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	2222      	movs	r2, #34	; 0x22
 81023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81023f8:	68fb      	ldr	r3, [r7, #12]
 81023fa:	2240      	movs	r2, #64	; 0x40
 81023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102400:	68fb      	ldr	r3, [r7, #12]
 8102402:	2200      	movs	r2, #0
 8102404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	6a3a      	ldr	r2, [r7, #32]
 810240a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810240c:	68fb      	ldr	r3, [r7, #12]
 810240e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102412:	68fb      	ldr	r3, [r7, #12]
 8102414:	2200      	movs	r2, #0
 8102416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102418:	88f8      	ldrh	r0, [r7, #6]
 810241a:	893a      	ldrh	r2, [r7, #8]
 810241c:	8979      	ldrh	r1, [r7, #10]
 810241e:	697b      	ldr	r3, [r7, #20]
 8102420:	9301      	str	r3, [sp, #4]
 8102422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102424:	9300      	str	r3, [sp, #0]
 8102426:	4603      	mov	r3, r0
 8102428:	68f8      	ldr	r0, [r7, #12]
 810242a:	f000 f92d 	bl	8102688 <I2C_RequestMemoryRead>
 810242e:	4603      	mov	r3, r0
 8102430:	2b00      	cmp	r3, #0
 8102432:	d005      	beq.n	8102440 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102434:	68fb      	ldr	r3, [r7, #12]
 8102436:	2200      	movs	r2, #0
 8102438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810243c:	2301      	movs	r3, #1
 810243e:	e0ad      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102440:	68fb      	ldr	r3, [r7, #12]
 8102442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102444:	b29b      	uxth	r3, r3
 8102446:	2bff      	cmp	r3, #255	; 0xff
 8102448:	d90e      	bls.n	8102468 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810244a:	68fb      	ldr	r3, [r7, #12]
 810244c:	22ff      	movs	r2, #255	; 0xff
 810244e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8102450:	68fb      	ldr	r3, [r7, #12]
 8102452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102454:	b2da      	uxtb	r2, r3
 8102456:	8979      	ldrh	r1, [r7, #10]
 8102458:	4b52      	ldr	r3, [pc, #328]	; (81025a4 <HAL_I2C_Mem_Read+0x22c>)
 810245a:	9300      	str	r3, [sp, #0]
 810245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102460:	68f8      	ldr	r0, [r7, #12]
 8102462:	f000 faab 	bl	81029bc <I2C_TransferConfig>
 8102466:	e00f      	b.n	8102488 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102468:	68fb      	ldr	r3, [r7, #12]
 810246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810246c:	b29a      	uxth	r2, r3
 810246e:	68fb      	ldr	r3, [r7, #12]
 8102470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8102472:	68fb      	ldr	r3, [r7, #12]
 8102474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102476:	b2da      	uxtb	r2, r3
 8102478:	8979      	ldrh	r1, [r7, #10]
 810247a:	4b4a      	ldr	r3, [pc, #296]	; (81025a4 <HAL_I2C_Mem_Read+0x22c>)
 810247c:	9300      	str	r3, [sp, #0]
 810247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102482:	68f8      	ldr	r0, [r7, #12]
 8102484:	f000 fa9a 	bl	81029bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102488:	697b      	ldr	r3, [r7, #20]
 810248a:	9300      	str	r3, [sp, #0]
 810248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810248e:	2200      	movs	r2, #0
 8102490:	2104      	movs	r1, #4
 8102492:	68f8      	ldr	r0, [r7, #12]
 8102494:	f000 f970 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 8102498:	4603      	mov	r3, r0
 810249a:	2b00      	cmp	r3, #0
 810249c:	d001      	beq.n	81024a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810249e:	2301      	movs	r3, #1
 81024a0:	e07c      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81024a2:	68fb      	ldr	r3, [r7, #12]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024ac:	b2d2      	uxtb	r2, r2
 81024ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81024b0:	68fb      	ldr	r3, [r7, #12]
 81024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024b4:	1c5a      	adds	r2, r3, #1
 81024b6:	68fb      	ldr	r3, [r7, #12]
 81024b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81024ba:	68fb      	ldr	r3, [r7, #12]
 81024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024be:	3b01      	subs	r3, #1
 81024c0:	b29a      	uxth	r2, r3
 81024c2:	68fb      	ldr	r3, [r7, #12]
 81024c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81024c6:	68fb      	ldr	r3, [r7, #12]
 81024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024ca:	b29b      	uxth	r3, r3
 81024cc:	3b01      	subs	r3, #1
 81024ce:	b29a      	uxth	r2, r3
 81024d0:	68fb      	ldr	r3, [r7, #12]
 81024d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81024d4:	68fb      	ldr	r3, [r7, #12]
 81024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024d8:	b29b      	uxth	r3, r3
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d034      	beq.n	8102548 <HAL_I2C_Mem_Read+0x1d0>
 81024de:	68fb      	ldr	r3, [r7, #12]
 81024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d130      	bne.n	8102548 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81024e6:	697b      	ldr	r3, [r7, #20]
 81024e8:	9300      	str	r3, [sp, #0]
 81024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024ec:	2200      	movs	r2, #0
 81024ee:	2180      	movs	r1, #128	; 0x80
 81024f0:	68f8      	ldr	r0, [r7, #12]
 81024f2:	f000 f941 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 81024f6:	4603      	mov	r3, r0
 81024f8:	2b00      	cmp	r3, #0
 81024fa:	d001      	beq.n	8102500 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81024fc:	2301      	movs	r3, #1
 81024fe:	e04d      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102500:	68fb      	ldr	r3, [r7, #12]
 8102502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102504:	b29b      	uxth	r3, r3
 8102506:	2bff      	cmp	r3, #255	; 0xff
 8102508:	d90e      	bls.n	8102528 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810250a:	68fb      	ldr	r3, [r7, #12]
 810250c:	22ff      	movs	r2, #255	; 0xff
 810250e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102514:	b2da      	uxtb	r2, r3
 8102516:	8979      	ldrh	r1, [r7, #10]
 8102518:	2300      	movs	r3, #0
 810251a:	9300      	str	r3, [sp, #0]
 810251c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102520:	68f8      	ldr	r0, [r7, #12]
 8102522:	f000 fa4b 	bl	81029bc <I2C_TransferConfig>
 8102526:	e00f      	b.n	8102548 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102528:	68fb      	ldr	r3, [r7, #12]
 810252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810252c:	b29a      	uxth	r2, r3
 810252e:	68fb      	ldr	r3, [r7, #12]
 8102530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102532:	68fb      	ldr	r3, [r7, #12]
 8102534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102536:	b2da      	uxtb	r2, r3
 8102538:	8979      	ldrh	r1, [r7, #10]
 810253a:	2300      	movs	r3, #0
 810253c:	9300      	str	r3, [sp, #0]
 810253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102542:	68f8      	ldr	r0, [r7, #12]
 8102544:	f000 fa3a 	bl	81029bc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810254c:	b29b      	uxth	r3, r3
 810254e:	2b00      	cmp	r3, #0
 8102550:	d19a      	bne.n	8102488 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102552:	697a      	ldr	r2, [r7, #20]
 8102554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102556:	68f8      	ldr	r0, [r7, #12]
 8102558:	f000 f98e 	bl	8102878 <I2C_WaitOnSTOPFlagUntilTimeout>
 810255c:	4603      	mov	r3, r0
 810255e:	2b00      	cmp	r3, #0
 8102560:	d001      	beq.n	8102566 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102562:	2301      	movs	r3, #1
 8102564:	e01a      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102566:	68fb      	ldr	r3, [r7, #12]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	2220      	movs	r2, #32
 810256c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	681b      	ldr	r3, [r3, #0]
 8102572:	6859      	ldr	r1, [r3, #4]
 8102574:	68fb      	ldr	r3, [r7, #12]
 8102576:	681a      	ldr	r2, [r3, #0]
 8102578:	4b0b      	ldr	r3, [pc, #44]	; (81025a8 <HAL_I2C_Mem_Read+0x230>)
 810257a:	400b      	ands	r3, r1
 810257c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810257e:	68fb      	ldr	r3, [r7, #12]
 8102580:	2220      	movs	r2, #32
 8102582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102586:	68fb      	ldr	r3, [r7, #12]
 8102588:	2200      	movs	r2, #0
 810258a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810258e:	68fb      	ldr	r3, [r7, #12]
 8102590:	2200      	movs	r2, #0
 8102592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102596:	2300      	movs	r3, #0
 8102598:	e000      	b.n	810259c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810259a:	2302      	movs	r3, #2
  }
}
 810259c:	4618      	mov	r0, r3
 810259e:	3718      	adds	r7, #24
 81025a0:	46bd      	mov	sp, r7
 81025a2:	bd80      	pop	{r7, pc}
 81025a4:	80002400 	.word	0x80002400
 81025a8:	fe00e800 	.word	0xfe00e800

081025ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81025ac:	b580      	push	{r7, lr}
 81025ae:	b084      	sub	sp, #16
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	699b      	ldr	r3, [r3, #24]
 81025ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	681b      	ldr	r3, [r3, #0]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d005      	beq.n	81025d8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81025d0:	68ba      	ldr	r2, [r7, #8]
 81025d2:	68f9      	ldr	r1, [r7, #12]
 81025d4:	6878      	ldr	r0, [r7, #4]
 81025d6:	4798      	blx	r3
  }
}
 81025d8:	bf00      	nop
 81025da:	3710      	adds	r7, #16
 81025dc:	46bd      	mov	sp, r7
 81025de:	bd80      	pop	{r7, pc}

081025e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81025e0:	b580      	push	{r7, lr}
 81025e2:	b086      	sub	sp, #24
 81025e4:	af02      	add	r7, sp, #8
 81025e6:	60f8      	str	r0, [r7, #12]
 81025e8:	4608      	mov	r0, r1
 81025ea:	4611      	mov	r1, r2
 81025ec:	461a      	mov	r2, r3
 81025ee:	4603      	mov	r3, r0
 81025f0:	817b      	strh	r3, [r7, #10]
 81025f2:	460b      	mov	r3, r1
 81025f4:	813b      	strh	r3, [r7, #8]
 81025f6:	4613      	mov	r3, r2
 81025f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81025fa:	88fb      	ldrh	r3, [r7, #6]
 81025fc:	b2da      	uxtb	r2, r3
 81025fe:	8979      	ldrh	r1, [r7, #10]
 8102600:	4b20      	ldr	r3, [pc, #128]	; (8102684 <I2C_RequestMemoryWrite+0xa4>)
 8102602:	9300      	str	r3, [sp, #0]
 8102604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102608:	68f8      	ldr	r0, [r7, #12]
 810260a:	f000 f9d7 	bl	81029bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810260e:	69fa      	ldr	r2, [r7, #28]
 8102610:	69b9      	ldr	r1, [r7, #24]
 8102612:	68f8      	ldr	r0, [r7, #12]
 8102614:	f000 f8f0 	bl	81027f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8102618:	4603      	mov	r3, r0
 810261a:	2b00      	cmp	r3, #0
 810261c:	d001      	beq.n	8102622 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810261e:	2301      	movs	r3, #1
 8102620:	e02c      	b.n	810267c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102622:	88fb      	ldrh	r3, [r7, #6]
 8102624:	2b01      	cmp	r3, #1
 8102626:	d105      	bne.n	8102634 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102628:	893b      	ldrh	r3, [r7, #8]
 810262a:	b2da      	uxtb	r2, r3
 810262c:	68fb      	ldr	r3, [r7, #12]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	629a      	str	r2, [r3, #40]	; 0x28
 8102632:	e015      	b.n	8102660 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102634:	893b      	ldrh	r3, [r7, #8]
 8102636:	0a1b      	lsrs	r3, r3, #8
 8102638:	b29b      	uxth	r3, r3
 810263a:	b2da      	uxtb	r2, r3
 810263c:	68fb      	ldr	r3, [r7, #12]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102642:	69fa      	ldr	r2, [r7, #28]
 8102644:	69b9      	ldr	r1, [r7, #24]
 8102646:	68f8      	ldr	r0, [r7, #12]
 8102648:	f000 f8d6 	bl	81027f8 <I2C_WaitOnTXISFlagUntilTimeout>
 810264c:	4603      	mov	r3, r0
 810264e:	2b00      	cmp	r3, #0
 8102650:	d001      	beq.n	8102656 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102652:	2301      	movs	r3, #1
 8102654:	e012      	b.n	810267c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102656:	893b      	ldrh	r3, [r7, #8]
 8102658:	b2da      	uxtb	r2, r3
 810265a:	68fb      	ldr	r3, [r7, #12]
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102660:	69fb      	ldr	r3, [r7, #28]
 8102662:	9300      	str	r3, [sp, #0]
 8102664:	69bb      	ldr	r3, [r7, #24]
 8102666:	2200      	movs	r2, #0
 8102668:	2180      	movs	r1, #128	; 0x80
 810266a:	68f8      	ldr	r0, [r7, #12]
 810266c:	f000 f884 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 8102670:	4603      	mov	r3, r0
 8102672:	2b00      	cmp	r3, #0
 8102674:	d001      	beq.n	810267a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102676:	2301      	movs	r3, #1
 8102678:	e000      	b.n	810267c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810267a:	2300      	movs	r3, #0
}
 810267c:	4618      	mov	r0, r3
 810267e:	3710      	adds	r7, #16
 8102680:	46bd      	mov	sp, r7
 8102682:	bd80      	pop	{r7, pc}
 8102684:	80002000 	.word	0x80002000

08102688 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102688:	b580      	push	{r7, lr}
 810268a:	b086      	sub	sp, #24
 810268c:	af02      	add	r7, sp, #8
 810268e:	60f8      	str	r0, [r7, #12]
 8102690:	4608      	mov	r0, r1
 8102692:	4611      	mov	r1, r2
 8102694:	461a      	mov	r2, r3
 8102696:	4603      	mov	r3, r0
 8102698:	817b      	strh	r3, [r7, #10]
 810269a:	460b      	mov	r3, r1
 810269c:	813b      	strh	r3, [r7, #8]
 810269e:	4613      	mov	r3, r2
 81026a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81026a2:	88fb      	ldrh	r3, [r7, #6]
 81026a4:	b2da      	uxtb	r2, r3
 81026a6:	8979      	ldrh	r1, [r7, #10]
 81026a8:	4b20      	ldr	r3, [pc, #128]	; (810272c <I2C_RequestMemoryRead+0xa4>)
 81026aa:	9300      	str	r3, [sp, #0]
 81026ac:	2300      	movs	r3, #0
 81026ae:	68f8      	ldr	r0, [r7, #12]
 81026b0:	f000 f984 	bl	81029bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81026b4:	69fa      	ldr	r2, [r7, #28]
 81026b6:	69b9      	ldr	r1, [r7, #24]
 81026b8:	68f8      	ldr	r0, [r7, #12]
 81026ba:	f000 f89d 	bl	81027f8 <I2C_WaitOnTXISFlagUntilTimeout>
 81026be:	4603      	mov	r3, r0
 81026c0:	2b00      	cmp	r3, #0
 81026c2:	d001      	beq.n	81026c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81026c4:	2301      	movs	r3, #1
 81026c6:	e02c      	b.n	8102722 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81026c8:	88fb      	ldrh	r3, [r7, #6]
 81026ca:	2b01      	cmp	r3, #1
 81026cc:	d105      	bne.n	81026da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81026ce:	893b      	ldrh	r3, [r7, #8]
 81026d0:	b2da      	uxtb	r2, r3
 81026d2:	68fb      	ldr	r3, [r7, #12]
 81026d4:	681b      	ldr	r3, [r3, #0]
 81026d6:	629a      	str	r2, [r3, #40]	; 0x28
 81026d8:	e015      	b.n	8102706 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81026da:	893b      	ldrh	r3, [r7, #8]
 81026dc:	0a1b      	lsrs	r3, r3, #8
 81026de:	b29b      	uxth	r3, r3
 81026e0:	b2da      	uxtb	r2, r3
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	681b      	ldr	r3, [r3, #0]
 81026e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81026e8:	69fa      	ldr	r2, [r7, #28]
 81026ea:	69b9      	ldr	r1, [r7, #24]
 81026ec:	68f8      	ldr	r0, [r7, #12]
 81026ee:	f000 f883 	bl	81027f8 <I2C_WaitOnTXISFlagUntilTimeout>
 81026f2:	4603      	mov	r3, r0
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	d001      	beq.n	81026fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81026f8:	2301      	movs	r3, #1
 81026fa:	e012      	b.n	8102722 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81026fc:	893b      	ldrh	r3, [r7, #8]
 81026fe:	b2da      	uxtb	r2, r3
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	681b      	ldr	r3, [r3, #0]
 8102704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102706:	69fb      	ldr	r3, [r7, #28]
 8102708:	9300      	str	r3, [sp, #0]
 810270a:	69bb      	ldr	r3, [r7, #24]
 810270c:	2200      	movs	r2, #0
 810270e:	2140      	movs	r1, #64	; 0x40
 8102710:	68f8      	ldr	r0, [r7, #12]
 8102712:	f000 f831 	bl	8102778 <I2C_WaitOnFlagUntilTimeout>
 8102716:	4603      	mov	r3, r0
 8102718:	2b00      	cmp	r3, #0
 810271a:	d001      	beq.n	8102720 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810271c:	2301      	movs	r3, #1
 810271e:	e000      	b.n	8102722 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102720:	2300      	movs	r3, #0
}
 8102722:	4618      	mov	r0, r3
 8102724:	3710      	adds	r7, #16
 8102726:	46bd      	mov	sp, r7
 8102728:	bd80      	pop	{r7, pc}
 810272a:	bf00      	nop
 810272c:	80002000 	.word	0x80002000

08102730 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102730:	b480      	push	{r7}
 8102732:	b083      	sub	sp, #12
 8102734:	af00      	add	r7, sp, #0
 8102736:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	681b      	ldr	r3, [r3, #0]
 810273c:	699b      	ldr	r3, [r3, #24]
 810273e:	f003 0302 	and.w	r3, r3, #2
 8102742:	2b02      	cmp	r3, #2
 8102744:	d103      	bne.n	810274e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	2200      	movs	r2, #0
 810274c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	681b      	ldr	r3, [r3, #0]
 8102752:	699b      	ldr	r3, [r3, #24]
 8102754:	f003 0301 	and.w	r3, r3, #1
 8102758:	2b01      	cmp	r3, #1
 810275a:	d007      	beq.n	810276c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	699a      	ldr	r2, [r3, #24]
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	681b      	ldr	r3, [r3, #0]
 8102766:	f042 0201 	orr.w	r2, r2, #1
 810276a:	619a      	str	r2, [r3, #24]
  }
}
 810276c:	bf00      	nop
 810276e:	370c      	adds	r7, #12
 8102770:	46bd      	mov	sp, r7
 8102772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102776:	4770      	bx	lr

08102778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102778:	b580      	push	{r7, lr}
 810277a:	b084      	sub	sp, #16
 810277c:	af00      	add	r7, sp, #0
 810277e:	60f8      	str	r0, [r7, #12]
 8102780:	60b9      	str	r1, [r7, #8]
 8102782:	603b      	str	r3, [r7, #0]
 8102784:	4613      	mov	r3, r2
 8102786:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102788:	e022      	b.n	81027d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810278a:	683b      	ldr	r3, [r7, #0]
 810278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102790:	d01e      	beq.n	81027d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102792:	f7ff f8c3 	bl	810191c <HAL_GetTick>
 8102796:	4602      	mov	r2, r0
 8102798:	69bb      	ldr	r3, [r7, #24]
 810279a:	1ad3      	subs	r3, r2, r3
 810279c:	683a      	ldr	r2, [r7, #0]
 810279e:	429a      	cmp	r2, r3
 81027a0:	d302      	bcc.n	81027a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 81027a2:	683b      	ldr	r3, [r7, #0]
 81027a4:	2b00      	cmp	r3, #0
 81027a6:	d113      	bne.n	81027d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81027ac:	f043 0220 	orr.w	r2, r3, #32
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81027b4:	68fb      	ldr	r3, [r7, #12]
 81027b6:	2220      	movs	r2, #32
 81027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	2200      	movs	r2, #0
 81027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81027c4:	68fb      	ldr	r3, [r7, #12]
 81027c6:	2200      	movs	r2, #0
 81027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81027cc:	2301      	movs	r3, #1
 81027ce:	e00f      	b.n	81027f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	699a      	ldr	r2, [r3, #24]
 81027d6:	68bb      	ldr	r3, [r7, #8]
 81027d8:	4013      	ands	r3, r2
 81027da:	68ba      	ldr	r2, [r7, #8]
 81027dc:	429a      	cmp	r2, r3
 81027de:	bf0c      	ite	eq
 81027e0:	2301      	moveq	r3, #1
 81027e2:	2300      	movne	r3, #0
 81027e4:	b2db      	uxtb	r3, r3
 81027e6:	461a      	mov	r2, r3
 81027e8:	79fb      	ldrb	r3, [r7, #7]
 81027ea:	429a      	cmp	r2, r3
 81027ec:	d0cd      	beq.n	810278a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81027ee:	2300      	movs	r3, #0
}
 81027f0:	4618      	mov	r0, r3
 81027f2:	3710      	adds	r7, #16
 81027f4:	46bd      	mov	sp, r7
 81027f6:	bd80      	pop	{r7, pc}

081027f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81027f8:	b580      	push	{r7, lr}
 81027fa:	b084      	sub	sp, #16
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	60f8      	str	r0, [r7, #12]
 8102800:	60b9      	str	r1, [r7, #8]
 8102802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102804:	e02c      	b.n	8102860 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102806:	687a      	ldr	r2, [r7, #4]
 8102808:	68b9      	ldr	r1, [r7, #8]
 810280a:	68f8      	ldr	r0, [r7, #12]
 810280c:	f000 f870 	bl	81028f0 <I2C_IsAcknowledgeFailed>
 8102810:	4603      	mov	r3, r0
 8102812:	2b00      	cmp	r3, #0
 8102814:	d001      	beq.n	810281a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102816:	2301      	movs	r3, #1
 8102818:	e02a      	b.n	8102870 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810281a:	68bb      	ldr	r3, [r7, #8]
 810281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102820:	d01e      	beq.n	8102860 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102822:	f7ff f87b 	bl	810191c <HAL_GetTick>
 8102826:	4602      	mov	r2, r0
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	1ad3      	subs	r3, r2, r3
 810282c:	68ba      	ldr	r2, [r7, #8]
 810282e:	429a      	cmp	r2, r3
 8102830:	d302      	bcc.n	8102838 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102832:	68bb      	ldr	r3, [r7, #8]
 8102834:	2b00      	cmp	r3, #0
 8102836:	d113      	bne.n	8102860 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810283c:	f043 0220 	orr.w	r2, r3, #32
 8102840:	68fb      	ldr	r3, [r7, #12]
 8102842:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	2220      	movs	r2, #32
 8102848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810284c:	68fb      	ldr	r3, [r7, #12]
 810284e:	2200      	movs	r2, #0
 8102850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	2200      	movs	r2, #0
 8102858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810285c:	2301      	movs	r3, #1
 810285e:	e007      	b.n	8102870 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102860:	68fb      	ldr	r3, [r7, #12]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	699b      	ldr	r3, [r3, #24]
 8102866:	f003 0302 	and.w	r3, r3, #2
 810286a:	2b02      	cmp	r3, #2
 810286c:	d1cb      	bne.n	8102806 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810286e:	2300      	movs	r3, #0
}
 8102870:	4618      	mov	r0, r3
 8102872:	3710      	adds	r7, #16
 8102874:	46bd      	mov	sp, r7
 8102876:	bd80      	pop	{r7, pc}

08102878 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102878:	b580      	push	{r7, lr}
 810287a:	b084      	sub	sp, #16
 810287c:	af00      	add	r7, sp, #0
 810287e:	60f8      	str	r0, [r7, #12]
 8102880:	60b9      	str	r1, [r7, #8]
 8102882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102884:	e028      	b.n	81028d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102886:	687a      	ldr	r2, [r7, #4]
 8102888:	68b9      	ldr	r1, [r7, #8]
 810288a:	68f8      	ldr	r0, [r7, #12]
 810288c:	f000 f830 	bl	81028f0 <I2C_IsAcknowledgeFailed>
 8102890:	4603      	mov	r3, r0
 8102892:	2b00      	cmp	r3, #0
 8102894:	d001      	beq.n	810289a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102896:	2301      	movs	r3, #1
 8102898:	e026      	b.n	81028e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810289a:	f7ff f83f 	bl	810191c <HAL_GetTick>
 810289e:	4602      	mov	r2, r0
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	1ad3      	subs	r3, r2, r3
 81028a4:	68ba      	ldr	r2, [r7, #8]
 81028a6:	429a      	cmp	r2, r3
 81028a8:	d302      	bcc.n	81028b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81028aa:	68bb      	ldr	r3, [r7, #8]
 81028ac:	2b00      	cmp	r3, #0
 81028ae:	d113      	bne.n	81028d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81028b0:	68fb      	ldr	r3, [r7, #12]
 81028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81028b4:	f043 0220 	orr.w	r2, r3, #32
 81028b8:	68fb      	ldr	r3, [r7, #12]
 81028ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	2220      	movs	r2, #32
 81028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81028c4:	68fb      	ldr	r3, [r7, #12]
 81028c6:	2200      	movs	r2, #0
 81028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81028cc:	68fb      	ldr	r3, [r7, #12]
 81028ce:	2200      	movs	r2, #0
 81028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81028d4:	2301      	movs	r3, #1
 81028d6:	e007      	b.n	81028e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81028d8:	68fb      	ldr	r3, [r7, #12]
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	699b      	ldr	r3, [r3, #24]
 81028de:	f003 0320 	and.w	r3, r3, #32
 81028e2:	2b20      	cmp	r3, #32
 81028e4:	d1cf      	bne.n	8102886 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81028e6:	2300      	movs	r3, #0
}
 81028e8:	4618      	mov	r0, r3
 81028ea:	3710      	adds	r7, #16
 81028ec:	46bd      	mov	sp, r7
 81028ee:	bd80      	pop	{r7, pc}

081028f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81028f0:	b580      	push	{r7, lr}
 81028f2:	b084      	sub	sp, #16
 81028f4:	af00      	add	r7, sp, #0
 81028f6:	60f8      	str	r0, [r7, #12]
 81028f8:	60b9      	str	r1, [r7, #8]
 81028fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81028fc:	68fb      	ldr	r3, [r7, #12]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	699b      	ldr	r3, [r3, #24]
 8102902:	f003 0310 	and.w	r3, r3, #16
 8102906:	2b10      	cmp	r3, #16
 8102908:	d151      	bne.n	81029ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810290a:	e022      	b.n	8102952 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810290c:	68bb      	ldr	r3, [r7, #8]
 810290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102912:	d01e      	beq.n	8102952 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102914:	f7ff f802 	bl	810191c <HAL_GetTick>
 8102918:	4602      	mov	r2, r0
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	1ad3      	subs	r3, r2, r3
 810291e:	68ba      	ldr	r2, [r7, #8]
 8102920:	429a      	cmp	r2, r3
 8102922:	d302      	bcc.n	810292a <I2C_IsAcknowledgeFailed+0x3a>
 8102924:	68bb      	ldr	r3, [r7, #8]
 8102926:	2b00      	cmp	r3, #0
 8102928:	d113      	bne.n	8102952 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810292a:	68fb      	ldr	r3, [r7, #12]
 810292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810292e:	f043 0220 	orr.w	r2, r3, #32
 8102932:	68fb      	ldr	r3, [r7, #12]
 8102934:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	2220      	movs	r2, #32
 810293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810293e:	68fb      	ldr	r3, [r7, #12]
 8102940:	2200      	movs	r2, #0
 8102942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102946:	68fb      	ldr	r3, [r7, #12]
 8102948:	2200      	movs	r2, #0
 810294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810294e:	2301      	movs	r3, #1
 8102950:	e02e      	b.n	81029b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102952:	68fb      	ldr	r3, [r7, #12]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	699b      	ldr	r3, [r3, #24]
 8102958:	f003 0320 	and.w	r3, r3, #32
 810295c:	2b20      	cmp	r3, #32
 810295e:	d1d5      	bne.n	810290c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102960:	68fb      	ldr	r3, [r7, #12]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	2210      	movs	r2, #16
 8102966:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102968:	68fb      	ldr	r3, [r7, #12]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	2220      	movs	r2, #32
 810296e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102970:	68f8      	ldr	r0, [r7, #12]
 8102972:	f7ff fedd 	bl	8102730 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	6859      	ldr	r1, [r3, #4]
 810297c:	68fb      	ldr	r3, [r7, #12]
 810297e:	681a      	ldr	r2, [r3, #0]
 8102980:	4b0d      	ldr	r3, [pc, #52]	; (81029b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8102982:	400b      	ands	r3, r1
 8102984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810298a:	f043 0204 	orr.w	r2, r3, #4
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102992:	68fb      	ldr	r3, [r7, #12]
 8102994:	2220      	movs	r2, #32
 8102996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810299a:	68fb      	ldr	r3, [r7, #12]
 810299c:	2200      	movs	r2, #0
 810299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81029a2:	68fb      	ldr	r3, [r7, #12]
 81029a4:	2200      	movs	r2, #0
 81029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81029aa:	2301      	movs	r3, #1
 81029ac:	e000      	b.n	81029b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81029ae:	2300      	movs	r3, #0
}
 81029b0:	4618      	mov	r0, r3
 81029b2:	3710      	adds	r7, #16
 81029b4:	46bd      	mov	sp, r7
 81029b6:	bd80      	pop	{r7, pc}
 81029b8:	fe00e800 	.word	0xfe00e800

081029bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81029bc:	b480      	push	{r7}
 81029be:	b085      	sub	sp, #20
 81029c0:	af00      	add	r7, sp, #0
 81029c2:	60f8      	str	r0, [r7, #12]
 81029c4:	607b      	str	r3, [r7, #4]
 81029c6:	460b      	mov	r3, r1
 81029c8:	817b      	strh	r3, [r7, #10]
 81029ca:	4613      	mov	r3, r2
 81029cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81029ce:	68fb      	ldr	r3, [r7, #12]
 81029d0:	681b      	ldr	r3, [r3, #0]
 81029d2:	685a      	ldr	r2, [r3, #4]
 81029d4:	69bb      	ldr	r3, [r7, #24]
 81029d6:	0d5b      	lsrs	r3, r3, #21
 81029d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81029dc:	4b0d      	ldr	r3, [pc, #52]	; (8102a14 <I2C_TransferConfig+0x58>)
 81029de:	430b      	orrs	r3, r1
 81029e0:	43db      	mvns	r3, r3
 81029e2:	ea02 0103 	and.w	r1, r2, r3
 81029e6:	897b      	ldrh	r3, [r7, #10]
 81029e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81029ec:	7a7b      	ldrb	r3, [r7, #9]
 81029ee:	041b      	lsls	r3, r3, #16
 81029f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81029f4:	431a      	orrs	r2, r3
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	431a      	orrs	r2, r3
 81029fa:	69bb      	ldr	r3, [r7, #24]
 81029fc:	431a      	orrs	r2, r3
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	681b      	ldr	r3, [r3, #0]
 8102a02:	430a      	orrs	r2, r1
 8102a04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102a06:	bf00      	nop
 8102a08:	3714      	adds	r7, #20
 8102a0a:	46bd      	mov	sp, r7
 8102a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a10:	4770      	bx	lr
 8102a12:	bf00      	nop
 8102a14:	03ff63ff 	.word	0x03ff63ff

08102a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102a18:	b480      	push	{r7}
 8102a1a:	b083      	sub	sp, #12
 8102a1c:	af00      	add	r7, sp, #0
 8102a1e:	6078      	str	r0, [r7, #4]
 8102a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102a28:	b2db      	uxtb	r3, r3
 8102a2a:	2b20      	cmp	r3, #32
 8102a2c:	d138      	bne.n	8102aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102a34:	2b01      	cmp	r3, #1
 8102a36:	d101      	bne.n	8102a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102a38:	2302      	movs	r3, #2
 8102a3a:	e032      	b.n	8102aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	2201      	movs	r2, #1
 8102a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	2224      	movs	r2, #36	; 0x24
 8102a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	681a      	ldr	r2, [r3, #0]
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	f022 0201 	bic.w	r2, r2, #1
 8102a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	681a      	ldr	r2, [r3, #0]
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	681b      	ldr	r3, [r3, #0]
 8102a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	6819      	ldr	r1, [r3, #0]
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	683a      	ldr	r2, [r7, #0]
 8102a78:	430a      	orrs	r2, r1
 8102a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	681a      	ldr	r2, [r3, #0]
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	f042 0201 	orr.w	r2, r2, #1
 8102a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	2220      	movs	r2, #32
 8102a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	2200      	movs	r2, #0
 8102a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102a9c:	2300      	movs	r3, #0
 8102a9e:	e000      	b.n	8102aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102aa0:	2302      	movs	r3, #2
  }
}
 8102aa2:	4618      	mov	r0, r3
 8102aa4:	370c      	adds	r7, #12
 8102aa6:	46bd      	mov	sp, r7
 8102aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aac:	4770      	bx	lr

08102aae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102aae:	b480      	push	{r7}
 8102ab0:	b085      	sub	sp, #20
 8102ab2:	af00      	add	r7, sp, #0
 8102ab4:	6078      	str	r0, [r7, #4]
 8102ab6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102abe:	b2db      	uxtb	r3, r3
 8102ac0:	2b20      	cmp	r3, #32
 8102ac2:	d139      	bne.n	8102b38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102aca:	2b01      	cmp	r3, #1
 8102acc:	d101      	bne.n	8102ad2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102ace:	2302      	movs	r3, #2
 8102ad0:	e033      	b.n	8102b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	2201      	movs	r2, #1
 8102ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	2224      	movs	r2, #36	; 0x24
 8102ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	681a      	ldr	r2, [r3, #0]
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	f022 0201 	bic.w	r2, r2, #1
 8102af0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102b00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102b02:	683b      	ldr	r3, [r7, #0]
 8102b04:	021b      	lsls	r3, r3, #8
 8102b06:	68fa      	ldr	r2, [r7, #12]
 8102b08:	4313      	orrs	r3, r2
 8102b0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	68fa      	ldr	r2, [r7, #12]
 8102b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	681a      	ldr	r2, [r3, #0]
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	f042 0201 	orr.w	r2, r2, #1
 8102b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	2220      	movs	r2, #32
 8102b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102b2c:	687b      	ldr	r3, [r7, #4]
 8102b2e:	2200      	movs	r2, #0
 8102b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102b34:	2300      	movs	r3, #0
 8102b36:	e000      	b.n	8102b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102b38:	2302      	movs	r3, #2
  }
}
 8102b3a:	4618      	mov	r0, r3
 8102b3c:	3714      	adds	r7, #20
 8102b3e:	46bd      	mov	sp, r7
 8102b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b44:	4770      	bx	lr
	...

08102b48 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102b48:	b580      	push	{r7, lr}
 8102b4a:	b084      	sub	sp, #16
 8102b4c:	af00      	add	r7, sp, #0
 8102b4e:	60f8      	str	r0, [r7, #12]
 8102b50:	460b      	mov	r3, r1
 8102b52:	607a      	str	r2, [r7, #4]
 8102b54:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102b56:	4b37      	ldr	r3, [pc, #220]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	f023 0201 	bic.w	r2, r3, #1
 8102b5e:	4935      	ldr	r1, [pc, #212]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b60:	68fb      	ldr	r3, [r7, #12]
 8102b62:	4313      	orrs	r3, r2
 8102b64:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	2b00      	cmp	r3, #0
 8102b6a:	d123      	bne.n	8102bb4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102b6c:	f7ff f842 	bl	8101bf4 <HAL_GetCurrentCPUID>
 8102b70:	4603      	mov	r3, r0
 8102b72:	2b03      	cmp	r3, #3
 8102b74:	d158      	bne.n	8102c28 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102b76:	4b2f      	ldr	r3, [pc, #188]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b78:	691b      	ldr	r3, [r3, #16]
 8102b7a:	4a2e      	ldr	r2, [pc, #184]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b7c:	f023 0301 	bic.w	r3, r3, #1
 8102b80:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b82:	4b2d      	ldr	r3, [pc, #180]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b84:	691b      	ldr	r3, [r3, #16]
 8102b86:	4a2c      	ldr	r2, [pc, #176]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b88:	f043 0304 	orr.w	r3, r3, #4
 8102b8c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102b8e:	f3bf 8f4f 	dsb	sy
}
 8102b92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b94:	f3bf 8f6f 	isb	sy
}
 8102b98:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b9a:	7afb      	ldrb	r3, [r7, #11]
 8102b9c:	2b01      	cmp	r3, #1
 8102b9e:	d101      	bne.n	8102ba4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102ba0:	bf30      	wfi
 8102ba2:	e000      	b.n	8102ba6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102ba4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ba6:	4b24      	ldr	r3, [pc, #144]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ba8:	691b      	ldr	r3, [r3, #16]
 8102baa:	4a23      	ldr	r2, [pc, #140]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bac:	f023 0304 	bic.w	r3, r3, #4
 8102bb0:	6113      	str	r3, [r2, #16]
 8102bb2:	e03c      	b.n	8102c2e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	2b01      	cmp	r3, #1
 8102bb8:	d123      	bne.n	8102c02 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102bba:	f7ff f81b 	bl	8101bf4 <HAL_GetCurrentCPUID>
 8102bbe:	4603      	mov	r3, r0
 8102bc0:	2b01      	cmp	r3, #1
 8102bc2:	d133      	bne.n	8102c2c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102bc4:	4b1b      	ldr	r3, [pc, #108]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bc6:	695b      	ldr	r3, [r3, #20]
 8102bc8:	4a1a      	ldr	r2, [pc, #104]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bca:	f023 0302 	bic.w	r3, r3, #2
 8102bce:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102bd0:	4b19      	ldr	r3, [pc, #100]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bd2:	691b      	ldr	r3, [r3, #16]
 8102bd4:	4a18      	ldr	r2, [pc, #96]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bd6:	f043 0304 	orr.w	r3, r3, #4
 8102bda:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102bdc:	f3bf 8f4f 	dsb	sy
}
 8102be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102be2:	f3bf 8f6f 	isb	sy
}
 8102be6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102be8:	7afb      	ldrb	r3, [r7, #11]
 8102bea:	2b01      	cmp	r3, #1
 8102bec:	d101      	bne.n	8102bf2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102bee:	bf30      	wfi
 8102bf0:	e000      	b.n	8102bf4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102bf2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102bf4:	4b10      	ldr	r3, [pc, #64]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bf6:	691b      	ldr	r3, [r3, #16]
 8102bf8:	4a0f      	ldr	r2, [pc, #60]	; (8102c38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102bfa:	f023 0304 	bic.w	r3, r3, #4
 8102bfe:	6113      	str	r3, [r2, #16]
 8102c00:	e015      	b.n	8102c2e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102c02:	f7fe fff7 	bl	8101bf4 <HAL_GetCurrentCPUID>
 8102c06:	4603      	mov	r3, r0
 8102c08:	2b03      	cmp	r3, #3
 8102c0a:	d106      	bne.n	8102c1a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102c0c:	4b09      	ldr	r3, [pc, #36]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102c0e:	691b      	ldr	r3, [r3, #16]
 8102c10:	4a08      	ldr	r2, [pc, #32]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102c12:	f023 0304 	bic.w	r3, r3, #4
 8102c16:	6113      	str	r3, [r2, #16]
 8102c18:	e009      	b.n	8102c2e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102c1a:	4b06      	ldr	r3, [pc, #24]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102c1c:	695b      	ldr	r3, [r3, #20]
 8102c1e:	4a05      	ldr	r2, [pc, #20]	; (8102c34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102c20:	f023 0304 	bic.w	r3, r3, #4
 8102c24:	6153      	str	r3, [r2, #20]
 8102c26:	e002      	b.n	8102c2e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102c28:	bf00      	nop
 8102c2a:	e000      	b.n	8102c2e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102c2c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102c2e:	3710      	adds	r7, #16
 8102c30:	46bd      	mov	sp, r7
 8102c32:	bd80      	pop	{r7, pc}
 8102c34:	58024800 	.word	0x58024800
 8102c38:	e000ed00 	.word	0xe000ed00

08102c3c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102c3c:	b580      	push	{r7, lr}
 8102c3e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102c40:	f7fe ffd8 	bl	8101bf4 <HAL_GetCurrentCPUID>
 8102c44:	4603      	mov	r3, r0
 8102c46:	2b03      	cmp	r3, #3
 8102c48:	d101      	bne.n	8102c4e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102c4a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102c4c:	e001      	b.n	8102c52 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102c4e:	bf40      	sev
    __WFE ();
 8102c50:	bf20      	wfe
}
 8102c52:	bf00      	nop
 8102c54:	bd80      	pop	{r7, pc}
	...

08102c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102c58:	b480      	push	{r7}
 8102c5a:	b089      	sub	sp, #36	; 0x24
 8102c5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102c5e:	4bb3      	ldr	r3, [pc, #716]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c60:	691b      	ldr	r3, [r3, #16]
 8102c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102c66:	2b18      	cmp	r3, #24
 8102c68:	f200 8155 	bhi.w	8102f16 <HAL_RCC_GetSysClockFreq+0x2be>
 8102c6c:	a201      	add	r2, pc, #4	; (adr r2, 8102c74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102c72:	bf00      	nop
 8102c74:	08102cd9 	.word	0x08102cd9
 8102c78:	08102f17 	.word	0x08102f17
 8102c7c:	08102f17 	.word	0x08102f17
 8102c80:	08102f17 	.word	0x08102f17
 8102c84:	08102f17 	.word	0x08102f17
 8102c88:	08102f17 	.word	0x08102f17
 8102c8c:	08102f17 	.word	0x08102f17
 8102c90:	08102f17 	.word	0x08102f17
 8102c94:	08102cff 	.word	0x08102cff
 8102c98:	08102f17 	.word	0x08102f17
 8102c9c:	08102f17 	.word	0x08102f17
 8102ca0:	08102f17 	.word	0x08102f17
 8102ca4:	08102f17 	.word	0x08102f17
 8102ca8:	08102f17 	.word	0x08102f17
 8102cac:	08102f17 	.word	0x08102f17
 8102cb0:	08102f17 	.word	0x08102f17
 8102cb4:	08102d05 	.word	0x08102d05
 8102cb8:	08102f17 	.word	0x08102f17
 8102cbc:	08102f17 	.word	0x08102f17
 8102cc0:	08102f17 	.word	0x08102f17
 8102cc4:	08102f17 	.word	0x08102f17
 8102cc8:	08102f17 	.word	0x08102f17
 8102ccc:	08102f17 	.word	0x08102f17
 8102cd0:	08102f17 	.word	0x08102f17
 8102cd4:	08102d0b 	.word	0x08102d0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102cd8:	4b94      	ldr	r3, [pc, #592]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	f003 0320 	and.w	r3, r3, #32
 8102ce0:	2b00      	cmp	r3, #0
 8102ce2:	d009      	beq.n	8102cf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102ce4:	4b91      	ldr	r3, [pc, #580]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	08db      	lsrs	r3, r3, #3
 8102cea:	f003 0303 	and.w	r3, r3, #3
 8102cee:	4a90      	ldr	r2, [pc, #576]	; (8102f30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8102cf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102cf6:	e111      	b.n	8102f1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102cf8:	4b8d      	ldr	r3, [pc, #564]	; (8102f30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102cfa:	61bb      	str	r3, [r7, #24]
    break;
 8102cfc:	e10e      	b.n	8102f1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102cfe:	4b8d      	ldr	r3, [pc, #564]	; (8102f34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102d00:	61bb      	str	r3, [r7, #24]
    break;
 8102d02:	e10b      	b.n	8102f1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102d04:	4b8c      	ldr	r3, [pc, #560]	; (8102f38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102d06:	61bb      	str	r3, [r7, #24]
    break;
 8102d08:	e108      	b.n	8102f1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102d0a:	4b88      	ldr	r3, [pc, #544]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d0e:	f003 0303 	and.w	r3, r3, #3
 8102d12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102d14:	4b85      	ldr	r3, [pc, #532]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d18:	091b      	lsrs	r3, r3, #4
 8102d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102d1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102d20:	4b82      	ldr	r3, [pc, #520]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d24:	f003 0301 	and.w	r3, r3, #1
 8102d28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102d2a:	4b80      	ldr	r3, [pc, #512]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102d2e:	08db      	lsrs	r3, r3, #3
 8102d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102d34:	68fa      	ldr	r2, [r7, #12]
 8102d36:	fb02 f303 	mul.w	r3, r2, r3
 8102d3a:	ee07 3a90 	vmov	s15, r3
 8102d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102d46:	693b      	ldr	r3, [r7, #16]
 8102d48:	2b00      	cmp	r3, #0
 8102d4a:	f000 80e1 	beq.w	8102f10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102d4e:	697b      	ldr	r3, [r7, #20]
 8102d50:	2b02      	cmp	r3, #2
 8102d52:	f000 8083 	beq.w	8102e5c <HAL_RCC_GetSysClockFreq+0x204>
 8102d56:	697b      	ldr	r3, [r7, #20]
 8102d58:	2b02      	cmp	r3, #2
 8102d5a:	f200 80a1 	bhi.w	8102ea0 <HAL_RCC_GetSysClockFreq+0x248>
 8102d5e:	697b      	ldr	r3, [r7, #20]
 8102d60:	2b00      	cmp	r3, #0
 8102d62:	d003      	beq.n	8102d6c <HAL_RCC_GetSysClockFreq+0x114>
 8102d64:	697b      	ldr	r3, [r7, #20]
 8102d66:	2b01      	cmp	r3, #1
 8102d68:	d056      	beq.n	8102e18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102d6a:	e099      	b.n	8102ea0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102d6c:	4b6f      	ldr	r3, [pc, #444]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	f003 0320 	and.w	r3, r3, #32
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	d02d      	beq.n	8102dd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102d78:	4b6c      	ldr	r3, [pc, #432]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	08db      	lsrs	r3, r3, #3
 8102d7e:	f003 0303 	and.w	r3, r3, #3
 8102d82:	4a6b      	ldr	r2, [pc, #428]	; (8102f30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102d84:	fa22 f303 	lsr.w	r3, r2, r3
 8102d88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	ee07 3a90 	vmov	s15, r3
 8102d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d94:	693b      	ldr	r3, [r7, #16]
 8102d96:	ee07 3a90 	vmov	s15, r3
 8102d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102da2:	4b62      	ldr	r3, [pc, #392]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102daa:	ee07 3a90 	vmov	s15, r3
 8102dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102db6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102dd2:	e087      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102dd4:	693b      	ldr	r3, [r7, #16]
 8102dd6:	ee07 3a90 	vmov	s15, r3
 8102dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102f40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102de6:	4b51      	ldr	r3, [pc, #324]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dee:	ee07 3a90 	vmov	s15, r3
 8102df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e16:	e065      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102e18:	693b      	ldr	r3, [r7, #16]
 8102e1a:	ee07 3a90 	vmov	s15, r3
 8102e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102f44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e2a:	4b40      	ldr	r3, [pc, #256]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e32:	ee07 3a90 	vmov	s15, r3
 8102e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e5a:	e043      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102e5c:	693b      	ldr	r3, [r7, #16]
 8102e5e:	ee07 3a90 	vmov	s15, r3
 8102e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102f48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e6e:	4b2f      	ldr	r3, [pc, #188]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e76:	ee07 3a90 	vmov	s15, r3
 8102e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e9e:	e021      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102ea0:	693b      	ldr	r3, [r7, #16]
 8102ea2:	ee07 3a90 	vmov	s15, r3
 8102ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102eaa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102f44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102eb2:	4b1e      	ldr	r3, [pc, #120]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102eba:	ee07 3a90 	vmov	s15, r3
 8102ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ec6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102ee2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102ee4:	4b11      	ldr	r3, [pc, #68]	; (8102f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102ee8:	0a5b      	lsrs	r3, r3, #9
 8102eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102eee:	3301      	adds	r3, #1
 8102ef0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102ef2:	683b      	ldr	r3, [r7, #0]
 8102ef4:	ee07 3a90 	vmov	s15, r3
 8102ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8102f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102f08:	ee17 3a90 	vmov	r3, s15
 8102f0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102f0e:	e005      	b.n	8102f1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102f10:	2300      	movs	r3, #0
 8102f12:	61bb      	str	r3, [r7, #24]
    break;
 8102f14:	e002      	b.n	8102f1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102f16:	4b07      	ldr	r3, [pc, #28]	; (8102f34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102f18:	61bb      	str	r3, [r7, #24]
    break;
 8102f1a:	bf00      	nop
  }

  return sysclockfreq;
 8102f1c:	69bb      	ldr	r3, [r7, #24]
}
 8102f1e:	4618      	mov	r0, r3
 8102f20:	3724      	adds	r7, #36	; 0x24
 8102f22:	46bd      	mov	sp, r7
 8102f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f28:	4770      	bx	lr
 8102f2a:	bf00      	nop
 8102f2c:	58024400 	.word	0x58024400
 8102f30:	03d09000 	.word	0x03d09000
 8102f34:	003d0900 	.word	0x003d0900
 8102f38:	007a1200 	.word	0x007a1200
 8102f3c:	46000000 	.word	0x46000000
 8102f40:	4c742400 	.word	0x4c742400
 8102f44:	4a742400 	.word	0x4a742400
 8102f48:	4af42400 	.word	0x4af42400

08102f4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102f4c:	b580      	push	{r7, lr}
 8102f4e:	b086      	sub	sp, #24
 8102f50:	af00      	add	r7, sp, #0
 8102f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102f54:	2300      	movs	r3, #0
 8102f56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102f58:	2300      	movs	r3, #0
 8102f5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102f64:	2b00      	cmp	r3, #0
 8102f66:	d03f      	beq.n	8102fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f70:	d02a      	beq.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102f72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f76:	d824      	bhi.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102f7c:	d018      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102f82:	d81e      	bhi.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102f84:	2b00      	cmp	r3, #0
 8102f86:	d003      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102f8c:	d007      	beq.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102f8e:	e018      	b.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f90:	4bab      	ldr	r3, [pc, #684]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f94:	4aaa      	ldr	r2, [pc, #680]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102f9c:	e015      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	3304      	adds	r3, #4
 8102fa2:	2102      	movs	r1, #2
 8102fa4:	4618      	mov	r0, r3
 8102fa6:	f000 ff11 	bl	8103dcc <RCCEx_PLL2_Config>
 8102faa:	4603      	mov	r3, r0
 8102fac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102fae:	e00c      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	3324      	adds	r3, #36	; 0x24
 8102fb4:	2102      	movs	r1, #2
 8102fb6:	4618      	mov	r0, r3
 8102fb8:	f000 ffba 	bl	8103f30 <RCCEx_PLL3_Config>
 8102fbc:	4603      	mov	r3, r0
 8102fbe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102fc0:	e003      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fc2:	2301      	movs	r3, #1
 8102fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8102fc6:	e000      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fca:	7dfb      	ldrb	r3, [r7, #23]
 8102fcc:	2b00      	cmp	r3, #0
 8102fce:	d109      	bne.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102fd0:	4b9b      	ldr	r3, [pc, #620]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102fdc:	4998      	ldr	r1, [pc, #608]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fde:	4313      	orrs	r3, r2
 8102fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8102fe2:	e001      	b.n	8102fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fe4:	7dfb      	ldrb	r3, [r7, #23]
 8102fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102ff0:	2b00      	cmp	r3, #0
 8102ff2:	d03d      	beq.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ff8:	2b04      	cmp	r3, #4
 8102ffa:	d826      	bhi.n	810304a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102ffc:	a201      	add	r2, pc, #4	; (adr r2, 8103004 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103002:	bf00      	nop
 8103004:	08103019 	.word	0x08103019
 8103008:	08103027 	.word	0x08103027
 810300c:	08103039 	.word	0x08103039
 8103010:	08103051 	.word	0x08103051
 8103014:	08103051 	.word	0x08103051
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103018:	4b89      	ldr	r3, [pc, #548]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810301c:	4a88      	ldr	r2, [pc, #544]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810301e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103024:	e015      	b.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	3304      	adds	r3, #4
 810302a:	2100      	movs	r1, #0
 810302c:	4618      	mov	r0, r3
 810302e:	f000 fecd 	bl	8103dcc <RCCEx_PLL2_Config>
 8103032:	4603      	mov	r3, r0
 8103034:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103036:	e00c      	b.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	3324      	adds	r3, #36	; 0x24
 810303c:	2100      	movs	r1, #0
 810303e:	4618      	mov	r0, r3
 8103040:	f000 ff76 	bl	8103f30 <RCCEx_PLL3_Config>
 8103044:	4603      	mov	r3, r0
 8103046:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103048:	e003      	b.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810304a:	2301      	movs	r3, #1
 810304c:	75fb      	strb	r3, [r7, #23]
      break;
 810304e:	e000      	b.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103052:	7dfb      	ldrb	r3, [r7, #23]
 8103054:	2b00      	cmp	r3, #0
 8103056:	d109      	bne.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103058:	4b79      	ldr	r3, [pc, #484]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810305c:	f023 0207 	bic.w	r2, r3, #7
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103064:	4976      	ldr	r1, [pc, #472]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103066:	4313      	orrs	r3, r2
 8103068:	650b      	str	r3, [r1, #80]	; 0x50
 810306a:	e001      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810306c:	7dfb      	ldrb	r3, [r7, #23]
 810306e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103078:	2b00      	cmp	r3, #0
 810307a:	d042      	beq.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103084:	d02b      	beq.n	81030de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810308a:	d825      	bhi.n	81030d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810308c:	2bc0      	cmp	r3, #192	; 0xc0
 810308e:	d028      	beq.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103090:	2bc0      	cmp	r3, #192	; 0xc0
 8103092:	d821      	bhi.n	81030d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103094:	2b80      	cmp	r3, #128	; 0x80
 8103096:	d016      	beq.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103098:	2b80      	cmp	r3, #128	; 0x80
 810309a:	d81d      	bhi.n	81030d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810309c:	2b00      	cmp	r3, #0
 810309e:	d002      	beq.n	81030a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81030a0:	2b40      	cmp	r3, #64	; 0x40
 81030a2:	d007      	beq.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81030a4:	e018      	b.n	81030d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030a6:	4b66      	ldr	r3, [pc, #408]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030aa:	4a65      	ldr	r2, [pc, #404]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030b2:	e017      	b.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	3304      	adds	r3, #4
 81030b8:	2100      	movs	r1, #0
 81030ba:	4618      	mov	r0, r3
 81030bc:	f000 fe86 	bl	8103dcc <RCCEx_PLL2_Config>
 81030c0:	4603      	mov	r3, r0
 81030c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030c4:	e00e      	b.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	3324      	adds	r3, #36	; 0x24
 81030ca:	2100      	movs	r1, #0
 81030cc:	4618      	mov	r0, r3
 81030ce:	f000 ff2f 	bl	8103f30 <RCCEx_PLL3_Config>
 81030d2:	4603      	mov	r3, r0
 81030d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81030d6:	e005      	b.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030d8:	2301      	movs	r3, #1
 81030da:	75fb      	strb	r3, [r7, #23]
      break;
 81030dc:	e002      	b.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81030de:	bf00      	nop
 81030e0:	e000      	b.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81030e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030e4:	7dfb      	ldrb	r3, [r7, #23]
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	d109      	bne.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81030ea:	4b55      	ldr	r3, [pc, #340]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030f6:	4952      	ldr	r1, [pc, #328]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81030f8:	4313      	orrs	r3, r2
 81030fa:	650b      	str	r3, [r1, #80]	; 0x50
 81030fc:	e001      	b.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030fe:	7dfb      	ldrb	r3, [r7, #23]
 8103100:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810310a:	2b00      	cmp	r3, #0
 810310c:	d049      	beq.n	81031a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103118:	d030      	beq.n	810317c <HAL_RCCEx_PeriphCLKConfig+0x230>
 810311a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810311e:	d82a      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103120:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103124:	d02c      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103126:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810312a:	d824      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810312c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103130:	d018      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103136:	d81e      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103138:	2b00      	cmp	r3, #0
 810313a:	d003      	beq.n	8103144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810313c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103140:	d007      	beq.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103142:	e018      	b.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103144:	4b3e      	ldr	r3, [pc, #248]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103148:	4a3d      	ldr	r2, [pc, #244]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810314a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810314e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103150:	e017      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	3304      	adds	r3, #4
 8103156:	2100      	movs	r1, #0
 8103158:	4618      	mov	r0, r3
 810315a:	f000 fe37 	bl	8103dcc <RCCEx_PLL2_Config>
 810315e:	4603      	mov	r3, r0
 8103160:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103162:	e00e      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	3324      	adds	r3, #36	; 0x24
 8103168:	2100      	movs	r1, #0
 810316a:	4618      	mov	r0, r3
 810316c:	f000 fee0 	bl	8103f30 <RCCEx_PLL3_Config>
 8103170:	4603      	mov	r3, r0
 8103172:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103174:	e005      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103176:	2301      	movs	r3, #1
 8103178:	75fb      	strb	r3, [r7, #23]
      break;
 810317a:	e002      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810317c:	bf00      	nop
 810317e:	e000      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103182:	7dfb      	ldrb	r3, [r7, #23]
 8103184:	2b00      	cmp	r3, #0
 8103186:	d10a      	bne.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103188:	4b2d      	ldr	r3, [pc, #180]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810318c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103196:	492a      	ldr	r1, [pc, #168]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103198:	4313      	orrs	r3, r2
 810319a:	658b      	str	r3, [r1, #88]	; 0x58
 810319c:	e001      	b.n	81031a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810319e:	7dfb      	ldrb	r3, [r7, #23]
 81031a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81031aa:	2b00      	cmp	r3, #0
 81031ac:	d04c      	beq.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81031b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81031b8:	d030      	beq.n	810321c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81031ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81031be:	d82a      	bhi.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81031c4:	d02c      	beq.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81031c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81031ca:	d824      	bhi.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81031d0:	d018      	beq.n	8103204 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81031d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81031d6:	d81e      	bhi.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81031d8:	2b00      	cmp	r3, #0
 81031da:	d003      	beq.n	81031e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81031e0:	d007      	beq.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81031e2:	e018      	b.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031e4:	4b16      	ldr	r3, [pc, #88]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031e8:	4a15      	ldr	r2, [pc, #84]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81031ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81031f0:	e017      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	3304      	adds	r3, #4
 81031f6:	2100      	movs	r1, #0
 81031f8:	4618      	mov	r0, r3
 81031fa:	f000 fde7 	bl	8103dcc <RCCEx_PLL2_Config>
 81031fe:	4603      	mov	r3, r0
 8103200:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103202:	e00e      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	3324      	adds	r3, #36	; 0x24
 8103208:	2100      	movs	r1, #0
 810320a:	4618      	mov	r0, r3
 810320c:	f000 fe90 	bl	8103f30 <RCCEx_PLL3_Config>
 8103210:	4603      	mov	r3, r0
 8103212:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103214:	e005      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103216:	2301      	movs	r3, #1
 8103218:	75fb      	strb	r3, [r7, #23]
      break;
 810321a:	e002      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810321c:	bf00      	nop
 810321e:	e000      	b.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103222:	7dfb      	ldrb	r3, [r7, #23]
 8103224:	2b00      	cmp	r3, #0
 8103226:	d10d      	bne.n	8103244 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103228:	4b05      	ldr	r3, [pc, #20]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810322c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103236:	4902      	ldr	r1, [pc, #8]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103238:	4313      	orrs	r3, r2
 810323a:	658b      	str	r3, [r1, #88]	; 0x58
 810323c:	e004      	b.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810323e:	bf00      	nop
 8103240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103244:	7dfb      	ldrb	r3, [r7, #23]
 8103246:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103250:	2b00      	cmp	r3, #0
 8103252:	d032      	beq.n	81032ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103258:	2b30      	cmp	r3, #48	; 0x30
 810325a:	d01c      	beq.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810325c:	2b30      	cmp	r3, #48	; 0x30
 810325e:	d817      	bhi.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103260:	2b20      	cmp	r3, #32
 8103262:	d00c      	beq.n	810327e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103264:	2b20      	cmp	r3, #32
 8103266:	d813      	bhi.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103268:	2b00      	cmp	r3, #0
 810326a:	d016      	beq.n	810329a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810326c:	2b10      	cmp	r3, #16
 810326e:	d10f      	bne.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103270:	4baf      	ldr	r3, [pc, #700]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103274:	4aae      	ldr	r2, [pc, #696]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810327a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810327c:	e00e      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	3304      	adds	r3, #4
 8103282:	2102      	movs	r1, #2
 8103284:	4618      	mov	r0, r3
 8103286:	f000 fda1 	bl	8103dcc <RCCEx_PLL2_Config>
 810328a:	4603      	mov	r3, r0
 810328c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810328e:	e005      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103290:	2301      	movs	r3, #1
 8103292:	75fb      	strb	r3, [r7, #23]
      break;
 8103294:	e002      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103296:	bf00      	nop
 8103298:	e000      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810329a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810329c:	7dfb      	ldrb	r3, [r7, #23]
 810329e:	2b00      	cmp	r3, #0
 81032a0:	d109      	bne.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81032a2:	4ba3      	ldr	r3, [pc, #652]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81032a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81032ae:	49a0      	ldr	r1, [pc, #640]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032b0:	4313      	orrs	r3, r2
 81032b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81032b4:	e001      	b.n	81032ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032b6:	7dfb      	ldrb	r3, [r7, #23]
 81032b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81032c2:	2b00      	cmp	r3, #0
 81032c4:	d047      	beq.n	8103356 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032ce:	d030      	beq.n	8103332 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81032d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032d4:	d82a      	bhi.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81032da:	d02c      	beq.n	8103336 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81032dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81032e0:	d824      	bhi.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81032e6:	d018      	beq.n	810331a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81032ec:	d81e      	bhi.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d003      	beq.n	81032fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81032f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81032f6:	d007      	beq.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81032f8:	e018      	b.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032fa:	4b8d      	ldr	r3, [pc, #564]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032fe:	4a8c      	ldr	r2, [pc, #560]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103306:	e017      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	3304      	adds	r3, #4
 810330c:	2100      	movs	r1, #0
 810330e:	4618      	mov	r0, r3
 8103310:	f000 fd5c 	bl	8103dcc <RCCEx_PLL2_Config>
 8103314:	4603      	mov	r3, r0
 8103316:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103318:	e00e      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	3324      	adds	r3, #36	; 0x24
 810331e:	2100      	movs	r1, #0
 8103320:	4618      	mov	r0, r3
 8103322:	f000 fe05 	bl	8103f30 <RCCEx_PLL3_Config>
 8103326:	4603      	mov	r3, r0
 8103328:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810332a:	e005      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810332c:	2301      	movs	r3, #1
 810332e:	75fb      	strb	r3, [r7, #23]
      break;
 8103330:	e002      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103332:	bf00      	nop
 8103334:	e000      	b.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103338:	7dfb      	ldrb	r3, [r7, #23]
 810333a:	2b00      	cmp	r3, #0
 810333c:	d109      	bne.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810333e:	4b7c      	ldr	r3, [pc, #496]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103342:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810334a:	4979      	ldr	r1, [pc, #484]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810334c:	4313      	orrs	r3, r2
 810334e:	650b      	str	r3, [r1, #80]	; 0x50
 8103350:	e001      	b.n	8103356 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103352:	7dfb      	ldrb	r3, [r7, #23]
 8103354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810335e:	2b00      	cmp	r3, #0
 8103360:	d049      	beq.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810336a:	d02e      	beq.n	81033ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103370:	d828      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103376:	d02a      	beq.n	81033ce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810337c:	d822      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810337e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103382:	d026      	beq.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103384:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103388:	d81c      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810338a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810338e:	d010      	beq.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103394:	d816      	bhi.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103396:	2b00      	cmp	r3, #0
 8103398:	d01d      	beq.n	81033d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810339e:	d111      	bne.n	81033c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	3304      	adds	r3, #4
 81033a4:	2101      	movs	r1, #1
 81033a6:	4618      	mov	r0, r3
 81033a8:	f000 fd10 	bl	8103dcc <RCCEx_PLL2_Config>
 81033ac:	4603      	mov	r3, r0
 81033ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81033b0:	e012      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	3324      	adds	r3, #36	; 0x24
 81033b6:	2101      	movs	r1, #1
 81033b8:	4618      	mov	r0, r3
 81033ba:	f000 fdb9 	bl	8103f30 <RCCEx_PLL3_Config>
 81033be:	4603      	mov	r3, r0
 81033c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81033c2:	e009      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033c4:	2301      	movs	r3, #1
 81033c6:	75fb      	strb	r3, [r7, #23]
      break;
 81033c8:	e006      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033ca:	bf00      	nop
 81033cc:	e004      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033ce:	bf00      	nop
 81033d0:	e002      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033d2:	bf00      	nop
 81033d4:	e000      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81033d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033d8:	7dfb      	ldrb	r3, [r7, #23]
 81033da:	2b00      	cmp	r3, #0
 81033dc:	d109      	bne.n	81033f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81033de:	4b54      	ldr	r3, [pc, #336]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81033ea:	4951      	ldr	r1, [pc, #324]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81033ec:	4313      	orrs	r3, r2
 81033ee:	650b      	str	r3, [r1, #80]	; 0x50
 81033f0:	e001      	b.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033f2:	7dfb      	ldrb	r3, [r7, #23]
 81033f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81033fe:	2b00      	cmp	r3, #0
 8103400:	d04b      	beq.n	810349a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810340c:	d02e      	beq.n	810346c <HAL_RCCEx_PeriphCLKConfig+0x520>
 810340e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103412:	d828      	bhi.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103418:	d02a      	beq.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810341e:	d822      	bhi.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103424:	d026      	beq.n	8103474 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810342a:	d81c      	bhi.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103430:	d010      	beq.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103436:	d816      	bhi.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103438:	2b00      	cmp	r3, #0
 810343a:	d01d      	beq.n	8103478 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810343c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103440:	d111      	bne.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	3304      	adds	r3, #4
 8103446:	2101      	movs	r1, #1
 8103448:	4618      	mov	r0, r3
 810344a:	f000 fcbf 	bl	8103dcc <RCCEx_PLL2_Config>
 810344e:	4603      	mov	r3, r0
 8103450:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103452:	e012      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	3324      	adds	r3, #36	; 0x24
 8103458:	2101      	movs	r1, #1
 810345a:	4618      	mov	r0, r3
 810345c:	f000 fd68 	bl	8103f30 <RCCEx_PLL3_Config>
 8103460:	4603      	mov	r3, r0
 8103462:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103464:	e009      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103466:	2301      	movs	r3, #1
 8103468:	75fb      	strb	r3, [r7, #23]
      break;
 810346a:	e006      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810346c:	bf00      	nop
 810346e:	e004      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103470:	bf00      	nop
 8103472:	e002      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103474:	bf00      	nop
 8103476:	e000      	b.n	810347a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103478:	bf00      	nop
    }

    if(ret == HAL_OK)
 810347a:	7dfb      	ldrb	r3, [r7, #23]
 810347c:	2b00      	cmp	r3, #0
 810347e:	d10a      	bne.n	8103496 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103480:	4b2b      	ldr	r3, [pc, #172]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103484:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810348e:	4928      	ldr	r1, [pc, #160]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103490:	4313      	orrs	r3, r2
 8103492:	658b      	str	r3, [r1, #88]	; 0x58
 8103494:	e001      	b.n	810349a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103496:	7dfb      	ldrb	r3, [r7, #23]
 8103498:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81034a2:	2b00      	cmp	r3, #0
 81034a4:	d02f      	beq.n	8103506 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034ae:	d00e      	beq.n	81034ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 81034b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034b4:	d814      	bhi.n	81034e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	d015      	beq.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81034ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81034be:	d10f      	bne.n	81034e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034c0:	4b1b      	ldr	r3, [pc, #108]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034c4:	4a1a      	ldr	r2, [pc, #104]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81034cc:	e00c      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	3304      	adds	r3, #4
 81034d2:	2101      	movs	r1, #1
 81034d4:	4618      	mov	r0, r3
 81034d6:	f000 fc79 	bl	8103dcc <RCCEx_PLL2_Config>
 81034da:	4603      	mov	r3, r0
 81034dc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81034de:	e003      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034e0:	2301      	movs	r3, #1
 81034e2:	75fb      	strb	r3, [r7, #23]
      break;
 81034e4:	e000      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034e8:	7dfb      	ldrb	r3, [r7, #23]
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d109      	bne.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81034ee:	4b10      	ldr	r3, [pc, #64]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81034fa:	490d      	ldr	r1, [pc, #52]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81034fc:	4313      	orrs	r3, r2
 81034fe:	650b      	str	r3, [r1, #80]	; 0x50
 8103500:	e001      	b.n	8103506 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103502:	7dfb      	ldrb	r3, [r7, #23]
 8103504:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	681b      	ldr	r3, [r3, #0]
 810350a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810350e:	2b00      	cmp	r3, #0
 8103510:	d033      	beq.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103516:	2b03      	cmp	r3, #3
 8103518:	d81c      	bhi.n	8103554 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810351a:	a201      	add	r2, pc, #4	; (adr r2, 8103520 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103520:	0810355b 	.word	0x0810355b
 8103524:	08103535 	.word	0x08103535
 8103528:	08103543 	.word	0x08103543
 810352c:	0810355b 	.word	0x0810355b
 8103530:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103534:	4bb9      	ldr	r3, [pc, #740]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103538:	4ab8      	ldr	r2, [pc, #736]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810353e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103540:	e00c      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	3304      	adds	r3, #4
 8103546:	2102      	movs	r1, #2
 8103548:	4618      	mov	r0, r3
 810354a:	f000 fc3f 	bl	8103dcc <RCCEx_PLL2_Config>
 810354e:	4603      	mov	r3, r0
 8103550:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103552:	e003      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103554:	2301      	movs	r3, #1
 8103556:	75fb      	strb	r3, [r7, #23]
      break;
 8103558:	e000      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810355a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810355c:	7dfb      	ldrb	r3, [r7, #23]
 810355e:	2b00      	cmp	r3, #0
 8103560:	d109      	bne.n	8103576 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103562:	4bae      	ldr	r3, [pc, #696]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103566:	f023 0203 	bic.w	r2, r3, #3
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810356e:	49ab      	ldr	r1, [pc, #684]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103570:	4313      	orrs	r3, r2
 8103572:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103574:	e001      	b.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103576:	7dfb      	ldrb	r3, [r7, #23]
 8103578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	681b      	ldr	r3, [r3, #0]
 810357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103582:	2b00      	cmp	r3, #0
 8103584:	f000 8088 	beq.w	8103698 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103588:	4ba5      	ldr	r3, [pc, #660]	; (8103820 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	4aa4      	ldr	r2, [pc, #656]	; (8103820 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103594:	f7fe f9c2 	bl	810191c <HAL_GetTick>
 8103598:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810359a:	e009      	b.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810359c:	f7fe f9be 	bl	810191c <HAL_GetTick>
 81035a0:	4602      	mov	r2, r0
 81035a2:	693b      	ldr	r3, [r7, #16]
 81035a4:	1ad3      	subs	r3, r2, r3
 81035a6:	2b64      	cmp	r3, #100	; 0x64
 81035a8:	d902      	bls.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81035aa:	2303      	movs	r3, #3
 81035ac:	75fb      	strb	r3, [r7, #23]
        break;
 81035ae:	e005      	b.n	81035bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81035b0:	4b9b      	ldr	r3, [pc, #620]	; (8103820 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81035b2:	681b      	ldr	r3, [r3, #0]
 81035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035b8:	2b00      	cmp	r3, #0
 81035ba:	d0ef      	beq.n	810359c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81035bc:	7dfb      	ldrb	r3, [r7, #23]
 81035be:	2b00      	cmp	r3, #0
 81035c0:	d168      	bne.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81035c2:	4b96      	ldr	r3, [pc, #600]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035cc:	4053      	eors	r3, r2
 81035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d013      	beq.n	81035fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81035d6:	4b91      	ldr	r3, [pc, #580]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81035de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81035e0:	4b8e      	ldr	r3, [pc, #568]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035e4:	4a8d      	ldr	r2, [pc, #564]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81035ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81035ec:	4b8b      	ldr	r3, [pc, #556]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81035f0:	4a8a      	ldr	r2, [pc, #552]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81035f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81035f8:	4a88      	ldr	r2, [pc, #544]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035fa:	68fb      	ldr	r3, [r7, #12]
 81035fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103608:	d115      	bne.n	8103636 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810360a:	f7fe f987 	bl	810191c <HAL_GetTick>
 810360e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103610:	e00b      	b.n	810362a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103612:	f7fe f983 	bl	810191c <HAL_GetTick>
 8103616:	4602      	mov	r2, r0
 8103618:	693b      	ldr	r3, [r7, #16]
 810361a:	1ad3      	subs	r3, r2, r3
 810361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8103620:	4293      	cmp	r3, r2
 8103622:	d902      	bls.n	810362a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103624:	2303      	movs	r3, #3
 8103626:	75fb      	strb	r3, [r7, #23]
            break;
 8103628:	e005      	b.n	8103636 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810362a:	4b7c      	ldr	r3, [pc, #496]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810362e:	f003 0302 	and.w	r3, r3, #2
 8103632:	2b00      	cmp	r3, #0
 8103634:	d0ed      	beq.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103636:	7dfb      	ldrb	r3, [r7, #23]
 8103638:	2b00      	cmp	r3, #0
 810363a:	d128      	bne.n	810368e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810364a:	d10f      	bne.n	810366c <HAL_RCCEx_PeriphCLKConfig+0x720>
 810364c:	4b73      	ldr	r3, [pc, #460]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810364e:	691b      	ldr	r3, [r3, #16]
 8103650:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810365a:	091b      	lsrs	r3, r3, #4
 810365c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103660:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103664:	496d      	ldr	r1, [pc, #436]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103666:	4313      	orrs	r3, r2
 8103668:	610b      	str	r3, [r1, #16]
 810366a:	e005      	b.n	8103678 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810366c:	4b6b      	ldr	r3, [pc, #428]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810366e:	691b      	ldr	r3, [r3, #16]
 8103670:	4a6a      	ldr	r2, [pc, #424]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103672:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103676:	6113      	str	r3, [r2, #16]
 8103678:	4b68      	ldr	r3, [pc, #416]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810367a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103686:	4965      	ldr	r1, [pc, #404]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103688:	4313      	orrs	r3, r2
 810368a:	670b      	str	r3, [r1, #112]	; 0x70
 810368c:	e004      	b.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810368e:	7dfb      	ldrb	r3, [r7, #23]
 8103690:	75bb      	strb	r3, [r7, #22]
 8103692:	e001      	b.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103694:	7dfb      	ldrb	r3, [r7, #23]
 8103696:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	f003 0301 	and.w	r3, r3, #1
 81036a0:	2b00      	cmp	r3, #0
 81036a2:	d07e      	beq.n	81037a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81036a8:	2b28      	cmp	r3, #40	; 0x28
 81036aa:	d867      	bhi.n	810377c <HAL_RCCEx_PeriphCLKConfig+0x830>
 81036ac:	a201      	add	r2, pc, #4	; (adr r2, 81036b4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036b2:	bf00      	nop
 81036b4:	08103783 	.word	0x08103783
 81036b8:	0810377d 	.word	0x0810377d
 81036bc:	0810377d 	.word	0x0810377d
 81036c0:	0810377d 	.word	0x0810377d
 81036c4:	0810377d 	.word	0x0810377d
 81036c8:	0810377d 	.word	0x0810377d
 81036cc:	0810377d 	.word	0x0810377d
 81036d0:	0810377d 	.word	0x0810377d
 81036d4:	08103759 	.word	0x08103759
 81036d8:	0810377d 	.word	0x0810377d
 81036dc:	0810377d 	.word	0x0810377d
 81036e0:	0810377d 	.word	0x0810377d
 81036e4:	0810377d 	.word	0x0810377d
 81036e8:	0810377d 	.word	0x0810377d
 81036ec:	0810377d 	.word	0x0810377d
 81036f0:	0810377d 	.word	0x0810377d
 81036f4:	0810376b 	.word	0x0810376b
 81036f8:	0810377d 	.word	0x0810377d
 81036fc:	0810377d 	.word	0x0810377d
 8103700:	0810377d 	.word	0x0810377d
 8103704:	0810377d 	.word	0x0810377d
 8103708:	0810377d 	.word	0x0810377d
 810370c:	0810377d 	.word	0x0810377d
 8103710:	0810377d 	.word	0x0810377d
 8103714:	08103783 	.word	0x08103783
 8103718:	0810377d 	.word	0x0810377d
 810371c:	0810377d 	.word	0x0810377d
 8103720:	0810377d 	.word	0x0810377d
 8103724:	0810377d 	.word	0x0810377d
 8103728:	0810377d 	.word	0x0810377d
 810372c:	0810377d 	.word	0x0810377d
 8103730:	0810377d 	.word	0x0810377d
 8103734:	08103783 	.word	0x08103783
 8103738:	0810377d 	.word	0x0810377d
 810373c:	0810377d 	.word	0x0810377d
 8103740:	0810377d 	.word	0x0810377d
 8103744:	0810377d 	.word	0x0810377d
 8103748:	0810377d 	.word	0x0810377d
 810374c:	0810377d 	.word	0x0810377d
 8103750:	0810377d 	.word	0x0810377d
 8103754:	08103783 	.word	0x08103783
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	3304      	adds	r3, #4
 810375c:	2101      	movs	r1, #1
 810375e:	4618      	mov	r0, r3
 8103760:	f000 fb34 	bl	8103dcc <RCCEx_PLL2_Config>
 8103764:	4603      	mov	r3, r0
 8103766:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103768:	e00c      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	3324      	adds	r3, #36	; 0x24
 810376e:	2101      	movs	r1, #1
 8103770:	4618      	mov	r0, r3
 8103772:	f000 fbdd 	bl	8103f30 <RCCEx_PLL3_Config>
 8103776:	4603      	mov	r3, r0
 8103778:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810377a:	e003      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810377c:	2301      	movs	r3, #1
 810377e:	75fb      	strb	r3, [r7, #23]
      break;
 8103780:	e000      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103784:	7dfb      	ldrb	r3, [r7, #23]
 8103786:	2b00      	cmp	r3, #0
 8103788:	d109      	bne.n	810379e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810378a:	4b24      	ldr	r3, [pc, #144]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810378e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103796:	4921      	ldr	r1, [pc, #132]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103798:	4313      	orrs	r3, r2
 810379a:	654b      	str	r3, [r1, #84]	; 0x54
 810379c:	e001      	b.n	81037a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810379e:	7dfb      	ldrb	r3, [r7, #23]
 81037a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	f003 0302 	and.w	r3, r3, #2
 81037aa:	2b00      	cmp	r3, #0
 81037ac:	d03c      	beq.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81037b2:	2b05      	cmp	r3, #5
 81037b4:	d820      	bhi.n	81037f8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81037b6:	a201      	add	r2, pc, #4	; (adr r2, 81037bc <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037bc:	081037ff 	.word	0x081037ff
 81037c0:	081037d5 	.word	0x081037d5
 81037c4:	081037e7 	.word	0x081037e7
 81037c8:	081037ff 	.word	0x081037ff
 81037cc:	081037ff 	.word	0x081037ff
 81037d0:	081037ff 	.word	0x081037ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	3304      	adds	r3, #4
 81037d8:	2101      	movs	r1, #1
 81037da:	4618      	mov	r0, r3
 81037dc:	f000 faf6 	bl	8103dcc <RCCEx_PLL2_Config>
 81037e0:	4603      	mov	r3, r0
 81037e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81037e4:	e00c      	b.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	3324      	adds	r3, #36	; 0x24
 81037ea:	2101      	movs	r1, #1
 81037ec:	4618      	mov	r0, r3
 81037ee:	f000 fb9f 	bl	8103f30 <RCCEx_PLL3_Config>
 81037f2:	4603      	mov	r3, r0
 81037f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81037f6:	e003      	b.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037f8:	2301      	movs	r3, #1
 81037fa:	75fb      	strb	r3, [r7, #23]
      break;
 81037fc:	e000      	b.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81037fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103800:	7dfb      	ldrb	r3, [r7, #23]
 8103802:	2b00      	cmp	r3, #0
 8103804:	d10e      	bne.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103806:	4b05      	ldr	r3, [pc, #20]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810380a:	f023 0207 	bic.w	r2, r3, #7
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103812:	4902      	ldr	r1, [pc, #8]	; (810381c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103814:	4313      	orrs	r3, r2
 8103816:	654b      	str	r3, [r1, #84]	; 0x54
 8103818:	e006      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810381a:	bf00      	nop
 810381c:	58024400 	.word	0x58024400
 8103820:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103824:	7dfb      	ldrb	r3, [r7, #23]
 8103826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	f003 0304 	and.w	r3, r3, #4
 8103830:	2b00      	cmp	r3, #0
 8103832:	d039      	beq.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810383a:	2b05      	cmp	r3, #5
 810383c:	d820      	bhi.n	8103880 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810383e:	a201      	add	r2, pc, #4	; (adr r2, 8103844 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103844:	08103887 	.word	0x08103887
 8103848:	0810385d 	.word	0x0810385d
 810384c:	0810386f 	.word	0x0810386f
 8103850:	08103887 	.word	0x08103887
 8103854:	08103887 	.word	0x08103887
 8103858:	08103887 	.word	0x08103887
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	3304      	adds	r3, #4
 8103860:	2101      	movs	r1, #1
 8103862:	4618      	mov	r0, r3
 8103864:	f000 fab2 	bl	8103dcc <RCCEx_PLL2_Config>
 8103868:	4603      	mov	r3, r0
 810386a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810386c:	e00c      	b.n	8103888 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	3324      	adds	r3, #36	; 0x24
 8103872:	2101      	movs	r1, #1
 8103874:	4618      	mov	r0, r3
 8103876:	f000 fb5b 	bl	8103f30 <RCCEx_PLL3_Config>
 810387a:	4603      	mov	r3, r0
 810387c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810387e:	e003      	b.n	8103888 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103880:	2301      	movs	r3, #1
 8103882:	75fb      	strb	r3, [r7, #23]
      break;
 8103884:	e000      	b.n	8103888 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103888:	7dfb      	ldrb	r3, [r7, #23]
 810388a:	2b00      	cmp	r3, #0
 810388c:	d10a      	bne.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810388e:	4bb7      	ldr	r3, [pc, #732]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103892:	f023 0207 	bic.w	r2, r3, #7
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810389c:	49b3      	ldr	r1, [pc, #716]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810389e:	4313      	orrs	r3, r2
 81038a0:	658b      	str	r3, [r1, #88]	; 0x58
 81038a2:	e001      	b.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038a4:	7dfb      	ldrb	r3, [r7, #23]
 81038a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	f003 0320 	and.w	r3, r3, #32
 81038b0:	2b00      	cmp	r3, #0
 81038b2:	d04b      	beq.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81038ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81038be:	d02e      	beq.n	810391e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 81038c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81038c4:	d828      	bhi.n	8103918 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81038ca:	d02a      	beq.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81038d0:	d822      	bhi.n	8103918 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038d6:	d026      	beq.n	8103926 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81038d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038dc:	d81c      	bhi.n	8103918 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038e2:	d010      	beq.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 81038e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038e8:	d816      	bhi.n	8103918 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81038ea:	2b00      	cmp	r3, #0
 81038ec:	d01d      	beq.n	810392a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81038ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81038f2:	d111      	bne.n	8103918 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	3304      	adds	r3, #4
 81038f8:	2100      	movs	r1, #0
 81038fa:	4618      	mov	r0, r3
 81038fc:	f000 fa66 	bl	8103dcc <RCCEx_PLL2_Config>
 8103900:	4603      	mov	r3, r0
 8103902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103904:	e012      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	3324      	adds	r3, #36	; 0x24
 810390a:	2102      	movs	r1, #2
 810390c:	4618      	mov	r0, r3
 810390e:	f000 fb0f 	bl	8103f30 <RCCEx_PLL3_Config>
 8103912:	4603      	mov	r3, r0
 8103914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103916:	e009      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103918:	2301      	movs	r3, #1
 810391a:	75fb      	strb	r3, [r7, #23]
      break;
 810391c:	e006      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810391e:	bf00      	nop
 8103920:	e004      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103922:	bf00      	nop
 8103924:	e002      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103926:	bf00      	nop
 8103928:	e000      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810392c:	7dfb      	ldrb	r3, [r7, #23]
 810392e:	2b00      	cmp	r3, #0
 8103930:	d10a      	bne.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103932:	4b8e      	ldr	r3, [pc, #568]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103940:	498a      	ldr	r1, [pc, #552]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103942:	4313      	orrs	r3, r2
 8103944:	654b      	str	r3, [r1, #84]	; 0x54
 8103946:	e001      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103948:	7dfb      	ldrb	r3, [r7, #23]
 810394a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	681b      	ldr	r3, [r3, #0]
 8103950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103954:	2b00      	cmp	r3, #0
 8103956:	d04b      	beq.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810395e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103962:	d02e      	beq.n	81039c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103964:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103968:	d828      	bhi.n	81039bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810396e:	d02a      	beq.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103974:	d822      	bhi.n	81039bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810397a:	d026      	beq.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810397c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103980:	d81c      	bhi.n	81039bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103986:	d010      	beq.n	81039aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810398c:	d816      	bhi.n	81039bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810398e:	2b00      	cmp	r3, #0
 8103990:	d01d      	beq.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103996:	d111      	bne.n	81039bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	3304      	adds	r3, #4
 810399c:	2100      	movs	r1, #0
 810399e:	4618      	mov	r0, r3
 81039a0:	f000 fa14 	bl	8103dcc <RCCEx_PLL2_Config>
 81039a4:	4603      	mov	r3, r0
 81039a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81039a8:	e012      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	3324      	adds	r3, #36	; 0x24
 81039ae:	2102      	movs	r1, #2
 81039b0:	4618      	mov	r0, r3
 81039b2:	f000 fabd 	bl	8103f30 <RCCEx_PLL3_Config>
 81039b6:	4603      	mov	r3, r0
 81039b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81039ba:	e009      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039bc:	2301      	movs	r3, #1
 81039be:	75fb      	strb	r3, [r7, #23]
      break;
 81039c0:	e006      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039c2:	bf00      	nop
 81039c4:	e004      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039c6:	bf00      	nop
 81039c8:	e002      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039ca:	bf00      	nop
 81039cc:	e000      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81039ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039d0:	7dfb      	ldrb	r3, [r7, #23]
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	d10a      	bne.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81039d6:	4b65      	ldr	r3, [pc, #404]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81039e4:	4961      	ldr	r1, [pc, #388]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81039e6:	4313      	orrs	r3, r2
 81039e8:	658b      	str	r3, [r1, #88]	; 0x58
 81039ea:	e001      	b.n	81039f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039ec:	7dfb      	ldrb	r3, [r7, #23]
 81039ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	d04b      	beq.n	8103a94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103a06:	d02e      	beq.n	8103a66 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103a08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103a0c:	d828      	bhi.n	8103a60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103a12:	d02a      	beq.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103a18:	d822      	bhi.n	8103a60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103a1e:	d026      	beq.n	8103a6e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103a20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103a24:	d81c      	bhi.n	8103a60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a2a:	d010      	beq.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a30:	d816      	bhi.n	8103a60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103a32:	2b00      	cmp	r3, #0
 8103a34:	d01d      	beq.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103a3a:	d111      	bne.n	8103a60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	3304      	adds	r3, #4
 8103a40:	2100      	movs	r1, #0
 8103a42:	4618      	mov	r0, r3
 8103a44:	f000 f9c2 	bl	8103dcc <RCCEx_PLL2_Config>
 8103a48:	4603      	mov	r3, r0
 8103a4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103a4c:	e012      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	3324      	adds	r3, #36	; 0x24
 8103a52:	2102      	movs	r1, #2
 8103a54:	4618      	mov	r0, r3
 8103a56:	f000 fa6b 	bl	8103f30 <RCCEx_PLL3_Config>
 8103a5a:	4603      	mov	r3, r0
 8103a5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103a5e:	e009      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a60:	2301      	movs	r3, #1
 8103a62:	75fb      	strb	r3, [r7, #23]
      break;
 8103a64:	e006      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a66:	bf00      	nop
 8103a68:	e004      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a6a:	bf00      	nop
 8103a6c:	e002      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a6e:	bf00      	nop
 8103a70:	e000      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a74:	7dfb      	ldrb	r3, [r7, #23]
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d10a      	bne.n	8103a90 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103a7a:	4b3c      	ldr	r3, [pc, #240]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103a88:	4938      	ldr	r1, [pc, #224]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103a8a:	4313      	orrs	r3, r2
 8103a8c:	658b      	str	r3, [r1, #88]	; 0x58
 8103a8e:	e001      	b.n	8103a94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a90:	7dfb      	ldrb	r3, [r7, #23]
 8103a92:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	f003 0308 	and.w	r3, r3, #8
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d01a      	beq.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103aaa:	d10a      	bne.n	8103ac2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	3324      	adds	r3, #36	; 0x24
 8103ab0:	2102      	movs	r1, #2
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	f000 fa3c 	bl	8103f30 <RCCEx_PLL3_Config>
 8103ab8:	4603      	mov	r3, r0
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	d001      	beq.n	8103ac2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103abe:	2301      	movs	r3, #1
 8103ac0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103ac2:	4b2a      	ldr	r3, [pc, #168]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ac6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ad0:	4926      	ldr	r1, [pc, #152]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ad2:	4313      	orrs	r3, r2
 8103ad4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	f003 0310 	and.w	r3, r3, #16
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d01a      	beq.n	8103b18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103aec:	d10a      	bne.n	8103b04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	3324      	adds	r3, #36	; 0x24
 8103af2:	2102      	movs	r1, #2
 8103af4:	4618      	mov	r0, r3
 8103af6:	f000 fa1b 	bl	8103f30 <RCCEx_PLL3_Config>
 8103afa:	4603      	mov	r3, r0
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d001      	beq.n	8103b04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103b00:	2301      	movs	r3, #1
 8103b02:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103b04:	4b19      	ldr	r3, [pc, #100]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103b12:	4916      	ldr	r1, [pc, #88]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103b14:	4313      	orrs	r3, r2
 8103b16:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	d036      	beq.n	8103b92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b2e:	d01f      	beq.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b34:	d817      	bhi.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	d003      	beq.n	8103b42 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b3e:	d009      	beq.n	8103b54 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103b40:	e011      	b.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	3304      	adds	r3, #4
 8103b46:	2100      	movs	r1, #0
 8103b48:	4618      	mov	r0, r3
 8103b4a:	f000 f93f 	bl	8103dcc <RCCEx_PLL2_Config>
 8103b4e:	4603      	mov	r3, r0
 8103b50:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103b52:	e00e      	b.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	3324      	adds	r3, #36	; 0x24
 8103b58:	2102      	movs	r1, #2
 8103b5a:	4618      	mov	r0, r3
 8103b5c:	f000 f9e8 	bl	8103f30 <RCCEx_PLL3_Config>
 8103b60:	4603      	mov	r3, r0
 8103b62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103b64:	e005      	b.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b66:	2301      	movs	r3, #1
 8103b68:	75fb      	strb	r3, [r7, #23]
      break;
 8103b6a:	e002      	b.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103b6c:	58024400 	.word	0x58024400
      break;
 8103b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b72:	7dfb      	ldrb	r3, [r7, #23]
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d10a      	bne.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103b78:	4b93      	ldr	r3, [pc, #588]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b86:	4990      	ldr	r1, [pc, #576]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b88:	4313      	orrs	r3, r2
 8103b8a:	658b      	str	r3, [r1, #88]	; 0x58
 8103b8c:	e001      	b.n	8103b92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b8e:	7dfb      	ldrb	r3, [r7, #23]
 8103b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d033      	beq.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103ba8:	d01c      	beq.n	8103be4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103bae:	d816      	bhi.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103bb4:	d003      	beq.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103bba:	d007      	beq.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103bbc:	e00f      	b.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bbe:	4b82      	ldr	r3, [pc, #520]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bc2:	4a81      	ldr	r2, [pc, #516]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103bca:	e00c      	b.n	8103be6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	3324      	adds	r3, #36	; 0x24
 8103bd0:	2101      	movs	r1, #1
 8103bd2:	4618      	mov	r0, r3
 8103bd4:	f000 f9ac 	bl	8103f30 <RCCEx_PLL3_Config>
 8103bd8:	4603      	mov	r3, r0
 8103bda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103bdc:	e003      	b.n	8103be6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bde:	2301      	movs	r3, #1
 8103be0:	75fb      	strb	r3, [r7, #23]
      break;
 8103be2:	e000      	b.n	8103be6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103be6:	7dfb      	ldrb	r3, [r7, #23]
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d10a      	bne.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103bec:	4b76      	ldr	r3, [pc, #472]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103bfa:	4973      	ldr	r1, [pc, #460]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103bfc:	4313      	orrs	r3, r2
 8103bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8103c00:	e001      	b.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c02:	7dfb      	ldrb	r3, [r7, #23]
 8103c04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d029      	beq.n	8103c66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c16:	2b00      	cmp	r3, #0
 8103c18:	d003      	beq.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103c1e:	d007      	beq.n	8103c30 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103c20:	e00f      	b.n	8103c42 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c22:	4b69      	ldr	r3, [pc, #420]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c26:	4a68      	ldr	r2, [pc, #416]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103c2e:	e00b      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	3304      	adds	r3, #4
 8103c34:	2102      	movs	r1, #2
 8103c36:	4618      	mov	r0, r3
 8103c38:	f000 f8c8 	bl	8103dcc <RCCEx_PLL2_Config>
 8103c3c:	4603      	mov	r3, r0
 8103c3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103c40:	e002      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103c42:	2301      	movs	r3, #1
 8103c44:	75fb      	strb	r3, [r7, #23]
      break;
 8103c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c48:	7dfb      	ldrb	r3, [r7, #23]
 8103c4a:	2b00      	cmp	r3, #0
 8103c4c:	d109      	bne.n	8103c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103c4e:	4b5e      	ldr	r3, [pc, #376]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c5a:	495b      	ldr	r1, [pc, #364]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103c5c:	4313      	orrs	r3, r2
 8103c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103c60:	e001      	b.n	8103c66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c62:	7dfb      	ldrb	r3, [r7, #23]
 8103c64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d00a      	beq.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	3324      	adds	r3, #36	; 0x24
 8103c76:	2102      	movs	r1, #2
 8103c78:	4618      	mov	r0, r3
 8103c7a:	f000 f959 	bl	8103f30 <RCCEx_PLL3_Config>
 8103c7e:	4603      	mov	r3, r0
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d001      	beq.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103c84:	2301      	movs	r3, #1
 8103c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d030      	beq.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c9c:	d017      	beq.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103ca2:	d811      	bhi.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103ca8:	d013      	beq.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103cae:	d80b      	bhi.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d010      	beq.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103cb8:	d106      	bne.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cba:	4b43      	ldr	r3, [pc, #268]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cbe:	4a42      	ldr	r2, [pc, #264]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103cc6:	e007      	b.n	8103cd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cc8:	2301      	movs	r3, #1
 8103cca:	75fb      	strb	r3, [r7, #23]
      break;
 8103ccc:	e004      	b.n	8103cd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cce:	bf00      	nop
 8103cd0:	e002      	b.n	8103cd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cd2:	bf00      	nop
 8103cd4:	e000      	b.n	8103cd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cd8:	7dfb      	ldrb	r3, [r7, #23]
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d109      	bne.n	8103cf2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103cde:	4b3a      	ldr	r3, [pc, #232]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103cea:	4937      	ldr	r1, [pc, #220]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103cec:	4313      	orrs	r3, r2
 8103cee:	654b      	str	r3, [r1, #84]	; 0x54
 8103cf0:	e001      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cf2:	7dfb      	ldrb	r3, [r7, #23]
 8103cf4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103cfe:	2b00      	cmp	r3, #0
 8103d00:	d008      	beq.n	8103d14 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103d02:	4b31      	ldr	r3, [pc, #196]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103d0e:	492e      	ldr	r1, [pc, #184]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d10:	4313      	orrs	r3, r2
 8103d12:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d009      	beq.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103d20:	4b29      	ldr	r3, [pc, #164]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d22:	691b      	ldr	r3, [r3, #16]
 8103d24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103d2e:	4926      	ldr	r1, [pc, #152]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d30:	4313      	orrs	r3, r2
 8103d32:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103d3c:	2b00      	cmp	r3, #0
 8103d3e:	d008      	beq.n	8103d52 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103d40:	4b21      	ldr	r3, [pc, #132]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103d4c:	491e      	ldr	r1, [pc, #120]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d4e:	4313      	orrs	r3, r2
 8103d50:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	d00d      	beq.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103d5e:	4b1a      	ldr	r3, [pc, #104]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d60:	691b      	ldr	r3, [r3, #16]
 8103d62:	4a19      	ldr	r2, [pc, #100]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103d68:	6113      	str	r3, [r2, #16]
 8103d6a:	4b17      	ldr	r3, [pc, #92]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d6c:	691a      	ldr	r2, [r3, #16]
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103d74:	4914      	ldr	r1, [pc, #80]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d76:	4313      	orrs	r3, r2
 8103d78:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	2b00      	cmp	r3, #0
 8103d80:	da08      	bge.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103d82:	4b11      	ldr	r3, [pc, #68]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d8e:	490e      	ldr	r1, [pc, #56]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103d90:	4313      	orrs	r3, r2
 8103d92:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d009      	beq.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103da0:	4b09      	ldr	r3, [pc, #36]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103da4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103dae:	4906      	ldr	r1, [pc, #24]	; (8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103db0:	4313      	orrs	r3, r2
 8103db2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103db4:	7dbb      	ldrb	r3, [r7, #22]
 8103db6:	2b00      	cmp	r3, #0
 8103db8:	d101      	bne.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103dba:	2300      	movs	r3, #0
 8103dbc:	e000      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103dbe:	2301      	movs	r3, #1
}
 8103dc0:	4618      	mov	r0, r3
 8103dc2:	3718      	adds	r7, #24
 8103dc4:	46bd      	mov	sp, r7
 8103dc6:	bd80      	pop	{r7, pc}
 8103dc8:	58024400 	.word	0x58024400

08103dcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103dcc:	b580      	push	{r7, lr}
 8103dce:	b084      	sub	sp, #16
 8103dd0:	af00      	add	r7, sp, #0
 8103dd2:	6078      	str	r0, [r7, #4]
 8103dd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103dd6:	2300      	movs	r3, #0
 8103dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103dda:	4b54      	ldr	r3, [pc, #336]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103dde:	f003 0303 	and.w	r3, r3, #3
 8103de2:	2b03      	cmp	r3, #3
 8103de4:	d101      	bne.n	8103dea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103de6:	2301      	movs	r3, #1
 8103de8:	e09b      	b.n	8103f22 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103dea:	4b50      	ldr	r3, [pc, #320]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	4a4f      	ldr	r2, [pc, #316]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103df6:	f7fd fd91 	bl	810191c <HAL_GetTick>
 8103dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103dfc:	e008      	b.n	8103e10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103dfe:	f7fd fd8d 	bl	810191c <HAL_GetTick>
 8103e02:	4602      	mov	r2, r0
 8103e04:	68bb      	ldr	r3, [r7, #8]
 8103e06:	1ad3      	subs	r3, r2, r3
 8103e08:	2b02      	cmp	r3, #2
 8103e0a:	d901      	bls.n	8103e10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103e0c:	2303      	movs	r3, #3
 8103e0e:	e088      	b.n	8103f22 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103e10:	4b46      	ldr	r3, [pc, #280]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103e18:	2b00      	cmp	r3, #0
 8103e1a:	d1f0      	bne.n	8103dfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103e1c:	4b43      	ldr	r3, [pc, #268]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	031b      	lsls	r3, r3, #12
 8103e2a:	4940      	ldr	r1, [pc, #256]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e2c:	4313      	orrs	r3, r2
 8103e2e:	628b      	str	r3, [r1, #40]	; 0x28
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	685b      	ldr	r3, [r3, #4]
 8103e34:	3b01      	subs	r3, #1
 8103e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	689b      	ldr	r3, [r3, #8]
 8103e3e:	3b01      	subs	r3, #1
 8103e40:	025b      	lsls	r3, r3, #9
 8103e42:	b29b      	uxth	r3, r3
 8103e44:	431a      	orrs	r2, r3
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	68db      	ldr	r3, [r3, #12]
 8103e4a:	3b01      	subs	r3, #1
 8103e4c:	041b      	lsls	r3, r3, #16
 8103e4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103e52:	431a      	orrs	r2, r3
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	691b      	ldr	r3, [r3, #16]
 8103e58:	3b01      	subs	r3, #1
 8103e5a:	061b      	lsls	r3, r3, #24
 8103e5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103e60:	4932      	ldr	r1, [pc, #200]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e62:	4313      	orrs	r3, r2
 8103e64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103e66:	4b31      	ldr	r3, [pc, #196]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103e6e:	687b      	ldr	r3, [r7, #4]
 8103e70:	695b      	ldr	r3, [r3, #20]
 8103e72:	492e      	ldr	r1, [pc, #184]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e74:	4313      	orrs	r3, r2
 8103e76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103e78:	4b2c      	ldr	r3, [pc, #176]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e7c:	f023 0220 	bic.w	r2, r3, #32
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	699b      	ldr	r3, [r3, #24]
 8103e84:	4929      	ldr	r1, [pc, #164]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e86:	4313      	orrs	r3, r2
 8103e88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103e8a:	4b28      	ldr	r3, [pc, #160]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e8e:	4a27      	ldr	r2, [pc, #156]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e90:	f023 0310 	bic.w	r3, r3, #16
 8103e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103e96:	4b25      	ldr	r3, [pc, #148]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103e9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103ea2:	687a      	ldr	r2, [r7, #4]
 8103ea4:	69d2      	ldr	r2, [r2, #28]
 8103ea6:	00d2      	lsls	r2, r2, #3
 8103ea8:	4920      	ldr	r1, [pc, #128]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103eaa:	4313      	orrs	r3, r2
 8103eac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103eae:	4b1f      	ldr	r3, [pc, #124]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eb2:	4a1e      	ldr	r2, [pc, #120]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103eb4:	f043 0310 	orr.w	r3, r3, #16
 8103eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103eba:	683b      	ldr	r3, [r7, #0]
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d106      	bne.n	8103ece <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103ec0:	4b1a      	ldr	r3, [pc, #104]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ec4:	4a19      	ldr	r2, [pc, #100]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103ecc:	e00f      	b.n	8103eee <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103ece:	683b      	ldr	r3, [r7, #0]
 8103ed0:	2b01      	cmp	r3, #1
 8103ed2:	d106      	bne.n	8103ee2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103ed4:	4b15      	ldr	r3, [pc, #84]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ed8:	4a14      	ldr	r2, [pc, #80]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103ee0:	e005      	b.n	8103eee <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103ee2:	4b12      	ldr	r3, [pc, #72]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ee6:	4a11      	ldr	r2, [pc, #68]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103eec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103eee:	4b0f      	ldr	r3, [pc, #60]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	4a0e      	ldr	r2, [pc, #56]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103efa:	f7fd fd0f 	bl	810191c <HAL_GetTick>
 8103efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103f00:	e008      	b.n	8103f14 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103f02:	f7fd fd0b 	bl	810191c <HAL_GetTick>
 8103f06:	4602      	mov	r2, r0
 8103f08:	68bb      	ldr	r3, [r7, #8]
 8103f0a:	1ad3      	subs	r3, r2, r3
 8103f0c:	2b02      	cmp	r3, #2
 8103f0e:	d901      	bls.n	8103f14 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103f10:	2303      	movs	r3, #3
 8103f12:	e006      	b.n	8103f22 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103f14:	4b05      	ldr	r3, [pc, #20]	; (8103f2c <RCCEx_PLL2_Config+0x160>)
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d0f0      	beq.n	8103f02 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8103f22:	4618      	mov	r0, r3
 8103f24:	3710      	adds	r7, #16
 8103f26:	46bd      	mov	sp, r7
 8103f28:	bd80      	pop	{r7, pc}
 8103f2a:	bf00      	nop
 8103f2c:	58024400 	.word	0x58024400

08103f30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103f30:	b580      	push	{r7, lr}
 8103f32:	b084      	sub	sp, #16
 8103f34:	af00      	add	r7, sp, #0
 8103f36:	6078      	str	r0, [r7, #4]
 8103f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103f3a:	2300      	movs	r3, #0
 8103f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103f3e:	4b54      	ldr	r3, [pc, #336]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f42:	f003 0303 	and.w	r3, r3, #3
 8103f46:	2b03      	cmp	r3, #3
 8103f48:	d101      	bne.n	8103f4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103f4a:	2301      	movs	r3, #1
 8103f4c:	e09b      	b.n	8104086 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103f4e:	4b50      	ldr	r3, [pc, #320]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a4f      	ldr	r2, [pc, #316]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103f5a:	f7fd fcdf 	bl	810191c <HAL_GetTick>
 8103f5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103f60:	e008      	b.n	8103f74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103f62:	f7fd fcdb 	bl	810191c <HAL_GetTick>
 8103f66:	4602      	mov	r2, r0
 8103f68:	68bb      	ldr	r3, [r7, #8]
 8103f6a:	1ad3      	subs	r3, r2, r3
 8103f6c:	2b02      	cmp	r3, #2
 8103f6e:	d901      	bls.n	8103f74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103f70:	2303      	movs	r3, #3
 8103f72:	e088      	b.n	8104086 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103f74:	4b46      	ldr	r3, [pc, #280]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d1f0      	bne.n	8103f62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103f80:	4b43      	ldr	r3, [pc, #268]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	051b      	lsls	r3, r3, #20
 8103f8e:	4940      	ldr	r1, [pc, #256]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103f90:	4313      	orrs	r3, r2
 8103f92:	628b      	str	r3, [r1, #40]	; 0x28
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	685b      	ldr	r3, [r3, #4]
 8103f98:	3b01      	subs	r3, #1
 8103f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	689b      	ldr	r3, [r3, #8]
 8103fa2:	3b01      	subs	r3, #1
 8103fa4:	025b      	lsls	r3, r3, #9
 8103fa6:	b29b      	uxth	r3, r3
 8103fa8:	431a      	orrs	r2, r3
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	68db      	ldr	r3, [r3, #12]
 8103fae:	3b01      	subs	r3, #1
 8103fb0:	041b      	lsls	r3, r3, #16
 8103fb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103fb6:	431a      	orrs	r2, r3
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	691b      	ldr	r3, [r3, #16]
 8103fbc:	3b01      	subs	r3, #1
 8103fbe:	061b      	lsls	r3, r3, #24
 8103fc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103fc4:	4932      	ldr	r1, [pc, #200]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103fc6:	4313      	orrs	r3, r2
 8103fc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103fca:	4b31      	ldr	r3, [pc, #196]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	695b      	ldr	r3, [r3, #20]
 8103fd6:	492e      	ldr	r1, [pc, #184]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103fd8:	4313      	orrs	r3, r2
 8103fda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103fdc:	4b2c      	ldr	r3, [pc, #176]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fe0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	699b      	ldr	r3, [r3, #24]
 8103fe8:	4929      	ldr	r1, [pc, #164]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103fea:	4313      	orrs	r3, r2
 8103fec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103fee:	4b28      	ldr	r3, [pc, #160]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ff2:	4a27      	ldr	r2, [pc, #156]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103ffa:	4b25      	ldr	r3, [pc, #148]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8103ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104002:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104006:	687a      	ldr	r2, [r7, #4]
 8104008:	69d2      	ldr	r2, [r2, #28]
 810400a:	00d2      	lsls	r2, r2, #3
 810400c:	4920      	ldr	r1, [pc, #128]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 810400e:	4313      	orrs	r3, r2
 8104010:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104012:	4b1f      	ldr	r3, [pc, #124]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8104014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104016:	4a1e      	ldr	r2, [pc, #120]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8104018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810401c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810401e:	683b      	ldr	r3, [r7, #0]
 8104020:	2b00      	cmp	r3, #0
 8104022:	d106      	bne.n	8104032 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104024:	4b1a      	ldr	r3, [pc, #104]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8104026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104028:	4a19      	ldr	r2, [pc, #100]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 810402a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810402e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104030:	e00f      	b.n	8104052 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104032:	683b      	ldr	r3, [r7, #0]
 8104034:	2b01      	cmp	r3, #1
 8104036:	d106      	bne.n	8104046 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104038:	4b15      	ldr	r3, [pc, #84]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 810403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810403c:	4a14      	ldr	r2, [pc, #80]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 810403e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104042:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104044:	e005      	b.n	8104052 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104046:	4b12      	ldr	r3, [pc, #72]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8104048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810404a:	4a11      	ldr	r2, [pc, #68]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 810404c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104050:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104052:	4b0f      	ldr	r3, [pc, #60]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a0e      	ldr	r2, [pc, #56]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 8104058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810405c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810405e:	f7fd fc5d 	bl	810191c <HAL_GetTick>
 8104062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104064:	e008      	b.n	8104078 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104066:	f7fd fc59 	bl	810191c <HAL_GetTick>
 810406a:	4602      	mov	r2, r0
 810406c:	68bb      	ldr	r3, [r7, #8]
 810406e:	1ad3      	subs	r3, r2, r3
 8104070:	2b02      	cmp	r3, #2
 8104072:	d901      	bls.n	8104078 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104074:	2303      	movs	r3, #3
 8104076:	e006      	b.n	8104086 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104078:	4b05      	ldr	r3, [pc, #20]	; (8104090 <RCCEx_PLL3_Config+0x160>)
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104080:	2b00      	cmp	r3, #0
 8104082:	d0f0      	beq.n	8104066 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104084:	7bfb      	ldrb	r3, [r7, #15]
}
 8104086:	4618      	mov	r0, r3
 8104088:	3710      	adds	r7, #16
 810408a:	46bd      	mov	sp, r7
 810408c:	bd80      	pop	{r7, pc}
 810408e:	bf00      	nop
 8104090:	58024400 	.word	0x58024400

08104094 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104094:	b580      	push	{r7, lr}
 8104096:	b084      	sub	sp, #16
 8104098:	af00      	add	r7, sp, #0
 810409a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810409c:	2300      	movs	r3, #0
 810409e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	2b00      	cmp	r3, #0
 81040a4:	d101      	bne.n	81040aa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 81040a6:	2301      	movs	r3, #1
 81040a8:	e0eb      	b.n	8104282 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	2200      	movs	r2, #0
 81040ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a75      	ldr	r2, [pc, #468]	; (810428c <HAL_SPI_Init+0x1f8>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d00f      	beq.n	81040da <HAL_SPI_Init+0x46>
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a74      	ldr	r2, [pc, #464]	; (8104290 <HAL_SPI_Init+0x1fc>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d00a      	beq.n	81040da <HAL_SPI_Init+0x46>
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a72      	ldr	r2, [pc, #456]	; (8104294 <HAL_SPI_Init+0x200>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d005      	beq.n	81040da <HAL_SPI_Init+0x46>
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	68db      	ldr	r3, [r3, #12]
 81040d2:	2b0f      	cmp	r3, #15
 81040d4:	d901      	bls.n	81040da <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 81040d6:	2301      	movs	r3, #1
 81040d8:	e0d3      	b.n	8104282 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81040da:	6878      	ldr	r0, [r7, #4]
 81040dc:	f000 f8dc 	bl	8104298 <SPI_GetPacketSize>
 81040e0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a69      	ldr	r2, [pc, #420]	; (810428c <HAL_SPI_Init+0x1f8>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d00c      	beq.n	8104106 <HAL_SPI_Init+0x72>
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a67      	ldr	r2, [pc, #412]	; (8104290 <HAL_SPI_Init+0x1fc>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d007      	beq.n	8104106 <HAL_SPI_Init+0x72>
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a66      	ldr	r2, [pc, #408]	; (8104294 <HAL_SPI_Init+0x200>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d002      	beq.n	8104106 <HAL_SPI_Init+0x72>
 8104100:	68bb      	ldr	r3, [r7, #8]
 8104102:	2b08      	cmp	r3, #8
 8104104:	d811      	bhi.n	810412a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810410a:	4a60      	ldr	r2, [pc, #384]	; (810428c <HAL_SPI_Init+0x1f8>)
 810410c:	4293      	cmp	r3, r2
 810410e:	d009      	beq.n	8104124 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	4a5e      	ldr	r2, [pc, #376]	; (8104290 <HAL_SPI_Init+0x1fc>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d004      	beq.n	8104124 <HAL_SPI_Init+0x90>
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	681b      	ldr	r3, [r3, #0]
 810411e:	4a5d      	ldr	r2, [pc, #372]	; (8104294 <HAL_SPI_Init+0x200>)
 8104120:	4293      	cmp	r3, r2
 8104122:	d104      	bne.n	810412e <HAL_SPI_Init+0x9a>
 8104124:	68bb      	ldr	r3, [r7, #8]
 8104126:	2b10      	cmp	r3, #16
 8104128:	d901      	bls.n	810412e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810412a:	2301      	movs	r3, #1
 810412c:	e0a9      	b.n	8104282 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104134:	b2db      	uxtb	r3, r3
 8104136:	2b00      	cmp	r3, #0
 8104138:	d106      	bne.n	8104148 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	2200      	movs	r2, #0
 810413e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104142:	6878      	ldr	r0, [r7, #4]
 8104144:	f7fd f950 	bl	81013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	2202      	movs	r2, #2
 810414c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	681a      	ldr	r2, [r3, #0]
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	f022 0201 	bic.w	r2, r2, #1
 810415e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	699b      	ldr	r3, [r3, #24]
 8104164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104168:	d119      	bne.n	810419e <HAL_SPI_Init+0x10a>
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	685b      	ldr	r3, [r3, #4]
 810416e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104172:	d103      	bne.n	810417c <HAL_SPI_Init+0xe8>
 8104174:	687b      	ldr	r3, [r7, #4]
 8104176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104178:	2b00      	cmp	r3, #0
 810417a:	d008      	beq.n	810418e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104180:	2b00      	cmp	r3, #0
 8104182:	d10c      	bne.n	810419e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810418c:	d107      	bne.n	810419e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	681a      	ldr	r2, [r3, #0]
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810419c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	69da      	ldr	r2, [r3, #28]
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041a6:	431a      	orrs	r2, r3
 81041a8:	68fb      	ldr	r3, [r7, #12]
 81041aa:	431a      	orrs	r2, r3
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81041b0:	ea42 0103 	orr.w	r1, r2, r3
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	68da      	ldr	r2, [r3, #12]
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	430a      	orrs	r2, r1
 81041be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041c8:	431a      	orrs	r2, r3
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81041ce:	431a      	orrs	r2, r3
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	699b      	ldr	r3, [r3, #24]
 81041d4:	431a      	orrs	r2, r3
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	691b      	ldr	r3, [r3, #16]
 81041da:	431a      	orrs	r2, r3
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	695b      	ldr	r3, [r3, #20]
 81041e0:	431a      	orrs	r2, r3
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	6a1b      	ldr	r3, [r3, #32]
 81041e6:	431a      	orrs	r2, r3
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	685b      	ldr	r3, [r3, #4]
 81041ec:	431a      	orrs	r2, r3
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041f2:	431a      	orrs	r2, r3
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	689b      	ldr	r3, [r3, #8]
 81041f8:	431a      	orrs	r2, r3
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81041fe:	ea42 0103 	orr.w	r1, r2, r3
 8104202:	687b      	ldr	r3, [r7, #4]
 8104204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	430a      	orrs	r2, r1
 810420c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	685b      	ldr	r3, [r3, #4]
 8104212:	2b00      	cmp	r3, #0
 8104214:	d113      	bne.n	810423e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	689b      	ldr	r3, [r3, #8]
 810421c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104228:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	689b      	ldr	r3, [r3, #8]
 8104230:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810423c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	681b      	ldr	r3, [r3, #0]
 8104248:	f022 0201 	bic.w	r2, r2, #1
 810424c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	685b      	ldr	r3, [r3, #4]
 8104252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104256:	2b00      	cmp	r3, #0
 8104258:	d00a      	beq.n	8104270 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	68db      	ldr	r3, [r3, #12]
 8104260:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	430a      	orrs	r2, r1
 810426e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	2200      	movs	r2, #0
 8104274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	2201      	movs	r2, #1
 810427c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104280:	2300      	movs	r3, #0
}
 8104282:	4618      	mov	r0, r3
 8104284:	3710      	adds	r7, #16
 8104286:	46bd      	mov	sp, r7
 8104288:	bd80      	pop	{r7, pc}
 810428a:	bf00      	nop
 810428c:	40013000 	.word	0x40013000
 8104290:	40003800 	.word	0x40003800
 8104294:	40003c00 	.word	0x40003c00

08104298 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104298:	b480      	push	{r7}
 810429a:	b085      	sub	sp, #20
 810429c:	af00      	add	r7, sp, #0
 810429e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81042a4:	095b      	lsrs	r3, r3, #5
 81042a6:	3301      	adds	r3, #1
 81042a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	68db      	ldr	r3, [r3, #12]
 81042ae:	3301      	adds	r3, #1
 81042b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81042b2:	68bb      	ldr	r3, [r7, #8]
 81042b4:	3307      	adds	r3, #7
 81042b6:	08db      	lsrs	r3, r3, #3
 81042b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81042ba:	68bb      	ldr	r3, [r7, #8]
 81042bc:	68fa      	ldr	r2, [r7, #12]
 81042be:	fb02 f303 	mul.w	r3, r2, r3
}
 81042c2:	4618      	mov	r0, r3
 81042c4:	3714      	adds	r7, #20
 81042c6:	46bd      	mov	sp, r7
 81042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042cc:	4770      	bx	lr

081042ce <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 81042ce:	b084      	sub	sp, #16
 81042d0:	b580      	push	{r7, lr}
 81042d2:	b086      	sub	sp, #24
 81042d4:	af04      	add	r7, sp, #16
 81042d6:	f107 0c10 	add.w	ip, r7, #16
 81042da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 81042de:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81042e2:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, HAL_MAX_DELAY);
 81042e4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 81042e8:	b299      	uxth	r1, r3
 81042ea:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81042ee:	b29a      	uxth	r2, r3
 81042f0:	f04f 33ff 	mov.w	r3, #4294967295
 81042f4:	9302      	str	r3, [sp, #8]
 81042f6:	2301      	movs	r3, #1
 81042f8:	9301      	str	r3, [sp, #4]
 81042fa:	1d3b      	adds	r3, r7, #4
 81042fc:	9300      	str	r3, [sp, #0]
 81042fe:	2301      	movs	r3, #1
 8104300:	f107 0010 	add.w	r0, r7, #16
 8104304:	f7fd ff24 	bl	8102150 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8104308:	200a      	movs	r0, #10
 810430a:	f7fd fb13 	bl	8101934 <HAL_Delay>
}
 810430e:	bf00      	nop
 8104310:	3708      	adds	r7, #8
 8104312:	46bd      	mov	sp, r7
 8104314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8104318:	b004      	add	sp, #16
 810431a:	4770      	bx	lr

0810431c <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 810431c:	b084      	sub	sp, #16
 810431e:	b580      	push	{r7, lr}
 8104320:	b084      	sub	sp, #16
 8104322:	af04      	add	r7, sp, #16
 8104324:	f107 0c08 	add.w	ip, r7, #8
 8104328:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, HAL_MAX_DELAY-1);
 810432c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8104330:	b299      	uxth	r1, r3
 8104332:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8104336:	b29a      	uxth	r2, r3
 8104338:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 810433c:	b29b      	uxth	r3, r3
 810433e:	f06f 0001 	mvn.w	r0, #1
 8104342:	9002      	str	r0, [sp, #8]
 8104344:	9301      	str	r3, [sp, #4]
 8104346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8104348:	9300      	str	r3, [sp, #0]
 810434a:	2301      	movs	r3, #1
 810434c:	f107 0008 	add.w	r0, r7, #8
 8104350:	f7fe f812 	bl	8102378 <HAL_I2C_Mem_Read>
}
 8104354:	bf00      	nop
 8104356:	46bd      	mov	sp, r7
 8104358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810435c:	b004      	add	sp, #16
 810435e:	4770      	bx	lr

08104360 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 8104360:	b084      	sub	sp, #16
 8104362:	b5b0      	push	{r4, r5, r7, lr}
 8104364:	b092      	sub	sp, #72	; 0x48
 8104366:	af12      	add	r7, sp, #72	; 0x48
 8104368:	f107 0410 	add.w	r4, r7, #16
 810436c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8104370:	2325      	movs	r3, #37	; 0x25
 8104372:	220c      	movs	r2, #12
 8104374:	9211      	str	r2, [sp, #68]	; 0x44
 8104376:	9310      	str	r3, [sp, #64]	; 0x40
 8104378:	466d      	mov	r5, sp
 810437a:	f107 0420 	add.w	r4, r7, #32
 810437e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810438a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810438e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104392:	f107 0310 	add.w	r3, r7, #16
 8104396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104398:	f7ff ff99 	bl	81042ce <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 810439c:	2226      	movs	r2, #38	; 0x26
 810439e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81043a2:	9311      	str	r3, [sp, #68]	; 0x44
 81043a4:	9210      	str	r2, [sp, #64]	; 0x40
 81043a6:	466d      	mov	r5, sp
 81043a8:	f107 0420 	add.w	r4, r7, #32
 81043ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043c0:	f107 0310 	add.w	r3, r7, #16
 81043c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043c6:	f7ff ff82 	bl	81042ce <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 81043ca:	2263      	movs	r2, #99	; 0x63
 81043cc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81043d0:	9311      	str	r3, [sp, #68]	; 0x44
 81043d2:	9210      	str	r2, [sp, #64]	; 0x40
 81043d4:	466d      	mov	r5, sp
 81043d6:	f107 0420 	add.w	r4, r7, #32
 81043da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81043e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81043e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81043ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81043ee:	f107 0310 	add.w	r3, r7, #16
 81043f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81043f4:	f7ff ff6b 	bl	81042ce <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 81043f8:	2227      	movs	r2, #39	; 0x27
 81043fa:	2380      	movs	r3, #128	; 0x80
 81043fc:	f043 0301 	orr.w	r3, r3, #1
 8104400:	b2db      	uxtb	r3, r3
 8104402:	9311      	str	r3, [sp, #68]	; 0x44
 8104404:	9210      	str	r2, [sp, #64]	; 0x40
 8104406:	466d      	mov	r5, sp
 8104408:	f107 0420 	add.w	r4, r7, #32
 810440c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810440e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104418:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810441c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104420:	f107 0310 	add.w	r3, r7, #16
 8104424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104426:	f7ff ff52 	bl	81042ce <writeRegister>
}
 810442a:	bf00      	nop
 810442c:	46bd      	mov	sp, r7
 810442e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104432:	b004      	add	sp, #16
 8104434:	4770      	bx	lr

08104436 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8104436:	b084      	sub	sp, #16
 8104438:	b5b0      	push	{r4, r5, r7, lr}
 810443a:	b094      	sub	sp, #80	; 0x50
 810443c:	af14      	add	r7, sp, #80	; 0x50
 810443e:	f107 0410 	add.w	r4, r7, #16
 8104442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8104446:	2225      	movs	r2, #37	; 0x25
 8104448:	210c      	movs	r1, #12
 810444a:	2380      	movs	r3, #128	; 0x80
 810444c:	430b      	orrs	r3, r1
 810444e:	b2db      	uxtb	r3, r3
 8104450:	9311      	str	r3, [sp, #68]	; 0x44
 8104452:	9210      	str	r2, [sp, #64]	; 0x40
 8104454:	466d      	mov	r5, sp
 8104456:	f107 0420 	add.w	r4, r7, #32
 810445a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810445c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810445e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104466:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810446a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810446e:	f107 0310 	add.w	r3, r7, #16
 8104472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104474:	f7ff ff2b 	bl	81042ce <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 8104478:	2226      	movs	r2, #38	; 0x26
 810447a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 810447e:	9311      	str	r3, [sp, #68]	; 0x44
 8104480:	9210      	str	r2, [sp, #64]	; 0x40
 8104482:	466d      	mov	r5, sp
 8104484:	f107 0420 	add.w	r4, r7, #32
 8104488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810448a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810448c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810448e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104494:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104498:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810449c:	f107 0310 	add.w	r3, r7, #16
 81044a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044a2:	f7ff ff14 	bl	81042ce <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 81044a6:	2227      	movs	r2, #39	; 0x27
 81044a8:	2180      	movs	r1, #128	; 0x80
 81044aa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81044ae:	430b      	orrs	r3, r1
 81044b0:	b2db      	uxtb	r3, r3
 81044b2:	9311      	str	r3, [sp, #68]	; 0x44
 81044b4:	9210      	str	r2, [sp, #64]	; 0x40
 81044b6:	466d      	mov	r5, sp
 81044b8:	f107 0420 	add.w	r4, r7, #32
 81044bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81044cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81044d0:	f107 0310 	add.w	r3, r7, #16
 81044d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81044d6:	f7ff fefa 	bl	81042ce <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 81044da:	2001      	movs	r0, #1
 81044dc:	f7fd fa2a 	bl	8101934 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 81044e0:	2249      	movs	r2, #73	; 0x49
 81044e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81044e4:	9312      	str	r3, [sp, #72]	; 0x48
 81044e6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 81044ea:	9311      	str	r3, [sp, #68]	; 0x44
 81044ec:	9210      	str	r2, [sp, #64]	; 0x40
 81044ee:	466d      	mov	r5, sp
 81044f0:	f107 0420 	add.w	r4, r7, #32
 81044f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81044fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81044fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104500:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104504:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104508:	f107 0310 	add.w	r3, r7, #16
 810450c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810450e:	f7ff ff05 	bl	810431c <readRegisters>
}
 8104512:	bf00      	nop
 8104514:	46bd      	mov	sp, r7
 8104516:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 810451a:	b004      	add	sp, #16
 810451c:	4770      	bx	lr
	...

08104520 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 8104520:	b084      	sub	sp, #16
 8104522:	b5b0      	push	{r4, r5, r7, lr}
 8104524:	b094      	sub	sp, #80	; 0x50
 8104526:	af14      	add	r7, sp, #80	; 0x50
 8104528:	f107 0410 	add.w	r4, r7, #16
 810452c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 8104530:	2375      	movs	r3, #117	; 0x75
 8104532:	4a0f      	ldr	r2, [pc, #60]	; (8104570 <whoAmI+0x50>)
 8104534:	9212      	str	r2, [sp, #72]	; 0x48
 8104536:	2201      	movs	r2, #1
 8104538:	9211      	str	r2, [sp, #68]	; 0x44
 810453a:	9310      	str	r3, [sp, #64]	; 0x40
 810453c:	466d      	mov	r5, sp
 810453e:	f107 0420 	add.w	r4, r7, #32
 8104542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810454a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810454c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810454e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104552:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104556:	f107 0310 	add.w	r3, r7, #16
 810455a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810455c:	f7ff fede 	bl	810431c <readRegisters>

	// return the register value
	return _buffer[0];
 8104560:	4b03      	ldr	r3, [pc, #12]	; (8104570 <whoAmI+0x50>)
 8104562:	781b      	ldrb	r3, [r3, #0]
}
 8104564:	4618      	mov	r0, r3
 8104566:	46bd      	mov	sp, r7
 8104568:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 810456c:	b004      	add	sp, #16
 810456e:	4770      	bx	lr
 8104570:	100002b0 	.word	0x100002b0

08104574 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 8104574:	b084      	sub	sp, #16
 8104576:	b5b0      	push	{r4, r5, r7, lr}
 8104578:	b094      	sub	sp, #80	; 0x50
 810457a:	af14      	add	r7, sp, #80	; 0x50
 810457c:	f107 0410 	add.w	r4, r7, #16
 8104580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 8104584:	2300      	movs	r3, #0
 8104586:	4a0f      	ldr	r2, [pc, #60]	; (81045c4 <whoAmIAK8963+0x50>)
 8104588:	9212      	str	r2, [sp, #72]	; 0x48
 810458a:	2201      	movs	r2, #1
 810458c:	9211      	str	r2, [sp, #68]	; 0x44
 810458e:	9310      	str	r3, [sp, #64]	; 0x40
 8104590:	466d      	mov	r5, sp
 8104592:	f107 0420 	add.w	r4, r7, #32
 8104596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810459a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810459c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810459e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81045a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045aa:	f107 0310 	add.w	r3, r7, #16
 81045ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81045b0:	f7ff ff41 	bl	8104436 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 81045b4:	4b03      	ldr	r3, [pc, #12]	; (81045c4 <whoAmIAK8963+0x50>)
 81045b6:	781b      	ldrb	r3, [r3, #0]
}
 81045b8:	4618      	mov	r0, r3
 81045ba:	46bd      	mov	sp, r7
 81045bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81045c0:	b004      	add	sp, #16
 81045c2:	4770      	bx	lr
 81045c4:	100002b0 	.word	0x100002b0

081045c8 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 81045c8:	b084      	sub	sp, #16
 81045ca:	b5b0      	push	{r4, r5, r7, lr}
 81045cc:	b096      	sub	sp, #88	; 0x58
 81045ce:	af14      	add	r7, sp, #80	; 0x50
 81045d0:	f107 0418 	add.w	r4, r7, #24
 81045d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 81045d8:	236b      	movs	r3, #107	; 0x6b
 81045da:	2201      	movs	r2, #1
 81045dc:	9211      	str	r2, [sp, #68]	; 0x44
 81045de:	9310      	str	r3, [sp, #64]	; 0x40
 81045e0:	466d      	mov	r5, sp
 81045e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81045e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81045f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81045f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81045f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81045fa:	f107 0318 	add.w	r3, r7, #24
 81045fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104600:	f7ff fe65 	bl	81042ce <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 8104604:	236a      	movs	r3, #106	; 0x6a
 8104606:	2220      	movs	r2, #32
 8104608:	9211      	str	r2, [sp, #68]	; 0x44
 810460a:	9310      	str	r3, [sp, #64]	; 0x40
 810460c:	466d      	mov	r5, sp
 810460e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810461e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104622:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104626:	f107 0318 	add.w	r3, r7, #24
 810462a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810462c:	f7ff fe4f 	bl	81042ce <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 8104630:	2324      	movs	r3, #36	; 0x24
 8104632:	220d      	movs	r2, #13
 8104634:	9211      	str	r2, [sp, #68]	; 0x44
 8104636:	9310      	str	r3, [sp, #64]	; 0x40
 8104638:	466d      	mov	r5, sp
 810463a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810463e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810464a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810464e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104652:	f107 0318 	add.w	r3, r7, #24
 8104656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104658:	f7ff fe39 	bl	81042ce <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 810465c:	230a      	movs	r3, #10
 810465e:	2200      	movs	r2, #0
 8104660:	9211      	str	r2, [sp, #68]	; 0x44
 8104662:	9310      	str	r3, [sp, #64]	; 0x40
 8104664:	466d      	mov	r5, sp
 8104666:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810466a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810466c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810466e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104676:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810467a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810467e:	f107 0318 	add.w	r3, r7, #24
 8104682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104684:	f7ff fe6c 	bl	8104360 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 8104688:	236b      	movs	r3, #107	; 0x6b
 810468a:	2280      	movs	r2, #128	; 0x80
 810468c:	9211      	str	r2, [sp, #68]	; 0x44
 810468e:	9310      	str	r3, [sp, #64]	; 0x40
 8104690:	466d      	mov	r5, sp
 8104692:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810469a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810469c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810469e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046aa:	f107 0318 	add.w	r3, r7, #24
 81046ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046b0:	f7ff fe0d 	bl	81042ce <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 81046b4:	200a      	movs	r0, #10
 81046b6:	f7fd f93d 	bl	8101934 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 81046ba:	230b      	movs	r3, #11
 81046bc:	2201      	movs	r2, #1
 81046be:	9211      	str	r2, [sp, #68]	; 0x44
 81046c0:	9310      	str	r3, [sp, #64]	; 0x40
 81046c2:	466d      	mov	r5, sp
 81046c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81046d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81046dc:	f107 0318 	add.w	r3, r7, #24
 81046e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81046e2:	f7ff fe3d 	bl	8104360 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81046e6:	236b      	movs	r3, #107	; 0x6b
 81046e8:	2201      	movs	r2, #1
 81046ea:	9211      	str	r2, [sp, #68]	; 0x44
 81046ec:	9310      	str	r3, [sp, #64]	; 0x40
 81046ee:	466d      	mov	r5, sp
 81046f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81046f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104700:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104704:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104708:	f107 0318 	add.w	r3, r7, #24
 810470c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810470e:	f7ff fdde 	bl	81042ce <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 8104712:	466d      	mov	r5, sp
 8104714:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810471a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810471c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810471e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104724:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104728:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810472c:	f107 0318 	add.w	r3, r7, #24
 8104730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104732:	f7ff fef5 	bl	8104520 <whoAmI>
 8104736:	4603      	mov	r3, r0
 8104738:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 810473a:	79fb      	ldrb	r3, [r7, #7]
 810473c:	2b71      	cmp	r3, #113	; 0x71
 810473e:	d004      	beq.n	810474a <MPU9250_Init+0x182>
 8104740:	79fb      	ldrb	r3, [r7, #7]
 8104742:	2b73      	cmp	r3, #115	; 0x73
 8104744:	d001      	beq.n	810474a <MPU9250_Init+0x182>
	{
		return 1;
 8104746:	2301      	movs	r3, #1
 8104748:	e171      	b.n	8104a2e <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 810474a:	236c      	movs	r3, #108	; 0x6c
 810474c:	2200      	movs	r2, #0
 810474e:	9211      	str	r2, [sp, #68]	; 0x44
 8104750:	9310      	str	r3, [sp, #64]	; 0x40
 8104752:	466d      	mov	r5, sp
 8104754:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810475a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810475c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810475e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104764:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104768:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810476c:	f107 0318 	add.w	r3, r7, #24
 8104770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104772:	f7ff fdac 	bl	81042ce <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8104776:	231c      	movs	r3, #28
 8104778:	2200      	movs	r2, #0
 810477a:	9211      	str	r2, [sp, #68]	; 0x44
 810477c:	9310      	str	r3, [sp, #64]	; 0x40
 810477e:	466d      	mov	r5, sp
 8104780:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810478a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810478c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810478e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104794:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104798:	f107 0318 	add.w	r3, r7, #24
 810479c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810479e:	f7ff fd96 	bl	81042ce <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 81047a2:	231b      	movs	r3, #27
 81047a4:	2200      	movs	r2, #0
 81047a6:	9211      	str	r2, [sp, #68]	; 0x44
 81047a8:	9310      	str	r3, [sp, #64]	; 0x40
 81047aa:	466d      	mov	r5, sp
 81047ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81047b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047c4:	f107 0318 	add.w	r3, r7, #24
 81047c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047ca:	f7ff fd80 	bl	81042ce <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 81047ce:	231d      	movs	r3, #29
 81047d0:	2201      	movs	r2, #1
 81047d2:	9211      	str	r2, [sp, #68]	; 0x44
 81047d4:	9310      	str	r3, [sp, #64]	; 0x40
 81047d6:	466d      	mov	r5, sp
 81047d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81047dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81047e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81047ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81047f0:	f107 0318 	add.w	r3, r7, #24
 81047f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81047f6:	f7ff fd6a 	bl	81042ce <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 81047fa:	231a      	movs	r3, #26
 81047fc:	2201      	movs	r2, #1
 81047fe:	9211      	str	r2, [sp, #68]	; 0x44
 8104800:	9310      	str	r3, [sp, #64]	; 0x40
 8104802:	466d      	mov	r5, sp
 8104804:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810480a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810480c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810480e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810481c:	f107 0318 	add.w	r3, r7, #24
 8104820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104822:	f7ff fd54 	bl	81042ce <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 8104826:	2319      	movs	r3, #25
 8104828:	2200      	movs	r2, #0
 810482a:	9211      	str	r2, [sp, #68]	; 0x44
 810482c:	9310      	str	r3, [sp, #64]	; 0x40
 810482e:	466d      	mov	r5, sp
 8104830:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810483a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810483c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810483e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104840:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104844:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104848:	f107 0318 	add.w	r3, r7, #24
 810484c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810484e:	f7ff fd3e 	bl	81042ce <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 8104852:	236a      	movs	r3, #106	; 0x6a
 8104854:	2220      	movs	r2, #32
 8104856:	9211      	str	r2, [sp, #68]	; 0x44
 8104858:	9310      	str	r3, [sp, #64]	; 0x40
 810485a:	466d      	mov	r5, sp
 810485c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810486a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810486c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104870:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104874:	f107 0318 	add.w	r3, r7, #24
 8104878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810487a:	f7ff fd28 	bl	81042ce <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 810487e:	2324      	movs	r3, #36	; 0x24
 8104880:	220d      	movs	r2, #13
 8104882:	9211      	str	r2, [sp, #68]	; 0x44
 8104884:	9310      	str	r3, [sp, #64]	; 0x40
 8104886:	466d      	mov	r5, sp
 8104888:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810488c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810488e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104898:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810489c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048a0:	f107 0318 	add.w	r3, r7, #24
 81048a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048a6:	f7ff fd12 	bl	81042ce <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 81048aa:	466d      	mov	r5, sp
 81048ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048c4:	f107 0318 	add.w	r3, r7, #24
 81048c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81048ca:	f7ff fe53 	bl	8104574 <whoAmIAK8963>
 81048ce:	4603      	mov	r3, r0
 81048d0:	2b48      	cmp	r3, #72	; 0x48
 81048d2:	d001      	beq.n	81048d8 <MPU9250_Init+0x310>
	{
		return 1;
 81048d4:	2301      	movs	r3, #1
 81048d6:	e0aa      	b.n	8104a2e <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81048d8:	230a      	movs	r3, #10
 81048da:	2200      	movs	r2, #0
 81048dc:	9211      	str	r2, [sp, #68]	; 0x44
 81048de:	9310      	str	r3, [sp, #64]	; 0x40
 81048e0:	466d      	mov	r5, sp
 81048e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81048e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81048f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81048f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81048f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81048fa:	f107 0318 	add.w	r3, r7, #24
 81048fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104900:	f7ff fd2e 	bl	8104360 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8104904:	2064      	movs	r0, #100	; 0x64
 8104906:	f7fd f815 	bl	8101934 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 810490a:	230a      	movs	r3, #10
 810490c:	220f      	movs	r2, #15
 810490e:	9211      	str	r2, [sp, #68]	; 0x44
 8104910:	9310      	str	r3, [sp, #64]	; 0x40
 8104912:	466d      	mov	r5, sp
 8104914:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810491a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810491c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810491e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104928:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810492c:	f107 0318 	add.w	r3, r7, #24
 8104930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104932:	f7ff fd15 	bl	8104360 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104936:	2064      	movs	r0, #100	; 0x64
 8104938:	f7fc fffc 	bl	8101934 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 810493c:	2310      	movs	r3, #16
 810493e:	4a3f      	ldr	r2, [pc, #252]	; (8104a3c <MPU9250_Init+0x474>)
 8104940:	9212      	str	r2, [sp, #72]	; 0x48
 8104942:	2203      	movs	r2, #3
 8104944:	9211      	str	r2, [sp, #68]	; 0x44
 8104946:	9310      	str	r3, [sp, #64]	; 0x40
 8104948:	466d      	mov	r5, sp
 810494a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810494e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810495a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810495e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104962:	f107 0318 	add.w	r3, r7, #24
 8104966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104968:	f7ff fd65 	bl	8104436 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 810496c:	230a      	movs	r3, #10
 810496e:	2200      	movs	r2, #0
 8104970:	9211      	str	r2, [sp, #68]	; 0x44
 8104972:	9310      	str	r3, [sp, #64]	; 0x40
 8104974:	466d      	mov	r5, sp
 8104976:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810497a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810497c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810497e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810498a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810498e:	f107 0318 	add.w	r3, r7, #24
 8104992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104994:	f7ff fce4 	bl	8104360 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8104998:	2064      	movs	r0, #100	; 0x64
 810499a:	f7fc ffcb 	bl	8101934 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 810499e:	230a      	movs	r3, #10
 81049a0:	2216      	movs	r2, #22
 81049a2:	9211      	str	r2, [sp, #68]	; 0x44
 81049a4:	9310      	str	r3, [sp, #64]	; 0x40
 81049a6:	466d      	mov	r5, sp
 81049a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049c0:	f107 0318 	add.w	r3, r7, #24
 81049c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049c6:	f7ff fccb 	bl	8104360 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 81049ca:	2064      	movs	r0, #100	; 0x64
 81049cc:	f7fc ffb2 	bl	8101934 <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 81049d0:	236b      	movs	r3, #107	; 0x6b
 81049d2:	2201      	movs	r2, #1
 81049d4:	9211      	str	r2, [sp, #68]	; 0x44
 81049d6:	9310      	str	r3, [sp, #64]	; 0x40
 81049d8:	466d      	mov	r5, sp
 81049da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81049de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81049e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81049ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81049ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81049f2:	f107 0318 	add.w	r3, r7, #24
 81049f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81049f8:	f7ff fc69 	bl	81042ce <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 81049fc:	2303      	movs	r3, #3
 81049fe:	4a10      	ldr	r2, [pc, #64]	; (8104a40 <MPU9250_Init+0x478>)
 8104a00:	9212      	str	r2, [sp, #72]	; 0x48
 8104a02:	2207      	movs	r2, #7
 8104a04:	9211      	str	r2, [sp, #68]	; 0x44
 8104a06:	9310      	str	r3, [sp, #64]	; 0x40
 8104a08:	466d      	mov	r5, sp
 8104a0a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a22:	f107 0318 	add.w	r3, r7, #24
 8104a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a28:	f7ff fd05 	bl	8104436 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8104a2c:	2300      	movs	r3, #0
}
 8104a2e:	4618      	mov	r0, r3
 8104a30:	3708      	adds	r7, #8
 8104a32:	46bd      	mov	sp, r7
 8104a34:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104a38:	b004      	add	sp, #16
 8104a3a:	4770      	bx	lr
 8104a3c:	100002c8 	.word	0x100002c8
 8104a40:	100002b0 	.word	0x100002b0

08104a44 <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8104a44:	b084      	sub	sp, #16
 8104a46:	b5b0      	push	{r4, r5, r7, lr}
 8104a48:	b096      	sub	sp, #88	; 0x58
 8104a4a:	af14      	add	r7, sp, #80	; 0x50
 8104a4c:	f107 0418 	add.w	r4, r7, #24
 8104a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 8104a54:	233b      	movs	r3, #59	; 0x3b
 8104a56:	4a6d      	ldr	r2, [pc, #436]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104a58:	9212      	str	r2, [sp, #72]	; 0x48
 8104a5a:	2215      	movs	r2, #21
 8104a5c:	9211      	str	r2, [sp, #68]	; 0x44
 8104a5e:	9310      	str	r3, [sp, #64]	; 0x40
 8104a60:	466d      	mov	r5, sp
 8104a62:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8104a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104a72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8104a76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8104a7a:	f107 0318 	add.w	r3, r7, #24
 8104a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8104a80:	f7ff fc4c 	bl	810431c <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8104a84:	4b61      	ldr	r3, [pc, #388]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104a86:	781b      	ldrb	r3, [r3, #0]
 8104a88:	021b      	lsls	r3, r3, #8
 8104a8a:	b21a      	sxth	r2, r3
 8104a8c:	4b5f      	ldr	r3, [pc, #380]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104a8e:	785b      	ldrb	r3, [r3, #1]
 8104a90:	b21b      	sxth	r3, r3
 8104a92:	4313      	orrs	r3, r2
 8104a94:	b21a      	sxth	r2, r3
 8104a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104a98:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8104a9a:	4b5c      	ldr	r3, [pc, #368]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104a9c:	789b      	ldrb	r3, [r3, #2]
 8104a9e:	021b      	lsls	r3, r3, #8
 8104aa0:	b219      	sxth	r1, r3
 8104aa2:	4b5a      	ldr	r3, [pc, #360]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104aa4:	78db      	ldrb	r3, [r3, #3]
 8104aa6:	b21a      	sxth	r2, r3
 8104aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104aaa:	3302      	adds	r3, #2
 8104aac:	430a      	orrs	r2, r1
 8104aae:	b212      	sxth	r2, r2
 8104ab0:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8104ab2:	4b56      	ldr	r3, [pc, #344]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104ab4:	791b      	ldrb	r3, [r3, #4]
 8104ab6:	021b      	lsls	r3, r3, #8
 8104ab8:	b219      	sxth	r1, r3
 8104aba:	4b54      	ldr	r3, [pc, #336]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104abc:	795b      	ldrb	r3, [r3, #5]
 8104abe:	b21a      	sxth	r2, r3
 8104ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104ac2:	3304      	adds	r3, #4
 8104ac4:	430a      	orrs	r2, r1
 8104ac6:	b212      	sxth	r2, r2
 8104ac8:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8104aca:	4b50      	ldr	r3, [pc, #320]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104acc:	7a1b      	ldrb	r3, [r3, #8]
 8104ace:	021b      	lsls	r3, r3, #8
 8104ad0:	b21a      	sxth	r2, r3
 8104ad2:	4b4e      	ldr	r3, [pc, #312]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104ad4:	7a5b      	ldrb	r3, [r3, #9]
 8104ad6:	b21b      	sxth	r3, r3
 8104ad8:	4313      	orrs	r3, r2
 8104ada:	b21a      	sxth	r2, r3
 8104adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104ade:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8104ae0:	4b4a      	ldr	r3, [pc, #296]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104ae2:	7a9b      	ldrb	r3, [r3, #10]
 8104ae4:	021b      	lsls	r3, r3, #8
 8104ae6:	b219      	sxth	r1, r3
 8104ae8:	4b48      	ldr	r3, [pc, #288]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104aea:	7adb      	ldrb	r3, [r3, #11]
 8104aec:	b21a      	sxth	r2, r3
 8104aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104af0:	3302      	adds	r3, #2
 8104af2:	430a      	orrs	r2, r1
 8104af4:	b212      	sxth	r2, r2
 8104af6:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8104af8:	4b44      	ldr	r3, [pc, #272]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104afa:	7b1b      	ldrb	r3, [r3, #12]
 8104afc:	021b      	lsls	r3, r3, #8
 8104afe:	b219      	sxth	r1, r3
 8104b00:	4b42      	ldr	r3, [pc, #264]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b02:	7b5b      	ldrb	r3, [r3, #13]
 8104b04:	b21a      	sxth	r2, r3
 8104b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104b08:	3304      	adds	r3, #4
 8104b0a:	430a      	orrs	r2, r1
 8104b0c:	b212      	sxth	r2, r2
 8104b0e:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8104b10:	4b3e      	ldr	r3, [pc, #248]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b12:	7bdb      	ldrb	r3, [r3, #15]
 8104b14:	021b      	lsls	r3, r3, #8
 8104b16:	b21a      	sxth	r2, r3
 8104b18:	4b3c      	ldr	r3, [pc, #240]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b1a:	7b9b      	ldrb	r3, [r3, #14]
 8104b1c:	b21b      	sxth	r3, r3
 8104b1e:	4313      	orrs	r3, r2
 8104b20:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8104b22:	4b3a      	ldr	r3, [pc, #232]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b24:	7c5b      	ldrb	r3, [r3, #17]
 8104b26:	021b      	lsls	r3, r3, #8
 8104b28:	b21a      	sxth	r2, r3
 8104b2a:	4b38      	ldr	r3, [pc, #224]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b2c:	7c1b      	ldrb	r3, [r3, #16]
 8104b2e:	b21b      	sxth	r3, r3
 8104b30:	4313      	orrs	r3, r2
 8104b32:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8104b34:	4b35      	ldr	r3, [pc, #212]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b36:	7cdb      	ldrb	r3, [r3, #19]
 8104b38:	021b      	lsls	r3, r3, #8
 8104b3a:	b21a      	sxth	r2, r3
 8104b3c:	4b33      	ldr	r3, [pc, #204]	; (8104c0c <MPU9250_GetData+0x1c8>)
 8104b3e:	7c9b      	ldrb	r3, [r3, #18]
 8104b40:	b21b      	sxth	r3, r3
 8104b42:	4313      	orrs	r3, r2
 8104b44:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8104b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104b4a:	ee07 3a90 	vmov	s15, r3
 8104b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104b52:	4b2f      	ldr	r3, [pc, #188]	; (8104c10 <MPU9250_GetData+0x1cc>)
 8104b54:	781b      	ldrb	r3, [r3, #0]
 8104b56:	3b80      	subs	r3, #128	; 0x80
 8104b58:	ee07 3a90 	vmov	s15, r3
 8104b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104b60:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8104c14 <MPU9250_GetData+0x1d0>
 8104b64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104b78:	ee17 3a90 	vmov	r3, s15
 8104b7c:	b21a      	sxth	r2, r3
 8104b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104b80:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8104b82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8104b86:	ee07 3a90 	vmov	s15, r3
 8104b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104b8e:	4b20      	ldr	r3, [pc, #128]	; (8104c10 <MPU9250_GetData+0x1cc>)
 8104b90:	785b      	ldrb	r3, [r3, #1]
 8104b92:	3b80      	subs	r3, #128	; 0x80
 8104b94:	ee07 3a90 	vmov	s15, r3
 8104b98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104b9c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8104c14 <MPU9250_GetData+0x1d0>
 8104ba0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104bb2:	3302      	adds	r3, #2
 8104bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104bb8:	ee17 2a90 	vmov	r2, s15
 8104bbc:	b212      	sxth	r2, r2
 8104bbe:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8104bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8104bc4:	ee07 3a90 	vmov	s15, r3
 8104bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104bcc:	4b10      	ldr	r3, [pc, #64]	; (8104c10 <MPU9250_GetData+0x1cc>)
 8104bce:	789b      	ldrb	r3, [r3, #2]
 8104bd0:	3b80      	subs	r3, #128	; 0x80
 8104bd2:	ee07 3a90 	vmov	s15, r3
 8104bd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8104bda:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8104c14 <MPU9250_GetData+0x1d0>
 8104bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8104be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104bf0:	3304      	adds	r3, #4
 8104bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104bf6:	ee17 2a90 	vmov	r2, s15
 8104bfa:	b212      	sxth	r2, r2
 8104bfc:	801a      	strh	r2, [r3, #0]
}
 8104bfe:	bf00      	nop
 8104c00:	3708      	adds	r7, #8
 8104c02:	46bd      	mov	sp, r7
 8104c04:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8104c08:	b004      	add	sp, #16
 8104c0a:	4770      	bx	lr
 8104c0c:	100002b0 	.word	0x100002b0
 8104c10:	100002c8 	.word	0x100002c8
 8104c14:	43800000 	.word	0x43800000

08104c18 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8104c18:	b480      	push	{r7}
 8104c1a:	b083      	sub	sp, #12
 8104c1c:	af00      	add	r7, sp, #0
 8104c1e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	687a      	ldr	r2, [r7, #4]
 8104c24:	605a      	str	r2, [r3, #4]
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	685a      	ldr	r2, [r3, #4]
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	601a      	str	r2, [r3, #0]
}
 8104c2e:	bf00      	nop
 8104c30:	370c      	adds	r7, #12
 8104c32:	46bd      	mov	sp, r7
 8104c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c38:	4770      	bx	lr

08104c3a <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8104c3a:	b480      	push	{r7}
 8104c3c:	b083      	sub	sp, #12
 8104c3e:	af00      	add	r7, sp, #0
 8104c40:	6078      	str	r0, [r7, #4]
 8104c42:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	685a      	ldr	r2, [r3, #4]
 8104c48:	683b      	ldr	r3, [r7, #0]
 8104c4a:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8104c4c:	683b      	ldr	r3, [r7, #0]
 8104c4e:	687a      	ldr	r2, [r7, #4]
 8104c50:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8104c52:	683b      	ldr	r3, [r7, #0]
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	683a      	ldr	r2, [r7, #0]
 8104c58:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8104c5a:	683b      	ldr	r3, [r7, #0]
 8104c5c:	685b      	ldr	r3, [r3, #4]
 8104c5e:	683a      	ldr	r2, [r7, #0]
 8104c60:	601a      	str	r2, [r3, #0]
}
 8104c62:	bf00      	nop
 8104c64:	370c      	adds	r7, #12
 8104c66:	46bd      	mov	sp, r7
 8104c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c6c:	4770      	bx	lr

08104c6e <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8104c6e:	b580      	push	{r7, lr}
 8104c70:	b082      	sub	sp, #8
 8104c72:	af00      	add	r7, sp, #0
 8104c74:	6078      	str	r0, [r7, #4]
 8104c76:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8104c78:	6839      	ldr	r1, [r7, #0]
 8104c7a:	6878      	ldr	r0, [r7, #4]
 8104c7c:	f7ff ffdd 	bl	8104c3a <metal_list_add_before>
}
 8104c80:	bf00      	nop
 8104c82:	3708      	adds	r7, #8
 8104c84:	46bd      	mov	sp, r7
 8104c86:	bd80      	pop	{r7, pc}

08104c88 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8104c88:	b580      	push	{r7, lr}
 8104c8a:	b082      	sub	sp, #8
 8104c8c:	af00      	add	r7, sp, #0
 8104c8e:	6078      	str	r0, [r7, #4]
 8104c90:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8104c92:	6839      	ldr	r1, [r7, #0]
 8104c94:	6878      	ldr	r0, [r7, #4]
 8104c96:	f001 fdb9 	bl	810680c <metal_machine_cache_flush>
}
 8104c9a:	bf00      	nop
 8104c9c:	3708      	adds	r7, #8
 8104c9e:	46bd      	mov	sp, r7
 8104ca0:	bd80      	pop	{r7, pc}

08104ca2 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8104ca2:	b580      	push	{r7, lr}
 8104ca4:	b082      	sub	sp, #8
 8104ca6:	af00      	add	r7, sp, #0
 8104ca8:	6078      	str	r0, [r7, #4]
 8104caa:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8104cac:	6839      	ldr	r1, [r7, #0]
 8104cae:	6878      	ldr	r0, [r7, #4]
 8104cb0:	f001 fdb7 	bl	8106822 <metal_machine_cache_invalidate>
}
 8104cb4:	bf00      	nop
 8104cb6:	3708      	adds	r7, #8
 8104cb8:	46bd      	mov	sp, r7
 8104cba:	bd80      	pop	{r7, pc}

08104cbc <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8104cbc:	b580      	push	{r7, lr}
 8104cbe:	b082      	sub	sp, #8
 8104cc0:	af00      	add	r7, sp, #0
 8104cc2:	6078      	str	r0, [r7, #4]
 8104cc4:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8104cc6:	6839      	ldr	r1, [r7, #0]
 8104cc8:	6878      	ldr	r0, [r7, #4]
 8104cca:	f7ff ffdd 	bl	8104c88 <__metal_cache_flush>
}
 8104cce:	bf00      	nop
 8104cd0:	3708      	adds	r7, #8
 8104cd2:	46bd      	mov	sp, r7
 8104cd4:	bd80      	pop	{r7, pc}

08104cd6 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8104cd6:	b580      	push	{r7, lr}
 8104cd8:	b082      	sub	sp, #8
 8104cda:	af00      	add	r7, sp, #0
 8104cdc:	6078      	str	r0, [r7, #4]
 8104cde:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8104ce0:	6839      	ldr	r1, [r7, #0]
 8104ce2:	6878      	ldr	r0, [r7, #4]
 8104ce4:	f7ff ffdd 	bl	8104ca2 <__metal_cache_invalidate>
}
 8104ce8:	bf00      	nop
 8104cea:	3708      	adds	r7, #8
 8104cec:	46bd      	mov	sp, r7
 8104cee:	bd80      	pop	{r7, pc}

08104cf0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8104cf0:	b580      	push	{r7, lr}
 8104cf2:	b082      	sub	sp, #8
 8104cf4:	af00      	add	r7, sp, #0
 8104cf6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d008      	beq.n	8104d10 <metal_bus_register+0x20>
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	681b      	ldr	r3, [r3, #0]
 8104d02:	2b00      	cmp	r3, #0
 8104d04:	d004      	beq.n	8104d10 <metal_bus_register+0x20>
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	781b      	ldrb	r3, [r3, #0]
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d102      	bne.n	8104d16 <metal_bus_register+0x26>
		return -EINVAL;
 8104d10:	f06f 0315 	mvn.w	r3, #21
 8104d14:	e026      	b.n	8104d64 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	2100      	movs	r1, #0
 8104d1c:	4618      	mov	r0, r3
 8104d1e:	f000 f82b 	bl	8104d78 <metal_bus_find>
 8104d22:	4603      	mov	r3, r0
 8104d24:	2b00      	cmp	r3, #0
 8104d26:	d102      	bne.n	8104d2e <metal_bus_register+0x3e>
		return -EEXIST;
 8104d28:	f06f 0310 	mvn.w	r3, #16
 8104d2c:	e01a      	b.n	8104d64 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	331c      	adds	r3, #28
 8104d32:	4618      	mov	r0, r3
 8104d34:	f7ff ff70 	bl	8104c18 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	3324      	adds	r3, #36	; 0x24
 8104d3c:	4619      	mov	r1, r3
 8104d3e:	480b      	ldr	r0, [pc, #44]	; (8104d6c <metal_bus_register+0x7c>)
 8104d40:	f7ff ff95 	bl	8104c6e <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8104d44:	4b0a      	ldr	r3, [pc, #40]	; (8104d70 <metal_bus_register+0x80>)
 8104d46:	781b      	ldrb	r3, [r3, #0]
 8104d48:	2b06      	cmp	r3, #6
 8104d4a:	d90a      	bls.n	8104d62 <metal_bus_register+0x72>
 8104d4c:	4b08      	ldr	r3, [pc, #32]	; (8104d70 <metal_bus_register+0x80>)
 8104d4e:	685b      	ldr	r3, [r3, #4]
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d006      	beq.n	8104d62 <metal_bus_register+0x72>
 8104d54:	4b06      	ldr	r3, [pc, #24]	; (8104d70 <metal_bus_register+0x80>)
 8104d56:	685b      	ldr	r3, [r3, #4]
 8104d58:	687a      	ldr	r2, [r7, #4]
 8104d5a:	6812      	ldr	r2, [r2, #0]
 8104d5c:	4905      	ldr	r1, [pc, #20]	; (8104d74 <metal_bus_register+0x84>)
 8104d5e:	2007      	movs	r0, #7
 8104d60:	4798      	blx	r3
	return 0;
 8104d62:	2300      	movs	r3, #0
}
 8104d64:	4618      	mov	r0, r3
 8104d66:	3708      	adds	r7, #8
 8104d68:	46bd      	mov	sp, r7
 8104d6a:	bd80      	pop	{r7, pc}
 8104d6c:	10000504 	.word	0x10000504
 8104d70:	100004fc 	.word	0x100004fc
 8104d74:	0810bb60 	.word	0x0810bb60

08104d78 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8104d78:	b580      	push	{r7, lr}
 8104d7a:	b084      	sub	sp, #16
 8104d7c:	af00      	add	r7, sp, #0
 8104d7e:	6078      	str	r0, [r7, #4]
 8104d80:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8104d82:	4b13      	ldr	r3, [pc, #76]	; (8104dd0 <metal_bus_find+0x58>)
 8104d84:	689b      	ldr	r3, [r3, #8]
 8104d86:	60fb      	str	r3, [r7, #12]
 8104d88:	e017      	b.n	8104dba <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	3b24      	subs	r3, #36	; 0x24
 8104d8e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8104d90:	68bb      	ldr	r3, [r7, #8]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	6879      	ldr	r1, [r7, #4]
 8104d96:	4618      	mov	r0, r3
 8104d98:	f7fb faa2 	bl	81002e0 <strcmp>
 8104d9c:	4603      	mov	r3, r0
 8104d9e:	2b00      	cmp	r3, #0
 8104da0:	d003      	beq.n	8104daa <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104da2:	68fb      	ldr	r3, [r7, #12]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	60fb      	str	r3, [r7, #12]
 8104da8:	e007      	b.n	8104dba <metal_bus_find+0x42>
			continue;
		if (result)
 8104daa:	683b      	ldr	r3, [r7, #0]
 8104dac:	2b00      	cmp	r3, #0
 8104dae:	d002      	beq.n	8104db6 <metal_bus_find+0x3e>
			*result = bus;
 8104db0:	683b      	ldr	r3, [r7, #0]
 8104db2:	68ba      	ldr	r2, [r7, #8]
 8104db4:	601a      	str	r2, [r3, #0]
		return 0;
 8104db6:	2300      	movs	r3, #0
 8104db8:	e005      	b.n	8104dc6 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104dba:	68fb      	ldr	r3, [r7, #12]
 8104dbc:	4a05      	ldr	r2, [pc, #20]	; (8104dd4 <metal_bus_find+0x5c>)
 8104dbe:	4293      	cmp	r3, r2
 8104dc0:	d1e3      	bne.n	8104d8a <metal_bus_find+0x12>
	}
	return -ENOENT;
 8104dc2:	f06f 0301 	mvn.w	r3, #1
}
 8104dc6:	4618      	mov	r0, r3
 8104dc8:	3710      	adds	r7, #16
 8104dca:	46bd      	mov	sp, r7
 8104dcc:	bd80      	pop	{r7, pc}
 8104dce:	bf00      	nop
 8104dd0:	100004fc 	.word	0x100004fc
 8104dd4:	10000504 	.word	0x10000504

08104dd8 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8104dd8:	b580      	push	{r7, lr}
 8104dda:	b086      	sub	sp, #24
 8104ddc:	af00      	add	r7, sp, #0
 8104dde:	60f8      	str	r0, [r7, #12]
 8104de0:	60b9      	str	r1, [r7, #8]
 8104de2:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	2b00      	cmp	r3, #0
 8104de8:	d00d      	beq.n	8104e06 <metal_device_open+0x2e>
 8104dea:	68fb      	ldr	r3, [r7, #12]
 8104dec:	781b      	ldrb	r3, [r3, #0]
 8104dee:	2b00      	cmp	r3, #0
 8104df0:	d009      	beq.n	8104e06 <metal_device_open+0x2e>
 8104df2:	68bb      	ldr	r3, [r7, #8]
 8104df4:	2b00      	cmp	r3, #0
 8104df6:	d006      	beq.n	8104e06 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8104df8:	68bb      	ldr	r3, [r7, #8]
 8104dfa:	781b      	ldrb	r3, [r3, #0]
 8104dfc:	2b00      	cmp	r3, #0
 8104dfe:	d002      	beq.n	8104e06 <metal_device_open+0x2e>
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	2b00      	cmp	r3, #0
 8104e04:	d102      	bne.n	8104e0c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8104e06:	f06f 0315 	mvn.w	r3, #21
 8104e0a:	e01f      	b.n	8104e4c <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8104e0c:	f107 0310 	add.w	r3, r7, #16
 8104e10:	4619      	mov	r1, r3
 8104e12:	68f8      	ldr	r0, [r7, #12]
 8104e14:	f7ff ffb0 	bl	8104d78 <metal_bus_find>
 8104e18:	6178      	str	r0, [r7, #20]
	if (error)
 8104e1a:	697b      	ldr	r3, [r7, #20]
 8104e1c:	2b00      	cmp	r3, #0
 8104e1e:	d001      	beq.n	8104e24 <metal_device_open+0x4c>
		return error;
 8104e20:	697b      	ldr	r3, [r7, #20]
 8104e22:	e013      	b.n	8104e4c <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8104e24:	693b      	ldr	r3, [r7, #16]
 8104e26:	689b      	ldr	r3, [r3, #8]
 8104e28:	2b00      	cmp	r3, #0
 8104e2a:	d102      	bne.n	8104e32 <metal_device_open+0x5a>
		return -ENODEV;
 8104e2c:	f06f 0312 	mvn.w	r3, #18
 8104e30:	e00c      	b.n	8104e4c <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8104e32:	693b      	ldr	r3, [r7, #16]
 8104e34:	689b      	ldr	r3, [r3, #8]
 8104e36:	6938      	ldr	r0, [r7, #16]
 8104e38:	687a      	ldr	r2, [r7, #4]
 8104e3a:	68b9      	ldr	r1, [r7, #8]
 8104e3c:	4798      	blx	r3
 8104e3e:	6178      	str	r0, [r7, #20]
	if (error)
 8104e40:	697b      	ldr	r3, [r7, #20]
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d001      	beq.n	8104e4a <metal_device_open+0x72>
		return error;
 8104e46:	697b      	ldr	r3, [r7, #20]
 8104e48:	e000      	b.n	8104e4c <metal_device_open+0x74>

	return 0;
 8104e4a:	2300      	movs	r3, #0
}
 8104e4c:	4618      	mov	r0, r3
 8104e4e:	3718      	adds	r7, #24
 8104e50:	46bd      	mov	sp, r7
 8104e52:	bd80      	pop	{r7, pc}

08104e54 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8104e54:	b580      	push	{r7, lr}
 8104e56:	b082      	sub	sp, #8
 8104e58:	af00      	add	r7, sp, #0
 8104e5a:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	681b      	ldr	r3, [r3, #0]
 8104e60:	2b00      	cmp	r3, #0
 8104e62:	d008      	beq.n	8104e76 <metal_register_generic_device+0x22>
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	781b      	ldrb	r3, [r3, #0]
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	d003      	beq.n	8104e76 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8104e72:	2b02      	cmp	r3, #2
 8104e74:	d902      	bls.n	8104e7c <metal_register_generic_device+0x28>
		return -EINVAL;
 8104e76:	f06f 0315 	mvn.w	r3, #21
 8104e7a:	e009      	b.n	8104e90 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	4a06      	ldr	r2, [pc, #24]	; (8104e98 <metal_register_generic_device+0x44>)
 8104e80:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	336c      	adds	r3, #108	; 0x6c
 8104e86:	4619      	mov	r1, r3
 8104e88:	4804      	ldr	r0, [pc, #16]	; (8104e9c <metal_register_generic_device+0x48>)
 8104e8a:	f7ff fef0 	bl	8104c6e <metal_list_add_tail>
			    &device->node);
	return 0;
 8104e8e:	2300      	movs	r3, #0
}
 8104e90:	4618      	mov	r0, r3
 8104e92:	3708      	adds	r7, #8
 8104e94:	46bd      	mov	sp, r7
 8104e96:	bd80      	pop	{r7, pc}
 8104e98:	10000010 	.word	0x10000010
 8104e9c:	10000514 	.word	0x10000514

08104ea0 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8104ea0:	b580      	push	{r7, lr}
 8104ea2:	b086      	sub	sp, #24
 8104ea4:	af00      	add	r7, sp, #0
 8104ea6:	60f8      	str	r0, [r7, #12]
 8104ea8:	60b9      	str	r1, [r7, #8]
 8104eaa:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104eac:	4b12      	ldr	r3, [pc, #72]	; (8104ef8 <metal_generic_dev_open+0x58>)
 8104eae:	699b      	ldr	r3, [r3, #24]
 8104eb0:	617b      	str	r3, [r7, #20]
 8104eb2:	e017      	b.n	8104ee4 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8104eb4:	697b      	ldr	r3, [r7, #20]
 8104eb6:	3b6c      	subs	r3, #108	; 0x6c
 8104eb8:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8104eba:	693b      	ldr	r3, [r7, #16]
 8104ebc:	681b      	ldr	r3, [r3, #0]
 8104ebe:	68b9      	ldr	r1, [r7, #8]
 8104ec0:	4618      	mov	r0, r3
 8104ec2:	f7fb fa0d 	bl	81002e0 <strcmp>
 8104ec6:	4603      	mov	r3, r0
 8104ec8:	2b00      	cmp	r3, #0
 8104eca:	d003      	beq.n	8104ed4 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104ecc:	697b      	ldr	r3, [r7, #20]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	617b      	str	r3, [r7, #20]
 8104ed2:	e007      	b.n	8104ee4 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	693a      	ldr	r2, [r7, #16]
 8104ed8:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8104eda:	6938      	ldr	r0, [r7, #16]
 8104edc:	f000 f88c 	bl	8104ff8 <metal_generic_dev_sys_open>
 8104ee0:	4603      	mov	r3, r0
 8104ee2:	e005      	b.n	8104ef0 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104ee4:	697b      	ldr	r3, [r7, #20]
 8104ee6:	4a05      	ldr	r2, [pc, #20]	; (8104efc <metal_generic_dev_open+0x5c>)
 8104ee8:	4293      	cmp	r3, r2
 8104eea:	d1e3      	bne.n	8104eb4 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8104eec:	f06f 0312 	mvn.w	r3, #18
}
 8104ef0:	4618      	mov	r0, r3
 8104ef2:	3718      	adds	r7, #24
 8104ef4:	46bd      	mov	sp, r7
 8104ef6:	bd80      	pop	{r7, pc}
 8104ef8:	100004fc 	.word	0x100004fc
 8104efc:	10000514 	.word	0x10000514

08104f00 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8104f00:	b580      	push	{r7, lr}
 8104f02:	b086      	sub	sp, #24
 8104f04:	af00      	add	r7, sp, #0
 8104f06:	60f8      	str	r0, [r7, #12]
 8104f08:	60b9      	str	r1, [r7, #8]
 8104f0a:	607a      	str	r2, [r7, #4]
 8104f0c:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8104f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104f10:	683b      	ldr	r3, [r7, #0]
 8104f12:	429a      	cmp	r2, r3
 8104f14:	d009      	beq.n	8104f2a <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8104f16:	6a3a      	ldr	r2, [r7, #32]
 8104f18:	4613      	mov	r3, r2
 8104f1a:	005b      	lsls	r3, r3, #1
 8104f1c:	4413      	add	r3, r2
 8104f1e:	009b      	lsls	r3, r3, #2
 8104f20:	461a      	mov	r2, r3
 8104f22:	6839      	ldr	r1, [r7, #0]
 8104f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8104f26:	f002 f9fd 	bl	8107324 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8104f2a:	2300      	movs	r3, #0
 8104f2c:	617b      	str	r3, [r7, #20]
 8104f2e:	e02f      	b.n	8104f90 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	2b02      	cmp	r3, #2
 8104f34:	d114      	bne.n	8104f60 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8104f36:	697a      	ldr	r2, [r7, #20]
 8104f38:	4613      	mov	r3, r2
 8104f3a:	005b      	lsls	r3, r3, #1
 8104f3c:	4413      	add	r3, r2
 8104f3e:	009b      	lsls	r3, r3, #2
 8104f40:	461a      	mov	r2, r3
 8104f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f44:	4413      	add	r3, r2
 8104f46:	6818      	ldr	r0, [r3, #0]
 8104f48:	697a      	ldr	r2, [r7, #20]
 8104f4a:	4613      	mov	r3, r2
 8104f4c:	005b      	lsls	r3, r3, #1
 8104f4e:	4413      	add	r3, r2
 8104f50:	009b      	lsls	r3, r3, #2
 8104f52:	461a      	mov	r2, r3
 8104f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f56:	4413      	add	r3, r2
 8104f58:	689b      	ldr	r3, [r3, #8]
 8104f5a:	4619      	mov	r1, r3
 8104f5c:	f7ff feae 	bl	8104cbc <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8104f60:	697a      	ldr	r2, [r7, #20]
 8104f62:	4613      	mov	r3, r2
 8104f64:	005b      	lsls	r3, r3, #1
 8104f66:	4413      	add	r3, r2
 8104f68:	009b      	lsls	r3, r3, #2
 8104f6a:	461a      	mov	r2, r3
 8104f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f6e:	4413      	add	r3, r2
 8104f70:	6818      	ldr	r0, [r3, #0]
 8104f72:	697a      	ldr	r2, [r7, #20]
 8104f74:	4613      	mov	r3, r2
 8104f76:	005b      	lsls	r3, r3, #1
 8104f78:	4413      	add	r3, r2
 8104f7a:	009b      	lsls	r3, r3, #2
 8104f7c:	461a      	mov	r2, r3
 8104f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104f80:	4413      	add	r3, r2
 8104f82:	689b      	ldr	r3, [r3, #8]
 8104f84:	4619      	mov	r1, r3
 8104f86:	f7ff fea6 	bl	8104cd6 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8104f8a:	697b      	ldr	r3, [r7, #20]
 8104f8c:	3301      	adds	r3, #1
 8104f8e:	617b      	str	r3, [r7, #20]
 8104f90:	697a      	ldr	r2, [r7, #20]
 8104f92:	6a3b      	ldr	r3, [r7, #32]
 8104f94:	429a      	cmp	r2, r3
 8104f96:	dbcb      	blt.n	8104f30 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8104f98:	6a3b      	ldr	r3, [r7, #32]
}
 8104f9a:	4618      	mov	r0, r3
 8104f9c:	3718      	adds	r7, #24
 8104f9e:	46bd      	mov	sp, r7
 8104fa0:	bd80      	pop	{r7, pc}

08104fa2 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8104fa2:	b580      	push	{r7, lr}
 8104fa4:	b086      	sub	sp, #24
 8104fa6:	af00      	add	r7, sp, #0
 8104fa8:	60f8      	str	r0, [r7, #12]
 8104faa:	60b9      	str	r1, [r7, #8]
 8104fac:	607a      	str	r2, [r7, #4]
 8104fae:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8104fb0:	2300      	movs	r3, #0
 8104fb2:	617b      	str	r3, [r7, #20]
 8104fb4:	e017      	b.n	8104fe6 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8104fb6:	697a      	ldr	r2, [r7, #20]
 8104fb8:	4613      	mov	r3, r2
 8104fba:	005b      	lsls	r3, r3, #1
 8104fbc:	4413      	add	r3, r2
 8104fbe:	009b      	lsls	r3, r3, #2
 8104fc0:	461a      	mov	r2, r3
 8104fc2:	683b      	ldr	r3, [r7, #0]
 8104fc4:	4413      	add	r3, r2
 8104fc6:	6818      	ldr	r0, [r3, #0]
 8104fc8:	697a      	ldr	r2, [r7, #20]
 8104fca:	4613      	mov	r3, r2
 8104fcc:	005b      	lsls	r3, r3, #1
 8104fce:	4413      	add	r3, r2
 8104fd0:	009b      	lsls	r3, r3, #2
 8104fd2:	461a      	mov	r2, r3
 8104fd4:	683b      	ldr	r3, [r7, #0]
 8104fd6:	4413      	add	r3, r2
 8104fd8:	689b      	ldr	r3, [r3, #8]
 8104fda:	4619      	mov	r1, r3
 8104fdc:	f7ff fe7b 	bl	8104cd6 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8104fe0:	697b      	ldr	r3, [r7, #20]
 8104fe2:	3301      	adds	r3, #1
 8104fe4:	617b      	str	r3, [r7, #20]
 8104fe6:	697a      	ldr	r2, [r7, #20]
 8104fe8:	6a3b      	ldr	r3, [r7, #32]
 8104fea:	429a      	cmp	r2, r3
 8104fec:	dbe3      	blt.n	8104fb6 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8104fee:	bf00      	nop
 8104ff0:	bf00      	nop
 8104ff2:	3718      	adds	r7, #24
 8104ff4:	46bd      	mov	sp, r7
 8104ff6:	bd80      	pop	{r7, pc}

08104ff8 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8104ff8:	b580      	push	{r7, lr}
 8104ffa:	b084      	sub	sp, #16
 8104ffc:	af00      	add	r7, sp, #0
 8104ffe:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8105000:	2300      	movs	r3, #0
 8105002:	60fb      	str	r3, [r7, #12]
 8105004:	e013      	b.n	810502e <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8105006:	68fa      	ldr	r2, [r7, #12]
 8105008:	4613      	mov	r3, r2
 810500a:	005b      	lsls	r3, r3, #1
 810500c:	4413      	add	r3, r2
 810500e:	011b      	lsls	r3, r3, #4
 8105010:	3308      	adds	r3, #8
 8105012:	687a      	ldr	r2, [r7, #4]
 8105014:	4413      	add	r3, r2
 8105016:	3304      	adds	r3, #4
 8105018:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 810501a:	68bb      	ldr	r3, [r7, #8]
 810501c:	689b      	ldr	r3, [r3, #8]
 810501e:	2b00      	cmp	r3, #0
 8105020:	d00b      	beq.n	810503a <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8105022:	68b8      	ldr	r0, [r7, #8]
 8105024:	f000 f81e 	bl	8105064 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8105028:	68fb      	ldr	r3, [r7, #12]
 810502a:	3301      	adds	r3, #1
 810502c:	60fb      	str	r3, [r7, #12]
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	689b      	ldr	r3, [r3, #8]
 8105032:	68fa      	ldr	r2, [r7, #12]
 8105034:	429a      	cmp	r2, r3
 8105036:	d3e6      	bcc.n	8105006 <metal_generic_dev_sys_open+0xe>
 8105038:	e000      	b.n	810503c <metal_generic_dev_sys_open+0x44>
			break;
 810503a:	bf00      	nop
	}

	return 0;
 810503c:	2300      	movs	r3, #0
}
 810503e:	4618      	mov	r0, r3
 8105040:	3710      	adds	r7, #16
 8105042:	46bd      	mov	sp, r7
 8105044:	bd80      	pop	{r7, pc}
	...

08105048 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8105048:	b580      	push	{r7, lr}
 810504a:	b082      	sub	sp, #8
 810504c:	af00      	add	r7, sp, #0
 810504e:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8105050:	4803      	ldr	r0, [pc, #12]	; (8105060 <metal_sys_init+0x18>)
 8105052:	f7ff fe4d 	bl	8104cf0 <metal_bus_register>
	return 0;
 8105056:	2300      	movs	r3, #0
}
 8105058:	4618      	mov	r0, r3
 810505a:	3708      	adds	r7, #8
 810505c:	46bd      	mov	sp, r7
 810505e:	bd80      	pop	{r7, pc}
 8105060:	10000010 	.word	0x10000010

08105064 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8105064:	b580      	push	{r7, lr}
 8105066:	b086      	sub	sp, #24
 8105068:	af00      	add	r7, sp, #0
 810506a:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	689b      	ldr	r3, [r3, #8]
 8105076:	613b      	str	r3, [r7, #16]
	if (psize) {
 8105078:	693b      	ldr	r3, [r7, #16]
 810507a:	2b00      	cmp	r3, #0
 810507c:	d02c      	beq.n	81050d8 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	68db      	ldr	r3, [r3, #12]
 8105082:	693a      	ldr	r2, [r7, #16]
 8105084:	fa22 f303 	lsr.w	r3, r2, r3
 8105088:	2b00      	cmp	r3, #0
 810508a:	d005      	beq.n	8105098 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	68db      	ldr	r3, [r3, #12]
 8105090:	2201      	movs	r2, #1
 8105092:	fa02 f303 	lsl.w	r3, r2, r3
 8105096:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8105098:	2300      	movs	r3, #0
 810509a:	617b      	str	r3, [r7, #20]
 810509c:	e013      	b.n	81050c6 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	685a      	ldr	r2, [r3, #4]
 81050a2:	697b      	ldr	r3, [r7, #20]
 81050a4:	009b      	lsls	r3, r3, #2
 81050a6:	4413      	add	r3, r2
 81050a8:	6819      	ldr	r1, [r3, #0]
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	695b      	ldr	r3, [r3, #20]
 81050ae:	693a      	ldr	r2, [r7, #16]
 81050b0:	68f8      	ldr	r0, [r7, #12]
 81050b2:	f001 fbc1 	bl	8106838 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 81050b6:	693b      	ldr	r3, [r7, #16]
 81050b8:	009b      	lsls	r3, r3, #2
 81050ba:	68fa      	ldr	r2, [r7, #12]
 81050bc:	4413      	add	r3, r2
 81050be:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 81050c0:	697b      	ldr	r3, [r7, #20]
 81050c2:	3301      	adds	r3, #1
 81050c4:	617b      	str	r3, [r7, #20]
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	689a      	ldr	r2, [r3, #8]
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	68db      	ldr	r3, [r3, #12]
 81050ce:	fa22 f303 	lsr.w	r3, r2, r3
 81050d2:	697a      	ldr	r2, [r7, #20]
 81050d4:	429a      	cmp	r2, r3
 81050d6:	d9e2      	bls.n	810509e <metal_sys_io_mem_map+0x3a>
		}
	}
}
 81050d8:	bf00      	nop
 81050da:	3718      	adds	r7, #24
 81050dc:	46bd      	mov	sp, r7
 81050de:	bd80      	pop	{r7, pc}

081050e0 <metal_list_init>:
{
 81050e0:	b480      	push	{r7}
 81050e2:	b083      	sub	sp, #12
 81050e4:	af00      	add	r7, sp, #0
 81050e6:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	687a      	ldr	r2, [r7, #4]
 81050ec:	605a      	str	r2, [r3, #4]
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	685a      	ldr	r2, [r3, #4]
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	601a      	str	r2, [r3, #0]
}
 81050f6:	bf00      	nop
 81050f8:	370c      	adds	r7, #12
 81050fa:	46bd      	mov	sp, r7
 81050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105100:	4770      	bx	lr
	...

08105104 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8105104:	b580      	push	{r7, lr}
 8105106:	b084      	sub	sp, #16
 8105108:	af00      	add	r7, sp, #0
 810510a:	6078      	str	r0, [r7, #4]
	int error = 0;
 810510c:	2300      	movs	r3, #0
 810510e:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8105110:	2220      	movs	r2, #32
 8105112:	2100      	movs	r1, #0
 8105114:	4810      	ldr	r0, [pc, #64]	; (8105158 <metal_init+0x54>)
 8105116:	f002 f913 	bl	8107340 <memset>

	_metal.common.log_handler   = params->log_handler;
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	4a0e      	ldr	r2, [pc, #56]	; (8105158 <metal_init+0x54>)
 8105120:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8105122:	687b      	ldr	r3, [r7, #4]
 8105124:	791a      	ldrb	r2, [r3, #4]
 8105126:	4b0c      	ldr	r3, [pc, #48]	; (8105158 <metal_init+0x54>)
 8105128:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 810512a:	480c      	ldr	r0, [pc, #48]	; (810515c <metal_init+0x58>)
 810512c:	f7ff ffd8 	bl	81050e0 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8105130:	480b      	ldr	r0, [pc, #44]	; (8105160 <metal_init+0x5c>)
 8105132:	f7ff ffd5 	bl	81050e0 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8105136:	480b      	ldr	r0, [pc, #44]	; (8105164 <metal_init+0x60>)
 8105138:	f7ff ffd2 	bl	81050e0 <metal_list_init>

	error = metal_sys_init(params);
 810513c:	6878      	ldr	r0, [r7, #4]
 810513e:	f7ff ff83 	bl	8105048 <metal_sys_init>
 8105142:	60f8      	str	r0, [r7, #12]
	if (error)
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	2b00      	cmp	r3, #0
 8105148:	d001      	beq.n	810514e <metal_init+0x4a>
		return error;
 810514a:	68fb      	ldr	r3, [r7, #12]
 810514c:	e000      	b.n	8105150 <metal_init+0x4c>

	return error;
 810514e:	68fb      	ldr	r3, [r7, #12]
}
 8105150:	4618      	mov	r0, r3
 8105152:	3710      	adds	r7, #16
 8105154:	46bd      	mov	sp, r7
 8105156:	bd80      	pop	{r7, pc}
 8105158:	100004fc 	.word	0x100004fc
 810515c:	10000504 	.word	0x10000504
 8105160:	1000050c 	.word	0x1000050c
 8105164:	10000514 	.word	0x10000514

08105168 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8105168:	b480      	push	{r7}
 810516a:	b083      	sub	sp, #12
 810516c:	af00      	add	r7, sp, #0
 810516e:	6078      	str	r0, [r7, #4]
 8105170:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8105176:	f1b3 3fff 	cmp.w	r3, #4294967295
 810517a:	d009      	beq.n	8105190 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	689b      	ldr	r3, [r3, #8]
 8105180:	683a      	ldr	r2, [r7, #0]
 8105182:	429a      	cmp	r2, r3
 8105184:	d804      	bhi.n	8105190 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810518a:	683b      	ldr	r3, [r7, #0]
 810518c:	4413      	add	r3, r2
 810518e:	e000      	b.n	8105192 <metal_io_virt+0x2a>
 8105190:	2300      	movs	r3, #0
}
 8105192:	4618      	mov	r0, r3
 8105194:	370c      	adds	r7, #12
 8105196:	46bd      	mov	sp, r7
 8105198:	f85d 7b04 	ldr.w	r7, [sp], #4
 810519c:	4770      	bx	lr

0810519e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 810519e:	b5b0      	push	{r4, r5, r7, lr}
 81051a0:	b08a      	sub	sp, #40	; 0x28
 81051a2:	af00      	add	r7, sp, #0
 81051a4:	60f8      	str	r0, [r7, #12]
 81051a6:	60b9      	str	r1, [r7, #8]
 81051a8:	607a      	str	r2, [r7, #4]
 81051aa:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 81051ac:	f107 0310 	add.w	r3, r7, #16
 81051b0:	2200      	movs	r2, #0
 81051b2:	601a      	str	r2, [r3, #0]
 81051b4:	605a      	str	r2, [r3, #4]
 81051b6:	609a      	str	r2, [r3, #8]
 81051b8:	60da      	str	r2, [r3, #12]
 81051ba:	611a      	str	r2, [r3, #16]
 81051bc:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	68ba      	ldr	r2, [r7, #8]
 81051c2:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	687a      	ldr	r2, [r7, #4]
 81051c8:	605a      	str	r2, [r3, #4]
	io->size = size;
 81051ca:	68fb      	ldr	r3, [r7, #12]
 81051cc:	683a      	ldr	r2, [r7, #0]
 81051ce:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 81051d0:	68fb      	ldr	r3, [r7, #12]
 81051d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81051d4:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 81051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051d8:	2b1f      	cmp	r3, #31
 81051da:	d904      	bls.n	81051e6 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 81051dc:	68fb      	ldr	r3, [r7, #12]
 81051de:	f04f 32ff 	mov.w	r2, #4294967295
 81051e2:	611a      	str	r2, [r3, #16]
 81051e4:	e006      	b.n	81051f4 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 81051e6:	2201      	movs	r2, #1
 81051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051ea:	fa02 f303 	lsl.w	r3, r2, r3
 81051ee:	1e5a      	subs	r2, r3, #1
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81051f8:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 81051fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	d00b      	beq.n	8105218 <metal_io_init+0x7a>
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105204:	f103 0418 	add.w	r4, r3, #24
 8105208:	4615      	mov	r5, r2
 810520a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810520c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810520e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8105212:	e884 0003 	stmia.w	r4, {r0, r1}
 8105216:	e00a      	b.n	810522e <metal_io_init+0x90>
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	f103 0418 	add.w	r4, r3, #24
 810521e:	f107 0510 	add.w	r5, r7, #16
 8105222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105226:	e895 0003 	ldmia.w	r5, {r0, r1}
 810522a:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 810522e:	68f8      	ldr	r0, [r7, #12]
 8105230:	f7ff ff18 	bl	8105064 <metal_sys_io_mem_map>
}
 8105234:	bf00      	nop
 8105236:	3728      	adds	r7, #40	; 0x28
 8105238:	46bd      	mov	sp, r7
 810523a:	bdb0      	pop	{r4, r5, r7, pc}

0810523c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 810523c:	b590      	push	{r4, r7, lr}
 810523e:	b08b      	sub	sp, #44	; 0x2c
 8105240:	af02      	add	r7, sp, #8
 8105242:	60f8      	str	r0, [r7, #12]
 8105244:	60b9      	str	r1, [r7, #8]
 8105246:	607a      	str	r2, [r7, #4]
 8105248:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810524a:	68b9      	ldr	r1, [r7, #8]
 810524c:	68f8      	ldr	r0, [r7, #12]
 810524e:	f7ff ff8b 	bl	8105168 <metal_io_virt>
 8105252:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8105258:	68fb      	ldr	r3, [r7, #12]
 810525a:	689b      	ldr	r3, [r3, #8]
 810525c:	68ba      	ldr	r2, [r7, #8]
 810525e:	429a      	cmp	r2, r3
 8105260:	d902      	bls.n	8105268 <metal_io_block_read+0x2c>
		return -ERANGE;
 8105262:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8105266:	e05c      	b.n	8105322 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8105268:	683a      	ldr	r2, [r7, #0]
 810526a:	68bb      	ldr	r3, [r7, #8]
 810526c:	441a      	add	r2, r3
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	689b      	ldr	r3, [r3, #8]
 8105272:	429a      	cmp	r2, r3
 8105274:	d904      	bls.n	8105280 <metal_io_block_read+0x44>
		len = io->size - offset;
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	689a      	ldr	r2, [r3, #8]
 810527a:	68bb      	ldr	r3, [r7, #8]
 810527c:	1ad3      	subs	r3, r2, r3
 810527e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8105280:	683b      	ldr	r3, [r7, #0]
 8105282:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8105284:	68fb      	ldr	r3, [r7, #12]
 8105286:	6a1b      	ldr	r3, [r3, #32]
 8105288:	2b00      	cmp	r3, #0
 810528a:	d00a      	beq.n	81052a2 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 810528c:	68fb      	ldr	r3, [r7, #12]
 810528e:	6a1c      	ldr	r4, [r3, #32]
 8105290:	683b      	ldr	r3, [r7, #0]
 8105292:	9300      	str	r3, [sp, #0]
 8105294:	2305      	movs	r3, #5
 8105296:	687a      	ldr	r2, [r7, #4]
 8105298:	68b9      	ldr	r1, [r7, #8]
 810529a:	68f8      	ldr	r0, [r7, #12]
 810529c:	47a0      	blx	r4
 810529e:	6178      	str	r0, [r7, #20]
 81052a0:	e03e      	b.n	8105320 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 81052a2:	f3bf 8f5b 	dmb	ish
		while ( len && (
 81052a6:	e00c      	b.n	81052c2 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81052a8:	69fb      	ldr	r3, [r7, #28]
 81052aa:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 81052ac:	69bb      	ldr	r3, [r7, #24]
 81052ae:	701a      	strb	r2, [r3, #0]
			dest++;
 81052b0:	69bb      	ldr	r3, [r7, #24]
 81052b2:	3301      	adds	r3, #1
 81052b4:	61bb      	str	r3, [r7, #24]
			ptr++;
 81052b6:	69fb      	ldr	r3, [r7, #28]
 81052b8:	3301      	adds	r3, #1
 81052ba:	61fb      	str	r3, [r7, #28]
			len--;
 81052bc:	683b      	ldr	r3, [r7, #0]
 81052be:	3b01      	subs	r3, #1
 81052c0:	603b      	str	r3, [r7, #0]
		while ( len && (
 81052c2:	683b      	ldr	r3, [r7, #0]
 81052c4:	2b00      	cmp	r3, #0
 81052c6:	d017      	beq.n	81052f8 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 81052c8:	69bb      	ldr	r3, [r7, #24]
 81052ca:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81052ce:	2b00      	cmp	r3, #0
 81052d0:	d1ea      	bne.n	81052a8 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 81052d2:	69fb      	ldr	r3, [r7, #28]
 81052d4:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 81052d8:	2b00      	cmp	r3, #0
 81052da:	d1e5      	bne.n	81052a8 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81052dc:	e00c      	b.n	81052f8 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 81052de:	69fb      	ldr	r3, [r7, #28]
 81052e0:	681a      	ldr	r2, [r3, #0]
 81052e2:	69bb      	ldr	r3, [r7, #24]
 81052e4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81052e6:	69bb      	ldr	r3, [r7, #24]
 81052e8:	3304      	adds	r3, #4
 81052ea:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 81052ec:	69fb      	ldr	r3, [r7, #28]
 81052ee:	3304      	adds	r3, #4
 81052f0:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 81052f2:	683b      	ldr	r3, [r7, #0]
 81052f4:	3b04      	subs	r3, #4
 81052f6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81052f8:	683b      	ldr	r3, [r7, #0]
 81052fa:	2b03      	cmp	r3, #3
 81052fc:	dcef      	bgt.n	81052de <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 81052fe:	e00c      	b.n	810531a <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8105300:	69fb      	ldr	r3, [r7, #28]
 8105302:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8105304:	69bb      	ldr	r3, [r7, #24]
 8105306:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8105308:	69bb      	ldr	r3, [r7, #24]
 810530a:	3301      	adds	r3, #1
 810530c:	61bb      	str	r3, [r7, #24]
 810530e:	69fb      	ldr	r3, [r7, #28]
 8105310:	3301      	adds	r3, #1
 8105312:	61fb      	str	r3, [r7, #28]
 8105314:	683b      	ldr	r3, [r7, #0]
 8105316:	3b01      	subs	r3, #1
 8105318:	603b      	str	r3, [r7, #0]
 810531a:	683b      	ldr	r3, [r7, #0]
 810531c:	2b00      	cmp	r3, #0
 810531e:	d1ef      	bne.n	8105300 <metal_io_block_read+0xc4>
	}
	return retlen;
 8105320:	697b      	ldr	r3, [r7, #20]
}
 8105322:	4618      	mov	r0, r3
 8105324:	3724      	adds	r7, #36	; 0x24
 8105326:	46bd      	mov	sp, r7
 8105328:	bd90      	pop	{r4, r7, pc}

0810532a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 810532a:	b590      	push	{r4, r7, lr}
 810532c:	b08b      	sub	sp, #44	; 0x2c
 810532e:	af02      	add	r7, sp, #8
 8105330:	60f8      	str	r0, [r7, #12]
 8105332:	60b9      	str	r1, [r7, #8]
 8105334:	607a      	str	r2, [r7, #4]
 8105336:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8105338:	68b9      	ldr	r1, [r7, #8]
 810533a:	68f8      	ldr	r0, [r7, #12]
 810533c:	f7ff ff14 	bl	8105168 <metal_io_virt>
 8105340:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8105346:	68fb      	ldr	r3, [r7, #12]
 8105348:	689b      	ldr	r3, [r3, #8]
 810534a:	68ba      	ldr	r2, [r7, #8]
 810534c:	429a      	cmp	r2, r3
 810534e:	d902      	bls.n	8105356 <metal_io_block_write+0x2c>
		return -ERANGE;
 8105350:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8105354:	e05b      	b.n	810540e <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8105356:	683a      	ldr	r2, [r7, #0]
 8105358:	68bb      	ldr	r3, [r7, #8]
 810535a:	441a      	add	r2, r3
 810535c:	68fb      	ldr	r3, [r7, #12]
 810535e:	689b      	ldr	r3, [r3, #8]
 8105360:	429a      	cmp	r2, r3
 8105362:	d904      	bls.n	810536e <metal_io_block_write+0x44>
		len = io->size - offset;
 8105364:	68fb      	ldr	r3, [r7, #12]
 8105366:	689a      	ldr	r2, [r3, #8]
 8105368:	68bb      	ldr	r3, [r7, #8]
 810536a:	1ad3      	subs	r3, r2, r3
 810536c:	603b      	str	r3, [r7, #0]
	retlen = len;
 810536e:	683b      	ldr	r3, [r7, #0]
 8105370:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105376:	2b00      	cmp	r3, #0
 8105378:	d017      	beq.n	81053aa <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 810537a:	68fb      	ldr	r3, [r7, #12]
 810537c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 810537e:	683b      	ldr	r3, [r7, #0]
 8105380:	9300      	str	r3, [sp, #0]
 8105382:	2305      	movs	r3, #5
 8105384:	687a      	ldr	r2, [r7, #4]
 8105386:	68b9      	ldr	r1, [r7, #8]
 8105388:	68f8      	ldr	r0, [r7, #12]
 810538a:	47a0      	blx	r4
 810538c:	6178      	str	r0, [r7, #20]
 810538e:	e03d      	b.n	810540c <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8105390:	69bb      	ldr	r3, [r7, #24]
 8105392:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8105394:	69fb      	ldr	r3, [r7, #28]
 8105396:	701a      	strb	r2, [r3, #0]
			ptr++;
 8105398:	69fb      	ldr	r3, [r7, #28]
 810539a:	3301      	adds	r3, #1
 810539c:	61fb      	str	r3, [r7, #28]
			source++;
 810539e:	69bb      	ldr	r3, [r7, #24]
 81053a0:	3301      	adds	r3, #1
 81053a2:	61bb      	str	r3, [r7, #24]
			len--;
 81053a4:	683b      	ldr	r3, [r7, #0]
 81053a6:	3b01      	subs	r3, #1
 81053a8:	603b      	str	r3, [r7, #0]
		while ( len && (
 81053aa:	683b      	ldr	r3, [r7, #0]
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d017      	beq.n	81053e0 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 81053b0:	69fb      	ldr	r3, [r7, #28]
 81053b2:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d1ea      	bne.n	8105390 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 81053ba:	69bb      	ldr	r3, [r7, #24]
 81053bc:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d1e5      	bne.n	8105390 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81053c4:	e00c      	b.n	81053e0 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 81053c6:	69bb      	ldr	r3, [r7, #24]
 81053c8:	681a      	ldr	r2, [r3, #0]
 81053ca:	69fb      	ldr	r3, [r7, #28]
 81053cc:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81053ce:	69fb      	ldr	r3, [r7, #28]
 81053d0:	3304      	adds	r3, #4
 81053d2:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 81053d4:	69bb      	ldr	r3, [r7, #24]
 81053d6:	3304      	adds	r3, #4
 81053d8:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 81053da:	683b      	ldr	r3, [r7, #0]
 81053dc:	3b04      	subs	r3, #4
 81053de:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 81053e0:	683b      	ldr	r3, [r7, #0]
 81053e2:	2b03      	cmp	r3, #3
 81053e4:	dcef      	bgt.n	81053c6 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 81053e6:	e00c      	b.n	8105402 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81053e8:	69bb      	ldr	r3, [r7, #24]
 81053ea:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81053ec:	69fb      	ldr	r3, [r7, #28]
 81053ee:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 81053f0:	69fb      	ldr	r3, [r7, #28]
 81053f2:	3301      	adds	r3, #1
 81053f4:	61fb      	str	r3, [r7, #28]
 81053f6:	69bb      	ldr	r3, [r7, #24]
 81053f8:	3301      	adds	r3, #1
 81053fa:	61bb      	str	r3, [r7, #24]
 81053fc:	683b      	ldr	r3, [r7, #0]
 81053fe:	3b01      	subs	r3, #1
 8105400:	603b      	str	r3, [r7, #0]
 8105402:	683b      	ldr	r3, [r7, #0]
 8105404:	2b00      	cmp	r3, #0
 8105406:	d1ef      	bne.n	81053e8 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8105408:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 810540c:	697b      	ldr	r3, [r7, #20]
}
 810540e:	4618      	mov	r0, r3
 8105410:	3724      	adds	r7, #36	; 0x24
 8105412:	46bd      	mov	sp, r7
 8105414:	bd90      	pop	{r4, r7, pc}

08105416 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8105416:	b40e      	push	{r1, r2, r3}
 8105418:	b480      	push	{r7}
 810541a:	b082      	sub	sp, #8
 810541c:	af00      	add	r7, sp, #0
 810541e:	4603      	mov	r3, r0
 8105420:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8105422:	bf00      	nop
 8105424:	3708      	adds	r7, #8
 8105426:	46bd      	mov	sp, r7
 8105428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810542c:	b003      	add	sp, #12
 810542e:	4770      	bx	lr

08105430 <metal_io_virt>:
{
 8105430:	b480      	push	{r7}
 8105432:	b083      	sub	sp, #12
 8105434:	af00      	add	r7, sp, #0
 8105436:	6078      	str	r0, [r7, #4]
 8105438:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	681b      	ldr	r3, [r3, #0]
		: NULL);
 810543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105442:	d009      	beq.n	8105458 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	689b      	ldr	r3, [r3, #8]
 8105448:	683a      	ldr	r2, [r7, #0]
 810544a:	429a      	cmp	r2, r3
 810544c:	d804      	bhi.n	8105458 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8105452:	683b      	ldr	r3, [r7, #0]
 8105454:	4413      	add	r3, r2
 8105456:	e000      	b.n	810545a <metal_io_virt+0x2a>
 8105458:	2300      	movs	r3, #0
}
 810545a:	4618      	mov	r0, r3
 810545c:	370c      	adds	r7, #12
 810545e:	46bd      	mov	sp, r7
 8105460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105464:	4770      	bx	lr

08105466 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8105466:	b480      	push	{r7}
 8105468:	b085      	sub	sp, #20
 810546a:	af00      	add	r7, sp, #0
 810546c:	6078      	str	r0, [r7, #4]
 810546e:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	681b      	ldr	r3, [r3, #0]
 8105474:	683a      	ldr	r2, [r7, #0]
 8105476:	1ad3      	subs	r3, r2, r3
 8105478:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 810547a:	687b      	ldr	r3, [r7, #4]
 810547c:	689b      	ldr	r3, [r3, #8]
 810547e:	68fa      	ldr	r2, [r7, #12]
 8105480:	429a      	cmp	r2, r3
 8105482:	d201      	bcs.n	8105488 <metal_io_virt_to_offset+0x22>
 8105484:	68fb      	ldr	r3, [r7, #12]
 8105486:	e001      	b.n	810548c <metal_io_virt_to_offset+0x26>
 8105488:	f04f 33ff 	mov.w	r3, #4294967295
}
 810548c:	4618      	mov	r0, r3
 810548e:	3714      	adds	r7, #20
 8105490:	46bd      	mov	sp, r7
 8105492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105496:	4770      	bx	lr

08105498 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8105498:	b590      	push	{r4, r7, lr}
 810549a:	b08d      	sub	sp, #52	; 0x34
 810549c:	af00      	add	r7, sp, #0
 810549e:	60f8      	str	r0, [r7, #12]
 81054a0:	60b9      	str	r1, [r7, #8]
 81054a2:	603b      	str	r3, [r7, #0]
 81054a4:	4613      	mov	r3, r2
 81054a6:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 81054a8:	68b9      	ldr	r1, [r7, #8]
 81054aa:	68f8      	ldr	r0, [r7, #12]
 81054ac:	f7ff ffc0 	bl	8105430 <metal_io_virt>
 81054b0:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 81054b2:	68fb      	ldr	r3, [r7, #12]
 81054b4:	699b      	ldr	r3, [r3, #24]
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	d009      	beq.n	81054ce <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 81054ba:	68fb      	ldr	r3, [r7, #12]
 81054bc:	699c      	ldr	r4, [r3, #24]
 81054be:	79fa      	ldrb	r2, [r7, #7]
 81054c0:	683b      	ldr	r3, [r7, #0]
 81054c2:	68b9      	ldr	r1, [r7, #8]
 81054c4:	68f8      	ldr	r0, [r7, #12]
 81054c6:	47a0      	blx	r4
 81054c8:	4602      	mov	r2, r0
 81054ca:	460b      	mov	r3, r1
 81054cc:	e057      	b.n	810557e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 81054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d011      	beq.n	81054f8 <metal_io_read+0x60>
 81054d4:	683b      	ldr	r3, [r7, #0]
 81054d6:	2b01      	cmp	r3, #1
 81054d8:	d10e      	bne.n	81054f8 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 81054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054dc:	62bb      	str	r3, [r7, #40]	; 0x28
 81054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054e0:	f3bf 8f5b 	dmb	ish
 81054e4:	781b      	ldrb	r3, [r3, #0]
 81054e6:	f3bf 8f5b 	dmb	ish
 81054ea:	b2db      	uxtb	r3, r3
 81054ec:	76fb      	strb	r3, [r7, #27]
 81054ee:	7efb      	ldrb	r3, [r7, #27]
 81054f0:	b2da      	uxtb	r2, r3
 81054f2:	f04f 0300 	mov.w	r3, #0
 81054f6:	e042      	b.n	810557e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 81054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054fa:	2b00      	cmp	r3, #0
 81054fc:	d011      	beq.n	8105522 <metal_io_read+0x8a>
 81054fe:	683b      	ldr	r3, [r7, #0]
 8105500:	2b02      	cmp	r3, #2
 8105502:	d10e      	bne.n	8105522 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8105504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105506:	627b      	str	r3, [r7, #36]	; 0x24
 8105508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810550a:	f3bf 8f5b 	dmb	ish
 810550e:	881b      	ldrh	r3, [r3, #0]
 8105510:	f3bf 8f5b 	dmb	ish
 8105514:	b29b      	uxth	r3, r3
 8105516:	833b      	strh	r3, [r7, #24]
 8105518:	8b3b      	ldrh	r3, [r7, #24]
 810551a:	b29a      	uxth	r2, r3
 810551c:	f04f 0300 	mov.w	r3, #0
 8105520:	e02d      	b.n	810557e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8105522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105524:	2b00      	cmp	r3, #0
 8105526:	d010      	beq.n	810554a <metal_io_read+0xb2>
 8105528:	683b      	ldr	r3, [r7, #0]
 810552a:	2b04      	cmp	r3, #4
 810552c:	d10d      	bne.n	810554a <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 810552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105530:	623b      	str	r3, [r7, #32]
 8105532:	6a3b      	ldr	r3, [r7, #32]
 8105534:	f3bf 8f5b 	dmb	ish
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	f3bf 8f5b 	dmb	ish
 810553e:	617b      	str	r3, [r7, #20]
 8105540:	697b      	ldr	r3, [r7, #20]
 8105542:	461a      	mov	r2, r3
 8105544:	f04f 0300 	mov.w	r3, #0
 8105548:	e019      	b.n	810557e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 810554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810554c:	2b00      	cmp	r3, #0
 810554e:	d010      	beq.n	8105572 <metal_io_read+0xda>
 8105550:	683b      	ldr	r3, [r7, #0]
 8105552:	2b04      	cmp	r3, #4
 8105554:	d10d      	bne.n	8105572 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8105556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105558:	61fb      	str	r3, [r7, #28]
 810555a:	69fb      	ldr	r3, [r7, #28]
 810555c:	f3bf 8f5b 	dmb	ish
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	f3bf 8f5b 	dmb	ish
 8105566:	613b      	str	r3, [r7, #16]
 8105568:	693b      	ldr	r3, [r7, #16]
 810556a:	461a      	mov	r2, r3
 810556c:	f04f 0300 	mov.w	r3, #0
 8105570:	e005      	b.n	810557e <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8105572:	4b05      	ldr	r3, [pc, #20]	; (8105588 <metal_io_read+0xf0>)
 8105574:	4a05      	ldr	r2, [pc, #20]	; (810558c <metal_io_read+0xf4>)
 8105576:	21f0      	movs	r1, #240	; 0xf0
 8105578:	4805      	ldr	r0, [pc, #20]	; (8105590 <metal_io_read+0xf8>)
 810557a:	f001 fe69 	bl	8107250 <__assert_func>
	return 0; /* quiet compiler */
}
 810557e:	4610      	mov	r0, r2
 8105580:	4619      	mov	r1, r3
 8105582:	3734      	adds	r7, #52	; 0x34
 8105584:	46bd      	mov	sp, r7
 8105586:	bd90      	pop	{r4, r7, pc}
 8105588:	0810bc1c 	.word	0x0810bc1c
 810558c:	0810bd90 	.word	0x0810bd90
 8105590:	0810bc20 	.word	0x0810bc20

08105594 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8105594:	b580      	push	{r7, lr}
 8105596:	b082      	sub	sp, #8
 8105598:	af00      	add	r7, sp, #0
 810559a:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 810559c:	6878      	ldr	r0, [r7, #4]
 810559e:	f001 feb1 	bl	8107304 <malloc>
 81055a2:	4603      	mov	r3, r0
}
 81055a4:	4618      	mov	r0, r3
 81055a6:	3708      	adds	r7, #8
 81055a8:	46bd      	mov	sp, r7
 81055aa:	bd80      	pop	{r7, pc}

081055ac <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 81055ac:	b580      	push	{r7, lr}
 81055ae:	b082      	sub	sp, #8
 81055b0:	af00      	add	r7, sp, #0
 81055b2:	6078      	str	r0, [r7, #4]
	free(ptr);
 81055b4:	6878      	ldr	r0, [r7, #4]
 81055b6:	f001 fead 	bl	8107314 <free>
}
 81055ba:	bf00      	nop
 81055bc:	3708      	adds	r7, #8
 81055be:	46bd      	mov	sp, r7
 81055c0:	bd80      	pop	{r7, pc}

081055c2 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 81055c2:	b580      	push	{r7, lr}
 81055c4:	b084      	sub	sp, #16
 81055c6:	af00      	add	r7, sp, #0
 81055c8:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	3307      	adds	r3, #7
 81055ce:	00db      	lsls	r3, r3, #3
 81055d0:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 81055d2:	68f8      	ldr	r0, [r7, #12]
 81055d4:	f7ff ffde 	bl	8105594 <metal_allocate_memory>
 81055d8:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 81055da:	68bb      	ldr	r3, [r7, #8]
 81055dc:	2b00      	cmp	r3, #0
 81055de:	d004      	beq.n	81055ea <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 81055e0:	68fa      	ldr	r2, [r7, #12]
 81055e2:	2100      	movs	r1, #0
 81055e4:	68b8      	ldr	r0, [r7, #8]
 81055e6:	f001 feab 	bl	8107340 <memset>
	}

	return vqs;
 81055ea:	68bb      	ldr	r3, [r7, #8]
}
 81055ec:	4618      	mov	r0, r3
 81055ee:	3710      	adds	r7, #16
 81055f0:	46bd      	mov	sp, r7
 81055f2:	bd80      	pop	{r7, pc}

081055f4 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 81055f4:	b580      	push	{r7, lr}
 81055f6:	b086      	sub	sp, #24
 81055f8:	af00      	add	r7, sp, #0
 81055fa:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	891b      	ldrh	r3, [r3, #8]
 8105600:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105608:	693b      	ldr	r3, [r7, #16]
 810560a:	3b18      	subs	r3, #24
 810560c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810560e:	693b      	ldr	r3, [r7, #16]
 8105610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105612:	697a      	ldr	r2, [r7, #20]
 8105614:	429a      	cmp	r2, r3
 8105616:	d905      	bls.n	8105624 <rproc_virtio_virtqueue_notify+0x30>
 8105618:	4b0d      	ldr	r3, [pc, #52]	; (8105650 <rproc_virtio_virtqueue_notify+0x5c>)
 810561a:	4a0e      	ldr	r2, [pc, #56]	; (8105654 <rproc_virtio_virtqueue_notify+0x60>)
 810561c:	2133      	movs	r1, #51	; 0x33
 810561e:	480e      	ldr	r0, [pc, #56]	; (8105658 <rproc_virtio_virtqueue_notify+0x64>)
 8105620:	f001 fe16 	bl	8107250 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8105624:	693b      	ldr	r3, [r7, #16]
 8105626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105628:	697a      	ldr	r2, [r7, #20]
 810562a:	4613      	mov	r3, r2
 810562c:	005b      	lsls	r3, r3, #1
 810562e:	4413      	add	r3, r2
 8105630:	00db      	lsls	r3, r3, #3
 8105632:	440b      	add	r3, r1
 8105634:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8105636:	68fb      	ldr	r3, [r7, #12]
 8105638:	691b      	ldr	r3, [r3, #16]
 810563a:	68fa      	ldr	r2, [r7, #12]
 810563c:	6810      	ldr	r0, [r2, #0]
 810563e:	68ba      	ldr	r2, [r7, #8]
 8105640:	6912      	ldr	r2, [r2, #16]
 8105642:	4611      	mov	r1, r2
 8105644:	4798      	blx	r3
}
 8105646:	bf00      	nop
 8105648:	3718      	adds	r7, #24
 810564a:	46bd      	mov	sp, r7
 810564c:	bd80      	pop	{r7, pc}
 810564e:	bf00      	nop
 8105650:	0810bc68 	.word	0x0810bc68
 8105654:	0810bd70 	.word	0x0810bd70
 8105658:	0810bc84 	.word	0x0810bc84

0810565c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 810565c:	b580      	push	{r7, lr}
 810565e:	b086      	sub	sp, #24
 8105660:	af00      	add	r7, sp, #0
 8105662:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	3b18      	subs	r3, #24
 8105668:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810566a:	697b      	ldr	r3, [r7, #20]
 810566c:	689b      	ldr	r3, [r3, #8]
 810566e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105670:	697b      	ldr	r3, [r7, #20]
 8105672:	68db      	ldr	r3, [r3, #12]
 8105674:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8105676:	693b      	ldr	r3, [r7, #16]
 8105678:	3318      	adds	r3, #24
 810567a:	4619      	mov	r1, r3
 810567c:	68f8      	ldr	r0, [r7, #12]
 810567e:	f7ff fef2 	bl	8105466 <metal_io_virt_to_offset>
 8105682:	4601      	mov	r1, r0
 8105684:	2301      	movs	r3, #1
 8105686:	2205      	movs	r2, #5
 8105688:	68f8      	ldr	r0, [r7, #12]
 810568a:	f7ff ff05 	bl	8105498 <metal_io_read>
 810568e:	4602      	mov	r2, r0
 8105690:	460b      	mov	r3, r1
 8105692:	4613      	mov	r3, r2
 8105694:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8105696:	7afb      	ldrb	r3, [r7, #11]
}
 8105698:	4618      	mov	r0, r3
 810569a:	3718      	adds	r7, #24
 810569c:	46bd      	mov	sp, r7
 810569e:	bd80      	pop	{r7, pc}

081056a0 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 81056a0:	b580      	push	{r7, lr}
 81056a2:	b086      	sub	sp, #24
 81056a4:	af00      	add	r7, sp, #0
 81056a6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	3b18      	subs	r3, #24
 81056ac:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81056ae:	697b      	ldr	r3, [r7, #20]
 81056b0:	689b      	ldr	r3, [r3, #8]
 81056b2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81056b4:	697b      	ldr	r3, [r7, #20]
 81056b6:	68db      	ldr	r3, [r3, #12]
 81056b8:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 81056ba:	693b      	ldr	r3, [r7, #16]
 81056bc:	330c      	adds	r3, #12
 81056be:	4619      	mov	r1, r3
 81056c0:	68f8      	ldr	r0, [r7, #12]
 81056c2:	f7ff fed0 	bl	8105466 <metal_io_virt_to_offset>
 81056c6:	4601      	mov	r1, r0
 81056c8:	2304      	movs	r3, #4
 81056ca:	2205      	movs	r2, #5
 81056cc:	68f8      	ldr	r0, [r7, #12]
 81056ce:	f7ff fee3 	bl	8105498 <metal_io_read>
 81056d2:	4602      	mov	r2, r0
 81056d4:	460b      	mov	r3, r1
 81056d6:	4613      	mov	r3, r2
 81056d8:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 81056da:	68bb      	ldr	r3, [r7, #8]
}
 81056dc:	4618      	mov	r0, r3
 81056de:	3718      	adds	r7, #24
 81056e0:	46bd      	mov	sp, r7
 81056e2:	bd80      	pop	{r7, pc}

081056e4 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 81056e4:	b480      	push	{r7}
 81056e6:	b083      	sub	sp, #12
 81056e8:	af00      	add	r7, sp, #0
 81056ea:	6078      	str	r0, [r7, #4]
 81056ec:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 81056ee:	2300      	movs	r3, #0
}
 81056f0:	4618      	mov	r0, r3
 81056f2:	370c      	adds	r7, #12
 81056f4:	46bd      	mov	sp, r7
 81056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056fa:	4770      	bx	lr

081056fc <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81056fc:	b480      	push	{r7}
 81056fe:	b085      	sub	sp, #20
 8105700:	af00      	add	r7, sp, #0
 8105702:	60f8      	str	r0, [r7, #12]
 8105704:	60b9      	str	r1, [r7, #8]
 8105706:	607a      	str	r2, [r7, #4]
 8105708:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 810570a:	bf00      	nop
 810570c:	3714      	adds	r7, #20
 810570e:	46bd      	mov	sp, r7
 8105710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105714:	4770      	bx	lr
	...

08105718 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8105718:	b580      	push	{r7, lr}
 810571a:	b08e      	sub	sp, #56	; 0x38
 810571c:	af00      	add	r7, sp, #0
 810571e:	60f8      	str	r0, [r7, #12]
 8105720:	60b9      	str	r1, [r7, #8]
 8105722:	607a      	str	r2, [r7, #4]
 8105724:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 810572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810572c:	7e5b      	ldrb	r3, [r3, #25]
 810572e:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8105730:	2050      	movs	r0, #80	; 0x50
 8105732:	f7ff ff2f 	bl	8105594 <metal_allocate_memory>
 8105736:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8105738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810573a:	2b00      	cmp	r3, #0
 810573c:	d101      	bne.n	8105742 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 810573e:	2300      	movs	r3, #0
 8105740:	e092      	b.n	8105868 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8105742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105744:	4613      	mov	r3, r2
 8105746:	005b      	lsls	r3, r3, #1
 8105748:	4413      	add	r3, r2
 810574a:	00db      	lsls	r3, r3, #3
 810574c:	4618      	mov	r0, r3
 810574e:	f7ff ff21 	bl	8105594 <metal_allocate_memory>
 8105752:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8105754:	6a3b      	ldr	r3, [r7, #32]
 8105756:	2b00      	cmp	r3, #0
 8105758:	f000 8081 	beq.w	810585e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 810575c:	2250      	movs	r2, #80	; 0x50
 810575e:	2100      	movs	r1, #0
 8105760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105762:	f001 fded 	bl	8107340 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8105766:	2218      	movs	r2, #24
 8105768:	2100      	movs	r1, #0
 810576a:	6a38      	ldr	r0, [r7, #32]
 810576c:	f001 fde8 	bl	8107340 <memset>
	vdev = &rpvdev->vdev;
 8105770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105772:	3318      	adds	r3, #24
 8105774:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8105776:	2300      	movs	r3, #0
 8105778:	637b      	str	r3, [r7, #52]	; 0x34
 810577a:	e025      	b.n	81057c8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 810577c:	2300      	movs	r3, #0
 810577e:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8105780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105782:	4613      	mov	r3, r2
 8105784:	009b      	lsls	r3, r3, #2
 8105786:	4413      	add	r3, r2
 8105788:	009b      	lsls	r3, r3, #2
 810578a:	3318      	adds	r3, #24
 810578c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810578e:	4413      	add	r3, r2
 8105790:	3304      	adds	r3, #4
 8105792:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	2b00      	cmp	r3, #0
 8105798:	d102      	bne.n	81057a0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 810579a:	69bb      	ldr	r3, [r7, #24]
 810579c:	689b      	ldr	r3, [r3, #8]
 810579e:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 81057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81057a2:	f7ff ff0e 	bl	81055c2 <virtqueue_allocate>
 81057a6:	6178      	str	r0, [r7, #20]
		if (!vq)
 81057a8:	697b      	ldr	r3, [r7, #20]
 81057aa:	2b00      	cmp	r3, #0
 81057ac:	d031      	beq.n	8105812 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 81057ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057b0:	4613      	mov	r3, r2
 81057b2:	005b      	lsls	r3, r3, #1
 81057b4:	4413      	add	r3, r2
 81057b6:	00db      	lsls	r3, r3, #3
 81057b8:	461a      	mov	r2, r3
 81057ba:	6a3b      	ldr	r3, [r7, #32]
 81057bc:	4413      	add	r3, r2
 81057be:	697a      	ldr	r2, [r7, #20]
 81057c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 81057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81057c4:	3301      	adds	r3, #1
 81057c6:	637b      	str	r3, [r7, #52]	; 0x34
 81057c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057cc:	429a      	cmp	r2, r3
 81057ce:	d3d5      	bcc.n	810577c <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 81057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81057d4:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 81057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81057da:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 81057dc:	69fb      	ldr	r3, [r7, #28]
 81057de:	6a3a      	ldr	r2, [r7, #32]
 81057e0:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 81057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81057e6:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 81057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057ea:	683a      	ldr	r2, [r7, #0]
 81057ec:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 81057ee:	69fb      	ldr	r3, [r7, #28]
 81057f0:	68ba      	ldr	r2, [r7, #8]
 81057f2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 81057f4:	69fb      	ldr	r3, [r7, #28]
 81057f6:	68fa      	ldr	r2, [r7, #12]
 81057f8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 81057fa:	69fb      	ldr	r3, [r7, #28]
 81057fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81057fe:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8105800:	69fb      	ldr	r3, [r7, #28]
 8105802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105804:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8105806:	69fb      	ldr	r3, [r7, #28]
 8105808:	4a19      	ldr	r2, [pc, #100]	; (8105870 <rproc_virtio_create_vdev+0x158>)
 810580a:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 810580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810580e:	3318      	adds	r3, #24
 8105810:	e02a      	b.n	8105868 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8105812:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8105814:	2300      	movs	r3, #0
 8105816:	637b      	str	r3, [r7, #52]	; 0x34
 8105818:	e019      	b.n	810584e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 810581a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810581c:	4613      	mov	r3, r2
 810581e:	005b      	lsls	r3, r3, #1
 8105820:	4413      	add	r3, r2
 8105822:	00db      	lsls	r3, r3, #3
 8105824:	461a      	mov	r2, r3
 8105826:	6a3b      	ldr	r3, [r7, #32]
 8105828:	4413      	add	r3, r2
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	2b00      	cmp	r3, #0
 810582e:	d00b      	beq.n	8105848 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8105830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105832:	4613      	mov	r3, r2
 8105834:	005b      	lsls	r3, r3, #1
 8105836:	4413      	add	r3, r2
 8105838:	00db      	lsls	r3, r3, #3
 810583a:	461a      	mov	r2, r3
 810583c:	6a3b      	ldr	r3, [r7, #32]
 810583e:	4413      	add	r3, r2
 8105840:	681b      	ldr	r3, [r3, #0]
 8105842:	4618      	mov	r0, r3
 8105844:	f7ff feb2 	bl	81055ac <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8105848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810584a:	3301      	adds	r3, #1
 810584c:	637b      	str	r3, [r7, #52]	; 0x34
 810584e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105852:	429a      	cmp	r2, r3
 8105854:	d3e1      	bcc.n	810581a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8105856:	6a38      	ldr	r0, [r7, #32]
 8105858:	f7ff fea8 	bl	81055ac <metal_free_memory>
 810585c:	e000      	b.n	8105860 <rproc_virtio_create_vdev+0x148>
		goto err0;
 810585e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8105860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105862:	f7ff fea3 	bl	81055ac <metal_free_memory>
	return NULL;
 8105866:	2300      	movs	r3, #0
}
 8105868:	4618      	mov	r0, r3
 810586a:	3738      	adds	r7, #56	; 0x38
 810586c:	46bd      	mov	sp, r7
 810586e:	bd80      	pop	{r7, pc}
 8105870:	0810bd4c 	.word	0x0810bd4c

08105874 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8105874:	b480      	push	{r7}
 8105876:	b087      	sub	sp, #28
 8105878:	af00      	add	r7, sp, #0
 810587a:	60f8      	str	r0, [r7, #12]
 810587c:	60b9      	str	r1, [r7, #8]
 810587e:	607a      	str	r2, [r7, #4]
 8105880:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8105882:	68fb      	ldr	r3, [r7, #12]
 8105884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105886:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8105888:	68ba      	ldr	r2, [r7, #8]
 810588a:	697b      	ldr	r3, [r7, #20]
 810588c:	429a      	cmp	r2, r3
 810588e:	d302      	bcc.n	8105896 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8105890:	f06f 0301 	mvn.w	r3, #1
 8105894:	e019      	b.n	81058ca <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8105896:	68fb      	ldr	r3, [r7, #12]
 8105898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810589a:	68ba      	ldr	r2, [r7, #8]
 810589c:	4613      	mov	r3, r2
 810589e:	005b      	lsls	r3, r3, #1
 81058a0:	4413      	add	r3, r2
 81058a2:	00db      	lsls	r3, r3, #3
 81058a4:	440b      	add	r3, r1
 81058a6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 81058a8:	693b      	ldr	r3, [r7, #16]
 81058aa:	6a3a      	ldr	r2, [r7, #32]
 81058ac:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 81058ae:	693b      	ldr	r3, [r7, #16]
 81058b0:	687a      	ldr	r2, [r7, #4]
 81058b2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 81058b4:	693b      	ldr	r3, [r7, #16]
 81058b6:	683a      	ldr	r2, [r7, #0]
 81058b8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 81058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058bc:	b29a      	uxth	r2, r3
 81058be:	693b      	ldr	r3, [r7, #16]
 81058c0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 81058c2:	693b      	ldr	r3, [r7, #16]
 81058c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81058c6:	609a      	str	r2, [r3, #8]

	return 0;
 81058c8:	2300      	movs	r3, #0
}
 81058ca:	4618      	mov	r0, r3
 81058cc:	371c      	adds	r7, #28
 81058ce:	46bd      	mov	sp, r7
 81058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058d4:	4770      	bx	lr

081058d6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 81058d6:	b580      	push	{r7, lr}
 81058d8:	b086      	sub	sp, #24
 81058da:	af00      	add	r7, sp, #0
 81058dc:	6078      	str	r0, [r7, #4]
 81058de:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	2b00      	cmp	r3, #0
 81058e4:	d102      	bne.n	81058ec <rproc_virtio_notified+0x16>
		return -EINVAL;
 81058e6:	f06f 0315 	mvn.w	r3, #21
 81058ea:	e02c      	b.n	8105946 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	681b      	ldr	r3, [r3, #0]
 81058f0:	683a      	ldr	r2, [r7, #0]
 81058f2:	429a      	cmp	r2, r3
 81058f4:	d101      	bne.n	81058fa <rproc_virtio_notified+0x24>
		return 0;
 81058f6:	2300      	movs	r3, #0
 81058f8:	e025      	b.n	8105946 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 81058fa:	687b      	ldr	r3, [r7, #4]
 81058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81058fe:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8105900:	2300      	movs	r3, #0
 8105902:	617b      	str	r3, [r7, #20]
 8105904:	e01a      	b.n	810593c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810590a:	697a      	ldr	r2, [r7, #20]
 810590c:	4613      	mov	r3, r2
 810590e:	005b      	lsls	r3, r3, #1
 8105910:	4413      	add	r3, r2
 8105912:	00db      	lsls	r3, r3, #3
 8105914:	440b      	add	r3, r1
 8105916:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	691b      	ldr	r3, [r3, #16]
 810591c:	683a      	ldr	r2, [r7, #0]
 810591e:	429a      	cmp	r2, r3
 8105920:	d003      	beq.n	810592a <rproc_virtio_notified+0x54>
 8105922:	683b      	ldr	r3, [r7, #0]
 8105924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105928:	d105      	bne.n	8105936 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 810592a:	68fb      	ldr	r3, [r7, #12]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8105930:	68b8      	ldr	r0, [r7, #8]
 8105932:	f001 fa19 	bl	8106d68 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8105936:	697b      	ldr	r3, [r7, #20]
 8105938:	3301      	adds	r3, #1
 810593a:	617b      	str	r3, [r7, #20]
 810593c:	697a      	ldr	r2, [r7, #20]
 810593e:	693b      	ldr	r3, [r7, #16]
 8105940:	429a      	cmp	r2, r3
 8105942:	d3e0      	bcc.n	8105906 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8105944:	2300      	movs	r3, #0
}
 8105946:	4618      	mov	r0, r3
 8105948:	3718      	adds	r7, #24
 810594a:	46bd      	mov	sp, r7
 810594c:	bd80      	pop	{r7, pc}

0810594e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 810594e:	b580      	push	{r7, lr}
 8105950:	b084      	sub	sp, #16
 8105952:	af00      	add	r7, sp, #0
 8105954:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	699b      	ldr	r3, [r3, #24]
 810595a:	2b00      	cmp	r3, #0
 810595c:	d00a      	beq.n	8105974 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 810595e:	6878      	ldr	r0, [r7, #4]
 8105960:	f7ff fe7c 	bl	810565c <rproc_virtio_get_status>
 8105964:	4603      	mov	r3, r0
 8105966:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8105968:	7bfb      	ldrb	r3, [r7, #15]
 810596a:	f003 0304 	and.w	r3, r3, #4
 810596e:	2b00      	cmp	r3, #0
 8105970:	d102      	bne.n	8105978 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8105972:	e7f4      	b.n	810595e <rproc_virtio_wait_remote_ready+0x10>
		return;
 8105974:	bf00      	nop
 8105976:	e000      	b.n	810597a <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8105978:	bf00      	nop
	}
}
 810597a:	3710      	adds	r7, #16
 810597c:	46bd      	mov	sp, r7
 810597e:	bd80      	pop	{r7, pc}

08105980 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105980:	b480      	push	{r7}
 8105982:	b083      	sub	sp, #12
 8105984:	af00      	add	r7, sp, #0
 8105986:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105988:	bf00      	nop
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	2201      	movs	r2, #1
 810598e:	4611      	mov	r1, r2
 8105990:	f3bf 8f5b 	dmb	ish
 8105994:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105998:	e8c3 1f40 	strexb	r0, r1, [r3]
 810599c:	2800      	cmp	r0, #0
 810599e:	d1f9      	bne.n	8105994 <__metal_mutex_acquire+0x14>
 81059a0:	f3bf 8f5b 	dmb	ish
 81059a4:	b2d3      	uxtb	r3, r2
 81059a6:	2b00      	cmp	r3, #0
 81059a8:	d1ef      	bne.n	810598a <__metal_mutex_acquire+0xa>
		;
	}
}
 81059aa:	bf00      	nop
 81059ac:	bf00      	nop
 81059ae:	370c      	adds	r7, #12
 81059b0:	46bd      	mov	sp, r7
 81059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059b6:	4770      	bx	lr

081059b8 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 81059b8:	b480      	push	{r7}
 81059ba:	b083      	sub	sp, #12
 81059bc:	af00      	add	r7, sp, #0
 81059be:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	f3bf 8f5b 	dmb	ish
 81059c6:	2200      	movs	r2, #0
 81059c8:	701a      	strb	r2, [r3, #0]
 81059ca:	f3bf 8f5b 	dmb	ish
}
 81059ce:	bf00      	nop
 81059d0:	370c      	adds	r7, #12
 81059d2:	46bd      	mov	sp, r7
 81059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059d8:	4770      	bx	lr

081059da <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 81059da:	b580      	push	{r7, lr}
 81059dc:	b082      	sub	sp, #8
 81059de:	af00      	add	r7, sp, #0
 81059e0:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81059e2:	6878      	ldr	r0, [r7, #4]
 81059e4:	f7ff ffcc 	bl	8105980 <__metal_mutex_acquire>
}
 81059e8:	bf00      	nop
 81059ea:	3708      	adds	r7, #8
 81059ec:	46bd      	mov	sp, r7
 81059ee:	bd80      	pop	{r7, pc}

081059f0 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 81059f0:	b580      	push	{r7, lr}
 81059f2:	b082      	sub	sp, #8
 81059f4:	af00      	add	r7, sp, #0
 81059f6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81059f8:	6878      	ldr	r0, [r7, #4]
 81059fa:	f7ff ffdd 	bl	81059b8 <__metal_mutex_release>
}
 81059fe:	bf00      	nop
 8105a00:	3708      	adds	r7, #8
 8105a02:	46bd      	mov	sp, r7
 8105a04:	bd80      	pop	{r7, pc}

08105a06 <metal_list_add_before>:
{
 8105a06:	b480      	push	{r7}
 8105a08:	b083      	sub	sp, #12
 8105a0a:	af00      	add	r7, sp, #0
 8105a0c:	6078      	str	r0, [r7, #4]
 8105a0e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	685a      	ldr	r2, [r3, #4]
 8105a14:	683b      	ldr	r3, [r7, #0]
 8105a16:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105a18:	683b      	ldr	r3, [r7, #0]
 8105a1a:	687a      	ldr	r2, [r7, #4]
 8105a1c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8105a1e:	683b      	ldr	r3, [r7, #0]
 8105a20:	681b      	ldr	r3, [r3, #0]
 8105a22:	683a      	ldr	r2, [r7, #0]
 8105a24:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8105a26:	683b      	ldr	r3, [r7, #0]
 8105a28:	685b      	ldr	r3, [r3, #4]
 8105a2a:	683a      	ldr	r2, [r7, #0]
 8105a2c:	601a      	str	r2, [r3, #0]
}
 8105a2e:	bf00      	nop
 8105a30:	370c      	adds	r7, #12
 8105a32:	46bd      	mov	sp, r7
 8105a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a38:	4770      	bx	lr

08105a3a <metal_list_add_tail>:
{
 8105a3a:	b580      	push	{r7, lr}
 8105a3c:	b082      	sub	sp, #8
 8105a3e:	af00      	add	r7, sp, #0
 8105a40:	6078      	str	r0, [r7, #4]
 8105a42:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8105a44:	6839      	ldr	r1, [r7, #0]
 8105a46:	6878      	ldr	r0, [r7, #4]
 8105a48:	f7ff ffdd 	bl	8105a06 <metal_list_add_before>
}
 8105a4c:	bf00      	nop
 8105a4e:	3708      	adds	r7, #8
 8105a50:	46bd      	mov	sp, r7
 8105a52:	bd80      	pop	{r7, pc}

08105a54 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8105a54:	b480      	push	{r7}
 8105a56:	b083      	sub	sp, #12
 8105a58:	af00      	add	r7, sp, #0
 8105a5a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	687a      	ldr	r2, [r7, #4]
 8105a62:	6852      	ldr	r2, [r2, #4]
 8105a64:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	685b      	ldr	r3, [r3, #4]
 8105a6a:	687a      	ldr	r2, [r7, #4]
 8105a6c:	6812      	ldr	r2, [r2, #0]
 8105a6e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	687a      	ldr	r2, [r7, #4]
 8105a74:	605a      	str	r2, [r3, #4]
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	685a      	ldr	r2, [r3, #4]
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	601a      	str	r2, [r3, #0]
}
 8105a7e:	bf00      	nop
 8105a80:	370c      	adds	r7, #12
 8105a82:	46bd      	mov	sp, r7
 8105a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a88:	4770      	bx	lr

08105a8a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8105a8a:	b480      	push	{r7}
 8105a8c:	b083      	sub	sp, #12
 8105a8e:	af00      	add	r7, sp, #0
 8105a90:	6078      	str	r0, [r7, #4]
 8105a92:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105a94:	683b      	ldr	r3, [r7, #0]
 8105a96:	095b      	lsrs	r3, r3, #5
 8105a98:	009a      	lsls	r2, r3, #2
 8105a9a:	6879      	ldr	r1, [r7, #4]
 8105a9c:	440a      	add	r2, r1
 8105a9e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105aa0:	683a      	ldr	r2, [r7, #0]
 8105aa2:	f002 021f 	and.w	r2, r2, #31
 8105aa6:	2001      	movs	r0, #1
 8105aa8:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105aac:	009b      	lsls	r3, r3, #2
 8105aae:	6878      	ldr	r0, [r7, #4]
 8105ab0:	4403      	add	r3, r0
 8105ab2:	430a      	orrs	r2, r1
 8105ab4:	601a      	str	r2, [r3, #0]
}
 8105ab6:	bf00      	nop
 8105ab8:	370c      	adds	r7, #12
 8105aba:	46bd      	mov	sp, r7
 8105abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ac0:	4770      	bx	lr

08105ac2 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8105ac2:	b480      	push	{r7}
 8105ac4:	b083      	sub	sp, #12
 8105ac6:	af00      	add	r7, sp, #0
 8105ac8:	6078      	str	r0, [r7, #4]
 8105aca:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105acc:	683b      	ldr	r3, [r7, #0]
 8105ace:	095b      	lsrs	r3, r3, #5
 8105ad0:	009b      	lsls	r3, r3, #2
 8105ad2:	687a      	ldr	r2, [r7, #4]
 8105ad4:	4413      	add	r3, r2
 8105ad6:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105ad8:	683b      	ldr	r3, [r7, #0]
 8105ada:	f003 031f 	and.w	r3, r3, #31
 8105ade:	2101      	movs	r1, #1
 8105ae0:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105ae4:	4013      	ands	r3, r2
}
 8105ae6:	4618      	mov	r0, r3
 8105ae8:	370c      	adds	r7, #12
 8105aea:	46bd      	mov	sp, r7
 8105aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105af0:	4770      	bx	lr

08105af2 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8105af2:	b480      	push	{r7}
 8105af4:	b083      	sub	sp, #12
 8105af6:	af00      	add	r7, sp, #0
 8105af8:	6078      	str	r0, [r7, #4]
 8105afa:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105afc:	683b      	ldr	r3, [r7, #0]
 8105afe:	095b      	lsrs	r3, r3, #5
 8105b00:	009a      	lsls	r2, r3, #2
 8105b02:	6879      	ldr	r1, [r7, #4]
 8105b04:	440a      	add	r2, r1
 8105b06:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105b08:	683a      	ldr	r2, [r7, #0]
 8105b0a:	f002 021f 	and.w	r2, r2, #31
 8105b0e:	2001      	movs	r0, #1
 8105b10:	fa00 f202 	lsl.w	r2, r0, r2
 8105b14:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105b16:	009b      	lsls	r3, r3, #2
 8105b18:	6878      	ldr	r0, [r7, #4]
 8105b1a:	4403      	add	r3, r0
 8105b1c:	400a      	ands	r2, r1
 8105b1e:	601a      	str	r2, [r3, #0]
}
 8105b20:	bf00      	nop
 8105b22:	370c      	adds	r7, #12
 8105b24:	46bd      	mov	sp, r7
 8105b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b2a:	4770      	bx	lr

08105b2c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8105b2c:	b580      	push	{r7, lr}
 8105b2e:	b082      	sub	sp, #8
 8105b30:	af00      	add	r7, sp, #0
 8105b32:	6078      	str	r0, [r7, #4]
 8105b34:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8105b36:	6839      	ldr	r1, [r7, #0]
 8105b38:	6878      	ldr	r0, [r7, #4]
 8105b3a:	f7ff ffc2 	bl	8105ac2 <metal_bitmap_is_bit_set>
 8105b3e:	4603      	mov	r3, r0
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	bf0c      	ite	eq
 8105b44:	2301      	moveq	r3, #1
 8105b46:	2300      	movne	r3, #0
 8105b48:	b2db      	uxtb	r3, r3
}
 8105b4a:	4618      	mov	r0, r3
 8105b4c:	3708      	adds	r7, #8
 8105b4e:	46bd      	mov	sp, r7
 8105b50:	bd80      	pop	{r7, pc}

08105b52 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8105b52:	b580      	push	{r7, lr}
 8105b54:	b086      	sub	sp, #24
 8105b56:	af00      	add	r7, sp, #0
 8105b58:	60f8      	str	r0, [r7, #12]
 8105b5a:	60b9      	str	r1, [r7, #8]
 8105b5c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8105b5e:	68bb      	ldr	r3, [r7, #8]
 8105b60:	617b      	str	r3, [r7, #20]
 8105b62:	e002      	b.n	8105b6a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8105b64:	697b      	ldr	r3, [r7, #20]
 8105b66:	3301      	adds	r3, #1
 8105b68:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8105b6a:	697a      	ldr	r2, [r7, #20]
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	429a      	cmp	r2, r3
 8105b70:	d207      	bcs.n	8105b82 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8105b72:	697b      	ldr	r3, [r7, #20]
 8105b74:	4619      	mov	r1, r3
 8105b76:	68f8      	ldr	r0, [r7, #12]
 8105b78:	f7ff ffd8 	bl	8105b2c <metal_bitmap_is_bit_clear>
 8105b7c:	4603      	mov	r3, r0
 8105b7e:	2b00      	cmp	r3, #0
 8105b80:	d0f0      	beq.n	8105b64 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8105b82:	697b      	ldr	r3, [r7, #20]
}
 8105b84:	4618      	mov	r0, r3
 8105b86:	3718      	adds	r7, #24
 8105b88:	46bd      	mov	sp, r7
 8105b8a:	bd80      	pop	{r7, pc}

08105b8c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8105b8c:	b580      	push	{r7, lr}
 8105b8e:	b084      	sub	sp, #16
 8105b90:	af00      	add	r7, sp, #0
 8105b92:	60f8      	str	r0, [r7, #12]
 8105b94:	60b9      	str	r1, [r7, #8]
 8105b96:	607a      	str	r2, [r7, #4]
 8105b98:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105b9a:	68fb      	ldr	r3, [r7, #12]
 8105b9c:	2220      	movs	r2, #32
 8105b9e:	68b9      	ldr	r1, [r7, #8]
 8105ba0:	4618      	mov	r0, r3
 8105ba2:	f002 fc9b 	bl	81084dc <strncpy>
	ept->addr = src;
 8105ba6:	68fb      	ldr	r3, [r7, #12]
 8105ba8:	687a      	ldr	r2, [r7, #4]
 8105baa:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8105bac:	68fb      	ldr	r3, [r7, #12]
 8105bae:	683a      	ldr	r2, [r7, #0]
 8105bb0:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8105bb2:	68fb      	ldr	r3, [r7, #12]
 8105bb4:	69ba      	ldr	r2, [r7, #24]
 8105bb6:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105bb8:	68fb      	ldr	r3, [r7, #12]
 8105bba:	69fa      	ldr	r2, [r7, #28]
 8105bbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8105bbe:	bf00      	nop
 8105bc0:	3710      	adds	r7, #16
 8105bc2:	46bd      	mov	sp, r7
 8105bc4:	bd80      	pop	{r7, pc}

08105bc6 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8105bc6:	b580      	push	{r7, lr}
 8105bc8:	b084      	sub	sp, #16
 8105bca:	af00      	add	r7, sp, #0
 8105bcc:	6078      	str	r0, [r7, #4]
 8105bce:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8105bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8105bd4:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8105bd6:	683b      	ldr	r3, [r7, #0]
 8105bd8:	461a      	mov	r2, r3
 8105bda:	2100      	movs	r1, #0
 8105bdc:	6878      	ldr	r0, [r7, #4]
 8105bde:	f7ff ffb8 	bl	8105b52 <metal_bitmap_next_clear_bit>
 8105be2:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8105be4:	683b      	ldr	r3, [r7, #0]
 8105be6:	68ba      	ldr	r2, [r7, #8]
 8105be8:	429a      	cmp	r2, r3
 8105bea:	d206      	bcs.n	8105bfa <rpmsg_get_address+0x34>
		addr = nextbit;
 8105bec:	68bb      	ldr	r3, [r7, #8]
 8105bee:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8105bf0:	68bb      	ldr	r3, [r7, #8]
 8105bf2:	4619      	mov	r1, r3
 8105bf4:	6878      	ldr	r0, [r7, #4]
 8105bf6:	f7ff ff48 	bl	8105a8a <metal_bitmap_set_bit>
	}

	return addr;
 8105bfa:	68fb      	ldr	r3, [r7, #12]
}
 8105bfc:	4618      	mov	r0, r3
 8105bfe:	3710      	adds	r7, #16
 8105c00:	46bd      	mov	sp, r7
 8105c02:	bd80      	pop	{r7, pc}

08105c04 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8105c04:	b580      	push	{r7, lr}
 8105c06:	b084      	sub	sp, #16
 8105c08:	af00      	add	r7, sp, #0
 8105c0a:	60f8      	str	r0, [r7, #12]
 8105c0c:	60b9      	str	r1, [r7, #8]
 8105c0e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105c10:	687a      	ldr	r2, [r7, #4]
 8105c12:	68bb      	ldr	r3, [r7, #8]
 8105c14:	429a      	cmp	r2, r3
 8105c16:	da03      	bge.n	8105c20 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8105c18:	6879      	ldr	r1, [r7, #4]
 8105c1a:	68f8      	ldr	r0, [r7, #12]
 8105c1c:	f7ff ff69 	bl	8105af2 <metal_bitmap_clear_bit>
}
 8105c20:	bf00      	nop
 8105c22:	3710      	adds	r7, #16
 8105c24:	46bd      	mov	sp, r7
 8105c26:	bd80      	pop	{r7, pc}

08105c28 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8105c28:	b580      	push	{r7, lr}
 8105c2a:	b084      	sub	sp, #16
 8105c2c:	af00      	add	r7, sp, #0
 8105c2e:	60f8      	str	r0, [r7, #12]
 8105c30:	60b9      	str	r1, [r7, #8]
 8105c32:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105c34:	687a      	ldr	r2, [r7, #4]
 8105c36:	68bb      	ldr	r3, [r7, #8]
 8105c38:	429a      	cmp	r2, r3
 8105c3a:	da05      	bge.n	8105c48 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8105c3c:	6879      	ldr	r1, [r7, #4]
 8105c3e:	68f8      	ldr	r0, [r7, #12]
 8105c40:	f7ff ff3f 	bl	8105ac2 <metal_bitmap_is_bit_set>
 8105c44:	4603      	mov	r3, r0
 8105c46:	e000      	b.n	8105c4a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8105c48:	4b02      	ldr	r3, [pc, #8]	; (8105c54 <rpmsg_is_address_set+0x2c>)
}
 8105c4a:	4618      	mov	r0, r3
 8105c4c:	3710      	adds	r7, #16
 8105c4e:	46bd      	mov	sp, r7
 8105c50:	bd80      	pop	{r7, pc}
 8105c52:	bf00      	nop
 8105c54:	fffff82d 	.word	0xfffff82d

08105c58 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8105c58:	b580      	push	{r7, lr}
 8105c5a:	b084      	sub	sp, #16
 8105c5c:	af00      	add	r7, sp, #0
 8105c5e:	60f8      	str	r0, [r7, #12]
 8105c60:	60b9      	str	r1, [r7, #8]
 8105c62:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8105c64:	687a      	ldr	r2, [r7, #4]
 8105c66:	68bb      	ldr	r3, [r7, #8]
 8105c68:	429a      	cmp	r2, r3
 8105c6a:	da05      	bge.n	8105c78 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8105c6c:	6879      	ldr	r1, [r7, #4]
 8105c6e:	68f8      	ldr	r0, [r7, #12]
 8105c70:	f7ff ff0b 	bl	8105a8a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8105c74:	2300      	movs	r3, #0
 8105c76:	e000      	b.n	8105c7a <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8105c78:	4b02      	ldr	r3, [pc, #8]	; (8105c84 <rpmsg_set_address+0x2c>)
	}
}
 8105c7a:	4618      	mov	r0, r3
 8105c7c:	3710      	adds	r7, #16
 8105c7e:	46bd      	mov	sp, r7
 8105c80:	bd80      	pop	{r7, pc}
 8105c82:	bf00      	nop
 8105c84:	fffff82d 	.word	0xfffff82d

08105c88 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8105c88:	b590      	push	{r4, r7, lr}
 8105c8a:	b089      	sub	sp, #36	; 0x24
 8105c8c:	af02      	add	r7, sp, #8
 8105c8e:	60f8      	str	r0, [r7, #12]
 8105c90:	60b9      	str	r1, [r7, #8]
 8105c92:	607a      	str	r2, [r7, #4]
 8105c94:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8105c96:	68fb      	ldr	r3, [r7, #12]
 8105c98:	2b00      	cmp	r3, #0
 8105c9a:	d00a      	beq.n	8105cb2 <rpmsg_send_offchannel_raw+0x2a>
 8105c9c:	68fb      	ldr	r3, [r7, #12]
 8105c9e:	6a1b      	ldr	r3, [r3, #32]
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d006      	beq.n	8105cb2 <rpmsg_send_offchannel_raw+0x2a>
 8105ca4:	683b      	ldr	r3, [r7, #0]
 8105ca6:	2b00      	cmp	r3, #0
 8105ca8:	d003      	beq.n	8105cb2 <rpmsg_send_offchannel_raw+0x2a>
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105cb0:	d101      	bne.n	8105cb6 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8105cb2:	4b0d      	ldr	r3, [pc, #52]	; (8105ce8 <rpmsg_send_offchannel_raw+0x60>)
 8105cb4:	e014      	b.n	8105ce0 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8105cb6:	68fb      	ldr	r3, [r7, #12]
 8105cb8:	6a1b      	ldr	r3, [r3, #32]
 8105cba:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8105cbc:	697b      	ldr	r3, [r7, #20]
 8105cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105cc0:	2b00      	cmp	r3, #0
 8105cc2:	d00c      	beq.n	8105cde <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8105cc4:	697b      	ldr	r3, [r7, #20]
 8105cc6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8105cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105cca:	9301      	str	r3, [sp, #4]
 8105ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105cce:	9300      	str	r3, [sp, #0]
 8105cd0:	683b      	ldr	r3, [r7, #0]
 8105cd2:	687a      	ldr	r2, [r7, #4]
 8105cd4:	68b9      	ldr	r1, [r7, #8]
 8105cd6:	6978      	ldr	r0, [r7, #20]
 8105cd8:	47a0      	blx	r4
 8105cda:	4603      	mov	r3, r0
 8105cdc:	e000      	b.n	8105ce0 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8105cde:	4b02      	ldr	r3, [pc, #8]	; (8105ce8 <rpmsg_send_offchannel_raw+0x60>)
}
 8105ce0:	4618      	mov	r0, r3
 8105ce2:	371c      	adds	r7, #28
 8105ce4:	46bd      	mov	sp, r7
 8105ce6:	bd90      	pop	{r4, r7, pc}
 8105ce8:	fffff82d 	.word	0xfffff82d

08105cec <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8105cec:	b580      	push	{r7, lr}
 8105cee:	b090      	sub	sp, #64	; 0x40
 8105cf0:	af02      	add	r7, sp, #8
 8105cf2:	6078      	str	r0, [r7, #4]
 8105cf4:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8105cf6:	683b      	ldr	r3, [r7, #0]
 8105cf8:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8105d00:	6879      	ldr	r1, [r7, #4]
 8105d02:	f107 030c 	add.w	r3, r7, #12
 8105d06:	2220      	movs	r2, #32
 8105d08:	4618      	mov	r0, r3
 8105d0a:	f002 fbe7 	bl	81084dc <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8105d12:	f107 030c 	add.w	r3, r7, #12
 8105d16:	2201      	movs	r2, #1
 8105d18:	9201      	str	r2, [sp, #4]
 8105d1a:	2228      	movs	r2, #40	; 0x28
 8105d1c:	9200      	str	r2, [sp, #0]
 8105d1e:	2235      	movs	r2, #53	; 0x35
 8105d20:	6878      	ldr	r0, [r7, #4]
 8105d22:	f7ff ffb1 	bl	8105c88 <rpmsg_send_offchannel_raw>
 8105d26:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8105d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d2a:	2b00      	cmp	r3, #0
 8105d2c:	da01      	bge.n	8105d32 <rpmsg_send_ns_message+0x46>
		return ret;
 8105d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d30:	e000      	b.n	8105d34 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8105d32:	2300      	movs	r3, #0
}
 8105d34:	4618      	mov	r0, r3
 8105d36:	3738      	adds	r7, #56	; 0x38
 8105d38:	46bd      	mov	sp, r7
 8105d3a:	bd80      	pop	{r7, pc}

08105d3c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8105d3c:	b580      	push	{r7, lr}
 8105d3e:	b088      	sub	sp, #32
 8105d40:	af00      	add	r7, sp, #0
 8105d42:	60f8      	str	r0, [r7, #12]
 8105d44:	60b9      	str	r1, [r7, #8]
 8105d46:	607a      	str	r2, [r7, #4]
 8105d48:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8105d4a:	68fb      	ldr	r3, [r7, #12]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	61fb      	str	r3, [r7, #28]
 8105d50:	e04b      	b.n	8105dea <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8105d52:	2300      	movs	r3, #0
 8105d54:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8105d56:	69fb      	ldr	r3, [r7, #28]
 8105d58:	3b34      	subs	r3, #52	; 0x34
 8105d5a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d62:	d006      	beq.n	8105d72 <rpmsg_get_endpoint+0x36>
 8105d64:	697b      	ldr	r3, [r7, #20]
 8105d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d68:	687a      	ldr	r2, [r7, #4]
 8105d6a:	429a      	cmp	r2, r3
 8105d6c:	d101      	bne.n	8105d72 <rpmsg_get_endpoint+0x36>
			return ept;
 8105d6e:	697b      	ldr	r3, [r7, #20]
 8105d70:	e040      	b.n	8105df4 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8105d72:	697b      	ldr	r3, [r7, #20]
 8105d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d76:	687a      	ldr	r2, [r7, #4]
 8105d78:	429a      	cmp	r2, r3
 8105d7a:	d106      	bne.n	8105d8a <rpmsg_get_endpoint+0x4e>
 8105d7c:	697b      	ldr	r3, [r7, #20]
 8105d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d80:	683a      	ldr	r2, [r7, #0]
 8105d82:	429a      	cmp	r2, r3
 8105d84:	d101      	bne.n	8105d8a <rpmsg_get_endpoint+0x4e>
			return ept;
 8105d86:	697b      	ldr	r3, [r7, #20]
 8105d88:	e034      	b.n	8105df4 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8105d8a:	68bb      	ldr	r3, [r7, #8]
 8105d8c:	2b00      	cmp	r3, #0
 8105d8e:	d00c      	beq.n	8105daa <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8105d90:	697b      	ldr	r3, [r7, #20]
 8105d92:	2220      	movs	r2, #32
 8105d94:	68b9      	ldr	r1, [r7, #8]
 8105d96:	4618      	mov	r0, r3
 8105d98:	f002 fb8e 	bl	81084b8 <strncmp>
 8105d9c:	4603      	mov	r3, r0
 8105d9e:	2b00      	cmp	r3, #0
 8105da0:	bf0c      	ite	eq
 8105da2:	2301      	moveq	r3, #1
 8105da4:	2300      	movne	r3, #0
 8105da6:	b2db      	uxtb	r3, r3
 8105da8:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8105daa:	68bb      	ldr	r3, [r7, #8]
 8105dac:	2b00      	cmp	r3, #0
 8105dae:	d018      	beq.n	8105de2 <rpmsg_get_endpoint+0xa6>
 8105db0:	69bb      	ldr	r3, [r7, #24]
 8105db2:	2b00      	cmp	r3, #0
 8105db4:	d015      	beq.n	8105de2 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8105db6:	683b      	ldr	r3, [r7, #0]
 8105db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105dbc:	d006      	beq.n	8105dcc <rpmsg_get_endpoint+0x90>
 8105dbe:	697b      	ldr	r3, [r7, #20]
 8105dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105dc2:	683a      	ldr	r2, [r7, #0]
 8105dc4:	429a      	cmp	r2, r3
 8105dc6:	d101      	bne.n	8105dcc <rpmsg_get_endpoint+0x90>
			return ept;
 8105dc8:	697b      	ldr	r3, [r7, #20]
 8105dca:	e013      	b.n	8105df4 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105dd2:	d107      	bne.n	8105de4 <rpmsg_get_endpoint+0xa8>
 8105dd4:	697b      	ldr	r3, [r7, #20]
 8105dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ddc:	d102      	bne.n	8105de4 <rpmsg_get_endpoint+0xa8>
			return ept;
 8105dde:	697b      	ldr	r3, [r7, #20]
 8105de0:	e008      	b.n	8105df4 <rpmsg_get_endpoint+0xb8>
			continue;
 8105de2:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8105de4:	69fb      	ldr	r3, [r7, #28]
 8105de6:	681b      	ldr	r3, [r3, #0]
 8105de8:	61fb      	str	r3, [r7, #28]
 8105dea:	68fb      	ldr	r3, [r7, #12]
 8105dec:	69fa      	ldr	r2, [r7, #28]
 8105dee:	429a      	cmp	r2, r3
 8105df0:	d1af      	bne.n	8105d52 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8105df2:	2300      	movs	r3, #0
}
 8105df4:	4618      	mov	r0, r3
 8105df6:	3720      	adds	r7, #32
 8105df8:	46bd      	mov	sp, r7
 8105dfa:	bd80      	pop	{r7, pc}

08105dfc <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8105dfc:	b580      	push	{r7, lr}
 8105dfe:	b084      	sub	sp, #16
 8105e00:	af00      	add	r7, sp, #0
 8105e02:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	2b00      	cmp	r3, #0
 8105e08:	d016      	beq.n	8105e38 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	6a1b      	ldr	r3, [r3, #32]
 8105e0e:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e18:	d008      	beq.n	8105e2c <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105e1a:	68fb      	ldr	r3, [r7, #12]
 8105e1c:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105e24:	461a      	mov	r2, r3
 8105e26:	2180      	movs	r1, #128	; 0x80
 8105e28:	f7ff feec 	bl	8105c04 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	3334      	adds	r3, #52	; 0x34
 8105e30:	4618      	mov	r0, r3
 8105e32:	f7ff fe0f 	bl	8105a54 <metal_list_del>
 8105e36:	e000      	b.n	8105e3a <rpmsg_unregister_endpoint+0x3e>
		return;
 8105e38:	bf00      	nop
}
 8105e3a:	3710      	adds	r7, #16
 8105e3c:	46bd      	mov	sp, r7
 8105e3e:	bd80      	pop	{r7, pc}

08105e40 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8105e40:	b580      	push	{r7, lr}
 8105e42:	b082      	sub	sp, #8
 8105e44:	af00      	add	r7, sp, #0
 8105e46:	6078      	str	r0, [r7, #4]
 8105e48:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8105e4a:	683b      	ldr	r3, [r7, #0]
 8105e4c:	687a      	ldr	r2, [r7, #4]
 8105e4e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8105e50:	687a      	ldr	r2, [r7, #4]
 8105e52:	683b      	ldr	r3, [r7, #0]
 8105e54:	3334      	adds	r3, #52	; 0x34
 8105e56:	4619      	mov	r1, r3
 8105e58:	4610      	mov	r0, r2
 8105e5a:	f7ff fdee 	bl	8105a3a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8105e5e:	2300      	movs	r3, #0
}
 8105e60:	4618      	mov	r0, r3
 8105e62:	3708      	adds	r7, #8
 8105e64:	46bd      	mov	sp, r7
 8105e66:	bd80      	pop	{r7, pc}

08105e68 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8105e68:	b580      	push	{r7, lr}
 8105e6a:	b088      	sub	sp, #32
 8105e6c:	af02      	add	r7, sp, #8
 8105e6e:	60f8      	str	r0, [r7, #12]
 8105e70:	60b9      	str	r1, [r7, #8]
 8105e72:	607a      	str	r2, [r7, #4]
 8105e74:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8105e76:	683b      	ldr	r3, [r7, #0]
 8105e78:	613b      	str	r3, [r7, #16]

	if (!ept)
 8105e7a:	68fb      	ldr	r3, [r7, #12]
 8105e7c:	2b00      	cmp	r3, #0
 8105e7e:	d101      	bne.n	8105e84 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8105e80:	4b37      	ldr	r3, [pc, #220]	; (8105f60 <rpmsg_create_ept+0xf8>)
 8105e82:	e068      	b.n	8105f56 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8105e84:	68bb      	ldr	r3, [r7, #8]
 8105e86:	3358      	adds	r3, #88	; 0x58
 8105e88:	4618      	mov	r0, r3
 8105e8a:	f7ff fda6 	bl	81059da <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8105e8e:	683b      	ldr	r3, [r7, #0]
 8105e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e94:	d018      	beq.n	8105ec8 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8105e96:	68bb      	ldr	r3, [r7, #8]
 8105e98:	3348      	adds	r3, #72	; 0x48
 8105e9a:	683a      	ldr	r2, [r7, #0]
 8105e9c:	2180      	movs	r1, #128	; 0x80
 8105e9e:	4618      	mov	r0, r3
 8105ea0:	f7ff fec2 	bl	8105c28 <rpmsg_is_address_set>
 8105ea4:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8105ea6:	697b      	ldr	r3, [r7, #20]
 8105ea8:	2b00      	cmp	r3, #0
 8105eaa:	d107      	bne.n	8105ebc <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105eac:	68bb      	ldr	r3, [r7, #8]
 8105eae:	3348      	adds	r3, #72	; 0x48
 8105eb0:	683a      	ldr	r2, [r7, #0]
 8105eb2:	2180      	movs	r1, #128	; 0x80
 8105eb4:	4618      	mov	r0, r3
 8105eb6:	f7ff fecf 	bl	8105c58 <rpmsg_set_address>
 8105eba:	e00c      	b.n	8105ed6 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8105ebc:	697b      	ldr	r3, [r7, #20]
 8105ebe:	2b00      	cmp	r3, #0
 8105ec0:	dd40      	ble.n	8105f44 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8105ec2:	2300      	movs	r3, #0
 8105ec4:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8105ec6:	e040      	b.n	8105f4a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8105ec8:	68bb      	ldr	r3, [r7, #8]
 8105eca:	3348      	adds	r3, #72	; 0x48
 8105ecc:	2180      	movs	r1, #128	; 0x80
 8105ece:	4618      	mov	r0, r3
 8105ed0:	f7ff fe79 	bl	8105bc6 <rpmsg_get_address>
 8105ed4:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8105ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ed8:	9301      	str	r3, [sp, #4]
 8105eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105edc:	9300      	str	r3, [sp, #0]
 8105ede:	6a3b      	ldr	r3, [r7, #32]
 8105ee0:	693a      	ldr	r2, [r7, #16]
 8105ee2:	6879      	ldr	r1, [r7, #4]
 8105ee4:	68f8      	ldr	r0, [r7, #12]
 8105ee6:	f7ff fe51 	bl	8105b8c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8105eea:	68f9      	ldr	r1, [r7, #12]
 8105eec:	68b8      	ldr	r0, [r7, #8]
 8105eee:	f7ff ffa7 	bl	8105e40 <rpmsg_register_endpoint>
 8105ef2:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8105ef4:	697b      	ldr	r3, [r7, #20]
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	da06      	bge.n	8105f08 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8105efa:	68bb      	ldr	r3, [r7, #8]
 8105efc:	3348      	adds	r3, #72	; 0x48
 8105efe:	693a      	ldr	r2, [r7, #16]
 8105f00:	2180      	movs	r1, #128	; 0x80
 8105f02:	4618      	mov	r0, r3
 8105f04:	f7ff fe7e 	bl	8105c04 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8105f08:	697b      	ldr	r3, [r7, #20]
 8105f0a:	2b00      	cmp	r3, #0
 8105f0c:	d11c      	bne.n	8105f48 <rpmsg_create_ept+0xe0>
 8105f0e:	68fb      	ldr	r3, [r7, #12]
 8105f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105f16:	d117      	bne.n	8105f48 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8105f18:	68bb      	ldr	r3, [r7, #8]
 8105f1a:	3358      	adds	r3, #88	; 0x58
 8105f1c:	4618      	mov	r0, r3
 8105f1e:	f7ff fd67 	bl	81059f0 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8105f22:	2100      	movs	r1, #0
 8105f24:	68f8      	ldr	r0, [r7, #12]
 8105f26:	f7ff fee1 	bl	8105cec <rpmsg_send_ns_message>
 8105f2a:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8105f2c:	68bb      	ldr	r3, [r7, #8]
 8105f2e:	3358      	adds	r3, #88	; 0x58
 8105f30:	4618      	mov	r0, r3
 8105f32:	f7ff fd52 	bl	81059da <metal_mutex_acquire>
		if (status)
 8105f36:	697b      	ldr	r3, [r7, #20]
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	d005      	beq.n	8105f48 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8105f3c:	68f8      	ldr	r0, [r7, #12]
 8105f3e:	f7ff ff5d 	bl	8105dfc <rpmsg_unregister_endpoint>
 8105f42:	e002      	b.n	8105f4a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8105f44:	bf00      	nop
 8105f46:	e000      	b.n	8105f4a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8105f48:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8105f4a:	68bb      	ldr	r3, [r7, #8]
 8105f4c:	3358      	adds	r3, #88	; 0x58
 8105f4e:	4618      	mov	r0, r3
 8105f50:	f7ff fd4e 	bl	81059f0 <metal_mutex_release>
	return status;
 8105f54:	697b      	ldr	r3, [r7, #20]
}
 8105f56:	4618      	mov	r0, r3
 8105f58:	3718      	adds	r7, #24
 8105f5a:	46bd      	mov	sp, r7
 8105f5c:	bd80      	pop	{r7, pc}
 8105f5e:	bf00      	nop
 8105f60:	fffff82d 	.word	0xfffff82d

08105f64 <__metal_cache_invalidate>:
{
 8105f64:	b580      	push	{r7, lr}
 8105f66:	b082      	sub	sp, #8
 8105f68:	af00      	add	r7, sp, #0
 8105f6a:	6078      	str	r0, [r7, #4]
 8105f6c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8105f6e:	6839      	ldr	r1, [r7, #0]
 8105f70:	6878      	ldr	r0, [r7, #4]
 8105f72:	f000 fc56 	bl	8106822 <metal_machine_cache_invalidate>
}
 8105f76:	bf00      	nop
 8105f78:	3708      	adds	r7, #8
 8105f7a:	46bd      	mov	sp, r7
 8105f7c:	bd80      	pop	{r7, pc}

08105f7e <metal_cache_invalidate>:
{
 8105f7e:	b580      	push	{r7, lr}
 8105f80:	b082      	sub	sp, #8
 8105f82:	af00      	add	r7, sp, #0
 8105f84:	6078      	str	r0, [r7, #4]
 8105f86:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8105f88:	6839      	ldr	r1, [r7, #0]
 8105f8a:	6878      	ldr	r0, [r7, #4]
 8105f8c:	f7ff ffea 	bl	8105f64 <__metal_cache_invalidate>
}
 8105f90:	bf00      	nop
 8105f92:	3708      	adds	r7, #8
 8105f94:	46bd      	mov	sp, r7
 8105f96:	bd80      	pop	{r7, pc}

08105f98 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8105f98:	b480      	push	{r7}
 8105f9a:	b083      	sub	sp, #12
 8105f9c:	af00      	add	r7, sp, #0
 8105f9e:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8105fa0:	2300      	movs	r3, #0
}
 8105fa2:	4618      	mov	r0, r3
 8105fa4:	370c      	adds	r7, #12
 8105fa6:	46bd      	mov	sp, r7
 8105fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fac:	4770      	bx	lr

08105fae <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8105fae:	b580      	push	{r7, lr}
 8105fb0:	b082      	sub	sp, #8
 8105fb2:	af00      	add	r7, sp, #0
 8105fb4:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8105fb6:	6878      	ldr	r0, [r7, #4]
 8105fb8:	f7ff ffee 	bl	8105f98 <__metal_sleep_usec>
 8105fbc:	4603      	mov	r3, r0
}
 8105fbe:	4618      	mov	r0, r3
 8105fc0:	3708      	adds	r7, #8
 8105fc2:	46bd      	mov	sp, r7
 8105fc4:	bd80      	pop	{r7, pc}

08105fc6 <metal_list_init>:
{
 8105fc6:	b480      	push	{r7}
 8105fc8:	b083      	sub	sp, #12
 8105fca:	af00      	add	r7, sp, #0
 8105fcc:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	687a      	ldr	r2, [r7, #4]
 8105fd2:	605a      	str	r2, [r3, #4]
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	685a      	ldr	r2, [r3, #4]
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	601a      	str	r2, [r3, #0]
}
 8105fdc:	bf00      	nop
 8105fde:	370c      	adds	r7, #12
 8105fe0:	46bd      	mov	sp, r7
 8105fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fe6:	4770      	bx	lr

08105fe8 <metal_io_virt_to_offset>:
{
 8105fe8:	b480      	push	{r7}
 8105fea:	b085      	sub	sp, #20
 8105fec:	af00      	add	r7, sp, #0
 8105fee:	6078      	str	r0, [r7, #4]
 8105ff0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	683a      	ldr	r2, [r7, #0]
 8105ff8:	1ad3      	subs	r3, r2, r3
 8105ffa:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	689b      	ldr	r3, [r3, #8]
 8106000:	68fa      	ldr	r2, [r7, #12]
 8106002:	429a      	cmp	r2, r3
 8106004:	d201      	bcs.n	810600a <metal_io_virt_to_offset+0x22>
 8106006:	68fb      	ldr	r3, [r7, #12]
 8106008:	e001      	b.n	810600e <metal_io_virt_to_offset+0x26>
 810600a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810600e:	4618      	mov	r0, r3
 8106010:	3714      	adds	r7, #20
 8106012:	46bd      	mov	sp, r7
 8106014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106018:	4770      	bx	lr

0810601a <__metal_mutex_init>:
{
 810601a:	b480      	push	{r7}
 810601c:	b085      	sub	sp, #20
 810601e:	af00      	add	r7, sp, #0
 8106020:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	60fb      	str	r3, [r7, #12]
 8106026:	2300      	movs	r3, #0
 8106028:	60bb      	str	r3, [r7, #8]
 810602a:	68bb      	ldr	r3, [r7, #8]
 810602c:	461a      	mov	r2, r3
 810602e:	68fb      	ldr	r3, [r7, #12]
 8106030:	f3bf 8f5b 	dmb	ish
 8106034:	601a      	str	r2, [r3, #0]
 8106036:	f3bf 8f5b 	dmb	ish
}
 810603a:	bf00      	nop
 810603c:	3714      	adds	r7, #20
 810603e:	46bd      	mov	sp, r7
 8106040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106044:	4770      	bx	lr

08106046 <__metal_mutex_acquire>:
{
 8106046:	b480      	push	{r7}
 8106048:	b083      	sub	sp, #12
 810604a:	af00      	add	r7, sp, #0
 810604c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 810604e:	bf00      	nop
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	2201      	movs	r2, #1
 8106054:	4611      	mov	r1, r2
 8106056:	f3bf 8f5b 	dmb	ish
 810605a:	e8d3 2f4f 	ldrexb	r2, [r3]
 810605e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8106062:	2800      	cmp	r0, #0
 8106064:	d1f9      	bne.n	810605a <__metal_mutex_acquire+0x14>
 8106066:	f3bf 8f5b 	dmb	ish
 810606a:	b2d3      	uxtb	r3, r2
 810606c:	2b00      	cmp	r3, #0
 810606e:	d1ef      	bne.n	8106050 <__metal_mutex_acquire+0xa>
}
 8106070:	bf00      	nop
 8106072:	bf00      	nop
 8106074:	370c      	adds	r7, #12
 8106076:	46bd      	mov	sp, r7
 8106078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810607c:	4770      	bx	lr

0810607e <__metal_mutex_release>:
{
 810607e:	b480      	push	{r7}
 8106080:	b083      	sub	sp, #12
 8106082:	af00      	add	r7, sp, #0
 8106084:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	f3bf 8f5b 	dmb	ish
 810608c:	2200      	movs	r2, #0
 810608e:	701a      	strb	r2, [r3, #0]
 8106090:	f3bf 8f5b 	dmb	ish
}
 8106094:	bf00      	nop
 8106096:	370c      	adds	r7, #12
 8106098:	46bd      	mov	sp, r7
 810609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810609e:	4770      	bx	lr

081060a0 <metal_mutex_init>:
{
 81060a0:	b580      	push	{r7, lr}
 81060a2:	b082      	sub	sp, #8
 81060a4:	af00      	add	r7, sp, #0
 81060a6:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 81060a8:	6878      	ldr	r0, [r7, #4]
 81060aa:	f7ff ffb6 	bl	810601a <__metal_mutex_init>
}
 81060ae:	bf00      	nop
 81060b0:	3708      	adds	r7, #8
 81060b2:	46bd      	mov	sp, r7
 81060b4:	bd80      	pop	{r7, pc}

081060b6 <metal_mutex_acquire>:
{
 81060b6:	b580      	push	{r7, lr}
 81060b8:	b082      	sub	sp, #8
 81060ba:	af00      	add	r7, sp, #0
 81060bc:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81060be:	6878      	ldr	r0, [r7, #4]
 81060c0:	f7ff ffc1 	bl	8106046 <__metal_mutex_acquire>
}
 81060c4:	bf00      	nop
 81060c6:	3708      	adds	r7, #8
 81060c8:	46bd      	mov	sp, r7
 81060ca:	bd80      	pop	{r7, pc}

081060cc <metal_mutex_release>:
{
 81060cc:	b580      	push	{r7, lr}
 81060ce:	b082      	sub	sp, #8
 81060d0:	af00      	add	r7, sp, #0
 81060d2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81060d4:	6878      	ldr	r0, [r7, #4]
 81060d6:	f7ff ffd2 	bl	810607e <__metal_mutex_release>
}
 81060da:	bf00      	nop
 81060dc:	3708      	adds	r7, #8
 81060de:	46bd      	mov	sp, r7
 81060e0:	bd80      	pop	{r7, pc}

081060e2 <rpmsg_init_ept>:
{
 81060e2:	b580      	push	{r7, lr}
 81060e4:	b084      	sub	sp, #16
 81060e6:	af00      	add	r7, sp, #0
 81060e8:	60f8      	str	r0, [r7, #12]
 81060ea:	60b9      	str	r1, [r7, #8]
 81060ec:	607a      	str	r2, [r7, #4]
 81060ee:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81060f0:	68fb      	ldr	r3, [r7, #12]
 81060f2:	2220      	movs	r2, #32
 81060f4:	68b9      	ldr	r1, [r7, #8]
 81060f6:	4618      	mov	r0, r3
 81060f8:	f002 f9f0 	bl	81084dc <strncpy>
	ept->addr = src;
 81060fc:	68fb      	ldr	r3, [r7, #12]
 81060fe:	687a      	ldr	r2, [r7, #4]
 8106100:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8106102:	68fb      	ldr	r3, [r7, #12]
 8106104:	683a      	ldr	r2, [r7, #0]
 8106106:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8106108:	68fb      	ldr	r3, [r7, #12]
 810610a:	69ba      	ldr	r2, [r7, #24]
 810610c:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 810610e:	68fb      	ldr	r3, [r7, #12]
 8106110:	69fa      	ldr	r2, [r7, #28]
 8106112:	631a      	str	r2, [r3, #48]	; 0x30
}
 8106114:	bf00      	nop
 8106116:	3710      	adds	r7, #16
 8106118:	46bd      	mov	sp, r7
 810611a:	bd80      	pop	{r7, pc}

0810611c <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 810611c:	b480      	push	{r7}
 810611e:	b083      	sub	sp, #12
 8106120:	af00      	add	r7, sp, #0
 8106122:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106128:	699b      	ldr	r3, [r3, #24]
}
 810612a:	4618      	mov	r0, r3
 810612c:	370c      	adds	r7, #12
 810612e:	46bd      	mov	sp, r7
 8106130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106134:	4770      	bx	lr

08106136 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8106136:	b580      	push	{r7, lr}
 8106138:	b082      	sub	sp, #8
 810613a:	af00      	add	r7, sp, #0
 810613c:	6078      	str	r0, [r7, #4]
 810613e:	460b      	mov	r3, r1
 8106140:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106146:	6a1b      	ldr	r3, [r3, #32]
 8106148:	685b      	ldr	r3, [r3, #4]
 810614a:	687a      	ldr	r2, [r7, #4]
 810614c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810614e:	78f9      	ldrb	r1, [r7, #3]
 8106150:	4610      	mov	r0, r2
 8106152:	4798      	blx	r3
}
 8106154:	bf00      	nop
 8106156:	3708      	adds	r7, #8
 8106158:	46bd      	mov	sp, r7
 810615a:	bd80      	pop	{r7, pc}

0810615c <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 810615c:	b580      	push	{r7, lr}
 810615e:	b082      	sub	sp, #8
 8106160:	af00      	add	r7, sp, #0
 8106162:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106168:	6a1b      	ldr	r3, [r3, #32]
 810616a:	681b      	ldr	r3, [r3, #0]
 810616c:	687a      	ldr	r2, [r7, #4]
 810616e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106170:	4610      	mov	r0, r2
 8106172:	4798      	blx	r3
 8106174:	4603      	mov	r3, r0
}
 8106176:	4618      	mov	r0, r3
 8106178:	3708      	adds	r7, #8
 810617a:	46bd      	mov	sp, r7
 810617c:	bd80      	pop	{r7, pc}

0810617e <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 810617e:	b580      	push	{r7, lr}
 8106180:	b082      	sub	sp, #8
 8106182:	af00      	add	r7, sp, #0
 8106184:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810618a:	6a1b      	ldr	r3, [r3, #32]
 810618c:	689b      	ldr	r3, [r3, #8]
 810618e:	687a      	ldr	r2, [r7, #4]
 8106190:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8106192:	4610      	mov	r0, r2
 8106194:	4798      	blx	r3
 8106196:	4603      	mov	r3, r0
}
 8106198:	4618      	mov	r0, r3
 810619a:	3708      	adds	r7, #8
 810619c:	46bd      	mov	sp, r7
 810619e:	bd80      	pop	{r7, pc}

081061a0 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 81061a0:	b580      	push	{r7, lr}
 81061a2:	b086      	sub	sp, #24
 81061a4:	af02      	add	r7, sp, #8
 81061a6:	60f8      	str	r0, [r7, #12]
 81061a8:	60b9      	str	r1, [r7, #8]
 81061aa:	607a      	str	r2, [r7, #4]
 81061ac:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 81061ae:	68fb      	ldr	r3, [r7, #12]
 81061b0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 81061b2:	68b9      	ldr	r1, [r7, #8]
 81061b4:	69bb      	ldr	r3, [r7, #24]
 81061b6:	9300      	str	r3, [sp, #0]
 81061b8:	683b      	ldr	r3, [r7, #0]
 81061ba:	687a      	ldr	r2, [r7, #4]
 81061bc:	f000 fb4a 	bl	8106854 <virtio_create_virtqueues>
 81061c0:	4603      	mov	r3, r0
					callbacks);
}
 81061c2:	4618      	mov	r0, r3
 81061c4:	3710      	adds	r7, #16
 81061c6:	46bd      	mov	sp, r7
 81061c8:	bd80      	pop	{r7, pc}

081061ca <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 81061ca:	b580      	push	{r7, lr}
 81061cc:	b082      	sub	sp, #8
 81061ce:	af00      	add	r7, sp, #0
 81061d0:	6078      	str	r0, [r7, #4]
 81061d2:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 81061d4:	f04f 33ff 	mov.w	r3, #4294967295
 81061d8:	683a      	ldr	r2, [r7, #0]
 81061da:	2100      	movs	r1, #0
 81061dc:	6878      	ldr	r0, [r7, #4]
 81061de:	f7ff fdad 	bl	8105d3c <rpmsg_get_endpoint>
 81061e2:	4603      	mov	r3, r0
}
 81061e4:	4618      	mov	r0, r3
 81061e6:	3708      	adds	r7, #8
 81061e8:	46bd      	mov	sp, r7
 81061ea:	bd80      	pop	{r7, pc}

081061ec <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81061ec:	b480      	push	{r7}
 81061ee:	b085      	sub	sp, #20
 81061f0:	af00      	add	r7, sp, #0
 81061f2:	60f8      	str	r0, [r7, #12]
 81061f4:	60b9      	str	r1, [r7, #8]
 81061f6:	607a      	str	r2, [r7, #4]
	if (!shpool)
 81061f8:	68fb      	ldr	r3, [r7, #12]
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	d01d      	beq.n	810623a <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 81061fe:	68fb      	ldr	r3, [r7, #12]
 8106200:	68ba      	ldr	r2, [r7, #8]
 8106202:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	f003 0303 	and.w	r3, r3, #3
 810620a:	2b00      	cmp	r3, #0
 810620c:	d004      	beq.n	8106218 <rpmsg_virtio_init_shm_pool+0x2c>
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	f023 0303 	bic.w	r3, r3, #3
 8106214:	3304      	adds	r3, #4
 8106216:	e000      	b.n	810621a <rpmsg_virtio_init_shm_pool+0x2e>
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	68fa      	ldr	r2, [r7, #12]
 810621c:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	f003 0303 	and.w	r3, r3, #3
 8106224:	2b00      	cmp	r3, #0
 8106226:	d004      	beq.n	8106232 <rpmsg_virtio_init_shm_pool+0x46>
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	f023 0303 	bic.w	r3, r3, #3
 810622e:	3304      	adds	r3, #4
 8106230:	e000      	b.n	8106234 <rpmsg_virtio_init_shm_pool+0x48>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	68fa      	ldr	r2, [r7, #12]
 8106236:	6053      	str	r3, [r2, #4]
 8106238:	e000      	b.n	810623c <rpmsg_virtio_init_shm_pool+0x50>
		return;
 810623a:	bf00      	nop
}
 810623c:	3714      	adds	r7, #20
 810623e:	46bd      	mov	sp, r7
 8106240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106244:	4770      	bx	lr

08106246 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8106246:	b580      	push	{r7, lr}
 8106248:	b086      	sub	sp, #24
 810624a:	af00      	add	r7, sp, #0
 810624c:	60f8      	str	r0, [r7, #12]
 810624e:	60b9      	str	r1, [r7, #8]
 8106250:	607a      	str	r2, [r7, #4]
 8106252:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106254:	68f8      	ldr	r0, [r7, #12]
 8106256:	f7ff ff61 	bl	810611c <rpmsg_virtio_get_role>
 810625a:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810625c:	697b      	ldr	r3, [r7, #20]
 810625e:	2b01      	cmp	r3, #1
 8106260:	d106      	bne.n	8106270 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8106262:	68fb      	ldr	r3, [r7, #12]
 8106264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106266:	8879      	ldrh	r1, [r7, #2]
 8106268:	687a      	ldr	r2, [r7, #4]
 810626a:	4618      	mov	r0, r3
 810626c:	f000 fc9c 	bl	8106ba8 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8106270:	bf00      	nop
 8106272:	3718      	adds	r7, #24
 8106274:	46bd      	mov	sp, r7
 8106276:	bd80      	pop	{r7, pc}

08106278 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8106278:	b580      	push	{r7, lr}
 810627a:	b086      	sub	sp, #24
 810627c:	af00      	add	r7, sp, #0
 810627e:	60f8      	str	r0, [r7, #12]
 8106280:	60b9      	str	r1, [r7, #8]
 8106282:	607a      	str	r2, [r7, #4]
 8106284:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106286:	68f8      	ldr	r0, [r7, #12]
 8106288:	f7ff ff48 	bl	810611c <rpmsg_virtio_get_role>
 810628c:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810628e:	697b      	ldr	r3, [r7, #20]
 8106290:	2b01      	cmp	r3, #1
 8106292:	d108      	bne.n	81062a6 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8106294:	68fb      	ldr	r3, [r7, #12]
 8106296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106298:	8879      	ldrh	r1, [r7, #2]
 810629a:	687a      	ldr	r2, [r7, #4]
 810629c:	4618      	mov	r0, r3
 810629e:	f000 fc83 	bl	8106ba8 <virtqueue_add_consumed_buffer>
 81062a2:	4603      	mov	r3, r0
 81062a4:	e000      	b.n	81062a8 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 81062a6:	2300      	movs	r3, #0
}
 81062a8:	4618      	mov	r0, r3
 81062aa:	3718      	adds	r7, #24
 81062ac:	46bd      	mov	sp, r7
 81062ae:	bd80      	pop	{r7, pc}

081062b0 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81062b0:	b580      	push	{r7, lr}
 81062b2:	b086      	sub	sp, #24
 81062b4:	af00      	add	r7, sp, #0
 81062b6:	60f8      	str	r0, [r7, #12]
 81062b8:	60b9      	str	r1, [r7, #8]
 81062ba:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81062bc:	68f8      	ldr	r0, [r7, #12]
 81062be:	f7ff ff2d 	bl	810611c <rpmsg_virtio_get_role>
 81062c2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81062c4:	2300      	movs	r3, #0
 81062c6:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81062c8:	693b      	ldr	r3, [r7, #16]
 81062ca:	2b01      	cmp	r3, #1
 81062cc:	d107      	bne.n	81062de <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 81062ce:	68fb      	ldr	r3, [r7, #12]
 81062d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81062d2:	68ba      	ldr	r2, [r7, #8]
 81062d4:	6879      	ldr	r1, [r7, #4]
 81062d6:	4618      	mov	r0, r3
 81062d8:	f000 fc20 	bl	8106b1c <virtqueue_get_available_buffer>
 81062dc:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 81062de:	697b      	ldr	r3, [r7, #20]
}
 81062e0:	4618      	mov	r0, r3
 81062e2:	3718      	adds	r7, #24
 81062e4:	46bd      	mov	sp, r7
 81062e6:	bd80      	pop	{r7, pc}

081062e8 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81062e8:	b580      	push	{r7, lr}
 81062ea:	b086      	sub	sp, #24
 81062ec:	af00      	add	r7, sp, #0
 81062ee:	60f8      	str	r0, [r7, #12]
 81062f0:	60b9      	str	r1, [r7, #8]
 81062f2:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81062f4:	68f8      	ldr	r0, [r7, #12]
 81062f6:	f7ff ff11 	bl	810611c <rpmsg_virtio_get_role>
 81062fa:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81062fc:	2300      	movs	r3, #0
 81062fe:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106300:	693b      	ldr	r3, [r7, #16]
 8106302:	2b01      	cmp	r3, #1
 8106304:	d107      	bne.n	8106316 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8106306:	68fb      	ldr	r3, [r7, #12]
 8106308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810630a:	68ba      	ldr	r2, [r7, #8]
 810630c:	6879      	ldr	r1, [r7, #4]
 810630e:	4618      	mov	r0, r3
 8106310:	f000 fc04 	bl	8106b1c <virtqueue_get_available_buffer>
 8106314:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8106316:	697b      	ldr	r3, [r7, #20]
 8106318:	2b00      	cmp	r3, #0
 810631a:	d005      	beq.n	8106328 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 810631c:	68bb      	ldr	r3, [r7, #8]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4619      	mov	r1, r3
 8106322:	6978      	ldr	r0, [r7, #20]
 8106324:	f7ff fe2b 	bl	8105f7e <metal_cache_invalidate>
	}

	return data;
 8106328:	697b      	ldr	r3, [r7, #20]
}
 810632a:	4618      	mov	r0, r3
 810632c:	3718      	adds	r7, #24
 810632e:	46bd      	mov	sp, r7
 8106330:	bd80      	pop	{r7, pc}

08106332 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8106332:	b580      	push	{r7, lr}
 8106334:	b084      	sub	sp, #16
 8106336:	af00      	add	r7, sp, #0
 8106338:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 810633a:	6878      	ldr	r0, [r7, #4]
 810633c:	f7ff ff0e 	bl	810615c <rpmsg_virtio_get_status>
 8106340:	4603      	mov	r3, r0
 8106342:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8106344:	7bfb      	ldrb	r3, [r7, #15]
 8106346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810634a:	2b00      	cmp	r3, #0
 810634c:	d004      	beq.n	8106358 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 810634e:	2100      	movs	r1, #0
 8106350:	6878      	ldr	r0, [r7, #4]
 8106352:	f7ff fef0 	bl	8106136 <rpmsg_virtio_set_status>
 8106356:	e7f0      	b.n	810633a <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8106358:	7bfb      	ldrb	r3, [r7, #15]
 810635a:	f003 0304 	and.w	r3, r3, #4
 810635e:	2b00      	cmp	r3, #0
 8106360:	d0eb      	beq.n	810633a <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8106362:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8106364:	4618      	mov	r0, r3
 8106366:	3710      	adds	r7, #16
 8106368:	46bd      	mov	sp, r7
 810636a:	bd80      	pop	{r7, pc}

0810636c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 810636c:	b580      	push	{r7, lr}
 810636e:	b084      	sub	sp, #16
 8106370:	af00      	add	r7, sp, #0
 8106372:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8106374:	6878      	ldr	r0, [r7, #4]
 8106376:	f7ff fed1 	bl	810611c <rpmsg_virtio_get_role>
 810637a:	60b8      	str	r0, [r7, #8]
	int length = 0;
 810637c:	2300      	movs	r3, #0
 810637e:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106380:	68bb      	ldr	r3, [r7, #8]
 8106382:	2b01      	cmp	r3, #1
 8106384:	d107      	bne.n	8106396 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810638a:	4618      	mov	r0, r3
 810638c:	f000 fc86 	bl	8106c9c <virtqueue_get_desc_size>
 8106390:	4603      	mov	r3, r0
 8106392:	3b10      	subs	r3, #16
		length =
 8106394:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8106396:	68fb      	ldr	r3, [r7, #12]
}
 8106398:	4618      	mov	r0, r3
 810639a:	3710      	adds	r7, #16
 810639c:	46bd      	mov	sp, r7
 810639e:	bd80      	pop	{r7, pc}

081063a0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 81063a0:	b580      	push	{r7, lr}
 81063a2:	b090      	sub	sp, #64	; 0x40
 81063a4:	af00      	add	r7, sp, #0
 81063a6:	60f8      	str	r0, [r7, #12]
 81063a8:	60b9      	str	r1, [r7, #8]
 81063aa:	607a      	str	r2, [r7, #4]
 81063ac:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 81063ae:	2300      	movs	r3, #0
 81063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 81063b2:	2300      	movs	r3, #0
 81063b4:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 81063b6:	68fb      	ldr	r3, [r7, #12]
 81063b8:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 81063ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81063bc:	f7ff fece 	bl	810615c <rpmsg_virtio_get_status>
 81063c0:	4603      	mov	r3, r0
 81063c2:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 81063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063c6:	f003 0304 	and.w	r3, r3, #4
 81063ca:	2b00      	cmp	r3, #0
 81063cc:	d101      	bne.n	81063d2 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 81063ce:	4b45      	ldr	r3, [pc, #276]	; (81064e4 <rpmsg_virtio_send_offchannel_raw+0x144>)
 81063d0:	e083      	b.n	81064da <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 81063d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81063d4:	2b00      	cmp	r3, #0
 81063d6:	d003      	beq.n	81063e0 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 81063d8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 81063dc:	63bb      	str	r3, [r7, #56]	; 0x38
 81063de:	e001      	b.n	81063e4 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 81063e0:	2300      	movs	r3, #0
 81063e2:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81063e4:	68fb      	ldr	r3, [r7, #12]
 81063e6:	3358      	adds	r3, #88	; 0x58
 81063e8:	4618      	mov	r0, r3
 81063ea:	f7ff fe64 	bl	81060b6 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 81063ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81063f0:	f7ff ffbc 	bl	810636c <_rpmsg_virtio_get_buffer_size>
 81063f4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 81063f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81063fa:	429a      	cmp	r2, r3
 81063fc:	dc08      	bgt.n	8106410 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81063fe:	f107 0216 	add.w	r2, r7, #22
 8106402:	f107 0310 	add.w	r3, r7, #16
 8106406:	4619      	mov	r1, r3
 8106408:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810640a:	f7ff ff51 	bl	81062b0 <rpmsg_virtio_get_tx_buffer>
 810640e:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8106410:	68fb      	ldr	r3, [r7, #12]
 8106412:	3358      	adds	r3, #88	; 0x58
 8106414:	4618      	mov	r0, r3
 8106416:	f7ff fe59 	bl	81060cc <metal_mutex_release>
		if (buffer || !tick_count)
 810641a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810641c:	2b00      	cmp	r3, #0
 810641e:	d10e      	bne.n	810643e <rpmsg_virtio_send_offchannel_raw+0x9e>
 8106420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106422:	2b00      	cmp	r3, #0
 8106424:	d00b      	beq.n	810643e <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8106426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106428:	2b00      	cmp	r3, #0
 810642a:	d001      	beq.n	8106430 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 810642c:	4b2e      	ldr	r3, [pc, #184]	; (81064e8 <rpmsg_virtio_send_offchannel_raw+0x148>)
 810642e:	e054      	b.n	81064da <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8106430:	200a      	movs	r0, #10
 8106432:	f7ff fdbc 	bl	8105fae <metal_sleep_usec>
		tick_count--;
 8106436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106438:	3b01      	subs	r3, #1
 810643a:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 810643c:	e7d2      	b.n	81063e4 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 810643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106440:	2b00      	cmp	r3, #0
 8106442:	d101      	bne.n	8106448 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8106444:	4b29      	ldr	r3, [pc, #164]	; (81064ec <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8106446:	e048      	b.n	81064da <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 810644c:	68bb      	ldr	r3, [r7, #8]
 810644e:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8106450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106452:	b29b      	uxth	r3, r3
 8106454:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8106456:	2300      	movs	r3, #0
 8106458:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 810645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810645e:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8106460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106464:	f7ff fdc0 	bl	8105fe8 <metal_io_virt_to_offset>
 8106468:	4601      	mov	r1, r0
 810646a:	f107 0218 	add.w	r2, r7, #24
 810646e:	2310      	movs	r3, #16
 8106470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106472:	f7fe ff5a 	bl	810532a <metal_io_block_write>
 8106476:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8106478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810647a:	2b10      	cmp	r3, #16
 810647c:	d000      	beq.n	8106480 <rpmsg_virtio_send_offchannel_raw+0xe0>
 810647e:	e7fe      	b.n	810647e <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8106480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106482:	3310      	adds	r3, #16
 8106484:	4619      	mov	r1, r3
 8106486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106488:	f7ff fdae 	bl	8105fe8 <metal_io_virt_to_offset>
 810648c:	4601      	mov	r1, r0
 810648e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106490:	683a      	ldr	r2, [r7, #0]
 8106492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106494:	f7fe ff49 	bl	810532a <metal_io_block_write>
 8106498:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 810649a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810649c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810649e:	429a      	cmp	r2, r3
 81064a0:	d000      	beq.n	81064a4 <rpmsg_virtio_send_offchannel_raw+0x104>
 81064a2:	e7fe      	b.n	81064a2 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 81064a4:	68fb      	ldr	r3, [r7, #12]
 81064a6:	3358      	adds	r3, #88	; 0x58
 81064a8:	4618      	mov	r0, r3
 81064aa:	f7ff fe04 	bl	81060b6 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 81064ae:	693a      	ldr	r2, [r7, #16]
 81064b0:	8afb      	ldrh	r3, [r7, #22]
 81064b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81064b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81064b6:	f7ff fedf 	bl	8106278 <rpmsg_virtio_enqueue_buffer>
 81064ba:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 81064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81064be:	2b00      	cmp	r3, #0
 81064c0:	d000      	beq.n	81064c4 <rpmsg_virtio_send_offchannel_raw+0x124>
 81064c2:	e7fe      	b.n	81064c2 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 81064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81064c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81064c8:	4618      	mov	r0, r3
 81064ca:	f000 fbd1 	bl	8106c70 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 81064ce:	68fb      	ldr	r3, [r7, #12]
 81064d0:	3358      	adds	r3, #88	; 0x58
 81064d2:	4618      	mov	r0, r3
 81064d4:	f7ff fdfa 	bl	81060cc <metal_mutex_release>

	return size;
 81064d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 81064da:	4618      	mov	r0, r3
 81064dc:	3740      	adds	r7, #64	; 0x40
 81064de:	46bd      	mov	sp, r7
 81064e0:	bd80      	pop	{r7, pc}
 81064e2:	bf00      	nop
 81064e4:	fffff82c 	.word	0xfffff82c
 81064e8:	fffff82b 	.word	0xfffff82b
 81064ec:	fffff82e 	.word	0xfffff82e

081064f0 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 81064f0:	b480      	push	{r7}
 81064f2:	b083      	sub	sp, #12
 81064f4:	af00      	add	r7, sp, #0
 81064f6:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81064f8:	bf00      	nop
 81064fa:	370c      	adds	r7, #12
 81064fc:	46bd      	mov	sp, r7
 81064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106502:	4770      	bx	lr

08106504 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8106504:	b590      	push	{r4, r7, lr}
 8106506:	b08d      	sub	sp, #52	; 0x34
 8106508:	af02      	add	r7, sp, #8
 810650a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8106512:	6a3b      	ldr	r3, [r7, #32]
 8106514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106516:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8106518:	69fb      	ldr	r3, [r7, #28]
 810651a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 810651c:	69bb      	ldr	r3, [r7, #24]
 810651e:	3358      	adds	r3, #88	; 0x58
 8106520:	4618      	mov	r0, r3
 8106522:	f7ff fdc8 	bl	81060b6 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8106526:	f107 020a 	add.w	r2, r7, #10
 810652a:	f107 030c 	add.w	r3, r7, #12
 810652e:	4619      	mov	r1, r3
 8106530:	69f8      	ldr	r0, [r7, #28]
 8106532:	f7ff fed9 	bl	81062e8 <rpmsg_virtio_get_rx_buffer>
 8106536:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8106538:	69bb      	ldr	r3, [r7, #24]
 810653a:	3358      	adds	r3, #88	; 0x58
 810653c:	4618      	mov	r0, r3
 810653e:	f7ff fdc5 	bl	81060cc <metal_mutex_release>

	while (rp_hdr) {
 8106542:	e04c      	b.n	81065de <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8106544:	69bb      	ldr	r3, [r7, #24]
 8106546:	3358      	adds	r3, #88	; 0x58
 8106548:	4618      	mov	r0, r3
 810654a:	f7ff fdb4 	bl	81060b6 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 810654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106550:	685b      	ldr	r3, [r3, #4]
 8106552:	4619      	mov	r1, r3
 8106554:	69b8      	ldr	r0, [r7, #24]
 8106556:	f7ff fe38 	bl	81061ca <rpmsg_get_ept_from_addr>
 810655a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 810655c:	69bb      	ldr	r3, [r7, #24]
 810655e:	3358      	adds	r3, #88	; 0x58
 8106560:	4618      	mov	r0, r3
 8106562:	f7ff fdb3 	bl	81060cc <metal_mutex_release>

		if (!ept)
 8106566:	697b      	ldr	r3, [r7, #20]
 8106568:	2b00      	cmp	r3, #0
 810656a:	d03c      	beq.n	81065e6 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 810656c:	697b      	ldr	r3, [r7, #20]
 810656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106574:	d103      	bne.n	810657e <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8106576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106578:	681a      	ldr	r2, [r3, #0]
 810657a:	697b      	ldr	r3, [r7, #20]
 810657c:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810657e:	697b      	ldr	r3, [r7, #20]
 8106580:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8106582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106584:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8106588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810658a:	899b      	ldrh	r3, [r3, #12]
 810658c:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810658e:	4618      	mov	r0, r3
 8106590:	697b      	ldr	r3, [r7, #20]
 8106592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106594:	697b      	ldr	r3, [r7, #20]
 8106596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106598:	9300      	str	r3, [sp, #0]
 810659a:	4613      	mov	r3, r2
 810659c:	4602      	mov	r2, r0
 810659e:	6978      	ldr	r0, [r7, #20]
 81065a0:	47a0      	blx	r4
 81065a2:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 81065a4:	693b      	ldr	r3, [r7, #16]
 81065a6:	2b00      	cmp	r3, #0
 81065a8:	d000      	beq.n	81065ac <rpmsg_virtio_rx_callback+0xa8>
 81065aa:	e7fe      	b.n	81065aa <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 81065ac:	69bb      	ldr	r3, [r7, #24]
 81065ae:	3358      	adds	r3, #88	; 0x58
 81065b0:	4618      	mov	r0, r3
 81065b2:	f7ff fd80 	bl	81060b6 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 81065b6:	68fa      	ldr	r2, [r7, #12]
 81065b8:	897b      	ldrh	r3, [r7, #10]
 81065ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81065bc:	69f8      	ldr	r0, [r7, #28]
 81065be:	f7ff fe42 	bl	8106246 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 81065c2:	f107 020a 	add.w	r2, r7, #10
 81065c6:	f107 030c 	add.w	r3, r7, #12
 81065ca:	4619      	mov	r1, r3
 81065cc:	69f8      	ldr	r0, [r7, #28]
 81065ce:	f7ff fe8b 	bl	81062e8 <rpmsg_virtio_get_rx_buffer>
 81065d2:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 81065d4:	69bb      	ldr	r3, [r7, #24]
 81065d6:	3358      	adds	r3, #88	; 0x58
 81065d8:	4618      	mov	r0, r3
 81065da:	f7ff fd77 	bl	81060cc <metal_mutex_release>
	while (rp_hdr) {
 81065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81065e0:	2b00      	cmp	r3, #0
 81065e2:	d1af      	bne.n	8106544 <rpmsg_virtio_rx_callback+0x40>
 81065e4:	e000      	b.n	81065e8 <rpmsg_virtio_rx_callback+0xe4>
			return;
 81065e6:	bf00      	nop
	}
}
 81065e8:	372c      	adds	r7, #44	; 0x2c
 81065ea:	46bd      	mov	sp, r7
 81065ec:	bd90      	pop	{r4, r7, pc}

081065ee <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 81065ee:	b580      	push	{r7, lr}
 81065f0:	b092      	sub	sp, #72	; 0x48
 81065f2:	af00      	add	r7, sp, #0
 81065f4:	60f8      	str	r0, [r7, #12]
 81065f6:	60b9      	str	r1, [r7, #8]
 81065f8:	607a      	str	r2, [r7, #4]
 81065fa:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81065fc:	68fb      	ldr	r3, [r7, #12]
 81065fe:	6a1b      	ldr	r3, [r3, #32]
 8106600:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8106602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106604:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8106606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810660a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 810660c:	68bb      	ldr	r3, [r7, #8]
 810660e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	2b28      	cmp	r3, #40	; 0x28
 8106614:	d001      	beq.n	810661a <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8106616:	2300      	movs	r3, #0
 8106618:	e057      	b.n	81066ca <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 810661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 810661c:	4619      	mov	r1, r3
 810661e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8106620:	f7ff fce2 	bl	8105fe8 <metal_io_virt_to_offset>
 8106624:	4601      	mov	r1, r0
 8106626:	f107 0210 	add.w	r2, r7, #16
 810662a:	2320      	movs	r3, #32
 810662c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810662e:	f7fe fe05 	bl	810523c <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8106632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106634:	6a1b      	ldr	r3, [r3, #32]
 8106636:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8106638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810663a:	3358      	adds	r3, #88	; 0x58
 810663c:	4618      	mov	r0, r3
 810663e:	f7ff fd3a 	bl	81060b6 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8106642:	f107 0110 	add.w	r1, r7, #16
 8106646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106648:	f04f 32ff 	mov.w	r2, #4294967295
 810664c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 810664e:	f7ff fb75 	bl	8105d3c <rpmsg_get_endpoint>
 8106652:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8106654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106658:	f003 0301 	and.w	r3, r3, #1
 810665c:	2b00      	cmp	r3, #0
 810665e:	d017      	beq.n	8106690 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8106660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106662:	2b00      	cmp	r3, #0
 8106664:	d003      	beq.n	810666e <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8106666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106668:	f04f 32ff 	mov.w	r2, #4294967295
 810666c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 810666e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106670:	3358      	adds	r3, #88	; 0x58
 8106672:	4618      	mov	r0, r3
 8106674:	f7ff fd2a 	bl	81060cc <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8106678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810667a:	2b00      	cmp	r3, #0
 810667c:	d024      	beq.n	81066c8 <rpmsg_virtio_ns_callback+0xda>
 810667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106682:	2b00      	cmp	r3, #0
 8106684:	d020      	beq.n	81066c8 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8106686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810668a:	68f8      	ldr	r0, [r7, #12]
 810668c:	4798      	blx	r3
 810668e:	e01b      	b.n	81066c8 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8106690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106692:	2b00      	cmp	r3, #0
 8106694:	d110      	bne.n	81066b8 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8106696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106698:	3358      	adds	r3, #88	; 0x58
 810669a:	4618      	mov	r0, r3
 810669c:	f7ff fd16 	bl	81060cc <metal_mutex_release>
			if (rdev->ns_bind_cb)
 81066a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81066a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81066a4:	2b00      	cmp	r3, #0
 81066a6:	d00f      	beq.n	81066c8 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 81066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81066ac:	f107 0110 	add.w	r1, r7, #16
 81066b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81066b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81066b4:	4798      	blx	r3
 81066b6:	e007      	b.n	81066c8 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 81066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81066bc:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 81066be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81066c0:	3358      	adds	r3, #88	; 0x58
 81066c2:	4618      	mov	r0, r3
 81066c4:	f7ff fd02 	bl	81060cc <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 81066c8:	2300      	movs	r3, #0
}
 81066ca:	4618      	mov	r0, r3
 81066cc:	3748      	adds	r7, #72	; 0x48
 81066ce:	46bd      	mov	sp, r7
 81066d0:	bd80      	pop	{r7, pc}
	...

081066d4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 81066d4:	b580      	push	{r7, lr}
 81066d6:	b090      	sub	sp, #64	; 0x40
 81066d8:	af02      	add	r7, sp, #8
 81066da:	60f8      	str	r0, [r7, #12]
 81066dc:	60b9      	str	r1, [r7, #8]
 81066de:	607a      	str	r2, [r7, #4]
 81066e0:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81066e2:	68fb      	ldr	r3, [r7, #12]
 81066e4:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 81066e6:	2264      	movs	r2, #100	; 0x64
 81066e8:	2100      	movs	r1, #0
 81066ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81066ec:	f000 fe28 	bl	8107340 <memset>
	metal_mutex_init(&rdev->lock);
 81066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066f2:	3358      	adds	r3, #88	; 0x58
 81066f4:	4618      	mov	r0, r3
 81066f6:	f7ff fcd3 	bl	81060a0 <metal_mutex_init>
	rvdev->vdev = vdev;
 81066fa:	68fb      	ldr	r3, [r7, #12]
 81066fc:	68ba      	ldr	r2, [r7, #8]
 81066fe:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8106700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106702:	687a      	ldr	r2, [r7, #4]
 8106704:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8106706:	68bb      	ldr	r3, [r7, #8]
 8106708:	68fa      	ldr	r2, [r7, #12]
 810670a:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 810670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810670e:	4a38      	ldr	r2, [pc, #224]	; (81067f0 <rpmsg_init_vdev+0x11c>)
 8106710:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8106712:	68f8      	ldr	r0, [r7, #12]
 8106714:	f7ff fd02 	bl	810611c <rpmsg_virtio_get_role>
 8106718:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 810671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810671c:	2b01      	cmp	r3, #1
 810671e:	d112      	bne.n	8106746 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8106720:	4b34      	ldr	r3, [pc, #208]	; (81067f4 <rpmsg_init_vdev+0x120>)
 8106722:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8106724:	4b34      	ldr	r3, [pc, #208]	; (81067f8 <rpmsg_init_vdev+0x124>)
 8106726:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8106728:	4b34      	ldr	r3, [pc, #208]	; (81067fc <rpmsg_init_vdev+0x128>)
 810672a:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 810672c:	4b34      	ldr	r3, [pc, #208]	; (8106800 <rpmsg_init_vdev+0x12c>)
 810672e:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8106730:	68bb      	ldr	r3, [r7, #8]
 8106732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106734:	3318      	adds	r3, #24
 8106736:	681a      	ldr	r2, [r3, #0]
 8106738:	68fb      	ldr	r3, [r7, #12]
 810673a:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 810673c:	68bb      	ldr	r3, [r7, #8]
 810673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106740:	681a      	ldr	r2, [r3, #0]
 8106742:	68fb      	ldr	r3, [r7, #12]
 8106744:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8106746:	68fb      	ldr	r3, [r7, #12]
 8106748:	683a      	ldr	r2, [r7, #0]
 810674a:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810674e:	2b01      	cmp	r3, #1
 8106750:	d102      	bne.n	8106758 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8106752:	68f8      	ldr	r0, [r7, #12]
 8106754:	f7ff fded 	bl	8106332 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8106758:	f107 0218 	add.w	r2, r7, #24
 810675c:	f107 0310 	add.w	r3, r7, #16
 8106760:	9300      	str	r3, [sp, #0]
 8106762:	4613      	mov	r3, r2
 8106764:	2202      	movs	r2, #2
 8106766:	2100      	movs	r1, #0
 8106768:	68f8      	ldr	r0, [r7, #12]
 810676a:	f7ff fd19 	bl	81061a0 <rpmsg_virtio_create_virtqueues>
 810676e:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8106770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106772:	2b00      	cmp	r3, #0
 8106774:	d001      	beq.n	810677a <rpmsg_init_vdev+0xa6>
		return status;
 8106776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106778:	e035      	b.n	81067e6 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810677a:	2300      	movs	r3, #0
 810677c:	637b      	str	r3, [r7, #52]	; 0x34
 810677e:	e00f      	b.n	81067a0 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8106780:	68bb      	ldr	r3, [r7, #8]
 8106782:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106786:	4613      	mov	r3, r2
 8106788:	005b      	lsls	r3, r3, #1
 810678a:	4413      	add	r3, r2
 810678c:	00db      	lsls	r3, r3, #3
 810678e:	440b      	add	r3, r1
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8106794:	6a3b      	ldr	r3, [r7, #32]
 8106796:	683a      	ldr	r2, [r7, #0]
 8106798:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810679c:	3301      	adds	r3, #1
 810679e:	637b      	str	r3, [r7, #52]	; 0x34
 81067a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81067a2:	2b01      	cmp	r3, #1
 81067a4:	d9ec      	bls.n	8106780 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 81067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067a8:	4618      	mov	r0, r3
 81067aa:	f7ff fc0c 	bl	8105fc6 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 81067ae:	68f8      	ldr	r0, [r7, #12]
 81067b0:	f7ff fce5 	bl	810617e <rpmsg_virtio_get_features>
 81067b4:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 81067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067b8:	f003 0301 	and.w	r3, r3, #1
 81067bc:	2b00      	cmp	r3, #0
 81067be:	d011      	beq.n	81067e4 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 81067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067c2:	f103 0008 	add.w	r0, r3, #8
 81067c6:	2300      	movs	r3, #0
 81067c8:	9301      	str	r3, [sp, #4]
 81067ca:	4b0e      	ldr	r3, [pc, #56]	; (8106804 <rpmsg_init_vdev+0x130>)
 81067cc:	9300      	str	r3, [sp, #0]
 81067ce:	2335      	movs	r3, #53	; 0x35
 81067d0:	2235      	movs	r2, #53	; 0x35
 81067d2:	490d      	ldr	r1, [pc, #52]	; (8106808 <rpmsg_init_vdev+0x134>)
 81067d4:	f7ff fc85 	bl	81060e2 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 81067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067da:	3308      	adds	r3, #8
 81067dc:	4619      	mov	r1, r3
 81067de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81067e0:	f7ff fb2e 	bl	8105e40 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 81067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 81067e6:	4618      	mov	r0, r3
 81067e8:	3738      	adds	r7, #56	; 0x38
 81067ea:	46bd      	mov	sp, r7
 81067ec:	bd80      	pop	{r7, pc}
 81067ee:	bf00      	nop
 81067f0:	081063a1 	.word	0x081063a1
 81067f4:	0810bd08 	.word	0x0810bd08
 81067f8:	0810bd10 	.word	0x0810bd10
 81067fc:	081064f1 	.word	0x081064f1
 8106800:	08106505 	.word	0x08106505
 8106804:	081065ef 	.word	0x081065ef
 8106808:	0810bd18 	.word	0x0810bd18

0810680c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 810680c:	b480      	push	{r7}
 810680e:	b083      	sub	sp, #12
 8106810:	af00      	add	r7, sp, #0
 8106812:	6078      	str	r0, [r7, #4]
 8106814:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106816:	bf00      	nop
 8106818:	370c      	adds	r7, #12
 810681a:	46bd      	mov	sp, r7
 810681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106820:	4770      	bx	lr

08106822 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8106822:	b480      	push	{r7}
 8106824:	b083      	sub	sp, #12
 8106826:	af00      	add	r7, sp, #0
 8106828:	6078      	str	r0, [r7, #4]
 810682a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810682c:	bf00      	nop
 810682e:	370c      	adds	r7, #12
 8106830:	46bd      	mov	sp, r7
 8106832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106836:	4770      	bx	lr

08106838 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8106838:	b480      	push	{r7}
 810683a:	b085      	sub	sp, #20
 810683c:	af00      	add	r7, sp, #0
 810683e:	60f8      	str	r0, [r7, #12]
 8106840:	60b9      	str	r1, [r7, #8]
 8106842:	607a      	str	r2, [r7, #4]
 8106844:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8106846:	68fb      	ldr	r3, [r7, #12]
}
 8106848:	4618      	mov	r0, r3
 810684a:	3714      	adds	r7, #20
 810684c:	46bd      	mov	sp, r7
 810684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106852:	4770      	bx	lr

08106854 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8106854:	b590      	push	{r4, r7, lr}
 8106856:	b08f      	sub	sp, #60	; 0x3c
 8106858:	af04      	add	r7, sp, #16
 810685a:	60f8      	str	r0, [r7, #12]
 810685c:	60b9      	str	r1, [r7, #8]
 810685e:	607a      	str	r2, [r7, #4]
 8106860:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8106862:	68fb      	ldr	r3, [r7, #12]
 8106864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106866:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8106868:	687a      	ldr	r2, [r7, #4]
 810686a:	6a3b      	ldr	r3, [r7, #32]
 810686c:	429a      	cmp	r2, r3
 810686e:	d902      	bls.n	8106876 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8106870:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8106874:	e036      	b.n	81068e4 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8106876:	2300      	movs	r3, #0
 8106878:	627b      	str	r3, [r7, #36]	; 0x24
 810687a:	e02e      	b.n	81068da <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 810687c:	68fb      	ldr	r3, [r7, #12]
 810687e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106882:	4613      	mov	r3, r2
 8106884:	005b      	lsls	r3, r3, #1
 8106886:	4413      	add	r3, r2
 8106888:	00db      	lsls	r3, r3, #3
 810688a:	440b      	add	r3, r1
 810688c:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 810688e:	69fb      	ldr	r3, [r7, #28]
 8106890:	3304      	adds	r3, #4
 8106892:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106896:	b298      	uxth	r0, r3
 8106898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810689a:	009b      	lsls	r3, r3, #2
 810689c:	683a      	ldr	r2, [r7, #0]
 810689e:	4413      	add	r3, r2
 81068a0:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 81068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068a4:	009b      	lsls	r3, r3, #2
 81068a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81068a8:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81068aa:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 81068ac:	68fa      	ldr	r2, [r7, #12]
 81068ae:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81068b0:	6a12      	ldr	r2, [r2, #32]
 81068b2:	69f9      	ldr	r1, [r7, #28]
 81068b4:	6809      	ldr	r1, [r1, #0]
 81068b6:	9102      	str	r1, [sp, #8]
 81068b8:	9201      	str	r2, [sp, #4]
 81068ba:	9300      	str	r3, [sp, #0]
 81068bc:	69bb      	ldr	r3, [r7, #24]
 81068be:	4622      	mov	r2, r4
 81068c0:	4601      	mov	r1, r0
 81068c2:	68f8      	ldr	r0, [r7, #12]
 81068c4:	f000 f8f6 	bl	8106ab4 <virtqueue_create>
 81068c8:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 81068ca:	697b      	ldr	r3, [r7, #20]
 81068cc:	2b00      	cmp	r3, #0
 81068ce:	d001      	beq.n	81068d4 <virtio_create_virtqueues+0x80>
			return ret;
 81068d0:	697b      	ldr	r3, [r7, #20]
 81068d2:	e007      	b.n	81068e4 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 81068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068d6:	3301      	adds	r3, #1
 81068d8:	627b      	str	r3, [r7, #36]	; 0x24
 81068da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	429a      	cmp	r2, r3
 81068e0:	d3cc      	bcc.n	810687c <virtio_create_virtqueues+0x28>
	}
	return 0;
 81068e2:	2300      	movs	r3, #0
}
 81068e4:	4618      	mov	r0, r3
 81068e6:	372c      	adds	r7, #44	; 0x2c
 81068e8:	46bd      	mov	sp, r7
 81068ea:	bd90      	pop	{r4, r7, pc}

081068ec <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 81068ec:	b480      	push	{r7}
 81068ee:	b085      	sub	sp, #20
 81068f0:	af00      	add	r7, sp, #0
 81068f2:	60f8      	str	r0, [r7, #12]
 81068f4:	60b9      	str	r1, [r7, #8]
 81068f6:	607a      	str	r2, [r7, #4]
 81068f8:	603b      	str	r3, [r7, #0]
	vr->num = num;
 81068fa:	68fb      	ldr	r3, [r7, #12]
 81068fc:	68ba      	ldr	r2, [r7, #8]
 81068fe:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8106900:	68fb      	ldr	r3, [r7, #12]
 8106902:	687a      	ldr	r2, [r7, #4]
 8106904:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8106906:	68bb      	ldr	r3, [r7, #8]
 8106908:	011b      	lsls	r3, r3, #4
 810690a:	687a      	ldr	r2, [r7, #4]
 810690c:	441a      	add	r2, r3
 810690e:	68fb      	ldr	r3, [r7, #12]
 8106910:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8106912:	68fb      	ldr	r3, [r7, #12]
 8106914:	689a      	ldr	r2, [r3, #8]
 8106916:	68bb      	ldr	r3, [r7, #8]
 8106918:	005b      	lsls	r3, r3, #1
 810691a:	4413      	add	r3, r2
 810691c:	3304      	adds	r3, #4
 810691e:	461a      	mov	r2, r3
 8106920:	683b      	ldr	r3, [r7, #0]
 8106922:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8106924:	1c5a      	adds	r2, r3, #1
 8106926:	683b      	ldr	r3, [r7, #0]
 8106928:	425b      	negs	r3, r3
 810692a:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 810692c:	461a      	mov	r2, r3
 810692e:	68fb      	ldr	r3, [r7, #12]
 8106930:	60da      	str	r2, [r3, #12]
}
 8106932:	bf00      	nop
 8106934:	3714      	adds	r7, #20
 8106936:	46bd      	mov	sp, r7
 8106938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810693c:	4770      	bx	lr

0810693e <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 810693e:	b480      	push	{r7}
 8106940:	b083      	sub	sp, #12
 8106942:	af00      	add	r7, sp, #0
 8106944:	4603      	mov	r3, r0
 8106946:	80fb      	strh	r3, [r7, #6]
 8106948:	460b      	mov	r3, r1
 810694a:	80bb      	strh	r3, [r7, #4]
 810694c:	4613      	mov	r3, r2
 810694e:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8106950:	88ba      	ldrh	r2, [r7, #4]
 8106952:	88fb      	ldrh	r3, [r7, #6]
 8106954:	1ad3      	subs	r3, r2, r3
 8106956:	b29b      	uxth	r3, r3
 8106958:	3b01      	subs	r3, #1
 810695a:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 810695c:	88b9      	ldrh	r1, [r7, #4]
 810695e:	887b      	ldrh	r3, [r7, #2]
 8106960:	1acb      	subs	r3, r1, r3
 8106962:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8106964:	429a      	cmp	r2, r3
 8106966:	bf34      	ite	cc
 8106968:	2301      	movcc	r3, #1
 810696a:	2300      	movcs	r3, #0
 810696c:	b2db      	uxtb	r3, r3
}
 810696e:	4618      	mov	r0, r3
 8106970:	370c      	adds	r7, #12
 8106972:	46bd      	mov	sp, r7
 8106974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106978:	4770      	bx	lr

0810697a <metal_io_virt>:
{
 810697a:	b480      	push	{r7}
 810697c:	b083      	sub	sp, #12
 810697e:	af00      	add	r7, sp, #0
 8106980:	6078      	str	r0, [r7, #4]
 8106982:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106988:	f1b3 3fff 	cmp.w	r3, #4294967295
 810698c:	d009      	beq.n	81069a2 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	689b      	ldr	r3, [r3, #8]
 8106992:	683a      	ldr	r2, [r7, #0]
 8106994:	429a      	cmp	r2, r3
 8106996:	d804      	bhi.n	81069a2 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810699c:	683b      	ldr	r3, [r7, #0]
 810699e:	4413      	add	r3, r2
 81069a0:	e000      	b.n	81069a4 <metal_io_virt+0x2a>
 81069a2:	2300      	movs	r3, #0
}
 81069a4:	4618      	mov	r0, r3
 81069a6:	370c      	adds	r7, #12
 81069a8:	46bd      	mov	sp, r7
 81069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069ae:	4770      	bx	lr

081069b0 <metal_io_phys>:
{
 81069b0:	b480      	push	{r7}
 81069b2:	b085      	sub	sp, #20
 81069b4:	af00      	add	r7, sp, #0
 81069b6:	6078      	str	r0, [r7, #4]
 81069b8:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 81069be:	2b1f      	cmp	r3, #31
 81069c0:	d805      	bhi.n	81069ce <metal_io_phys+0x1e>
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	68db      	ldr	r3, [r3, #12]
 81069c6:	683a      	ldr	r2, [r7, #0]
 81069c8:	fa22 f303 	lsr.w	r3, r2, r3
 81069cc:	e000      	b.n	81069d0 <metal_io_phys+0x20>
 81069ce:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 81069d0:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 81069d6:	2b00      	cmp	r3, #0
 81069d8:	d010      	beq.n	81069fc <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	689b      	ldr	r3, [r3, #8]
 81069de:	683a      	ldr	r2, [r7, #0]
 81069e0:	429a      	cmp	r2, r3
 81069e2:	d80b      	bhi.n	81069fc <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	685a      	ldr	r2, [r3, #4]
 81069e8:	68fb      	ldr	r3, [r7, #12]
 81069ea:	009b      	lsls	r3, r3, #2
 81069ec:	4413      	add	r3, r2
 81069ee:	681a      	ldr	r2, [r3, #0]
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	6919      	ldr	r1, [r3, #16]
 81069f4:	683b      	ldr	r3, [r7, #0]
 81069f6:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 81069f8:	4413      	add	r3, r2
 81069fa:	e001      	b.n	8106a00 <metal_io_phys+0x50>
 81069fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106a00:	4618      	mov	r0, r3
 8106a02:	3714      	adds	r7, #20
 8106a04:	46bd      	mov	sp, r7
 8106a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a0a:	4770      	bx	lr

08106a0c <metal_io_phys_to_offset>:
{
 8106a0c:	b580      	push	{r7, lr}
 8106a0e:	b084      	sub	sp, #16
 8106a10:	af00      	add	r7, sp, #0
 8106a12:	6078      	str	r0, [r7, #4]
 8106a14:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8106a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a1e:	d105      	bne.n	8106a2c <metal_io_phys_to_offset+0x20>
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	685b      	ldr	r3, [r3, #4]
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	683a      	ldr	r2, [r7, #0]
 8106a28:	1ad3      	subs	r3, r2, r3
 8106a2a:	e003      	b.n	8106a34 <metal_io_phys_to_offset+0x28>
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	691a      	ldr	r2, [r3, #16]
 8106a30:	683b      	ldr	r3, [r7, #0]
 8106a32:	4013      	ands	r3, r2
	unsigned long offset =
 8106a34:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8106a36:	68f9      	ldr	r1, [r7, #12]
 8106a38:	6878      	ldr	r0, [r7, #4]
 8106a3a:	f7ff ffb9 	bl	81069b0 <metal_io_phys>
 8106a3e:	4602      	mov	r2, r0
 8106a40:	683b      	ldr	r3, [r7, #0]
 8106a42:	4293      	cmp	r3, r2
 8106a44:	d101      	bne.n	8106a4a <metal_io_phys_to_offset+0x3e>
			return offset;
 8106a46:	68fb      	ldr	r3, [r7, #12]
 8106a48:	e00c      	b.n	8106a64 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	691a      	ldr	r2, [r3, #16]
 8106a4e:	68fb      	ldr	r3, [r7, #12]
 8106a50:	4413      	add	r3, r2
 8106a52:	3301      	adds	r3, #1
 8106a54:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	689b      	ldr	r3, [r3, #8]
 8106a5a:	68fa      	ldr	r2, [r7, #12]
 8106a5c:	429a      	cmp	r2, r3
 8106a5e:	d3ea      	bcc.n	8106a36 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8106a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106a64:	4618      	mov	r0, r3
 8106a66:	3710      	adds	r7, #16
 8106a68:	46bd      	mov	sp, r7
 8106a6a:	bd80      	pop	{r7, pc}

08106a6c <metal_io_phys_to_virt>:
{
 8106a6c:	b580      	push	{r7, lr}
 8106a6e:	b082      	sub	sp, #8
 8106a70:	af00      	add	r7, sp, #0
 8106a72:	6078      	str	r0, [r7, #4]
 8106a74:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8106a76:	6839      	ldr	r1, [r7, #0]
 8106a78:	6878      	ldr	r0, [r7, #4]
 8106a7a:	f7ff ffc7 	bl	8106a0c <metal_io_phys_to_offset>
 8106a7e:	4603      	mov	r3, r0
 8106a80:	4619      	mov	r1, r3
 8106a82:	6878      	ldr	r0, [r7, #4]
 8106a84:	f7ff ff79 	bl	810697a <metal_io_virt>
 8106a88:	4603      	mov	r3, r0
}
 8106a8a:	4618      	mov	r0, r3
 8106a8c:	3708      	adds	r7, #8
 8106a8e:	46bd      	mov	sp, r7
 8106a90:	bd80      	pop	{r7, pc}

08106a92 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8106a92:	b580      	push	{r7, lr}
 8106a94:	b084      	sub	sp, #16
 8106a96:	af00      	add	r7, sp, #0
 8106a98:	6078      	str	r0, [r7, #4]
 8106a9a:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aa0:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8106aa2:	6839      	ldr	r1, [r7, #0]
 8106aa4:	68f8      	ldr	r0, [r7, #12]
 8106aa6:	f7ff ffe1 	bl	8106a6c <metal_io_phys_to_virt>
 8106aaa:	4603      	mov	r3, r0
}
 8106aac:	4618      	mov	r0, r3
 8106aae:	3710      	adds	r7, #16
 8106ab0:	46bd      	mov	sp, r7
 8106ab2:	bd80      	pop	{r7, pc}

08106ab4 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8106ab4:	b580      	push	{r7, lr}
 8106ab6:	b086      	sub	sp, #24
 8106ab8:	af00      	add	r7, sp, #0
 8106aba:	60f8      	str	r0, [r7, #12]
 8106abc:	607a      	str	r2, [r7, #4]
 8106abe:	603b      	str	r3, [r7, #0]
 8106ac0:	460b      	mov	r3, r1
 8106ac2:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8106ac4:	2300      	movs	r3, #0
 8106ac6:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8106ac8:	697b      	ldr	r3, [r7, #20]
 8106aca:	2b00      	cmp	r3, #0
 8106acc:	d121      	bne.n	8106b12 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8106ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ad0:	68fa      	ldr	r2, [r7, #12]
 8106ad2:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8106ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ad6:	687a      	ldr	r2, [r7, #4]
 8106ad8:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8106ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106adc:	897a      	ldrh	r2, [r7, #10]
 8106ade:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8106ae0:	683b      	ldr	r3, [r7, #0]
 8106ae2:	891a      	ldrh	r2, [r3, #8]
 8106ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ae6:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8106ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106aea:	895a      	ldrh	r2, [r3, #10]
 8106aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106aee:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8106af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106af2:	6a3a      	ldr	r2, [r7, #32]
 8106af4:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8106af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106afa:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8106afc:	683b      	ldr	r3, [r7, #0]
 8106afe:	6819      	ldr	r1, [r3, #0]
 8106b00:	683b      	ldr	r3, [r7, #0]
 8106b02:	685b      	ldr	r3, [r3, #4]
 8106b04:	461a      	mov	r2, r3
 8106b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106b08:	f000 f8fb 	bl	8106d02 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8106b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106b0e:	f000 f885 	bl	8106c1c <virtqueue_disable_cb>
	}

	return (status);
 8106b12:	697b      	ldr	r3, [r7, #20]
}
 8106b14:	4618      	mov	r0, r3
 8106b16:	3718      	adds	r7, #24
 8106b18:	46bd      	mov	sp, r7
 8106b1a:	bd80      	pop	{r7, pc}

08106b1c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8106b1c:	b580      	push	{r7, lr}
 8106b1e:	b086      	sub	sp, #24
 8106b20:	af00      	add	r7, sp, #0
 8106b22:	60f8      	str	r0, [r7, #12]
 8106b24:	60b9      	str	r1, [r7, #8]
 8106b26:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8106b28:	2300      	movs	r3, #0
 8106b2a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8106b2c:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	6a1b      	ldr	r3, [r3, #32]
 8106b38:	885b      	ldrh	r3, [r3, #2]
 8106b3a:	429a      	cmp	r2, r3
 8106b3c:	d101      	bne.n	8106b42 <virtqueue_get_available_buffer+0x26>
		return NULL;
 8106b3e:	2300      	movs	r3, #0
 8106b40:	e02e      	b.n	8106ba0 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8106b42:	68fb      	ldr	r3, [r7, #12]
 8106b44:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106b46:	1c5a      	adds	r2, r3, #1
 8106b48:	b291      	uxth	r1, r2
 8106b4a:	68fa      	ldr	r2, [r7, #12]
 8106b4c:	8691      	strh	r1, [r2, #52]	; 0x34
 8106b4e:	b21a      	sxth	r2, r3
 8106b50:	68fb      	ldr	r3, [r7, #12]
 8106b52:	895b      	ldrh	r3, [r3, #10]
 8106b54:	3b01      	subs	r3, #1
 8106b56:	b29b      	uxth	r3, r3
 8106b58:	b21b      	sxth	r3, r3
 8106b5a:	4013      	ands	r3, r2
 8106b5c:	b21b      	sxth	r3, r3
 8106b5e:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106b60:	68fb      	ldr	r3, [r7, #12]
 8106b62:	6a1a      	ldr	r2, [r3, #32]
 8106b64:	8afb      	ldrh	r3, [r7, #22]
 8106b66:	005b      	lsls	r3, r3, #1
 8106b68:	4413      	add	r3, r2
 8106b6a:	889a      	ldrh	r2, [r3, #4]
 8106b6c:	68bb      	ldr	r3, [r7, #8]
 8106b6e:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8106b70:	68fb      	ldr	r3, [r7, #12]
 8106b72:	69da      	ldr	r2, [r3, #28]
 8106b74:	68bb      	ldr	r3, [r7, #8]
 8106b76:	881b      	ldrh	r3, [r3, #0]
 8106b78:	011b      	lsls	r3, r3, #4
 8106b7a:	4413      	add	r3, r2
 8106b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b80:	4613      	mov	r3, r2
 8106b82:	4619      	mov	r1, r3
 8106b84:	68f8      	ldr	r0, [r7, #12]
 8106b86:	f7ff ff84 	bl	8106a92 <virtqueue_phys_to_virt>
 8106b8a:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8106b8c:	68fb      	ldr	r3, [r7, #12]
 8106b8e:	69da      	ldr	r2, [r3, #28]
 8106b90:	68bb      	ldr	r3, [r7, #8]
 8106b92:	881b      	ldrh	r3, [r3, #0]
 8106b94:	011b      	lsls	r3, r3, #4
 8106b96:	4413      	add	r3, r2
 8106b98:	689a      	ldr	r2, [r3, #8]
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8106b9e:	693b      	ldr	r3, [r7, #16]
}
 8106ba0:	4618      	mov	r0, r3
 8106ba2:	3718      	adds	r7, #24
 8106ba4:	46bd      	mov	sp, r7
 8106ba6:	bd80      	pop	{r7, pc}

08106ba8 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8106ba8:	b480      	push	{r7}
 8106baa:	b087      	sub	sp, #28
 8106bac:	af00      	add	r7, sp, #0
 8106bae:	60f8      	str	r0, [r7, #12]
 8106bb0:	460b      	mov	r3, r1
 8106bb2:	607a      	str	r2, [r7, #4]
 8106bb4:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8106bb6:	2300      	movs	r3, #0
 8106bb8:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8106bba:	68fb      	ldr	r3, [r7, #12]
 8106bbc:	895b      	ldrh	r3, [r3, #10]
 8106bbe:	897a      	ldrh	r2, [r7, #10]
 8106bc0:	429a      	cmp	r2, r3
 8106bc2:	d901      	bls.n	8106bc8 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8106bc4:	4b14      	ldr	r3, [pc, #80]	; (8106c18 <virtqueue_add_consumed_buffer+0x70>)
 8106bc6:	e021      	b.n	8106c0c <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8106bc8:	68fb      	ldr	r3, [r7, #12]
 8106bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bcc:	885b      	ldrh	r3, [r3, #2]
 8106bce:	b21a      	sxth	r2, r3
 8106bd0:	68fb      	ldr	r3, [r7, #12]
 8106bd2:	895b      	ldrh	r3, [r3, #10]
 8106bd4:	3b01      	subs	r3, #1
 8106bd6:	b29b      	uxth	r3, r3
 8106bd8:	b21b      	sxth	r3, r3
 8106bda:	4013      	ands	r3, r2
 8106bdc:	b21b      	sxth	r3, r3
 8106bde:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8106be0:	68fb      	ldr	r3, [r7, #12]
 8106be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106be4:	8a7b      	ldrh	r3, [r7, #18]
 8106be6:	00db      	lsls	r3, r3, #3
 8106be8:	4413      	add	r3, r2
 8106bea:	3304      	adds	r3, #4
 8106bec:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8106bee:	897a      	ldrh	r2, [r7, #10]
 8106bf0:	697b      	ldr	r3, [r7, #20]
 8106bf2:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8106bf4:	697b      	ldr	r3, [r7, #20]
 8106bf6:	687a      	ldr	r2, [r7, #4]
 8106bf8:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8106bfa:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c02:	885a      	ldrh	r2, [r3, #2]
 8106c04:	3201      	adds	r2, #1
 8106c06:	b292      	uxth	r2, r2
 8106c08:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8106c0a:	2300      	movs	r3, #0
}
 8106c0c:	4618      	mov	r0, r3
 8106c0e:	371c      	adds	r7, #28
 8106c10:	46bd      	mov	sp, r7
 8106c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c16:	4770      	bx	lr
 8106c18:	fffff441 	.word	0xfffff441

08106c1c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8106c1c:	b480      	push	{r7}
 8106c1e:	b083      	sub	sp, #12
 8106c20:	af00      	add	r7, sp, #0
 8106c22:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	68db      	ldr	r3, [r3, #12]
 8106c28:	f003 0302 	and.w	r3, r3, #2
 8106c2c:	2b00      	cmp	r3, #0
 8106c2e:	d010      	beq.n	8106c52 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	895b      	ldrh	r3, [r3, #10]
 8106c38:	1ad3      	subs	r3, r2, r3
 8106c3a:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8106c3c:	687b      	ldr	r3, [r7, #4]
 8106c3e:	6a1a      	ldr	r2, [r3, #32]
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106c44:	3901      	subs	r1, #1
 8106c46:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8106c48:	005b      	lsls	r3, r3, #1
 8106c4a:	4413      	add	r3, r2
 8106c4c:	460a      	mov	r2, r1
 8106c4e:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8106c50:	e008      	b.n	8106c64 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	6a1b      	ldr	r3, [r3, #32]
 8106c56:	881a      	ldrh	r2, [r3, #0]
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	6a1b      	ldr	r3, [r3, #32]
 8106c5c:	f042 0201 	orr.w	r2, r2, #1
 8106c60:	b292      	uxth	r2, r2
 8106c62:	801a      	strh	r2, [r3, #0]
}
 8106c64:	bf00      	nop
 8106c66:	370c      	adds	r7, #12
 8106c68:	46bd      	mov	sp, r7
 8106c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c6e:	4770      	bx	lr

08106c70 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8106c70:	b580      	push	{r7, lr}
 8106c72:	b082      	sub	sp, #8
 8106c74:	af00      	add	r7, sp, #0
 8106c76:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8106c78:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8106c7c:	6878      	ldr	r0, [r7, #4]
 8106c7e:	f000 f885 	bl	8106d8c <vq_ring_must_notify_host>
 8106c82:	4603      	mov	r3, r0
 8106c84:	2b00      	cmp	r3, #0
 8106c86:	d002      	beq.n	8106c8e <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8106c88:	6878      	ldr	r0, [r7, #4]
 8106c8a:	f000 f8b5 	bl	8106df8 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	2200      	movs	r2, #0
 8106c92:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8106c94:	bf00      	nop
 8106c96:	3708      	adds	r7, #8
 8106c98:	46bd      	mov	sp, r7
 8106c9a:	bd80      	pop	{r7, pc}

08106c9c <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8106c9c:	b480      	push	{r7}
 8106c9e:	b085      	sub	sp, #20
 8106ca0:	af00      	add	r7, sp, #0
 8106ca2:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8106ca4:	2300      	movs	r3, #0
 8106ca6:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8106ca8:	2300      	movs	r3, #0
 8106caa:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8106cac:	2300      	movs	r3, #0
 8106cae:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	6a1b      	ldr	r3, [r3, #32]
 8106cb8:	885b      	ldrh	r3, [r3, #2]
 8106cba:	429a      	cmp	r2, r3
 8106cbc:	d101      	bne.n	8106cc2 <virtqueue_get_desc_size+0x26>
		return 0;
 8106cbe:	2300      	movs	r3, #0
 8106cc0:	e019      	b.n	8106cf6 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106cc6:	b21a      	sxth	r2, r3
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	895b      	ldrh	r3, [r3, #10]
 8106ccc:	3b01      	subs	r3, #1
 8106cce:	b29b      	uxth	r3, r3
 8106cd0:	b21b      	sxth	r3, r3
 8106cd2:	4013      	ands	r3, r2
 8106cd4:	b21b      	sxth	r3, r3
 8106cd6:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	6a1a      	ldr	r2, [r3, #32]
 8106cdc:	89fb      	ldrh	r3, [r7, #14]
 8106cde:	005b      	lsls	r3, r3, #1
 8106ce0:	4413      	add	r3, r2
 8106ce2:	889b      	ldrh	r3, [r3, #4]
 8106ce4:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	69da      	ldr	r2, [r3, #28]
 8106cea:	89bb      	ldrh	r3, [r7, #12]
 8106cec:	011b      	lsls	r3, r3, #4
 8106cee:	4413      	add	r3, r2
 8106cf0:	689b      	ldr	r3, [r3, #8]
 8106cf2:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8106cf4:	68bb      	ldr	r3, [r7, #8]
}
 8106cf6:	4618      	mov	r0, r3
 8106cf8:	3714      	adds	r7, #20
 8106cfa:	46bd      	mov	sp, r7
 8106cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d00:	4770      	bx	lr

08106d02 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8106d02:	b580      	push	{r7, lr}
 8106d04:	b088      	sub	sp, #32
 8106d06:	af00      	add	r7, sp, #0
 8106d08:	60f8      	str	r0, [r7, #12]
 8106d0a:	60b9      	str	r1, [r7, #8]
 8106d0c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8106d0e:	68fb      	ldr	r3, [r7, #12]
 8106d10:	895b      	ldrh	r3, [r3, #10]
 8106d12:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8106d14:	68fb      	ldr	r3, [r7, #12]
 8106d16:	3318      	adds	r3, #24
 8106d18:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8106d1a:	69b9      	ldr	r1, [r7, #24]
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	68ba      	ldr	r2, [r7, #8]
 8106d20:	6978      	ldr	r0, [r7, #20]
 8106d22:	f7ff fde3 	bl	81068ec <vring_init>

	for (i = 0; i < size - 1; i++)
 8106d26:	2300      	movs	r3, #0
 8106d28:	61fb      	str	r3, [r7, #28]
 8106d2a:	e00c      	b.n	8106d46 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8106d2c:	69fb      	ldr	r3, [r7, #28]
 8106d2e:	b29a      	uxth	r2, r3
 8106d30:	697b      	ldr	r3, [r7, #20]
 8106d32:	6859      	ldr	r1, [r3, #4]
 8106d34:	69fb      	ldr	r3, [r7, #28]
 8106d36:	011b      	lsls	r3, r3, #4
 8106d38:	440b      	add	r3, r1
 8106d3a:	3201      	adds	r2, #1
 8106d3c:	b292      	uxth	r2, r2
 8106d3e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8106d40:	69fb      	ldr	r3, [r7, #28]
 8106d42:	3301      	adds	r3, #1
 8106d44:	61fb      	str	r3, [r7, #28]
 8106d46:	69bb      	ldr	r3, [r7, #24]
 8106d48:	3b01      	subs	r3, #1
 8106d4a:	69fa      	ldr	r2, [r7, #28]
 8106d4c:	429a      	cmp	r2, r3
 8106d4e:	dbed      	blt.n	8106d2c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8106d50:	697b      	ldr	r3, [r7, #20]
 8106d52:	685a      	ldr	r2, [r3, #4]
 8106d54:	69fb      	ldr	r3, [r7, #28]
 8106d56:	011b      	lsls	r3, r3, #4
 8106d58:	4413      	add	r3, r2
 8106d5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8106d5e:	81da      	strh	r2, [r3, #14]
}
 8106d60:	bf00      	nop
 8106d62:	3720      	adds	r7, #32
 8106d64:	46bd      	mov	sp, r7
 8106d66:	bd80      	pop	{r7, pc}

08106d68 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8106d68:	b580      	push	{r7, lr}
 8106d6a:	b082      	sub	sp, #8
 8106d6c:	af00      	add	r7, sp, #0
 8106d6e:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8106d70:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	691b      	ldr	r3, [r3, #16]
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	d003      	beq.n	8106d84 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	691b      	ldr	r3, [r3, #16]
 8106d80:	6878      	ldr	r0, [r7, #4]
 8106d82:	4798      	blx	r3
}
 8106d84:	bf00      	nop
 8106d86:	3708      	adds	r7, #8
 8106d88:	46bd      	mov	sp, r7
 8106d8a:	bd80      	pop	{r7, pc}

08106d8c <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8106d8c:	b580      	push	{r7, lr}
 8106d8e:	b084      	sub	sp, #16
 8106d90:	af00      	add	r7, sp, #0
 8106d92:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	68db      	ldr	r3, [r3, #12]
 8106d98:	f003 0302 	and.w	r3, r3, #2
 8106d9c:	2b00      	cmp	r3, #0
 8106d9e:	d01d      	beq.n	8106ddc <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	6a1b      	ldr	r3, [r3, #32]
 8106da4:	885b      	ldrh	r3, [r3, #2]
 8106da6:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106dac:	89fa      	ldrh	r2, [r7, #14]
 8106dae:	1ad3      	subs	r3, r2, r3
 8106db0:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	699b      	ldr	r3, [r3, #24]
 8106dba:	00db      	lsls	r3, r3, #3
 8106dbc:	4413      	add	r3, r2
 8106dbe:	685b      	ldr	r3, [r3, #4]
 8106dc0:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8106dc2:	89ba      	ldrh	r2, [r7, #12]
 8106dc4:	89f9      	ldrh	r1, [r7, #14]
 8106dc6:	897b      	ldrh	r3, [r7, #10]
 8106dc8:	4618      	mov	r0, r3
 8106dca:	f7ff fdb8 	bl	810693e <vring_need_event>
 8106dce:	4603      	mov	r3, r0
 8106dd0:	2b00      	cmp	r3, #0
 8106dd2:	bf14      	ite	ne
 8106dd4:	2301      	movne	r3, #1
 8106dd6:	2300      	moveq	r3, #0
 8106dd8:	b2db      	uxtb	r3, r3
 8106dda:	e009      	b.n	8106df0 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106de0:	881b      	ldrh	r3, [r3, #0]
 8106de2:	f003 0301 	and.w	r3, r3, #1
 8106de6:	2b00      	cmp	r3, #0
 8106de8:	bf0c      	ite	eq
 8106dea:	2301      	moveq	r3, #1
 8106dec:	2300      	movne	r3, #0
 8106dee:	b2db      	uxtb	r3, r3
}
 8106df0:	4618      	mov	r0, r3
 8106df2:	3710      	adds	r7, #16
 8106df4:	46bd      	mov	sp, r7
 8106df6:	bd80      	pop	{r7, pc}

08106df8 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8106df8:	b580      	push	{r7, lr}
 8106dfa:	b082      	sub	sp, #8
 8106dfc:	af00      	add	r7, sp, #0
 8106dfe:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	695b      	ldr	r3, [r3, #20]
 8106e04:	2b00      	cmp	r3, #0
 8106e06:	d003      	beq.n	8106e10 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	695b      	ldr	r3, [r3, #20]
 8106e0c:	6878      	ldr	r0, [r7, #4]
 8106e0e:	4798      	blx	r3
}
 8106e10:	bf00      	nop
 8106e12:	3708      	adds	r7, #8
 8106e14:	46bd      	mov	sp, r7
 8106e16:	bd80      	pop	{r7, pc}

08106e18 <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 8106e18:	b084      	sub	sp, #16
 8106e1a:	b5b0      	push	{r4, r5, r7, lr}
 8106e1c:	b092      	sub	sp, #72	; 0x48
 8106e1e:	af10      	add	r7, sp, #64	; 0x40
 8106e20:	f107 0418 	add.w	r4, r7, #24
 8106e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 8106e28:	2300      	movs	r3, #0
 8106e2a:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 8106e2c:	466d      	mov	r5, sp
 8106e2e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8106e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8106e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8106e3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8106e42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8106e46:	f107 0318 	add.w	r3, r7, #24
 8106e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8106e4c:	f7fd fbbc 	bl	81045c8 <MPU9250_Init>
 8106e50:	4603      	mov	r3, r0
 8106e52:	71fb      	strb	r3, [r7, #7]
	return ret;
 8106e54:	79fb      	ldrb	r3, [r7, #7]
}
 8106e56:	4618      	mov	r0, r3
 8106e58:	3708      	adds	r7, #8
 8106e5a:	46bd      	mov	sp, r7
 8106e5c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8106e60:	b004      	add	sp, #16
 8106e62:	4770      	bx	lr

08106e64 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8106e64:	b580      	push	{r7, lr}
 8106e66:	b082      	sub	sp, #8
 8106e68:	af00      	add	r7, sp, #0
 8106e6a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8106e6c:	4b04      	ldr	r3, [pc, #16]	; (8106e80 <HAL_HSEM_FreeCallback+0x1c>)
 8106e6e:	2201      	movs	r2, #1
 8106e70:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106e72:	2001      	movs	r0, #1
 8106e74:	f7fb f8b0 	bl	8101fd8 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8106e78:	bf00      	nop
 8106e7a:	3708      	adds	r7, #8
 8106e7c:	46bd      	mov	sp, r7
 8106e7e:	bd80      	pop	{r7, pc}
 8106e80:	100002cc 	.word	0x100002cc

08106e84 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8106e84:	b580      	push	{r7, lr}
 8106e86:	b082      	sub	sp, #8
 8106e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8106e8a:	4b0f      	ldr	r3, [pc, #60]	; (8106ec8 <MAILBOX_Init+0x44>)
 8106e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106e90:	4a0d      	ldr	r2, [pc, #52]	; (8106ec8 <MAILBOX_Init+0x44>)
 8106e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8106e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8106e9a:	4b0b      	ldr	r3, [pc, #44]	; (8106ec8 <MAILBOX_Init+0x44>)
 8106e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106ea4:	607b      	str	r3, [r7, #4]
 8106ea6:	687b      	ldr	r3, [r7, #4]
    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  /* Enable CM4 receive irq */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 1);
 8106ea8:	2201      	movs	r2, #1
 8106eaa:	2100      	movs	r1, #0
 8106eac:	207e      	movs	r0, #126	; 0x7e
 8106eae:	f7fa fe5e 	bl	8101b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8106eb2:	207e      	movs	r0, #126	; 0x7e
 8106eb4:	f7fa fe75 	bl	8101ba2 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106eb8:	2001      	movs	r0, #1
 8106eba:	f7fb f88d 	bl	8101fd8 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8106ebe:	2300      	movs	r3, #0
}
 8106ec0:	4618      	mov	r0, r3
 8106ec2:	3708      	adds	r7, #8
 8106ec4:	46bd      	mov	sp, r7
 8106ec6:	bd80      	pop	{r7, pc}
 8106ec8:	58024400 	.word	0x58024400

08106ecc <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8106ecc:	b580      	push	{r7, lr}
 8106ece:	b082      	sub	sp, #8
 8106ed0:	af00      	add	r7, sp, #0
 8106ed2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8106ed4:	4b09      	ldr	r3, [pc, #36]	; (8106efc <MAILBOX_Poll+0x30>)
 8106ed6:	681b      	ldr	r3, [r3, #0]
 8106ed8:	2b01      	cmp	r3, #1
 8106eda:	d108      	bne.n	8106eee <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8106edc:	2101      	movs	r1, #1
 8106ede:	6878      	ldr	r0, [r7, #4]
 8106ee0:	f7fe fcf9 	bl	81058d6 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8106ee4:	4b05      	ldr	r3, [pc, #20]	; (8106efc <MAILBOX_Poll+0x30>)
 8106ee6:	2200      	movs	r2, #0
 8106ee8:	601a      	str	r2, [r3, #0]
    return 0;
 8106eea:	2300      	movs	r3, #0
 8106eec:	e001      	b.n	8106ef2 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8106eee:	f06f 030a 	mvn.w	r3, #10
}
 8106ef2:	4618      	mov	r0, r3
 8106ef4:	3708      	adds	r7, #8
 8106ef6:	46bd      	mov	sp, r7
 8106ef8:	bd80      	pop	{r7, pc}
 8106efa:	bf00      	nop
 8106efc:	100002cc 	.word	0x100002cc

08106f00 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8106f00:	b580      	push	{r7, lr}
 8106f02:	b082      	sub	sp, #8
 8106f04:	af00      	add	r7, sp, #0
 8106f06:	6078      	str	r0, [r7, #4]
 8106f08:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8106f0a:	2001      	movs	r0, #1
 8106f0c:	f7fb f836 	bl	8101f7c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8106f10:	2100      	movs	r1, #0
 8106f12:	2001      	movs	r0, #1
 8106f14:	f7fb f84c 	bl	8101fb0 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8106f18:	2300      	movs	r3, #0
}
 8106f1a:	4618      	mov	r0, r3
 8106f1c:	3708      	adds	r7, #8
 8106f1e:	46bd      	mov	sp, r7
 8106f20:	bd80      	pop	{r7, pc}

08106f22 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8106f22:	b480      	push	{r7}
 8106f24:	b083      	sub	sp, #12
 8106f26:	af00      	add	r7, sp, #0
 8106f28:	6078      	str	r0, [r7, #4]
 8106f2a:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8106f30:	683a      	ldr	r2, [r7, #0]
 8106f32:	429a      	cmp	r2, r3
 8106f34:	d209      	bcs.n	8106f4a <metal_device_io_region+0x28>
 8106f36:	683a      	ldr	r2, [r7, #0]
 8106f38:	4613      	mov	r3, r2
 8106f3a:	005b      	lsls	r3, r3, #1
 8106f3c:	4413      	add	r3, r2
 8106f3e:	011b      	lsls	r3, r3, #4
 8106f40:	3308      	adds	r3, #8
 8106f42:	687a      	ldr	r2, [r7, #4]
 8106f44:	4413      	add	r3, r2
 8106f46:	3304      	adds	r3, #4
 8106f48:	e000      	b.n	8106f4c <metal_device_io_region+0x2a>
 8106f4a:	2300      	movs	r3, #0
}
 8106f4c:	4618      	mov	r0, r3
 8106f4e:	370c      	adds	r7, #12
 8106f50:	46bd      	mov	sp, r7
 8106f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f56:	4770      	bx	lr

08106f58 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8106f58:	b590      	push	{r4, r7, lr}
 8106f5a:	b08d      	sub	sp, #52	; 0x34
 8106f5c:	af04      	add	r7, sp, #16
 8106f5e:	6078      	str	r0, [r7, #4]
  int status = 0;
 8106f60:	2300      	movs	r3, #0
 8106f62:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8106f64:	2300      	movs	r3, #0
 8106f66:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8106f68:	4a41      	ldr	r2, [pc, #260]	; (8107070 <OPENAMP_shmem_init+0x118>)
 8106f6a:	f107 0310 	add.w	r3, r7, #16
 8106f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8106f72:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8106f76:	2300      	movs	r3, #0
 8106f78:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8106f7a:	2300      	movs	r3, #0
 8106f7c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8106f7e:	f107 0310 	add.w	r3, r7, #16
 8106f82:	4618      	mov	r0, r3
 8106f84:	f7fe f8be 	bl	8105104 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8106f88:	483a      	ldr	r0, [pc, #232]	; (8107074 <OPENAMP_shmem_init+0x11c>)
 8106f8a:	f7fd ff63 	bl	8104e54 <metal_register_generic_device>
 8106f8e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106f90:	69fb      	ldr	r3, [r7, #28]
 8106f92:	2b00      	cmp	r3, #0
 8106f94:	d001      	beq.n	8106f9a <OPENAMP_shmem_init+0x42>
    return status;
 8106f96:	69fb      	ldr	r3, [r7, #28]
 8106f98:	e066      	b.n	8107068 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8106f9a:	f107 0318 	add.w	r3, r7, #24
 8106f9e:	461a      	mov	r2, r3
 8106fa0:	4935      	ldr	r1, [pc, #212]	; (8107078 <OPENAMP_shmem_init+0x120>)
 8106fa2:	4836      	ldr	r0, [pc, #216]	; (810707c <OPENAMP_shmem_init+0x124>)
 8106fa4:	f7fd ff18 	bl	8104dd8 <metal_device_open>
 8106fa8:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106faa:	69fb      	ldr	r3, [r7, #28]
 8106fac:	2b00      	cmp	r3, #0
 8106fae:	d001      	beq.n	8106fb4 <OPENAMP_shmem_init+0x5c>
    return status;
 8106fb0:	69fb      	ldr	r3, [r7, #28]
 8106fb2:	e059      	b.n	8107068 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8106fb4:	4a32      	ldr	r2, [pc, #200]	; (8107080 <OPENAMP_shmem_init+0x128>)
 8106fb6:	4b33      	ldr	r3, [pc, #204]	; (8107084 <OPENAMP_shmem_init+0x12c>)
 8106fb8:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106fba:	69bb      	ldr	r3, [r7, #24]
 8106fbc:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8106fc0:	4a31      	ldr	r2, [pc, #196]	; (8107088 <OPENAMP_shmem_init+0x130>)
 8106fc2:	4b2f      	ldr	r3, [pc, #188]	; (8107080 <OPENAMP_shmem_init+0x128>)
 8106fc4:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106fc6:	461a      	mov	r2, r3
 8106fc8:	2300      	movs	r3, #0
 8106fca:	9302      	str	r3, [sp, #8]
 8106fcc:	2300      	movs	r3, #0
 8106fce:	9301      	str	r3, [sp, #4]
 8106fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8106fd4:	9300      	str	r3, [sp, #0]
 8106fd6:	4613      	mov	r3, r2
 8106fd8:	4a2a      	ldr	r2, [pc, #168]	; (8107084 <OPENAMP_shmem_init+0x12c>)
 8106fda:	4929      	ldr	r1, [pc, #164]	; (8107080 <OPENAMP_shmem_init+0x128>)
 8106fdc:	f7fe f8df 	bl	810519e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8106fe0:	69bb      	ldr	r3, [r7, #24]
 8106fe2:	2100      	movs	r1, #0
 8106fe4:	4618      	mov	r0, r3
 8106fe6:	f7ff ff9c 	bl	8106f22 <metal_device_io_region>
 8106fea:	4603      	mov	r3, r0
 8106fec:	4a27      	ldr	r2, [pc, #156]	; (810708c <OPENAMP_shmem_init+0x134>)
 8106fee:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8106ff0:	4b26      	ldr	r3, [pc, #152]	; (810708c <OPENAMP_shmem_init+0x134>)
 8106ff2:	681b      	ldr	r3, [r3, #0]
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d102      	bne.n	8106ffe <OPENAMP_shmem_init+0xa6>
    return -1;
 8106ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8106ffc:	e034      	b.n	8107068 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8106ffe:	f107 0208 	add.w	r2, r7, #8
 8107002:	f107 030c 	add.w	r3, r7, #12
 8107006:	4619      	mov	r1, r3
 8107008:	6878      	ldr	r0, [r7, #4]
 810700a:	f000 f905 	bl	8107218 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	4a1f      	ldr	r2, [pc, #124]	; (8107090 <OPENAMP_shmem_init+0x138>)
 8107012:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8107014:	4b1e      	ldr	r3, [pc, #120]	; (8107090 <OPENAMP_shmem_init+0x138>)
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	2b00      	cmp	r3, #0
 810701a:	d102      	bne.n	8107022 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 810701c:	f04f 33ff 	mov.w	r3, #4294967295
 8107020:	e022      	b.n	8107068 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8107022:	69bb      	ldr	r3, [r7, #24]
 8107024:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8107028:	4b19      	ldr	r3, [pc, #100]	; (8107090 <OPENAMP_shmem_init+0x138>)
 810702a:	6819      	ldr	r1, [r3, #0]
 810702c:	4b18      	ldr	r3, [pc, #96]	; (8107090 <OPENAMP_shmem_init+0x138>)
 810702e:	681a      	ldr	r2, [r3, #0]
 8107030:	68bb      	ldr	r3, [r7, #8]
 8107032:	461c      	mov	r4, r3
 8107034:	2300      	movs	r3, #0
 8107036:	9302      	str	r3, [sp, #8]
 8107038:	2300      	movs	r3, #0
 810703a:	9301      	str	r3, [sp, #4]
 810703c:	f04f 33ff 	mov.w	r3, #4294967295
 8107040:	9300      	str	r3, [sp, #0]
 8107042:	4623      	mov	r3, r4
 8107044:	f7fe f8ab 	bl	810519e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8107048:	69bb      	ldr	r3, [r7, #24]
 810704a:	2101      	movs	r1, #1
 810704c:	4618      	mov	r0, r3
 810704e:	f7ff ff68 	bl	8106f22 <metal_device_io_region>
 8107052:	4603      	mov	r3, r0
 8107054:	4a0f      	ldr	r2, [pc, #60]	; (8107094 <OPENAMP_shmem_init+0x13c>)
 8107056:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8107058:	4b0e      	ldr	r3, [pc, #56]	; (8107094 <OPENAMP_shmem_init+0x13c>)
 810705a:	681b      	ldr	r3, [r3, #0]
 810705c:	2b00      	cmp	r3, #0
 810705e:	d102      	bne.n	8107066 <OPENAMP_shmem_init+0x10e>
    return -1;
 8107060:	f04f 33ff 	mov.w	r3, #4294967295
 8107064:	e000      	b.n	8107068 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8107066:	2300      	movs	r3, #0
}
 8107068:	4618      	mov	r0, r3
 810706a:	3724      	adds	r7, #36	; 0x24
 810706c:	46bd      	mov	sp, r7
 810706e:	bd90      	pop	{r4, r7, pc}
 8107070:	0810bd30 	.word	0x0810bd30
 8107074:	1000003c 	.word	0x1000003c
 8107078:	0810bd1c 	.word	0x0810bd1c
 810707c:	0810bd28 	.word	0x0810bd28
 8107080:	38000400 	.word	0x38000400
 8107084:	10000360 	.word	0x10000360
 8107088:	38010000 	.word	0x38010000
 810708c:	100002d0 	.word	0x100002d0
 8107090:	100002d8 	.word	0x100002d8
 8107094:	100002d4 	.word	0x100002d4

08107098 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8107098:	b590      	push	{r4, r7, lr}
 810709a:	b08b      	sub	sp, #44	; 0x2c
 810709c:	af04      	add	r7, sp, #16
 810709e:	6078      	str	r0, [r7, #4]
 81070a0:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 81070a2:	2300      	movs	r3, #0
 81070a4:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 81070a6:	2300      	movs	r3, #0
 81070a8:	613b      	str	r3, [r7, #16]
  int status = 0;
 81070aa:	2300      	movs	r3, #0
 81070ac:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 81070ae:	f7ff fee9 	bl	8106e84 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 81070b2:	6878      	ldr	r0, [r7, #4]
 81070b4:	f7ff ff50 	bl	8106f58 <OPENAMP_shmem_init>
 81070b8:	60f8      	str	r0, [r7, #12]
  if(status)
 81070ba:	68fb      	ldr	r3, [r7, #12]
 81070bc:	2b00      	cmp	r3, #0
 81070be:	d001      	beq.n	81070c4 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 81070c0:	68fb      	ldr	r3, [r7, #12]
 81070c2:	e06a      	b.n	810719a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 81070c4:	6878      	ldr	r0, [r7, #4]
 81070c6:	4b37      	ldr	r3, [pc, #220]	; (81071a4 <MX_OPENAMP_Init+0x10c>)
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	f103 0218 	add.w	r2, r3, #24
 81070ce:	4b36      	ldr	r3, [pc, #216]	; (81071a8 <MX_OPENAMP_Init+0x110>)
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	2100      	movs	r1, #0
 81070d4:	9102      	str	r1, [sp, #8]
 81070d6:	4935      	ldr	r1, [pc, #212]	; (81071ac <MX_OPENAMP_Init+0x114>)
 81070d8:	9101      	str	r1, [sp, #4]
 81070da:	2100      	movs	r1, #0
 81070dc:	9100      	str	r1, [sp, #0]
 81070de:	21ff      	movs	r1, #255	; 0xff
 81070e0:	f7fe fb1a 	bl	8105718 <rproc_virtio_create_vdev>
 81070e4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 81070e6:	693b      	ldr	r3, [r7, #16]
 81070e8:	2b00      	cmp	r3, #0
 81070ea:	d102      	bne.n	81070f2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 81070ec:	f04f 33ff 	mov.w	r3, #4294967295
 81070f0:	e053      	b.n	810719a <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 81070f2:	6938      	ldr	r0, [r7, #16]
 81070f4:	f7fe fc2b 	bl	810594e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 81070f8:	4b2a      	ldr	r3, [pc, #168]	; (81071a4 <MX_OPENAMP_Init+0x10c>)
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	3334      	adds	r3, #52	; 0x34
 81070fe:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107100:	697b      	ldr	r3, [r7, #20]
 8107102:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8107104:	697b      	ldr	r3, [r7, #20]
 8107106:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107108:	461c      	mov	r4, r3
 810710a:	4b29      	ldr	r3, [pc, #164]	; (81071b0 <MX_OPENAMP_Init+0x118>)
 810710c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810710e:	697a      	ldr	r2, [r7, #20]
 8107110:	6892      	ldr	r2, [r2, #8]
 8107112:	6979      	ldr	r1, [r7, #20]
 8107114:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8107116:	9102      	str	r1, [sp, #8]
 8107118:	9201      	str	r2, [sp, #4]
 810711a:	9300      	str	r3, [sp, #0]
 810711c:	4623      	mov	r3, r4
 810711e:	4602      	mov	r2, r0
 8107120:	2100      	movs	r1, #0
 8107122:	6938      	ldr	r0, [r7, #16]
 8107124:	f7fe fba6 	bl	8105874 <rproc_virtio_init_vring>
 8107128:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810712a:	68fb      	ldr	r3, [r7, #12]
 810712c:	2b00      	cmp	r3, #0
 810712e:	d001      	beq.n	8107134 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8107130:	68fb      	ldr	r3, [r7, #12]
 8107132:	e032      	b.n	810719a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8107134:	4b1b      	ldr	r3, [pc, #108]	; (81071a4 <MX_OPENAMP_Init+0x10c>)
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	3348      	adds	r3, #72	; 0x48
 810713a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810713c:	697b      	ldr	r3, [r7, #20]
 810713e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8107140:	697b      	ldr	r3, [r7, #20]
 8107142:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8107144:	461c      	mov	r4, r3
 8107146:	4b1a      	ldr	r3, [pc, #104]	; (81071b0 <MX_OPENAMP_Init+0x118>)
 8107148:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810714a:	697a      	ldr	r2, [r7, #20]
 810714c:	6892      	ldr	r2, [r2, #8]
 810714e:	6979      	ldr	r1, [r7, #20]
 8107150:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8107152:	9102      	str	r1, [sp, #8]
 8107154:	9201      	str	r2, [sp, #4]
 8107156:	9300      	str	r3, [sp, #0]
 8107158:	4623      	mov	r3, r4
 810715a:	4602      	mov	r2, r0
 810715c:	2101      	movs	r1, #1
 810715e:	6938      	ldr	r0, [r7, #16]
 8107160:	f7fe fb88 	bl	8105874 <rproc_virtio_init_vring>
 8107164:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	2b00      	cmp	r3, #0
 810716a:	d001      	beq.n	8107170 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	e014      	b.n	810719a <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8107170:	4b10      	ldr	r3, [pc, #64]	; (81071b4 <MX_OPENAMP_Init+0x11c>)
 8107172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8107176:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8107178:	4a0f      	ldr	r2, [pc, #60]	; (81071b8 <MX_OPENAMP_Init+0x120>)
 810717a:	4b0e      	ldr	r3, [pc, #56]	; (81071b4 <MX_OPENAMP_Init+0x11c>)
 810717c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810717e:	461a      	mov	r2, r3
 8107180:	480e      	ldr	r0, [pc, #56]	; (81071bc <MX_OPENAMP_Init+0x124>)
 8107182:	f7ff f833 	bl	81061ec <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8107186:	4b0a      	ldr	r3, [pc, #40]	; (81071b0 <MX_OPENAMP_Init+0x118>)
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	4a0c      	ldr	r2, [pc, #48]	; (81071bc <MX_OPENAMP_Init+0x124>)
 810718c:	9200      	str	r2, [sp, #0]
 810718e:	683a      	ldr	r2, [r7, #0]
 8107190:	6939      	ldr	r1, [r7, #16]
 8107192:	480b      	ldr	r0, [pc, #44]	; (81071c0 <MX_OPENAMP_Init+0x128>)
 8107194:	f7ff fa9e 	bl	81066d4 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8107198:	2300      	movs	r3, #0
}
 810719a:	4618      	mov	r0, r3
 810719c:	371c      	adds	r7, #28
 810719e:	46bd      	mov	sp, r7
 81071a0:	bd90      	pop	{r4, r7, pc}
 81071a2:	bf00      	nop
 81071a4:	100002d8 	.word	0x100002d8
 81071a8:	100002d4 	.word	0x100002d4
 81071ac:	08106f01 	.word	0x08106f01
 81071b0:	100002d0 	.word	0x100002d0
 81071b4:	38000400 	.word	0x38000400
 81071b8:	38010000 	.word	0x38010000
 81071bc:	100002dc 	.word	0x100002dc
 81071c0:	100002e8 	.word	0x100002e8

081071c4 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 81071c4:	b580      	push	{r7, lr}
 81071c6:	b08a      	sub	sp, #40	; 0x28
 81071c8:	af04      	add	r7, sp, #16
 81071ca:	60f8      	str	r0, [r7, #12]
 81071cc:	60b9      	str	r1, [r7, #8]
 81071ce:	607a      	str	r2, [r7, #4]
 81071d0:	603b      	str	r3, [r7, #0]
  int ret = 0;
 81071d2:	2300      	movs	r3, #0
 81071d4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 81071d6:	6a3b      	ldr	r3, [r7, #32]
 81071d8:	9302      	str	r3, [sp, #8]
 81071da:	683b      	ldr	r3, [r7, #0]
 81071dc:	9301      	str	r3, [sp, #4]
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	9300      	str	r3, [sp, #0]
 81071e2:	f04f 33ff 	mov.w	r3, #4294967295
 81071e6:	68ba      	ldr	r2, [r7, #8]
 81071e8:	4904      	ldr	r1, [pc, #16]	; (81071fc <OPENAMP_create_endpoint+0x38>)
 81071ea:	68f8      	ldr	r0, [r7, #12]
 81071ec:	f7fe fe3c 	bl	8105e68 <rpmsg_create_ept>
 81071f0:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 81071f2:	697b      	ldr	r3, [r7, #20]
}
 81071f4:	4618      	mov	r0, r3
 81071f6:	3718      	adds	r7, #24
 81071f8:	46bd      	mov	sp, r7
 81071fa:	bd80      	pop	{r7, pc}
 81071fc:	100002e8 	.word	0x100002e8

08107200 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8107200:	b580      	push	{r7, lr}
 8107202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8107204:	4b03      	ldr	r3, [pc, #12]	; (8107214 <OPENAMP_check_for_message+0x14>)
 8107206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107208:	4618      	mov	r0, r3
 810720a:	f7ff fe5f 	bl	8106ecc <MAILBOX_Poll>
}
 810720e:	bf00      	nop
 8107210:	bd80      	pop	{r7, pc}
 8107212:	bf00      	nop
 8107214:	100002e8 	.word	0x100002e8

08107218 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8107218:	b480      	push	{r7}
 810721a:	b085      	sub	sp, #20
 810721c:	af00      	add	r7, sp, #0
 810721e:	60f8      	str	r0, [r7, #12]
 8107220:	60b9      	str	r1, [r7, #8]
 8107222:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8107224:	bf00      	nop
 8107226:	4b08      	ldr	r3, [pc, #32]	; (8107248 <resource_table_init+0x30>)
 8107228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810722a:	4a08      	ldr	r2, [pc, #32]	; (810724c <resource_table_init+0x34>)
 810722c:	4293      	cmp	r3, r2
 810722e:	d1fa      	bne.n	8107226 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	228c      	movs	r2, #140	; 0x8c
 8107234:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8107236:	68bb      	ldr	r3, [r7, #8]
 8107238:	4a03      	ldr	r2, [pc, #12]	; (8107248 <resource_table_init+0x30>)
 810723a:	601a      	str	r2, [r3, #0]
}
 810723c:	bf00      	nop
 810723e:	3714      	adds	r7, #20
 8107240:	46bd      	mov	sp, r7
 8107242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107246:	4770      	bx	lr
 8107248:	38000000 	.word	0x38000000
 810724c:	38000400 	.word	0x38000400

08107250 <__assert_func>:
 8107250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8107252:	4614      	mov	r4, r2
 8107254:	461a      	mov	r2, r3
 8107256:	4b09      	ldr	r3, [pc, #36]	; (810727c <__assert_func+0x2c>)
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	4605      	mov	r5, r0
 810725c:	68d8      	ldr	r0, [r3, #12]
 810725e:	b14c      	cbz	r4, 8107274 <__assert_func+0x24>
 8107260:	4b07      	ldr	r3, [pc, #28]	; (8107280 <__assert_func+0x30>)
 8107262:	9100      	str	r1, [sp, #0]
 8107264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8107268:	4906      	ldr	r1, [pc, #24]	; (8107284 <__assert_func+0x34>)
 810726a:	462b      	mov	r3, r5
 810726c:	f000 f814 	bl	8107298 <fiprintf>
 8107270:	f002 f8bc 	bl	81093ec <abort>
 8107274:	4b04      	ldr	r3, [pc, #16]	; (8107288 <__assert_func+0x38>)
 8107276:	461c      	mov	r4, r3
 8107278:	e7f3      	b.n	8107262 <__assert_func+0x12>
 810727a:	bf00      	nop
 810727c:	100000b8 	.word	0x100000b8
 8107280:	0810bd9e 	.word	0x0810bd9e
 8107284:	0810bdab 	.word	0x0810bdab
 8107288:	0810bdd9 	.word	0x0810bdd9

0810728c <__errno>:
 810728c:	4b01      	ldr	r3, [pc, #4]	; (8107294 <__errno+0x8>)
 810728e:	6818      	ldr	r0, [r3, #0]
 8107290:	4770      	bx	lr
 8107292:	bf00      	nop
 8107294:	100000b8 	.word	0x100000b8

08107298 <fiprintf>:
 8107298:	b40e      	push	{r1, r2, r3}
 810729a:	b503      	push	{r0, r1, lr}
 810729c:	4601      	mov	r1, r0
 810729e:	ab03      	add	r3, sp, #12
 81072a0:	4805      	ldr	r0, [pc, #20]	; (81072b8 <fiprintf+0x20>)
 81072a2:	f853 2b04 	ldr.w	r2, [r3], #4
 81072a6:	6800      	ldr	r0, [r0, #0]
 81072a8:	9301      	str	r3, [sp, #4]
 81072aa:	f000 f925 	bl	81074f8 <_vfiprintf_r>
 81072ae:	b002      	add	sp, #8
 81072b0:	f85d eb04 	ldr.w	lr, [sp], #4
 81072b4:	b003      	add	sp, #12
 81072b6:	4770      	bx	lr
 81072b8:	100000b8 	.word	0x100000b8

081072bc <__libc_init_array>:
 81072bc:	b570      	push	{r4, r5, r6, lr}
 81072be:	4d0d      	ldr	r5, [pc, #52]	; (81072f4 <__libc_init_array+0x38>)
 81072c0:	4c0d      	ldr	r4, [pc, #52]	; (81072f8 <__libc_init_array+0x3c>)
 81072c2:	1b64      	subs	r4, r4, r5
 81072c4:	10a4      	asrs	r4, r4, #2
 81072c6:	2600      	movs	r6, #0
 81072c8:	42a6      	cmp	r6, r4
 81072ca:	d109      	bne.n	81072e0 <__libc_init_array+0x24>
 81072cc:	4d0b      	ldr	r5, [pc, #44]	; (81072fc <__libc_init_array+0x40>)
 81072ce:	4c0c      	ldr	r4, [pc, #48]	; (8107300 <__libc_init_array+0x44>)
 81072d0:	f004 fc2e 	bl	810bb30 <_init>
 81072d4:	1b64      	subs	r4, r4, r5
 81072d6:	10a4      	asrs	r4, r4, #2
 81072d8:	2600      	movs	r6, #0
 81072da:	42a6      	cmp	r6, r4
 81072dc:	d105      	bne.n	81072ea <__libc_init_array+0x2e>
 81072de:	bd70      	pop	{r4, r5, r6, pc}
 81072e0:	f855 3b04 	ldr.w	r3, [r5], #4
 81072e4:	4798      	blx	r3
 81072e6:	3601      	adds	r6, #1
 81072e8:	e7ee      	b.n	81072c8 <__libc_init_array+0xc>
 81072ea:	f855 3b04 	ldr.w	r3, [r5], #4
 81072ee:	4798      	blx	r3
 81072f0:	3601      	adds	r6, #1
 81072f2:	e7f2      	b.n	81072da <__libc_init_array+0x1e>
 81072f4:	0810c254 	.word	0x0810c254
 81072f8:	0810c254 	.word	0x0810c254
 81072fc:	0810c254 	.word	0x0810c254
 8107300:	0810c258 	.word	0x0810c258

08107304 <malloc>:
 8107304:	4b02      	ldr	r3, [pc, #8]	; (8107310 <malloc+0xc>)
 8107306:	4601      	mov	r1, r0
 8107308:	6818      	ldr	r0, [r3, #0]
 810730a:	f000 b871 	b.w	81073f0 <_malloc_r>
 810730e:	bf00      	nop
 8107310:	100000b8 	.word	0x100000b8

08107314 <free>:
 8107314:	4b02      	ldr	r3, [pc, #8]	; (8107320 <free+0xc>)
 8107316:	4601      	mov	r1, r0
 8107318:	6818      	ldr	r0, [r3, #0]
 810731a:	f000 b819 	b.w	8107350 <_free_r>
 810731e:	bf00      	nop
 8107320:	100000b8 	.word	0x100000b8

08107324 <memcpy>:
 8107324:	440a      	add	r2, r1
 8107326:	4291      	cmp	r1, r2
 8107328:	f100 33ff 	add.w	r3, r0, #4294967295
 810732c:	d100      	bne.n	8107330 <memcpy+0xc>
 810732e:	4770      	bx	lr
 8107330:	b510      	push	{r4, lr}
 8107332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107336:	f803 4f01 	strb.w	r4, [r3, #1]!
 810733a:	4291      	cmp	r1, r2
 810733c:	d1f9      	bne.n	8107332 <memcpy+0xe>
 810733e:	bd10      	pop	{r4, pc}

08107340 <memset>:
 8107340:	4402      	add	r2, r0
 8107342:	4603      	mov	r3, r0
 8107344:	4293      	cmp	r3, r2
 8107346:	d100      	bne.n	810734a <memset+0xa>
 8107348:	4770      	bx	lr
 810734a:	f803 1b01 	strb.w	r1, [r3], #1
 810734e:	e7f9      	b.n	8107344 <memset+0x4>

08107350 <_free_r>:
 8107350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8107352:	2900      	cmp	r1, #0
 8107354:	d048      	beq.n	81073e8 <_free_r+0x98>
 8107356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810735a:	9001      	str	r0, [sp, #4]
 810735c:	2b00      	cmp	r3, #0
 810735e:	f1a1 0404 	sub.w	r4, r1, #4
 8107362:	bfb8      	it	lt
 8107364:	18e4      	addlt	r4, r4, r3
 8107366:	f003 fc7d 	bl	810ac64 <__malloc_lock>
 810736a:	4a20      	ldr	r2, [pc, #128]	; (81073ec <_free_r+0x9c>)
 810736c:	9801      	ldr	r0, [sp, #4]
 810736e:	6813      	ldr	r3, [r2, #0]
 8107370:	4615      	mov	r5, r2
 8107372:	b933      	cbnz	r3, 8107382 <_free_r+0x32>
 8107374:	6063      	str	r3, [r4, #4]
 8107376:	6014      	str	r4, [r2, #0]
 8107378:	b003      	add	sp, #12
 810737a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810737e:	f003 bc77 	b.w	810ac70 <__malloc_unlock>
 8107382:	42a3      	cmp	r3, r4
 8107384:	d90b      	bls.n	810739e <_free_r+0x4e>
 8107386:	6821      	ldr	r1, [r4, #0]
 8107388:	1862      	adds	r2, r4, r1
 810738a:	4293      	cmp	r3, r2
 810738c:	bf04      	itt	eq
 810738e:	681a      	ldreq	r2, [r3, #0]
 8107390:	685b      	ldreq	r3, [r3, #4]
 8107392:	6063      	str	r3, [r4, #4]
 8107394:	bf04      	itt	eq
 8107396:	1852      	addeq	r2, r2, r1
 8107398:	6022      	streq	r2, [r4, #0]
 810739a:	602c      	str	r4, [r5, #0]
 810739c:	e7ec      	b.n	8107378 <_free_r+0x28>
 810739e:	461a      	mov	r2, r3
 81073a0:	685b      	ldr	r3, [r3, #4]
 81073a2:	b10b      	cbz	r3, 81073a8 <_free_r+0x58>
 81073a4:	42a3      	cmp	r3, r4
 81073a6:	d9fa      	bls.n	810739e <_free_r+0x4e>
 81073a8:	6811      	ldr	r1, [r2, #0]
 81073aa:	1855      	adds	r5, r2, r1
 81073ac:	42a5      	cmp	r5, r4
 81073ae:	d10b      	bne.n	81073c8 <_free_r+0x78>
 81073b0:	6824      	ldr	r4, [r4, #0]
 81073b2:	4421      	add	r1, r4
 81073b4:	1854      	adds	r4, r2, r1
 81073b6:	42a3      	cmp	r3, r4
 81073b8:	6011      	str	r1, [r2, #0]
 81073ba:	d1dd      	bne.n	8107378 <_free_r+0x28>
 81073bc:	681c      	ldr	r4, [r3, #0]
 81073be:	685b      	ldr	r3, [r3, #4]
 81073c0:	6053      	str	r3, [r2, #4]
 81073c2:	4421      	add	r1, r4
 81073c4:	6011      	str	r1, [r2, #0]
 81073c6:	e7d7      	b.n	8107378 <_free_r+0x28>
 81073c8:	d902      	bls.n	81073d0 <_free_r+0x80>
 81073ca:	230c      	movs	r3, #12
 81073cc:	6003      	str	r3, [r0, #0]
 81073ce:	e7d3      	b.n	8107378 <_free_r+0x28>
 81073d0:	6825      	ldr	r5, [r4, #0]
 81073d2:	1961      	adds	r1, r4, r5
 81073d4:	428b      	cmp	r3, r1
 81073d6:	bf04      	itt	eq
 81073d8:	6819      	ldreq	r1, [r3, #0]
 81073da:	685b      	ldreq	r3, [r3, #4]
 81073dc:	6063      	str	r3, [r4, #4]
 81073de:	bf04      	itt	eq
 81073e0:	1949      	addeq	r1, r1, r5
 81073e2:	6021      	streq	r1, [r4, #0]
 81073e4:	6054      	str	r4, [r2, #4]
 81073e6:	e7c7      	b.n	8107378 <_free_r+0x28>
 81073e8:	b003      	add	sp, #12
 81073ea:	bd30      	pop	{r4, r5, pc}
 81073ec:	10000364 	.word	0x10000364

081073f0 <_malloc_r>:
 81073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81073f2:	1ccd      	adds	r5, r1, #3
 81073f4:	f025 0503 	bic.w	r5, r5, #3
 81073f8:	3508      	adds	r5, #8
 81073fa:	2d0c      	cmp	r5, #12
 81073fc:	bf38      	it	cc
 81073fe:	250c      	movcc	r5, #12
 8107400:	2d00      	cmp	r5, #0
 8107402:	4606      	mov	r6, r0
 8107404:	db01      	blt.n	810740a <_malloc_r+0x1a>
 8107406:	42a9      	cmp	r1, r5
 8107408:	d903      	bls.n	8107412 <_malloc_r+0x22>
 810740a:	230c      	movs	r3, #12
 810740c:	6033      	str	r3, [r6, #0]
 810740e:	2000      	movs	r0, #0
 8107410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107412:	f003 fc27 	bl	810ac64 <__malloc_lock>
 8107416:	4921      	ldr	r1, [pc, #132]	; (810749c <_malloc_r+0xac>)
 8107418:	680a      	ldr	r2, [r1, #0]
 810741a:	4614      	mov	r4, r2
 810741c:	b99c      	cbnz	r4, 8107446 <_malloc_r+0x56>
 810741e:	4f20      	ldr	r7, [pc, #128]	; (81074a0 <_malloc_r+0xb0>)
 8107420:	683b      	ldr	r3, [r7, #0]
 8107422:	b923      	cbnz	r3, 810742e <_malloc_r+0x3e>
 8107424:	4621      	mov	r1, r4
 8107426:	4630      	mov	r0, r6
 8107428:	f001 f810 	bl	810844c <_sbrk_r>
 810742c:	6038      	str	r0, [r7, #0]
 810742e:	4629      	mov	r1, r5
 8107430:	4630      	mov	r0, r6
 8107432:	f001 f80b 	bl	810844c <_sbrk_r>
 8107436:	1c43      	adds	r3, r0, #1
 8107438:	d123      	bne.n	8107482 <_malloc_r+0x92>
 810743a:	230c      	movs	r3, #12
 810743c:	6033      	str	r3, [r6, #0]
 810743e:	4630      	mov	r0, r6
 8107440:	f003 fc16 	bl	810ac70 <__malloc_unlock>
 8107444:	e7e3      	b.n	810740e <_malloc_r+0x1e>
 8107446:	6823      	ldr	r3, [r4, #0]
 8107448:	1b5b      	subs	r3, r3, r5
 810744a:	d417      	bmi.n	810747c <_malloc_r+0x8c>
 810744c:	2b0b      	cmp	r3, #11
 810744e:	d903      	bls.n	8107458 <_malloc_r+0x68>
 8107450:	6023      	str	r3, [r4, #0]
 8107452:	441c      	add	r4, r3
 8107454:	6025      	str	r5, [r4, #0]
 8107456:	e004      	b.n	8107462 <_malloc_r+0x72>
 8107458:	6863      	ldr	r3, [r4, #4]
 810745a:	42a2      	cmp	r2, r4
 810745c:	bf0c      	ite	eq
 810745e:	600b      	streq	r3, [r1, #0]
 8107460:	6053      	strne	r3, [r2, #4]
 8107462:	4630      	mov	r0, r6
 8107464:	f003 fc04 	bl	810ac70 <__malloc_unlock>
 8107468:	f104 000b 	add.w	r0, r4, #11
 810746c:	1d23      	adds	r3, r4, #4
 810746e:	f020 0007 	bic.w	r0, r0, #7
 8107472:	1ac2      	subs	r2, r0, r3
 8107474:	d0cc      	beq.n	8107410 <_malloc_r+0x20>
 8107476:	1a1b      	subs	r3, r3, r0
 8107478:	50a3      	str	r3, [r4, r2]
 810747a:	e7c9      	b.n	8107410 <_malloc_r+0x20>
 810747c:	4622      	mov	r2, r4
 810747e:	6864      	ldr	r4, [r4, #4]
 8107480:	e7cc      	b.n	810741c <_malloc_r+0x2c>
 8107482:	1cc4      	adds	r4, r0, #3
 8107484:	f024 0403 	bic.w	r4, r4, #3
 8107488:	42a0      	cmp	r0, r4
 810748a:	d0e3      	beq.n	8107454 <_malloc_r+0x64>
 810748c:	1a21      	subs	r1, r4, r0
 810748e:	4630      	mov	r0, r6
 8107490:	f000 ffdc 	bl	810844c <_sbrk_r>
 8107494:	3001      	adds	r0, #1
 8107496:	d1dd      	bne.n	8107454 <_malloc_r+0x64>
 8107498:	e7cf      	b.n	810743a <_malloc_r+0x4a>
 810749a:	bf00      	nop
 810749c:	10000364 	.word	0x10000364
 81074a0:	10000368 	.word	0x10000368

081074a4 <__sfputc_r>:
 81074a4:	6893      	ldr	r3, [r2, #8]
 81074a6:	3b01      	subs	r3, #1
 81074a8:	2b00      	cmp	r3, #0
 81074aa:	b410      	push	{r4}
 81074ac:	6093      	str	r3, [r2, #8]
 81074ae:	da08      	bge.n	81074c2 <__sfputc_r+0x1e>
 81074b0:	6994      	ldr	r4, [r2, #24]
 81074b2:	42a3      	cmp	r3, r4
 81074b4:	db01      	blt.n	81074ba <__sfputc_r+0x16>
 81074b6:	290a      	cmp	r1, #10
 81074b8:	d103      	bne.n	81074c2 <__sfputc_r+0x1e>
 81074ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 81074be:	f001 bed5 	b.w	810926c <__swbuf_r>
 81074c2:	6813      	ldr	r3, [r2, #0]
 81074c4:	1c58      	adds	r0, r3, #1
 81074c6:	6010      	str	r0, [r2, #0]
 81074c8:	7019      	strb	r1, [r3, #0]
 81074ca:	4608      	mov	r0, r1
 81074cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81074d0:	4770      	bx	lr

081074d2 <__sfputs_r>:
 81074d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81074d4:	4606      	mov	r6, r0
 81074d6:	460f      	mov	r7, r1
 81074d8:	4614      	mov	r4, r2
 81074da:	18d5      	adds	r5, r2, r3
 81074dc:	42ac      	cmp	r4, r5
 81074de:	d101      	bne.n	81074e4 <__sfputs_r+0x12>
 81074e0:	2000      	movs	r0, #0
 81074e2:	e007      	b.n	81074f4 <__sfputs_r+0x22>
 81074e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81074e8:	463a      	mov	r2, r7
 81074ea:	4630      	mov	r0, r6
 81074ec:	f7ff ffda 	bl	81074a4 <__sfputc_r>
 81074f0:	1c43      	adds	r3, r0, #1
 81074f2:	d1f3      	bne.n	81074dc <__sfputs_r+0xa>
 81074f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081074f8 <_vfiprintf_r>:
 81074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81074fc:	460d      	mov	r5, r1
 81074fe:	b09d      	sub	sp, #116	; 0x74
 8107500:	4614      	mov	r4, r2
 8107502:	4698      	mov	r8, r3
 8107504:	4606      	mov	r6, r0
 8107506:	b118      	cbz	r0, 8107510 <_vfiprintf_r+0x18>
 8107508:	6983      	ldr	r3, [r0, #24]
 810750a:	b90b      	cbnz	r3, 8107510 <_vfiprintf_r+0x18>
 810750c:	f002 ff06 	bl	810a31c <__sinit>
 8107510:	4b89      	ldr	r3, [pc, #548]	; (8107738 <_vfiprintf_r+0x240>)
 8107512:	429d      	cmp	r5, r3
 8107514:	d11b      	bne.n	810754e <_vfiprintf_r+0x56>
 8107516:	6875      	ldr	r5, [r6, #4]
 8107518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810751a:	07d9      	lsls	r1, r3, #31
 810751c:	d405      	bmi.n	810752a <_vfiprintf_r+0x32>
 810751e:	89ab      	ldrh	r3, [r5, #12]
 8107520:	059a      	lsls	r2, r3, #22
 8107522:	d402      	bmi.n	810752a <_vfiprintf_r+0x32>
 8107524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107526:	f003 fb0a 	bl	810ab3e <__retarget_lock_acquire_recursive>
 810752a:	89ab      	ldrh	r3, [r5, #12]
 810752c:	071b      	lsls	r3, r3, #28
 810752e:	d501      	bpl.n	8107534 <_vfiprintf_r+0x3c>
 8107530:	692b      	ldr	r3, [r5, #16]
 8107532:	b9eb      	cbnz	r3, 8107570 <_vfiprintf_r+0x78>
 8107534:	4629      	mov	r1, r5
 8107536:	4630      	mov	r0, r6
 8107538:	f001 feea 	bl	8109310 <__swsetup_r>
 810753c:	b1c0      	cbz	r0, 8107570 <_vfiprintf_r+0x78>
 810753e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107540:	07dc      	lsls	r4, r3, #31
 8107542:	d50e      	bpl.n	8107562 <_vfiprintf_r+0x6a>
 8107544:	f04f 30ff 	mov.w	r0, #4294967295
 8107548:	b01d      	add	sp, #116	; 0x74
 810754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810754e:	4b7b      	ldr	r3, [pc, #492]	; (810773c <_vfiprintf_r+0x244>)
 8107550:	429d      	cmp	r5, r3
 8107552:	d101      	bne.n	8107558 <_vfiprintf_r+0x60>
 8107554:	68b5      	ldr	r5, [r6, #8]
 8107556:	e7df      	b.n	8107518 <_vfiprintf_r+0x20>
 8107558:	4b79      	ldr	r3, [pc, #484]	; (8107740 <_vfiprintf_r+0x248>)
 810755a:	429d      	cmp	r5, r3
 810755c:	bf08      	it	eq
 810755e:	68f5      	ldreq	r5, [r6, #12]
 8107560:	e7da      	b.n	8107518 <_vfiprintf_r+0x20>
 8107562:	89ab      	ldrh	r3, [r5, #12]
 8107564:	0598      	lsls	r0, r3, #22
 8107566:	d4ed      	bmi.n	8107544 <_vfiprintf_r+0x4c>
 8107568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810756a:	f003 fae9 	bl	810ab40 <__retarget_lock_release_recursive>
 810756e:	e7e9      	b.n	8107544 <_vfiprintf_r+0x4c>
 8107570:	2300      	movs	r3, #0
 8107572:	9309      	str	r3, [sp, #36]	; 0x24
 8107574:	2320      	movs	r3, #32
 8107576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810757a:	f8cd 800c 	str.w	r8, [sp, #12]
 810757e:	2330      	movs	r3, #48	; 0x30
 8107580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8107744 <_vfiprintf_r+0x24c>
 8107584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8107588:	f04f 0901 	mov.w	r9, #1
 810758c:	4623      	mov	r3, r4
 810758e:	469a      	mov	sl, r3
 8107590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107594:	b10a      	cbz	r2, 810759a <_vfiprintf_r+0xa2>
 8107596:	2a25      	cmp	r2, #37	; 0x25
 8107598:	d1f9      	bne.n	810758e <_vfiprintf_r+0x96>
 810759a:	ebba 0b04 	subs.w	fp, sl, r4
 810759e:	d00b      	beq.n	81075b8 <_vfiprintf_r+0xc0>
 81075a0:	465b      	mov	r3, fp
 81075a2:	4622      	mov	r2, r4
 81075a4:	4629      	mov	r1, r5
 81075a6:	4630      	mov	r0, r6
 81075a8:	f7ff ff93 	bl	81074d2 <__sfputs_r>
 81075ac:	3001      	adds	r0, #1
 81075ae:	f000 80aa 	beq.w	8107706 <_vfiprintf_r+0x20e>
 81075b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81075b4:	445a      	add	r2, fp
 81075b6:	9209      	str	r2, [sp, #36]	; 0x24
 81075b8:	f89a 3000 	ldrb.w	r3, [sl]
 81075bc:	2b00      	cmp	r3, #0
 81075be:	f000 80a2 	beq.w	8107706 <_vfiprintf_r+0x20e>
 81075c2:	2300      	movs	r3, #0
 81075c4:	f04f 32ff 	mov.w	r2, #4294967295
 81075c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81075cc:	f10a 0a01 	add.w	sl, sl, #1
 81075d0:	9304      	str	r3, [sp, #16]
 81075d2:	9307      	str	r3, [sp, #28]
 81075d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81075d8:	931a      	str	r3, [sp, #104]	; 0x68
 81075da:	4654      	mov	r4, sl
 81075dc:	2205      	movs	r2, #5
 81075de:	f814 1b01 	ldrb.w	r1, [r4], #1
 81075e2:	4858      	ldr	r0, [pc, #352]	; (8107744 <_vfiprintf_r+0x24c>)
 81075e4:	f7f8 fe94 	bl	8100310 <memchr>
 81075e8:	9a04      	ldr	r2, [sp, #16]
 81075ea:	b9d8      	cbnz	r0, 8107624 <_vfiprintf_r+0x12c>
 81075ec:	06d1      	lsls	r1, r2, #27
 81075ee:	bf44      	itt	mi
 81075f0:	2320      	movmi	r3, #32
 81075f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81075f6:	0713      	lsls	r3, r2, #28
 81075f8:	bf44      	itt	mi
 81075fa:	232b      	movmi	r3, #43	; 0x2b
 81075fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107600:	f89a 3000 	ldrb.w	r3, [sl]
 8107604:	2b2a      	cmp	r3, #42	; 0x2a
 8107606:	d015      	beq.n	8107634 <_vfiprintf_r+0x13c>
 8107608:	9a07      	ldr	r2, [sp, #28]
 810760a:	4654      	mov	r4, sl
 810760c:	2000      	movs	r0, #0
 810760e:	f04f 0c0a 	mov.w	ip, #10
 8107612:	4621      	mov	r1, r4
 8107614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107618:	3b30      	subs	r3, #48	; 0x30
 810761a:	2b09      	cmp	r3, #9
 810761c:	d94e      	bls.n	81076bc <_vfiprintf_r+0x1c4>
 810761e:	b1b0      	cbz	r0, 810764e <_vfiprintf_r+0x156>
 8107620:	9207      	str	r2, [sp, #28]
 8107622:	e014      	b.n	810764e <_vfiprintf_r+0x156>
 8107624:	eba0 0308 	sub.w	r3, r0, r8
 8107628:	fa09 f303 	lsl.w	r3, r9, r3
 810762c:	4313      	orrs	r3, r2
 810762e:	9304      	str	r3, [sp, #16]
 8107630:	46a2      	mov	sl, r4
 8107632:	e7d2      	b.n	81075da <_vfiprintf_r+0xe2>
 8107634:	9b03      	ldr	r3, [sp, #12]
 8107636:	1d19      	adds	r1, r3, #4
 8107638:	681b      	ldr	r3, [r3, #0]
 810763a:	9103      	str	r1, [sp, #12]
 810763c:	2b00      	cmp	r3, #0
 810763e:	bfbb      	ittet	lt
 8107640:	425b      	neglt	r3, r3
 8107642:	f042 0202 	orrlt.w	r2, r2, #2
 8107646:	9307      	strge	r3, [sp, #28]
 8107648:	9307      	strlt	r3, [sp, #28]
 810764a:	bfb8      	it	lt
 810764c:	9204      	strlt	r2, [sp, #16]
 810764e:	7823      	ldrb	r3, [r4, #0]
 8107650:	2b2e      	cmp	r3, #46	; 0x2e
 8107652:	d10c      	bne.n	810766e <_vfiprintf_r+0x176>
 8107654:	7863      	ldrb	r3, [r4, #1]
 8107656:	2b2a      	cmp	r3, #42	; 0x2a
 8107658:	d135      	bne.n	81076c6 <_vfiprintf_r+0x1ce>
 810765a:	9b03      	ldr	r3, [sp, #12]
 810765c:	1d1a      	adds	r2, r3, #4
 810765e:	681b      	ldr	r3, [r3, #0]
 8107660:	9203      	str	r2, [sp, #12]
 8107662:	2b00      	cmp	r3, #0
 8107664:	bfb8      	it	lt
 8107666:	f04f 33ff 	movlt.w	r3, #4294967295
 810766a:	3402      	adds	r4, #2
 810766c:	9305      	str	r3, [sp, #20]
 810766e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8107754 <_vfiprintf_r+0x25c>
 8107672:	7821      	ldrb	r1, [r4, #0]
 8107674:	2203      	movs	r2, #3
 8107676:	4650      	mov	r0, sl
 8107678:	f7f8 fe4a 	bl	8100310 <memchr>
 810767c:	b140      	cbz	r0, 8107690 <_vfiprintf_r+0x198>
 810767e:	2340      	movs	r3, #64	; 0x40
 8107680:	eba0 000a 	sub.w	r0, r0, sl
 8107684:	fa03 f000 	lsl.w	r0, r3, r0
 8107688:	9b04      	ldr	r3, [sp, #16]
 810768a:	4303      	orrs	r3, r0
 810768c:	3401      	adds	r4, #1
 810768e:	9304      	str	r3, [sp, #16]
 8107690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107694:	482c      	ldr	r0, [pc, #176]	; (8107748 <_vfiprintf_r+0x250>)
 8107696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810769a:	2206      	movs	r2, #6
 810769c:	f7f8 fe38 	bl	8100310 <memchr>
 81076a0:	2800      	cmp	r0, #0
 81076a2:	d03f      	beq.n	8107724 <_vfiprintf_r+0x22c>
 81076a4:	4b29      	ldr	r3, [pc, #164]	; (810774c <_vfiprintf_r+0x254>)
 81076a6:	bb1b      	cbnz	r3, 81076f0 <_vfiprintf_r+0x1f8>
 81076a8:	9b03      	ldr	r3, [sp, #12]
 81076aa:	3307      	adds	r3, #7
 81076ac:	f023 0307 	bic.w	r3, r3, #7
 81076b0:	3308      	adds	r3, #8
 81076b2:	9303      	str	r3, [sp, #12]
 81076b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81076b6:	443b      	add	r3, r7
 81076b8:	9309      	str	r3, [sp, #36]	; 0x24
 81076ba:	e767      	b.n	810758c <_vfiprintf_r+0x94>
 81076bc:	fb0c 3202 	mla	r2, ip, r2, r3
 81076c0:	460c      	mov	r4, r1
 81076c2:	2001      	movs	r0, #1
 81076c4:	e7a5      	b.n	8107612 <_vfiprintf_r+0x11a>
 81076c6:	2300      	movs	r3, #0
 81076c8:	3401      	adds	r4, #1
 81076ca:	9305      	str	r3, [sp, #20]
 81076cc:	4619      	mov	r1, r3
 81076ce:	f04f 0c0a 	mov.w	ip, #10
 81076d2:	4620      	mov	r0, r4
 81076d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81076d8:	3a30      	subs	r2, #48	; 0x30
 81076da:	2a09      	cmp	r2, #9
 81076dc:	d903      	bls.n	81076e6 <_vfiprintf_r+0x1ee>
 81076de:	2b00      	cmp	r3, #0
 81076e0:	d0c5      	beq.n	810766e <_vfiprintf_r+0x176>
 81076e2:	9105      	str	r1, [sp, #20]
 81076e4:	e7c3      	b.n	810766e <_vfiprintf_r+0x176>
 81076e6:	fb0c 2101 	mla	r1, ip, r1, r2
 81076ea:	4604      	mov	r4, r0
 81076ec:	2301      	movs	r3, #1
 81076ee:	e7f0      	b.n	81076d2 <_vfiprintf_r+0x1da>
 81076f0:	ab03      	add	r3, sp, #12
 81076f2:	9300      	str	r3, [sp, #0]
 81076f4:	462a      	mov	r2, r5
 81076f6:	4b16      	ldr	r3, [pc, #88]	; (8107750 <_vfiprintf_r+0x258>)
 81076f8:	a904      	add	r1, sp, #16
 81076fa:	4630      	mov	r0, r6
 81076fc:	f000 f8cc 	bl	8107898 <_printf_float>
 8107700:	4607      	mov	r7, r0
 8107702:	1c78      	adds	r0, r7, #1
 8107704:	d1d6      	bne.n	81076b4 <_vfiprintf_r+0x1bc>
 8107706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107708:	07d9      	lsls	r1, r3, #31
 810770a:	d405      	bmi.n	8107718 <_vfiprintf_r+0x220>
 810770c:	89ab      	ldrh	r3, [r5, #12]
 810770e:	059a      	lsls	r2, r3, #22
 8107710:	d402      	bmi.n	8107718 <_vfiprintf_r+0x220>
 8107712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107714:	f003 fa14 	bl	810ab40 <__retarget_lock_release_recursive>
 8107718:	89ab      	ldrh	r3, [r5, #12]
 810771a:	065b      	lsls	r3, r3, #25
 810771c:	f53f af12 	bmi.w	8107544 <_vfiprintf_r+0x4c>
 8107720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8107722:	e711      	b.n	8107548 <_vfiprintf_r+0x50>
 8107724:	ab03      	add	r3, sp, #12
 8107726:	9300      	str	r3, [sp, #0]
 8107728:	462a      	mov	r2, r5
 810772a:	4b09      	ldr	r3, [pc, #36]	; (8107750 <_vfiprintf_r+0x258>)
 810772c:	a904      	add	r1, sp, #16
 810772e:	4630      	mov	r0, r6
 8107730:	f000 fb56 	bl	8107de0 <_printf_i>
 8107734:	e7e4      	b.n	8107700 <_vfiprintf_r+0x208>
 8107736:	bf00      	nop
 8107738:	0810c038 	.word	0x0810c038
 810773c:	0810c058 	.word	0x0810c058
 8107740:	0810c018 	.word	0x0810c018
 8107744:	0810bde0 	.word	0x0810bde0
 8107748:	0810bdea 	.word	0x0810bdea
 810774c:	08107899 	.word	0x08107899
 8107750:	081074d3 	.word	0x081074d3
 8107754:	0810bde6 	.word	0x0810bde6

08107758 <__cvt>:
 8107758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810775c:	ec55 4b10 	vmov	r4, r5, d0
 8107760:	2d00      	cmp	r5, #0
 8107762:	460e      	mov	r6, r1
 8107764:	4619      	mov	r1, r3
 8107766:	462b      	mov	r3, r5
 8107768:	bfbb      	ittet	lt
 810776a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810776e:	461d      	movlt	r5, r3
 8107770:	2300      	movge	r3, #0
 8107772:	232d      	movlt	r3, #45	; 0x2d
 8107774:	700b      	strb	r3, [r1, #0]
 8107776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107778:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810777c:	4691      	mov	r9, r2
 810777e:	f023 0820 	bic.w	r8, r3, #32
 8107782:	bfbc      	itt	lt
 8107784:	4622      	movlt	r2, r4
 8107786:	4614      	movlt	r4, r2
 8107788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810778c:	d005      	beq.n	810779a <__cvt+0x42>
 810778e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8107792:	d100      	bne.n	8107796 <__cvt+0x3e>
 8107794:	3601      	adds	r6, #1
 8107796:	2102      	movs	r1, #2
 8107798:	e000      	b.n	810779c <__cvt+0x44>
 810779a:	2103      	movs	r1, #3
 810779c:	ab03      	add	r3, sp, #12
 810779e:	9301      	str	r3, [sp, #4]
 81077a0:	ab02      	add	r3, sp, #8
 81077a2:	9300      	str	r3, [sp, #0]
 81077a4:	ec45 4b10 	vmov	d0, r4, r5
 81077a8:	4653      	mov	r3, sl
 81077aa:	4632      	mov	r2, r6
 81077ac:	f001 feb0 	bl	8109510 <_dtoa_r>
 81077b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81077b4:	4607      	mov	r7, r0
 81077b6:	d102      	bne.n	81077be <__cvt+0x66>
 81077b8:	f019 0f01 	tst.w	r9, #1
 81077bc:	d022      	beq.n	8107804 <__cvt+0xac>
 81077be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81077c2:	eb07 0906 	add.w	r9, r7, r6
 81077c6:	d110      	bne.n	81077ea <__cvt+0x92>
 81077c8:	783b      	ldrb	r3, [r7, #0]
 81077ca:	2b30      	cmp	r3, #48	; 0x30
 81077cc:	d10a      	bne.n	81077e4 <__cvt+0x8c>
 81077ce:	2200      	movs	r2, #0
 81077d0:	2300      	movs	r3, #0
 81077d2:	4620      	mov	r0, r4
 81077d4:	4629      	mov	r1, r5
 81077d6:	f7f9 fa0f 	bl	8100bf8 <__aeabi_dcmpeq>
 81077da:	b918      	cbnz	r0, 81077e4 <__cvt+0x8c>
 81077dc:	f1c6 0601 	rsb	r6, r6, #1
 81077e0:	f8ca 6000 	str.w	r6, [sl]
 81077e4:	f8da 3000 	ldr.w	r3, [sl]
 81077e8:	4499      	add	r9, r3
 81077ea:	2200      	movs	r2, #0
 81077ec:	2300      	movs	r3, #0
 81077ee:	4620      	mov	r0, r4
 81077f0:	4629      	mov	r1, r5
 81077f2:	f7f9 fa01 	bl	8100bf8 <__aeabi_dcmpeq>
 81077f6:	b108      	cbz	r0, 81077fc <__cvt+0xa4>
 81077f8:	f8cd 900c 	str.w	r9, [sp, #12]
 81077fc:	2230      	movs	r2, #48	; 0x30
 81077fe:	9b03      	ldr	r3, [sp, #12]
 8107800:	454b      	cmp	r3, r9
 8107802:	d307      	bcc.n	8107814 <__cvt+0xbc>
 8107804:	9b03      	ldr	r3, [sp, #12]
 8107806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107808:	1bdb      	subs	r3, r3, r7
 810780a:	4638      	mov	r0, r7
 810780c:	6013      	str	r3, [r2, #0]
 810780e:	b004      	add	sp, #16
 8107810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107814:	1c59      	adds	r1, r3, #1
 8107816:	9103      	str	r1, [sp, #12]
 8107818:	701a      	strb	r2, [r3, #0]
 810781a:	e7f0      	b.n	81077fe <__cvt+0xa6>

0810781c <__exponent>:
 810781c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810781e:	4603      	mov	r3, r0
 8107820:	2900      	cmp	r1, #0
 8107822:	bfb8      	it	lt
 8107824:	4249      	neglt	r1, r1
 8107826:	f803 2b02 	strb.w	r2, [r3], #2
 810782a:	bfb4      	ite	lt
 810782c:	222d      	movlt	r2, #45	; 0x2d
 810782e:	222b      	movge	r2, #43	; 0x2b
 8107830:	2909      	cmp	r1, #9
 8107832:	7042      	strb	r2, [r0, #1]
 8107834:	dd2a      	ble.n	810788c <__exponent+0x70>
 8107836:	f10d 0407 	add.w	r4, sp, #7
 810783a:	46a4      	mov	ip, r4
 810783c:	270a      	movs	r7, #10
 810783e:	46a6      	mov	lr, r4
 8107840:	460a      	mov	r2, r1
 8107842:	fb91 f6f7 	sdiv	r6, r1, r7
 8107846:	fb07 1516 	mls	r5, r7, r6, r1
 810784a:	3530      	adds	r5, #48	; 0x30
 810784c:	2a63      	cmp	r2, #99	; 0x63
 810784e:	f104 34ff 	add.w	r4, r4, #4294967295
 8107852:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8107856:	4631      	mov	r1, r6
 8107858:	dcf1      	bgt.n	810783e <__exponent+0x22>
 810785a:	3130      	adds	r1, #48	; 0x30
 810785c:	f1ae 0502 	sub.w	r5, lr, #2
 8107860:	f804 1c01 	strb.w	r1, [r4, #-1]
 8107864:	1c44      	adds	r4, r0, #1
 8107866:	4629      	mov	r1, r5
 8107868:	4561      	cmp	r1, ip
 810786a:	d30a      	bcc.n	8107882 <__exponent+0x66>
 810786c:	f10d 0209 	add.w	r2, sp, #9
 8107870:	eba2 020e 	sub.w	r2, r2, lr
 8107874:	4565      	cmp	r5, ip
 8107876:	bf88      	it	hi
 8107878:	2200      	movhi	r2, #0
 810787a:	4413      	add	r3, r2
 810787c:	1a18      	subs	r0, r3, r0
 810787e:	b003      	add	sp, #12
 8107880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107886:	f804 2f01 	strb.w	r2, [r4, #1]!
 810788a:	e7ed      	b.n	8107868 <__exponent+0x4c>
 810788c:	2330      	movs	r3, #48	; 0x30
 810788e:	3130      	adds	r1, #48	; 0x30
 8107890:	7083      	strb	r3, [r0, #2]
 8107892:	70c1      	strb	r1, [r0, #3]
 8107894:	1d03      	adds	r3, r0, #4
 8107896:	e7f1      	b.n	810787c <__exponent+0x60>

08107898 <_printf_float>:
 8107898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810789c:	ed2d 8b02 	vpush	{d8}
 81078a0:	b08d      	sub	sp, #52	; 0x34
 81078a2:	460c      	mov	r4, r1
 81078a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81078a8:	4616      	mov	r6, r2
 81078aa:	461f      	mov	r7, r3
 81078ac:	4605      	mov	r5, r0
 81078ae:	f003 f941 	bl	810ab34 <_localeconv_r>
 81078b2:	f8d0 a000 	ldr.w	sl, [r0]
 81078b6:	4650      	mov	r0, sl
 81078b8:	f7f8 fd1c 	bl	81002f4 <strlen>
 81078bc:	2300      	movs	r3, #0
 81078be:	930a      	str	r3, [sp, #40]	; 0x28
 81078c0:	6823      	ldr	r3, [r4, #0]
 81078c2:	9305      	str	r3, [sp, #20]
 81078c4:	f8d8 3000 	ldr.w	r3, [r8]
 81078c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 81078cc:	3307      	adds	r3, #7
 81078ce:	f023 0307 	bic.w	r3, r3, #7
 81078d2:	f103 0208 	add.w	r2, r3, #8
 81078d6:	f8c8 2000 	str.w	r2, [r8]
 81078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81078e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81078e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81078ea:	9307      	str	r3, [sp, #28]
 81078ec:	f8cd 8018 	str.w	r8, [sp, #24]
 81078f0:	ee08 0a10 	vmov	s16, r0
 81078f4:	4b9f      	ldr	r3, [pc, #636]	; (8107b74 <_printf_float+0x2dc>)
 81078f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81078fa:	f04f 32ff 	mov.w	r2, #4294967295
 81078fe:	f7f9 f9ad 	bl	8100c5c <__aeabi_dcmpun>
 8107902:	bb88      	cbnz	r0, 8107968 <_printf_float+0xd0>
 8107904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107908:	4b9a      	ldr	r3, [pc, #616]	; (8107b74 <_printf_float+0x2dc>)
 810790a:	f04f 32ff 	mov.w	r2, #4294967295
 810790e:	f7f9 f987 	bl	8100c20 <__aeabi_dcmple>
 8107912:	bb48      	cbnz	r0, 8107968 <_printf_float+0xd0>
 8107914:	2200      	movs	r2, #0
 8107916:	2300      	movs	r3, #0
 8107918:	4640      	mov	r0, r8
 810791a:	4649      	mov	r1, r9
 810791c:	f7f9 f976 	bl	8100c0c <__aeabi_dcmplt>
 8107920:	b110      	cbz	r0, 8107928 <_printf_float+0x90>
 8107922:	232d      	movs	r3, #45	; 0x2d
 8107924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107928:	4b93      	ldr	r3, [pc, #588]	; (8107b78 <_printf_float+0x2e0>)
 810792a:	4894      	ldr	r0, [pc, #592]	; (8107b7c <_printf_float+0x2e4>)
 810792c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107930:	bf94      	ite	ls
 8107932:	4698      	movls	r8, r3
 8107934:	4680      	movhi	r8, r0
 8107936:	2303      	movs	r3, #3
 8107938:	6123      	str	r3, [r4, #16]
 810793a:	9b05      	ldr	r3, [sp, #20]
 810793c:	f023 0204 	bic.w	r2, r3, #4
 8107940:	6022      	str	r2, [r4, #0]
 8107942:	f04f 0900 	mov.w	r9, #0
 8107946:	9700      	str	r7, [sp, #0]
 8107948:	4633      	mov	r3, r6
 810794a:	aa0b      	add	r2, sp, #44	; 0x2c
 810794c:	4621      	mov	r1, r4
 810794e:	4628      	mov	r0, r5
 8107950:	f000 f9d8 	bl	8107d04 <_printf_common>
 8107954:	3001      	adds	r0, #1
 8107956:	f040 8090 	bne.w	8107a7a <_printf_float+0x1e2>
 810795a:	f04f 30ff 	mov.w	r0, #4294967295
 810795e:	b00d      	add	sp, #52	; 0x34
 8107960:	ecbd 8b02 	vpop	{d8}
 8107964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107968:	4642      	mov	r2, r8
 810796a:	464b      	mov	r3, r9
 810796c:	4640      	mov	r0, r8
 810796e:	4649      	mov	r1, r9
 8107970:	f7f9 f974 	bl	8100c5c <__aeabi_dcmpun>
 8107974:	b140      	cbz	r0, 8107988 <_printf_float+0xf0>
 8107976:	464b      	mov	r3, r9
 8107978:	2b00      	cmp	r3, #0
 810797a:	bfbc      	itt	lt
 810797c:	232d      	movlt	r3, #45	; 0x2d
 810797e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8107982:	487f      	ldr	r0, [pc, #508]	; (8107b80 <_printf_float+0x2e8>)
 8107984:	4b7f      	ldr	r3, [pc, #508]	; (8107b84 <_printf_float+0x2ec>)
 8107986:	e7d1      	b.n	810792c <_printf_float+0x94>
 8107988:	6863      	ldr	r3, [r4, #4]
 810798a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810798e:	9206      	str	r2, [sp, #24]
 8107990:	1c5a      	adds	r2, r3, #1
 8107992:	d13f      	bne.n	8107a14 <_printf_float+0x17c>
 8107994:	2306      	movs	r3, #6
 8107996:	6063      	str	r3, [r4, #4]
 8107998:	9b05      	ldr	r3, [sp, #20]
 810799a:	6861      	ldr	r1, [r4, #4]
 810799c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81079a0:	2300      	movs	r3, #0
 81079a2:	9303      	str	r3, [sp, #12]
 81079a4:	ab0a      	add	r3, sp, #40	; 0x28
 81079a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 81079aa:	ab09      	add	r3, sp, #36	; 0x24
 81079ac:	ec49 8b10 	vmov	d0, r8, r9
 81079b0:	9300      	str	r3, [sp, #0]
 81079b2:	6022      	str	r2, [r4, #0]
 81079b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81079b8:	4628      	mov	r0, r5
 81079ba:	f7ff fecd 	bl	8107758 <__cvt>
 81079be:	9b06      	ldr	r3, [sp, #24]
 81079c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 81079c2:	2b47      	cmp	r3, #71	; 0x47
 81079c4:	4680      	mov	r8, r0
 81079c6:	d108      	bne.n	81079da <_printf_float+0x142>
 81079c8:	1cc8      	adds	r0, r1, #3
 81079ca:	db02      	blt.n	81079d2 <_printf_float+0x13a>
 81079cc:	6863      	ldr	r3, [r4, #4]
 81079ce:	4299      	cmp	r1, r3
 81079d0:	dd41      	ble.n	8107a56 <_printf_float+0x1be>
 81079d2:	f1ab 0b02 	sub.w	fp, fp, #2
 81079d6:	fa5f fb8b 	uxtb.w	fp, fp
 81079da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81079de:	d820      	bhi.n	8107a22 <_printf_float+0x18a>
 81079e0:	3901      	subs	r1, #1
 81079e2:	465a      	mov	r2, fp
 81079e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81079e8:	9109      	str	r1, [sp, #36]	; 0x24
 81079ea:	f7ff ff17 	bl	810781c <__exponent>
 81079ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81079f0:	1813      	adds	r3, r2, r0
 81079f2:	2a01      	cmp	r2, #1
 81079f4:	4681      	mov	r9, r0
 81079f6:	6123      	str	r3, [r4, #16]
 81079f8:	dc02      	bgt.n	8107a00 <_printf_float+0x168>
 81079fa:	6822      	ldr	r2, [r4, #0]
 81079fc:	07d2      	lsls	r2, r2, #31
 81079fe:	d501      	bpl.n	8107a04 <_printf_float+0x16c>
 8107a00:	3301      	adds	r3, #1
 8107a02:	6123      	str	r3, [r4, #16]
 8107a04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107a08:	2b00      	cmp	r3, #0
 8107a0a:	d09c      	beq.n	8107946 <_printf_float+0xae>
 8107a0c:	232d      	movs	r3, #45	; 0x2d
 8107a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107a12:	e798      	b.n	8107946 <_printf_float+0xae>
 8107a14:	9a06      	ldr	r2, [sp, #24]
 8107a16:	2a47      	cmp	r2, #71	; 0x47
 8107a18:	d1be      	bne.n	8107998 <_printf_float+0x100>
 8107a1a:	2b00      	cmp	r3, #0
 8107a1c:	d1bc      	bne.n	8107998 <_printf_float+0x100>
 8107a1e:	2301      	movs	r3, #1
 8107a20:	e7b9      	b.n	8107996 <_printf_float+0xfe>
 8107a22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107a26:	d118      	bne.n	8107a5a <_printf_float+0x1c2>
 8107a28:	2900      	cmp	r1, #0
 8107a2a:	6863      	ldr	r3, [r4, #4]
 8107a2c:	dd0b      	ble.n	8107a46 <_printf_float+0x1ae>
 8107a2e:	6121      	str	r1, [r4, #16]
 8107a30:	b913      	cbnz	r3, 8107a38 <_printf_float+0x1a0>
 8107a32:	6822      	ldr	r2, [r4, #0]
 8107a34:	07d0      	lsls	r0, r2, #31
 8107a36:	d502      	bpl.n	8107a3e <_printf_float+0x1a6>
 8107a38:	3301      	adds	r3, #1
 8107a3a:	440b      	add	r3, r1
 8107a3c:	6123      	str	r3, [r4, #16]
 8107a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8107a40:	f04f 0900 	mov.w	r9, #0
 8107a44:	e7de      	b.n	8107a04 <_printf_float+0x16c>
 8107a46:	b913      	cbnz	r3, 8107a4e <_printf_float+0x1b6>
 8107a48:	6822      	ldr	r2, [r4, #0]
 8107a4a:	07d2      	lsls	r2, r2, #31
 8107a4c:	d501      	bpl.n	8107a52 <_printf_float+0x1ba>
 8107a4e:	3302      	adds	r3, #2
 8107a50:	e7f4      	b.n	8107a3c <_printf_float+0x1a4>
 8107a52:	2301      	movs	r3, #1
 8107a54:	e7f2      	b.n	8107a3c <_printf_float+0x1a4>
 8107a56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107a5c:	4299      	cmp	r1, r3
 8107a5e:	db05      	blt.n	8107a6c <_printf_float+0x1d4>
 8107a60:	6823      	ldr	r3, [r4, #0]
 8107a62:	6121      	str	r1, [r4, #16]
 8107a64:	07d8      	lsls	r0, r3, #31
 8107a66:	d5ea      	bpl.n	8107a3e <_printf_float+0x1a6>
 8107a68:	1c4b      	adds	r3, r1, #1
 8107a6a:	e7e7      	b.n	8107a3c <_printf_float+0x1a4>
 8107a6c:	2900      	cmp	r1, #0
 8107a6e:	bfd4      	ite	le
 8107a70:	f1c1 0202 	rsble	r2, r1, #2
 8107a74:	2201      	movgt	r2, #1
 8107a76:	4413      	add	r3, r2
 8107a78:	e7e0      	b.n	8107a3c <_printf_float+0x1a4>
 8107a7a:	6823      	ldr	r3, [r4, #0]
 8107a7c:	055a      	lsls	r2, r3, #21
 8107a7e:	d407      	bmi.n	8107a90 <_printf_float+0x1f8>
 8107a80:	6923      	ldr	r3, [r4, #16]
 8107a82:	4642      	mov	r2, r8
 8107a84:	4631      	mov	r1, r6
 8107a86:	4628      	mov	r0, r5
 8107a88:	47b8      	blx	r7
 8107a8a:	3001      	adds	r0, #1
 8107a8c:	d12c      	bne.n	8107ae8 <_printf_float+0x250>
 8107a8e:	e764      	b.n	810795a <_printf_float+0xc2>
 8107a90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107a94:	f240 80e0 	bls.w	8107c58 <_printf_float+0x3c0>
 8107a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107a9c:	2200      	movs	r2, #0
 8107a9e:	2300      	movs	r3, #0
 8107aa0:	f7f9 f8aa 	bl	8100bf8 <__aeabi_dcmpeq>
 8107aa4:	2800      	cmp	r0, #0
 8107aa6:	d034      	beq.n	8107b12 <_printf_float+0x27a>
 8107aa8:	4a37      	ldr	r2, [pc, #220]	; (8107b88 <_printf_float+0x2f0>)
 8107aaa:	2301      	movs	r3, #1
 8107aac:	4631      	mov	r1, r6
 8107aae:	4628      	mov	r0, r5
 8107ab0:	47b8      	blx	r7
 8107ab2:	3001      	adds	r0, #1
 8107ab4:	f43f af51 	beq.w	810795a <_printf_float+0xc2>
 8107ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107abc:	429a      	cmp	r2, r3
 8107abe:	db02      	blt.n	8107ac6 <_printf_float+0x22e>
 8107ac0:	6823      	ldr	r3, [r4, #0]
 8107ac2:	07d8      	lsls	r0, r3, #31
 8107ac4:	d510      	bpl.n	8107ae8 <_printf_float+0x250>
 8107ac6:	ee18 3a10 	vmov	r3, s16
 8107aca:	4652      	mov	r2, sl
 8107acc:	4631      	mov	r1, r6
 8107ace:	4628      	mov	r0, r5
 8107ad0:	47b8      	blx	r7
 8107ad2:	3001      	adds	r0, #1
 8107ad4:	f43f af41 	beq.w	810795a <_printf_float+0xc2>
 8107ad8:	f04f 0800 	mov.w	r8, #0
 8107adc:	f104 091a 	add.w	r9, r4, #26
 8107ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107ae2:	3b01      	subs	r3, #1
 8107ae4:	4543      	cmp	r3, r8
 8107ae6:	dc09      	bgt.n	8107afc <_printf_float+0x264>
 8107ae8:	6823      	ldr	r3, [r4, #0]
 8107aea:	079b      	lsls	r3, r3, #30
 8107aec:	f100 8105 	bmi.w	8107cfa <_printf_float+0x462>
 8107af0:	68e0      	ldr	r0, [r4, #12]
 8107af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107af4:	4298      	cmp	r0, r3
 8107af6:	bfb8      	it	lt
 8107af8:	4618      	movlt	r0, r3
 8107afa:	e730      	b.n	810795e <_printf_float+0xc6>
 8107afc:	2301      	movs	r3, #1
 8107afe:	464a      	mov	r2, r9
 8107b00:	4631      	mov	r1, r6
 8107b02:	4628      	mov	r0, r5
 8107b04:	47b8      	blx	r7
 8107b06:	3001      	adds	r0, #1
 8107b08:	f43f af27 	beq.w	810795a <_printf_float+0xc2>
 8107b0c:	f108 0801 	add.w	r8, r8, #1
 8107b10:	e7e6      	b.n	8107ae0 <_printf_float+0x248>
 8107b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107b14:	2b00      	cmp	r3, #0
 8107b16:	dc39      	bgt.n	8107b8c <_printf_float+0x2f4>
 8107b18:	4a1b      	ldr	r2, [pc, #108]	; (8107b88 <_printf_float+0x2f0>)
 8107b1a:	2301      	movs	r3, #1
 8107b1c:	4631      	mov	r1, r6
 8107b1e:	4628      	mov	r0, r5
 8107b20:	47b8      	blx	r7
 8107b22:	3001      	adds	r0, #1
 8107b24:	f43f af19 	beq.w	810795a <_printf_float+0xc2>
 8107b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107b2c:	4313      	orrs	r3, r2
 8107b2e:	d102      	bne.n	8107b36 <_printf_float+0x29e>
 8107b30:	6823      	ldr	r3, [r4, #0]
 8107b32:	07d9      	lsls	r1, r3, #31
 8107b34:	d5d8      	bpl.n	8107ae8 <_printf_float+0x250>
 8107b36:	ee18 3a10 	vmov	r3, s16
 8107b3a:	4652      	mov	r2, sl
 8107b3c:	4631      	mov	r1, r6
 8107b3e:	4628      	mov	r0, r5
 8107b40:	47b8      	blx	r7
 8107b42:	3001      	adds	r0, #1
 8107b44:	f43f af09 	beq.w	810795a <_printf_float+0xc2>
 8107b48:	f04f 0900 	mov.w	r9, #0
 8107b4c:	f104 0a1a 	add.w	sl, r4, #26
 8107b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107b52:	425b      	negs	r3, r3
 8107b54:	454b      	cmp	r3, r9
 8107b56:	dc01      	bgt.n	8107b5c <_printf_float+0x2c4>
 8107b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107b5a:	e792      	b.n	8107a82 <_printf_float+0x1ea>
 8107b5c:	2301      	movs	r3, #1
 8107b5e:	4652      	mov	r2, sl
 8107b60:	4631      	mov	r1, r6
 8107b62:	4628      	mov	r0, r5
 8107b64:	47b8      	blx	r7
 8107b66:	3001      	adds	r0, #1
 8107b68:	f43f aef7 	beq.w	810795a <_printf_float+0xc2>
 8107b6c:	f109 0901 	add.w	r9, r9, #1
 8107b70:	e7ee      	b.n	8107b50 <_printf_float+0x2b8>
 8107b72:	bf00      	nop
 8107b74:	7fefffff 	.word	0x7fefffff
 8107b78:	0810bdf1 	.word	0x0810bdf1
 8107b7c:	0810bdf5 	.word	0x0810bdf5
 8107b80:	0810bdfd 	.word	0x0810bdfd
 8107b84:	0810bdf9 	.word	0x0810bdf9
 8107b88:	0810be01 	.word	0x0810be01
 8107b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107b90:	429a      	cmp	r2, r3
 8107b92:	bfa8      	it	ge
 8107b94:	461a      	movge	r2, r3
 8107b96:	2a00      	cmp	r2, #0
 8107b98:	4691      	mov	r9, r2
 8107b9a:	dc37      	bgt.n	8107c0c <_printf_float+0x374>
 8107b9c:	f04f 0b00 	mov.w	fp, #0
 8107ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107ba4:	f104 021a 	add.w	r2, r4, #26
 8107ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107baa:	9305      	str	r3, [sp, #20]
 8107bac:	eba3 0309 	sub.w	r3, r3, r9
 8107bb0:	455b      	cmp	r3, fp
 8107bb2:	dc33      	bgt.n	8107c1c <_printf_float+0x384>
 8107bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107bb8:	429a      	cmp	r2, r3
 8107bba:	db3b      	blt.n	8107c34 <_printf_float+0x39c>
 8107bbc:	6823      	ldr	r3, [r4, #0]
 8107bbe:	07da      	lsls	r2, r3, #31
 8107bc0:	d438      	bmi.n	8107c34 <_printf_float+0x39c>
 8107bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107bc4:	9b05      	ldr	r3, [sp, #20]
 8107bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107bc8:	1ad3      	subs	r3, r2, r3
 8107bca:	eba2 0901 	sub.w	r9, r2, r1
 8107bce:	4599      	cmp	r9, r3
 8107bd0:	bfa8      	it	ge
 8107bd2:	4699      	movge	r9, r3
 8107bd4:	f1b9 0f00 	cmp.w	r9, #0
 8107bd8:	dc35      	bgt.n	8107c46 <_printf_float+0x3ae>
 8107bda:	f04f 0800 	mov.w	r8, #0
 8107bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107be2:	f104 0a1a 	add.w	sl, r4, #26
 8107be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107bea:	1a9b      	subs	r3, r3, r2
 8107bec:	eba3 0309 	sub.w	r3, r3, r9
 8107bf0:	4543      	cmp	r3, r8
 8107bf2:	f77f af79 	ble.w	8107ae8 <_printf_float+0x250>
 8107bf6:	2301      	movs	r3, #1
 8107bf8:	4652      	mov	r2, sl
 8107bfa:	4631      	mov	r1, r6
 8107bfc:	4628      	mov	r0, r5
 8107bfe:	47b8      	blx	r7
 8107c00:	3001      	adds	r0, #1
 8107c02:	f43f aeaa 	beq.w	810795a <_printf_float+0xc2>
 8107c06:	f108 0801 	add.w	r8, r8, #1
 8107c0a:	e7ec      	b.n	8107be6 <_printf_float+0x34e>
 8107c0c:	4613      	mov	r3, r2
 8107c0e:	4631      	mov	r1, r6
 8107c10:	4642      	mov	r2, r8
 8107c12:	4628      	mov	r0, r5
 8107c14:	47b8      	blx	r7
 8107c16:	3001      	adds	r0, #1
 8107c18:	d1c0      	bne.n	8107b9c <_printf_float+0x304>
 8107c1a:	e69e      	b.n	810795a <_printf_float+0xc2>
 8107c1c:	2301      	movs	r3, #1
 8107c1e:	4631      	mov	r1, r6
 8107c20:	4628      	mov	r0, r5
 8107c22:	9205      	str	r2, [sp, #20]
 8107c24:	47b8      	blx	r7
 8107c26:	3001      	adds	r0, #1
 8107c28:	f43f ae97 	beq.w	810795a <_printf_float+0xc2>
 8107c2c:	9a05      	ldr	r2, [sp, #20]
 8107c2e:	f10b 0b01 	add.w	fp, fp, #1
 8107c32:	e7b9      	b.n	8107ba8 <_printf_float+0x310>
 8107c34:	ee18 3a10 	vmov	r3, s16
 8107c38:	4652      	mov	r2, sl
 8107c3a:	4631      	mov	r1, r6
 8107c3c:	4628      	mov	r0, r5
 8107c3e:	47b8      	blx	r7
 8107c40:	3001      	adds	r0, #1
 8107c42:	d1be      	bne.n	8107bc2 <_printf_float+0x32a>
 8107c44:	e689      	b.n	810795a <_printf_float+0xc2>
 8107c46:	9a05      	ldr	r2, [sp, #20]
 8107c48:	464b      	mov	r3, r9
 8107c4a:	4442      	add	r2, r8
 8107c4c:	4631      	mov	r1, r6
 8107c4e:	4628      	mov	r0, r5
 8107c50:	47b8      	blx	r7
 8107c52:	3001      	adds	r0, #1
 8107c54:	d1c1      	bne.n	8107bda <_printf_float+0x342>
 8107c56:	e680      	b.n	810795a <_printf_float+0xc2>
 8107c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107c5a:	2a01      	cmp	r2, #1
 8107c5c:	dc01      	bgt.n	8107c62 <_printf_float+0x3ca>
 8107c5e:	07db      	lsls	r3, r3, #31
 8107c60:	d538      	bpl.n	8107cd4 <_printf_float+0x43c>
 8107c62:	2301      	movs	r3, #1
 8107c64:	4642      	mov	r2, r8
 8107c66:	4631      	mov	r1, r6
 8107c68:	4628      	mov	r0, r5
 8107c6a:	47b8      	blx	r7
 8107c6c:	3001      	adds	r0, #1
 8107c6e:	f43f ae74 	beq.w	810795a <_printf_float+0xc2>
 8107c72:	ee18 3a10 	vmov	r3, s16
 8107c76:	4652      	mov	r2, sl
 8107c78:	4631      	mov	r1, r6
 8107c7a:	4628      	mov	r0, r5
 8107c7c:	47b8      	blx	r7
 8107c7e:	3001      	adds	r0, #1
 8107c80:	f43f ae6b 	beq.w	810795a <_printf_float+0xc2>
 8107c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107c88:	2200      	movs	r2, #0
 8107c8a:	2300      	movs	r3, #0
 8107c8c:	f7f8 ffb4 	bl	8100bf8 <__aeabi_dcmpeq>
 8107c90:	b9d8      	cbnz	r0, 8107cca <_printf_float+0x432>
 8107c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c94:	f108 0201 	add.w	r2, r8, #1
 8107c98:	3b01      	subs	r3, #1
 8107c9a:	4631      	mov	r1, r6
 8107c9c:	4628      	mov	r0, r5
 8107c9e:	47b8      	blx	r7
 8107ca0:	3001      	adds	r0, #1
 8107ca2:	d10e      	bne.n	8107cc2 <_printf_float+0x42a>
 8107ca4:	e659      	b.n	810795a <_printf_float+0xc2>
 8107ca6:	2301      	movs	r3, #1
 8107ca8:	4652      	mov	r2, sl
 8107caa:	4631      	mov	r1, r6
 8107cac:	4628      	mov	r0, r5
 8107cae:	47b8      	blx	r7
 8107cb0:	3001      	adds	r0, #1
 8107cb2:	f43f ae52 	beq.w	810795a <_printf_float+0xc2>
 8107cb6:	f108 0801 	add.w	r8, r8, #1
 8107cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107cbc:	3b01      	subs	r3, #1
 8107cbe:	4543      	cmp	r3, r8
 8107cc0:	dcf1      	bgt.n	8107ca6 <_printf_float+0x40e>
 8107cc2:	464b      	mov	r3, r9
 8107cc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107cc8:	e6dc      	b.n	8107a84 <_printf_float+0x1ec>
 8107cca:	f04f 0800 	mov.w	r8, #0
 8107cce:	f104 0a1a 	add.w	sl, r4, #26
 8107cd2:	e7f2      	b.n	8107cba <_printf_float+0x422>
 8107cd4:	2301      	movs	r3, #1
 8107cd6:	4642      	mov	r2, r8
 8107cd8:	e7df      	b.n	8107c9a <_printf_float+0x402>
 8107cda:	2301      	movs	r3, #1
 8107cdc:	464a      	mov	r2, r9
 8107cde:	4631      	mov	r1, r6
 8107ce0:	4628      	mov	r0, r5
 8107ce2:	47b8      	blx	r7
 8107ce4:	3001      	adds	r0, #1
 8107ce6:	f43f ae38 	beq.w	810795a <_printf_float+0xc2>
 8107cea:	f108 0801 	add.w	r8, r8, #1
 8107cee:	68e3      	ldr	r3, [r4, #12]
 8107cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107cf2:	1a5b      	subs	r3, r3, r1
 8107cf4:	4543      	cmp	r3, r8
 8107cf6:	dcf0      	bgt.n	8107cda <_printf_float+0x442>
 8107cf8:	e6fa      	b.n	8107af0 <_printf_float+0x258>
 8107cfa:	f04f 0800 	mov.w	r8, #0
 8107cfe:	f104 0919 	add.w	r9, r4, #25
 8107d02:	e7f4      	b.n	8107cee <_printf_float+0x456>

08107d04 <_printf_common>:
 8107d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107d08:	4616      	mov	r6, r2
 8107d0a:	4699      	mov	r9, r3
 8107d0c:	688a      	ldr	r2, [r1, #8]
 8107d0e:	690b      	ldr	r3, [r1, #16]
 8107d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107d14:	4293      	cmp	r3, r2
 8107d16:	bfb8      	it	lt
 8107d18:	4613      	movlt	r3, r2
 8107d1a:	6033      	str	r3, [r6, #0]
 8107d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107d20:	4607      	mov	r7, r0
 8107d22:	460c      	mov	r4, r1
 8107d24:	b10a      	cbz	r2, 8107d2a <_printf_common+0x26>
 8107d26:	3301      	adds	r3, #1
 8107d28:	6033      	str	r3, [r6, #0]
 8107d2a:	6823      	ldr	r3, [r4, #0]
 8107d2c:	0699      	lsls	r1, r3, #26
 8107d2e:	bf42      	ittt	mi
 8107d30:	6833      	ldrmi	r3, [r6, #0]
 8107d32:	3302      	addmi	r3, #2
 8107d34:	6033      	strmi	r3, [r6, #0]
 8107d36:	6825      	ldr	r5, [r4, #0]
 8107d38:	f015 0506 	ands.w	r5, r5, #6
 8107d3c:	d106      	bne.n	8107d4c <_printf_common+0x48>
 8107d3e:	f104 0a19 	add.w	sl, r4, #25
 8107d42:	68e3      	ldr	r3, [r4, #12]
 8107d44:	6832      	ldr	r2, [r6, #0]
 8107d46:	1a9b      	subs	r3, r3, r2
 8107d48:	42ab      	cmp	r3, r5
 8107d4a:	dc26      	bgt.n	8107d9a <_printf_common+0x96>
 8107d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107d50:	1e13      	subs	r3, r2, #0
 8107d52:	6822      	ldr	r2, [r4, #0]
 8107d54:	bf18      	it	ne
 8107d56:	2301      	movne	r3, #1
 8107d58:	0692      	lsls	r2, r2, #26
 8107d5a:	d42b      	bmi.n	8107db4 <_printf_common+0xb0>
 8107d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107d60:	4649      	mov	r1, r9
 8107d62:	4638      	mov	r0, r7
 8107d64:	47c0      	blx	r8
 8107d66:	3001      	adds	r0, #1
 8107d68:	d01e      	beq.n	8107da8 <_printf_common+0xa4>
 8107d6a:	6823      	ldr	r3, [r4, #0]
 8107d6c:	68e5      	ldr	r5, [r4, #12]
 8107d6e:	6832      	ldr	r2, [r6, #0]
 8107d70:	f003 0306 	and.w	r3, r3, #6
 8107d74:	2b04      	cmp	r3, #4
 8107d76:	bf08      	it	eq
 8107d78:	1aad      	subeq	r5, r5, r2
 8107d7a:	68a3      	ldr	r3, [r4, #8]
 8107d7c:	6922      	ldr	r2, [r4, #16]
 8107d7e:	bf0c      	ite	eq
 8107d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107d84:	2500      	movne	r5, #0
 8107d86:	4293      	cmp	r3, r2
 8107d88:	bfc4      	itt	gt
 8107d8a:	1a9b      	subgt	r3, r3, r2
 8107d8c:	18ed      	addgt	r5, r5, r3
 8107d8e:	2600      	movs	r6, #0
 8107d90:	341a      	adds	r4, #26
 8107d92:	42b5      	cmp	r5, r6
 8107d94:	d11a      	bne.n	8107dcc <_printf_common+0xc8>
 8107d96:	2000      	movs	r0, #0
 8107d98:	e008      	b.n	8107dac <_printf_common+0xa8>
 8107d9a:	2301      	movs	r3, #1
 8107d9c:	4652      	mov	r2, sl
 8107d9e:	4649      	mov	r1, r9
 8107da0:	4638      	mov	r0, r7
 8107da2:	47c0      	blx	r8
 8107da4:	3001      	adds	r0, #1
 8107da6:	d103      	bne.n	8107db0 <_printf_common+0xac>
 8107da8:	f04f 30ff 	mov.w	r0, #4294967295
 8107dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107db0:	3501      	adds	r5, #1
 8107db2:	e7c6      	b.n	8107d42 <_printf_common+0x3e>
 8107db4:	18e1      	adds	r1, r4, r3
 8107db6:	1c5a      	adds	r2, r3, #1
 8107db8:	2030      	movs	r0, #48	; 0x30
 8107dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107dbe:	4422      	add	r2, r4
 8107dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8107dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8107dc8:	3302      	adds	r3, #2
 8107dca:	e7c7      	b.n	8107d5c <_printf_common+0x58>
 8107dcc:	2301      	movs	r3, #1
 8107dce:	4622      	mov	r2, r4
 8107dd0:	4649      	mov	r1, r9
 8107dd2:	4638      	mov	r0, r7
 8107dd4:	47c0      	blx	r8
 8107dd6:	3001      	adds	r0, #1
 8107dd8:	d0e6      	beq.n	8107da8 <_printf_common+0xa4>
 8107dda:	3601      	adds	r6, #1
 8107ddc:	e7d9      	b.n	8107d92 <_printf_common+0x8e>
	...

08107de0 <_printf_i>:
 8107de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107de4:	460c      	mov	r4, r1
 8107de6:	4691      	mov	r9, r2
 8107de8:	7e27      	ldrb	r7, [r4, #24]
 8107dea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8107dec:	2f78      	cmp	r7, #120	; 0x78
 8107dee:	4680      	mov	r8, r0
 8107df0:	469a      	mov	sl, r3
 8107df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107df6:	d807      	bhi.n	8107e08 <_printf_i+0x28>
 8107df8:	2f62      	cmp	r7, #98	; 0x62
 8107dfa:	d80a      	bhi.n	8107e12 <_printf_i+0x32>
 8107dfc:	2f00      	cmp	r7, #0
 8107dfe:	f000 80d8 	beq.w	8107fb2 <_printf_i+0x1d2>
 8107e02:	2f58      	cmp	r7, #88	; 0x58
 8107e04:	f000 80a3 	beq.w	8107f4e <_printf_i+0x16e>
 8107e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107e10:	e03a      	b.n	8107e88 <_printf_i+0xa8>
 8107e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107e16:	2b15      	cmp	r3, #21
 8107e18:	d8f6      	bhi.n	8107e08 <_printf_i+0x28>
 8107e1a:	a001      	add	r0, pc, #4	; (adr r0, 8107e20 <_printf_i+0x40>)
 8107e1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8107e20:	08107e79 	.word	0x08107e79
 8107e24:	08107e8d 	.word	0x08107e8d
 8107e28:	08107e09 	.word	0x08107e09
 8107e2c:	08107e09 	.word	0x08107e09
 8107e30:	08107e09 	.word	0x08107e09
 8107e34:	08107e09 	.word	0x08107e09
 8107e38:	08107e8d 	.word	0x08107e8d
 8107e3c:	08107e09 	.word	0x08107e09
 8107e40:	08107e09 	.word	0x08107e09
 8107e44:	08107e09 	.word	0x08107e09
 8107e48:	08107e09 	.word	0x08107e09
 8107e4c:	08107f99 	.word	0x08107f99
 8107e50:	08107ebd 	.word	0x08107ebd
 8107e54:	08107f7b 	.word	0x08107f7b
 8107e58:	08107e09 	.word	0x08107e09
 8107e5c:	08107e09 	.word	0x08107e09
 8107e60:	08107fbb 	.word	0x08107fbb
 8107e64:	08107e09 	.word	0x08107e09
 8107e68:	08107ebd 	.word	0x08107ebd
 8107e6c:	08107e09 	.word	0x08107e09
 8107e70:	08107e09 	.word	0x08107e09
 8107e74:	08107f83 	.word	0x08107f83
 8107e78:	680b      	ldr	r3, [r1, #0]
 8107e7a:	1d1a      	adds	r2, r3, #4
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	600a      	str	r2, [r1, #0]
 8107e80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8107e88:	2301      	movs	r3, #1
 8107e8a:	e0a3      	b.n	8107fd4 <_printf_i+0x1f4>
 8107e8c:	6825      	ldr	r5, [r4, #0]
 8107e8e:	6808      	ldr	r0, [r1, #0]
 8107e90:	062e      	lsls	r6, r5, #24
 8107e92:	f100 0304 	add.w	r3, r0, #4
 8107e96:	d50a      	bpl.n	8107eae <_printf_i+0xce>
 8107e98:	6805      	ldr	r5, [r0, #0]
 8107e9a:	600b      	str	r3, [r1, #0]
 8107e9c:	2d00      	cmp	r5, #0
 8107e9e:	da03      	bge.n	8107ea8 <_printf_i+0xc8>
 8107ea0:	232d      	movs	r3, #45	; 0x2d
 8107ea2:	426d      	negs	r5, r5
 8107ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107ea8:	485e      	ldr	r0, [pc, #376]	; (8108024 <_printf_i+0x244>)
 8107eaa:	230a      	movs	r3, #10
 8107eac:	e019      	b.n	8107ee2 <_printf_i+0x102>
 8107eae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8107eb2:	6805      	ldr	r5, [r0, #0]
 8107eb4:	600b      	str	r3, [r1, #0]
 8107eb6:	bf18      	it	ne
 8107eb8:	b22d      	sxthne	r5, r5
 8107eba:	e7ef      	b.n	8107e9c <_printf_i+0xbc>
 8107ebc:	680b      	ldr	r3, [r1, #0]
 8107ebe:	6825      	ldr	r5, [r4, #0]
 8107ec0:	1d18      	adds	r0, r3, #4
 8107ec2:	6008      	str	r0, [r1, #0]
 8107ec4:	0628      	lsls	r0, r5, #24
 8107ec6:	d501      	bpl.n	8107ecc <_printf_i+0xec>
 8107ec8:	681d      	ldr	r5, [r3, #0]
 8107eca:	e002      	b.n	8107ed2 <_printf_i+0xf2>
 8107ecc:	0669      	lsls	r1, r5, #25
 8107ece:	d5fb      	bpl.n	8107ec8 <_printf_i+0xe8>
 8107ed0:	881d      	ldrh	r5, [r3, #0]
 8107ed2:	4854      	ldr	r0, [pc, #336]	; (8108024 <_printf_i+0x244>)
 8107ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8107ed6:	bf0c      	ite	eq
 8107ed8:	2308      	moveq	r3, #8
 8107eda:	230a      	movne	r3, #10
 8107edc:	2100      	movs	r1, #0
 8107ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107ee2:	6866      	ldr	r6, [r4, #4]
 8107ee4:	60a6      	str	r6, [r4, #8]
 8107ee6:	2e00      	cmp	r6, #0
 8107ee8:	bfa2      	ittt	ge
 8107eea:	6821      	ldrge	r1, [r4, #0]
 8107eec:	f021 0104 	bicge.w	r1, r1, #4
 8107ef0:	6021      	strge	r1, [r4, #0]
 8107ef2:	b90d      	cbnz	r5, 8107ef8 <_printf_i+0x118>
 8107ef4:	2e00      	cmp	r6, #0
 8107ef6:	d04d      	beq.n	8107f94 <_printf_i+0x1b4>
 8107ef8:	4616      	mov	r6, r2
 8107efa:	fbb5 f1f3 	udiv	r1, r5, r3
 8107efe:	fb03 5711 	mls	r7, r3, r1, r5
 8107f02:	5dc7      	ldrb	r7, [r0, r7]
 8107f04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107f08:	462f      	mov	r7, r5
 8107f0a:	42bb      	cmp	r3, r7
 8107f0c:	460d      	mov	r5, r1
 8107f0e:	d9f4      	bls.n	8107efa <_printf_i+0x11a>
 8107f10:	2b08      	cmp	r3, #8
 8107f12:	d10b      	bne.n	8107f2c <_printf_i+0x14c>
 8107f14:	6823      	ldr	r3, [r4, #0]
 8107f16:	07df      	lsls	r7, r3, #31
 8107f18:	d508      	bpl.n	8107f2c <_printf_i+0x14c>
 8107f1a:	6923      	ldr	r3, [r4, #16]
 8107f1c:	6861      	ldr	r1, [r4, #4]
 8107f1e:	4299      	cmp	r1, r3
 8107f20:	bfde      	ittt	le
 8107f22:	2330      	movle	r3, #48	; 0x30
 8107f24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8107f28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8107f2c:	1b92      	subs	r2, r2, r6
 8107f2e:	6122      	str	r2, [r4, #16]
 8107f30:	f8cd a000 	str.w	sl, [sp]
 8107f34:	464b      	mov	r3, r9
 8107f36:	aa03      	add	r2, sp, #12
 8107f38:	4621      	mov	r1, r4
 8107f3a:	4640      	mov	r0, r8
 8107f3c:	f7ff fee2 	bl	8107d04 <_printf_common>
 8107f40:	3001      	adds	r0, #1
 8107f42:	d14c      	bne.n	8107fde <_printf_i+0x1fe>
 8107f44:	f04f 30ff 	mov.w	r0, #4294967295
 8107f48:	b004      	add	sp, #16
 8107f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107f4e:	4835      	ldr	r0, [pc, #212]	; (8108024 <_printf_i+0x244>)
 8107f50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8107f54:	6823      	ldr	r3, [r4, #0]
 8107f56:	680e      	ldr	r6, [r1, #0]
 8107f58:	061f      	lsls	r7, r3, #24
 8107f5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8107f5e:	600e      	str	r6, [r1, #0]
 8107f60:	d514      	bpl.n	8107f8c <_printf_i+0x1ac>
 8107f62:	07d9      	lsls	r1, r3, #31
 8107f64:	bf44      	itt	mi
 8107f66:	f043 0320 	orrmi.w	r3, r3, #32
 8107f6a:	6023      	strmi	r3, [r4, #0]
 8107f6c:	b91d      	cbnz	r5, 8107f76 <_printf_i+0x196>
 8107f6e:	6823      	ldr	r3, [r4, #0]
 8107f70:	f023 0320 	bic.w	r3, r3, #32
 8107f74:	6023      	str	r3, [r4, #0]
 8107f76:	2310      	movs	r3, #16
 8107f78:	e7b0      	b.n	8107edc <_printf_i+0xfc>
 8107f7a:	6823      	ldr	r3, [r4, #0]
 8107f7c:	f043 0320 	orr.w	r3, r3, #32
 8107f80:	6023      	str	r3, [r4, #0]
 8107f82:	2378      	movs	r3, #120	; 0x78
 8107f84:	4828      	ldr	r0, [pc, #160]	; (8108028 <_printf_i+0x248>)
 8107f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8107f8a:	e7e3      	b.n	8107f54 <_printf_i+0x174>
 8107f8c:	065e      	lsls	r6, r3, #25
 8107f8e:	bf48      	it	mi
 8107f90:	b2ad      	uxthmi	r5, r5
 8107f92:	e7e6      	b.n	8107f62 <_printf_i+0x182>
 8107f94:	4616      	mov	r6, r2
 8107f96:	e7bb      	b.n	8107f10 <_printf_i+0x130>
 8107f98:	680b      	ldr	r3, [r1, #0]
 8107f9a:	6826      	ldr	r6, [r4, #0]
 8107f9c:	6960      	ldr	r0, [r4, #20]
 8107f9e:	1d1d      	adds	r5, r3, #4
 8107fa0:	600d      	str	r5, [r1, #0]
 8107fa2:	0635      	lsls	r5, r6, #24
 8107fa4:	681b      	ldr	r3, [r3, #0]
 8107fa6:	d501      	bpl.n	8107fac <_printf_i+0x1cc>
 8107fa8:	6018      	str	r0, [r3, #0]
 8107faa:	e002      	b.n	8107fb2 <_printf_i+0x1d2>
 8107fac:	0671      	lsls	r1, r6, #25
 8107fae:	d5fb      	bpl.n	8107fa8 <_printf_i+0x1c8>
 8107fb0:	8018      	strh	r0, [r3, #0]
 8107fb2:	2300      	movs	r3, #0
 8107fb4:	6123      	str	r3, [r4, #16]
 8107fb6:	4616      	mov	r6, r2
 8107fb8:	e7ba      	b.n	8107f30 <_printf_i+0x150>
 8107fba:	680b      	ldr	r3, [r1, #0]
 8107fbc:	1d1a      	adds	r2, r3, #4
 8107fbe:	600a      	str	r2, [r1, #0]
 8107fc0:	681e      	ldr	r6, [r3, #0]
 8107fc2:	6862      	ldr	r2, [r4, #4]
 8107fc4:	2100      	movs	r1, #0
 8107fc6:	4630      	mov	r0, r6
 8107fc8:	f7f8 f9a2 	bl	8100310 <memchr>
 8107fcc:	b108      	cbz	r0, 8107fd2 <_printf_i+0x1f2>
 8107fce:	1b80      	subs	r0, r0, r6
 8107fd0:	6060      	str	r0, [r4, #4]
 8107fd2:	6863      	ldr	r3, [r4, #4]
 8107fd4:	6123      	str	r3, [r4, #16]
 8107fd6:	2300      	movs	r3, #0
 8107fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107fdc:	e7a8      	b.n	8107f30 <_printf_i+0x150>
 8107fde:	6923      	ldr	r3, [r4, #16]
 8107fe0:	4632      	mov	r2, r6
 8107fe2:	4649      	mov	r1, r9
 8107fe4:	4640      	mov	r0, r8
 8107fe6:	47d0      	blx	sl
 8107fe8:	3001      	adds	r0, #1
 8107fea:	d0ab      	beq.n	8107f44 <_printf_i+0x164>
 8107fec:	6823      	ldr	r3, [r4, #0]
 8107fee:	079b      	lsls	r3, r3, #30
 8107ff0:	d413      	bmi.n	810801a <_printf_i+0x23a>
 8107ff2:	68e0      	ldr	r0, [r4, #12]
 8107ff4:	9b03      	ldr	r3, [sp, #12]
 8107ff6:	4298      	cmp	r0, r3
 8107ff8:	bfb8      	it	lt
 8107ffa:	4618      	movlt	r0, r3
 8107ffc:	e7a4      	b.n	8107f48 <_printf_i+0x168>
 8107ffe:	2301      	movs	r3, #1
 8108000:	4632      	mov	r2, r6
 8108002:	4649      	mov	r1, r9
 8108004:	4640      	mov	r0, r8
 8108006:	47d0      	blx	sl
 8108008:	3001      	adds	r0, #1
 810800a:	d09b      	beq.n	8107f44 <_printf_i+0x164>
 810800c:	3501      	adds	r5, #1
 810800e:	68e3      	ldr	r3, [r4, #12]
 8108010:	9903      	ldr	r1, [sp, #12]
 8108012:	1a5b      	subs	r3, r3, r1
 8108014:	42ab      	cmp	r3, r5
 8108016:	dcf2      	bgt.n	8107ffe <_printf_i+0x21e>
 8108018:	e7eb      	b.n	8107ff2 <_printf_i+0x212>
 810801a:	2500      	movs	r5, #0
 810801c:	f104 0619 	add.w	r6, r4, #25
 8108020:	e7f5      	b.n	810800e <_printf_i+0x22e>
 8108022:	bf00      	nop
 8108024:	0810be03 	.word	0x0810be03
 8108028:	0810be14 	.word	0x0810be14

0810802c <_scanf_float>:
 810802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108030:	b087      	sub	sp, #28
 8108032:	4617      	mov	r7, r2
 8108034:	9303      	str	r3, [sp, #12]
 8108036:	688b      	ldr	r3, [r1, #8]
 8108038:	1e5a      	subs	r2, r3, #1
 810803a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810803e:	bf83      	ittte	hi
 8108040:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8108044:	195b      	addhi	r3, r3, r5
 8108046:	9302      	strhi	r3, [sp, #8]
 8108048:	2300      	movls	r3, #0
 810804a:	bf86      	itte	hi
 810804c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8108050:	608b      	strhi	r3, [r1, #8]
 8108052:	9302      	strls	r3, [sp, #8]
 8108054:	680b      	ldr	r3, [r1, #0]
 8108056:	468b      	mov	fp, r1
 8108058:	2500      	movs	r5, #0
 810805a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810805e:	f84b 3b1c 	str.w	r3, [fp], #28
 8108062:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8108066:	4680      	mov	r8, r0
 8108068:	460c      	mov	r4, r1
 810806a:	465e      	mov	r6, fp
 810806c:	46aa      	mov	sl, r5
 810806e:	46a9      	mov	r9, r5
 8108070:	9501      	str	r5, [sp, #4]
 8108072:	68a2      	ldr	r2, [r4, #8]
 8108074:	b152      	cbz	r2, 810808c <_scanf_float+0x60>
 8108076:	683b      	ldr	r3, [r7, #0]
 8108078:	781b      	ldrb	r3, [r3, #0]
 810807a:	2b4e      	cmp	r3, #78	; 0x4e
 810807c:	d864      	bhi.n	8108148 <_scanf_float+0x11c>
 810807e:	2b40      	cmp	r3, #64	; 0x40
 8108080:	d83c      	bhi.n	81080fc <_scanf_float+0xd0>
 8108082:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108086:	b2c8      	uxtb	r0, r1
 8108088:	280e      	cmp	r0, #14
 810808a:	d93a      	bls.n	8108102 <_scanf_float+0xd6>
 810808c:	f1b9 0f00 	cmp.w	r9, #0
 8108090:	d003      	beq.n	810809a <_scanf_float+0x6e>
 8108092:	6823      	ldr	r3, [r4, #0]
 8108094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108098:	6023      	str	r3, [r4, #0]
 810809a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810809e:	f1ba 0f01 	cmp.w	sl, #1
 81080a2:	f200 8113 	bhi.w	81082cc <_scanf_float+0x2a0>
 81080a6:	455e      	cmp	r6, fp
 81080a8:	f200 8105 	bhi.w	81082b6 <_scanf_float+0x28a>
 81080ac:	2501      	movs	r5, #1
 81080ae:	4628      	mov	r0, r5
 81080b0:	b007      	add	sp, #28
 81080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81080b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81080ba:	2a0d      	cmp	r2, #13
 81080bc:	d8e6      	bhi.n	810808c <_scanf_float+0x60>
 81080be:	a101      	add	r1, pc, #4	; (adr r1, 81080c4 <_scanf_float+0x98>)
 81080c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81080c4:	08108203 	.word	0x08108203
 81080c8:	0810808d 	.word	0x0810808d
 81080cc:	0810808d 	.word	0x0810808d
 81080d0:	0810808d 	.word	0x0810808d
 81080d4:	08108263 	.word	0x08108263
 81080d8:	0810823b 	.word	0x0810823b
 81080dc:	0810808d 	.word	0x0810808d
 81080e0:	0810808d 	.word	0x0810808d
 81080e4:	08108211 	.word	0x08108211
 81080e8:	0810808d 	.word	0x0810808d
 81080ec:	0810808d 	.word	0x0810808d
 81080f0:	0810808d 	.word	0x0810808d
 81080f4:	0810808d 	.word	0x0810808d
 81080f8:	081081c9 	.word	0x081081c9
 81080fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8108100:	e7db      	b.n	81080ba <_scanf_float+0x8e>
 8108102:	290e      	cmp	r1, #14
 8108104:	d8c2      	bhi.n	810808c <_scanf_float+0x60>
 8108106:	a001      	add	r0, pc, #4	; (adr r0, 810810c <_scanf_float+0xe0>)
 8108108:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810810c:	081081bb 	.word	0x081081bb
 8108110:	0810808d 	.word	0x0810808d
 8108114:	081081bb 	.word	0x081081bb
 8108118:	0810824f 	.word	0x0810824f
 810811c:	0810808d 	.word	0x0810808d
 8108120:	08108169 	.word	0x08108169
 8108124:	081081a5 	.word	0x081081a5
 8108128:	081081a5 	.word	0x081081a5
 810812c:	081081a5 	.word	0x081081a5
 8108130:	081081a5 	.word	0x081081a5
 8108134:	081081a5 	.word	0x081081a5
 8108138:	081081a5 	.word	0x081081a5
 810813c:	081081a5 	.word	0x081081a5
 8108140:	081081a5 	.word	0x081081a5
 8108144:	081081a5 	.word	0x081081a5
 8108148:	2b6e      	cmp	r3, #110	; 0x6e
 810814a:	d809      	bhi.n	8108160 <_scanf_float+0x134>
 810814c:	2b60      	cmp	r3, #96	; 0x60
 810814e:	d8b2      	bhi.n	81080b6 <_scanf_float+0x8a>
 8108150:	2b54      	cmp	r3, #84	; 0x54
 8108152:	d077      	beq.n	8108244 <_scanf_float+0x218>
 8108154:	2b59      	cmp	r3, #89	; 0x59
 8108156:	d199      	bne.n	810808c <_scanf_float+0x60>
 8108158:	2d07      	cmp	r5, #7
 810815a:	d197      	bne.n	810808c <_scanf_float+0x60>
 810815c:	2508      	movs	r5, #8
 810815e:	e029      	b.n	81081b4 <_scanf_float+0x188>
 8108160:	2b74      	cmp	r3, #116	; 0x74
 8108162:	d06f      	beq.n	8108244 <_scanf_float+0x218>
 8108164:	2b79      	cmp	r3, #121	; 0x79
 8108166:	e7f6      	b.n	8108156 <_scanf_float+0x12a>
 8108168:	6821      	ldr	r1, [r4, #0]
 810816a:	05c8      	lsls	r0, r1, #23
 810816c:	d51a      	bpl.n	81081a4 <_scanf_float+0x178>
 810816e:	9b02      	ldr	r3, [sp, #8]
 8108170:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108174:	6021      	str	r1, [r4, #0]
 8108176:	f109 0901 	add.w	r9, r9, #1
 810817a:	b11b      	cbz	r3, 8108184 <_scanf_float+0x158>
 810817c:	3b01      	subs	r3, #1
 810817e:	3201      	adds	r2, #1
 8108180:	9302      	str	r3, [sp, #8]
 8108182:	60a2      	str	r2, [r4, #8]
 8108184:	68a3      	ldr	r3, [r4, #8]
 8108186:	3b01      	subs	r3, #1
 8108188:	60a3      	str	r3, [r4, #8]
 810818a:	6923      	ldr	r3, [r4, #16]
 810818c:	3301      	adds	r3, #1
 810818e:	6123      	str	r3, [r4, #16]
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	3b01      	subs	r3, #1
 8108194:	2b00      	cmp	r3, #0
 8108196:	607b      	str	r3, [r7, #4]
 8108198:	f340 8084 	ble.w	81082a4 <_scanf_float+0x278>
 810819c:	683b      	ldr	r3, [r7, #0]
 810819e:	3301      	adds	r3, #1
 81081a0:	603b      	str	r3, [r7, #0]
 81081a2:	e766      	b.n	8108072 <_scanf_float+0x46>
 81081a4:	eb1a 0f05 	cmn.w	sl, r5
 81081a8:	f47f af70 	bne.w	810808c <_scanf_float+0x60>
 81081ac:	6822      	ldr	r2, [r4, #0]
 81081ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81081b2:	6022      	str	r2, [r4, #0]
 81081b4:	f806 3b01 	strb.w	r3, [r6], #1
 81081b8:	e7e4      	b.n	8108184 <_scanf_float+0x158>
 81081ba:	6822      	ldr	r2, [r4, #0]
 81081bc:	0610      	lsls	r0, r2, #24
 81081be:	f57f af65 	bpl.w	810808c <_scanf_float+0x60>
 81081c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81081c6:	e7f4      	b.n	81081b2 <_scanf_float+0x186>
 81081c8:	f1ba 0f00 	cmp.w	sl, #0
 81081cc:	d10e      	bne.n	81081ec <_scanf_float+0x1c0>
 81081ce:	f1b9 0f00 	cmp.w	r9, #0
 81081d2:	d10e      	bne.n	81081f2 <_scanf_float+0x1c6>
 81081d4:	6822      	ldr	r2, [r4, #0]
 81081d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81081da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81081de:	d108      	bne.n	81081f2 <_scanf_float+0x1c6>
 81081e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81081e4:	6022      	str	r2, [r4, #0]
 81081e6:	f04f 0a01 	mov.w	sl, #1
 81081ea:	e7e3      	b.n	81081b4 <_scanf_float+0x188>
 81081ec:	f1ba 0f02 	cmp.w	sl, #2
 81081f0:	d055      	beq.n	810829e <_scanf_float+0x272>
 81081f2:	2d01      	cmp	r5, #1
 81081f4:	d002      	beq.n	81081fc <_scanf_float+0x1d0>
 81081f6:	2d04      	cmp	r5, #4
 81081f8:	f47f af48 	bne.w	810808c <_scanf_float+0x60>
 81081fc:	3501      	adds	r5, #1
 81081fe:	b2ed      	uxtb	r5, r5
 8108200:	e7d8      	b.n	81081b4 <_scanf_float+0x188>
 8108202:	f1ba 0f01 	cmp.w	sl, #1
 8108206:	f47f af41 	bne.w	810808c <_scanf_float+0x60>
 810820a:	f04f 0a02 	mov.w	sl, #2
 810820e:	e7d1      	b.n	81081b4 <_scanf_float+0x188>
 8108210:	b97d      	cbnz	r5, 8108232 <_scanf_float+0x206>
 8108212:	f1b9 0f00 	cmp.w	r9, #0
 8108216:	f47f af3c 	bne.w	8108092 <_scanf_float+0x66>
 810821a:	6822      	ldr	r2, [r4, #0]
 810821c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108220:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108224:	f47f af39 	bne.w	810809a <_scanf_float+0x6e>
 8108228:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810822c:	6022      	str	r2, [r4, #0]
 810822e:	2501      	movs	r5, #1
 8108230:	e7c0      	b.n	81081b4 <_scanf_float+0x188>
 8108232:	2d03      	cmp	r5, #3
 8108234:	d0e2      	beq.n	81081fc <_scanf_float+0x1d0>
 8108236:	2d05      	cmp	r5, #5
 8108238:	e7de      	b.n	81081f8 <_scanf_float+0x1cc>
 810823a:	2d02      	cmp	r5, #2
 810823c:	f47f af26 	bne.w	810808c <_scanf_float+0x60>
 8108240:	2503      	movs	r5, #3
 8108242:	e7b7      	b.n	81081b4 <_scanf_float+0x188>
 8108244:	2d06      	cmp	r5, #6
 8108246:	f47f af21 	bne.w	810808c <_scanf_float+0x60>
 810824a:	2507      	movs	r5, #7
 810824c:	e7b2      	b.n	81081b4 <_scanf_float+0x188>
 810824e:	6822      	ldr	r2, [r4, #0]
 8108250:	0591      	lsls	r1, r2, #22
 8108252:	f57f af1b 	bpl.w	810808c <_scanf_float+0x60>
 8108256:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810825a:	6022      	str	r2, [r4, #0]
 810825c:	f8cd 9004 	str.w	r9, [sp, #4]
 8108260:	e7a8      	b.n	81081b4 <_scanf_float+0x188>
 8108262:	6822      	ldr	r2, [r4, #0]
 8108264:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8108268:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810826c:	d006      	beq.n	810827c <_scanf_float+0x250>
 810826e:	0550      	lsls	r0, r2, #21
 8108270:	f57f af0c 	bpl.w	810808c <_scanf_float+0x60>
 8108274:	f1b9 0f00 	cmp.w	r9, #0
 8108278:	f43f af0f 	beq.w	810809a <_scanf_float+0x6e>
 810827c:	0591      	lsls	r1, r2, #22
 810827e:	bf58      	it	pl
 8108280:	9901      	ldrpl	r1, [sp, #4]
 8108282:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108286:	bf58      	it	pl
 8108288:	eba9 0101 	subpl.w	r1, r9, r1
 810828c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8108290:	bf58      	it	pl
 8108292:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8108296:	6022      	str	r2, [r4, #0]
 8108298:	f04f 0900 	mov.w	r9, #0
 810829c:	e78a      	b.n	81081b4 <_scanf_float+0x188>
 810829e:	f04f 0a03 	mov.w	sl, #3
 81082a2:	e787      	b.n	81081b4 <_scanf_float+0x188>
 81082a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81082a8:	4639      	mov	r1, r7
 81082aa:	4640      	mov	r0, r8
 81082ac:	4798      	blx	r3
 81082ae:	2800      	cmp	r0, #0
 81082b0:	f43f aedf 	beq.w	8108072 <_scanf_float+0x46>
 81082b4:	e6ea      	b.n	810808c <_scanf_float+0x60>
 81082b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81082be:	463a      	mov	r2, r7
 81082c0:	4640      	mov	r0, r8
 81082c2:	4798      	blx	r3
 81082c4:	6923      	ldr	r3, [r4, #16]
 81082c6:	3b01      	subs	r3, #1
 81082c8:	6123      	str	r3, [r4, #16]
 81082ca:	e6ec      	b.n	81080a6 <_scanf_float+0x7a>
 81082cc:	1e6b      	subs	r3, r5, #1
 81082ce:	2b06      	cmp	r3, #6
 81082d0:	d825      	bhi.n	810831e <_scanf_float+0x2f2>
 81082d2:	2d02      	cmp	r5, #2
 81082d4:	d836      	bhi.n	8108344 <_scanf_float+0x318>
 81082d6:	455e      	cmp	r6, fp
 81082d8:	f67f aee8 	bls.w	81080ac <_scanf_float+0x80>
 81082dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81082e4:	463a      	mov	r2, r7
 81082e6:	4640      	mov	r0, r8
 81082e8:	4798      	blx	r3
 81082ea:	6923      	ldr	r3, [r4, #16]
 81082ec:	3b01      	subs	r3, #1
 81082ee:	6123      	str	r3, [r4, #16]
 81082f0:	e7f1      	b.n	81082d6 <_scanf_float+0x2aa>
 81082f2:	9802      	ldr	r0, [sp, #8]
 81082f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81082f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81082fc:	9002      	str	r0, [sp, #8]
 81082fe:	463a      	mov	r2, r7
 8108300:	4640      	mov	r0, r8
 8108302:	4798      	blx	r3
 8108304:	6923      	ldr	r3, [r4, #16]
 8108306:	3b01      	subs	r3, #1
 8108308:	6123      	str	r3, [r4, #16]
 810830a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810830e:	fa5f fa8a 	uxtb.w	sl, sl
 8108312:	f1ba 0f02 	cmp.w	sl, #2
 8108316:	d1ec      	bne.n	81082f2 <_scanf_float+0x2c6>
 8108318:	3d03      	subs	r5, #3
 810831a:	b2ed      	uxtb	r5, r5
 810831c:	1b76      	subs	r6, r6, r5
 810831e:	6823      	ldr	r3, [r4, #0]
 8108320:	05da      	lsls	r2, r3, #23
 8108322:	d52f      	bpl.n	8108384 <_scanf_float+0x358>
 8108324:	055b      	lsls	r3, r3, #21
 8108326:	d510      	bpl.n	810834a <_scanf_float+0x31e>
 8108328:	455e      	cmp	r6, fp
 810832a:	f67f aebf 	bls.w	81080ac <_scanf_float+0x80>
 810832e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108336:	463a      	mov	r2, r7
 8108338:	4640      	mov	r0, r8
 810833a:	4798      	blx	r3
 810833c:	6923      	ldr	r3, [r4, #16]
 810833e:	3b01      	subs	r3, #1
 8108340:	6123      	str	r3, [r4, #16]
 8108342:	e7f1      	b.n	8108328 <_scanf_float+0x2fc>
 8108344:	46aa      	mov	sl, r5
 8108346:	9602      	str	r6, [sp, #8]
 8108348:	e7df      	b.n	810830a <_scanf_float+0x2de>
 810834a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810834e:	6923      	ldr	r3, [r4, #16]
 8108350:	2965      	cmp	r1, #101	; 0x65
 8108352:	f103 33ff 	add.w	r3, r3, #4294967295
 8108356:	f106 35ff 	add.w	r5, r6, #4294967295
 810835a:	6123      	str	r3, [r4, #16]
 810835c:	d00c      	beq.n	8108378 <_scanf_float+0x34c>
 810835e:	2945      	cmp	r1, #69	; 0x45
 8108360:	d00a      	beq.n	8108378 <_scanf_float+0x34c>
 8108362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108366:	463a      	mov	r2, r7
 8108368:	4640      	mov	r0, r8
 810836a:	4798      	blx	r3
 810836c:	6923      	ldr	r3, [r4, #16]
 810836e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8108372:	3b01      	subs	r3, #1
 8108374:	1eb5      	subs	r5, r6, #2
 8108376:	6123      	str	r3, [r4, #16]
 8108378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810837c:	463a      	mov	r2, r7
 810837e:	4640      	mov	r0, r8
 8108380:	4798      	blx	r3
 8108382:	462e      	mov	r6, r5
 8108384:	6825      	ldr	r5, [r4, #0]
 8108386:	f015 0510 	ands.w	r5, r5, #16
 810838a:	d158      	bne.n	810843e <_scanf_float+0x412>
 810838c:	7035      	strb	r5, [r6, #0]
 810838e:	6823      	ldr	r3, [r4, #0]
 8108390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8108394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108398:	d11c      	bne.n	81083d4 <_scanf_float+0x3a8>
 810839a:	9b01      	ldr	r3, [sp, #4]
 810839c:	454b      	cmp	r3, r9
 810839e:	eba3 0209 	sub.w	r2, r3, r9
 81083a2:	d124      	bne.n	81083ee <_scanf_float+0x3c2>
 81083a4:	2200      	movs	r2, #0
 81083a6:	4659      	mov	r1, fp
 81083a8:	4640      	mov	r0, r8
 81083aa:	f000 fed3 	bl	8109154 <_strtod_r>
 81083ae:	9b03      	ldr	r3, [sp, #12]
 81083b0:	6821      	ldr	r1, [r4, #0]
 81083b2:	681b      	ldr	r3, [r3, #0]
 81083b4:	f011 0f02 	tst.w	r1, #2
 81083b8:	ec57 6b10 	vmov	r6, r7, d0
 81083bc:	f103 0204 	add.w	r2, r3, #4
 81083c0:	d020      	beq.n	8108404 <_scanf_float+0x3d8>
 81083c2:	9903      	ldr	r1, [sp, #12]
 81083c4:	600a      	str	r2, [r1, #0]
 81083c6:	681b      	ldr	r3, [r3, #0]
 81083c8:	e9c3 6700 	strd	r6, r7, [r3]
 81083cc:	68e3      	ldr	r3, [r4, #12]
 81083ce:	3301      	adds	r3, #1
 81083d0:	60e3      	str	r3, [r4, #12]
 81083d2:	e66c      	b.n	81080ae <_scanf_float+0x82>
 81083d4:	9b04      	ldr	r3, [sp, #16]
 81083d6:	2b00      	cmp	r3, #0
 81083d8:	d0e4      	beq.n	81083a4 <_scanf_float+0x378>
 81083da:	9905      	ldr	r1, [sp, #20]
 81083dc:	230a      	movs	r3, #10
 81083de:	462a      	mov	r2, r5
 81083e0:	3101      	adds	r1, #1
 81083e2:	4640      	mov	r0, r8
 81083e4:	f000 ff40 	bl	8109268 <_strtol_r>
 81083e8:	9b04      	ldr	r3, [sp, #16]
 81083ea:	9e05      	ldr	r6, [sp, #20]
 81083ec:	1ac2      	subs	r2, r0, r3
 81083ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81083f2:	429e      	cmp	r6, r3
 81083f4:	bf28      	it	cs
 81083f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81083fa:	4912      	ldr	r1, [pc, #72]	; (8108444 <_scanf_float+0x418>)
 81083fc:	4630      	mov	r0, r6
 81083fe:	f000 f83b 	bl	8108478 <siprintf>
 8108402:	e7cf      	b.n	81083a4 <_scanf_float+0x378>
 8108404:	f011 0f04 	tst.w	r1, #4
 8108408:	9903      	ldr	r1, [sp, #12]
 810840a:	600a      	str	r2, [r1, #0]
 810840c:	d1db      	bne.n	81083c6 <_scanf_float+0x39a>
 810840e:	f8d3 8000 	ldr.w	r8, [r3]
 8108412:	ee10 2a10 	vmov	r2, s0
 8108416:	ee10 0a10 	vmov	r0, s0
 810841a:	463b      	mov	r3, r7
 810841c:	4639      	mov	r1, r7
 810841e:	f7f8 fc1d 	bl	8100c5c <__aeabi_dcmpun>
 8108422:	b128      	cbz	r0, 8108430 <_scanf_float+0x404>
 8108424:	4808      	ldr	r0, [pc, #32]	; (8108448 <_scanf_float+0x41c>)
 8108426:	f000 f821 	bl	810846c <nanf>
 810842a:	ed88 0a00 	vstr	s0, [r8]
 810842e:	e7cd      	b.n	81083cc <_scanf_float+0x3a0>
 8108430:	4630      	mov	r0, r6
 8108432:	4639      	mov	r1, r7
 8108434:	f7f8 fc70 	bl	8100d18 <__aeabi_d2f>
 8108438:	f8c8 0000 	str.w	r0, [r8]
 810843c:	e7c6      	b.n	81083cc <_scanf_float+0x3a0>
 810843e:	2500      	movs	r5, #0
 8108440:	e635      	b.n	81080ae <_scanf_float+0x82>
 8108442:	bf00      	nop
 8108444:	0810be25 	.word	0x0810be25
 8108448:	0810bdd9 	.word	0x0810bdd9

0810844c <_sbrk_r>:
 810844c:	b538      	push	{r3, r4, r5, lr}
 810844e:	4d06      	ldr	r5, [pc, #24]	; (8108468 <_sbrk_r+0x1c>)
 8108450:	2300      	movs	r3, #0
 8108452:	4604      	mov	r4, r0
 8108454:	4608      	mov	r0, r1
 8108456:	602b      	str	r3, [r5, #0]
 8108458:	f7f9 f958 	bl	810170c <_sbrk>
 810845c:	1c43      	adds	r3, r0, #1
 810845e:	d102      	bne.n	8108466 <_sbrk_r+0x1a>
 8108460:	682b      	ldr	r3, [r5, #0]
 8108462:	b103      	cbz	r3, 8108466 <_sbrk_r+0x1a>
 8108464:	6023      	str	r3, [r4, #0]
 8108466:	bd38      	pop	{r3, r4, r5, pc}
 8108468:	10000528 	.word	0x10000528

0810846c <nanf>:
 810846c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8108474 <nanf+0x8>
 8108470:	4770      	bx	lr
 8108472:	bf00      	nop
 8108474:	7fc00000 	.word	0x7fc00000

08108478 <siprintf>:
 8108478:	b40e      	push	{r1, r2, r3}
 810847a:	b500      	push	{lr}
 810847c:	b09c      	sub	sp, #112	; 0x70
 810847e:	ab1d      	add	r3, sp, #116	; 0x74
 8108480:	9002      	str	r0, [sp, #8]
 8108482:	9006      	str	r0, [sp, #24]
 8108484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108488:	4809      	ldr	r0, [pc, #36]	; (81084b0 <siprintf+0x38>)
 810848a:	9107      	str	r1, [sp, #28]
 810848c:	9104      	str	r1, [sp, #16]
 810848e:	4909      	ldr	r1, [pc, #36]	; (81084b4 <siprintf+0x3c>)
 8108490:	f853 2b04 	ldr.w	r2, [r3], #4
 8108494:	9105      	str	r1, [sp, #20]
 8108496:	6800      	ldr	r0, [r0, #0]
 8108498:	9301      	str	r3, [sp, #4]
 810849a:	a902      	add	r1, sp, #8
 810849c:	f003 f93a 	bl	810b714 <_svfiprintf_r>
 81084a0:	9b02      	ldr	r3, [sp, #8]
 81084a2:	2200      	movs	r2, #0
 81084a4:	701a      	strb	r2, [r3, #0]
 81084a6:	b01c      	add	sp, #112	; 0x70
 81084a8:	f85d eb04 	ldr.w	lr, [sp], #4
 81084ac:	b003      	add	sp, #12
 81084ae:	4770      	bx	lr
 81084b0:	100000b8 	.word	0x100000b8
 81084b4:	ffff0208 	.word	0xffff0208

081084b8 <strncmp>:
 81084b8:	b510      	push	{r4, lr}
 81084ba:	b16a      	cbz	r2, 81084d8 <strncmp+0x20>
 81084bc:	3901      	subs	r1, #1
 81084be:	1884      	adds	r4, r0, r2
 81084c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 81084c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 81084c8:	4293      	cmp	r3, r2
 81084ca:	d103      	bne.n	81084d4 <strncmp+0x1c>
 81084cc:	42a0      	cmp	r0, r4
 81084ce:	d001      	beq.n	81084d4 <strncmp+0x1c>
 81084d0:	2b00      	cmp	r3, #0
 81084d2:	d1f5      	bne.n	81084c0 <strncmp+0x8>
 81084d4:	1a98      	subs	r0, r3, r2
 81084d6:	bd10      	pop	{r4, pc}
 81084d8:	4610      	mov	r0, r2
 81084da:	e7fc      	b.n	81084d6 <strncmp+0x1e>

081084dc <strncpy>:
 81084dc:	b510      	push	{r4, lr}
 81084de:	3901      	subs	r1, #1
 81084e0:	4603      	mov	r3, r0
 81084e2:	b132      	cbz	r2, 81084f2 <strncpy+0x16>
 81084e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81084e8:	f803 4b01 	strb.w	r4, [r3], #1
 81084ec:	3a01      	subs	r2, #1
 81084ee:	2c00      	cmp	r4, #0
 81084f0:	d1f7      	bne.n	81084e2 <strncpy+0x6>
 81084f2:	441a      	add	r2, r3
 81084f4:	2100      	movs	r1, #0
 81084f6:	4293      	cmp	r3, r2
 81084f8:	d100      	bne.n	81084fc <strncpy+0x20>
 81084fa:	bd10      	pop	{r4, pc}
 81084fc:	f803 1b01 	strb.w	r1, [r3], #1
 8108500:	e7f9      	b.n	81084f6 <strncpy+0x1a>

08108502 <sulp>:
 8108502:	b570      	push	{r4, r5, r6, lr}
 8108504:	4604      	mov	r4, r0
 8108506:	460d      	mov	r5, r1
 8108508:	ec45 4b10 	vmov	d0, r4, r5
 810850c:	4616      	mov	r6, r2
 810850e:	f002 ff21 	bl	810b354 <__ulp>
 8108512:	ec51 0b10 	vmov	r0, r1, d0
 8108516:	b17e      	cbz	r6, 8108538 <sulp+0x36>
 8108518:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810851c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108520:	2b00      	cmp	r3, #0
 8108522:	dd09      	ble.n	8108538 <sulp+0x36>
 8108524:	051b      	lsls	r3, r3, #20
 8108526:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810852a:	2400      	movs	r4, #0
 810852c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8108530:	4622      	mov	r2, r4
 8108532:	462b      	mov	r3, r5
 8108534:	f7f8 f8f8 	bl	8100728 <__aeabi_dmul>
 8108538:	bd70      	pop	{r4, r5, r6, pc}
 810853a:	0000      	movs	r0, r0
 810853c:	0000      	movs	r0, r0
	...

08108540 <_strtod_l>:
 8108540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108544:	b0a3      	sub	sp, #140	; 0x8c
 8108546:	461f      	mov	r7, r3
 8108548:	2300      	movs	r3, #0
 810854a:	931e      	str	r3, [sp, #120]	; 0x78
 810854c:	4ba4      	ldr	r3, [pc, #656]	; (81087e0 <_strtod_l+0x2a0>)
 810854e:	9219      	str	r2, [sp, #100]	; 0x64
 8108550:	681b      	ldr	r3, [r3, #0]
 8108552:	9307      	str	r3, [sp, #28]
 8108554:	4604      	mov	r4, r0
 8108556:	4618      	mov	r0, r3
 8108558:	4688      	mov	r8, r1
 810855a:	f7f7 fecb 	bl	81002f4 <strlen>
 810855e:	f04f 0a00 	mov.w	sl, #0
 8108562:	4605      	mov	r5, r0
 8108564:	f04f 0b00 	mov.w	fp, #0
 8108568:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810856c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810856e:	781a      	ldrb	r2, [r3, #0]
 8108570:	2a2b      	cmp	r2, #43	; 0x2b
 8108572:	d04c      	beq.n	810860e <_strtod_l+0xce>
 8108574:	d839      	bhi.n	81085ea <_strtod_l+0xaa>
 8108576:	2a0d      	cmp	r2, #13
 8108578:	d832      	bhi.n	81085e0 <_strtod_l+0xa0>
 810857a:	2a08      	cmp	r2, #8
 810857c:	d832      	bhi.n	81085e4 <_strtod_l+0xa4>
 810857e:	2a00      	cmp	r2, #0
 8108580:	d03c      	beq.n	81085fc <_strtod_l+0xbc>
 8108582:	2300      	movs	r3, #0
 8108584:	930e      	str	r3, [sp, #56]	; 0x38
 8108586:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8108588:	7833      	ldrb	r3, [r6, #0]
 810858a:	2b30      	cmp	r3, #48	; 0x30
 810858c:	f040 80b4 	bne.w	81086f8 <_strtod_l+0x1b8>
 8108590:	7873      	ldrb	r3, [r6, #1]
 8108592:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8108596:	2b58      	cmp	r3, #88	; 0x58
 8108598:	d16c      	bne.n	8108674 <_strtod_l+0x134>
 810859a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810859c:	9301      	str	r3, [sp, #4]
 810859e:	ab1e      	add	r3, sp, #120	; 0x78
 81085a0:	9702      	str	r7, [sp, #8]
 81085a2:	9300      	str	r3, [sp, #0]
 81085a4:	4a8f      	ldr	r2, [pc, #572]	; (81087e4 <_strtod_l+0x2a4>)
 81085a6:	ab1f      	add	r3, sp, #124	; 0x7c
 81085a8:	a91d      	add	r1, sp, #116	; 0x74
 81085aa:	4620      	mov	r0, r4
 81085ac:	f001 ffba 	bl	810a524 <__gethex>
 81085b0:	f010 0707 	ands.w	r7, r0, #7
 81085b4:	4605      	mov	r5, r0
 81085b6:	d005      	beq.n	81085c4 <_strtod_l+0x84>
 81085b8:	2f06      	cmp	r7, #6
 81085ba:	d12a      	bne.n	8108612 <_strtod_l+0xd2>
 81085bc:	3601      	adds	r6, #1
 81085be:	2300      	movs	r3, #0
 81085c0:	961d      	str	r6, [sp, #116]	; 0x74
 81085c2:	930e      	str	r3, [sp, #56]	; 0x38
 81085c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81085c6:	2b00      	cmp	r3, #0
 81085c8:	f040 8596 	bne.w	81090f8 <_strtod_l+0xbb8>
 81085cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81085ce:	b1db      	cbz	r3, 8108608 <_strtod_l+0xc8>
 81085d0:	4652      	mov	r2, sl
 81085d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 81085d6:	ec43 2b10 	vmov	d0, r2, r3
 81085da:	b023      	add	sp, #140	; 0x8c
 81085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81085e0:	2a20      	cmp	r2, #32
 81085e2:	d1ce      	bne.n	8108582 <_strtod_l+0x42>
 81085e4:	3301      	adds	r3, #1
 81085e6:	931d      	str	r3, [sp, #116]	; 0x74
 81085e8:	e7c0      	b.n	810856c <_strtod_l+0x2c>
 81085ea:	2a2d      	cmp	r2, #45	; 0x2d
 81085ec:	d1c9      	bne.n	8108582 <_strtod_l+0x42>
 81085ee:	2201      	movs	r2, #1
 81085f0:	920e      	str	r2, [sp, #56]	; 0x38
 81085f2:	1c5a      	adds	r2, r3, #1
 81085f4:	921d      	str	r2, [sp, #116]	; 0x74
 81085f6:	785b      	ldrb	r3, [r3, #1]
 81085f8:	2b00      	cmp	r3, #0
 81085fa:	d1c4      	bne.n	8108586 <_strtod_l+0x46>
 81085fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81085fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108602:	2b00      	cmp	r3, #0
 8108604:	f040 8576 	bne.w	81090f4 <_strtod_l+0xbb4>
 8108608:	4652      	mov	r2, sl
 810860a:	465b      	mov	r3, fp
 810860c:	e7e3      	b.n	81085d6 <_strtod_l+0x96>
 810860e:	2200      	movs	r2, #0
 8108610:	e7ee      	b.n	81085f0 <_strtod_l+0xb0>
 8108612:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108614:	b13a      	cbz	r2, 8108626 <_strtod_l+0xe6>
 8108616:	2135      	movs	r1, #53	; 0x35
 8108618:	a820      	add	r0, sp, #128	; 0x80
 810861a:	f002 ffa6 	bl	810b56a <__copybits>
 810861e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108620:	4620      	mov	r0, r4
 8108622:	f002 fb6b 	bl	810acfc <_Bfree>
 8108626:	3f01      	subs	r7, #1
 8108628:	2f05      	cmp	r7, #5
 810862a:	d807      	bhi.n	810863c <_strtod_l+0xfc>
 810862c:	e8df f007 	tbb	[pc, r7]
 8108630:	1d180b0e 	.word	0x1d180b0e
 8108634:	030e      	.short	0x030e
 8108636:	f04f 0b00 	mov.w	fp, #0
 810863a:	46da      	mov	sl, fp
 810863c:	0728      	lsls	r0, r5, #28
 810863e:	d5c1      	bpl.n	81085c4 <_strtod_l+0x84>
 8108640:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8108644:	e7be      	b.n	81085c4 <_strtod_l+0x84>
 8108646:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 810864a:	e7f7      	b.n	810863c <_strtod_l+0xfc>
 810864c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8108650:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8108652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8108656:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810865a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810865e:	e7ed      	b.n	810863c <_strtod_l+0xfc>
 8108660:	f8df b184 	ldr.w	fp, [pc, #388]	; 81087e8 <_strtod_l+0x2a8>
 8108664:	f04f 0a00 	mov.w	sl, #0
 8108668:	e7e8      	b.n	810863c <_strtod_l+0xfc>
 810866a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810866e:	f04f 3aff 	mov.w	sl, #4294967295
 8108672:	e7e3      	b.n	810863c <_strtod_l+0xfc>
 8108674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108676:	1c5a      	adds	r2, r3, #1
 8108678:	921d      	str	r2, [sp, #116]	; 0x74
 810867a:	785b      	ldrb	r3, [r3, #1]
 810867c:	2b30      	cmp	r3, #48	; 0x30
 810867e:	d0f9      	beq.n	8108674 <_strtod_l+0x134>
 8108680:	2b00      	cmp	r3, #0
 8108682:	d09f      	beq.n	81085c4 <_strtod_l+0x84>
 8108684:	2301      	movs	r3, #1
 8108686:	f04f 0900 	mov.w	r9, #0
 810868a:	9304      	str	r3, [sp, #16]
 810868c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810868e:	930a      	str	r3, [sp, #40]	; 0x28
 8108690:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8108694:	464f      	mov	r7, r9
 8108696:	220a      	movs	r2, #10
 8108698:	981d      	ldr	r0, [sp, #116]	; 0x74
 810869a:	7806      	ldrb	r6, [r0, #0]
 810869c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 81086a0:	b2d9      	uxtb	r1, r3
 81086a2:	2909      	cmp	r1, #9
 81086a4:	d92a      	bls.n	81086fc <_strtod_l+0x1bc>
 81086a6:	9907      	ldr	r1, [sp, #28]
 81086a8:	462a      	mov	r2, r5
 81086aa:	f7ff ff05 	bl	81084b8 <strncmp>
 81086ae:	b398      	cbz	r0, 8108718 <_strtod_l+0x1d8>
 81086b0:	2000      	movs	r0, #0
 81086b2:	4633      	mov	r3, r6
 81086b4:	463d      	mov	r5, r7
 81086b6:	9007      	str	r0, [sp, #28]
 81086b8:	4602      	mov	r2, r0
 81086ba:	2b65      	cmp	r3, #101	; 0x65
 81086bc:	d001      	beq.n	81086c2 <_strtod_l+0x182>
 81086be:	2b45      	cmp	r3, #69	; 0x45
 81086c0:	d118      	bne.n	81086f4 <_strtod_l+0x1b4>
 81086c2:	b91d      	cbnz	r5, 81086cc <_strtod_l+0x18c>
 81086c4:	9b04      	ldr	r3, [sp, #16]
 81086c6:	4303      	orrs	r3, r0
 81086c8:	d098      	beq.n	81085fc <_strtod_l+0xbc>
 81086ca:	2500      	movs	r5, #0
 81086cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 81086d0:	f108 0301 	add.w	r3, r8, #1
 81086d4:	931d      	str	r3, [sp, #116]	; 0x74
 81086d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 81086da:	2b2b      	cmp	r3, #43	; 0x2b
 81086dc:	d075      	beq.n	81087ca <_strtod_l+0x28a>
 81086de:	2b2d      	cmp	r3, #45	; 0x2d
 81086e0:	d07b      	beq.n	81087da <_strtod_l+0x29a>
 81086e2:	f04f 0c00 	mov.w	ip, #0
 81086e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 81086ea:	2909      	cmp	r1, #9
 81086ec:	f240 8082 	bls.w	81087f4 <_strtod_l+0x2b4>
 81086f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81086f4:	2600      	movs	r6, #0
 81086f6:	e09d      	b.n	8108834 <_strtod_l+0x2f4>
 81086f8:	2300      	movs	r3, #0
 81086fa:	e7c4      	b.n	8108686 <_strtod_l+0x146>
 81086fc:	2f08      	cmp	r7, #8
 81086fe:	bfd8      	it	le
 8108700:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8108702:	f100 0001 	add.w	r0, r0, #1
 8108706:	bfda      	itte	le
 8108708:	fb02 3301 	mlale	r3, r2, r1, r3
 810870c:	9309      	strle	r3, [sp, #36]	; 0x24
 810870e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8108712:	3701      	adds	r7, #1
 8108714:	901d      	str	r0, [sp, #116]	; 0x74
 8108716:	e7bf      	b.n	8108698 <_strtod_l+0x158>
 8108718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810871a:	195a      	adds	r2, r3, r5
 810871c:	921d      	str	r2, [sp, #116]	; 0x74
 810871e:	5d5b      	ldrb	r3, [r3, r5]
 8108720:	2f00      	cmp	r7, #0
 8108722:	d037      	beq.n	8108794 <_strtod_l+0x254>
 8108724:	9007      	str	r0, [sp, #28]
 8108726:	463d      	mov	r5, r7
 8108728:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 810872c:	2a09      	cmp	r2, #9
 810872e:	d912      	bls.n	8108756 <_strtod_l+0x216>
 8108730:	2201      	movs	r2, #1
 8108732:	e7c2      	b.n	81086ba <_strtod_l+0x17a>
 8108734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108736:	1c5a      	adds	r2, r3, #1
 8108738:	921d      	str	r2, [sp, #116]	; 0x74
 810873a:	785b      	ldrb	r3, [r3, #1]
 810873c:	3001      	adds	r0, #1
 810873e:	2b30      	cmp	r3, #48	; 0x30
 8108740:	d0f8      	beq.n	8108734 <_strtod_l+0x1f4>
 8108742:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8108746:	2a08      	cmp	r2, #8
 8108748:	f200 84db 	bhi.w	8109102 <_strtod_l+0xbc2>
 810874c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 810874e:	9007      	str	r0, [sp, #28]
 8108750:	2000      	movs	r0, #0
 8108752:	920a      	str	r2, [sp, #40]	; 0x28
 8108754:	4605      	mov	r5, r0
 8108756:	3b30      	subs	r3, #48	; 0x30
 8108758:	f100 0201 	add.w	r2, r0, #1
 810875c:	d014      	beq.n	8108788 <_strtod_l+0x248>
 810875e:	9907      	ldr	r1, [sp, #28]
 8108760:	4411      	add	r1, r2
 8108762:	9107      	str	r1, [sp, #28]
 8108764:	462a      	mov	r2, r5
 8108766:	eb00 0e05 	add.w	lr, r0, r5
 810876a:	210a      	movs	r1, #10
 810876c:	4572      	cmp	r2, lr
 810876e:	d113      	bne.n	8108798 <_strtod_l+0x258>
 8108770:	182a      	adds	r2, r5, r0
 8108772:	2a08      	cmp	r2, #8
 8108774:	f105 0501 	add.w	r5, r5, #1
 8108778:	4405      	add	r5, r0
 810877a:	dc1c      	bgt.n	81087b6 <_strtod_l+0x276>
 810877c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810877e:	220a      	movs	r2, #10
 8108780:	fb02 3301 	mla	r3, r2, r1, r3
 8108784:	9309      	str	r3, [sp, #36]	; 0x24
 8108786:	2200      	movs	r2, #0
 8108788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810878a:	1c59      	adds	r1, r3, #1
 810878c:	911d      	str	r1, [sp, #116]	; 0x74
 810878e:	785b      	ldrb	r3, [r3, #1]
 8108790:	4610      	mov	r0, r2
 8108792:	e7c9      	b.n	8108728 <_strtod_l+0x1e8>
 8108794:	4638      	mov	r0, r7
 8108796:	e7d2      	b.n	810873e <_strtod_l+0x1fe>
 8108798:	2a08      	cmp	r2, #8
 810879a:	dc04      	bgt.n	81087a6 <_strtod_l+0x266>
 810879c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 810879e:	434e      	muls	r6, r1
 81087a0:	9609      	str	r6, [sp, #36]	; 0x24
 81087a2:	3201      	adds	r2, #1
 81087a4:	e7e2      	b.n	810876c <_strtod_l+0x22c>
 81087a6:	f102 0c01 	add.w	ip, r2, #1
 81087aa:	f1bc 0f10 	cmp.w	ip, #16
 81087ae:	bfd8      	it	le
 81087b0:	fb01 f909 	mulle.w	r9, r1, r9
 81087b4:	e7f5      	b.n	81087a2 <_strtod_l+0x262>
 81087b6:	2d10      	cmp	r5, #16
 81087b8:	bfdc      	itt	le
 81087ba:	220a      	movle	r2, #10
 81087bc:	fb02 3909 	mlale	r9, r2, r9, r3
 81087c0:	e7e1      	b.n	8108786 <_strtod_l+0x246>
 81087c2:	2300      	movs	r3, #0
 81087c4:	9307      	str	r3, [sp, #28]
 81087c6:	2201      	movs	r2, #1
 81087c8:	e77c      	b.n	81086c4 <_strtod_l+0x184>
 81087ca:	f04f 0c00 	mov.w	ip, #0
 81087ce:	f108 0302 	add.w	r3, r8, #2
 81087d2:	931d      	str	r3, [sp, #116]	; 0x74
 81087d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 81087d8:	e785      	b.n	81086e6 <_strtod_l+0x1a6>
 81087da:	f04f 0c01 	mov.w	ip, #1
 81087de:	e7f6      	b.n	81087ce <_strtod_l+0x28e>
 81087e0:	0810c0e4 	.word	0x0810c0e4
 81087e4:	0810be2c 	.word	0x0810be2c
 81087e8:	7ff00000 	.word	0x7ff00000
 81087ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81087ee:	1c59      	adds	r1, r3, #1
 81087f0:	911d      	str	r1, [sp, #116]	; 0x74
 81087f2:	785b      	ldrb	r3, [r3, #1]
 81087f4:	2b30      	cmp	r3, #48	; 0x30
 81087f6:	d0f9      	beq.n	81087ec <_strtod_l+0x2ac>
 81087f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 81087fc:	2908      	cmp	r1, #8
 81087fe:	f63f af79 	bhi.w	81086f4 <_strtod_l+0x1b4>
 8108802:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8108806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108808:	9308      	str	r3, [sp, #32]
 810880a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810880c:	1c59      	adds	r1, r3, #1
 810880e:	911d      	str	r1, [sp, #116]	; 0x74
 8108810:	785b      	ldrb	r3, [r3, #1]
 8108812:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8108816:	2e09      	cmp	r6, #9
 8108818:	d937      	bls.n	810888a <_strtod_l+0x34a>
 810881a:	9e08      	ldr	r6, [sp, #32]
 810881c:	1b89      	subs	r1, r1, r6
 810881e:	2908      	cmp	r1, #8
 8108820:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108824:	dc02      	bgt.n	810882c <_strtod_l+0x2ec>
 8108826:	4576      	cmp	r6, lr
 8108828:	bfa8      	it	ge
 810882a:	4676      	movge	r6, lr
 810882c:	f1bc 0f00 	cmp.w	ip, #0
 8108830:	d000      	beq.n	8108834 <_strtod_l+0x2f4>
 8108832:	4276      	negs	r6, r6
 8108834:	2d00      	cmp	r5, #0
 8108836:	d14f      	bne.n	81088d8 <_strtod_l+0x398>
 8108838:	9904      	ldr	r1, [sp, #16]
 810883a:	4301      	orrs	r1, r0
 810883c:	f47f aec2 	bne.w	81085c4 <_strtod_l+0x84>
 8108840:	2a00      	cmp	r2, #0
 8108842:	f47f aedb 	bne.w	81085fc <_strtod_l+0xbc>
 8108846:	2b69      	cmp	r3, #105	; 0x69
 8108848:	d027      	beq.n	810889a <_strtod_l+0x35a>
 810884a:	dc24      	bgt.n	8108896 <_strtod_l+0x356>
 810884c:	2b49      	cmp	r3, #73	; 0x49
 810884e:	d024      	beq.n	810889a <_strtod_l+0x35a>
 8108850:	2b4e      	cmp	r3, #78	; 0x4e
 8108852:	f47f aed3 	bne.w	81085fc <_strtod_l+0xbc>
 8108856:	499e      	ldr	r1, [pc, #632]	; (8108ad0 <_strtod_l+0x590>)
 8108858:	a81d      	add	r0, sp, #116	; 0x74
 810885a:	f002 f8bb 	bl	810a9d4 <__match>
 810885e:	2800      	cmp	r0, #0
 8108860:	f43f aecc 	beq.w	81085fc <_strtod_l+0xbc>
 8108864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108866:	781b      	ldrb	r3, [r3, #0]
 8108868:	2b28      	cmp	r3, #40	; 0x28
 810886a:	d12d      	bne.n	81088c8 <_strtod_l+0x388>
 810886c:	4999      	ldr	r1, [pc, #612]	; (8108ad4 <_strtod_l+0x594>)
 810886e:	aa20      	add	r2, sp, #128	; 0x80
 8108870:	a81d      	add	r0, sp, #116	; 0x74
 8108872:	f002 f8c3 	bl	810a9fc <__hexnan>
 8108876:	2805      	cmp	r0, #5
 8108878:	d126      	bne.n	81088c8 <_strtod_l+0x388>
 810887a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810887c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8108880:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108884:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108888:	e69c      	b.n	81085c4 <_strtod_l+0x84>
 810888a:	210a      	movs	r1, #10
 810888c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8108890:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8108894:	e7b9      	b.n	810880a <_strtod_l+0x2ca>
 8108896:	2b6e      	cmp	r3, #110	; 0x6e
 8108898:	e7db      	b.n	8108852 <_strtod_l+0x312>
 810889a:	498f      	ldr	r1, [pc, #572]	; (8108ad8 <_strtod_l+0x598>)
 810889c:	a81d      	add	r0, sp, #116	; 0x74
 810889e:	f002 f899 	bl	810a9d4 <__match>
 81088a2:	2800      	cmp	r0, #0
 81088a4:	f43f aeaa 	beq.w	81085fc <_strtod_l+0xbc>
 81088a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81088aa:	498c      	ldr	r1, [pc, #560]	; (8108adc <_strtod_l+0x59c>)
 81088ac:	3b01      	subs	r3, #1
 81088ae:	a81d      	add	r0, sp, #116	; 0x74
 81088b0:	931d      	str	r3, [sp, #116]	; 0x74
 81088b2:	f002 f88f 	bl	810a9d4 <__match>
 81088b6:	b910      	cbnz	r0, 81088be <_strtod_l+0x37e>
 81088b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81088ba:	3301      	adds	r3, #1
 81088bc:	931d      	str	r3, [sp, #116]	; 0x74
 81088be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8108aec <_strtod_l+0x5ac>
 81088c2:	f04f 0a00 	mov.w	sl, #0
 81088c6:	e67d      	b.n	81085c4 <_strtod_l+0x84>
 81088c8:	4885      	ldr	r0, [pc, #532]	; (8108ae0 <_strtod_l+0x5a0>)
 81088ca:	f003 f825 	bl	810b918 <nan>
 81088ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 81088d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 81088d6:	e675      	b.n	81085c4 <_strtod_l+0x84>
 81088d8:	9b07      	ldr	r3, [sp, #28]
 81088da:	9809      	ldr	r0, [sp, #36]	; 0x24
 81088dc:	1af3      	subs	r3, r6, r3
 81088de:	2f00      	cmp	r7, #0
 81088e0:	bf08      	it	eq
 81088e2:	462f      	moveq	r7, r5
 81088e4:	2d10      	cmp	r5, #16
 81088e6:	9308      	str	r3, [sp, #32]
 81088e8:	46a8      	mov	r8, r5
 81088ea:	bfa8      	it	ge
 81088ec:	f04f 0810 	movge.w	r8, #16
 81088f0:	f7f7 fea0 	bl	8100634 <__aeabi_ui2d>
 81088f4:	2d09      	cmp	r5, #9
 81088f6:	4682      	mov	sl, r0
 81088f8:	468b      	mov	fp, r1
 81088fa:	dd13      	ble.n	8108924 <_strtod_l+0x3e4>
 81088fc:	4b79      	ldr	r3, [pc, #484]	; (8108ae4 <_strtod_l+0x5a4>)
 81088fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108902:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108906:	f7f7 ff0f 	bl	8100728 <__aeabi_dmul>
 810890a:	4682      	mov	sl, r0
 810890c:	4648      	mov	r0, r9
 810890e:	468b      	mov	fp, r1
 8108910:	f7f7 fe90 	bl	8100634 <__aeabi_ui2d>
 8108914:	4602      	mov	r2, r0
 8108916:	460b      	mov	r3, r1
 8108918:	4650      	mov	r0, sl
 810891a:	4659      	mov	r1, fp
 810891c:	f7f7 fd4e 	bl	81003bc <__adddf3>
 8108920:	4682      	mov	sl, r0
 8108922:	468b      	mov	fp, r1
 8108924:	2d0f      	cmp	r5, #15
 8108926:	dc38      	bgt.n	810899a <_strtod_l+0x45a>
 8108928:	9b08      	ldr	r3, [sp, #32]
 810892a:	2b00      	cmp	r3, #0
 810892c:	f43f ae4a 	beq.w	81085c4 <_strtod_l+0x84>
 8108930:	dd24      	ble.n	810897c <_strtod_l+0x43c>
 8108932:	2b16      	cmp	r3, #22
 8108934:	dc0b      	bgt.n	810894e <_strtod_l+0x40e>
 8108936:	4d6b      	ldr	r5, [pc, #428]	; (8108ae4 <_strtod_l+0x5a4>)
 8108938:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 810893c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8108940:	4652      	mov	r2, sl
 8108942:	465b      	mov	r3, fp
 8108944:	f7f7 fef0 	bl	8100728 <__aeabi_dmul>
 8108948:	4682      	mov	sl, r0
 810894a:	468b      	mov	fp, r1
 810894c:	e63a      	b.n	81085c4 <_strtod_l+0x84>
 810894e:	9a08      	ldr	r2, [sp, #32]
 8108950:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108954:	4293      	cmp	r3, r2
 8108956:	db20      	blt.n	810899a <_strtod_l+0x45a>
 8108958:	4c62      	ldr	r4, [pc, #392]	; (8108ae4 <_strtod_l+0x5a4>)
 810895a:	f1c5 050f 	rsb	r5, r5, #15
 810895e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108962:	4652      	mov	r2, sl
 8108964:	465b      	mov	r3, fp
 8108966:	e9d1 0100 	ldrd	r0, r1, [r1]
 810896a:	f7f7 fedd 	bl	8100728 <__aeabi_dmul>
 810896e:	9b08      	ldr	r3, [sp, #32]
 8108970:	1b5d      	subs	r5, r3, r5
 8108972:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108976:	e9d4 2300 	ldrd	r2, r3, [r4]
 810897a:	e7e3      	b.n	8108944 <_strtod_l+0x404>
 810897c:	9b08      	ldr	r3, [sp, #32]
 810897e:	3316      	adds	r3, #22
 8108980:	db0b      	blt.n	810899a <_strtod_l+0x45a>
 8108982:	9b07      	ldr	r3, [sp, #28]
 8108984:	4a57      	ldr	r2, [pc, #348]	; (8108ae4 <_strtod_l+0x5a4>)
 8108986:	1b9e      	subs	r6, r3, r6
 8108988:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810898c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108990:	4650      	mov	r0, sl
 8108992:	4659      	mov	r1, fp
 8108994:	f7f7 fff2 	bl	810097c <__aeabi_ddiv>
 8108998:	e7d6      	b.n	8108948 <_strtod_l+0x408>
 810899a:	9b08      	ldr	r3, [sp, #32]
 810899c:	eba5 0808 	sub.w	r8, r5, r8
 81089a0:	4498      	add	r8, r3
 81089a2:	f1b8 0f00 	cmp.w	r8, #0
 81089a6:	dd71      	ble.n	8108a8c <_strtod_l+0x54c>
 81089a8:	f018 030f 	ands.w	r3, r8, #15
 81089ac:	d00a      	beq.n	81089c4 <_strtod_l+0x484>
 81089ae:	494d      	ldr	r1, [pc, #308]	; (8108ae4 <_strtod_l+0x5a4>)
 81089b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81089b4:	4652      	mov	r2, sl
 81089b6:	465b      	mov	r3, fp
 81089b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81089bc:	f7f7 feb4 	bl	8100728 <__aeabi_dmul>
 81089c0:	4682      	mov	sl, r0
 81089c2:	468b      	mov	fp, r1
 81089c4:	f038 080f 	bics.w	r8, r8, #15
 81089c8:	d04d      	beq.n	8108a66 <_strtod_l+0x526>
 81089ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 81089ce:	dd22      	ble.n	8108a16 <_strtod_l+0x4d6>
 81089d0:	2500      	movs	r5, #0
 81089d2:	462e      	mov	r6, r5
 81089d4:	9509      	str	r5, [sp, #36]	; 0x24
 81089d6:	9507      	str	r5, [sp, #28]
 81089d8:	2322      	movs	r3, #34	; 0x22
 81089da:	f8df b110 	ldr.w	fp, [pc, #272]	; 8108aec <_strtod_l+0x5ac>
 81089de:	6023      	str	r3, [r4, #0]
 81089e0:	f04f 0a00 	mov.w	sl, #0
 81089e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	f43f adec 	beq.w	81085c4 <_strtod_l+0x84>
 81089ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 81089ee:	4620      	mov	r0, r4
 81089f0:	f002 f984 	bl	810acfc <_Bfree>
 81089f4:	9907      	ldr	r1, [sp, #28]
 81089f6:	4620      	mov	r0, r4
 81089f8:	f002 f980 	bl	810acfc <_Bfree>
 81089fc:	4631      	mov	r1, r6
 81089fe:	4620      	mov	r0, r4
 8108a00:	f002 f97c 	bl	810acfc <_Bfree>
 8108a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108a06:	4620      	mov	r0, r4
 8108a08:	f002 f978 	bl	810acfc <_Bfree>
 8108a0c:	4629      	mov	r1, r5
 8108a0e:	4620      	mov	r0, r4
 8108a10:	f002 f974 	bl	810acfc <_Bfree>
 8108a14:	e5d6      	b.n	81085c4 <_strtod_l+0x84>
 8108a16:	2300      	movs	r3, #0
 8108a18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108a1c:	4650      	mov	r0, sl
 8108a1e:	4659      	mov	r1, fp
 8108a20:	4699      	mov	r9, r3
 8108a22:	f1b8 0f01 	cmp.w	r8, #1
 8108a26:	dc21      	bgt.n	8108a6c <_strtod_l+0x52c>
 8108a28:	b10b      	cbz	r3, 8108a2e <_strtod_l+0x4ee>
 8108a2a:	4682      	mov	sl, r0
 8108a2c:	468b      	mov	fp, r1
 8108a2e:	4b2e      	ldr	r3, [pc, #184]	; (8108ae8 <_strtod_l+0x5a8>)
 8108a30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108a34:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108a38:	4652      	mov	r2, sl
 8108a3a:	465b      	mov	r3, fp
 8108a3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108a40:	f7f7 fe72 	bl	8100728 <__aeabi_dmul>
 8108a44:	4b29      	ldr	r3, [pc, #164]	; (8108aec <_strtod_l+0x5ac>)
 8108a46:	460a      	mov	r2, r1
 8108a48:	400b      	ands	r3, r1
 8108a4a:	4929      	ldr	r1, [pc, #164]	; (8108af0 <_strtod_l+0x5b0>)
 8108a4c:	428b      	cmp	r3, r1
 8108a4e:	4682      	mov	sl, r0
 8108a50:	d8be      	bhi.n	81089d0 <_strtod_l+0x490>
 8108a52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108a56:	428b      	cmp	r3, r1
 8108a58:	bf86      	itte	hi
 8108a5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8108af4 <_strtod_l+0x5b4>
 8108a5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8108a62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108a66:	2300      	movs	r3, #0
 8108a68:	9304      	str	r3, [sp, #16]
 8108a6a:	e081      	b.n	8108b70 <_strtod_l+0x630>
 8108a6c:	f018 0f01 	tst.w	r8, #1
 8108a70:	d007      	beq.n	8108a82 <_strtod_l+0x542>
 8108a72:	4b1d      	ldr	r3, [pc, #116]	; (8108ae8 <_strtod_l+0x5a8>)
 8108a74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8108a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a7c:	f7f7 fe54 	bl	8100728 <__aeabi_dmul>
 8108a80:	2301      	movs	r3, #1
 8108a82:	f109 0901 	add.w	r9, r9, #1
 8108a86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108a8a:	e7ca      	b.n	8108a22 <_strtod_l+0x4e2>
 8108a8c:	d0eb      	beq.n	8108a66 <_strtod_l+0x526>
 8108a8e:	f1c8 0800 	rsb	r8, r8, #0
 8108a92:	f018 020f 	ands.w	r2, r8, #15
 8108a96:	d00a      	beq.n	8108aae <_strtod_l+0x56e>
 8108a98:	4b12      	ldr	r3, [pc, #72]	; (8108ae4 <_strtod_l+0x5a4>)
 8108a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108a9e:	4650      	mov	r0, sl
 8108aa0:	4659      	mov	r1, fp
 8108aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108aa6:	f7f7 ff69 	bl	810097c <__aeabi_ddiv>
 8108aaa:	4682      	mov	sl, r0
 8108aac:	468b      	mov	fp, r1
 8108aae:	ea5f 1828 	movs.w	r8, r8, asr #4
 8108ab2:	d0d8      	beq.n	8108a66 <_strtod_l+0x526>
 8108ab4:	f1b8 0f1f 	cmp.w	r8, #31
 8108ab8:	dd1e      	ble.n	8108af8 <_strtod_l+0x5b8>
 8108aba:	2500      	movs	r5, #0
 8108abc:	462e      	mov	r6, r5
 8108abe:	9509      	str	r5, [sp, #36]	; 0x24
 8108ac0:	9507      	str	r5, [sp, #28]
 8108ac2:	2322      	movs	r3, #34	; 0x22
 8108ac4:	f04f 0a00 	mov.w	sl, #0
 8108ac8:	f04f 0b00 	mov.w	fp, #0
 8108acc:	6023      	str	r3, [r4, #0]
 8108ace:	e789      	b.n	81089e4 <_strtod_l+0x4a4>
 8108ad0:	0810bdfe 	.word	0x0810bdfe
 8108ad4:	0810be40 	.word	0x0810be40
 8108ad8:	0810bdf6 	.word	0x0810bdf6
 8108adc:	0810bf84 	.word	0x0810bf84
 8108ae0:	0810bdd9 	.word	0x0810bdd9
 8108ae4:	0810c180 	.word	0x0810c180
 8108ae8:	0810c158 	.word	0x0810c158
 8108aec:	7ff00000 	.word	0x7ff00000
 8108af0:	7ca00000 	.word	0x7ca00000
 8108af4:	7fefffff 	.word	0x7fefffff
 8108af8:	f018 0310 	ands.w	r3, r8, #16
 8108afc:	bf18      	it	ne
 8108afe:	236a      	movne	r3, #106	; 0x6a
 8108b00:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8108eb8 <_strtod_l+0x978>
 8108b04:	9304      	str	r3, [sp, #16]
 8108b06:	4650      	mov	r0, sl
 8108b08:	4659      	mov	r1, fp
 8108b0a:	2300      	movs	r3, #0
 8108b0c:	f018 0f01 	tst.w	r8, #1
 8108b10:	d004      	beq.n	8108b1c <_strtod_l+0x5dc>
 8108b12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108b16:	f7f7 fe07 	bl	8100728 <__aeabi_dmul>
 8108b1a:	2301      	movs	r3, #1
 8108b1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108b20:	f109 0908 	add.w	r9, r9, #8
 8108b24:	d1f2      	bne.n	8108b0c <_strtod_l+0x5cc>
 8108b26:	b10b      	cbz	r3, 8108b2c <_strtod_l+0x5ec>
 8108b28:	4682      	mov	sl, r0
 8108b2a:	468b      	mov	fp, r1
 8108b2c:	9b04      	ldr	r3, [sp, #16]
 8108b2e:	b1bb      	cbz	r3, 8108b60 <_strtod_l+0x620>
 8108b30:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8108b34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108b38:	2b00      	cmp	r3, #0
 8108b3a:	4659      	mov	r1, fp
 8108b3c:	dd10      	ble.n	8108b60 <_strtod_l+0x620>
 8108b3e:	2b1f      	cmp	r3, #31
 8108b40:	f340 8128 	ble.w	8108d94 <_strtod_l+0x854>
 8108b44:	2b34      	cmp	r3, #52	; 0x34
 8108b46:	bfde      	ittt	le
 8108b48:	3b20      	suble	r3, #32
 8108b4a:	f04f 32ff 	movle.w	r2, #4294967295
 8108b4e:	fa02 f303 	lslle.w	r3, r2, r3
 8108b52:	f04f 0a00 	mov.w	sl, #0
 8108b56:	bfcc      	ite	gt
 8108b58:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108b5c:	ea03 0b01 	andle.w	fp, r3, r1
 8108b60:	2200      	movs	r2, #0
 8108b62:	2300      	movs	r3, #0
 8108b64:	4650      	mov	r0, sl
 8108b66:	4659      	mov	r1, fp
 8108b68:	f7f8 f846 	bl	8100bf8 <__aeabi_dcmpeq>
 8108b6c:	2800      	cmp	r0, #0
 8108b6e:	d1a4      	bne.n	8108aba <_strtod_l+0x57a>
 8108b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b72:	9300      	str	r3, [sp, #0]
 8108b74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8108b76:	462b      	mov	r3, r5
 8108b78:	463a      	mov	r2, r7
 8108b7a:	4620      	mov	r0, r4
 8108b7c:	f002 f92a 	bl	810add4 <__s2b>
 8108b80:	9009      	str	r0, [sp, #36]	; 0x24
 8108b82:	2800      	cmp	r0, #0
 8108b84:	f43f af24 	beq.w	81089d0 <_strtod_l+0x490>
 8108b88:	9b07      	ldr	r3, [sp, #28]
 8108b8a:	1b9e      	subs	r6, r3, r6
 8108b8c:	9b08      	ldr	r3, [sp, #32]
 8108b8e:	2b00      	cmp	r3, #0
 8108b90:	bfb4      	ite	lt
 8108b92:	4633      	movlt	r3, r6
 8108b94:	2300      	movge	r3, #0
 8108b96:	9310      	str	r3, [sp, #64]	; 0x40
 8108b98:	9b08      	ldr	r3, [sp, #32]
 8108b9a:	2500      	movs	r5, #0
 8108b9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108ba0:	9318      	str	r3, [sp, #96]	; 0x60
 8108ba2:	462e      	mov	r6, r5
 8108ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108ba6:	4620      	mov	r0, r4
 8108ba8:	6859      	ldr	r1, [r3, #4]
 8108baa:	f002 f867 	bl	810ac7c <_Balloc>
 8108bae:	9007      	str	r0, [sp, #28]
 8108bb0:	2800      	cmp	r0, #0
 8108bb2:	f43f af11 	beq.w	81089d8 <_strtod_l+0x498>
 8108bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108bb8:	691a      	ldr	r2, [r3, #16]
 8108bba:	3202      	adds	r2, #2
 8108bbc:	f103 010c 	add.w	r1, r3, #12
 8108bc0:	0092      	lsls	r2, r2, #2
 8108bc2:	300c      	adds	r0, #12
 8108bc4:	f7fe fbae 	bl	8107324 <memcpy>
 8108bc8:	ec4b ab10 	vmov	d0, sl, fp
 8108bcc:	aa20      	add	r2, sp, #128	; 0x80
 8108bce:	a91f      	add	r1, sp, #124	; 0x7c
 8108bd0:	4620      	mov	r0, r4
 8108bd2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8108bd6:	f002 fc39 	bl	810b44c <__d2b>
 8108bda:	901e      	str	r0, [sp, #120]	; 0x78
 8108bdc:	2800      	cmp	r0, #0
 8108bde:	f43f aefb 	beq.w	81089d8 <_strtod_l+0x498>
 8108be2:	2101      	movs	r1, #1
 8108be4:	4620      	mov	r0, r4
 8108be6:	f002 f98f 	bl	810af08 <__i2b>
 8108bea:	4606      	mov	r6, r0
 8108bec:	2800      	cmp	r0, #0
 8108bee:	f43f aef3 	beq.w	81089d8 <_strtod_l+0x498>
 8108bf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8108bf4:	9904      	ldr	r1, [sp, #16]
 8108bf6:	2b00      	cmp	r3, #0
 8108bf8:	bfab      	itete	ge
 8108bfa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8108bfc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8108bfe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8108c00:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8108c04:	bfac      	ite	ge
 8108c06:	eb03 0902 	addge.w	r9, r3, r2
 8108c0a:	1ad7      	sublt	r7, r2, r3
 8108c0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8108c0e:	eba3 0801 	sub.w	r8, r3, r1
 8108c12:	4490      	add	r8, r2
 8108c14:	4ba3      	ldr	r3, [pc, #652]	; (8108ea4 <_strtod_l+0x964>)
 8108c16:	f108 38ff 	add.w	r8, r8, #4294967295
 8108c1a:	4598      	cmp	r8, r3
 8108c1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108c20:	f280 80cc 	bge.w	8108dbc <_strtod_l+0x87c>
 8108c24:	eba3 0308 	sub.w	r3, r3, r8
 8108c28:	2b1f      	cmp	r3, #31
 8108c2a:	eba2 0203 	sub.w	r2, r2, r3
 8108c2e:	f04f 0101 	mov.w	r1, #1
 8108c32:	f300 80b6 	bgt.w	8108da2 <_strtod_l+0x862>
 8108c36:	fa01 f303 	lsl.w	r3, r1, r3
 8108c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8108c3c:	2300      	movs	r3, #0
 8108c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8108c40:	eb09 0802 	add.w	r8, r9, r2
 8108c44:	9b04      	ldr	r3, [sp, #16]
 8108c46:	45c1      	cmp	r9, r8
 8108c48:	4417      	add	r7, r2
 8108c4a:	441f      	add	r7, r3
 8108c4c:	464b      	mov	r3, r9
 8108c4e:	bfa8      	it	ge
 8108c50:	4643      	movge	r3, r8
 8108c52:	42bb      	cmp	r3, r7
 8108c54:	bfa8      	it	ge
 8108c56:	463b      	movge	r3, r7
 8108c58:	2b00      	cmp	r3, #0
 8108c5a:	bfc2      	ittt	gt
 8108c5c:	eba8 0803 	subgt.w	r8, r8, r3
 8108c60:	1aff      	subgt	r7, r7, r3
 8108c62:	eba9 0903 	subgt.w	r9, r9, r3
 8108c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108c68:	2b00      	cmp	r3, #0
 8108c6a:	dd17      	ble.n	8108c9c <_strtod_l+0x75c>
 8108c6c:	4631      	mov	r1, r6
 8108c6e:	461a      	mov	r2, r3
 8108c70:	4620      	mov	r0, r4
 8108c72:	f002 fa05 	bl	810b080 <__pow5mult>
 8108c76:	4606      	mov	r6, r0
 8108c78:	2800      	cmp	r0, #0
 8108c7a:	f43f aead 	beq.w	81089d8 <_strtod_l+0x498>
 8108c7e:	4601      	mov	r1, r0
 8108c80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108c82:	4620      	mov	r0, r4
 8108c84:	f002 f956 	bl	810af34 <__multiply>
 8108c88:	900f      	str	r0, [sp, #60]	; 0x3c
 8108c8a:	2800      	cmp	r0, #0
 8108c8c:	f43f aea4 	beq.w	81089d8 <_strtod_l+0x498>
 8108c90:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108c92:	4620      	mov	r0, r4
 8108c94:	f002 f832 	bl	810acfc <_Bfree>
 8108c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108c9a:	931e      	str	r3, [sp, #120]	; 0x78
 8108c9c:	f1b8 0f00 	cmp.w	r8, #0
 8108ca0:	f300 8091 	bgt.w	8108dc6 <_strtod_l+0x886>
 8108ca4:	9b08      	ldr	r3, [sp, #32]
 8108ca6:	2b00      	cmp	r3, #0
 8108ca8:	dd08      	ble.n	8108cbc <_strtod_l+0x77c>
 8108caa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108cac:	9907      	ldr	r1, [sp, #28]
 8108cae:	4620      	mov	r0, r4
 8108cb0:	f002 f9e6 	bl	810b080 <__pow5mult>
 8108cb4:	9007      	str	r0, [sp, #28]
 8108cb6:	2800      	cmp	r0, #0
 8108cb8:	f43f ae8e 	beq.w	81089d8 <_strtod_l+0x498>
 8108cbc:	2f00      	cmp	r7, #0
 8108cbe:	dd08      	ble.n	8108cd2 <_strtod_l+0x792>
 8108cc0:	9907      	ldr	r1, [sp, #28]
 8108cc2:	463a      	mov	r2, r7
 8108cc4:	4620      	mov	r0, r4
 8108cc6:	f002 fa35 	bl	810b134 <__lshift>
 8108cca:	9007      	str	r0, [sp, #28]
 8108ccc:	2800      	cmp	r0, #0
 8108cce:	f43f ae83 	beq.w	81089d8 <_strtod_l+0x498>
 8108cd2:	f1b9 0f00 	cmp.w	r9, #0
 8108cd6:	dd08      	ble.n	8108cea <_strtod_l+0x7aa>
 8108cd8:	4631      	mov	r1, r6
 8108cda:	464a      	mov	r2, r9
 8108cdc:	4620      	mov	r0, r4
 8108cde:	f002 fa29 	bl	810b134 <__lshift>
 8108ce2:	4606      	mov	r6, r0
 8108ce4:	2800      	cmp	r0, #0
 8108ce6:	f43f ae77 	beq.w	81089d8 <_strtod_l+0x498>
 8108cea:	9a07      	ldr	r2, [sp, #28]
 8108cec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108cee:	4620      	mov	r0, r4
 8108cf0:	f002 faa8 	bl	810b244 <__mdiff>
 8108cf4:	4605      	mov	r5, r0
 8108cf6:	2800      	cmp	r0, #0
 8108cf8:	f43f ae6e 	beq.w	81089d8 <_strtod_l+0x498>
 8108cfc:	68c3      	ldr	r3, [r0, #12]
 8108cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8108d00:	2300      	movs	r3, #0
 8108d02:	60c3      	str	r3, [r0, #12]
 8108d04:	4631      	mov	r1, r6
 8108d06:	f002 fa81 	bl	810b20c <__mcmp>
 8108d0a:	2800      	cmp	r0, #0
 8108d0c:	da65      	bge.n	8108dda <_strtod_l+0x89a>
 8108d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108d10:	ea53 030a 	orrs.w	r3, r3, sl
 8108d14:	f040 8087 	bne.w	8108e26 <_strtod_l+0x8e6>
 8108d18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108d1c:	2b00      	cmp	r3, #0
 8108d1e:	f040 8082 	bne.w	8108e26 <_strtod_l+0x8e6>
 8108d22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108d26:	0d1b      	lsrs	r3, r3, #20
 8108d28:	051b      	lsls	r3, r3, #20
 8108d2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108d2e:	d97a      	bls.n	8108e26 <_strtod_l+0x8e6>
 8108d30:	696b      	ldr	r3, [r5, #20]
 8108d32:	b913      	cbnz	r3, 8108d3a <_strtod_l+0x7fa>
 8108d34:	692b      	ldr	r3, [r5, #16]
 8108d36:	2b01      	cmp	r3, #1
 8108d38:	dd75      	ble.n	8108e26 <_strtod_l+0x8e6>
 8108d3a:	4629      	mov	r1, r5
 8108d3c:	2201      	movs	r2, #1
 8108d3e:	4620      	mov	r0, r4
 8108d40:	f002 f9f8 	bl	810b134 <__lshift>
 8108d44:	4631      	mov	r1, r6
 8108d46:	4605      	mov	r5, r0
 8108d48:	f002 fa60 	bl	810b20c <__mcmp>
 8108d4c:	2800      	cmp	r0, #0
 8108d4e:	dd6a      	ble.n	8108e26 <_strtod_l+0x8e6>
 8108d50:	9904      	ldr	r1, [sp, #16]
 8108d52:	4a55      	ldr	r2, [pc, #340]	; (8108ea8 <_strtod_l+0x968>)
 8108d54:	465b      	mov	r3, fp
 8108d56:	2900      	cmp	r1, #0
 8108d58:	f000 8085 	beq.w	8108e66 <_strtod_l+0x926>
 8108d5c:	ea02 010b 	and.w	r1, r2, fp
 8108d60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108d64:	dc7f      	bgt.n	8108e66 <_strtod_l+0x926>
 8108d66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8108d6a:	f77f aeaa 	ble.w	8108ac2 <_strtod_l+0x582>
 8108d6e:	4a4f      	ldr	r2, [pc, #316]	; (8108eac <_strtod_l+0x96c>)
 8108d70:	2300      	movs	r3, #0
 8108d72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8108d76:	4650      	mov	r0, sl
 8108d78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8108d7c:	4659      	mov	r1, fp
 8108d7e:	f7f7 fcd3 	bl	8100728 <__aeabi_dmul>
 8108d82:	460b      	mov	r3, r1
 8108d84:	4303      	orrs	r3, r0
 8108d86:	bf08      	it	eq
 8108d88:	2322      	moveq	r3, #34	; 0x22
 8108d8a:	4682      	mov	sl, r0
 8108d8c:	468b      	mov	fp, r1
 8108d8e:	bf08      	it	eq
 8108d90:	6023      	streq	r3, [r4, #0]
 8108d92:	e62b      	b.n	81089ec <_strtod_l+0x4ac>
 8108d94:	f04f 32ff 	mov.w	r2, #4294967295
 8108d98:	fa02 f303 	lsl.w	r3, r2, r3
 8108d9c:	ea03 0a0a 	and.w	sl, r3, sl
 8108da0:	e6de      	b.n	8108b60 <_strtod_l+0x620>
 8108da2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8108da6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108daa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108dae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8108db2:	fa01 f308 	lsl.w	r3, r1, r8
 8108db6:	930c      	str	r3, [sp, #48]	; 0x30
 8108db8:	9111      	str	r1, [sp, #68]	; 0x44
 8108dba:	e741      	b.n	8108c40 <_strtod_l+0x700>
 8108dbc:	2300      	movs	r3, #0
 8108dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8108dc0:	2301      	movs	r3, #1
 8108dc2:	9311      	str	r3, [sp, #68]	; 0x44
 8108dc4:	e73c      	b.n	8108c40 <_strtod_l+0x700>
 8108dc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108dc8:	4642      	mov	r2, r8
 8108dca:	4620      	mov	r0, r4
 8108dcc:	f002 f9b2 	bl	810b134 <__lshift>
 8108dd0:	901e      	str	r0, [sp, #120]	; 0x78
 8108dd2:	2800      	cmp	r0, #0
 8108dd4:	f47f af66 	bne.w	8108ca4 <_strtod_l+0x764>
 8108dd8:	e5fe      	b.n	81089d8 <_strtod_l+0x498>
 8108dda:	465f      	mov	r7, fp
 8108ddc:	d16e      	bne.n	8108ebc <_strtod_l+0x97c>
 8108dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108de0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108de4:	b342      	cbz	r2, 8108e38 <_strtod_l+0x8f8>
 8108de6:	4a32      	ldr	r2, [pc, #200]	; (8108eb0 <_strtod_l+0x970>)
 8108de8:	4293      	cmp	r3, r2
 8108dea:	d128      	bne.n	8108e3e <_strtod_l+0x8fe>
 8108dec:	9b04      	ldr	r3, [sp, #16]
 8108dee:	4650      	mov	r0, sl
 8108df0:	b1eb      	cbz	r3, 8108e2e <_strtod_l+0x8ee>
 8108df2:	4a2d      	ldr	r2, [pc, #180]	; (8108ea8 <_strtod_l+0x968>)
 8108df4:	403a      	ands	r2, r7
 8108df6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8108dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8108dfe:	d819      	bhi.n	8108e34 <_strtod_l+0x8f4>
 8108e00:	0d12      	lsrs	r2, r2, #20
 8108e02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108e06:	fa01 f303 	lsl.w	r3, r1, r3
 8108e0a:	4298      	cmp	r0, r3
 8108e0c:	d117      	bne.n	8108e3e <_strtod_l+0x8fe>
 8108e0e:	4b29      	ldr	r3, [pc, #164]	; (8108eb4 <_strtod_l+0x974>)
 8108e10:	429f      	cmp	r7, r3
 8108e12:	d102      	bne.n	8108e1a <_strtod_l+0x8da>
 8108e14:	3001      	adds	r0, #1
 8108e16:	f43f addf 	beq.w	81089d8 <_strtod_l+0x498>
 8108e1a:	4b23      	ldr	r3, [pc, #140]	; (8108ea8 <_strtod_l+0x968>)
 8108e1c:	403b      	ands	r3, r7
 8108e1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108e22:	f04f 0a00 	mov.w	sl, #0
 8108e26:	9b04      	ldr	r3, [sp, #16]
 8108e28:	2b00      	cmp	r3, #0
 8108e2a:	d1a0      	bne.n	8108d6e <_strtod_l+0x82e>
 8108e2c:	e5de      	b.n	81089ec <_strtod_l+0x4ac>
 8108e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8108e32:	e7ea      	b.n	8108e0a <_strtod_l+0x8ca>
 8108e34:	460b      	mov	r3, r1
 8108e36:	e7e8      	b.n	8108e0a <_strtod_l+0x8ca>
 8108e38:	ea53 030a 	orrs.w	r3, r3, sl
 8108e3c:	d088      	beq.n	8108d50 <_strtod_l+0x810>
 8108e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108e40:	b1db      	cbz	r3, 8108e7a <_strtod_l+0x93a>
 8108e42:	423b      	tst	r3, r7
 8108e44:	d0ef      	beq.n	8108e26 <_strtod_l+0x8e6>
 8108e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108e48:	9a04      	ldr	r2, [sp, #16]
 8108e4a:	4650      	mov	r0, sl
 8108e4c:	4659      	mov	r1, fp
 8108e4e:	b1c3      	cbz	r3, 8108e82 <_strtod_l+0x942>
 8108e50:	f7ff fb57 	bl	8108502 <sulp>
 8108e54:	4602      	mov	r2, r0
 8108e56:	460b      	mov	r3, r1
 8108e58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108e5c:	f7f7 faae 	bl	81003bc <__adddf3>
 8108e60:	4682      	mov	sl, r0
 8108e62:	468b      	mov	fp, r1
 8108e64:	e7df      	b.n	8108e26 <_strtod_l+0x8e6>
 8108e66:	4013      	ands	r3, r2
 8108e68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8108e6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108e70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108e74:	f04f 3aff 	mov.w	sl, #4294967295
 8108e78:	e7d5      	b.n	8108e26 <_strtod_l+0x8e6>
 8108e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108e7c:	ea13 0f0a 	tst.w	r3, sl
 8108e80:	e7e0      	b.n	8108e44 <_strtod_l+0x904>
 8108e82:	f7ff fb3e 	bl	8108502 <sulp>
 8108e86:	4602      	mov	r2, r0
 8108e88:	460b      	mov	r3, r1
 8108e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108e8e:	f7f7 fa93 	bl	81003b8 <__aeabi_dsub>
 8108e92:	2200      	movs	r2, #0
 8108e94:	2300      	movs	r3, #0
 8108e96:	4682      	mov	sl, r0
 8108e98:	468b      	mov	fp, r1
 8108e9a:	f7f7 fead 	bl	8100bf8 <__aeabi_dcmpeq>
 8108e9e:	2800      	cmp	r0, #0
 8108ea0:	d0c1      	beq.n	8108e26 <_strtod_l+0x8e6>
 8108ea2:	e60e      	b.n	8108ac2 <_strtod_l+0x582>
 8108ea4:	fffffc02 	.word	0xfffffc02
 8108ea8:	7ff00000 	.word	0x7ff00000
 8108eac:	39500000 	.word	0x39500000
 8108eb0:	000fffff 	.word	0x000fffff
 8108eb4:	7fefffff 	.word	0x7fefffff
 8108eb8:	0810be58 	.word	0x0810be58
 8108ebc:	4631      	mov	r1, r6
 8108ebe:	4628      	mov	r0, r5
 8108ec0:	f002 fb20 	bl	810b504 <__ratio>
 8108ec4:	ec59 8b10 	vmov	r8, r9, d0
 8108ec8:	ee10 0a10 	vmov	r0, s0
 8108ecc:	2200      	movs	r2, #0
 8108ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8108ed2:	4649      	mov	r1, r9
 8108ed4:	f7f7 fea4 	bl	8100c20 <__aeabi_dcmple>
 8108ed8:	2800      	cmp	r0, #0
 8108eda:	d07c      	beq.n	8108fd6 <_strtod_l+0xa96>
 8108edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	d04c      	beq.n	8108f7c <_strtod_l+0xa3c>
 8108ee2:	4b95      	ldr	r3, [pc, #596]	; (8109138 <_strtod_l+0xbf8>)
 8108ee4:	2200      	movs	r2, #0
 8108ee6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108eea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109138 <_strtod_l+0xbf8>
 8108eee:	f04f 0800 	mov.w	r8, #0
 8108ef2:	4b92      	ldr	r3, [pc, #584]	; (810913c <_strtod_l+0xbfc>)
 8108ef4:	403b      	ands	r3, r7
 8108ef6:	9311      	str	r3, [sp, #68]	; 0x44
 8108ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108efa:	4b91      	ldr	r3, [pc, #580]	; (8109140 <_strtod_l+0xc00>)
 8108efc:	429a      	cmp	r2, r3
 8108efe:	f040 80b2 	bne.w	8109066 <_strtod_l+0xb26>
 8108f02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8108f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108f0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8108f0e:	ec4b ab10 	vmov	d0, sl, fp
 8108f12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8108f16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8108f1a:	f002 fa1b 	bl	810b354 <__ulp>
 8108f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108f22:	ec53 2b10 	vmov	r2, r3, d0
 8108f26:	f7f7 fbff 	bl	8100728 <__aeabi_dmul>
 8108f2a:	4652      	mov	r2, sl
 8108f2c:	465b      	mov	r3, fp
 8108f2e:	f7f7 fa45 	bl	81003bc <__adddf3>
 8108f32:	460b      	mov	r3, r1
 8108f34:	4981      	ldr	r1, [pc, #516]	; (810913c <_strtod_l+0xbfc>)
 8108f36:	4a83      	ldr	r2, [pc, #524]	; (8109144 <_strtod_l+0xc04>)
 8108f38:	4019      	ands	r1, r3
 8108f3a:	4291      	cmp	r1, r2
 8108f3c:	4682      	mov	sl, r0
 8108f3e:	d95e      	bls.n	8108ffe <_strtod_l+0xabe>
 8108f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108f42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8108f46:	4293      	cmp	r3, r2
 8108f48:	d103      	bne.n	8108f52 <_strtod_l+0xa12>
 8108f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f4c:	3301      	adds	r3, #1
 8108f4e:	f43f ad43 	beq.w	81089d8 <_strtod_l+0x498>
 8108f52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8109150 <_strtod_l+0xc10>
 8108f56:	f04f 3aff 	mov.w	sl, #4294967295
 8108f5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108f5c:	4620      	mov	r0, r4
 8108f5e:	f001 fecd 	bl	810acfc <_Bfree>
 8108f62:	9907      	ldr	r1, [sp, #28]
 8108f64:	4620      	mov	r0, r4
 8108f66:	f001 fec9 	bl	810acfc <_Bfree>
 8108f6a:	4631      	mov	r1, r6
 8108f6c:	4620      	mov	r0, r4
 8108f6e:	f001 fec5 	bl	810acfc <_Bfree>
 8108f72:	4629      	mov	r1, r5
 8108f74:	4620      	mov	r0, r4
 8108f76:	f001 fec1 	bl	810acfc <_Bfree>
 8108f7a:	e613      	b.n	8108ba4 <_strtod_l+0x664>
 8108f7c:	f1ba 0f00 	cmp.w	sl, #0
 8108f80:	d11b      	bne.n	8108fba <_strtod_l+0xa7a>
 8108f82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108f86:	b9f3      	cbnz	r3, 8108fc6 <_strtod_l+0xa86>
 8108f88:	4b6b      	ldr	r3, [pc, #428]	; (8109138 <_strtod_l+0xbf8>)
 8108f8a:	2200      	movs	r2, #0
 8108f8c:	4640      	mov	r0, r8
 8108f8e:	4649      	mov	r1, r9
 8108f90:	f7f7 fe3c 	bl	8100c0c <__aeabi_dcmplt>
 8108f94:	b9d0      	cbnz	r0, 8108fcc <_strtod_l+0xa8c>
 8108f96:	4640      	mov	r0, r8
 8108f98:	4649      	mov	r1, r9
 8108f9a:	4b6b      	ldr	r3, [pc, #428]	; (8109148 <_strtod_l+0xc08>)
 8108f9c:	2200      	movs	r2, #0
 8108f9e:	f7f7 fbc3 	bl	8100728 <__aeabi_dmul>
 8108fa2:	4680      	mov	r8, r0
 8108fa4:	4689      	mov	r9, r1
 8108fa6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8108faa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8108fae:	931b      	str	r3, [sp, #108]	; 0x6c
 8108fb0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8108fb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108fb8:	e79b      	b.n	8108ef2 <_strtod_l+0x9b2>
 8108fba:	f1ba 0f01 	cmp.w	sl, #1
 8108fbe:	d102      	bne.n	8108fc6 <_strtod_l+0xa86>
 8108fc0:	2f00      	cmp	r7, #0
 8108fc2:	f43f ad7e 	beq.w	8108ac2 <_strtod_l+0x582>
 8108fc6:	4b61      	ldr	r3, [pc, #388]	; (810914c <_strtod_l+0xc0c>)
 8108fc8:	2200      	movs	r2, #0
 8108fca:	e78c      	b.n	8108ee6 <_strtod_l+0x9a6>
 8108fcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8109148 <_strtod_l+0xc08>
 8108fd0:	f04f 0800 	mov.w	r8, #0
 8108fd4:	e7e7      	b.n	8108fa6 <_strtod_l+0xa66>
 8108fd6:	4b5c      	ldr	r3, [pc, #368]	; (8109148 <_strtod_l+0xc08>)
 8108fd8:	4640      	mov	r0, r8
 8108fda:	4649      	mov	r1, r9
 8108fdc:	2200      	movs	r2, #0
 8108fde:	f7f7 fba3 	bl	8100728 <__aeabi_dmul>
 8108fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108fe4:	4680      	mov	r8, r0
 8108fe6:	4689      	mov	r9, r1
 8108fe8:	b933      	cbnz	r3, 8108ff8 <_strtod_l+0xab8>
 8108fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108fee:	9012      	str	r0, [sp, #72]	; 0x48
 8108ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8108ff2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8108ff6:	e7dd      	b.n	8108fb4 <_strtod_l+0xa74>
 8108ff8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8108ffc:	e7f9      	b.n	8108ff2 <_strtod_l+0xab2>
 8108ffe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109002:	9b04      	ldr	r3, [sp, #16]
 8109004:	2b00      	cmp	r3, #0
 8109006:	d1a8      	bne.n	8108f5a <_strtod_l+0xa1a>
 8109008:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810900c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810900e:	0d1b      	lsrs	r3, r3, #20
 8109010:	051b      	lsls	r3, r3, #20
 8109012:	429a      	cmp	r2, r3
 8109014:	d1a1      	bne.n	8108f5a <_strtod_l+0xa1a>
 8109016:	4640      	mov	r0, r8
 8109018:	4649      	mov	r1, r9
 810901a:	f7f7 fecd 	bl	8100db8 <__aeabi_d2lz>
 810901e:	f7f7 fb55 	bl	81006cc <__aeabi_l2d>
 8109022:	4602      	mov	r2, r0
 8109024:	460b      	mov	r3, r1
 8109026:	4640      	mov	r0, r8
 8109028:	4649      	mov	r1, r9
 810902a:	f7f7 f9c5 	bl	81003b8 <__aeabi_dsub>
 810902e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109034:	ea43 030a 	orr.w	r3, r3, sl
 8109038:	4313      	orrs	r3, r2
 810903a:	4680      	mov	r8, r0
 810903c:	4689      	mov	r9, r1
 810903e:	d053      	beq.n	81090e8 <_strtod_l+0xba8>
 8109040:	a335      	add	r3, pc, #212	; (adr r3, 8109118 <_strtod_l+0xbd8>)
 8109042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109046:	f7f7 fde1 	bl	8100c0c <__aeabi_dcmplt>
 810904a:	2800      	cmp	r0, #0
 810904c:	f47f acce 	bne.w	81089ec <_strtod_l+0x4ac>
 8109050:	a333      	add	r3, pc, #204	; (adr r3, 8109120 <_strtod_l+0xbe0>)
 8109052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109056:	4640      	mov	r0, r8
 8109058:	4649      	mov	r1, r9
 810905a:	f7f7 fdf5 	bl	8100c48 <__aeabi_dcmpgt>
 810905e:	2800      	cmp	r0, #0
 8109060:	f43f af7b 	beq.w	8108f5a <_strtod_l+0xa1a>
 8109064:	e4c2      	b.n	81089ec <_strtod_l+0x4ac>
 8109066:	9b04      	ldr	r3, [sp, #16]
 8109068:	b333      	cbz	r3, 81090b8 <_strtod_l+0xb78>
 810906a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810906c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109070:	d822      	bhi.n	81090b8 <_strtod_l+0xb78>
 8109072:	a32d      	add	r3, pc, #180	; (adr r3, 8109128 <_strtod_l+0xbe8>)
 8109074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109078:	4640      	mov	r0, r8
 810907a:	4649      	mov	r1, r9
 810907c:	f7f7 fdd0 	bl	8100c20 <__aeabi_dcmple>
 8109080:	b1a0      	cbz	r0, 81090ac <_strtod_l+0xb6c>
 8109082:	4649      	mov	r1, r9
 8109084:	4640      	mov	r0, r8
 8109086:	f7f7 fe27 	bl	8100cd8 <__aeabi_d2uiz>
 810908a:	2801      	cmp	r0, #1
 810908c:	bf38      	it	cc
 810908e:	2001      	movcc	r0, #1
 8109090:	f7f7 fad0 	bl	8100634 <__aeabi_ui2d>
 8109094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109096:	4680      	mov	r8, r0
 8109098:	4689      	mov	r9, r1
 810909a:	bb13      	cbnz	r3, 81090e2 <_strtod_l+0xba2>
 810909c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81090a0:	9014      	str	r0, [sp, #80]	; 0x50
 81090a2:	9315      	str	r3, [sp, #84]	; 0x54
 81090a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81090a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81090ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81090ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81090b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81090b4:	1a9b      	subs	r3, r3, r2
 81090b6:	930d      	str	r3, [sp, #52]	; 0x34
 81090b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81090bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81090c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81090c4:	f002 f946 	bl	810b354 <__ulp>
 81090c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81090cc:	ec53 2b10 	vmov	r2, r3, d0
 81090d0:	f7f7 fb2a 	bl	8100728 <__aeabi_dmul>
 81090d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81090d8:	f7f7 f970 	bl	81003bc <__adddf3>
 81090dc:	4682      	mov	sl, r0
 81090de:	468b      	mov	fp, r1
 81090e0:	e78f      	b.n	8109002 <_strtod_l+0xac2>
 81090e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 81090e6:	e7dd      	b.n	81090a4 <_strtod_l+0xb64>
 81090e8:	a311      	add	r3, pc, #68	; (adr r3, 8109130 <_strtod_l+0xbf0>)
 81090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090ee:	f7f7 fd8d 	bl	8100c0c <__aeabi_dcmplt>
 81090f2:	e7b4      	b.n	810905e <_strtod_l+0xb1e>
 81090f4:	2300      	movs	r3, #0
 81090f6:	930e      	str	r3, [sp, #56]	; 0x38
 81090f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 81090fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81090fc:	6013      	str	r3, [r2, #0]
 81090fe:	f7ff ba65 	b.w	81085cc <_strtod_l+0x8c>
 8109102:	2b65      	cmp	r3, #101	; 0x65
 8109104:	f43f ab5d 	beq.w	81087c2 <_strtod_l+0x282>
 8109108:	2b45      	cmp	r3, #69	; 0x45
 810910a:	f43f ab5a 	beq.w	81087c2 <_strtod_l+0x282>
 810910e:	2201      	movs	r2, #1
 8109110:	f7ff bb92 	b.w	8108838 <_strtod_l+0x2f8>
 8109114:	f3af 8000 	nop.w
 8109118:	94a03595 	.word	0x94a03595
 810911c:	3fdfffff 	.word	0x3fdfffff
 8109120:	35afe535 	.word	0x35afe535
 8109124:	3fe00000 	.word	0x3fe00000
 8109128:	ffc00000 	.word	0xffc00000
 810912c:	41dfffff 	.word	0x41dfffff
 8109130:	94a03595 	.word	0x94a03595
 8109134:	3fcfffff 	.word	0x3fcfffff
 8109138:	3ff00000 	.word	0x3ff00000
 810913c:	7ff00000 	.word	0x7ff00000
 8109140:	7fe00000 	.word	0x7fe00000
 8109144:	7c9fffff 	.word	0x7c9fffff
 8109148:	3fe00000 	.word	0x3fe00000
 810914c:	bff00000 	.word	0xbff00000
 8109150:	7fefffff 	.word	0x7fefffff

08109154 <_strtod_r>:
 8109154:	4b01      	ldr	r3, [pc, #4]	; (810915c <_strtod_r+0x8>)
 8109156:	f7ff b9f3 	b.w	8108540 <_strtod_l>
 810915a:	bf00      	nop
 810915c:	10000120 	.word	0x10000120

08109160 <_strtol_l.isra.0>:
 8109160:	2b01      	cmp	r3, #1
 8109162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109166:	d001      	beq.n	810916c <_strtol_l.isra.0+0xc>
 8109168:	2b24      	cmp	r3, #36	; 0x24
 810916a:	d906      	bls.n	810917a <_strtol_l.isra.0+0x1a>
 810916c:	f7fe f88e 	bl	810728c <__errno>
 8109170:	2316      	movs	r3, #22
 8109172:	6003      	str	r3, [r0, #0]
 8109174:	2000      	movs	r0, #0
 8109176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810917a:	4f3a      	ldr	r7, [pc, #232]	; (8109264 <_strtol_l.isra.0+0x104>)
 810917c:	468e      	mov	lr, r1
 810917e:	4676      	mov	r6, lr
 8109180:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109184:	5de5      	ldrb	r5, [r4, r7]
 8109186:	f015 0508 	ands.w	r5, r5, #8
 810918a:	d1f8      	bne.n	810917e <_strtol_l.isra.0+0x1e>
 810918c:	2c2d      	cmp	r4, #45	; 0x2d
 810918e:	d134      	bne.n	81091fa <_strtol_l.isra.0+0x9a>
 8109190:	f89e 4000 	ldrb.w	r4, [lr]
 8109194:	f04f 0801 	mov.w	r8, #1
 8109198:	f106 0e02 	add.w	lr, r6, #2
 810919c:	2b00      	cmp	r3, #0
 810919e:	d05c      	beq.n	810925a <_strtol_l.isra.0+0xfa>
 81091a0:	2b10      	cmp	r3, #16
 81091a2:	d10c      	bne.n	81091be <_strtol_l.isra.0+0x5e>
 81091a4:	2c30      	cmp	r4, #48	; 0x30
 81091a6:	d10a      	bne.n	81091be <_strtol_l.isra.0+0x5e>
 81091a8:	f89e 4000 	ldrb.w	r4, [lr]
 81091ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 81091b0:	2c58      	cmp	r4, #88	; 0x58
 81091b2:	d14d      	bne.n	8109250 <_strtol_l.isra.0+0xf0>
 81091b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 81091b8:	2310      	movs	r3, #16
 81091ba:	f10e 0e02 	add.w	lr, lr, #2
 81091be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 81091c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 81091c6:	2600      	movs	r6, #0
 81091c8:	fbbc f9f3 	udiv	r9, ip, r3
 81091cc:	4635      	mov	r5, r6
 81091ce:	fb03 ca19 	mls	sl, r3, r9, ip
 81091d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 81091d6:	2f09      	cmp	r7, #9
 81091d8:	d818      	bhi.n	810920c <_strtol_l.isra.0+0xac>
 81091da:	463c      	mov	r4, r7
 81091dc:	42a3      	cmp	r3, r4
 81091de:	dd24      	ble.n	810922a <_strtol_l.isra.0+0xca>
 81091e0:	2e00      	cmp	r6, #0
 81091e2:	db1f      	blt.n	8109224 <_strtol_l.isra.0+0xc4>
 81091e4:	45a9      	cmp	r9, r5
 81091e6:	d31d      	bcc.n	8109224 <_strtol_l.isra.0+0xc4>
 81091e8:	d101      	bne.n	81091ee <_strtol_l.isra.0+0x8e>
 81091ea:	45a2      	cmp	sl, r4
 81091ec:	db1a      	blt.n	8109224 <_strtol_l.isra.0+0xc4>
 81091ee:	fb05 4503 	mla	r5, r5, r3, r4
 81091f2:	2601      	movs	r6, #1
 81091f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 81091f8:	e7eb      	b.n	81091d2 <_strtol_l.isra.0+0x72>
 81091fa:	2c2b      	cmp	r4, #43	; 0x2b
 81091fc:	bf08      	it	eq
 81091fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8109202:	46a8      	mov	r8, r5
 8109204:	bf08      	it	eq
 8109206:	f106 0e02 	addeq.w	lr, r6, #2
 810920a:	e7c7      	b.n	810919c <_strtol_l.isra.0+0x3c>
 810920c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8109210:	2f19      	cmp	r7, #25
 8109212:	d801      	bhi.n	8109218 <_strtol_l.isra.0+0xb8>
 8109214:	3c37      	subs	r4, #55	; 0x37
 8109216:	e7e1      	b.n	81091dc <_strtol_l.isra.0+0x7c>
 8109218:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 810921c:	2f19      	cmp	r7, #25
 810921e:	d804      	bhi.n	810922a <_strtol_l.isra.0+0xca>
 8109220:	3c57      	subs	r4, #87	; 0x57
 8109222:	e7db      	b.n	81091dc <_strtol_l.isra.0+0x7c>
 8109224:	f04f 36ff 	mov.w	r6, #4294967295
 8109228:	e7e4      	b.n	81091f4 <_strtol_l.isra.0+0x94>
 810922a:	2e00      	cmp	r6, #0
 810922c:	da05      	bge.n	810923a <_strtol_l.isra.0+0xda>
 810922e:	2322      	movs	r3, #34	; 0x22
 8109230:	6003      	str	r3, [r0, #0]
 8109232:	4665      	mov	r5, ip
 8109234:	b942      	cbnz	r2, 8109248 <_strtol_l.isra.0+0xe8>
 8109236:	4628      	mov	r0, r5
 8109238:	e79d      	b.n	8109176 <_strtol_l.isra.0+0x16>
 810923a:	f1b8 0f00 	cmp.w	r8, #0
 810923e:	d000      	beq.n	8109242 <_strtol_l.isra.0+0xe2>
 8109240:	426d      	negs	r5, r5
 8109242:	2a00      	cmp	r2, #0
 8109244:	d0f7      	beq.n	8109236 <_strtol_l.isra.0+0xd6>
 8109246:	b10e      	cbz	r6, 810924c <_strtol_l.isra.0+0xec>
 8109248:	f10e 31ff 	add.w	r1, lr, #4294967295
 810924c:	6011      	str	r1, [r2, #0]
 810924e:	e7f2      	b.n	8109236 <_strtol_l.isra.0+0xd6>
 8109250:	2430      	movs	r4, #48	; 0x30
 8109252:	2b00      	cmp	r3, #0
 8109254:	d1b3      	bne.n	81091be <_strtol_l.isra.0+0x5e>
 8109256:	2308      	movs	r3, #8
 8109258:	e7b1      	b.n	81091be <_strtol_l.isra.0+0x5e>
 810925a:	2c30      	cmp	r4, #48	; 0x30
 810925c:	d0a4      	beq.n	81091a8 <_strtol_l.isra.0+0x48>
 810925e:	230a      	movs	r3, #10
 8109260:	e7ad      	b.n	81091be <_strtol_l.isra.0+0x5e>
 8109262:	bf00      	nop
 8109264:	0810be81 	.word	0x0810be81

08109268 <_strtol_r>:
 8109268:	f7ff bf7a 	b.w	8109160 <_strtol_l.isra.0>

0810926c <__swbuf_r>:
 810926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810926e:	460e      	mov	r6, r1
 8109270:	4614      	mov	r4, r2
 8109272:	4605      	mov	r5, r0
 8109274:	b118      	cbz	r0, 810927e <__swbuf_r+0x12>
 8109276:	6983      	ldr	r3, [r0, #24]
 8109278:	b90b      	cbnz	r3, 810927e <__swbuf_r+0x12>
 810927a:	f001 f84f 	bl	810a31c <__sinit>
 810927e:	4b21      	ldr	r3, [pc, #132]	; (8109304 <__swbuf_r+0x98>)
 8109280:	429c      	cmp	r4, r3
 8109282:	d12b      	bne.n	81092dc <__swbuf_r+0x70>
 8109284:	686c      	ldr	r4, [r5, #4]
 8109286:	69a3      	ldr	r3, [r4, #24]
 8109288:	60a3      	str	r3, [r4, #8]
 810928a:	89a3      	ldrh	r3, [r4, #12]
 810928c:	071a      	lsls	r2, r3, #28
 810928e:	d52f      	bpl.n	81092f0 <__swbuf_r+0x84>
 8109290:	6923      	ldr	r3, [r4, #16]
 8109292:	b36b      	cbz	r3, 81092f0 <__swbuf_r+0x84>
 8109294:	6923      	ldr	r3, [r4, #16]
 8109296:	6820      	ldr	r0, [r4, #0]
 8109298:	1ac0      	subs	r0, r0, r3
 810929a:	6963      	ldr	r3, [r4, #20]
 810929c:	b2f6      	uxtb	r6, r6
 810929e:	4283      	cmp	r3, r0
 81092a0:	4637      	mov	r7, r6
 81092a2:	dc04      	bgt.n	81092ae <__swbuf_r+0x42>
 81092a4:	4621      	mov	r1, r4
 81092a6:	4628      	mov	r0, r5
 81092a8:	f000 ffa4 	bl	810a1f4 <_fflush_r>
 81092ac:	bb30      	cbnz	r0, 81092fc <__swbuf_r+0x90>
 81092ae:	68a3      	ldr	r3, [r4, #8]
 81092b0:	3b01      	subs	r3, #1
 81092b2:	60a3      	str	r3, [r4, #8]
 81092b4:	6823      	ldr	r3, [r4, #0]
 81092b6:	1c5a      	adds	r2, r3, #1
 81092b8:	6022      	str	r2, [r4, #0]
 81092ba:	701e      	strb	r6, [r3, #0]
 81092bc:	6963      	ldr	r3, [r4, #20]
 81092be:	3001      	adds	r0, #1
 81092c0:	4283      	cmp	r3, r0
 81092c2:	d004      	beq.n	81092ce <__swbuf_r+0x62>
 81092c4:	89a3      	ldrh	r3, [r4, #12]
 81092c6:	07db      	lsls	r3, r3, #31
 81092c8:	d506      	bpl.n	81092d8 <__swbuf_r+0x6c>
 81092ca:	2e0a      	cmp	r6, #10
 81092cc:	d104      	bne.n	81092d8 <__swbuf_r+0x6c>
 81092ce:	4621      	mov	r1, r4
 81092d0:	4628      	mov	r0, r5
 81092d2:	f000 ff8f 	bl	810a1f4 <_fflush_r>
 81092d6:	b988      	cbnz	r0, 81092fc <__swbuf_r+0x90>
 81092d8:	4638      	mov	r0, r7
 81092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81092dc:	4b0a      	ldr	r3, [pc, #40]	; (8109308 <__swbuf_r+0x9c>)
 81092de:	429c      	cmp	r4, r3
 81092e0:	d101      	bne.n	81092e6 <__swbuf_r+0x7a>
 81092e2:	68ac      	ldr	r4, [r5, #8]
 81092e4:	e7cf      	b.n	8109286 <__swbuf_r+0x1a>
 81092e6:	4b09      	ldr	r3, [pc, #36]	; (810930c <__swbuf_r+0xa0>)
 81092e8:	429c      	cmp	r4, r3
 81092ea:	bf08      	it	eq
 81092ec:	68ec      	ldreq	r4, [r5, #12]
 81092ee:	e7ca      	b.n	8109286 <__swbuf_r+0x1a>
 81092f0:	4621      	mov	r1, r4
 81092f2:	4628      	mov	r0, r5
 81092f4:	f000 f80c 	bl	8109310 <__swsetup_r>
 81092f8:	2800      	cmp	r0, #0
 81092fa:	d0cb      	beq.n	8109294 <__swbuf_r+0x28>
 81092fc:	f04f 37ff 	mov.w	r7, #4294967295
 8109300:	e7ea      	b.n	81092d8 <__swbuf_r+0x6c>
 8109302:	bf00      	nop
 8109304:	0810c038 	.word	0x0810c038
 8109308:	0810c058 	.word	0x0810c058
 810930c:	0810c018 	.word	0x0810c018

08109310 <__swsetup_r>:
 8109310:	4b32      	ldr	r3, [pc, #200]	; (81093dc <__swsetup_r+0xcc>)
 8109312:	b570      	push	{r4, r5, r6, lr}
 8109314:	681d      	ldr	r5, [r3, #0]
 8109316:	4606      	mov	r6, r0
 8109318:	460c      	mov	r4, r1
 810931a:	b125      	cbz	r5, 8109326 <__swsetup_r+0x16>
 810931c:	69ab      	ldr	r3, [r5, #24]
 810931e:	b913      	cbnz	r3, 8109326 <__swsetup_r+0x16>
 8109320:	4628      	mov	r0, r5
 8109322:	f000 fffb 	bl	810a31c <__sinit>
 8109326:	4b2e      	ldr	r3, [pc, #184]	; (81093e0 <__swsetup_r+0xd0>)
 8109328:	429c      	cmp	r4, r3
 810932a:	d10f      	bne.n	810934c <__swsetup_r+0x3c>
 810932c:	686c      	ldr	r4, [r5, #4]
 810932e:	89a3      	ldrh	r3, [r4, #12]
 8109330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109334:	0719      	lsls	r1, r3, #28
 8109336:	d42c      	bmi.n	8109392 <__swsetup_r+0x82>
 8109338:	06dd      	lsls	r5, r3, #27
 810933a:	d411      	bmi.n	8109360 <__swsetup_r+0x50>
 810933c:	2309      	movs	r3, #9
 810933e:	6033      	str	r3, [r6, #0]
 8109340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8109344:	81a3      	strh	r3, [r4, #12]
 8109346:	f04f 30ff 	mov.w	r0, #4294967295
 810934a:	e03e      	b.n	81093ca <__swsetup_r+0xba>
 810934c:	4b25      	ldr	r3, [pc, #148]	; (81093e4 <__swsetup_r+0xd4>)
 810934e:	429c      	cmp	r4, r3
 8109350:	d101      	bne.n	8109356 <__swsetup_r+0x46>
 8109352:	68ac      	ldr	r4, [r5, #8]
 8109354:	e7eb      	b.n	810932e <__swsetup_r+0x1e>
 8109356:	4b24      	ldr	r3, [pc, #144]	; (81093e8 <__swsetup_r+0xd8>)
 8109358:	429c      	cmp	r4, r3
 810935a:	bf08      	it	eq
 810935c:	68ec      	ldreq	r4, [r5, #12]
 810935e:	e7e6      	b.n	810932e <__swsetup_r+0x1e>
 8109360:	0758      	lsls	r0, r3, #29
 8109362:	d512      	bpl.n	810938a <__swsetup_r+0x7a>
 8109364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8109366:	b141      	cbz	r1, 810937a <__swsetup_r+0x6a>
 8109368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810936c:	4299      	cmp	r1, r3
 810936e:	d002      	beq.n	8109376 <__swsetup_r+0x66>
 8109370:	4630      	mov	r0, r6
 8109372:	f7fd ffed 	bl	8107350 <_free_r>
 8109376:	2300      	movs	r3, #0
 8109378:	6363      	str	r3, [r4, #52]	; 0x34
 810937a:	89a3      	ldrh	r3, [r4, #12]
 810937c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109380:	81a3      	strh	r3, [r4, #12]
 8109382:	2300      	movs	r3, #0
 8109384:	6063      	str	r3, [r4, #4]
 8109386:	6923      	ldr	r3, [r4, #16]
 8109388:	6023      	str	r3, [r4, #0]
 810938a:	89a3      	ldrh	r3, [r4, #12]
 810938c:	f043 0308 	orr.w	r3, r3, #8
 8109390:	81a3      	strh	r3, [r4, #12]
 8109392:	6923      	ldr	r3, [r4, #16]
 8109394:	b94b      	cbnz	r3, 81093aa <__swsetup_r+0x9a>
 8109396:	89a3      	ldrh	r3, [r4, #12]
 8109398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810939c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81093a0:	d003      	beq.n	81093aa <__swsetup_r+0x9a>
 81093a2:	4621      	mov	r1, r4
 81093a4:	4630      	mov	r0, r6
 81093a6:	f001 fbf1 	bl	810ab8c <__smakebuf_r>
 81093aa:	89a0      	ldrh	r0, [r4, #12]
 81093ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81093b0:	f010 0301 	ands.w	r3, r0, #1
 81093b4:	d00a      	beq.n	81093cc <__swsetup_r+0xbc>
 81093b6:	2300      	movs	r3, #0
 81093b8:	60a3      	str	r3, [r4, #8]
 81093ba:	6963      	ldr	r3, [r4, #20]
 81093bc:	425b      	negs	r3, r3
 81093be:	61a3      	str	r3, [r4, #24]
 81093c0:	6923      	ldr	r3, [r4, #16]
 81093c2:	b943      	cbnz	r3, 81093d6 <__swsetup_r+0xc6>
 81093c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81093c8:	d1ba      	bne.n	8109340 <__swsetup_r+0x30>
 81093ca:	bd70      	pop	{r4, r5, r6, pc}
 81093cc:	0781      	lsls	r1, r0, #30
 81093ce:	bf58      	it	pl
 81093d0:	6963      	ldrpl	r3, [r4, #20]
 81093d2:	60a3      	str	r3, [r4, #8]
 81093d4:	e7f4      	b.n	81093c0 <__swsetup_r+0xb0>
 81093d6:	2000      	movs	r0, #0
 81093d8:	e7f7      	b.n	81093ca <__swsetup_r+0xba>
 81093da:	bf00      	nop
 81093dc:	100000b8 	.word	0x100000b8
 81093e0:	0810c038 	.word	0x0810c038
 81093e4:	0810c058 	.word	0x0810c058
 81093e8:	0810c018 	.word	0x0810c018

081093ec <abort>:
 81093ec:	b508      	push	{r3, lr}
 81093ee:	2006      	movs	r0, #6
 81093f0:	f002 fac2 	bl	810b978 <raise>
 81093f4:	2001      	movs	r0, #1
 81093f6:	f7f8 f911 	bl	810161c <_exit>

081093fa <quorem>:
 81093fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81093fe:	6903      	ldr	r3, [r0, #16]
 8109400:	690c      	ldr	r4, [r1, #16]
 8109402:	42a3      	cmp	r3, r4
 8109404:	4607      	mov	r7, r0
 8109406:	f2c0 8081 	blt.w	810950c <quorem+0x112>
 810940a:	3c01      	subs	r4, #1
 810940c:	f101 0814 	add.w	r8, r1, #20
 8109410:	f100 0514 	add.w	r5, r0, #20
 8109414:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109418:	9301      	str	r3, [sp, #4]
 810941a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810941e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109422:	3301      	adds	r3, #1
 8109424:	429a      	cmp	r2, r3
 8109426:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810942a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810942e:	fbb2 f6f3 	udiv	r6, r2, r3
 8109432:	d331      	bcc.n	8109498 <quorem+0x9e>
 8109434:	f04f 0e00 	mov.w	lr, #0
 8109438:	4640      	mov	r0, r8
 810943a:	46ac      	mov	ip, r5
 810943c:	46f2      	mov	sl, lr
 810943e:	f850 2b04 	ldr.w	r2, [r0], #4
 8109442:	b293      	uxth	r3, r2
 8109444:	fb06 e303 	mla	r3, r6, r3, lr
 8109448:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810944c:	b29b      	uxth	r3, r3
 810944e:	ebaa 0303 	sub.w	r3, sl, r3
 8109452:	0c12      	lsrs	r2, r2, #16
 8109454:	f8dc a000 	ldr.w	sl, [ip]
 8109458:	fb06 e202 	mla	r2, r6, r2, lr
 810945c:	fa13 f38a 	uxtah	r3, r3, sl
 8109460:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8109464:	fa1f fa82 	uxth.w	sl, r2
 8109468:	f8dc 2000 	ldr.w	r2, [ip]
 810946c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8109470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109474:	b29b      	uxth	r3, r3
 8109476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810947a:	4581      	cmp	r9, r0
 810947c:	f84c 3b04 	str.w	r3, [ip], #4
 8109480:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8109484:	d2db      	bcs.n	810943e <quorem+0x44>
 8109486:	f855 300b 	ldr.w	r3, [r5, fp]
 810948a:	b92b      	cbnz	r3, 8109498 <quorem+0x9e>
 810948c:	9b01      	ldr	r3, [sp, #4]
 810948e:	3b04      	subs	r3, #4
 8109490:	429d      	cmp	r5, r3
 8109492:	461a      	mov	r2, r3
 8109494:	d32e      	bcc.n	81094f4 <quorem+0xfa>
 8109496:	613c      	str	r4, [r7, #16]
 8109498:	4638      	mov	r0, r7
 810949a:	f001 feb7 	bl	810b20c <__mcmp>
 810949e:	2800      	cmp	r0, #0
 81094a0:	db24      	blt.n	81094ec <quorem+0xf2>
 81094a2:	3601      	adds	r6, #1
 81094a4:	4628      	mov	r0, r5
 81094a6:	f04f 0c00 	mov.w	ip, #0
 81094aa:	f858 2b04 	ldr.w	r2, [r8], #4
 81094ae:	f8d0 e000 	ldr.w	lr, [r0]
 81094b2:	b293      	uxth	r3, r2
 81094b4:	ebac 0303 	sub.w	r3, ip, r3
 81094b8:	0c12      	lsrs	r2, r2, #16
 81094ba:	fa13 f38e 	uxtah	r3, r3, lr
 81094be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 81094c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81094c6:	b29b      	uxth	r3, r3
 81094c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81094cc:	45c1      	cmp	r9, r8
 81094ce:	f840 3b04 	str.w	r3, [r0], #4
 81094d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81094d6:	d2e8      	bcs.n	81094aa <quorem+0xb0>
 81094d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81094dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81094e0:	b922      	cbnz	r2, 81094ec <quorem+0xf2>
 81094e2:	3b04      	subs	r3, #4
 81094e4:	429d      	cmp	r5, r3
 81094e6:	461a      	mov	r2, r3
 81094e8:	d30a      	bcc.n	8109500 <quorem+0x106>
 81094ea:	613c      	str	r4, [r7, #16]
 81094ec:	4630      	mov	r0, r6
 81094ee:	b003      	add	sp, #12
 81094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81094f4:	6812      	ldr	r2, [r2, #0]
 81094f6:	3b04      	subs	r3, #4
 81094f8:	2a00      	cmp	r2, #0
 81094fa:	d1cc      	bne.n	8109496 <quorem+0x9c>
 81094fc:	3c01      	subs	r4, #1
 81094fe:	e7c7      	b.n	8109490 <quorem+0x96>
 8109500:	6812      	ldr	r2, [r2, #0]
 8109502:	3b04      	subs	r3, #4
 8109504:	2a00      	cmp	r2, #0
 8109506:	d1f0      	bne.n	81094ea <quorem+0xf0>
 8109508:	3c01      	subs	r4, #1
 810950a:	e7eb      	b.n	81094e4 <quorem+0xea>
 810950c:	2000      	movs	r0, #0
 810950e:	e7ee      	b.n	81094ee <quorem+0xf4>

08109510 <_dtoa_r>:
 8109510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109514:	ed2d 8b02 	vpush	{d8}
 8109518:	ec57 6b10 	vmov	r6, r7, d0
 810951c:	b095      	sub	sp, #84	; 0x54
 810951e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109520:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8109524:	9105      	str	r1, [sp, #20]
 8109526:	e9cd 6702 	strd	r6, r7, [sp, #8]
 810952a:	4604      	mov	r4, r0
 810952c:	9209      	str	r2, [sp, #36]	; 0x24
 810952e:	930f      	str	r3, [sp, #60]	; 0x3c
 8109530:	b975      	cbnz	r5, 8109550 <_dtoa_r+0x40>
 8109532:	2010      	movs	r0, #16
 8109534:	f7fd fee6 	bl	8107304 <malloc>
 8109538:	4602      	mov	r2, r0
 810953a:	6260      	str	r0, [r4, #36]	; 0x24
 810953c:	b920      	cbnz	r0, 8109548 <_dtoa_r+0x38>
 810953e:	4bb2      	ldr	r3, [pc, #712]	; (8109808 <_dtoa_r+0x2f8>)
 8109540:	21ea      	movs	r1, #234	; 0xea
 8109542:	48b2      	ldr	r0, [pc, #712]	; (810980c <_dtoa_r+0x2fc>)
 8109544:	f7fd fe84 	bl	8107250 <__assert_func>
 8109548:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810954c:	6005      	str	r5, [r0, #0]
 810954e:	60c5      	str	r5, [r0, #12]
 8109550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109552:	6819      	ldr	r1, [r3, #0]
 8109554:	b151      	cbz	r1, 810956c <_dtoa_r+0x5c>
 8109556:	685a      	ldr	r2, [r3, #4]
 8109558:	604a      	str	r2, [r1, #4]
 810955a:	2301      	movs	r3, #1
 810955c:	4093      	lsls	r3, r2
 810955e:	608b      	str	r3, [r1, #8]
 8109560:	4620      	mov	r0, r4
 8109562:	f001 fbcb 	bl	810acfc <_Bfree>
 8109566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109568:	2200      	movs	r2, #0
 810956a:	601a      	str	r2, [r3, #0]
 810956c:	1e3b      	subs	r3, r7, #0
 810956e:	bfb9      	ittee	lt
 8109570:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8109574:	9303      	strlt	r3, [sp, #12]
 8109576:	2300      	movge	r3, #0
 8109578:	f8c8 3000 	strge.w	r3, [r8]
 810957c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8109580:	4ba3      	ldr	r3, [pc, #652]	; (8109810 <_dtoa_r+0x300>)
 8109582:	bfbc      	itt	lt
 8109584:	2201      	movlt	r2, #1
 8109586:	f8c8 2000 	strlt.w	r2, [r8]
 810958a:	ea33 0309 	bics.w	r3, r3, r9
 810958e:	d11b      	bne.n	81095c8 <_dtoa_r+0xb8>
 8109590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109592:	f242 730f 	movw	r3, #9999	; 0x270f
 8109596:	6013      	str	r3, [r2, #0]
 8109598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810959c:	4333      	orrs	r3, r6
 810959e:	f000 857a 	beq.w	810a096 <_dtoa_r+0xb86>
 81095a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81095a4:	b963      	cbnz	r3, 81095c0 <_dtoa_r+0xb0>
 81095a6:	4b9b      	ldr	r3, [pc, #620]	; (8109814 <_dtoa_r+0x304>)
 81095a8:	e024      	b.n	81095f4 <_dtoa_r+0xe4>
 81095aa:	4b9b      	ldr	r3, [pc, #620]	; (8109818 <_dtoa_r+0x308>)
 81095ac:	9300      	str	r3, [sp, #0]
 81095ae:	3308      	adds	r3, #8
 81095b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81095b2:	6013      	str	r3, [r2, #0]
 81095b4:	9800      	ldr	r0, [sp, #0]
 81095b6:	b015      	add	sp, #84	; 0x54
 81095b8:	ecbd 8b02 	vpop	{d8}
 81095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81095c0:	4b94      	ldr	r3, [pc, #592]	; (8109814 <_dtoa_r+0x304>)
 81095c2:	9300      	str	r3, [sp, #0]
 81095c4:	3303      	adds	r3, #3
 81095c6:	e7f3      	b.n	81095b0 <_dtoa_r+0xa0>
 81095c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 81095cc:	2200      	movs	r2, #0
 81095ce:	ec51 0b17 	vmov	r0, r1, d7
 81095d2:	2300      	movs	r3, #0
 81095d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 81095d8:	f7f7 fb0e 	bl	8100bf8 <__aeabi_dcmpeq>
 81095dc:	4680      	mov	r8, r0
 81095de:	b158      	cbz	r0, 81095f8 <_dtoa_r+0xe8>
 81095e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81095e2:	2301      	movs	r3, #1
 81095e4:	6013      	str	r3, [r2, #0]
 81095e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81095e8:	2b00      	cmp	r3, #0
 81095ea:	f000 8551 	beq.w	810a090 <_dtoa_r+0xb80>
 81095ee:	488b      	ldr	r0, [pc, #556]	; (810981c <_dtoa_r+0x30c>)
 81095f0:	6018      	str	r0, [r3, #0]
 81095f2:	1e43      	subs	r3, r0, #1
 81095f4:	9300      	str	r3, [sp, #0]
 81095f6:	e7dd      	b.n	81095b4 <_dtoa_r+0xa4>
 81095f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81095fc:	aa12      	add	r2, sp, #72	; 0x48
 81095fe:	a913      	add	r1, sp, #76	; 0x4c
 8109600:	4620      	mov	r0, r4
 8109602:	f001 ff23 	bl	810b44c <__d2b>
 8109606:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810960a:	4683      	mov	fp, r0
 810960c:	2d00      	cmp	r5, #0
 810960e:	d07c      	beq.n	810970a <_dtoa_r+0x1fa>
 8109610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109612:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8109616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810961a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 810961e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8109622:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8109626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810962a:	4b7d      	ldr	r3, [pc, #500]	; (8109820 <_dtoa_r+0x310>)
 810962c:	2200      	movs	r2, #0
 810962e:	4630      	mov	r0, r6
 8109630:	4639      	mov	r1, r7
 8109632:	f7f6 fec1 	bl	81003b8 <__aeabi_dsub>
 8109636:	a36e      	add	r3, pc, #440	; (adr r3, 81097f0 <_dtoa_r+0x2e0>)
 8109638:	e9d3 2300 	ldrd	r2, r3, [r3]
 810963c:	f7f7 f874 	bl	8100728 <__aeabi_dmul>
 8109640:	a36d      	add	r3, pc, #436	; (adr r3, 81097f8 <_dtoa_r+0x2e8>)
 8109642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109646:	f7f6 feb9 	bl	81003bc <__adddf3>
 810964a:	4606      	mov	r6, r0
 810964c:	4628      	mov	r0, r5
 810964e:	460f      	mov	r7, r1
 8109650:	f7f7 f800 	bl	8100654 <__aeabi_i2d>
 8109654:	a36a      	add	r3, pc, #424	; (adr r3, 8109800 <_dtoa_r+0x2f0>)
 8109656:	e9d3 2300 	ldrd	r2, r3, [r3]
 810965a:	f7f7 f865 	bl	8100728 <__aeabi_dmul>
 810965e:	4602      	mov	r2, r0
 8109660:	460b      	mov	r3, r1
 8109662:	4630      	mov	r0, r6
 8109664:	4639      	mov	r1, r7
 8109666:	f7f6 fea9 	bl	81003bc <__adddf3>
 810966a:	4606      	mov	r6, r0
 810966c:	460f      	mov	r7, r1
 810966e:	f7f7 fb0b 	bl	8100c88 <__aeabi_d2iz>
 8109672:	2200      	movs	r2, #0
 8109674:	4682      	mov	sl, r0
 8109676:	2300      	movs	r3, #0
 8109678:	4630      	mov	r0, r6
 810967a:	4639      	mov	r1, r7
 810967c:	f7f7 fac6 	bl	8100c0c <__aeabi_dcmplt>
 8109680:	b148      	cbz	r0, 8109696 <_dtoa_r+0x186>
 8109682:	4650      	mov	r0, sl
 8109684:	f7f6 ffe6 	bl	8100654 <__aeabi_i2d>
 8109688:	4632      	mov	r2, r6
 810968a:	463b      	mov	r3, r7
 810968c:	f7f7 fab4 	bl	8100bf8 <__aeabi_dcmpeq>
 8109690:	b908      	cbnz	r0, 8109696 <_dtoa_r+0x186>
 8109692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109696:	f1ba 0f16 	cmp.w	sl, #22
 810969a:	d854      	bhi.n	8109746 <_dtoa_r+0x236>
 810969c:	4b61      	ldr	r3, [pc, #388]	; (8109824 <_dtoa_r+0x314>)
 810969e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81096aa:	f7f7 faaf 	bl	8100c0c <__aeabi_dcmplt>
 81096ae:	2800      	cmp	r0, #0
 81096b0:	d04b      	beq.n	810974a <_dtoa_r+0x23a>
 81096b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81096b6:	2300      	movs	r3, #0
 81096b8:	930e      	str	r3, [sp, #56]	; 0x38
 81096ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 81096bc:	1b5d      	subs	r5, r3, r5
 81096be:	1e6b      	subs	r3, r5, #1
 81096c0:	9304      	str	r3, [sp, #16]
 81096c2:	bf43      	ittte	mi
 81096c4:	2300      	movmi	r3, #0
 81096c6:	f1c5 0801 	rsbmi	r8, r5, #1
 81096ca:	9304      	strmi	r3, [sp, #16]
 81096cc:	f04f 0800 	movpl.w	r8, #0
 81096d0:	f1ba 0f00 	cmp.w	sl, #0
 81096d4:	db3b      	blt.n	810974e <_dtoa_r+0x23e>
 81096d6:	9b04      	ldr	r3, [sp, #16]
 81096d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 81096dc:	4453      	add	r3, sl
 81096de:	9304      	str	r3, [sp, #16]
 81096e0:	2300      	movs	r3, #0
 81096e2:	9306      	str	r3, [sp, #24]
 81096e4:	9b05      	ldr	r3, [sp, #20]
 81096e6:	2b09      	cmp	r3, #9
 81096e8:	d869      	bhi.n	81097be <_dtoa_r+0x2ae>
 81096ea:	2b05      	cmp	r3, #5
 81096ec:	bfc4      	itt	gt
 81096ee:	3b04      	subgt	r3, #4
 81096f0:	9305      	strgt	r3, [sp, #20]
 81096f2:	9b05      	ldr	r3, [sp, #20]
 81096f4:	f1a3 0302 	sub.w	r3, r3, #2
 81096f8:	bfcc      	ite	gt
 81096fa:	2500      	movgt	r5, #0
 81096fc:	2501      	movle	r5, #1
 81096fe:	2b03      	cmp	r3, #3
 8109700:	d869      	bhi.n	81097d6 <_dtoa_r+0x2c6>
 8109702:	e8df f003 	tbb	[pc, r3]
 8109706:	4e2c      	.short	0x4e2c
 8109708:	5a4c      	.short	0x5a4c
 810970a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 810970e:	441d      	add	r5, r3
 8109710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8109714:	2b20      	cmp	r3, #32
 8109716:	bfc1      	itttt	gt
 8109718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810971c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109720:	fa09 f303 	lslgt.w	r3, r9, r3
 8109724:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109728:	bfda      	itte	le
 810972a:	f1c3 0320 	rsble	r3, r3, #32
 810972e:	fa06 f003 	lslle.w	r0, r6, r3
 8109732:	4318      	orrgt	r0, r3
 8109734:	f7f6 ff7e 	bl	8100634 <__aeabi_ui2d>
 8109738:	2301      	movs	r3, #1
 810973a:	4606      	mov	r6, r0
 810973c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8109740:	3d01      	subs	r5, #1
 8109742:	9310      	str	r3, [sp, #64]	; 0x40
 8109744:	e771      	b.n	810962a <_dtoa_r+0x11a>
 8109746:	2301      	movs	r3, #1
 8109748:	e7b6      	b.n	81096b8 <_dtoa_r+0x1a8>
 810974a:	900e      	str	r0, [sp, #56]	; 0x38
 810974c:	e7b5      	b.n	81096ba <_dtoa_r+0x1aa>
 810974e:	f1ca 0300 	rsb	r3, sl, #0
 8109752:	9306      	str	r3, [sp, #24]
 8109754:	2300      	movs	r3, #0
 8109756:	eba8 080a 	sub.w	r8, r8, sl
 810975a:	930d      	str	r3, [sp, #52]	; 0x34
 810975c:	e7c2      	b.n	81096e4 <_dtoa_r+0x1d4>
 810975e:	2300      	movs	r3, #0
 8109760:	9308      	str	r3, [sp, #32]
 8109762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109764:	2b00      	cmp	r3, #0
 8109766:	dc39      	bgt.n	81097dc <_dtoa_r+0x2cc>
 8109768:	f04f 0901 	mov.w	r9, #1
 810976c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109770:	464b      	mov	r3, r9
 8109772:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8109776:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109778:	2200      	movs	r2, #0
 810977a:	6042      	str	r2, [r0, #4]
 810977c:	2204      	movs	r2, #4
 810977e:	f102 0614 	add.w	r6, r2, #20
 8109782:	429e      	cmp	r6, r3
 8109784:	6841      	ldr	r1, [r0, #4]
 8109786:	d92f      	bls.n	81097e8 <_dtoa_r+0x2d8>
 8109788:	4620      	mov	r0, r4
 810978a:	f001 fa77 	bl	810ac7c <_Balloc>
 810978e:	9000      	str	r0, [sp, #0]
 8109790:	2800      	cmp	r0, #0
 8109792:	d14b      	bne.n	810982c <_dtoa_r+0x31c>
 8109794:	4b24      	ldr	r3, [pc, #144]	; (8109828 <_dtoa_r+0x318>)
 8109796:	4602      	mov	r2, r0
 8109798:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810979c:	e6d1      	b.n	8109542 <_dtoa_r+0x32>
 810979e:	2301      	movs	r3, #1
 81097a0:	e7de      	b.n	8109760 <_dtoa_r+0x250>
 81097a2:	2300      	movs	r3, #0
 81097a4:	9308      	str	r3, [sp, #32]
 81097a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81097a8:	eb0a 0903 	add.w	r9, sl, r3
 81097ac:	f109 0301 	add.w	r3, r9, #1
 81097b0:	2b01      	cmp	r3, #1
 81097b2:	9301      	str	r3, [sp, #4]
 81097b4:	bfb8      	it	lt
 81097b6:	2301      	movlt	r3, #1
 81097b8:	e7dd      	b.n	8109776 <_dtoa_r+0x266>
 81097ba:	2301      	movs	r3, #1
 81097bc:	e7f2      	b.n	81097a4 <_dtoa_r+0x294>
 81097be:	2501      	movs	r5, #1
 81097c0:	2300      	movs	r3, #0
 81097c2:	9305      	str	r3, [sp, #20]
 81097c4:	9508      	str	r5, [sp, #32]
 81097c6:	f04f 39ff 	mov.w	r9, #4294967295
 81097ca:	2200      	movs	r2, #0
 81097cc:	f8cd 9004 	str.w	r9, [sp, #4]
 81097d0:	2312      	movs	r3, #18
 81097d2:	9209      	str	r2, [sp, #36]	; 0x24
 81097d4:	e7cf      	b.n	8109776 <_dtoa_r+0x266>
 81097d6:	2301      	movs	r3, #1
 81097d8:	9308      	str	r3, [sp, #32]
 81097da:	e7f4      	b.n	81097c6 <_dtoa_r+0x2b6>
 81097dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 81097e0:	f8cd 9004 	str.w	r9, [sp, #4]
 81097e4:	464b      	mov	r3, r9
 81097e6:	e7c6      	b.n	8109776 <_dtoa_r+0x266>
 81097e8:	3101      	adds	r1, #1
 81097ea:	6041      	str	r1, [r0, #4]
 81097ec:	0052      	lsls	r2, r2, #1
 81097ee:	e7c6      	b.n	810977e <_dtoa_r+0x26e>
 81097f0:	636f4361 	.word	0x636f4361
 81097f4:	3fd287a7 	.word	0x3fd287a7
 81097f8:	8b60c8b3 	.word	0x8b60c8b3
 81097fc:	3fc68a28 	.word	0x3fc68a28
 8109800:	509f79fb 	.word	0x509f79fb
 8109804:	3fd34413 	.word	0x3fd34413
 8109808:	0810bf8e 	.word	0x0810bf8e
 810980c:	0810bfa5 	.word	0x0810bfa5
 8109810:	7ff00000 	.word	0x7ff00000
 8109814:	0810bf8a 	.word	0x0810bf8a
 8109818:	0810bf81 	.word	0x0810bf81
 810981c:	0810be02 	.word	0x0810be02
 8109820:	3ff80000 	.word	0x3ff80000
 8109824:	0810c180 	.word	0x0810c180
 8109828:	0810c004 	.word	0x0810c004
 810982c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810982e:	9a00      	ldr	r2, [sp, #0]
 8109830:	601a      	str	r2, [r3, #0]
 8109832:	9b01      	ldr	r3, [sp, #4]
 8109834:	2b0e      	cmp	r3, #14
 8109836:	f200 80ad 	bhi.w	8109994 <_dtoa_r+0x484>
 810983a:	2d00      	cmp	r5, #0
 810983c:	f000 80aa 	beq.w	8109994 <_dtoa_r+0x484>
 8109840:	f1ba 0f00 	cmp.w	sl, #0
 8109844:	dd36      	ble.n	81098b4 <_dtoa_r+0x3a4>
 8109846:	4ac3      	ldr	r2, [pc, #780]	; (8109b54 <_dtoa_r+0x644>)
 8109848:	f00a 030f 	and.w	r3, sl, #15
 810984c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109850:	ed93 7b00 	vldr	d7, [r3]
 8109854:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8109858:	ea4f 172a 	mov.w	r7, sl, asr #4
 810985c:	eeb0 8a47 	vmov.f32	s16, s14
 8109860:	eef0 8a67 	vmov.f32	s17, s15
 8109864:	d016      	beq.n	8109894 <_dtoa_r+0x384>
 8109866:	4bbc      	ldr	r3, [pc, #752]	; (8109b58 <_dtoa_r+0x648>)
 8109868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810986c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109870:	f7f7 f884 	bl	810097c <__aeabi_ddiv>
 8109874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109878:	f007 070f 	and.w	r7, r7, #15
 810987c:	2503      	movs	r5, #3
 810987e:	4eb6      	ldr	r6, [pc, #728]	; (8109b58 <_dtoa_r+0x648>)
 8109880:	b957      	cbnz	r7, 8109898 <_dtoa_r+0x388>
 8109882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109886:	ec53 2b18 	vmov	r2, r3, d8
 810988a:	f7f7 f877 	bl	810097c <__aeabi_ddiv>
 810988e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109892:	e029      	b.n	81098e8 <_dtoa_r+0x3d8>
 8109894:	2502      	movs	r5, #2
 8109896:	e7f2      	b.n	810987e <_dtoa_r+0x36e>
 8109898:	07f9      	lsls	r1, r7, #31
 810989a:	d508      	bpl.n	81098ae <_dtoa_r+0x39e>
 810989c:	ec51 0b18 	vmov	r0, r1, d8
 81098a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 81098a4:	f7f6 ff40 	bl	8100728 <__aeabi_dmul>
 81098a8:	ec41 0b18 	vmov	d8, r0, r1
 81098ac:	3501      	adds	r5, #1
 81098ae:	107f      	asrs	r7, r7, #1
 81098b0:	3608      	adds	r6, #8
 81098b2:	e7e5      	b.n	8109880 <_dtoa_r+0x370>
 81098b4:	f000 80a6 	beq.w	8109a04 <_dtoa_r+0x4f4>
 81098b8:	f1ca 0600 	rsb	r6, sl, #0
 81098bc:	4ba5      	ldr	r3, [pc, #660]	; (8109b54 <_dtoa_r+0x644>)
 81098be:	4fa6      	ldr	r7, [pc, #664]	; (8109b58 <_dtoa_r+0x648>)
 81098c0:	f006 020f 	and.w	r2, r6, #15
 81098c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81098d0:	f7f6 ff2a 	bl	8100728 <__aeabi_dmul>
 81098d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81098d8:	1136      	asrs	r6, r6, #4
 81098da:	2300      	movs	r3, #0
 81098dc:	2502      	movs	r5, #2
 81098de:	2e00      	cmp	r6, #0
 81098e0:	f040 8085 	bne.w	81099ee <_dtoa_r+0x4de>
 81098e4:	2b00      	cmp	r3, #0
 81098e6:	d1d2      	bne.n	810988e <_dtoa_r+0x37e>
 81098e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81098ea:	2b00      	cmp	r3, #0
 81098ec:	f000 808c 	beq.w	8109a08 <_dtoa_r+0x4f8>
 81098f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81098f4:	4b99      	ldr	r3, [pc, #612]	; (8109b5c <_dtoa_r+0x64c>)
 81098f6:	2200      	movs	r2, #0
 81098f8:	4630      	mov	r0, r6
 81098fa:	4639      	mov	r1, r7
 81098fc:	f7f7 f986 	bl	8100c0c <__aeabi_dcmplt>
 8109900:	2800      	cmp	r0, #0
 8109902:	f000 8081 	beq.w	8109a08 <_dtoa_r+0x4f8>
 8109906:	9b01      	ldr	r3, [sp, #4]
 8109908:	2b00      	cmp	r3, #0
 810990a:	d07d      	beq.n	8109a08 <_dtoa_r+0x4f8>
 810990c:	f1b9 0f00 	cmp.w	r9, #0
 8109910:	dd3c      	ble.n	810998c <_dtoa_r+0x47c>
 8109912:	f10a 33ff 	add.w	r3, sl, #4294967295
 8109916:	9307      	str	r3, [sp, #28]
 8109918:	2200      	movs	r2, #0
 810991a:	4b91      	ldr	r3, [pc, #580]	; (8109b60 <_dtoa_r+0x650>)
 810991c:	4630      	mov	r0, r6
 810991e:	4639      	mov	r1, r7
 8109920:	f7f6 ff02 	bl	8100728 <__aeabi_dmul>
 8109924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109928:	3501      	adds	r5, #1
 810992a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 810992e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109932:	4628      	mov	r0, r5
 8109934:	f7f6 fe8e 	bl	8100654 <__aeabi_i2d>
 8109938:	4632      	mov	r2, r6
 810993a:	463b      	mov	r3, r7
 810993c:	f7f6 fef4 	bl	8100728 <__aeabi_dmul>
 8109940:	4b88      	ldr	r3, [pc, #544]	; (8109b64 <_dtoa_r+0x654>)
 8109942:	2200      	movs	r2, #0
 8109944:	f7f6 fd3a 	bl	81003bc <__adddf3>
 8109948:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810994c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109950:	9303      	str	r3, [sp, #12]
 8109952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109954:	2b00      	cmp	r3, #0
 8109956:	d15c      	bne.n	8109a12 <_dtoa_r+0x502>
 8109958:	4b83      	ldr	r3, [pc, #524]	; (8109b68 <_dtoa_r+0x658>)
 810995a:	2200      	movs	r2, #0
 810995c:	4630      	mov	r0, r6
 810995e:	4639      	mov	r1, r7
 8109960:	f7f6 fd2a 	bl	81003b8 <__aeabi_dsub>
 8109964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109968:	4606      	mov	r6, r0
 810996a:	460f      	mov	r7, r1
 810996c:	f7f7 f96c 	bl	8100c48 <__aeabi_dcmpgt>
 8109970:	2800      	cmp	r0, #0
 8109972:	f040 8296 	bne.w	8109ea2 <_dtoa_r+0x992>
 8109976:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810997a:	4630      	mov	r0, r6
 810997c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109980:	4639      	mov	r1, r7
 8109982:	f7f7 f943 	bl	8100c0c <__aeabi_dcmplt>
 8109986:	2800      	cmp	r0, #0
 8109988:	f040 8288 	bne.w	8109e9c <_dtoa_r+0x98c>
 810998c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8109994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109996:	2b00      	cmp	r3, #0
 8109998:	f2c0 8158 	blt.w	8109c4c <_dtoa_r+0x73c>
 810999c:	f1ba 0f0e 	cmp.w	sl, #14
 81099a0:	f300 8154 	bgt.w	8109c4c <_dtoa_r+0x73c>
 81099a4:	4b6b      	ldr	r3, [pc, #428]	; (8109b54 <_dtoa_r+0x644>)
 81099a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81099aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 81099ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81099b0:	2b00      	cmp	r3, #0
 81099b2:	f280 80e3 	bge.w	8109b7c <_dtoa_r+0x66c>
 81099b6:	9b01      	ldr	r3, [sp, #4]
 81099b8:	2b00      	cmp	r3, #0
 81099ba:	f300 80df 	bgt.w	8109b7c <_dtoa_r+0x66c>
 81099be:	f040 826d 	bne.w	8109e9c <_dtoa_r+0x98c>
 81099c2:	4b69      	ldr	r3, [pc, #420]	; (8109b68 <_dtoa_r+0x658>)
 81099c4:	2200      	movs	r2, #0
 81099c6:	4640      	mov	r0, r8
 81099c8:	4649      	mov	r1, r9
 81099ca:	f7f6 fead 	bl	8100728 <__aeabi_dmul>
 81099ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81099d2:	f7f7 f92f 	bl	8100c34 <__aeabi_dcmpge>
 81099d6:	9e01      	ldr	r6, [sp, #4]
 81099d8:	4637      	mov	r7, r6
 81099da:	2800      	cmp	r0, #0
 81099dc:	f040 8243 	bne.w	8109e66 <_dtoa_r+0x956>
 81099e0:	9d00      	ldr	r5, [sp, #0]
 81099e2:	2331      	movs	r3, #49	; 0x31
 81099e4:	f805 3b01 	strb.w	r3, [r5], #1
 81099e8:	f10a 0a01 	add.w	sl, sl, #1
 81099ec:	e23f      	b.n	8109e6e <_dtoa_r+0x95e>
 81099ee:	07f2      	lsls	r2, r6, #31
 81099f0:	d505      	bpl.n	81099fe <_dtoa_r+0x4ee>
 81099f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81099f6:	f7f6 fe97 	bl	8100728 <__aeabi_dmul>
 81099fa:	3501      	adds	r5, #1
 81099fc:	2301      	movs	r3, #1
 81099fe:	1076      	asrs	r6, r6, #1
 8109a00:	3708      	adds	r7, #8
 8109a02:	e76c      	b.n	81098de <_dtoa_r+0x3ce>
 8109a04:	2502      	movs	r5, #2
 8109a06:	e76f      	b.n	81098e8 <_dtoa_r+0x3d8>
 8109a08:	9b01      	ldr	r3, [sp, #4]
 8109a0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8109a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8109a10:	e78d      	b.n	810992e <_dtoa_r+0x41e>
 8109a12:	9900      	ldr	r1, [sp, #0]
 8109a14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8109a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109a18:	4b4e      	ldr	r3, [pc, #312]	; (8109b54 <_dtoa_r+0x644>)
 8109a1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109a1e:	4401      	add	r1, r0
 8109a20:	9102      	str	r1, [sp, #8]
 8109a22:	9908      	ldr	r1, [sp, #32]
 8109a24:	eeb0 8a47 	vmov.f32	s16, s14
 8109a28:	eef0 8a67 	vmov.f32	s17, s15
 8109a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8109a34:	2900      	cmp	r1, #0
 8109a36:	d045      	beq.n	8109ac4 <_dtoa_r+0x5b4>
 8109a38:	494c      	ldr	r1, [pc, #304]	; (8109b6c <_dtoa_r+0x65c>)
 8109a3a:	2000      	movs	r0, #0
 8109a3c:	f7f6 ff9e 	bl	810097c <__aeabi_ddiv>
 8109a40:	ec53 2b18 	vmov	r2, r3, d8
 8109a44:	f7f6 fcb8 	bl	81003b8 <__aeabi_dsub>
 8109a48:	9d00      	ldr	r5, [sp, #0]
 8109a4a:	ec41 0b18 	vmov	d8, r0, r1
 8109a4e:	4639      	mov	r1, r7
 8109a50:	4630      	mov	r0, r6
 8109a52:	f7f7 f919 	bl	8100c88 <__aeabi_d2iz>
 8109a56:	900c      	str	r0, [sp, #48]	; 0x30
 8109a58:	f7f6 fdfc 	bl	8100654 <__aeabi_i2d>
 8109a5c:	4602      	mov	r2, r0
 8109a5e:	460b      	mov	r3, r1
 8109a60:	4630      	mov	r0, r6
 8109a62:	4639      	mov	r1, r7
 8109a64:	f7f6 fca8 	bl	81003b8 <__aeabi_dsub>
 8109a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109a6a:	3330      	adds	r3, #48	; 0x30
 8109a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8109a70:	ec53 2b18 	vmov	r2, r3, d8
 8109a74:	4606      	mov	r6, r0
 8109a76:	460f      	mov	r7, r1
 8109a78:	f7f7 f8c8 	bl	8100c0c <__aeabi_dcmplt>
 8109a7c:	2800      	cmp	r0, #0
 8109a7e:	d165      	bne.n	8109b4c <_dtoa_r+0x63c>
 8109a80:	4632      	mov	r2, r6
 8109a82:	463b      	mov	r3, r7
 8109a84:	4935      	ldr	r1, [pc, #212]	; (8109b5c <_dtoa_r+0x64c>)
 8109a86:	2000      	movs	r0, #0
 8109a88:	f7f6 fc96 	bl	81003b8 <__aeabi_dsub>
 8109a8c:	ec53 2b18 	vmov	r2, r3, d8
 8109a90:	f7f7 f8bc 	bl	8100c0c <__aeabi_dcmplt>
 8109a94:	2800      	cmp	r0, #0
 8109a96:	f040 80b9 	bne.w	8109c0c <_dtoa_r+0x6fc>
 8109a9a:	9b02      	ldr	r3, [sp, #8]
 8109a9c:	429d      	cmp	r5, r3
 8109a9e:	f43f af75 	beq.w	810998c <_dtoa_r+0x47c>
 8109aa2:	4b2f      	ldr	r3, [pc, #188]	; (8109b60 <_dtoa_r+0x650>)
 8109aa4:	ec51 0b18 	vmov	r0, r1, d8
 8109aa8:	2200      	movs	r2, #0
 8109aaa:	f7f6 fe3d 	bl	8100728 <__aeabi_dmul>
 8109aae:	4b2c      	ldr	r3, [pc, #176]	; (8109b60 <_dtoa_r+0x650>)
 8109ab0:	ec41 0b18 	vmov	d8, r0, r1
 8109ab4:	2200      	movs	r2, #0
 8109ab6:	4630      	mov	r0, r6
 8109ab8:	4639      	mov	r1, r7
 8109aba:	f7f6 fe35 	bl	8100728 <__aeabi_dmul>
 8109abe:	4606      	mov	r6, r0
 8109ac0:	460f      	mov	r7, r1
 8109ac2:	e7c4      	b.n	8109a4e <_dtoa_r+0x53e>
 8109ac4:	ec51 0b17 	vmov	r0, r1, d7
 8109ac8:	f7f6 fe2e 	bl	8100728 <__aeabi_dmul>
 8109acc:	9b02      	ldr	r3, [sp, #8]
 8109ace:	9d00      	ldr	r5, [sp, #0]
 8109ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8109ad2:	ec41 0b18 	vmov	d8, r0, r1
 8109ad6:	4639      	mov	r1, r7
 8109ad8:	4630      	mov	r0, r6
 8109ada:	f7f7 f8d5 	bl	8100c88 <__aeabi_d2iz>
 8109ade:	9011      	str	r0, [sp, #68]	; 0x44
 8109ae0:	f7f6 fdb8 	bl	8100654 <__aeabi_i2d>
 8109ae4:	4602      	mov	r2, r0
 8109ae6:	460b      	mov	r3, r1
 8109ae8:	4630      	mov	r0, r6
 8109aea:	4639      	mov	r1, r7
 8109aec:	f7f6 fc64 	bl	81003b8 <__aeabi_dsub>
 8109af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109af2:	3330      	adds	r3, #48	; 0x30
 8109af4:	f805 3b01 	strb.w	r3, [r5], #1
 8109af8:	9b02      	ldr	r3, [sp, #8]
 8109afa:	429d      	cmp	r5, r3
 8109afc:	4606      	mov	r6, r0
 8109afe:	460f      	mov	r7, r1
 8109b00:	f04f 0200 	mov.w	r2, #0
 8109b04:	d134      	bne.n	8109b70 <_dtoa_r+0x660>
 8109b06:	4b19      	ldr	r3, [pc, #100]	; (8109b6c <_dtoa_r+0x65c>)
 8109b08:	ec51 0b18 	vmov	r0, r1, d8
 8109b0c:	f7f6 fc56 	bl	81003bc <__adddf3>
 8109b10:	4602      	mov	r2, r0
 8109b12:	460b      	mov	r3, r1
 8109b14:	4630      	mov	r0, r6
 8109b16:	4639      	mov	r1, r7
 8109b18:	f7f7 f896 	bl	8100c48 <__aeabi_dcmpgt>
 8109b1c:	2800      	cmp	r0, #0
 8109b1e:	d175      	bne.n	8109c0c <_dtoa_r+0x6fc>
 8109b20:	ec53 2b18 	vmov	r2, r3, d8
 8109b24:	4911      	ldr	r1, [pc, #68]	; (8109b6c <_dtoa_r+0x65c>)
 8109b26:	2000      	movs	r0, #0
 8109b28:	f7f6 fc46 	bl	81003b8 <__aeabi_dsub>
 8109b2c:	4602      	mov	r2, r0
 8109b2e:	460b      	mov	r3, r1
 8109b30:	4630      	mov	r0, r6
 8109b32:	4639      	mov	r1, r7
 8109b34:	f7f7 f86a 	bl	8100c0c <__aeabi_dcmplt>
 8109b38:	2800      	cmp	r0, #0
 8109b3a:	f43f af27 	beq.w	810998c <_dtoa_r+0x47c>
 8109b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109b40:	1e6b      	subs	r3, r5, #1
 8109b42:	930c      	str	r3, [sp, #48]	; 0x30
 8109b44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109b48:	2b30      	cmp	r3, #48	; 0x30
 8109b4a:	d0f8      	beq.n	8109b3e <_dtoa_r+0x62e>
 8109b4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109b50:	e04a      	b.n	8109be8 <_dtoa_r+0x6d8>
 8109b52:	bf00      	nop
 8109b54:	0810c180 	.word	0x0810c180
 8109b58:	0810c158 	.word	0x0810c158
 8109b5c:	3ff00000 	.word	0x3ff00000
 8109b60:	40240000 	.word	0x40240000
 8109b64:	401c0000 	.word	0x401c0000
 8109b68:	40140000 	.word	0x40140000
 8109b6c:	3fe00000 	.word	0x3fe00000
 8109b70:	4baf      	ldr	r3, [pc, #700]	; (8109e30 <_dtoa_r+0x920>)
 8109b72:	f7f6 fdd9 	bl	8100728 <__aeabi_dmul>
 8109b76:	4606      	mov	r6, r0
 8109b78:	460f      	mov	r7, r1
 8109b7a:	e7ac      	b.n	8109ad6 <_dtoa_r+0x5c6>
 8109b7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109b80:	9d00      	ldr	r5, [sp, #0]
 8109b82:	4642      	mov	r2, r8
 8109b84:	464b      	mov	r3, r9
 8109b86:	4630      	mov	r0, r6
 8109b88:	4639      	mov	r1, r7
 8109b8a:	f7f6 fef7 	bl	810097c <__aeabi_ddiv>
 8109b8e:	f7f7 f87b 	bl	8100c88 <__aeabi_d2iz>
 8109b92:	9002      	str	r0, [sp, #8]
 8109b94:	f7f6 fd5e 	bl	8100654 <__aeabi_i2d>
 8109b98:	4642      	mov	r2, r8
 8109b9a:	464b      	mov	r3, r9
 8109b9c:	f7f6 fdc4 	bl	8100728 <__aeabi_dmul>
 8109ba0:	4602      	mov	r2, r0
 8109ba2:	460b      	mov	r3, r1
 8109ba4:	4630      	mov	r0, r6
 8109ba6:	4639      	mov	r1, r7
 8109ba8:	f7f6 fc06 	bl	81003b8 <__aeabi_dsub>
 8109bac:	9e02      	ldr	r6, [sp, #8]
 8109bae:	9f01      	ldr	r7, [sp, #4]
 8109bb0:	3630      	adds	r6, #48	; 0x30
 8109bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8109bb6:	9e00      	ldr	r6, [sp, #0]
 8109bb8:	1bae      	subs	r6, r5, r6
 8109bba:	42b7      	cmp	r7, r6
 8109bbc:	4602      	mov	r2, r0
 8109bbe:	460b      	mov	r3, r1
 8109bc0:	d137      	bne.n	8109c32 <_dtoa_r+0x722>
 8109bc2:	f7f6 fbfb 	bl	81003bc <__adddf3>
 8109bc6:	4642      	mov	r2, r8
 8109bc8:	464b      	mov	r3, r9
 8109bca:	4606      	mov	r6, r0
 8109bcc:	460f      	mov	r7, r1
 8109bce:	f7f7 f83b 	bl	8100c48 <__aeabi_dcmpgt>
 8109bd2:	b9c8      	cbnz	r0, 8109c08 <_dtoa_r+0x6f8>
 8109bd4:	4642      	mov	r2, r8
 8109bd6:	464b      	mov	r3, r9
 8109bd8:	4630      	mov	r0, r6
 8109bda:	4639      	mov	r1, r7
 8109bdc:	f7f7 f80c 	bl	8100bf8 <__aeabi_dcmpeq>
 8109be0:	b110      	cbz	r0, 8109be8 <_dtoa_r+0x6d8>
 8109be2:	9b02      	ldr	r3, [sp, #8]
 8109be4:	07d9      	lsls	r1, r3, #31
 8109be6:	d40f      	bmi.n	8109c08 <_dtoa_r+0x6f8>
 8109be8:	4620      	mov	r0, r4
 8109bea:	4659      	mov	r1, fp
 8109bec:	f001 f886 	bl	810acfc <_Bfree>
 8109bf0:	2300      	movs	r3, #0
 8109bf2:	702b      	strb	r3, [r5, #0]
 8109bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109bf6:	f10a 0001 	add.w	r0, sl, #1
 8109bfa:	6018      	str	r0, [r3, #0]
 8109bfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109bfe:	2b00      	cmp	r3, #0
 8109c00:	f43f acd8 	beq.w	81095b4 <_dtoa_r+0xa4>
 8109c04:	601d      	str	r5, [r3, #0]
 8109c06:	e4d5      	b.n	81095b4 <_dtoa_r+0xa4>
 8109c08:	f8cd a01c 	str.w	sl, [sp, #28]
 8109c0c:	462b      	mov	r3, r5
 8109c0e:	461d      	mov	r5, r3
 8109c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109c14:	2a39      	cmp	r2, #57	; 0x39
 8109c16:	d108      	bne.n	8109c2a <_dtoa_r+0x71a>
 8109c18:	9a00      	ldr	r2, [sp, #0]
 8109c1a:	429a      	cmp	r2, r3
 8109c1c:	d1f7      	bne.n	8109c0e <_dtoa_r+0x6fe>
 8109c1e:	9a07      	ldr	r2, [sp, #28]
 8109c20:	9900      	ldr	r1, [sp, #0]
 8109c22:	3201      	adds	r2, #1
 8109c24:	9207      	str	r2, [sp, #28]
 8109c26:	2230      	movs	r2, #48	; 0x30
 8109c28:	700a      	strb	r2, [r1, #0]
 8109c2a:	781a      	ldrb	r2, [r3, #0]
 8109c2c:	3201      	adds	r2, #1
 8109c2e:	701a      	strb	r2, [r3, #0]
 8109c30:	e78c      	b.n	8109b4c <_dtoa_r+0x63c>
 8109c32:	4b7f      	ldr	r3, [pc, #508]	; (8109e30 <_dtoa_r+0x920>)
 8109c34:	2200      	movs	r2, #0
 8109c36:	f7f6 fd77 	bl	8100728 <__aeabi_dmul>
 8109c3a:	2200      	movs	r2, #0
 8109c3c:	2300      	movs	r3, #0
 8109c3e:	4606      	mov	r6, r0
 8109c40:	460f      	mov	r7, r1
 8109c42:	f7f6 ffd9 	bl	8100bf8 <__aeabi_dcmpeq>
 8109c46:	2800      	cmp	r0, #0
 8109c48:	d09b      	beq.n	8109b82 <_dtoa_r+0x672>
 8109c4a:	e7cd      	b.n	8109be8 <_dtoa_r+0x6d8>
 8109c4c:	9a08      	ldr	r2, [sp, #32]
 8109c4e:	2a00      	cmp	r2, #0
 8109c50:	f000 80c4 	beq.w	8109ddc <_dtoa_r+0x8cc>
 8109c54:	9a05      	ldr	r2, [sp, #20]
 8109c56:	2a01      	cmp	r2, #1
 8109c58:	f300 80a8 	bgt.w	8109dac <_dtoa_r+0x89c>
 8109c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8109c5e:	2a00      	cmp	r2, #0
 8109c60:	f000 80a0 	beq.w	8109da4 <_dtoa_r+0x894>
 8109c64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109c68:	9e06      	ldr	r6, [sp, #24]
 8109c6a:	4645      	mov	r5, r8
 8109c6c:	9a04      	ldr	r2, [sp, #16]
 8109c6e:	2101      	movs	r1, #1
 8109c70:	441a      	add	r2, r3
 8109c72:	4620      	mov	r0, r4
 8109c74:	4498      	add	r8, r3
 8109c76:	9204      	str	r2, [sp, #16]
 8109c78:	f001 f946 	bl	810af08 <__i2b>
 8109c7c:	4607      	mov	r7, r0
 8109c7e:	2d00      	cmp	r5, #0
 8109c80:	dd0b      	ble.n	8109c9a <_dtoa_r+0x78a>
 8109c82:	9b04      	ldr	r3, [sp, #16]
 8109c84:	2b00      	cmp	r3, #0
 8109c86:	dd08      	ble.n	8109c9a <_dtoa_r+0x78a>
 8109c88:	42ab      	cmp	r3, r5
 8109c8a:	9a04      	ldr	r2, [sp, #16]
 8109c8c:	bfa8      	it	ge
 8109c8e:	462b      	movge	r3, r5
 8109c90:	eba8 0803 	sub.w	r8, r8, r3
 8109c94:	1aed      	subs	r5, r5, r3
 8109c96:	1ad3      	subs	r3, r2, r3
 8109c98:	9304      	str	r3, [sp, #16]
 8109c9a:	9b06      	ldr	r3, [sp, #24]
 8109c9c:	b1fb      	cbz	r3, 8109cde <_dtoa_r+0x7ce>
 8109c9e:	9b08      	ldr	r3, [sp, #32]
 8109ca0:	2b00      	cmp	r3, #0
 8109ca2:	f000 809f 	beq.w	8109de4 <_dtoa_r+0x8d4>
 8109ca6:	2e00      	cmp	r6, #0
 8109ca8:	dd11      	ble.n	8109cce <_dtoa_r+0x7be>
 8109caa:	4639      	mov	r1, r7
 8109cac:	4632      	mov	r2, r6
 8109cae:	4620      	mov	r0, r4
 8109cb0:	f001 f9e6 	bl	810b080 <__pow5mult>
 8109cb4:	465a      	mov	r2, fp
 8109cb6:	4601      	mov	r1, r0
 8109cb8:	4607      	mov	r7, r0
 8109cba:	4620      	mov	r0, r4
 8109cbc:	f001 f93a 	bl	810af34 <__multiply>
 8109cc0:	4659      	mov	r1, fp
 8109cc2:	9007      	str	r0, [sp, #28]
 8109cc4:	4620      	mov	r0, r4
 8109cc6:	f001 f819 	bl	810acfc <_Bfree>
 8109cca:	9b07      	ldr	r3, [sp, #28]
 8109ccc:	469b      	mov	fp, r3
 8109cce:	9b06      	ldr	r3, [sp, #24]
 8109cd0:	1b9a      	subs	r2, r3, r6
 8109cd2:	d004      	beq.n	8109cde <_dtoa_r+0x7ce>
 8109cd4:	4659      	mov	r1, fp
 8109cd6:	4620      	mov	r0, r4
 8109cd8:	f001 f9d2 	bl	810b080 <__pow5mult>
 8109cdc:	4683      	mov	fp, r0
 8109cde:	2101      	movs	r1, #1
 8109ce0:	4620      	mov	r0, r4
 8109ce2:	f001 f911 	bl	810af08 <__i2b>
 8109ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109ce8:	2b00      	cmp	r3, #0
 8109cea:	4606      	mov	r6, r0
 8109cec:	dd7c      	ble.n	8109de8 <_dtoa_r+0x8d8>
 8109cee:	461a      	mov	r2, r3
 8109cf0:	4601      	mov	r1, r0
 8109cf2:	4620      	mov	r0, r4
 8109cf4:	f001 f9c4 	bl	810b080 <__pow5mult>
 8109cf8:	9b05      	ldr	r3, [sp, #20]
 8109cfa:	2b01      	cmp	r3, #1
 8109cfc:	4606      	mov	r6, r0
 8109cfe:	dd76      	ble.n	8109dee <_dtoa_r+0x8de>
 8109d00:	2300      	movs	r3, #0
 8109d02:	9306      	str	r3, [sp, #24]
 8109d04:	6933      	ldr	r3, [r6, #16]
 8109d06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109d0a:	6918      	ldr	r0, [r3, #16]
 8109d0c:	f001 f8ac 	bl	810ae68 <__hi0bits>
 8109d10:	f1c0 0020 	rsb	r0, r0, #32
 8109d14:	9b04      	ldr	r3, [sp, #16]
 8109d16:	4418      	add	r0, r3
 8109d18:	f010 001f 	ands.w	r0, r0, #31
 8109d1c:	f000 8086 	beq.w	8109e2c <_dtoa_r+0x91c>
 8109d20:	f1c0 0320 	rsb	r3, r0, #32
 8109d24:	2b04      	cmp	r3, #4
 8109d26:	dd7f      	ble.n	8109e28 <_dtoa_r+0x918>
 8109d28:	f1c0 001c 	rsb	r0, r0, #28
 8109d2c:	9b04      	ldr	r3, [sp, #16]
 8109d2e:	4403      	add	r3, r0
 8109d30:	4480      	add	r8, r0
 8109d32:	4405      	add	r5, r0
 8109d34:	9304      	str	r3, [sp, #16]
 8109d36:	f1b8 0f00 	cmp.w	r8, #0
 8109d3a:	dd05      	ble.n	8109d48 <_dtoa_r+0x838>
 8109d3c:	4659      	mov	r1, fp
 8109d3e:	4642      	mov	r2, r8
 8109d40:	4620      	mov	r0, r4
 8109d42:	f001 f9f7 	bl	810b134 <__lshift>
 8109d46:	4683      	mov	fp, r0
 8109d48:	9b04      	ldr	r3, [sp, #16]
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	dd05      	ble.n	8109d5a <_dtoa_r+0x84a>
 8109d4e:	4631      	mov	r1, r6
 8109d50:	461a      	mov	r2, r3
 8109d52:	4620      	mov	r0, r4
 8109d54:	f001 f9ee 	bl	810b134 <__lshift>
 8109d58:	4606      	mov	r6, r0
 8109d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109d5c:	2b00      	cmp	r3, #0
 8109d5e:	d069      	beq.n	8109e34 <_dtoa_r+0x924>
 8109d60:	4631      	mov	r1, r6
 8109d62:	4658      	mov	r0, fp
 8109d64:	f001 fa52 	bl	810b20c <__mcmp>
 8109d68:	2800      	cmp	r0, #0
 8109d6a:	da63      	bge.n	8109e34 <_dtoa_r+0x924>
 8109d6c:	2300      	movs	r3, #0
 8109d6e:	4659      	mov	r1, fp
 8109d70:	220a      	movs	r2, #10
 8109d72:	4620      	mov	r0, r4
 8109d74:	f000 ffe4 	bl	810ad40 <__multadd>
 8109d78:	9b08      	ldr	r3, [sp, #32]
 8109d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109d7e:	4683      	mov	fp, r0
 8109d80:	2b00      	cmp	r3, #0
 8109d82:	f000 818f 	beq.w	810a0a4 <_dtoa_r+0xb94>
 8109d86:	4639      	mov	r1, r7
 8109d88:	2300      	movs	r3, #0
 8109d8a:	220a      	movs	r2, #10
 8109d8c:	4620      	mov	r0, r4
 8109d8e:	f000 ffd7 	bl	810ad40 <__multadd>
 8109d92:	f1b9 0f00 	cmp.w	r9, #0
 8109d96:	4607      	mov	r7, r0
 8109d98:	f300 808e 	bgt.w	8109eb8 <_dtoa_r+0x9a8>
 8109d9c:	9b05      	ldr	r3, [sp, #20]
 8109d9e:	2b02      	cmp	r3, #2
 8109da0:	dc50      	bgt.n	8109e44 <_dtoa_r+0x934>
 8109da2:	e089      	b.n	8109eb8 <_dtoa_r+0x9a8>
 8109da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109daa:	e75d      	b.n	8109c68 <_dtoa_r+0x758>
 8109dac:	9b01      	ldr	r3, [sp, #4]
 8109dae:	1e5e      	subs	r6, r3, #1
 8109db0:	9b06      	ldr	r3, [sp, #24]
 8109db2:	42b3      	cmp	r3, r6
 8109db4:	bfbf      	itttt	lt
 8109db6:	9b06      	ldrlt	r3, [sp, #24]
 8109db8:	9606      	strlt	r6, [sp, #24]
 8109dba:	1af2      	sublt	r2, r6, r3
 8109dbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8109dbe:	bfb6      	itet	lt
 8109dc0:	189b      	addlt	r3, r3, r2
 8109dc2:	1b9e      	subge	r6, r3, r6
 8109dc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8109dc6:	9b01      	ldr	r3, [sp, #4]
 8109dc8:	bfb8      	it	lt
 8109dca:	2600      	movlt	r6, #0
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	bfb5      	itete	lt
 8109dd0:	eba8 0503 	sublt.w	r5, r8, r3
 8109dd4:	9b01      	ldrge	r3, [sp, #4]
 8109dd6:	2300      	movlt	r3, #0
 8109dd8:	4645      	movge	r5, r8
 8109dda:	e747      	b.n	8109c6c <_dtoa_r+0x75c>
 8109ddc:	9e06      	ldr	r6, [sp, #24]
 8109dde:	9f08      	ldr	r7, [sp, #32]
 8109de0:	4645      	mov	r5, r8
 8109de2:	e74c      	b.n	8109c7e <_dtoa_r+0x76e>
 8109de4:	9a06      	ldr	r2, [sp, #24]
 8109de6:	e775      	b.n	8109cd4 <_dtoa_r+0x7c4>
 8109de8:	9b05      	ldr	r3, [sp, #20]
 8109dea:	2b01      	cmp	r3, #1
 8109dec:	dc18      	bgt.n	8109e20 <_dtoa_r+0x910>
 8109dee:	9b02      	ldr	r3, [sp, #8]
 8109df0:	b9b3      	cbnz	r3, 8109e20 <_dtoa_r+0x910>
 8109df2:	9b03      	ldr	r3, [sp, #12]
 8109df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109df8:	b9a3      	cbnz	r3, 8109e24 <_dtoa_r+0x914>
 8109dfa:	9b03      	ldr	r3, [sp, #12]
 8109dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109e00:	0d1b      	lsrs	r3, r3, #20
 8109e02:	051b      	lsls	r3, r3, #20
 8109e04:	b12b      	cbz	r3, 8109e12 <_dtoa_r+0x902>
 8109e06:	9b04      	ldr	r3, [sp, #16]
 8109e08:	3301      	adds	r3, #1
 8109e0a:	9304      	str	r3, [sp, #16]
 8109e0c:	f108 0801 	add.w	r8, r8, #1
 8109e10:	2301      	movs	r3, #1
 8109e12:	9306      	str	r3, [sp, #24]
 8109e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109e16:	2b00      	cmp	r3, #0
 8109e18:	f47f af74 	bne.w	8109d04 <_dtoa_r+0x7f4>
 8109e1c:	2001      	movs	r0, #1
 8109e1e:	e779      	b.n	8109d14 <_dtoa_r+0x804>
 8109e20:	2300      	movs	r3, #0
 8109e22:	e7f6      	b.n	8109e12 <_dtoa_r+0x902>
 8109e24:	9b02      	ldr	r3, [sp, #8]
 8109e26:	e7f4      	b.n	8109e12 <_dtoa_r+0x902>
 8109e28:	d085      	beq.n	8109d36 <_dtoa_r+0x826>
 8109e2a:	4618      	mov	r0, r3
 8109e2c:	301c      	adds	r0, #28
 8109e2e:	e77d      	b.n	8109d2c <_dtoa_r+0x81c>
 8109e30:	40240000 	.word	0x40240000
 8109e34:	9b01      	ldr	r3, [sp, #4]
 8109e36:	2b00      	cmp	r3, #0
 8109e38:	dc38      	bgt.n	8109eac <_dtoa_r+0x99c>
 8109e3a:	9b05      	ldr	r3, [sp, #20]
 8109e3c:	2b02      	cmp	r3, #2
 8109e3e:	dd35      	ble.n	8109eac <_dtoa_r+0x99c>
 8109e40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109e44:	f1b9 0f00 	cmp.w	r9, #0
 8109e48:	d10d      	bne.n	8109e66 <_dtoa_r+0x956>
 8109e4a:	4631      	mov	r1, r6
 8109e4c:	464b      	mov	r3, r9
 8109e4e:	2205      	movs	r2, #5
 8109e50:	4620      	mov	r0, r4
 8109e52:	f000 ff75 	bl	810ad40 <__multadd>
 8109e56:	4601      	mov	r1, r0
 8109e58:	4606      	mov	r6, r0
 8109e5a:	4658      	mov	r0, fp
 8109e5c:	f001 f9d6 	bl	810b20c <__mcmp>
 8109e60:	2800      	cmp	r0, #0
 8109e62:	f73f adbd 	bgt.w	81099e0 <_dtoa_r+0x4d0>
 8109e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e68:	9d00      	ldr	r5, [sp, #0]
 8109e6a:	ea6f 0a03 	mvn.w	sl, r3
 8109e6e:	f04f 0800 	mov.w	r8, #0
 8109e72:	4631      	mov	r1, r6
 8109e74:	4620      	mov	r0, r4
 8109e76:	f000 ff41 	bl	810acfc <_Bfree>
 8109e7a:	2f00      	cmp	r7, #0
 8109e7c:	f43f aeb4 	beq.w	8109be8 <_dtoa_r+0x6d8>
 8109e80:	f1b8 0f00 	cmp.w	r8, #0
 8109e84:	d005      	beq.n	8109e92 <_dtoa_r+0x982>
 8109e86:	45b8      	cmp	r8, r7
 8109e88:	d003      	beq.n	8109e92 <_dtoa_r+0x982>
 8109e8a:	4641      	mov	r1, r8
 8109e8c:	4620      	mov	r0, r4
 8109e8e:	f000 ff35 	bl	810acfc <_Bfree>
 8109e92:	4639      	mov	r1, r7
 8109e94:	4620      	mov	r0, r4
 8109e96:	f000 ff31 	bl	810acfc <_Bfree>
 8109e9a:	e6a5      	b.n	8109be8 <_dtoa_r+0x6d8>
 8109e9c:	2600      	movs	r6, #0
 8109e9e:	4637      	mov	r7, r6
 8109ea0:	e7e1      	b.n	8109e66 <_dtoa_r+0x956>
 8109ea2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8109ea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109ea8:	4637      	mov	r7, r6
 8109eaa:	e599      	b.n	81099e0 <_dtoa_r+0x4d0>
 8109eac:	9b08      	ldr	r3, [sp, #32]
 8109eae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109eb2:	2b00      	cmp	r3, #0
 8109eb4:	f000 80fd 	beq.w	810a0b2 <_dtoa_r+0xba2>
 8109eb8:	2d00      	cmp	r5, #0
 8109eba:	dd05      	ble.n	8109ec8 <_dtoa_r+0x9b8>
 8109ebc:	4639      	mov	r1, r7
 8109ebe:	462a      	mov	r2, r5
 8109ec0:	4620      	mov	r0, r4
 8109ec2:	f001 f937 	bl	810b134 <__lshift>
 8109ec6:	4607      	mov	r7, r0
 8109ec8:	9b06      	ldr	r3, [sp, #24]
 8109eca:	2b00      	cmp	r3, #0
 8109ecc:	d05c      	beq.n	8109f88 <_dtoa_r+0xa78>
 8109ece:	6879      	ldr	r1, [r7, #4]
 8109ed0:	4620      	mov	r0, r4
 8109ed2:	f000 fed3 	bl	810ac7c <_Balloc>
 8109ed6:	4605      	mov	r5, r0
 8109ed8:	b928      	cbnz	r0, 8109ee6 <_dtoa_r+0x9d6>
 8109eda:	4b80      	ldr	r3, [pc, #512]	; (810a0dc <_dtoa_r+0xbcc>)
 8109edc:	4602      	mov	r2, r0
 8109ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109ee2:	f7ff bb2e 	b.w	8109542 <_dtoa_r+0x32>
 8109ee6:	693a      	ldr	r2, [r7, #16]
 8109ee8:	3202      	adds	r2, #2
 8109eea:	0092      	lsls	r2, r2, #2
 8109eec:	f107 010c 	add.w	r1, r7, #12
 8109ef0:	300c      	adds	r0, #12
 8109ef2:	f7fd fa17 	bl	8107324 <memcpy>
 8109ef6:	2201      	movs	r2, #1
 8109ef8:	4629      	mov	r1, r5
 8109efa:	4620      	mov	r0, r4
 8109efc:	f001 f91a 	bl	810b134 <__lshift>
 8109f00:	9b00      	ldr	r3, [sp, #0]
 8109f02:	3301      	adds	r3, #1
 8109f04:	9301      	str	r3, [sp, #4]
 8109f06:	9b00      	ldr	r3, [sp, #0]
 8109f08:	444b      	add	r3, r9
 8109f0a:	9307      	str	r3, [sp, #28]
 8109f0c:	9b02      	ldr	r3, [sp, #8]
 8109f0e:	f003 0301 	and.w	r3, r3, #1
 8109f12:	46b8      	mov	r8, r7
 8109f14:	9306      	str	r3, [sp, #24]
 8109f16:	4607      	mov	r7, r0
 8109f18:	9b01      	ldr	r3, [sp, #4]
 8109f1a:	4631      	mov	r1, r6
 8109f1c:	3b01      	subs	r3, #1
 8109f1e:	4658      	mov	r0, fp
 8109f20:	9302      	str	r3, [sp, #8]
 8109f22:	f7ff fa6a 	bl	81093fa <quorem>
 8109f26:	4603      	mov	r3, r0
 8109f28:	3330      	adds	r3, #48	; 0x30
 8109f2a:	9004      	str	r0, [sp, #16]
 8109f2c:	4641      	mov	r1, r8
 8109f2e:	4658      	mov	r0, fp
 8109f30:	9308      	str	r3, [sp, #32]
 8109f32:	f001 f96b 	bl	810b20c <__mcmp>
 8109f36:	463a      	mov	r2, r7
 8109f38:	4681      	mov	r9, r0
 8109f3a:	4631      	mov	r1, r6
 8109f3c:	4620      	mov	r0, r4
 8109f3e:	f001 f981 	bl	810b244 <__mdiff>
 8109f42:	68c2      	ldr	r2, [r0, #12]
 8109f44:	9b08      	ldr	r3, [sp, #32]
 8109f46:	4605      	mov	r5, r0
 8109f48:	bb02      	cbnz	r2, 8109f8c <_dtoa_r+0xa7c>
 8109f4a:	4601      	mov	r1, r0
 8109f4c:	4658      	mov	r0, fp
 8109f4e:	f001 f95d 	bl	810b20c <__mcmp>
 8109f52:	9b08      	ldr	r3, [sp, #32]
 8109f54:	4602      	mov	r2, r0
 8109f56:	4629      	mov	r1, r5
 8109f58:	4620      	mov	r0, r4
 8109f5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8109f5e:	f000 fecd 	bl	810acfc <_Bfree>
 8109f62:	9b05      	ldr	r3, [sp, #20]
 8109f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109f66:	9d01      	ldr	r5, [sp, #4]
 8109f68:	ea43 0102 	orr.w	r1, r3, r2
 8109f6c:	9b06      	ldr	r3, [sp, #24]
 8109f6e:	430b      	orrs	r3, r1
 8109f70:	9b08      	ldr	r3, [sp, #32]
 8109f72:	d10d      	bne.n	8109f90 <_dtoa_r+0xa80>
 8109f74:	2b39      	cmp	r3, #57	; 0x39
 8109f76:	d029      	beq.n	8109fcc <_dtoa_r+0xabc>
 8109f78:	f1b9 0f00 	cmp.w	r9, #0
 8109f7c:	dd01      	ble.n	8109f82 <_dtoa_r+0xa72>
 8109f7e:	9b04      	ldr	r3, [sp, #16]
 8109f80:	3331      	adds	r3, #49	; 0x31
 8109f82:	9a02      	ldr	r2, [sp, #8]
 8109f84:	7013      	strb	r3, [r2, #0]
 8109f86:	e774      	b.n	8109e72 <_dtoa_r+0x962>
 8109f88:	4638      	mov	r0, r7
 8109f8a:	e7b9      	b.n	8109f00 <_dtoa_r+0x9f0>
 8109f8c:	2201      	movs	r2, #1
 8109f8e:	e7e2      	b.n	8109f56 <_dtoa_r+0xa46>
 8109f90:	f1b9 0f00 	cmp.w	r9, #0
 8109f94:	db06      	blt.n	8109fa4 <_dtoa_r+0xa94>
 8109f96:	9905      	ldr	r1, [sp, #20]
 8109f98:	ea41 0909 	orr.w	r9, r1, r9
 8109f9c:	9906      	ldr	r1, [sp, #24]
 8109f9e:	ea59 0101 	orrs.w	r1, r9, r1
 8109fa2:	d120      	bne.n	8109fe6 <_dtoa_r+0xad6>
 8109fa4:	2a00      	cmp	r2, #0
 8109fa6:	ddec      	ble.n	8109f82 <_dtoa_r+0xa72>
 8109fa8:	4659      	mov	r1, fp
 8109faa:	2201      	movs	r2, #1
 8109fac:	4620      	mov	r0, r4
 8109fae:	9301      	str	r3, [sp, #4]
 8109fb0:	f001 f8c0 	bl	810b134 <__lshift>
 8109fb4:	4631      	mov	r1, r6
 8109fb6:	4683      	mov	fp, r0
 8109fb8:	f001 f928 	bl	810b20c <__mcmp>
 8109fbc:	2800      	cmp	r0, #0
 8109fbe:	9b01      	ldr	r3, [sp, #4]
 8109fc0:	dc02      	bgt.n	8109fc8 <_dtoa_r+0xab8>
 8109fc2:	d1de      	bne.n	8109f82 <_dtoa_r+0xa72>
 8109fc4:	07da      	lsls	r2, r3, #31
 8109fc6:	d5dc      	bpl.n	8109f82 <_dtoa_r+0xa72>
 8109fc8:	2b39      	cmp	r3, #57	; 0x39
 8109fca:	d1d8      	bne.n	8109f7e <_dtoa_r+0xa6e>
 8109fcc:	9a02      	ldr	r2, [sp, #8]
 8109fce:	2339      	movs	r3, #57	; 0x39
 8109fd0:	7013      	strb	r3, [r2, #0]
 8109fd2:	462b      	mov	r3, r5
 8109fd4:	461d      	mov	r5, r3
 8109fd6:	3b01      	subs	r3, #1
 8109fd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8109fdc:	2a39      	cmp	r2, #57	; 0x39
 8109fde:	d050      	beq.n	810a082 <_dtoa_r+0xb72>
 8109fe0:	3201      	adds	r2, #1
 8109fe2:	701a      	strb	r2, [r3, #0]
 8109fe4:	e745      	b.n	8109e72 <_dtoa_r+0x962>
 8109fe6:	2a00      	cmp	r2, #0
 8109fe8:	dd03      	ble.n	8109ff2 <_dtoa_r+0xae2>
 8109fea:	2b39      	cmp	r3, #57	; 0x39
 8109fec:	d0ee      	beq.n	8109fcc <_dtoa_r+0xabc>
 8109fee:	3301      	adds	r3, #1
 8109ff0:	e7c7      	b.n	8109f82 <_dtoa_r+0xa72>
 8109ff2:	9a01      	ldr	r2, [sp, #4]
 8109ff4:	9907      	ldr	r1, [sp, #28]
 8109ff6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8109ffa:	428a      	cmp	r2, r1
 8109ffc:	d02a      	beq.n	810a054 <_dtoa_r+0xb44>
 8109ffe:	4659      	mov	r1, fp
 810a000:	2300      	movs	r3, #0
 810a002:	220a      	movs	r2, #10
 810a004:	4620      	mov	r0, r4
 810a006:	f000 fe9b 	bl	810ad40 <__multadd>
 810a00a:	45b8      	cmp	r8, r7
 810a00c:	4683      	mov	fp, r0
 810a00e:	f04f 0300 	mov.w	r3, #0
 810a012:	f04f 020a 	mov.w	r2, #10
 810a016:	4641      	mov	r1, r8
 810a018:	4620      	mov	r0, r4
 810a01a:	d107      	bne.n	810a02c <_dtoa_r+0xb1c>
 810a01c:	f000 fe90 	bl	810ad40 <__multadd>
 810a020:	4680      	mov	r8, r0
 810a022:	4607      	mov	r7, r0
 810a024:	9b01      	ldr	r3, [sp, #4]
 810a026:	3301      	adds	r3, #1
 810a028:	9301      	str	r3, [sp, #4]
 810a02a:	e775      	b.n	8109f18 <_dtoa_r+0xa08>
 810a02c:	f000 fe88 	bl	810ad40 <__multadd>
 810a030:	4639      	mov	r1, r7
 810a032:	4680      	mov	r8, r0
 810a034:	2300      	movs	r3, #0
 810a036:	220a      	movs	r2, #10
 810a038:	4620      	mov	r0, r4
 810a03a:	f000 fe81 	bl	810ad40 <__multadd>
 810a03e:	4607      	mov	r7, r0
 810a040:	e7f0      	b.n	810a024 <_dtoa_r+0xb14>
 810a042:	f1b9 0f00 	cmp.w	r9, #0
 810a046:	9a00      	ldr	r2, [sp, #0]
 810a048:	bfcc      	ite	gt
 810a04a:	464d      	movgt	r5, r9
 810a04c:	2501      	movle	r5, #1
 810a04e:	4415      	add	r5, r2
 810a050:	f04f 0800 	mov.w	r8, #0
 810a054:	4659      	mov	r1, fp
 810a056:	2201      	movs	r2, #1
 810a058:	4620      	mov	r0, r4
 810a05a:	9301      	str	r3, [sp, #4]
 810a05c:	f001 f86a 	bl	810b134 <__lshift>
 810a060:	4631      	mov	r1, r6
 810a062:	4683      	mov	fp, r0
 810a064:	f001 f8d2 	bl	810b20c <__mcmp>
 810a068:	2800      	cmp	r0, #0
 810a06a:	dcb2      	bgt.n	8109fd2 <_dtoa_r+0xac2>
 810a06c:	d102      	bne.n	810a074 <_dtoa_r+0xb64>
 810a06e:	9b01      	ldr	r3, [sp, #4]
 810a070:	07db      	lsls	r3, r3, #31
 810a072:	d4ae      	bmi.n	8109fd2 <_dtoa_r+0xac2>
 810a074:	462b      	mov	r3, r5
 810a076:	461d      	mov	r5, r3
 810a078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a07c:	2a30      	cmp	r2, #48	; 0x30
 810a07e:	d0fa      	beq.n	810a076 <_dtoa_r+0xb66>
 810a080:	e6f7      	b.n	8109e72 <_dtoa_r+0x962>
 810a082:	9a00      	ldr	r2, [sp, #0]
 810a084:	429a      	cmp	r2, r3
 810a086:	d1a5      	bne.n	8109fd4 <_dtoa_r+0xac4>
 810a088:	f10a 0a01 	add.w	sl, sl, #1
 810a08c:	2331      	movs	r3, #49	; 0x31
 810a08e:	e779      	b.n	8109f84 <_dtoa_r+0xa74>
 810a090:	4b13      	ldr	r3, [pc, #76]	; (810a0e0 <_dtoa_r+0xbd0>)
 810a092:	f7ff baaf 	b.w	81095f4 <_dtoa_r+0xe4>
 810a096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a098:	2b00      	cmp	r3, #0
 810a09a:	f47f aa86 	bne.w	81095aa <_dtoa_r+0x9a>
 810a09e:	4b11      	ldr	r3, [pc, #68]	; (810a0e4 <_dtoa_r+0xbd4>)
 810a0a0:	f7ff baa8 	b.w	81095f4 <_dtoa_r+0xe4>
 810a0a4:	f1b9 0f00 	cmp.w	r9, #0
 810a0a8:	dc03      	bgt.n	810a0b2 <_dtoa_r+0xba2>
 810a0aa:	9b05      	ldr	r3, [sp, #20]
 810a0ac:	2b02      	cmp	r3, #2
 810a0ae:	f73f aec9 	bgt.w	8109e44 <_dtoa_r+0x934>
 810a0b2:	9d00      	ldr	r5, [sp, #0]
 810a0b4:	4631      	mov	r1, r6
 810a0b6:	4658      	mov	r0, fp
 810a0b8:	f7ff f99f 	bl	81093fa <quorem>
 810a0bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810a0c0:	f805 3b01 	strb.w	r3, [r5], #1
 810a0c4:	9a00      	ldr	r2, [sp, #0]
 810a0c6:	1aaa      	subs	r2, r5, r2
 810a0c8:	4591      	cmp	r9, r2
 810a0ca:	ddba      	ble.n	810a042 <_dtoa_r+0xb32>
 810a0cc:	4659      	mov	r1, fp
 810a0ce:	2300      	movs	r3, #0
 810a0d0:	220a      	movs	r2, #10
 810a0d2:	4620      	mov	r0, r4
 810a0d4:	f000 fe34 	bl	810ad40 <__multadd>
 810a0d8:	4683      	mov	fp, r0
 810a0da:	e7eb      	b.n	810a0b4 <_dtoa_r+0xba4>
 810a0dc:	0810c004 	.word	0x0810c004
 810a0e0:	0810be01 	.word	0x0810be01
 810a0e4:	0810bf81 	.word	0x0810bf81

0810a0e8 <__sflush_r>:
 810a0e8:	898a      	ldrh	r2, [r1, #12]
 810a0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a0ee:	4605      	mov	r5, r0
 810a0f0:	0710      	lsls	r0, r2, #28
 810a0f2:	460c      	mov	r4, r1
 810a0f4:	d458      	bmi.n	810a1a8 <__sflush_r+0xc0>
 810a0f6:	684b      	ldr	r3, [r1, #4]
 810a0f8:	2b00      	cmp	r3, #0
 810a0fa:	dc05      	bgt.n	810a108 <__sflush_r+0x20>
 810a0fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a0fe:	2b00      	cmp	r3, #0
 810a100:	dc02      	bgt.n	810a108 <__sflush_r+0x20>
 810a102:	2000      	movs	r0, #0
 810a104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a10a:	2e00      	cmp	r6, #0
 810a10c:	d0f9      	beq.n	810a102 <__sflush_r+0x1a>
 810a10e:	2300      	movs	r3, #0
 810a110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a114:	682f      	ldr	r7, [r5, #0]
 810a116:	602b      	str	r3, [r5, #0]
 810a118:	d032      	beq.n	810a180 <__sflush_r+0x98>
 810a11a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a11c:	89a3      	ldrh	r3, [r4, #12]
 810a11e:	075a      	lsls	r2, r3, #29
 810a120:	d505      	bpl.n	810a12e <__sflush_r+0x46>
 810a122:	6863      	ldr	r3, [r4, #4]
 810a124:	1ac0      	subs	r0, r0, r3
 810a126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a128:	b10b      	cbz	r3, 810a12e <__sflush_r+0x46>
 810a12a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a12c:	1ac0      	subs	r0, r0, r3
 810a12e:	2300      	movs	r3, #0
 810a130:	4602      	mov	r2, r0
 810a132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a134:	6a21      	ldr	r1, [r4, #32]
 810a136:	4628      	mov	r0, r5
 810a138:	47b0      	blx	r6
 810a13a:	1c43      	adds	r3, r0, #1
 810a13c:	89a3      	ldrh	r3, [r4, #12]
 810a13e:	d106      	bne.n	810a14e <__sflush_r+0x66>
 810a140:	6829      	ldr	r1, [r5, #0]
 810a142:	291d      	cmp	r1, #29
 810a144:	d82c      	bhi.n	810a1a0 <__sflush_r+0xb8>
 810a146:	4a2a      	ldr	r2, [pc, #168]	; (810a1f0 <__sflush_r+0x108>)
 810a148:	40ca      	lsrs	r2, r1
 810a14a:	07d6      	lsls	r6, r2, #31
 810a14c:	d528      	bpl.n	810a1a0 <__sflush_r+0xb8>
 810a14e:	2200      	movs	r2, #0
 810a150:	6062      	str	r2, [r4, #4]
 810a152:	04d9      	lsls	r1, r3, #19
 810a154:	6922      	ldr	r2, [r4, #16]
 810a156:	6022      	str	r2, [r4, #0]
 810a158:	d504      	bpl.n	810a164 <__sflush_r+0x7c>
 810a15a:	1c42      	adds	r2, r0, #1
 810a15c:	d101      	bne.n	810a162 <__sflush_r+0x7a>
 810a15e:	682b      	ldr	r3, [r5, #0]
 810a160:	b903      	cbnz	r3, 810a164 <__sflush_r+0x7c>
 810a162:	6560      	str	r0, [r4, #84]	; 0x54
 810a164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a166:	602f      	str	r7, [r5, #0]
 810a168:	2900      	cmp	r1, #0
 810a16a:	d0ca      	beq.n	810a102 <__sflush_r+0x1a>
 810a16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a170:	4299      	cmp	r1, r3
 810a172:	d002      	beq.n	810a17a <__sflush_r+0x92>
 810a174:	4628      	mov	r0, r5
 810a176:	f7fd f8eb 	bl	8107350 <_free_r>
 810a17a:	2000      	movs	r0, #0
 810a17c:	6360      	str	r0, [r4, #52]	; 0x34
 810a17e:	e7c1      	b.n	810a104 <__sflush_r+0x1c>
 810a180:	6a21      	ldr	r1, [r4, #32]
 810a182:	2301      	movs	r3, #1
 810a184:	4628      	mov	r0, r5
 810a186:	47b0      	blx	r6
 810a188:	1c41      	adds	r1, r0, #1
 810a18a:	d1c7      	bne.n	810a11c <__sflush_r+0x34>
 810a18c:	682b      	ldr	r3, [r5, #0]
 810a18e:	2b00      	cmp	r3, #0
 810a190:	d0c4      	beq.n	810a11c <__sflush_r+0x34>
 810a192:	2b1d      	cmp	r3, #29
 810a194:	d001      	beq.n	810a19a <__sflush_r+0xb2>
 810a196:	2b16      	cmp	r3, #22
 810a198:	d101      	bne.n	810a19e <__sflush_r+0xb6>
 810a19a:	602f      	str	r7, [r5, #0]
 810a19c:	e7b1      	b.n	810a102 <__sflush_r+0x1a>
 810a19e:	89a3      	ldrh	r3, [r4, #12]
 810a1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a1a4:	81a3      	strh	r3, [r4, #12]
 810a1a6:	e7ad      	b.n	810a104 <__sflush_r+0x1c>
 810a1a8:	690f      	ldr	r7, [r1, #16]
 810a1aa:	2f00      	cmp	r7, #0
 810a1ac:	d0a9      	beq.n	810a102 <__sflush_r+0x1a>
 810a1ae:	0793      	lsls	r3, r2, #30
 810a1b0:	680e      	ldr	r6, [r1, #0]
 810a1b2:	bf08      	it	eq
 810a1b4:	694b      	ldreq	r3, [r1, #20]
 810a1b6:	600f      	str	r7, [r1, #0]
 810a1b8:	bf18      	it	ne
 810a1ba:	2300      	movne	r3, #0
 810a1bc:	eba6 0807 	sub.w	r8, r6, r7
 810a1c0:	608b      	str	r3, [r1, #8]
 810a1c2:	f1b8 0f00 	cmp.w	r8, #0
 810a1c6:	dd9c      	ble.n	810a102 <__sflush_r+0x1a>
 810a1c8:	6a21      	ldr	r1, [r4, #32]
 810a1ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a1cc:	4643      	mov	r3, r8
 810a1ce:	463a      	mov	r2, r7
 810a1d0:	4628      	mov	r0, r5
 810a1d2:	47b0      	blx	r6
 810a1d4:	2800      	cmp	r0, #0
 810a1d6:	dc06      	bgt.n	810a1e6 <__sflush_r+0xfe>
 810a1d8:	89a3      	ldrh	r3, [r4, #12]
 810a1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a1de:	81a3      	strh	r3, [r4, #12]
 810a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 810a1e4:	e78e      	b.n	810a104 <__sflush_r+0x1c>
 810a1e6:	4407      	add	r7, r0
 810a1e8:	eba8 0800 	sub.w	r8, r8, r0
 810a1ec:	e7e9      	b.n	810a1c2 <__sflush_r+0xda>
 810a1ee:	bf00      	nop
 810a1f0:	20400001 	.word	0x20400001

0810a1f4 <_fflush_r>:
 810a1f4:	b538      	push	{r3, r4, r5, lr}
 810a1f6:	690b      	ldr	r3, [r1, #16]
 810a1f8:	4605      	mov	r5, r0
 810a1fa:	460c      	mov	r4, r1
 810a1fc:	b913      	cbnz	r3, 810a204 <_fflush_r+0x10>
 810a1fe:	2500      	movs	r5, #0
 810a200:	4628      	mov	r0, r5
 810a202:	bd38      	pop	{r3, r4, r5, pc}
 810a204:	b118      	cbz	r0, 810a20e <_fflush_r+0x1a>
 810a206:	6983      	ldr	r3, [r0, #24]
 810a208:	b90b      	cbnz	r3, 810a20e <_fflush_r+0x1a>
 810a20a:	f000 f887 	bl	810a31c <__sinit>
 810a20e:	4b14      	ldr	r3, [pc, #80]	; (810a260 <_fflush_r+0x6c>)
 810a210:	429c      	cmp	r4, r3
 810a212:	d11b      	bne.n	810a24c <_fflush_r+0x58>
 810a214:	686c      	ldr	r4, [r5, #4]
 810a216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a21a:	2b00      	cmp	r3, #0
 810a21c:	d0ef      	beq.n	810a1fe <_fflush_r+0xa>
 810a21e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a220:	07d0      	lsls	r0, r2, #31
 810a222:	d404      	bmi.n	810a22e <_fflush_r+0x3a>
 810a224:	0599      	lsls	r1, r3, #22
 810a226:	d402      	bmi.n	810a22e <_fflush_r+0x3a>
 810a228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a22a:	f000 fc88 	bl	810ab3e <__retarget_lock_acquire_recursive>
 810a22e:	4628      	mov	r0, r5
 810a230:	4621      	mov	r1, r4
 810a232:	f7ff ff59 	bl	810a0e8 <__sflush_r>
 810a236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a238:	07da      	lsls	r2, r3, #31
 810a23a:	4605      	mov	r5, r0
 810a23c:	d4e0      	bmi.n	810a200 <_fflush_r+0xc>
 810a23e:	89a3      	ldrh	r3, [r4, #12]
 810a240:	059b      	lsls	r3, r3, #22
 810a242:	d4dd      	bmi.n	810a200 <_fflush_r+0xc>
 810a244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a246:	f000 fc7b 	bl	810ab40 <__retarget_lock_release_recursive>
 810a24a:	e7d9      	b.n	810a200 <_fflush_r+0xc>
 810a24c:	4b05      	ldr	r3, [pc, #20]	; (810a264 <_fflush_r+0x70>)
 810a24e:	429c      	cmp	r4, r3
 810a250:	d101      	bne.n	810a256 <_fflush_r+0x62>
 810a252:	68ac      	ldr	r4, [r5, #8]
 810a254:	e7df      	b.n	810a216 <_fflush_r+0x22>
 810a256:	4b04      	ldr	r3, [pc, #16]	; (810a268 <_fflush_r+0x74>)
 810a258:	429c      	cmp	r4, r3
 810a25a:	bf08      	it	eq
 810a25c:	68ec      	ldreq	r4, [r5, #12]
 810a25e:	e7da      	b.n	810a216 <_fflush_r+0x22>
 810a260:	0810c038 	.word	0x0810c038
 810a264:	0810c058 	.word	0x0810c058
 810a268:	0810c018 	.word	0x0810c018

0810a26c <std>:
 810a26c:	2300      	movs	r3, #0
 810a26e:	b510      	push	{r4, lr}
 810a270:	4604      	mov	r4, r0
 810a272:	e9c0 3300 	strd	r3, r3, [r0]
 810a276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a27a:	6083      	str	r3, [r0, #8]
 810a27c:	8181      	strh	r1, [r0, #12]
 810a27e:	6643      	str	r3, [r0, #100]	; 0x64
 810a280:	81c2      	strh	r2, [r0, #14]
 810a282:	6183      	str	r3, [r0, #24]
 810a284:	4619      	mov	r1, r3
 810a286:	2208      	movs	r2, #8
 810a288:	305c      	adds	r0, #92	; 0x5c
 810a28a:	f7fd f859 	bl	8107340 <memset>
 810a28e:	4b05      	ldr	r3, [pc, #20]	; (810a2a4 <std+0x38>)
 810a290:	6263      	str	r3, [r4, #36]	; 0x24
 810a292:	4b05      	ldr	r3, [pc, #20]	; (810a2a8 <std+0x3c>)
 810a294:	62a3      	str	r3, [r4, #40]	; 0x28
 810a296:	4b05      	ldr	r3, [pc, #20]	; (810a2ac <std+0x40>)
 810a298:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a29a:	4b05      	ldr	r3, [pc, #20]	; (810a2b0 <std+0x44>)
 810a29c:	6224      	str	r4, [r4, #32]
 810a29e:	6323      	str	r3, [r4, #48]	; 0x30
 810a2a0:	bd10      	pop	{r4, pc}
 810a2a2:	bf00      	nop
 810a2a4:	0810b9b1 	.word	0x0810b9b1
 810a2a8:	0810b9d3 	.word	0x0810b9d3
 810a2ac:	0810ba0b 	.word	0x0810ba0b
 810a2b0:	0810ba2f 	.word	0x0810ba2f

0810a2b4 <_cleanup_r>:
 810a2b4:	4901      	ldr	r1, [pc, #4]	; (810a2bc <_cleanup_r+0x8>)
 810a2b6:	f000 b8af 	b.w	810a418 <_fwalk_reent>
 810a2ba:	bf00      	nop
 810a2bc:	0810a1f5 	.word	0x0810a1f5

0810a2c0 <__sfmoreglue>:
 810a2c0:	b570      	push	{r4, r5, r6, lr}
 810a2c2:	1e4a      	subs	r2, r1, #1
 810a2c4:	2568      	movs	r5, #104	; 0x68
 810a2c6:	4355      	muls	r5, r2
 810a2c8:	460e      	mov	r6, r1
 810a2ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a2ce:	f7fd f88f 	bl	81073f0 <_malloc_r>
 810a2d2:	4604      	mov	r4, r0
 810a2d4:	b140      	cbz	r0, 810a2e8 <__sfmoreglue+0x28>
 810a2d6:	2100      	movs	r1, #0
 810a2d8:	e9c0 1600 	strd	r1, r6, [r0]
 810a2dc:	300c      	adds	r0, #12
 810a2de:	60a0      	str	r0, [r4, #8]
 810a2e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a2e4:	f7fd f82c 	bl	8107340 <memset>
 810a2e8:	4620      	mov	r0, r4
 810a2ea:	bd70      	pop	{r4, r5, r6, pc}

0810a2ec <__sfp_lock_acquire>:
 810a2ec:	4801      	ldr	r0, [pc, #4]	; (810a2f4 <__sfp_lock_acquire+0x8>)
 810a2ee:	f000 bc26 	b.w	810ab3e <__retarget_lock_acquire_recursive>
 810a2f2:	bf00      	nop
 810a2f4:	10000524 	.word	0x10000524

0810a2f8 <__sfp_lock_release>:
 810a2f8:	4801      	ldr	r0, [pc, #4]	; (810a300 <__sfp_lock_release+0x8>)
 810a2fa:	f000 bc21 	b.w	810ab40 <__retarget_lock_release_recursive>
 810a2fe:	bf00      	nop
 810a300:	10000524 	.word	0x10000524

0810a304 <__sinit_lock_acquire>:
 810a304:	4801      	ldr	r0, [pc, #4]	; (810a30c <__sinit_lock_acquire+0x8>)
 810a306:	f000 bc1a 	b.w	810ab3e <__retarget_lock_acquire_recursive>
 810a30a:	bf00      	nop
 810a30c:	1000051f 	.word	0x1000051f

0810a310 <__sinit_lock_release>:
 810a310:	4801      	ldr	r0, [pc, #4]	; (810a318 <__sinit_lock_release+0x8>)
 810a312:	f000 bc15 	b.w	810ab40 <__retarget_lock_release_recursive>
 810a316:	bf00      	nop
 810a318:	1000051f 	.word	0x1000051f

0810a31c <__sinit>:
 810a31c:	b510      	push	{r4, lr}
 810a31e:	4604      	mov	r4, r0
 810a320:	f7ff fff0 	bl	810a304 <__sinit_lock_acquire>
 810a324:	69a3      	ldr	r3, [r4, #24]
 810a326:	b11b      	cbz	r3, 810a330 <__sinit+0x14>
 810a328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a32c:	f7ff bff0 	b.w	810a310 <__sinit_lock_release>
 810a330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a334:	6523      	str	r3, [r4, #80]	; 0x50
 810a336:	4b13      	ldr	r3, [pc, #76]	; (810a384 <__sinit+0x68>)
 810a338:	4a13      	ldr	r2, [pc, #76]	; (810a388 <__sinit+0x6c>)
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	62a2      	str	r2, [r4, #40]	; 0x28
 810a33e:	42a3      	cmp	r3, r4
 810a340:	bf04      	itt	eq
 810a342:	2301      	moveq	r3, #1
 810a344:	61a3      	streq	r3, [r4, #24]
 810a346:	4620      	mov	r0, r4
 810a348:	f000 f820 	bl	810a38c <__sfp>
 810a34c:	6060      	str	r0, [r4, #4]
 810a34e:	4620      	mov	r0, r4
 810a350:	f000 f81c 	bl	810a38c <__sfp>
 810a354:	60a0      	str	r0, [r4, #8]
 810a356:	4620      	mov	r0, r4
 810a358:	f000 f818 	bl	810a38c <__sfp>
 810a35c:	2200      	movs	r2, #0
 810a35e:	60e0      	str	r0, [r4, #12]
 810a360:	2104      	movs	r1, #4
 810a362:	6860      	ldr	r0, [r4, #4]
 810a364:	f7ff ff82 	bl	810a26c <std>
 810a368:	68a0      	ldr	r0, [r4, #8]
 810a36a:	2201      	movs	r2, #1
 810a36c:	2109      	movs	r1, #9
 810a36e:	f7ff ff7d 	bl	810a26c <std>
 810a372:	68e0      	ldr	r0, [r4, #12]
 810a374:	2202      	movs	r2, #2
 810a376:	2112      	movs	r1, #18
 810a378:	f7ff ff78 	bl	810a26c <std>
 810a37c:	2301      	movs	r3, #1
 810a37e:	61a3      	str	r3, [r4, #24]
 810a380:	e7d2      	b.n	810a328 <__sinit+0xc>
 810a382:	bf00      	nop
 810a384:	0810bddc 	.word	0x0810bddc
 810a388:	0810a2b5 	.word	0x0810a2b5

0810a38c <__sfp>:
 810a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a38e:	4607      	mov	r7, r0
 810a390:	f7ff ffac 	bl	810a2ec <__sfp_lock_acquire>
 810a394:	4b1e      	ldr	r3, [pc, #120]	; (810a410 <__sfp+0x84>)
 810a396:	681e      	ldr	r6, [r3, #0]
 810a398:	69b3      	ldr	r3, [r6, #24]
 810a39a:	b913      	cbnz	r3, 810a3a2 <__sfp+0x16>
 810a39c:	4630      	mov	r0, r6
 810a39e:	f7ff ffbd 	bl	810a31c <__sinit>
 810a3a2:	3648      	adds	r6, #72	; 0x48
 810a3a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a3a8:	3b01      	subs	r3, #1
 810a3aa:	d503      	bpl.n	810a3b4 <__sfp+0x28>
 810a3ac:	6833      	ldr	r3, [r6, #0]
 810a3ae:	b30b      	cbz	r3, 810a3f4 <__sfp+0x68>
 810a3b0:	6836      	ldr	r6, [r6, #0]
 810a3b2:	e7f7      	b.n	810a3a4 <__sfp+0x18>
 810a3b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a3b8:	b9d5      	cbnz	r5, 810a3f0 <__sfp+0x64>
 810a3ba:	4b16      	ldr	r3, [pc, #88]	; (810a414 <__sfp+0x88>)
 810a3bc:	60e3      	str	r3, [r4, #12]
 810a3be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a3c2:	6665      	str	r5, [r4, #100]	; 0x64
 810a3c4:	f000 fbba 	bl	810ab3c <__retarget_lock_init_recursive>
 810a3c8:	f7ff ff96 	bl	810a2f8 <__sfp_lock_release>
 810a3cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a3d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a3d4:	6025      	str	r5, [r4, #0]
 810a3d6:	61a5      	str	r5, [r4, #24]
 810a3d8:	2208      	movs	r2, #8
 810a3da:	4629      	mov	r1, r5
 810a3dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a3e0:	f7fc ffae 	bl	8107340 <memset>
 810a3e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a3e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a3ec:	4620      	mov	r0, r4
 810a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a3f0:	3468      	adds	r4, #104	; 0x68
 810a3f2:	e7d9      	b.n	810a3a8 <__sfp+0x1c>
 810a3f4:	2104      	movs	r1, #4
 810a3f6:	4638      	mov	r0, r7
 810a3f8:	f7ff ff62 	bl	810a2c0 <__sfmoreglue>
 810a3fc:	4604      	mov	r4, r0
 810a3fe:	6030      	str	r0, [r6, #0]
 810a400:	2800      	cmp	r0, #0
 810a402:	d1d5      	bne.n	810a3b0 <__sfp+0x24>
 810a404:	f7ff ff78 	bl	810a2f8 <__sfp_lock_release>
 810a408:	230c      	movs	r3, #12
 810a40a:	603b      	str	r3, [r7, #0]
 810a40c:	e7ee      	b.n	810a3ec <__sfp+0x60>
 810a40e:	bf00      	nop
 810a410:	0810bddc 	.word	0x0810bddc
 810a414:	ffff0001 	.word	0xffff0001

0810a418 <_fwalk_reent>:
 810a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a41c:	4606      	mov	r6, r0
 810a41e:	4688      	mov	r8, r1
 810a420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a424:	2700      	movs	r7, #0
 810a426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a42a:	f1b9 0901 	subs.w	r9, r9, #1
 810a42e:	d505      	bpl.n	810a43c <_fwalk_reent+0x24>
 810a430:	6824      	ldr	r4, [r4, #0]
 810a432:	2c00      	cmp	r4, #0
 810a434:	d1f7      	bne.n	810a426 <_fwalk_reent+0xe>
 810a436:	4638      	mov	r0, r7
 810a438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a43c:	89ab      	ldrh	r3, [r5, #12]
 810a43e:	2b01      	cmp	r3, #1
 810a440:	d907      	bls.n	810a452 <_fwalk_reent+0x3a>
 810a442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a446:	3301      	adds	r3, #1
 810a448:	d003      	beq.n	810a452 <_fwalk_reent+0x3a>
 810a44a:	4629      	mov	r1, r5
 810a44c:	4630      	mov	r0, r6
 810a44e:	47c0      	blx	r8
 810a450:	4307      	orrs	r7, r0
 810a452:	3568      	adds	r5, #104	; 0x68
 810a454:	e7e9      	b.n	810a42a <_fwalk_reent+0x12>

0810a456 <rshift>:
 810a456:	6903      	ldr	r3, [r0, #16]
 810a458:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a45c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a460:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a464:	f100 0414 	add.w	r4, r0, #20
 810a468:	dd45      	ble.n	810a4f6 <rshift+0xa0>
 810a46a:	f011 011f 	ands.w	r1, r1, #31
 810a46e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a472:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a476:	d10c      	bne.n	810a492 <rshift+0x3c>
 810a478:	f100 0710 	add.w	r7, r0, #16
 810a47c:	4629      	mov	r1, r5
 810a47e:	42b1      	cmp	r1, r6
 810a480:	d334      	bcc.n	810a4ec <rshift+0x96>
 810a482:	1a9b      	subs	r3, r3, r2
 810a484:	009b      	lsls	r3, r3, #2
 810a486:	1eea      	subs	r2, r5, #3
 810a488:	4296      	cmp	r6, r2
 810a48a:	bf38      	it	cc
 810a48c:	2300      	movcc	r3, #0
 810a48e:	4423      	add	r3, r4
 810a490:	e015      	b.n	810a4be <rshift+0x68>
 810a492:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a496:	f1c1 0820 	rsb	r8, r1, #32
 810a49a:	40cf      	lsrs	r7, r1
 810a49c:	f105 0e04 	add.w	lr, r5, #4
 810a4a0:	46a1      	mov	r9, r4
 810a4a2:	4576      	cmp	r6, lr
 810a4a4:	46f4      	mov	ip, lr
 810a4a6:	d815      	bhi.n	810a4d4 <rshift+0x7e>
 810a4a8:	1a9b      	subs	r3, r3, r2
 810a4aa:	009a      	lsls	r2, r3, #2
 810a4ac:	3a04      	subs	r2, #4
 810a4ae:	3501      	adds	r5, #1
 810a4b0:	42ae      	cmp	r6, r5
 810a4b2:	bf38      	it	cc
 810a4b4:	2200      	movcc	r2, #0
 810a4b6:	18a3      	adds	r3, r4, r2
 810a4b8:	50a7      	str	r7, [r4, r2]
 810a4ba:	b107      	cbz	r7, 810a4be <rshift+0x68>
 810a4bc:	3304      	adds	r3, #4
 810a4be:	1b1a      	subs	r2, r3, r4
 810a4c0:	42a3      	cmp	r3, r4
 810a4c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a4c6:	bf08      	it	eq
 810a4c8:	2300      	moveq	r3, #0
 810a4ca:	6102      	str	r2, [r0, #16]
 810a4cc:	bf08      	it	eq
 810a4ce:	6143      	streq	r3, [r0, #20]
 810a4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a4d4:	f8dc c000 	ldr.w	ip, [ip]
 810a4d8:	fa0c fc08 	lsl.w	ip, ip, r8
 810a4dc:	ea4c 0707 	orr.w	r7, ip, r7
 810a4e0:	f849 7b04 	str.w	r7, [r9], #4
 810a4e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a4e8:	40cf      	lsrs	r7, r1
 810a4ea:	e7da      	b.n	810a4a2 <rshift+0x4c>
 810a4ec:	f851 cb04 	ldr.w	ip, [r1], #4
 810a4f0:	f847 cf04 	str.w	ip, [r7, #4]!
 810a4f4:	e7c3      	b.n	810a47e <rshift+0x28>
 810a4f6:	4623      	mov	r3, r4
 810a4f8:	e7e1      	b.n	810a4be <rshift+0x68>

0810a4fa <__hexdig_fun>:
 810a4fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a4fe:	2b09      	cmp	r3, #9
 810a500:	d802      	bhi.n	810a508 <__hexdig_fun+0xe>
 810a502:	3820      	subs	r0, #32
 810a504:	b2c0      	uxtb	r0, r0
 810a506:	4770      	bx	lr
 810a508:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a50c:	2b05      	cmp	r3, #5
 810a50e:	d801      	bhi.n	810a514 <__hexdig_fun+0x1a>
 810a510:	3847      	subs	r0, #71	; 0x47
 810a512:	e7f7      	b.n	810a504 <__hexdig_fun+0xa>
 810a514:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a518:	2b05      	cmp	r3, #5
 810a51a:	d801      	bhi.n	810a520 <__hexdig_fun+0x26>
 810a51c:	3827      	subs	r0, #39	; 0x27
 810a51e:	e7f1      	b.n	810a504 <__hexdig_fun+0xa>
 810a520:	2000      	movs	r0, #0
 810a522:	4770      	bx	lr

0810a524 <__gethex>:
 810a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a528:	ed2d 8b02 	vpush	{d8}
 810a52c:	b089      	sub	sp, #36	; 0x24
 810a52e:	ee08 0a10 	vmov	s16, r0
 810a532:	9304      	str	r3, [sp, #16]
 810a534:	4bbc      	ldr	r3, [pc, #752]	; (810a828 <__gethex+0x304>)
 810a536:	681b      	ldr	r3, [r3, #0]
 810a538:	9301      	str	r3, [sp, #4]
 810a53a:	4618      	mov	r0, r3
 810a53c:	468b      	mov	fp, r1
 810a53e:	4690      	mov	r8, r2
 810a540:	f7f5 fed8 	bl	81002f4 <strlen>
 810a544:	9b01      	ldr	r3, [sp, #4]
 810a546:	f8db 2000 	ldr.w	r2, [fp]
 810a54a:	4403      	add	r3, r0
 810a54c:	4682      	mov	sl, r0
 810a54e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a552:	9305      	str	r3, [sp, #20]
 810a554:	1c93      	adds	r3, r2, #2
 810a556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a55a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a55e:	32fe      	adds	r2, #254	; 0xfe
 810a560:	18d1      	adds	r1, r2, r3
 810a562:	461f      	mov	r7, r3
 810a564:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a568:	9100      	str	r1, [sp, #0]
 810a56a:	2830      	cmp	r0, #48	; 0x30
 810a56c:	d0f8      	beq.n	810a560 <__gethex+0x3c>
 810a56e:	f7ff ffc4 	bl	810a4fa <__hexdig_fun>
 810a572:	4604      	mov	r4, r0
 810a574:	2800      	cmp	r0, #0
 810a576:	d13a      	bne.n	810a5ee <__gethex+0xca>
 810a578:	9901      	ldr	r1, [sp, #4]
 810a57a:	4652      	mov	r2, sl
 810a57c:	4638      	mov	r0, r7
 810a57e:	f7fd ff9b 	bl	81084b8 <strncmp>
 810a582:	4605      	mov	r5, r0
 810a584:	2800      	cmp	r0, #0
 810a586:	d168      	bne.n	810a65a <__gethex+0x136>
 810a588:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a58c:	eb07 060a 	add.w	r6, r7, sl
 810a590:	f7ff ffb3 	bl	810a4fa <__hexdig_fun>
 810a594:	2800      	cmp	r0, #0
 810a596:	d062      	beq.n	810a65e <__gethex+0x13a>
 810a598:	4633      	mov	r3, r6
 810a59a:	7818      	ldrb	r0, [r3, #0]
 810a59c:	2830      	cmp	r0, #48	; 0x30
 810a59e:	461f      	mov	r7, r3
 810a5a0:	f103 0301 	add.w	r3, r3, #1
 810a5a4:	d0f9      	beq.n	810a59a <__gethex+0x76>
 810a5a6:	f7ff ffa8 	bl	810a4fa <__hexdig_fun>
 810a5aa:	2301      	movs	r3, #1
 810a5ac:	fab0 f480 	clz	r4, r0
 810a5b0:	0964      	lsrs	r4, r4, #5
 810a5b2:	4635      	mov	r5, r6
 810a5b4:	9300      	str	r3, [sp, #0]
 810a5b6:	463a      	mov	r2, r7
 810a5b8:	4616      	mov	r6, r2
 810a5ba:	3201      	adds	r2, #1
 810a5bc:	7830      	ldrb	r0, [r6, #0]
 810a5be:	f7ff ff9c 	bl	810a4fa <__hexdig_fun>
 810a5c2:	2800      	cmp	r0, #0
 810a5c4:	d1f8      	bne.n	810a5b8 <__gethex+0x94>
 810a5c6:	9901      	ldr	r1, [sp, #4]
 810a5c8:	4652      	mov	r2, sl
 810a5ca:	4630      	mov	r0, r6
 810a5cc:	f7fd ff74 	bl	81084b8 <strncmp>
 810a5d0:	b980      	cbnz	r0, 810a5f4 <__gethex+0xd0>
 810a5d2:	b94d      	cbnz	r5, 810a5e8 <__gethex+0xc4>
 810a5d4:	eb06 050a 	add.w	r5, r6, sl
 810a5d8:	462a      	mov	r2, r5
 810a5da:	4616      	mov	r6, r2
 810a5dc:	3201      	adds	r2, #1
 810a5de:	7830      	ldrb	r0, [r6, #0]
 810a5e0:	f7ff ff8b 	bl	810a4fa <__hexdig_fun>
 810a5e4:	2800      	cmp	r0, #0
 810a5e6:	d1f8      	bne.n	810a5da <__gethex+0xb6>
 810a5e8:	1bad      	subs	r5, r5, r6
 810a5ea:	00ad      	lsls	r5, r5, #2
 810a5ec:	e004      	b.n	810a5f8 <__gethex+0xd4>
 810a5ee:	2400      	movs	r4, #0
 810a5f0:	4625      	mov	r5, r4
 810a5f2:	e7e0      	b.n	810a5b6 <__gethex+0x92>
 810a5f4:	2d00      	cmp	r5, #0
 810a5f6:	d1f7      	bne.n	810a5e8 <__gethex+0xc4>
 810a5f8:	7833      	ldrb	r3, [r6, #0]
 810a5fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a5fe:	2b50      	cmp	r3, #80	; 0x50
 810a600:	d13b      	bne.n	810a67a <__gethex+0x156>
 810a602:	7873      	ldrb	r3, [r6, #1]
 810a604:	2b2b      	cmp	r3, #43	; 0x2b
 810a606:	d02c      	beq.n	810a662 <__gethex+0x13e>
 810a608:	2b2d      	cmp	r3, #45	; 0x2d
 810a60a:	d02e      	beq.n	810a66a <__gethex+0x146>
 810a60c:	1c71      	adds	r1, r6, #1
 810a60e:	f04f 0900 	mov.w	r9, #0
 810a612:	7808      	ldrb	r0, [r1, #0]
 810a614:	f7ff ff71 	bl	810a4fa <__hexdig_fun>
 810a618:	1e43      	subs	r3, r0, #1
 810a61a:	b2db      	uxtb	r3, r3
 810a61c:	2b18      	cmp	r3, #24
 810a61e:	d82c      	bhi.n	810a67a <__gethex+0x156>
 810a620:	f1a0 0210 	sub.w	r2, r0, #16
 810a624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a628:	f7ff ff67 	bl	810a4fa <__hexdig_fun>
 810a62c:	1e43      	subs	r3, r0, #1
 810a62e:	b2db      	uxtb	r3, r3
 810a630:	2b18      	cmp	r3, #24
 810a632:	d91d      	bls.n	810a670 <__gethex+0x14c>
 810a634:	f1b9 0f00 	cmp.w	r9, #0
 810a638:	d000      	beq.n	810a63c <__gethex+0x118>
 810a63a:	4252      	negs	r2, r2
 810a63c:	4415      	add	r5, r2
 810a63e:	f8cb 1000 	str.w	r1, [fp]
 810a642:	b1e4      	cbz	r4, 810a67e <__gethex+0x15a>
 810a644:	9b00      	ldr	r3, [sp, #0]
 810a646:	2b00      	cmp	r3, #0
 810a648:	bf14      	ite	ne
 810a64a:	2700      	movne	r7, #0
 810a64c:	2706      	moveq	r7, #6
 810a64e:	4638      	mov	r0, r7
 810a650:	b009      	add	sp, #36	; 0x24
 810a652:	ecbd 8b02 	vpop	{d8}
 810a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a65a:	463e      	mov	r6, r7
 810a65c:	4625      	mov	r5, r4
 810a65e:	2401      	movs	r4, #1
 810a660:	e7ca      	b.n	810a5f8 <__gethex+0xd4>
 810a662:	f04f 0900 	mov.w	r9, #0
 810a666:	1cb1      	adds	r1, r6, #2
 810a668:	e7d3      	b.n	810a612 <__gethex+0xee>
 810a66a:	f04f 0901 	mov.w	r9, #1
 810a66e:	e7fa      	b.n	810a666 <__gethex+0x142>
 810a670:	230a      	movs	r3, #10
 810a672:	fb03 0202 	mla	r2, r3, r2, r0
 810a676:	3a10      	subs	r2, #16
 810a678:	e7d4      	b.n	810a624 <__gethex+0x100>
 810a67a:	4631      	mov	r1, r6
 810a67c:	e7df      	b.n	810a63e <__gethex+0x11a>
 810a67e:	1bf3      	subs	r3, r6, r7
 810a680:	3b01      	subs	r3, #1
 810a682:	4621      	mov	r1, r4
 810a684:	2b07      	cmp	r3, #7
 810a686:	dc0b      	bgt.n	810a6a0 <__gethex+0x17c>
 810a688:	ee18 0a10 	vmov	r0, s16
 810a68c:	f000 faf6 	bl	810ac7c <_Balloc>
 810a690:	4604      	mov	r4, r0
 810a692:	b940      	cbnz	r0, 810a6a6 <__gethex+0x182>
 810a694:	4b65      	ldr	r3, [pc, #404]	; (810a82c <__gethex+0x308>)
 810a696:	4602      	mov	r2, r0
 810a698:	21de      	movs	r1, #222	; 0xde
 810a69a:	4865      	ldr	r0, [pc, #404]	; (810a830 <__gethex+0x30c>)
 810a69c:	f7fc fdd8 	bl	8107250 <__assert_func>
 810a6a0:	3101      	adds	r1, #1
 810a6a2:	105b      	asrs	r3, r3, #1
 810a6a4:	e7ee      	b.n	810a684 <__gethex+0x160>
 810a6a6:	f100 0914 	add.w	r9, r0, #20
 810a6aa:	f04f 0b00 	mov.w	fp, #0
 810a6ae:	f1ca 0301 	rsb	r3, sl, #1
 810a6b2:	f8cd 9008 	str.w	r9, [sp, #8]
 810a6b6:	f8cd b000 	str.w	fp, [sp]
 810a6ba:	9306      	str	r3, [sp, #24]
 810a6bc:	42b7      	cmp	r7, r6
 810a6be:	d340      	bcc.n	810a742 <__gethex+0x21e>
 810a6c0:	9802      	ldr	r0, [sp, #8]
 810a6c2:	9b00      	ldr	r3, [sp, #0]
 810a6c4:	f840 3b04 	str.w	r3, [r0], #4
 810a6c8:	eba0 0009 	sub.w	r0, r0, r9
 810a6cc:	1080      	asrs	r0, r0, #2
 810a6ce:	0146      	lsls	r6, r0, #5
 810a6d0:	6120      	str	r0, [r4, #16]
 810a6d2:	4618      	mov	r0, r3
 810a6d4:	f000 fbc8 	bl	810ae68 <__hi0bits>
 810a6d8:	1a30      	subs	r0, r6, r0
 810a6da:	f8d8 6000 	ldr.w	r6, [r8]
 810a6de:	42b0      	cmp	r0, r6
 810a6e0:	dd63      	ble.n	810a7aa <__gethex+0x286>
 810a6e2:	1b87      	subs	r7, r0, r6
 810a6e4:	4639      	mov	r1, r7
 810a6e6:	4620      	mov	r0, r4
 810a6e8:	f000 ff62 	bl	810b5b0 <__any_on>
 810a6ec:	4682      	mov	sl, r0
 810a6ee:	b1a8      	cbz	r0, 810a71c <__gethex+0x1f8>
 810a6f0:	1e7b      	subs	r3, r7, #1
 810a6f2:	1159      	asrs	r1, r3, #5
 810a6f4:	f003 021f 	and.w	r2, r3, #31
 810a6f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810a6fc:	f04f 0a01 	mov.w	sl, #1
 810a700:	fa0a f202 	lsl.w	r2, sl, r2
 810a704:	420a      	tst	r2, r1
 810a706:	d009      	beq.n	810a71c <__gethex+0x1f8>
 810a708:	4553      	cmp	r3, sl
 810a70a:	dd05      	ble.n	810a718 <__gethex+0x1f4>
 810a70c:	1eb9      	subs	r1, r7, #2
 810a70e:	4620      	mov	r0, r4
 810a710:	f000 ff4e 	bl	810b5b0 <__any_on>
 810a714:	2800      	cmp	r0, #0
 810a716:	d145      	bne.n	810a7a4 <__gethex+0x280>
 810a718:	f04f 0a02 	mov.w	sl, #2
 810a71c:	4639      	mov	r1, r7
 810a71e:	4620      	mov	r0, r4
 810a720:	f7ff fe99 	bl	810a456 <rshift>
 810a724:	443d      	add	r5, r7
 810a726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a72a:	42ab      	cmp	r3, r5
 810a72c:	da4c      	bge.n	810a7c8 <__gethex+0x2a4>
 810a72e:	ee18 0a10 	vmov	r0, s16
 810a732:	4621      	mov	r1, r4
 810a734:	f000 fae2 	bl	810acfc <_Bfree>
 810a738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a73a:	2300      	movs	r3, #0
 810a73c:	6013      	str	r3, [r2, #0]
 810a73e:	27a3      	movs	r7, #163	; 0xa3
 810a740:	e785      	b.n	810a64e <__gethex+0x12a>
 810a742:	1e73      	subs	r3, r6, #1
 810a744:	9a05      	ldr	r2, [sp, #20]
 810a746:	9303      	str	r3, [sp, #12]
 810a748:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810a74c:	4293      	cmp	r3, r2
 810a74e:	d019      	beq.n	810a784 <__gethex+0x260>
 810a750:	f1bb 0f20 	cmp.w	fp, #32
 810a754:	d107      	bne.n	810a766 <__gethex+0x242>
 810a756:	9b02      	ldr	r3, [sp, #8]
 810a758:	9a00      	ldr	r2, [sp, #0]
 810a75a:	f843 2b04 	str.w	r2, [r3], #4
 810a75e:	9302      	str	r3, [sp, #8]
 810a760:	2300      	movs	r3, #0
 810a762:	9300      	str	r3, [sp, #0]
 810a764:	469b      	mov	fp, r3
 810a766:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810a76a:	f7ff fec6 	bl	810a4fa <__hexdig_fun>
 810a76e:	9b00      	ldr	r3, [sp, #0]
 810a770:	f000 000f 	and.w	r0, r0, #15
 810a774:	fa00 f00b 	lsl.w	r0, r0, fp
 810a778:	4303      	orrs	r3, r0
 810a77a:	9300      	str	r3, [sp, #0]
 810a77c:	f10b 0b04 	add.w	fp, fp, #4
 810a780:	9b03      	ldr	r3, [sp, #12]
 810a782:	e00d      	b.n	810a7a0 <__gethex+0x27c>
 810a784:	9b03      	ldr	r3, [sp, #12]
 810a786:	9a06      	ldr	r2, [sp, #24]
 810a788:	4413      	add	r3, r2
 810a78a:	42bb      	cmp	r3, r7
 810a78c:	d3e0      	bcc.n	810a750 <__gethex+0x22c>
 810a78e:	4618      	mov	r0, r3
 810a790:	9901      	ldr	r1, [sp, #4]
 810a792:	9307      	str	r3, [sp, #28]
 810a794:	4652      	mov	r2, sl
 810a796:	f7fd fe8f 	bl	81084b8 <strncmp>
 810a79a:	9b07      	ldr	r3, [sp, #28]
 810a79c:	2800      	cmp	r0, #0
 810a79e:	d1d7      	bne.n	810a750 <__gethex+0x22c>
 810a7a0:	461e      	mov	r6, r3
 810a7a2:	e78b      	b.n	810a6bc <__gethex+0x198>
 810a7a4:	f04f 0a03 	mov.w	sl, #3
 810a7a8:	e7b8      	b.n	810a71c <__gethex+0x1f8>
 810a7aa:	da0a      	bge.n	810a7c2 <__gethex+0x29e>
 810a7ac:	1a37      	subs	r7, r6, r0
 810a7ae:	4621      	mov	r1, r4
 810a7b0:	ee18 0a10 	vmov	r0, s16
 810a7b4:	463a      	mov	r2, r7
 810a7b6:	f000 fcbd 	bl	810b134 <__lshift>
 810a7ba:	1bed      	subs	r5, r5, r7
 810a7bc:	4604      	mov	r4, r0
 810a7be:	f100 0914 	add.w	r9, r0, #20
 810a7c2:	f04f 0a00 	mov.w	sl, #0
 810a7c6:	e7ae      	b.n	810a726 <__gethex+0x202>
 810a7c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810a7cc:	42a8      	cmp	r0, r5
 810a7ce:	dd72      	ble.n	810a8b6 <__gethex+0x392>
 810a7d0:	1b45      	subs	r5, r0, r5
 810a7d2:	42ae      	cmp	r6, r5
 810a7d4:	dc36      	bgt.n	810a844 <__gethex+0x320>
 810a7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a7da:	2b02      	cmp	r3, #2
 810a7dc:	d02a      	beq.n	810a834 <__gethex+0x310>
 810a7de:	2b03      	cmp	r3, #3
 810a7e0:	d02c      	beq.n	810a83c <__gethex+0x318>
 810a7e2:	2b01      	cmp	r3, #1
 810a7e4:	d115      	bne.n	810a812 <__gethex+0x2ee>
 810a7e6:	42ae      	cmp	r6, r5
 810a7e8:	d113      	bne.n	810a812 <__gethex+0x2ee>
 810a7ea:	2e01      	cmp	r6, #1
 810a7ec:	d10b      	bne.n	810a806 <__gethex+0x2e2>
 810a7ee:	9a04      	ldr	r2, [sp, #16]
 810a7f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810a7f4:	6013      	str	r3, [r2, #0]
 810a7f6:	2301      	movs	r3, #1
 810a7f8:	6123      	str	r3, [r4, #16]
 810a7fa:	f8c9 3000 	str.w	r3, [r9]
 810a7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a800:	2762      	movs	r7, #98	; 0x62
 810a802:	601c      	str	r4, [r3, #0]
 810a804:	e723      	b.n	810a64e <__gethex+0x12a>
 810a806:	1e71      	subs	r1, r6, #1
 810a808:	4620      	mov	r0, r4
 810a80a:	f000 fed1 	bl	810b5b0 <__any_on>
 810a80e:	2800      	cmp	r0, #0
 810a810:	d1ed      	bne.n	810a7ee <__gethex+0x2ca>
 810a812:	ee18 0a10 	vmov	r0, s16
 810a816:	4621      	mov	r1, r4
 810a818:	f000 fa70 	bl	810acfc <_Bfree>
 810a81c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a81e:	2300      	movs	r3, #0
 810a820:	6013      	str	r3, [r2, #0]
 810a822:	2750      	movs	r7, #80	; 0x50
 810a824:	e713      	b.n	810a64e <__gethex+0x12a>
 810a826:	bf00      	nop
 810a828:	0810c0e4 	.word	0x0810c0e4
 810a82c:	0810c004 	.word	0x0810c004
 810a830:	0810c078 	.word	0x0810c078
 810a834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a836:	2b00      	cmp	r3, #0
 810a838:	d1eb      	bne.n	810a812 <__gethex+0x2ee>
 810a83a:	e7d8      	b.n	810a7ee <__gethex+0x2ca>
 810a83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d1d5      	bne.n	810a7ee <__gethex+0x2ca>
 810a842:	e7e6      	b.n	810a812 <__gethex+0x2ee>
 810a844:	1e6f      	subs	r7, r5, #1
 810a846:	f1ba 0f00 	cmp.w	sl, #0
 810a84a:	d131      	bne.n	810a8b0 <__gethex+0x38c>
 810a84c:	b127      	cbz	r7, 810a858 <__gethex+0x334>
 810a84e:	4639      	mov	r1, r7
 810a850:	4620      	mov	r0, r4
 810a852:	f000 fead 	bl	810b5b0 <__any_on>
 810a856:	4682      	mov	sl, r0
 810a858:	117b      	asrs	r3, r7, #5
 810a85a:	2101      	movs	r1, #1
 810a85c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810a860:	f007 071f 	and.w	r7, r7, #31
 810a864:	fa01 f707 	lsl.w	r7, r1, r7
 810a868:	421f      	tst	r7, r3
 810a86a:	4629      	mov	r1, r5
 810a86c:	4620      	mov	r0, r4
 810a86e:	bf18      	it	ne
 810a870:	f04a 0a02 	orrne.w	sl, sl, #2
 810a874:	1b76      	subs	r6, r6, r5
 810a876:	f7ff fdee 	bl	810a456 <rshift>
 810a87a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810a87e:	2702      	movs	r7, #2
 810a880:	f1ba 0f00 	cmp.w	sl, #0
 810a884:	d048      	beq.n	810a918 <__gethex+0x3f4>
 810a886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a88a:	2b02      	cmp	r3, #2
 810a88c:	d015      	beq.n	810a8ba <__gethex+0x396>
 810a88e:	2b03      	cmp	r3, #3
 810a890:	d017      	beq.n	810a8c2 <__gethex+0x39e>
 810a892:	2b01      	cmp	r3, #1
 810a894:	d109      	bne.n	810a8aa <__gethex+0x386>
 810a896:	f01a 0f02 	tst.w	sl, #2
 810a89a:	d006      	beq.n	810a8aa <__gethex+0x386>
 810a89c:	f8d9 0000 	ldr.w	r0, [r9]
 810a8a0:	ea4a 0a00 	orr.w	sl, sl, r0
 810a8a4:	f01a 0f01 	tst.w	sl, #1
 810a8a8:	d10e      	bne.n	810a8c8 <__gethex+0x3a4>
 810a8aa:	f047 0710 	orr.w	r7, r7, #16
 810a8ae:	e033      	b.n	810a918 <__gethex+0x3f4>
 810a8b0:	f04f 0a01 	mov.w	sl, #1
 810a8b4:	e7d0      	b.n	810a858 <__gethex+0x334>
 810a8b6:	2701      	movs	r7, #1
 810a8b8:	e7e2      	b.n	810a880 <__gethex+0x35c>
 810a8ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a8bc:	f1c3 0301 	rsb	r3, r3, #1
 810a8c0:	9315      	str	r3, [sp, #84]	; 0x54
 810a8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a8c4:	2b00      	cmp	r3, #0
 810a8c6:	d0f0      	beq.n	810a8aa <__gethex+0x386>
 810a8c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810a8cc:	f104 0314 	add.w	r3, r4, #20
 810a8d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810a8d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810a8d8:	f04f 0c00 	mov.w	ip, #0
 810a8dc:	4618      	mov	r0, r3
 810a8de:	f853 2b04 	ldr.w	r2, [r3], #4
 810a8e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 810a8e6:	d01c      	beq.n	810a922 <__gethex+0x3fe>
 810a8e8:	3201      	adds	r2, #1
 810a8ea:	6002      	str	r2, [r0, #0]
 810a8ec:	2f02      	cmp	r7, #2
 810a8ee:	f104 0314 	add.w	r3, r4, #20
 810a8f2:	d13f      	bne.n	810a974 <__gethex+0x450>
 810a8f4:	f8d8 2000 	ldr.w	r2, [r8]
 810a8f8:	3a01      	subs	r2, #1
 810a8fa:	42b2      	cmp	r2, r6
 810a8fc:	d10a      	bne.n	810a914 <__gethex+0x3f0>
 810a8fe:	1171      	asrs	r1, r6, #5
 810a900:	2201      	movs	r2, #1
 810a902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810a906:	f006 061f 	and.w	r6, r6, #31
 810a90a:	fa02 f606 	lsl.w	r6, r2, r6
 810a90e:	421e      	tst	r6, r3
 810a910:	bf18      	it	ne
 810a912:	4617      	movne	r7, r2
 810a914:	f047 0720 	orr.w	r7, r7, #32
 810a918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a91a:	601c      	str	r4, [r3, #0]
 810a91c:	9b04      	ldr	r3, [sp, #16]
 810a91e:	601d      	str	r5, [r3, #0]
 810a920:	e695      	b.n	810a64e <__gethex+0x12a>
 810a922:	4299      	cmp	r1, r3
 810a924:	f843 cc04 	str.w	ip, [r3, #-4]
 810a928:	d8d8      	bhi.n	810a8dc <__gethex+0x3b8>
 810a92a:	68a3      	ldr	r3, [r4, #8]
 810a92c:	459b      	cmp	fp, r3
 810a92e:	db19      	blt.n	810a964 <__gethex+0x440>
 810a930:	6861      	ldr	r1, [r4, #4]
 810a932:	ee18 0a10 	vmov	r0, s16
 810a936:	3101      	adds	r1, #1
 810a938:	f000 f9a0 	bl	810ac7c <_Balloc>
 810a93c:	4681      	mov	r9, r0
 810a93e:	b918      	cbnz	r0, 810a948 <__gethex+0x424>
 810a940:	4b1a      	ldr	r3, [pc, #104]	; (810a9ac <__gethex+0x488>)
 810a942:	4602      	mov	r2, r0
 810a944:	2184      	movs	r1, #132	; 0x84
 810a946:	e6a8      	b.n	810a69a <__gethex+0x176>
 810a948:	6922      	ldr	r2, [r4, #16]
 810a94a:	3202      	adds	r2, #2
 810a94c:	f104 010c 	add.w	r1, r4, #12
 810a950:	0092      	lsls	r2, r2, #2
 810a952:	300c      	adds	r0, #12
 810a954:	f7fc fce6 	bl	8107324 <memcpy>
 810a958:	4621      	mov	r1, r4
 810a95a:	ee18 0a10 	vmov	r0, s16
 810a95e:	f000 f9cd 	bl	810acfc <_Bfree>
 810a962:	464c      	mov	r4, r9
 810a964:	6923      	ldr	r3, [r4, #16]
 810a966:	1c5a      	adds	r2, r3, #1
 810a968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810a96c:	6122      	str	r2, [r4, #16]
 810a96e:	2201      	movs	r2, #1
 810a970:	615a      	str	r2, [r3, #20]
 810a972:	e7bb      	b.n	810a8ec <__gethex+0x3c8>
 810a974:	6922      	ldr	r2, [r4, #16]
 810a976:	455a      	cmp	r2, fp
 810a978:	dd0b      	ble.n	810a992 <__gethex+0x46e>
 810a97a:	2101      	movs	r1, #1
 810a97c:	4620      	mov	r0, r4
 810a97e:	f7ff fd6a 	bl	810a456 <rshift>
 810a982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a986:	3501      	adds	r5, #1
 810a988:	42ab      	cmp	r3, r5
 810a98a:	f6ff aed0 	blt.w	810a72e <__gethex+0x20a>
 810a98e:	2701      	movs	r7, #1
 810a990:	e7c0      	b.n	810a914 <__gethex+0x3f0>
 810a992:	f016 061f 	ands.w	r6, r6, #31
 810a996:	d0fa      	beq.n	810a98e <__gethex+0x46a>
 810a998:	449a      	add	sl, r3
 810a99a:	f1c6 0620 	rsb	r6, r6, #32
 810a99e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810a9a2:	f000 fa61 	bl	810ae68 <__hi0bits>
 810a9a6:	42b0      	cmp	r0, r6
 810a9a8:	dbe7      	blt.n	810a97a <__gethex+0x456>
 810a9aa:	e7f0      	b.n	810a98e <__gethex+0x46a>
 810a9ac:	0810c004 	.word	0x0810c004

0810a9b0 <L_shift>:
 810a9b0:	f1c2 0208 	rsb	r2, r2, #8
 810a9b4:	0092      	lsls	r2, r2, #2
 810a9b6:	b570      	push	{r4, r5, r6, lr}
 810a9b8:	f1c2 0620 	rsb	r6, r2, #32
 810a9bc:	6843      	ldr	r3, [r0, #4]
 810a9be:	6804      	ldr	r4, [r0, #0]
 810a9c0:	fa03 f506 	lsl.w	r5, r3, r6
 810a9c4:	432c      	orrs	r4, r5
 810a9c6:	40d3      	lsrs	r3, r2
 810a9c8:	6004      	str	r4, [r0, #0]
 810a9ca:	f840 3f04 	str.w	r3, [r0, #4]!
 810a9ce:	4288      	cmp	r0, r1
 810a9d0:	d3f4      	bcc.n	810a9bc <L_shift+0xc>
 810a9d2:	bd70      	pop	{r4, r5, r6, pc}

0810a9d4 <__match>:
 810a9d4:	b530      	push	{r4, r5, lr}
 810a9d6:	6803      	ldr	r3, [r0, #0]
 810a9d8:	3301      	adds	r3, #1
 810a9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a9de:	b914      	cbnz	r4, 810a9e6 <__match+0x12>
 810a9e0:	6003      	str	r3, [r0, #0]
 810a9e2:	2001      	movs	r0, #1
 810a9e4:	bd30      	pop	{r4, r5, pc}
 810a9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a9ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810a9ee:	2d19      	cmp	r5, #25
 810a9f0:	bf98      	it	ls
 810a9f2:	3220      	addls	r2, #32
 810a9f4:	42a2      	cmp	r2, r4
 810a9f6:	d0f0      	beq.n	810a9da <__match+0x6>
 810a9f8:	2000      	movs	r0, #0
 810a9fa:	e7f3      	b.n	810a9e4 <__match+0x10>

0810a9fc <__hexnan>:
 810a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa00:	680b      	ldr	r3, [r1, #0]
 810aa02:	6801      	ldr	r1, [r0, #0]
 810aa04:	115e      	asrs	r6, r3, #5
 810aa06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810aa0a:	f013 031f 	ands.w	r3, r3, #31
 810aa0e:	b087      	sub	sp, #28
 810aa10:	bf18      	it	ne
 810aa12:	3604      	addne	r6, #4
 810aa14:	2500      	movs	r5, #0
 810aa16:	1f37      	subs	r7, r6, #4
 810aa18:	4682      	mov	sl, r0
 810aa1a:	4690      	mov	r8, r2
 810aa1c:	9301      	str	r3, [sp, #4]
 810aa1e:	f846 5c04 	str.w	r5, [r6, #-4]
 810aa22:	46b9      	mov	r9, r7
 810aa24:	463c      	mov	r4, r7
 810aa26:	9502      	str	r5, [sp, #8]
 810aa28:	46ab      	mov	fp, r5
 810aa2a:	784a      	ldrb	r2, [r1, #1]
 810aa2c:	1c4b      	adds	r3, r1, #1
 810aa2e:	9303      	str	r3, [sp, #12]
 810aa30:	b342      	cbz	r2, 810aa84 <__hexnan+0x88>
 810aa32:	4610      	mov	r0, r2
 810aa34:	9105      	str	r1, [sp, #20]
 810aa36:	9204      	str	r2, [sp, #16]
 810aa38:	f7ff fd5f 	bl	810a4fa <__hexdig_fun>
 810aa3c:	2800      	cmp	r0, #0
 810aa3e:	d14f      	bne.n	810aae0 <__hexnan+0xe4>
 810aa40:	9a04      	ldr	r2, [sp, #16]
 810aa42:	9905      	ldr	r1, [sp, #20]
 810aa44:	2a20      	cmp	r2, #32
 810aa46:	d818      	bhi.n	810aa7a <__hexnan+0x7e>
 810aa48:	9b02      	ldr	r3, [sp, #8]
 810aa4a:	459b      	cmp	fp, r3
 810aa4c:	dd13      	ble.n	810aa76 <__hexnan+0x7a>
 810aa4e:	454c      	cmp	r4, r9
 810aa50:	d206      	bcs.n	810aa60 <__hexnan+0x64>
 810aa52:	2d07      	cmp	r5, #7
 810aa54:	dc04      	bgt.n	810aa60 <__hexnan+0x64>
 810aa56:	462a      	mov	r2, r5
 810aa58:	4649      	mov	r1, r9
 810aa5a:	4620      	mov	r0, r4
 810aa5c:	f7ff ffa8 	bl	810a9b0 <L_shift>
 810aa60:	4544      	cmp	r4, r8
 810aa62:	d950      	bls.n	810ab06 <__hexnan+0x10a>
 810aa64:	2300      	movs	r3, #0
 810aa66:	f1a4 0904 	sub.w	r9, r4, #4
 810aa6a:	f844 3c04 	str.w	r3, [r4, #-4]
 810aa6e:	f8cd b008 	str.w	fp, [sp, #8]
 810aa72:	464c      	mov	r4, r9
 810aa74:	461d      	mov	r5, r3
 810aa76:	9903      	ldr	r1, [sp, #12]
 810aa78:	e7d7      	b.n	810aa2a <__hexnan+0x2e>
 810aa7a:	2a29      	cmp	r2, #41	; 0x29
 810aa7c:	d156      	bne.n	810ab2c <__hexnan+0x130>
 810aa7e:	3102      	adds	r1, #2
 810aa80:	f8ca 1000 	str.w	r1, [sl]
 810aa84:	f1bb 0f00 	cmp.w	fp, #0
 810aa88:	d050      	beq.n	810ab2c <__hexnan+0x130>
 810aa8a:	454c      	cmp	r4, r9
 810aa8c:	d206      	bcs.n	810aa9c <__hexnan+0xa0>
 810aa8e:	2d07      	cmp	r5, #7
 810aa90:	dc04      	bgt.n	810aa9c <__hexnan+0xa0>
 810aa92:	462a      	mov	r2, r5
 810aa94:	4649      	mov	r1, r9
 810aa96:	4620      	mov	r0, r4
 810aa98:	f7ff ff8a 	bl	810a9b0 <L_shift>
 810aa9c:	4544      	cmp	r4, r8
 810aa9e:	d934      	bls.n	810ab0a <__hexnan+0x10e>
 810aaa0:	f1a8 0204 	sub.w	r2, r8, #4
 810aaa4:	4623      	mov	r3, r4
 810aaa6:	f853 1b04 	ldr.w	r1, [r3], #4
 810aaaa:	f842 1f04 	str.w	r1, [r2, #4]!
 810aaae:	429f      	cmp	r7, r3
 810aab0:	d2f9      	bcs.n	810aaa6 <__hexnan+0xaa>
 810aab2:	1b3b      	subs	r3, r7, r4
 810aab4:	f023 0303 	bic.w	r3, r3, #3
 810aab8:	3304      	adds	r3, #4
 810aaba:	3401      	adds	r4, #1
 810aabc:	3e03      	subs	r6, #3
 810aabe:	42b4      	cmp	r4, r6
 810aac0:	bf88      	it	hi
 810aac2:	2304      	movhi	r3, #4
 810aac4:	4443      	add	r3, r8
 810aac6:	2200      	movs	r2, #0
 810aac8:	f843 2b04 	str.w	r2, [r3], #4
 810aacc:	429f      	cmp	r7, r3
 810aace:	d2fb      	bcs.n	810aac8 <__hexnan+0xcc>
 810aad0:	683b      	ldr	r3, [r7, #0]
 810aad2:	b91b      	cbnz	r3, 810aadc <__hexnan+0xe0>
 810aad4:	4547      	cmp	r7, r8
 810aad6:	d127      	bne.n	810ab28 <__hexnan+0x12c>
 810aad8:	2301      	movs	r3, #1
 810aada:	603b      	str	r3, [r7, #0]
 810aadc:	2005      	movs	r0, #5
 810aade:	e026      	b.n	810ab2e <__hexnan+0x132>
 810aae0:	3501      	adds	r5, #1
 810aae2:	2d08      	cmp	r5, #8
 810aae4:	f10b 0b01 	add.w	fp, fp, #1
 810aae8:	dd06      	ble.n	810aaf8 <__hexnan+0xfc>
 810aaea:	4544      	cmp	r4, r8
 810aaec:	d9c3      	bls.n	810aa76 <__hexnan+0x7a>
 810aaee:	2300      	movs	r3, #0
 810aaf0:	f844 3c04 	str.w	r3, [r4, #-4]
 810aaf4:	2501      	movs	r5, #1
 810aaf6:	3c04      	subs	r4, #4
 810aaf8:	6822      	ldr	r2, [r4, #0]
 810aafa:	f000 000f 	and.w	r0, r0, #15
 810aafe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810ab02:	6022      	str	r2, [r4, #0]
 810ab04:	e7b7      	b.n	810aa76 <__hexnan+0x7a>
 810ab06:	2508      	movs	r5, #8
 810ab08:	e7b5      	b.n	810aa76 <__hexnan+0x7a>
 810ab0a:	9b01      	ldr	r3, [sp, #4]
 810ab0c:	2b00      	cmp	r3, #0
 810ab0e:	d0df      	beq.n	810aad0 <__hexnan+0xd4>
 810ab10:	f04f 32ff 	mov.w	r2, #4294967295
 810ab14:	f1c3 0320 	rsb	r3, r3, #32
 810ab18:	fa22 f303 	lsr.w	r3, r2, r3
 810ab1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ab20:	401a      	ands	r2, r3
 810ab22:	f846 2c04 	str.w	r2, [r6, #-4]
 810ab26:	e7d3      	b.n	810aad0 <__hexnan+0xd4>
 810ab28:	3f04      	subs	r7, #4
 810ab2a:	e7d1      	b.n	810aad0 <__hexnan+0xd4>
 810ab2c:	2004      	movs	r0, #4
 810ab2e:	b007      	add	sp, #28
 810ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ab34 <_localeconv_r>:
 810ab34:	4800      	ldr	r0, [pc, #0]	; (810ab38 <_localeconv_r+0x4>)
 810ab36:	4770      	bx	lr
 810ab38:	10000210 	.word	0x10000210

0810ab3c <__retarget_lock_init_recursive>:
 810ab3c:	4770      	bx	lr

0810ab3e <__retarget_lock_acquire_recursive>:
 810ab3e:	4770      	bx	lr

0810ab40 <__retarget_lock_release_recursive>:
 810ab40:	4770      	bx	lr

0810ab42 <__swhatbuf_r>:
 810ab42:	b570      	push	{r4, r5, r6, lr}
 810ab44:	460e      	mov	r6, r1
 810ab46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ab4a:	2900      	cmp	r1, #0
 810ab4c:	b096      	sub	sp, #88	; 0x58
 810ab4e:	4614      	mov	r4, r2
 810ab50:	461d      	mov	r5, r3
 810ab52:	da07      	bge.n	810ab64 <__swhatbuf_r+0x22>
 810ab54:	2300      	movs	r3, #0
 810ab56:	602b      	str	r3, [r5, #0]
 810ab58:	89b3      	ldrh	r3, [r6, #12]
 810ab5a:	061a      	lsls	r2, r3, #24
 810ab5c:	d410      	bmi.n	810ab80 <__swhatbuf_r+0x3e>
 810ab5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810ab62:	e00e      	b.n	810ab82 <__swhatbuf_r+0x40>
 810ab64:	466a      	mov	r2, sp
 810ab66:	f000 ff95 	bl	810ba94 <_fstat_r>
 810ab6a:	2800      	cmp	r0, #0
 810ab6c:	dbf2      	blt.n	810ab54 <__swhatbuf_r+0x12>
 810ab6e:	9a01      	ldr	r2, [sp, #4]
 810ab70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810ab74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810ab78:	425a      	negs	r2, r3
 810ab7a:	415a      	adcs	r2, r3
 810ab7c:	602a      	str	r2, [r5, #0]
 810ab7e:	e7ee      	b.n	810ab5e <__swhatbuf_r+0x1c>
 810ab80:	2340      	movs	r3, #64	; 0x40
 810ab82:	2000      	movs	r0, #0
 810ab84:	6023      	str	r3, [r4, #0]
 810ab86:	b016      	add	sp, #88	; 0x58
 810ab88:	bd70      	pop	{r4, r5, r6, pc}
	...

0810ab8c <__smakebuf_r>:
 810ab8c:	898b      	ldrh	r3, [r1, #12]
 810ab8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810ab90:	079d      	lsls	r5, r3, #30
 810ab92:	4606      	mov	r6, r0
 810ab94:	460c      	mov	r4, r1
 810ab96:	d507      	bpl.n	810aba8 <__smakebuf_r+0x1c>
 810ab98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810ab9c:	6023      	str	r3, [r4, #0]
 810ab9e:	6123      	str	r3, [r4, #16]
 810aba0:	2301      	movs	r3, #1
 810aba2:	6163      	str	r3, [r4, #20]
 810aba4:	b002      	add	sp, #8
 810aba6:	bd70      	pop	{r4, r5, r6, pc}
 810aba8:	ab01      	add	r3, sp, #4
 810abaa:	466a      	mov	r2, sp
 810abac:	f7ff ffc9 	bl	810ab42 <__swhatbuf_r>
 810abb0:	9900      	ldr	r1, [sp, #0]
 810abb2:	4605      	mov	r5, r0
 810abb4:	4630      	mov	r0, r6
 810abb6:	f7fc fc1b 	bl	81073f0 <_malloc_r>
 810abba:	b948      	cbnz	r0, 810abd0 <__smakebuf_r+0x44>
 810abbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810abc0:	059a      	lsls	r2, r3, #22
 810abc2:	d4ef      	bmi.n	810aba4 <__smakebuf_r+0x18>
 810abc4:	f023 0303 	bic.w	r3, r3, #3
 810abc8:	f043 0302 	orr.w	r3, r3, #2
 810abcc:	81a3      	strh	r3, [r4, #12]
 810abce:	e7e3      	b.n	810ab98 <__smakebuf_r+0xc>
 810abd0:	4b0d      	ldr	r3, [pc, #52]	; (810ac08 <__smakebuf_r+0x7c>)
 810abd2:	62b3      	str	r3, [r6, #40]	; 0x28
 810abd4:	89a3      	ldrh	r3, [r4, #12]
 810abd6:	6020      	str	r0, [r4, #0]
 810abd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810abdc:	81a3      	strh	r3, [r4, #12]
 810abde:	9b00      	ldr	r3, [sp, #0]
 810abe0:	6163      	str	r3, [r4, #20]
 810abe2:	9b01      	ldr	r3, [sp, #4]
 810abe4:	6120      	str	r0, [r4, #16]
 810abe6:	b15b      	cbz	r3, 810ac00 <__smakebuf_r+0x74>
 810abe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810abec:	4630      	mov	r0, r6
 810abee:	f000 ff63 	bl	810bab8 <_isatty_r>
 810abf2:	b128      	cbz	r0, 810ac00 <__smakebuf_r+0x74>
 810abf4:	89a3      	ldrh	r3, [r4, #12]
 810abf6:	f023 0303 	bic.w	r3, r3, #3
 810abfa:	f043 0301 	orr.w	r3, r3, #1
 810abfe:	81a3      	strh	r3, [r4, #12]
 810ac00:	89a0      	ldrh	r0, [r4, #12]
 810ac02:	4305      	orrs	r5, r0
 810ac04:	81a5      	strh	r5, [r4, #12]
 810ac06:	e7cd      	b.n	810aba4 <__smakebuf_r+0x18>
 810ac08:	0810a2b5 	.word	0x0810a2b5

0810ac0c <__ascii_mbtowc>:
 810ac0c:	b082      	sub	sp, #8
 810ac0e:	b901      	cbnz	r1, 810ac12 <__ascii_mbtowc+0x6>
 810ac10:	a901      	add	r1, sp, #4
 810ac12:	b142      	cbz	r2, 810ac26 <__ascii_mbtowc+0x1a>
 810ac14:	b14b      	cbz	r3, 810ac2a <__ascii_mbtowc+0x1e>
 810ac16:	7813      	ldrb	r3, [r2, #0]
 810ac18:	600b      	str	r3, [r1, #0]
 810ac1a:	7812      	ldrb	r2, [r2, #0]
 810ac1c:	1e10      	subs	r0, r2, #0
 810ac1e:	bf18      	it	ne
 810ac20:	2001      	movne	r0, #1
 810ac22:	b002      	add	sp, #8
 810ac24:	4770      	bx	lr
 810ac26:	4610      	mov	r0, r2
 810ac28:	e7fb      	b.n	810ac22 <__ascii_mbtowc+0x16>
 810ac2a:	f06f 0001 	mvn.w	r0, #1
 810ac2e:	e7f8      	b.n	810ac22 <__ascii_mbtowc+0x16>

0810ac30 <memmove>:
 810ac30:	4288      	cmp	r0, r1
 810ac32:	b510      	push	{r4, lr}
 810ac34:	eb01 0402 	add.w	r4, r1, r2
 810ac38:	d902      	bls.n	810ac40 <memmove+0x10>
 810ac3a:	4284      	cmp	r4, r0
 810ac3c:	4623      	mov	r3, r4
 810ac3e:	d807      	bhi.n	810ac50 <memmove+0x20>
 810ac40:	1e43      	subs	r3, r0, #1
 810ac42:	42a1      	cmp	r1, r4
 810ac44:	d008      	beq.n	810ac58 <memmove+0x28>
 810ac46:	f811 2b01 	ldrb.w	r2, [r1], #1
 810ac4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810ac4e:	e7f8      	b.n	810ac42 <memmove+0x12>
 810ac50:	4402      	add	r2, r0
 810ac52:	4601      	mov	r1, r0
 810ac54:	428a      	cmp	r2, r1
 810ac56:	d100      	bne.n	810ac5a <memmove+0x2a>
 810ac58:	bd10      	pop	{r4, pc}
 810ac5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810ac5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810ac62:	e7f7      	b.n	810ac54 <memmove+0x24>

0810ac64 <__malloc_lock>:
 810ac64:	4801      	ldr	r0, [pc, #4]	; (810ac6c <__malloc_lock+0x8>)
 810ac66:	f7ff bf6a 	b.w	810ab3e <__retarget_lock_acquire_recursive>
 810ac6a:	bf00      	nop
 810ac6c:	10000520 	.word	0x10000520

0810ac70 <__malloc_unlock>:
 810ac70:	4801      	ldr	r0, [pc, #4]	; (810ac78 <__malloc_unlock+0x8>)
 810ac72:	f7ff bf65 	b.w	810ab40 <__retarget_lock_release_recursive>
 810ac76:	bf00      	nop
 810ac78:	10000520 	.word	0x10000520

0810ac7c <_Balloc>:
 810ac7c:	b570      	push	{r4, r5, r6, lr}
 810ac7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ac80:	4604      	mov	r4, r0
 810ac82:	460d      	mov	r5, r1
 810ac84:	b976      	cbnz	r6, 810aca4 <_Balloc+0x28>
 810ac86:	2010      	movs	r0, #16
 810ac88:	f7fc fb3c 	bl	8107304 <malloc>
 810ac8c:	4602      	mov	r2, r0
 810ac8e:	6260      	str	r0, [r4, #36]	; 0x24
 810ac90:	b920      	cbnz	r0, 810ac9c <_Balloc+0x20>
 810ac92:	4b18      	ldr	r3, [pc, #96]	; (810acf4 <_Balloc+0x78>)
 810ac94:	4818      	ldr	r0, [pc, #96]	; (810acf8 <_Balloc+0x7c>)
 810ac96:	2166      	movs	r1, #102	; 0x66
 810ac98:	f7fc fada 	bl	8107250 <__assert_func>
 810ac9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810aca0:	6006      	str	r6, [r0, #0]
 810aca2:	60c6      	str	r6, [r0, #12]
 810aca4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810aca6:	68f3      	ldr	r3, [r6, #12]
 810aca8:	b183      	cbz	r3, 810accc <_Balloc+0x50>
 810acaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810acac:	68db      	ldr	r3, [r3, #12]
 810acae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810acb2:	b9b8      	cbnz	r0, 810ace4 <_Balloc+0x68>
 810acb4:	2101      	movs	r1, #1
 810acb6:	fa01 f605 	lsl.w	r6, r1, r5
 810acba:	1d72      	adds	r2, r6, #5
 810acbc:	0092      	lsls	r2, r2, #2
 810acbe:	4620      	mov	r0, r4
 810acc0:	f000 fc97 	bl	810b5f2 <_calloc_r>
 810acc4:	b160      	cbz	r0, 810ace0 <_Balloc+0x64>
 810acc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810acca:	e00e      	b.n	810acea <_Balloc+0x6e>
 810accc:	2221      	movs	r2, #33	; 0x21
 810acce:	2104      	movs	r1, #4
 810acd0:	4620      	mov	r0, r4
 810acd2:	f000 fc8e 	bl	810b5f2 <_calloc_r>
 810acd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810acd8:	60f0      	str	r0, [r6, #12]
 810acda:	68db      	ldr	r3, [r3, #12]
 810acdc:	2b00      	cmp	r3, #0
 810acde:	d1e4      	bne.n	810acaa <_Balloc+0x2e>
 810ace0:	2000      	movs	r0, #0
 810ace2:	bd70      	pop	{r4, r5, r6, pc}
 810ace4:	6802      	ldr	r2, [r0, #0]
 810ace6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810acea:	2300      	movs	r3, #0
 810acec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810acf0:	e7f7      	b.n	810ace2 <_Balloc+0x66>
 810acf2:	bf00      	nop
 810acf4:	0810bf8e 	.word	0x0810bf8e
 810acf8:	0810c0f8 	.word	0x0810c0f8

0810acfc <_Bfree>:
 810acfc:	b570      	push	{r4, r5, r6, lr}
 810acfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ad00:	4605      	mov	r5, r0
 810ad02:	460c      	mov	r4, r1
 810ad04:	b976      	cbnz	r6, 810ad24 <_Bfree+0x28>
 810ad06:	2010      	movs	r0, #16
 810ad08:	f7fc fafc 	bl	8107304 <malloc>
 810ad0c:	4602      	mov	r2, r0
 810ad0e:	6268      	str	r0, [r5, #36]	; 0x24
 810ad10:	b920      	cbnz	r0, 810ad1c <_Bfree+0x20>
 810ad12:	4b09      	ldr	r3, [pc, #36]	; (810ad38 <_Bfree+0x3c>)
 810ad14:	4809      	ldr	r0, [pc, #36]	; (810ad3c <_Bfree+0x40>)
 810ad16:	218a      	movs	r1, #138	; 0x8a
 810ad18:	f7fc fa9a 	bl	8107250 <__assert_func>
 810ad1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ad20:	6006      	str	r6, [r0, #0]
 810ad22:	60c6      	str	r6, [r0, #12]
 810ad24:	b13c      	cbz	r4, 810ad36 <_Bfree+0x3a>
 810ad26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810ad28:	6862      	ldr	r2, [r4, #4]
 810ad2a:	68db      	ldr	r3, [r3, #12]
 810ad2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810ad30:	6021      	str	r1, [r4, #0]
 810ad32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810ad36:	bd70      	pop	{r4, r5, r6, pc}
 810ad38:	0810bf8e 	.word	0x0810bf8e
 810ad3c:	0810c0f8 	.word	0x0810c0f8

0810ad40 <__multadd>:
 810ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad44:	690e      	ldr	r6, [r1, #16]
 810ad46:	4607      	mov	r7, r0
 810ad48:	4698      	mov	r8, r3
 810ad4a:	460c      	mov	r4, r1
 810ad4c:	f101 0014 	add.w	r0, r1, #20
 810ad50:	2300      	movs	r3, #0
 810ad52:	6805      	ldr	r5, [r0, #0]
 810ad54:	b2a9      	uxth	r1, r5
 810ad56:	fb02 8101 	mla	r1, r2, r1, r8
 810ad5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810ad5e:	0c2d      	lsrs	r5, r5, #16
 810ad60:	fb02 c505 	mla	r5, r2, r5, ip
 810ad64:	b289      	uxth	r1, r1
 810ad66:	3301      	adds	r3, #1
 810ad68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810ad6c:	429e      	cmp	r6, r3
 810ad6e:	f840 1b04 	str.w	r1, [r0], #4
 810ad72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810ad76:	dcec      	bgt.n	810ad52 <__multadd+0x12>
 810ad78:	f1b8 0f00 	cmp.w	r8, #0
 810ad7c:	d022      	beq.n	810adc4 <__multadd+0x84>
 810ad7e:	68a3      	ldr	r3, [r4, #8]
 810ad80:	42b3      	cmp	r3, r6
 810ad82:	dc19      	bgt.n	810adb8 <__multadd+0x78>
 810ad84:	6861      	ldr	r1, [r4, #4]
 810ad86:	4638      	mov	r0, r7
 810ad88:	3101      	adds	r1, #1
 810ad8a:	f7ff ff77 	bl	810ac7c <_Balloc>
 810ad8e:	4605      	mov	r5, r0
 810ad90:	b928      	cbnz	r0, 810ad9e <__multadd+0x5e>
 810ad92:	4602      	mov	r2, r0
 810ad94:	4b0d      	ldr	r3, [pc, #52]	; (810adcc <__multadd+0x8c>)
 810ad96:	480e      	ldr	r0, [pc, #56]	; (810add0 <__multadd+0x90>)
 810ad98:	21b5      	movs	r1, #181	; 0xb5
 810ad9a:	f7fc fa59 	bl	8107250 <__assert_func>
 810ad9e:	6922      	ldr	r2, [r4, #16]
 810ada0:	3202      	adds	r2, #2
 810ada2:	f104 010c 	add.w	r1, r4, #12
 810ada6:	0092      	lsls	r2, r2, #2
 810ada8:	300c      	adds	r0, #12
 810adaa:	f7fc fabb 	bl	8107324 <memcpy>
 810adae:	4621      	mov	r1, r4
 810adb0:	4638      	mov	r0, r7
 810adb2:	f7ff ffa3 	bl	810acfc <_Bfree>
 810adb6:	462c      	mov	r4, r5
 810adb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810adbc:	3601      	adds	r6, #1
 810adbe:	f8c3 8014 	str.w	r8, [r3, #20]
 810adc2:	6126      	str	r6, [r4, #16]
 810adc4:	4620      	mov	r0, r4
 810adc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810adca:	bf00      	nop
 810adcc:	0810c004 	.word	0x0810c004
 810add0:	0810c0f8 	.word	0x0810c0f8

0810add4 <__s2b>:
 810add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810add8:	460c      	mov	r4, r1
 810adda:	4615      	mov	r5, r2
 810addc:	461f      	mov	r7, r3
 810adde:	2209      	movs	r2, #9
 810ade0:	3308      	adds	r3, #8
 810ade2:	4606      	mov	r6, r0
 810ade4:	fb93 f3f2 	sdiv	r3, r3, r2
 810ade8:	2100      	movs	r1, #0
 810adea:	2201      	movs	r2, #1
 810adec:	429a      	cmp	r2, r3
 810adee:	db09      	blt.n	810ae04 <__s2b+0x30>
 810adf0:	4630      	mov	r0, r6
 810adf2:	f7ff ff43 	bl	810ac7c <_Balloc>
 810adf6:	b940      	cbnz	r0, 810ae0a <__s2b+0x36>
 810adf8:	4602      	mov	r2, r0
 810adfa:	4b19      	ldr	r3, [pc, #100]	; (810ae60 <__s2b+0x8c>)
 810adfc:	4819      	ldr	r0, [pc, #100]	; (810ae64 <__s2b+0x90>)
 810adfe:	21ce      	movs	r1, #206	; 0xce
 810ae00:	f7fc fa26 	bl	8107250 <__assert_func>
 810ae04:	0052      	lsls	r2, r2, #1
 810ae06:	3101      	adds	r1, #1
 810ae08:	e7f0      	b.n	810adec <__s2b+0x18>
 810ae0a:	9b08      	ldr	r3, [sp, #32]
 810ae0c:	6143      	str	r3, [r0, #20]
 810ae0e:	2d09      	cmp	r5, #9
 810ae10:	f04f 0301 	mov.w	r3, #1
 810ae14:	6103      	str	r3, [r0, #16]
 810ae16:	dd16      	ble.n	810ae46 <__s2b+0x72>
 810ae18:	f104 0909 	add.w	r9, r4, #9
 810ae1c:	46c8      	mov	r8, r9
 810ae1e:	442c      	add	r4, r5
 810ae20:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ae24:	4601      	mov	r1, r0
 810ae26:	3b30      	subs	r3, #48	; 0x30
 810ae28:	220a      	movs	r2, #10
 810ae2a:	4630      	mov	r0, r6
 810ae2c:	f7ff ff88 	bl	810ad40 <__multadd>
 810ae30:	45a0      	cmp	r8, r4
 810ae32:	d1f5      	bne.n	810ae20 <__s2b+0x4c>
 810ae34:	f1a5 0408 	sub.w	r4, r5, #8
 810ae38:	444c      	add	r4, r9
 810ae3a:	1b2d      	subs	r5, r5, r4
 810ae3c:	1963      	adds	r3, r4, r5
 810ae3e:	42bb      	cmp	r3, r7
 810ae40:	db04      	blt.n	810ae4c <__s2b+0x78>
 810ae42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ae46:	340a      	adds	r4, #10
 810ae48:	2509      	movs	r5, #9
 810ae4a:	e7f6      	b.n	810ae3a <__s2b+0x66>
 810ae4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810ae50:	4601      	mov	r1, r0
 810ae52:	3b30      	subs	r3, #48	; 0x30
 810ae54:	220a      	movs	r2, #10
 810ae56:	4630      	mov	r0, r6
 810ae58:	f7ff ff72 	bl	810ad40 <__multadd>
 810ae5c:	e7ee      	b.n	810ae3c <__s2b+0x68>
 810ae5e:	bf00      	nop
 810ae60:	0810c004 	.word	0x0810c004
 810ae64:	0810c0f8 	.word	0x0810c0f8

0810ae68 <__hi0bits>:
 810ae68:	0c03      	lsrs	r3, r0, #16
 810ae6a:	041b      	lsls	r3, r3, #16
 810ae6c:	b9d3      	cbnz	r3, 810aea4 <__hi0bits+0x3c>
 810ae6e:	0400      	lsls	r0, r0, #16
 810ae70:	2310      	movs	r3, #16
 810ae72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810ae76:	bf04      	itt	eq
 810ae78:	0200      	lsleq	r0, r0, #8
 810ae7a:	3308      	addeq	r3, #8
 810ae7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810ae80:	bf04      	itt	eq
 810ae82:	0100      	lsleq	r0, r0, #4
 810ae84:	3304      	addeq	r3, #4
 810ae86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ae8a:	bf04      	itt	eq
 810ae8c:	0080      	lsleq	r0, r0, #2
 810ae8e:	3302      	addeq	r3, #2
 810ae90:	2800      	cmp	r0, #0
 810ae92:	db05      	blt.n	810aea0 <__hi0bits+0x38>
 810ae94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810ae98:	f103 0301 	add.w	r3, r3, #1
 810ae9c:	bf08      	it	eq
 810ae9e:	2320      	moveq	r3, #32
 810aea0:	4618      	mov	r0, r3
 810aea2:	4770      	bx	lr
 810aea4:	2300      	movs	r3, #0
 810aea6:	e7e4      	b.n	810ae72 <__hi0bits+0xa>

0810aea8 <__lo0bits>:
 810aea8:	6803      	ldr	r3, [r0, #0]
 810aeaa:	f013 0207 	ands.w	r2, r3, #7
 810aeae:	4601      	mov	r1, r0
 810aeb0:	d00b      	beq.n	810aeca <__lo0bits+0x22>
 810aeb2:	07da      	lsls	r2, r3, #31
 810aeb4:	d424      	bmi.n	810af00 <__lo0bits+0x58>
 810aeb6:	0798      	lsls	r0, r3, #30
 810aeb8:	bf49      	itett	mi
 810aeba:	085b      	lsrmi	r3, r3, #1
 810aebc:	089b      	lsrpl	r3, r3, #2
 810aebe:	2001      	movmi	r0, #1
 810aec0:	600b      	strmi	r3, [r1, #0]
 810aec2:	bf5c      	itt	pl
 810aec4:	600b      	strpl	r3, [r1, #0]
 810aec6:	2002      	movpl	r0, #2
 810aec8:	4770      	bx	lr
 810aeca:	b298      	uxth	r0, r3
 810aecc:	b9b0      	cbnz	r0, 810aefc <__lo0bits+0x54>
 810aece:	0c1b      	lsrs	r3, r3, #16
 810aed0:	2010      	movs	r0, #16
 810aed2:	f013 0fff 	tst.w	r3, #255	; 0xff
 810aed6:	bf04      	itt	eq
 810aed8:	0a1b      	lsreq	r3, r3, #8
 810aeda:	3008      	addeq	r0, #8
 810aedc:	071a      	lsls	r2, r3, #28
 810aede:	bf04      	itt	eq
 810aee0:	091b      	lsreq	r3, r3, #4
 810aee2:	3004      	addeq	r0, #4
 810aee4:	079a      	lsls	r2, r3, #30
 810aee6:	bf04      	itt	eq
 810aee8:	089b      	lsreq	r3, r3, #2
 810aeea:	3002      	addeq	r0, #2
 810aeec:	07da      	lsls	r2, r3, #31
 810aeee:	d403      	bmi.n	810aef8 <__lo0bits+0x50>
 810aef0:	085b      	lsrs	r3, r3, #1
 810aef2:	f100 0001 	add.w	r0, r0, #1
 810aef6:	d005      	beq.n	810af04 <__lo0bits+0x5c>
 810aef8:	600b      	str	r3, [r1, #0]
 810aefa:	4770      	bx	lr
 810aefc:	4610      	mov	r0, r2
 810aefe:	e7e8      	b.n	810aed2 <__lo0bits+0x2a>
 810af00:	2000      	movs	r0, #0
 810af02:	4770      	bx	lr
 810af04:	2020      	movs	r0, #32
 810af06:	4770      	bx	lr

0810af08 <__i2b>:
 810af08:	b510      	push	{r4, lr}
 810af0a:	460c      	mov	r4, r1
 810af0c:	2101      	movs	r1, #1
 810af0e:	f7ff feb5 	bl	810ac7c <_Balloc>
 810af12:	4602      	mov	r2, r0
 810af14:	b928      	cbnz	r0, 810af22 <__i2b+0x1a>
 810af16:	4b05      	ldr	r3, [pc, #20]	; (810af2c <__i2b+0x24>)
 810af18:	4805      	ldr	r0, [pc, #20]	; (810af30 <__i2b+0x28>)
 810af1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810af1e:	f7fc f997 	bl	8107250 <__assert_func>
 810af22:	2301      	movs	r3, #1
 810af24:	6144      	str	r4, [r0, #20]
 810af26:	6103      	str	r3, [r0, #16]
 810af28:	bd10      	pop	{r4, pc}
 810af2a:	bf00      	nop
 810af2c:	0810c004 	.word	0x0810c004
 810af30:	0810c0f8 	.word	0x0810c0f8

0810af34 <__multiply>:
 810af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810af38:	4614      	mov	r4, r2
 810af3a:	690a      	ldr	r2, [r1, #16]
 810af3c:	6923      	ldr	r3, [r4, #16]
 810af3e:	429a      	cmp	r2, r3
 810af40:	bfb8      	it	lt
 810af42:	460b      	movlt	r3, r1
 810af44:	460d      	mov	r5, r1
 810af46:	bfbc      	itt	lt
 810af48:	4625      	movlt	r5, r4
 810af4a:	461c      	movlt	r4, r3
 810af4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810af50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810af54:	68ab      	ldr	r3, [r5, #8]
 810af56:	6869      	ldr	r1, [r5, #4]
 810af58:	eb0a 0709 	add.w	r7, sl, r9
 810af5c:	42bb      	cmp	r3, r7
 810af5e:	b085      	sub	sp, #20
 810af60:	bfb8      	it	lt
 810af62:	3101      	addlt	r1, #1
 810af64:	f7ff fe8a 	bl	810ac7c <_Balloc>
 810af68:	b930      	cbnz	r0, 810af78 <__multiply+0x44>
 810af6a:	4602      	mov	r2, r0
 810af6c:	4b42      	ldr	r3, [pc, #264]	; (810b078 <__multiply+0x144>)
 810af6e:	4843      	ldr	r0, [pc, #268]	; (810b07c <__multiply+0x148>)
 810af70:	f240 115d 	movw	r1, #349	; 0x15d
 810af74:	f7fc f96c 	bl	8107250 <__assert_func>
 810af78:	f100 0614 	add.w	r6, r0, #20
 810af7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810af80:	4633      	mov	r3, r6
 810af82:	2200      	movs	r2, #0
 810af84:	4543      	cmp	r3, r8
 810af86:	d31e      	bcc.n	810afc6 <__multiply+0x92>
 810af88:	f105 0c14 	add.w	ip, r5, #20
 810af8c:	f104 0314 	add.w	r3, r4, #20
 810af90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810af94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810af98:	9202      	str	r2, [sp, #8]
 810af9a:	ebac 0205 	sub.w	r2, ip, r5
 810af9e:	3a15      	subs	r2, #21
 810afa0:	f022 0203 	bic.w	r2, r2, #3
 810afa4:	3204      	adds	r2, #4
 810afa6:	f105 0115 	add.w	r1, r5, #21
 810afaa:	458c      	cmp	ip, r1
 810afac:	bf38      	it	cc
 810afae:	2204      	movcc	r2, #4
 810afb0:	9201      	str	r2, [sp, #4]
 810afb2:	9a02      	ldr	r2, [sp, #8]
 810afb4:	9303      	str	r3, [sp, #12]
 810afb6:	429a      	cmp	r2, r3
 810afb8:	d808      	bhi.n	810afcc <__multiply+0x98>
 810afba:	2f00      	cmp	r7, #0
 810afbc:	dc55      	bgt.n	810b06a <__multiply+0x136>
 810afbe:	6107      	str	r7, [r0, #16]
 810afc0:	b005      	add	sp, #20
 810afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810afc6:	f843 2b04 	str.w	r2, [r3], #4
 810afca:	e7db      	b.n	810af84 <__multiply+0x50>
 810afcc:	f8b3 a000 	ldrh.w	sl, [r3]
 810afd0:	f1ba 0f00 	cmp.w	sl, #0
 810afd4:	d020      	beq.n	810b018 <__multiply+0xe4>
 810afd6:	f105 0e14 	add.w	lr, r5, #20
 810afda:	46b1      	mov	r9, r6
 810afdc:	2200      	movs	r2, #0
 810afde:	f85e 4b04 	ldr.w	r4, [lr], #4
 810afe2:	f8d9 b000 	ldr.w	fp, [r9]
 810afe6:	b2a1      	uxth	r1, r4
 810afe8:	fa1f fb8b 	uxth.w	fp, fp
 810afec:	fb0a b101 	mla	r1, sl, r1, fp
 810aff0:	4411      	add	r1, r2
 810aff2:	f8d9 2000 	ldr.w	r2, [r9]
 810aff6:	0c24      	lsrs	r4, r4, #16
 810aff8:	0c12      	lsrs	r2, r2, #16
 810affa:	fb0a 2404 	mla	r4, sl, r4, r2
 810affe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810b002:	b289      	uxth	r1, r1
 810b004:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810b008:	45f4      	cmp	ip, lr
 810b00a:	f849 1b04 	str.w	r1, [r9], #4
 810b00e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810b012:	d8e4      	bhi.n	810afde <__multiply+0xaa>
 810b014:	9901      	ldr	r1, [sp, #4]
 810b016:	5072      	str	r2, [r6, r1]
 810b018:	9a03      	ldr	r2, [sp, #12]
 810b01a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b01e:	3304      	adds	r3, #4
 810b020:	f1b9 0f00 	cmp.w	r9, #0
 810b024:	d01f      	beq.n	810b066 <__multiply+0x132>
 810b026:	6834      	ldr	r4, [r6, #0]
 810b028:	f105 0114 	add.w	r1, r5, #20
 810b02c:	46b6      	mov	lr, r6
 810b02e:	f04f 0a00 	mov.w	sl, #0
 810b032:	880a      	ldrh	r2, [r1, #0]
 810b034:	f8be b002 	ldrh.w	fp, [lr, #2]
 810b038:	fb09 b202 	mla	r2, r9, r2, fp
 810b03c:	4492      	add	sl, r2
 810b03e:	b2a4      	uxth	r4, r4
 810b040:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810b044:	f84e 4b04 	str.w	r4, [lr], #4
 810b048:	f851 4b04 	ldr.w	r4, [r1], #4
 810b04c:	f8be 2000 	ldrh.w	r2, [lr]
 810b050:	0c24      	lsrs	r4, r4, #16
 810b052:	fb09 2404 	mla	r4, r9, r4, r2
 810b056:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810b05a:	458c      	cmp	ip, r1
 810b05c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810b060:	d8e7      	bhi.n	810b032 <__multiply+0xfe>
 810b062:	9a01      	ldr	r2, [sp, #4]
 810b064:	50b4      	str	r4, [r6, r2]
 810b066:	3604      	adds	r6, #4
 810b068:	e7a3      	b.n	810afb2 <__multiply+0x7e>
 810b06a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b06e:	2b00      	cmp	r3, #0
 810b070:	d1a5      	bne.n	810afbe <__multiply+0x8a>
 810b072:	3f01      	subs	r7, #1
 810b074:	e7a1      	b.n	810afba <__multiply+0x86>
 810b076:	bf00      	nop
 810b078:	0810c004 	.word	0x0810c004
 810b07c:	0810c0f8 	.word	0x0810c0f8

0810b080 <__pow5mult>:
 810b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b084:	4615      	mov	r5, r2
 810b086:	f012 0203 	ands.w	r2, r2, #3
 810b08a:	4606      	mov	r6, r0
 810b08c:	460f      	mov	r7, r1
 810b08e:	d007      	beq.n	810b0a0 <__pow5mult+0x20>
 810b090:	4c25      	ldr	r4, [pc, #148]	; (810b128 <__pow5mult+0xa8>)
 810b092:	3a01      	subs	r2, #1
 810b094:	2300      	movs	r3, #0
 810b096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b09a:	f7ff fe51 	bl	810ad40 <__multadd>
 810b09e:	4607      	mov	r7, r0
 810b0a0:	10ad      	asrs	r5, r5, #2
 810b0a2:	d03d      	beq.n	810b120 <__pow5mult+0xa0>
 810b0a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b0a6:	b97c      	cbnz	r4, 810b0c8 <__pow5mult+0x48>
 810b0a8:	2010      	movs	r0, #16
 810b0aa:	f7fc f92b 	bl	8107304 <malloc>
 810b0ae:	4602      	mov	r2, r0
 810b0b0:	6270      	str	r0, [r6, #36]	; 0x24
 810b0b2:	b928      	cbnz	r0, 810b0c0 <__pow5mult+0x40>
 810b0b4:	4b1d      	ldr	r3, [pc, #116]	; (810b12c <__pow5mult+0xac>)
 810b0b6:	481e      	ldr	r0, [pc, #120]	; (810b130 <__pow5mult+0xb0>)
 810b0b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b0bc:	f7fc f8c8 	bl	8107250 <__assert_func>
 810b0c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b0c4:	6004      	str	r4, [r0, #0]
 810b0c6:	60c4      	str	r4, [r0, #12]
 810b0c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b0cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b0d0:	b94c      	cbnz	r4, 810b0e6 <__pow5mult+0x66>
 810b0d2:	f240 2171 	movw	r1, #625	; 0x271
 810b0d6:	4630      	mov	r0, r6
 810b0d8:	f7ff ff16 	bl	810af08 <__i2b>
 810b0dc:	2300      	movs	r3, #0
 810b0de:	f8c8 0008 	str.w	r0, [r8, #8]
 810b0e2:	4604      	mov	r4, r0
 810b0e4:	6003      	str	r3, [r0, #0]
 810b0e6:	f04f 0900 	mov.w	r9, #0
 810b0ea:	07eb      	lsls	r3, r5, #31
 810b0ec:	d50a      	bpl.n	810b104 <__pow5mult+0x84>
 810b0ee:	4639      	mov	r1, r7
 810b0f0:	4622      	mov	r2, r4
 810b0f2:	4630      	mov	r0, r6
 810b0f4:	f7ff ff1e 	bl	810af34 <__multiply>
 810b0f8:	4639      	mov	r1, r7
 810b0fa:	4680      	mov	r8, r0
 810b0fc:	4630      	mov	r0, r6
 810b0fe:	f7ff fdfd 	bl	810acfc <_Bfree>
 810b102:	4647      	mov	r7, r8
 810b104:	106d      	asrs	r5, r5, #1
 810b106:	d00b      	beq.n	810b120 <__pow5mult+0xa0>
 810b108:	6820      	ldr	r0, [r4, #0]
 810b10a:	b938      	cbnz	r0, 810b11c <__pow5mult+0x9c>
 810b10c:	4622      	mov	r2, r4
 810b10e:	4621      	mov	r1, r4
 810b110:	4630      	mov	r0, r6
 810b112:	f7ff ff0f 	bl	810af34 <__multiply>
 810b116:	6020      	str	r0, [r4, #0]
 810b118:	f8c0 9000 	str.w	r9, [r0]
 810b11c:	4604      	mov	r4, r0
 810b11e:	e7e4      	b.n	810b0ea <__pow5mult+0x6a>
 810b120:	4638      	mov	r0, r7
 810b122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b126:	bf00      	nop
 810b128:	0810c248 	.word	0x0810c248
 810b12c:	0810bf8e 	.word	0x0810bf8e
 810b130:	0810c0f8 	.word	0x0810c0f8

0810b134 <__lshift>:
 810b134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b138:	460c      	mov	r4, r1
 810b13a:	6849      	ldr	r1, [r1, #4]
 810b13c:	6923      	ldr	r3, [r4, #16]
 810b13e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b142:	68a3      	ldr	r3, [r4, #8]
 810b144:	4607      	mov	r7, r0
 810b146:	4691      	mov	r9, r2
 810b148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b14c:	f108 0601 	add.w	r6, r8, #1
 810b150:	42b3      	cmp	r3, r6
 810b152:	db0b      	blt.n	810b16c <__lshift+0x38>
 810b154:	4638      	mov	r0, r7
 810b156:	f7ff fd91 	bl	810ac7c <_Balloc>
 810b15a:	4605      	mov	r5, r0
 810b15c:	b948      	cbnz	r0, 810b172 <__lshift+0x3e>
 810b15e:	4602      	mov	r2, r0
 810b160:	4b28      	ldr	r3, [pc, #160]	; (810b204 <__lshift+0xd0>)
 810b162:	4829      	ldr	r0, [pc, #164]	; (810b208 <__lshift+0xd4>)
 810b164:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b168:	f7fc f872 	bl	8107250 <__assert_func>
 810b16c:	3101      	adds	r1, #1
 810b16e:	005b      	lsls	r3, r3, #1
 810b170:	e7ee      	b.n	810b150 <__lshift+0x1c>
 810b172:	2300      	movs	r3, #0
 810b174:	f100 0114 	add.w	r1, r0, #20
 810b178:	f100 0210 	add.w	r2, r0, #16
 810b17c:	4618      	mov	r0, r3
 810b17e:	4553      	cmp	r3, sl
 810b180:	db33      	blt.n	810b1ea <__lshift+0xb6>
 810b182:	6920      	ldr	r0, [r4, #16]
 810b184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b188:	f104 0314 	add.w	r3, r4, #20
 810b18c:	f019 091f 	ands.w	r9, r9, #31
 810b190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810b198:	d02b      	beq.n	810b1f2 <__lshift+0xbe>
 810b19a:	f1c9 0e20 	rsb	lr, r9, #32
 810b19e:	468a      	mov	sl, r1
 810b1a0:	2200      	movs	r2, #0
 810b1a2:	6818      	ldr	r0, [r3, #0]
 810b1a4:	fa00 f009 	lsl.w	r0, r0, r9
 810b1a8:	4302      	orrs	r2, r0
 810b1aa:	f84a 2b04 	str.w	r2, [sl], #4
 810b1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 810b1b2:	459c      	cmp	ip, r3
 810b1b4:	fa22 f20e 	lsr.w	r2, r2, lr
 810b1b8:	d8f3      	bhi.n	810b1a2 <__lshift+0x6e>
 810b1ba:	ebac 0304 	sub.w	r3, ip, r4
 810b1be:	3b15      	subs	r3, #21
 810b1c0:	f023 0303 	bic.w	r3, r3, #3
 810b1c4:	3304      	adds	r3, #4
 810b1c6:	f104 0015 	add.w	r0, r4, #21
 810b1ca:	4584      	cmp	ip, r0
 810b1cc:	bf38      	it	cc
 810b1ce:	2304      	movcc	r3, #4
 810b1d0:	50ca      	str	r2, [r1, r3]
 810b1d2:	b10a      	cbz	r2, 810b1d8 <__lshift+0xa4>
 810b1d4:	f108 0602 	add.w	r6, r8, #2
 810b1d8:	3e01      	subs	r6, #1
 810b1da:	4638      	mov	r0, r7
 810b1dc:	612e      	str	r6, [r5, #16]
 810b1de:	4621      	mov	r1, r4
 810b1e0:	f7ff fd8c 	bl	810acfc <_Bfree>
 810b1e4:	4628      	mov	r0, r5
 810b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b1ea:	f842 0f04 	str.w	r0, [r2, #4]!
 810b1ee:	3301      	adds	r3, #1
 810b1f0:	e7c5      	b.n	810b17e <__lshift+0x4a>
 810b1f2:	3904      	subs	r1, #4
 810b1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 810b1f8:	f841 2f04 	str.w	r2, [r1, #4]!
 810b1fc:	459c      	cmp	ip, r3
 810b1fe:	d8f9      	bhi.n	810b1f4 <__lshift+0xc0>
 810b200:	e7ea      	b.n	810b1d8 <__lshift+0xa4>
 810b202:	bf00      	nop
 810b204:	0810c004 	.word	0x0810c004
 810b208:	0810c0f8 	.word	0x0810c0f8

0810b20c <__mcmp>:
 810b20c:	b530      	push	{r4, r5, lr}
 810b20e:	6902      	ldr	r2, [r0, #16]
 810b210:	690c      	ldr	r4, [r1, #16]
 810b212:	1b12      	subs	r2, r2, r4
 810b214:	d10e      	bne.n	810b234 <__mcmp+0x28>
 810b216:	f100 0314 	add.w	r3, r0, #20
 810b21a:	3114      	adds	r1, #20
 810b21c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b220:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b224:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b228:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b22c:	42a5      	cmp	r5, r4
 810b22e:	d003      	beq.n	810b238 <__mcmp+0x2c>
 810b230:	d305      	bcc.n	810b23e <__mcmp+0x32>
 810b232:	2201      	movs	r2, #1
 810b234:	4610      	mov	r0, r2
 810b236:	bd30      	pop	{r4, r5, pc}
 810b238:	4283      	cmp	r3, r0
 810b23a:	d3f3      	bcc.n	810b224 <__mcmp+0x18>
 810b23c:	e7fa      	b.n	810b234 <__mcmp+0x28>
 810b23e:	f04f 32ff 	mov.w	r2, #4294967295
 810b242:	e7f7      	b.n	810b234 <__mcmp+0x28>

0810b244 <__mdiff>:
 810b244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b248:	460c      	mov	r4, r1
 810b24a:	4606      	mov	r6, r0
 810b24c:	4611      	mov	r1, r2
 810b24e:	4620      	mov	r0, r4
 810b250:	4617      	mov	r7, r2
 810b252:	f7ff ffdb 	bl	810b20c <__mcmp>
 810b256:	1e05      	subs	r5, r0, #0
 810b258:	d110      	bne.n	810b27c <__mdiff+0x38>
 810b25a:	4629      	mov	r1, r5
 810b25c:	4630      	mov	r0, r6
 810b25e:	f7ff fd0d 	bl	810ac7c <_Balloc>
 810b262:	b930      	cbnz	r0, 810b272 <__mdiff+0x2e>
 810b264:	4b39      	ldr	r3, [pc, #228]	; (810b34c <__mdiff+0x108>)
 810b266:	4602      	mov	r2, r0
 810b268:	f240 2132 	movw	r1, #562	; 0x232
 810b26c:	4838      	ldr	r0, [pc, #224]	; (810b350 <__mdiff+0x10c>)
 810b26e:	f7fb ffef 	bl	8107250 <__assert_func>
 810b272:	2301      	movs	r3, #1
 810b274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b27c:	bfa4      	itt	ge
 810b27e:	463b      	movge	r3, r7
 810b280:	4627      	movge	r7, r4
 810b282:	4630      	mov	r0, r6
 810b284:	6879      	ldr	r1, [r7, #4]
 810b286:	bfa6      	itte	ge
 810b288:	461c      	movge	r4, r3
 810b28a:	2500      	movge	r5, #0
 810b28c:	2501      	movlt	r5, #1
 810b28e:	f7ff fcf5 	bl	810ac7c <_Balloc>
 810b292:	b920      	cbnz	r0, 810b29e <__mdiff+0x5a>
 810b294:	4b2d      	ldr	r3, [pc, #180]	; (810b34c <__mdiff+0x108>)
 810b296:	4602      	mov	r2, r0
 810b298:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b29c:	e7e6      	b.n	810b26c <__mdiff+0x28>
 810b29e:	693e      	ldr	r6, [r7, #16]
 810b2a0:	60c5      	str	r5, [r0, #12]
 810b2a2:	6925      	ldr	r5, [r4, #16]
 810b2a4:	f107 0114 	add.w	r1, r7, #20
 810b2a8:	f104 0914 	add.w	r9, r4, #20
 810b2ac:	f100 0e14 	add.w	lr, r0, #20
 810b2b0:	f107 0210 	add.w	r2, r7, #16
 810b2b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810b2b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810b2bc:	46f2      	mov	sl, lr
 810b2be:	2700      	movs	r7, #0
 810b2c0:	f859 3b04 	ldr.w	r3, [r9], #4
 810b2c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b2c8:	fa1f f883 	uxth.w	r8, r3
 810b2cc:	fa17 f78b 	uxtah	r7, r7, fp
 810b2d0:	0c1b      	lsrs	r3, r3, #16
 810b2d2:	eba7 0808 	sub.w	r8, r7, r8
 810b2d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b2da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b2de:	fa1f f888 	uxth.w	r8, r8
 810b2e2:	141f      	asrs	r7, r3, #16
 810b2e4:	454d      	cmp	r5, r9
 810b2e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b2ea:	f84a 3b04 	str.w	r3, [sl], #4
 810b2ee:	d8e7      	bhi.n	810b2c0 <__mdiff+0x7c>
 810b2f0:	1b2b      	subs	r3, r5, r4
 810b2f2:	3b15      	subs	r3, #21
 810b2f4:	f023 0303 	bic.w	r3, r3, #3
 810b2f8:	3304      	adds	r3, #4
 810b2fa:	3415      	adds	r4, #21
 810b2fc:	42a5      	cmp	r5, r4
 810b2fe:	bf38      	it	cc
 810b300:	2304      	movcc	r3, #4
 810b302:	4419      	add	r1, r3
 810b304:	4473      	add	r3, lr
 810b306:	469e      	mov	lr, r3
 810b308:	460d      	mov	r5, r1
 810b30a:	4565      	cmp	r5, ip
 810b30c:	d30e      	bcc.n	810b32c <__mdiff+0xe8>
 810b30e:	f10c 0203 	add.w	r2, ip, #3
 810b312:	1a52      	subs	r2, r2, r1
 810b314:	f022 0203 	bic.w	r2, r2, #3
 810b318:	3903      	subs	r1, #3
 810b31a:	458c      	cmp	ip, r1
 810b31c:	bf38      	it	cc
 810b31e:	2200      	movcc	r2, #0
 810b320:	441a      	add	r2, r3
 810b322:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b326:	b17b      	cbz	r3, 810b348 <__mdiff+0x104>
 810b328:	6106      	str	r6, [r0, #16]
 810b32a:	e7a5      	b.n	810b278 <__mdiff+0x34>
 810b32c:	f855 8b04 	ldr.w	r8, [r5], #4
 810b330:	fa17 f488 	uxtah	r4, r7, r8
 810b334:	1422      	asrs	r2, r4, #16
 810b336:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810b33a:	b2a4      	uxth	r4, r4
 810b33c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810b340:	f84e 4b04 	str.w	r4, [lr], #4
 810b344:	1417      	asrs	r7, r2, #16
 810b346:	e7e0      	b.n	810b30a <__mdiff+0xc6>
 810b348:	3e01      	subs	r6, #1
 810b34a:	e7ea      	b.n	810b322 <__mdiff+0xde>
 810b34c:	0810c004 	.word	0x0810c004
 810b350:	0810c0f8 	.word	0x0810c0f8

0810b354 <__ulp>:
 810b354:	b082      	sub	sp, #8
 810b356:	ed8d 0b00 	vstr	d0, [sp]
 810b35a:	9b01      	ldr	r3, [sp, #4]
 810b35c:	4912      	ldr	r1, [pc, #72]	; (810b3a8 <__ulp+0x54>)
 810b35e:	4019      	ands	r1, r3
 810b360:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b364:	2900      	cmp	r1, #0
 810b366:	dd05      	ble.n	810b374 <__ulp+0x20>
 810b368:	2200      	movs	r2, #0
 810b36a:	460b      	mov	r3, r1
 810b36c:	ec43 2b10 	vmov	d0, r2, r3
 810b370:	b002      	add	sp, #8
 810b372:	4770      	bx	lr
 810b374:	4249      	negs	r1, r1
 810b376:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b37a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b37e:	f04f 0200 	mov.w	r2, #0
 810b382:	f04f 0300 	mov.w	r3, #0
 810b386:	da04      	bge.n	810b392 <__ulp+0x3e>
 810b388:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b38c:	fa41 f300 	asr.w	r3, r1, r0
 810b390:	e7ec      	b.n	810b36c <__ulp+0x18>
 810b392:	f1a0 0114 	sub.w	r1, r0, #20
 810b396:	291e      	cmp	r1, #30
 810b398:	bfda      	itte	le
 810b39a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b39e:	fa20 f101 	lsrle.w	r1, r0, r1
 810b3a2:	2101      	movgt	r1, #1
 810b3a4:	460a      	mov	r2, r1
 810b3a6:	e7e1      	b.n	810b36c <__ulp+0x18>
 810b3a8:	7ff00000 	.word	0x7ff00000

0810b3ac <__b2d>:
 810b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b3ae:	6905      	ldr	r5, [r0, #16]
 810b3b0:	f100 0714 	add.w	r7, r0, #20
 810b3b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b3b8:	1f2e      	subs	r6, r5, #4
 810b3ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b3be:	4620      	mov	r0, r4
 810b3c0:	f7ff fd52 	bl	810ae68 <__hi0bits>
 810b3c4:	f1c0 0320 	rsb	r3, r0, #32
 810b3c8:	280a      	cmp	r0, #10
 810b3ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b448 <__b2d+0x9c>
 810b3ce:	600b      	str	r3, [r1, #0]
 810b3d0:	dc14      	bgt.n	810b3fc <__b2d+0x50>
 810b3d2:	f1c0 0e0b 	rsb	lr, r0, #11
 810b3d6:	fa24 f10e 	lsr.w	r1, r4, lr
 810b3da:	42b7      	cmp	r7, r6
 810b3dc:	ea41 030c 	orr.w	r3, r1, ip
 810b3e0:	bf34      	ite	cc
 810b3e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b3e6:	2100      	movcs	r1, #0
 810b3e8:	3015      	adds	r0, #21
 810b3ea:	fa04 f000 	lsl.w	r0, r4, r0
 810b3ee:	fa21 f10e 	lsr.w	r1, r1, lr
 810b3f2:	ea40 0201 	orr.w	r2, r0, r1
 810b3f6:	ec43 2b10 	vmov	d0, r2, r3
 810b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b3fc:	42b7      	cmp	r7, r6
 810b3fe:	bf3a      	itte	cc
 810b400:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b404:	f1a5 0608 	subcc.w	r6, r5, #8
 810b408:	2100      	movcs	r1, #0
 810b40a:	380b      	subs	r0, #11
 810b40c:	d017      	beq.n	810b43e <__b2d+0x92>
 810b40e:	f1c0 0c20 	rsb	ip, r0, #32
 810b412:	fa04 f500 	lsl.w	r5, r4, r0
 810b416:	42be      	cmp	r6, r7
 810b418:	fa21 f40c 	lsr.w	r4, r1, ip
 810b41c:	ea45 0504 	orr.w	r5, r5, r4
 810b420:	bf8c      	ite	hi
 810b422:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b426:	2400      	movls	r4, #0
 810b428:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b42c:	fa01 f000 	lsl.w	r0, r1, r0
 810b430:	fa24 f40c 	lsr.w	r4, r4, ip
 810b434:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b438:	ea40 0204 	orr.w	r2, r0, r4
 810b43c:	e7db      	b.n	810b3f6 <__b2d+0x4a>
 810b43e:	ea44 030c 	orr.w	r3, r4, ip
 810b442:	460a      	mov	r2, r1
 810b444:	e7d7      	b.n	810b3f6 <__b2d+0x4a>
 810b446:	bf00      	nop
 810b448:	3ff00000 	.word	0x3ff00000

0810b44c <__d2b>:
 810b44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b450:	4689      	mov	r9, r1
 810b452:	2101      	movs	r1, #1
 810b454:	ec57 6b10 	vmov	r6, r7, d0
 810b458:	4690      	mov	r8, r2
 810b45a:	f7ff fc0f 	bl	810ac7c <_Balloc>
 810b45e:	4604      	mov	r4, r0
 810b460:	b930      	cbnz	r0, 810b470 <__d2b+0x24>
 810b462:	4602      	mov	r2, r0
 810b464:	4b25      	ldr	r3, [pc, #148]	; (810b4fc <__d2b+0xb0>)
 810b466:	4826      	ldr	r0, [pc, #152]	; (810b500 <__d2b+0xb4>)
 810b468:	f240 310a 	movw	r1, #778	; 0x30a
 810b46c:	f7fb fef0 	bl	8107250 <__assert_func>
 810b470:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b474:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b478:	bb35      	cbnz	r5, 810b4c8 <__d2b+0x7c>
 810b47a:	2e00      	cmp	r6, #0
 810b47c:	9301      	str	r3, [sp, #4]
 810b47e:	d028      	beq.n	810b4d2 <__d2b+0x86>
 810b480:	4668      	mov	r0, sp
 810b482:	9600      	str	r6, [sp, #0]
 810b484:	f7ff fd10 	bl	810aea8 <__lo0bits>
 810b488:	9900      	ldr	r1, [sp, #0]
 810b48a:	b300      	cbz	r0, 810b4ce <__d2b+0x82>
 810b48c:	9a01      	ldr	r2, [sp, #4]
 810b48e:	f1c0 0320 	rsb	r3, r0, #32
 810b492:	fa02 f303 	lsl.w	r3, r2, r3
 810b496:	430b      	orrs	r3, r1
 810b498:	40c2      	lsrs	r2, r0
 810b49a:	6163      	str	r3, [r4, #20]
 810b49c:	9201      	str	r2, [sp, #4]
 810b49e:	9b01      	ldr	r3, [sp, #4]
 810b4a0:	61a3      	str	r3, [r4, #24]
 810b4a2:	2b00      	cmp	r3, #0
 810b4a4:	bf14      	ite	ne
 810b4a6:	2202      	movne	r2, #2
 810b4a8:	2201      	moveq	r2, #1
 810b4aa:	6122      	str	r2, [r4, #16]
 810b4ac:	b1d5      	cbz	r5, 810b4e4 <__d2b+0x98>
 810b4ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b4b2:	4405      	add	r5, r0
 810b4b4:	f8c9 5000 	str.w	r5, [r9]
 810b4b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b4bc:	f8c8 0000 	str.w	r0, [r8]
 810b4c0:	4620      	mov	r0, r4
 810b4c2:	b003      	add	sp, #12
 810b4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b4c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b4cc:	e7d5      	b.n	810b47a <__d2b+0x2e>
 810b4ce:	6161      	str	r1, [r4, #20]
 810b4d0:	e7e5      	b.n	810b49e <__d2b+0x52>
 810b4d2:	a801      	add	r0, sp, #4
 810b4d4:	f7ff fce8 	bl	810aea8 <__lo0bits>
 810b4d8:	9b01      	ldr	r3, [sp, #4]
 810b4da:	6163      	str	r3, [r4, #20]
 810b4dc:	2201      	movs	r2, #1
 810b4de:	6122      	str	r2, [r4, #16]
 810b4e0:	3020      	adds	r0, #32
 810b4e2:	e7e3      	b.n	810b4ac <__d2b+0x60>
 810b4e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b4e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b4ec:	f8c9 0000 	str.w	r0, [r9]
 810b4f0:	6918      	ldr	r0, [r3, #16]
 810b4f2:	f7ff fcb9 	bl	810ae68 <__hi0bits>
 810b4f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b4fa:	e7df      	b.n	810b4bc <__d2b+0x70>
 810b4fc:	0810c004 	.word	0x0810c004
 810b500:	0810c0f8 	.word	0x0810c0f8

0810b504 <__ratio>:
 810b504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b508:	4688      	mov	r8, r1
 810b50a:	4669      	mov	r1, sp
 810b50c:	4681      	mov	r9, r0
 810b50e:	f7ff ff4d 	bl	810b3ac <__b2d>
 810b512:	a901      	add	r1, sp, #4
 810b514:	4640      	mov	r0, r8
 810b516:	ec55 4b10 	vmov	r4, r5, d0
 810b51a:	f7ff ff47 	bl	810b3ac <__b2d>
 810b51e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b522:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b526:	eba3 0c02 	sub.w	ip, r3, r2
 810b52a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b52e:	1a9b      	subs	r3, r3, r2
 810b530:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b534:	ec51 0b10 	vmov	r0, r1, d0
 810b538:	2b00      	cmp	r3, #0
 810b53a:	bfd6      	itet	le
 810b53c:	460a      	movle	r2, r1
 810b53e:	462a      	movgt	r2, r5
 810b540:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b544:	468b      	mov	fp, r1
 810b546:	462f      	mov	r7, r5
 810b548:	bfd4      	ite	le
 810b54a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b54e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b552:	4620      	mov	r0, r4
 810b554:	ee10 2a10 	vmov	r2, s0
 810b558:	465b      	mov	r3, fp
 810b55a:	4639      	mov	r1, r7
 810b55c:	f7f5 fa0e 	bl	810097c <__aeabi_ddiv>
 810b560:	ec41 0b10 	vmov	d0, r0, r1
 810b564:	b003      	add	sp, #12
 810b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b56a <__copybits>:
 810b56a:	3901      	subs	r1, #1
 810b56c:	b570      	push	{r4, r5, r6, lr}
 810b56e:	1149      	asrs	r1, r1, #5
 810b570:	6914      	ldr	r4, [r2, #16]
 810b572:	3101      	adds	r1, #1
 810b574:	f102 0314 	add.w	r3, r2, #20
 810b578:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b57c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b580:	1f05      	subs	r5, r0, #4
 810b582:	42a3      	cmp	r3, r4
 810b584:	d30c      	bcc.n	810b5a0 <__copybits+0x36>
 810b586:	1aa3      	subs	r3, r4, r2
 810b588:	3b11      	subs	r3, #17
 810b58a:	f023 0303 	bic.w	r3, r3, #3
 810b58e:	3211      	adds	r2, #17
 810b590:	42a2      	cmp	r2, r4
 810b592:	bf88      	it	hi
 810b594:	2300      	movhi	r3, #0
 810b596:	4418      	add	r0, r3
 810b598:	2300      	movs	r3, #0
 810b59a:	4288      	cmp	r0, r1
 810b59c:	d305      	bcc.n	810b5aa <__copybits+0x40>
 810b59e:	bd70      	pop	{r4, r5, r6, pc}
 810b5a0:	f853 6b04 	ldr.w	r6, [r3], #4
 810b5a4:	f845 6f04 	str.w	r6, [r5, #4]!
 810b5a8:	e7eb      	b.n	810b582 <__copybits+0x18>
 810b5aa:	f840 3b04 	str.w	r3, [r0], #4
 810b5ae:	e7f4      	b.n	810b59a <__copybits+0x30>

0810b5b0 <__any_on>:
 810b5b0:	f100 0214 	add.w	r2, r0, #20
 810b5b4:	6900      	ldr	r0, [r0, #16]
 810b5b6:	114b      	asrs	r3, r1, #5
 810b5b8:	4298      	cmp	r0, r3
 810b5ba:	b510      	push	{r4, lr}
 810b5bc:	db11      	blt.n	810b5e2 <__any_on+0x32>
 810b5be:	dd0a      	ble.n	810b5d6 <__any_on+0x26>
 810b5c0:	f011 011f 	ands.w	r1, r1, #31
 810b5c4:	d007      	beq.n	810b5d6 <__any_on+0x26>
 810b5c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b5ca:	fa24 f001 	lsr.w	r0, r4, r1
 810b5ce:	fa00 f101 	lsl.w	r1, r0, r1
 810b5d2:	428c      	cmp	r4, r1
 810b5d4:	d10b      	bne.n	810b5ee <__any_on+0x3e>
 810b5d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b5da:	4293      	cmp	r3, r2
 810b5dc:	d803      	bhi.n	810b5e6 <__any_on+0x36>
 810b5de:	2000      	movs	r0, #0
 810b5e0:	bd10      	pop	{r4, pc}
 810b5e2:	4603      	mov	r3, r0
 810b5e4:	e7f7      	b.n	810b5d6 <__any_on+0x26>
 810b5e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b5ea:	2900      	cmp	r1, #0
 810b5ec:	d0f5      	beq.n	810b5da <__any_on+0x2a>
 810b5ee:	2001      	movs	r0, #1
 810b5f0:	e7f6      	b.n	810b5e0 <__any_on+0x30>

0810b5f2 <_calloc_r>:
 810b5f2:	b513      	push	{r0, r1, r4, lr}
 810b5f4:	434a      	muls	r2, r1
 810b5f6:	4611      	mov	r1, r2
 810b5f8:	9201      	str	r2, [sp, #4]
 810b5fa:	f7fb fef9 	bl	81073f0 <_malloc_r>
 810b5fe:	4604      	mov	r4, r0
 810b600:	b118      	cbz	r0, 810b60a <_calloc_r+0x18>
 810b602:	9a01      	ldr	r2, [sp, #4]
 810b604:	2100      	movs	r1, #0
 810b606:	f7fb fe9b 	bl	8107340 <memset>
 810b60a:	4620      	mov	r0, r4
 810b60c:	b002      	add	sp, #8
 810b60e:	bd10      	pop	{r4, pc}

0810b610 <_realloc_r>:
 810b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b612:	4607      	mov	r7, r0
 810b614:	4614      	mov	r4, r2
 810b616:	460e      	mov	r6, r1
 810b618:	b921      	cbnz	r1, 810b624 <_realloc_r+0x14>
 810b61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810b61e:	4611      	mov	r1, r2
 810b620:	f7fb bee6 	b.w	81073f0 <_malloc_r>
 810b624:	b922      	cbnz	r2, 810b630 <_realloc_r+0x20>
 810b626:	f7fb fe93 	bl	8107350 <_free_r>
 810b62a:	4625      	mov	r5, r4
 810b62c:	4628      	mov	r0, r5
 810b62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b630:	f000 fa64 	bl	810bafc <_malloc_usable_size_r>
 810b634:	42a0      	cmp	r0, r4
 810b636:	d20f      	bcs.n	810b658 <_realloc_r+0x48>
 810b638:	4621      	mov	r1, r4
 810b63a:	4638      	mov	r0, r7
 810b63c:	f7fb fed8 	bl	81073f0 <_malloc_r>
 810b640:	4605      	mov	r5, r0
 810b642:	2800      	cmp	r0, #0
 810b644:	d0f2      	beq.n	810b62c <_realloc_r+0x1c>
 810b646:	4631      	mov	r1, r6
 810b648:	4622      	mov	r2, r4
 810b64a:	f7fb fe6b 	bl	8107324 <memcpy>
 810b64e:	4631      	mov	r1, r6
 810b650:	4638      	mov	r0, r7
 810b652:	f7fb fe7d 	bl	8107350 <_free_r>
 810b656:	e7e9      	b.n	810b62c <_realloc_r+0x1c>
 810b658:	4635      	mov	r5, r6
 810b65a:	e7e7      	b.n	810b62c <_realloc_r+0x1c>

0810b65c <__ssputs_r>:
 810b65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b660:	688e      	ldr	r6, [r1, #8]
 810b662:	429e      	cmp	r6, r3
 810b664:	4682      	mov	sl, r0
 810b666:	460c      	mov	r4, r1
 810b668:	4690      	mov	r8, r2
 810b66a:	461f      	mov	r7, r3
 810b66c:	d838      	bhi.n	810b6e0 <__ssputs_r+0x84>
 810b66e:	898a      	ldrh	r2, [r1, #12]
 810b670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b674:	d032      	beq.n	810b6dc <__ssputs_r+0x80>
 810b676:	6825      	ldr	r5, [r4, #0]
 810b678:	6909      	ldr	r1, [r1, #16]
 810b67a:	eba5 0901 	sub.w	r9, r5, r1
 810b67e:	6965      	ldr	r5, [r4, #20]
 810b680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b688:	3301      	adds	r3, #1
 810b68a:	444b      	add	r3, r9
 810b68c:	106d      	asrs	r5, r5, #1
 810b68e:	429d      	cmp	r5, r3
 810b690:	bf38      	it	cc
 810b692:	461d      	movcc	r5, r3
 810b694:	0553      	lsls	r3, r2, #21
 810b696:	d531      	bpl.n	810b6fc <__ssputs_r+0xa0>
 810b698:	4629      	mov	r1, r5
 810b69a:	f7fb fea9 	bl	81073f0 <_malloc_r>
 810b69e:	4606      	mov	r6, r0
 810b6a0:	b950      	cbnz	r0, 810b6b8 <__ssputs_r+0x5c>
 810b6a2:	230c      	movs	r3, #12
 810b6a4:	f8ca 3000 	str.w	r3, [sl]
 810b6a8:	89a3      	ldrh	r3, [r4, #12]
 810b6aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b6ae:	81a3      	strh	r3, [r4, #12]
 810b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 810b6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b6b8:	6921      	ldr	r1, [r4, #16]
 810b6ba:	464a      	mov	r2, r9
 810b6bc:	f7fb fe32 	bl	8107324 <memcpy>
 810b6c0:	89a3      	ldrh	r3, [r4, #12]
 810b6c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b6ca:	81a3      	strh	r3, [r4, #12]
 810b6cc:	6126      	str	r6, [r4, #16]
 810b6ce:	6165      	str	r5, [r4, #20]
 810b6d0:	444e      	add	r6, r9
 810b6d2:	eba5 0509 	sub.w	r5, r5, r9
 810b6d6:	6026      	str	r6, [r4, #0]
 810b6d8:	60a5      	str	r5, [r4, #8]
 810b6da:	463e      	mov	r6, r7
 810b6dc:	42be      	cmp	r6, r7
 810b6de:	d900      	bls.n	810b6e2 <__ssputs_r+0x86>
 810b6e0:	463e      	mov	r6, r7
 810b6e2:	4632      	mov	r2, r6
 810b6e4:	6820      	ldr	r0, [r4, #0]
 810b6e6:	4641      	mov	r1, r8
 810b6e8:	f7ff faa2 	bl	810ac30 <memmove>
 810b6ec:	68a3      	ldr	r3, [r4, #8]
 810b6ee:	6822      	ldr	r2, [r4, #0]
 810b6f0:	1b9b      	subs	r3, r3, r6
 810b6f2:	4432      	add	r2, r6
 810b6f4:	60a3      	str	r3, [r4, #8]
 810b6f6:	6022      	str	r2, [r4, #0]
 810b6f8:	2000      	movs	r0, #0
 810b6fa:	e7db      	b.n	810b6b4 <__ssputs_r+0x58>
 810b6fc:	462a      	mov	r2, r5
 810b6fe:	f7ff ff87 	bl	810b610 <_realloc_r>
 810b702:	4606      	mov	r6, r0
 810b704:	2800      	cmp	r0, #0
 810b706:	d1e1      	bne.n	810b6cc <__ssputs_r+0x70>
 810b708:	6921      	ldr	r1, [r4, #16]
 810b70a:	4650      	mov	r0, sl
 810b70c:	f7fb fe20 	bl	8107350 <_free_r>
 810b710:	e7c7      	b.n	810b6a2 <__ssputs_r+0x46>
	...

0810b714 <_svfiprintf_r>:
 810b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b718:	4698      	mov	r8, r3
 810b71a:	898b      	ldrh	r3, [r1, #12]
 810b71c:	061b      	lsls	r3, r3, #24
 810b71e:	b09d      	sub	sp, #116	; 0x74
 810b720:	4607      	mov	r7, r0
 810b722:	460d      	mov	r5, r1
 810b724:	4614      	mov	r4, r2
 810b726:	d50e      	bpl.n	810b746 <_svfiprintf_r+0x32>
 810b728:	690b      	ldr	r3, [r1, #16]
 810b72a:	b963      	cbnz	r3, 810b746 <_svfiprintf_r+0x32>
 810b72c:	2140      	movs	r1, #64	; 0x40
 810b72e:	f7fb fe5f 	bl	81073f0 <_malloc_r>
 810b732:	6028      	str	r0, [r5, #0]
 810b734:	6128      	str	r0, [r5, #16]
 810b736:	b920      	cbnz	r0, 810b742 <_svfiprintf_r+0x2e>
 810b738:	230c      	movs	r3, #12
 810b73a:	603b      	str	r3, [r7, #0]
 810b73c:	f04f 30ff 	mov.w	r0, #4294967295
 810b740:	e0d1      	b.n	810b8e6 <_svfiprintf_r+0x1d2>
 810b742:	2340      	movs	r3, #64	; 0x40
 810b744:	616b      	str	r3, [r5, #20]
 810b746:	2300      	movs	r3, #0
 810b748:	9309      	str	r3, [sp, #36]	; 0x24
 810b74a:	2320      	movs	r3, #32
 810b74c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b750:	f8cd 800c 	str.w	r8, [sp, #12]
 810b754:	2330      	movs	r3, #48	; 0x30
 810b756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810b900 <_svfiprintf_r+0x1ec>
 810b75a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b75e:	f04f 0901 	mov.w	r9, #1
 810b762:	4623      	mov	r3, r4
 810b764:	469a      	mov	sl, r3
 810b766:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b76a:	b10a      	cbz	r2, 810b770 <_svfiprintf_r+0x5c>
 810b76c:	2a25      	cmp	r2, #37	; 0x25
 810b76e:	d1f9      	bne.n	810b764 <_svfiprintf_r+0x50>
 810b770:	ebba 0b04 	subs.w	fp, sl, r4
 810b774:	d00b      	beq.n	810b78e <_svfiprintf_r+0x7a>
 810b776:	465b      	mov	r3, fp
 810b778:	4622      	mov	r2, r4
 810b77a:	4629      	mov	r1, r5
 810b77c:	4638      	mov	r0, r7
 810b77e:	f7ff ff6d 	bl	810b65c <__ssputs_r>
 810b782:	3001      	adds	r0, #1
 810b784:	f000 80aa 	beq.w	810b8dc <_svfiprintf_r+0x1c8>
 810b788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b78a:	445a      	add	r2, fp
 810b78c:	9209      	str	r2, [sp, #36]	; 0x24
 810b78e:	f89a 3000 	ldrb.w	r3, [sl]
 810b792:	2b00      	cmp	r3, #0
 810b794:	f000 80a2 	beq.w	810b8dc <_svfiprintf_r+0x1c8>
 810b798:	2300      	movs	r3, #0
 810b79a:	f04f 32ff 	mov.w	r2, #4294967295
 810b79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b7a2:	f10a 0a01 	add.w	sl, sl, #1
 810b7a6:	9304      	str	r3, [sp, #16]
 810b7a8:	9307      	str	r3, [sp, #28]
 810b7aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b7ae:	931a      	str	r3, [sp, #104]	; 0x68
 810b7b0:	4654      	mov	r4, sl
 810b7b2:	2205      	movs	r2, #5
 810b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b7b8:	4851      	ldr	r0, [pc, #324]	; (810b900 <_svfiprintf_r+0x1ec>)
 810b7ba:	f7f4 fda9 	bl	8100310 <memchr>
 810b7be:	9a04      	ldr	r2, [sp, #16]
 810b7c0:	b9d8      	cbnz	r0, 810b7fa <_svfiprintf_r+0xe6>
 810b7c2:	06d0      	lsls	r0, r2, #27
 810b7c4:	bf44      	itt	mi
 810b7c6:	2320      	movmi	r3, #32
 810b7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b7cc:	0711      	lsls	r1, r2, #28
 810b7ce:	bf44      	itt	mi
 810b7d0:	232b      	movmi	r3, #43	; 0x2b
 810b7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b7d6:	f89a 3000 	ldrb.w	r3, [sl]
 810b7da:	2b2a      	cmp	r3, #42	; 0x2a
 810b7dc:	d015      	beq.n	810b80a <_svfiprintf_r+0xf6>
 810b7de:	9a07      	ldr	r2, [sp, #28]
 810b7e0:	4654      	mov	r4, sl
 810b7e2:	2000      	movs	r0, #0
 810b7e4:	f04f 0c0a 	mov.w	ip, #10
 810b7e8:	4621      	mov	r1, r4
 810b7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b7ee:	3b30      	subs	r3, #48	; 0x30
 810b7f0:	2b09      	cmp	r3, #9
 810b7f2:	d94e      	bls.n	810b892 <_svfiprintf_r+0x17e>
 810b7f4:	b1b0      	cbz	r0, 810b824 <_svfiprintf_r+0x110>
 810b7f6:	9207      	str	r2, [sp, #28]
 810b7f8:	e014      	b.n	810b824 <_svfiprintf_r+0x110>
 810b7fa:	eba0 0308 	sub.w	r3, r0, r8
 810b7fe:	fa09 f303 	lsl.w	r3, r9, r3
 810b802:	4313      	orrs	r3, r2
 810b804:	9304      	str	r3, [sp, #16]
 810b806:	46a2      	mov	sl, r4
 810b808:	e7d2      	b.n	810b7b0 <_svfiprintf_r+0x9c>
 810b80a:	9b03      	ldr	r3, [sp, #12]
 810b80c:	1d19      	adds	r1, r3, #4
 810b80e:	681b      	ldr	r3, [r3, #0]
 810b810:	9103      	str	r1, [sp, #12]
 810b812:	2b00      	cmp	r3, #0
 810b814:	bfbb      	ittet	lt
 810b816:	425b      	neglt	r3, r3
 810b818:	f042 0202 	orrlt.w	r2, r2, #2
 810b81c:	9307      	strge	r3, [sp, #28]
 810b81e:	9307      	strlt	r3, [sp, #28]
 810b820:	bfb8      	it	lt
 810b822:	9204      	strlt	r2, [sp, #16]
 810b824:	7823      	ldrb	r3, [r4, #0]
 810b826:	2b2e      	cmp	r3, #46	; 0x2e
 810b828:	d10c      	bne.n	810b844 <_svfiprintf_r+0x130>
 810b82a:	7863      	ldrb	r3, [r4, #1]
 810b82c:	2b2a      	cmp	r3, #42	; 0x2a
 810b82e:	d135      	bne.n	810b89c <_svfiprintf_r+0x188>
 810b830:	9b03      	ldr	r3, [sp, #12]
 810b832:	1d1a      	adds	r2, r3, #4
 810b834:	681b      	ldr	r3, [r3, #0]
 810b836:	9203      	str	r2, [sp, #12]
 810b838:	2b00      	cmp	r3, #0
 810b83a:	bfb8      	it	lt
 810b83c:	f04f 33ff 	movlt.w	r3, #4294967295
 810b840:	3402      	adds	r4, #2
 810b842:	9305      	str	r3, [sp, #20]
 810b844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810b910 <_svfiprintf_r+0x1fc>
 810b848:	7821      	ldrb	r1, [r4, #0]
 810b84a:	2203      	movs	r2, #3
 810b84c:	4650      	mov	r0, sl
 810b84e:	f7f4 fd5f 	bl	8100310 <memchr>
 810b852:	b140      	cbz	r0, 810b866 <_svfiprintf_r+0x152>
 810b854:	2340      	movs	r3, #64	; 0x40
 810b856:	eba0 000a 	sub.w	r0, r0, sl
 810b85a:	fa03 f000 	lsl.w	r0, r3, r0
 810b85e:	9b04      	ldr	r3, [sp, #16]
 810b860:	4303      	orrs	r3, r0
 810b862:	3401      	adds	r4, #1
 810b864:	9304      	str	r3, [sp, #16]
 810b866:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b86a:	4826      	ldr	r0, [pc, #152]	; (810b904 <_svfiprintf_r+0x1f0>)
 810b86c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b870:	2206      	movs	r2, #6
 810b872:	f7f4 fd4d 	bl	8100310 <memchr>
 810b876:	2800      	cmp	r0, #0
 810b878:	d038      	beq.n	810b8ec <_svfiprintf_r+0x1d8>
 810b87a:	4b23      	ldr	r3, [pc, #140]	; (810b908 <_svfiprintf_r+0x1f4>)
 810b87c:	bb1b      	cbnz	r3, 810b8c6 <_svfiprintf_r+0x1b2>
 810b87e:	9b03      	ldr	r3, [sp, #12]
 810b880:	3307      	adds	r3, #7
 810b882:	f023 0307 	bic.w	r3, r3, #7
 810b886:	3308      	adds	r3, #8
 810b888:	9303      	str	r3, [sp, #12]
 810b88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b88c:	4433      	add	r3, r6
 810b88e:	9309      	str	r3, [sp, #36]	; 0x24
 810b890:	e767      	b.n	810b762 <_svfiprintf_r+0x4e>
 810b892:	fb0c 3202 	mla	r2, ip, r2, r3
 810b896:	460c      	mov	r4, r1
 810b898:	2001      	movs	r0, #1
 810b89a:	e7a5      	b.n	810b7e8 <_svfiprintf_r+0xd4>
 810b89c:	2300      	movs	r3, #0
 810b89e:	3401      	adds	r4, #1
 810b8a0:	9305      	str	r3, [sp, #20]
 810b8a2:	4619      	mov	r1, r3
 810b8a4:	f04f 0c0a 	mov.w	ip, #10
 810b8a8:	4620      	mov	r0, r4
 810b8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b8ae:	3a30      	subs	r2, #48	; 0x30
 810b8b0:	2a09      	cmp	r2, #9
 810b8b2:	d903      	bls.n	810b8bc <_svfiprintf_r+0x1a8>
 810b8b4:	2b00      	cmp	r3, #0
 810b8b6:	d0c5      	beq.n	810b844 <_svfiprintf_r+0x130>
 810b8b8:	9105      	str	r1, [sp, #20]
 810b8ba:	e7c3      	b.n	810b844 <_svfiprintf_r+0x130>
 810b8bc:	fb0c 2101 	mla	r1, ip, r1, r2
 810b8c0:	4604      	mov	r4, r0
 810b8c2:	2301      	movs	r3, #1
 810b8c4:	e7f0      	b.n	810b8a8 <_svfiprintf_r+0x194>
 810b8c6:	ab03      	add	r3, sp, #12
 810b8c8:	9300      	str	r3, [sp, #0]
 810b8ca:	462a      	mov	r2, r5
 810b8cc:	4b0f      	ldr	r3, [pc, #60]	; (810b90c <_svfiprintf_r+0x1f8>)
 810b8ce:	a904      	add	r1, sp, #16
 810b8d0:	4638      	mov	r0, r7
 810b8d2:	f7fb ffe1 	bl	8107898 <_printf_float>
 810b8d6:	1c42      	adds	r2, r0, #1
 810b8d8:	4606      	mov	r6, r0
 810b8da:	d1d6      	bne.n	810b88a <_svfiprintf_r+0x176>
 810b8dc:	89ab      	ldrh	r3, [r5, #12]
 810b8de:	065b      	lsls	r3, r3, #25
 810b8e0:	f53f af2c 	bmi.w	810b73c <_svfiprintf_r+0x28>
 810b8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b8e6:	b01d      	add	sp, #116	; 0x74
 810b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b8ec:	ab03      	add	r3, sp, #12
 810b8ee:	9300      	str	r3, [sp, #0]
 810b8f0:	462a      	mov	r2, r5
 810b8f2:	4b06      	ldr	r3, [pc, #24]	; (810b90c <_svfiprintf_r+0x1f8>)
 810b8f4:	a904      	add	r1, sp, #16
 810b8f6:	4638      	mov	r0, r7
 810b8f8:	f7fc fa72 	bl	8107de0 <_printf_i>
 810b8fc:	e7eb      	b.n	810b8d6 <_svfiprintf_r+0x1c2>
 810b8fe:	bf00      	nop
 810b900:	0810bde0 	.word	0x0810bde0
 810b904:	0810bdea 	.word	0x0810bdea
 810b908:	08107899 	.word	0x08107899
 810b90c:	0810b65d 	.word	0x0810b65d
 810b910:	0810bde6 	.word	0x0810bde6
 810b914:	00000000 	.word	0x00000000

0810b918 <nan>:
 810b918:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b920 <nan+0x8>
 810b91c:	4770      	bx	lr
 810b91e:	bf00      	nop
 810b920:	00000000 	.word	0x00000000
 810b924:	7ff80000 	.word	0x7ff80000

0810b928 <_raise_r>:
 810b928:	291f      	cmp	r1, #31
 810b92a:	b538      	push	{r3, r4, r5, lr}
 810b92c:	4604      	mov	r4, r0
 810b92e:	460d      	mov	r5, r1
 810b930:	d904      	bls.n	810b93c <_raise_r+0x14>
 810b932:	2316      	movs	r3, #22
 810b934:	6003      	str	r3, [r0, #0]
 810b936:	f04f 30ff 	mov.w	r0, #4294967295
 810b93a:	bd38      	pop	{r3, r4, r5, pc}
 810b93c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b93e:	b112      	cbz	r2, 810b946 <_raise_r+0x1e>
 810b940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b944:	b94b      	cbnz	r3, 810b95a <_raise_r+0x32>
 810b946:	4620      	mov	r0, r4
 810b948:	f000 f830 	bl	810b9ac <_getpid_r>
 810b94c:	462a      	mov	r2, r5
 810b94e:	4601      	mov	r1, r0
 810b950:	4620      	mov	r0, r4
 810b952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b956:	f000 b817 	b.w	810b988 <_kill_r>
 810b95a:	2b01      	cmp	r3, #1
 810b95c:	d00a      	beq.n	810b974 <_raise_r+0x4c>
 810b95e:	1c59      	adds	r1, r3, #1
 810b960:	d103      	bne.n	810b96a <_raise_r+0x42>
 810b962:	2316      	movs	r3, #22
 810b964:	6003      	str	r3, [r0, #0]
 810b966:	2001      	movs	r0, #1
 810b968:	e7e7      	b.n	810b93a <_raise_r+0x12>
 810b96a:	2400      	movs	r4, #0
 810b96c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b970:	4628      	mov	r0, r5
 810b972:	4798      	blx	r3
 810b974:	2000      	movs	r0, #0
 810b976:	e7e0      	b.n	810b93a <_raise_r+0x12>

0810b978 <raise>:
 810b978:	4b02      	ldr	r3, [pc, #8]	; (810b984 <raise+0xc>)
 810b97a:	4601      	mov	r1, r0
 810b97c:	6818      	ldr	r0, [r3, #0]
 810b97e:	f7ff bfd3 	b.w	810b928 <_raise_r>
 810b982:	bf00      	nop
 810b984:	100000b8 	.word	0x100000b8

0810b988 <_kill_r>:
 810b988:	b538      	push	{r3, r4, r5, lr}
 810b98a:	4d07      	ldr	r5, [pc, #28]	; (810b9a8 <_kill_r+0x20>)
 810b98c:	2300      	movs	r3, #0
 810b98e:	4604      	mov	r4, r0
 810b990:	4608      	mov	r0, r1
 810b992:	4611      	mov	r1, r2
 810b994:	602b      	str	r3, [r5, #0]
 810b996:	f7f5 fe31 	bl	81015fc <_kill>
 810b99a:	1c43      	adds	r3, r0, #1
 810b99c:	d102      	bne.n	810b9a4 <_kill_r+0x1c>
 810b99e:	682b      	ldr	r3, [r5, #0]
 810b9a0:	b103      	cbz	r3, 810b9a4 <_kill_r+0x1c>
 810b9a2:	6023      	str	r3, [r4, #0]
 810b9a4:	bd38      	pop	{r3, r4, r5, pc}
 810b9a6:	bf00      	nop
 810b9a8:	10000528 	.word	0x10000528

0810b9ac <_getpid_r>:
 810b9ac:	f7f5 be1e 	b.w	81015ec <_getpid>

0810b9b0 <__sread>:
 810b9b0:	b510      	push	{r4, lr}
 810b9b2:	460c      	mov	r4, r1
 810b9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b9b8:	f000 f8a8 	bl	810bb0c <_read_r>
 810b9bc:	2800      	cmp	r0, #0
 810b9be:	bfab      	itete	ge
 810b9c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b9c2:	89a3      	ldrhlt	r3, [r4, #12]
 810b9c4:	181b      	addge	r3, r3, r0
 810b9c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b9ca:	bfac      	ite	ge
 810b9cc:	6563      	strge	r3, [r4, #84]	; 0x54
 810b9ce:	81a3      	strhlt	r3, [r4, #12]
 810b9d0:	bd10      	pop	{r4, pc}

0810b9d2 <__swrite>:
 810b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b9d6:	461f      	mov	r7, r3
 810b9d8:	898b      	ldrh	r3, [r1, #12]
 810b9da:	05db      	lsls	r3, r3, #23
 810b9dc:	4605      	mov	r5, r0
 810b9de:	460c      	mov	r4, r1
 810b9e0:	4616      	mov	r6, r2
 810b9e2:	d505      	bpl.n	810b9f0 <__swrite+0x1e>
 810b9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b9e8:	2302      	movs	r3, #2
 810b9ea:	2200      	movs	r2, #0
 810b9ec:	f000 f874 	bl	810bad8 <_lseek_r>
 810b9f0:	89a3      	ldrh	r3, [r4, #12]
 810b9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b9f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b9fa:	81a3      	strh	r3, [r4, #12]
 810b9fc:	4632      	mov	r2, r6
 810b9fe:	463b      	mov	r3, r7
 810ba00:	4628      	mov	r0, r5
 810ba02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ba06:	f000 b823 	b.w	810ba50 <_write_r>

0810ba0a <__sseek>:
 810ba0a:	b510      	push	{r4, lr}
 810ba0c:	460c      	mov	r4, r1
 810ba0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ba12:	f000 f861 	bl	810bad8 <_lseek_r>
 810ba16:	1c43      	adds	r3, r0, #1
 810ba18:	89a3      	ldrh	r3, [r4, #12]
 810ba1a:	bf15      	itete	ne
 810ba1c:	6560      	strne	r0, [r4, #84]	; 0x54
 810ba1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810ba22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810ba26:	81a3      	strheq	r3, [r4, #12]
 810ba28:	bf18      	it	ne
 810ba2a:	81a3      	strhne	r3, [r4, #12]
 810ba2c:	bd10      	pop	{r4, pc}

0810ba2e <__sclose>:
 810ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ba32:	f000 b81f 	b.w	810ba74 <_close_r>

0810ba36 <__ascii_wctomb>:
 810ba36:	b149      	cbz	r1, 810ba4c <__ascii_wctomb+0x16>
 810ba38:	2aff      	cmp	r2, #255	; 0xff
 810ba3a:	bf85      	ittet	hi
 810ba3c:	238a      	movhi	r3, #138	; 0x8a
 810ba3e:	6003      	strhi	r3, [r0, #0]
 810ba40:	700a      	strbls	r2, [r1, #0]
 810ba42:	f04f 30ff 	movhi.w	r0, #4294967295
 810ba46:	bf98      	it	ls
 810ba48:	2001      	movls	r0, #1
 810ba4a:	4770      	bx	lr
 810ba4c:	4608      	mov	r0, r1
 810ba4e:	4770      	bx	lr

0810ba50 <_write_r>:
 810ba50:	b538      	push	{r3, r4, r5, lr}
 810ba52:	4d07      	ldr	r5, [pc, #28]	; (810ba70 <_write_r+0x20>)
 810ba54:	4604      	mov	r4, r0
 810ba56:	4608      	mov	r0, r1
 810ba58:	4611      	mov	r1, r2
 810ba5a:	2200      	movs	r2, #0
 810ba5c:	602a      	str	r2, [r5, #0]
 810ba5e:	461a      	mov	r2, r3
 810ba60:	f7f5 fe03 	bl	810166a <_write>
 810ba64:	1c43      	adds	r3, r0, #1
 810ba66:	d102      	bne.n	810ba6e <_write_r+0x1e>
 810ba68:	682b      	ldr	r3, [r5, #0]
 810ba6a:	b103      	cbz	r3, 810ba6e <_write_r+0x1e>
 810ba6c:	6023      	str	r3, [r4, #0]
 810ba6e:	bd38      	pop	{r3, r4, r5, pc}
 810ba70:	10000528 	.word	0x10000528

0810ba74 <_close_r>:
 810ba74:	b538      	push	{r3, r4, r5, lr}
 810ba76:	4d06      	ldr	r5, [pc, #24]	; (810ba90 <_close_r+0x1c>)
 810ba78:	2300      	movs	r3, #0
 810ba7a:	4604      	mov	r4, r0
 810ba7c:	4608      	mov	r0, r1
 810ba7e:	602b      	str	r3, [r5, #0]
 810ba80:	f7f5 fe0f 	bl	81016a2 <_close>
 810ba84:	1c43      	adds	r3, r0, #1
 810ba86:	d102      	bne.n	810ba8e <_close_r+0x1a>
 810ba88:	682b      	ldr	r3, [r5, #0]
 810ba8a:	b103      	cbz	r3, 810ba8e <_close_r+0x1a>
 810ba8c:	6023      	str	r3, [r4, #0]
 810ba8e:	bd38      	pop	{r3, r4, r5, pc}
 810ba90:	10000528 	.word	0x10000528

0810ba94 <_fstat_r>:
 810ba94:	b538      	push	{r3, r4, r5, lr}
 810ba96:	4d07      	ldr	r5, [pc, #28]	; (810bab4 <_fstat_r+0x20>)
 810ba98:	2300      	movs	r3, #0
 810ba9a:	4604      	mov	r4, r0
 810ba9c:	4608      	mov	r0, r1
 810ba9e:	4611      	mov	r1, r2
 810baa0:	602b      	str	r3, [r5, #0]
 810baa2:	f7f5 fe0a 	bl	81016ba <_fstat>
 810baa6:	1c43      	adds	r3, r0, #1
 810baa8:	d102      	bne.n	810bab0 <_fstat_r+0x1c>
 810baaa:	682b      	ldr	r3, [r5, #0]
 810baac:	b103      	cbz	r3, 810bab0 <_fstat_r+0x1c>
 810baae:	6023      	str	r3, [r4, #0]
 810bab0:	bd38      	pop	{r3, r4, r5, pc}
 810bab2:	bf00      	nop
 810bab4:	10000528 	.word	0x10000528

0810bab8 <_isatty_r>:
 810bab8:	b538      	push	{r3, r4, r5, lr}
 810baba:	4d06      	ldr	r5, [pc, #24]	; (810bad4 <_isatty_r+0x1c>)
 810babc:	2300      	movs	r3, #0
 810babe:	4604      	mov	r4, r0
 810bac0:	4608      	mov	r0, r1
 810bac2:	602b      	str	r3, [r5, #0]
 810bac4:	f7f5 fe09 	bl	81016da <_isatty>
 810bac8:	1c43      	adds	r3, r0, #1
 810baca:	d102      	bne.n	810bad2 <_isatty_r+0x1a>
 810bacc:	682b      	ldr	r3, [r5, #0]
 810bace:	b103      	cbz	r3, 810bad2 <_isatty_r+0x1a>
 810bad0:	6023      	str	r3, [r4, #0]
 810bad2:	bd38      	pop	{r3, r4, r5, pc}
 810bad4:	10000528 	.word	0x10000528

0810bad8 <_lseek_r>:
 810bad8:	b538      	push	{r3, r4, r5, lr}
 810bada:	4d07      	ldr	r5, [pc, #28]	; (810baf8 <_lseek_r+0x20>)
 810badc:	4604      	mov	r4, r0
 810bade:	4608      	mov	r0, r1
 810bae0:	4611      	mov	r1, r2
 810bae2:	2200      	movs	r2, #0
 810bae4:	602a      	str	r2, [r5, #0]
 810bae6:	461a      	mov	r2, r3
 810bae8:	f7f5 fe02 	bl	81016f0 <_lseek>
 810baec:	1c43      	adds	r3, r0, #1
 810baee:	d102      	bne.n	810baf6 <_lseek_r+0x1e>
 810baf0:	682b      	ldr	r3, [r5, #0]
 810baf2:	b103      	cbz	r3, 810baf6 <_lseek_r+0x1e>
 810baf4:	6023      	str	r3, [r4, #0]
 810baf6:	bd38      	pop	{r3, r4, r5, pc}
 810baf8:	10000528 	.word	0x10000528

0810bafc <_malloc_usable_size_r>:
 810bafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810bb00:	1f18      	subs	r0, r3, #4
 810bb02:	2b00      	cmp	r3, #0
 810bb04:	bfbc      	itt	lt
 810bb06:	580b      	ldrlt	r3, [r1, r0]
 810bb08:	18c0      	addlt	r0, r0, r3
 810bb0a:	4770      	bx	lr

0810bb0c <_read_r>:
 810bb0c:	b538      	push	{r3, r4, r5, lr}
 810bb0e:	4d07      	ldr	r5, [pc, #28]	; (810bb2c <_read_r+0x20>)
 810bb10:	4604      	mov	r4, r0
 810bb12:	4608      	mov	r0, r1
 810bb14:	4611      	mov	r1, r2
 810bb16:	2200      	movs	r2, #0
 810bb18:	602a      	str	r2, [r5, #0]
 810bb1a:	461a      	mov	r2, r3
 810bb1c:	f7f5 fd88 	bl	8101630 <_read>
 810bb20:	1c43      	adds	r3, r0, #1
 810bb22:	d102      	bne.n	810bb2a <_read_r+0x1e>
 810bb24:	682b      	ldr	r3, [r5, #0]
 810bb26:	b103      	cbz	r3, 810bb2a <_read_r+0x1e>
 810bb28:	6023      	str	r3, [r4, #0]
 810bb2a:	bd38      	pop	{r3, r4, r5, pc}
 810bb2c:	10000528 	.word	0x10000528

0810bb30 <_init>:
 810bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb32:	bf00      	nop
 810bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bb36:	bc08      	pop	{r3}
 810bb38:	469e      	mov	lr, r3
 810bb3a:	4770      	bx	lr

0810bb3c <_fini>:
 810bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb3e:	bf00      	nop
 810bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bb42:	bc08      	pop	{r3}
 810bb44:	469e      	mov	lr, r3
 810bb46:	4770      	bx	lr
